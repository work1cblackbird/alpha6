#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Перем ПоследовательностиОтчета Экспорт;                // хранит последовательности отчета.

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	УстановитьПараметры();
	
	ВидРазвертки = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ВидРазвертки", КомпоновщикНастроек.Настройки);
	ПоТоварам    = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ПоТоварам",    КомпоновщикНастроек.Настройки);
	ПоДокументам = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ПоДокументам", КомпоновщикНастроек.Настройки);
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Структура.Очистить();
	
	Если ВидРазвертки=0 Тогда
		
		ПерваяГруппировка = Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПерваяГруппировка.Использование = Истина;
		НовоеПоле = ПерваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ПерваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ПерваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("СтатусПартии");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		ВложеннаяГруппировка = ПерваяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ВложеннаяГруппировка.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ВложеннаяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеКонтрагента");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
	ИначеЕсли ВидРазвертки=1 Тогда
		ПерваяГруппировка = Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПерваяГруппировка.Использование = Истина;
		НовоеПоле = ПерваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ПерваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ПерваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеКонтрагента");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		ВложеннаяГруппировка = ПерваяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ВложеннаяГруппировка.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ВложеннаяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("СтатусПартии");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	Иначе 
		ПерваяГруппировка = Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПерваяГруппировка.Использование = Истина;
		НовоеПоле = ПерваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ПерваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ПерваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("СтатусПартии");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		ВложеннаяГруппировка = ПерваяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ВложеннаяГруппировка.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ВложеннаяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеКонтрагента");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЕсли;
	
	Если ПоТоварам<>0 Тогда
		ВложеннаяГруппировка = ВложеннаяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ВложеннаяГруппировка.Использование = Истина;
		
		НовоеПоле = ВложеннаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ВложеннаяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
		Если ПоТоварам = 1 Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Иначе
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоДокументам = 1 Тогда
		ВложеннаяГруппировка = ВложеннаяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ВложеннаяГруппировка.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле = ВложеннаяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		ПолеГруппировки = ВложеннаяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Партия");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЕсли;
	
	ОтчетыПлатформаСервер.ВывестиОтчет(ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьНедоступныеНастройки() Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Группировки");
		
	Возврат СтруктураПолей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет основные параметры отчета
//
// Без параметров
//
Процедура УстановитьПараметры() 
	
	ДатаОкончания             = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ПериодГраница", КомпоновщикНастроек.Настройки);
	КоэффициентРублевогоКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ДатаОкончания, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаОкончания);
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КоэффициентРублевогоКурса", ?(КоэффициентРублевогоКурса=0, 1, КоэффициентРублевогоКурса));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Символ", Символы.НПП + НСтр("ru = '/'") + Символы.НПП);
	
КонецПроцедуры // УстановитьПараметры()

#КонецОбласти

#КонецЕсли