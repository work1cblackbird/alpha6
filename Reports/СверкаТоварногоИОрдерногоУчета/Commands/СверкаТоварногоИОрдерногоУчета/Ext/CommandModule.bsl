#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	Если ПараметрКоманды = Неопределено ИЛИ ПараметрКоманды.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОснования = Неопределено;
	СписокДокументов = НайтиПодчиненныеДокументы(ПараметрКоманды, ДатаОснования);	
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("ПодчиненныйДокумент", СписокДокументов);
	
	ПараметрыОтчета  = ПолучитьПараметрыОтчета(ПараметрКоманды);
	
	Если ДатаОснования <> Неопределено Тогда
		ПараметрыОтчета.Дата = ДатаОснования;	
	КонецЕсли;
	
	ОтчетыПлатформаКлиент.ОткрытьОтчет(
		"Отчет.СверкаТоварногоИОрдерногоУчета",
		"Основной",,,,
		ОтчетОтбор,
		ПараметрыОтчета.Дата,
		Дата(1,1,1));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получения параметров отчета
//
&НаСервере
Функция ПолучитьПараметрыОтчета(Документ)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Дата", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата"));
	
	Возврат ПараметрыОтчета;
	
КонецФункции // ПолучитьПараметрыОтчета()

&НаСервере
Функция НайтиПодчиненныеДокументы(Документ, ДатаОснования)
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(Документ);
 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваровОрдерныйСклад.Регистратор КАК ПодчиненныйДокумент
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад КАК ОстаткиТоваровОрдерныйСклад
		|ГДЕ
		|	ОстаткиТоваровОрдерныйСклад.Регистратор.ДокументОснование = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваровОрдерныйСклад.Регистратор";
	
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПриходныйСкладскойОрдер.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.ПриходныйСкладскойОрдер КАК ПриходныйСкладскойОрдер
			|ГДЕ
			|	ПриходныйСкладскойОрдер.Ссылка = &ДокументОснование
			|	И ПриходныйСкладскойОрдер.ДокументОснование <> НЕОПРЕДЕЛЕНО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасходныйСкладскойОрдер.ДокументОснование
			|ИЗ
			|	Документ.РасходныйСкладскойОрдер КАК РасходныйСкладскойОрдер
			|ГДЕ
			|	РасходныйСкладскойОрдер.Ссылка = &ДокументОснование
			|	И РасходныйСкладскойОрдер.ДокументОснование <> НЕОПРЕДЕЛЕНО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИнвентаризацияОрдерногоСклада.ДокументОснование
			|ИЗ
			|	Документ.ИнвентаризацияОрдерногоСклада КАК ИнвентаризацияОрдерногоСклада
			|ГДЕ
			|	ИнвентаризацияОрдерногоСклада.Ссылка = &ДокументОснование
			|	И ИнвентаризацияОрдерногоСклада.ДокументОснование <> НЕОПРЕДЕЛЕНО";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл  
			СписокДокументов.Добавить(Выборка.ДокументОснование);
			ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ДокументОснование, "Дата")
		КонецЦикла;
		
		Возврат СписокДокументов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.ПодчиненныйДокумент);
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

#КонецОбласти