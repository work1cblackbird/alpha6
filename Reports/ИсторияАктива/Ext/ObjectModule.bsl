#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Стандартная процедура настройки схемы компоновщика данных
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ИмяУпрВалюты  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), "Наименование");
	
	СтруктураПоказателей = Новый Массив;
	СтруктураПоказателей.Добавить("СуммаАмортизации");
	СтруктураПоказателей.Добавить("СуммаОбслуживания");
	СтруктураПоказателей.Добавить("ПервоначальнаяСтоимость");
	
	ВыводВалюты = СтрШаблон("(%1)", ИмяУпрВалюты);
	
	Для Каждого ТекНабор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для Каждого ТекПоле Из ТекНабор.Поля Цикл
			
			Если НЕ ТипЗнч(ТекПоле) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = СокрЛП(ТекПоле.Поле);
			Если ТекПоле.ПутьКДанным = ИмяПоля И СтруктураПоказателей.Найти(ИмяПоля) <> Неопределено Тогда
				Если СтрНайти(ТекПоле.Заголовок, ВыводВалюты) = 0 Тогда
					ТекПоле.Заголовок = СтрШаблон("%1 %2", ТекПоле.Заголовок, ВыводВалюты);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьКорректностьПоследовательностей()
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПредупреждатьОНарушенииПоследовательностей") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипОтчета = ТипЗнч(ЭтотОбъект);
	Результат = "";
	ПоследовательностиОтчета = Новый Массив;
	ПоследовательностиДляПроверки = Новый Структура;
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыВзаиморасчетов", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыВзаиморасчетов);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыЗаказы", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыЗаказы);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыОрдерныйСклад", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыОрдерныйСклад);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыПартий", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыПартий);
	// Последовательности ААА6
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыАвтомобили", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыАвтомобили);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыАвтомобилиОрдерныйСклад", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыАвтомобилиОрдерныйСклад);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыЗаказыНаАвтомобили", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыЗаказыНаАвтомобили);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыКомплектация", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыКомплектация);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыПроизводство", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыПроизводство);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыРасчетыСКонтрагентами", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыРасчетыСКонтрагентами);
	
	Для Каждого КлючЗначение Из ПоследовательностиДляПроверки Цикл
		
		Если КлючЗначение.Значение.Тип.СодержитТип(ТипОтчета) Тогда
			
			ПоследовательностиОтчета.Добавить(КлючЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПоследовательностиОтчета) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонфигурацияПоследовательностей = Обработки.ВосстановлениеПоследовательностей.КонфигурацияПоследовательностей();
	ОтобранныеПоследовательности = Новый Массив;
	
	Для Каждого Последовательность Из КонфигурацияПоследовательностей Цикл
		
		Если ПоследовательностиОтчета.Найти(Последовательность.Имя) <> Неопределено Тогда
			
			ОтобранныеПоследовательности.Добавить(Последовательность);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтобранныеПоследовательности) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПолучения = Обработки.ВосстановлениеПоследовательностей.СоздатьПараметрыПолученияНеактуальныхДокументов();
	ПараметрыПолучения.ПоДату = ТекущаяДатаСеанса();
	НеактуальныеДокументы = Обработки
		.ВосстановлениеПоследовательностей
		.ПолучитьНеактуальныеДокументы(ОтобранныеПоследовательности, ПараметрыПолучения);
	
	Если НЕ ЗначениеЗаполнено(НеактуальныеДокументы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияПоПоследовательностям = Новый Массив;
	СообщенияПоОрганизациям = Новый Соответствие;
	
	Для Каждого Последовательность Из ОтобранныеПоследовательности Цикл
		
		Условие = Новый Структура("ИмяПоследовательности", Последовательность.Имя);
		ДокументыПоследовательности = НеактуальныеДокументы.НайтиСтроки(Условие);
		
		Если НЕ ЗначениеЗаполнено(ДокументыПоследовательности) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыПоследовательности Цикл
			
			Если СообщенияПоОрганизациям.Получить(Строка.Организация) <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			МоментВремени = Формат(Строка.МоментВремени, "ДЛФ=D");
			
			Если Строка.Граница <> Неопределено Тогда
				
				МоментВремени = СтрШаблон(
					"%1 - %2 № %3",
					Строка.Граница.Дата,
					Строка.Граница.Метаданные().Синоним,
					СокрЛП(Строка.Граница.Номер));
				
			КонецЕсли;
			
			Сообщение = СтрШаблон(НСтр("ru = 'Последовательность: <%1> актуальна по организации <%2> %3'"),
				Последовательность.Представление, Строка.Организация, МоментВремени);
			СообщенияПоОрганизациям.Вставить(Строка.Организация, Сообщение);
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из СообщенияПоОрганизациям Цикл
			
			СообщенияПоПоследовательностям.Добавить(КлючЗначение.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СообщенияПоПоследовательностям) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияПоПоследовательностям.Вставить(0, НСтр("ru = 'Проверка последовательностей:'"));
	
	ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПоПоследовательностям, Символы.ПС));
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуОтчета(ТаблицаДокументов, ВыборкаДокумента, ВалютаУпр)
	ТекДокумент = ВыборкаДокумента.Документ;
	ТипДокумента = ТипЗнч(ТекДокумент);
	
	ВыборкаДетали = ВыборкаДокумента.Выбрать();
	ВыборкаДетали.Следующий();
	ХО       = ВыборкаДетали.ХО;
	ХОПредст = ВыборкаДетали.ХОПредставление;
	
	МассивСтрокШаблона = Новый Массив;
	
	// case на вид документа
	Если ТипДокумента = Тип("ДокументСсылка.ВводОстатковПрочихАктивов") Тогда
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Количество: %1,'"), 
											Формат(ВыборкаДокумента.Количество, "ЧДЦ=3; ЧН=0")));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"), 
			Формат(ВыборкаДокумента.БалансоваяСтоимостьУпр - ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2"), ВалютаУпр));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'На момент ввода:'")));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = '- балансовая стоимость: %1 %2'"),
			Формат(ВыборкаДокумента.БалансоваяСтоимостьУпр, "ЧДЦ=2; ЧН=0"), ВалютаУпр));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = '- сумма амортизации: %1 %2'"),
			Формат(ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2; ЧН=0"), ВалютаУпр));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = '- сумма обслуживания: %1 %2'"),
			Формат(ВыборкаДокумента.СуммаОбслуживанияУпр, "ЧДЦ=2; ЧН=0"), ВалютаУпр));
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводВЭксплуатацию") ИЛИ ТипДокумента = Тип("ДокументСсылка.ВводВЭксплуатациюАвтомобилей") Тогда
		флЕстьАмортизация = (ВыборкаДетали.Количество() = 2);
		Если флЕстьАмортизация Тогда
			ВыборкаДетали.Следующий();
			ХОПредст = СтрШаблон("%1, %2", Строка(ХОПредст), Строка(ВыборкаДетали.ХОПредставление));
		КонецЕсли;
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Количество: %1,'"), Формат(ВыборкаДокумента.Количество, "ЧДЦ=3; ЧН=0")));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"), 
			Формат(ВыборкаДокумента.БалансоваяСтоимостьУпр, "ЧДЦ=2"), ВалютаУпр));
		
		Если флЕстьАмортизация Тогда
			МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Начислена амортизация: %1 %2'"),
				Формат(ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2"), ВалютаУпр));
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПеремещениеАктивов") Тогда
		
		// Считываем данные расхода/
		П1 = ВыборкаДетали.Подразделение; 
		ТЭ1 = ВыборкаДетали.ТипЭксплуатации; 
		МОЛ1 = ВыборкаДетали.МОЛ;
		ВыборкаДетали.Следующий(); // считываем данные прихода
		П2 = ВыборкаДетали.Подразделение; 
		ТЭ2 = ВыборкаДетали.ТипЭксплуатации; 
		МОЛ2 = ВыборкаДетали.МОЛ;
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Количество: %1,'"), Формат(ВыборкаДокумента.Количество, "ЧДЦ=3; ЧН=0")));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"), 
			Формат(ВыборкаДокумента.БалансоваяСтоимостьУпр - ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2"), ВалютаУпр));
		
		МассивДопИнформации = Новый Массив;
		Если П1 <> П2 Тогда
			МассивДопИнформации.Добавить(СтрШаблон(НСтр("ru = '- подразделение: ""%1"" -> ""%2""'"), П1, П2));
		КонецЕсли;
		Если ТЭ1 <> ТЭ2 Тогда
			МассивДопИнформации.Добавить(СтрШаблон(НСтр("ru = '- тип эксплуатации: ""%1"" -> ""%2""'"), ТЭ1, ТЭ2));
		КонецЕсли;
		Если МОЛ1 <> МОЛ2 Тогда
			МассивДопИнформации.Добавить(СтрШаблон(НСтр("ru = '- МОЛ: ""%1"" -> ""%2""'"), МОЛ1, МОЛ2));
		КонецЕсли;
		
		Если МассивДопИнформации.Количество() > 0 Тогда
			
			МассивСтрокШаблона.Добавить(НСтр("ru = 'Отправитель/получатель:'"));
			МассивСтрокШаблона.Добавить(СтрСоединить(МассивДопИнформации, ", "));
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеАктивов") Тогда
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Количество: %1,'"), Формат(ВыборкаДокумента.Количество, "ЧДЦ=3; ЧН=0")));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"), 
			Формат(ВыборкаДокумента.БалансоваяСтоимостьУпр - ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2"), ВалютаУпр));
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияАктивов") Тогда
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Количество: %1,'"), Формат(ВыборкаДокумента.Количество, "ЧДЦ=3; ЧН=0")));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"), 
			Формат(ВыборкаДетали.СуммаПродажи, "ЧДЦ=2"), ВалютаУпр));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Покупатель: %1'"),      ВыборкаДетали.Покупатель));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Договор продажи: %1'"), ВыборкаДетали.ДоговорПокупателя));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма списания: %1 %2'"), 
			Формат(ВыборкаДокумента.БалансоваяСтоимостьУпр - ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2"), ВалютаУпр));
		
		Если ВыборкаДетали.СуммаПродажи - ВыборкаДокумента.БалансоваяСтоимостьУпр + ВыборкаДокумента.СуммаАмортизацииУпр <> 0 Тогда
			МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Выручка от реализации: %1 %2'"), 
				Формат(ВыборкаДетали.СуммаПродажи - ВыборкаДокумента.БалансоваяСтоимостьУпр + ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2"), ВалютаУпр));
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Амортизация") Тогда
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"),
			Формат(ВыборкаДокумента.СуммаАмортизацииУпр, "ЧДЦ=2"), ВалютаУпр));
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОбслуживаниеАктива") Тогда
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"), 
			Формат(ВыборкаДетали.СуммаОбслуживанияУпр, "ЧДЦ=2"), ВалютаУпр));
		МассивСтрокШаблона.Добавить(НСтр("ru = 'В том числе:'"));
		
		Если ВыборкаДетали.СуммаСобственныхУслуг <> 0 Тогда
			МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = '- обслужен подразделением %1 на сумму %2 %3'"), 
				ВыборкаДетали.ПодразделениеУслуги, Формат(ВыборкаДетали.СуммаСобственныхУслуг, "ЧДЦ=2"), ВалютаУпр));
		КонецЕсли;
		
		Если ВыборкаДетали.СуммаСтороннихУслуг <> 0 Тогда
			МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = '- обслужен контрагентом %1 на сумму %2 %3'"), 
				ВыборкаДетали.Контрагент, Формат(ВыборкаДетали.СуммаСтороннихУслуг, "ЧДЦ=2"), ВалютаУпр));
		КонецЕсли;
		
		Если ВыборкаДетали.СуммаСписания <> 0 Тогда
			МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = '- списано номенкл. со склада %1 на сумму %2 %3'"), 
				ВыборкаДетали.Склад, Формат(ВыборкаДетали.СуммаСписания, "ЧДЦ=2"), ВалютаУпр));
		КонецЕсли;
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Тип обслуживания: %1'"), ВыборкаДетали.ТипОбслуживания));
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыводИзЭксплуатацииАвтомобилей") Тогда
		
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Количество: %1,'"), Формат(ВыборкаДокумента.Количество, "ЧДЦ=3; ЧН=0")));
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"), 
			Формат(ВыборкаДокумента.БалансоваяСтоимостьУпр, "ЧДЦ=2"), ВалютаУпр));
		
	КонецЕсли;
	// Добавим комментарий
	
	Если НЕ ПустаяСтрока(ВыборкаДокумента.ДокументКомментарий) Тогда
		МассивСтрокШаблона.Добавить(СтрШаблон(НСтр("ru = 'Комментарий: %1'"), ВыборкаДокумента.ДокументКомментарий));
	КонецЕсли;
	
	ИнфСтрока = СтрСоединить(МассивСтрокШаблона, Символы.ПС);
	
	НоваяСтрока             = ТаблицаДокументов.Добавить();
	НоваяСтрока.Документ    = ТекДокумент;
	НоваяСтрока.ХозОперация = ХОПредст;
	НоваяСтрока.Информация  = ИнфСтрока;
	
КонецПроцедуры // ЗаполнитьСтрокуОтчета()

Функция НаборыДанныхОтчета()
	
	Результат = Новый Структура;
	
	НачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение;
	КонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
	Актив         = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Актив").Значение;
	ВалютаУпр     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), "Наименование");
	
	Если Актив = Неопределено Тогда
		Актив = Справочники.ПрочиеАктивы.ПустаяСсылка();
	КонецЕсли;
	
	Если Актив.Пустая() Тогда
		ВызватьИсключение Нстр("ru = 'Не указан прочий актив.'");
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Актив",         Актив);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Валюта", СтрШаблон("(%1)", ВалютаУпр));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПрочиеАктивыВЭксплуатации.Период КАК ДатаВвода,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВывода,
	               |	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК ПрочийАктив,
	               |	ПрочиеАктивыВЭксплуатации.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ДатаВводВыводАктива
	               |ИЗ
	               |	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
	               |ГДЕ
	               |	ПрочиеАктивыВЭксплуатации.ПрочийАктив = &Актив
	               |	И ТИПЗНАЧЕНИЯ(ПрочиеАктивыВЭксплуатации.Регистратор) В (ТИП(Документ.ВводВЭксплуатациюАвтомобилей), ТИП(Документ.ВводОстатковПрочихАктивов), ТИП(Документ.ВводВЭксплуатацию))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ПрочиеАктивыВЭксплуатации.Период,
	               |	ПрочиеАктивыВЭксплуатации.ПрочийАктив,
	               |	ПрочиеАктивыВЭксплуатации.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
	               |ГДЕ
	               |	ПрочиеАктивыВЭксплуатации.ПрочийАктив = &Актив
	               |	И ТИПЗНАЧЕНИЯ(ПрочиеАктивыВЭксплуатации.Регистратор) В (ТИП(Документ.ВыводИзЭксплуатацииАвтомобилей), ТИП(Документ.СписаниеАктивов), ТИП(Документ.РеализацияАктивов))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОбороты.СуммаАмортизацииУпрПриход, 0)) КАК СуммаАмортизации,
	               |	СУММА(ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОбороты.СуммаОбслуживанияУпрПриход, 0)) КАК СуммаОбслуживания,
	               |	ПрочиеАктивыВЭксплуатацииОбороты.ПрочийАктив КАК ПрочийАктив
	               |ПОМЕСТИТЬ ОборотыАктиваЗаПериод
	               |ИЗ
	               |	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ПрочийАктив = &Актив) КАК ПрочиеАктивыВЭксплуатацииОбороты
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ПрочиеАктивыВЭксплуатацииОбороты.Регистратор) В (ТИП(Документ.ВводВЭксплуатациюАвтомобилей), ТИП(Документ.ВыводИзЭксплуатацииАвтомобилей), ТИП(Документ.ВводОстатковПрочихАктивов), ТИП(Документ.ВводВЭксплуатацию), ТИП(Документ.Амортизация), ТИП(Документ.ОбслуживаниеАктива))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПрочиеАктивыВЭксплуатацииОбороты.ПрочийАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЕСТЬNULL(ДатаВводВыводАктива.ДатаВвода, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаВвода,
	               |	МАКСИМУМ(ЕСТЬNULL(ДатаВводВыводАктива.ДатаВывода, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаВыбытия,
	               |	МАКСИМУМ(ЕСТЬNULL(ОборотыАктиваЗаПериод.СуммаАмортизации, 0)) КАК СуммаАмортизации,
	               |	МАКСИМУМ(ЕСТЬNULL(ОборотыАктиваЗаПериод.СуммаОбслуживания, 0)) КАК СуммаОбслуживания,
	               |	МАКСИМУМ(ДатаВводВыводАктива.ПрочийАктив.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость
	               |ИЗ
	               |	ДатаВводВыводАктива КАК ДатаВводВыводАктива
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыАктиваЗаПериод КАК ОборотыАктиваЗаПериод
	               |		ПО ДатаВводВыводАктива.ПрочийАктив = ОборотыАктиваЗаПериод.ПрочийАктив";
	
	ТаблицаИнформацияАтива = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаИнформацияАтива.Количество() = 0
		ИЛИ ТаблицаИнформацияАтива[0].ДатаВвода = Дата(1, 1, 1)
		ИЛИ ТаблицаИнформацияАтива[0].ДатаВвода = Null Тогда
		ВызватьИсключение Нстр("ru = 'Актив не введен в эксплуатацию.'");
		Возврат Результат;
	КонецЕсли;
	
	ДатаВвода   = ТаблицаИнформацияАтива[0].ДатаВвода;
	ДатаВыбытия = ?(ТаблицаИнформацияАтива[0].ДатаВвода > ТаблицаИнформацияАтива[0].ДатаВыбытия, Дата(1, 1, 1), ТаблицаИнформацияАтива[0].ДатаВыбытия);
	
	Запрос.УстановитьПараметр("ДатаВвода",           ДатаВвода);
	Запрос.УстановитьПараметр("ДатаВыбытия",         ДатаВыбытия);
	Запрос.УстановитьПараметр("НачалоПериодаАктива", ДатаВвода + 1);
	Запрос.УстановитьПараметр("КонецПериодаАктива",  Макс((ДатаВыбытия - 1), КонецДня(КонецПериода)));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭксплАктивыОиО.КоличествоОстаток КАК КоличествоНач,
	               |	ЭксплАктивыОиО.БалансоваяСтоимостьУпрОстаток КАК БалансоваяСтоимостьНач,
	               |	ЭксплАктивыОиО.БалансоваяСтоимостьУпрОстаток - ЭксплАктивыОиО.СуммаАмортизацииУпрОстаток КАК ОстаточнаяСтоимостьНач,
	               |	0 КАК КоличествоКон,
	               |	0 КАК БалансоваяСтоимостьКон,
	               |	0 КАК ОстаточнаяСтоимостьКон
	               |ПОМЕСТИТЬ ТаблцаОстатокАктива
	               |ИЗ
	               |	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(&НачалоПериодаАктива, ПрочийАктив = &Актив) КАК ЭксплАктивыОиО
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	0,
	               |	0,
	               |	ЭксплАктивыОиО.КоличествоОстаток,
	               |	ЭксплАктивыОиО.БалансоваяСтоимостьУпрОстаток,
	               |	ЭксплАктивыОиО.БалансоваяСтоимостьУпрОстаток - ЭксплАктивыОиО.СуммаАмортизацииУпрОстаток
	               |ИЗ
	               |	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(&КонецПериодаАктива, ПрочийАктив = &Актив) КАК ЭксплАктивыОиО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	""Количество"" КАК ТипРесурса,
	               |	СУММА(ТаблцаОстатокАктива.КоличествоНач) КАК НаНачалоАктива,
	               |	СУММА(ТаблцаОстатокАктива.КоличествоКон) КАК НаКонецАктива,
	               |	МАКСИМУМ(1) КАК Порядок
	               |ИЗ
	               |	ТаблцаОстатокАктива КАК ТаблцаОстатокАктива
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""Балансовая стоимость "" + &Валюта,
	               |	СУММА(ТаблцаОстатокАктива.БалансоваяСтоимостьНач),
	               |	СУММА(ТаблцаОстатокАктива.БалансоваяСтоимостьКон),
	               |	МАКСИМУМ(2)
	               |ИЗ
	               |	ТаблцаОстатокАктива КАК ТаблцаОстатокАктива
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""Остаточная стоимость "" + &Валюта,
	               |	СУММА(ТаблцаОстатокАктива.ОстаточнаяСтоимостьНач),
	               |	СУММА(ТаблцаОстатокАктива.ОстаточнаяСтоимостьКон),
	               |	МАКСИМУМ(3)
	               |ИЗ
	               |	ТаблцаОстатокАктива КАК ТаблцаОстатокАктива
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПрочиеАктивыВЭксплуатации.Регистратор КАК Документ,
	               |	ПРЕДСТАВЛЕНИЕ(ПрочиеАктивыВЭксплуатации.Регистратор) КАК ДокументПредставление,
	               |	ПРЕДСТАВЛЕНИЕ(ПрочиеАктивыВЭксплуатации.Регистратор.Комментарий) КАК ДокументКомментарий,
	               |	ПрочиеАктивыВЭксплуатации.ХозОперация КАК ХО,
	               |	ПРЕДСТАВЛЕНИЕ(ПрочиеАктивыВЭксплуатации.ХозОперация) КАК ХОПредставление,
	               |	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр, 0) КАК БалансоваяСтоимостьУпр,
	               |	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр, 0) КАК СуммаАмортизацииУпр,
	               |	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаОбслуживанияУпр, 0) КАК СуммаОбслуживанияУпр,
	               |	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.Количество, 0) КАК Количество,
	               |	ПРЕДСТАВЛЕНИЕ(ПрочиеАктивыВЭксплуатации.ТипОбслуживания) КАК ТипОбслуживания,
	               |	ПРЕДСТАВЛЕНИЕ(ПрочиеАктивыВЭксплуатации.ТипЭксплуатации) КАК ТипЭксплуатации,
	               |	ПРЕДСТАВЛЕНИЕ(ПрочиеАктивыВЭксплуатации.МОЛ) КАК МОЛ,
	               |	ПРЕДСТАВЛЕНИЕ(ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании) КАК Подразделение,
	               |	ПРЕДСТАВЛЕНИЕ(ДоходыИРасходыОбороты.ПодразделениеКомпании) КАК ПодразделениеУслуги,
	               |	ЕСТЬNULL(ДоходыИРасходыОбороты.ДоходУпрПриход, 0) КАК СуммаСобственныхУслуг,
	               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ВзаиморасчетыКомпанииОбороты.Контрагент, РасчетыСКонтрагентамиОбороты.Контрагент)) КАК Контрагент,
	               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ВзаиморасчетыКомпанииОбороты.ДоговорВзаиморасчетов, РасчетыСКонтрагентамиОбороты.ДоговорВзаиморасчетов)) КАК Договор,
	               |	ЕСТЬNULL(ЕСТЬNULL(ВзаиморасчетыКомпанииОбороты.СуммаУпрРасход, РасчетыСКонтрагентамиОбороты.СуммаУпрРасход), 0) КАК СуммаСтороннихУслуг,
	               |	ПРЕДСТАВЛЕНИЕ(ПартииТоваровКомпанииОбороты.СкладКомпании) КАК Склад,
	               |	ЕСТЬNULL(ПартииТоваровКомпанииОбороты.СуммаУпрРасход, 0) КАК СуммаСписания,
	               |	ПРЕДСТАВЛЕНИЕ(РеализацияАктивовАктивы.Ссылка.Контрагент) КАК Покупатель,
	               |	ПРЕДСТАВЛЕНИЕ(РеализацияАктивовАктивы.Ссылка.ДоговорВзаиморасчетов) КАК ДоговорПокупателя,
	               |	РеализацияАктивовАктивы.Количество КАК КоличествоПродажи,
	               |	РеализацияАктивовАктивы.Сумма * РеализацияАктивовАктивы.Ссылка.КурсДокумента / РеализацияАктивовАктивы.Ссылка.КурсВалютыУпр КАК СуммаПродажи
	               |ИЗ
	               |	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходы.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК ДоходыИРасходыОбороты
	               |		ПО ПрочиеАктивыВЭксплуатации.Регистратор = ДоходыИРасходыОбороты.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыКомпании.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК ВзаиморасчетыКомпанииОбороты
	               |		ПО ПрочиеАктивыВЭксплуатации.Регистратор = ВзаиморасчетыКомпанииОбороты.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК РасчетыСКонтрагентамиОбороты
	               |		ПО ПрочиеАктивыВЭксплуатации.Регистратор = РасчетыСКонтрагентамиОбороты.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК ПартииТоваровКомпанииОбороты
	               |		ПО ПрочиеАктивыВЭксплуатации.Регистратор = ПартииТоваровКомпанииОбороты.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	               |		ПО ПрочиеАктивыВЭксплуатации.Регистратор = РеализацияАктивовАктивы.Ссылка
	               |			И ПрочиеАктивыВЭксплуатации.ПрочийАктив = РеализацияАктивовАктивы.ПрочийАктив
	               |ГДЕ
	               |	ПрочиеАктивыВЭксплуатации.ПрочийАктив = &Актив
	               |	И ПрочиеАктивыВЭксплуатации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |ИТОГИ
	               |	МАКСИМУМ(БалансоваяСтоимостьУпр),
	               |	МАКСИМУМ(СуммаАмортизацииУпр),
	               |	МАКСИМУМ(СуммаОбслуживанияУпр),
	               |	МАКСИМУМ(Количество),
	               |	МАКСИМУМ(КоличествоПродажи)
	               |ПО
	               |	Документ";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", Метаданные.РегистрыНакопления.ПрочиеАктивыВЭксплуатации.СтандартныеРеквизиты.Регистратор.Тип);
	ТаблицаДокументов.Колонки.Добавить("ХозОперация", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументов.Колонки.Добавить("Информация",  Новый ОписаниеТипов("Строка"));
	
	ВыборкаДокументов = ПакетЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Документ");
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ЗаполнитьСтрокуОтчета(ТаблицаДокументов, ВыборкаДокументов, ВалютаУпр);
	КонецЦикла;
	
	Результат.Вставить("ТаблицаИнформацияАтива", ТаблицаИнформацияАтива);
	Результат.Вставить("ТаблицаОстатковАктива",  ПакетЗапроса[1]);
	Результат.Вставить("ТаблицаДокументов",      ТаблицаДокументов);
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'История актива ""%1"" за период с %2 по %3'"), СокрЛП(Актив), Формат(НачалоПериода, "ДЛФ=D"), Формат(КонецПериода, "ДЛФ=D"));
	
	Результат.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	
	Возврат Результат;
	
КонецФункции

// Процедура - При компоновке результата.
//
// Параметры:
//  ДокументРезультат	 - ТабличныйДокумент				 - Результат работы отчета
//  ДанныеРасшифровки	 - ДанныеРасшифровкиКомпоновкиДанных - Хранит данные расшифровки
//  СтандартнаяОбработка - Булево							 - Признак Стандартной обработки.
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ПроверитьКорректностьПоследовательностей();
	
	ВнешниеНаборыДанных = НаборыДанныхОтчета();
	
	ТекстЗаголовка = ВнешниеНаборыДанных.ТекстЗаголовка;
	ВнешниеНаборыДанных.Удалить("ТекстЗаголовка");
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// !!!_alalek Косяк платформы. невозможно установить формат заголовка.
	Макет = Неопределено;
	Если НЕ Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления") = Неопределено И НЕ БиблиотекаМакетовОформленияКомпоновкиДанных.Найти(Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления").Значение) = Неопределено Тогда
		Макет = БиблиотекаМакетовОформленияКомпоновкиДанных.Найти(Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления").Значение).ПолучитьМакет();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, Макет);
	
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ВременныйТабличныйДокумент);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	// Зададим заголовок
	ВременныйТабличныйДокумент.Область("R2C1").Текст = ТекстЗаголовка;
	
	// Выведем содержимое отчета
	ДокументРезультат.Вывести(ВременныйТабличныйДокумент);
	
КонецПроцедуры // СформироватьТабличныйДокумент()

#КонецОбласти

#КонецЕсли
