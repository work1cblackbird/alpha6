

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимВыбораРоли = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ВыборРоли", Ложь);
	
	Заголовок = ?(РежимВыбораРоли, НСтр("ru = 'Выбор роли'"), НСтр("ru = 'Выбор объекта'"));
	Элементы.Картинка.Видимость = НЕ РежимВыбораРоли;
	
	
	ДеревоОбъектовМетаданныхЗаполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗавершитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ЗавершитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Процедура заполняет дерево значений объектов конфигурации.
// Если список значений "Параметры.КоллекцииВыбираемыхОбъектовМетаданных" не пуст, тогда
// дерево будет ограничено переданным списком коллекций объектов метаданных.
//  Если объекты метаданных в сформированном дереве будут найдены в списке значений
// "Параметры.ВыбранныеОбъектыМетаданных", тогда они будут помечены, как выбранные.
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЭтоКоллекцияОбщие");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ПолноеИмя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Родитель");
	
	Если РежимВыбораРоли Тогда
		
		Строка = Новый Структура;
		Строка.Вставить("Имя", "Роли");
		Строка.Вставить("Синоним", НСтр("ru = 'Роли'"));
		Строка.Вставить("Картинка", 41);
		Строка.Вставить("КартинкаОбъекта", 42);
		Строка.Вставить("ЭтоКоллекцияОбщие", Истина);
		Строка.Вставить("ПолноеИмя", "");
		Строка.Вставить("Родитель", ДеревоОбъектовМетаданных);
		
		ДобавитьЭлементДереваОбъектовМетаданных(Строка, ?(Строка.Имя = "Подсистемы", Метаданные.Подсистемы, Неопределено));
		
	Иначе
		
		КоллекцииОбъектовМетаданных_НоваяСтрока("Константы",                    НСтр("ru = 'Константы'"),                      БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("Справочники",                  НСтр("ru = 'Справочники'"),                    БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("Документы",                    НСтр("ru = 'Документы'"),                      БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("ЖурналыДокументов",            НСтр("ru = 'Журналы документов'"),             БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("Отчеты",                       НСтр("ru = 'Отчеты'"),                         БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("Обработки",                    НСтр("ru = 'Обработки'"),                      БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовХарактеристик",      НСтр("ru = 'Планы видов характеристик'"),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыСчетов",                  НСтр("ru = 'Планы счетов'"),                   БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовРасчета",            НСтр("ru = 'Планы видов характеристик'"),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыСведений",             НСтр("ru = 'Регистры сведений'"),              БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыНакопления",           НСтр("ru = 'Регистры накопления'"),            БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыБухгалтерии",          НСтр("ru = 'Регистры бухгалтерии'"),           БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыРасчета",              НСтр("ru = 'Регистры расчета'"),               БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("БизнесПроцессы",               НСтр("ru = 'Бизнес-процессы'"),                БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, КоллекцииОбъектовМетаданных);
		КоллекцииОбъектовМетаданных_НоваяСтрока("Задачи",                       НСтр("ru = 'Задачи'"),                         БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, КоллекцииОбъектовМетаданных);
		
		// Создание предопределенных элементов.
		
		ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
		ПараметрыЭлемента.Имя = Метаданные.Имя;
		ПараметрыЭлемента.Синоним = Метаданные.Синоним;
		ПараметрыЭлемента.Картинка = 79;
		ПараметрыЭлемента.Родитель = ДеревоОбъектовМетаданных;
		ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
		
		// Заполнение дерева объектов метаданных.
		Для Каждого Строка Из КоллекцииОбъектовМетаданных Цикл
			Строка.Родитель = ЭлементКонфигурация;
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, Неопределено);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новую структуру параметров элемента дерева объектов метаданных.
//
// Возвращаемое значение:
//   Структура с полями:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//
&НаСервере
Функция ПараметрыЭлементаДереваОбъектовМетаданных()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя", "");
	СтруктураПараметров.Вставить("ПолноеИмя", "");
	СтруктураПараметров.Вставить("Синоним", Ложь);
	СтруктураПараметров.Вставить("Картинка", 0);
	СтруктураПараметров.Вставить("КартинкаОбъекта", Неопределено);
	СтруктураПараметров.Вставить("Родитель", Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Добавляет новую строку в дерево значений формы (дерево),
// а также заполняет полный набор строк из метаданных по переданному параметру.
//
// Если параметр Подсистемы заполнен, то вызывается рекурсивно для всех дочерних подсистем.
//
// Параметры:
//   ПараметрыЭлемента - Структура с полями:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//   Подсистемы      - если заполнен, то содержит значение Метаданные.Подсистемы (коллекцию элементов).
//   Проверять       - Булево - признак проверки на принадлежность родительским подсистемам.
// 
// Возвращаемое значение:
// 
//   Строка дерева объектов метаданных.
//
&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, Проверять = Истина)
	
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если Подсистемы <> Неопределено  И Параметры.Свойство("ТолькоПодсистемыСКИ") 
		И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя) 
		И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Подсистемы = Неопределено Тогда
		
		Если Метаданные[ПараметрыЭлемента.Имя].Количество() = 0 Тогда
			
			// Если нет ни одного объекта метаданных из нужной ветки. 
			// Например, нет ни одного регистра бухгалтерии,
			// то корень "Регистры бухгалтерии" добавлять не нужно.
			Возврат Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
		
		Для Каждого ЭлементКоллекцииМетаданных Из Метаданные[ПараметрыЭлемента.Имя] Цикл
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
		КонецЦикла;
		
		Возврат НоваяСтрока;
		
	КонецЕсли;
		
	Если Подсистемы.Количество() = 0 И ПараметрыЭлемента.Имя = "Подсистемы" Тогда
		// Если нет ни одной подсистемы, то корень "Подсистемы" добавлять не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
	
	Для Каждого ЭлементКоллекцииМетаданных Из Подсистемы Цикл
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Картинка = ЭлементКоллекцииМетаданных.Картинка;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, ЭлементКоллекцииМетаданных.Подсистемы, Ложь);
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПараметрыСтроки, ЭтоОбъектМетаданных = Ложь)
	
	Коллекция = ПараметрыСтроки.Родитель.ПолучитьЭлементы();
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПараметрыСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПараметрыСтроки.Синоним), ПараметрыСтроки.Синоним, ПараметрыСтроки.Имя);
	НоваяСтрока.Картинка            = ПараметрыСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПараметрыСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоОбъектМетаданных;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет новую строку в таблицу значений видов объектов метаданных
// конфигурации.
//
// Параметры:
// Имя           - имя объекта метаданных или вида объекта метаданных.
// Синоним       - синоним объекта метаданных.
// Картинка      - картинка поставленная в соответствие объекту метаданных
//                 или виду объекта метаданных.
// ЭтоКоллекцияОбщие - признак того, что текущий элемент содержит подэлементы.
//
&НаСервере
Процедура КоллекцииОбъектовМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие = ЭтоКоллекцияОбщие;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРоль(ИмяРоли)
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Роль." + ИмяРоли);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыбор()
	
	Результат = Неопределено;
	
	ТекущиеДанные = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ТекущиеДанные.ЭтоОбъектМетаданных Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВыбораРоли Тогда
		Результат = ПолучитьРоль(ТекущиеДанные.Имя);
	Иначе
		Результат = ТекущиеДанные.ПолноеИмя;
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти
