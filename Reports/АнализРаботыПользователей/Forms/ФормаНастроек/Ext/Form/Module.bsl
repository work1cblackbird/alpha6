///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Краткая форма настроек отчета"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	УстановитьУсловноеОформление();
	Попытка
		СтруктураОграничений = ОтчетОбъект.ПолучитьНедоступныеНастройки();
		
		Если СтруктураОграничений.Свойство("Группировки") Тогда
			Элементы.ДобавитьТаблицу.Видимость         = Ложь;
			Элементы.КоманднаяПанельСтраницы.Видимость = Ложь;
			Элементы.ГруппаВидТаблицы.Видимость        = Ложь;
			Элементы.ГруппаСтроки.Видимость            = Ложь;
			Элементы.ГруппаКолонки.Видимость           = Ложь;
			Элементы.ГруппаДиаграмма.Видимость         = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаПоказатели.Видимость = (НЕ СтруктураОграничений.Свойство("Показатели"));
		Элементы.ГруппаПорядок.Видимость    = (НЕ СтруктураОграничений.Свойство("Порядок"));
		Элементы.ГруппаОтборы.Видимость     = (НЕ СтруктураОграничений.Свойство("Отборы"));
		Элементы.ГруппаПараметры.Видимость  = (НЕ СтруктураОграничений.Свойство("Параметры"));
		Элементы.Страницы.Видимость         = (НЕ СтруктураОграничений.Свойство("Таблицы"));
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при изменении видимости'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Параметры.Свойство("КлючОбъекта") Тогда
		КлючОбъекта = Параметры.КлючОбъекта;
		СхемаКомпоновки     = Параметры.СхемаКомпоновки;
		Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + Параметры.ЗаголовокОтчета;
		ЗаголовокОтчета = Параметры.ЗаголовокОтчета;
	Иначе
		ОтчетМетаданные = ОтчетОбъект.Метаданные();
		КлючОбъекта     = ОтчетМетаданные.ПолноеИмя();
		СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
		Если Параметры.Свойство("ИдентификаторВладельца") Тогда
			СхемаКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Параметры.ИдентификаторВладельца);
		Иначе
			СхемаКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КонецЕсли;
		
		Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + СокрЛП(ОтчетМетаданные.Представление());
		ЗаголовокОтчета = СокрЛП(ОтчетМетаданные.Представление());
	КонецЕсли;
	
	Если Параметры.Свойство("ПредставлениеСформировать") Тогда
		Команды.СформироватьОтчет.Заголовок = Параметры.ПредставлениеСформировать.Заголовок;
		Команды.СформироватьОтчет.Подсказка = Параметры.ПредставлениеСформировать.Подсказка;
	КонецЕсли;
	
	Параметры.Свойство("НачалоПериода", НачалоПериода);
	Параметры.Свойство("КонецПериода",  КонецПериода);
	Параметры.Свойство("ВидПериода",    ВидПериода);
	
	Параметры.Свойство("ОтсекатьОтключенныеГруппировки", ОтсекатьОтключенныеГруппировки);
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, "Период" + ВидПериода);
	
	СписокВыбора = Элементы.ТипДиаграммыОтчета.СписокВыбора;
	Для Каждого ТекущийТипДиаграммы Из ТипДиаграммы Цикл
		ИмяТипаДиаграммы = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ТекущийТипДиаграммы), "ТипДиаграммы.", "");
		СписокВыбора.Добавить(ИмяТипаДиаграммы, СокрЛП(ТекущийТипДиаграммы),, БиблиотекаКартинок[ИмяТипаДиаграммы]);
	КонецЦикла;
	
	Для Каждого ТекМакет Из БиблиотекаМакетовОформленияКомпоновкиДанных Цикл
		
		НоваяКоманда = Команды.Найти("ТаблицаОформлениеТаблицы" + ТекМакет.Имя);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить("ТаблицаОформлениеТаблицы" +ТекМакет.Имя);
			НоваяКоманда.Действие = "Подключаемый_ТаблицаОформлениеТаблицы";
		КонецЕсли;
		
		НовоеОформление = Элементы.Добавить("Оформление" + ТекМакет.Имя, Тип("КнопкаФормы"), Элементы.ГруппаОформлениеТаблицы);
		НовоеОформление.ИмяКоманды = НоваяКоманда.Имя;
		НовоеОформление.Заголовок  = ТекМакет.Представление;
		НовоеОформление.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		
	КонецЦикла;
	
	Если Параметры.Свойство("СтартовыеНастройки") Тогда
		СтартовыеНастройки = Параметры.СтартовыеНастройки;
	КонецЕсли;
	
	СписокВыбора = Элементы.ВидПодписей.СписокВыбора;
	Для Каждого ВидПодписи Из ВидПодписейКДиаграмме Цикл
		ИмяВидПодписи = ПолучитьПолноеИмяПредопределенногоЗначения(ВидПодписи);
		СписокВыбора.Добавить(ИмяВидПодписи, СокрЛП(ВидПодписи));
	КонецЦикла;
	
	// Подготовим структуру параметров вывода
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	
	// В режиме веб-клиента произведем показ кнопки изменения текущего объекта.
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.ГруппировкиСтрокИзменить.Видимость = Истина;
		Элементы.ГруппировкиКолонокИзменить.Видимость = Истина;
		Элементы.ПоказателиИзменить.Видимость = Истина;
		Элементы.ОтборИзменить.Видимость = Истина;
		Элементы.ПорядокИзменить.Видимость = Истина;
		Элементы.ПараметрыИзменить.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РежимТолькоЭксперт Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Настройки отчета'"), ,НСтр("ru='Данная настройка отчета доступна только в режиме ""Эксперт""'"));
		ОткрытьФормуЭксперта();
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		ОграниченияИспользованияПолей = Элементы.Параметры.ОграниченияИспользования;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("НачалоПериода");
		НовоеОграничение.Доступность = Ложь;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("КонецПериода");
		НовоеОграничение.Доступность = Ложь;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("Период");
		НовоеОграничение.Доступность = Ложь;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("ПериодГраница");
		НовоеОграничение.Доступность = Ложь;
	#КонецЕсли
	
	Если НЕ Элементы.СписокТаблиц.ТекущиеДанные = Неопределено И Элементы.СписокТаблиц.ТекущиеДанные.ТипДиаграммы <> "" Тогда
		
		// Обновим картинку диаграммы
		Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[Элементы.СписокТаблиц.ТекущиеДанные.ТипДиаграммы];
		
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ЗавершениеРаботы     - Булево - Признак закрытия формы в процессе завершения работы приложения.
//  ТекстПредупреждения  - Булево - Сообщение пользователю не завершенной работе в данном окне.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВариантМодифицирован = Истина Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВариантыОтчетов" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			ПредставлениеТекущегоВарианта = Параметр.ВариантНаименование;
			КлючТекущегоВарианта          = Параметр.ВариантКлючВарианта;
		Иначе
			ОбновитьСписокВариантовОтчета();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения()

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	ОбновитьНастройкиСКД();
	
КонецПроцедуры //ПриСохраненииВариантаНаСервере()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	Если Параметры.Свойство("КлючОбъекта") И Параметры.КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КонецЕсли;
	
	ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ОтчетыПлатформаСервер.ОбновитьСписокВариантовОтчета(ЭтотОбъект);
	Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + Заголовок;
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
КонецПроцедуры //ПриЗагрузкеВариантаНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Серии".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак
//  										выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура СерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("ТекущееПоле",     ТекущиеДанные.Серии);
	СтруктураПараметров.Вставить("ВидПолей",        "Серии");
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("СписокТаблиц", Элементы.СписокТаблиц.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
	ДополнительныеПараметры.Вставить("Событие",     "Серии");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //СерииНачалоВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Показатель".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак
//  										выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("ТекущееПоле",     ТекущиеДанные.Показатель);
	СтруктураПараметров.Вставить("ВидПолей",        "Показатель");
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("СписокТаблиц", Элементы.СписокТаблиц.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
	ДополнительныеПараметры.Вставить("Событие",     "Показатель");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ПоказательНачалоВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Точки".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак
//  										выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ТочкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("ТекущееПоле",     ТекущиеДанные.Точки);
	СтруктураПараметров.Вставить("ВидПолей",        "Точки");
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("СписокТаблиц", Элементы.СписокТаблиц.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
	ДополнительныеПараметры.Вставить("Событие",     "Точки");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ТочкиНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Тип диаграммы".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТипДиаграммыОтчетаПриИзменении(Элемент)
	
	// Устанавливаем картинку типа диаграммы.
	Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[Элементы.СписокТаблиц.ТекущиеДанные.ТипДиаграммы];
	
КонецПроцедуры //ТипДиаграммыОтчетаПриИзменении()

// Обработчик события возникающего при переключении с одной страницы на другую в контексте сервера.
//
&НаСервере
Процедура СтраницыПриСменеСтраницыНаСервере()
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ДобавитьТаблицу Тогда
		ОтчетыПлатформаСервер.ДобавитьТаблицуОтчета(ЭтотОбъект);
	Иначе
		ИдентификаторТаблицы = Элементы.Страницы.ТекущаяСтраница.Имя;
		Если ИдентификаторТаблицы = "СтраницаШаблон" Тогда
			ИдентификаторТаблицы = "";
		КонецЕсли;
		ИндексСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
		ОтчетыПлатформаСервер.ПереместитьТаблицуОтчета(ЭтотОбъект, ИндексСтраницы);
	КонецЕсли;
	
	СтрокиТаблицы = СписокТаблиц.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторТаблицы));
	Если СтрокиТаблицы.Количество()>0 Тогда
		ТекущаяСтрока = СтрокиТаблицы[0];
		Элементы.СписокТаблиц.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		ВыбратьВидТаблицы(ТекущаяСтрока.ВидТаблицы, ТекущаяСтрока.НомерТаблицы);
	КонецЕсли;
	
КонецПроцедуры //СтраницыПриСменеСтраницыНаСервере()

// Обработчик события возникающего при переключении с одной страницы на другую.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ТекущаяСтраница - ГруппаФормы - Новая активная страница.
//
&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СтраницыПриСменеСтраницыНаСервере();
	
	// Если вид отчета диаграмма, обновим декорацию формы.
	Если Элементы.СписокТаблиц.ТекущиеДанные.ТипДиаграммы <> "" Тогда
		Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[Элементы.СписокТаблиц.ТекущиеДанные.ТипДиаграммы];
	КонецЕсли;
	
КонецПроцедуры //СтраницыПриСменеСтраницы()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вариант периода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	КонецПериода = ВариантПериода;
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
КонецПроцедуры //ВариантПериодаПриИзменении()

// Обработчик события возникающего на клиенте при нажатии на надпись "Тип диаграммы".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДекорацияТипДиаграммыНажатие(Элемент)
	
	ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораТипаДиаграммы", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораТипаДиаграммы", , ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещенияОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ДекорацияТипДиаграммыНажатие()

#Область ОбработчикиСобытийЭлементовФормыТаблицыГруппировкаСтроки

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения
//  								   стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ГруппировкиСтрокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)
	
	ИмяПоля = Поле.Имя;
	
	ТекущиеДанные = Элементы.ГруппировкиСтрок.ТекущиеДанные;;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("СписокТаблиц",     Элементы.СписокТаблиц.ТекущаяСтрока);
	МассивПутей.Вставить("ГруппировкиСтрок", Элементы.ГруппировкиСтрок.ТекущаяСтрока);
	
	Если ИмяПоля = "ГруппировкиСтрокЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "ПоляГруппировки");
		ПараметрыВыбора.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
		Если ТекущиеДанные.ПоляГруппировки.Количество()>0 Тогда
			АдресТаблицы = ПоместитьКоллекциюВХранилище(МассивПутей, "ПоляГруппировки");
			ПараметрыВыбора.Вставить("АдресТаблицы", АдресТаблицы);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПутей",   МассивПутей);
		ДополнительныеПараметры.Вставить("Событие",       "ПоляГруппировкиСтрок");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяПоля = "ГруппировкиСтрокПредставлениеПорядка" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Если нет группировок, то сортировать не будем
		Если ТекущиеДанные.ПоляГруппировки.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "Порядок");
		ПараметрыВыбора.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
		Если ТекущиеДанные.ПоляГруппировки.Количество()>0 Тогда
			// Поля группировки
			МассивГруппировок = Новый Массив;
			Для Каждого ПолеГруппировки Из ТекущиеДанные.ПоляГруппировки Цикл
				МассивГруппировок.Добавить(ПолеГруппировки.Поле);
			КонецЦикла;
			
			ПараметрыВыбора.Вставить("ГруппировкиСтруктуры", МассивГруппировок);
			
			Если ТекущиеДанные.Порядок.Количество()>0 Тогда
				АдресТаблицы = ПоместитьКоллекциюВХранилище(МассивПутей, "Порядок");
				ПараметрыВыбора.Вставить("АдресТаблицы", АдресТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
		ДополнительныеПараметры.Вставить("Событие",     "ПорядокСтрок");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяПоля = "ГруппировкиСтрокПредставлениеПолей" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "Реквизиты");
		ПараметрыВыбора.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
		Если ТекущиеДанные.ПоляГруппировки.Количество()>0 Тогда
			// Поля группировки
			МассивГруппировок = Новый Массив;
			Для Каждого ПолеГруппировки Из ТекущиеДанные.ПоляГруппировки Цикл
				МассивГруппировок.Добавить(ПолеГруппировки.Поле);
			КонецЦикла;
			
			Если ТекущиеДанные.Выбор.ПолучитьЭлементы().Количество()>0 Тогда
				АдресТаблицы = ПоместитьКоллекциюВХранилище(МассивПутей, "Выбор");
				ПараметрыВыбора.Вставить("АдресТаблицы", АдресТаблицы);
			КонецЕсли;
			
			ПараметрыВыбора.Вставить("ГруппировкиСтруктуры", МассивГруппировок);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
		ДополнительныеПараметры.Вставить("Событие",     "ВыборСтрок");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры //ГруппировкиСтрокВыбор()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ГруппировкиСтрокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Элементы.СписокТаблиц.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Элементы.СписокТаблиц.ТекущиеДанные.ГруппировкиСтрок.Добавить();
	НоваяСтрока.Использование        = Истина;
	НоваяСтрока.Заголовок            = НСтр("ru = 'Детальные записи'");
	НоваяСтрока.ПредставлениеПорядка = "Авто";
	
	Элементы.ГруппировкиСтрок.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры //ГруппировкиСтрокПередНачаломДобавления()

// Обработчик события возникающего на клиенте перед окончанием редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//  Отказ                - Булево       - Признак отказа от записи объекта.
//
&НаКлиенте
Процедура ГруппировкиСтрокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ГруппировкиСтрок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры //ГруппировкиСтрокПередОкончаниемРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыТаблицыГруппировкаКолонок

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак
// 									   выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ГруппировкиКолонокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)
	
	ИмяПоля = Поле.Имя;
	
	ТекущиеДанные = Элементы.ГруппировкиКолонок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("СписокТаблиц",     Элементы.СписокТаблиц.ТекущаяСтрока);
	МассивПутей.Вставить("ГруппировкиКолонок", Элементы.ГруппировкиКолонок.ТекущаяСтрока);
	
	Если ИмяПоля = "ГруппировкиКолонокЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "ПоляГруппировки");
		ПараметрыВыбора.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
		Если ТекущиеДанные.ПоляГруппировки.Количество()>0 Тогда
			// Поля группировки
			АдресТаблицы = ПоместитьКоллекциюВХранилище(МассивПутей, "ПоляГруппировки");
			ПараметрыВыбора.Вставить("АдресТаблицы", АдресТаблицы);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
		ДополнительныеПараметры.Вставить("Событие",     "ПоляГруппировкиКолонок");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяПоля = "ГруппировкиКолонокПредставлениеПорядка" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Если нет группировок, то сортировать не будем
		Если ТекущиеДанные.ПоляГруппировки.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "Порядок");
		ПараметрыВыбора.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
		Если ТекущиеДанные.ПоляГруппировки.Количество()>0 Тогда
			// Поля группировки
			МассивГруппировок = Новый Массив;
			Для Каждого ПолеГруппировки Из ТекущиеДанные.ПоляГруппировки Цикл
				МассивГруппировок.Добавить(ПолеГруппировки.Поле);
			КонецЦикла;
			
			ПараметрыВыбора.Вставить("ГруппировкиСтруктуры", МассивГруппировок);
			Если ТекущиеДанные.Порядок.Количество()>0 Тогда
				АдресТаблицы = ПоместитьКоллекциюВХранилище(МассивПутей, "Порядок");
				ПараметрыВыбора.Вставить("АдресТаблицы", АдресТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
		ДополнительныеПараметры.Вставить("Событие",     "ПорядокКолонок");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры //ГруппировкиКолонокВыбор()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ГруппировкиКолонокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Элементы.СписокТаблиц.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Элементы.СписокТаблиц.ТекущиеДанные.ГруппировкиКолонок.Добавить();
	НоваяСтрока.Использование        = Истина;
	НоваяСтрока.Заголовок            = НСтр("ru = 'Детальные записи'");
	НоваяСтрока.ПредставлениеПорядка = "Авто";
	
	Элементы.ГруппировкиКолонок.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры //ГруппировкиКолонокПередНачаломДобавления()

// Обработчик события возникающего на клиенте перед окончанием редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//  Отказ                - Булево       - Признак отказа от записи объекта.
//
&НаКлиенте
Процедура ГруппировкиКолонокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ГруппировкиКолонок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры //ГруппировкиКолонокПередОкончаниемРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыТаблицыПоказатели

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак
//  								   выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ПоказателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = Поле.Имя;
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяПоля = "ПоказателиЗаголовок" И (НЕ ТекущиеДанные.Папка) Тогда
		
		СтандартнаяОбработка = Ложь;
		ИзменитьПоказатель(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры //ПоказателиВыбор()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки",        СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",               "Ресурсы");
	ПараметрыВыбора.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Событие", "НовыйРесурс");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеНовыйПоказатель", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ПоказателиПередНачаломДобавления()

// Обработчик события возникающего на клиенте при движении курсора в поле приемнике данных.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка                        - Строка таблицы, над которой находится курсор.
//  Поле                          - Элемент управляемой формы, с которым связана данная колонка таблицы.
//
&НаКлиенте
Процедура ПоказателиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если НЕ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры //ПоказателиПроверкаПеретаскивания()

// Обработчик события возникающего на клиенте при окончании перетаскивания в поле - приемнике данных.
//
// Параметры:
//  Элемент                 - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка    - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка - Содержит порядковый номер строки или ссылку на текущий объект.
//  Поле - Поле, с которым связана данная колонка таблицы, над которой находится объект.
//
&НаКлиенте
Процедура ПоказателиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Показатели.НайтиПоИдентификатору(Значение);
	
	ДеревоПоказателей = Показатели.ПолучитьЭлементы();
	
	Если Строка = Неопределено Тогда
		
		НоваяСтрока = ДеревоПоказателей.Добавить();
		
	ИначеЕсли ТипЗнч(Строка) = Тип("Число") Тогда
		
		СтрокаПриемник = Показатели.НайтиПоИдентификатору(Строка);
		
		// Нельзя перетаскивать группу в собственную ветку
		Если СтрокаИсточник.Папка Тогда
			ТекущийРодитель = СтрокаПриемник.ПолучитьРодителя();
			Пока НЕ ТекущийРодитель = Неопределено Цикл
				Если ТекущийРодитель = СтрокаИсточник Тогда
					Возврат;
				КонецЕсли;
				ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаПриемник.Папка Тогда
			
			НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
			
		Иначе
			
			РодительПриемника = СтрокаПриемник.ПолучитьРодителя();
			Если РодительПриемника = Неопределено Тогда
				КоллекцияПриемника = ДеревоПоказателей;
			Иначе
				КоллекцияПриемника = РодительПриемника.ПолучитьЭлементы();
			КонецЕсли;
			ИндексПриемника = КоллекцияПриемника.Индекс(СтрокаПриемник);
			НоваяСтрока = КоллекцияПриемника.Вставить(ИндексПриемника+1);
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	
	СкопироватьСтрокуДерева(НоваяСтрока.ПолучитьЭлементы(), СтрокаИсточник.ПолучитьЭлементы());
	
	РодительИсточника = СтрокаИсточник.ПолучитьРодителя();
	Если РодительИсточника = Неопределено Тогда
		ДеревоПоказателей.Удалить(СтрокаИсточник);
	Иначе
		РодительИсточника.ПолучитьЭлементы().Удалить(СтрокаИсточник);
	КонецЕсли;
	
	Элементы.Показатели.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	
	Элементы.Показатели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры //ПоказателиПеретаскивание()

// Обработчик события возникающего на клиенте при изменении данных
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиИспользованиеПриИзменении(Элемент)
	
	Если Элементы.Показатели.ТекущиеДанные.Папка Тогда
		ПодчиненныеПоказатели = Элементы.Показатели.ТекущиеДанные.ПолучитьЭлементы();
		Для Каждого ТекущийПоказатель Из ПодчиненныеПоказатели Цикл
			ТекущийПоказатель.Использование = Элементы.Показатели.ТекущиеДанные.Использование;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ПоказателиИспользованиеПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыТаблицыОтбор

// Обработчик события возникающего на клиенте при изменении данных строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Элементы.ОтборПравоеЗначение, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПриИзменении()

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак
//  								   выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено
	 ИЛИ НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОтборЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "Отбор");
		ПараметрыВыбора.Вставить("ТекущееПоле",     ТекущиеДанные.ЛевоеЗначение);
		ПараметрыВыбора.Вставить("ВидСравнения",    ПолучитьПолноеИмяПредопределенногоЗначения(ТекущиеДанные.ВидСравнения));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		ДополнительныеПараметры.Вставить("Событие",       "Отбор");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеИзменениеОтбора", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		Если ТекущиеДанные.Папка Тогда
			Возврат;
		КонецЕсли;
		
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
		
		Если ДоступноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		Иначе
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОтборВыбор()

// Обработчик события возникающего на клиенте при активизации строки таблицы выполняемый с задержкой.
//
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Папка Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторОтбора = Строка(Элементы.Отбор.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтбора = Элементы.Отбор.ТекущаяСтрока;
	
	// Настройка вида сравнения отбора
	СписокВидовСравнения = Элементы.ОтборВидСравнения.СписокВыбора;
	СписокВидовСравнения.Очистить();
	
	// Настройка значения отбора
	СписокВыбораЗначений = Элементы.ОтборПравоеЗначение.СписокВыбора;
	СписокВыбораЗначений.Очистить();
	
	Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка     = Ложь;
	Элементы.ОтборПравоеЗначение.КнопкаВыбора            = Истина;
	Элементы.ОтборПравоеЗначение.КнопкаВыпадающегоСписка = Ложь;
	Элементы.ОтборПравоеЗначение.ОграничениеТипа         = Новый ОписаниеТипов("Неопределено");
	
	ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
	
	Если ДоступноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Настройка вида сравнения отбора
	Для Каждого ДоступноеСравнения Из ДоступноеПоле.ДоступныеВидыСравнения Цикл
		СписокВидовСравнения.Добавить(ДоступноеСравнения.Значение, Строка(ДоступноеСравнения.Значение));
	КонецЦикла;
	
	// Настройка значения отбора
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
		ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	Иначе
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	КонецЕсли;
	
	Элементы.ОтборПравоеЗначение.Маска                = ДоступноеПоле.Маска;
	Элементы.ОтборПравоеЗначение.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
	Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ДоступноеПоле.ТипЗначения;
	
	Если ТипЗнч(ДоступноеПоле.ДоступныеЗначения) = Тип("СписокЗначений") И ДоступноеПоле.ДоступныеЗначения.Количество() > 0 Тогда
		
		Для Каждого ДоступноеЗначение Из ДоступноеПоле.ДоступныеЗначения Цикл
			СписокВыбораЗначений.Добавить(ДоступноеЗначение.Значение, ДоступноеЗначение.Представление);
		КонецЦикла;
		
		Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка     = Истина;
		Элементы.ОтборПравоеЗначение.КнопкаВыбора            = Ложь;
		Элементы.ОтборПравоеЗначение.КнопкаВыпадающегоСписка = Истина;
		
	Иначе
		
		Элементы.ОтборПравоеЗначение.БыстрыйВыбор = ДоступноеПоле.БыстрыйВыбор;
		
		Если НЕ ДоступноеПоле.ФормаВыбора = "" Тогда
			УстановитьФормуВыбора(Элементы.ОтборПравоеЗначение, ДоступноеПоле.ФормаВыбора);
		КонецЕсли;
		
		Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
		
		МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
		Если МассивТипов.Количество()> 0 Тогда
			Если МассивТипов[0] = Тип("Строка") Тогда
				Элементы.ОтборПравоеЗначение.КнопкаВыбора = Ложь;
				Элементы.ОтборПравоеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте при активизации строки таблицы.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки",0.1, Истина);
	
КонецПроцедуры //ОтборПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",        "Отбор");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Событие", "НовыйОтбор");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеНовыйОтбор", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ОтборПередНачаломДобавления()

// Обработчик события возникающего на клиенте перед началом интерактивного изменения строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
	   	Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" ИЛИ Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

// Обработчик события возникающего на клиенте при движении курсора в поле приемнике данных.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка                        - Строка таблицы, над которой находится курсор.
//  Поле                          - Элемент управляемой формы, с которым связана данная колонка таблицы.
//
&НаКлиенте
Процедура ОтборПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если НЕ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры //ОтборПроверкаПеретаскивания()

// Обработчик события возникающего на клиенте при окончании перетаскивания в поле - приемнике данных.
//
// Параметры:
//  Элемент                 - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка    - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка - Содержит порядковый номер строки или ссылку на текущий объект.
//  Поле - Поле, с которым связана данная колонка таблицы, над которой находится объект.
//
&НаКлиенте
Процедура ОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Отбор.НайтиПоИдентификатору(Значение);
	
	ДеревоПоказателей = Отбор.ПолучитьЭлементы();
	
	Если Строка = Неопределено Тогда
		
		НоваяСтрока = ДеревоПоказателей.Добавить();
		
	ИначеЕсли ТипЗнч(Строка) = Тип("Число") Тогда
		
		СтрокаПриемник = Отбор.НайтиПоИдентификатору(Строка);
		
		// Нельзя перетаскивать группу в собственную ветку
		Если СтрокаИсточник.Папка Тогда
			ТекущийРодитель = СтрокаПриемник.ПолучитьРодителя();
			Пока НЕ ТекущийРодитель = Неопределено Цикл
				Если ТекущийРодитель = СтрокаИсточник Тогда
					Возврат;
				КонецЕсли;
				ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаПриемник.Папка Тогда
			
			НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
			
		Иначе
			
			РодительПриемника = СтрокаПриемник.ПолучитьРодителя();
			Если РодительПриемника = Неопределено Тогда
				КоллекцияПриемника = ДеревоПоказателей;
			Иначе
				КоллекцияПриемника = РодительПриемника.ПолучитьЭлементы();
			КонецЕсли;
			ИндексПриемника = КоллекцияПриемника.Индекс(СтрокаПриемник);
			НоваяСтрока = КоллекцияПриемника.Вставить(ИндексПриемника+1);
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	
	СкопироватьСтрокуДерева(НоваяСтрока.ПолучитьЭлементы(), СтрокаИсточник.ПолучитьЭлементы());
	
	РодительИсточника = СтрокаИсточник.ПолучитьРодителя();
	Если РодительИсточника = Неопределено Тогда
		ДеревоПоказателей.Удалить(СтрокаИсточник);
	Иначе
		РодительИсточника.ПолучитьЭлементы().Удалить(СтрокаИсточник);
	КонецЕсли;
	
	Элементы.Отбор.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	
	Элементы.Отбор.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры //ОтборПеретаскивание()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид подписей".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Папка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.Заполнено")
		ИЛИ ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.НеЗаполнено") Тогда
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
	Иначе
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
	КонецЕсли;
	
	ПривестиЗначениеКВидуСравнения(ТекущиеДанные);
	
КонецПроцедуры //ОтборВидСравненияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Правое значение".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПривестиЗначениеКВидуСравнения(ТекущиеДанные);
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры //ОтборПравоеЗначениеПриИзменении()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Правое значение".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак
//  										выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
		ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
		
		Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СписокВыбора",      ТекущиеДанные.ПравоеЗначение);
		СтруктураПараметров.Вставить("ТипЗначения",       ДоступноеПоле.ТипЗначения);
		СтруктураПараметров.Вставить("ДоступныеЗначения", ДоступноеПоле.ДоступныеЗначения);
		СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры //ОтборПравоеЗначениеНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыТаблицыПорядок

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Поле".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак
//  										выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ПорядокПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Порядок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",        "Ресурсы");
	ПараметрыВыбора.Вставить("ТекущееПоле",     ТекущиеДанные.Поле);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", Элементы.Порядок.ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("Событие",       "ПорядокОтчета");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ПорядокПолеНачалоВыбора()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего при при выборе варианта отчета в контексте сервера.
//
// Параметры:
//  ИмяВарианта - Строка - Имя выбранного варианта отчета.
//
&НаСервере
Процедура ВыбратьВариантНаСервере(ИмяВарианта)
	
	ОтчетыПлатформаСервер.УстановитьЗаголовокВарианта(ЭтотОбъект, ИмяВарианта);
	Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + Заголовок;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(СхемаКомпоновки);
	
	ВидПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьВидПериода(КлючОбъекта, КлючТекущегоВарианта);
	
	РежимТолькоЭксперт = Ложь;
	ТиповойВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючТекущегоВарианта);
	Если ТиповойВариантНастроек = Неопределено Тогда
		// Пользовательский вариант настроек
		Настройки = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьНастройки(КлючОбъекта, КлючТекущегоВарианта);
		Если НЕ Настройки = Неопределено Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.Настройки);
		КонецЕсли;
	Иначе
		Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СтартовыеНастройки);
		Иначе
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ТиповойВариантНастроек.Настройки);
		КонецЕсли;
		ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	Если ВидПериода = "Произвольный" Тогда
		СтруктураПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьПериод(КлючОбъекта, КлючТекущегоВарианта);
		Если ЗначениеЗаполнено(СтруктураПериода.НачалоПериода) Тогда
			ВариантНачалоПериода = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.НачалоПериода]);
			НачалоПериода = ВариантНачалоПериода.Дата;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПериода.КонецПериода) Тогда
			ВариантКонецПериода = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.КонецПериода]);
			КонецПериода = ВариантКонецПериода.Дата; 
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ВыбратьВариантНаСервере()

// Обработчик события возникающего на клиенте при выборе варианта отчета.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ВыбратьВариант(Команда)
	
	КлючВарианта = КлючТекущегоВарианта;
	
	ИмяВарианта = СтрЗаменить(Команда.Имя, "ВыбратьВариант", "");
	
	ВариантНастроек = ТаблицаВариантов.НайтиСтроки(Новый Структура("Имя", ИмяВарианта));
	Если ВариантНастроек.Количество()>0 Тогда
		КлючТекущегоВарианта          = ВариантНастроек[0].Идентификатор;
		ПредставлениеТекущегоВарианта = ВариантНастроек[0].Представление;
	КонецЕсли;
	
	ВыбратьВариантНаСервере(ИмяВарианта);
	
	Если РежимТолькоЭксперт Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КлючВарианта", КлючВарианта);
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ВопросВыбораВариантаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, "Данный вариант отчета доступен только в режиме ""Эксперт"". 
		|Перейти в форму эксперта?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ВыбратьВариант()

// Обработчик события возникающего на клиенте при выполнении команды "Оформление таблицы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаОформлениеТаблицы(Команда)
	
	ИмяОформления = СтрЗаменить(Команда.Имя, "ТаблицаОформлениеТаблицы", "");
	ТекОформление = ОтчетыПлатформаВызовСервера.ПолучитьОформление(ИмяОформления);
	Если Не ТекОформление = Неопределено Тогда
		
		ИмяЭлемента = "Оформление"+ИмяОформления;
		Для Каждого ТекЭлемент Из Элементы.ГруппаОформлениеТаблицы.ПодчиненныеЭлементы Цикл
			ТекЭлемент.Пометка = (ТекЭлемент.Имя = ИмяЭлемента);
		КонецЦикла;
		
		Элементы.ГруппаОформлениеТаблицы.Заголовок = ТекОформление.Представление;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ОформлениеТаблицы = ИмяОформления;
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ТаблицаОформлениеТаблицы()

// Обработчик события возникающего на клиенте при выполнении команды "Сформировать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОбновитьНастройкиСКД(ОтсекатьОтключенныеГруппировки);
	
	Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КлючВарианта",          СокрЛП(КлючТекущегоВарианта));
	СтруктураПараметров.Вставить("ПредставлениеВарианта", СокрЛП(ПредставлениеТекущегоВарианта));
	СтруктураПараметров.Вставить("Вариант",               ОтчетыПлатформаВызовСервера.КомпоновщикПолучитьНастройки(Отчет.КомпоновщикНастроек));
	СтруктураПараметров.Вставить("НачалоПериода",         НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",          КонецДня(КонецПериода));
	СтруктураПараметров.Вставить("ВидПериода",            ВидПериода);
	
	Закрыть(СтруктураПараметров);
	
КонецПроцедуры //СформироватьОтчет()

// Обработчик события возникающего на клиенте при выполнении команды "Период произвольный".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодПроизвольный(Команда)
	
	ВидПериода = "Произвольный";
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ВидимостьПериода();
	
КонецПроцедуры //ПериодПроизвольный()

// Обработчик события возникающего на клиенте при выполнении команды "Период день".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодДень(Команда)
	
	ВидПериода    = "День";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
КонецПроцедуры //ПериодДень()

// Обработчик события возникающего на клиенте при выполнении команды "Период неделя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодНеделя(Команда)
	
	ВидПериода    = "Неделя";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
КонецПроцедуры //ПериодНеделя()

// Обработчик события возникающего на клиенте при выполнении команды "Период месяц".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодМесяц(Команда)
	
	ВидПериода    = "Месяц";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
КонецПроцедуры //ПериодМесяц()

// Обработчик события возникающего на клиенте при выполнении команды "Период квартал".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодКвартал(Команда)
	
	ВидПериода    = "Квартал";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
КонецПроцедуры //ПериодКвартал()

// Обработчик события возникающего на клиенте при выполнении команды "Период год".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодГод(Команда)
	
	ВидПериода    = "Год";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
КонецПроцедуры //ПериодГод()

// Обработчик события возникающего на клиенте при выполнении команды "Период назад".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодНазад(Команда)
	
	Направление = -1;
	ОтчетыПлатформаКлиентСервер.СместитьПериод(ЭтотОбъект, Направление);
	
КонецПроцедуры //ПериодНазад()

// Обработчик события возникающего на клиенте при выполнении команды "Период вперед".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодВперед(Команда)
	
	Направление = +1;
	ОтчетыПлатформаКлиентСервер.СместитьПериод(ЭтотОбъект, Направление);
	
КонецПроцедуры //ПериодВперед()

// Обработчик события возникающего на клиенте при выполнении команды "Режим эксперта".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура РежимЭксперта(Команда)
	
	ОбновитьНастройкиСКД();
	ОткрытьФормуЭксперта();
	
КонецПроцедуры //РежимЭксперта()

// Обработчик события возникающего при выполнении команды "Загрузить настройки" в контексте сервера.
//
&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(ТекстXML)
	
	НастройкиОтчета = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОбновитьНастройкиОтчета(Отчет.КомпоновщикНастроек.Настройки);
	
КонецПроцедуры //ЗагрузитьНастройкиНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Загрузить настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), "xml", "xml");
	ВыборФайла.Фильтр = Фильтр;
	
	ДополнительныеПараметры = Новый Структура("ВыборФайла", ВыборФайла);
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("ЗагрузитьНастройкиПродолжение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ЗагрузитьНастройки()

&НаКлиенте
Процедура ЗагрузитьНастройкиПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.НачатьЧтение(
		Новый ОписаниеОповещения("ЗагрузитьНастройкиЗавершение", ЭтотОбъект, Новый Структура("ТД", ТД)),
		ВыборФайла.ПолноеИмяФайла,
		"UTF-8");

КонецПроцедуры // ЗагрузитьНастройкиПродолжение()

&НаКлиенте
Процедура ЗагрузитьНастройкиЗавершение(ДополнительныеПараметры) Экспорт
	
	ТД = ДополнительныеПараметры.ТД;
	
	ТекстXML = ТД.ПолучитьТекст();
	
	ЗагрузитьНастройкиНаСервере(ТекстXML);
	
	Если РежимТолькоЭксперт Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Настройки отчета'"),
			,
			НСтр("ru='Данная настройка отчета доступна только в режиме ""Эксперт""'"));
		ОткрытьФормуЭксперта();
	КонецЕсли;

КонецПроцедуры // ЗагрузитьНастройкиЗавершение()

// Обработчик события возникающего при выполнении команды "Выгрузить настройки" в контексте сервера.
//
&НаСервере
Функция ВыгрузитьНастройкиНаСервере()
	
	ОбновитьНастройкиСКД();
	ТекстXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Отчет.КомпоновщикНастроек.Настройки);
	
	Возврат ТекстXML;
	
КонецФункции // ВыгрузитьНастройкиНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Выгрузить настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыгрузитьНастройки(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.МножественныйВыбор = Ложь;
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), "xml", "xml");
	ВыборФайла.Фильтр = Фильтр;
	
	ДополнительныеПараметры = Новый Структура("ВыборФайла", ВыборФайла);
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("ВыгрузитьНастройкиЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ВыгрузитьНастройки()

&НаКлиенте
Процедура ВыгрузитьНастройкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстXML = ВыгрузитьНастройкиНаСервере();
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстXML);
	ТД.НачатьЗапись(, ВыборФайла.ПолноеИмяФайла, "UTF-8");

КонецПроцедуры // ВыгрузитьНастройкиЗавершение()

// Обработчик события возникающего на клиенте при выполнении команды "Отправить по электронной почте".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправитьОтчетыПоПочте();
	
КонецПроцедуры // ОтправитьПоЭлектроннойПочте()

// Обработчик события возникающего на клиенте при выполнении команды "Вид диаграммы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаВидДиаграммы(Команда)
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВидТаблицы = "Диаграмма";
	
	ВыбратьВидТаблицы("Диаграмма", ТекущиеДанные.НомерТаблицы);
	
	// Заполняем Тип диаграммы если он не заполнен
	Если СокрЛП(ТекущиеДанные.ТипДиаграммы) = "" Тогда
		
		ТекущиеДанные.ТипДиаграммы = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ТипДиаграммы.ГистограммаОбъемная), "ТипДиаграммы.", "");
		Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[ТекущиеДанные.ТипДиаграммы];
		
	КонецЕсли;
	
	Если СокрЛП(ТекущиеДанные.ВидПодписей) = "" Тогда
		ТекущиеДанные.ВидПодписей = "ВидПодписейКДиаграмме.Значение";
	КонецЕсли;
	
	Если СокрЛП(ТекущиеДанные.Показатель) = "" Тогда
		
		СтрокаПоказателя = ОтчетыПлатформаКлиентСервер.ПолучитьПоказатель(Показатели.ПолучитьЭлементы());
		Если НЕ СтрокаПоказателя = Неопределено Тогда
			ТекущиеДанные.Показатель          = СтрокаПоказателя.Поле;
			ТекущиеДанные.ПоказательЗаголовок = СтрокаПоказателя.Заголовок;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СокрЛП(ТекущиеДанные.Точки) = "" Тогда
		
		Для Каждого ТекущаяСтрока Из ТекущиеДанные.ГруппировкиСтрок Цикл
			
			Если НЕ ТекущаяСтрока.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаГруппировки = Неопределено;
			Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
				Если ТекущееПоле.Использование Тогда
					СтрокаГруппировки = ТекущееПоле;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаГруппировки = Неопределено Тогда
				ТекущиеДанные.Точки          = СтрокаГруппировки.Поле;
				ТекущиеДанные.ТочкиЗаголовок = СтрокаГруппировки.Заголовок;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если СокрЛП(ТекущиеДанные.Серии) = "" Тогда
		
		Для Каждого ТекущаяСтрока Из ТекущиеДанные.ГруппировкиКолонок Цикл
			
			Если НЕ ТекущаяСтрока.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаГруппировки = Неопределено;
			Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
				Если ТекущееПоле.Использование Тогда
					СтрокаГруппировки = ТекущееПоле;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаГруппировки = Неопределено Тогда
				ТекущиеДанные.Серии          = СтрокаГруппировки.Поле;
				ТекущиеДанные.СерииЗаголовок = СтрокаГруппировки.Заголовок;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если СокрЛП(ТекущиеДанные.Серии) = "" Тогда
	
		СчетчикГруппировки = 0;
		Для Каждого ТекущаяСтрока Из ТекущиеДанные.ГруппировкиСтрок Цикл
			
			Если НЕ ТекущаяСтрока.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаГруппировки = Неопределено;
			Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
				Если ТекущееПоле.Использование Тогда
					СтрокаГруппировки = ТекущееПоле;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаГруппировки = Неопределено Тогда
				Если СчетчикГруппировки = 0 Тогда
					СчетчикГруппировки = 1;
				Иначе
					ТекущиеДанные.Серии                  = СтрокаГруппировки.Поле;
					ТекущиеДанные.СерииЗаголовок         = СтрокаГруппировки.Заголовок;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при выполнении команды "Вид таблицы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаВидТаблицы(Команда)
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВидТаблицы = "Таблица";
	
	ВыбратьВидТаблицы("Таблица", ТекущиеДанные.НомерТаблицы);
	
КонецПроцедуры //ТаблицаВидТаблицы()

// Обработчик события возникающего на клиенте при выполнении команды "Реквизиты отдельно".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаРеквизитыОтдельно(Команда)
	
	Элементы.ТаблицаРеквизитыОтдельно.Пометка = (НЕ Элементы.ТаблицаРеквизитыОтдельно.Пометка);
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.РеквизитыОтдельно = Элементы.ТаблицаРеквизитыОтдельно.Пометка;
	КонецЕсли;
	
КонецПроцедуры //ТаблицаРеквизитыОтдельно()

// Обработчик события возникающего на клиенте при выполнении команды "Отображать таблицу данных".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаОтображатьТаблицуДанных(Команда)
	
	Элементы.ТаблицаОтображатьТаблицуДанных.Пометка = (НЕ Элементы.ТаблицаОтображатьТаблицуДанных.Пометка);
	
	ТекущиеДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ОтображатьТаблицуДанных = Элементы.ТаблицаОтображатьТаблицуДанных.Пометка;
	КонецЕсли;
	
КонецПроцедуры //ТаблицаОтображатьТаблицуДанных()

// Обработчик события возникающего при выполнении команд "Сдвинуть влево/Вправо" в контексте сервера.
//
// Параметры:
//  СмещениеВлево - Булево - Истина, если смещение влево..
//
&НаСервере
Процедура СдвинутьТаблицу(СмещениеВлево = Истина)
	
	ТекущаяСтраница       = Элементы.Страницы.ТекущаяСтраница;
	ИндексСтроки          = Элементы.Страницы.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	ПоследнийИндексСтроки = Элементы.Страницы.ПодчиненныеЭлементы.Количество()-2;
		
	Если СмещениеВлево Тогда
		
		Если ИндексСтроки < 2 Тогда
			Элементы.Переместить(ТекущаяСтраница, Элементы.Страницы, Элементы.Страницы.ПодчиненныеЭлементы[ПоследнийИндексСтроки+1]);
		Иначе
			Элементы.Переместить(ТекущаяСтраница, Элементы.Страницы, Элементы.Страницы.ПодчиненныеЭлементы[ИндексСтроки-1]);
		КонецЕсли;
		
		ТекущаяСтрока = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ИндексСтроки          = СписокТаблиц.Индекс(ТекущаяСтрока);
			ПоследнийИндексСтроки = СписокТаблиц.Количество()-1;
			Если ИндексСтроки=0 Тогда
				СписокТаблиц.Сдвинуть(ИндексСтроки, ПоследнийИндексСтроки);
			Иначе
				СписокТаблиц.Сдвинуть(ИндексСтроки, -1);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ИндексСтроки = ПоследнийИндексСтроки Тогда
			Элементы.Переместить(ТекущаяСтраница, Элементы.Страницы, Элементы.Страницы.ПодчиненныеЭлементы[1]);
		Иначе
			Элементы.Переместить(ТекущаяСтраница, Элементы.Страницы, Элементы.Страницы.ПодчиненныеЭлементы[ИндексСтроки+2]);
		КонецЕсли;
		
		ТекущаяСтрока = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ИндексСтроки          = СписокТаблиц.Индекс(ТекущаяСтрока);
			ПоследнийИндексСтроки = СписокТаблиц.Количество()-1;
			Если ИндексСтроки=ПоследнийИндексСтроки Тогда
				СписокТаблиц.Сдвинуть(ИндексСтроки, -ПоследнийИндексСтроки);
			Иначе
				СписокТаблиц.Сдвинуть(ИндексСтроки, 1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Счетчик = 1;
	Для Каждого ТекущаяСтрока Из СписокТаблиц Цикл
		ТекущаяСтрока.Заголовок    = ТекущаяСтрока.ВидТаблицы + " №" + Строка(Счетчик);
		ТекущаяСтрока.НомерТаблицы = Счетчик;
		
		Элементы[ТекущаяСтрока.Идентификатор].Заголовок = ТекущаяСтрока.Заголовок;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при выполнении команды "Сдвинуть влево".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаСдвинутьВлево(Команда)
	
	СдвинутьТаблицу();
	
КонецПроцедуры //ТаблицаСдвинутьВлево()

// Обработчик события возникающего на клиенте при выполнении команды "Сдвинуть вправо".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаСдвинутьВправо(Команда)
	
	СдвинутьТаблицу(Ложь);
	
КонецПроцедуры //ТаблицаСдвинутьВправо()

// Обработчик события возникающего при выполнении команды "Удалить" в контексте сервера.
//
// Параметры:
//  СмещениеВлево - Булево - Истина, если смещение влево..
//
&НаСервере
Процедура УдалитьТаблицу()
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	ИндексСтраницы  = Элементы.Страницы.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	ИндексСтраницы = ?(ИндексСтраницы = 1, 2, ИндексСтраницы-1);
	
	ОтчетыПлатформаСервер.ПереместитьТаблицуОтчета(ЭтотОбъект, ИндексСтраницы);
	
	Элементы.Удалить(ТекущаяСтраница);
	
	Счетчик = 1;
	Для Каждого ТекущаяСтрока Из СписокТаблиц Цикл
		ТекущаяСтрока.Заголовок    = ТекущаяСтрока.ВидТаблицы + " №" + Строка(Счетчик);
		ТекущаяСтрока.НомерТаблицы = Счетчик;
		
		Элементы[ТекущаяСтрока.Идентификатор].Заголовок = ТекущаяСтрока.Заголовок;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ДоступностьУдаления = СписокТаблиц.Количество() > 1;
	Элементы.ТаблицаПредыдущая.Доступность = ДоступностьУдаления;
	Элементы.ТаблицаСледующая.Доступность  = ДоступностьУдаления;
	Элементы.ТаблицаУдалить.Доступность    = ДоступностьУдаления;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при выполнении команды "Удалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаУдалить(Команда)
	
	// Должно быть не меньше трех страниц: Шаблон, первая таблица и добавление новых таблиц.
	Если Элементы.Страницы.ПодчиненныеЭлементы.Количество() = 3 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = СписокТаблиц.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторТаблицы));
	Если НайденныеСтроки.Количество()> 0 Тогда
		ИндексСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.Индекс(Элементы.Страницы.ТекущаяСтраница)-1;
		
		ИндексСтраницы = ?(ИндексСтраницы = 0, 2, ИндексСтраницы);
		СписокТаблиц.Удалить(НайденныеСтроки[0]);
		СледующаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы[ИндексСтраницы];
		ИдентификаторТаблицы = СледующаяСтраница.Имя;
		Если ИдентификаторТаблицы = "СтраницаШаблон" Тогда
			ИдентификаторТаблицы = "";
		КонецЕсли;
		
		УдалитьТаблицу();
		
		Элементы.Страницы.ТекущаяСтраница = СледующаяСтраница;
		СтрокиТаблицы = СписокТаблиц.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторТаблицы));
		
		Если СтрокиТаблицы.Количество()>0 Тогда
			
			ТекущаяСтрока = СтрокиТаблицы[0];
			Элементы.СписокТаблиц.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			ВыбратьВидТаблицы(ТекущаяСтрока.ВидТаблицы, ТекущаяСтрока.НомерТаблицы);
			
			Если ТекущаяСтрока.ТипДиаграммы <> "" Тогда
				Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[ ТекущаяСтрока.ТипДиаграммы];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ТаблицаУдалить()

#Область ОбработчикиКомандТаблицыГруппировкиСтрок

// Обработчик события возникающего на клиенте при выполнении команды "Группировки строк добавить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиСтрокДобавить(Команда)
	
	Элементы.ГруппировкиСтрок.ДобавитьСтроку();
	
КонецПроцедуры //ГруппировкиСтрокДобавить()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки строк удалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиСтрокУдалить(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ГруппировкиСтрок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиСтрок = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока).ГруппировкиСтрок;
	
	ИндексСтроки     = ГруппировкиСтрок.Индекс(ТекущиеДанные);
	
	ГруппировкиСтрок.Удалить(ИндексСтроки);
	
КонецПроцедуры //ГруппировкиСтрокУдалить()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки строк изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиСтрокИзменить(Команда)
	
	ТекущиеДанные = Элементы.ГруппировкиСтрок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиСтрокВыбор(Элементы.ГруппировкиСтрок, ТекущиеДанные, Элементы.ГруппировкиСтрок.ТекущийЭлемент);
	
КонецПроцедуры //ГруппировкиСтрокИзменить()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки строк переместить вверх".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиСтрокПереместитьВверх(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ГруппировкиСтрок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиСтрок = СписокТаблиц.НайтиПоИдентификатору(ТекущаяСтрока).ГруппировкиСтрок;
	
	ИндексСтроки       = ГруппировкиСтрок.Индекс(ТекущиеДанные);
	
	Смещение = ?(ИндексСтроки = 0, ГруппировкиСтрок.Количество()-1, -1);
	
	ГруппировкиСтрок.Сдвинуть(ИндексСтроки, Смещение);
	
КонецПроцедуры //ГруппировкиСтрокПереместитьВверх()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки строк переместить вниз".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиСтрокПереместитьВниз(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ГруппировкиСтрок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиСтрок = СписокТаблиц.НайтиПоИдентификатору(ТекущаяСтрока).ГруппировкиСтрок;
	
	ИндексСтроки     = ГруппировкиСтрок.Индекс(ТекущиеДанные);
	
	Смещение = ?(ИндексСтроки = ГруппировкиСтрок.Количество()-1, -ИндексСтроки, 1);
	
	ГруппировкиСтрок.Сдвинуть(ИндексСтроки, Смещение);
	
КонецПроцедуры //ГруппировкиСтрокПереместитьВниз()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки строк снять пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиСтрокСнятьПометки(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиСтрок = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока).ГруппировкиСтрок;
	
	Для Каждого ТекущаяСтрока Из ГруппировкиСтрок Цикл
		ТекущаяСтрока.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры //ГруппировкиСтрокСнятьПометки()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки строк установить пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиСтрокУстановитьПометки(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиСтрок = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока).ГруппировкиСтрок;
	
	Для Каждого ТекущаяСтрока Из ГруппировкиСтрок Цикл
		ТекущаяСтрока.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры //ГруппировкиСтрокУстановитьПометки()

#КонецОбласти

#Область ОбработчикиКомандТаблицыГруппировкиКолонок

// Обработчик события возникающего на клиенте при выполнении команды "Группировки колонок добавить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиКолонокДобавить(Команда)
	
	Элементы.ГруппировкиКолонок.ДобавитьСтроку();
	
КонецПроцедуры //ГруппировкиКолонокДобавить()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки колонок изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиКолонокИзменить(Команда)
	
	ТекущиеДанные = Элементы.ГруппировкиКолонок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиКолонокВыбор(Элементы.ГруппировкиКолонок, ТекущиеДанные, Элементы.ГруппировкиКолонок.ТекущийЭлемент);
	
КонецПроцедуры //ГруппировкиКолонокИзменить()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки колонок переместить вверх".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиКолонокПереместитьВверх(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ГруппировкиКолонок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиКолонок = СписокТаблиц.НайтиПоИдентификатору(ТекущаяСтрока).ГруппировкиКолонок;
	
	ИндексСтроки       = ГруппировкиКолонок.Индекс(ТекущиеДанные);
	
	Смещение = ?(ИндексСтроки = 0, ГруппировкиКолонок.Количество()-1, -1);
	
	ГруппировкиКолонок.Сдвинуть(ИндексСтроки, Смещение);
	
КонецПроцедуры //ГруппировкиКолонокПереместитьВверх()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки колонок переместить вниз".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиКолонокПереместитьВниз(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ГруппировкиКолонок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиКолонок = СписокТаблиц.НайтиПоИдентификатору(ТекущаяСтрока).ГруппировкиКолонок;
	
	ИндексСтроки       = ГруппировкиКолонок.Индекс(ТекущиеДанные);
	
	Смещение = ?(ИндексСтроки = ГруппировкиКолонок.Количество()-1, -ИндексСтроки, 1);
	
	ГруппировкиКолонок.Сдвинуть(ИндексСтроки, Смещение);
	
КонецПроцедуры //ГруппировкиКолонокПереместитьВниз()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки колонок удалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиКолонокУдалить(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ГруппировкиКолонок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиКолонок = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока).ГруппировкиКолонок;
	
	ИндексСтроки       = ГруппировкиКолонок.Индекс(ТекущиеДанные);
	
	ГруппировкиКолонок.Удалить(ИндексСтроки);
	
КонецПроцедуры //ГруппировкиКолонокУдалить()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки колонок снять пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиКолонокСнятьПометки(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиКолонок = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока).ГруппировкиКолонок;
	
	Для Каждого ТекущаяСтрока Из ГруппировкиКолонок Цикл
		ТекущаяСтрока.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры //ГруппировкиКолонокСнятьПометки()

// Обработчик события возникающего на клиенте при выполнении команды "Группировки колонок установить пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппировкиКолонокУстановитьПометки(Команда)
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиКолонок = СписокТаблиц.НайтиПоИдентификатору(Элементы.СписокТаблиц.ТекущаяСтрока).ГруппировкиКолонок;
	
	Для Каждого ТекущаяСтрока Из ГруппировкиКолонок Цикл
		ТекущаяСтрока.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры //ГруппировкиКолонокУстановитьПометки()

#КонецОбласти

#Область ОбработчикиКомандТаблицыПоказатели

// Обработчик события возникающего на клиенте при выполнении команды "Показатели добавить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиДобавить(Команда)
	
	Элементы.Показатели.ДобавитьСтроку();
	
КонецПроцедуры //ПоказателиДобавить()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели Добавить группу отборов".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиДобавитьГруппу(Команда)
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	
	ЭлементыПоказателей = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Показатели);
	
	НоваяГруппаПоказателей = ЭлементыПоказателей.Добавить();
	НоваяГруппаПоказателей.Использование = Истина;
	НоваяГруппаПоказателей.Заголовок     = "";
	НоваяГруппаПоказателей.Папка         = Истина;
	
	Элементы.Показатели.ТекущаяСтрока = НоваяГруппаПоказателей.ПолучитьИдентификатор();
	
КонецПроцедуры //ПоказателиДобавитьГруппу()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиИзменить(Команда)
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Папка Тогда
		Элементы.Показатели.ИзменитьСтроку();
	Иначе
		ИзменитьПоказатель(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры //ПоказателиИзменить()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели установить пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиУстановитьПометки(Команда)
	
	УстановитьПометки(Показатели.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры //ПоказателиУстановитьПометки()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели снять пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиСнятьПометки(Команда)
	
	УстановитьПометки(Показатели.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры //ПоказателиСнятьПометки()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели развернуть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиРазвернуть(Команда)
	
	Для Каждого Строка Из Показатели.ПолучитьЭлементы() Цикл
		Элементы.Показатели.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры //ПоказателиРазвернуть()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели свернуть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиСвернуть(Команда)
	
	Для Каждого Строка Из Показатели.ПолучитьЭлементы() Цикл
		Элементы.Показатели.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры //ПоказателиСвернуть()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыТаблицыПараметры

// Обработчик события возникающего на клиенте при изменении данных
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	
	Если ВариантМодифицирован = Истина Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПорядокПриИзменении(Элемент)
	
	Если ВариантМодифицирован = Истина Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандТаблицыОтборы

// Обработчик события возникающего на клиенте при выполнении команды "Отбор добавить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборДобавить(Команда)
	
	Элементы.Отбор.ДобавитьСтроку();
	
КонецПроцедуры //ОтборДобавить()

// Обработчик события возникающего на клиенте при выполнении команды "Отбор добавить группу отборов".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборДобавитьГруппу(Команда)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	ЭлементыОтбора = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Отбор);
	
	НоваяГруппаОтборов = ЭлементыОтбора.Добавить();
	НоваяГруппаОтборов.Использование = Истина;
	НоваяГруппаОтборов.Папка         = Истина;
	НоваяГруппаОтборов.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Элементы.Отбор.ТекущаяСтрока = НоваяГруппаОтборов.ПолучитьИдентификатор();
	
КонецПроцедуры //ОтборДобавитьГруппу()

// Обработчик события возникающего на клиенте при выполнении команды "Отбор удалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборУдалить(Команда)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыОтбора = Отбор.ПолучитьЭлементы();
	
	ИндексСтроки = ЭлементыОтбора.Индекс(ТекущиеДанные);
	ЭлементыОтбора.Удалить(ИндексСтроки);
	
КонецПроцедуры //ОтборУдалить()

// Обработчик события возникающего на клиенте при выполнении команды "Отбор установить пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборУстановитьПометки(Команда)
	
	УстановитьПометки(Отбор.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры //ОтборУстановитьПометки()

// Обработчик события возникающего на клиенте при выполнении команды "Отбор снять пометки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборСнятьПометки(Команда)
	
	УстановитьПометки(Отбор.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры //ОтборСнятьПометки()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеВыбораПоля(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено ИЛИ НЕ ДополнительныеПараметры.Свойство("МассивПутей") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПолучитьТекущиеДанныеПоСтруктуре(ЭтотОбъект, ДополнительныеПараметры.МассивПутей);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.ВидПолей = "ПоляГруппировки" Тогда
		
		ТекущиеДанные.Заголовок = ?(РезультатЗакрытия.Заголовок = "", НСтр("ru = 'Детальные записи'"), РезультатЗакрытия.Заголовок);
		ТекущиеДанные.ПредставлениеПорядка = ?(ТекущиеДанные.ПредставлениеПорядка = "", "Авто", ТекущиеДанные.ПредставлениеПорядка);
		ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, ДополнительныеПараметры.МассивПутей, "ПоляГруппировки");
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Точки" Тогда
		
		ТекущиеДанные.ТочкиЗаголовок = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Точки          = РезультатЗакрытия.Поле;
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Серии" Тогда
		
		ТекущиеДанные.СерииЗаголовок = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Серии          = РезультатЗакрытия.Поле;
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Реквизиты" Тогда
		
		ТекущиеДанные.ПредставлениеПолей = РезультатЗакрытия.Заголовок;
		ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, ДополнительныеПараметры.МассивПутей, "Выбор");
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Порядок" Тогда
		
		ТекущиеДанные.ПредставлениеПорядка = ?(РезультатЗакрытия.Заголовок = "", "Авто", РезультатЗакрытия.Заголовок);
		ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, ДополнительныеПараметры.МассивПутей, "Порядок");
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Ресурсы" Тогда
		
		ТекущиеДанные.Заголовок     = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Поле          = РезультатЗакрытия.Поле;
		ТекущиеДанные.Папка         = РезультатЗакрытия.Папка;
		ТекущиеДанные.Использование = Истина;
		
		Если РезультатЗакрытия.Папка Тогда
			ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, ДополнительныеПараметры.МассивПутей);
		КонецЕсли;
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Показатель" Тогда
		
		ТекущиеДанные.ПоказательЗаголовок = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Показатель          = РезультатЗакрытия.Поле;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеВыбораПоля()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеНовыйПоказатель(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	
	ЭлементыПоказателей = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Показатели);
	
	НовыйПоказатель = ЭлементыПоказателей.Добавить();
	НовыйПоказатель.Использование = Истина;
	НовыйПоказатель.Заголовок     = РезультатЗакрытия.Заголовок;
	НовыйПоказатель.Поле          = РезультатЗакрытия.Поле;
	НовыйПоказатель.Папка         = РезультатЗакрытия.Папка;
	
	ТекущаяСтрока = НовыйПоказатель.ПолучитьИдентификатор();
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("Показатели", ТекущаяСтрока);
	
	Если РезультатЗакрытия.Папка Тогда
		ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, МассивПутей);
	КонецЕсли;
	
	Элементы.Показатели.ТекущаяСтрока = ТекущаяСтрока;
	
КонецПроцедуры //Подключаемый_ОповещениеНовыйПоказатель()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеИзменениеОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ ДополнительныеПараметры = Неопределено) И ДополнительныеПараметры.Свойство("ТекущиеДанные") Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.ВидПолей = "Отбор" Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		ТекущиеДанные.Заголовок     = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Использование = Истина;
		ТекущиеДанные.ЛевоеЗначение = РезультатЗакрытия.Поле;
		ТекущиеДанные.ВидСравнения  = ПредопределенноеЗначение(РезультатЗакрытия.ВидСравнения);
		ТекущиеДанные.Папка         = Ложь;
		
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(РезультатЗакрытия.Поле);
		Если ДоступноеПоле = Неопределено
			ИЛИ ТекущиеДанные.ВидСравнения            = ВидСравненияКомпоновкиДанных.Заполнено
			ИЛИ ТекущиеДанные.ВидСравнения            = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ТекущиеДанные.ПравоеЗначение          = Неопределено;
			ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
		Иначе
			ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
			ПривестиЗначениеКВидуСравнения(ТекущиеДанные);
		КонецЕсли;
		
		ИдентификаторОтбора = "";
		Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки();
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеИзменениеОтбора()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеНовыйОтбор(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	ЭлементыОтбора = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Отбор);
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.Заголовок     = РезультатЗакрытия.Заголовок;
	НовыйОтбор.ЛевоеЗначение = РезультатЗакрытия.Поле;
	НовыйОтбор.ВидСравнения  = ПредопределенноеЗначение(РезультатЗакрытия.ВидСравнения);
	НовыйОтбор.Папка         = Ложь;
	
	Элементы.Отбор.ТекущаяСтрока = НовыйОтбор.ПолучитьИдентификатор();
	
КонецПроцедуры //Подключаемый_ОповещениеНовыйОтбор()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеВыбораЗначенияОтбора()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ВопросВыбораВариантаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуЭксперта();
	Иначе
		КлючТекущегоВарианта = ДополнительныеПараметры.КлючВарианта;
		
		ВариантНастроек = ТаблицаВариантов.НайтиСтроки(Новый Структура("Идентификатор", КлючТекущегоВарианта));
		Если ВариантНастроек.Количество()>0 Тогда
			ПредставлениеТекущегоВарианта = ВариантНастроек[0].Представление;
			ИмяВарианта                   = ВариантНастроек[0].Имя;
			
			ВыбратьВариантНаСервере(ИмяВарианта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("МассивПутей") Тогда
		ТекущиеДанные = ПолучитьТекущиеДанныеПоСтруктуре(ЭтотОбъект, ДополнительныеПараметры.МассивПутей);
	Иначе
		ТекущиеДанные = Неопределено
	КонецЕсли;
	
	Если ДополнительныеПараметры.Событие = "ПоляГруппировки" Тогда
		
		ОтчетыПлатформаВызовСервера.ЗаполнитьНастройкиОтчета(
			ЭтотОбъект,
			ТекущиеДанные.ПоляГруппировки,
			РезультатЗакрытия.ПоляГруппировки.Элементы,
			Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок,
			ТекущиеДанные);
		
	ИначеЕсли ДополнительныеПараметры.Событие = "НоваяГруппировка" Тогда
		
		ТекущиеДанные = ТекущиеДанные[ТекущиеДанные.Количество()-1];
		ОтчетыПлатформаВызовСервера.ЗаполнитьНастройкиОтчета(
			ЭтотОбъект,
			ТекущиеДанные.ПоляГруппировки,
			РезультатЗакрытия.ПоляГруппировки.Элементы,
			Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок,
			ТекущиеДанные);
		ТекущиеДанные.КартинкаПоля  = БиблиотекаКартинок.Реквизит;
		ТекущиеДанные.Использование = Истина;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "Точки" Тогда
		
		ТекущиеДанные.ТочкиЗаголовок = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Точки          = РезультатЗакрытия.Поле;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "Серии" Тогда
		
		ТекущиеДанные.СерииЗаголовок = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Серии          = РезультатЗакрытия.Поле;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "Выбор" Тогда
		
		ОтчетыПлатформаВызовСервера.ЗаполнитьНастройкиОтчета(
			ЭтотОбъект,
			ТекущиеДанные.Выбор,
			РезультатЗакрытия.Выбор.Элементы,
			Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора,
			ТекущиеДанные);
		
	ИначеЕсли ДополнительныеПараметры.Событие = "Порядок" Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ОтчетыПлатформаВызовСервера.ЗаполнитьНастройкиОтчета(
				ЭтотОбъект,
				Отчет.КомпоновщикНастроек.Настройки.Порядок,
				РезультатЗакрытия.Порядок.Элементы,
				Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка,
				ТекущиеДанные);
		Иначе
			ОтчетыПлатформаВызовСервера.ЗаполнитьНастройкиОтчета(
				ЭтотОбъект,
				ТекущиеДанные.Порядок,
				РезультатЗакрытия.Порядок.Элементы,
				Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка,
				ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "ПорядокОтчета" Тогда
		
		Если НЕ РезультатЗакрытия.Папка Тогда
			ТекущиеДанные = Отчет.КомпоновщикНастроек.Настройки.Порядок.ПолучитьОбъектПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
			ТекущиеДанные.Поле          = РезультатЗакрытия.Поле;
			ТекущиеДанные.Использование = Истина;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "Ресурсы" Тогда
		
		ТекущиеДанные.Заголовок     = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Поле          = РезультатЗакрытия.Поле;
		ТекущиеДанные.Папка         = РезультатЗакрытия.Папка;
		ТекущиеДанные.Использование = Истина;
		
		Если РезультатЗакрытия.Папка Тогда
			ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, ДополнительныеПараметры.МассивПутей);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "Показатель" Тогда
		
		Если РезультатЗакрытия.Папка Тогда
			ТекущиеДанные.ПоказательЗаголовок = "";
			ТекущиеДанные.Показатель          = Новый ПолеКомпоновкиДанных("");
		Иначе
			ТекущиеДанные.ПоказательЗаголовок = РезультатЗакрытия.Заголовок;
			ТекущиеДанные.Показатель          = РезультатЗакрытия.Поле;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеВыбораТипаДиаграммы(ВыбранныйТипДиаграммы, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.СписокТаблиц.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ВыбранныйТипДиаграммы <> Неопределено Тогда
		Элементы.СписокТаблиц.ТекущиеДанные.ТипДиаграммы = ВыбранныйТипДиаграммы;
		Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[ВыбранныйТипДиаграммы];
		ЭтоДвухмернаяДиаграмма = ОтчетыПлатформаКлиентСервер.ДвухмернаяДиаграмма(ВыбранныйТипДиаграммы);
		Элементы.Точки.Доступность                  = ЭтоДвухмернаяДиаграмма;
		Элементы.КоличествоЗаписейТочек.Доступность = ЭтоДвухмернаяДиаграмма;
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеВыбораТипаДиаграммы()

// Вызывает БСП процедуру для работы с почтой.
//
&НаКлиенте
Процедура ОтправитьОтчетыПоПочте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОтправитьНастройкиОтчетаПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры // ОтправитьОтчетыПоПочте()

&НаСервере
Функция ПолучениеВыгрузкиНастроекОтчета()
	
	Результат = Новый Массив;
	
	// Подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	ТекстXML = ВыгрузитьНастройкиНаСервере();
	ПредставлениеФайла = НСтр("ru = 'Настройки отчета'") + " "
		+ СтрЗаменить(Заголовок, НСтр("ru = 'Настройки отчета:'") + " ", "") +"'.xml";
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ПредставлениеФайла;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстXML);
	ТД.Записать(ПолноеИмяФайла, КодировкаТекста.UTF8);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ПредставлениеФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	
	Результат.Добавить(ОписаниеФайла);
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции // ПолучениеВыгрузкиНастроек()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОтправитьНастройкиОтчетаПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = ПолучениеВыгрузкиНастроекОтчета();
	
	ПараметрыОтправки = ПараметрыВывода.ПараметрыОтправки;
	Получатели = ПараметрыОтправки.Получатель;
	
	ПараметрыНовогоПисьма = Новый Структура;
	ПараметрыНовогоПисьма.Вставить("Получатель", Получатели);
	ПараметрыНовогоПисьма.Вставить("Тема", ПараметрыОтправки.Тема);
	ПараметрыНовогоПисьма.Вставить("Текст", ПараметрыОтправки.Текст);
	ПараметрыНовогоПисьма.Вставить("Вложения", СписокВложений);
	ПараметрыНовогоПисьма.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыНовогоПисьма);
	
КонецПроцедуры // ОтправитьНайстройкиОтчетаПоПочтеНастройкаУчетнойЗаписиПредложена()

// Подготавливает параметры открытия, и вызывает форму настроек отчета "Эксперт".
//
&НаКлиенте
Процедура ОткрытьФормуЭксперта()
	
	Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КлючОбъекта",           КлючОбъекта);
	СтруктураПараметров.Вставить("СхемаКомпоновки",       СхемаКомпоновки);
	СтруктураПараметров.Вставить("ЗаголовокОтчета",       ЗаголовокОтчета);
	СтруктураПараметров.Вставить("КлючВарианта",          СокрЛП(КлючТекущегоВарианта));
	СтруктураПараметров.Вставить("ПредставлениеВарианта", СокрЛП(ПредставлениеТекущегоВарианта));
	СтруктураПараметров.Вставить("Вариант",               ОтчетыПлатформаВызовСервера.КомпоновщикПолучитьНастройки(Отчет.КомпоновщикНастроек));
	СтруктураПараметров.Вставить("НачалоПериода",         НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",          КонецДня(КонецПериода));
	СтруктураПараметров.Вставить("ВидПериода",            ВидПериода);
	СтруктураПараметров.Вставить("СтартовыеНастройки",    СтартовыеНастройки);
	
	ОписаниеОповещенияИзмененияНастроек = Новый ОписаниеОповещения("Подключаемый_ОповещениеИзмененияНастроек", ВладелецФормы);
	
	ОткрытьФорму(КлючОбъекта+".ФормаВарианта", СтруктураПараметров, ВладелецФормы,,,, ОписаниеОповещенияИзмененияНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Закрыть();
	
КонецПроцедуры //ОткрытьФормуЭксперта()

// Обновляет настройки СКД в зависимости от выбранных пользователем параметров.
//
&НаСервере
Процедура ОбновитьНастройкиСКД(ОтсекатьГруппировки = Ложь)
	
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиТаблицыИзСтраницы(ЭтотОбъект);
	
	НастройкиСКД = Отчет.КомпоновщикНастроек.Настройки;
	
	// Начало периода
	ДоступныйПараметр =
		НастройкиСКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если НЕ ДоступныйПараметр = Неопределено И ЕстьНачалоПериода Тогда
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	КонецЕсли;
	
	// Конец периода
	ЗначениеПериода = ?(КонецПериода = Дата(1, 1, 1), КонецДня(ТекущаяДатаСеанса()), КонецДня(КонецПериода));
	
	ДоступныйПараметр =
		НастройкиСКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если НЕ ДоступныйПараметр = Неопределено И ЕстьКонецПериода Тогда
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ЗначениеПериода);
	КонецЕсли;
	
	// Конец периода с границей
	ДоступныйПараметр =
		НастройкиСКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("ПериодГраница"));
	Если НЕ ДоступныйПараметр = Неопределено И ЕстьКонецПериода Тогда
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодГраница",
																Новый Граница(ЗначениеПериода, ВидГраницы.Включая));
	КонецЕсли;
	
	// Период
	ДоступныйПараметр =
		НастройкиСКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("Период"));
	Если НЕ ДоступныйПараметр = Неопределено И ЕстьКонецПериода Тогда
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ЗначениеПериода);
	КонецЕсли;
	
	// Отбор отчета
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	ОтборСКД    = НастройкиСКД.Отбор.Элементы;
	ОтборСКД.Очистить();
	
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ОтборСКД, ДеревоОтбор);
	
	// Показатели отчета
	ПоказателиСКД = НастройкиСКД.Выбор;
	ПоказателиСКД.Элементы.Очистить();
	
	Если СписокТаблиц.Количество() > 1 Тогда
		НовоеПоле = ПоказателиСКД.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
	КонецЕсли;
	
	// Структура отчета
	СтруктураСКД = НастройкиСКД.Структура;
	СтруктураСКД.Очистить();
	
	Для Каждого ТекущаяТаблица Из СписокТаблиц Цикл
		
		Если ТекущаяТаблица.ВидТаблицы = "Таблица" Тогда
			ТаблицаСКД = СтруктураСКД.Добавить(Тип("ТаблицаКомпоновкиДанных"));
			ТаблицаСКД.Использование = ТекущаяТаблица.Использование;
			
			НовоеПоле = ТаблицаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование = Истина;
			
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.Строки, ТекущаяТаблица.ГруппировкиСтрок, ОтсекатьГруппировки);
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.Колонки, ТекущаяТаблица.ГруппировкиКолонок, ОтсекатьГруппировки);
			
			// Заполнение Условного оформления таблицы
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.УсловноеОформление.Элементы, ТекущаяТаблица.УсловноеОформление.Элементы);
			
			// Заполнение Параметров вывода
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.ПараметрыВывода.Элементы, ТекущаяТаблица.ПараметрыВывода.ПолучитьЭлементы());
			
			Если СписокТаблиц.Количество() = 1 Тогда
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ПоказателиСКД.Элементы, ТекущаяТаблица.Показатели.ПолучитьЭлементы());
			Иначе
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.Выбор.Элементы, ТекущаяТаблица.Показатели.ПолучитьЭлементы());
			КонецЕсли;
			
			ТаблицаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления", ТекущаяТаблица.ОформлениеТаблицы);
			
			Если ТекущаяТаблица.РеквизитыОтдельно Тогда
				ТаблицаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРеквизитов", РасположениеРеквизитовКомпоновкиДанных.Отдельно);
			Иначе
				ПараметрОформления = ТаблицаСКД.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
				Если (НЕ ПараметрОформления = Неопределено) И ПараметрОформления.Использование И ПараметрОформления.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
					ТаблицаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРеквизитов", РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущаяТаблица.ВидТаблицы = "Диаграмма" Тогда
			
			ДиаграммаСКД = СтруктураСКД.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
			ДиаграммаСКД.Использование = ТекущаяТаблица.Использование;
			
			НовоеПоле = ДиаграммаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование = Истина;
			
			// Заполнение Условного оформления таблицы
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ДиаграммаСКД.УсловноеОформление.Элементы, ТекущаяТаблица.УсловноеОформление.Элементы);
			
			// Заполнение Параметров вывода
			ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ДиаграммаСКД.ПараметрыВывода.Элементы, ТекущаяТаблица.ПараметрыВывода.ПолучитьЭлементы());
			
			// Добавим точки диаграммы
			Если ОтчетыПлатформаКлиентСервер.ДвухмернаяДиаграмма(ТекущаяТаблица.ТипДиаграммы) Тогда
				ОтчетыПлатформаСервер.ДобавитьГруппировкуДиаграммы(ДиаграммаСКД.Точки, ТекущаяТаблица.Точки, НастройкиСКД.ДоступныеПоляГруппировок, ТекущаяТаблица.КоличествоЗаписейТочек);
			КонецЕсли;
			
			// Добавим серии диаграммы
			ОтчетыПлатформаСервер.ДобавитьГруппировкуДиаграммы(ДиаграммаСКД.Серии, ТекущаяТаблица.Серии, НастройкиСКД.ДоступныеПоляГруппировок, ТекущаяТаблица.КоличествоЗаписейСерий);
			
			// Добавим показатель диаграммы
			Если СписокТаблиц.Количество() = 1 Тогда
				Показатель = ПоказателиСКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Иначе
				Показатель = ДиаграммаСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
			Показатель.Использование = Истина;
			Показатель.Поле          = ТекущаяТаблица.Показатель;
			
			Если НЕ ТекущаяТаблица.ТипДиаграммы = "" Тогда
				ТипДиаграммыЗначение = ТипДиаграммы[ТекущаяТаблица.ТипДиаграммы];
				ДиаграммаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ТипДиаграммы", ТипДиаграммыЗначение);
			КонецЕсли;
			
			Если НЕ ТекущаяТаблица.ВидПодписей = "" Тогда
				ВидПодписейЗначение = ПредопределенноеЗначение(ТекущаяТаблица.ВидПодписей);
				ДиаграммаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ТипДиаграммы.ВидПодписей", ВидПодписейЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ОбновитьНастройкиСКД()

// Обновляет настройки отчета.
//
&НаСервере
Процедура ОбновитьНастройкиОтчета(НастройкиОтчета)
	
	ЕстьНачалоПериода = Ложь;
	ЕстьКонецПериода  = Ложь;
	
	Счетчик = 0;
	Для Каждого ТекущийПараметр Из НастройкиОтчета.ПараметрыДанных.Элементы Цикл
		
		ИмяПараметра = СокрЛП(ТекущийПараметр.Параметр);
		Если ИмяПараметра = "НачалоПериода" Тогда
			ЕстьНачалоПериода = (ТекущийПараметр.Использование ИЛИ ЕстьНачалоПериода);
			Продолжить;
		КонецЕсли;
		
		Если ИмяПараметра = "ПериодГраница" ИЛИ ИмяПараметра = "Период" ИЛИ ИмяПараметра = "КонецПериода" Тогда
			// Начальная дата не бывает без конечной
			ЕстьКонецПериода = (ТекущийПараметр.Использование ИЛИ ЕстьКонецПериода ИЛИ ЕстьНачалоПериода);
			Продолжить;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Элементы.ГруппаПараметры.Видимость = (Счетчик > 0);
	
	ОтчетыПлатформаСервер.ОбновитьНастройкиОтчета(ЭтотОбъект, НастройкиОтчета, РежимТолькоЭксперт);
	
	Если Элементы.ГруппаПараметры.Видимость Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		Попытка
			ОтчетОбъект.ПриИзмененииНастроек(ЭтотОбъект);
		Исключение  
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при изменении настроек'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкиОтчета()

// Меняет вид выводимых данных.
//
&НаСервере
Процедура ВыбратьВидТаблицы(ВидТаблицы, НомерТаблицы)
	
	ОтчетыПлатформаСервер.ВыбратьВидТаблицы(ЭтотОбъект, ВидТаблицы, НомерТаблицы);
	
КонецПроцедуры // ВыбратьВидТаблицы()

// Процедура заполняет коллекцию формы из временного хранилища.
//
&НаСервере
Процедура ЗаполнитьКоллекциюИзХранилища(АдресТаблицы, МассивПутей, ИмяТаблицы = Неопределено)
	
	КоллекцияФормы = ПолучитьТекущиеДанныеПоСтруктуре(ЭтотОбъект, МассивПутей);
	
	Если НЕ ИмяТаблицы = Неопределено Тогда
		КоллекцияФормы = КоллекцияФормы[ИмяТаблицы];
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияФормы) = Тип("ДанныеФормыДерево") ИЛИ ТипЗнч(КоллекцияФормы) = Тип("ДанныеФормыЭлементДерева") Тогда
		КоллекцияФормы = КоллекцияФормы.ПолучитьЭлементы();
	КонецЕсли;
	
	КоллекцияФормы.Очистить();
	
	Если Не ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКоллекции = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТипЗнч(ОбъектКоллекции) = Тип("ДеревоЗначений") Тогда
		ОбъектКоллекции = ОбъектКоллекции.Строки;
	КонецЕсли;
	
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, КоллекцияФормы, ОбъектКоллекции);
	
КонецПроцедуры // ЗаполнитьКоллекциюИзХранилища()

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьТекущиеДанныеПоСтруктуре(ОбъектФормы, МассивПутей)
	
	ТекущийОбъект = ОбъектФормы;
	Для Каждого ПутьКДанным Из МассивПутей Цикл
		Если ПутьКДанным.Значение = Неопределено Тогда
			ТекущийОбъект = ТекущийОбъект[ПутьКДанным.Ключ];
		Иначе
			ТекущийОбъект = ТекущийОбъект[ПутьКДанным.Ключ].НайтиПоИдентификатору(ПутьКДанным.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекущийОбъект;
	
КонецФункции //ПолучитьТекущиеДанныеПоСтруктуре()

// Подготавливает структуру настроек и открывает формы выбора поля.
//
&НаКлиенте
Процедура ИзменитьПоказатель(ТекущиеДанные)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки",       СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",              "Ресурсы");
	ПараметрыВыбора.Вставить("ТекущееПоле",            ТекущиеДанные.Поле);
	ПараметрыВыбора.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("Показатели", Элементы.Показатели.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
	ДополнительныеПараметры.Вставить("Событие",     "Ресурсы");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ИзменитьПоказатель()

// Общая процедура, устанавливает/снимает флажок использования в таблице.
//
&НаКлиенте
Процедура УстановитьПометки(ТаблицаЭлементов, Флаг)
	
	Для Каждого ЭлементТаблицы Из ТаблицаЭлементов Цикл
		
		ЭлементТаблицы.Использование = Флаг;
		
		Если ЭлементТаблицы.Папка Тогда
			УстановитьПометки(ЭлементТаблицы.ПолучитьЭлементы(), Флаг);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //УстановитьПометки()

&НаКлиенте
Процедура СкопироватьСтрокуДерева(КоллекцияПриемник, КоллекцияИсточник)
	
	КоллекцияПриемник.Очистить();
	
	Для Каждого ТекущаяСтрока Из КоллекцияИсточник Цикл
		
		НоваяСтрока = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		СкопироватьСтрокуДерева(НоваяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры //СкопироватьСтрокуДерева()

// Проверяет выбран ли вид сравнения компановки данных для списка.
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	Результат = Ложь;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ВидСравненияОтбора= ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОтборПоСписку()

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОтчетыПлатформаСервер.УстановитьУсловноеОформлениеКраткаяФорма(ЭтотОбъект);
	
КонецПроцедуры

// Настраивает заголовок подменю периода, формат отображения периода и видимость полей периода.
//
&НаСервере
Процедура ВидимостьПериода()
	
	ОтчетыПлатформаСервер.ВидимостьПериода(ЭтотОбъект);
	
КонецПроцедуры //ВидимостьПериода()

// Устанавливает форму выбора элемента.
//
&НаСервере
Процедура УстановитьФормуВыбора(Элемент, ФормаВыбора)
	
	Элемент.ФормаВыбора = ФормаВыбора;
	
КонецПроцедуры //УстановитьФормуВыбора()

// Обновляет список вариантов отчета.
//
&НаСервере
Процедура ОбновитьСписокВариантовОтчета()
	
	ОтчетыПлатформаСервер.ОбновитьСписокВариантовОтчета(ЭтотОбъект);
	Заголовок = НСтр("ru = 'Настройки отчета:'") + " " + Заголовок;
	
КонецПроцедуры //ОбновитьСписокВариантовОтчета()

// Функция помещает коллекцию формы во временное хранилище и возвращает адрес 
//
&НаСервере
Функция ПоместитьКоллекциюВХранилище(МассивПутей, ИмяТаблицы)
	
	СтрокаТаблицы = ПолучитьТекущиеДанныеПоСтруктуре(ЭтотОбъект, МассивПутей);
	
	КоллекцияФормы = СтрокаТаблицы[ИмяТаблицы];
	
	Результат = Неопределено;
	
	ОбъектКоллекции = Неопределено;
	Если ТипЗнч(КоллекцияФормы) = Тип("ДанныеФормыДерево") Тогда
		ОбъектКоллекции = ДанныеФормыВЗначение(КоллекцияФормы, Тип("ДеревоЗначений"));
	Иначе
		ОбъектКоллекции = ДанныеФормыВЗначение(КоллекцияФормы, Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	Результат = ПоместитьВоВременноеХранилище(ОбъектКоллекции, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции // ПоместитьКоллекциюВХранилище()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Результат               - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаСохраненияВарианта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеТекущегоВарианта = Результат.ВариантНаименование;
	КлючТекущегоВарианта          = Результат.ВариантКлючВарианта;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПривестиЗначениеКВидуСравнения(Строка)
	
	ТекущееЗначение = Строка.ПравоеЗначение;
	ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Строка.ЛевоеЗначение);
	// Если старый вид сравнения был в списке
	Если НЕ ОтборПоСписку(Строка.ВидСравнения) И ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений") Тогда
		Если ТекущееЗначение.Количество() = 0 Тогда
			ТекущееЗначение = Неопределено;
		Иначе
			ТекущееЗначение = ТекущееЗначение[0].Значение;
		КонецЕсли;
		// Если новый вид сравнения стал в списке
	ИначеЕсли ОтборПоСписку(Строка.ВидСравнения) И (НЕ ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений")) Тогда
		ВременныйСписок = Новый СписокЗначений;
		ВременныйСписок.Добавить(ТекущееЗначение);
		ТекущееЗначение = ВременныйСписок;
	КонецЕсли;
	
	Если ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений") Тогда
		КоличествоЭлементов = ТекущееЗначение.Количество()-1;
		Пока КоличествоЭлементов>=0 Цикл
			
			ПоследнийЭлемент = ТекущееЗначение[КоличествоЭлементов];
			ПоследнийЭлемент.Значение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(ПоследнийЭлемент.Значение);
			
			Если НЕ ЗначениеЗаполнено(ПоследнийЭлемент.Значение) Тогда
				ТекущееЗначение.Удалить(ПоследнийЭлемент);
			КонецЕсли;
			
			КоличествоЭлементов = КоличествоЭлементов - 1;
			
		КонецЦикла;
	Иначе
		МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
		Если МассивТипов[0] = Тип("Строка") Тогда
			ТипСтрока = Новый ОписаниеТипов("Строка");
			ТекущееЗначение = ТипСтрока.ПривестиЗначение(ТекущееЗначение);
		Иначе
			ТекущееЗначение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(ТекущееЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Строка.ПравоеЗначение = ТекущееЗначение;
	
КонецПроцедуры

#КонецОбласти

