///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы отчета "История автомобилей"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("СтруктураСложныхСоставныхПолей",             Новый Структура());
	ПараметрыОтчета.Вставить("СтруктураДополнительныхЗапросовЭксперемент", Новый Структура());
	ПараметрыОтчета.Вставить("СтруктураФиксированныхПолей",                Новый Структура());
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", ПолучитьЗначениеПараметраСтруктуры(Параметры, "СформироватьПриОткрытии", Ложь));
	ПараметрыОтчета.Вставить("ЭтоЗаказНаряд", ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЭтоЗаказНаряд", Ложь));
	
	Отчеты.ИсторияАвтомобилей.ЗаполнитьНачальныеНастройки(Отчет, ПараметрыОтчета, ДеревоФиксированныхПолей);
	
	// Установка периода
	Отчет.Период.ДатаНачала    = ?(Параметры.Свойство("ДатаНачала"), НачалоДня(Параметры.ДатаНачала), Дата(1, 1, 1));
	Отчет.Период.ДатаОкончания = ?(Параметры.Свойство("ДатаОкончания"), Параметры.ДатаКонца, КонецДня(ТекущаяДатаСеанса()));
	
	Автомобиль = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Автомобиль", Неопределено);
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЭтоЗаказНаряд", Ложь) Тогда
		Для Каждого СтрокаДерева Из Отчет.ДеревоНастройкиДополнительныхПолей.ПолучитьЭлементы() Цикл
			Если СтрокаДерева.Имя = "ЗаказНаряд" Тогда
				СтрокаДерева.Использование = 1;
			Иначе
				СтрокаДерева.Использование = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// установить отборы
	НастроитьПоляОтбора(Автомобиль);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Автомобиль)
		И ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили")
		И Автомобиль <> ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка") 
		И ПараметрыОтчета.СформироватьПриОткрытии Тогда
		
		Сформировать(Неопределено);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" И Источник = "ФормироватьОтчетИсторияАвтомобилейВНовомФормате" Тогда
	
		Закрыть();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтбор

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборПравоеЗначениеНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

#Область ОбработчикиСобытийПолейТаблицыФормыОтбор

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = ПолучитьТипыДокументов();
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СписокВыбора =  ТекущиеДанные.ПравоеЗначение;
		
		Если ТекущиеДанные.ЛевоеЗначение = "Автомобиль" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов("СправочникСсылка.Автомобили"), Неопределено, ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Документ" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов(МассивТипов), Неопределено, ТолькоГруппы);
		КонецЕсли;
			
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		Если ТекущиеДанные.ЛевоеЗначение = "Автомобиль" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Автомобили");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Документ" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора <> Неопределено Тогда
			ТекущиеДанные.ПравоеЗначение = ДанныеВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПравоеЗначениеНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении реквизита "Вид сравнения".
//
// Параметры:
//  Элемент - Переключатель - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений") И ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке
		 И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
		Значение = ТекущиеДанные.ПравоеЗначение[0].Значение;
		ТекущиеДанные.ПравоеЗначение.Очистить();
		ОтборПравоеЗначениеНачалоВыбора(Элементы.ОтборПравоеЗначение, Значение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВидСравненияПриИзменении()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеПоля

#Область ОбработчикиСобытийПолейТаблицыФормыДоступныеПоля

// Обработчик события возникающего на клиенте при изменении данных реквизита "Использование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДоступныеПоляИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоступныеПоля.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Фиксированное Тогда
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед началом добавления данных таблицы.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДоступныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастройкиДополнительныхПолей

#Область ОбработчикиСобытийПолейТаблицыФормыДеревоНастройкиДополнительныхПолей

// Обработчик события возникающего на клиенте при изменении данных реквизита "Использование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДеревоНастройкиДополнительныхПолейИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастройкиДополнительныхПолей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Использование=?(ТекущиеДанные.Использование=2,0,ТекущиеДанные.Использование);
	Если ТекущиеДанные.Группа Тогда
		Для Каждого ТекСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ТекСтрока.Использование = ТекущиеДанные.Использование;
		КонецЦикла;
		Элементы.ДеревоНастройкиДополнительныхПолей.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
	Иначе
		Если ТекущиеДанные.Использование Тогда
			КоличествоИспользованных = 0;
			Для Каждого ТекущаяСтрока Из ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
				Если ТекущаяСтрока.Использование = 1 Тогда
					КоличествоИспользованных = КоличествоИспользованных + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = КоличествоИспользованных Тогда
				ТекущиеДанные.ПолучитьРодителя().Использование = 1;
			Иначе
				ТекущиеДанные.ПолучитьРодителя().Использование = 2;
			КонецЕсли;
		Иначе
			ТекущиеДанные.ПолучитьРодителя().Использование = 2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед началом добавления данных таблицы.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДеревоНастройкиДополнительныхПолейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Установить отметку всем доступным полям".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура УстановитьОтметкуВсемДоступнымПолям(Команда)
	
	Использование = ?(СтрНайти(Команда.Имя, "Установить") <> 0, Истина, Ложь);
	
	Для Каждого ТекущаяСтрока Из Отчет.ДоступныеПоля Цикл
		ТекущаяСтрока.Использование = Использование ИЛИ ТекущаяСтрока.Фиксированное;
	КонецЦикла;
	
КонецПроцедуры // УстановитьОтметкуВсемДополнительнымПолям()

// Обработчик события нажатия кнопки "Установить отметку всем доступным дерева".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура УстановитьОтметкуВсемПолямДерева(Команда)
	
	Использование = ?(СтрНайти(Команда.Имя, "Установить") <> 0, Истина, Ложь);
	
	Для Каждого ТекущееПоле Из Отчет.ДеревоНастройкиДополнительныхПолей.ПолучитьЭлементы() Цикл
		ТекущееПоле.Использование = Использование;
		Для Каждого ТекущаяСтрока Из ТекущееПоле.ПолучитьЭлементы() Цикл
			ТекущаяСтрока.Использование = Использование;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УстановитьОтметкуВсемПолямДерева()

// Обработчик события нажатия кнопки "Сформировать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Сформировать(Команда)
	
	// Если не заполнен отбор по автомобилю, то выдаем ошибку.
	ОтборПоАвтомобилю = Отбор.ПолучитьЭлементы()[0];
	Если ОтборПоАвтомобилю.ПравоеЗначение = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка") 
		ИЛИ ОтборПоАвтомобилю.Использование = Ложь Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Отчет не будет сформирован. Заполните отбор по автомобилю.'"),,"Внимание");
		Возврат;
	КонецЕсли;
	
	// Установим параметры для печати
	МенеджерПечати = "Отчет.ИсторияАвтомобилей";
	
	ИменаМакетов = Новый Массив;
	ИменаМакетов.Добавить("ИсторияАвтомобилей");
	
	// Установим параметры команды
	ПараметрКоманды = Новый Массив;
	// Добавляем пустую ссылку, так как этот параметр должен иметь ссылочный тип, но абсолютно не влияет на поведение печатной формы.
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
	
	ПараметрыПечати = СформироватьПараметрыПечатиНаСервере();
	
	// Выведем на печатную форму
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		МенеджерПечати,
		ИменаМакетов,
		ПараметрКоманды,
		ЭтотОбъект.ВладелецФормы,
		ПараметрыПечати);
		
	Закрыть();
	
КонецПроцедуры // Сформировать()

&НаСервере
Функция СформироватьПараметрыПечатиНаСервере()
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы", "История автомобилей");
	ПараметрыПечати.Вставить("МассивТипов", ПолучитьТипыДокументов());
	ПараметрыПечати.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	ОписаниеОтчета = Новый Структура();
	ОписаниеОтчета.Вставить("Период", Отчет.Период);
	ОписаниеОтчета.Вставить("ДеревоНастройкиДополнительныхПолей",
		РеквизитФормыВЗначение("Отчет.ДеревоНастройкиДополнительныхПолей", Тип("ДеревоЗначений")));
	ОписаниеОтчета.Вставить("ДополнительныеПоля", Отчет.ДополнительныеПоля.Выгрузить());
	ОписаниеОтчета.Вставить("ДоступныеПоля", Отчет.ДоступныеПоля.Выгрузить());
	ОписаниеОтчета.Вставить("Измерения", Отчет.Измерения.Выгрузить());
	ОписаниеОтчета.Вставить("ИтоговыеДополнительныеПоля", Отчет.ИтоговыеДополнительныеПоля.Выгрузить());
	
	ДанныеВХранилище = Новый Структура();
	ДанныеВХранилище.Вставить("ОтчетИсторияАвтомобилей", ОписаниеОтчета);
	ДанныеВХранилище.Вставить("Отбор",
		РеквизитФормыВЗначение("Отбор", Тип("ДеревоЗначений")));
	ДанныеВХранилище.Вставить("ДеревоФиксированныхПолей",
		РеквизитФормыВЗначение("ДеревоФиксированныхПолей", Тип("ДеревоЗначений")));
		
	ПараметрыПечати.Вставить("ДанныеВХранилище", ПоместитьВоВременноеХранилище(ДанныеВХранилище, ЭтотОбъект));
	
	Возврат ПараметрыПечати;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура получения типов документа для установки отбора по документу
//
&НаСервере
Функция ПолучитьТипыДокументов()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВводОстатковАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРемонт"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ИзменениеЦенАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ИнвентаризацияАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераЗаАвтомобили"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуЗаАвтомобили"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПереоценкаАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СнятиеРезервовАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РазукомплектацияАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РабочийЛист"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВводВЭксплуатациюАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВыводИзЭксплуатацииАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПереразмещениеАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйСкладскойОрдерНаАвтомобили"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйСкладскойОрдерНаАвтомобили"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.АктРазногласий"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаХранениеШин"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаОпцийАвтомобиля"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Событие"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СтраховойПолис"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ТестДрайв"));
	
	Возврат МассивТипов;
	
КонецФункции // ПолучитьТипыДокументов()

// Добавляем дополнительные отборы
//
&НаСервере
Процедура НастроитьПоляОтбора(Автомобиль)
	
	// заполним быстрые отборы
	ДеревоОтбор = ЭтотОбъект.Отбор.ПолучитьЭлементы();
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = ?(Автомобиль = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Автомобиль), Ложь, Истина);
	НовыйОтбор.ЛевоеЗначение  = "Автомобиль";
	НовыйОтбор.ВидСравнения   = ?(НЕ Автомобиль = Неопределено И Автомобиль.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	НовыйОтбор.ПравоеЗначение = ?(Автомобиль = Неопределено, Справочники.Автомобили.ПустаяСсылка(), Автомобиль);
	НовыйОтбор.Заголовок      = "Автомобиль";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Документ";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.Заголовок      = "Документ";
	
КонецПроцедуры // НастроитьПолеОтбора()

// Функция определения того, что отбор выполняетсяпо списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	РезультатОтбора = Ложь;
	Если ВидСравненияОтбора = ВидСравнения.ВСписке ИЛИ 
		ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии ИЛИ
		ВидСравненияОтбора = ВидСравнения.НеВСписке ИЛИ 
		ВидСравненияОтбора= ВидСравнения.НеВСпискеПоИерархии Тогда
		
		РезультатОтбора = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОтбора;
	
КонецФункции //ОтборПоСписку()

// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры // ОповещениеВыбораЗначенияОтбора()

#КонецОбласти

