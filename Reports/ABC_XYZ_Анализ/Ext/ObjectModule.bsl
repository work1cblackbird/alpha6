#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем НеУчитыватьОтрицательнуюВариацию;
Перем Периодичность;
Перем НеУчитыватьДниБезПродаж;
Перем ГруппаA;
Перем ГруппаB;
Перем ГруппаX;
Перем ГруппаY; 
Перем ПроверятьИнтервалы;
Перем НовыйНачалоПериода;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ВременныйКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ВременныйКомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	ВременныйКомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	
	Отказ = Ложь;
	ТаблицаПродаж = ПолучитьОсновнойЗапрос(ВременныйКомпоновщикНастроек, Отказ);
	ВременныйКомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСхема = ПолучитьКопиюСКД(ТаблицаПродаж.Колонки);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПродаж", ТаблицаПродаж);
	
	ОтчетыПлатформаСервер.ВывестиОтчет(ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, ВнешниеНаборыДанных, НоваяСхема, ВременныйКомпоновщикНастроек.Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Стандартная процедура настройки компоновщика данных
//
// Параметры:
//  ФормаОтчета - УправляемаФорма - Форма, в которой возникло событие.
//
Процедура ПриИзмененииНастроек(ФормаОтчета) Экспорт
	
	ГруппаA = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрA"));
	ГруппаB = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрB"));
	Если (ГруппаA.Значение = 0) И (ГруппаB.Значение = 0) Тогда
		ГруппаA.Значение = 75;
		ГруппаB.Значение = 20;
	КонецЕсли;
	
	ГруппаX = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрX"));
	ГруппаY = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрY"));
	Если (ГруппаX.Значение = 0) И (ГруппаY.Значение = 0) Тогда
		ГруппаX.Значение = 10;
		ГруппаY.Значение = 25;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВарианта()

// Обработчик при изменении значения параметра.
//
// Параметры:
//  ФормаОтчета     - УправляемаяФорма                          - Форма, в которой возникло событие.
//  СтрокаПараметра - ЗначениеПараметраНастроекКомпоновкиДанных - Строка с измененным параметром.
//
Процедура ПриИзмененииЗначенияПараметра(ФормаОтчета, СтрокаПараметра) Экспорт
	
	НастройкиСКД = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
	
	ИмяПараметра = Строка(СтрокаПараметра.Параметр);
	Если ИмяПараметра = "ПараметрA" Тогда
		
		ЗначениеПараметраA = Мин(100, СтрокаПараметра.Значение);
		ЗначениеПараметраB = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрB").Значение;
		
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрA", ЗначениеПараметраA);
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрB", Мин(ЗначениеПараметраB, 100-ЗначениеПараметраA));
		
	ИначеЕсли ИмяПараметра = "ПараметрB" Тогда
		
		ЗначениеПараметраA = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрA").Значение;
		ЗначениеПараметраB = Мин(100, СтрокаПараметра.Значение);
		
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрA", Мин(ЗначениеПараметраA, 100-ЗначениеПараметраB));
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрB", ЗначениеПараметраB);
		
	ИначеЕсли ИмяПараметра = "ПараметрY" ИЛИ ИмяПараметра = "ПараметрX" Тогда
		
		ЗначениеПараметраX = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрX").Значение;
		ЗначениеПараметраY = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрY").Значение;
		
		Если ЗначениеПараметраX > ЗначениеПараметраY Тогда
			НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрX", ЗначениеПараметраY);
			НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрY", ЗначениеПараметраX);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПоказатель(ПоляВыбора, Показатель, ТолькоВключенный = Истина)
	
	Результат = Неопределено;
	
	Для Каждого ТекущаяСтрока Из ПоляВыбора.Элементы Цикл
		
		Если ТолькоВключенный И НЕ ТекущаяСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			
		ИначеЕсли ТекущаяСтрока.Использование И ТипЗнч(ТекущаяСтрока) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			РезультатВГруппе = ПолучитьПоказатель(ТекущаяСтрока, Показатель, ТолькоВключенный);
			Если НЕ РезультатВГруппе = Неопределено Тогда
				Возврат РезультатВГруппе;
			КонецЕсли;
		ИначеЕсли СокрЛП(ТекущаяСтрока.Поле) = Показатель Тогда
			Результат = ТекущаяСтрока;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИтогиПоказателейКомпоновщика(ПоляВыбора, ПоляРесурсов)
	
	Результат = "";
	
	Для Каждого ТекущаяСтрока Из ПоляВыбора.Элементы Цикл
		
		Если НЕ ТекущаяСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ВыраженияИтогов = ПолучитьИтогиПоказателейКомпоновщика(ТекущаяСтрока, ПоляРесурсов);
			Если НЕ ВыраженияИтогов = "" Тогда
				Результат = Результат + ?(Результат = "", "", "," + Символы.ПС + "	") + ВыраженияИтогов;
			КонецЕсли;
		Иначе
			ИмяПоля = СокрЛП(ТекущаяСтрока.Поле);
			ПолеРесурса = ПоляРесурсов.Найти(ИмяПоля);
			
			Если ПолеРесурса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Псевдоним = "";
			
			Если Найти(ВРег(ПолеРесурса.Выражение), "ВЫБОР")>0 Тогда
				Если Найти(ВРег(ПолеРесурса.Выражение), ВРег(ИмяПоля)) = 0 Тогда
					Продолжить;
				КонецЕсли;
				Псевдоним = " КАК " + ИмяПоля;
			КонецЕсли;
			
			Результат = Результат + ?(Результат = "", "", "," + Символы.ПС + "	") + ПолеРесурса.Выражение + Псевдоним;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьДоступныеПоляСКД(ПоляПриемник, ПоляИсточник, ДоступныеПоля)
	
	Для Каждого ТекПоле Из ПоляИсточник Цикл
		
		Если ДоступныеПоля.Найти(ТекПоле.Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекПоле) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Если НЕ ПоляПриемник.Найти(ТекПоле.ПутьКДанным) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяПапка = ПоляПриемник.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
			НоваяПапка.Заголовок   = ТекПоле.Заголовок;
			НоваяПапка.ПутьКДанным = ТекПоле.ПутьКДанным;
			НоваяПапка.ОграничениеИспользования.Группировка = ТекПоле.ОграничениеИспользования.Группировка;
			НоваяПапка.ОграничениеИспользования.Поле        = ТекПоле.ОграничениеИспользования.Поле;
			НоваяПапка.ОграничениеИспользования.Порядок     = ТекПоле.ОграничениеИспользования.Порядок;
			НоваяПапка.ОграничениеИспользования.Условие     = ТекПоле.ОграничениеИспользования.Условие;
		ИначеЕсли ТипЗнч(ТекПоле) = Тип("ВычисляемоеПолеСхемыКомпоновкиДанных") Тогда
			Если НЕ ПоляПриемник.Найти(ТекПоле.ПутьКДанным) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НовоеПоле = ПоляПриемник.Добавить();
			НовоеПоле.Выражение                   = ТекПоле.Выражение;
			НовоеПоле.ВыражениеПредставления      = ТекПоле.ВыражениеПредставления;
			НовоеПоле.Заголовок                   = ТекПоле.Заголовок;
			НовоеПоле.ПутьКДанным                 = ТекПоле.ПутьКДанным;
			НовоеПоле.ТипЗначения                 = Новый ОписаниеТипов(ТекПоле.ТипЗначения);
			НовоеПоле.ОграничениеИспользования.Группировка = ТекПоле.ОграничениеИспользования.Группировка;
			НовоеПоле.ОграничениеИспользования.Поле        = ТекПоле.ОграничениеИспользования.Поле;
			НовоеПоле.ОграничениеИспользования.Порядок     = ТекПоле.ОграничениеИспользования.Порядок;
			НовоеПоле.ОграничениеИспользования.Условие     = ТекПоле.ОграничениеИспользования.Условие;
			Для Каждого ТекПараметр Из ТекПоле.Оформление.Элементы Цикл
				Если НЕ ТекПараметр.Использование Тогда
					Продолжить;
				КонецЕсли;
				НовоеПоле.Оформление.УстановитьЗначениеПараметра(ТекПараметр.Параметр, ТекПараметр.Значение);
			КонецЦикла;
			
			Для Каждого ТекПараметр Из ТекПоле.ПараметрыРедактирования.Элементы Цикл
				Если НЕ ТекПараметр.Использование Тогда
					Продолжить;
				КонецЕсли;
				НовоеПоле.ПараметрыРедактирования.УстановитьЗначениеПараметра(ТекПараметр.Параметр, ТекПараметр.Значение);
			КонецЦикла;
		Иначе
			Если НЕ ПоляПриемник.Найти(ТекПоле.Поле) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НовоеПоле = ПоляПриемник.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.ВыражениеПредставления      = ТекПоле.ВыражениеПредставления;
			НовоеПоле.Заголовок                   = ТекПоле.Заголовок;
			НовоеПоле.НаборДанныхПроверкиИерархии = ТекПоле.НаборДанныхПроверкиИерархии;
			НовоеПоле.Поле                        = ТекПоле.Поле;
			НовоеПоле.ПутьКДанным                 = ТекПоле.ПутьКДанным;
			НовоеПоле.ТипЗначения                 = Новый ОписаниеТипов(ТекПоле.ТипЗначения);
			НовоеПоле.ПараметрНабораДанныхПроверкиИерархии = ТекПоле.ПараметрНабораДанныхПроверкиИерархии;
			НовоеПоле.ОграничениеИспользования.Группировка = ТекПоле.ОграничениеИспользования.Группировка;
			НовоеПоле.ОграничениеИспользования.Поле        = ТекПоле.ОграничениеИспользования.Поле;
			НовоеПоле.ОграничениеИспользования.Порядок     = ТекПоле.ОграничениеИспользования.Порядок;
			НовоеПоле.ОграничениеИспользования.Условие     = ТекПоле.ОграничениеИспользования.Условие;
			НовоеПоле.ОграничениеИспользованияРеквизитов.Группировка = ТекПоле.ОграничениеИспользованияРеквизитов.Группировка;
			НовоеПоле.ОграничениеИспользованияРеквизитов.Поле        = ТекПоле.ОграничениеИспользованияРеквизитов.Поле;
			НовоеПоле.ОграничениеИспользованияРеквизитов.Порядок     = ТекПоле.ОграничениеИспользованияРеквизитов.Порядок;
			НовоеПоле.ОграничениеИспользованияРеквизитов.Условие     = ТекПоле.ОграничениеИспользованияРеквизитов.Условие;
			ЗаполнитьЗначенияСвойств(НовоеПоле.Роль, ТекПоле.Роль);
			Для Каждого ТекПараметр Из ТекПоле.Оформление.Элементы Цикл
				Если НЕ ТекПараметр.Использование Тогда
					Продолжить;
				КонецЕсли;
				НовоеПоле.Оформление.УстановитьЗначениеПараметра(ТекПараметр.Параметр, ТекПараметр.Значение);
			КонецЦикла;
			
			Для Каждого ТекПараметр Из ТекПоле.ПараметрыРедактирования.Элементы Цикл
				Если НЕ ТекПараметр.Использование Тогда
					Продолжить;
				КонецЕсли;
				НовоеПоле.ПараметрыРедактирования.УстановитьЗначениеПараметра(ТекПараметр.Параметр, ТекПараметр.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКопиюСКД(ДоступныеПоля)
	
	НоваяСхема = Новый СхемаКомпоновкиДанных;
	НовыйИсточник = НоваяСхема.ИсточникиДанных.Добавить();
	НовыйИсточник.Имя                = СхемаКомпоновкиДанных.ИсточникиДанных[0].Имя;
	НовыйИсточник.СтрокаСоединения   = СхемаКомпоновкиДанных.ИсточникиДанных[0].СтрокаСоединения;
	НовыйИсточник.ТипИсточникаДанных = СхемаКомпоновкиДанных.ИсточникиДанных[0].ТипИсточникаДанных;
	
	НовыйНаборДанных = НоваяСхема.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НовыйНаборДанных.Имя            = "ТаблицаПродаж";
	НовыйНаборДанных.ИмяОбъекта     = "ТаблицаПродаж";
	НовыйНаборДанных.ИсточникДанных = НовыйИсточник.Имя;
	
	Для Каждого ТекНаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		СкопироватьДоступныеПоляСКД(НовыйНаборДанных.Поля, ТекНаборДанных.Поля, ДоступныеПоля);
	КонецЦикла;
	
	СкопироватьДоступныеПоляСКД(НоваяСхема.ВычисляемыеПоля, СхемаКомпоновкиДанных.ВычисляемыеПоля, ДоступныеПоля);
	
	Для Каждого ТекПоле Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		
		Если ДоступныеПоля.Найти(ТекПоле.ПутьКДанным) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйИтог = НоваяСхема.ПоляИтога.Добавить();
		НовыйИтог.Выражение   = ТекПоле.Выражение;
		НовыйИтог.ПутьКДанным = ТекПоле.ПутьКДанным;
		Для Каждого ТекГруппировка Из ТекПоле.Группировки Цикл
			НовыйИтог.Группировки.Добавить(ТекГруппировка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат НоваяСхема;
	
КонецФункции

Процедура РассчитатьИтоговуюТаблицу(Выборка, Показатель, СчетчикРасчета, ТаблицаВывода, ЗначениеПоказателя = 0, ПараметрыABCXYZ=Неопределено)
	
	Если ПараметрыABCXYZ = Неопределено Тогда
		ПараметрыABCXYZ = Новый Структура;
		ПараметрыABCXYZ.Вставить("ВычислятьABC", Ложь);
		ПараметрыABCXYZ.Вставить("ВычислятьXYZ", Ложь);
		ПараметрыABCXYZ.Вставить("ABCГруппа",    "");
		ПараметрыABCXYZ.Вставить("XYZГруппа",    "");
	КонецЕсли;
	
	ПорогХ = ГруппаX;
	ПорогУ = ГруппаY;
	
	НакопленнаяСумма = 0;
	Если ПараметрыABCXYZ.ВычислятьABC Тогда
		ВсегоСумма = ЗначениеПоказателя;
		
		Если ВсегоСумма<0 Тогда
			ВсегоСумма=-ВсегоСумма;
		КонецЕсли;
		ПорогА = Окр((ВсегоСумма*ГруппаA/100), 2);
		ПорогВ = Окр((ВсегоСумма*ГруппаB/100), 2);
		ГраницаПорогаВ = ПорогА + ПорогВ;
	КонецЕсли;
	
	ДетализацияВыборкиПериода = ?(НеУчитыватьДниБезПродаж, "", "Все");
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "ABCГруппа" Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ВычислятьABC", Истина);
			Параметры.Вставить("ВычислятьXYZ", ПараметрыABCXYZ.ВычислятьXYZ);
			Параметры.Вставить("ABCГруппа",    ПараметрыABCXYZ.ABCГруппа);
			Параметры.Вставить("XYZГруппа",    ПараметрыABCXYZ.XYZГруппа);
			РассчитатьИтоговуюТаблицу(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), Показатель, СчетчикРасчета-1, ТаблицаВывода, Выборка[Показатель], Параметры);
			
		ИначеЕсли Выборка.Группировка() = "XYZГруппа" Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ВычислятьABC", ПараметрыABCXYZ.ВычислятьABC);
			Параметры.Вставить("ВычислятьXYZ", Истина);
			Параметры.Вставить("ABCГруппа",    ПараметрыABCXYZ.ABCГруппа);
			Параметры.Вставить("XYZГруппа",    ПараметрыABCXYZ.XYZГруппа);
			РассчитатьИтоговуюТаблицу(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), Показатель, СчетчикРасчета-1, ТаблицаВывода, ЗначениеПоказателя, Параметры);
			
		Иначе
			
			ТекXYZГруппа = ПараметрыABCXYZ.XYZГруппа;
			ТекABCГруппа = ПараметрыABCXYZ.ABCГруппа;
			
			ТекСуммаПараметра = Выборка[Показатель];
			Если ПараметрыABCXYZ.ВычислятьABC И ПараметрыABCXYZ.ABCГруппа = "" Тогда
				НакопленнаяСумма = НакопленнаяСумма + ТекСуммаПараметра;
				Если НакопленнаяСумма <= ПорогА ИЛИ ПорогА < ТекСуммаПараметра Тогда
					ТекABCГруппа = "Группа А";
				ИначеЕсли НакопленнаяСумма <= ГраницаПорогаВ ИЛИ ПорогВ < ТекСуммаПараметра Тогда
					ТекABCГруппа = "Группа В";
				Иначе
					ТекABCГруппа = "Группа С";
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыABCXYZ.ВычислятьXYZ И ТекXYZГруппа = "" Тогда
				Отклонение = 0; 
				
				// в случае получения данных с дополнением по периоду ДетализацияВыборкиПериода= "ВСЕ" получаем лишний период если 
				// если дата начала отчета не попадает на начало периода установленного в отчете.
				// исключаем  из расчетов лишний период
				
				ВыборкаПоПериоду = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период"+Периодичность, ДетализацияВыборкиПериода);
				
				КоличествоВВыборке = ВыборкаПоПериоду.Количество();
				Если ПроверятьИнтервалы Тогда
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Период"+Периодичность, НовыйНачалоПериода);
				
					Если ВыборкаПоПериоду.НайтиСледующий(СтруктураПоиска) Тогда
					
						КоличествоВВыборке = КоличествоВВыборке -1;
					
					КонецЕсли;	
				
					ВыборкаПоПериоду.Сбросить();
				КонецЕсли;
				
				Среднее = ТекСуммаПараметра/КоличествоВВыборке;
				
				Пока ВыборкаПоПериоду.Следующий() Цикл
					
					Если ПроверятьИнтервалы Тогда
						
						ПериодСтроки =  ПривестиКНачалуПериода(ВыборкаПоПериоду["Период"+Периодичность], Периодичность); 
						
						Если ПериодСтроки = НовыйНачалоПериода И ВыборкаПоПериоду["Период"+Периодичность] = НовыйНачалоПериода Тогда 
							
							Продолжить;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Отклонение = Отклонение + Pow(?(ВыборкаПоПериоду[Показатель]=Null, -Среднее, (ВыборкаПоПериоду[Показатель] - Среднее)), 2); 
					
				КонецЦикла; 
				
				Если Среднее = 0 Тогда
					КоэффициентВариации = 0;
				Иначе
					КоэффициентВариации = ?(КоличествоВВыборке = 0,0,(SQRT(Отклонение/КоличествоВВыборке)/Среднее)*100);
				КонецЕсли;
				
				Если КоэффициентВариации < 0 И НеУчитыватьОтрицательнуюВариацию Тогда
					Продолжить;
				КонецЕсли;
				
				КоэффициентВариацииПоМодулю = УправлениеДиалогомСервер.ПолучитьМодульЧисла(КоэффициентВариации);
				
				Если КоэффициентВариацииПоМодулю <= ПорогХ Тогда
					ТекXYZГруппа = "Группа X";
				ИначеЕсли КоэффициентВариацииПоМодулю <= ПорогУ Тогда
					ТекXYZГруппа = "Группа Y";
				Иначе
					ТекXYZГруппа = "Группа Z";
				КонецЕсли;
			КонецЕсли;
			
			Если СчетчикРасчета = 0 Тогда
				
				ВыборкаДетали = Выборка.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					Если НЕ ВыборкаДетали.Группировка() = "" Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТаблицаВывода.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
					Если ПараметрыABCXYZ.ВычислятьABC Тогда
						НоваяСтрока.ABCГруппа = ТекABCГруппа;
					КонецЕсли;
					Если ПараметрыABCXYZ.ВычислятьXYZ Тогда
						НоваяСтрока.XYZГруппа = ТекXYZГруппа;
						НоваяСтрока.КоэффициентВариации = КоэффициентВариации;
					КонецЕсли;
				КонецЦикла;
			Иначе
				
				Параметры = Новый Структура;
				Параметры.Вставить("ВычислятьABC", ПараметрыABCXYZ.ВычислятьABC);
				Параметры.Вставить("ВычислятьXYZ", ПараметрыABCXYZ.ВычислятьXYZ);
				Параметры.Вставить("ABCГруппа",    ТекABCГруппа);
				Параметры.Вставить("XYZГруппа",    ТекXYZГруппа);
				РассчитатьИтоговуюТаблицу(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), Показатель, СчетчикРасчета, ТаблицаВывода, ЗначениеПоказателя, Параметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// формирует текст запроса отчета
Функция ПолучитьОсновнойЗапрос(ВременныйКомпоновщикНастроек, Отказ, ТекстОшибки = "")
	
	Настройки = ВременныйКомпоновщикНастроек.Настройки;
	
	ГруппировкиОтчета = Неопределено;
	ОтчетыПлатформаСервер.КомпоновщикПолучитьПоляСтруктуры(Настройки.Структура, ГруппировкиОтчета);
	
	СчетчикРасчета = 0;
	Если ГруппировкиОтчета.Свойство("ABCГруппа") Тогда
		ВычислятьABC = Истина;
		СчетчикРасчета = 1;
	Иначе
		ВычислятьABC = Ложь;
	КонецЕсли;
	
	Если ГруппировкиОтчета.Свойство("XYZГруппа") Тогда
		ВычислятьXYZ = Истина;
		СчетчикРасчета = СчетчикРасчета + 1;
	Иначе
		ВычислятьXYZ = Ложь;
	КонецЕсли;
	
	Счетчик = СчетчикРасчета;
	ТекстГруппировок = ""; 
	
	НастройкиНачальные = КомпоновщикНастроек.ПолучитьНастройки();

	Для Каждого ТекущаяСтрока Из ГруппировкиОтчета Цикл
		
		ТекстГруппировок = ТекстГруппировок + ?(ТекстГруппировок = "", "", "," + Символы.ПС + "	") + ТекущаяСтрока.Ключ;
		
		Если Счетчик = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущаяСтрока.Ключ = "ABCГруппа" ИЛИ ТекущаяСтрока.Ключ = "XYZГруппа" Тогда
			Счетчик = Счетчик - 1;
			Настройки.Порядок.Элементы.Очистить();
			ПорядокПоГруппировке = Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПорядокПоГруппировке.Использование = Истина;
			ПорядокПоГруппировке.Поле = Новый ПолеКомпоновкиДанных(ТекущаяСтрока.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Показатель                       = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Показатель")).Значение;
	Периодичность                    = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность")).Значение;
	НеУчитыватьДниБезПродаж          = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НеУчитыватьДниБезПродаж")).Значение;
	НеУчитыватьОтрицательнуюВариацию = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НеУчитыватьОтрицательнуюВариацию")).Значение;
	ГруппаA                          = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрA")).Значение;
	ГруппаB                          = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрB")).Значение;
	ГруппаX                          = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрX")).Значение;
	ГруппаY                          = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрY")).Значение;
	НачалоПериода					 = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")).Значение;
	
	НовыйНачалоПериода = ПривестиКНачалуПериода(НачалоПериода, Периодичность);
		
	ПроверятьИнтервалы = НачалоДня(НачалоПериода)<> НовыйНачалоПериода И Не НеУчитыватьДниБезПродаж;

	Если ПустаяСтрока(Показатель) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен показатель'");
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолучитьПоказатель(Настройки.Выбор, Показатель) = Неопределено Тогда
		ПоказательСКД = ПолучитьПоказатель(Настройки.Выбор, Показатель, Ложь);
		Если ПоказательСКД = Неопределено Тогда
			ПоказательСКД = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПоказательСКД.Поле = Новый ПолеКомпоновкиДанных(Показатель);
		КонецЕсли;
		ПоказательСКД.Использование = Истина;
	КонецЕсли;
	
	ПорядокПоГруппировке = Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ПорядокПоГруппировке.Использование = Истина;
	ПорядокПоГруппировке.Поле = Новый ПолеКомпоновкиДанных(Показатель);
	ПорядокПоГруппировке.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	
	Для Каждого Порядок ИЗ НастройкиНачальные.Порядок.Элементы Цикл
		
		ПорядокПоГруппировке = Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокПоГруппировке.Использование = Порядок.Использование;
		ПорядокПоГруппировке.Поле = Новый ПолеКомпоновкиДанных(Порядок.Поле);
		ПорядокПоГруппировке.ТипУпорядочивания = Порядок.ТипУпорядочивания;
			
	КонецЦикла;

	ПорядокПоГруппировке = Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ПорядокПоГруппировке.Использование = Истина;
	
	ТекстПоказателей = ПолучитьИтогиПоказателейКомпоновщика(Настройки.Выбор, СхемаКомпоновкиДанных.ПоляИтога);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Настройки);
	
	ТекстЗапроса = МакетКомпоновки.НаборыДанных.ТекстЗапроса.Запрос;
		
	Если НЕ ВычислятьXYZ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаРегистра.Период" + Периодичность + " КАК Период" + Периодичность + ",", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ПериодМесяц", ""); 
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ПериодМесяц КАК ПериодМесяц,", "ТаблицаРегистра.Период" + Периодичность + " КАК Период" + Периодичность + ",");	
	КонецЕсли;
	
	Если Найти(ТекстЗапроса, "УПОРЯДОЧИТЬ ПО") = 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + ",";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	" + Показатель + " УБЫВ
	|ИТОГИ
	|	" + ТекстПоказателей + "
	|ПО
	|	Общие,
	|	" + ТекстГруппировок + ?(Не ВычислятьXYZ, "", ",
	|	Период"+Периодичность+" ПЕРИОДАМИ ("+Периодичность+", &НачалоПериода, &КонецПериода)") + "
	|";
	
	Если Найти(ТекстЗапроса, "СГРУППИРОВАТЬ ПО") <> 0 Тогда
		Для Каждого ПолеВыбора Из Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
			Если ПолеВыбора.Ресурс Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "" + ПолеВыбора.Поле + "Сумма", ПолеВыбора.Поле); 	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(15,3));
	
	ТаблицаВывода = Новый ТаблицаЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	Для Каждого ТекущаяКолонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаВывода.Колонки.Добавить(ТекущаяКолонка.Имя, ТекущаяКолонка.ТипЗначения);
	КонецЦикла;
	
	Если ВычислятьXYZ Тогда
		ТаблицаВывода.Колонки.Добавить("КоэффициентВариации");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все");
	
	РассчитатьИтоговуюТаблицу(Выборка, Показатель, СчетчикРасчета, ТаблицаВывода);
	
	Возврат ТаблицаВывода;
	
КонецФункции

Функция ПривестиКНачалуПериода(НачалоПериода, Периодичность) 

	Если Периодичность = "Неделя" Тогда 
		Возврат НачалоНедели(НачалоПериода);
	ИначеЕсли Периодичность = "Месяц" Тогда  
		Возврат НачалоМесяца(НачалоПериода);
	ИначеЕсли Периодичность = "Квартал" Тогда 
		Возврат НачалоКвартала(НачалоПериода);
	ИначеЕсли Периодичность = "Год" Тогда
		Возврат НачалоГода(НачалоПериода); 
	Иначе 
		Возврат НачалоПериода; 
	КонецЕсли; 
	
Конецфункции

#КонецОбласти

#КонецЕсли