#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОСОС_УстановитьЗначенияПараметров();
	ВнешниеНаборыДанных = Новый Структура("ЦеныТоваров", ПолучитьОсновнойЗапрос().Выполнить());
	ОтчетыПлатформаСервер.ВывестиОтчет(
		ЭтотОбъект,
		ДокументРезультат,
		ДанныеРасшифровки,
		СтандартнаяОбработка,
		ВнешниеНаборыДанных
	);
	//СкрытьСтрокиВТабличномДокументе(ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("1.0.1.0");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Стоимостная оценка склада в ценах компании (оптимизитоваррый)'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = "1.01";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;

	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Стоимостная оценка склада в ценах компании (оптимизитоваррый)'");
	Команда.Идентификатор = "СтоимостнаяОценкаСкладаВЦенахКомпании_Оптимизация";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ПриИзмененииНастроекФормы(Форма) Экспорт
	
	Если Не СтрЗаканчиваетсяНа(Форма.ИмяФормы, ".ФормаНастроек") Тогда
		
		ЗаполнитьТипыЦен(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипыЦен(Форма)  
	
	Форма
		.Отчет
		.КомпоновщикНастроек
		.Настройки
		.ПараметрыДанных
		.УстановитьЗначениеПараметра("ВыводимыеТипыЦен", Новый СписокЗначений());
	Форма.Отчет.ТипыЦен.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипыЦен.Ссылка КАК Ссылка,
		|	ТипыЦен.Наименование КАК Наименование,
		|	ТипыЦен.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ТипыЦен КАК ТипыЦен
		|ГДЕ
		|	ТипыЦен.ПометкаУдаления = ЛОЖЬ
		|	И ТипыЦен.ЭтоГруппа = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипыЦен.Наименование УБЫВ"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	ОсновнойТипЦен = ПравоПользователя("ОсновнойТипЦенПродажи");
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТиповЦен = Форма.Отчет.ТипыЦен.Добавить();
		СтрокаТиповЦен.ТипЦены = Выборка.Ссылка; 
		СтрокаТиповЦен.Использование = Выборка.Ссылка = ОсновнойТипЦен;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОСОС_УстановитьЗначенияПараметров()
	
	КонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
	Период = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Получить(0);
	Период.Значение = ПредставлениеПериода(Дата('00010101'), КонецПериода);
	
	ВалютаВПараметрах = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Валюта");
	
	Если ВалютаВПараметрах.Значение <> Неопределено Тогда
	
		Валюта = ВалютаВПараметрах.Значение;
		
	Иначе
		
		Валюта = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
	КонецЕсли;
	
	КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(КонецПериода, Новый Структура("Валюта", Валюта));
	КурсВалютыОтчета =  ?(КурсВалюты.Кратность = 0, КурсВалюты.Курс, КурсВалюты.Курс / КурсВалюты.Кратность);
	КурсВалютыОтчета = ?(КурсВалютыОтчета = 0, 1, КурсВалютыОтчета);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КурсВалютыОтчета", КурсВалютыОтчета);
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		
		Элемент.Использование = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОсновнойЗапрос()
	
	ПодразделениеЦены = КомпоновщикНастроек
		.Настройки
		.ПараметрыДанных
		.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПодразделениеЦены"))
		.Значение;
	
	ВыбранныеТипыЦен = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВыводимыеТипыЦен").Значение;
	РассчитываемыеТипыЦен = РассчитываемыеТипыЦен(ВыбранныеТипыЦен);
	БазовыеТипыЦен = БазовыеТипыЦен(ВыбранныеТипыЦен, РассчитываемыеТипыЦен);

	Параметры = Новый Структура();
	Результат = Новый Запрос(ТекстЗапросаКЦенам(ПодразделениеЦены, Параметры));
	
	Для Каждого КлючЗначение Из Параметры Цикл
		
		Результат.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Результат.УстановитьПараметр("РассчитываемыеТипыЦен", РассчитываемыеТипыЦен);
	Результат.УстановитьПараметр("ПодразделениеЦены", ПодразделениеЦены);
	Результат.УстановитьПараметр("ТипЦен", БазовыеТипыЦен);
	Результат.УстановитьПараметр("ТипыЦен", ВыбранныеТипыЦен);
	
	КонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
	Результат.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	КурсВалютыОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КурсВалютыОтчета").Значение;
	Результат.УстановитьПараметр("КурсВалютыОтчета", КурсВалютыОтчета);
	Возврат Результат;
	
КонецФункции

Функция РассчитываемыеТипыЦен(Знач ВыбранныеТипыЦен)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТипЦен", Новый ОписаниеТипов("СправочникСсылка.ТипыЦен"));
	Результат.Колонки.Добавить("БазовыйТипЦен", Новый ОписаниеТипов("СправочникСсылка.ТипыЦен"));
	Результат.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	Результат.Колонки.Добавить("ПроцентСкидкиНаценки", Новый ОписаниеТипов("Число"));
	
	ЗапросВыбораЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТипыЦен.Ссылка КАК Ссылка,
	|	ТипыЦен.Рассчитывается КАК Рассчитывается
	|ИЗ
	|	Справочник.ТипыЦен КАК ТипыЦен
	|ГДЕ
	|	ТипыЦен.Ссылка В (&ТипыЦен) И ТипыЦен.Рассчитывается
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыЦен.Наименование УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеновыеГруппы.Ссылка КАК ЦеноваяГруппа
	|ИЗ
	|	Справочник.ЦеновыеГруппы КАК ЦеновыеГруппы"
	);
	ЗапросВыбораЦен.УстановитьПараметр("ТипыЦен", ВыбранныеТипыЦен);
	
	ПакетЗапросов = ЗапросВыбораЦен.ВыполнитьПакет();
	
	Выборка = ПакетЗапросов[0].Выбрать();
	ЦеновыеГруппы = ПакетЗапросов[1].Выгрузить();
	
	НоваяСтрока = ЦеновыеГруппы.Добавить();
	НоваяСтрока.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
	
	Пока Выборка.Следующий() Цикл
		
		ТипЦенНоменклатуры = Выборка.Ссылка;
		
		// Для установки цены необходимо использовать тип цен, который не рассчитывается от базовой.
		Пока ТипЦенНоменклатуры.Рассчитывается Цикл
			
			ДанныеТипЦенТипЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТипЦенНоменклатуры, "БазовыйТипЦен,ПроцентСкидкиНаценки,ПроцентыСкидкиНаценки");
			БазовыйТипЦен = ДанныеТипЦенТипЦен.БазовыйТипЦен;
			
			ТаблицаЦеновыхГрупп =ДанныеТипЦенТипЦен.ПроцентыСкидкиНаценки.Выгрузить();
			
			Для Каждого ТекущаяСтрока Из ЦеновыеГруппы Цикл
				
				// Найдем в РассчитываемыеТипыЦен
				СтруктураПоиска = Новый Структура("ТипЦен,ЦеноваяГруппа", Выборка.Ссылка, ТекущаяСтрока.ЦеноваяГруппа);
				
				НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоваяСтрока = НайденныеСтроки[0];
				Иначе
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.ПроцентСкидкиНаценки = 1;
					НоваяСтрока.ТипЦен = Выборка.Ссылка;
					НоваяСтрока.ЦеноваяГруппа = ТекущаяСтрока.ЦеноваяГруппа;
				КонецЕсли;
				
				ПроцентСкидкиНаценки = 0;
				СтруктураПоиска = Новый Структура("ЦеноваяГруппа", ТекущаяСтрока.ЦеноваяГруппа);
				
				НайденнаяНаценка = ТаблицаЦеновыхГрупп.НайтиСтроки(СтруктураПоиска);
				Если НайденнаяНаценка.Количество() = 0 Тогда
					ПроцентСкидкиНаценки = ДанныеТипЦенТипЦен.ПроцентСкидкиНаценки;
				Иначе
					ПроцентСкидкиНаценки = НайденнаяНаценка[0].ПроцентСкидкиНаценки;
				КонецЕсли;
				
				НоваяСтрока.БазовыйТипЦен = БазовыйТипЦен;
				// рассчитаем цену
				НоваяСтрока.ПроцентСкидкиНаценки = НоваяСтрока.ПроцентСкидкиНаценки * (1 + ПроцентСкидкиНаценки / 100);
				
			КонецЦикла;
			
			ТипЦенНоменклатуры = БазовыйТипЦен;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция БазовыеТипыЦен(Знач ВыбранныеТипыЦен, Знач РассчитываемыеТипыЦен)
		
	Результат = Новый Массив;
	
	Если ТипЗнч(ВыбранныеТипыЦен) = Тип("СписокЗначений") Тогда
		
		Результат = ВыбранныеТипыЦен.ВыгрузитьЗначения();
		
		Для Каждого ТекущийТипЦен Из ВыбранныеТипыЦен Цикл
			
			НайденныеСтроки = РассчитываемыеТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", ТекущийТипЦен.Значение));
			
			Если НайденныеСтроки.Количество() > 0 И Результат.Найти(НайденныеСтроки[0].БазовыйТипЦен) = Неопределено Тогда
				
				Результат.Добавить(НайденныеСтроки[0].БазовыйТипЦен);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТекстЗапросаКЦенам(ПодразделениеЦены, Параметры)
	
	ЗапросОстаткиТоваров = ЗапросОстаткиТоваров();	
	ТекстЗапросОстаткиТоваров = ЗапросОстаткиТоваров.Текст + ";";
	Параметры = ЗапросОстаткиТоваров.Параметры;
	
	Возврат ТекстЗапросаКПодразделениям(ПодразделениеЦены)
	+ ТекстЗапросОстаткиТоваров
	+ "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РассчитываемыеТипыЦен.ТипЦен КАК ТипЦен,
	|	РассчитываемыеТипыЦен.БазовыйТипЦен КАК БазовыйТипЦен,
	|	РассчитываемыеТипыЦен.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	РассчитываемыеТипыЦен.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
	|ПОМЕСТИТЬ РассчитываемыеТипыЦен
	|ИЗ
	|	&РассчитываемыеТипыЦен КАК РассчитываемыеТипыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЦен.ТипЦен КАК ТипЦен,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.Период КАК Период,
	|	ТаблицаПодразделений.Уровень КАК Уровень,
	|	ТаблицаЦен.Цена КАК Цена
	|ПОМЕСТИТЬ ТаблицаЦенНоменклатуры
	|ИЗ
	|	ТаблицаПодразделений КАК ТаблицаПодразделений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Цены КАК ТаблицаЦен
	|		ПО ТаблицаПодразделений.ПодразделениеКомпании = ТаблицаЦен.ПодразделениеКомпании
	|ГДЕ
	|	ТаблицаЦен.Период <= &КонецПериода
	|	И ТаблицаЦен.ТипЦен В(&ТипЦен)
	|	И ТаблицаЦен.Номенклатура В
	|			(ВЫБРАТЬ
	|				ТоварыНаОстатках.Номенклатура
	|			ИЗ
	|				ТоварыНаОстатках КАК ТоварыНаОстатках)
	|	И ТаблицаЦен.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|	И ТаблицаЦен.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦен.ТипЦен КАК ТипЦен,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.Период КАК Период,
	|	ТаблицаЦен.Уровень КАК Уровень,
	|	ТаблицаЦен.Цена КАК Цена
	|ПОМЕСТИТЬ ТаблицаЦен
	|ИЗ
	|	ТаблицаЦенНоменклатуры КАК ТаблицаЦен
	|ГДЕ
	|	ТаблицаЦен.ТипЦен В(&ТипыЦен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РассчитываемыеТипыЦен.ТипЦен,
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.Период,
	|	ТаблицаЦен.Уровень,
	|	ТаблицаЦен.Цена * РассчитываемыеТипыЦен.ПроцентСкидкиНаценки
	|ИЗ
	|	ТаблицаЦенНоменклатуры КАК ТаблицаЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РассчитываемыеТипыЦен КАК РассчитываемыеТипыЦен
	|		ПО ТаблицаЦен.ТипЦен = РассчитываемыеТипыЦен.БазовыйТипЦен
	|			И (РассчитываемыеТипыЦен.ЦеноваяГруппа = ТаблицаЦен.ЦеноваяГруппа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РассчитываемыеТипыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЦенНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦен.ТипЦен КАК ТипЦен,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ТаблицаЦен.Период) КАК Период
	|ПОМЕСТИТЬ СрезОптимальных
	|ИЗ
	|	ТаблицаЦен КАК ТаблицаЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦен.ТипЦен,
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОптимальнаяТаблицаЦен.ТипЦен КАК ТипЦен,
	|	ОптимальнаяТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ОптимальнаяТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.Уровень КАК Уровень,
	|	МАКСИМУМ(ТаблицаЦен.Цена) КАК Цена
	|ПОМЕСТИТЬ ТаблицаЦенПодразделений
	|ИЗ
	|	СрезОптимальных КАК ОптимальнаяТаблицаЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
	|		ПО ОптимальнаяТаблицаЦен.ТипЦен = ТаблицаЦен.ТипЦен
	|			И ОптимальнаяТаблицаЦен.Номенклатура = ТаблицаЦен.Номенклатура
	|			И ОптимальнаяТаблицаЦен.ХарактеристикаНоменклатуры = ТаблицаЦен.ХарактеристикаНоменклатуры
	|			И ОптимальнаяТаблицаЦен.Период = ТаблицаЦен.Период
	|ГДЕ
	|	НЕ ТаблицаЦен.Цена = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОптимальнаяТаблицаЦен.ТипЦен,
	|	ОптимальнаяТаблицаЦен.Номенклатура,
	|	ОптимальнаяТаблицаЦен.ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.Уровень
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СрезОптимальных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦен.ТипЦен КАК ТипЦен,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	МИНИМУМ(ТаблицаЦен.Уровень) КАК Уровень,
	|	ТаблицаЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаЦен.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ СрезОптимальных
	|ИЗ
	|	ТаблицаЦенПодразделений КАК ТаблицаЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦен.ТипЦен,
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.Номенклатура.ЦеноваяГруппа,
	|	ТаблицаЦен.Номенклатура.ТипНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОптимальнаяТаблицаЦен.ТипЦен КАК ТипЦен,
	|	ОптимальнаяТаблицаЦен.ТипЦен.АлгоритмПолученияЦены = ЗНАЧЕНИЕ(Перечисление.АлгоритмПолученияЦены.ПоХарактеристике) КАК ПоХарактеристике,
	|	ОптимальнаяТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ОптимальнаяТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.Цена * (КурсыВалютСрезПоследних.Курс / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) / &КурсВалютыОтчета) КАК Цена
	|ПОМЕСТИТЬ ИтоговыеЦены
	|ИЗ
	|	СрезОптимальных КАК ОптимальнаяТаблицаЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦенПодразделений КАК ТаблицаЦен
	|		ПО ОптимальнаяТаблицаЦен.ТипЦен = ТаблицаЦен.ТипЦен
	|			И ОптимальнаяТаблицаЦен.Номенклатура = ТаблицаЦен.Номенклатура
	|			И ОптимальнаяТаблицаЦен.ХарактеристикаНоменклатуры = ТаблицаЦен.ХарактеристикаНоменклатуры
	|			И ОптимальнаяТаблицаЦен.Уровень = ТаблицаЦен.Уровень
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, ) КАК КурсыВалютСрезПоследних
	|		ПО (ОптимальнаяТаблицаЦен.ТипЦен.ВВалютеУчета
	|					И ОптимальнаяТаблицаЦен.Номенклатура.ВалютаУчета = КурсыВалютСрезПоследних.Валюта
	|				ИЛИ НЕ ОптимальнаяТаблицаЦен.ТипЦен.ВВалютеУчета
	|					И ОптимальнаяТаблицаЦен.ТипЦен.ВалютаЦены = КурсыВалютСрезПоследних.Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаОстатках.Номенклатура КАК Номенклатура,
	|	ТоварыНаОстатках.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыНаОстатках.ХарактеристикаНоменклатуры = ИтоговыеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаСовпала,
	|	ИтоговыеЦены.ТипЦен КАК ТипЦен,
	|	ИтоговыеЦены.Цена КАК Цена
	|ПОМЕСТИТЬ ЦеныТоваровСПриоритетомПоХарактеристикам
	|ИЗ
	|	ТоварыНаОстатках КАК ТоварыНаОстатках
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтоговыеЦены КАК ИтоговыеЦены
	|		ПО ТоварыНаОстатках.Номенклатура = ИтоговыеЦены.Номенклатура
	|			И (ВЫБОР
	|				КОГДА ИтоговыеЦены.ПоХарактеристике
	|					ТОГДА ТоварыНаОстатках.ХарактеристикаНоменклатуры = ИтоговыеЦены.ХарактеристикаНоменклатуры
	|							ИЛИ ИтоговыеЦены.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИНАЧЕ ИтоговыеЦены.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныТоваровСПриоритетомПоХарактеристикам.Номенклатура КАК Номенклатура,
	|	ЦеныТоваровСПриоритетомПоХарактеристикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныТоваровСПриоритетомПоХарактеристикам.ТипЦен КАК ТипЦен,
	|	МАКСИМУМ(ЦеныТоваровСПриоритетомПоХарактеристикам.ХарактеристикаСовпала) КАК ХарактеристикаСовпала
	|ПОМЕСТИТЬ ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые
	|ИЗ
	|	ЦеныТоваровСПриоритетомПоХарактеристикам КАК ЦеныТоваровСПриоритетомПоХарактеристикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныТоваровСПриоритетомПоХарактеристикам.Номенклатура,
	|	ЦеныТоваровСПриоритетомПоХарактеристикам.ХарактеристикаНоменклатуры,
	|	ЦеныТоваровСПриоритетомПоХарактеристикам.ТипЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые.Номенклатура КАК Номенклатура,
	|	ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые.ТипЦен КАК ТипЦен,
	|	ЕСТЬNULL(ЦеныТоваровСПриоритетомПоХарактеристикам.Цена, 0) КАК Цена
	|ИЗ
	|	ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые КАК ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныТоваровСПриоритетомПоХарактеристикам КАК ЦеныТоваровСПриоритетомПоХарактеристикам
	|		ПО (ЦеныТоваровСПриоритетомПоХарактеристикам.Номенклатура = ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые.Номенклатура)
	|			И (ЦеныТоваровСПриоритетомПоХарактеристикам.ХарактеристикаНоменклатуры = ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые.ХарактеристикаНоменклатуры)
	|			И (ЦеныТоваровСПриоритетомПоХарактеристикам.ТипЦен = ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые.ТипЦен)
	|			И (ЦеныТоваровСПриоритетомПоХарактеристикам.ХарактеристикаСовпала = ЦеныТоваровСПриоритетомПоХарактеристикамСвернутые.ХарактеристикаСовпала)";
	
КонецФункции

Функция ТекстЗапросаКПодразделениям(ПодразделениеЦены)

	ТекРодитель = ПодразделениеЦены;
	Уровень = 0;
	ТекстОбъединенияУровней = "";
	ПредставлениеПодразделения = "Ссылка";
	
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		
		ТекстУровень = Формат(Уровень, "ЧН=; ЧГ=");
		
		ТекстОбъединенияУровней = ТекстОбъединенияУровней+"
		|ОБЪЕДИНИТЬ ВСЕ 
		|ВЫБРАТЬ
		|	ПодразделенияКомпании." + ПредставлениеПодразделения + ",
		|	" + ТекстУровень + "
		|ИЗ Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		|ГДЕ
		|	ПодразделенияКомпании.Ссылка = &ПодразделениеЦены";
		Уровень = Уровень + 1;
		ПредставлениеПодразделения = "Родитель." + ПредставлениеПодразделения;
		ТекРодитель = ТекРодитель.Родитель;
		
	КонецЦикла;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПодразделений.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ТаблицаПодразделений.Уровень КАК Уровень
	|ПОМЕСТИТЬ ТаблицаПодразделений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.ПодразделенияКомпании.ПустаяСсылка) КАК ПодразделениеКомпании,
	|		" + Формат(Уровень, "ЧН=; ЧГ=") + " КАК Уровень
	|" + ТекстОбъединенияУровней + ") КАК ТаблицаПодразделений
	|;
	|
	|";

КонецФункции

Функция ЗапросОстаткиТоваров()
	
	Построитель = Новый ПостроительЗапроса(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ТоварыНаОстатках
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|		&КонецПериода
		|	) КАК ОстаткиТоваров"
	);
	Построитель.ЗаполнитьНастройки();
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ОсновноеПоле = СтрРазделить(ЭлементОтбора.ЛевоеЗначение, ".")[0];
		
		Если
			Не ЭлементОтбора.Использование
			Или Построитель.ДоступныеПоля.Найти(ОсновноеПоле) = Неопределено
		Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НовыйОтбор = Построитель.Отбор.Добавить(ЭлементОтбора.ЛевоеЗначение);
		ВидСравненияДляПостроителя = ПолучитьВидСравнения(ЭлементОтбора.ВидСравнения);
		Если ВидСравненияДляПостроителя = Неопределено Тогда
			НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
			НовыйОтбор.Значение = Неопределено;
			НовыйОтбор.Использование = Ложь;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравненияДляПостроителя;
			НовыйОтбор.Значение = ЭлементОтбора.ПравоеЗначение;
			НовыйОтбор.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Построитель.ПолучитьЗапрос()
	
КонецФункции

Функция ПолучитьВидСравнения(ВидСравненияСКД)
	
	Если ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Больше Тогда
		Результат = ВидСравнения.Больше;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Результат = ВидСравнения.БольшеИлиРавно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Результат = ВидСравнения.ВИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Результат = ВидСравнения.ВСписке;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Результат = ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Результат = ВидСравнения.Меньше;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Результат = ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Результат = ВидСравнения.НеВИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Результат = ВидСравнения.НеВСписке;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Результат = ВидСравнения.НеВСпискеПоИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Результат = ВидСравнения.НеРавно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Результат = ВидСравнения.НеСодержит;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно Тогда
		Результат = ВидСравнения.Равно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Результат = ВидСравнения.Содержит;
	Иначе
		// Не нашли соответствие - не применяем отбор
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
