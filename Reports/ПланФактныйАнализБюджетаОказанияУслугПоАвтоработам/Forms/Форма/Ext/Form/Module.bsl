// Модуль формы "Основная форма отчета"

#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтчетОбъект     = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНепереведенныйОчет(ОтчетМетаданные) Тогда
		Отказ = УправлениеДиалогомВызовСервера.ОбработкаДействияНеРеализована();
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если ОтчетыПлатформаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка,, ОтчетОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РежимРасшифровки    = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (Параметры.Свойство("КлючВарианта") И Параметры.КлючВарианта <> Неопределено);
	КлючОбъекта         = ОтчетМетаданные.ПолноеИмя();
	ЗаголовокОтчета     = СокрЛП(ОтчетМетаданные.Представление()) + ПолучитьЗначениеПараметраСтруктуры(Параметры, "Заголовок", "");
	Заголовок           = ЗаголовокОтчета;
	
	Если Не РежимВариантаОтчета Тогда
		
		КлючВариантаПоУмолчанию = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьКлючВариантаОтчета(КлючОбъекта);
		
		Если Не КлючВариантаПоУмолчанию = Неопределено Тогда
			КлючТекущегоВарианта = КлючВариантаПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиОтчета = ОтчетыПлатформаКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	НастройкиОтчета.Вставить("ПолноеИмя",    КлючОбъекта);
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	НастройкиОтчета.Вставить("ОтчетСсылка",  Параметры.Отчет);
	ТипОтчетаСтрокой = ВариантыОтчетовКлиентСервер.ТипОтчетаСтрокой(Неопределено, НастройкиОтчета.ОтчетСсылка);
	Информация = ВариантыОтчетов.ИнформацияОбОтчете(НастройкиОтчета.ПолноеИмя);
	НастройкиОтчета.ОтчетСсылка = Информация.Отчет;
	НастройкиОтчета.Вставить("Внешний",      ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
	НастройкиОтчета.Вставить("Безопасный",   БезопасныйРежим() <> Ложь);
	ОбновитьИнформациюОВариантеОтчета();
	
	Если Параметры.Свойство("СхемаКомпоновки") Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Параметры.СхемаКомпоновки);
	Иначе
		
		// Скопируем и очистим отборы у Параметров, чтоб не заполнились фиксированные настройки.
		Если ТипЗнч(Параметры.Отбор) = Тип("Структура") И Параметры.Отбор.Количество() > 0 Тогда
			НастройкиОтчета.Вставить("Отбор", Новый Структура);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета.Отбор, Параметры.Отбор, Истина);
			Параметры.Отбор.Очистить();
		КонецЕсли;
				
		Если НастройкиОтчета.Свойство("ОтменитьОткрытие") Тогда
			ОбщегоНазначения.СообщитьПользователю(НастройкиОтчета.ОтменитьОткрытие,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
				
		ПараметрыФормы = НастройкиОтчета.Параметры;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
		Если НЕ ЗначениеЗаполнено(ПараметрыФормы.ОтчетСсылка) Тогда
			ОтчетИнформация = ВариантыОтчетов.ИнформацияОбОтчете(КлючОбъекта);
			Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
				ПараметрыФормы.ОтчетСсылка = ОтчетИнформация.Отчет;
			Иначе
				ПараметрыФормы.ОтчетСсылка = КлючОбъекта;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
			Параметры.СформироватьПриОткрытии = Ложь;
		Иначе
			ПараметрыФормы.СформироватьПриОткрытии = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокПринтеров = ЗначениеПеременнойСеанса("СписокПринтеров");
	Если НЕ СписокПринтеров = Неопределено Тогда
		Принтеры.Вставить(0, "ДиалогВыбораПринтера", НСтр("ru = 'Выбор принтера при печати'"));
		
		// Заполним список принтеров
		Для Каждого Принтер Из СписокПринтеров Цикл
			Принтеры.Добавить(Принтер.Значение, Принтер.Представление, Принтер.Пометка);
		КонецЦикла;
	Иначе
		НастройкиОтчета.Вставить("ИнициализироватьПринтеры", Истина);
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных <> Неопределено Тогда
		СхемаКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КонецЕсли;
	
	НастройкиОтчета.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	
	СписокВыбора = Элементы.ТипДиаграммыОтчета.СписокВыбора;
	Для Каждого ТекущийТипДиаграммы Из ТипДиаграммы Цикл
		
		ИмяТипаДиаграммы = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ТекущийТипДиаграммы), "ТипДиаграммы.", "");
		
		НоваяКоманда = Команды.Найти("КомандаТипДиаграммы" + ИмяТипаДиаграммы);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить("КомандаТипДиаграммы" + ИмяТипаДиаграммы);
			НоваяКоманда.Действие = "КомандаТипДиаграммы";
		КонецЕсли;
		
		НовоеОформление = Элементы.Добавить("Оформление" + ИмяТипаДиаграммы, Тип("КнопкаФормы"), Элементы.ГруппаТипДиаграммы);
		НовоеОформление.ИмяКоманды = НоваяКоманда.Имя;
		НовоеОформление.Заголовок  = СокрЛП(ТекущийТипДиаграммы);
		НовоеОформление.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовоеОформление.Пометка    = Ложь;
		НовоеОформление.Картинка   = БиблиотекаКартинок[ИмяТипаДиаграммы];
		
		СписокВыбора.Добавить(ИмяТипаДиаграммы, СокрЛП(ТекущийТипДиаграммы),, БиблиотекаКартинок[ИмяТипаДиаграммы]);
		
	КонецЦикла;
	
	Для Каждого ТекМакет Из БиблиотекаМакетовОформленияКомпоновкиДанных Цикл
		
		НоваяКоманда = Команды.Найти("ОформлениеТаблицы" + ТекМакет.Имя);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить("ОформлениеТаблицы" + ТекМакет.Имя);
			НоваяКоманда.Действие = "Подключаемый_ТаблицаОформлениеТаблицы";
		КонецЕсли;
		
		НовоеОформление = Элементы.Добавить("Оформление" + ТекМакет.Имя, Тип("КнопкаФормы"), Элементы.ГруппаОформлениеТаблицы);
		НовоеОформление.ИмяКоманды = НоваяКоманда.Имя;
		НовоеОформление.Заголовок  = ТекМакет.Представление;
		НовоеОформление.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		
	КонецЦикла;
	Элементы.Переместить(Элементы.ОформлениеБезОформления,Элементы.ГруппаОформлениеТаблицы);
	Элементы.Переместить(Элементы.ОформлениеМакетОтчетаКомпоновкиДанныхОсновной, Элементы.ГруппаОформлениеТаблицы, Элементы.ОформлениеОсновной);
	
	ХранилищеНастроекОтчета = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаОтчета" + КлючОбъекта, "НастройкиОтображенияФормы");
	Если ХранилищеНастроекОтчета <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиОтчета.Видимость, ХранилищеНастроекОтчета);
	КонецЕсли;
	
	СписокВыбора = Элементы.ВидПодписей.СписокВыбора;
	Для Каждого ВидПодписи Из ВидПодписейКДиаграмме Цикл
		ИмяВидПодписи = ПолучитьПолноеИмяПредопределенногоЗначения(ВидПодписи);
		СписокВыбора.Добавить(ИмяВидПодписи, СокрЛП(ВидПодписи));
	КонецЦикла;
	
	// Механизмы расширения
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	СвернутьБыстрыеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаОтчета" + КлючОбъекта, "СвернутьБыстрыеНастройки");
	Элементы.ГруппаБыстрыеНастройки.Видимость = СвернутьБыстрыеНастройки;
	Элементы.СвернутьНастройки.Пометка = НЕ СвернутьБыстрыеНастройки;
	
	// Подготовим структуру параметров вывода
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	
	НастроитьВидимостьЭлементовФормы();
	
	Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) И Не НастройкиОтчета.Внешний Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если Не ВебКлиент Тогда
		ОграниченияИспользованияПолей = Элементы.Параметры.ОграниченияИспользования;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("НачалоПериода");
		НовоеОграничение.Доступность = Ложь;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("КонецПериода");
		НовоеОграничение.Доступность = Ложь;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("Период");
		НовоеОграничение.Доступность = Ложь;
		
		НовоеОграничение = ОграниченияИспользованияПолей.Добавить();
		НовоеОграничение.Параметр    = Новый ПараметрКомпоновкиДанных("ПериодГраница");
		НовоеОграничение.Доступность = Ложь;
	#КонецЕсли
	
	Если ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета, "ИнициализироватьПринтеры", Ложь) Тогда
		
		ОбновитьСписокПринтеров();
		ЗаписатьСписокПринтеров();
		
	КонецЕсли;
	ОбновитьСписокПринтеровДляПечати();
	ВыводПоследнегоПринтера();
	
	СформироватьПриНеобходимости();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ЗавершениеРаботы     - Булево - Признак закрытия формы в процессе завершения работы приложения.
//  ТекстПредупреждения  - Булево - Сообщение пользователю не завершенной работе в данном окне.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВариантМодифицирован = Истина Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
	Если ЗавершениеРаботы И ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Производится формирование отчета в фоновом режиме.'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события возникающего на клиенте при закрытии формы.
//
// Параметры:
//  ЗавершениеРаботы - Булево - Признак закрытия формы в процессе завершения работы приложения.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события возникающего на клиенте при выборе объекта в одной из подчиненных форм или при вызове в одной из
// подчиненных форм метода.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, где осуществлен выбор.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Результат = Ложь;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.СохранениеПечатнойФормы") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			ФайлыВоВременномХранилище = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			Если ВыбранноеЗначение.ВариантСохранения = "СохранитьВПапку" Тогда
				СохранитьОтчетыВПапку(ФайлыВоВременномХранилище, ВыбранноеЗначение.ПапкаДляСохранения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборФорматаВложений")
		Или ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ПодготовкаНовогоПисьма") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			СписокВложений = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			ПараметрыОтправки = ПараметрыВывода.ПараметрыОтправки;
			Получатели = ПараметрыОтправки.Получатель;
			Если ВыбранноеЗначение.Свойство("Получатели") Тогда
				Получатели = ВыбранноеЗначение.Получатели;
			КонецЕсли;
			
			ПараметрыНовогоПисьма = Новый Структура;
			ПараметрыНовогоПисьма.Вставить("Получатель", Получатели);
			ПараметрыНовогоПисьма.Вставить("Тема", ПараметрыОтправки.Тема);
			ПараметрыНовогоПисьма.Вставить("Текст", ПараметрыОтправки.Текст);
			ПараметрыНовогоПисьма.Вставить("Вложения", СписокВложений);
			ПараметрыНовогоПисьма.Вставить("УдалятьФайлыПослеОтправки", Истина);
			
			МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
			МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыНовогоПисьма);
		КонецЕсли;
		
	КонецЕсли;
	
	// Механизмы расширения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, Результат);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаВыбора()

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Производим сохранение параметров настройки панелей отчета
	Настройки.Вставить("Эксперт", НастройкиОтчета.Параметры.ЭкспертнаяНастройка);
	Настройки.Вставить("СкрыватьНастройкиПриФормировании", НастройкиОтчета.Параметры.СкрыватьНастройкиПриФормировании);
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Восстанавливаем параметры отображения поля расширенной информации
	Если НЕ Настройки.Получить("Эксперт")=Неопределено Тогда
		
		// Получим значение сохраненной настройки
		НастройкиОтчета.Параметры.ЭкспертнаяНастройка = Настройки.Получить("Эксперт");
		
	КонецЕсли;
	
	Если НЕ Настройки.Получить("СкрыватьНастройкиПриФормировании")=Неопределено Тогда
		
		// Получим значение сохраненной настройки
		НастройкиОтчета.Параметры.СкрыватьНастройкиПриФормировании = Настройки.Получить("СкрыватьНастройкиПриФормировании");
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// Обработчик события возникающего на сервере при сохранении варианта отчета.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	ОбновитьИнформациюОВариантеОтчета();
	ОбновитьНастройкиСКД();
	
КонецПроцедуры //ПриСохраненииВариантаНаСервере()

// Обработчик события возникающего на сервере после загрузки настроек в компоновщик настроек.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
		ВидПериода = "Произвольный";
		
		Для Каждого ЭлементПараметров Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			
			ИмяПараметра = Строка(ЭлементПараметров.Параметр);
			
			Если ИмяПараметра = "НачалоПериода" Тогда
				
				НачалоПериода = ЭлементПараметров.Значение;
				
			ИначеЕсли ИмяПараметра = "КонецПериода" ИЛИ ИмяПараметра = "Период" ИЛИ ИмяПараметра = "ПериодГраница" Тогда
				
				КонецПериода = ЭлементПараметров.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Параметры.Свойство("Настройки") И ТипЗнч(Параметры.Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Параметры.Настройки);
	КонецЕсли;
	
	// Загрузим фиксированные отборы
	Если НастройкиОтчета.Свойство("Отбор") И ТипЗнч(НастройкиОтчета.Отбор) = Тип("Структура") Тогда
		
		НовыйОтбор = Новый Соответствие;
		Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				Для Каждого Свойство Из ЭлементОтбора.Значение Цикл
					НовыйОтбор.Вставить("" + ЭлементОтбора.Ключ + "." + Свойство.Ключ + "", Свойство.Значение);
				КонецЦикла;
			Иначе
				НовыйОтбор.Вставить("" + ЭлементОтбора.Ключ + "", ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
		ОтборыКД    = Отчет.КомпоновщикНастроек.Настройки.Отбор;
		Для Каждого ЭлементОтбора Из НовыйОтбор Цикл
			Имя      = ЭлементОтбора.Ключ;
			Значение = ЭлементОтбора.Значение;
			
			Если Имя = "КонецПериода" Тогда
				
				// Конец периода
				ЗначениеПериода = КонецДня(Значение);
				
				ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
				Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ПараметрКД.Использование = Истина;
					ПараметрКД.Значение      = ЗначениеПериода;
				КонецЕсли;
				
				// Конец периода с границей
				ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодГраница"));
				Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ПараметрКД.Использование = Истина;
					ПараметрКД.Значение      = Новый Граница(ЗначениеПериода, ВидГраницы.Включая);
				КонецЕсли;
				
				// Период
				ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
				Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ПараметрКД.Использование = Истина;
					ПараметрКД.Значение      = ЗначениеПериода;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
			Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПараметрКД.Использование    = Истина;
				ПараметрКД.Значение         = Значение;
			Иначе
				Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
				Иначе
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, , , Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НастройкиОтчета.Отбор.Свойство("НачалоПериода") Тогда
			НачалоПериода = НастройкиОтчета.Отбор.НачалоПериода;
			ВидПериода    = "Произвольный";
		КонецЕсли;
		
		Если НастройкиОтчета.Отбор.Свойство("КонецПериода") Тогда
			КонецПериода = НастройкиОтчета.Отбор.КонецПериода;
			ВидПериода   = "Произвольный";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидПериода = "" Тогда
		
		НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
		КонецПериода  = ТекущаяДатаСеанса();
		
		ВидПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьВидПериода(КлючОбъекта, КлючТекущегоВарианта);
		
	КонецЕсли;
	
	// Обновление ссылки варианта отчета.
	ОбновитьИнформациюОВариантеОтчета();
	
	Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) И Не НастройкиОтчета.Внешний Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
	
	ОбновитьБыстрыеНастройки();
	
	ОтчетыПлатформаСервер.ОбновитьСписокВариантовОтчета(ЭтотОбъект);
	
КонецПроцедуры //ПриЗагрузкеВариантаНаСервере()

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Пользовательские Настройки Компоновки Данных.
//
&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ВариантыОтчетовАльфаАвтоКлиентСервер.СохранитьКлючВариантаОтчета(КлючОбъекта, КлючТекущегоВарианта);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаОтчета" + КлючОбъекта, "СвернутьБыстрыеНастройки", СвернутьБыстрыеНастройки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ФормаОтчета" + КлючОбъекта, "НастройкиОтображенияФормы", НастройкиОтчета.Видимость);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Получает список принтеров установленных в системе и предлагает пользователю выбрать принтер для печати.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ВыбратьПринтер(Команда)
	
	Индекс = СтрЗаменить(Команда.Имя, "ВыбратьПринтер", "");
	КоличествоПринтеров = Принтеры.Количество();
	Если КоличествоПринтеров>Число(Индекс) Тогда
		Для Каждого ТекПринтер Из Элементы.ПодменюПечатьВыборПринтера.ПодчиненныеЭлементы Цикл
			ТекПринтер.Пометка = (ТекПринтер.Имя = "Принтер"+Индекс);
		КонецЦикла;
		ТекПринтер = Принтеры[Число(Индекс)];
		ИмяТекПринтера           = ТекПринтер.Значение;
		ПредставлениеТекПринтера = ТекПринтер.Представление;
		
		ИмяПринтера = ?(ИмяТекПринтера = "ДиалогВыбораПринтера","", ИмяТекПринтера);
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ВыбратьПринтер()

// Обработчик события возникающего на клиенте при выполнении команд рассылки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	
	// Механизмы расширения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		
		ОбновитьНастройкиСКД(,, Истина);
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		Если Команда.Имя = "РассылкаОтчетовСоздатьНовую" Тогда
			МодульРассылкаОтчетовКлиент.СоздатьНовуюРассылкуИзОтчета(ЭтотОбъект, Команда);
		ИначеЕсли Команда.Имя = "РассылкаОтчетовПрисоединитьКСуществующей" Тогда
			МодульРассылкаОтчетовКлиент.ПрисоединитьОтчетКСуществующейРассылке(ЭтотОбъект, Команда);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_Команда()

// Обработчик события возникающего на клиенте при выполнении команды "Оформление таблицы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаОформлениеТаблицы(Команда)
	
	ИмяОформления = СтрЗаменить(Команда.Имя, "ОформлениеТаблицы", "");
	ТекОформление = ОтчетыПлатформаВызовСервера.ПолучитьОформление(ИмяОформления);
	Если Не ТекОформление = Неопределено Тогда
		
		ИмяЭлемента = "Оформление"+ИмяОформления;
		Для Каждого ТекЭлемент Из Элементы.ГруппаОформлениеТаблицы.ПодчиненныеЭлементы Цикл
			ТекЭлемент.Пометка = (ТекЭлемент.Имя = ИмяЭлемента);
		КонецЦикла;
		
		Элементы.ГруппаОформлениеТаблицы.Заголовок = "Оформление " + ТекОформление.Представление;
		
	КонецЕсли;
	
	ИмяОформлениеТаблицы = ИмяОформления;
	
КонецПроцедуры //Подключаемый_ТаблицаОформлениеТаблицы()

// Обработчик события возникающего при при выборе варианта отчета в контексте сервера.
//
// Параметры:
//  ИмяВарианта - Строка - Имя выбранного варианта отчета.
//
&НаСервере
Процедура ВыбратьВариантНаСервере(ИмяВарианта)
	
	ОтчетыПлатформаСервер.УстановитьЗаголовокВарианта(ЭтотОбъект, ИмяВарианта);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(СхемаКомпоновки);
	
	ВидПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьВидПериода(КлючОбъекта, КлючТекущегоВарианта);
					
	ТиповойВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючТекущегоВарианта);
	Если ТиповойВариантНастроек = Неопределено Тогда
		// Пользовательский вариант настроек
		Настройки = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьНастройки(КлючОбъекта, КлючТекущегоВарианта);
		Если НЕ Настройки = Неопределено Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);			
			ОбновитьБыстрыеНастройки();
		КонецЕсли;
	Иначе
		Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета.КомпоновщикНастроек);
		Иначе
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ТиповойВариантНастроек.Настройки);
		КонецЕсли;
		ОбновитьБыстрыеНастройки();
	КонецЕсли;
	
	СтруктураПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьПериод(КлючОбъекта, КлючТекущегоВарианта);
	Если ЗначениеЗаполнено(СтруктураПериода.НачалоПериода) И НЕ Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")) = Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.НачалоПериода]));
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПериода.КонецПериода) И НЕ Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")) = Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.КонецПериода]));
	КонецЕсли;
	Если ВидПериода = "Произвольный" Тогда
		СтруктураПериода = ВариантыОтчетовАльфаАвтоКлиентСервер.ПолучитьПериод(КлючОбъекта, КлючТекущегоВарианта);
		Если ЗначениеЗаполнено(СтруктураПериода.НачалоПериода) Тогда
			ВариантНачалоПериода = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.НачалоПериода]);
			НачалоПериода = ВариантНачалоПериода.Дата;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПериода.КонецПериода) Тогда
			ВариантКонецПериода = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала[СтруктураПериода.КонецПериода]);
			КонецПериода = ВариантКонецПериода.Дата; 
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) И Не НастройкиОтчета.Внешний Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ВыбратьВариантНаСервере()

// Обработчик события возникающего на клиенте при выборе варианта отчета.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ВыбратьВариант(Команда)
	
	ИмяВарианта = СтрЗаменить(Команда.Имя, "ВыбратьВариант", "");
	
	ВариантНастроек = ТаблицаВариантов.НайтиСтроки(Новый Структура("Имя", ИмяВарианта));
	Если ВариантНастроек.Количество()>0 Тогда
		КлючТекущегоВарианта          = ВариантНастроек[0].Идентификатор;
		ПредставлениеТекущегоВарианта = ВариантНастроек[0].Представление;
		ОбновитьИнформациюОВариантеОтчета();
	КонецЕсли;
	
	ВыбратьВариантНаСервере(ИмяВарианта);
	
	Элементы.ДействияФормыВидОтчета.ПодчиненныеЭлементы[ВидОтчета].Пометка = Истина;
	
КонецПроцедуры //Подключаемый_ВыбратьВариант()

&НаСервере
Процедура НастроитьОтборОрганизацияПодразделениеНаСервере()
	
	ОтчетыПлатформаСервер.ЗаполнитьОтборОрганизацияПодразделение(Отбор.ПолучитьЭлементы(),
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при выполнении команды "Сформировать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	
	КлючеваяОперация = "ФормированиеОтчета" + СтрЗаменить(КлючОбъекта,"Отчет.","");
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	НастроитьОтборОрганизацияПодразделениеНаСервере();
	Если НастройкиОтчета.Параметры.СкрыватьНастройкиПриФормировании Тогда
		СвернутьБыстрыеНастройки = Ложь;
		Элементы.ГруппаБыстрыеНастройки.Видимость = Ложь;
		Элементы.СвернутьНастройки.Пометка = Элементы.ГруппаБыстрыеНастройки.Видимость;
	КонецЕсли;
	
	// Если отчет это файл, то выводим без создания фонового задания
	Если ТипЗнч(НастройкиОтчета.Параметры.ОтчетСсылка) = Тип("Строка") Тогда
		СформироватьОтчетНепосредственно();
	Иначе
		РезультатФоновогоЗадания = СформироватьОтчетВФоне();
		
		ПараметрыОбработчика 	= ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
			ПоказатьОшибкиФормирования(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
			Возврат;
		КонецЕсли;
		
		ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
		
		Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
			ФоновоеЗаданиеЗагрузитьРезультат();
			Возврат;
		Иначе
			Элементы.КоманднаяПанельФормы.Доступность = Ложь;
			
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
			
			ЗаданиеЗапущено = Истина;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

// Обработчик события возникающего на клиенте при выполнении команды "Настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОткрытьНастройкиОтчета(Команда)
	
	Если ВидОтчета = 2 Тогда
		ВидОтчетаДляФормыНастроек = 1;
	ИначеЕсли ВидОтчета = 3 Тогда
		ВидОтчетаДляФормыНастроек = 0;
	Иначе
		ВидОтчетаДляФормыНастроек = ВидОтчета;
	КонецЕсли;
	
	ОбновитьНастройкиСКД("ТолькоНастройки", ВидОтчетаДляФормыНастроек);
	Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КлючОбъекта",     КлючОбъекта);
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("ЗаголовокОтчета", ЗаголовокОтчета);
	СтруктураПараметров.Вставить("КлючВарианта",          СокрЛП(КлючТекущегоВарианта));
	СтруктураПараметров.Вставить("ПредставлениеВарианта", СокрЛП(ПредставлениеТекущегоВарианта));
	СтруктураПараметров.Вставить("Вариант",               ОтчетыПлатформаВызовСервера.КомпоновщикПолучитьНастройки(Отчет.КомпоновщикНастроек));
	СтруктураПараметров.Вставить("НачалоПериода",         НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",          КонецДня(КонецПериода));
	СтруктураПараметров.Вставить("ВидПериода",            ВидПериода);
	СтруктураПараметров.Вставить("СтартовыеНастройки",    НастройкиОтчета.КомпоновщикНастроек);
	
	ОписаниеОповещенияИзмененияНастроек = Новый ОписаниеОповещения("Подключаемый_ОповещениеИзмененияНастроек", ЭтотОбъект);
	
	Если НастройкиОтчета.Параметры.ЭкспертнаяНастройка Тогда
		ОткрытьФорму(КлючОбъекта+".ФормаВарианта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещенияИзмененияНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму(КлючОбъекта+".ФормаНастроек", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещенияИзмененияНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьНастройкиОтчета()

// Обработчик события возникающего на клиенте при выполнении команды "Период произвольный".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодПроизвольный(Команда)
	
	ВидПериода = "Произвольный";
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ВидимостьПериода();
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодПроизвольный()

// Обработчик события возникающего на клиенте при выполнении команды "Период день".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодДень(Команда)
	
	ВидПериода    = "День";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодДень()

// Обработчик события возникающего на клиенте при выполнении команды "Период неделя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодНеделя(Команда)
	
	ВидПериода    = "Неделя";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодНеделя()

// Обработчик события возникающего на клиенте при выполнении команды "Период месяц".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодМесяц(Команда)
	
	ВидПериода    = "Месяц";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодМесяц()

// Обработчик события возникающего на клиенте при выполнении команды "Период квартал".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодКвартал(Команда)
	
	ВидПериода    = "Квартал";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодКвартал()

// Обработчик события возникающего на клиенте при выполнении команды "Период год".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодГод(Команда)
	
	ВидПериода    = "Год";
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, Команда.Имя);
	
	ВидимостьПериода();
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодГод()

// Обработчик события возникающего на клиенте при выполнении команды "Период назад".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодНазад(Команда)
	
	Направление = -1;
	ОтчетыПлатформаКлиентСервер.СместитьПериод(ЭтотОбъект, Направление);
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодНазад()

// Обработчик события возникающего на клиенте при выполнении команды "Период вперед".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодВперед(Команда)
	
	Направление = +1;
	ОтчетыПлатформаКлиентСервер.СместитьПериод(ЭтотОбъект, Направление);
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ПериодВперед()

// Обработчик события возникающего на клиенте при выполнении команды "Таблица".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВидОтчетаТаблица(Команда)
	
	ВидОтчета = 0;
	ОбновитьВидТаблицы();
	
КонецПроцедуры //ВидОтчетаТаблица()

// Обработчик события возникающего на клиенте при выполнении команды "Диаграмма".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВидОтчетаДиаграмма(Команда)
	
	ВидОтчета = 1;
	ОбновитьВидТаблицы();
	
КонецПроцедуры //ВидОтчетаДиаграмма()

// Обработчик события возникающего на клиенте при выполнении команды "Таблица и диаграмма".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВидОтчетаТаблицаИДиаграмма(Команда)
	
	ВидОтчета = 2;
	ОбновитьВидТаблицы();
	
КонецПроцедуры //ВидОтчетаТаблицаИДиаграмма()

// Обработчик события возникающего на клиенте при выполнении команды "Линейная таблица".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВидОтчетаЛинейнаяТаблица(Команда)
	
	ВидОтчета = 3;
	ОбновитьВидТаблицы();
	
КонецПроцедуры //ВидОтчетаЛинейнаяТаблица()

// Обработчик события возникающего на клиенте при выполнении команды "Тип диаграммы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаТипДиаграммы(Команда)
	
	Позиция = СтрНайти(Команда.Имя, Команда.Действие);
	ТипДиаграммыОтчета = Сред(Команда.Имя, Позиция+СтрДлина(Команда.Действие));
	Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[ТипДиаграммыОтчета];
	
	ОбновитьТипДиаграммы();
	
КонецПроцедуры //КомандаТипДиаграммы()

// Обработчик события возникающего на клиенте при выполнении команды "Отправить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьОтчетыПоПочте();
	
КонецПроцедуры //Отправить()

// Обработчик события возникающего на клиенте при выполнении команды "Сохранить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Сохранить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПриПодключенииРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
	
КонецПроцедуры //Сохранить()

// Обработчик события возникающего на клиенте при выполнении команды "Настройки панели отчета".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НастройкиПанелиОтчета(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидимостьЭлементов", НастройкиОтчета.Видимость);
	СтруктураПараметров.Вставить("НастройкаЭксперт", НастройкиОтчета.Параметры.ЭкспертнаяНастройка);
	СтруктураПараметров.Вставить("СкрыватьНастройкиПриФормировании", НастройкиОтчета.Параметры.СкрыватьНастройкиПриФормировании);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_УстановитьНастройкиПанелиОтчета", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиПанелиОтчета", СтруктураПараметров, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //НастройкиПанелиОтчета()

// Обработчик события возникающего при выполнении команды "Печать" в контексте сервера.
//
&НаСервере
Функция ПечатьНаСервере(Знач ВременныйТабличныйДокумент)
	
	ДокументДляПечати = Новый ТабличныйДокумент;
	
	// При печати шапку всегда разворачиваем
	// Определим высоту шапки.
	ВременныйТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(1);
	КонецШапки = Ложь;
	Строка = 3;
	Пока НЕ КонецШапки Цикл
		Строка = Строка+1;
		КонецШапки = (ОтчетТабличныйДокумент.Область("R" + Формат(Строка,"ЧГ=0") + "C2").Текст = ""
			И ОтчетТабличныйДокумент.Область("R" + Формат(Строка,"ЧГ=0") + "C1").Текст = "");
	КонецЦикла;
	
	Строка = Формат(Строка,"ЧГ=0");
	
	ДокументДляПечати.Вывести(ВременныйТабличныйДокумент.ПолучитьОбласть("R2:R" + Строка));
	ДокументДляПечати.Вывести(ОтчетТабличныйДокумент.ПолучитьОбласть(СтрШаблон("R%1:R%2", Строка, СтрЗаменить(Строка(ОтчетТабличныйДокумент.ВысотаТаблицы + 1),Символы.НПП,""))));
	
	Возврат ДокументДляПечати;
	
КонецФункции //ПечатьНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Печать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Печать(Команда)
	
	ДокументДляПечати = ПечатьНаСервере(ОтчетТабличныйДокумент);
	ДокументДляПечати.ИмяПринтера = ИмяПринтера;
	ДокументДляПечати.ИмяПараметровПечати = ОтчетТабличныйДокумент.ИмяПараметровПечати;
	
	СразуНаПечать = (НЕ ПустаяСтрока(ИмяПринтера));
	
	// печать табличного документа
	ДокументДляПечати.Напечатать(СразуНаПечать);
	
КонецПроцедуры //Печать()

// Обработчик события возникающего на клиенте при выполнении команды "Добавить группу отборов".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ДобавитьГруппуОтборов(Команда)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	ЭлементыОтбора = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Отбор);
	
	НоваяГруппаОтборов = ЭлементыОтбора.Добавить();
	НоваяГруппаОтборов.Использование           = Истина;
	НоваяГруппаОтборов.Папка                   = Истина;
	НоваяГруппаОтборов.ТипГруппы               = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	НоваяГруппаОтборов.ВыводитьТолькоЗаголовок = Истина;
	
	Элементы.Отбор.ТекущаяСтрока = НоваяГруппаОтборов.ПолучитьИдентификатор();
	
КонецПроцедуры //ДобавитьГруппуОтборов()

// Обработчик события возникающего на клиенте при выполнении команды "Отбор изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборИзменить(Команда)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
	 ИЛИ НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОтборЗаголовок" Тогда
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "Отбор");
		ПараметрыВыбора.Вставить("ТекущееПоле",     ТекущиеДанные.ЛевоеЗначение);
		ПараметрыВыбора.Вставить("ВидСравнения",    ПолучитьПолноеИмяПредопределенногоЗначения(ТекущиеДанные.ВидСравнения));
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект, , , ,
			ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		Если ТекущиеДанные.Папка Тогда
			Возврат;
		КонецЕсли;
		
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
		
		Если ДоступноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		Иначе
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		КонецЕсли;
		
		Элементы.Отбор.ИзменитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры // ОтборИзменить()

// Обработчик события возникающего на клиенте при выполнении команды "Строки изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СтрокиИзменить(Команда)
	
	ИзменитьГруппировкуСтроки();
	
КонецПроцедуры //СтрокиИзменить()

// Обработчик события возникающего на клиенте при выполнении команды "Колонки изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КолонкиИзменить(Команда)
	
	ИзменитьГруппировкуКолонки();
	
КонецПроцедуры //КолонкиИзменить()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели развернуть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиРазвернуть(Команда)
	
	Для Каждого Строка Из Показатели.ПолучитьЭлементы() Цикл
		Элементы.Показатели.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры //ПоказателиРазвернуть()

// Обработчик события возникающего на клиенте при выполнении команды "Показатели свернуть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиСвернуть(Команда)
	
	Для Каждого Строка Из Показатели.ПолучитьЭлементы() Цикл
		Элементы.Показатели.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры //ПоказателиСвернуть()

// Обработчик события возникающего на клиенте при выполнении команды "Свернуть настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СвернутьНастройки(Команда)
	
	Если СвернутьБыстрыеНастройки Тогда
		СвернутьБыстрыеНастройки = Ложь;
		Элементы.ГруппаБыстрыеНастройки.Видимость = Ложь;
		Элементы.СвернутьНастройки.Пометка = Ложь;
	Иначе
		СвернутьБыстрыеНастройки = Истина;
		Элементы.ГруппаБыстрыеНастройки.Видимость = Истина;
		Элементы.СвернутьНастройки.Пометка = Истина;
	КонецЕсли;
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	
КонецПроцедуры //СвернутьНастройки()

// Обработчик события возникающего на клиенте при выполнении команды "ОткрытьРасшифровку".
//
// Параметры:
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//
&НаКлиенте
Процедура ОткрытьРасшифровку(Команда)
	
	Расшифровка = Элементы.ОтчетТабличныйДокумент.ТекущаяОбласть.Расшифровка;
	Если НЕ Расшифровка = Неопределено Тогда
		ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,
			Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект);
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОповещениеОЗакрытии, Расшифровка, , , Истина);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьРасшифровку()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(ВыполненноеДействие, Ссылка, ДополнительныеПараметры=Неопределено) Экспорт
	
	ПоказатьЗначение(,Ссылка);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Обработчик события возникающего при выполнении команды "Сохранить текущие параметры как стандартные" в контексте сервера.
//
&НаСервере
Процедура УстановитьСтандартныеПараметрыНаСервере()
	
	УправлениеПечатьюПлатформа.
	УстановитьСтандартныеПараметрыПечати(ОтчетТабличныйДокумент.ИмяПараметровПечати, ОтчетТабличныйДокумент);
	
КонецПроцедуры // УстановитьСтандартныеПараметрыНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Установить стандартные параметры".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура УстановитьСтандартныеПараметры(Команда)
	
	УстановитьСтандартныеПараметрыНаСервере();
	
КонецПроцедуры // УстановитьСтандартныеПараметры()

// Обработчик события возникающего при выполнении команды "Сохранить текущие параметры как стандартные" в контексте сервера.
//
&НаСервере
Функция СохранитьТекущиеПараметрыКакСтандартныеНаСервере()
	
	УправлениеПечатьюПлатформа.СохранитьТекущиеПараметрыКакСтандартные(ОтчетТабличныйДокумент.ИмяПараметровПечати,ОтчетТабличныйДокумент);
	
КонецФункции //СохранитьТекущиеПараметрыКакСтандартныеНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Сохранить текущие параметры как стандартные".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СохранитьТекущиеПараметрыКакСтандартные(Команда)
	
	СохранитьТекущиеПараметрыКакСтандартныеНаСервере();
	
КонецПроцедуры //СохранитьТекущиеПараметрыКакСтандартные()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вариант периода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	КонецПериода = ВариантПериода;
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ВариантПериодаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Начало периода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //НачалоПериодаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Конец периода".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыКонецПериода(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //КонецПериодаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Показатели Использование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПоказателиИспользованиеПриИзменении(Элемент)
	
	Если Элементы.Показатели.ТекущиеДанные.Папка Тогда
		ПодчиненныеПоказатели = Элементы.Показатели.ТекущиеДанные.ПолучитьЭлементы();
		Для Каждого ТекущийПоказатель Из ПодчиненныеПоказатели Цикл
			ТекущийПоказатель.Использование = Элементы.Показатели.ТекущиеДанные.Использование;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПоказателиИспользованиеПриИзменении()

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	
	ПараметрыДанных = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	СценарийПланированияПоле     = Новый ПараметрКомпоновкиДанных("СценарийПланирования");
	СценарийПланированияПараметр = ПараметрыДанных.НайтиЗначениеПараметра(СценарийПланированияПоле);
	
	СценарийПланированияПараметр.Значение = Отчет.СценарийПланирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьНезапланированныеДанныеПриИзменении(Элемент)
	
	ПараметрыДанных = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ВыводитьНезапланированныеДанныеПоле     = Новый ПараметрКомпоновкиДанных("ВыводитьНезапланированныеДанные");
	ВыводитьНезапланированныеДанныеПараметр = ПараметрыДанных.НайтиЗначениеПараметра(ВыводитьНезапланированныеДанныеПоле);
	
	ВыводитьНезапланированныеДанныеПараметр.Значение = Отчет.ВыводитьНезапланированныеДанные;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке  таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
	 ИЛИ НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОтборЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
		ПараметрыВыбора.Вставить("ВидПолей",        "Отбор");
		ПараметрыВыбора.Вставить("ТекущееПоле",     ТекущиеДанные.ЛевоеЗначение);
		ПараметрыВыбора.Вставить("ВидСравнения",    ПолучитьПолноеИмяПредопределенногоЗначения(ТекущиеДанные.ВидСравнения));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		ДополнительныеПараметры.Вставить("Событие",       "Отбор");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект,
			ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект, , , ,
			ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		Если ТекущиеДанные.Папка Тогда
			Возврат;
		КонецЕсли;
		
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
		
		Если ДоступноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		Иначе
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВыбор()

// Обработчик события возникающего на клиенте при активизации строки таблицы выполняемый с задержкой.
//
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Папка Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторОтбора = Строка(Элементы.Отбор.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтбора = Элементы.Отбор.ТекущаяСтрока;
	
	// Настройка значения отбора
	СписокВыбораЗначений = Элементы.ОтборПравоеЗначение.СписокВыбора;
	СписокВыбораЗначений.Очистить();
	
	Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка     = Ложь;
	Элементы.ОтборПравоеЗначение.КнопкаВыбора            = Истина;
	Элементы.ОтборПравоеЗначение.КнопкаВыпадающегоСписка = Ложь;
	Элементы.ОтборПравоеЗначение.ОграничениеТипа         = Новый ОписаниеТипов("Неопределено");
	
	ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
	
	Если ДоступноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Настройка значения отбора
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
		ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	Иначе
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	КонецЕсли;
	
	Элементы.ОтборПравоеЗначение.Маска                = ДоступноеПоле.Маска;
	Элементы.ОтборПравоеЗначение.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
	Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ДоступноеПоле.ТипЗначения;
	
	Если ТипЗнч(ДоступноеПоле.ДоступныеЗначения) = Тип("СписокЗначений") И ДоступноеПоле.ДоступныеЗначения.Количество() > 0 Тогда
		
		Для Каждого ДоступноеЗначение Из ДоступноеПоле.ДоступныеЗначения Цикл
			СписокВыбораЗначений.Добавить(ДоступноеЗначение.Значение, ДоступноеЗначение.Представление);
		КонецЦикла;
		
		Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка     = Истина;
		Элементы.ОтборПравоеЗначение.КнопкаВыбора            = Ложь;
		Элементы.ОтборПравоеЗначение.КнопкаВыпадающегоСписка = Истина;
		
	Иначе
		
		Элементы.ОтборПравоеЗначение.БыстрыйВыбор = ДоступноеПоле.БыстрыйВыбор;
		
		Если НЕ ДоступноеПоле.ФормаВыбора = "" Тогда
			УстановитьФормуВыбора(Элементы.ОтборПравоеЗначение, ДоступноеПоле.ФормаВыбора);
		КонецЕсли;
		
		Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
		
		МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
		Если МассивТипов.Количество()> 0 Тогда
			Если МассивТипов[0] = Тип("Строка") Тогда
				Элементы.ОтборПравоеЗначение.КнопкаВыбора = Ложь;
				Элементы.ОтборПравоеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте при активизации строки таблицы.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки",0.1, Истина);
	
КонецПроцедуры //ОтборПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",        "Отбор");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОтборПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект, , , ,
		ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОтборПередНачаломДобавления()

// Обработчик события возникающего на клиенте перед началом интерактивного изменения строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
	   	Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

// Обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры //ОтборПриОкончанииРедактирования()

// Обработчик события возникающего на клиенте при движении курсора в поле приемнике данных.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка                        - Строка таблицы, над которой находится курсор.
//  Поле                          - Элемент управляемой формы, с которым связана данная колонка таблицы.
//
&НаКлиенте
Процедура ОтборПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если НЕ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры //ОтборПроверкаПеретаскивания()

// Обработчик события возникающего на клиенте при окончании перетаскивания в поле - приемнике данных.
//
// Параметры:
//  Элемент                 - ТаблицаФормы            - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка    - Булево                  - В данный параметр передается признак выполнения системной
//                                                      обработки события.
//  Строка                                            - Содержит порядковый номер строки или ссылку на текущий объект.
//  Поле                                              - Поле, с которым связана данная колонка таблицы, над которой
//                                                      находится объект.
//
&НаКлиенте
Процедура ОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Отбор.НайтиПоИдентификатору(Значение);
	
	ДеревоПоказателей = Отбор.ПолучитьЭлементы();
	
	Если Строка = Неопределено Тогда
		
		НоваяСтрока = ДеревоПоказателей.Добавить();
		
	ИначеЕсли ТипЗнч(Строка) = Тип("Число") Тогда
		
		СтрокаПриемник = Отбор.НайтиПоИдентификатору(Строка);
		
		// Нельзя перетаскивать группу в собственную ветку
		Если СтрокаИсточник.Папка Тогда
			ТекущийРодитель = СтрокаПриемник.ПолучитьРодителя();
			Пока НЕ ТекущийРодитель = Неопределено Цикл
				Если ТекущийРодитель = СтрокаИсточник Тогда
					Возврат;
				КонецЕсли;
				ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаПриемник.Папка Тогда
			
			НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
			
		Иначе
			
			РодительПриемника = СтрокаПриемник.ПолучитьРодителя();
			Если РодительПриемника = Неопределено Тогда
				КоллекцияПриемника = ДеревоПоказателей;
			Иначе
				КоллекцияПриемника = РодительПриемника.ПолучитьЭлементы();
			КонецЕсли;
			ИндексПриемника = КоллекцияПриемника.Индекс(СтрокаПриемник);
			НоваяСтрока = КоллекцияПриемника.Вставить(ИндексПриемника+1);
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	
	СкопироватьСтрокуДерева(НоваяСтрока.ПолучитьЭлементы(), СтрокаИсточник.ПолучитьЭлементы());
	
	РодительИсточника = СтрокаИсточник.ПолучитьРодителя();
	Если РодительИсточника = Неопределено Тогда
		ДеревоПоказателей.Удалить(СтрокаИсточник);
	Иначе
		РодительИсточника.ПолучитьЭлементы().Удалить(СтрокаИсточник);
	КонецЕсли;
	
	Элементы.Отбор.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	
	Элементы.Отбор.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры //ОтборПеретаскивание()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Правое значение".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры //ОтборПравоеЗначениеПриИзменении()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Правое значение".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
		ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
		
		Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СписокВыбора",      ТекущиеДанные.ПравоеЗначение);
		СтруктураПараметров.Вставить("ТипЗначения",       ДоступноеПоле.ТипЗначения);
		СтруктураПараметров.Вставить("ДоступныеЗначения", ДоступноеПоле.ДоступныеЗначения);
		СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПравоеЗначениеНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтроки

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке  таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура СтрокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Поле = Элементы.Строки.ТекущийЭлемент;
	
	Если Поле.Имя = "ГруппировкиСтрокЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИзменитьГруппировкуСтроки();
		
	КонецЕсли;
	
КонецПроцедуры //СтрокиВыбор()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура СтрокиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",        "ПоляГруппировки");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_СтрокиПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект, , , ,
		ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СтрокиПередНачаломДобавления()

// Обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура СтрокиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры //СтрокиПриОкончанииРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказатели

// Обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура ПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры //ПоказателиПриОкончанииРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметры

// Обработчик события возникающего на клиенте при изменении данных
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	
	Если ВариантМодифицирован = Истина Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКолонки

// Обработчик события возникающего при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки.
//  Поле                 - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево    - данный параметр передается признак выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура КолонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Поле = Элементы.Колонки.ТекущийЭлемент;
	Если Поле.Имя = "ГруппировкиКолонокЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИзменитьГруппировкуКолонки();
		
	КонецЕсли;
	
КонецПроцедуры //КолонкиВыбор()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура КолонкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",        "ПоляГруппировки");
	ПараметрыВыбора.Вставить("ЕстьРеквизиты",   Ложь);
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_КолонкиПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект, , , ,
		ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // КолонкиПередНачаломДобавления()

// Обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура КолонкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры //КолонкиПриОкончанииРедактирования()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОНОСЯЩИХСЯ К ДИАГРАММЕ

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Серии".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура СерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("ТекущееПоле",     Серии);
	СтруктураПараметров.Вставить("ВидПолей",        "Серии");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //СерииНачалоВыбора()

// Обработчик события возникающего в момент нажатия кнопки очистки или нажатии комбинации клавиш Shift + F4 реквизита "Серии".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура СерииОчистка(Элемент, СтандартнаяОбработка)
	
	Серии = "";
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Точки".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ТочкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("ТекущееПоле",     Точки);
	СтруктураПараметров.Вставить("ВидПолей",        "Точки");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ТочкиНачалоВыбора()

// Обработчик события возникающего в момент нажатия кнопки очистки или нажатии комбинации клавиш Shift + F4 реквизита "Точки".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ТочкиОчистка(Элемент, СтандартнаяОбработка)
	
	Точки = "";
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ТочкиОчистка()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Показатель".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	СтруктураПараметров.Вставить("ТекущееПоле",     Показатель);
	СтруктураПараметров.Вставить("ВидПолей",        "Показатель");
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ПоказательНачалоВыбора()

// Обработчик события возникающего в момент нажатия кнопки очистки или нажатии комбинации клавиш Shift + F4 реквизита "Показатель".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ПоказательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры //ПоказательОчистка()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид подписей".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВидПодписейПриИзменении(Элемент)
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ВидПодписейПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Тип диаграммы отчета".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТипДиаграммыОтчетаПриИзменении(Элемент)
	
	ОбновитьТипДиаграммы();
	
	// Устанавливаем картинку типа диаграммы.
	Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[ТипДиаграммыОтчета];
	
КонецПроцедуры //ТипДиаграммыОтчетаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество записей серий".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоЗаписейСерийПриИзменении(Элемент)
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //КоличествоЗаписейСерийПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество записей точек".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоЗаписейТочекПриИзменении(Элемент)
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //КоличествоЗаписейТочекПриИзменении()

// Обработчик события возникающего на клиенте при нажатии на надпись "Тип диаграммы".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДекорацияТипДиаграммыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораТипаДиаграммы", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораТипаДиаграммы", , ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещенияОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ДекорацияТипДиаграммыНажатие()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РАБОТЫ С ПРИНТЕРОМ

// Добавляет имена принтеров системы в список выбора принтеров для печати.
//
&НаКлиенте
Процедура ОбновитьСписокПринтеров()
	
	// Получим принтеры системы
	Объекты = УправлениеПечатьюПлатформаКлиентПовтИсп.ОбновитьСписокПринтеров();
	
	Если НЕ Объекты = Неопределено Тогда
		
		// Теперь переберем все принтеры системы
		Счетчик = 0;
		Для Каждого Принтер Из Объекты Цикл
			
			ИмяВремПринтера = Принтер.Name;
			Пока СтрНайти(ИмяВремПринтера, "\") > 0 Цикл
				ИмяВремПринтера = Сред(ИмяВремПринтера, СтрНайти(ИмяВремПринтера,"\") + 1);
			КонецЦикла;
			ИмяВремПринтера = СокрЛП(ИмяВремПринтера);
			
			Принтеры.Добавить(Принтер.Name, ИмяВремПринтера, Принтер.Properties_("Default").Value);
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Принтеры.Вставить(0, "ДиалогВыбораПринтера", НСтр("ru = 'Выбор принтера при печати'"));
	
КонецПроцедуры //ОбновитьСписокПринтеров()

// Сохраняет список принтеров системы в переменную сеанса.
//
&НаСервере
Процедура ЗаписатьСписокПринтеров()
	
	СписокПринтеров = Новый СписокЗначений;
	
	Для Ном = 1 По Принтеры.Количество() - 1 Цикл
		СписокПринтеров.Добавить(Принтеры[Ном].Значение, Принтеры[Ном].Представление, Принтеры[Ном].Пометка);
	КонецЦикла;
	
	ЗначениеПеременнойСеансаУстановить("СписокПринтеров", СписокПринтеров);
	
КонецПроцедуры //ЗаписатьСписокПринтеров()

// Обновляет подменю выбора принтеров для печати.
//
&НаСервере
Процедура ОбновитьСписокПринтеровДляПечати()
	
	ДобавитьПринтер(0, НСтр("ru = 'Выбор принтера при печати'"));
	Счетчик = 1;
	Для Ном = 1 По Принтеры.Количество() - 1 Цикл
		ДобавитьПринтер(Счетчик, Принтеры[Ном].Значение, Принтеры[Ном].Пометка);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры //ОбновитьСписокПринтеровДляПечати()

// Добавляет команды выбора принтера для печати.
//
&НаСервере
Процедура ДобавитьПринтер(Счетчик, ИмяВремПринтера, Пометка = Ложь);
	
	ИмяКоманды   = "ВыбратьПринтер"+Формат(Счетчик, "ЧН=0; ЧГ=0");
	НоваяКоманда = Команды.Найти(ИмяКоманды);
	Если НоваяКоманда = Неопределено Тогда
		НоваяКоманда = Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "Подключаемый_ВыбратьПринтер";
	КонецЕсли;
	
	ИдентификаторПринтера = "Принтер"+Формат(Счетчик, "ЧН=0; ЧГ=0");
	
	// Добавим Вид сравнения
	НовыйПринтер = Элементы.Добавить(ИдентификаторПринтера, Тип("КнопкаФормы"), Элементы.ПодменюПечатьВыборПринтера);
	НовыйПринтер.ИмяКоманды = ИмяКоманды;
	НовыйПринтер.Заголовок  = ИмяВремПринтера;
	НовыйПринтер.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйПринтер.Пометка    = Пометка;
	
КонецПроцедуры //ДобавитьПринтер()

// Устанавливает признак использования принтера, который использовался последним.
//
&НаКлиенте
Процедура ВыводПоследнегоПринтера()
	
	// "Вспомним" о том, на каком принтере в последний раз печатали
	ИмяТекПринтера = ОтчетТабличныйДокумент.ИмяПринтера;
	Если ЗначениеЗаполнено(ИмяТекПринтера) Тогда
		ТекПринтер = Принтеры.НайтиПоЗначению(ИмяТекПринтера);
		Если ТекПринтер = Неопределено Тогда
			ИмяТекПринтера = "";
		Иначе
			Индекс = Принтеры.Индекс(ТекПринтер);
			Элементы.ПодменюПечатьВыборПринтера.ПодчиненныеЭлементы[Индекс].Пометка = Истина;
			ПредставлениеТекПринтера = ТекПринтер.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяТекПринтера) Тогда
		Для Каждого ТекПринтер Из Принтеры Цикл
			Если ТекПринтер.Пометка Тогда
				ИмяТекПринтера           = ТекПринтер.Значение;
				ПредставлениеТекПринтера = ТекПринтер.Представление;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(ИмяТекПринтера) Тогда
			ТекПринтер = Принтеры[0];
			ИмяТекПринтера           = ТекПринтер.Значение;
			ПредставлениеТекПринтера = ТекПринтер.Представление;
			Элементы.ПодменюПечатьВыборПринтера.ПодчиненныеЭлементы[0].Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИмяПринтера = ?(ИмяТекПринтера = "ДиалогВыбораПринтера","", ИмяТекПринтера);
	
КонецПроцедуры //ВыводПоследнегоПринтера()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеВыбораПоля(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.ВидПолей = "ПоляГруппировки" Тогда
		
		ТекущиеДанные = ПолучитьТекущиеДанныеПоСтруктуре(ЭтотОбъект, ДополнительныеПараметры.МассивПутей);
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Заголовок = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.ПоляГруппировки.Очистить();
		НоваяСтрока = ТекущиеДанные.ПоляГруппировки.Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = РезультатЗакрытия.Поле;
		НоваяСтрока.Заголовок      = РезультатЗакрытия.Заголовок;
		НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение(РезультатЗакрытия.ТипГруппировки);
		
		ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, ДополнительныеПараметры.МассивПутей, "Выбор");
		
		ТекущиеДанные.Порядок.Очистить();
		ТекущиеДанные.Отбор.Элементы.Очистить();
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Точки" Тогда
		
		ТочкиЗаголовок = РезультатЗакрытия.Заголовок;
		Точки          = РезультатЗакрытия.Поле;
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Серии" Тогда
		
		СерииЗаголовок = РезультатЗакрытия.Заголовок;
		Серии          = РезультатЗакрытия.Поле;
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Показатель" Тогда
		
		ПоказательЗаголовок = РезультатЗакрытия.Заголовок;
		Показатель          = РезультатЗакрытия.Поле;
		
	ИначеЕсли РезультатЗакрытия.ВидПолей = "Отбор" Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		ТекущиеДанные.Заголовок     = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Использование = Истина;
		ТекущиеДанные.ЛевоеЗначение = РезультатЗакрытия.Поле;
		ТекущиеДанные.ВидСравнения  = ПредопределенноеЗначение(РезультатЗакрытия.ВидСравнения);
		ТекущиеДанные.Папка         = Ложь;
		
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(РезультатЗакрытия.Поле);
		Если ДоступноеПоле = Неопределено
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ТекущиеДанные.ПравоеЗначение = Неопределено;
			ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
		Иначе
			
			ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
			
			ТекущееЗначение = ТекущиеДанные.ПравоеЗначение;
			
			// Если старый вид сравнения был в списке
			Если НЕ ОтборПоСписку(ТекущиеДанные.ВидСравнения) И ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений") Тогда
				
				Если ТекущееЗначение.Количество() = 0 Тогда
					ТекущееЗначение = Неопределено;
				Иначе
					ТекущееЗначение = ТекущееЗначение[0].Значение;
				КонецЕсли;
				
			// Если новый вид сравнения стал в списке
			ИначеЕсли ОтборПоСписку(ТекущиеДанные.ВидСравнения) И (НЕ ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений")) Тогда
				ВременныйСписок = Новый СписокЗначений;
				ВременныйСписок.Добавить(ТекущееЗначение);
				ТекущееЗначение = ВременныйСписок;
			КонецЕсли;
			
			Если ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений") Тогда
				КоличествоЭлементов = ТекущееЗначение.Количество()-1;
				Пока КоличествоЭлементов>=0 Цикл
					
					ПоследнийЭлемент = ТекущееЗначение[КоличествоЭлементов];
					ПоследнийЭлемент.Значение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(ПоследнийЭлемент.Значение);
					
					Если НЕ ЗначениеЗаполнено(ПоследнийЭлемент.Значение) Тогда
						ТекущееЗначение.Удалить(ПоследнийЭлемент);
					КонецЕсли;
					
					КоличествоЭлементов = КоличествоЭлементов - 1;
					
				КонецЦикла;
			Иначе
				МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
				Если МассивТипов[0] = Тип("Строка") Тогда
					ТипСтрока = Новый ОписаниеТипов("Строка");
					ТекущееЗначение = ТипСтрока.ПривестиЗначение(ТекущееЗначение);
				Иначе
					ТекущееЗначение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(ТекущееЗначение);
				КонецЕсли;
			КонецЕсли;
			
			ТекущиеДанные.ПравоеЗначение = ТекущееЗначение;
			
		КонецЕсли;
		
		ИдентификаторОтбора = "";
		Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки();
		
	КонецЕсли;
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //Подключаемый_ОповещениеВыбораПоля()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОтборПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		ЭлементыОтбора = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Отбор);
		
		НовыйОтбор = ЭлементыОтбора.Добавить();
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.Заголовок     = РезультатЗакрытия.Заголовок;
		НовыйОтбор.ЛевоеЗначение = РезультатЗакрытия.Поле;
		НовыйОтбор.ВидСравнения  = ПредопределенноеЗначение(РезультатЗакрытия.ВидСравнения);
		НовыйОтбор.Папка         = Ложь;
		
		Элементы.Отбор.ТекущаяСтрока = НовыйОтбор.ПолучитьИдентификатор();
		
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОтборПередНачаломДобавленияЗавершение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеВыбораЗначенияОтбора()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_СтрокиПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		НоваяГруппировка = ГруппировкиСтрок.Добавить();
		НоваяГруппировка.Использование = Истина;
		НоваяГруппировка.Заголовок = РезультатЗакрытия.Заголовок;
		
		НоваяСтрока = НоваяГруппировка.ПоляГруппировки.Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = РезультатЗакрытия.Поле;
		НоваяСтрока.Заголовок      = РезультатЗакрытия.Заголовок;
		НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение(РезультатЗакрытия.ТипГруппировки);
		
		МассивПутей = Новый Структура;
		МассивПутей.Вставить("ГруппировкиСтрок", НоваяГруппировка.ПолучитьИдентификатор());
		
		ЗаполнитьКоллекциюИзХранилища(РезультатЗакрытия.АдресТаблицы, МассивПутей, "Выбор");
		
		Элементы.Строки.ТекущаяСтрока = НоваяГруппировка.ПолучитьИдентификатор();
		
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_СтрокиПередНачаломДобавленияЗавершение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_КолонкиПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		НоваяГруппировка = ГруппировкиКолонок.Добавить();
		НоваяГруппировка.Использование = Истина;
		НоваяГруппировка.Заголовок     = РезультатЗакрытия.Заголовок;
		
		НоваяСтрока = НоваяГруппировка.ПоляГруппировки.Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = РезультатЗакрытия.Поле;
		НоваяСтрока.Заголовок      = РезультатЗакрытия.Заголовок;
		НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение(РезультатЗакрытия.ТипГруппировки);
		
		Элементы.Строки.ТекущаяСтрока = НоваяГруппировка.ПолучитьИдентификатор();
		
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_КолонкиПередНачаломДобавленияЗавершение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  ВыбранныйТипДиаграммы   - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеВыбораТипаДиаграммы(ВыбранныйТипДиаграммы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйТипДиаграммы <> Неопределено Тогда
		ТипДиаграммыОтчета = ВыбранныйТипДиаграммы;
		Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[ВыбранныйТипДиаграммы];
		ЭтоДвухмернаяДиаграмма = ОтчетыПлатформаКлиентСервер.ДвухмернаяДиаграмма(ВыбранныйТипДиаграммы);
		Элементы.Точки.Доступность                  = ЭтоДвухмернаяДиаграмма;
		Элементы.КоличествоЗаписейТочек.Доступность = ЭтоДвухмернаяДиаграмма;
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеВыбораТипаДиаграммы()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Результат   - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_УстановитьНастройкиПанелиОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	// обновим структуру настроек отчета
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиОтчета.Видимость, Результат);
		НастройкиОтчета.Параметры.ЭкспертнаяНастройка = Результат.ЭкспертнаяНастройка;
		НастройкиОтчета.Параметры.СкрыватьНастройкиПриФормировании = Результат.СкрыватьНастройкиПриФормировании;
		
		// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
		СохраняемыеВНастройкахДанныеМодифицированы = ИСТИНА;
		
		УстановитьВидимостьЭлементов();
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_УстановитьНастройкиПанелиОтчета()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатЗакрытия       - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОповещениеИзмененияНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		РезультатЗакрытия.Свойство("НачалоПериода", НачалоПериода);
		РезультатЗакрытия.Свойство("КонецПериода",  КонецПериода);
		РезультатЗакрытия.Свойство("ВидПериода",    ВидПериода);
		
		КомпоновщикЗагрузитьНастройки(РезультатЗакрытия);
		ОбновитьБыстрыеНастройки();
		
		КлючТекущегоВарианта          = РезультатЗакрытия.КлючВарианта;
		ПредставлениеТекущегоВарианта = РезультатЗакрытия.ПредставлениеВарианта;
		
		ОбновитьИнформациюОВариантеОтчета();
		
		ОбновитьСписокВариантовОтчета();
		ОчиститьСообщения();
		СформироватьОтчетНепосредственно();
		
	Иначе
		
		ОбновитьСписокВариантовОтчета();
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОповещениеИзмененияНастроек()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  УчетнаяЗаписьНастроена       - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ИмяОткрываемойФормы = "ОбщаяФорма.ВыборФорматаВложений";
	Если ПолучателейБольшеОдного(ПараметрыВывода.ПараметрыОтправки.Получатель) Тогда
		ПараметрыФормы.Вставить("Получатели", ПараметрыВывода.ПараметрыОтправки.Получатель);
		ИмяОткрываемойФормы = "ОбщаяФорма.ПодготовкаНовогоПисьма";
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры //Подключаемый_ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена()

&НаКлиенте
Функция ПолучателейБольшеОдного(Получатель)
	
	Если ТипЗнч(Получатель) = Тип("Массив") Или ТипЗнч(Получатель) = Тип("СписокЗначений") Тогда
		Возврат Получатель.Количество() > 1;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Получатель).Количество() > 1;
	КонецЕсли;
	
КонецФункции //ПолучателейБольшеОдного()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущиеДанныеПоСтруктуре(ОбъектФормы, МассивПутей)
	
	ТекущийОбъект = ОбъектФормы;
	Для Каждого ПутьКДанным Из МассивПутей Цикл
		Если ПутьКДанным.Значение = Неопределено Тогда
			ТекущийОбъект = ТекущийОбъект[ПутьКДанным.Ключ];
		Иначе
			ТекущийОбъект = ТекущийОбъект[ПутьКДанным.Ключ].НайтиПоИдентификатору(ПутьКДанным.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекущийОбъект;
	
КонецФункции //ПолучитьТекущиеДанныеПоСтруктуре()

// Процедура заполняет коллекцию формы из временного хранилища.
//
&НаСервере
Процедура ЗаполнитьКоллекциюИзХранилища(АдресТаблицы, МассивПутей, ИмяТаблицы = Неопределено)
	
	КоллекцияФормы = ПолучитьТекущиеДанныеПоСтруктуре(ЭтотОбъект, МассивПутей);
	
	Если НЕ ИмяТаблицы = Неопределено Тогда
		КоллекцияФормы = КоллекцияФормы[ИмяТаблицы];
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияФормы) = Тип("ДанныеФормыДерево") ИЛИ ТипЗнч(КоллекцияФормы) = Тип("ДанныеФормыЭлементДерева") Тогда
		КоллекцияФормы = КоллекцияФормы.ПолучитьЭлементы();
	КонецЕсли;
	
	КоллекцияФормы.Очистить();
	
	Если Не ЗначениеЗаполнено(АдресТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКоллекции = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТипЗнч(ОбъектКоллекции) = Тип("ДеревоЗначений") Тогда
		ОбъектКоллекции = ОбъектКоллекции.Строки;
	КонецЕсли;
	
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ЭтотОбъект, КоллекцияФормы, ОбъектКоллекции);
	
КонецПроцедуры // ЗаполнитьКоллекциюИзХранилища()

// Функция помещает коллекцию формы во временное хранилище и возвращает адрес.
//
&НаСервере
Функция ПоместитьКоллекциюВХранилище(МассивПутей, ИмяТаблицы)
	
	СтрокаТаблицы = ПолучитьТекущиеДанныеПоСтруктуре(ЭтотОбъект, МассивПутей);
	
	КоллекцияФормы = СтрокаТаблицы[ИмяТаблицы];
	
	Результат = Неопределено;
	
	ОбъектКоллекции = Неопределено;
	Если ТипЗнч(КоллекцияФормы) = Тип("ДанныеФормыДерево") Тогда
		ОбъектКоллекции = ДанныеФормыВЗначение(КоллекцияФормы, Тип("ДеревоЗначений"));
	Иначе
		ОбъектКоллекции = ДанныеФормыВЗначение(КоллекцияФормы, Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	Результат = ПоместитьВоВременноеХранилище(ОбъектКоллекции, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции // ПоместитьКоллекциюВХранилище()

// Добавляет команды создания рассылок в форму отчета.
//
&НаСервере
Процедура ФормаОтчетаДобавитьКоманды(Форма, Отказ, СтандартнаяОбработка)
	
	// Рассылки можно добавлять только если есть ссылка варианта.
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.РассылкиОтчетов) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление команд и кнопок
	КомандаСоздать = Форма.Команды.Добавить("РассылкаОтчетовСоздатьНовую");
	КомандаСоздать.Действие  = "Подключаемый_Команда";
	КомандаСоздать.Картинка  = БиблиотекаКартинок.РассылкаОтчетов;
	КомандаСоздать.Заголовок = НСтр("ru = 'Создать рассылку отчетов...'");
	КомандаСоздать.Подсказка = НСтр("ru = 'Создать новую рассылку отчетов и добавить в нее отчет с текущими настройками.'");
	
	КомандаПрисоединить = Форма.Команды.Добавить("РассылкаОтчетовПрисоединитьКСуществующей");
	КомандаПрисоединить.Действие  = "Подключаемый_Команда";
	КомандаПрисоединить.Картинка  = БиблиотекаКартинок.РассылкаОтчетов;
	КомандаПрисоединить.Заголовок = НСтр("ru = 'Включить в существующую рассылку отчетов...'");
	КомандаПрисоединить.Подсказка = НСтр("ru = 'Присоединить отчет с текущими настройками к существующей рассылке отчетов.'");
	
	Подменю = Форма.Элементы.Добавить("ОтправитьРассылку", Тип("ГруппаФормы"), Форма.Элементы.ГруппаЭкспорт);
	Подменю.Вид = ВидГруппыФормы.Подменю;
	Подменю.Заголовок = НСтр("ru = 'Рассылка'");
	
	ЭлементСоздать = Форма.Элементы.Добавить(КомандаСоздать.Имя, Тип("КнопкаФормы"), Подменю);
	ЭлементСоздать.ИмяКоманды = КомандаСоздать.Имя;
	ЭлементСоздать.ТолькоВоВсехДействиях = Истина;
	
	ЭлементПрисоединить = Форма.Элементы.Добавить(КомандаПрисоединить.Имя, Тип("КнопкаФормы"), Подменю);
	ЭлементПрисоединить.ИмяКоманды = КомандаПрисоединить.Имя;
	ЭлементПрисоединить.ТолькоВоВсехДействиях = Истина;
	
КонецПроцедуры //ФормаОтчетаДобавитьКоманды()

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура НастроитьВидимостьЭлементовФормы()
	
	ЕстьРазрешенныйВывод = (ОтчетТабличныйДокумент.Вывод <> ИспользованиеВывода.Запретить); 
	ЕстьРазрешенноеРедактирование = ПраваИНастройкиПользователяПовтИсп.ПроверитьРольПользователя("РедактированиеПечатныхФорм");
	
	ДоступнаОтправкаПисем = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		ДоступнаОтправкаПисем = МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем();
	КонецЕсли;
	ВозможнаОтправкаПоПочте = ЕстьРазрешенныйВывод И ДоступнаОтправкаПисем;
	
	Элементы.Сохранить.Видимость = ЕстьРазрешенныйВывод И ЕстьРазрешенноеРедактирование;
	Элементы.Отправить.Видимость = ВозможнаОтправкаПоПочте И ЕстьРазрешенноеРедактирование;
	Элементы.Редактирование.Видимость = ЕстьРазрешенныйВывод И ЕстьРазрешенноеРедактирование
										И НЕ ПраваИНастройкиПользователя.Значение("ЗащитаПечатныхФорм");
	
	Элементы.ДействияФормыПечать.Видимость = ЕстьРазрешенныйВывод;
	Элементы.ПодменюПечать.Видимость = Элементы.ДействияФормыПечать.Видимость;
	
	// В режиме веб-клиента произведем показ кнопки изменения текущего объекта
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.ОтборыИзменить.Видимость = Истина;
		Элементы.СтрокиИзменить.Видимость = Истина;
		Элементы.ПараметрыИзменить.Видимость = Истина;
		Элементы.КолонкиИзменить.Видимость = Истина;
		Элементы.ОткрытьРасшифровку.Видимость = Истина;
	КонецЕсли;
	
	Элементы.СвернутьНастройки.Пометка = Элементы.ГруппаБыстрыеНастройки.Видимость;
	
КонецПроцедуры //НастроитьВидимостьЭлементовФормы()

// Производит формирование отчета, либо выводит сообщения пользователю о необходимости сформировать отчет.
//
&НаКлиенте
Процедура СформироватьПриНеобходимости()
	
	Если НастройкиОтчета.Параметры.СформироватьПриОткрытии Тогда
		
		КлючеваяОперация = "ФормированиеОтчета" + СтрЗаменить(КлючОбъекта, "Отчет.", "");
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
		
		НастройкиОтчета.Параметры.СформироватьПриОткрытии = Ложь;
		
		Если НастройкиОтчета.Параметры.СкрыватьНастройкиПриФормировании Тогда
			СвернутьБыстрыеНастройки = Ложь;
			Элементы.ГруппаБыстрыеНастройки.Видимость = Ложь;
			Элементы.СвернутьНастройки.Пометка = Элементы.ГруппаБыстрыеНастройки.Видимость;
		КонецЕсли;
		
		ОчиститьСообщения();
		Если КлючОбъекта = "Отчет.ПечатьРеестра" Тогда
			РезультатФоновогоЗадания 	= СформироватьОтчетВФоне();
			
			ПараметрыОбработчика 		= ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания,, ПараметрыОбработчика);
			
			Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
				ПоказатьОшибкиФормирования(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
				Возврат;
			КонецЕсли;
			
			ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
			
			Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
				ФоновоеЗаданиеЗагрузитьРезультат();
				Возврат;
			Иначе
				Элементы.КоманднаяПанельФормы.Доступность = Ложь;
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("Подключаемый_ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		Иначе
			СформироватьОтчетНепосредственно();
		КонецЕсли;
	Иначе
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина, НСтр("ru = 'Сформируйте отчет'"));
	КонецЕсли;
	
КонецПроцедуры //СформироватьПриНеобходимости()

// Производит формирование отчета в фоновом режиме.
//
&НаСервере
Функция СформироватьОтчетВФоне(ОбновитьНастройки = Истина)
	
	Если ОбновитьНастройки Тогда
		ОбновитьНастройкиСКД(,, Истина);
	Иначе
		ОбновитьНастройкиСКД("ТолькоПериод");
	КонецЕсли;
	
	ПроверитьЗаполнение();
	
	// Запуск фонового задания
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ОтчетСсылка",     НастройкиОтчета.Параметры.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("Настройки",       Отчет.КомпоновщикНастроек.Настройки);
	Если ЗначениеЗаполнено(СхемаКомпоновки) Тогда
		ПараметрыФормированияОтчета.Вставить("СхемаКомпоновки", ПолучитьИзВременногоХранилища(СхемаКомпоновки));
	Иначе
		ПараметрыФормированияОтчета.Вставить("СхемаКомпоновки", Неопределено);
	КонецЕсли;
	ПараметрыФормированияОтчета.Вставить("КлючОбъекта",     КлючОбъекта);
	ПараметрыФормированияОтчета.Вставить("СсылкаВарианта", НастройкиОтчета.ВариантСсылка);
	ПараметрыФормированияОтчета.Вставить("СсылкаОтчета",   НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("НастройкиКД",                 Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройкиКД",    Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройкиКД", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормированияОтчета.Вставить("КлючВарианта",    КлючТекущегоВарианта);
	ПараметрыФормированияОтчета.Вставить("Заголовок",       ЗаголовокОтчета);
	ПараметрыФормированияОтчета.Вставить("ИмяОформлениеТаблицы",       ИмяОформлениеТаблицы);
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнение отчета: %1'"),
			СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1]);
	ПараметрыЗапуска.ОжидатьЗавершение = Ложь;
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
			"ОтчетыПлатформаСервер.СформироватьОтчетВФоне",
			ПараметрыФормированияОтчета,
			ПараметрыЗапуска);
				
	Возврат РезультатФоновогоЗадания;
	
КонецФункции //СформироватьОтчетВФоне()

// Загружает отчет полученный в результате работы фонового задания.
//
&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	Элементы.КоманднаяПанельФормы.Доступность = Истина;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Если РезультатФормирования = Неопределено Тогда
		
		СформироватьОтчетНепосредственно(Ложь);
		
	ИначеЕсли ЗначениеЗаполнено(РезультатФормирования.ИнформацияОбОшибке) Тогда
		
		ПоказатьОшибкиФормирования(РезультатФормирования.ИнформацияОбОшибке);
		
	Иначе
		
		ОтчетТабличныйДокумент = РезультатФормирования.ОтчетТабличныйДокумент;
		ДанныеРасшифровки      = ПоместитьВоВременноеХранилище(РезультатФормирования.Расшифровка, УникальныйИдентификатор);
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор  = Неопределено;
	
КонецПроцедуры //ФоновоеЗаданиеЗагрузитьРезультат()

// Производит формирование отчета.
//
&НаСервере
Процедура СформироватьОтчетНепосредственно(ОбновитьНастройки = Истина)
	
	Если ОбновитьНастройки ИЛИ (ВидОтчета>1) Тогда
		ОбновитьНастройкиСКД(,, Истина);
	Иначе
		ОбновитьНастройкиСКД("ТолькоПериод");
	КонецЕсли;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ОтчетОбъект.СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(СхемаКомпоновки);
	
	ОтчетТабличныйДокумент.Очистить();
	
	Расшифровка = Неопределено;
	ИнформацияОбОшибке = Неопределено;
	Попытка
		ОтчетыПлатформаСервер.СформироватьОтчет(ОтчетОбъект, ОтчетТабличныйДокумент, Расшифровка, Заголовок, ИмяОформлениеТаблицы,,КлючТекущегоВарианта);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект);
		ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Расшифровка, УникальныйИдентификатор);
	Иначе
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры //СформироватьОтчетНепосредственно()

// Обновляет настройки СКД.
//
&НаСервере
Процедура ОбновитьНастройкиСКД(РежимОбновления = "Все", ВидОтчетаДляФормыНастроек = Неопределено, ОтсекатьГруппировки = Ложь)
	
	ВидОтчетаДляФормыНастроек = ?(ВидОтчетаДляФормыНастроек = Неопределено, ВидОтчета, ВидОтчетаДляФормыНастроек);
	
	НастройкиСКД = Отчет.КомпоновщикНастроек.Настройки;
	
	Если РежимОбновления = "Все" ИЛИ РежимОбновления = "ТолькоПериод" Тогда
		// Начало периода
		Если ЕстьНачалоПериода Тогда
			НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
		КонецЕсли;
		
		Если ЕстьКонецПериода Тогда
			// Конец периода
			ЗначениеПериода = ?(КонецПериода = Дата(1, 1, 1), КонецДня(ТекущаяДатаСеанса()), КонецДня(КонецПериода));
			
			ДоступныйПараметр = НастройкиСКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("КонецПериода"));
			Если НЕ ДоступныйПараметр = Неопределено Тогда
				НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ЗначениеПериода);
			КонецЕсли;
			
			// Конец периода с границей
			ДоступныйПараметр = НастройкиСКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("ПериодГраница"));
			Если НЕ ДоступныйПараметр = Неопределено Тогда
				НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодГраница", Новый Граница(ЗначениеПериода, ВидГраницы.Включая));
			КонецЕсли;
			
			// Период
			ДоступныйПараметр = НастройкиСКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("Период"));
			Если НЕ ДоступныйПараметр = Неопределено Тогда
				НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ЗначениеПериода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимОбновления = "Все" ИЛИ РежимОбновления = "ТолькоНастройки" Тогда
		
		// Отбор отчета
		ДеревоОтбор = Отбор.ПолучитьЭлементы();
		ОтборСКД    = НастройкиСКД.Отбор.Элементы;
		ОтборСКД.Очистить();
		
		ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ОтборСКД, ДеревоОтбор);
		
		// Структура отчета
		Если НЕ ГруппировкиЗапрещены Тогда
			
			// Показатели отчета
			ДеревоПоказатели = Показатели.ПолучитьЭлементы();
			ПоказателиСКД    = НастройкиСКД.Выбор.Элементы;
			ПоказателиСКД.Очистить();
			
			СтруктураСКД     = НастройкиСКД.Структура;
			СтруктураСКД.Очистить();
			
			Если ВидОтчетаДляФормыНастроек = 0 Тогда
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ПоказателиСКД, ДеревоПоказатели);
				
				ТаблицаСКД = СтруктураСКД.Добавить(Тип("ТаблицаКомпоновкиДанных"));
				
				НовоеПоле = ТаблицаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				НовоеПоле.Использование = Истина;
				
				// Заполнение Условного оформления таблицы
				Если НЕ УсловноеОформлениеТаблицы = Неопределено Тогда
					ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.УсловноеОформление.Элементы, УсловноеОформлениеТаблицы.Элементы);
				КонецЕсли;
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.ПараметрыВывода.Элементы, ПараметрыВыводаТаблицы.ПолучитьЭлементы());
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.Строки, ГруппировкиСтрок, ОтсекатьГруппировки);
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.Колонки, ГруппировкиКолонок, ОтсекатьГруппировки);
				
				ТаблицаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления", ИмяОформлениеТаблицы);
				
			ИначеЕсли ВидОтчетаДляФормыНастроек = 1 Тогда
				
				ДиаграммаСКД = СтруктураСКД.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
				ДиаграммаСКД.Использование = Истина;
				
				// Заполнение Условного оформления таблицы
				Если НЕ УсловноеОформлениеТаблицы = Неопределено Тогда
					ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ДиаграммаСКД.УсловноеОформление.Элементы, УсловноеОформлениеТаблицы.Элементы);
				КонецЕсли;
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ДиаграммаСКД.ПараметрыВывода.Элементы, ПараметрыВыводаДиаграммы.ПолучитьЭлементы());
				
				НовоеПоле = ДиаграммаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				НовоеПоле.Использование = Истина;
				
				// Добавим точки диаграммы
				Если ОтчетыПлатформаКлиентСервер.ДвухмернаяДиаграмма(ТипДиаграммыОтчета) Тогда
					
					ОтчетыПлатформаСервер.ДобавитьГруппировкуДиаграммы(ДиаграммаСКД.Точки, Точки, НастройкиСКД.ДоступныеПоляГруппировок, КоличествоЗаписейТочек);
					
				КонецЕсли;
				
				// Добавим серии диаграммы
				ОтчетыПлатформаСервер.ДобавитьГруппировкуДиаграммы(ДиаграммаСКД.Серии, Серии, НастройкиСКД.ДоступныеПоляГруппировок, КоличествоЗаписейСерий);
				
				ПолеПоказатель = Новый ПолеКомпоновкиДанных(Показатель);
				Если НЕ НастройкиСКД.ДоступныеПоляВыбора.НайтиПоле(ПолеПоказатель) = Неопределено Тогда
					// Добавим показатель диаграммы
					ПоказательОтчета = ПоказателиСКД.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					ПоказательОтчета.Использование = Истина;
					ПоказательОтчета.Поле          = ПолеПоказатель;
				КонецЕсли;
				
				// Установим тип диаграммы через оформление
				Если НЕ ТипДиаграммыОтчета = "" Тогда
					ТипДиаграммыЗначение = ТипДиаграммы[ТипДиаграммыОтчета];
					ДиаграммаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ТипДиаграммы", ТипДиаграммыЗначение);
					
					ПараметрОформления = ДиаграммаСКД.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
					Если НЕ ПараметрОформления = Неопределено Тогда
						ПараметрОформления.Значение      = ТипДиаграммыЗначение;
						ПараметрОформления.Использование = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ВидПодписей = "" Тогда
					ВидПодписейЗначение = ПредопределенноеЗначение(ВидПодписей);
					ДиаграммаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ТипДиаграммы.ВидПодписей", ВидПодписейЗначение);
				КонецЕсли;
				
			ИначеЕсли ВидОтчетаДляФормыНастроек = 2 Тогда
				
				ПолеПоказатель = Новый ПолеКомпоновкиДанных(Показатель);
				Если НЕ НастройкиСКД.ДоступныеПоляВыбора.НайтиПоле(ПолеПоказатель) = Неопределено Тогда
					// Добавим показатель диаграммы
					ПоказательОтчета = ПоказателиСКД.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					ПоказательОтчета.Использование = Истина;
					ПоказательОтчета.Поле          = ПолеПоказатель;
				КонецЕсли;
				
				// Заполним диаграмму отчета
				
				ДиаграммаСКД = СтруктураСКД.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
				ДиаграммаСКД.Использование = Истина;
				
				// Заполнение Условного оформления таблицы
				Если НЕ УсловноеОформлениеТаблицы = Неопределено Тогда
					ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ДиаграммаСКД.УсловноеОформление.Элементы, УсловноеОформлениеТаблицы.Элементы);
				КонецЕсли;
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ДиаграммаСКД.ПараметрыВывода.Элементы, ПараметрыВыводаДиаграммы.ПолучитьЭлементы());
				
				НовоеПоле = ДиаграммаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				НовоеПоле.Использование = Истина;
				
				// Добавим точки диаграммы
				Если ОтчетыПлатформаКлиентСервер.ДвухмернаяДиаграмма(ТипДиаграммыОтчета) Тогда
					
					ОтчетыПлатформаСервер.ДобавитьГруппировкуДиаграммы(ДиаграммаСКД.Точки, Точки, НастройкиСКД.ДоступныеПоляГруппировок, КоличествоЗаписейТочек);
					
				КонецЕсли;
				
				// Добавим серии диаграммы
				ОтчетыПлатформаСервер.ДобавитьГруппировкуДиаграммы(ДиаграммаСКД.Серии, Серии, НастройкиСКД.ДоступныеПоляГруппировок, КоличествоЗаписейСерий);
				
				// Установим тип диаграммы через оформление
				Если НЕ ТипДиаграммыОтчета = "" Тогда
					ТипДиаграммыЗначение = ТипДиаграммы[ТипДиаграммыОтчета];
					ДиаграммаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ТипДиаграммы", ТипДиаграммыЗначение);
					
					ПараметрОформления = ДиаграммаСКД.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
					Если НЕ ПараметрОформления = Неопределено Тогда
						ПараметрОформления.Значение      = ТипДиаграммыЗначение;
						ПараметрОформления.Использование = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ВидПодписей = "" Тогда
					ВидПодписейЗначение = ПредопределенноеЗначение(ВидПодписей);
					ДиаграммаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ТипДиаграммы.ВидПодписей", ВидПодписейЗначение);
				КонецЕсли;
				
				// Заполним таблицу отчета
				ТаблицаСКД = СтруктураСКД.Добавить(Тип("ТаблицаКомпоновкиДанных"));
				ТаблицаСКД.Использование = Истина;
				
				// Заполнение Условного оформления таблицы
				Если НЕ УсловноеОформлениеТаблицы = Неопределено Тогда
					ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.УсловноеОформление.Элементы, УсловноеОформлениеТаблицы.Элементы);
				КонецЕсли;
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ТаблицаСКД.ПараметрыВывода.Элементы, ПараметрыВыводаТаблицы.ПолучитьЭлементы());
				
				НовоеПоле = ТаблицаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				НовоеПоле.Использование = Истина;
				
				// Добавим строки таблицы
				СтрокиТаблицы = ТаблицаСКД.Строки.Добавить();
				
				НоваяГруппировка = СтрокиТаблицы.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НоваяГруппировка.Использование = Истина;
				НоваяГруппировка.Поле          = Новый ПолеКомпоновкиДанных(Точки);
				
				// Автоматическое поле
				ПолеРеквизитаСКД = СтрокиТаблицы.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				ПолеРеквизитаСКД.Использование = Истина;
				
				// Автоматический порядок
				ПолеПорядкаСКД = СтрокиТаблицы.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				ПолеПорядкаСКД.Использование = Истина;
				
				Если КоличествоЗаписейТочек > 0 Тогда
					СтрокиТаблицы.ПараметрыВывода.УстановитьЗначениеПараметра("КоличествоЗаписей", КоличествоЗаписейТочек);
				КонецЕсли;
				
				// Добавим серии диаграммы
				КолонкиТаблицы = ТаблицаСКД.Колонки.Добавить();
				
				НоваяГруппировка = КолонкиТаблицы.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НоваяГруппировка.Использование = Истина;
				НоваяГруппировка.Поле          = Новый ПолеКомпоновкиДанных(Серии);
				
				// Автоматическое поле
				ПолеРеквизитаСКД = КолонкиТаблицы.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				ПолеРеквизитаСКД.Использование = Истина;
				
				// Автоматический порядок
				ПолеПорядкаСКД = КолонкиТаблицы.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				ПолеПорядкаСКД.Использование = Истина;
				
				Если КоличествоЗаписейСерий > 0 Тогда
					КолонкиТаблицы.ПараметрыВывода.УстановитьЗначениеПараметра("КоличествоЗаписей", КоличествоЗаписейСерий);
				КонецЕсли;
				
				ТаблицаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления", ИмяОформлениеТаблицы);
				
			ИначеЕсли ВидОтчетаДляФормыНастроек = 3 Тогда
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ПоказателиСКД, ДеревоПоказатели);
				
				ГруппировкаСКД = СтруктураСКД.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаСКД.Использование = Истина;
				
				// Заполнение Условного оформления таблицы
				Если НЕ УсловноеОформлениеТаблицы = Неопределено Тогда
					ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ГруппировкаСКД.УсловноеОформление.Элементы, УсловноеОформлениеТаблицы.Элементы);
				КонецЕсли;
				
				ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ГруппировкаСКД.ПараметрыВывода.Элементы, ПараметрыВыводаТаблицы.ПолучитьЭлементы());
				
				// Заполнение полей группировки
				Для Каждого ТекущаяСтрока Из ГруппировкиСтрок Цикл
					
					Если НЕ ТекущаяСтрока.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					ОтчетыПлатформаСервер.ЗаполнитьНастройкиСКД(ГруппировкаСКД.ПоляГруппировки.Элементы, ТекущаяСтрока.ПоляГруппировки);
				КонецЦикла;
				
				// Автоматическое поле
				ПолеРеквизитаСКД = ГруппировкаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				ПолеРеквизитаСКД.Использование = Истина;
				
				// Автоматический порядок
				ПолеПорядкаСКД = ГруппировкаСКД.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				ПолеПорядкаСКД.Использование = Истина;
				
				ГруппировкаСКД.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления", ИмяОформлениеТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьНастройкиСКД()

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	
	Запрос.УстановитьПараметр("Отчет",        НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиОтчета.Вставить("ВариантСсылка",          Выборка.ВариантСсылка);
		НастройкиОтчета.Вставить("КлючЗамеров",            Выборка.КлючЗамеров);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Выборка.ПредопределенныйСсылка);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   ?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта));
		НастройкиОтчета.Вставить("Пользовательский",       Выборка.Пользовательский);
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка",          Неопределено);
		НастройкиОтчета.Вставить("КлючЗамеров",            Неопределено);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Неопределено);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   Неопределено);
		НастройкиОтчета.Вставить("Пользовательский",       Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Отображает ошибки при формировании отчета.
//
&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
КонецПроцедуры //ПоказатьОшибкиФормирования()

// Настраивает заголовок подменю периода, формат отображения периода и видимость полей периода.
//
&НаСервере
Процедура ВидимостьПериода()
	
	ОтчетыПлатформаСервер.ВидимостьПериода(ЭтотОбъект);
	
КонецПроцедуры //ВидимостьПериода()

// Изменяет вид выводимой информации.
//
&НаСервере
Процедура ОбновитьВидТаблицы()
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ДействияФормыВидОтчета.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы") Тогда
			ПодчиненныйЭлемент.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ГруппировкиЗапрещены Тогда
		Если ВидОтчета = 0 Тогда
			Элементы.Колонки.Доступность = Истина;
			Элементы.ВидТаблица.Пометка  = Истина;
		ИначеЕсли ВидОтчета = 1 Тогда
			Элементы.ВидДиаграмма.Пометка = Истина;
		ИначеЕсли ВидОтчета = 2 Тогда
			Элементы.ВидТаблицаИДиаграмма.Пометка = Истина;
		ИначеЕсли ВидОтчета = 3 Тогда
			Элементы.Колонки.Доступность        = Ложь;
			Элементы.ВидЛинейнаяТаблица.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьЭлементов();
	
	Если ВидОтчета = 0 Тогда
		Элементы.ДействияФормыВидОтчета.Картинка = БиблиотекаКартинок.ОтчетТаблица;
	ИначеЕсли ВидОтчета = 1 Тогда
		Элементы.ДействияФормыВидОтчета.Картинка = БиблиотекаКартинок.ОтчетДиаграмма;
	ИначеЕсли ВидОтчета = 2 Тогда
		Элементы.ДействияФормыВидОтчета.Картинка = БиблиотекаКартинок.ДиаграммаИТаблица;
	ИначеЕсли ВидОтчета = 3 Тогда
		Элементы.ДействияФормыВидОтчета.Картинка = БиблиотекаКартинок.ЛинейнаяТаблица;
	КонецЕсли;
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ОбновитьВидТаблицы()

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ГруппаОтборы.Видимость = ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета.Видимость, "Отборы", Ложь);
	
	// Видимость параметров зависит, от их наличия в отчете и настроек отчета
	Если ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета.Видимость, "Параметры", Ложь) Тогда
		
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		Счетчик = 0;
		Для Каждого ТекущийПараметр Из Настройки.ПараметрыДанных.Элементы Цикл
			
			ИмяПараметра = СокрЛП(ТекущийПараметр.Параметр);
			Если ИмяПараметра = "НачалоПериода" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяПараметра = "ПериодГраница" ИЛИ ИмяПараметра = "Период" ИЛИ ИмяПараметра = "КонецПериода" Тогда
				// Начальная дата не бывает без конечной
				Продолжить;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Элементы.ГруппаПараметры.Видимость = (Счетчик>0);
	Иначе
		Элементы.ГруппаПараметры.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СтруктураТаблицы.Видимость    = (НЕ ГруппировкиЗапрещены);
	
	Если ГруппировкиЗапрещены Тогда
		Элементы.ГруппаСтроки.Видимость           = Ложь;
		Элементы.ГруппаКолонки.Видимость          = Ложь;
		Элементы.ГруппаПоказатели.Видимость       = Ложь;
		Элементы.ВидДиаграмма.Доступность         = Ложь;
		Элементы.ВидТаблица.Доступность           = Ложь;
		Элементы.ВидЛинейнаяТаблица.Доступность   = Ложь;
		Элементы.ВидТаблицаИДиаграмма.Доступность = Ложь;
		Элементы.ГруппаТипДиаграммы.Доступность   = Ложь;
		Элементы.ГруппаОформлениеТаблицы.Доступность = Ложь;
		Элементы.ГруппаДиаграмма.Видимость        = Ложь;
		Элементы.СтруктураТаблицы.Видимость       = Ложь;
	ИначеЕсли НЕ ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета.Видимость, "Группировки", Ложь) Тогда
		Элементы.ГруппаСтроки.Видимость           = Ложь;
		Элементы.ГруппаКолонки.Видимость          = Ложь;
		Элементы.ГруппаПоказатели.Видимость       = (НЕ ПоказателиЗапрещены) И ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета.Видимость, "Показатели", Ложь);
		Элементы.ВидДиаграмма.Доступность         = Ложь;
		Элементы.ВидТаблица.Доступность           = Ложь;
		Элементы.ВидЛинейнаяТаблица.Доступность   = Ложь;
		Элементы.ВидТаблицаИДиаграмма.Доступность = Ложь;
		Элементы.ГруппаТипДиаграммы.Доступность   = Ложь;
		Элементы.ГруппаДиаграмма.Видимость        = Ложь;
		Элементы.СтруктураТаблицы.Видимость       = Ложь;
	ИначеЕсли ВидОтчета = 1 ИЛИ ВидОтчета = 2 Тогда
		Элементы.ГруппаСтроки.Видимость           = Ложь;
		Элементы.ГруппаКолонки.Видимость          = Ложь;
		Элементы.ГруппаПоказатели.Видимость       = Ложь;
		Элементы.ГруппаОформлениеТаблицы.Доступность = (ВидОтчета = 2);
		Элементы.ГруппаДиаграмма.Видимость        = Истина;
		Элементы.ВидДиаграмма.Доступность         = Истина;
		Элементы.ВидТаблица.Доступность           = Истина;
		Элементы.ВидЛинейнаяТаблица.Доступность   = Истина;
		Элементы.ВидТаблицаИДиаграмма.Доступность = Истина;
		Элементы.ГруппаТипДиаграммы.Доступность   = Истина;
	Иначе
		Элементы.ГруппаСтроки.Видимость     = ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета.Видимость, "Строки", Ложь);
		Элементы.ГруппаКолонки.Видимость    = ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета.Видимость, "Колонки", Ложь);
		Элементы.ГруппаПоказатели.Видимость = (НЕ ПоказателиЗапрещены) И ПолучитьЗначениеПараметраСтруктуры(НастройкиОтчета.Видимость, "Показатели", Ложь);
		Элементы.ГруппаДиаграмма.Видимость  = Ложь;
		Элементы.ГруппаОформлениеТаблицы.Доступность = Истина;
		Элементы.ВидДиаграмма.Доступность         = Истина;
		Элементы.ВидТаблица.Доступность           = Истина;
		Элементы.ВидЛинейнаяТаблица.Доступность   = Истина;
		Элементы.ВидТаблицаИДиаграмма.Доступность = Истина;
		Элементы.ГруппаТипДиаграммы.Доступность   = Ложь;
	КонецЕсли;
	
КонецПроцедуры //УстановитьВидимостьЭлементов()

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОтчетыПлатформаСервер.УстановитьУсловноеОформлениеОсновнаяФорма(ЭтотОбъект);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при выполнении команды "Отправить".
//
&НаКлиенте
Процедура ОтправитьОтчетыПоПочте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры //ОтправитьОтчетыПоПочте()

// Устанавливает форму выбора элемента.
//
&НаСервере
Процедура УстановитьФормуВыбора(Элемент, ФормаВыбора)
	
	Элемент.ФормаВыбора = ФормаВыбора;
	
КонецПроцедуры //УстановитьФормуВыбора()

&НаКлиенте
Процедура СкопироватьСтрокуДерева(КоллекцияПриемник, КоллекцияИсточник)
	
	КоллекцияПриемник.Очистить();
	
	Для Каждого ТекущаяСтрока Из КоллекцияИсточник Цикл
		
		НоваяСтрока = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		СкопироватьСтрокуДерева(НоваяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры //СкопироватьСтрокуДерева()

// Проверяет выбран ли вид сравнения компоновки данных для списка.
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	Результат = Ложь;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ВидСравненияОтбора= ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОтборПоСписку()

// Изменяет содержимое группировки строк.
//
&НаКлиенте
Процедура ИзменитьГруппировкуСтроки()
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",        "ПоляГруппировки");
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("ГруппировкиСтрок", Элементы.Строки.ТекущаяСтрока);
	
	Если ТекущиеДанные.ПоляГруппировки.Количество()>0 Тогда
		СтрокаГруппировки = ТекущиеДанные.ПоляГруппировки[0];
		ПараметрыВыбора.Вставить("ТекущееПоле",     СтрокаГруппировки.Поле);
		ПараметрыВыбора.Вставить("ТипГруппировки",  ПолучитьПолноеИмяПредопределенногоЗначения(СтрокаГруппировки.ТипГруппировки));
		
		Если ТекущиеДанные.Выбор.ПолучитьЭлементы().Количество()>0 Тогда
			АдресТаблицы = ПоместитьКоллекциюВХранилище(МассивПутей, "Выбор");
			ПараметрыВыбора.Вставить("АдресТаблицы", АдресТаблицы);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ИзменитьГруппировкуСтроки()

// Изменяет содержимое группировки колонок.
//
&НаКлиенте
Процедура ИзменитьГруппировкуКолонки()
	
	ТекущиеДанные = Элементы.Колонки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СхемаКомпоновки", СхемаКомпоновки);
	ПараметрыВыбора.Вставить("ВидПолей",        "ПоляГруппировки");
	ПараметрыВыбора.Вставить("ЕстьРеквизиты",   Ложь);
	
	МассивПутей = Новый Структура;
	МассивПутей.Вставить("ГруппировкиКолонок", Элементы.Колонки.ТекущаяСтрока);
	
	Если ТекущиеДанные.ПоляГруппировки.Количество()>0 Тогда
		СтрокаГруппировки = ТекущиеДанные.ПоляГруппировки[0];
		ПараметрыВыбора.Вставить("ТекущееПоле",     СтрокаГруппировки.Поле);
		ПараметрыВыбора.Вставить("ТипГруппировки",  ПолучитьПолноеИмяПредопределенногоЗначения(СтрокаГруппировки.ТипГруппировки));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПутей", МассивПутей);
	
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеВыбораПоля", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолейОтчета", ПараметрыВыбора, ЭтотОбъект,,,,ОписаниеОповещенияВыбораПоля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //ИзменитьГруппировкуКолонки()

// Обновляет тип диаграммы, и настраивает оформление элементов в зависимости от типа.
//
&НаСервере
Процедура ОбновитьТипДиаграммы()
	
	ИмяЭлемента = "Оформление"+ТипДиаграммыОтчета;
	
	ЗаголовокТипа = "";
	Для Каждого ТекЭлемент Из Элементы.ГруппаТипДиаграммы.ПодчиненныеЭлементы Цикл
		Если ТекЭлемент.Имя = ИмяЭлемента Тогда
			ТекЭлемент.Пометка = Истина;
			ЗаголовокТипа = ТекЭлемент.Заголовок;
		Иначе
			ТекЭлемент.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаТипДиаграммы.Заголовок = ?(ЗаголовокТипа = "", НСтр("ru = 'Тип диаграммы'"), ЗаголовокТипа);
	Элементы.ГруппаТипДиаграммы.Картинка = БиблиотекаКартинок[ТипДиаграммыОтчета];
	Элементы.ДекорацияТипДиаграммы.Картинка = БиблиотекаКартинок[ТипДиаграммыОтчета];
	
	ЭтоДвухмернаяДиаграмма = ОтчетыПлатформаКлиентСервер.ДвухмернаяДиаграмма(ТипДиаграммыОтчета);
	Элементы.Точки.Доступность                  = ЭтоДвухмернаяДиаграмма;
	Элементы.КоличествоЗаписейТочек.Доступность = ЭтоДвухмернаяДиаграмма;
	
	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект, Истина);
	
КонецПроцедуры //ОбновитьТипДиаграммы()

// Проверяет завершено ли фоновое задание.
//
&НаСервере
Функция ФоновоеЗаданиеВыполнено()
	
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		Элементы.КоманднаяПанельФормы.Доступность = Истина;
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции //ФоновоеЗаданиеВыполнено()

// Обработчик события возникающего на клиенте выполняемый с задержкой.
//
&НаКлиенте
Процедура Подключаемый_ФоновоеЗаданиеПроверитьНаКлиенте()
	
	Если ФоновоеЗаданиеВыполнено() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ФоновоеЗаданиеПроверитьНаКлиенте()

// Загружает настройки компоновщика.
//
&НаСервере
Процедура КомпоновщикЗагрузитьНастройки(РезультатЗакрытия)
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультатЗакрытия.Вариант);
	
КонецПроцедуры //КомпоновщикЗагрузитьНастройки(0

// Обновляет настройки отчета.
//
&НаСервере
Процедура ОбновитьБыстрыеНастройки(Вариант = Неопределено)
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	ЕстьНачалоПериода = Ложь;
	ЕстьКонецПериода  = Ложь;
			
	Для Каждого ТекущийПараметр Из Настройки.ПараметрыДанных.Элементы Цикл
		
		ИмяПараметра = СокрЛП(ТекущийПараметр.Параметр);
		Если ИмяПараметра = "НачалоПериода" Тогда
			ЕстьНачалоПериода = (ТекущийПараметр.Использование ИЛИ ЕстьНачалоПериода);
			Продолжить;
		КонецЕсли;
		
		Если ИмяПараметра = "ПериодГраница" ИЛИ ИмяПараметра = "Период" ИЛИ ИмяПараметра = "КонецПериода" Тогда
			// Начальная дата не бывает без конечной
			ЕстьКонецПериода = (ТекущийПараметр.Использование ИЛИ ЕстьКонецПериода ИЛИ ЕстьНачалоПериода);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоОтбор           = Отбор.ПолучитьЭлементы();
	ДеревоПоказатели      = Показатели.ПолучитьЭлементы();
	
	ПараметрыВыводаДиаграммы.ПолучитьЭлементы().Очистить();
	ПараметрыВыводаТаблицы.ПолучитьЭлементы().Очистить();
	
	ДеревоОтбор.Очистить();
	ДеревоПоказатели.Очистить();
	ГруппировкиСтрок.Очистить();
	ГруппировкиКолонок.Очистить();
	
	Серии = "";
	СерииЗаголовок = "";
	
	Точки = "";
	ТочкиЗаголовок = "";
	
	Показатель = "";
	ПоказательЗаголовок = "";
	
	ПоказателиЗапрещены  = Ложь;
	ГруппировкиЗапрещены = Ложь;
	
	ИмяОформлениеТаблицы = "";
	ТипДиаграммыОтчета = "";
	
	ОтображатьТаблицуДанных = Ложь;
	
	КоличествоЗаписейТочек = 0;
	КоличествоЗаписейСерий = 0;
	
	ВидПодписей = "";
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетыПлатформаСервер.ЗаполнитьБыстрыеНастройки(ЭтотОбъект, Настройки.Выбор,           ДеревоПоказатели);
	ОтчетыПлатформаСервер.ЗаполнитьБыстрыеНастройки(ЭтотОбъект, Настройки.Структура);
	ОтчетыПлатформаСервер.ЗаполнитьБыстрыеНастройки(ЭтотОбъект, Настройки.Отбор,           ДеревоОтбор);
	
	ОтчетыПлатформаСервер.ЗаполнитьОтборОрганизацияПодразделение(ДеревоОтбор, Настройки.Отбор.ДоступныеПоляОтбора.Элементы);
	
	Если ИмяОформлениеТаблицы = "" Тогда
		ПараметрОформления = Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если (НЕ ПараметрОформления = Неопределено) И ПараметрОформления.Использование Тогда
			ИмяОформлениеТаблицы = БиблиотекаМакетовОформленияКомпоновкиДанных[ПараметрОформления.Значение].Имя;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяОформлениеТаблицы = "" Тогда
		ИмяОформлениеТаблицы = БиблиотекаМакетовОформленияКомпоновкиДанных[7].Имя;
	КонецЕсли;
	
	ИмяЭлемента = "Оформление"+ИмяОформлениеТаблицы;
	Для Каждого ТекЭлемент Из Элементы.ГруппаОформлениеТаблицы.ПодчиненныеЭлементы Цикл
		ТекЭлемент.Пометка = (ТекЭлемент.Имя = ИмяЭлемента);
	КонецЦикла;
	
	Если ТипДиаграммыОтчета = "" Тогда
		ПараметрТипДиаграммы    = Настройки.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
		ТипДиаграммыОтчета      = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрТипДиаграммы.Значение), "ТипДиаграммы.", "");
		ОтображатьТаблицуДанных = ПараметрТипДиаграммы.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ОтображатьТаблицуДанных").Значение;
		ВидПодписей             = ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрТипДиаграммы.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ВидПодписей").Значение);
	КонецЕсли;
	
	ОбновитьТипДиаграммы();
	ОбновитьВидТаблицы();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Попытка
		ОтчетОбъект.ПриИзмененииНастроек(ЭтотОбъект);
	Исключение
	КонецПопытки;
	
	ВидимостьПериода();
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ЭтотОбъект);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ЭтотОбъект, "Период"+ВидПериода);
	
КонецПроцедуры //ОбновитьБыстрыеНастройки()

// Обновляет список вариантов отчета.
//
&НаСервере
Процедура ОбновитьСписокВариантовОтчета()
	
	ОтчетыПлатформаСервер.ОбновитьСписокВариантовОтчета(ЭтотОбъект);
	
КонецПроцедуры //ОбновитьСписокВариантовОтчета()

&НаКлиенте
Процедура СохранитьОтчетыВПапку(СписокФайловВоВременномХранилище, Знач Папка = "")
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
			ПолучитьФайл(ФайлДляЗаписи.АдресВоВременномХранилище, ФайлДляЗаписи.Представление);
		КонецЦикла;
		Возврат;
	#КонецЕсли
	
	Папка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Папка);
	Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
		СохранитьОтчетыВПапкуПродолжение(ФайлДляЗаписи, Папка);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + Папка);
	
КонецПроцедуры // СохранитьОтчетыВПапку()

&НаКлиенте
Процедура СохранитьОтчетыВПапкуПродолжение(ФайлДляЗаписи, Папка)
	
	ПолноеИмяФайла		= Папка + ФайлДляЗаписи.Представление;
	Файл				= Новый Файл(ПолноеИмяФайла);
	ИмяБезРасширения	= Файл.ИмяБезРасширения;
	Расширение			= Файл.Расширение;
	
	Счетчик = 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ДополнительныеПараметры.Вставить("Папка",            Папка);
	ДополнительныеПараметры.Вставить("Расширение",       Расширение);
	ДополнительныеПараметры.Вставить("Файл",             Файл);
	ДополнительныеПараметры.Вставить("ФайлДляЗаписи",    ФайлДляЗаписи);
	ДополнительныеПараметры.Вставить("Счетчик",          Счетчик);
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("СохранитьОтчетыВПапкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры // СохранитьОтчетыВПапкуПродолжение()

&НаКлиенте
Процедура СохранитьОтчетыВПапкуЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ИмяБезРасширения	= ДополнительныеПараметры.ИмяБезРасширения;
	Папка				= ДополнительныеПараметры.Папка;
	Расширение			= ДополнительныеПараметры.Расширение;
	Файл				= ДополнительныеПараметры.Файл;
	ФайлДляЗаписи		= ДополнительныеПараметры.ФайлДляЗаписи;
	Счетчик				= ДополнительныеПараметры.Счетчик;
	
	Если Существует Тогда
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
		ДополнительныеПараметры.Файл    = Файл;
		ДополнительныеПараметры.Счетчик = Счетчик;
		ОписаниеОповещения =
			Новый ОписаниеОповещения("СохранитьОтчетыВПапкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	Иначе
		ПолноеИмяФайла = Файл.ПолноеИмя;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлДляЗаписи.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // СохранитьОтчетыВПапкуЗавершение()

&НаСервере
Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый Массив;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	// сохранение печатных форм
	ОбработанныеПечатныеФормы = Новый Массив;
	
	ИмяФайла = ?(ПолучитьЗначениеПараметраСтруктуры(НастройкиСохранения, "ИмяФайла")=Неопределено, Заголовок, НастройкиСохранения.ИмяФайла);
	Если ЕстьНачалоПериода И ЕстьКонецПериода Тогда
		ИмяФайла = ИмяФайла+" ("+Формат(НачалоПериода,"ДФ=ddMMyy")+"-"+Формат(КонецПериода,"ДФ=ddMMyy")+")";
	ИначеЕсли ЕстьНачалоПериода Тогда
		ИмяФайла = ИмяФайла+" ("+Формат(КонецПериода,"ДФ=ddMMyy")+")";
	КонецЕсли;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		ТипФайлаПоиска = ?(ТипЗнч(ТипФайла) = Тип("ТипФайлаТабличногоДокумента"), ТипФайла, ТипФайлаТабличногоДокумента[ТипФайла]);
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайлаПоиска))[0];
		
		Если НастройкиФормата.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT И ВыбранныеФорматыСохранения.Найти(ТипФайлаТабличногоДокумента.TXT) <> Неопределено И ЗаписьZipФайла <> Неопределено Тогда
			ПредставлениеФайла = ИмяФайла + "ANSI." + НастройкиФормата.Расширение;
		Иначе
			ПредставлениеФайла = ИмяФайла + "." + НастройкиФормата.Расширение;
		КонецЕсли;
		
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ПредставлениеФайла;
		// Файл может не записаться по разным причинам операционной системы (защищен от записи диск, нет памяти...).
		Попытка
			ОтчетТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайла);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось записать файл по причине:'") + " " + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Представление", ПредставлениеФайла);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
			Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
				ОписаниеФайла.Вставить("Кодировка", "windows-1251");
			КонецЕсли;
			Результат.Добавить(ОписаниеФайла);
		КонецЕсли;
	КонецЦикла;
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ИмяФайла + ".zip");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		Результат.Добавить(ОписаниеФайла);
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции //ПоместитьТабличныеДокументыВоВременноеХранилище()

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры //ВставитьКартинкиВHTML()

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры //ФоновоеЗаданиеОтменить()

#КонецОбласти

&НаСервереБезКонтекста
Функция ЭтоНепереведенныйОчет(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных = Метаданные.Отчеты.БюджетЗакупок
		ИЛИ ОбъектМетаданных = Метаданные.Отчеты.БюджетПродаж;
	
КонецФункции

&НаКлиенте
Процедура ПриПодключенииРасширения(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасширениеДляРаботыСФайламиПодключено", РасширениеПодключено);
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ


