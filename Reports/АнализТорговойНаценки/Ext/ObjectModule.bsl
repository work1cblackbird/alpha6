#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обработчик при изменении настроек.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ПриИзмененииНастроек(Форма) Экспорт
	
	ПодразделениеЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПодразделениеЦены"));
	Если НЕ ЗначениеЗаполнено(ПодразделениеЦены.Значение) Тогда
		ПодразделениеЦены.Значение = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
	КонецЕсли;
	
	ТипЦен = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипЦен"));
	Если НЕ ЗначениеЗаполнено(ТипЦен.Значение) Тогда
		ТипЦенПоУмолчанию = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи");
		Если НЕ ЗначениеЗаполнено(ТипЦенПоУмолчанию) Тогда
			ТипЦенПоУмолчанию = Справочники.ТипыЦен.ОсновнойТипЦенПродажи;
		КонецЕсли;
		ТипЦен.Значение = ТипЦенПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНастроек()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Запрос = ПолучитьОсновнойЗапрос();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаНаценки", Запрос.Выполнить());
	
	ОтчетыПлатформаСервер.ВывестиОтчет(ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, ВнешниеНаборыДанных);
	
КонецПроцедуры

// Проверяет настройки отчета на корректность заполнения, возвращает "истина", если корректно, "ложь" - если нет.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьНоменклатура = ОтчетыПлатформаСервер.КомпоновщикЕстьПолеВСтруктуре("Номенклатура", КомпоновщикНастроек.Настройки.Структура);
	
	Если НЕ ЕстьНоменклатура Тогда
		ПолеПоиска = ОтчетыПлатформаСервер.КомпоновщикПолучитьПолеКомпоновки("Номенклатура");
		Счетчик = ОтчетыПлатформаСервер.КомпоновщикСчетчикУсловийПоля(ПолеПоиска, КомпоновщикНастроек.Настройки.Отбор);
		Если НЕ Счетчик = 1 Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В группировках должна присутствовать номенклатура.'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТипЦен = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипЦен")).Значение;
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не задан тип цен.'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	ПодразделениеЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПодразделениеЦены")).Значение;
	Если НЕ ЗначениеЗаполнено(ПодразделениеЦены) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не задано подразделение цены.'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура КомпоновщикПолучитьПоляОтбора(ОтборКомпоновки, УникальныеПоля = Неопределено)
	
	Если УникальныеПоля = Неопределено Тогда
		УникальныеПоля = Новый Структура;
	КонецЕсли;
	
	Для Каждого ТекОтбор Из ОтборКомпоновки.Элементы Цикл
		
		Если НЕ ТекОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			КомпоновщикПолучитьПоляОтбора(ТекОтбор, УникальныеПоля);
		Иначе
			ИмяОтбора = СокрЛП(ТекОтбор.ЛевоеЗначение);
			Если ИмяОтбора = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицияТочки = СтрНайти(ИмяОтбора, ".");
			Если ПозицияТочки > 0 Тогда
				ИмяОтбора = Лев(ИмяОтбора, ПозицияТочки-1);
			КонецЕсли;
			
			УникальныеПоля.Вставить(ИмяОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КомпоновщикПолучитьПоляСтруктуры()

// формирует тест запроса по себестоимости
Функция ПолучитьТекстЗапросаЦенСебестоимости(Запрос)
	
	СоответствиеЗамен = Новый Соответствие;
	СоответствиеЗамен.Вставить("Поставщик", "Партия.Контрагент");
	СоответствиеЗамен.Вставить("Организация", "СкладКомпании.Организация");
	СоответствиеЗамен.Вставить("Подразделение", "СкладКомпании.ПодразделениеКомпании");  
	
	ОтборКомпоновки = КомпоновщикНастроек.Настройки.Отбор;
	
	ТекстОтбора = ОтчетыПлатформаСервер.КомпоновщикПолучитьТекстОтбора(ОтборКомпоновки.Элементы, ОтборКомпоновки.ДоступныеПоляОтбора, "", Запрос.Параметры, СоответствиеЗамен);
	
	Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЦенПоСебестоимости.СкладКомпании,
	|	ТаблицаЦенПоСебестоимости.Номенклатура,
	|	ТаблицаЦенПоСебестоимости.Партия,
	|	ТаблицаЦенПоСебестоимости.Партия.Контрагент КАК Поставщик,
	|	ТаблицаЦенПоСебестоимости.СтатусПартии КАК СтатусПартии,
	|	МИНИМУМ(ТаблицаЦенПоСебестоимости.Цена) КАК ЦенаМин,
	|	МАКСИМУМ(ТаблицаЦенПоСебестоимости.Цена) КАК ЦенаМакс,
	|	СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.Цена) КАК ЦенаСред
	|ПОМЕСТИТЬ ТаблицаЦенПоСебестоимости
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииТоваровКомпанииОбороты.СкладКомпании КАК СкладКомпании,
	|		ПартииТоваровКомпанииОбороты.Номенклатура КАК Номенклатура,
	|		ПартииТоваровКомпанииОбороты.Партия КАК Партия,
	|		ПартииТоваровКомпанииОбороты.СтатусПартии КАК СтатусПартии,
	|		ВЫБОР
	|			КОГДА ПартииТоваровКомпанииОбороты.КоличествоОборот = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПартииТоваровКомпанииОбороты.СуммаОборот / ПартииТоваровКомпанииОбороты.КоличествоОборот
	|		КОНЕЦ КАК Цена
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровКомпании.Обороты(&ДатаНач, &ДатаКон, , "+ТекстОтбора+") КАК ПартииТоваровКомпанииОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ 
	|		ПартииТоваровКомпанииОстатки.СкладКомпании,
	|		ПартииТоваровКомпанииОстатки.Номенклатура,
	|		ПартииТоваровКомпанииОстатки.Партия,
	|		ПартииТоваровКомпанииОстатки.СтатусПартии,
	|		ВЫБОР
	|			КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПартииТоваровКомпанииОстатки.СуммаОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровКомпании.Остатки(&ДатаКонГраница, "+ТекстОтбора+") КАК ПартииТоваровКомпанииОстатки) КАК ТаблицаЦенПоСебестоимости
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦенПоСебестоимости.СкладКомпании,
	|	ТаблицаЦенПоСебестоимости.Номенклатура,
	|	ТаблицаЦенПоСебестоимости.Партия,
	|	ТаблицаЦенПоСебестоимости.СтатусПартии
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|";
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьТаблицуПодразделений(ПодразделениеЦены)
	
	ТаблицаПодразделений = Новый ТаблицаЗначений;
	ТаблицаПодразделений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаПодразделений.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	Уровень     = 0;
	ТекРодитель = ПодразделениеЦены;
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		НоваяСтрока = ТаблицаПодразделений.Добавить();
		НоваяСтрока.Уровень       = Уровень;
		НоваяСтрока.Подразделение = ТекРодитель;
		
		Уровень = Уровень + 1;
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПодразделений.Добавить();
	НоваяСтрока.Уровень       = Уровень;
	НоваяСтрока.Подразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	
	Возврат ТаблицаПодразделений;
	
КонецФункции

// формирует текст запроса по ценам
Функция ПолучитьТекстЗапросаТаблицыЦены(Запрос, ТипЦен)
	
	РабочийТипЦен = ТипЦен;
	ШаблонЦена = "ТаблицаЦен.Цена";
	
	Если Не РабочийТипЦен.ВВалютеУчета Тогда
		Запрос.УстановитьПараметр("ВалютаЦены", РабочийТипЦен.ВалютаЦены);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипЦен", РабочийТипЦен);
	ТекстРезультат = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеновыеГруппы.Ссылка КАК ЦеноваяГруппаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаЦеновыхГрупп
	|ИЗ
	|	Справочник.ЦеновыеГруппы КАК ЦеновыеГруппы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПустаяЦеноваяГруппа
	|;
	|";
	
	Запрос.УстановитьПараметр("ПустаяЦеноваяГруппа", Справочники.ЦеновыеГруппы.ПустаяСсылка());
	ТекстРезультат = ТекстРезультат + Обработки.РасчетОптимальногоЗаказа.РазверткаТиповЦенДоБазовых();
	
	ТекстРезультат = ТекстРезультат + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПодразделений.Подразделение КАК Подразделение,
	|	ТаблицаПодразделений.Уровень КАК Уровень
	|ПОМЕСТИТЬ
	|	ТаблицаПодразделений
	|ИЗ
	|	&ТаблицаПодразделений КАК ТаблицаПодразделений
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|ВЫБРАТЬ
	|ТаблицаТиповЦен.БазовыйТипЦен КАК БазовыйТипЦен,
	|ТаблицаТиповЦен.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|ТаблицаТиповЦен.КоэффициентЦены КАК КоэффициентЦены
	|ПОМЕСТИТЬ
	|	БазовыеТипыЦен
	|ИЗ
	|	ТаблицаТиповЦен КАК ТаблицаТиповЦен
	|ГДЕ
	|	ТаблицаТиповЦен.ТипЦен = &ТипЦен
	|;
	|
	|УНИЧТОЖИТЬ
	|	ТаблицаТиповЦен
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЦен.Контрагент КАК Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЦен.Период КАК Период,
	|	ТаблицаПодразделений.Уровень КАК Уровень,
	|	ТаблицаЦен.Цена КАК Цена,
	|	ТаблицаЦен.ТипЦен КАК ТипЦен
	|ПОМЕСТИТЬ
	|	ВремТаблицаБазовыхЦен
	|ИЗ
	|	ТаблицаПодразделений КАК ТаблицаПодразделений
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Цены КАК ТаблицаЦен
	|ПО
	|	ТаблицаПодразделений.Подразделение = ТаблицаЦен.ПодразделениеКомпании
	|ГДЕ 
	|	ТаблицаЦен.Период<=&ДатаКон
	|	И ТипЦен В (ВЫБРАТЬ БазовыеТипыЦен.БазовыйТипЦен ИЗ БазовыеТипыЦен КАК БазовыеТипыЦен)
	|	И ТаблицаЦен.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И ((ТаблицаЦен.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ТаблицаЦен.Номенклатура.БазоваяЕдиницаИзмерения И ТаблицаЦен.ЕдиницаИзмерения.Коэффициент=1)
	|		ИЛИ (ТаблицаЦен.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И НЕ ТаблицаЦен.Номенклатура.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров))
	|{ГДЕ
	|	(Номенклатура).* КАК Номенклатура
	|	}
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|УНИЧТОЖИТЬ
	|	ТаблицаПодразделений
	|;
	|
	|ВЫБРАТЬ
	|	ВремТаблицаБазовыхЦен.Контрагент КАК Контрагент,
	|	ВремТаблицаБазовыхЦен.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВремТаблицаБазовыхЦен.Номенклатура КАК Номенклатура,
	|	ВремТаблицаБазовыхЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВремТаблицаБазовыхЦен.Период КАК Период,
	|	ВремТаблицаБазовыхЦен.Уровень КАК Уровень,
	|	ВремТаблицаБазовыхЦен.Цена * (ЕСТЬNULL(БазовыеТипыЦен.КоэффициентЦены, 0)) КАК Цена
	|ПОМЕСТИТЬ
	|	ВремТаблицаЦен
	|ИЗ
	|	ВремТаблицаБазовыхЦен КАК ВремТаблицаБазовыхЦен
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	БазовыеТипыЦен КАК БазовыеТипыЦен
	|ПО
	|	ВремТаблицаБазовыхЦен.ТипЦен = БазовыеТипыЦен.БазовыйТипЦен
	|	И ВремТаблицаБазовыхЦен.ЦеноваяГруппа = БазовыеТипыЦен.ЦеноваяГруппа
	|;
	|
	|УНИЧТОЖИТЬ
	|	ВремТаблицаБазовыхЦен
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЦен.Контрагент КАК Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ТаблицаЦен.Период) КАК Период
	|ПОМЕСТИТЬ
	|	СрезПоследних
	|ИЗ
	|	ВремТаблицаЦен КАК ТаблицаЦен
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦен.Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов,
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.ЕдиницаИзмерения
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОптимальнаяТаблицаЦен.Контрагент КАК Контрагент,
	|	ОптимальнаяТаблицаЦен.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ОптимальнаяТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ОптимальнаяТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЦен.Уровень КАК Уровень,
	|	МАКСИМУМ(ТаблицаЦен.Цена) КАК Цена
	|ПОМЕСТИТЬ
	|	ТаблицаЦенПодразделений
	|ИЗ
	|	СрезПоследних КАК ОптимальнаяТаблицаЦен
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ВремТаблицаЦен КАК ТаблицаЦен
	|ПО
	|	ОптимальнаяТаблицаЦен.Номенклатура     = ТаблицаЦен.Номенклатура
	|	И ОптимальнаяТаблицаЦен.ЕдиницаИзмерения = ТаблицаЦен.ЕдиницаИзмерения
	|	И ОптимальнаяТаблицаЦен.Период           = ТаблицаЦен.Период
	|ГДЕ
	|	НЕ ТаблицаЦен.Цена = 0
	|СГРУППИРОВАТЬ ПО
	|	ОптимальнаяТаблицаЦен.Контрагент,
	|	ОптимальнаяТаблицаЦен.ДоговорВзаиморасчетов,
	|	ОптимальнаяТаблицаЦен.Номенклатура,
	|	ОптимальнаяТаблицаЦен.ЕдиницаИзмерения,
	|	ТаблицаЦен.Уровень
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|УНИЧТОЖИТЬ
	|	ВремТаблицаЦен
	|;
	|
	|УНИЧТОЖИТЬ
	|	СрезПоследних
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЦенПодразделений.Контрагент КАК Контрагент,
	|	ТаблицаЦенПодразделений.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаЦенПодразделений.Номенклатура КАК Номенклатура,
	|	ТаблицаЦенПодразделений.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ТаблицаЦенПодразделений.Уровень) КАК Уровень
	|ПОМЕСТИТЬ
	|	СрезПоследних
	|ИЗ
	|	ТаблицаЦенПодразделений КАК ТаблицаЦенПодразделений
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦенПодразделений.Контрагент,
	|	ТаблицаЦенПодразделений.ДоговорВзаиморасчетов,
	|	ТаблицаЦенПодразделений.Номенклатура,
	|	ТаблицаЦенПодразделений.ЕдиницаИзмерения
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОптимальнаяТаблицаЦен.Контрагент КАК Контрагент,
	|	ОптимальнаяТаблицаЦен.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ОптимальнаяТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ОптимальнаяТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаЦен.Цена, 0)*КурсыВалютСрезПоследних.Курс/ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК Цена
	|ПОМЕСТИТЬ
	|	ТаблицаЦен
	|ИЗ
	|	СрезПоследних КАК ОптимальнаяТаблицаЦен
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ТаблицаЦенПодразделений КАК ТаблицаЦен
	|ПО
	|	ОптимальнаяТаблицаЦен.Номенклатура     = ТаблицаЦен.Номенклатура
	|	И ОптимальнаяТаблицаЦен.ЕдиницаИзмерения = ТаблицаЦен.ЕдиницаИзмерения
	|	И ОптимальнаяТаблицаЦен.Уровень          = ТаблицаЦен.Уровень
	|"+ ?(РабочийТипЦен.ВВалютеУчета, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютСрезПоследних
	|ПО ОптимальнаяТаблицаЦен.Номенклатура.ВалютаУчета = КурсыВалютСрезПоследних.Валюта","ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, Валюта=&ВалютаЦены) КАК КурсыВалютСрезПоследних
	|ПО ИСТИНА")+"
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|УНИЧТОЖИТЬ
	|	ТаблицаЦенПодразделений
	|;
	|
	|УНИЧТОЖИТЬ
	|	СрезПоследних
	|;
	|";
	
	Возврат ТекстРезультат;
	
КонецФункции // ПолучитьТекстЗапросаТаблицыЦены()

// формирует текст запроса отчета
Функция ПолучитьОсновнойЗапрос()
	
	ТипЦен = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ТипЦен", КомпоновщикНастроек.Настройки);
	ПодразделениеЦены = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра(
		"ПодразделениеЦены",
		КомпоновщикНастроек.Настройки
	);
	НачалоПериода = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра(
		"НачалоПериода",
		КомпоновщикНастроек.Настройки
	);
	КонецПериода = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра(
		"КонецПериода",
		КомпоновщикНастроек.Настройки
	);
	ПериодГраница = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра(
		"ПериодГраница",
		КомпоновщикНастроек.Настройки
	);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКонГраница", ПериодГраница);
	Запрос.УстановитьПараметр("ДатаНач",        НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",        КонецДня(КонецПериода));
	
	// Текст запроса по себестоимости
	ТекстЗапросаРезультат = ПолучитьТекстЗапросаЦенСебестоимости(Запрос);
	// Текст запроса по ценам
	АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре;
	ТекстЗапросаРезультат = ТекстЗапросаРезультат + Символы.ПС + ПолучитьТекстЗапросаТаблицыЦены(Запрос, ТипЦен);
	// Таблица родителей подразделения
	ТаблицаПодразделений  = ПолучитьТаблицуПодразделений(ПодразделениеЦены);
	
	Запрос.УстановитьПараметр("ТаблицаПодразделений", ТаблицаПодразделений);
	
	ТекстСоединенияОбщейТаблицыЦен = "";
	ТекстВыборкиЦены = "";
	
	ТекстВыборкиПроцентов = ",
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) - СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред) КАК СредНаценка,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) - МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) КАК МинНаценка,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) - МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс) КАК МаксНаценка,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) = СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред) ТОГДА 0
	|		КОГДА СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред) = 0 ТОГДА 100
	|	ИНАЧЕ (МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) - СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред))/СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред)*100
	|	КОНЕЦ КАК ПроцентСредНаценки,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) = МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) ТОГДА 0
	|		КОГДА МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) = 0 ТОГДА 100
	|	ИНАЧЕ (МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) - МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин))/МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин)*100
	|	КОНЕЦ КАК ПроцентМинНаценки,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) = МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс) ТОГДА 0
	|		КОГДА МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс) = 0 ТОГДА 100
	|	ИНАЧЕ (МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) - МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс))/МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс)*100
	|	КОНЕЦ КАК ПроцентМаксНаценки";
	
	Если АлгоритмПолученияЦены=Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
		
		ТекстВыборкиЦены = ТекстВыборкиЦены + ",
		|	МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) КАК Цена";
		
		ТекстСоединенияОбщейТаблицыЦен = ТекстСоединенияОбщейТаблицыЦен + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
		|ПО
		|	ТаблицаЦенПоСебестоимости.Номенклатура = ТаблицаЦен.Номенклатура
		|	И ТаблицаЦен.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
		
	ИначеЕсли АлгоритмПолученияЦены=Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
		ТекстВыборкиЦены = ТекстВыборкиЦены + ",
		|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) КАК Цена";
		
		ТекстВыборкиПроцентов = ",
		|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) - СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред) КАК СредНаценка,
		|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) - МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) КАК МинНаценка,
		|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) - МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс) КАК МаксНаценка,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) = СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред) ТОГДА 0
		|		КОГДА МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) = 0 ТОГДА 100
		|		ИНАЧЕ (МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) - МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин))/МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин)*100
		|	КОНЕЦ КАК ПроцентСредНаценки,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) = МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) ТОГДА 0
		|		КОГДА МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) = 0 ТОГДА 100
		|		ИНАЧЕ (МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) - МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин))/МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин)*100
		|	КОНЕЦ КАК ПроцентМинНаценки,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) = МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс) ТОГДА 0
		|		КОГДА МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс) = 0 ТОГДА 100
		|		ИНАЧЕ (МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ТаблицаЦен.Цена, ТаблицаЦен2.Цена), 0)) - МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс))/МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс)*100
		|	КОНЕЦ КАК ПроцентМаксНаценки";
		
		ТекстСоединенияОбщейТаблицыЦен = "
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
		|ПО 
		|	ТаблицаЦенПоСебестоимости.Номенклатура = ТаблицаЦен.Номенклатура
		|	И ТаблицаЦен.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен2
		|ПО 
		|	ТаблицаЦенПоСебестоимости.Номенклатура = ТаблицаЦен2.Номенклатура
		|	И ТаблицаЦен.Номенклатура ЕСТЬ NULL
		|	И ТаблицаЦен2.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
	Иначе
		ТекстВыборкиЦены = ТекстВыборкиЦены + ",
		|	МАКСИМУМ(ЕСТЬNULL(ТаблицаЦен.Цена, 0)) КАК Цена";
		ТекстСоединенияОбщейТаблицыЦен = "
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
		|ПО 
		|	ТаблицаЦенПоСебестоимости.Номенклатура = ТаблицаЦен.Номенклатура
		|	И ТаблицаЦен.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
	КонецЕсли;
	
	УникальныеПоля = Новый Структура;
	ОтчетыПлатформаСервер.КомпоновщикПолучитьПоляСтруктуры(КомпоновщикНастроек.Настройки.Структура, УникальныеПоля);
	КомпоновщикПолучитьПоляОтбора(КомпоновщикНастроек.Настройки.Отбор, УникальныеПоля);
	
	ТекстДопГруппировки = "";
	Если УникальныеПоля.Свойство("Контрагент") Тогда
		УникальныеПоля.Удалить("Контрагент");
		ТекстВыборкиЦены = ТекстВыборкиЦены + ",
		|	ЕСТЬNULL(ТаблицаЦен.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент";
		ТекстДопГруппировки = "ТаблицаЦен.Контрагент";
	КонецЕсли;
	
	Если УникальныеПоля.Свойство("ДоговорВзаиморасчетов") Тогда
		УникальныеПоля.Удалить("ДоговорВзаиморасчетов");
		ТекстВыборкиЦены = ТекстВыборкиЦены + ",
		|	ЕСТЬNULL(ТаблицаЦен.ДоговорВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)) КАК ДоговорВзаиморасчетов";
		ТекстДопГруппировки = ТекстДопГруппировки + ?(ПустаяСтрока(ТекстДопГруппировки), "", ", ") + "ТаблицаЦен.ДоговорВзаиморасчетов";
	КонецЕсли;
	
	Замены = Новый Структура;
	Замены.Вставить("Организация", "СкладКомпании.Организация");
	Замены.Вставить("Подразделение", "СкладКомпании.ПодразделениеКомпании"); 	
	ТекстВыборки      = "";
	ТекстГруппировки  = "";
	ИмяТаблицыЗапроса = "ТаблицаЦенПоСебестоимости";
	Для Каждого ТекЭлемент Из УникальныеПоля Цикл
		ВыражениеПоля = ?(Замены.Свойство(ТекЭлемент.Ключ), Замены[ТекЭлемент.Ключ], ТекЭлемент.Ключ);
		ТекстВыборки     = ТекстВыборки     + ?(ТекстВыборки     = "", "", ", ") + Символы.ПС + ИмяТаблицыЗапроса + "." + ВыражениеПоля + " КАК " + ТекЭлемент.Ключ;
		ТекстГруппировки = ТекстГруппировки + ?(ТекстГруппировки = "", "", ", ") + Символы.ПС + ИмяТаблицыЗапроса + "." + ВыражениеПоля;
	КонецЦикла;
	
	ТекстГруппировки = ?(ТекстГруппировки = "" И ПустаяСтрока(ТекстДопГруппировки), "", "СГРУППИРОВАТЬ ПО") + ТекстГруппировки + ?(НЕ ПустаяСтрока(ТекстГруппировки) И НЕ ПустаяСтрока(ТекстДопГруппировки), ", ", "") + ТекстДопГруппировки;
	
	Запрос.Текст = ТекстЗапросаРезультат+"
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМин) КАК ЦенаМин,
	|	МАКСИМУМ(ТаблицаЦенПоСебестоимости.ЦенаМакс) КАК ЦенаМакс,
	|	СРЕДНЕЕ(ТаблицаЦенПоСебестоимости.ЦенаСред) КАК ЦенаСред," + ТекстВыборки + ТекстВыборкиЦены + ТекстВыборкиПроцентов + "
	|ИЗ
	|	ТаблицаЦенПоСебестоимости КАК ТаблицаЦенПоСебестоимости " + ТекстСоединенияОбщейТаблицыЦен + "
	|" + ТекстГруппировки;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#КонецЕсли
