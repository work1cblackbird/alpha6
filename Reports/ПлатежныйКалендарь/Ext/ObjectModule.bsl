#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Стандартная процедура настройки схемы компоновщика данных
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ВалютаОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаОтчета"));
	Если НЕ ЗначениеЗаполнено(ВалютаОтчета.Значение) Тогда
		ВалютаОтчета.Значение = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Обработчик при изменении настроек.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ПриИзмененииНастроек(ФормаОтчета) Экспорт
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ВалютаОтчета = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаОтчета"));
	Если НЕ ЗначениеЗаполнено(ВалютаОтчета.Значение) Тогда
		ВалютаОтчета.Значение = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДокументРезультат = Неопределено Тогда
		ДокументРезультат = Новый ТабличныйДокумент();
	Иначе
		ДокументРезультат.Очистить();
	КонецЕсли;
	
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	
	Периодичность         = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("Периодичность",          НастройкиОтчета);
	ДатаНачала            = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("НачалоПериода",             НастройкиОтчета);
	ДатаКонца             = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("КонецПериода",          НастройкиОтчета);
	ВалютаОтчета          = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ВалютаОтчета",           НастройкиОтчета);
	ПоВидуДенежныхСредств = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ПоВидуДенежныхСредств",  НастройкиОтчета);
	ВалютаУпр             = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ОсновнаяСхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроекКалендаря = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКалендаря.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОсновнаяСхемаКомпоновкиДанных));
	
	КомпоновщикНастроекКалендаря.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	КомпоновщикНастроекКалендаря.Настройки.Структура.Очистить();
	
	СформироватьНастройкиПлатежногоКалендаря(КомпоновщикНастроекКалендаря.Настройки, КомпоновщикНастроек.Настройки, ПоВидуДенежныхСредств);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОсновнаяСхемаКомпоновкиДанных, "dataCompositionScheme", "http://v8.1c.ru/8.1/data-composition-system/scheme");
	ТекстЗапроса = ЗаписьXML.Закрыть();
	
	ФорматПредставления = "";
	
	Если Периодичность = 1 Тогда
		ФорматПредставления = "ДЛФ=D";
	ИначеЕсли Периодичность = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДЕНЬ", "Неделя");
		ФорматПредставления = "ДЛФ='""Неделя с"" дд.ММ.гггг ""г.""'";
	ИначеЕсли Периодичность = 3 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДЕНЬ", "Месяц");
		ФорматПредставления = "ДФ='ММММ гггг ""г.""'";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстЗапроса);
	КопияСхемы = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	
	Для Каждого ТекНабор Из КопияСхемы.НаборыДанных Цикл
		Для Каждого ТекПоле Из ТекНабор.Поля Цикл
			Если НЕ ТипЗнч(ТекПоле) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ИмяПоля = СокрЛП(ТекПоле.Поле);
			Если ИмяПоля = "Период" Тогда
				ТекПоле.Оформление.УстановитьЗначениеПараметра("Формат", ФорматПредставления);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Установим параметры
	КомпоновщикНастроекКалендаря.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала",    НачалоДня(ДатаНачала));
	КомпоновщикНастроекКалендаря.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаКонца));
	КомпоновщикНастроекКалендаря.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВалютаОтчета",  ВалютаОтчета);
		
	// Установим ограничение даты для поиска курса валюты
	// Это делается, что бы не выбирать все курсы валют.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ВалютаОтчета",  ВалютаОтчета);
	Запрос.УстановитьПараметр("ВалютаУпр",     ВалютаУпр);
	
	НачальныйКурсОтчета = 1;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период
	|ПОМЕСТИТЬ
	|	СрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период <= &ДатаНачала
	|	И КурсыВалют.Валюта = &ВалютаОтчета
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КурсыВалют.Кратность = 0 ТОГДА
	|			КурсыВалют.Курс
	|		ИНАЧЕ
	|			КурсыВалют.Курс/КурсыВалют.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	СрезПоследних КАК СрезПоследних
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ПО
	|	СрезПоследних.Период = КурсыВалют.Период
	|	И КурсыВалют.Валюта    = &ВалютаОтчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ Выборка.Курс = Null Тогда
			НачальныйКурсОтчета = Выборка.Курс;
		КонецЕсли;
	КонецЕсли;
	
	НачальныйКурсУпр = 1;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период
	|ПОМЕСТИТЬ
	|	СрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период <= &ДатаНачала
	|	И КурсыВалют.Валюта = &ВалютаУпр
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КурсыВалют.Кратность = 0 ТОГДА
	|			КурсыВалют.Курс
	|		ИНАЧЕ
	|			КурсыВалют.Курс/КурсыВалют.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	СрезПоследних КАК СрезПоследних
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ПО
	|	СрезПоследних.Период = КурсыВалют.Период
	|	И КурсыВалют.Валюта    = &ВалютаУпр";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ Выборка.Курс = Null Тогда
			НачальныйКурсУпр = Выборка.Курс;
		КонецЕсли;
	КонецЕсли;
	
	Если НачальныйКурсОтчета = 0 Тогда
		НачальныйКурсОтчета = 1;
	КонецЕсли;
	
	Если НачальныйКурсУпр = 0 Тогда
		НачальныйКурс = 1;
	Иначе
		НачальныйКурс = НачальныйКурсУпр/НачальныйКурсОтчета;
	КонецЕсли;
	
	КомпоновщикНастроекКалендаря.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйКурс",       НачальныйКурс);
	КомпоновщикНастроекКалендаря.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйКурсОтчета", НачальныйКурсОтчета);
	
	КомпоновщикНастроекКалендаря.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПрошлыйОстаток", НСтр("ru = 'Прошлый остаток'"));
	
	КомпоновщикНастроекКалендаря.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(КопияСхемы, КомпоновщикНастроекКалендаря.Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВалютаОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаОтчета")).Значение;
	Если НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не задана валюта отчета.'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкопироватьГруппировки(НоваяСтруктураОтчета, Группировка, ТипГруппировкиСтруктуры = Неопределено)
	
	Если ТипГруппировкиСтруктуры = Неопределено Тогда
		НоваяГруппировка = НоваяСтруктураОтчета.Добавить();
	Иначе
		НоваяГруппировка = НоваяСтруктураОтчета.Добавить(ТипГруппировкиСтруктуры);
	КонецЕсли;
	НоваяГруппировка.Использование = Группировка.Использование;
	
	// Копируем поля группировок
	Для Каждого ТекПолеГруппировки Из Группировка.ПоляГруппировки.Элементы Цикл
		НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовоеПолеГруппировки, ТекПолеГруппировки);
	КонецЦикла;
	
	// Копируем порядок группировки
	Для Каждого ТекПоле Из Группировка.Порядок.Элементы Цикл
		Если НЕ ТекПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекПоле) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
			НовоеПоле = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекПоле) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			НовоеПоле = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовоеПоле, ТекПоле);
	КонецЦикла;
	
	// Копируем доп. поля группировки
	Для Каждого ТекПоле Из Группировка.Выбор.Элементы Цикл
		Если НЕ ТекПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовоеПоле, ТекПоле);
	КонецЦикла;
	
	// Настройка отборов группировки
	Если НоваяГруппировка.ПоляГруппировки.Элементы.Количество()>0 Тогда
		ГруппаОтборов = НоваяГруппировка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование = Истина;
		ГруппаОтборов.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		НовыйОтбор = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидИтогов");
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.Использование  = Истина;
		НовыйОтбор.ПравоеЗначение = "Поступления";
		НовыйОтбор.Применение     = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		
		НовыйОтбор = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидИтогов");
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.Использование  = Истина;
		НовыйОтбор.ПравоеЗначение = "Расходы";
		НовыйОтбор.Применение     = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		
		Для Каждого ТекПолеГруппировки Из НоваяГруппировка.ПоляГруппировки.Элементы Цикл
			
			Если НЕ ТекПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйОтбор = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = ТекПолеГруппировки.Поле;
			НовыйОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.Применение    = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
			
		КонецЦикла;
		
		ПараметрОтображения = НоваяГруппировка.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
		Если Не ПараметрОтображения = Неопределено Тогда
			ПараметрОтображения.Значение      = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			ПараметрОтображения.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
		
	// Переход на следующий уровень
	Если Группировка.Структура.Количество()>0
		И (ТипЗнч(Группировка.Структура[0]) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(Группировка.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда
		
		СкопироватьГруппировки(НоваяГруппировка.Структура, Группировка.Структура[0], ТипГруппировкиСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

// Из пользовательских настроек формируем реальные настройки платежного календаря
//
Процедура СформироватьНастройкиПлатежногоКалендаря(НастройкиКалендаря, НастройкиПользователя, ПоВидуДенежныхСредств)
	
	СтруктураОтчета = НастройкиКалендаря.Структура;
	
	ТаблицаОтчета = СтруктураОтчета.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	ОсновнаяГруппировка = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ТаблицаОтчета.Строки, Новый ПолеКомпоновкиДанных("ВидИтогов"));
	ГруппировкаПериод   = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ТаблицаОтчета.Колонки, Новый ПолеКомпоновкиДанных("Период"));
	
	Если НастройкиПользователя.Структура.Количество()>0 Тогда
		
		Если ТипЗнч(НастройкиПользователя.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если НастройкиПользователя.Структура[0].Строки.Количество()>0 Тогда
				СкопироватьГруппировки(ОсновнаяГруппировка.Структура, НастройкиПользователя.Структура[0].Строки[0]);
			КонецЕсли;
		Иначе
			СкопироватьГруппировки(ОсновнаяГруппировка.Структура, НастройкиПользователя.Структура[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоВидуДенежныхСредств Тогда
		ОсновнаяГруппировка = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ГруппировкаПериод.Структура, Новый ПолеКомпоновкиДанных("ВидДенежныхСредств"));
		ОсновнаяГруппировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеПолейГруппировки", РасположениеПолейГруппировкиКомпоновкиДанных.ОтдельноИТолькоВИтогах);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли