
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура помогает настроить отчет непосредственно перед выводом
//
// Параметры:
//  ПараметрСхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных.
//  Настройки - НастройкиКомпоновкиДанных - Копия настроек компоновки данных.
//
Процедура ПередФормированиемМакетаКомпоновки(ПараметрСхемаКомпоновкиДанных, Настройки) Экспорт
	
	Поля = Новый Массив;
	Поля.Добавить("ХарактеристикаНоменклатуры");
	Поля.Добавить("ЕдиницаИзмерения");
	ОтчетыПлатформаСервер.КомпоновщикУстановитьОтборПустыхГруппировок(Настройки.Структура, Поля);
	
КонецПроцедуры // ПередФормированиемМакетаКомпоновки()

// Стандартная процедура настройки схемы компоновщика данных
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
 	ВалютаОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаОтчета"));
	Если НЕ ЗначениеЗаполнено(ВалютаОтчета.Значение) Тогда
		ВалютаОтчета.Значение = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Запрос = ПолучитьОсновнойЗапрос();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаЦен", Запрос.Выполнить());
	ОтчетыПлатформаСервер.ВывестиОтчет(ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, ВнешниеНаборыДанных);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьНоменклатура = ОтчетыПлатформаСервер.КомпоновщикЕстьПолеВСтруктуре("Номенклатура", КомпоновщикНастроек.Настройки.Структура);
	
	Если НЕ ЕстьНоменклатура Тогда
		ПолеПоиска = ОтчетыПлатформаСервер.КомпоновщикПолучитьПолеКомпоновки("Номенклатура");
		Счетчик = ОтчетыПлатформаСервер.КомпоновщикСчетчикУсловийПоля(ПолеПоиска, КомпоновщикНастроек.Настройки.Отбор);
		Если НЕ Счетчик = 1 Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В группировках должна присутствовать номенклатура.'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.ИспользоватьМноговалютныйУчет.Получить() Тогда
		ВалютаОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаОтчета")).Значение;
		Если НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не задана валюта отчета.'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуПодразделений(ТекЗапрос, ОтборПоПодразделению)
	
	Подразделение = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
	
	ТаблицаПодразделений = Новый ТаблицаЗначений;
	ТаблицаПодразделений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаПодразделений.Колонки.Добавить("Родитель",      Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаПодразделений.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	ТекЗапрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаИзмерения.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ПодразделенияКомпании КАК ТаблицаИзмерения
	|ГДЕ
	|	(НЕ ТаблицаИзмерения.ПометкаУдаления)
	|	"+ОтборПоПодразделению;
	ТекЗапрос.УстановитьПараметр("ПодразделениеКомпании", Подразделение);
	
	ПустоеПодразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	
	Выборка = ТекЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество()=0 Тогда
		НоваяСтрока = ТаблицаПодразделений.Добавить();
		НоваяСтрока.Подразделение = ПустоеПодразделение;
		НоваяСтрока.Родитель      = ПустоеПодразделение;
		НоваяСтрока.Уровень       = 0;
	Иначе
		Пока Выборка.Следующий() Цикл
			ТекущееПодразделение = Выборка.Подразделение;
			Уровень = 0;
			Пока ЗначениеЗаполнено(ТекущееПодразделение) Цикл
				
				НоваяСтрока = ТаблицаПодразделений.Добавить();
				НоваяСтрока.Подразделение = Выборка.Подразделение;
				НоваяСтрока.Родитель      = ТекущееПодразделение;
				НоваяСтрока.Уровень       = Уровень;
				
				// Получаем родителя подразделения
				ТекущееПодразделение = ТекущееПодразделение.Родитель;
				Уровень = Уровень + 1;
			КонецЦикла;
			
			НоваяСтрока = ТаблицаПодразделений.Добавить();
			НоваяСтрока.Подразделение = Выборка.Подразделение;
			НоваяСтрока.Родитель      = ПустоеПодразделение;
			НоваяСтрока.Уровень       = Уровень;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПодразделений;
	
КонецФункции

// формирует текст запроса отчета
Функция ПолучитьОсновнойЗапрос()

	Подразделение     = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
	ТипЦенПоУмолчанию = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки");
	
	СтруктураКомпоновки = КомпоновщикНастроек.Настройки.Структура;
	ОтборКомпоновки     = КомпоновщикНастроек.Настройки.Отбор;
	
	ЕстьКонтрагент		= ОтчетыПлатформаСервер.КомпоновщикЕстьПолеВСтруктуре("Контрагент",                 СтруктураКомпоновки);
	ЕстьПодразделение	= ОтчетыПлатформаСервер.КомпоновщикЕстьПолеВСтруктуре("Подразделение",              СтруктураКомпоновки);
	ЕстьЕдиница			= ОтчетыПлатформаСервер.КомпоновщикЕстьПолеВСтруктуре("ЕдиницаИзмерения",           СтруктураКомпоновки);
	ЕстьХарактеристика	= ОтчетыПлатформаСервер.КомпоновщикЕстьПолеВСтруктуре("ХарактеристикаНоменклатуры", СтруктураКомпоновки);
	ЕстьТипЦен			= ОтчетыПлатформаСервер.КомпоновщикЕстьПолеВСтруктуре("ТипЦен",                     СтруктураКомпоновки);
	
	// Заполним параметры
	ВалютаОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВалютаОтчета").Значение;
	Если НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
		ВалютаОтчета=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВалютаОтчета",ВалютаОтчета);
	КонецЕсли;
	ВалютаОтчета = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("ВалютаОтчета",  КомпоновщикНастроек.Настройки);
	НачалоПериода   = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("НачалоПериода",    КомпоновщикНастроек.Настройки);
	КонецПериода    = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("КонецПериода", КомпоновщикНастроек.Настройки);
	
	КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(КонецПериода, Новый Структура("Валюта", ВалютаОтчета));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипЦенПоУмолчанию", ТипЦенПоУмолчанию);
	Запрос.УстановитьПараметр("КурсВалютыОтчета",  КурсВалюты.Курс/?(КурсВалюты.Кратность=0,1,КурсВалюты.Кратность));
	Запрос.УстановитьПараметр("ДатаНач",           НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",           КонецДня(КонецПериода));
	
	// Получим текст отборов
	// Текст отбора по подразделению
	СоответствиеЗамен = Новый Соответствие;
	СоответствиеЗамен.Вставить("Подразделение", "Ссылка");
	
	ПоляОграничения = Новый Массив;
	ПоляОграничения.Добавить("Подразделение");
	ОтборПоПодразделению = ОтчетыПлатформаСервер.КомпоновщикПолучитьТекстОтбора(ОтборКомпоновки.Элементы, ОтборКомпоновки.ДоступныеПоляОтбора, "ТаблицаИзмерения", Запрос.Параметры, СоответствиеЗамен, ПоляОграничения);
	// Текст отбора по контрагенту
	ПоляОграничения = Новый Массив;
	ПоляОграничения.Добавить("Контрагент");
	ТекстПоКонтрагенту = ОтчетыПлатформаСервер.КомпоновщикПолучитьТекстОтбора(ОтборКомпоновки.Элементы, ОтборКомпоновки.ДоступныеПоляОтбора, "ТаблицаЦен", Запрос.Параметры, , ПоляОграничения);
	// Общий текст отбора без подразделения и контрагента
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("Контрагент");
	ПоляИсключения.Добавить("Подразделение");
	ПоляИсключения.Добавить("ДатаИзменения");
	ПоляИсключения.Добавить("ОтклонениеЦены");
	ПоляИсключения.Добавить("СтараяЦена");
	ПоляИсключения.Добавить("НоваяЦена");
	ТекстОтбора = ОтчетыПлатформаСервер.КомпоновщикПолучитьТекстОтбора(ОтборКомпоновки.Элементы, ОтборКомпоновки.ДоступныеПоляОтбора, "ТаблицаЦен", Запрос.Параметры, , , ПоляИсключения);
	
	Если НЕ ПустаяСтрока(ТекстОтбора) Тогда
		ТекстОтбора = " И " + ТекстОтбора;
	КонецЕсли;
	
	ПолеТипЦен        = Новый ПолеКомпоновкиДанных("ТипЦен");
	ПолеКонтрагент    = Новый ПолеКомпоновкиДанных("Контрагент");
	ПолеПодразделение = Новый ПолеКомпоновкиДанных("Подразделение");
	
	СчетчикОтборов = ОтчетыПлатформаСервер.КомпоновщикСчетчикУсловийПоля(ПолеТипЦен, ОтборКомпоновки);
	Если СчетчикОтборов > 1 Тогда
		ОдиночныйОтборПоТипуЦен = Истина;
	Иначе
		ОдиночныйОтборПоТипуЦен = Ложь;
	КонецЕсли;
	
	СчетчикОтборов = ОтчетыПлатформаСервер.КомпоновщикСчетчикУсловийПоля(ПолеКонтрагент, ОтборКомпоновки);
	Если СчетчикОтборов = 1 Тогда
		ОдиночныйОтборКонтрагента = Истина;
	Иначе
		ОдиночныйОтборКонтрагента = Ложь;
	КонецЕсли;
	
	СчетчикОтборов = ОтчетыПлатформаСервер.КомпоновщикСчетчикУсловийПоля(ПолеПодразделение, ОтборКомпоновки);
	Если СчетчикОтборов > 1 Тогда
		ОдиночныйОтборПодразделения = Истина;
	Иначе
		ОдиночныйОтборПодразделения = Ложь;
	КонецЕсли;
	
	ВыводитьОтборКонтрагента = Ложь;
	Если ОдиночныйОтборКонтрагента Тогда
		ТекстОтбора=ТекстОтбора+"
		|	И (ТаблицаЦен.Контрагент=ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	ИЛИ ("+ТекстПоКонтрагенту+"))";
	ИначеЕсли Не ЕстьКонтрагент Тогда
		ТекстОтбора=ТекстОтбора+"
		|	И ТаблицаЦен.Контрагент=ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Невозможно определить, цены какого контрагента выводить. Будут выбраны только собственные цены'");
		Сообщение.Сообщить();
		ВыводитьОтборКонтрагента = Истина;
	ИначеЕсли Не ПустаяСтрока(ТекстПоКонтрагенту) Тогда
		ТекстОтбора=ТекстОтбора+"
		|	И (ТаблицаЦен.Контрагент=ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	ИЛИ ("+ТекстПоКонтрагенту+"))";
	КонецЕсли;
	
	ВыводитьОтборПодразделение = Ложь;
	Если ОдиночныйОтборПодразделения Тогда
		ОтборПоПодразделению = " И "+ОтборПоПодразделению;
	ИначеЕсли Не ЕстьПодразделение Тогда
		ВыводитьОтборПодразделение = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Невозможно определить, цены какого подразделения выводить. Будут выбраны только цены подразделения """ +СокрЛП(Подразделение)+"""'");
		Сообщение.Сообщить();
		ОтборПоПодразделению = " И ТаблицаИзмерения.Ссылка = &ПодразделениеКомпании";
	ИначеЕсли Не ПустаяСтрока(ОтборПоПодразделению) Тогда 
		ОтборПоПодразделению = " И (ТаблицаИзмерения.Ссылка = &ПодразделениеКомпании
		|	ИЛИ ("+ОтборПоПодразделению+"))";
	КонецЕсли;
	
	ВыводитьОтборТипаЦен = Ложь;
	Если ОдиночныйОтборПоТипуЦен Тогда
	ИначеЕсли Не ЕстьТипЦен Тогда
		ВыводитьОтборТипаЦен = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Невозможно определить тип цен. Будет выбран тип цен """+СокрЛП(ТипЦенПоУмолчанию)+"""'");
		Сообщение.Сообщить();
		ТекстОтбора=ТекстОтбора+"
		|	И ТаблицаЦен.ТипЦен = &ТипЦенПоУмолчанию";
	КонецЕсли;
	
	Если Не ЕстьХарактеристика Тогда
		ТекстОтбора=ТекстОтбора+"
		|	И ТаблицаЦен.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	Если Не ЕстьЕдиница Тогда
		ТекстОтбора=ТекстОтбора+"
		|	И ТаблицаЦен.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ЗАПРОСА ДЛЯ ПОЛУЧЕНИЯ ЦЕН ОБЪЕКТА СРАВНЕНИЯ
	// Для Выбранного подразделения получим всех родителей
	ТаблицаПодразделений = ПолучитьТаблицуПодразделений(Запрос, ОтборПоПодразделению);
	Запрос.УстановитьПараметр("ТаблицаПодразделений", ТаблицаПодразделений);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаПодразделений.Подразделение КАК Справочник.ПодразделенияКомпании) КАК Подразделение,
	|	ВЫРАЗИТЬ(ТаблицаПодразделений.Родитель КАК Справочник.ПодразделенияКомпании) КАК Родитель,
	|	ТаблицаПодразделений.Уровень КАК Уровень
	|ПОМЕСТИТЬ
	|	ТаблицаПодразделений
	| ИЗ
	|	&ТаблицаПодразделений КАК ТаблицаПодразделений
	|ИНДЕКСИРОВАТЬ ПО 
	|	Родитель,
	|	Подразделение
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	(КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность)/&КурсВалютыОтчета КАК Коэффициент
	|ПОМЕСТИТЬ
	|	ТаблицаПересчета
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСрезОборот.Контрагент КАК Контрагент,
	|	ТаблицаСрезОборот.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаСрезОборот.Номенклатура КАК Номенклатура,
	|	ТаблицаСрезОборот.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаСрезОборот.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСрезОборот.ТипЦен КАК ТипЦен,
	|	ТаблицаПодразделений.Подразделение КАК Подразделение,
	|	МИНИМУМ(ТаблицаПодразделений.Уровень) КАК Уровень,
	|	МАКСИМУМ(ТаблицаСрезОборот.Период) КАК Период
	|ПОМЕСТИТЬ
	|	ТаблицаСрезОборот
	|ИЗ(ВЫБРАТЬ
	|	ТаблицаЦен.Контрагент КАК Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЦен.ПодразделениеКомпании КАК Подразделение,
	|	ТаблицаЦен.ТипЦен КАК ТипЦен,
	|	МАКСИМУМ(ТаблицаЦен.Период) КАК Период
	|ИЗ
	|	РегистрСведений.Цены КАК ТаблицаЦен
	|ГДЕ
	|	ТаблицаЦен.Период МЕЖДУ &ДатаНач И &ДатаКон " + ТекстОтбора + "
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦен.Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов,
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.ЕдиницаИзмерения,
	|	ТаблицаЦен.ПодразделениеКомпании,
	|	ТаблицаЦен.ТипЦен) КАК ТаблицаСрезОборот
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодразделений КАК ТаблицаПодразделений
	|ПО ТаблицаСрезОборот.Подразделение = ТаблицаПодразделений.Родитель
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСрезОборот.Контрагент,
	|	ТаблицаСрезОборот.ДоговорВзаиморасчетов,
	|	ТаблицаСрезОборот.Номенклатура,
	|	ТаблицаСрезОборот.ХарактеристикаНоменклатуры,
	|	ТаблицаСрезОборот.ЕдиницаИзмерения,
	|	ТаблицаПодразделений.Подразделение,
	|	ТаблицаСрезОборот.ТипЦен
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	Контрагент,
	|	ДоговорВзаиморасчетов,
	|	Номенклатура,
	|	Подразделение
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСрезПоследних.Контрагент КАК Контрагент,
	|	ТаблицаСрезПоследних.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТаблицаСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСрезПоследних.ТипЦен КАК ТипЦен,
	|	ТаблицаПодразделений.Подразделение КАК Подразделение,
	|	МИНИМУМ(ТаблицаПодразделений.Уровень) КАК Уровень,
	|	МАКСИМУМ(ТаблицаСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ
	|	ТаблицаСрезПоследних
	|ИЗ(ВЫБРАТЬ
	|	ТаблицаЦен.Контрагент КАК Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЦен.ПодразделениеКомпании КАК Подразделение,
	|	ТаблицаЦен.ТипЦен КАК ТипЦен,
	|	МАКСИМУМ(ТаблицаЦен.Период) КАК Период
	|ИЗ
	|	РегистрСведений.Цены КАК ТаблицаЦен
	|ГДЕ
	|	ТаблицаЦен.Период < &ДатаНач " + ТекстОтбора + "
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦен.Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов,
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.ЕдиницаИзмерения,
	|	ТаблицаЦен.ПодразделениеКомпании,
	|	ТаблицаЦен.ТипЦен) КАК ТаблицаСрезПоследних
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодразделений КАК ТаблицаПодразделений
	|ПО ТаблицаСрезПоследних.Подразделение = ТаблицаПодразделений.Родитель
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСрезПоследних.Контрагент,
	|	ТаблицаСрезПоследних.Номенклатура,
	|	ТаблицаСрезПоследних.ДоговорВзаиморасчетов,
	|	ТаблицаСрезПоследних.ХарактеристикаНоменклатуры,
	|	ТаблицаСрезПоследних.ЕдиницаИзмерения,
	|	ТаблицаПодразделений.Подразделение,
	|	ТаблицаСрезПоследних.ТипЦен
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипЦен,
	|	Контрагент,
	|	ДоговорВзаиморасчетов,
	|	Номенклатура,
	|	Подразделение
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСрезОборот.Контрагент КАК Контрагент,
	|	ТаблицаСрезОборот.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаСрезОборот.Номенклатура КАК Номенклатура,
	|	ТаблицаСрезОборот.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаСрезОборот.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСрезОборот.ТипЦен КАК ТипЦен,
	|	ТаблицаСрезОборот.Подразделение КАК Подразделение,
	|	ТаблицаСрезОборот.Номенклатура.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|"+?(ЕстьХарактеристика ИЛИ ЕстьЕдиница,"
	|	ВЫБОР
	|		КОГДА ТаблицаСрезОборот.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) И ТаблицаСрезОборот.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			ТаблицаСрезОборот.Период
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ДатаИзменения,
	|	ВЫБОР
	|		КОГДА ТаблицаСрезПоследних.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) И ТаблицаСрезПоследних.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			ТаблицаСтарыхЦен.Цена*ЕСТЬNULL(ТаблицаПересчета.Коэффициент, 1)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СтараяЦена,
	|	ВЫБОР
	|		КОГДА ТаблицаСрезОборот.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) И ТаблицаСрезОборот.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			ТаблицаНовыхЦен.Цена*ЕСТЬNULL(ТаблицаПересчета.Коэффициент, 1)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК НоваяЦена,
	|	ТаблицаСрезОборот.Период КАК ДатаИзмененияДоп,
	|	ЕСТЬNULL(ТаблицаСтарыхЦен.Цена, 0)*ЕСТЬNULL(ТаблицаПересчета.Коэффициент, 1) КАК СтараяЦенаДоп,
	|	ТаблицаНовыхЦен.Цена*ЕСТЬNULL(ТаблицаПересчета.Коэффициент, 1) КАК НоваяЦенаДоп,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаСрезОборот.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ИЛИ НЕ ТаблицаСрезОборот.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			0
	|		КОГДА ТаблицаСтарыхЦен.Цена ЕСТЬ NULL И ТаблицаНовыхЦен.Цена = 0 ТОГДА
	|			0
	|		КОГДА ТаблицаСтарыхЦен.Цена ЕСТЬ NULL ТОГДА
	|			100
	|		КОГДА ТаблицаСтарыхЦен.Цена = ТаблицаНовыхЦен.Цена ТОГДА
	|			0
	|		КОГДА ТаблицаСтарыхЦен.Цена = 0 ТОГДА
	|			100
	|		ИНАЧЕ 
	|			100*(ТаблицаНовыхЦен.Цена - ТаблицаСтарыхЦен.Цена)/ТаблицаСтарыхЦен.Цена
	|	КОНЕЦ КАК ОтклонениеЦены,
	|	ВЫБОР
	|		КОГДА (ТаблицаСтарыхЦен.Цена ЕСТЬ NULL И ТаблицаНовыхЦен.Цена = 0) ИЛИ (ТаблицаСтарыхЦен.Цена = ТаблицаНовыхЦен.Цена) ТОГДА
	|			0
	|		КОГДА ТаблицаСтарыхЦен.Цена ЕСТЬ NULL ИЛИ ТаблицаСтарыхЦен.Цена = 0 ТОГДА
	|			100
	|		ИНАЧЕ 
	|			100*(ТаблицаНовыхЦен.Цена - ТаблицаСтарыхЦен.Цена)/ТаблицаСтарыхЦен.Цена
	|	КОНЕЦ КАК ОтклонениеЦеныДоп","
	|	ТаблицаСрезОборот.Период КАК ДатаИзменения,
	|	ЕСТЬNULL(ТаблицаСтарыхЦен.Цена, 0)*ЕСТЬNULL(ТаблицаПересчета.Коэффициент, 1) КАК СтараяЦена,
	|	ТаблицаНовыхЦен.Цена*ЕСТЬNULL(ТаблицаПересчета.Коэффициент, 1) КАК НоваяЦена,
	|	ВЫБОР
	|		КОГДА (ТаблицаСтарыхЦен.Цена ЕСТЬ NULL И ТаблицаНовыхЦен.Цена = 0) ИЛИ (ТаблицаСтарыхЦен.Цена = ТаблицаНовыхЦен.Цена) ТОГДА
	|			0
	|		КОГДА ТаблицаСтарыхЦен.Цена ЕСТЬ NULL ИЛИ ТаблицаСтарыхЦен.Цена = 0 ТОГДА
	|			100
	|		ИНАЧЕ 
	|			100*(ТаблицаНовыхЦен.Цена - ТаблицаСтарыхЦен.Цена)/ТаблицаСтарыхЦен.Цена
	|	КОНЕЦ КАК ОтклонениеЦены")+"
	|ИЗ
	|	ТаблицаСрезОборот КАК ТаблицаСрезОборот
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодразделений КАК ТаблицаПодразделенийНовыхЦен
	|ПО 
	|	ТаблицаСрезОборот.Подразделение = ТаблицаПодразделенийНовыхЦен.Подразделение
	|	И ТаблицаСрезОборот.Уровень = ТаблицаПодразделенийНовыхЦен.Уровень
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Цены КАК ТаблицаНовыхЦен
	|ПО 
	|	ТаблицаСрезОборот.Период = ТаблицаНовыхЦен.Период
	|	И ТаблицаСрезОборот.Контрагент = ТаблицаНовыхЦен.Контрагент
	|	И ТаблицаСрезОборот.ДоговорВзаиморасчетов = ТаблицаНовыхЦен.ДоговорВзаиморасчетов
	|	И ТаблицаСрезОборот.Номенклатура = ТаблицаНовыхЦен.Номенклатура
	|	И ТаблицаСрезОборот.ХарактеристикаНоменклатуры = ТаблицаНовыхЦен.ХарактеристикаНоменклатуры
	|	И ТаблицаСрезОборот.ЕдиницаИзмерения = ТаблицаНовыхЦен.ЕдиницаИзмерения
	|	И ТаблицаСрезОборот.ТипЦен = ТаблицаНовыхЦен.ТипЦен
	|	И ТаблицаПодразделенийНовыхЦен.Родитель = ТаблицаНовыхЦен.ПодразделениеКомпании
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСрезПоследних КАК ТаблицаСрезПоследних
	|ПО
	|	ТаблицаСрезОборот.Контрагент = ТаблицаСрезПоследних.Контрагент
	|	И ТаблицаСрезОборот.ДоговорВзаиморасчетов = ТаблицаСрезПоследних.ДоговорВзаиморасчетов
	|	И ТаблицаСрезОборот.Номенклатура = ТаблицаСрезПоследних.Номенклатура
	|	И ТаблицаСрезОборот.ХарактеристикаНоменклатуры = ТаблицаСрезПоследних.ХарактеристикаНоменклатуры
	|	И ТаблицаСрезОборот.ЕдиницаИзмерения = ТаблицаСрезПоследних.ЕдиницаИзмерения
	|	И ТаблицаСрезОборот.ТипЦен = ТаблицаСрезПоследних.ТипЦен
	|	И ТаблицаСрезОборот.Подразделение = ТаблицаСрезПоследних.Подразделение
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПодразделений КАК ТаблицаПодразделенийСтарыхЦен
	|ПО 
	|	ТаблицаСрезПоследних.Уровень = ТаблицаПодразделенийСтарыхЦен.Уровень
	|	И ТаблицаСрезПоследних.Подразделение = ТаблицаПодразделенийСтарыхЦен.Подразделение
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены КАК ТаблицаСтарыхЦен
	|ПО 
	|	ТаблицаСрезПоследних.Период = ТаблицаСтарыхЦен.Период 
	|	И ТаблицаСрезПоследних.Контрагент = ТаблицаСтарыхЦен.Контрагент
	|	И ТаблицаСрезПоследних.ДоговорВзаиморасчетов = ТаблицаСтарыхЦен.ДоговорВзаиморасчетов
	|	И ТаблицаСрезПоследних.Номенклатура = ТаблицаСтарыхЦен.Номенклатура
	|	И ТаблицаСрезПоследних.ХарактеристикаНоменклатуры = ТаблицаСтарыхЦен.ХарактеристикаНоменклатуры
	|	И ТаблицаСрезПоследних.ЕдиницаИзмерения = ТаблицаСтарыхЦен.ЕдиницаИзмерения
	|	И ТаблицаСрезПоследних.ТипЦен = ТаблицаСтарыхЦен.ТипЦен
	|	И ТаблицаПодразделенийСтарыхЦен.Родитель = ТаблицаСтарыхЦен.ПодразделениеКомпании
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПересчета КАК ТаблицаПересчета
	|ПО 
	|	ТаблицаСрезОборот.ТипЦен.ВВалютеУчета И ТаблицаСрезОборот.Номенклатура.ВалютаУчета = ТаблицаПересчета.Валюта
	|	ИЛИ (НЕ ТаблицаСрезОборот.ТипЦен.ВВалютеУчета) И ТаблицаСрезОборот.ТипЦен.ВалютаЦены = ТаблицаПересчета.Валюта
	|";
	
	Возврат Запрос;
	
КонецФункции // ПолучитьОсновнойЗапрос()

#КонецОбласти

#КонецЕсли