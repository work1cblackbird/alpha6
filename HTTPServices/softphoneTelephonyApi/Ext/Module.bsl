
#Область ОбработчикиМетодовHTTP

Функция pingGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("ok");
	Возврат Ответ;
	
КонецФункции

Функция itoolabsEventPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/itoolabs/event";
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	Если ПараметрыТела.crm_token <> "1" И НЕ КорректныйКлюч(ПараметрыТела.crm_token) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Некорректный ключ';en='Incorrect key'"));
	КонецЕсли;
	
	ОбязательныеПараметры = "cmd";
	Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела,ОбязательныеПараметры) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
	КонецЕсли;
	
	ТипОперации = ПараметрыТела.cmd;
	Ответ = Неопределено;
	
	Попытка
		Если ТипОперации = "contact" Тогда
			ОбязательныеПараметры = "phone";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Возврат СообщениеОбОшибке(
					Запрос.Заголовки,
					400,
					ИмяСобытияДляЖурналаРегистрации,
					сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(200);
			
			ПараметрыПереадресации = сфпСофтФонПроСервер.сфпПараметрыПереадресации(ПараметрыТела.phone);
			Попытка    ВнутреннийНомер = ПараметрыПереадресации.Логин;
			Исключение ВнутреннийНомер = "";
			КонецПопытки;
						
			Если ЗначениеЗаполнено(ПараметрыПереадресации.НаименованиеКонтакта) Тогда
				ЗаписьJSON = Новый ЗаписьJSON();
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
						
				ЗаписьJSON.ЗаписатьИмяСвойства("contact_name");
				ЗаписьJSON.ЗаписатьЗначение(ПараметрыПереадресации.НаименованиеКонтакта);
					
				Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("responsible");
					ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
                КонецЕсли;
					
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				ПараметрыОтвета = ЗаписьJSON.Закрыть();
					
				Ответ.Заголовки.Вставить("Content-Type", "application/json");
				Ответ.УстановитьТелоИзСтроки(ПараметрыОтвета);
					
				ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
				сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации + ".Ответ", ОтветСтрокой);
			КонецЕсли;

		ИначеЕсли ТипОперации = "history" Тогда
			ОбязательныеПараметры = "callid";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Возврат СообщениеОбОшибке(
					Запрос.Заголовки,
					400,
					ИмяСобытияДляЖурналаРегистрации,
					сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
			КонецЕсли;
			
			Если ПараметрыТела.Свойство("link") Тогда
				ИдентификаторЗаписи = ПараметрыТела.link;
				Если ЗначениеЗаполнено(ИдентификаторЗаписи) Тогда
					сфпСофтФонПроСервер.ОбработатьЗаписьЗвонка(ПараметрыТела.callid, ИдентификаторЗаписи);
				КонецЕсли;
				
			ИначеЕсли ПараметрыТела.Свойство("status") Тогда
				Если ПараметрыТела.status = "Cancel" Тогда
					ВнутреннийНомер = "";
					Если ПараметрыТела.Свойство("ext") Тогда
						ВнутреннийНомер = ПараметрыТела.ext;
						
					Иначе
						Логин = ПараметрыТела.user;
						Логин = Лев(Логин, Найти(Логин, "@") - 1);
						
						УстановитьПривилегированныйРежим(Истина);
						
						ЗапросНомера = Новый Запрос("
						|ВЫБРАТЬ ВнутреннийНомерАТС КАК ВнутреннийНомер
						|ИЗ РегистрСведений.сфпКонтактыТелефонии
						|ГДЕ ЛогинАТС = &Логин");
						ЗапросНомера.УстановитьПараметр("Логин", Логин);
						Выборка = ЗапросНомера.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							ВнутреннийНомер = Выборка.ВнутреннийНомер;
						КонецЕсли;
						
						УстановитьПривилегированныйРежим(Ложь);
					КонецЕсли;
			
					сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,,,, Истина,,, ПараметрыТела.callid,, ВнутреннийНомер);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипОперации = "event" Тогда
			ОбязательныеПараметры = "type,callid,phone";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Возврат СообщениеОбОшибке(
					Запрос.Заголовки,
					400,
					ИмяСобытияДляЖурналаРегистрации,
					сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
			КонецЕсли;
			
			ВнутреннийНомер = "";
			Если ПараметрыТела.Свойство("ext") Тогда
				ВнутреннийНомер = ПараметрыТела.ext;
				
			Иначе
				Логин = ПараметрыТела.user;
				Логин = Лев(Логин, Найти(Логин, "@") - 1);
				
				УстановитьПривилегированныйРежим(Истина);
				
				ЗапросНомера = Новый Запрос("
				|ВЫБРАТЬ ВнутреннийНомерАТС КАК ВнутреннийНомер
				|ИЗ РегистрСведений.сфпКонтактыТелефонии
				|ГДЕ ЛогинАТС = &Логин");
				ЗапросНомера.УстановитьПараметр("Логин", Логин);
				Выборка = ЗапросНомера.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ВнутреннийНомер = Выборка.ВнутреннийНомер;
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
				Если НРег(ПараметрыТела.type) = "incoming" Тогда
					ДатаНачала = ТекущаяДатаСеанса();
					сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(ПараметрыТела.phone, ВнутреннийНомер, ДатаНачала, ПараметрыТела.callid);

				ИначеЕсли НРег(ПараметрыТела.type) = "outgoing" Тогда
					сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ТекущаяДатаСеанса(), ВнутреннийНомер,, ПараметрыТела.phone, ПараметрыТела.callid);

				ИначеЕсли НРег(ПараметрыТела.type) = "accepted" Тогда
					сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ПараметрыТела.callid, ТекущаяДатаСеанса(), ВнутреннийНомер);

				ИначеЕсли НРег(ПараметрыТела.type) = "completed" Тогда
					сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ТекущаяДатаСеанса(),, Ложь,,, ПараметрыТела.callid,, ВнутреннийНомер);

				ИначеЕсли НРег(ПараметрыТела.type) = "cancelled" Тогда
					сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,,,, Истина,,, ПараметрыТела.callid,, ВнутреннийНомер);
				КонецЕсли;
			КонецЕсли;	
			
		Иначе
			Возврат СообщениеОбОшибке(Запрос.Заголовки, 501, ИмяСобытияДляЖурналаРегистрации); // Not implemented			
		КонецЕсли;
		
	Исключение
		Возврат СообщениеОбОшибке(Запрос.Заголовки, 500, ИмяСобытияДляЖурналаРегистрации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;
	
	Если Ответ = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(200);
	КонецЕсли;
		
	Возврат Ответ;
	
КонецФункции

Функция beelineEventPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/beeline/event";
	
	Если НЕ ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(Запрос.Заголовки, 500, ИмяСобытияДляЖурналаРегистрации, НСтр("ru='Использование телефонии Билайн отключено в настройках';en='Use of telephony Beeline turned off in settings'"));
	КонецЕсли;
	
	Попытка
		ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(СтрЗаменить(ТелоЗапроса, "address countryCode=""7"">", "address>"));
		ПараметрыЗапроса = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		Попытка
			targetId = ПараметрыЗапроса.targetId;
			ДанныеЗвонка = ПараметрыЗапроса.eventData.call;
		Исключение
			targetId = Неопределено;
			ДанныеЗвонка = Неопределено
		КонецПопытки;	
		
		Если targetId <> Неопределено И ДанныеЗвонка <> Неопределено Тогда
			Пользователь = "";
			НомерКонтакта = "";
			ИдентификаторЗвонка = "";
		
			ЗапросНомера = Новый Запрос("
			|ВЫБРАТЬ ВнутреннийНомерАТС КАК ВнутреннийНомер, Объект КАК Абонент
			|ИЗ РегистрСведений.сфпКонтактыТелефонии
			|ГДЕ ЛогинАТС = &Логин");
			ЗапросНомера.УстановитьПараметр("Логин", ПараметрыЗапроса.targetId);
			Выборка = ЗапросНомера.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Пользователь = Выборка.Абонент;
			КонецЕсли;
			
			ДанныеЗвонка = ПараметрыЗапроса.eventData.call;
			НомерКонтакта = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ДанныеЗвонка.remoteParty.address);
			ИдентификаторЗвонка = ДанныеЗвонка.callId;
				
			Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(НомерКонтакта) И ЗначениеЗаполнено(Пользователь) Тогда
				Если Найти(ТелоЗапроса, "CallOriginatingEvent") > 0 Тогда
					// Отзвон АТС

				ИначеЕсли Найти(ТелоЗапроса, "CallOriginatedEvent") > 0 Тогда
					// Исходящий звонок
					сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ТекущаяДатаСеанса(), Пользователь,, НомерКонтакта, ИдентификаторЗвонка);

				ИначеЕсли ДанныеЗвонка.state = "Alerting" Тогда //Найти(ТелоЗапроса, "CallReceivedEvent") > 0 Тогда
					// Входящий звонок
					сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(НомерКонтакта, Пользователь, ТекущаяДатаСеанса(), ИдентификаторЗвонка);
					
				ИначеЕсли ДанныеЗвонка.state = "Active" Тогда //Найти(ТелоЗапроса, "CallAnsweredEvent") > 0 Тогда
					// Установлено соединение
					сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ТекущаяДатаСеанса(), Пользователь);
									
				ИначеЕсли ДанныеЗвонка.state = "Released" Тогда //Найти(ТелоЗапроса, "CallReleasedEvent") > 0 Тогда
					// Завершение звонка
					ИдентификаторЗаписи = ДанныеЗвонка.extTrackingId + "/" + ПараметрыЗапроса.targetId;
					сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ТекущаяДатаСеанса(),,, ИдентификаторЗаписи,, ИдентификаторЗвонка,, Пользователь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(
			сфпСофтФонПроСерверПереопределяемый.СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;

КонецФункции

Функция mangoEventsCallPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/mango/events/call";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии Манго отключено в настройках';en='Use of telephony Mango turned off in settings'"));
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьSign(ПараметрыТела) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверно указана подпись запроса sign=%1';en='Invalid query signature sign=%1'"), ПараметрыТела.sign));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON,,,,"ВосстановлениеJSON", сфпСофтФонПроСервер,, МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("entry_id");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("call_state");
	ОбязательныеПараметры.Добавить("location");
	ОбязательныеПараметры.Добавить("to");
	ОбязательныеПараметры.Добавить("from");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапросаJSON.Свойство(ОбязательныйПараметр) Тогда
			Возврат СообщениеОбОшибке(
				Запрос.Заголовки,
				400,
				ИмяСобытияДляЖурналаРегистрации,
				сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательный параметр %1.';en='Missing required parameter %1.'"), ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Если НРег(ПараметрыЗапросаJSON.location) = "ivr" Тогда
			НомерКонтакта = ПараметрыЗапросаJSON.from.number;
			
			ПараметрыПереадресации = сфпСофтФонПроСервер.сфпПараметрыПереадресации(НомерКонтакта);
			Попытка    ВнутреннийНомер = ПараметрыПереадресации.ВнутреннийНомер;
			Исключение ВнутреннийНомер = "";
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
				ВходящийИдентификаторЗвонка = ПараметрыЗапросаJSON.entry_id;
				ИдентификаторЗвонка = ПараметрыЗапросаJSON.call_id;
				
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, ВнутреннийНомер, ВнутреннийНомер, Ложь);
			КонецЕсли;
			
		ИначеЕсли НРег(ПараметрыЗапросаJSON.location) = "abonent" Тогда
			ВходящийИдентификаторЗвонка = ПараметрыЗапросаJSON.entry_id;
			ИдентификаторЗвонка = ПараметрыЗапросаJSON.call_id;
				
			Если ПараметрыЗапросаJSON.call_state = "Appeared" Тогда
				Если ПараметрыЗапросаJSON.from.Свойство("extension") И ПараметрыЗапросаJSON.to.Свойство("extension") Тогда
					// Внутренний звонок
					сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("Внутренний", "" + ИдентификаторЗвонка);
					
				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("extension") И ПараметрыЗапросаJSON.to.Свойство("number") Тогда
					НомерКонтакта = ПараметрыЗапросаJSON.to.number;
					ВнутреннийНомер = ПараметрыЗапросаJSON.from.extension;
					
					Если ЗначениеЗаполнено(НомерКонтакта) И ЗначениеЗаполнено(ВнутреннийНомер) И ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
						сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("Исходящий", "" + ИдентификаторЗвонка + "; Контакт: " + НомерКонтакта + "; Вн.номер: " + ВнутреннийНомер);
						
						ДатаСобытия = ПараметрыЗапросаJSON.timestamp;
						сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ДатаСобытия, ВнутреннийНомер,, НомерКонтакта, ИдентификаторЗвонка);
					КонецЕсли;	
					
				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("number") И ПараметрыЗапросаJSON.to.Свойство("extension")
					И НЕ ПараметрыЗапросаJSON.Свойство("command_id") Тогда

					НомерКонтакта = ПараметрыЗапросаJSON.from.number;
					ВнутреннийНомер = ПараметрыЗапросаJSON.to.extension;
					
					Если НЕ ПустаяСтрока(НомерКонтакта) И НЕ ПустаяСтрока(ВнутреннийНомер) И НЕ ПустаяСтрока(ИдентификаторЗвонка) Тогда
						сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("Входящий", "" + ИдентификаторЗвонка + "; Контакт: " + НомерКонтакта + "; Вн.номер: " + ВнутреннийНомер);
						
						ДатаСобытия = ПараметрыЗапросаJSON.timestamp;
						сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(НомерКонтакта, ВнутреннийНомер, ДатаСобытия, ИдентификаторЗвонка);
					КонецЕсли;
					
				Иначе
					// Пропускаем звонок
					сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("Пропуск", "" + ИдентификаторЗвонка);
				КонецЕсли;
				
			ИначеЕсли ПараметрыЗапросаJSON.call_state = "Connected" Тогда
				Пользователь = Неопределено;
				Если ПараметрыЗапросаJSON.to.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапросаJSON.to.extension;
				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапросаJSON.from.extension;
				КонецЕсли;

				Если ЗначениеЗаполнено(Пользователь) Тогда
					сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("Соединено", "" + ИдентификаторЗвонка + "; Пользователь: " + Пользователь);
					
					ДатаСобытия = ПараметрыЗапросаJSON.timestamp;
					сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ДатаСобытия, Пользователь);
				КонецЕсли;	
				
			ИначеЕсли ПараметрыЗапросаJSON.call_state = "OnHold" Тогда
				Пользователь = Неопределено;
				Если ПараметрыЗапросаJSON.to.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапросаJSON.to.extension;
				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапросаJSON.from.extension;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(Пользователь) Тогда
					сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("Удержание", "" + ИдентификаторЗвонка + "; Пользователь: " + Пользователь);
					
					сфпСофтФонПроСервер.ОбработатьУдержаниеЗвонка(ИдентификаторЗвонка, Пользователь);
				КонецЕсли;
				
			ИначеЕсли ПараметрыЗапросаJSON.call_state = "Disconnected" Тогда
				Пользователь = Неопределено;
				Если ПараметрыЗапросаJSON.to.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапросаJSON.to.extension;
				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапросаJSON.from.extension;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(Пользователь) Тогда
					сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("Завершено", "" + ИдентификаторЗвонка + "; Пользователь: " + Пользователь);
					
					ДатаСобытия = ПараметрыЗапросаJSON.timestamp;
					сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ДатаСобытия,,,,, ИдентификаторЗвонка,, Пользователь);
				КонецЕсли;	
			КонецЕсли;			
		КонецЕсли;
		
	Исключение
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;

КонецФункции

Функция mangoEventsRecordingPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/mango/events/recording";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии Манго отключено в настройках';en='Use of telephony Mango turned off in settings'"));
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьSign(ПараметрыТела) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверно указана подпись запроса sign=%1';en='Invalid query signature sign=%1'"), ПараметрыТела.sign));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON,,,,"ВосстановлениеJSON", сфпСофтФонПроСервер,, МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("recording_id");
	ОбязательныеПараметры.Добавить("recording_state");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапросаJSON.Свойство(ОбязательныйПараметр) Тогда
			Возврат СообщениеОбОшибке(
				Запрос.Заголовки,
				400,
				ИмяСобытияДляЖурналаРегистрации,
				сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательный параметр %1.';en='Missing required parameter %1.'"), ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;
	
	НеобходимоОбработатьУведомление =
		ВРег(ПараметрыЗапросаJSON.recording_state) = ВРег("Completed")
		И ПараметрыЗапросаJSON.completion_code = 1000; // 1000 - Действие успешно выполнено
		
	Если НЕ НеобходимоОбработатьУведомление Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		сфпСофтФонПроСервер.ОбработатьЗаписьЗвонка(ПараметрыЗапросаJSON.call_id, ПараметрыЗапросаJSON.recording_id);
	Исключение
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;

КонецФункции

Функция mttEventPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/mtt/event";
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела);
	
	Если НЕ КорректныйКлюч(ПараметрыТела.crm_token) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Некорректный ключ';en='Incorrect key'"));
	КонецЕсли;
	
	ОбязательныеПараметры = "cmd";
	Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела,ОбязательныеПараметры) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
	КонецЕсли;
	
	ТипОперации = ПараметрыТела.cmd;
	Ответ = Неопределено;
	
	Попытка
		
		Если ТипОперации = "contact" Тогда
			
			ОбязательныеПараметры = "phone";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Возврат СообщениеОбОшибке(
					Запрос.Заголовки,
					400,
					ИмяСобытияДляЖурналаРегистрации,
					сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
			КонецЕсли;
			
			ДанныеАбонента = сфпСофтФонПроСервер.ПолучитьДанныеКлиента(ПараметрыТела.phone);
			
			ЗаписьJSON = Неопределено;
			Если ДанныеАбонента <> Неопределено Тогда
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				ЗаписьJSON.ЗаписатьИмяСвойства("contact_name");
				ЗаписьJSON.ЗаписатьЗначение(ДанныеАбонента.Представление);
				
				Если ДанныеАбонента.Свойство("ВнутреннийНомерОтветственного") Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("responsible");
					ЗаписьJSON.ЗаписатьЗначение(ДанныеАбонента.ВнутреннийНомерОтветственного);
				КонецЕсли;
				
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				ПараметрыОтвета = ЗаписьJSON.Закрыть();
				
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Если ЗаписьJSON <> Неопределено Тогда
				Ответ.УстановитьТелоИзСтроки(ПараметрыОтвета);
			КонецЕсли;
			
		ИначеЕсли ТипОперации = "history" Тогда
			
			ОбязательныеПараметры = "callid";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Возврат СообщениеОбОшибке(
					Запрос.Заголовки,
					400,
					ИмяСобытияДляЖурналаРегистрации,
					сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
			КонецЕсли;
			
			сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(
				,,,,
				Число(ПараметрыТела.duration),,
				?(ПараметрыТела.Свойство("link"), ПараметрыТела.link, ""),,
				ПараметрыТела.callid,
				Ложь
			);
			
		ИначеЕсли ТипОперации = "event" Тогда
			
			ОбязательныеПараметры = "type,callid,phone,ext";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Возврат СообщениеОбОшибке(
					Запрос.Заголовки,
					400,
					ИмяСобытияДляЖурналаРегистрации,
					сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
			КонецЕсли;
			
			Если НРег(ПараметрыТела.type) = "incoming" Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				
				МенеджерЗаписи = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ИдентификаторЗвонка = ПараметрыТела.callid;
				МенеджерЗаписи.Прочитать();
				
				РегистрироватьЗвонок = Ложь;
				
				Если НЕ МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.ИдентификаторЗвонка = ПараметрыТела.callid;
					МенеджерЗаписи.Записать();
					
					РегистрироватьЗвонок = Истина;
					
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Ложь);
				
				сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(
					ПараметрыТела.phone,
					ПараметрыТела.ext,
					ТекущаяДатаСеанса(),
					ПараметрыТела.callid,
					РегистрироватьЗвонок
				);
			ИначеЕсли НРег(ПараметрыТела.type) = "outgoing" Тогда
				сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(
					ТекущаяДатаСеанса(),
					ПараметрыТела.ext,,
					ПараметрыТела.phone,
					ПараметрыТела.callid,
					ТекущаяДатаСеанса()
				);
			ИначеЕсли НРег(ПараметрыТела.type) = "accepted" Тогда
				сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(
					ПараметрыТела.callid,
					ТекущаяДатаСеанса(),
					ПараметрыТела.ext
				);
			ИначеЕсли НРег(ПараметрыТела.type) = "completed" Тогда
				сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(
					,,,,,
					Ложь,,,
					ПараметрыТела.callid,,
					ПараметрыТела.ext
				);
			ИначеЕсли НРег(ПараметрыТела.type) = "cancelled" Тогда
				сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(
					,,,,,
					Истина,,,
					ПараметрыТела.callid,,
					ПараметрыТела.ext
				);
			КонецЕсли;
			
		Иначе
			
			Возврат СообщениеОбОшибке(Запрос.Заголовки, 501, ИмяСобытияДляЖурналаРегистрации); // Not implemented
			
		КонецЕсли;
		
	Исключение
		
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если Ответ = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(200);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция webmoduleEventsCallPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/webmodule/events/call";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование облачной телефонии отключено в настройках';en='Use of cloud telephony is disabled in settings'"));
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьSign(ПараметрыТела) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверно указана подпись запроса sign=%1';en='Invalid query signature sign=%1'"), ПараметрыТела.sign));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON,,,, "ВосстановлениеJSON", сфпСофтФонПроСервер,, МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("entry_id");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("call_state");
	ОбязательныеПараметры.Добавить("location");
	ОбязательныеПараметры.Добавить("to");
	ОбязательныеПараметры.Добавить("from");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапросаJSON.Свойство(ОбязательныйПараметр) Тогда
			Возврат СообщениеОбОшибке(
				Запрос.Заголовки,
				400,
				ИмяСобытияДляЖурналаРегистрации,
				сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательный параметр %1.';en='Missing required parameter %1.'"), ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Если НРег(ПараметрыЗапросаJSON.location) = "abonent" Тогда
			ИдентификаторЗвонка = ПараметрыЗапросаJSON.call_id;
			ДатаСобытия = ПараметрыЗапросаJSON.timestamp;
			
			НомерЛинии = Неопределено;
			Если ПараметрыЗапросаJSON.Свойство("number_on_line") Тогда
				НомерЛинии = ПараметрыЗапросаJSON.number_on_line;
			КонецЕсли;
			
			Входящий = Неопределено;
			Если ПараметрыЗапросаJSON.Свойство("origin") Тогда
				Если ПараметрыЗапросаJSON.origin = 1 Тогда // Внутренний исходящий
					Входящий = Ложь;

				//ИначеЕсли ПараметрыЗапросаJSON.origin = 6 Тогда // Внешний исходящий
				//	Входящий = Ложь;

				Иначе
					Входящий = Истина;
				КонецЕсли;
			КонецЕсли;

			Если ПараметрыЗапросаJSON.call_state = "Appeared" Тогда
				Если ПараметрыЗапросаJSON.from.Свойство("extension") И ПараметрыЗапросаJSON.to.Свойство("number") Тогда
					Входящий = ?(Входящий = Неопределено, Ложь, Входящий);
					
				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("number") И НЕ ПараметрыЗапросаJSON.Свойство("command_id")
						  И (ПараметрыЗапросаJSON.to.Свойство("extension") ИЛИ ПараметрыЗапросаJSON.to.Свойство("number")) Тогда
					Входящий = ?(Входящий = Неопределено, Истина, Входящий);
				КонецЕсли;
				
			ИначеЕсли ПараметрыЗапросаJSON.call_state = "Connected" ИЛИ ПараметрыЗапросаJSON.call_state = "Disconnected" Тогда
				Если ПараметрыЗапросаJSON.to.Свойство("extension") Тогда
					НомерЛинии = ?(ЗначениеЗаполнено(НомерЛинии), НомерЛинии, ПараметрыЗапросаJSON.to.extension);
					Входящий = ?(Входящий = Неопределено, Истина, Входящий);

				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("extension") Тогда
					НомерЛинии = ?(ЗначениеЗаполнено(НомерЛинии), НомерЛинии, ПараметрыЗапросаJSON.from.extension);
					Входящий = ?(Входящий = Неопределено, Ложь, Входящий);
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(НомерЛинии) И Входящий <> Неопределено Тогда
				НомерКонтакта = "";
				Если Входящий И ПараметрыЗапросаJSON.from.Свойство("number") Тогда
					// Входящий звонок
					НомерКонтакта = ПараметрыЗапросаJSON.from.number;
					
				ИначеЕсли НЕ Входящий И ПараметрыЗапросаJSON.to.Свойство("number") Тогда
					// Исходящий звонок
					НомерКонтакта = ПараметрыЗапросаJSON.to.number;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НомерКонтакта) Тогда
					Если Лев(НомерКонтакта, 1) = "+" Тогда
						НомерКонтакта = Сред(НомерКонтакта, 2);
					КонецЕсли;

					Если ПараметрыЗапросаJSON.call_state = "Appeared" Тогда
						Если Входящий Тогда
							ПараметрыПереадресации = сфпСофтФонПроСервер.сфпПараметрыПереадресации(НомерКонтакта);
							Попытка    ВнутреннийНомер = ПараметрыПереадресации.ВнутреннийНомер;
							Исключение ВнутреннийНомер = "";
							КонецПопытки;
							
							Если ЗначениеЗаполнено(ВнутреннийНомер) И НомерЛинии <> ВнутреннийНомер Тогда
								РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, ВнутреннийНомер, ВнутреннийНомер, Ложь);
								
							Иначе
								МенеджерЗаписи = РегистрыСведений.сфпТекущиеЗвонки.СоздатьМенеджерЗаписи();
								МенеджерЗаписи.ИдентификаторЗвонка = ИдентификаторЗвонка;
								
								Попытка
									МенеджерЗаписи.Записать(Ложь);
									
									сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(НомерКонтакта, НомерЛинии, ДатаСобытия, ИдентификаторЗвонка);
								Исключение КонецПопытки;
							КонецЕсли;
							
						Иначе
							//сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ДатаСобытия, НомерЛинии,, НомерКонтакта, ИдентификаторЗвонка);
						КонецЕсли;

					ИначеЕсли ПараметрыЗапросаJSON.call_state = "Connected" Тогда
						Если Входящий Тогда
							ПараметрыПереадресации = сфпСофтФонПроСервер.сфпПараметрыПереадресации(НомерКонтакта);
							Попытка    ВнутреннийНомер = ПараметрыПереадресации.ВнутреннийНомер;
							Исключение ВнутреннийНомер = "";
							КонецПопытки;
							
							Если ЗначениеЗаполнено(ВнутреннийНомер) И НомерЛинии <> ВнутреннийНомер Тогда
								РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, ВнутреннийНомер, ВнутреннийНомер, Ложь);
								
							Иначе
								сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ДатаСобытия, НомерЛинии, Входящий, НомерКонтакта);
							КонецЕсли;
							
						Иначе
							сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ДатаСобытия, НомерЛинии, Входящий, НомерКонтакта);
						КонецЕсли;

					ИначеЕсли ПараметрыЗапросаJSON.call_state = "Disconnected" Тогда
						сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ДатаСобытия,,,,, ИдентификаторЗвонка,, НомерЛинии);
						
						НаборЗаписей = РегистрыСведений.сфпТекущиеЗвонки.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.ИдентификаторЗвонка.Установить(ИдентификаторЗвонка);
						НаборЗаписей.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Исключение
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;

КонецФункции

Функция webmoduleEventsRecordingPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/webmodule/events/recording";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии Манго отключено в настройках';en='Use of telephony Mango turned off in settings'"));
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьSign(ПараметрыТела) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверно указана подпись запроса sign=%1';en='Invalid query signature sign=%1'"), ПараметрыТела.sign));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON,,,,"ВосстановлениеJSON", сфпСофтФонПроСервер,, МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("recording_id");
	ОбязательныеПараметры.Добавить("recording_state");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапросаJSON.Свойство(ОбязательныйПараметр) Тогда
			Возврат СообщениеОбОшибке(
				Запрос.Заголовки,
				400,
				ИмяСобытияДляЖурналаРегистрации,
				сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательный параметр %1.';en='Missing required parameter %1.'"), ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;
	
	//НеобходимоОбработатьУведомление =
	//	ВРег(ПараметрыЗапросаJSON.recording_state) = ВРег("Completed")
	//	И ПараметрыЗапросаJSON.completion_code = 1000; // 1000 - Действие успешно выполнено
	//
	//Если НЕ НеобходимоОбработатьУведомление Тогда
	//	Ответ = Новый HTTPСервисОтвет(200);
	//	Возврат Ответ;
	//КонецЕсли;
	
	Попытка
		сфпСофтФонПроСервер.ОбработатьЗаписьЗвонка(ПараметрыЗапросаJSON.call_id, ПараметрыЗапросаJSON.recording_id);
	Исключение
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;

КонецФункции

Функция yandexEventPOST(Запрос)
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	Если НЕ ЗначениеЗаполнено(ТелоЗапроса) Тогда // Проверочный запрос при первом подключении webhook в личном кабинете.
		Возврат НовыйHTTPСервисОтвет(Запрос.Заголовки, 200);
	КонецЕсли;
	
	ИмяСобытияДляЖурналаРегистрации = "/yandex/event";
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON,, "Timestamp", ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();
	
	Если НЕ КорректныйКлюч(ПараметрыЗапроса.ApiKey, "КлючДляАвторизацииАТСЯндекс") Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Некорректный ApiKey';en='Invalid ApiKey'")));
	КонецЕсли;
	
	ОбязательныеПараметры = "EventType";
	Если НЕ ЕстьОбязательныеПараметры(ПараметрыЗапроса, ОбязательныеПараметры) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательные параметры: %1';en='Missing required parameters: %1'"), ОбязательныеПараметры));
	КонецЕсли;
	
	ТипСобытия = ПараметрыЗапроса.EventType;
	
	Попытка
		// Появление нового входящего звонка со внешнего номера {From} на бизнес номер {To}
		Если ТипСобытия = "IncomingCall" Тогда
					
		// Начало дозвона до пользователя с указанным добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "IncomingCallRinging" Тогда
			сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации + ": " + ТипСобытия, "From: " + ПараметрыЗапроса.Body.From + "; Extension: " + ПараметрыЗапроса.Body.Extension + "; id: " + ПараметрыЗапроса.Body.Id);
		
			сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(ПараметрыЗапроса.Body.From, ПараметрыЗапроса.Body.Extension, ПараметрыЗапроса.Timestamp, ПараметрыЗапроса.Body.Id);
			
		// Неуспешная попытка дозвона до пользователя с добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "IncomingCallStopRinging" Тогда 
			
		// Успешное соединение с пользователем с добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "IncomingCallConnected" Тогда
			сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации + ": " + ТипСобытия, "Extension: " + ПараметрыЗапроса.Body.Extension + "; id: " + ПараметрыЗапроса.Body.Id);
		
			сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ПараметрыЗапроса.Body.Id, ПараметрыЗапроса.Timestamp, ПараметрыЗапроса.Body.Extension);
			
		// Завершение входящего звонка
		ИначеЕсли ТипСобытия = "IncomingCallCompleted" Тогда
			сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации + ": " + ТипСобытия, "id: " + ПараметрыЗапроса.Body.Id);
			
			сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ПараметрыЗапроса.Timestamp,,,, Истина, ПараметрыЗапроса.Body.Id);
			
		// Начало исходящего звонка с бизнес номера {From} на внешний номер {To} пользователем с добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "OutgoingCall" Тогда
			сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации + ": " + ТипСобытия, "Extension: " + ПараметрыЗапроса.Body.Extension + "; To: " + ПараметрыЗапроса.Body.To + "; id: " + ПараметрыЗапроса.Body.Id);
			
			сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ПараметрыЗапроса.Timestamp, ПараметрыЗапроса.Body.Extension,, ПараметрыЗапроса.Body.To, ПараметрыЗапроса.Body.Id);
			
		// Начало разговора при исходящем звонке
		ИначеЕсли ТипСобытия = "OutgoingCallConnected" Тогда
			сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации + ": " + ТипСобытия, "Extension: " + ПараметрыЗапроса.Body.Extension + "; id: " + ПараметрыЗапроса.Body.Id);
			
			сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ПараметрыЗапроса.Body.Id, ПараметрыЗапроса.Timestamp, ПараметрыЗапроса.Body.Extension);

		// Завершение исходящего звонка
		ИначеЕсли ТипСобытия = "OutgoingCallCompleted" Тогда
			сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации + ": " + ТипСобытия, "id: " + ПараметрыЗапроса.Body.Id);
			
			сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ПараметрыЗапроса.Timestamp,,,, Истина, ПараметрыЗапроса.Body.Id);
			
		// Появление заявки на обратный звонок с бизнес номера {From} на внешний номер {To}
		ИначеЕсли ТипСобытия = "CallbackCall" Тогда
			
		// Начало дозвона до пользователя с указанным добавочным номером {Extension} при обратном звонке
		ИначеЕсли ТипСобытия = "CallbackCallRinging" Тогда
			
		// Неуспешная попытка дозвона до пользователя с добавочным номером {Extension} при обратном звонке
		ИначеЕсли ТипСобытия = "CallbackCallStopRinging" Тогда
			
		// Пользователь с добавочным номером {Extension} соединился с номером {To} при обратном звонке
		ИначеЕсли ТипСобытия = "CallbackCallConnected" Тогда
			
		// Завершение обратного звонка
		ИначеЕсли ТипСобытия = "CallbackCallCompleted" Тогда
			
		КонецЕсли;
		
	Исключение
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат НовыйHTTPСервисОтвет(Запрос.Заголовки, 200);

КонецФункции

Функция uisEventPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/uis/event";
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Оповещение = ПараметрыЗапроса.notification_name;
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, "Оповещение: " + Оповещение);
	
	ДатаЗвонка = ПараметрыЗапроса.notification_time;
	
	ДатаСобытия = ТекущаяДатаСеанса();
	
	//Если Оповещение = "Ожидание ответа" Тогда
	Если Оповещение = "Исходящее плечо" Тогда
		Направление = ПараметрыЗапроса.direction;
		Если Направление = "in" Тогда
			Телефон = ПараметрыЗапроса.contact_info.contact_phone_number;
			ВнутреннийНомер = ПараметрыЗапроса.extension_phone_number;
			ИдентификаторПользователя = ПараметрыЗапроса.employee_info.employee_id;
			ИдентификаторЗвонка = ПараметрыЗапроса.call_session_id;
			
			//Если ЗначениеЗаполнено(ИдентификаторПользователя) И ИдентификаторПользователя <> Null Тогда
			//	ВнутреннийНомер = ПолучитьВнутреннийНомерПоЛогину(ИдентификаторПользователя);
				Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
					сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(Телефон, ВнутреннийНомер, ДатаСобытия, ИдентификаторЗвонка);
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Оповещение = "Входящее плечо" Тогда
		Направление = ПараметрыЗапроса.direction;
		Если Направление = "out" Тогда
			Телефон = ПараметрыЗапроса.contact_info.contact_phone_number;
			ВнутреннийНомер = ПараметрыЗапроса.extension_phone_number;
			ИдентификаторПользователя = ПараметрыЗапроса.employee_info.employee_id;
			ИдентификаторЗвонка = ПараметрыЗапроса.call_session_id;
			
			//Если ЗначениеЗаполнено(ИдентификаторПользователя) И ИдентификаторПользователя <> Null Тогда
			//	ВнутреннийНомер = ПолучитьВнутреннийНомерПоЛогину(ИдентификаторПользователя);
				Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
					сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ДатаСобытия, ВнутреннийНомер,, Телефон, ИдентификаторЗвонка);
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;	

	ИначеЕсли Оповещение = "Начало разговора" Тогда
		Направление = ПараметрыЗапроса.direction;
		Телефон = ПараметрыЗапроса.contact_info.contact_phone_number;
		ИдентификаторПользователя = ПараметрыЗапроса.employee_info.employee_id;
		ИдентификаторЗвонка = ПараметрыЗапроса.call_session_id;
		
		Если ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
			ВнутреннийНомер = ПолучитьВнутреннийНомерПоЛогину(ИдентификаторПользователя);
			Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
				сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ДатаСобытия, ВнутреннийНомер);
			КонецЕсли;
		КонецЕсли;
		
	//ИначеЕсли Оповещение = "Завершение звонка" Тогда
	ИначеЕсли Оповещение = "Завершение плеча" Тогда
		Направление = ПараметрыЗапроса.direction;
		Телефон = ПараметрыЗапроса.contact_info.contact_phone_number;
		ВнутреннийНомер = ПараметрыЗапроса.extension_phone_number;
		ИдентификаторПользователя = ПараметрыЗапроса.employee_info.employee_id;
		ИдентификаторЗвонка = ПараметрыЗапроса.call_session_id;	

		//Если ЗначениеЗаполнено(ИдентификаторПользователя) И ИдентификаторПользователя <> Null Тогда
		//	ВнутреннийНомер = ПолучитьВнутреннийНомерПоЛогину(ИдентификаторПользователя);
			Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
				сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ДатаСобытия,, Ложь,,, ИдентификаторЗвонка,, ВнутреннийНомер);
			КонецЕсли;
		//КонецЕсли;

	ИначеЕсли Оповещение = "Записанный разговор" Тогда
		Направление = ПараметрыЗапроса.direction;
		Телефон = ПараметрыЗапроса.contact_info.contact_phone_number;
		ИдентификаторПользователя = ПараметрыЗапроса.employee_info.employee_id;
		ИдентификаторЗвонка = ПараметрыЗапроса.call_session_id;
		ИдентификаторЗаписи = ПараметрыЗапроса.call_record_file_info.file_link;
		
		Если ЗначениеЗаполнено(ИдентификаторЗаписи) Тогда
			сфпСофтФонПроСервер.ОбработатьЗаписьЗвонка(ИдентификаторЗвонка, ИдентификаторЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;

КонецФункции

Функция rtEventPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/rt/call_events";
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ПодписьЗапросаЗаголовок = "X-Client-Sign";
	ПодписьЗапроса = Запрос.Заголовки.Получить(ПодписьЗапросаЗаголовок);
	Если ПодписьЗапроса = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='В заголовках не передана подпись ""%1""'"), ПодписьЗапросаЗаголовок);
		Возврат СообщениеОбОшибке(Запрос.Заголовки, 400, ИмяСобытияДляЖурналаРегистрации, ТекстОшибки);
	КонецЕсли;
	
	ПараметрыПодписи = Новый Структура("json,sign", ТелоЗапроса, ПодписьЗапроса);
			
	Если НЕ ПроверитьSign(ПараметрыПодписи) Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверно указана подпись запроса sign=%1';en='Invalid query signature sign=%1'"), ПодписьЗапроса));
	КонецЕсли;
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("session_id");
	ОбязательныеПараметры.Добавить("timestamp");
	ОбязательныеПараметры.Добавить("type");
	ОбязательныеПараметры.Добавить("state");
	ОбязательныеПараметры.Добавить("from_number");
	ОбязательныеПараметры.Добавить("request_number");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапроса.Свойство(ОбязательныйПараметр) Тогда
			Возврат СообщениеОбОшибке(
				Запрос.Заголовки,
				400,
				ИмяСобытияДляЖурналаРегистрации,
				сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательный параметр %1.';en='Missing required parameter %1.'"), ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;

	Попытка
		ИдентификаторЗвонка = ПараметрыЗапроса.session_id;
		
		ДатаСобытия = ТекущаяДата();
		Если ПараметрыЗапроса.Свойство("timestamp") Тогда
			ДатаСобытия = СтрЗаменить(ПараметрыЗапроса.timestamp, " ", "T");
			ДатаСобытия = ПрочитатьДатуJSON(ДатаСобытия, ФорматДатыJSON.ISO);
		КонецЕсли;	
		
		ТипУведомления = НРег(ПараметрыЗапроса.state);
		Если ТипУведомления = "new" Тогда
			Если ПараметрыЗапроса.type = "incoming" Тогда
				НомерКонтакта = НомерТелефонаИзСтрокиSipURI(ПараметрыЗапроса.from_number);
				ВнутреннийНомер = ПараметрыЗапроса.request_pin;
								
				сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(НомерКонтакта, ВнутреннийНомер, ДатаСобытия, ИдентификаторЗвонка);
				
			Иначе
				НомерКонтакта = НомерТелефонаИзСтрокиSipURI(ПараметрыЗапроса.request_number);
				ВнутреннийНомер = ПараметрыЗапроса.from_pin;
				
				сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ДатаСобытия, ВнутреннийНомер,, НомерКонтакта, ИдентификаторЗвонка);
			КонецЕсли;
			
		ИначеЕсли ТипУведомления = "connected" Тогда
			Если ПараметрыЗапроса.type = "incoming" Тогда
				  ВнутреннийНомер = ПараметрыЗапроса.request_pin;
			Иначе ВнутреннийНомер = ПараметрыЗапроса.from_pin;
			КонецЕсли;

			сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ДатаСобытия, ВнутреннийНомер);

		ИначеЕсли ТипУведомления = "end" Тогда
			Если ПараметрыЗапроса.type = "incoming" Тогда
				  ВнутреннийНомер = ПараметрыЗапроса.request_pin;
			Иначе ВнутреннийНомер = ПараметрыЗапроса.from_pin;
			КонецЕсли;
			
			ИдентификаторЗаписи = "";
			Если ПараметрыЗапроса.Свойство("is_record") Тогда
				Если ВРЕГ(ПараметрыЗапроса.is_record) = "TRUE" Тогда
					ИдентификаторЗаписи = ИдентификаторЗвонка;
				КонецЕсли;	
			КонецЕсли;
			
			сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ДатаСобытия,, Ложь, ИдентификаторЗаписи,, ИдентификаторЗвонка,, ВнутреннийНомер);
		КонецЕсли;
		
	Исключение
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат НовыйHTTPСервисОтвет(Запрос.Заголовки, 200);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ =Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				ЗначениеПараметра = сфпОбщегоНазначенияКлиентСервер.сфпСократитьДвойныеКавычки(ЗначениеПараметра);
				Попытка
					Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
				Исключение
				КонецПопытки;
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция КорректныйКлюч(ПолученныйКлюч, НаименованиеКлюча = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючДляАвторизации = "";
	
	Настройки = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	Если ЗначениеЗаполнено(НаименованиеКлюча) и Настройки.Свойство(НаименованиеКлюча) Тогда
		КлючДляАвторизации = Настройки[НаименованиеКлюча];
	Иначе
		КлючДляАвторизации = Настройки.КлючДляАвторизацииВИБ;
	КонецЕсли;
	
	Возврат ПолученныйКлюч = КлючДляАвторизации;
	
КонецФункции

Функция ПроверитьSign(ПараметрыТела)
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	РассчитанныйSign = сфпСофтФонПроСервер.ПолучитьSign(НастройкиТелефонии.vpbx_api_key, ПараметрыТела.json, НастройкиТелефонии.vpbx_api_salt);
	
	Возврат РассчитанныйSign = ПараметрыТела.sign;
	
КонецФункции

Функция ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры)
	
	МассивПараметров = сфпОбщегоНазначенияКлиентСервер.сфпРазложитьСтрокуВМассивПодстрок(ОбязательныеПараметры);
	
	Для Каждого ОбязательныйПараметр Из МассивПараметров Цикл
		Если НЕ ПараметрыТела.Свойство(ОбязательныйПараметр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СообщениеОбОшибке(ЗаголовкиВходящегоЗапроса, КодСостояния, ВложенноеИмяСобытия, Комментарий = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		сфпСофтФонПроСерверПереопределяемый.СобытиеЖурналаРегистрации() + "." + ВложенноеИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,,,
		Комментарий);
	
	Возврат НовыйHTTPСервисОтвет(ЗаголовкиВходящегоЗапроса, КодСостояния);
	
КонецФункции

Функция НовыйHTTPСервисОтвет(ЗаголовкиВходящегоЗапроса, КодСостояния)
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	
	ПодписьКлюч = "Echo";
	ПодписьЗначение = ЗаголовкиВходящегоЗапроса.Получить(ПодписьКлюч);
	Если ПодписьЗначение <> Неопределено Тогда
		Ответ.Заголовки.Вставить(ПодписьКлюч, ПодписьЗначение);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьВнутреннийНомерПоЛогину(Логин)
	
	ЗапросНомера = Новый Запрос("
	|ВЫБРАТЬ ВнутреннийНомерАТС КАК ВнутреннийНомер
	|ИЗ РегистрСведений.сфпКонтактыТелефонии
	|ГДЕ ЛогинАТС = &Логин");
	ЗапросНомера.УстановитьПараметр("Логин", Логин);
	Выборка = ЗапросНомера.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВнутреннийНомер;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	

Функция НомерТелефонаИзСтрокиSipURI(Знач НомерТелефона)
	
	Если НЕ СтрНачинаетсяС(НомерТелефона, "sip:") Тогда
		Возврат НомерТелефона;
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "sip:", "");
	НомерТелефона = Лев(НомерТелефона, СтрНайти(НомерТелефона, "@") - 1);
	
	Возврат НомерТелефона;

КонецФункции

Функция calltrackingWebhookGET(Запрос)
	calltrackingWebhook(Запрос);
КонецФункции

Функция calltrackingWebhookPOST(Запрос)
	calltrackingWebhook(Запрос);
КонецФункции

Функция calltrackingWebhook(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/calltracking";
	
	ТекстОписание = "";
	ПараметрыСтрокой = "";
	Для Каждого ТекПараметр Из Запрос.ПараметрыЗапроса Цикл
		ПараметрыСтрокой = ПараметрыСтрокой + "&" + ТекПараметр.Ключ + "=" + ТекПараметр.Значение;
		ТекстОписание = ТекстОписание + ?(ТекстОписание = "", "", Символы.ПС) + ТекПараметр.Ключ + ": " + ТекПараметр.Значение;
	КонецЦикла;
	Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
		сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыСтрокой);
	КонецЕсли;	
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	КонецЕсли;	
	
	Если НЕ ПолучитьФункциональнуюОпцию("сфпИспользоватьCoMagic") Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование коллтрекинга отключено в настройках'"));
	КонецЕсли;
	
	НомерТелефона = "";
	URL = "";
	utmSource = "";
	utmMedium = "";
	utmCampaign = "";
	utmContent = "";
	utmTerm = "";
	
	Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Попытка
			// Коллтрекинг Манго
			НомерТелефона = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "callerNumber");	// Номер звонившего
			URL = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "url");						// Адрес страницы сайта, с которой был совершён звонок
			utmSource = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmSource");			// Источник
			utmMedium = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmMedium");			// Канал
			utmCampaign = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmCampaign");		// Кампания
			utmContent = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmContent");		// Содержание объявления
			utmTerm = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmTerm");				// Ключевое слово
			
			//callId = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "callId");				// ID звонка
			//uid = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "uid");					// Уникальный идентификатор клиента MANGO OFFICE
			//yaCid = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "yaCid");				// Идентификатор клиента Яндекс Метрики
			//gaCid = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "gaCid");				// Идентификатор клиента Google Analytics
			//rsCid = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "rsCid");				// Идентификатор сеанса (визита), используемый в Roistat
			//dateStart = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "dateStart");		// Время поступления звонка
			//callType = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "callType");			// Тип звонка
			//number = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "number");				// Номер, на который был принят звонок
			//countryCode = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "countryCode");	// Код ISO страны
			//regionCode = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "regionCode");		// Код ISO региона
			//city = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "city");					// Название города
			//device = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "device");				// Тип устройства: desktop, tablet или mobile
			//ip = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "ip");						// IP адрес пользователя
			//firstUrl = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "firstUrl");			// Адрес страницы входа пользователя на сайт
			//customParam = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "customParam");	// Дополнительные параметры (не более 4000 символов)
			
			Оператор = Перечисления.сфпОператорыКоллтрекинга.Mango;
		Исключение КонецПопытки;
	КонецЕсли;

	//Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
	//	Попытка
	//		// Коллтрекинг Ройстат
	//		НомерТелефона = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "callerNumber");	// Номер звонившего
	//		URL = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "url");						// Адрес страницы сайта, с которой был совершён звонок
	//		utmSource = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmSource");			// Источник
	//		utmMedium = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmMedium");			// Канал
	//		utmCampaign = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmCampaign");		// Кампания
	//		utmContent = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmContent");		// Содержание объявления
	//		utmTerm = ПолучитьПараметрЗапроса(Запрос.ПараметрыЗапроса, "utmTerm");				// Ключевое слово
	//		
	//		Оператор = Перечисления.CRM_CallTrakingСценарии.Roistat;
	//	Исключение КонецПопытки;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерТелефона) И ЗначениеЗаполнено(ТекстОписание) Тогда
		УстановитьПривилегированныйРежим(Истина);
	
		МенеджерЗаписи = РегистрыСведений.сфпДанныеКоллтрекинга.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НомерТелефона = Прав(НомерТелефона, 10);
		МенеджерЗаписи.ДатаЗвонка = ТекущаяДата();
		МенеджерЗаписи.Идентификатор = "";
		МенеджерЗаписи.Сайт = URL;
		МенеджерЗаписи.utm_source = utmSource;
		МенеджерЗаписи.utm_medium = utmMedium;
		МенеджерЗаписи.utm_campaign = utmCampaign;
		МенеджерЗаписи.utm_term	= utmTerm;
		МенеджерЗаписи.utm_content = utmContent;
		МенеджерЗаписи.Данные = ТекстОписание;
		МенеджерЗаписи.Записать();
		
		// Удалим записи старше 1 часа.
		Запрос = Новый Запрос("
		|ВЫБРАТЬ НомерТелефона
		|ИЗ РегистрСведений.сфпДанныеКоллтрекинга
		|ГДЕ ДатаЗвонка < &ДатаПроверки");
		Запрос.УстановитьПараметр("ДатаПроверки", (МенеджерЗаписи.ДатаЗвонка - 3600));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.сфпДанныеКоллтрекинга.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НомерТелефона = Выборка.НомерТелефона;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;

КонецФункции

Функция ПолучитьПараметрЗапроса(ПараметрыЗапроса, ИмяПараметра)
	
	Возврат "" + ПараметрыЗапроса.Получить(ИмяПараметра);
	
КонецФункции

#КонецОбласти
