
#Область ОбработчикиМетодовHTTP

Функция EventsCallPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/events/call";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование облачной телефонии отключено в настройках';en='Use of cloud telephony is disabled in settings'"));
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьSign(ПараметрыТела) Тогда
		Возврат СообщениеОбОшибке(
		    Запрос.Заголовки,
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверно указана подпись запроса sign=%1';en='Invalid query signature sign=%1'"), ПараметрыТела.sign));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON,,,,"ВосстановлениеJSON", сфпСофтФонПроСервер,,МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("entry_id");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("call_state");
	ОбязательныеПараметры.Добавить("location");
	ОбязательныеПараметры.Добавить("to");
	ОбязательныеПараметры.Добавить("from");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапросаJSON.Свойство(ОбязательныйПараметр) Тогда
			Возврат СообщениеОбОшибке(
			    Запрос.Заголовки,
				400,
				ИмяСобытияДляЖурналаРегистрации,
				сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательный параметр %1.';en='Missing required parameter %1.'"), ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Если НРег(ПараметрыЗапросаJSON.location) = "abonent" Тогда
			ИдентификаторЗвонка = ПараметрыЗапросаJSON.call_id;
			ДатаСобытия = ПараметрыЗапросаJSON.timestamp;
			
			НомерЛинии = Неопределено;
			Если ПараметрыЗапросаJSON.Свойство("number_on_line") Тогда
				НомерЛинии = ПараметрыЗапросаJSON.number_on_line;
			КонецЕсли;
			
			Входящий = Неопределено;
			Если ПараметрыЗапросаJSON.Свойство("origin") Тогда
				Если ПараметрыЗапросаJSON.origin = 1 Тогда // Внутренний исходящий
					Входящий = Ложь;

				//ИначеЕсли ПараметрыЗапросаJSON.origin = 6 Тогда // Внешний исходящий
				//	Входящий = Ложь;

				Иначе
					Входящий = Истина;
				КонецЕсли;
			КонецЕсли;

			Если ПараметрыЗапросаJSON.call_state = "Appeared" Тогда
				Если ПараметрыЗапросаJSON.from.Свойство("extension") И ПараметрыЗапросаJSON.to.Свойство("number") Тогда
					Входящий = ?(Входящий = Неопределено, Ложь, Входящий);
					
				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("number") И НЕ ПараметрыЗапросаJSON.Свойство("command_id")
						  И (ПараметрыЗапросаJSON.to.Свойство("extension") ИЛИ ПараметрыЗапросаJSON.to.Свойство("number")) Тогда
					Входящий = ?(Входящий = Неопределено, Истина, Входящий);
				КонецЕсли;
				
			ИначеЕсли ПараметрыЗапросаJSON.call_state = "Connected" ИЛИ ПараметрыЗапросаJSON.call_state = "Disconnected" Тогда
				Если ПараметрыЗапросаJSON.to.Свойство("extension") Тогда
					НомерЛинии = ?(ЗначениеЗаполнено(НомерЛинии), НомерЛинии, ПараметрыЗапросаJSON.to.extension);
					Входящий = ?(Входящий = Неопределено, Истина, Входящий);

				ИначеЕсли ПараметрыЗапросаJSON.from.Свойство("extension") Тогда
					НомерЛинии = ?(ЗначениеЗаполнено(НомерЛинии), НомерЛинии, ПараметрыЗапросаJSON.from.extension);
					Входящий = ?(Входящий = Неопределено, Ложь, Входящий);
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(НомерЛинии) И Входящий <> Неопределено Тогда
				НомерКонтакта = "";
				Если Входящий И ПараметрыЗапросаJSON.from.Свойство("number") Тогда
					// Входящий звонок
					НомерКонтакта = ПараметрыЗапросаJSON.from.number;
					
				ИначеЕсли НЕ Входящий И ПараметрыЗапросаJSON.to.Свойство("number") Тогда
					// Исходящий звонок
					НомерКонтакта = ПараметрыЗапросаJSON.to.number;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НомерКонтакта) Тогда
					Если Лев(НомерКонтакта, 1) = "+" Тогда
						НомерКонтакта = Сред(НомерКонтакта, 2);
					КонецЕсли;
					
					Если ПараметрыЗапросаJSON.call_state = "Appeared" Тогда
						Если Входящий Тогда
							ПараметрыПереадресации = сфпСофтФонПроСервер.сфпПараметрыПереадресации(НомерКонтакта);
							Попытка    ВнутреннийНомер = ПараметрыПереадресации.ВнутреннийНомер;
							Исключение ВнутреннийНомер = "";
							КонецПопытки;
							
							Если ЗначениеЗаполнено(ВнутреннийНомер) И НомерЛинии <> ВнутреннийНомер Тогда
								РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, ВнутреннийНомер, ВнутреннийНомер, Ложь);
								
							Иначе
								сфпСофтФонПроСервер.ОбработатьВходящийЗвонок(НомерКонтакта, НомерЛинии, ДатаСобытия, ИдентификаторЗвонка);
							КонецЕсли;
						Иначе
							сфпСофтФонПроСервер.ОбработатьИсходящийЗвонок(ДатаСобытия, НомерЛинии,, НомерКонтакта, ИдентификаторЗвонка);
						КонецЕсли;

					ИначеЕсли ПараметрыЗапросаJSON.call_state = "Connected" Тогда
						Если Входящий Тогда
							ПараметрыПереадресации = сфпСофтФонПроСервер.сфпПараметрыПереадресации(НомерКонтакта);
							Попытка    ВнутреннийНомер = ПараметрыПереадресации.ВнутреннийНомер;
							Исключение ВнутреннийНомер = "";
							КонецПопытки;
							
							Если ЗначениеЗаполнено(ВнутреннийНомер) И НомерЛинии <> ВнутреннийНомер Тогда
								РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, ВнутреннийНомер, ВнутреннийНомер, Ложь);
								
							Иначе
								сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ДатаСобытия, НомерЛинии, Входящий, НомерКонтакта);
							КонецЕсли;
							
						Иначе
							сфпСофтФонПроСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонка, ДатаСобытия, НомерЛинии, Входящий, НомерКонтакта);
						КонецЕсли;

					ИначеЕсли ПараметрыЗапросаJSON.call_state = "Disconnected" Тогда
						сфпСофтФонПроСервер.ОбработатьЗавершениеЗвонка(,,, ДатаСобытия,,,,, ИдентификаторЗвонка,, НомерЛинии);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Исключение
		Возврат СообщениеОбОшибке(
			Запрос.Заголовки,
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
	
КонецФункции

Функция EventsRecordingPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/events/recording";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии Манго отключено в настройках';en='Use of telephony Mango turned off in settings'"));
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьSign(ПараметрыТела) Тогда
		Возврат СообщениеОбОшибке(
			400,
			ИмяСобытияДляЖурналаРегистрации,
			сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверно указана подпись запроса sign=%1';en='Invalid query signature sign=%1'"), ПараметрыТела.sign));
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON,,,,"ВосстановлениеJSON", сфпСофтФонПроСервер,, МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("recording_id");
	ОбязательныеПараметры.Добавить("recording_state");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапросаJSON.Свойство(ОбязательныйПараметр) Тогда
			Возврат СообщениеОбОшибке(
				400,
				ИмяСобытияДляЖурналаРегистрации,
				сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отсутствует обязательный параметр %1.';en='Missing required parameter %1.'"), ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;
	
	//НеобходимоОбработатьУведомление =
	//	ВРег(ПараметрыЗапросаJSON.recording_state) = ВРег("Completed")
	//	И ПараметрыЗапросаJSON.completion_code = 1000; // 1000 - Действие успешно выполнено
	//
	//Если НЕ НеобходимоОбработатьУведомление Тогда
	//	Ответ = Новый HTTPСервисОтвет(200);
	//	Возврат Ответ;
	//КонецЕсли;
	
	Попытка
		сфпСофтФонПроСервер.ОбработатьЗаписьЗвонка(ПараметрыЗапросаJSON.call_id, ПараметрыЗапросаJSON.recording_id);
	Исключение
		Возврат СообщениеОбОшибке(500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
	
КонецФункции

Функция ResultCallbackPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/result/callback";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии отключено в настройках';en='Use of telephony is disabled in settings'"));
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(501); // Not implemented
	Возврат Ответ;
	
КонецФункции

Функция ResultRoutePOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/result/route";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии отключено в настройках';en='Use of telephony is disabled in settings'"));
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(501); // Not implemented
	Возврат Ответ;
	
КонецФункции

Функция ResultStatsPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/result/stats";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии отключено в настройках';en='Use of telephony is disabled in settings'"));
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(501); // Not implemented
	Возврат Ответ;
	
КонецФункции

Функция ResultCallHangUpPOST(Запрос)
	
	ИмяСобытияДляЖурналаРегистрации = "/result/call/hangup";
		
	Если Не ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") Тогда
		Возврат СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии отключено в настройках';en='Use of telephony is disabled in settings'"));
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	сфпСофтФонПроСерверПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
	
КонецФункции

Функция pingGET(Запрос)

	ИмяСобытияДляЖурналаРегистрации = "/ping";

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("ok");
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ =Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = Найти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				ЗначениеПараметра = сфпОбщегоНазначенияКлиентСервер.сфпСократитьДвойныеКавычки(ЗначениеПараметра);
				Попытка
					Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
				Исключение
				КонецПопытки;
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СообщениеОбОшибке(ЗаголовкиВходящегоЗапроса, КодСостояния, ВложенноеИмяСобытия, Комментарий = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		сфпСофтФонПроСерверПереопределяемый.СобытиеЖурналаРегистрации() + "." + ВложенноеИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,,,
		Комментарий);
	
	Возврат НовыйHTTPСервисОтвет(ЗаголовкиВходящегоЗапроса, КодСостояния);
	
КонецФункции

Функция НовыйHTTPСервисОтвет(ЗаголовкиВходящегоЗапроса, КодСостояния)
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	
	ПодписьКлюч = "Echo";
	ПодписьЗначение = ЗаголовкиВходящегоЗапроса.Получить(ПодписьКлюч);
	Если ПодписьЗначение <> Неопределено Тогда
		Ответ.Заголовки.Вставить(ПодписьКлюч, ПодписьЗначение);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПроверитьSign(ПараметрыТела)
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	РассчитанныйSign = сфпСофтФонПроСервер.ПолучитьSign(
		НастройкиТелефонии.vpbx_api_key,
		ПараметрыТела.json,
		НастройкиТелефонии.vpbx_api_salt
	);
	
	Возврат РассчитанныйSign = ПараметрыТела.sign;
	
КонецФункции

#КонецОбласти