
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	
	Если Параметры.Объект <> Неопределено Тогда
		
		КопироватьДанныеФормы(Параметры.Объект, Объект);
		
	КонецЕсли;
	                                        
	Если НЕ Объект.ЗаказНаряд.Пустая() ИЛИ  НЕ Объект.СводныйРемонтныйЗаказ.Пустая() ИЛИ 
		 НЕ  Объект.ЗаявкаНаРемонт.Пустая() Тогда
		  
		  Элементы.РежимЗагрузки.ТолькоПросмотр = Истина;
		
	КонецЕсли;
  
	Если НЕ Объект.ЗаказНаряд.Пустая() И Объект.СводныйРемонтныйЗаказ.Пустая() Тогда
		
		Объект.СводныйРемонтныйЗаказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказНаряд, "СводныйРемонтныйЗаказ");
		
	КонецЕсли;
	
	Если НЕ Объект.СводныйРемонтныйЗаказ.Пустая() Тогда
		
		ПоискПоЗаданиям = Объект.СводныйРемонтныйЗаказ.Автомобиль.VIN;
		
	КонецЕсли;
	
	Если НЕ Объект.ЗаявкаНаРемонт.Пустая() Тогда
		
		РежимЗагрузки = 1;
		ПоискПоЗаданиям = Объект.ЗаявкаНаРемонт.Автомобиль.VIN;
		
	КонецЕсли;
	
	СводныйРемонтныйЗаказПриИзмененииНаСервере();
	НастроитьПараметрыВыбораЭлементовФормы();
	
	Если НЕ(ЗначениеЗаполнено(Объект.НачалоПериодаФильтр) ИЛИ ЗначениеЗаполнено(Объект.ОкончаниеПериодаФильтр)) Тогда
		
		Объект.ОкончаниеПериодаФильтр = ТекущаяДатаСеанса();
		Объект.НачалоПериодаФильтр    = НачалоМесяца(Объект.ОкончаниеПериодаФильтр);
		
	КонецЕсли;
	
	УстановитьРежимОтладки();
	УстановитьРежимДокументаЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗадания(Неопределено);
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ЗаказНарядОбъектАвтоработы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ЗаказНарядОбъектТовары");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ЗаявкаНаРемонтОбъектАвтоработы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ЗаявкаНаРемонтОбъектТовары");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Объект", Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	УстановитьРежимДокументаЗагрузки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядПриИзмененииНаСервере()
	
	Объект.СводныйРемонтныйЗаказ = Объект.ЗаказНаряд.СводныйРемонтныйЗаказ;
	СводныйРемонтныйЗаказПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПриИзменении(Элемент)
	
	ЗаказНарядПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка    = Ложь;
	
	Отбор = Новый Структура("ЗапретитьВыбор", Ложь);
	ПараметрыОткрытия = Новый Структура("РежимВыбора,ТекущаяСтрока,Отбор", Истина, Объект.ПричинаОбращения, Отбор);
	
	ОткрытьФорму("Справочник.ПричиныОбращений.ФормаВыбора", ПараметрыОткрытия, Элемент, Элемент,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СводныйРемонтныйЗаказПриИзмененииНаСервере()
	
	Если Не Элементы.Найти("ЗаказНаряд")=Неопределено Тогда
		Если НЕ Объект.СводныйРемонтныйЗаказ.Пустая() Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ЗаказНаряд.ПараметрыВыбора, "Отбор.СводныйРемонтныйЗаказ", Объект.СводныйРемонтныйЗаказ);
		Иначе
			УправлениеДиалогомСервер.УдалитьПараметрВыбора(Элементы.ЗаказНаряд.ПараметрыВыбора, "Отбор.СводныйРемонтныйЗаказ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйРемонтныйЗаказПриИзменении(Элемент)
	
	СводныйРемонтныйЗаказПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокЗаданийПриАктивизацииСтрокиОтложено", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоЗаданиямПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПоискПоЗаданиям) Тогда
		СброситьПоиск();
	ИначеЕсли СтрДлина(ПоискПоЗаданиям) < 4 Тогда
		СброситьПоиск();
		ПоказатьПредупреждение(, "Слишком короткий текст для поиска. Минимальное значение 4 символа.");
	Иначе
		УстановитьПоиск();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращения

&НаКлиенте
Процедура ЗаказНарядОбъектПричиныОбращенияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЗаказНарядОбъектПричиныОбращения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗаказНарядОбъектТовары.ОтборСтрок = Неопределено;
		Элементы.ЗаказНарядОбъектТовары.Обновить();
		
		Элементы.ЗаказНарядОбъектАвтоработы.ОтборСтрок = Неопределено;
		Элементы.ЗаказНарядОбъектАвтоработы.Обновить();
	Иначе
		ТекущиеДанные = ЗаказНарядОбъект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ЗаказНарядОбъектПричиныОбращения.ТекущаяСтрока);
		Элементы.ЗаказНарядОбъектТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
		Элементы.ЗаказНарядОбъектТовары.Обновить();
		
		Элементы.ЗаказНарядОбъектАвтоработы.ОтборСтрок = Элементы.ЗаказНарядОбъектТовары.ОтборСтрок;
		Элементы.ЗаказНарядОбъектАвтоработы.Обновить();
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.ЗаказНарядОбъектТовары, ЗаказНарядОбъект.Товары);
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.ЗаказНарядОбъектАвтоработы, ЗаказНарядОбъект.Автоработы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаСервере
Процедура ЗаказНарядОбъектТоварыНоменклатураПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыНоменклатураПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыНоменклатураПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектТоварыКоличествоПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыКоличествоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыКоличествоПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыХарактеристикаНоменклатурыПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектТоварыЕдиницаИзмеренияПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыЕдиницаИзмеренияПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыЕдиницаИзмеренияПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектТоварыЦенаПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыЦенаПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыЦенаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыЦенаПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектТоварыСуммаПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыСуммаПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыСуммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыСуммаПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектТоварыСтавкаНДСПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыСтавкаНДСПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыСтавкаНДСПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектТоварыСуммаВсегоПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Товары.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.ТоварыСуммаВсегоПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектТоварыСуммаВсегоПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектТовары.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗаказНарядОбъектТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (НоваяСтрока ИЛИ ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения)) И НЕ Копирование И ЗаказНарядОбъект.ПричиныОбращения.Количество() > 0 Тогда
		ДанныеОбращения = ЗаказНарядОбъект.ПричиныОбращения.
			НайтиПоИдентификатору(Элементы.ЗаказНарядОбъектПричиныОбращения.ТекущаяСтрока);
		
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ЗаказНарядОбъектПричиныОбращенияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗаказНарядОбъектАвтоработы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторРаботы) ИЛИ Копирование Тогда
		
		ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	Если
		(НоваяСтрока Или ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения))
		И Не Копирование
		И ЗаказНарядОбъект.ПричиныОбращения.Количество() > 0
	Тогда
		
		ДанныеОбращения = ЗаказНарядОбъект
			.ПричиныОбращения
			.НайтиПоИдентификатору(Элементы.ЗаказНарядОбъектПричиныОбращения.ТекущаяСтрока);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ЗаказНарядОбъектПричиныОбращенияПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыАвтоработаПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыАвтоработаПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыАвтоработаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыАвтоработаПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыКоличествоПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыКоличествоПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыКоличествоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыКоличествоПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыНормочасПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыНормочасПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыНормочасПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыНормочасПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыКоэффициентПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыКоэффициентПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыКоэффициентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыКоэффициентПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыЦенаПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыЦенаПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыЦенаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыЦенаПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыСуммаПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыСуммаПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыСуммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыСуммаПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыСуммаВсегоПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыСуммаВсегоПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыСуммаВсегоПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыСтавкаНДСПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыСтавкаНДСПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыСтавкаНДСПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыСуммаНДСПриИзмененииНаСервере(Идентификатор, ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыСуммаНДСПриИзменении(ЗаказНарядОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыСуммаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыСуммаНДСПриИзмененииНаСервере(Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядОбъектАвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере(
		Идентификатор,
		ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока = ЗаказНарядОбъект.Автоработы.НайтиПоИдентификатору(Идентификатор);
	Документы.ЗаказНаряд.АвтоработыСпособРасчетаСтоимостиРаботыПриИзменени(
		ЗаказНарядОбъект,
		ТекущаяСтрока,
		ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОбъектАвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказНарядОбъектАвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере(
		Элементы.ЗаказНарядОбъектАвтоработы.ТекущаяСтрока,
		ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращенияЗаявкиНаРемонт

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектПричиныОбращенияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЗаявкаНаРемонтОбъектПричиныОбращения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗаявкаНаРемонтОбъектТовары.ОтборСтрок = Неопределено;
		Элементы.ЗаявкаНаРемонтОбъектТовары.Обновить();
		
		Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ОтборСтрок = Неопределено;
		Элементы.ЗаявкаНаРемонтОбъектАвтоработы.Обновить();
	Иначе
		ТекущиеДанные = ЗаявкаНаРемонтОбъект.ПричиныОбращения.НайтиПоИдентификатору(
			Элементы.ЗаявкаНаРемонтОбъектПричиныОбращения.ТекущаяСтрока);
		Элементы.ЗаявкаНаРемонтОбъектТовары.ОтборСтрок =
			Новый ФиксированнаяСтруктура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
		Элементы.ЗаявкаНаРемонтОбъектТовары.Обновить();
		
		Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ОтборСтрок = Элементы.ЗаявкаНаРемонтОбъектТовары.ОтборСтрок;
		Элементы.ЗаявкаНаРемонтОбъектАвтоработы.Обновить();
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(
		ЭтотОбъект,
		Элементы.ЗаявкаНаРемонтОбъектТовары,
		ЗаявкаНаРемонтОбъект.Товары);
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(
		ЭтотОбъект,
		Элементы.ЗаявкаНаРемонтОбъектАвтоработы,
		ЗаявкаНаРемонтОбъект.Автоработы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработыЗаявкиНаРемонт

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторРаботы) ИЛИ Копирование Тогда
		
		ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	Если
		(НоваяСтрока Или ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения))
		И Не Копирование
		И ЗаявкаНаРемонтОбъект.ПричиныОбращения.Количество() > 0
	Тогда
		
		ДанныеОбращения = ЗаявкаНаРемонтОбъект
			.ПричиныОбращения
			.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектПричиныОбращения.ТекущаяСтрока);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ЗаявкаНаРемонтОбъектПричиныОбращенияПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыАвтоработаПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыАвтоработаПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыАвтоработаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыКоличествоПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыКоличествоПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыНормочасПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыНормочасПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыНормочасПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыНормочасПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыКоэффициентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыКоэффициентПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыКоэффициентПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыКоэффициентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыЦенаПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыЦенаПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыСуммаПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаВсегоПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыСуммаВсегоПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСтавкаНДСПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыСтавкаНДСПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСтавкаНДСПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыСуммаНДСПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектАвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере(
		ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Автоработы.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектАвтоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(
		ЗаявкаНаРемонтОбъект,
		ТекущаяСтрока,
		ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектАвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыЗаявкиНаРемонт

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (НоваяСтрока ИЛИ ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения)) И НЕ Копирование
		И ЗаявкаНаРемонтОбъект.ПричиныОбращения.Количество() > 0 Тогда
		ДанныеОбращения = ЗаявкаНаРемонтОбъект.ПричиныОбращения.
			НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектПричиныОбращения.ТекущаяСтрока);
		
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ЗаявкаНаРемонтОбъектПричиныОбращенияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыНоменклатураПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыНоменклатураПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыХарактеристикаНоменклатурыПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыКоличествоПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыКоличествоПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыЕдиницаИзмеренияПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыЦенаПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыЦенаПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыСуммаПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаВсегоПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыСуммаВсегоПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСтавкаНДСПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыСтавкаНДСПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтОбъектТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущаяСтрока =
		ЗаявкаНаРемонтОбъект.Товары.НайтиПоИдентификатору(Элементы.ЗаявкаНаРемонтОбъектТовары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаНДСПриИзменении(ЗаявкаНаРемонтОбъект, ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыСуммаНДСПриИзменении(Элемент)
	
	ЗаявкаНаРемонтОбъектТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьЗадания(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияЗаданий");
	
	ДлительнаяОперацияЗагрузкаЗаданий = Истина;
	ОбновитьСтатусЗагрузки();
	
	СписокЗаданий.Очистить(); СписокКалькуляций.Очистить();
	
	Если ВыполнитьОбновлениеЗаданийВФоне() Тогда
		ДлительнаяОперацияЗагрузкаЗаданий = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияЗаданий", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалькуляцииЗадания(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияКалькуляцийЗадания");
	
	ДлительнаяОперацияЗагрузкаКалькуляций = Истина;
	ОбновитьСтатусЗагрузки();
	
	
	Если ВыполнитьОбновлениеКалькуляцийЗаданияВФоне() Тогда
		ДлительнаяОперацияЗагрузкаКалькуляций = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияКалькуляцийЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКалькуляциюНаСервере(Знач ДанныеКалькуляции, ДанныеСтроки)
	
	ДанныеКалькуляции = ОбменСAudaPadWeb.ЗначениеИзСтрокиXML(ДанныеКалькуляции);
	
	// создание и заполнение объектов заказ-наряда и сводного ремонтного заказа
	ЗаполнитьДокументы(ДанныеКалькуляции, ДанныеСтроки);
	
	ПрочитатьДополнительныеКоды(ДанныеКалькуляции, ДанныеСтроки);
	
	Если Объект.РежимЗагрузкиАвторабот <> Перечисления.РежимыЗагрузкиТаблиц.НеЗагружать Тогда
		ТаблицаСоответствияАвторабот.Очистить();
		ПрочитатьИнформациюПоАвтоработамИзКалькуляции(ДанныеКалькуляции, ДанныеСтроки);
	КонецЕсли;
	
	Если Объект.РежимЗагрузкиДеталей <> Перечисления.РежимыЗагрузкиТаблиц.НеЗагружать Тогда
		ТаблицаСоответствияТоваров.Очистить();
		ПрочитатьИнформациюПоТоварамИзКалькуляции(ДанныеКалькуляции, ДанныеСтроки);
	КонецЕсли;
	
	ЗаполнитьТаблицыСоответствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКалькуляцию(Команда)
	
	Если Элементы.СписокКалькуляций.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Валюта"             , Элементы.СписокКалькуляций.ТекущиеДанные.ВалютаКалькуляции);
	ДанныеСтроки.Вставить("ВалютаИсходная"     , Элементы.СписокКалькуляций.ТекущиеДанные.ВалютаИсходная);
	ДанныеСтроки.Вставить("ДатаКалькуляции"    , Элементы.СписокКалькуляций.ТекущиеДанные.ДатаКалькуляции);
	ДанныеСтроки.Вставить("КурсИсходнойВалюты" , Элементы.СписокКалькуляций.ТекущиеДанные.КурсИсходнойВалюты);
	ДанныеСтроки.Вставить("Модель"             , Элементы.СписокЗаданий.ТекущиеДанные.Модель);
	ДанныеСтроки.Вставить("Фамилия"            , Элементы.СписокЗаданий.ТекущиеДанные.Фамилия);
	ДанныеСтроки.Вставить("Имя"                , Элементы.СписокЗаданий.ТекущиеДанные.Имя);
	ДанныеСтроки.Вставить("VIN"                , Элементы.СписокЗаданий.ТекущиеДанные.VIN);
	ДанныеСтроки.Вставить("Производитель"      , Элементы.СписокЗаданий.ТекущиеДанные.Производитель);
	ДанныеСтроки.Вставить("АвтомобильСтруктура", Элементы.СписокКалькуляций.ТекущиеДанные.АвтомобильСтруктура);
	
	ЗагрузитьКалькуляциюНаСервере(Элементы.СписокКалькуляций.ТекущиеДанные.ДанныеКалькуляции, ДанныеСтроки);
	
	ДополнительныеПараметрыДокументов = Новый Структура;
	ДополнительныеПараметрыДокументов.Вставить("НормочасАвторабот" , Элементы.СписокКалькуляций.ТекущиеДанные.НормочасАвторабот);
	ДополнительныеПараметрыДокументов.Вставить("НормочасОкраски"   , Элементы.СписокКалькуляций.ТекущиеДанные.НормочасОкраски);
	ДополнительныеПараметрыДокументов.Вставить("РПВЧас"            , Элементы.СписокКалькуляций.ТекущиеДанные.РПВЧас);
	ДополнительныеПараметрыДокументов.Вставить("ВалютаКалькуляции" , Элементы.СписокКалькуляций.ТекущиеДанные.ВалютаКалькуляции);
	ДополнительныеПараметрыДокументов.Вставить("КурсИсходнойВалюты", Элементы.СписокКалькуляций.ТекущиеДанные.КурсИсходнойВалюты);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТаблицыСоответствий;
	
КонецПроцедуры

&НаСервере
Функция ОткрытьФормуДокументаНаСервере()
	
	// обработаем результат из таблиц соответствий
	ОбработатьИзмененияТаблицыСоответствий();
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДополнительныеПараметрыДокументов", ДополнительныеПараметрыДокументов);
	ПараметрыЗаполнения.Вставить("Объект"                          , Объект);
	Если РежимЗагрузки = 1 Тогда
		ПараметрыЗаполнения.Вставить("ЗаявкаНаРемонтОбъект"        , ЗаявкаНаРемонтОбъект);
		ПараметрыЗаполнения.Вставить("ИтогоПоДокументу"            , ИтогоПоДокументу);
	Иначе
		ПараметрыЗаполнения.Вставить("ЗаказНарядОбъект"            , ЗаказНарядОбъект);
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ТаблицаСоответствияАвторабот"    , ТаблицаСоответствияАвторабот);
	ПараметрыЗаполнения.Вставить("ТаблицаСоответствияТоваров"      , ТаблицаСоответствияТоваров);
	ПараметрыЗаполнения.Вставить("ДополнительныеКоды"              , ДополнительныеКоды);
	
	Если НЕ (Объект.ОткрытиеИзФормыДокумента И Объект.ВладелецФормаДокументаЗаказНаряд) Тогда
		// загрузить автоработы и товары
		ОбменСAudaPadWeb.ЗаполнитьТабличныеЧастиДокумента(ПараметрыЗаполнения, ЭтотОбъект, ВсегоПоДокументу);
		СуммаДокумента = ВсегоПоДокументу;
	Иначе
		
		Если РежимЗагрузки = 0 Тогда
			
			СводныйРемонтныйЗаказТекущийОбъект = РеквизитФормыВЗначение("СводныйРемонтныйЗаказОбъект");
			Если СводныйРемонтныйЗаказТекущийОбъект.Ссылка.Пустая() Тогда
				СводныйРемонтныйЗаказТекущийОбъект.УстановитьНовыйНомер();
			КонецЕсли;
			СводныйРемонтныйЗаказТекущийОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				СводныйРемонтныйЗаказТекущийОбъект.Записать();
				ЗаказНарядОбъект.СводныйРемонтныйЗаказ = СводныйРемонтныйЗаказТекущийОбъект.Ссылка;
				ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, СводныйРемонтныйЗаказТекущийОбъект.Ссылка);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
		// передадим данные для обработки в заказ-наряд
		Возврат ПоместитьВоВременноеХранилище(ПараметрыЗаполнения);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДокумента(Команда)
	
	Результат = ОткрытьФормуДокументаНаСервере();
	Если Результат <> Неопределено Тогда
		// оповестим заказ-наряд
		ПараметрыОписаниеОповещения = Новый Структура("Событие,ОбновлятьШапкуДокумента",
			?(РежимЗагрузки = 0, "ЗагрузитьЗаказНаряд", "ЗагрузитьЗаявкуНаРемонт"), Объект.ОбновлятьШапкуДокумента
		);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ВладелецФормы.ВладелецФормы,
			ПараметрыОписаниеОповещения
		);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если РежимЗагрузки = 1 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкаНаРемонт;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаказНаряда;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКСпискуКалькуляций(Команда)
	
	ДополнительныеПараметрыДокументов = Неопределено;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокДел;
	
КонецПроцедуры

&НаСервере
Функция ПровестиИЗакрытьНаСервере()
	
	Отказ = Ложь;
	
	СводныйРемонтныйЗаказОбъектВрем = РеквизитФормыВЗначение("СводныйРемонтныйЗаказОбъект");
	
	Если СводныйРемонтныйЗаказОбъектВрем.Ссылка.Пустая() Тогда
		
		СводныйРемонтныйЗаказОбъектВрем.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	СводныйРемонтныйЗаказОбъектВрем.ОбменДанными.Загрузка = Истина;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		СводныйРемонтныйЗаказОбъектВрем.Записать();
		ЗаказНарядОбъект.СводныйРемонтныйЗаказ = СводныйРемонтныйЗаказОбъектВрем.Ссылка;
		ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, СводныйРемонтныйЗаказОбъектВрем.Ссылка);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
		
	КонецПопытки;
	
	ЗаказНарядОбъектВрем = РеквизитФормыВЗначение("ЗаказНарядОбъект");
	
	Если ЗаказНарядОбъектВрем.Ссылка.Пустая() Тогда
		
		ЗаказНарядОбъектВрем.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ЗаказНарядОбъектВрем.ОбменДанными.Загрузка = Истина;
	
	// Причины_обращения
	
	Если ЗаказНарядОбъект.ПричиныОбращения.Количество() Тогда
		
		ПричиныИАвтоработы = Новый ТаблицаЗначений;
		ПричиныИАвтоработы.Колонки.Добавить("ПричинаОбращения");
		ПричиныИАвтоработы.Колонки.Добавить("Авторабота");
		
		Для Каждого Авторабота Из ЗаказНарядОбъект.Автоработы Цикл
			
			Запись = ПричиныИАвтоработы.Добавить();
			Запись.ПричинаОбращения = Авторабота.ИдентификаторПричиныОбращения;
			Запись.Авторабота       = Авторабота.ИдентификаторРаботы;
			
		КонецЦикла;
		
		ЗаказНарядОбъектВрем.ДополнительныеСвойства.Вставить("СоставПричинОбращения", ПричиныИАвтоработы);
		
	КонецЕсли;
	
	// Конец.Причины_обращения
	
	// Пакеты_авторабот
	
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	
	Если ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции) Тогда
		
		РежимРазделенияРаботПоПакетам = ПравоПользователя("УРВ_РежимРазделенияРаботПоПакетам");
		
		Если РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.НеРазбивать Тогда
			
			Документы.ЗаказНаряд.ПоместитьВсеРаботыВнеПакетов(ЗаказНарядОбъект.Автоработы);
			
		Иначе
			
			Документы.ЗаказНаряд.ПоместитьРаботыВПакеты(
				ЗаказНарядОбъект.Автоработы,
				ЗаказНарядОбъект.ПричиныОбращения,
				РежимРазделенияРаботПоПакетам
			);
			
		КонецЕсли;
		
		ЗаказНарядОбъектВрем.ДополнительныеСвойства.Вставить("ПакетыРабот", ЗаказНарядОбъект.Автоработы.Выгрузить());
		
	КонецЕсли;
	
	// Конец.Пакеты_авторабот
	
	Попытка
		
		ЗаказНарядОбъектВрем.Записать();
		ЗначениеВРеквизитФормы(ЗаказНарядОбъектВрем, "ЗаказНарядОбъект");
		ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, ЗаказНарядОбъектВрем.Ссылка);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию(); // BSLLS-off
		
	Иначе
		
		Менеджер = РегистрыСведений.ОбменСAudaPadWeb.СоздатьМенеджерЗаписи();
		Менеджер.Период               = ТекущаяДатаСеанса();
		Менеджер.Автор                = Пользователи.ТекущийПользователь();
		Менеджер.ЗаказНаряд           = ЗаказНарядОбъект.Ссылка;
		Менеджер.ИдентификаторДела    = Объект.ИдентификаторДела;
		Менеджер.ИдентификаторЗадания = Объект.ИдентификаторЗадания;
		Менеджер.Записать(Истина);
		
		ЗафиксироватьТранзакцию();  // BSLLS-off
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Если ПровестиИЗакрытьНаСервере() Тогда
		Если Объект.ОткрытиеИзФормыДокумента Тогда
			Оповестить("ИзмененСводныйРемонтныйЗаказ", СводныйРемонтныйЗаказОбъект.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиИзТестовогоФайла(Команда)
	
	НачатьПомещениеФайлаНаСервер(
		Новый ОписаниеОповещения("ПомещениеТестовогоФайлаЗавершение", ЭтотОбъект),
		,
		,
		,
		,
		УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьЗаявку(Команда)
	
	Если ПровестиИЗакрытьЗаявкуНаСервере() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПровестиИЗакрытьЗаявкуНаСервере()
	
	Отказ = Ложь;
	
	ЗаявкаНаРемонтОбъектВрем = РеквизитФормыВЗначение("ЗаявкаНаРемонтОбъект");
	
	Если ЗаявкаНаРемонтОбъектВрем.Ссылка.Пустая() Тогда
		
		ЗаявкаНаРемонтОбъектВрем.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ЗаявкаНаРемонтОбъектВрем.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		ЗаявкаНаРемонтОбъектВрем.Записать();
		ЗначениеВРеквизитФормы(ЗаявкаНаРемонтОбъектВрем, "ЗаявкаНаРемонтОбъект");
		ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, ЗаявкаНаРемонтОбъектВрем.Ссылка);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
		
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		
		Менеджер = РегистрыСведений.ОбменСAudaPadWeb.СоздатьМенеджерЗаписи();
		Менеджер.Период               = ТекущаяДатаСеанса();
		Менеджер.Автор                = Пользователи.ТекущийПользователь();
		Менеджер.ЗаказНаряд           = ЗаявкаНаРемонтОбъект.Ссылка;
		Менеджер.ИдентификаторДела    = Объект.ИдентификаторДела;
		Менеджер.ИдентификаторЗадания = Объект.ИдентификаторЗадания;
		Менеджер.Записать(Истина);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	ВидыДоговоров = Справочники.ХозОперации.ПолучитьВидыДоговоров(ЗаказНарядОбъект.ХозОперация);
	
	Если НЕ Элементы.Найти("ЗаказНарядОбъектДоговорВзаиморасчетов") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ЗаказНарядОбъектДоговорВзаиморасчетов.ПараметрыВыбора, "Отбор.ВидДоговора", ВидыДоговоров);
	КонецЕсли;
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(ЗаказНарядОбъект.ХозОперация);
	
	Если НЕ Элементы.Найти("ЗаказНарядОбъектТоварыНоменклатура") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ЗаказНарядОбъектТоварыНоменклатура.ПараметрыВыбора, "Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
	ВидыДоговоров = Справочники.ХозОперации.ПолучитьВидыДоговоров(ЗаявкаНаРемонтОбъект.ХозОперация);
	
	Если НЕ Элементы.Найти("ЗаявкаНаРемонтОбъектДоговорВзаиморасчетов") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ЗаявкаНаРемонтОбъектДоговорВзаиморасчетов.ПараметрыВыбора, "Отбор.ВидДоговора", ВидыДоговоров);
	КонецЕсли;
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(ЗаявкаНаРемонтОбъект.ХозОперация);
	
	Если НЕ Элементы.Найти("ЗаявкаНаРемонтОбъектТоварыНоменклатура") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ЗаявкаНаРемонтОбъектТоварыНоменклатура.ПараметрыВыбора, "Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура ЗаполнитьИдентификаторыПричинОбращенийАвторабот(Документ)
	
	Если ЗаказНарядОбъект.ПричиныОбращения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
	
	Для Каждого Авторабота Из ЗаказНарядОбъект.Автоработы Цикл
		НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
		Иначе
			Авторабота.ИдентификаторПричиныОбращения = ЗаказНарядОбъект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты в тч Автоработы, для работы с пакетами
//
// Параметры:
//	ОбновитьДерево - Булево - После заполнения обновить дерево пакетов автоматически.
//
&НаСервере
Процедура ЗаполнитьИнформациюОПакетахНаСервере()
	
	ИнформацияОПакетах = РегистрыСведений.СоставПакетовРабот.ПолучитьДанныеПакетовДокумента(ЗаказНарядОбъект.Ссылка);
	
	Если ИнформацияОПакетах <> Неопределено И ЕстьРеквизит(ИнформацияОПакетах, "ИдентификаторРаботы") Тогда
		Отбор = Новый Структура("ИдентификаторРаботы");
		Для Каждого Авторабота Из ЗаказНарядОбъект.Автоработы Цикл
			Отбор.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
			НайденныеЗначения = ИнформацияОПакетах.НайтиСтроки(Отбор);
			Если НайденныеЗначения.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Авторабота, НайденныеЗначения[0]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументы(Знач ДанныеКалькуляции, ДанныеСтроки)
	
	Если РежимЗагрузки = 1 Тогда
		
		ЗаполнитьДокументЗаявкаНаРемонт(ДанныеКалькуляции, ДанныеСтроки);
		Возврат;
		
	КонецЕсли;
	
	#Область Создание_Объектов_Документов
	
	// Сводный ремонтный заказ
	Если НЕ Объект.СводныйРемонтныйЗаказ.Пустая() Тогда
		ВремОбъект = Объект.СводныйРемонтныйЗаказ.ПолучитьОбъект();
	Иначе
		ВремОбъект = Документы.СводныйРемонтныйЗаказ.СоздатьДокумент();
		ВремОбъект.Заполнить(Неопределено);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ВремОбъект, "СводныйРемонтныйЗаказОбъект");
	
	// Заказ-наряд
	Если НЕ Объект.ЗаказНаряд.Пустая() Тогда
		ВремОбъект = Объект.ЗаказНаряд.ПолучитьОбъект();
	Иначе
		ВремОбъект = Документы.ЗаказНаряд.СоздатьДокумент();
		ВремОбъект.Заполнить(Неопределено);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ВремОбъект, "ЗаказНарядОбъект");
	
	// заполним пакеты и причины обращений авторабот
	Если ЗаказНарядОбъект.Автоработы.Количество() > 0 Тогда
		ЗаполнитьИдентификаторыПричинОбращенийАвторабот(ЗаказНарядОбъект.Ссылка);
		ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
		
		Если  ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции) Тогда
			ЗаполнитьИнформациюОПакетахНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	Итого = ЗначениеXMLВ1С(
		ПолучитьСвойствоXDTO(ДанныеКалькуляции, "CLASSResult.CLASSXml.CalcData.FinalCalc.GrandTotal.Tot"), "Число");
	
	// Общие реквизиты
	ЗаказНарядОбъект.Автор                       = Пользователи.ТекущийПользователь();
	ЗаказНарядОбъект.Организация                 = ПараметрыСеанса.Организация;
	ЗаказНарядОбъект.ПодразделениеКомпании       = ПараметрыСеанса.ПодразделениеКомпании;
	ЗаказНарядОбъект.Комментарий                 = "Калькуляция импортирована из AudaPad Web";
	ЗаказНарядОбъект.ХозОперация                 = Справочники.ХозОперации.ЗаказНаряд;
	ЗаказНарядОбъект.СогласованнаяСумма          = Итого;
	ЗаказНарядОбъект.БлокироватьПерерасчетСкидок = Истина;
	
	СводныйРемонтныйЗаказОбъект.Автор                 = Пользователи.ТекущийПользователь();
	СводныйРемонтныйЗаказОбъект.Организация           = ПараметрыСеанса.Организация;
	СводныйРемонтныйЗаказОбъект.ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	СводныйРемонтныйЗаказОбъект.ХозОперация           = Справочники.ХозОперации.СводныйРемонтныйЗаказ;
	
	Если Объект.ОбновлятьШапкуДокумента ИЛИ НЕ ЗначениеЗаполнено(ЗаказНарядОбъект.Дата) Тогда
		ЗаказНарядОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Объект.ОбновлятьШапкуДокумента ИЛИ ЗаказНарядОбъект.Состояние.Пустая() Тогда
		ЗаказНарядОбъект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка;
	КонецЕсли;
	
	Если ЗаказНарядОбъект.ТипЦен.Пустая() Тогда
		ЗаказНарядОбъект.ТипЦен = Объект.ТипЦенПоУмолчанию;
	КонецЕсли;
	
	Если ЗаказНарядОбъект.ТипЦенРабот.Пустая() Тогда
		ЗаказНарядОбъект.ТипЦенРабот = Объект.ТипЦенАвтоработПоУмолчанию;
	КонецЕсли;
	
	Если Объект.ОбновлятьШапкуДокумента ИЛИ ЗаказНарядОбъект.ВидРемонта.Пустая() Тогда
		ЗаказНарядОбъект.ВидРемонта = Объект.ВидРемонтаПоУмолчанию;
	КонецЕсли;
	
	Если Объект.ОбновлятьШапкуДокумента ИЛИ ЗаказНарядОбъект.Цех.Пустая() Тогда
		ЗаказНарядОбъект.Цех = Объект.ЦехПоУмолчанию;
	КонецЕсли;
	
	ВалютаРасчетов = Справочники.Валюты.НайтиПоКоду("643"); // BSLLS-off
	
	Если Не ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		
		ВалютаРасчетов = Справочники.Валюты.НайтиПоНаименованию("Руб"); // BSLLS-off
		
	КонецЕсли;
	
	// если не нашли валюту то создадим новую
	Если Не ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		
		НовыйОбъект = Справочники.Валюты.СоздатьЭлемент();
		НовыйОбъект.Заполнить(Неопределено);
		НовыйОбъект.Код                 = "643";
		НовыйОбъект.Наименование        = "руб.";
		НовыйОбъект.НаименованиеПолное  = "руб.";
		
		Попытка
			
			НовыйОбъект.Записать();
			ВалютаРасчетов = НовыйОбъект.Ссылка;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'AutoPad Web.Создание валюты рубль'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Валюты,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// установим валюту документа
	Если (Объект.РежимЗагрузкиДеталей = Перечисления.РежимыЗагрузкиТаблиц.Загружать И
		Объект.РежимЗагрузкиАвторабот = Перечисления.РежимыЗагрузкиТаблиц.Загружать) ИЛИ
		ЗаказНарядОбъект.Ссылка.Пустая() Тогда
		
		ЗаказНарядОбъект.ВалютаДокумента = ВалютаРасчетов;
		Документы.ЗаказНаряд.ВалютаДокументаПриИзменении(ЗаказНарядОбъект);
		
	КонецЕсли;
	
	// если курс не установился установим его в 1
	Если НЕ ЗначениеЗаполнено(ЗаказНарядОбъект.КурсДокумента) Тогда
		ЗаказНарядОбъект.КурсДокумента = 1;
	КонецЕсли;
	
	// Контрагент
	Если СводныйРемонтныйЗаказОбъект.Заказчик.Пустая() ИЛИ Объект.ОбновлятьШапкуДокумента Тогда
		
		СводныйРемонтныйЗаказОбъект.Заказчик = НайтиСоздатьКонтрагента(ДанныеСтроки.Фамилия, ДанныеСтроки.Имя);
		Документы.СводныйРемонтныйЗаказ.ЗаказчикПриИзменении(СводныйРемонтныйЗаказОбъект);
		
	КонецЕсли;
	
	Если ЗаказНарядОбъект.Контрагент.Пустая() ИЛИ Объект.ОбновлятьШапкуДокумента Тогда
		
		ЗаказНарядОбъект.Контрагент = СводныйРемонтныйЗаказОбъект.Заказчик;
		Документы.ЗаказНаряд.КонтрагентПриИзменении(ЗаказНарядОбъект);
		
	КонецЕсли;
	
	// Автомобиль
	Если СводныйРемонтныйЗаказОбъект.Автомобиль.Пустая() ИЛИ Объект.ОбновлятьШапкуДокумента Тогда
		СводныйРемонтныйЗаказОбъект.Автомобиль =
			НайтиСоздатьАвтомобиль(ДанныеСтроки.VIN, СводныйРемонтныйЗаказОбъект.Заказчик, ДанныеСтроки.АвтомобильСтруктура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументЗаявкаНаРемонт(Знач ДанныеКалькуляции, ДанныеСтроки)
	
	#Область Создание_Объектов_Документов
	
	// Завявка на ремонт
	Если НЕ Объект.ЗаявкаНаРемонт.Пустая() Тогда
		ВремОбъект = Объект.ЗаявкаНаРемонт.ПолучитьОбъект();
	Иначе
		ВремОбъект = Документы.ЗаявкаНаРемонт.СоздатьДокумент();
		ВремОбъект.Заполнить(Неопределено);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ВремОбъект, "ЗаявкаНаРемонтОбъект");
	
	#КонецОбласти
	
	// заполним пакеты и причины обращений авторабот
	Если ЗаявкаНаРемонтОбъект.Автоработы.Количество() > 0 Тогда
		ЗаполнитьИдентификаторыПричинОбращенийАвторабот(ЗаявкаНаРемонтОбъект.Ссылка);
	КонецЕсли;
	
	// Общие реквизиты
	ЗаявкаНаРемонтОбъект.Автор                       = Пользователи.ТекущийПользователь();
	ЗаявкаНаРемонтОбъект.Организация                 = ПараметрыСеанса.Организация;
	ЗаявкаНаРемонтОбъект.ПодразделениеКомпании       = ПараметрыСеанса.ПодразделениеКомпании;
	ЗаявкаНаРемонтОбъект.Комментарий                 = "Калькуляция импортирована из AudaPad Web";
	ЗаявкаНаРемонтОбъект.БлокироватьПерерасчетСкидок = Истина;
	
	Если Объект.ОбновлятьШапкуДокумента ИЛИ НЕ ЗначениеЗаполнено(ЗаявкаНаРемонтОбъект.Дата) Тогда
		ЗаявкаНаРемонтОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗаявкаНаРемонтОбъект.ТипЦен.Пустая() Тогда
		ЗаявкаНаРемонтОбъект.ТипЦен = Объект.ТипЦенПоУмолчанию;
	КонецЕсли;
	
	Если ЗаявкаНаРемонтОбъект.ТипЦенРабот.Пустая() Тогда
		ЗаявкаНаРемонтОбъект.ТипЦенРабот = Объект.ТипЦенАвтоработПоУмолчанию;
	КонецЕсли;
	
	Если Объект.ОбновлятьШапкуДокумента ИЛИ ЗаявкаНаРемонтОбъект.ВидРемонта.Пустая() Тогда
		ЗаявкаНаРемонтОбъект.ВидРемонта = Объект.ВидРемонтаПоУмолчанию;
	КонецЕсли;
	
	Если Объект.ОбновлятьШапкуДокумента ИЛИ ЗаявкаНаРемонтОбъект.Цех.Пустая() Тогда
		ЗаявкаНаРемонтОбъект.Цех = Объект.ЦехПоУмолчанию;
	КонецЕсли;
	
	ВалютаРасчетов = Справочники.Валюты.НайтиПоКоду("643"); // BSLLS-off
	
	Если Не ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		
		ВалютаРасчетов = Справочники.Валюты.НайтиПоНаименованию("Руб"); // BSLLS-off
		
	КонецЕсли;
	
	// если не нашли валюту то создадим новую
	Если Не ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		
		НовыйОбъект = Справочники.Валюты.СоздатьЭлемент();
		НовыйОбъект.Заполнить(Неопределено);
		НовыйОбъект.Код                 = "643";
		НовыйОбъект.Наименование        = "руб.";
		НовыйОбъект.НаименованиеПолное  = "руб.";
		
		Попытка
			
			НовыйОбъект.Записать();
			ВалютаРасчетов = НовыйОбъект.Ссылка;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'AutoPad Web.Создание валюты рубль'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Валюты,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// установим валюту документа
	Если (Объект.РежимЗагрузкиДеталей = Перечисления.РежимыЗагрузкиТаблиц.Загружать И
		Объект.РежимЗагрузкиАвторабот = Перечисления.РежимыЗагрузкиТаблиц.Загружать) ИЛИ
		ЗаявкаНаРемонтОбъект.Ссылка.Пустая() Тогда
		
		ЗаявкаНаРемонтОбъект.ВалютаДокумента = ВалютаРасчетов;
		Документы.ЗаявкаНаРемонт.ВалютаДокументаПриИзменении(ЗаявкаНаРемонтОбъект);
		
	КонецЕсли;
	
	// если курс не установился установим его в 1
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаРемонтОбъект.КурсДокумента) Тогда
		ЗаявкаНаРемонтОбъект.КурсДокумента = 1;
	КонецЕсли;
	
	// Автомобиль
	Если ЗаявкаНаРемонтОбъект.Автомобиль.Пустая() ИЛИ Объект.ОбновлятьШапкуДокумента Тогда
		ЗаявкаНаРемонтОбъект.Автомобиль =
			НайтиСоздатьАвтомобиль(ДанныеСтроки.VIN, СводныйРемонтныйЗаказОбъект.Заказчик, ДанныеСтроки.АвтомобильСтруктура);
		Документы.ЗаявкаНаРемонт.АвтомобильПриИзменении(ЗаявкаНаРемонтОбъект);
	КонецЕсли;
	
	// Контрагент
	Если ЗаявкаНаРемонтОбъект.Заказчик.Пустая() ИЛИ Объект.ОбновлятьШапкуДокумента Тогда
		
		ЗаявкаНаРемонтОбъект.Заказчик = НайтиСоздатьКонтрагента(ДанныеСтроки.Фамилия, ДанныеСтроки.Имя);
		ПараметрыДействия = Новый Структура ("НеобходимоПерезаполнитьАвтомобиль", Ложь);
		Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(ЗаявкаНаРемонтОбъект);
		
	КонецЕсли;
	
	Если (ЗаявкаНаРемонтОбъект.Контрагент.Пустая() ИЛИ Объект.ОбновлятьШапкуДокумента)
		И Не Автосервис.ЭтоБесплатный(ЗаявкаНаРемонтОбъект.ВидРемонта) Тогда
		
		ЗаявкаНаРемонтОбъект.Контрагент = ЗаявкаНаРемонтОбъект.Заказчик;
		Документы.ЗаявкаНаРемонт.КонтрагентПриИзменении(ЗаказНарядОбъект);
		
	КонецЕсли;
	
	ИтогоПоДокументу = ЗначениеXMLВ1С(
		ПолучитьСвойствоXDTO(ДанныеКалькуляции, "CLASSResult.CLASSXml.CalcData.FinalCalc.GrandTotal.Tot"), "Число");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыСоответствий()
	
	Модель = СводныйРемонтныйЗаказОбъект.Автомобиль.Модель;
	
	// поиск авторабот
	Если ТаблицаСоответствияАвторабот.Количество() > 0 Тогда
		КолонкаПоиска = ?(НЕ Объект.ПоискПоНаименованиеПолное, "ХешНомерНаименование", "ХешНаименованиеПолное");
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.%1 КАК Хеш,
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Номенклатура,
		|	ВЫБОР
		|		КОГДА ОбменСAudaPadWeb_ТаблицаСоответствий.Модель = &Модель
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|	
		|ИЗ
		|	РегистрСведений.ОбменСAudaPadWeb_ТаблицаСоответствий КАК ОбменСAudaPadWeb_ТаблицаСоответствий
		|ГДЕ
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.%1 В(&Хеши) И
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Номенклатура ССЫЛКА Справочник.Автоработы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет",
		?(НЕ Объект.ПоискПоНаименованиеПолное, "Хеш1", "Хеш2"));
		
		Запрос.УстановитьПараметр("Модель" , Модель);
		Запрос.УстановитьПараметр("Хеши"   , ТаблицаСоответствияАвторабот.Выгрузить().ВыгрузитьКолонку(КолонкаПоиска));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		// заполняем номенклатуру
		Для Каждого Авторабота Из ТаблицаСоответствияАвторабот Цикл
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(Авторабота[КолонкаПоиска], "Хеш") Тогда
				Авторабота.Авторабота = Выборка.Номенклатура;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// поиск товаров
	Если ТаблицаСоответствияТоваров.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Номенклатура,
		|	ВЫБОР
		|		КОГДА ОбменСAudaPadWeb_ТаблицаСоответствий.Модель = &Модель
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок,
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Хеш2 КАК Хеш
		|ИЗ
		|	РегистрСведений.ОбменСAudaPadWeb_ТаблицаСоответствий КАК ОбменСAudaPadWeb_ТаблицаСоответствий
		|ГДЕ
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Хеш2 В(&ХешиНомерНаименование)
		|	И ОбменСAudaPadWeb_ТаблицаСоответствий.Номенклатура ССЫЛКА Справочник.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Номенклатура,
		|	ВЫБОР
		|		КОГДА ОбменСAudaPadWeb_ТаблицаСоответствий.Модель = &Модель
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок,
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Хеш1 КАК Хеш
		|ИЗ
		|	РегистрСведений.ОбменСAudaPadWeb_ТаблицаСоответствий КАК ОбменСAudaPadWeb_ТаблицаСоответствий
		|ГДЕ
		|	ОбменСAudaPadWeb_ТаблицаСоответствий.Хеш1 В(&ХешиНомер)
		|	И ОбменСAudaPadWeb_ТаблицаСоответствий.Номенклатура ССЫЛКА Справочник.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("ХешиНомерНаименование", ТаблицаСоответствияТоваров.Выгрузить().ВыгрузитьКолонку("ХешНомерНаименование"));
		Запрос.УстановитьПараметр("ХешиНомер", ТаблицаСоответствияТоваров.Выгрузить().ВыгрузитьКолонку("ХешНомер"));
		Запрос.УстановитьПараметр("Модель", Модель);
		
		Результаты = Запрос.ВыполнитьПакет();
		ВыборкаАртикулНаименование = Результаты[0].Выбрать();
		ВыборкаАртикул             = Результаты[1].Выбрать();
		
		Для Каждого Товар Из ТаблицаСоответствияТоваров Цикл
			ВыборкаАртикулНаименование.Сбросить(); ВыборкаАртикул.Сбросить();
			Если ВыборкаАртикулНаименование.НайтиСледующий(Товар.ХешНомерНаименование, "Хеш") Тогда
				Товар.Номенклатура = ВыборкаАртикулНаименование.Номенклатура;
			ИначеЕсли Объект.ПоискПоАртикулу И ВыборкаАртикул.НайтиСледующий(Товар.ХешНомер, "Хеш") Тогда
				Товар.Номенклатура = ВыборкаАртикул.Номенклатура;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияТаблицыСоответствий()
	
	Модель = СводныйРемонтныйЗаказОбъект.Автомобиль.Модель;
	
	Для Каждого Авторабота Из ТаблицаСоответствияАвторабот Цикл
		Если Авторабота.Авторабота.Пустая() Тогда
			Авторабота.Авторабота = НайтиСоздатьАвтоработу(Авторабота);
		КонецЕсли;
		
		Если НЕ Авторабота.Авторабота.Пустая() Тогда
			// обновим запись в таблице соответствий
			Измерения = Новый Структура;
			Измерения.Вставить("Хеш1"   , Авторабота.ХешНомерНаименование);
			Измерения.Вставить("Хеш2"   , Авторабота.ХешНаименованиеПолное);
			Измерения.Вставить("Модель" , Модель);
			
			Ресурсы = Новый Структура("Номенклатура", Авторабота.Авторабота);
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Артикул"            , Авторабота.НомерРаботы);
			Реквизиты.Вставить("Наименование"       , Авторабота.НаименованиеРаботы);
			Реквизиты.Вставить("НаименованиеПолное" , Авторабота.НаименованиеПолное);
			
			РегистрыСведений.ОбменСAudaPadWeb_ТаблицаСоответствий.
				ОбновитьЗаписьВТаблицеСоответствий(Измерения, Ресурсы, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Товар Из ТаблицаСоответствияТоваров Цикл
		Если Товар.Номенклатура.Пустая() Тогда
			Товар.Номенклатура = НайтиСоздатьНоменклатуру(Товар);
		КонецЕсли;
		
		Если НЕ Товар.Номенклатура.Пустая() Тогда
			// обновим запись в таблице соответствий
			Измерения = Новый Структура;
			Измерения.Вставить("Хеш1"   , Товар.ХешНомер);
			Измерения.Вставить("Хеш2"   , Товар.ХешНомерНаименование);
			Измерения.Вставить("Модель" , Модель);
			
			Ресурсы = Новый Структура("Номенклатура", Товар.Номенклатура);
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Артикул"            , Товар.НомерДетали);
			Реквизиты.Вставить("Наименование"       , Товар.НаименованиеДетали);
			Реквизиты.Вставить("НаименованиеПолное" , Товар.НаименованиеДетали);
			
			РегистрыСведений.ОбменСAudaPadWeb_ТаблицаСоответствий.
				ОбновитьЗаписьВТаблицеСоответствий(Измерения, Ресурсы, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПоиск()
	
	Элементы.СписокЗаданий.ОтборСтрок = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоиск()
	
	Для Каждого Строка Из СписокЗаданий Цикл
		Если СтрНайти(Строка.НомерДела, ПоискПоЗаданиям) <> 0 ИЛИ
			СтрНайти(Строка.VIN, ПоискПоЗаданиям) <> 0 ИЛИ
			СтрНайти(Строка.ГосНомер, ПоискПоЗаданиям) <> 0 ИЛИ
			СтрНайти(Строка.Фамилия, ПоискПоЗаданиям) <> 0 Тогда
		
			Строка.УдовлетворяетУсловиюПоиска = Истина;
			
		Иначе
			Строка.УдовлетворяетУсловиюПоиска = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СписокЗаданий.ОтборСтрок = Новый ФиксированнаяСтруктура("УдовлетворяетУсловиюПоиска", Истина);
	
КонецПроцедуры

#Область УправлениеИнтерфейсом

&НаКлиенте
Процедура ОбновитьСтатусЗагрузки()
	
	Элементы.ГруппаСтраницыСписокЗаданий.ТекущаяСтраница =
		?(ДлительнаяОперацияЗагрузкаЗаданий, Элементы.СписокЗаданийДлительнаяОперация, Элементы.СтраницаСписокЗаданий);
		
	Элементы.ГруппаСтраницыСписокКалькуляций.ТекущаяСтраница =
		?(ДлительнаяОперацияЗагрузкаКалькуляций, Элементы.СписокКалькуляцийДлительнаяОперация, Элементы.СтраницаСписокКалькуляций);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
//
&НаСервере
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ВыполнитьОбновлениеЗаданийВФоне()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторФоновогоЗадания);
	
	Фильтры = Новый Структура;
	Фильтры.Вставить("НачалоПериодаФильтр"    , Объект.НачалоПериодаФильтр);
	Фильтры.Вставить("ОкончаниеПериодаФильтр" , Объект.ОкончаниеПериодаФильтр);
	Фильтры.Вставить("СтатусЗадания"          , Объект.СтатусЗадания);
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ПараметрыПодключенияОбъекта", ОбменСAudaPadWebКлиентСервер.ПараметрыПодключенияОбъекта(Объект));
	ПараметрыДлительнойОперации.Вставить("Фильтры"                    , Фильтры);
	
	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ОбменСAudaPadWeb.ВыполнитьОбновлениеЗаданийВФоне",
		ПараметрыДлительнойОперации,
		"Обновление списка заданий");
	
	АдресХранилища               = РезультатВыполнения.АдресХранилища;
	ИдентификаторФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеОбновленияЗаданийВФоне();
	КонецЕсли;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ОбработатьЗавершениеОбновленияЗаданийВФоне()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатВыполнения) = Тип("Строка") Тогда
		ОбменСAudaPadWebЗащищенныеФункцииСервер.DOMРазборСпискаXML(РезультатВыполнения, СписокЗаданий);
		Возврат Новый Структура;
	ИначеЕсли ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Возврат РезультатВыполнения;
	Иначе
		Возврат Новый Структура("Успех,Сообщение", Ложь, "Неклассифицированная ошибка");
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьОбновлениеКалькуляцийЗаданияВФоне()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторФоновогоЗадания);
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ИдентификаторДела"   , Объект.ИдентификаторДела);
	ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", ВРег(Строка(Объект.ИдентификаторЗадания)));
	ПараметрыДлительнойОперации.Вставить("СписокКалькуляций"   , СписокКалькуляций.Выгрузить());
	ПараметрыДлительнойОперации.Вставить("ПараметрыПодключения", ОбменСAudaPadWebКлиентСервер.ПараметрыПодключенияОбъекта(Объект));
	
	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ОбменСAudaPadWeb.ВыполнитьОбновлениеКалькуляцийЗаданияВФоне",
		ПараметрыДлительнойОперации,
		"Обновление списка калькуляций");
		
	АдресХранилища               = РезультатВыполнения.АдресХранилища;
	ИдентификаторФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеОбновленияКалькуляцийЗаданияВФоне();
	КонецЕсли;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ОбработатьЗавершениеОбновленияКалькуляцийЗаданияВФоне()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Свойство("СписокКалькуляций") Тогда
			СписокКалькуляций.Загрузить(РезультатВыполнения.СписокКалькуляций);
			
			Отбор = Новый Структура("ИдентификаторДела", РезультатВыполнения.ИдентификаторДела);
			СтрокиЗаданий = СписокЗаданий.НайтиСтроки(Отбор);
			Если СтрокиЗаданий.Количество() > 0 Тогда
				СтрокиЗаданий[0].Загружено = Истина;
			КонецЕсли;
		ИначеЕсли РезультатВыполнения.Свойство("Успех") Тогда
			Возврат РезультатВыполнения;
		Иначе
			Возврат Новый Структура("Успех,Сообщение", Ложь, "Неклассифицированная ошибка");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеОбновленияЗаданий()
	
	Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		Результат = ОбработатьЗавершениеОбновленияЗаданийВФоне();
		Если Результат.Свойство("Успех") И НЕ Результат.Успех Тогда
			ПоказатьПредупреждение(, Результат.Сообщение,, "Ошибка обновления списка заданий");
		КонецЕсли;
		
		Если НЕ(ПустаяСтрока(ПоискПоЗаданиям) ИЛИ СтрДлина(ПоискПоЗаданиям) < 4) Тогда
			УстановитьПоиск();
		КонецЕсли;
		
		ДлительнаяОперацияЗагрузкаЗаданий = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияЗаданий", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеОбновленияКалькуляцийЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		Результат = ОбработатьЗавершениеОбновленияКалькуляцийЗаданияВФоне();
		Если Результат.Свойство("Успех") И НЕ Результат.Успех Тогда
			ПоказатьПредупреждение(, Результат.Сообщение,, "Ошибка обновления списка калькуляций");
		КонецЕсли;
		
		ДлительнаяОперацияЗагрузкаКалькуляций = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияКалькуляцийЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокЗаданийПриАктивизацииСтрокиОтложено()
	
	Если Элементы.СписокЗаданий.ТекущиеДанные = Неопределено Тогда
		Объект.ИдентификаторДела    = Неопределено;
		Объект.ИдентификаторЗадания = Неопределено;
	Иначе
		Объект.ИдентификаторДела    = Элементы.СписокЗаданий.ТекущиеДанные.ИдентификаторДела;
		Объект.ИдентификаторЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ИдентификаторЗадания;
	КонецЕсли;
	
	Отбор = Новый Структура("ИдентификаторДела", Объект.ИдентификаторДела);
	Если Элементы.СписокЗаданий.ТекущиеДанные <> Неопределено И НЕ СписокЗаданий.НайтиСтроки(Отбор)[0].Загружено Тогда
		ОбновитьКалькуляцииЗадания(Неопределено);
	КонецЕсли;
	
	Элементы.СписокКалькуляций.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСXDTOОбъектами

// транзитная функция для сокращения текста
&НаСервере
Функция ПолучитьСвойствоXDTO(ОбъектXDTO, ПутьКСвойству)
	
	Возврат ОбменСAudaPadWeb.ПолучитьСвойствоXDTO(ОбъектXDTO, ПутьКСвойству);
	
КонецФункции

// транзитная функция для сокращения текста
&НаСервере
Функция ЗначениеXMLВ1С(Значение, Тип)
	
	Возврат ОбменСAudaPadWeb.ЗначениеXMLВ1С(Значение, Тип);
	
КонецФункции

&НаСервере
Процедура ПрочитатьИнформациюПоАвтоработамИзКалькуляции(Знач ОбъектXDTO, ДанныеСтроки)
	
	Если ОбъектXDTO.Свойства().Получить("CLASSResult") = Неопределено ИЛИ
		ОбъектXDTO.CLASSResult.Свойства().Получить("CLASSXml") = Неопределено ИЛИ 
		ОбъектXDTO.CLASSResult.CLASSXml.Свойства().Получить("CalcData") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтроки.Вставить("ВалютаКалькуляцииСтрока",
		ПолучитьСвойствоXDTO(ОбъектXDTO, "CLASSResult.CLASSXml.GlobalData.CalcParam.CurDtl.ISO"));
	
	Если ОбъектXDTO.CLASSResult.CLASSXml.CalcData.Свойства().Получить("Paint") <> Неопределено Тогда
		ОбъектXDTOTemp = ОбъектXDTO.CLASSResult.CLASSXml.CalcData.Paint;
		
		#Область Параметры_окраски_PaintHeader
		
		Если ОбъектXDTOTemp.Свойства().Получить("PaintHeader") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTOTemp.PaintHeader) = Тип("СписокXDTO") Тогда
				PaintHeaders = ОбъектXDTOTemp.PaintHeader;
			Иначе
				PaintHeaders = Новый Массив;
				Если ТипЗнч(ОбъектXDTOTemp.PaintHeader) = Тип("ОбъектXDTO") Тогда
					PaintHeaders.Добавить(ОбъектXDTOTemp.PaintHeader);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого PaintHeader Из PaintHeaders Цикл
				НоваяСтрока = ПараметрыОкраски.Добавить();
				НоваяСтрока.ТипОкраски              = ПолучитьСвойствоXDTO(PaintHeader, "PaintTyp");
				НоваяСтрока.КодТипаОкраски          = ПолучитьСвойствоXDTO(PaintHeader, "PaintCd");
				НоваяСтрока.НаименованиеТипаОкраски = ПолучитьСвойствоXDTO(PaintHeader, "PaintTypDesc");
				НоваяСтрока.ТипОкраскиСистема       = ПолучитьСвойствоXDTO(PaintHeader, "PaintSystemTyp");
				НоваяСтрока.КоличествоРП            = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PaintHeader, "PaintSystemTyp.TimeBase"), "Число");
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_По_Окраске_PaintPreparations
		
		// PaintPreparations.PntPrep
		Если ОбъектXDTOTemp.Свойства().Получить("PaintPreparations") <> Неопределено И
			ОбъектXDTOTemp.PaintPreparations.Свойства().Получить("PntPrep") <> Неопределено Тогда
			
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTOTemp.PaintPreparations.PntPrep) = Тип("СписокXDTO") Тогда
				PaintPreparations = ОбъектXDTOTemp.PaintPreparations.PntPrep;
			Иначе
				PaintPreparations = Новый Массив;
				Если ТипЗнч(ОбъектXDTOTemp.PaintPreparations.PntPrep) = Тип("ОбъектXDTO") Тогда
					PaintPreparations.Добавить(ОбъектXDTOTemp.PaintPreparations.PntPrep);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого PntPrep Из PaintPreparations Цикл
				
				// Бывают случаи когда 1 строкой приходит подготовка сопутствующих и основных работ, для этого сделан дополнительный обход.
				Если PntPrep.Свойства().Получить("Amnt") <> Неопределено И PntPrep.Свойства().Получить("PlasticAmnt") <> Неопределено Тогда
					
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					
					// Стоимость работ и валюта
					Если PntPrep.Свойства().Получить("PlasticAmnt") <> Неопределено Тогда
						PntPrepAmnt = ПолучитьСвойствоXDTO(PntPrep, "PlasticAmnt");
						PntPrepCur = ПолучитьСвойствоXDTO(PntPrep.PlasticAmnt, "Cur");
					Иначе
						PntPrepAmnt = Неопределено;
						PntPrepCur = Неопределено;
					КонецЕсли;
					
					Если PntPrepAmnt <> Неопределено И PntPrepCur <> Неопределено Тогда
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(PntPrepAmnt, "Число");
						НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(PntPrepCur, "Валюта");
					КонецЕсли;
					
					// Количество РП и измерение РП
					Если PntPrep.Свойства().Получить("PlasticWuNo") <> Неопределено Тогда
						PntPrepWuNoUnit = ПолучитьСвойствоXDTO(PntPrep.PlasticWuNo, "Unit");
						PntPrepWuNoVal = ПолучитьСвойствоXDTO(PntPrep.PlasticWuNo, "Val");
					Иначе
						PntPrepWuNoUnit = Неопределено;
						PntPrepWuNoVal = Неопределено;
					КонецЕсли;
					
					Если PntPrepWuNoUnit <> Неопределено И PntPrepWuNoVal <> Неопределено Тогда
						НоваяСтрока.КоличествоРП = ЗначениеXMLВ1С(PntPrepWuNoVal, "Число");
						НоваяСтрока.КоличествоРП_Измерение = PntPrepWuNoUnit;
					КонецЕсли;
					
					// Время и измерение
					Если PntPrep.Свойства().Получить("PlasticHrNo") <> Неопределено Тогда
						PntPrepHrNoUnit = ПолучитьСвойствоXDTO(PntPrep.PlasticHrNo, "Unit");
						PntPrepHrNoVal = ПолучитьСвойствоXDTO(PntPrep.PlasticHrNo, "Val");
					Иначе
						PntPrepHrNoUnit = Неопределено;
						PntPrepHrNoVal = Неопределено;
					КонецЕсли;
					
					Если PntPrepHrNoUnit <> Неопределено И PntPrepHrNoVal <> Неопределено Тогда
						НоваяСтрока.Время = ЗначениеXMLВ1С(PntPrepHrNoVal, "Число");
						НоваяСтрока.Время_Измерение = PntPrepHrNoUnit;
					КонецЕсли;
					
					Если PntPrep.Свойства().Получить("PlasticTxC") <> Неопределено Тогда
						PntPrepName = ПолучитьСвойствоXDTO(PntPrep, "PlasticTxC");
					Иначе
						PntPrepName = Неопределено;
					КонецЕсли;
					
					Если PntPrepName <> Неопределено Тогда
						НоваяСтрока.НаименованиеРаботы = PntPrepName;
					КонецЕсли;
					
					НоваяСтрока.НомерРаботы = ПолучитьСвойствоXDTO(PntPrep, "LbrPosNo");
					НоваяСтрока.Источник    = "PaintPreparations";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
					// описание работы собираем из нескольких реквизитов
					ОписаниеАвтоработы = Новый Массив;
					
					// "MoreDesc.AddDesc"
					Если PntPrep.Свойства().Получить("MoreDesc") <> Неопределено И
						PntPrep.MoreDesc.Свойства().Получить("AddDesc") <> Неопределено Тогда
						
						Если ТипЗнч(PntPrep.MoreDesc.AddDesc) = Тип("СписокXDTO") Тогда
							AddDesc = PntPrep.MoreDesc.AddDesc;
						Иначе
							AddDesc = Новый Массив;
							Если ТипЗнч(PntPrep.MoreDesc.AddDesc) = Тип("ОбъектXDTO") Тогда
								AddDesc.Добавить(PntPrep.MoreDesc.AddDesc);
							КонецЕсли;
						КонецЕсли;
						
						
						Для Каждого Описание Из AddDesc Цикл
							ОписаниеАвтоработы.Добавить(Описание);
						КонецЦикла;
					КонецЕсли;
					
					Если ОписаниеАвтоработы.Количество() > 0 Тогда
						НоваяСтрока.ОписаниеРаботы = СтрСоединить(ОписаниеАвтоработы, " ");
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				
				// Стоимость работ и валюта
				Если PntPrep.Свойства().Получить("Amnt") <> Неопределено Тогда
					PntPrepAmnt = ПолучитьСвойствоXDTO(PntPrep, "Amnt");
					PntPrepCur = ПолучитьСвойствоXDTO(PntPrep.Amnt, "Cur");
				ИначеЕсли PntPrep.Свойства().Получить("PlasticAmnt") <> Неопределено Тогда
					PntPrepAmnt = ПолучитьСвойствоXDTO(PntPrep, "PlasticAmnt");
					PntPrepCur = ПолучитьСвойствоXDTO(PntPrep.PlasticAmnt, "Cur");
				ИначеЕсли PntPrep.Свойства().Получить("ColMixingAmnt") <> Неопределено Тогда
					PntPrepAmnt = ПолучитьСвойствоXDTO(PntPrep, "ColMixingAmnt");
					PntPrepCur = ПолучитьСвойствоXDTO(PntPrep.ColMixingAmnt, "Cur");
				ИначеЕсли PntPrep.Свойства().Получить("ColSampleAmnt") <> Неопределено Тогда
					PntPrepAmnt = ПолучитьСвойствоXDTO(PntPrep, "ColSampleAmnt");
					PntPrepCur = ПолучитьСвойствоXDTO(PntPrep.ColSampleAmnt, "Cur");
				ИначеЕсли PntPrep.Свойства().Получить("Price") <> Неопределено Тогда
					PntPrepAmnt = ПолучитьСвойствоXDTO(PntPrep, "Price");
					PntPrepCur = ПолучитьСвойствоXDTO(PntPrep.Price, "Cur");
				Иначе
					PntPrepAmnt = Неопределено;
					PntPrepCur = Неопределено;
				КонецЕсли;
				
				Если PntPrepAmnt <> Неопределено И PntPrepCur <> Неопределено Тогда
					НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(PntPrepAmnt, "Число");
					НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(PntPrepCur, "Валюта");
				КонецЕсли;
				
				// Количество РП и измерение РП
				Если PntPrep.Свойства().Получить("WuNo") <> Неопределено Тогда
					PntPrepWuNoUnit = ПолучитьСвойствоXDTO(PntPrep.WuNo, "Unit");
					PntPrepWuNoVal = ПолучитьСвойствоXDTO(PntPrep.WuNo, "Val");
				ИначеЕсли PntPrep.Свойства().Получить("PlasticWuNo") <> Неопределено Тогда
					PntPrepWuNoUnit = ПолучитьСвойствоXDTO(PntPrep.PlasticWuNo, "Unit");
					PntPrepWuNoVal = ПолучитьСвойствоXDTO(PntPrep.PlasticWuNo, "Val");
				ИначеЕсли PntPrep.Свойства().Получить("ColMixingWuNo") <> Неопределено Тогда
					PntPrepWuNoUnit = ПолучитьСвойствоXDTO(PntPrep.ColMixingWuNo, "Unit");
					PntPrepWuNoVal = ПолучитьСвойствоXDTO(PntPrep.ColMixingWuNo, "Val");
				ИначеЕсли PntPrep.Свойства().Получить("ColSampleWuNo") <> Неопределено Тогда
					PntPrepWuNoUnit = ПолучитьСвойствоXDTO(PntPrep.ColSampleWuNo, "Unit");
					PntPrepWuNoVal = ПолучитьСвойствоXDTO(PntPrep.ColSampleWuNo, "Val");
				Иначе
					PntPrepWuNoUnit = Неопределено;
					PntPrepWuNoVal = Неопределено;
				КонецЕсли;
				
				Если PntPrepWuNoUnit <> Неопределено И PntPrepWuNoVal <> Неопределено Тогда
					НоваяСтрока.КоличествоРП = ЗначениеXMLВ1С(PntPrepWuNoVal, "Число");
					НоваяСтрока.КоличествоРП_Измерение = PntPrepWuNoUnit;
				КонецЕсли;
				
				// Время и измерение
				Если PntPrep.Свойства().Получить("HrNo") <> Неопределено Тогда
					PntPrepHrNoUnit = ПолучитьСвойствоXDTO(PntPrep.HrNo, "Unit");
					PntPrepHrNoVal = ПолучитьСвойствоXDTO(PntPrep.HrNo, "Val");
				ИначеЕсли PntPrep.Свойства().Получить("PlasticHrNo") <> Неопределено Тогда
					PntPrepHrNoUnit = ПолучитьСвойствоXDTO(PntPrep.PlasticHrNo, "Unit");
					PntPrepHrNoVal = ПолучитьСвойствоXDTO(PntPrep.PlasticHrNo, "Val");
				ИначеЕсли PntPrep.Свойства().Получить("ColMixingHrNo") <> Неопределено Тогда
					PntPrepHrNoUnit = ПолучитьСвойствоXDTO(PntPrep.ColMixingHrNo, "Unit");
					PntPrepHrNoVal = ПолучитьСвойствоXDTO(PntPrep.ColMixingHrNo, "Val");
				ИначеЕсли PntPrep.Свойства().Получить("ColSampleHrNo") <> Неопределено Тогда
					PntPrepHrNoUnit = ПолучитьСвойствоXDTO(PntPrep.ColSampleHrNo, "Unit");
					PntPrepHrNoVal = ПолучитьСвойствоXDTO(PntPrep.ColSampleHrNo, "Val");
				Иначе
					PntPrepHrNoUnit = Неопределено;
					PntPrepHrNoVal = Неопределено;
				КонецЕсли;
				
				Если PntPrepHrNoUnit <> Неопределено И PntPrepHrNoVal <> Неопределено Тогда
					НоваяСтрока.Время = ЗначениеXMLВ1С(PntPrepHrNoVal, "Число");
					НоваяСтрока.Время_Измерение = PntPrepHrNoUnit;
				КонецЕсли;
				
				Если PntPrep.Свойства().Получить("WuNoTxC") <> Неопределено Тогда
					PntPrepName = ПолучитьСвойствоXDTO(PntPrep, "WuNoTxC");
				ИначеЕсли PntPrep.Свойства().Получить("PlasticTxC") <> Неопределено Тогда
					PntPrepName = ПолучитьСвойствоXDTO(PntPrep, "PlasticTxC");
				ИначеЕсли PntPrep.Свойства().Получить("ColorMixTxC") <> Неопределено Тогда
					PntPrepName = ПолучитьСвойствоXDTO(PntPrep, "ColorMixTxC");
				ИначеЕсли PntPrep.Свойства().Получить("ColorSamplTxC") <> Неопределено Тогда
					PntPrepName = ПолучитьСвойствоXDTO(PntPrep, "ColorSamplTxC");
				ИначеЕсли PntPrep.Свойства().Получить("CompositeDesc") <> Неопределено Тогда
					PntPrepName = ПолучитьСвойствоXDTO(PntPrep, "CompositeDesc");
				Иначе
					PntPrepName = Неопределено;
				КонецЕсли;
				
				Если PntPrepName <> Неопределено Тогда
					НоваяСтрока.НаименованиеРаботы = PntPrepName;
				КонецЕсли;
				
				НоваяСтрока.НомерРаботы = ПолучитьСвойствоXDTO(PntPrep, "LbrPosNo");
				НоваяСтрока.Источник    = "PaintPreparations";
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
				
				// описание работы собираем из нескольких реквизитов
				ОписаниеАвтоработы = Новый Массив;
				
				// "MoreDesc.AddDesc"
				Если PntPrep.Свойства().Получить("MoreDesc") <> Неопределено И
					PntPrep.MoreDesc.Свойства().Получить("AddDesc") <> Неопределено Тогда
					
					Если ТипЗнч(PntPrep.MoreDesc.AddDesc) = Тип("СписокXDTO") Тогда
						AddDesc = PntPrep.MoreDesc.AddDesc;
					Иначе
						AddDesc = Новый Массив;
						Если ТипЗнч(PntPrep.MoreDesc.AddDesc) = Тип("ОбъектXDTO") Тогда
							AddDesc.Добавить(PntPrep.MoreDesc.AddDesc);
						КонецЕсли;
					КонецЕсли;
					
					
					Для Каждого Описание Из AddDesc Цикл
						ОписаниеАвтоработы.Добавить(Описание);
					КонецЦикла;
				КонецЕсли;
				
				Если ОписаниеАвтоработы.Количество() > 0 Тогда
					НоваяСтрока.ОписаниеРаботы = СтрСоединить(ОписаниеАвтоработы, " ");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_По_Окраске_PaintPositions
		
		// PaintPositions.PaintDtl
		Если ОбъектXDTOTemp.Свойства().Получить("PaintPositions") <> Неопределено И
			ОбъектXDTOTemp.PaintPositions.Свойства().Получить("PaintDtl") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTOTemp.PaintPositions.PaintDtl) = Тип("СписокXDTO") Тогда
				PaintPositions = ОбъектXDTOTemp.PaintPositions.PaintDtl;
			Иначе
				PaintPositions = Новый Массив;
				Если ТипЗнч(ОбъектXDTOTemp.PaintPositions.PaintDtl) = Тип("ОбъектXDTO") Тогда
					PaintPositions.Добавить(ОбъектXDTOTemp.PaintPositions.PaintDtl);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого PaintDtl Из PaintPositions Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				WuNoFixVal = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PaintDtl, "WuNoFix.Val"), "Число");
				НоваяСтрока.КоличествоРП =
					?(ЗначениеЗаполнено(WuNoFixVal), WuNoFixVal, ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PaintDtl, "WuNo.Val"), "Число"));
				
				WuNoFixUnit = ПолучитьСвойствоXDTO(PaintDtl, "WuNoFix.Unit");
				НоваяСтрока.КоличествоРП_Измерение =
					?(ЗначениеЗаполнено(WuNoFixUnit), WuNoFixUnit, ПолучитьСвойствоXDTO(PaintDtl, "WuNo.Unit"));
				
				Если PaintDtl.Свойства().Получить("AdjacentDeduGrpTot") <> Неопределено Тогда
					LbrFixCur = ПолучитьСвойствоXDTO(PaintDtl, "AdjacentDeduGrpTot.LbrFix.Cur");
					Если НЕ ЗначениеЗаполнено(LbrFixCur) Тогда
						LbrFixCur = ПолучитьСвойствоXDTO(PaintDtl, "AdjacentDeduGrpTot.Lbr.Cur");
					КонецЕсли;
					Lbr = ПолучитьСвойствоXDTO(PaintDtl, "AdjacentDeduGrpTot.Lbr");
				Иначе
					LbrFixCur = ПолучитьСвойствоXDTO(PaintDtl, "AdjacentDeduGrpTot.LbrFix.Cur");
					Lbr = ПолучитьСвойствоXDTO(PaintDtl, "Lbr");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(LbrFixCur) Тогда
					LbrFixCur = ПолучитьСвойствоXDTO(PaintDtl, "AdjacentDeduGrpTot.Lbr.Cur");
					НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(LbrFixCur, "Валюта");
				КонецЕсли;
				
				НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(LbrFixCur, "Валюта");
				
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(PaintDtl, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(PaintDtl, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(PaintDtl, "Desc");
				НоваяСтрока.Источник               = "PaintPositions";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(PaintDtl, "RepTypDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(PaintDtl, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(Lbr, "Число");
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		#КонецОбласти
		
		#Область Автоработы_По_Окраске_PaintTotMat
		
		// PaintTotMat
		Если ОбъектXDTOTemp.Свойства().Получить("PaintTotMat") <> Неопределено Тогда
			
			//LE
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("LE") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.LE;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.LE);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого LE Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(LE, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если LE.Свойства().Получить("Price") <> Неопределено Тогда
						Price = LE.Price;
						СтоимостьРабот = ПолучитьСвойствоXDTO(LE, "Price");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Price.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Price.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
			//LE1
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("LE1") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE1) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.LE1;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE1) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.LE1);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого LE1 Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(LE1, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если LE1.Свойства().Получить("Price") <> Неопределено Тогда
						Price = LE1.Price;
						СтоимостьРабот = ПолучитьСвойствоXDTO(LE1, "Price");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Price.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Price.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
			//LE2
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("LE2") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE2) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.LE2;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE2) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.LE2);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого LE2 Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(LE2, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если LE2.Свойства().Получить("Price") <> Неопределено Тогда
						Price = LE2.Price;
						СтоимостьРабот = ПолучитьСвойствоXDTO(LE2, "Price");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Price.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Price.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
			//LE3
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("LE3") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE3) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.LE3;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE3) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.LE3);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого LE3 Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(LE3, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если LE3.Свойства().Получить("Price") <> Неопределено Тогда
						Price = LE3.Price;
						СтоимостьРабот = ПолучитьСвойствоXDTO(LE3, "Price");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Price.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Price.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
			//LE4
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("LE4") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE4) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.LE4;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LE4) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.LE4);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого LE4 Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(LE4, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если LE4.Свойства().Получить("Price") <> Неопределено Тогда
						Price = LE4.Price;
						СтоимостьРабот = ПолучитьСвойствоXDTO(LE4, "Price");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Price.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Price.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
			// LLev2
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("LLev2") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LLev2) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.LLev2;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LLev2) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.LLev2);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого LLev2 Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(LLev2, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если LLev2.Свойства().Получить("Price") <> Неопределено Тогда
						Price = LLev2.Price;
						СтоимостьРабот = ПолучитьСвойствоXDTO(LLev2, "Price");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Price.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Price.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
			// LILev3
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("LILev3") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LILev3) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.LILev3;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.LILev3) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.LILev3);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого LILev3 Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(LILev3, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если LILev3.Свойства().Получить("Price") <> Неопределено Тогда
						Price = LILev3.Price;
						СтоимостьРабот = ПолучитьСвойствоXDTO(LILev3, "Price");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Price.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Price.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
			// MatConst
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("MatConst") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.MatConst) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.MatConst;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.MatConst) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.MatConst);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого MatConst Из PaintTotMat Цикл
					
					Если MatConst.Свойства().Получить("TxC") <> Неопределено Тогда
						
						НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
						НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(MatConst, "TxC");
						НоваяСтрока.Источник = "PaintTotMat";
						
						Если MatConst.Свойства().Получить("Amnt") <> Неопределено Тогда
							Amnt = MatConst.Amnt;
							СтоимостьРабот = ПолучитьСвойствоXDTO(MatConst, "Amnt");
							НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
							Если Amnt.Свойства().Получить("Cur") <> Неопределено Тогда
								НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Amnt.Cur, "Валюта");
							КонецЕсли;
						КонецЕсли;
						
						НоваяСтрока.КоличествоРП = 1;
						НоваяСтрока.КоличествоРП_Измерение = "WU";
						
						// пересчитаем стоимость по курсу
						ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
						
					КонецЕсли;
					
					Если MatConst.Свойства().Получить("PlasticTxC") <> Неопределено Тогда
						
						НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
						НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(MatConst, "PlasticTxC");
						НоваяСтрока.Источник = "PaintTotMat";
						
						Если MatConst.Свойства().Получить("Plastic") <> Неопределено Тогда
							Plastic = MatConst.Plastic;
							СтоимостьРабот = ПолучитьСвойствоXDTO(MatConst, "Plastic");
							НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
							Если Plastic.Свойства().Получить("Cur") <> Неопределено Тогда
								НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Plastic.Cur, "Валюта");
							КонецЕсли;
						КонецЕсли;
						
						НоваяСтрока.КоличествоРП = 1;
						НоваяСтрока.КоличествоРП_Измерение = "WU";
						
						// пересчитаем стоимость по курсу
						ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Matldx
			Если ОбъектXDTOTemp.PaintTotMat.Свойства().Получить("MatIdx") <> Неопределено Тогда
				// подготовим коллекцию для обхода
				Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.MatIdx) = Тип("СписокXDTO") Тогда
					PaintTotMat = ОбъектXDTOTemp.PaintTotMat.MatIdx;
				Иначе
					PaintTotMat = Новый Массив;
					Если ТипЗнч(ОбъектXDTOTemp.PaintTotMat.MatIdx) = Тип("ОбъектXDTO") Тогда
						PaintTotMat.Добавить(ОбъектXDTOTemp.PaintTotMat.MatIdx);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого MatIdx Из PaintTotMat Цикл
					НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
					НоваяСтрока.НаименованиеРаботы  = ПолучитьСвойствоXDTO(MatIdx, "Desc");
					НоваяСтрока.Источник = "PaintTotMat";
					
					Если MatIdx.Свойства().Получить("Amnt") <> Неопределено Тогда
						Amnt = MatIdx.Amnt;
						СтоимостьРабот = ПолучитьСвойствоXDTO(MatIdx, "Amnt");
						НоваяСтрока.СтоимостьРабот = ЗначениеXMLВ1С(СтоимостьРабот, "Число");
						Если Amnt.Свойства().Получить("Cur") <> Неопределено Тогда
							НоваяСтрока.СтоимостьРабот_Валюта = ЗначениеXMLВ1С(Amnt.Cur, "Валюта");
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоРП = 1;
					НоваяСтрока.КоличествоРП_Измерение = "WU";
					
					// пересчитаем стоимость по курсу
					ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_По_Окраске_MfcPCChgs
		
		// MfcPCChgs.MfcPCChg
		Если ОбъектXDTOTemp.Свойства().Получить("MfcPCChgs") <> Неопределено И
			ОбъектXDTOTemp.MfcPCChgs.Свойства().Получить("MfcPCChg") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTOTemp.MfcPCChgs.MfcPCChg) = Тип("СписокXDTO") Тогда
				MfcPCChgs = ОбъектXDTOTemp.MfcPCChgs.MfcPCChg;
			Иначе
				MfcPCChgs = Новый Массив;
				Если ТипЗнч(ОбъектXDTOTemp.MfcPCChgs.MfcPCChg) = Тип("ОбъектXDTO") Тогда
					MfcPCChgs.Добавить(ОбъектXDTOTemp.MfcPCChgs.MfcPCChg);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого MfcPCChg Из MfcPCChgs Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(MfcPCChg, "Lbr.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(MfcPCChg, "WuNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(MfcPCChg, "WuNo.Unit");
				
				Desc1 = ПолучитьСвойствоXDTO(MfcPCChg, "Desc1");
				Desc2 = ПолучитьСвойствоXDTO(MfcPCChg, "Desc2");
				НоваяСтрока.НаименованиеРаботы = СокрЛП(СтрШаблон("%1 %2", Desc1, Desc2));
				НоваяСтрока.СтоимостьРабот     = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(MfcPCChg, "Lbr"), "Число");
				НоваяСтрока.Источник           = "MfcPCChgs";
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область  Автоработы_По_Окраске_ExtraItem
		
		// ExtraItems.ExtraItem
		Если ОбъектXDTOTemp.Свойства().Получить("ExtraItems") <> Неопределено И
			ОбъектXDTOTemp.ExtraItems.Свойства().Получить("ExtraItem") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTOTemp.ExtraItems.ExtraItem) = Тип("СписокXDTO") Тогда
				ExtraItems = ОбъектXDTOTemp.ExtraItems.ExtraItem;
			Иначе
				ExtraItems = Новый Массив;
				Если ТипЗнч(ОбъектXDTOTemp.ExtraItems.ExtraItem) = Тип("ОбъектXDTO") Тогда
					ExtraItems.Добавить(ОбъектXDTOTemp.ExtraItems.ExtraItem);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ExtraItem Из ExtraItems Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(ExtraItem, "Amnt.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(ExtraItem, "WuNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(ExtraItem, "WuNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(ExtraItem, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(ExtraItem, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(ExtraItem, "PartDesc");
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(ExtraItem, "Desc");
				НоваяСтрока.Источник               = "ExtraItem";
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(ExtraItem, "Amnt"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область  Автоработы_По_Окраске_RiskDetails
		
		// RiskDetails.RiskDetail
		Если ОбъектXDTOTemp.Свойства().Получить("RiskDetails") <> Неопределено И
			ОбъектXDTOTemp.RiskDetails.Свойства().Получить("RiskDetail") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTOTemp.RiskDetails.RiskDetail) = Тип("СписокXDTO") Тогда
				RiskDetails = ОбъектXDTOTemp.RiskDetails.RiskDetail;
			Иначе
				RiskDetails = Новый Массив;
				Если ТипЗнч(ОбъектXDTOTemp.RiskDetails.RiskDetail) = Тип("ОбъектXDTO") Тогда
					RiskDetails.Добавить(ОбъектXDTOTemp.RiskDetails.RiskDetail);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого RiskDetail Из RiskDetails Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(RiskDetail, "Amnt.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(RiskDetail, "WuNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(RiskDetail, "WuNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(RiskDetail, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(RiskDetail, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(RiskDetail, "PartDesc");
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(RiskDetail, "Desc");
				НоваяСтрока.Источник               = "ExtraItem";
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(RiskDetail, "Amnt"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
	Если ОбъектXDTO.CLASSResult.CLASSXml.CalcData.Свойства().Получить("Labor") <> Неопределено Тогда
		ОбъектXDTO = ОбъектXDTO.CLASSResult.CLASSXml.CalcData.Labor;
		
		#Область Автоработы_Сегмента_PartComposits
		
		// обработаем список PartComposits
		Если ОбъектXDTO.Свойства().Получить("PartComposits") <> Неопределено И
			ОбъектXDTO.PartComposits.Свойства().Получить("PartComposit") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.PartComposits.PartComposit) = Тип("СписокXDTO") Тогда
				PartComposits = ОбъектXDTO.PartComposits.PartComposit;
			Иначе
				PartComposits = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.PartComposits.PartComposit) = Тип("ОбъектXDTO") Тогда
					PartComposits.Добавить(ОбъектXDTO.PartComposits.PartComposit);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого PartComposit Из PartComposits Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PartComposit, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PartComposit, "WuNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(PartComposit, "WuNo.Unit");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PartComposit, "HrNo.Val"), "Число");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(PartComposit, "HrNo.Unit");
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(PartComposit, "CompositeDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(PartComposit, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PartComposit, "Price"), "Число");
				НоваяСтрока.Источник               = "PartComposits";
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
				
				ОписаниеАвтоработы = Новый Массив;
				// Описание работы собираем из нескольких реквизитов
				// "MoreDesc.AddDesc".
				Если PartComposit.Свойства().Получить("MoreDesc") <> Неопределено И
					PartComposit.MoreDesc.Свойства().Получить("AddDesc") <> Неопределено Тогда
					
					Если ТипЗнч(PartComposit.MoreDesc.AddDesc) = Тип("СписокXDTO") Тогда
						AddDesc = PartComposit.MoreDesc.AddDesc;
					Иначе
						AddDesc = Новый Массив;
						Если ТипЗнч(PartComposit.MoreDesc.AddDesc) = Тип("ОбъектXDTO") Тогда
							AddDesc.Добавить(PartComposit.MoreDesc.AddDesc);
						КонецЕсли;
					КонецЕсли;
					
					
					Для Каждого Описание Из AddDesc Цикл
						ОписаниеАвтоработы.Добавить(Описание);
					КонецЦикла;
				КонецЕсли;
				
				// "CompositeDesc.MoreDesc.AddDesc"
				Если PartComposit.Свойства().Получить("CompositeDesc") <> Неопределено И
					ТипЗнч(PartComposit.CompositeDesc) = Тип("ОбъектXDTO") И
					PartComposit.CompositeDesc.Свойства().Получить("MoreDesc") <> Неопределено И
					PartComposit.CompositeDesc.MoreDesc.Свойства().Получить("AddDesc") <> Неопределено Тогда
					
					Если ТипЗнч(PartComposit.CompositeDesc.MoreDesc.AddDesc) = Тип("СписокXDTO") Тогда
						AddDesc = PartComposit.CompositeDesc.MoreDesc.AddDesc;
					Иначе
						AddDesc = Новый Массив;
						Если ТипЗнч(PartComposit.CompositeDesc.MoreDesc.AddDesc) = Тип("ОбъектXDTO") Тогда
							AddDesc.Добавить(PartComposit.CompositeDesc.MoreDesc.AddDesc);
						КонецЕсли;
					КонецЕсли;
					
					
					Для Каждого Описание Из AddDesc Цикл
						ОписаниеАвтоработы.Добавить(Описание);
					КонецЦикла;
				КонецЕсли;
				
				Если ОписаниеАвтоработы.Количество() > 0 Тогда
					НоваяСтрока.ОписаниеРаботы = СтрСоединить(ОписаниеАвтоработы, " ");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_Сегмента_NetLabors
		
		// обработаем список NetLabors
		Если ОбъектXDTO.Свойства().Получить("NetLabors") <> Неопределено И
			ОбъектXDTO.NetLabors.Свойства().Получить("NetLabor") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.NetLabors.NetLabor) = Тип("СписокXDTO") Тогда
				NetLabors = ОбъектXDTO.NetLabors.NetLabor;
			Иначе
				NetLabors = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.NetLabors.NetLabor) = Тип("ОбъектXDTO") Тогда
					NetLabors.Добавить(ОбъектXDTO.NetLabors.NetLabor);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого NetLabor Из NetLabors Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NetLabor, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NetLabor, "WuNet.Val"), "Число");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NetLabor, "WuNetHrNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(NetLabor, "WuNet.Unit");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(NetLabor, "WuNetHrNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(NetLabor, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(NetLabor, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(NetLabor, "PartDesc");
				НоваяСтрока.Источник               = "NetLabors";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(NetLabor, "RepDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(NetLabor, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NetLabor, "Price"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_Сегмента_VDtls
		
		Если ОбъектXDTO.Свойства().Получить("VDtls") <> Неопределено И
			ОбъектXDTO.VDtls.Свойства().Получить("VDtl") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.VDtls.VDtl) = Тип("СписокXDTO") Тогда
				VDtls = ОбъектXDTO.VDtls.VDtl;
			Иначе
				VDtls = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.VDtls.VDtl) = Тип("ОбъектXDTO") Тогда
					VDtls.Добавить(ОбъектXDTO.VDtls.VDtl);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого VDtl Из VDtls Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(VDtl, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(VDtl, "WuNet.Val"), "Число");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(VDtl, "WuNetHrNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(VDtl, "WuNet.Unit");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(VDtl, "WuNetHrNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(VDtl, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(VDtl, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(VDtl, "PartDesc");
				НоваяСтрока.Источник               = "VDtls";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(VDtl, "RepDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(VDtl, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(VDtl, "Price"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_Сегмента_IDtls
		
		// IDtls.IDtl
		Если ОбъектXDTO.Свойства().Получить("IDtls") <> Неопределено И
			ОбъектXDTO.IDtls.Свойства().Получить("IDtl") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.IDtls.IDtl) = Тип("СписокXDTO") Тогда
				IDtls = ОбъектXDTO.IDtls.IDtl;
			Иначе
				IDtls = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.IDtls.IDtl) = Тип("ОбъектXDTO") Тогда
					IDtls.Добавить(ОбъектXDTO.IDtls.IDtl);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого IDtl Из IDtls Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(IDtl, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(IDtl, "WuNet.Val"), "Число");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(IDtl, "WuNetHrNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(IDtl, "WuNet.Unit");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(IDtl, "WuNetHrNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(IDtl, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(IDtl, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(IDtl, "PartDesc");
				НоваяСтрока.Источник               = "IDtls";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(IDtl, "RepDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(IDtl, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(IDtl, "Price"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_Сегмента_PDtls
		
		// PDtls.PDtl
		Если ОбъектXDTO.Свойства().Получить("PDtls") <> Неопределено И
			ОбъектXDTO.PDtls.Свойства().Получить("PDtl") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.PDtls.PDtl) = Тип("СписокXDTO") Тогда
				PDtls = ОбъектXDTO.PDtls.PDtl;
			Иначе
				PDtls = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.PDtls.PDtl) = Тип("ОбъектXDTO") Тогда
					PDtls.Добавить(ОбъектXDTO.PDtls.PDtl);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого PDtl Из PDtls Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PDtl, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PDtl, "WuNet.Val"), "Число");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PDtl, "WuNetHrNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(PDtl, "WuNet.Unit");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(PDtl, "WuNetHrNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(PDtl, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(PDtl, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(PDtl, "PartDesc");
				НоваяСтрока.Источник               = "PDtls";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(PDtl, "RepDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(PDtl, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PDtl, "Price"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_Сегмента_UDtls
		
		// UDtls.UDtl
		Если ОбъектXDTO.Свойства().Получить("UDtls") <> Неопределено И
			ОбъектXDTO.UDtls.Свойства().Получить("UDtl") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.UDtls.UDtl) = Тип("СписокXDTO") Тогда
				UDtls = ОбъектXDTO.UDtls.UDtl;
			Иначе
				UDtls = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.UDtls.UDtl) = Тип("ОбъектXDTO") Тогда
					UDtls.Добавить(ОбъектXDTO.UDtls.UDtl);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого UDtl Из UDtls Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(UDtl, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(UDtl, "WuNet.Val"), "Число");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(UDtl, "WuNetHrNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(UDtl, "WuNet.Unit");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(UDtl, "WuNetHrNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(UDtl, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(UDtl, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(UDtl, "PartDesc");
				НоваяСтрока.Источник               = "UDtls";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(UDtl, "RepDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(UDtl, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(UDtl, "Price"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_Сегмента_HDtls
		
		// HDtls.HDtl
		Если ОбъектXDTO.Свойства().Получить("HDtls") <> Неопределено И
			ОбъектXDTO.HDtls.Свойства().Получить("HDtl") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.HDtls.HDtl) = Тип("СписокXDTO") Тогда
				HDtls = ОбъектXDTO.HDtls.HDtl;
			Иначе
				HDtls = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.HDtls.HDtl) = Тип("ОбъектXDTO") Тогда
					HDtls.Добавить(ОбъектXDTO.HDtls.HDtl);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого HDtl Из HDtls Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(HDtl, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(HDtl, "WuNet.Val"), "Число");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(HDtl, "WuNetHrNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(HDtl, "WuNet.Unit");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(HDtl, "WuNetHrNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(HDtl, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(HDtl, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(HDtl, "PartDesc");
				НоваяСтрока.Источник               = "HDtls";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(HDtl, "RepDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(HDtl, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(HDtl, "Price"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Автоработы_Сегмента_NDtls
		
		// NDtls.NDtl
		Если ОбъектXDTO.Свойства().Получить("NDtls") <> Неопределено И
			ОбъектXDTO.NDtls.Свойства().Получить("NDtl") <> Неопределено Тогда
			// подготовим коллекцию для обхода
			Если ТипЗнч(ОбъектXDTO.NDtls.NDtl) = Тип("СписокXDTO") Тогда
				NDtls = ОбъектXDTO.NDtls.NDtl;
			Иначе
				NDtls = Новый Массив;
				Если ТипЗнч(ОбъектXDTO.NDtls.NDtl) = Тип("ОбъектXDTO") Тогда
					NDtls.Добавить(ОбъектXDTO.NDtls.NDtl);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого NDtl Из NDtls Цикл
				НоваяСтрока = ТаблицаСоответствияАвторабот.Добавить();
				НоваяСтрока.СтоимостьРабот_Валюта  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NDtl, "Price.Cur"), "Валюта");
				НоваяСтрока.КоличествоРП           = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NDtl, "WuNet.Val"), "Число");
				НоваяСтрока.Время                  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NDtl, "WuNetHrNo.Val"), "Число");
				НоваяСтрока.КоличествоРП_Измерение = ПолучитьСвойствоXDTO(NDtl, "WuNet.Unit");
				НоваяСтрока.Время_Измерение        = ПолучитьСвойствоXDTO(NDtl, "WuNetHrNo.Unit");
				НоваяСтрока.ТипРемонта             = ПолучитьСвойствоXDTO(NDtl, "RepTyp");
				НоваяСтрока.КодДетали              = ПолучитьСвойствоXDTO(NDtl, "GId");
				НоваяСтрока.НаименованиеДетали     = ПолучитьСвойствоXDTO(NDtl, "PartDesc");
				НоваяСтрока.Источник               = "NDtls";
				НоваяСтрока.НаименованиеРаботы     = ПолучитьСвойствоXDTO(NDtl, "RepDesc");
				НоваяСтрока.НомерРаботы            = ПолучитьСвойствоXDTO(NDtl, "LbrPosNo");
				НоваяСтрока.СтоимостьРабот         = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(NDtl, "Price"), "Число");
				
				// пересчитаем стоимость по курсу
				ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьРабот);
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
	// заполним рассчитываемые реквизиты
	УдаляемыеСтроки = Новый Массив;
	Для Каждого Авторабота Из ТаблицаСоответствияАвторабот Цикл
		Если ПустаяСтрока(Авторабота.НаименованиеРаботы) Тогда
			УдаляемыеСтроки.Добавить(Авторабота);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Авторабота.НаименованиеДетали) Тогда
			Авторабота.НаименованиеРаботы =
				СтрШаблон("%1(%2)", СокрЛП(Авторабота.НаименованиеРаботы), СокрЛП(Авторабота.НаименованиеДетали));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Авторабота.ОписаниеРаботы) Тогда
			Авторабота.НаименованиеПолное = СокрЛП(Авторабота.НаименованиеРаботы) + " " + СокрЛП(Авторабота.ОписаниеРаботы);
		Иначе
			Авторабота.НаименованиеПолное = СокрЛП(Авторабота.НаименованиеРаботы);
		КонецЕсли;
		
		Авторабота.ХешНомерНаименование = ОбменСAudaPadWeb.
			СформироватьХешСтроки(Авторабота.НомерРаботы+Авторабота.НаименованиеРаботы);
		
		Авторабота.ХешНаименованиеПолное = ОбменСAudaPadWeb.
			СформироватьХешСтроки(Авторабота.НомерРаботы+Авторабота.НаименованиеРаботы+Авторабота.НаименованиеПолное);
	КонецЦикла;
		
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаСоответствияАвторабот.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИнформациюПоТоварамИзКалькуляции(Знач ОбъектXDTO, ДанныеСтроки)
	
	Если ПолучитьСвойствоXDTO(ОбъектXDTO, "CLASSResult.CLASSXml.CalcData.SpareParts.PartDtls") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектXDTO.CLASSResult.CLASSXml.CalcData.SpareParts.PartDtls.PartDtl) = Тип("СписокXDTO") Тогда
		PartDtls = ОбъектXDTO.CLASSResult.CLASSXml.CalcData.SpareParts.PartDtls.PartDtl;
	Иначе
		PartDtls = Новый Массив;
		Если ТипЗнч(ОбъектXDTO.CLASSResult.CLASSXml.CalcData.SpareParts.PartDtls.PartDtl) = Тип("ОбъектXDTO") Тогда
			PartDtls.Добавить(ОбъектXDTO.CLASSResult.CLASSXml.CalcData.SpareParts.PartDtls.PartDtl);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого PartDtl Из PartDtls Цикл
		НоваяСтрока = ТаблицаСоответствияТоваров.Добавить();
		НоваяСтрока.КоличествоДеталей  = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(PartDtl, "Qty.Val"), "Число");
		НоваяСтрока.КодДетали          = ПолучитьСвойствоXDTO(PartDtl, "GId");
		НоваяСтрока.ТипРемонта         = ПолучитьСвойствоXDTO(PartDtl, "RepTyp");
		НоваяСтрока.НаименованиеДетали = ПолучитьСвойствоXDTO(PartDtl, "PartDesc");
		НоваяСтрока.Источник           = "PartDtls";
		НоваяСтрока.НомерДетали        = ПолучитьСвойствоXDTO(PartDtl, "PartNo");
		НоваяСтрока.СтоимостьДетали    = ПолучитьСвойствоXDTO(PartDtl, "Price");
		
		// пересчитаем стоимость по курсу
		
		Если НЕ ПустаяСтрока(НоваяСтрока.СтоимостьДетали) Тогда
			
			ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(ДанныеСтроки, НоваяСтрока, НоваяСтрока.СтоимостьДетали);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Товар Из ТаблицаСоответствияТоваров Цикл
		Товар.ХешНомер             = ОбменСAudaPadWeb.СформироватьХешСтроки(Товар.НомерДетали);
		Товар.ХешНомерНаименование = ОбменСAudaPadWeb.СформироватьХешСтроки(Товар.НомерДетали+Товар.НаименованиеДетали);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДополнительныеКоды(ДанныеКалькуляции, ДанныеСтроки)
	
	Попытка
		
		ЗначениеIDBlkDtl = ПолучитьСвойствоXDTO(
			ДанныеКалькуляции,
			"CLASSResult.CLASSXml.CalcData.CalcControl.ActivIDBlks.IDBlkDtl"
		);
		
		Если ЗначениеIDBlkDtl = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
	Исключение КонецПопытки; // BSLLS-off
	
	// IDBlkDtl.IDBlk
	Если ТипЗнч(ДанныеКалькуляции.CLASSResult.CLASSXml.CalcData.CalcControl.ActivIDBlks.IDBlkDtl) = Тип("СписокXDTO") Тогда
		IDBlkDtl = ДанныеКалькуляции.CLASSResult.CLASSXml.CalcData.CalcControl.ActivIDBlks.IDBlkDtl;
	Иначе
		IDBlkDtl = Новый Массив;
		Если ТипЗнч(ДанныеКалькуляции.CLASSResult.CLASSXml.CalcData.CalcControl.ActivIDBlks.IDBlkDtl) = Тип("ОбъектXDTO") Тогда
			IDBlkDtl.Добавить(ДанныеКалькуляции.CLASSResult.CLASSXml.CalcData.CalcControl.ActivIDBlks.IDBlkDtl);
		КонецЕсли;
	КонецЕсли;
	
	УдаляемыеДопКоды = Новый Массив;
	
	Для Каждого IDBlk Из IDBlkDtl Цикл
		НоваяСтрока = ДополнительныеКоды.Добавить();
		НоваяСтрока.Код      = ПолучитьСвойствоXDTO(IDBlk, "IDBlk");
		НоваяСтрока.Значение = ЗначениеXMLВ1С(ПолучитьСвойствоXDTO(IDBlk, "Val.Val"), "Число");
		НоваяСтрока.Источник = "IDBlkDtl";
		
		// заполним значения доп. кодов
		НоваяСтрока.Ссылка = Справочники
			.ДополнительныеКодыAudapadWeb
			.НайтиПоРеквизиту("КодПоКлассификатору", НоваяСтрока.Код);
		
		Если НЕ НоваяСтрока.Ссылка.Пустая() Тогда
			Если НоваяСтрока.Ссылка.ТипНачисления = Перечисления.ТипыНачисленийДопКодов.Сумма Тогда
				НоваяСтрока.Значение = НоваяСтрока.Значение*100;
			КонецЕсли;
			НоваяСтрока.СпособРаспределения = НоваяСтрока.Ссылка.ТипРаспределения;
		КонецЕсли;
		
		Если НоваяСтрока.Ссылка.Пустая() ИЛИ НоваяСтрока.Код = "02" Тогда
			УдаляемыеДопКоды.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДопКод Из УдаляемыеДопКоды Цикл
		ДополнительныеКоды.Удалить(ДопКод);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимДокументаЗагрузки()
	
	ЗагрузкаВЗаказНаряд = (РежимЗагрузки = 0);
	Элементы.СводныйРемонтныйЗаказ.Видимость = ЗагрузкаВЗаказНаряд;
	Элементы.ЗаказНаряд.Видимость = ЗагрузкаВЗаказНаряд;
	Элементы.ЗаявкаНаРемонт.Видимость = НЕ ЗагрузкаВЗаказНаряд;
	Элементы.ПровестиИЗакрыть.КнопкаПоУмолчанию = ЗагрузкаВЗаказНаряд;
	Элементы.ПровестиИЗакрытьЗаявку.КнопкаПоУмолчанию = НЕ ЗагрузкаВЗаказНаряд;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеИПолучениеСсылок

&НаСервере
Функция НайтиСоздатьКонтрагента(Фамилия, Имя)
	ФамилияИмя = СокрЛП(Фамилия + " " + Имя);
	
	Если ПустаяСтрока(ФамилияИмя) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	((Контрагенты.Фамилия = &Фамилия
	|	И Контрагенты.Имя = &Имя) ИЛИ Контрагенты.Наименование = &ФамилияИмя)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ %1
	|	И Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Покупатель)
	|	И Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЧастноеЛицо)",
	?(Объект.ИспользоватьКонтрагентовТолькоИзГруппы, "И Контрагенты.Родитель = &Родитель", ""));
	Запрос.УстановитьПараметр("Фамилия"   , Фамилия);
	Запрос.УстановитьПараметр("Имя"       , Имя);
	Запрос.УстановитьПараметр("ФамилияИмя", ФамилияИмя);
	Запрос.УстановитьПараметр("Родитель"  , Объект.ГруппаКонтрагентов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// Найти контрагента не удалось. Создание нового контрагента.
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(Неопределено);
	НовыйКонтрагент.УстановитьНовыйКод();
	НовыйКонтрагент.Наименование       = ФамилияИмя;
	НовыйКонтрагент.НаименованиеПолное = ФамилияИмя;
	НовыйКонтрагент.ВидКонтрагента     = Перечисления.ВидыКонтрагентов.Покупатель;
	НовыйКонтрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	НовыйКонтрагент.Фамилия            = Фамилия;
	НовыйКонтрагент.Имя                = Имя;
	НовыйКонтрагент.Родитель           = Объект.ГруппаКонтрагентов;
	
	НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
	Попытка
		НовыйКонтрагент.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось создать контрагента:'") + Символы.НПП + КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НовыйКонтрагент.Ссылка;
КонецФункции

&НаСервере
Функция НайтиСоздатьМодель(НаименованиеМодели, АвтомобильСтруктура)
	
	Производитель = НайтиСоздатьПроизводителя(АвтомобильСтруктура);
	
	Марка = НайтиСоздатьМарку(Производитель.Наименование);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Модели.Ссылка
	|ИЗ
	|	Справочник.Модели КАК Модели
	|ГДЕ
	|	Модели.ЭтоГруппа = ЛОЖЬ
	|	И Модели.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", НаименованиеМодели);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоваяМодель = Справочники.Модели.СоздатьЭлемент();
	НоваяМодель.Заполнить(Неопределено);
	НоваяМодель.УстановитьНовыйКод();
	НоваяМодель.Наименование       = НаименованиеМодели;
	НоваяМодель.НаименованиеПолное = НаименованиеМодели;
	НоваяМодель.Марка              = Марка;
	НоваяМодель.Производитель      = Производитель;
	НоваяМодель.Родитель           = Объект.ГруппаМодели;
	Если НоваяМодель.ВалютаУчета.Пустая() Тогда
		НоваяМодель.ВалютаУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецЕсли;
	
	Попытка
		НоваяМодель.Записать();
	Исключение
		Возврат Справочники.Модели.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НоваяМодель.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьМарку(НаименованиеМарки)
	
	НайденнаяМарка = Справочники.Марки.НайтиПоНаименованию(НаименованиеМарки, Истина);
	Если НЕ НайденнаяМарка.Пустая() Тогда
		Возврат НайденнаяМарка;
	КонецЕсли;
	
	НоваяМарка = Справочники.Марки.СоздатьЭлемент();
	НоваяМарка.Заполнить(Неопределено);
	НоваяМарка.УстановитьНовыйКод();
	НоваяМарка.Наименование = НаименованиеМарки;
	
	НоваяМарка.ОбменДанными.Загрузка = Истина;
	Попытка
		НоваяМарка.Записать();
	Исключение
		Возврат Справочники.Марки.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НоваяМарка.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьПроизводителя(АвтомобильСтруктура)
	
	Если НЕ ЗначениеЗаполнено(АвтомобильСтруктура.Производитель) Тогда
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецЕсли;
	
	Пропустить=Ложь;
	НаименованиеПроизводителя = "";
	Для Индекс=1 По СтрДлина(АвтомобильСтруктура.Производитель)-1 Цикл
		ТекСимвол = Сред(АвтомобильСтруктура.Производитель, Индекс, 1);
		Если ТекСимвол="[" Тогда
			Пропустить = Истина;
		ИначеЕсли ТекСимвол="]" Тогда
			Пропустить = Ложь;
		ИначеЕсли НЕ Пропустить Тогда
			НаименованиеПроизводителя = НаименованиеПроизводителя+ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	НайденныйПроизводитель = Справочники.Производители.НайтиПоНаименованию(НаименованиеПроизводителя, Истина);
	Если НЕ НайденныйПроизводитель.Пустая() Тогда
		Возврат НайденныйПроизводитель;
	КонецЕсли;
	
	НовыйПроизводитель = Справочники.Производители.СоздатьЭлемент();
	НовыйПроизводитель.Заполнить(Неопределено);
	НовыйПроизводитель.УстановитьНовыйКод();
	НовыйПроизводитель.Наименование = НаименованиеПроизводителя;
	
	НовыйПроизводитель.ОбменДанными.Загрузка = Истина;
	Попытка
		НовыйПроизводитель.Записать();
	Исключение
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НовыйПроизводитель.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьАвтомобиль(VIN, Владелец, АвтомобильСтруктура)
	
	Если НЕ ЗначениеЗаполнено(АвтомобильСтруктура.Производитель) И НЕ ЗначениеЗаполнено(АвтомобильСтруктура.Модель) Тогда
		Возврат Справочники.Автомобили.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеМодели = ОбменСAudaPadWebЗащищенныеФункцииСервер.
		ПолучитьНаименованиеМодели(АвтомобильСтруктура.Производитель, АвтомобильСтруктура.Модель);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Автомобили.Ссылка
	|ИЗ
	|	Справочник.Автомобили КАК Автомобили
	|ГДЕ
	|	(Автомобили.VIN = &VIN
	|			ИЛИ Автомобили.ОригинальныйVIN = &VIN)
	|	И Автомобили.ЭтоГруппа = ЛОЖЬ";
	Запрос.УстановитьПараметр("VIN", VIN);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеМодели) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Автомобили.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|ГДЕ
		|	НЕ Автомобили.ЭтоГруппа
		|	И Автомобили.Наименование = &НаименованиеМодели";
		Запрос.УстановитьПараметр("НаименованиеМодели", НаименованиеМодели);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	#Область Создание_Нового_Элемента
	
	// создаем модель
	Модель = НайтиСоздатьМодель(НаименованиеМодели, АвтомобильСтруктура);
	
	Если ЗначениеЗаполнено(АвтомобильСтруктура.Номер) Тогда
		ГосНомер = СтрЗаменить(АвтомобильСтруктура.Номер, " ", "");
	Иначе
		ГосНомер = "";
	КонецЕсли;
	
	НовыйАвтомобиль = Справочники.Автомобили.СоздатьЭлемент();
	НовыйАвтомобиль.Заполнить(Неопределено);
	НовыйАвтомобиль.УстановитьНовыйКод();
	НовыйАвтомобиль.Наименование       = Справочники.Автомобили.СформироватьНаименованиеАвтомобиляПоПолям(НаименованиеМодели, , ГосНомер, VIN);
	НовыйАвтомобиль.НаименованиеПолное = НовыйАвтомобиль.Наименование;
	НовыйАвтомобиль.Родитель           = Объект.ГруппаАвтомобили;
	НовыйАвтомобиль.VIN                = VIN;
	НовыйАвтомобиль.Марка              = Модель.Марка;
	НовыйАвтомобиль.ОригинальныйVIN    = VIN;
	НовыйАвтомобиль.ВключатьВПрайсЛист = Перечисления.ВидВключенияВПрайсЛист.ПоУмолчанию;
	НовыйАвтомобиль.Модель             = Модель;
	
	Если ЗначениеЗаполнено(АвтомобильСтруктура.ДатаВыпуска) Тогда
		НовыйАвтомобиль.ГодВыпуска = АвтомобильСтруктура.ДатаВыпуска;
	КонецЕсли;
	
	Попытка
		НовыйАвтомобиль.Записать();
	Исключение
		Возврат Справочники.Автомобили.ПустаяСсылка();
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			НовыйАвтомобиль.Ссылка, Владелец,Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,,Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.AudaPadWeb);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(АвтомобильСтруктура.Пробег) Тогда
		Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			НовыйАвтомобиль.Ссылка, АвтомобильСтруктура.Пробег, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,,Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.AudaPadWeb);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ГосНомер) Тогда
		Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			НовыйАвтомобиль.Ссылка, ГосНомер, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,,Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.AudaPadWeb);
	КонецЕсли;
	
	Возврат НовыйАвтомобиль.Ссылка;
	
	#КонецОбласти
	
КонецФункции

&НаСервере
Функция НайтиСоздатьАвтоработу(ИнформацияОбАвтоработе)
	Артикул = Неопределено; Наименование = Неопределено; НаименованиеПолное = Неопределено;
	
	ИнформацияОбАвтоработе.Свойство("НомерРаботы"        , Артикул);
	ИнформацияОбАвтоработе.Свойство("НаименованиеРаботы" , Наименование);
	ИнформацияОбАвтоработе.Свойство("НаименованиеПолное" , НаименованиеПолное);
	
	Если Артикул = "ЗАМЕНИТЬ" ИЛИ Артикул = "БН" Тогда
		Артикул = "";
	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(Артикул) ИЛИ ЗначениеЗаполнено(Наименование) ИЛИ ЗначениеЗаполнено(НаименованиеПолное)) Тогда
		Возврат Справочники.Автоработы.ПустаяСсылка();
	КонецЕсли;
	
	// выполним поиск по наименованию+артикул
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Автоработы.Ссылка
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Родитель = ЛОЖЬ
	|	И Автоработы.Артикул = &Артикул
	|	И Автоработы.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Артикул"      , Артикул);
	Запрос.УстановитьПараметр("Наименование" , Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если Объект.НеДобавлятьНоменклатуруПриСозданииАвторабот Тогда
		Если Объект.НоменклатураДляАвтоработПоУмолчанию.Пустая() Тогда
			Номенклатура = Справочники.Номенклатура.Авторабота;
		Иначе
			Номенклатура = Объект.НоменклатураДляАвтоработПоУмолчанию;
		КонецЕсли;
	Иначе
		ИнформацияОНоменклатуре = Новый Структура;
		ИнформацияОНоменклатуре.Вставить("КодДетали");
		ИнформацияОНоменклатуре.Вставить("НомерДетали");
		ИнформацияОНоменклатуре.Вставить("НаименованиеДетали");
		ИнформацияОНоменклатуре.Вставить("ТипРемонта");
		ИнформацияОНоменклатуре.Вставить("СтоимостьРабот_Валюта");
		ИнформацияОНоменклатуре.Вставить("Источник");
		
		ЗаполнитьЗначенияСвойств(ИнформацияОНоменклатуре, ИнформацияОбАвтоработе);
		Номенклатура = НайтиСоздатьНоменклатуру(ИнформацияОНоменклатуре);
	КонецЕсли;
	
	Если Номенклатура.Пустая() Тогда
		Возврат Справочники.Автоработы.ПустаяСсылка();
	КонецЕсли;
	
	#Область Создание_новой_автоработы
	
	НоваяАвторабота = Справочники.Автоработы.СоздатьЭлемент();
	НоваяАвторабота.Заполнить(Неопределено);
	НоваяАвторабота.УстановитьНовыйКод();
	НоваяАвторабота.Артикул            = Артикул;
	НоваяАвторабота.Наименование       = Наименование;
	НоваяАвторабота.НаименованиеПолное = НаименованиеПолное;
	НоваяАвторабота.Родитель           = Объект.ГруппаАвторабот;
	НоваяАвторабота.Номенклатура       = Номенклатура;
	
	Если ЗначениеЗаполнено(ИнформацияОбАвтоработе.ТипРемонта) Тогда
		НоваяАвторабота.ЭтоОкраска = (Найти(ИнформацияОбАвтоработе.ТипРемонта,"L") > 0);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбАвтоработе.Источник) Тогда
		НоваяАвторабота.Комментарий = ИнформацияОбАвтоработе.Источник;
	КонецЕсли;
	
	НоваяАвторабота.ОбменДанными.Загрузка = Истина;
	Попытка
		НоваяАвторабота.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Справочники.Автоработы.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НоваяАвторабота.Ссылка;
	
	#КонецОбласти
	
КонецФункции

&НаСервере
Функция НайтиСоздатьНоменклатуру(ИнформацияОНоменклатуре)
	Артикул = Неопределено; НаименованиеДетали = Неопределено;
	
	ИнформацияОНоменклатуре.Свойство("НомерДетали"        , Артикул);
	ИнформацияОНоменклатуре.Свойство("НаименованиеДетали" , НаименованиеДетали);
	
	Если Артикул = Неопределено ИЛИ Артикул = "ЗАМЕНИТЬ" ИЛИ Артикул = "БН" Тогда
		Артикул = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Артикул+НаименованиеДетали) Тогда
		Возврат Справочники.Номенклатура.Авторабота;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Наименование = &Наименование
	|	И Номенклатура.Артикул = &Артикул";
	Запрос.УстановитьПараметр("Артикул"      , Артикул);
	Запрос.УстановитьПараметр("Наименование" , НаименованиеДетали);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если Объект.ПоискПоАртикулу И НЕ ПустаяСтрока(Артикул) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.Артикул = &Артикул";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	#Область Создание_новой_номенклатуры
	
	ТипНоменклатуры = Справочники.ТипыНоменклатуры.Штучный;
	ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
	БазоваяЕдиница  = ТипНоменклатуры.ОсновнаяБазоваяЕдиницаИзмерения;
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	// Иначе номенклатура с пустыми артикулами не загрузится
	НоваяНоменклатура.ОбменДанными.Загрузка = Истина;
	
	НоваяНоменклатура.Заполнить(Неопределено);
	НоваяНоменклатура.УстановитьНовыйКод();
	НоваяНоменклатура.Артикул                 = Артикул;
	НоваяНоменклатура.Наименование            = НаименованиеДетали;
	НоваяНоменклатура.НаименованиеИностранное = НаименованиеДетали;
	НоваяНоменклатура.НаименованиеПолное      = НаименованиеДетали;
	НоваяНоменклатура.СтавкаНДС               = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
	
	Если ИнформацияОНоменклатуре.Свойство("СтоимостьРабот_Валюта") И ИнформацияОНоменклатуре.СтоимостьРабот_Валюта <> Неопределено Тогда
		НоваяНоменклатура.ВалютаУчета = ИнформацияОНоменклатуре.СтоимостьРабот_Валюта;
	КонецЕсли;
	НоваяНоменклатура.Родитель                = Объект.ГруппаНоменклатуры;
	НоваяНоменклатура.ТипНоменклатуры         = ТипНоменклатуры;
	НоваяНоменклатура.ВидНоменклатуры         = ВидНоменклатуры;
	НоваяНоменклатура.БазоваяЕдиницаИзмерения = БазоваяЕдиница;
	НоваяНоменклатура.Комментарий             = ИнформацияОНоменклатуре.Источник;
	
	Попытка
		НоваяНоменклатура.Записать();
		Если НоваяНоменклатура.ОсновнаяЕдиницаИзмерения.Пустая() Тогда
			// Возможна ошибка при записи основной единицы измерения (если не задана базовая)
			Попытка
				НоваяНоменклатура.ОсновнаяЕдиницаИзмерения =
					Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(НоваяНоменклатура);
				
				НоваяНоменклатура.Записать();
			Исключение КонецПопытки; // BSLLS-off
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НоваяНоменклатура.Ссылка;
	
	#КонецОбласти
	
КонецФункции

#КонецОбласти

#Область Отладка

&НаСервере
Процедура УстановитьРежимОтладки()
	
	ПараметрЗапускаПредприятия = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Элементы.ОтладкаЗагрузки.Видимость = СтрНайти(ПараметрЗапускаПредприятия, "ОтладкаAudatex") > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТестовогоФайлаЗавершение(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеПомещенногоФайла = Неопределено ИЛИ ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РазобратьСоставЗадания(ОписаниеПомещенногоФайла.Адрес);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьСоставЗадания(АдресФайла)
	
	ЧтениеТекста = Новый ЧтениеТекста(
		ПолучитьИзВременногоХранилища(АдресФайла).ОткрытьПотокДляЧтения(),
		КодировкаТекста.UTF8
	);
	ОбменСAudaPadWeb.РазобратьСоставЗадания(
		ЧтениеТекста.Прочитать(),
		ИдентификаторТестовогоДела(),
		СписокКалькуляций
	);
	НоваяСтрока = СписокЗаданий.Вставить(0);
	НоваяСтрока.ИдентификаторДела = ИдентификаторТестовогоДела();
	НоваяСтрока.ИдентификаторЗадания = ИдентификаторТестовогоДела();
	НоваяСтрока.Загружено = Истина;
	НоваяСтрока.НомерДела = "Тест";
	Элементы.СписокЗаданий.ТекущаяСтрока = 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторТестовогоДела()
	
	Возврат Новый УникальныйИдентификатор("a763cfbb-0000-0000-0000-0e96a3a7f353");
	
КонецФункции

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектАвтоработыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриОкончанииРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования,, ЗаявкаНаРемонтОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОбъектТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования,, ЗаявкаНаРемонтОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


