
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Объект <> Неопределено Тогда
		
		КопироватьДанныеФормы(Параметры.Объект, Объект);
		
	КонецЕсли;
	
	СформироватьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьОбновление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	ОбновитьДеревоНаСервере(, Поиск);
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокЗаданийПриАктивизацииСтрокиОтложено", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	НачатьОбновление();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьДело(Команда)
	
	Если
		Элементы.СписокЗаданий.ТекущиеДанные = Неопределено
		ИЛИ Элементы.СписокЗаданий.ТекущиеДанные.ЭтоГруппа
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.ИдентификаторЗадания)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Ответ = ОбменСAudaPadWebВызовСервера.ЗакрытьЗадание(Элементы.СписокЗаданий.ТекущиеДанные.ИдентификаторЗадания,
		ОбменСAudaPadWebКлиентСервер.ПараметрыПодключенияОбъекта(Объект));
	
	Если Ответ.Свойство("Успех") И НЕ Ответ.Успех Тогда
		
		ПоказатьПредупреждение(, Ответ.Сообщение,, НСтр("ru = 'Закрытие дела'"));
		Возврат;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru = 'Дело №%1 успешно закрыто'"), 
										Элементы.СписокЗаданий.ТекущиеДанные.НомерДела));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаказНаряд(Команда)
	
	Если
		Элементы.СписокЗаданий.ТекущиеДанные = Неопределено
		ИЛИ Элементы.СписокЗаданий.ТекущиеДанные.ЭтоГруппа
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.ИдентификаторЗадания)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Ответ = ПодготовитьТекстДокумента(Элементы.СписокЗаданий.ТекущаяСтрока);
	
	Если Ответ.Свойство("Успех") И НЕ Ответ.Успех Тогда
		ПоказатьПредупреждение(, Ответ.Сообщение,, НСтр("ru = 'Ошибка прикрепления файла'"));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.СписокЗаданий.ТекущиеДанные.ЗаказНаряд) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Описание заявки на ремонт успешно прикреплено.'"));
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Описание заказ-наряда успешно прикреплено.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьОбновление()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияЗаданий");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	
	Если ВыполнитьОбновлениеЗаданийВФоне() Тогда
		
		РазвернутьДерево();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокЗаданий;
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияЗаданий", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьУсловноеОформление()
	
	Форма              = ЭтотОбъект;
	Источник           = Справочники.ВидыСостоянийЗаказНарядов;
	ПолеОтбора         = "Состояние";
	ПолеЦвета          = "Цвет";
	ИсключаемыеПоля    = "";
	ДинамическийСписок = "СписокЗаданий";
	
	НаименованиеСправочника = "Справочник." + Строка(Источник.ПустаяСсылка().Метаданные().Имя);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Справочник.Ссылка,
	|	Справочник." + ПолеЦвета + " КАК Цвет
	|ИЗ
	|	" + НаименованиеСправочника + " КАК Справочник
	|	" + ?(Источник.ПустаяСсылка().Метаданные().Иерархический = Истина, 
	"ГДЕ
	|	(Справочник.ЭтоГруппа = ЛОЖЬ)", "");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ГруппаОтбора  = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2", ДинамическийСписок, ПолеОтбора));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
		// Значение для отбора
		ЭлементОтбора.ПравоеЗначение = Выборка.Ссылка;
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2", ДинамическийСписок, "ЭтоГруппа"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Выборка.Цвет.Получить());
		ЭлементОформления.Использование = Истина;
		
		НайденныйЭлемент = Форма.Элементы.Найти(ДинамическийСписок);
		// оформление полей строки
		Если НайденныйЭлемент <> Неопределено Тогда
			Для каждого ПолеОформления Из НайденныйЭлемент.ПодчиненныеЭлементы Цикл
				Если Найти(ИсключаемыеПоля, ПолеОформления.Имя) = 0 Тогда
					ПолеДляОформления = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеДляОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления.Имя);
					ПолеДляОформления.Использование = Истина;
					Если ТипЗнч(ПолеОформления) = Тип("ГруппаФормы") Тогда
						Для каждого ПолеОформленияГруппы Из ПолеОформления.ПодчиненныеЭлементы Цикл
							Если Найти(ИсключаемыеПоля, ПолеОформленияГруппы.Имя) = 0 Тогда
								ПолеДляОформленияГруппы = ЭлементОформления.Поля.Элементы.Добавить();
								ПолеДляОформленияГруппы.Поле = Новый ПолеКомпоновкиДанных(ПолеОформленияГруппы.Имя);
								ПолеДляОформленияГруппы.Использование = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьТаблицуЗаданий()
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));
	ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаУИ     = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерДела"            , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ДатаСозданияДела"     , ОписаниеТипаДата);
	Таблица.Колонки.Добавить("VIN"                  , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Модель"               , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Производитель"        , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ГосНомер"             , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Фамилия"              , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Имя"                  , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ИдентификаторЗадания" , ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ИдентификаторДела"    , ОписаниеТипаСтрока);
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ОбновитьДеревоНаСервере(Знач РезультатЗапроса = Неопределено, Отбор = Неопределено)
	
	Если РезультатЗапроса = Неопределено Тогда
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(АдресХранилищаРезультата);
		
	КонецЕсли;
	
	ЭлементыДерева = СписокЗаданий.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если ТипЗнч(РезультатЗапроса) <> Тип("ДеревоЗначений") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаЗаказНаряда Из РезультатЗапроса.Строки Цикл
		
		Если
			(
				НЕ Объект.ЗаказНаряд.Пустая()
				И Объект.ЗаказНаряд <> СтрокаЗаказНаряда.ЗаказНаряд
			)
			ИЛИ (
				Объект.ЗаказНаряд.Пустая()
				И НЕ Объект.СводныйРемонтныйЗаказ.Пустая()
				И (ТипЗнч(СтрокаЗаказНаряда.ЗаказНаряд) = Тип("Строка")
					ИЛИ (НЕ ТипЗнч(СтрокаЗаказНаряда.ЗаказНаряд) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
						И Объект.СводныйРемонтныйЗаказ
						<> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗаказНаряда.ЗаказНаряд, "СводныйРемонтныйЗаказ")))
			)
		Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяГруппа = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяГруппа, СтрокаЗаказНаряда);
		НоваяГруппа.ЭтоГруппа = Истина;
		ЭлементыГруппы = НоваяГруппа.ПолучитьЭлементы();
		
		Для Каждого СтрокаДела Из СтрокаЗаказНаряда.Строки Цикл
			
			Если
				ЗначениеЗаполнено(Отбор)
				И ТипЗнч(Отбор) = Тип("Строка")
				И СтрНайти(СтрокаДела.НомерДела, Отбор) = 0
				И СтрНайти(СтрокаДела.VIN, Отбор) = 0
				И СтрНайти(СтрокаДела.ГосНомер, Отбор) = 0
				И СтрНайти(СтрокаДела.Фамилия, Отбор) = 0
			Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяГруппа.Состояние = СтрокаДела.Состояние;
			НоваяСтрокаДела = ЭлементыГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДела, СтрокаДела);
			НоваяСтрокаДела.ИдентификаторДела    = Новый УникальныйИдентификатор(СтрокаДела.ИдентификаторДела);
			НоваяСтрокаДела.ИдентификаторЗадания = Новый УникальныйИдентификатор(СтрокаДела.ИдентификаторЗадания);
			
		КонецЦикла;
		
		Если ЭлементыГруппы.Количество() = 0 Тогда
			
			ЭлементыДерева.Удалить(НоваяГруппа);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДействий()
	
	Если Элементы.СписокЗаданий.ТекущиеДанные = Неопределено ИЛИ Элементы.СписокЗаданий.ТекущиеДанные.ЭтоГруппа Тогда
		Элементы.СписокЗаданийВыгрузитьЗаказНаряд.Доступность = Ложь;
		Элементы.СписокЗаданийЗакрыть.Доступность             = Ложь;
	ИначеЕсли НЕ (ТипЗнч(Элементы.СписокЗаданий.ТекущиеДанные.ЗаказНаряд) = Тип("ДокументСсылка.ЗаказНаряд")
		ИЛИ ТипЗнч(Элементы.СписокЗаданий.ТекущиеДанные.ЗаказНаряд) = Тип("ДокументСсылка.ЗаявкаНаРемонт")) Тогда
		Элементы.СписокЗаданийВыгрузитьЗаказНаряд.Доступность = Ложь;
		Элементы.СписокЗаданийЗакрыть.Доступность             = Истина;
	Иначе
		Элементы.СписокЗаданийВыгрузитьЗаказНаряд.Доступность = Истина;
		Элементы.СписокЗаданийЗакрыть.Доступность             = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	Для Каждого Строка Из СписокЗаданий.ПолучитьЭлементы() Цикл
		Если ТипЗнч(Строка.ЗаказНаряд) = Тип("ДокументСсылка.ЗаказНаряд")
			ИЛИ ТипЗнч(Строка.ЗаказНаряд) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
			Элементы.СписокЗаданий.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТекстДокумента(ТекущаяСтрока)
	
	ТекущиеДанные = СписокЗаданий.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТекстЗаказНаряда =
		ОбменСAudaPadWebЗащищенныеФункцииСервер.СериализоватьЗаказНаряд(
			ТекущиеДанные.ЗаказНаряд,
			ВРег(Строка(ТекущиеДанные.ИдентификаторДела)),
			ВРег(Строка(ТекущиеДанные.ИдентификаторЗадания)));
	
	Если ПустаяСтрока(ТекстЗаказНаряда) Тогда
		Возврат Новый Структура("Успех,Сообщение", Ложь, НСтр("ru = 'Не заполнен текст вложения в задание.'"));
	КонецЕсли;
	
	// запишем файл перед отправкой
	ИмяФайла = "ZN"+Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ИмяФайла = СтрЗаменить(ИмяФайла, ".", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, " ", "");
	ИмяФайла = ИмяФайла + ".xml";
	ПутьКФайлу = КаталогВременныхФайлов() + ИмяФайла;
	
	ТекстХМЛ = Новый ТекстовыйДокумент();
	ТекстХМЛ.УстановитьТипФайла(КодировкаТекста[Строка(Объект.КодировкаФайлаПриложения)]);
	ТекстХМЛ.УстановитьТекст(ТекстЗаказНаряда);
	ТекстХМЛ.Записать(ПутьКФайлу, КодировкаТекста[Строка(Объект.КодировкаФайлаПриложения)]);
	
	// подготовим файл к отправке
	СодержимоеФайла	= Base64Строка(Новый ДвоичныеДанные(ПутьКФайлу)); // XMLСтрока
	
	ЗаписьXML= Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("AttachmentBinaryList");
	ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://www.audatex.com/SAXIF");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("AttachmentBinary");
	ЗаписьXML.ЗаписатьНачалоЭлемента("FileName");
	ЗаписьXML.ЗаписатьТекст(СтрЗаменить(ПутьКФайлу,КаталогВременныхФайлов(),""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Source");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Attachment");
	ЗаписьXML.ЗаписатьТекст(СодержимоеФайла);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстПрекрепления = ЗаписьXML.Закрыть();
	
	Ответ = ОбменСAudaPadWeb.ПрикрепитьФайл(
		ТекстПрекрепления, ТекущиеДанные.ИдентификаторЗадания, 
		ОбменСAudaPadWebКлиентСервер.ПараметрыПодключенияОбъекта(Объект));
	
	// почистим за собой
	Попытка
		УдалитьФайлы(ПутьКФайлу);
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении файла'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

#Область ДлительныеОперации

// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
//
&НаСервере
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ВыполнитьОбновлениеЗаданийВФоне()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторФоновогоЗадания);
	
	Фильтры = Новый Структура;
	Фильтры.Вставить("НачалоПериодаФильтр"    , Дата(1990, 1, 1));// устанавливается дата для получения полного списка дел
	Фильтры.Вставить("ОкончаниеПериодаФильтр" , ТекущаяДатаСеанса());
	Фильтры.Вставить("СтатусЗадания"          , "ALL");
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ПараметрыПодключенияОбъекта", 
				ОбменСAudaPadWebКлиентСервер.ПараметрыПодключенияОбъекта(Объект));
	ПараметрыДлительнойОперации.Вставить("Фильтры"                    , Фильтры);
	
	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ОбменСAudaPadWeb.ВыполнитьОбновлениеЗаданийВФоне",
		ПараметрыДлительнойОперации,
		"Обновление списка заданий");
	
	АдресХранилища               = РезультатВыполнения.АдресХранилища;
	ИдентификаторФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеОбновленияЗаданийВФоне();
	КонецЕсли;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ОбработатьЗавершениеОбновленияЗаданийВФоне()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатВыполнения) = Тип("Строка") Тогда
		СписокЗаданийТаблица = СоздатьТаблицуЗаданий();
		ОбменСAudaPadWebЗащищенныеФункцииСервер.DOMРазборСпискаXML(РезультатВыполнения, СписокЗаданийТаблица);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокЗаданий", СписокЗаданийТаблица);
		Запрос.Текст =
		"ВЫБРАТЬ СписокЗаданий.* ПОМЕСТИТЬ СписокЗаданийТаблица ИЗ &СписокЗаданий КАК СписокЗаданий;";
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	СписокЗаданийТаблица.*,
		|	ЕСТЬNULL(ОбменСAudaPadWeb.ЗаказНаряд, ""Задания"") КАК ЗаказНаряд,
		|	ВЫБОР
		|		КОГДА ОбменСAudaPadWeb.ЗаказНаряд ЕСТЬ NULL
		|		ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	ВЫБОР
		|		КОГДА ОбменСAudaPadWeb.ЗаказНаряд ЕСТЬ NULL
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.ПустаяСсылка)
		|		ИНАЧЕ ОбменСAudaPadWeb.ЗаказНаряд.Состояние
		|	КОНЕЦ КАК Состояние
		|
		|ИЗ
		|	СписокЗаданийТаблица КАК СписокЗаданийТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбменСAudaPadWeb КАК ОбменСAudaPadWeb
		|		ПО СписокЗаданийТаблица.ИдентификаторДела = ОбменСAudaPadWeb.ИдентификаторДела
		|			И СписокЗаданийТаблица.ИдентификаторЗадания = ОбменСAudaPadWeb.ИдентификаторЗадания
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|
		|ИТОГИ ПО
		|	ЗаказНаряд";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		АдресХранилищаРезультата = ПоместитьВоВременноеХранилище(РезультатЗапроса, УникальныйИдентификатор);
		
		ОбновитьДеревоНаСервере(РезультатЗапроса, Поиск);
		
		Возврат Новый Структура;
	ИначеЕсли ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Возврат РезультатВыполнения;
	Иначе
		Возврат Новый Структура("Успех,Сообщение", Ложь, НСтр("ru = 'Неклассифицированная ошибка'"));
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеОбновленияЗаданий()
	
	Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		Результат = ОбработатьЗавершениеОбновленияЗаданийВФоне();
		Если Результат.Свойство("Успех") И НЕ Результат.Успех Тогда
			ПоказатьПредупреждение(, Результат.Сообщение,, НСтр("ru = 'Ошибка обновления списка заданий'"));
		КонецЕсли;
		
		РазвернутьДерево();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокЗаданий;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбновленияЗаданий", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокЗаданийПриАктивизацииСтрокиОтложено()
	
	УстановитьДоступностьДействий();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
