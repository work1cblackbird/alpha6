
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшТекущаяСтрока; // Храним значение номенклатуры для которой выводится информация.

&НаКлиенте
Перем СтраницыВариантовПоиска; // Соответствие вариантов поиска и страниц на форме.

&НаКлиенте
Перем СпискиВариантовПоиска; // Соответствие вариантов поиска и списков номенклатуры на форме.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодборТоваровСервер.ЗаполнитьВыборВариантовПоиска(Элементы.ВариантПоиска.СписокВыбора);
	ВариантПоиска = ПодборТоваровКлиентСервер.ВариантыПоиска().Стандартный;
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Если Параметры.ДоступныеСклады = "установить" И ЗначениеЗаполнено(Параметры.ПодразделениеКомпании) Тогда
		
		Объект.ДоступныеСклады = СкладыПоПодразделению(Параметры.ПодразделениеКомпании);
		
	КонецЕсли;
	
	УстановитьОтборПоСкладам(ЭтотОбъект);
	УстановитьПараметрыСпискаАналогов(ЭтотОбъект);
	УстановитьОтборНоменклатурыПоПрименяемости();
	ОбновитьДополнительныеСвойстваСписков(ЭтотОбъект);
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		// Позиционирование на новом объекте в списке.
		Если ЗначениеЗаполнено(НовыйОбъект) Тогда
			
			Элементы.СписокНоменклатура.ТекущаяСтрока = НовыйОбъект;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ПодборТоваровКлиентСервер
		.УстановитьОтборНаСписокНоменклатура(СписокНоменклатура, СтрокаПоиска, ПоТочномуСоответствию);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйПоискСтрокаПоискаПриИзменении(Элемент)
	
	НачатьПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоТочномуСоответствиюПриИзменении(Элемент)
	
	ПодборТоваровКлиентСервер
		.УстановитьОтборНаСписокНоменклатура(СписокНоменклатура, СтрокаПоиска, ПоТочномуСоответствию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительнуюИнформациюНажатие(Элемент)
	
	Элементы.ПоказатьДополнительнуюИнформацию.Видимость = Ложь;
	Элементы.СкрытьДополнительнуюИнформацию.Видимость = Истина;
	Элементы.СтраницыДополнительнаяИнформация.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьДополнительнуюИнформациюНажатие(Элемент)
	
	Элементы.ПоказатьДополнительнуюИнформацию.Видимость = Истина;
	Элементы.СкрытьДополнительнуюИнформацию.Видимость = Ложь;
	Элементы.СтраницыДополнительнаяИнформация.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодобранныеТоварыНажатие(Элемент)
	
	Элементы.ПоказатьПодобранныеТовары.Видимость = Ложь;
	Элементы.СкрытьПодобранныеТовары.Видимость = Истина;
	Элементы.Корзина.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПодобранныеТоварыНажатие(Элемент)
	
	Элементы.ПоказатьПодобранныеТовары.Видимость = Истина;
	Элементы.СкрытьПодобранныеТовары.Видимость = Ложь;
	Элементы.Корзина.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемостьПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер
		.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокНоменклатура, "Номенклатура", НСтр("ru = 'Номенклатура'"));

	Если НЕ ЗначениеЗаполнено(Применяемость) Тогда
	
		Возврат;
		
	КонецЕсли;

	ОбновитьДополнительныеСвойстваСписков(ЭтотОбъект);
	УстановитьОтборПоПрименяемостиНаСписокНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПрименяемостиНаСписокНаСервере()
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НоменклатураПрименяемость.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.НоменклатураПрименяемость КАК НоменклатураПрименяемость
		|ГДЕ
		|	НоменклатураПрименяемость.Модель = &Модель";
	
	Запрос.УстановитьПараметр("Модель", Применяемость);
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокНоменклатура,
		"Номенклатура",
		РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура"),
		ВидСравненияКомпоновкиДанных.ВСписке,
		НСтр("ru = 'Номенклатура'"),
		Истина);
	
КонецПроцедуры // УстановитьОтборПоПрименяемостиНаСписокНаСервере()

&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	Объект.ДоступныеСклады = СкладыПоПодразделению(Объект.ПодразделениеКомпании);
	УстановитьОтборПоСкладам(ЭтотОбъект);
	ОбновитьДополнительныеСвойстваСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦеныПриИзменении(Элемент)
	
	ОбновитьДополнительныеСвойстваСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ОбновитьДополнительныеСвойстваСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	Если ТолькоВНаличии Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокНоменклатура,
			"ВНаличии",
			0,
			ВидСравненияКомпоновкиДанных.Больше,
			НСтр("ru = 'В наличии'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
		// Установим отбор по наличию на Список характеристик
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокХарактеристики,
			"ВНаличии",
			0,
			ВидСравненияКомпоновкиДанных.Больше,
			НСтр("ru = 'В наличии'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер
		.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокНоменклатура, "ВНаличии", НСтр("ru = 'В наличии'"));
		
	ОбщегоНазначенияКлиентСервер
		.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокХарактеристики, "ВНаличии", НСтр("ru = 'В наличии'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатура

&НаСервереБезКонтекста
Процедура СписокНоменклатураПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// TODO: Работает довольно медлено подумать как по другому оформить.
	
	Валюта = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "Валюта");
	Подразделение = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ПодразделениеКомпании");
	ТипЦены = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ТипЦен");
	
	Если НЕ ЗначениеЗаполнено(Валюта)
		ИЛИ НЕ ЗначениеЗаполнено(Подразделение)
		ИЛИ НЕ ЗначениеЗаполнено(ТипЦены) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Товары = Строки.ПолучитьКлючи();
	ПредставлениеПустойЦены = НСтр("ru = '<нет>'");
	ЦветПустойЦены = ЦветаСтиля.НедоступныеДанныеЦвет;
	
	Для Каждого Товар Из Товары Цикл
		
		Строки.Получить(Товар).Данные.Цена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦены, Товар,,, Валюта,,,, Подразделение);
		
		Если Строки.Получить(Товар).Данные.Цена <= 0 Тогда
			
			ОформлениеПоляЦена = Строки.Получить(Товар).Оформление.Получить("Цена");
			ОформлениеПоляЦена.УстановитьЗначениеПараметра("Текст", ПредставлениеПустойЦены);
			ОформлениеПоляЦена.УстановитьЗначениеПараметра("ЦветТекста", ЦветПустойЦены);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ВозможенВыборСтрокиРезультата() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяНоменклатура = ВыбраннаяСтрока;
	Если Элемент.ТекущиеДанные.ХарактеристикиИспользуются Тогда
		
		ПерейтиКСпискуХарактеристик(Элемент.ТекущиеДанные.ВладелецХарактеристики);
		Возврат;
		
	КонецЕсли;
	
	НачатьПомещениеТовараВКорзину(ОбратныйВызовПомещенияВКорзину());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтложеноСписокНоменклатураПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокХарактеристики

&НаСервереБезКонтекста
Процедура СписокХарактеристикиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Валюта = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "Валюта");
	Подразделение = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ПодразделениеКомпании");
	ТипЦены = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ТипЦен");
	Номенклатура = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ВыбраннаяНоменклатура");
	
	Если НЕ ЗначениеЗаполнено(Валюта)
		ИЛИ НЕ ЗначениеЗаполнено(Подразделение)
		ИЛИ НЕ ЗначениеЗаполнено(ТипЦены)
		ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Характеристики = Строки.ПолучитьКлючи();
	ПредставлениеПустойЦены = НСтр("ru = '<нет>'");
	ЦветПустойЦены = ЦветаСтиля.НедоступныеДанныеЦвет;
	
	Для Каждого Характеристика Из Характеристики Цикл
		
		Строки.Получить(Характеристика).Данные.Цена = ЦенообразованиеСервер.ПолучитьЦену(
			ТипЦены,
			Номенклатура,
			,
			,
			Валюта,
			,
			Характеристика,
			,
			Подразделение
		);
		
		Если Строки.Получить(Характеристика).Данные.Цена <= 0 Тогда
			
			ОформлениеПоляЦена = Строки.Получить(Характеристика).Оформление.Получить("Цена");
			ОформлениеПоляЦена.УстановитьЗначениеПараметра("Текст", ПредставлениеПустойЦены);
			ОформлениеПоляЦена.УстановитьЗначениеПараметра("ЦветТекста", ЦветПустойЦены);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасширенныйПоискСписокНоменклатура

&НаКлиенте
Процедура РасширенныйПоискСписокНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ВозможенВыборСтрокиРезультата() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = РасширенныйПоискСписокНоменклатура.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		НачатьСозданиеНоменклатуры(, Истина);
		Возврат;
		
	КонецЕсли;
	
	ВыбраннаяНоменклатура = ТекущиеДанные.Номенклатура;
	Если ТекущиеДанные.ВладелецХарактеристики <> Неопределено Тогда
		
		ПерейтиКСпискуХарактеристик(ТекущиеДанные.ВладелецХарактеристики);
		Возврат;
		
	КонецЕсли;
	
	НачатьПомещениеТовараВКорзину(ОбратныйВызовПомещенияВКорзину());
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйПоискСписокНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтложеноРасширенныйПоискСписокНоменклатураПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокХарактеристики

&НаКлиенте
Процедура СписокХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяХарактеристика = Элемент.ТекущаяСтрока;
	НачатьПомещениеТовараВКорзину(ОбратныйВызовПомещенияВКорзину());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтложеноСписокХарактеристикиПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАналоги

// Обработчик события возникающего на клиенте  при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы
// "Аналоги" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Функция АналогиВыборНаСервере(ВыбраннаяСтрока, ПараметрыДействия = Неопределено)
	
	Возврат Справочники.Номенклатура.НайтиНоменклатуру(ВыбраннаяСтрока.АртикулДляПоиска, ВыбраннаяСтрока.Производитель);
	
КонецФункции // АналогиВыборНаСервере()

&НаКлиенте
Процедура АналогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Элементы.Аналоги.ТекущиеДанные;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Обработаем событие в контексте сервера
	НайденныйАналог = АналогиВыборНаСервере(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(НайденныйАналог) Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаПоиска = "";
	ПодборТоваровКлиентСервер
		.УстановитьОтборНаСписокНоменклатура(СписокНоменклатура, СтрокаПоиска, ПоТочномуСоответствию); 
		
	Элементы.СписокНоменклатура.ТекущаяСтрока = НайденныйАналог;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗамены

// Обработчик события возникающего на клиенте  при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы "Замены
// новые" или "Замены старые".
//
// Параметры:
//  Элемент         - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока - Значение выбранной строки.
//  Поле            - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ЗаменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Обработаем событие в контексте сервера
	НайденнаяЗамена = АналогиВыборНаСервере(Элемент.ТекущиеДанные.Номенклатура);
	
	// При выборе строки нет соответствующей номенклатуры в справочнике
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		
		ОбработкаОповещения = Новый ОписаниеОповещения(
			"ДобавлениеЗамены",
			ЭтотОбъект,
			Новый Структура("ДобавлениеНоменклатуры", Элемент.ТекущиеДанные)
		);
		
		ТекстВопроса = НСтр("ru = 'Замены с данным номером по каталогу нет в справочнике номенклатуры.
			|
			|Добавить новый элемент справочника номенклатуры?'");
		
		ПоказатьВопрос(
			ОбработкаОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			НСтр("ru = 'Добавление номенклатуры'")
		);
		
		Возврат;
		
	КонецЕсли; 
	
	СтрокаПоиска = "";
	ПодборТоваровКлиентСервер
		.УстановитьОтборНаСписокНоменклатура(СписокНоменклатура, СтрокаПоиска, ПоТочномуСоответствию); 
	
	Элементы.СписокНоменклатура.ТекущаяСтрока = НайденнаяЗамена;
	
КонецПроцедуры // ЗаменыВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ИмяСписка = ТекущийСписокРезультатаПоиска(ЭтотОбъект);
	ТекущаяСтрока = Элементы[ИмяСписка].ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = ТекущаяСтрока;
	
	Если ТипЗнч(Ключ) = Тип("Число") Тогда
		
		Ключ = ЭтотОбъект[ИмяСписка].НайтиПоИдентификатору(Ключ).Номенклатура;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", Ключ);
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуруИзПрайса(Команда)
	
	НачатьСозданиеНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуруИзПрайсаИнтерактивно(Команда)
	
	НачатьСозданиеНоменклатуры(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюХарактеристику(Команда)
	
	ВладелецХарактеристики = ПодборТоваровВызовСервера.ВладелецХарактеристики(ВыбраннаяНоменклатура);
	ОткрытьФорму(
		"Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта",
		Новый Структура("Владелец", ВладелецХарактеристики),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНоменклатуре(Команда)
	
	ПерейтиКСпискуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПоискаПриИзменении(Элемент)
	
	ПереключитьВариантПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ВДокумент(Команда)
	
	Закрыть(УпаковатьДанныеКЗакрытию(Объект.Корзина));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СкладыПоПодразделению(Подразделение=Неопределено)
	
	Если Подразделение = Неопределено Тогда
		
		Возврат Новый ФиксированныйМассив(Новый Массив);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкладыКомпании.Ссылка
	|ИЗ
	|	Справочник.СкладыКомпании КАК СкладыКомпании
	|ГДЕ
	|	СкладыКомпании.ПодразделениеКомпании В ИЕРАРХИИ (&Подразделение)");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый ФиксированныйМассив(Новый Массив);
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСкладам(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СписокНоменклатураВНаличии",
		"Видимость",
		ЗначениеЗаполнено(Форма.Объект.ДоступныеСклады));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СписокНоменклатураДоступно",
		"Видимость",
		ЗначениеЗаполнено(Форма.Объект.ДоступныеСклады));
	ОбщегоНазначенияКлиентСервер
		.УстановитьПараметрДинамическогоСписка(Форма.СписокНоменклатура, "Склады", Форма.Объект.ДоступныеСклады);
		
	ОбщегоНазначенияКлиентСервер
		.УстановитьПараметрДинамическогоСписка(Форма.СписокХарактеристики, "Склады", Форма.Объект.ДоступныеСклады);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДополнительныеСвойстваСписков(Форма)
	
	ДобавляемыеЗначения = Новый Структура("ТипЦен,Валюта,ПодразделениеКомпании");
	
	ЗаполнитьЗначенияСвойств(ДобавляемыеЗначения, Форма.Объект);
	ДобавляемыеЗначения.Вставить("ВыбраннаяНоменклатура", Форма.ВыбраннаяНоменклатура);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Форма.СписокНоменклатура.КомпоновщикНастроек.Настройки.ДополнительныеСвойства,
		ДобавляемыеЗначения,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Форма.СписокХарактеристики.КомпоновщикНастроек.Настройки.ДополнительныеСвойства,
		ДобавляемыеЗначения,
		Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписокРезультатаПоиска(Форма)
	
	Если Форма.ВыборХарактеристики Тогда
		
		Возврат "СписокХарактеристики";
		
	КонецЕсли;
	
	Возврат ?(Форма.ВариантПоиска = "Стандартный", "СписокНоменклатура", "РасширенныйПоискСписокНоменклатура");
	
КонецФункции

&НаКлиенте
Функция ВозможенВыборСтрокиРезультата()
	
	Строка = Элементы[ТекущийСписокРезультатаПоиска(ЭтотОбъект)].ТекущиеДанные;
	
	Если Строка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьРеквизитНаКлиенте(Строка, "ЭтоГруппа") И Строка.ЭтоГруппа Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКСпискуХарактеристик(ВладелецХарактеристики)
	
	Если ВыборХарактеристики Тогда
		Возврат;
	КонецЕсли;
	
	ВыборХарактеристики = Истина;
	Элементы.СтраницыСписков.ТекущаяСтраница = Элементы.ПоискХарактеристики;
	
	ОбновитьДополнительныеСвойстваСписков(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер
		.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Владелец", ВладелецХарактеристики);
	ОбщегоНазначенияКлиентСервер
		.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Номенклатура", ВыбраннаяНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуНоменклатуры()
	
	ПереключитьВариантПоиска();
	ВыбраннаяНоменклатура = Неопределено;
	ВыборХарактеристики = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПомещениеТовараВКорзину(ОбратныйВызов)
	
	Если НЕ ЗапрашиватьКоличество И НЕ ЗапрашиватьЦену Тогда
		
		ВыполнитьОбработкуОповещения(ОбратныйВызов);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборКоличестваИЦены", ЭтотОбъект, ОбратныйВызов);
	ОткрытьФорму(
		"Обработка.ПодборТоваровВДокументАвтосервиса.Форма.ВводКоличестваИЦены",
		Новый Структура("УказыватьКоличество,УказыватьЦену", ЗапрашиватьКоличество, ЗапрашиватьЦену),
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьТоварВКорзину(Товар)
	
	ДопПараметры = Новый Структура("ПодразделениеКомпании,ТипЦен,Валюта");
	ЗаполнитьЗначенияСвойств(ДопПараметры, Объект);
	ДанныеТовара = ЗаполнитьДополнительныеПараметрыНоменклатуры(Товар, ДопПараметры);
	
	Отбор = Новый Структура(
		"Номенклатура,ХарактеристикаНоменклатуры",
		ДанныеТовара.Номенклатура,
		ДанныеТовара.ХарактеристикаНоменклатуры);
	НайденныеСтроки = Объект.Корзина.НайтиСтроки(Отбор);
	ВыбраннаяХарактеристика = Неопределено;
	
	Если НЕ ВыборХарактеристики Тогда
		ВыбраннаяНоменклатура = Неопределено;
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() Тогда
		
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + ДанныеТовара.Количество;
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Объект.Корзина.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТовара);
	
	Если НЕ Элементы.Корзина.Видимость Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'В корзину добален товар:'"),, ДанныеТовара.ПредставлениеТовара);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбратныйВызовПомещенияВКорзину()
	
	ДопПараметры = Новый Структура("Номенклатура,Характеристика", ВыбраннаяНоменклатура, ВыбраннаяХарактеристика);
	Возврат Новый ОписаниеОповещения("Подключаемый_ПомещениеТовараВКорзинуЗаверщение", ЭтотОбъект, ДопПараметры);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьДополнительныеПараметрыНоменклатуры(Знач Товар, ДопПараметры)
	
	РеквизитыНоменклатуры = Новый Структура;
	РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", "ОсновнаяЕдиницаИзмерения");
	РеквизитыНоменклатуры.Вставить("Коэффициент", "ОсновнаяЕдиницаИзмерения.Коэффициент");
	РеквизитыНоменклатуры.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	РеквизитыНоменклатуры.Вставить("ИспользованиеХарактеристик", "ТипНоменклатуры.ИспользованиеХарактеристик");
	РеквизитыНоменклатуры.Вставить("ИспользованиеЕдиницИзмерения", "ТипНоменклатуры.ИспользованиеЕдиницИзмерения");
	
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Товар.Номенклатура, РеквизитыНоменклатуры);
	Товар.Вставить("ХарактеристикаНоменклатуры", Товар.Характеристика);
	Товар.Вставить("ЕдиницаИзмерения", ДанныеНоменклатуры.ЕдиницаИзмерения);
	Товар.Вставить("Коэффициент", ДанныеНоменклатуры.Коэффициент);
	Товар.Вставить("ПредставлениеТовара", Строка(Товар.Номенклатура));
	
	Если ДанныеНоменклатуры.ИспользованиеХарактеристик = 1 Тогда
		
		Товар.Вставить("ВладелецХарактеристики", ДанныеНоменклатуры.ТипНоменклатуры);
		
	ИначеЕсли ДанныеНоменклатуры.ИспользованиеХарактеристик = 2 Тогда
		
		Товар.Вставить("ВладелецХарактеристики", Товар.Номенклатура);
		
	Иначе
		
		Товар.Вставить("ВладелецХарактеристики", Неопределено);
		
	КонецЕсли;
	
	Товар.Вставить("ВладелецЕдиницыИзмерения", Товар.Номенклатура);
	
	Если ДанныеНоменклатуры.ИспользованиеЕдиницИзмерения = 1 Тогда
		
		Товар.Вставить("ВладелецЕдиницыИзмерения", ДанныеНоменклатуры.ТипНоменклатуры);
		
	КонецЕсли;
	
	Если Товар.Цена = 0 Тогда
		
		Товар.Цена = ЦенообразованиеСервер.ПолучитьЦену(
			ДопПараметры.ТипЦен,
			Товар.Номенклатура,
			,
			,
			ДопПараметры.Валюта,
			,
			Товар.Характеристика,
			Товар.ЕдиницаИзмерения,
			ДопПараметры.ПодразделениеКомпании);
		
	КонецЕсли;
	
	Возврат Товар;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ПодборТоваровСервер.УсловноеОформлениеСпискаНоменклатура(ЭтотОбъект);
	ПодборТоваровСервер.УсловноеОформлениеРасширенногоПоискаНоменклатуры(ЭтотОбъект);
	
	ИменаТаблицЗамен = Новый Массив;
	ИменаТаблицЗамен.Добавить("ЗаменыСтарые");
	ИменаТаблицЗамен.Добавить("ЗаменыНовые");
	ИменаТаблицЗамен.Добавить("Аналоги");
	ЗаменыСервер.УстановитьУсловноеОформление(ЭтотОбъект, ИменаТаблицЗамен);
	
	// Замены
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Замены'");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменыСтарые.Имя);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменыСтарые.Количество");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	//@skip-check new-color
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0 , 128, 0));
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Замены'");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменыНовые.Имя);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменыНовые.Количество");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	//@skip-check new-color
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0 , 128, 0));
	
	// Аналоги
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Остатки'");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналоги.Имя);
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.СвободныйОстаток");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	//@skip-check new-color
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0 , 128, 0));
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОбновлениеСвязаннойИнформации(ТекущаяСтрока)
	
	Возврат КэшТекущаяСтрока <> ТекущаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСвязаннуюИнформацию(Номенклатура=Неопределено, Артикул="", Производитель=Неопределено)
	
	ОбновляемыеСписки = Новый Массив(3);
	ОбновляемыеСписки[0] = ОстаткиТоваров;
	ОбновляемыеСписки[1] = ЗаказыПокупателей;
	ОбновляемыеСписки[2] = ЗаказыПоставщикам;
	
	Для Каждого ТекущийСписок Из ОбновляемыеСписки Цикл
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ТекущийСписок,
			"Номенклатура",
			Номенклатура,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ТекущийСписок,
			"ХарактеристикаНоменклатуры",
			Неопределено,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЦикла;
	
	УстановитьПараметрыСпискаАналогов(ЭтотОбъект, Артикул);
	НачатьОбновлениеЗаменНоменклатуры(Артикул, Производитель);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтложеноСписокНоменклатураПриАктивизацииСтроки()
	
	ОбновитьСписокНоменклатуры(Элементы.СписокНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтложеноСписокХарактеристикиПриАктивизацииСтроки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОстаткиТоваров,
		"ХарактеристикаНоменклатуры",
		Элементы.СписокХарактеристики.ТекущаяСтрока,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыПокупателей,
		"ХарактеристикаНоменклатуры",
		Элементы.СписокХарактеристики.ТекущаяСтрока,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Ложь,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыПоставщикам,
		"ХарактеристикаНоменклатуры",
		Элементы.СписокХарактеристики.ТекущаяСтрока,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Ложь,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтложеноРасширенныйПоискСписокНоменклатураПриАктивизацииСтроки()
	
	ОбновитьСписокНоменклатуры(Элементы.РасширенныйПоискСписокНоменклатура);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСпискаАналогов(Форма, Артикул="")
	
	Форма.Аналоги.Параметры.УстановитьЗначениеПараметра(
		"АртикулДляПоиска", ПодборТоваровКлиентСервер.ВАртикулДляПоиска(Артикул));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрерватьДлительнуюОперацию(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеЗаменНоменклатуры(Артикул, Производитель)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		ПрерватьДлительнуюОперацию(ИдентификаторЗадания);
		
	КонецЕсли;
	
	ЗаменыНовые.Очистить();
	ЗаменыСтарые.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Артикул) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СостоянияЗамен.ТекущаяСтраница = Элементы.ЗаменыОбновление;
	
	ПодборТоваровКлиент.НачатьОбновлениеЗаменНоменклатуры(
		Артикул,
		Производитель,
		ЭтотОбъект,
		"Подключаемый_ОбновлениеЗаменНоменклатурыЗавершение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВариантПоиска()
	
	ВыборХарактеристики = Ложь;
	Элементы.СтраницыСписков.ТекущаяСтраница = СтраницыВариантовПоиска.Получить(ВариантПоиска);
	ОбновитьСписокНоменклатуры(СпискиВариантовПоиска.Получить(ВариантПоиска));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНоменклатуры(Список)
	
	Если Список = Элементы.СписокНоменклатура Тогда
		
		ТекущаяНоменклатура = Список.ТекущаяСтрока;
		
	ИначеЕсли Список.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяНоменклатура = Список.ТекущиеДанные.Номенклатура;
		
	Иначе
		
		ТекущаяНоменклатура = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура)
		И НЕ ТребуетсяОбновлениеСвязаннойИнформации(ТекущаяНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	КэшТекущаяСтрока = ТекущаяНоменклатура;
	
	ТекущийАртикул = "";
	ТекущийПроизводитель = Неопределено;
	Если Список.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийАртикул = Список.ТекущиеДанные.Артикул;
		ТекущийПроизводитель = Список.ТекущиеДанные.Производитель;
		
	КонецЕсли;
	
	ОбновитьСвязаннуюИнформацию(ТекущаяНоменклатура, ТекущийАртикул, ТекущийПроизводитель);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискНоменклатуры()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПоиска) Тогда
		
		ПрерватьДлительнуюОперацию(ИдентификаторЗаданияПоиска);
		
	КонецЕсли;
	
	Элементы.РасширенныйПоискНоменклатурыСтраницы.ТекущаяСтраница = Элементы.РасширенныйПоискНоменклатурыОжидание;
	РасширенныйПоискСписокНоменклатура.Очистить();
	
	Если НЕ ЗначениеЗаполнено(РасширенныйПоискСтрокаПоиска) Тогда
		
		Элементы.РасширенныйПоискНоменклатурыСтраницы.ТекущаяСтраница = Элементы.РасширенныйПоискНоменклатурыПредложениеНачатьПоиск;
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПоиска = ПодборТоваровКлиент.НовыеПараметрыПоискаНоменклатуры();
	ПараметрыПоиска.ТочныйПоиск = ПоТочномуСоответствию;
	ПодборТоваровКлиент.НачатьПоискНоменклатуры(
		РасширенныйПоискСтрокаПоиска, ПараметрыПоиска, ЭтотОбъект, "Подключаемый_ПоискНоменклатурыЗавершение");
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеНоменклатуры(Интерактивно=Ложь, Выбор=Ложь)
	
	ТекущиеДанные = Элементы.РасширенныйПоискСписокНоменклатура.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбранна строка для создания номенклатуры.'"));
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбранной строки уже существует номенклатура.'"));
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("Артикул,АртикулДляПоиска,Производитель,Наименование");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ТекущиеДанные);
	ПараметрыОбратногоВызова = Новый Структура;
	ПараметрыОбратногоВызова.Вставить("ИдентификаторСтроки", Элементы.РасширенныйПоискСписокНоменклатура.ТекущаяСтрока);
	ПараметрыОбратногоВызова.Вставить("ПродолжитьВыбор", Выбор);
	ОбратныйВызов = Новый ОписаниеОповещения(
		"Подключаемый_СозданиеНоменклатурыЗавершение", ЭтотОбъект, ПараметрыОбратногоВызова);
	ПоискВПрайсЛистахКлиент.НачатьСозданиеНоменклатуры(ДанныеЗаполнения, ЭтотОбъект, ОбратныйВызов, Интерактивно);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	НастройкаПользователя = ПраваИНастройкиПользователя.Значение("ДоступныеРежимыСозданияНоменклатурыИзПрайсЛистовКонтрагентов");
	ДоступностьИнтерактивногоСоздания = (НастройкаПользователя
		= Перечисления.ВариантыСозданияНоменклатурыИзПрайсЛистовКонтрагентов.АвтоматическиИИнтерактивно);
	Элементы.СоздатьНовуюНоменклатуруИзПрайсаИнтерактивно.Видимость = ДоступностьИнтерактивногоСоздания;
	Элементы.ЗапрашиватьЦену.Доступность = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах");
	Элементы.КорзинаЦена.Доступность = Элементы.ЗапрашиватьЦену.Доступность;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНоменклатурыПоПрименяемости()
	
	ОтборНоменклатурыПоПрименяемости = ПравоПользователя("ОтборНоменклатурыПоПрименяемости");
	
	Если ОтборНоменклатурыПоПрименяемости И Параметры.Свойство("ОтборНоменклатурыПоПрименяемости") Тогда
		
		Если ТипЗнч(Параметры.Модель) = Тип("СправочникСсылка.Модели") Тогда
			
			Применяемость = Параметры.Модель;
			
		ИначеЕсли ТипЗнч(Параметры.Модель) = Тип("СправочникСсылка.Автомобили") Тогда
			
			Применяемость = Параметры.Модель.Модель;
			
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(Параметры.Модель.Метаданные()) Тогда
			
			Применяемость = ?(
				ЕстьРеквизит(Параметры.Модель, "Автомобиль"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Модель, "Автомобиль.Модель"),
				Справочники.Модели.ПустаяСсылка());
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Применяемость) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		УстановитьОтборПоПрименяемостиНаСписокНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УпаковатьДанныеКЗакрытию(Знач Корзина)
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Корзина.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПомещениеТовараВКорзинуЗаверщение(КоличествоЦена, Товар) Экспорт
	
	Если КоличествоЦена = Неопределено Тогда
		
		КоличествоЦена = Новый Структура("Количество,Цена", 1, 0);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Товар, КоличествоЦена);
	ПоместитьТоварВКорзину(Товар);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКоличестваИЦены(КоличествоЦена, ОбратныйВызов) Экспорт
	
	Если КоличествоЦена = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбратныйВызов, КоличествоЦена);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлениеЗаменНоменклатурыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Статус <> "Выполнено" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтарыеЗамены = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	НовыеЗамены = ПолучитьИзВременногоХранилища(Результат.АдресДополнительногоРезультата);
	
	Для Каждого Строка Из СтарыеЗамены Цикл
		
		ЗаполнитьЗначенияСвойств(ЗаменыСтарые.Добавить(), Строка);
		
	КонецЦикла;
	
	Для Каждого Строка Из НовыеЗамены Цикл
		
		ЗаполнитьЗначенияСвойств(ЗаменыНовые.Добавить(), Строка);
		
	КонецЦикла;
	
	Элементы.СостоянияЗамен.ТекущаяСтраница = Элементы.ЗаменыИнформация;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоискНоменклатурыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаданияПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		НайденныеТовары = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Для Каждого Строка Из НайденныеТовары Цикл
			
			ЗаполнитьЗначенияСвойств(РасширенныйПоискСписокНоменклатура.Добавить(), Строка);
			
		КонецЦикла;
		
		Элементы.РасширенныйПоискНоменклатурыСтраницы.ТекущаяСтраница = Элементы.РасширенныйПоискНоменклатурыРезультат;
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		Элементы.РасширенныйПоискНоменклатурыСтраницы.ТекущаяСтраница = Элементы.РасширенныйПоискНоменклатурыПредложениеНачатьПоиск;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СозданиеНоменклатурыЗавершение(Результат, Контекст) Экспорт
	
	Номенклатура = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Номенклатура");
	
	Если Номенклатура = Неопределено Тогда
		
		Номенклатура = ПолучитьЗначениеПараметраСтруктуры(Контекст, "ДобавленнаяСсылка");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаДобавления = РасширенныйПоискСписокНоменклатура.НайтиПоИдентификатору(Контекст.ИдентификаторСтроки);
	СтрокаДобавления.Номенклатура = Номенклатура;
	СтрокаДобавления.Источник = 0;
	СтрокаДобавления.ВладелецХарактеристики = ПодборТоваровВызовСервера.ВладелецХарактеристики(Номенклатура);
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Контекст, "ПродолжитьВыбор", Ложь) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыбраннаяНоменклатура = Номенклатура;
	Если СтрокаДобавления.ВладелецХарактеристики <> Неопределено Тогда
		
		ПерейтиКСпискуХарактеристик(СтрокаДобавления.ВладелецХарактеристики);
		Возврат;
		
	КонецЕсли;
	
	НачатьПомещениеТовараВКорзину(ОбратныйВызовПомещенияВКорзину());
	
КонецПроцедуры

// Обработчик ответа на вопрос создания новой номенклатуры на основании выбранной строки в таблицы замен.
//
&НаКлиенте
Процедура ДобавлениеЗамены(РезультатОтвета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура;
		Основание      = Новый Структура();
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			
			ДобавлениеНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(
				ДополнительныеПараметры,
				"ДобавлениеНоменклатуры",
				Неопределено
			);
			
			Если НЕ ДобавлениеНоменклатуры = Неопределено Тогда
				
				Основание.Вставить("Артикул",       ДобавлениеНоменклатуры.Артикул);
				Основание.Вставить("Производитель", ДобавлениеНоменклатуры.Производитель);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Основание", Основание);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавлениеЗамены()

#КонецОбласти

#Область Инициализация

СтраницыВариантовПоиска = Новый Соответствие;
СтраницыВариантовПоиска.Вставить("Стандартный", Элементы.СтандартныйПоискНоменклатуры);
СтраницыВариантовПоиска.Вставить("Расширенный", Элементы.РасширенныйПоискНоменклатуры);

СпискиВариантовПоиска = Новый Соответствие;
СпискиВариантовПоиска.Вставить("Стандартный", Элементы.СписокНоменклатура);
СпискиВариантовПоиска.Вставить("Расширенный", Элементы.РасширенныйПоискСписокНоменклатура);

#КонецОбласти
