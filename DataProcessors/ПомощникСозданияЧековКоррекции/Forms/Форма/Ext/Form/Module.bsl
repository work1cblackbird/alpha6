#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДокументОснование", Неопределено);
	
	ТекстСообщения = Документы.ЧекКоррекции.ПроверитьВозможностьСозданияНаОсновании(Основание);
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Основание, ТекстСообщения);
	КонецЕсли;
	
	Если НЕ УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЧекиКоррекции(Основание, Истина);
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		РежимИспользованияОбработки = 1;
		Объект.НеприменениеККТ = Истина;
	КонецЕсли;
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	
	// Признак разрешения пользователю редактировать реквизиты объекта
	СлужебныеРеквизиты.Вставить(
		"РазрешитьРедактированиеЦенИСумм",
		ПравоПользователя("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект.ЧекКоррекции)
	);
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта", Метаданные.Документы.ЧекКоррекции.ПолноеИмя());
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(ЭтотОбъект, СлужебныеРеквизиты);
	// Маркировка
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	// Конец Маркировка
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(
		ЭтотОбъект,
		,
		,
		Объект.ЧекКоррекции,
		"ТоварыХарактеристикаНоменклатурыЧекКоррекции"
	);
	ЗаполнитьСлужебныеРеквизиты();
	СформироватьСписокВыбораАдресПокупателя();
	НастроитьПараметрыВыбораЭлементовФормы();
	УстановитьКонтекстДокумента();
	УстановитьУсловноеОформление();
	УстановитьЦветЗаголовкаИспользуетсяПСН();
	
	// Убрали пробитие чеков коррекции на ЭТ. Версия 6.1.13.03
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЧекКоррекцииОтправлятьКомандуНаЭТ",
		"Видимость",
		Ложь
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Модифицированность = Истина;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Если ЗавершениеРаботы Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Изменения будут потеряны.'");
			Отказ = Истина;
			
		ИначеЕсли НЕ ПризнакЗакрытияФормы Тогда
			
			ПараметрыВопроса = Новый Структура("Закрыть", Истина);
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"Подключаемый_ОбработкаРезультатаСохраненияИзменений",
				ЭтотОбъект, 
				ПараметрыВопроса);
			ПоказатьВопрос(
				ОбработчикОповещения,
				НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена,
				, ,
				НСтр("ru = '1С:Предприятие'")
			);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура РежимИспользованияОбработкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если Объект.НеприменениеККТ И ДокументОснованиеПробит Тогда
		Объект.НеприменениеККТ = Ложь;
		РежимИспользованияОбработки = 0;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Документ основание пробит. Использование режима ""Неприменение ККТ"" невозможно'")
		);
		Возврат;
	ИначеЕсли НЕ Объект.НеприменениеККТ И НЕ ДокументОснованиеПробит Тогда
		Объект.НеприменениеККТ = Истина;
		РежимИспользованияОбработки = 1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Документ основание не пробит. Использование режима ""Исправление пробитого чека"" невозможно'")
		);
	КонецЕсли;
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимИспользованияОбработкиПриИзменении(Элемент)
	
	Объект.НеприменениеККТ = РежимИспользованияОбработки = 1;
	РежимИспользованияОбработкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЧекКоррекции.КонтрагентПриИзменении(Объект.ЧекКоррекции, ПараметрыДействия);
	
	ФормаСобственности = Объект.ЧекКоррекции.Контрагент.ФормаСобственности;
	Объект.ЧекКоррекции.АдресПокупателя = "";
	СформироватьСписокВыбораАдресПокупателя();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КассаККМЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЧекКоррекции.КассаККМПриИзменении(Объект.ЧекКоррекции, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КассаККМЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ФРЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если НЕ Объект.НеприменениеККТ Тогда
		Объект.ЧекСторно.ФР = Объект.ЧекКоррекции.ФР;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФРЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ФРЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакСпособаРасчетаЧекКоррекцииПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТипКоррекцииЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	РасставитьАвтоотметкиНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКоррекцииЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ТипКоррекцииЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЧекКоррекции.ДоговорВзаиморасчетовПриИзменении(Объект.ЧекКоррекции, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	Если ЗначениеЗаполнено(Объект.ЧекКоррекции.ДокументОснование) Тогда
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ДокументОснованиеПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(
			Обработчик,
			НСтр("ru = 'Перезаполнить документ?'"),
			РежимДиалогаВопрос.ОКОтмена,
			, ,
			НСтр("ru = 'Перезаполнить документ'")
		);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СделкаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЧекКоррекции.СделкаПриИзменении(Объект.ЧекКоррекции, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ЗаполнитьПоСделке");
	СделкаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЧекКоррекции.СтавкаНДСПриИзменении(Объект.ЧекКоррекции, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СтавкаНДСЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЧекКоррекции.СуммаДокументаПриИзменении(Объект.ЧекКоррекции, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СуммаДокументаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТелефонEmailПокупателяЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонEmailПокупателяЧекКоррекцииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ТелефонEmailПокупателяЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекКоррекцииПечататьАртикулНоменклатурыПриИзменении(Элемент)
	
	Если НЕ Объект.НеприменениеККТ Тогда
		Объект.ЧекСторно.ПечататьАртикулНоменклатуры = Объект.ЧекКоррекции.ПечататьАртикулНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаКлиенте
Процедура ЧекКоррекцииКомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		Объект.ЧекКоррекции
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент, Объект.ЧекКоррекции);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекКоррекцииНадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект, , , Объект.ЧекКоррекции);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплаты

&НаКлиенте
Процедура ОплатыЧекКоррекцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ОплатыЧекКоррекции.ТекущиеДанные;
		ТекущиеДанные.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные");
		ТекущиеДанные.Сумма = Объект.ЧекКоррекции.СуммаДокумента
			- (Объект.ЧекКоррекции.Оплаты.Итог("Сумма") - Объект.ЧекКоррекции.Оплаты.Итог("Сдача"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОплатыЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	СуммаДокументаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыЧекКоррекцииПриИзменении(Элемент)
	
	ОплатыЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОплатыЧекКоррекцииПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	СуммаДокументаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыЧекКоррекцииПослеУдаления(Элемент)
	
	УправлениеДиалогомКлиентСервер.УстановитьПризнакНеобходимостиЭТ(Объект.ЧекКоррекции);
	ОплатыЧекКоррекцииПослеУдаленияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыОплаты

&НаСервере
Процедура ОплатыТипОплатыЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Оплаты.НайтиПоИдентификатору(Элементы.ОплатыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ОплатыТипОплатыПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыТипОплатыЧекКоррекцииПриИзменении(Элемент)
	
	ОплатыТипОплатыЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОплатыСуммаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Оплаты.НайтиПоИдентификатору(Элементы.ОплатыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ОплатыСуммаПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыСуммаЧекКоррекцииПриИзменении(Элемент)
	
	ОплатыСуммаЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОплатыДоговорВзаиморасчетовЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Оплаты.НайтиПоИдентификатору(Элементы.ОплатыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ОплатыДоговорВзаиморасчетовПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыДоговорВзаиморасчетовЧекКоррекцииПриИзменении(Элемент)
	
	ОплатыДоговорВзаиморасчетовЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыЧекКоррекцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломДобавления(
		ЭтотОбъект,
		Элемент,
		Отказ,
		Копирование,
		Родитель,
		Группа,
		Параметр
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииПередУдалением(Элемент, Отказ)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ЗаполнитьПризнакАвтомобиляОтФизЛица();
	РассчитатьИтоговыеСуммы(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьСписокКодовМаркировки(ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Строка = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не
		ПраваИНастройкиПользователяКлиент.Значение("СпособВыбораСкидки")
			= ПредопределенноеЗначение("Перечисление.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов")
		Или Объект.ЧекКоррекции.БлокироватьПерерасчетСкидок
	Тогда
		Возврат;
	КонецЕсли;
	
	КонтролируемыеРеквизиты = КонтролируемыеРеквизиты();
	Результат = КонтролируемыеРеквизиты.Получить(Поле.Имя);
	Если Результат <> Неопределено Тогда
		ПутьКРеквизиту = СтрРазделить(Результат, ".");
		Если СтрНайти(Результат, "Товары") Тогда
			ИмяРеквизита = ПутьКРеквизиту[3];
			Значение = Строка[ИмяРеквизита];
		Иначе
			ИмяРеквизита = ПутьКРеквизиту[2];
			Значение = Объект.ЧекКоррекции[ИмяРеквизита];
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Значение) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для редактирования суммы или процента необходимо выбрать скидку.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТоварыЧекКоррекции.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторТовара) ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования,
		,
		Объект.ЧекКоррекции
	);
	
	ТекущаяСтрока = Элементы.ТоварыЧекКоррекции.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЧекКоррекцииПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(Объект.ЧекКоррекции, "Товары", ПараметрыДействия);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, Объект.ЧекКоррекции);
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(
		ТоварыНоменклатурыТекстПодвала,
		Объект.ЧекКоррекции
	);
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьКолонкиСуммаВсего(ЭтотОбъект, Объект.ЧекКоррекции);
	
	РассчитатьИтоговыеСуммы(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииПослеУдаления(Элемент)
	
	ТоварыЧекКоррекцииПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекКоррекцииПроверкаПеретаскивания(
		Элемент,
		ПараметрыПеретаскивания,
		СтандартнаяОбработка,
		Строка,
		Поле)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПроверкаПеретаскивания(
		ЭтотОбъект,
		Элемент,
		ПараметрыПеретаскивания,
		СтандартнаяОбработка,
		Строка,
		Поле
	);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыНоменклатураПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(ТекущиеДанные, ПараметрыДействия);
	ОбновитьВидимостьКолонкиМаркировкаПриИзмененииНоменклатуры(ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыНоменклатураЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыХарактеристикаНоменклатурыПриИзменении(
		Объект.ЧекКоррекции,
		ТекущиеДанные,
		ПараметрыДействия
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЕдиницаИзмеренияЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыЕдиницаИзмеренияПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыКоличествоПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыКоличествоЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЦенаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекНаОплату.ТоварыЦенаПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыЦенаЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыСуммаПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыСуммаЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыПроцентСкидкиПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыСуммаСкидкиПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	
	Документы.ЧекКоррекции.ТоварыСкидкаНаТоварПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаВсегоЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыСуммаВсегоПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыСуммаВсегоЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтавкаНДСЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыСтавкаНДСПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыСтавкаНДСЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаНДСЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(Элементы.ТоварыЧекКоррекции.ТекущаяСтрока);
	Документы.ЧекКоррекции.ТоварыСуммаНДСПриИзменении(Объект.ЧекКоррекции, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСЧекКоррекцииПриИзменении(Элемент)
	
	ТоварыСуммаНДСЧекКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	Если Модифицированность Тогда
		Обработчик = Новый ОписаниеОповещения("ПродолжитьПробитиеДокументов", ЭтотОбъект);
		Если Объект.НеприменениеККТ Тогда
			ТекстВопроса = НСтр("ru = 'Документ еще не проведен.
				|Выполнение действия возможно только после проведения документа.
				|Документ будет проведен.'"
			);
		Иначе
			ТекстВопроса = НСтр("ru = 'Документы еще не проведены.
				|Выполнение действия возможно только после проведения документов.
				|Документы будут проведены.'");
		КонецЕсли;
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Возврат;
		
	КонецЕсли;
	
	ЗавершитьПробитиеДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЧекаПослеПробития(ТипЧека)
	
	Если ТипЧека = "ЧекСторно" Тогда
		ДокументОбъект = Объект.ЧекСторно.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект.ЧекСторно");
	Иначе
		ДокументОбъект = Объект.ЧекКоррекции.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект.ЧекКоррекции");
	КонецЕсли;
	УправлениеДиалогомНаСервере();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыДокумента(Команда)
	
	// Формируем структуру параметров открытия вспомогательной формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", Объект.ЧекКоррекции);
	ПараметрыФормы.Вставить("Операция", Объект.ЧекКоррекции.ХозОперация);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекКоррекции.ДатаФР));
	ПараметрыФормы.Вставить("ИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыФормы.Вставить("ПараметрыВыбораДокументаОснование", Элементы.ДокументОснованиеЧекКоррекции.ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОграничениеТипаДокументаОснование", Элементы.ДокументОснованиеЧекКоррекции.ОграничениеТипа);

	// Перенесем возможные дополнительные параметры
	ПараметрыФормы.Вставить("ДопПараметры", Неопределено);
	
	// Производим открытие формы параметров
	ОткрытьФорму(
		"ОбщаяФорма.ПараметрыДокумента",
		ПараметрыФормы,
		ЭтотОбъект,
		, , ,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПараметрыДокумента"),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеККМ(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФР", Объект.ЧекКоррекции.ФР);
	
	ОткрытьФорму(
		"ОбщаяФорма.УправлениеФискальнымУстройством",
		ПараметрыФормы,
		ЭтотОбъект
	);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭТ(Команда)
	
	ОткрытьФорму(
		"ОбщаяФорма.УправлениеЭквайринговымТерминалом",
		,
		ЭтотОбъект,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличные(Команда)
	
	ДобавитьОплату(ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнаяКарта(Команда)
	
	ДобавитьОплату(ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект, , , , , ПараметрыДействия, Объект.ЧекКоррекции);
	
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	
	РаспределитьНаСервере();
	
КонецПроцедуры

// Маркировка
&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировки(Команда)
	
	ИмяДействия = "ОтправкаЗапросаНаПолучениеТекущихСтатусовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("КодыМаркировки", ЗаполнитьКодыМаркировкиДляПроверки());
	ДополнительныеПараметры.Вставить("Организация", Объект.ЧекКоррекции.Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Объект.ЧекКоррекции.ПодразделениеКомпании);
	ДополнительныеПараметры.Вставить("НеТребуетсяКлючСессии", Ложь);
	ДополнительныеПараметры.Вставить("РазрешенныеСостояния", МаркировкаТоваровКлиент.РазрешенныеСостояния(, Истина));
	ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработчикОповещения);
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьЗапрос(ЭтотОбъект, Объект.ЧекКоррекции, ДополнительныеПараметры);
	
КонецПроцедуры
// Конец Маркировка

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПечатьЧекаКоррекцииЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ТекущийОбъект = Объект[ДополнительныеПараметры.Объект];
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Булево") Тогда
		Если НЕ РезультатВыполнения.Результат Тогда
			ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			ПараметрыФискализации = РезультатВыполнения.ПараметрыФискализации;
			
			ФискальныеРеквизиты = Новый Структура;
			
			НомерСмены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерСменыККТ", "");
			ФискальныеРеквизиты.Вставить("НомерСмены", НомерСмены);
			
			НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаККТ", "");
			ФискальныеРеквизиты.Вставить("НомерДокумента", НомерДокумента);
			
			ДатаФР = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыФискализации,
				"ДатаВремяЧека",
				МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса()
			);
			ФискальныеРеквизиты.Вставить("ДатаФР", ДатаФР);
			
			НомерЧека = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаЗаСмену", "");
			ФискальныеРеквизиты.Вставить("НомерЧека", НомерЧека);
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ДатаФР) Тогда
				Если НЕ УправлениеДиалогомВызовСервера.ЗаписатьОбъект(ТекущийОбъект.Ссылка, Истина, ФискальныеРеквизиты) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru='Не удалось записать сведения о фискальных реквизитах в документ %1. Необходимо вручную внести данные в документ: номер чека - %2, дата чека - %3, номер смены - %4, номер документа - %5'"),
							ТекущийОбъект.Ссылка,
							ФискальныеРеквизиты.НомерЧека,
							ФискальныеРеквизиты.ДатаФР,
							ФискальныеРеквизиты.НомерСмены,
							ФискальныеРеквизиты.НомерДокумента),
						ТекущийОбъект.Ссылка,
						"НомерЧека",
					);
				КонецЕсли;
				ОбновитьДанныеЧекаПослеПробития(ДополнительныеПараметры.Объект);
			КонецЕсли;
			ОповеститьОбИзменении(ТекущийОбъект.Ссылка);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Операция выполнена успешно.'"));
			Если ДополнительныеПараметры.Объект = "ЧекСторно" Тогда
				ПробитьЧекКоррекции();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьНаСервере()
	
	Документы.ЧекКоррекции.ПроизвестиРаспределениеСуммыОплаты(
		Объект.ЧекКоррекции.СуммаДокумента,
		Объект.ЧекКоррекции.Товары
	);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтоговыеСуммы(ПараметрыДействия = Неопределено)
	
	ИтогиОперации = Документы.ЧекКоррекции.РассчитатьИтогиОперации(Объект.ЧекКоррекции);
	
	// Если сумма изменилась, то выполним пересчет документа
	Если НЕ Объект.ЧекКоррекции.СуммаДокумента = ИтогиОперации.СуммаДокумента Тогда
		
		Объект.ЧекКоррекции.СуммаДокумента = ИтогиОперации.СуммаДокумента;
		СуммаДокументаЧекКоррекцииПриИзмененииНаСервере(ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплату(Значение)
	
	ПараметрыОплаты = Новый Структура();
			
	ПараметрыОплаты.Вставить("ТипОплаты", Значение);
		
	Если Значение = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда 
		ОсновнойТипПлатежнойКарты(ПараметрыОплаты);				
	КонецЕсли;
		
	НайденныеСтроки = Объект.ЧекКоррекции.Оплаты.НайтиСтроки(ПараметрыОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.ОплатыЧекКоррекции.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Если НЕ ТолькоПросмотр Тогда
			Элементы.ОплатыЧекКоррекции.ИзменитьСтроку();
		КонецЕсли;
	Иначе
		Элементы.ОплатыЧекКоррекции.ДобавитьСтроку();
		ЗаполнитьЗначенияСвойств(Элементы.ОплатыЧекКоррекции.ТекущиеДанные, ПараметрыОплаты);
	КонецЕсли;
	
	Элементы.ОплатыЧекКоррекции.ТекущийЭлемент = Элементы.ОплатыЧекКоррекции.ПодчиненныеЭлементы.ОплатыСуммаЧекКоррекции;
	УправлениеДиалогомКлиентСервер.УстановитьПризнакНеобходимостиЭТ(Объект.ЧекКоррекции);
	
КонецПроцедуры   

&НаСервереБезКонтекста
Процедура ОсновнойТипПлатежнойКарты(ПараметрыОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыПлатежныхКарт.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыПлатежныхКарт КАК ТипыПлатежныхКарт
		|ГДЕ
		|	ТипыПлатежныхКарт.Основной = ИСТИНА";  
	
	РезультатЗапроса = Запрос.Выполнить();  
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();  
		Выборка.Следующий();
		ПараметрыОплаты.Вставить("ТипПлатежнойКарты", Выборка.Ссылка);
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПризнакАвтомобиляОтФизЛица()
	
	Для Каждого ТекущаяСтрока Из Объект.ЧекКоррекции.Товары Цикл
		ТекущаяСтрока.ИндикаторСебестоимостиАвтомобиля = БиблиотекаКартинок.Информация;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТоварыНаСервере(ПараметрыДействия = Неопределено)
	
	Объект.ЧекКоррекции.Товары.Очистить();
	
	Документы.ЧекКоррекции.ЗаполнитьТовары(Объект.ЧекКоррекции, Ложь, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершениеЗаполненияТоваров(ПерезаполнитьТовары, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПерезаполнитьТовары Тогда
		ПерезаполнитьТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	СписокВыбора = Элементы.ТипРасчетаЧекКоррекции.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ОснованиеВозвратДС(Объект.ЧекКоррекции.ДокументОснование) Тогда
		СписокВыбора.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
		СписокВыбора.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств);
	Иначе
		СписокВыбора.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		СписокВыбора.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
	КонецЕсли;
	
КонецПроцедуры

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ЧекКоррекции.ДатаФР) Тогда
		ТолькоПросмотр = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаПробитьЧек",
			"Доступность",
			Ложь
		);
		Возврат;
	КонецЕсли;
	
	//УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект, Объект.ЧекКоррекции);
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьПатента(ЭтаФорма, Объект.ЧекКоррекции);
	
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьСпособаЗачатаАвансов(
		ЭтотОбъект,
		Объект.ЧекКоррекции,
		"ЧекКоррекцииОплаты"
	);
	УправлениеДиалогомСервер.РасставитьАвтоотметкиНезаполненного(
		ЭтотОбъект,
		Объект.ЧекКоррекции,
		,
		,
		"ЧекКоррекции"
	);
	
	// Установим заголовок формы
	УправлениеДиалогомКлиентСервер.ОбработкаПолученияПредставления(	
		Неопределено,
		Объект.ЧекКоррекции,
		ЭтотОбъект.Заголовок
	);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, Объект.ЧекКоррекции);
	
	// Обновляем заголовок индикатора состояния договора с контрагентом
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиВзаиморасчеты(
		ЭтотОбъект,
		Новый Структура("ЭлементФормы", "ДоговорВзаиморасчетовЧекКоррекции"),
		Объект.ЧекКоррекции
	);
	
	// Обновляем текст подвала в колонке Номенклатура
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(
		ТоварыНоменклатурыТекстПодвала,
		Объект.ЧекКоррекции
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЧекКоррекцииКарточка",
		"ТолькоПросмотр",
		НЕ ПравоПользователя("РазрешитьРучнойВыборКарточки", Объект.ЧекКоррекции)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПробитьЧек",
		"Доступность",
		НЕ ЗначениеЗаполнено(Объект.ЧекКоррекции.ДатаФР) И НЕ ТолькоПросмотр
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПробитьЧек",
		"Заголовок",
		?(Объект.НеприменениеККТ, НСтр("ru = 'Пробить чек'"), НСтр("ru = 'Пробить чеки'"))
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаЗаписать",
		"Заголовок",
		?(Объект.НеприменениеККТ, НСтр("ru = 'Записать чек'"), НСтр("ru = 'Записать чеки'"))
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСебестоимостьАвтомобиляЧекКоррекции",
		"Видимость",
		ПравоПользователя("ВыделениеМежценовойРазницыОтдельнойСтрокой", Объект.ЧекКоррекции)
	);
	
	ЗаполнитьПризнакАвтомобиляОтФизЛица();
	
	ФормаСобственности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекКоррекции.Контрагент, "ФормаСобственности");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АдресПокупателяЧекКоррекции",
		"ТолькоПросмотр",
		НЕ (ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
		ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель)
	);
	
	// Установим видимость картинки с проверкой кодов маркировки через ККТ
	Элементы.ТоварыКартинкаПроверкиМаркировкиККТЧекКоррекции.Видимость = 
		Объект.ЧекКоррекции.КодыМаркировки.Количество() > 0
		И ЗначениеЗаполнено(Объект.ЧекКоррекции.ФР)
		И ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(Объект.ЧекКоррекции.ФР);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НомерПредписанияЧекКоррекции",
		"Видимость",
		Объект.ЧекКоррекции.ТипКоррекции = Перечисления.ТипыЧековКоррекции.ПоПредписанию
	);
	
	УстановитьДоступностьСкидокДокумента();
	УстановитьДоступностьРеквизитовСторно();
	
	УправлениеДиалогомДокументаСервер.УстановитьИнформациюПечатиЧека(
		ЭтотОбъект,
		Объект.ЧекКоррекции.ФР,
		Объект.ЧекКоррекции.ТелефонEmailПокупателя,
		НЕ ЗначениеЗаполнено(Объект.ЧекКоррекции.ДатаФР)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЧекКоррекцииОтправлятьКомандуНаЭТ",
		"ТолькоПросмотр",
		Не ПраваИНастройкиПользователя.Значение("РазрешитьРучнуюАвторизациюБезналичныхПлатежей")
	);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура РасставитьАвтоотметкиНезаполненного()
	
	УправлениеДиалогомСервер.РасставитьАвтоотметкиНезаполненного(
		ЭтотОбъект,
		Объект.ЧекКоррекции,
		,
		,
		"ЧекКоррекции"
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСкидокДокумента()
	
	СпособВыбораСкидки = ПравоПользователя("СпособВыбораСкидки", Объект.ЧекКоррекции);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок =
		СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиЧекКоррекции",
		"ТолькоПросмотр",
		Объект.ЧекКоррекции.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиЧекКоррекции",
		"ТолькоПросмотр",
		Объект.ЧекКоррекции.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТоварЧекКоррекции",
		"ТолькоПросмотр",
		Объект.ЧекКоррекции.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтрокиЧекКоррекции",
		"ТолькоПросмотр",
		Объект.ЧекКоррекции.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтрокиЧекКоррекции",
		"ТолькоПросмотр",
		Объект.ЧекКоррекции.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовСторно()
	
	ЕстьОснование = ЗначениеЗаполнено(Объект.ЧекКоррекции.ДокументОснование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДополнительныйРеквизитЧекаЧекКоррекции",
		"Доступность",
		НЕ (ЕстьОснование И ДокументОснованиеПробит)
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаКоррекцииЧекКоррекции",
		"Доступность",
		НЕ (ЕстьОснование И ДокументОснованиеПробит)
	);
	
КонецПроцедуры

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ТоварыХарактеристикаНоменклатурыЧекКоррекции",
		"Объект.ЧекКоррекции.Товары.ВладелецХарактеристики"
	);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(
		ЭтотОбъект,
		"ТоварыХарактеристикаНоменклатурыЧекКоррекции",
		"ЧекКоррекции.Товары"
	);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект, КонтролируемыеРеквизиты())
	);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоЧекКоррекции");
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоЧекКоррекцииТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЧекКоррекции.Товары.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыГТДЧекКоррекции");

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормаСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыСобственности.ПрочаяФормаСобственности;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормаСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыСобственности.ОбособленноеПодразделение;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормаСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыСобственности.ЧастноеЛицо;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	МаркировкаТоваровСервер.УстановитьУсловноеОформлениеКодыМаркировок(ЭтотОбъект,
		"ТоварыКодыМаркировкиЧекКоррекции",
		"Объект.ЧекКоррекции.Товары.МаркируемыйТовар"
	);
	
	//	 оформление соответствия кодов маркировки
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодыМаркировкиЧекКоррекции.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЧекКоррекции.Товары.ЕстьРазличияСостоянийКМ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		"Объект.ЧекКоррекции.Товары.ПроверкаСоответствияКодовМаркировкиПроводилась"
	);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУсловногоОформления.Оформление
		.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.СписокКодовМаркировкиОшибкиПриПроверкеШрифт);
	
	// Условное оформление для выделения автомобиля, купленного у физлица
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыИндикаторСебестоимостиАвтомобиляЧекКоррекции");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЧекКоррекции.Товары.СебестоимостьАвтомобиля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры // УстановитьУсловноеОформление()

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры,
		Объект.ЧекКоррекции
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "РедактированиеКодовМаркировкиСтрокиТовара" Тогда
		ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
		Для Каждого Строка Из Объект.ЧекКоррекции.Товары Цикл
			ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаСоответствияКодовМаркировкиПроводилась
				И Строка.ПроверкаСоответствияКодовМаркировкиПроводилась;
		КонецЦикла;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры,
		Объект.ЧекКоррекции
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	// Дополним результат для подбора номенклатуры
	Если ДополнительныеПараметры = "ПодборНоменклатуры" Тогда
		РезультатОповещения.Вставить("ПолноеИмяОбъекта", ЭтотОбъект.ПолноеИмяОбъекта);
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	КоллекцияОпераций = Новый Структура();
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("ЗаполнитьПоСделке") Тогда
		Если ЗначениеЗаполнено(Объект.ЧекКоррекции.Сделка) Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ЗавершениеЗаполненияТоваров", ЭтотОбъект);
			
			ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
				КоллекцияОпераций,
				"ТребуетсяЗаполнитьПоСделке", 
				НСтр("ru='Перезаполнить таблицу <Товары> по сделке?'"),
				, ,
				ОбработчикОповещения
			);
			
			ПараметрыДействия.Вставить("ТребуетсяЗаполнитьПоСделке", Ложь);
			ПараметрыДействия.Вставить("ТребуетсяПересчетЦен",       Ложь);
			ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен",      Ложь);
		КонецЕсли;
		ПараметрыДействия.Удалить("ЗаполнитьПоСделке");
	КонецЕсли;
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(
		ЭтотОбъект,
		ПараметрыДействия,
		КоллекцияОпераций,
		,
		Объект.ЧекКоррекции
	);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

#КонецОбласти

&НаСервереБезКонтекста
Функция ОткрыватьФормуПроверкиМаркировкиККТ(ПризнакСпособаРасчета, ФР)
	
	ДоступныеПризнакиРасчета = Новый Массив();
	ДоступныеПризнакиРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
	ДоступныеПризнакиРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
	ДоступныеПризнакиРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой);
	
	Возврат ДоступныеПризнакиРасчета.Найти(ПризнакСпособаРасчета) <> Неопределено
		И ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ФР);
	
КонецФункции

// Маркировка
&НаКлиенте
Функция ЗаполнитьКодыМаркировкиДляПроверки()
	
	Результат = Новый Массив;
	Для Каждого Строка Из Объект.ЧекКоррекции.Товары Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", Строка.ИдентификаторТовара);
		НайденныеСтроки = Объект.ЧекКоррекции.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Результат.Добавить(НайденнаяСтрока.КодМаркировки);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыРезультатаПроверкиКМ()
	
	Если НЕ ЭтоАдресВременногоХранилища(КэшРезультатаПроверкиКодовМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	КэшКодыМаркировки = ПолучитьИзВременногоХранилища(КэшРезультатаПроверкиКодовМаркировки);
	
	ЗаполнитьРеквизитыРезультатаПроверкиКМ(КэшКодыМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРезультатаПроверкиКМ(КодыМаркировки, ПроведенаПроверкаВсехКодов = Ложь)
	
	Для Каждого Строка Из КодыМаркировки Цикл
		ПараметрыОтбора = Новый Структура("КодМаркировки", Строка.КодМаркировки);
		НайденныеСтроки = Объект.ЧекКоррекции.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СвойстваНеЗаполнять = "КодМаркировки";
		Если ЕстьРеквизит(Строка, "КодРезультатаПроверки") Тогда
			ПоляНеЗаполнять = Новый Массив;
			ПоляНеЗаполнять.Добавить("КодРезультатаПроверки");
			ПоляНеЗаполнять.Добавить("КодМаркировкиПроверен");
			ПоляНеЗаполнять.Добавить("КодОбработкиЗапроса");
			ПоляНеЗаполнять.Добавить("ПредставлениеРезультатаПроверки");
			ПоляНеЗаполнять.Добавить("РезультатПроверки");
			ПоляНеЗаполнять.Добавить("РезультатПроверкиОИСМ");
			ПоляНеЗаполнять.Добавить("СтатусТовара");
			ПоляНеЗаполнять.Добавить("ТекстОшибки");
			ПоляНеЗаполнять.Добавить("РезультатПроверкиРазрешительногоРежима");
			ПоляНеЗаполнять.Добавить("ТекстОшибкиПроверки");
			ПоляНеЗаполнять.Добавить("ЗначениеОтраслевогоРеквизита");
			СвойстваНеЗаполнять = СтрШаблон("%1,%2", СвойстваНеЗаполнять, СтрСоединить(ПоляНеЗаполнять, ","));
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], Строка, , СвойстваНеЗаполнять);
		Если ПроведенаПроверкаВсехКодов Тогда
			НайденныеСтроки[0].ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ЧекКоррекции.Товары Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", Строка.ИдентификаторТовара);
		КодыМаркировкиСтроки = Объект.ЧекКоррекции.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		ПроверкаПроводилась = Истина;
		Для Каждого Код Из КодыМаркировкиСтроки Цикл
			Строка.ЕстьРазличияСостоянийКМ = Строка.ЕстьРазличияСостоянийКМ ИЛИ НЕ Код.Соответствует;
			ПроверкаПроводилась = ПроверкаПроводилась И Код.ПроверкаСоответствияКодовМаркировкиПроводилась;
		КонецЦикла;
		Строка.ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаПроводилась;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
	
	
	ДатаПроверкиКМ = ОбщегоНазначенияКлиент.ДатаСеанса();
	АвторПроверкиКМ = ПользователиКлиентСервер.ТекущийПользователь();
	
	ЗаполнитьРеквизитыРезультатаПроверкиКМ(Результат.Данные.КодыМаркировки, Истина);
	
КонецПроцедуры
// Маркировка

&НаСервере
Процедура СформироватьСписокВыбораАдресПокупателя()
	
	Элементы.АдресПокупателяЧекКоррекции.СписокВыбора.Очистить();
	СписокАдресов = УправлениеДиалогомДокументаСервер.АдресаКонтрагента(
		Объект.ЧекКоррекции.Контрагент,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
	);
	Для Каждого Адрес Из СписокАдресов Цикл
		Элементы.АдресПокупателяЧекКоррекции.СписокВыбора.Добавить(Адрес);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировкиККТ(Команда)
	
	Если Объект.ЧекКоррекции.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьПодключаемуюКомандуПодтверждениеЗаписи",
			ЭтотОбъект
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ЗапроситьСтатусыКодовМаркировкиККТПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ОчиститьСообщения();
		
		Попытка
			ЗаписатьНаСервере();
			Модифицированность = Ложь;
		Исключение
			ПричинаОшибки(ЭтотОбъект, РезультатВопроса, ДополнительныеПараметры);
		КонецПопытки;
		
		Если Объект.ЧекКоррекции.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась.
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗапроситьСтатусыКодовМаркировкиККТПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировкиККТПродолжение()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Документ", Объект.ЧекКоррекции.Ссылка);
	Обработчик = Новый ОписаниеОповещения("ЗапроситьСтатусыКодовМаркировкиККТОкончание", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСпискаМаркировокПроверкаККТ",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , ,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировкиККТОкончание(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьКонтекстДокумента();
	ОбработкаРезультатаВыполненияДействия(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаКоррекцииНаККТ(РезультатВыполнения, ПараметрыЧека) Экспорт
	
	Если РезультатВыполнения <> Неопределено
		И ПолучитьЗначениеПараметраСтруктуры(РезультатВыполнения, "ОтменаПробитияЧека", Ложь) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ПараметрыЧека.ПараметрыПробития.Вставить("НеФормироватьЧек", Ложь);
	ОбщиеПараметры =
		УправлениеДиалогомДокументаКлиент.ПолучитьШаблонЧекаКоррекции(ОписаниеОшибки, ПараметрыЧека.ПараметрыПробития);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(
		ПараметрыЧека.ОповещениеПриЗавершении,
		ПараметрыЧека.УникальныйИдентификаторФормы,
		ПараметрыЧека.ФР,
		ОбщиеПараметры
	);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере()
	Перем ДокументЧекКоррекции, ДокументЧекСторно;
	
	// Закэшируем результаты проверки состояния кодов маркировки.
	КэшРезультатаПроверкиКодовМаркировки = ПоместитьВоВременноеХранилище(
		Объект.ЧекКоррекции.КодыМаркировки.Выгрузить(),
		УникальныйИдентификатор
	);
	
	Если НЕ Объект.НеприменениеККТ Тогда
		
		ДокументЧекСторно = ДанныеФормыВЗначение(Объект.ЧекСторно, Тип("ДокументОбъект.ЧекКоррекции"));
		ЗаполнитьЗначенияСвойств(
			ДокументЧекСторно,
			Объект.ЧекКоррекции,
			"ТелефонEmailПокупателя,АдресПокупателя");
		
		Если НЕ ДокументЧекСторно.ПроверитьЗаполнение() Тогда
			ПеренаправитьСообщенияПользователю();
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументЧекСторно.Ссылка) Тогда
			ЗаблокироватьДанныеДляРедактирования(ДокументЧекСторно.Ссылка, , УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументЧекКоррекции = ДанныеФормыВЗначение(Объект.ЧекКоррекции, Тип("ДокументОбъект.ЧекКоррекции"));
	
	Если ЗначениеЗаполнено(ДокументЧекКоррекции.Ссылка) Тогда
		ЗаблокироватьДанныеДляРедактирования(ДокументЧекКоррекции.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если НЕ ДокументЧекКоррекции.ПроверитьЗаполнение() Тогда
		ПеренаправитьСообщенияПользователю();
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		
		Если НЕ Объект.НеприменениеККТ Тогда
			ДокументЧекСторно.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ДокументЧекКоррекции.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось записать документ.'"));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи документа ""Чек коррекции""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная
		);
		
		ПеренаправитьСообщенияПользователю();
		Возврат Ложь;
		
	КонецПопытки;
	
	Если НЕ Объект.НеприменениеККТ Тогда
		ЗначениеВРеквизитФормы(ДокументЧекСторно, "Объект.ЧекСторно");
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументЧекКоррекции, "Объект.ЧекКоррекции");
	УстановитьКонтекстДокумента();
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьЧекСторно(Основание)
	
	ЧекСторно = Документы.ЧекКоррекции.СоздатьДокумент();
	ЧекСторно.Заполнить(Новый Структура("ДокументОснование, ЭтоСторно", Основание, Истина));
	ЕстьОшибкиСоздания = Ложь;
	УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(ЭтотОбъект, ЕстьОшибкиСоздания);
	Если ЕстьОшибкиСоздания Тогда
		ЧекСторно = Документы.ЧекКоррекции.СоздатьДокумент();
		ЗначениеВРеквизитФормы(ЧекСторно, "Объект.ЧекСторно");
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЧекСторно, "Объект.ЧекСторно");
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьЧекКоррекции(Основание)
	
	ЧекКоррекции = Документы.ЧекКоррекции.СоздатьДокумент();
	ЧекКоррекции.Заполнить(Новый Структура("ДокументОснование, ЭтоСторно", Основание, Ложь));
	ЕстьОшибкиСоздания = Ложь;
	УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(ЭтотОбъект, ЕстьОшибкиСоздания);
	Если ЕстьОшибкиСоздания Тогда
		ЧекКоррекции = Документы.ЧекКоррекции.СоздатьДокумент();
		ЧекКоррекции.Заполнить(Неопределено);
		ЗначениеВРеквизитФормы(ЧекКоррекции, "Объект.ЧекКоррекции");
		Возврат Ложь;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ЧекКоррекции, "Объект.ЧекКоррекции");
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ДокументОснованиеПробит = Ложь;
	Если ЗначениеЗаполнено(Объект.ЧекКоррекции.ДокументОснование) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДатаФР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекКоррекции.ДокументОснование, "ДатаФР");
		УстановитьПривилегированныйРежим(Ложь);
		ДокументОснованиеПробит = ЗначениеЗаполнено(ДатаФР);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЧекиКоррекции(Основание, НачальноеЗаполнение = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Если НачальноеЗаполнение Тогда
			СоздатьЧекСторно(Неопределено);
			СоздатьЧекКоррекции(Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДатаФР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДатаФР");
	ДокументСоздан = Ложь;
	Если ЗначениеЗаполнено(ДатаФР) Тогда
		ДокументСоздан = СоздатьЧекСторно(Основание);
		РежимИспользованияОбработки = 0;
		Объект.НеприменениеККТ = Ложь;
	Иначе
		РежимИспользованияОбработки = 1;
		Объект.НеприменениеККТ = Истина;
		ДокументСоздан = Истина;
	КонецЕсли;
	
	Если ДокументСоздан Тогда
		СоздатьЧекКоррекции(Основание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере(РезультатОповещения, ДополнительныеПараметры, ЕстьОшибки)
	
	ТекстОшибки = Документы.ЧекКоррекции.ПроверитьВозможностьСозданияНаОсновании(Объект.ЧекКоррекции.ДокументОснование);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ВывестиСообщение(ТекстОшибки, ЭтотОбъект);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.ЧекКоррекции.ДокументОснование);
		Объект.ЧекКоррекции.ДокументОснование = МенеджерОбъекта.ПустаяСсылка();
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	ДатаФР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекКоррекции.ДокументОснование, "ДатаФР");
	ДокументОснованиеПробит = ЗначениеЗаполнено(ДатаФР);
	Если ДокументОснованиеПробит Тогда
		Если НЕ СоздатьЧекСторно(Объект.ЧекКоррекции.ДокументОснование) Тогда
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
		РежимИспользованияОбработки = 0;
		Объект.НеприменениеККТ = Ложь;
	КонецЕсли;
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	Если Не Объект.НеприменениеККТ Тогда
		Объект.ЧекСторно.ПечататьАртикулНоменклатуры = Объект.ЧекКоррекции.ПечататьАртикулНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументОснованиеПриИзменении(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РезультатОповещения = Новый Структура("ОбъектЗаполнен, ТребуетсяЗаполнитьНаОсновании", Ложь, Истина);
		ДополнительныеПараметры = "РазрешенияДляПересчета";
		ЕстьОшибки = Ложь;
		ДокументОснованиеПриИзмененииНаСервере(РезультатОповещения, ДополнительныеПараметры, ЕстьОшибки);
		Если ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
		ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКодовМаркировки(ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Проверим выбранное поле
	Если Поле.Имя <> Элементы.ТоварыКодыМаркировкиЧекКоррекции.Имя Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Строка = Объект.ЧекКоррекции.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Проверим, что у строки ведется маркировка
	Если НЕ Строка.МаркируемыйТовар Тогда
		Возврат;
	КонецЕсли;
	
	// Получим список кодов маркировки
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторТовара", Строка.ИдентификаторТовара);
	НайденныеКодыМаркировки = Объект.ЧекКоррекции.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
	
	СписокКодовМаркировки = Новый Массив;
	ПроверкаСоответствияКодовМаркировкиПроводилась = Строка.ПроверкаСоответствияКодовМаркировкиПроводилась;
	ПредставлениеПроверкиККТ = МенеджерОборудованияАвтосалонКлиентСервер.ОформлениеРезультатаПроверкиКодовМаркировки();
	
	Для Каждого ТекущаяСтрока Из НайденныеКодыМаркировки Цикл
		
		СтрокаСписка = Новый Структура;
		СтрокаСписка.Вставить("КодМаркировки");
		СтрокаСписка.Вставить("СостояниеКодаМаркировкиИБ");
		СтрокаСписка.Вставить("СостояниеКодаМаркировкиСМТ");
		СтрокаСписка.Вставить("Соответствует");
		СтрокаСписка.Вставить("Примечание");
		СтрокаСписка.Вставить("Возврат");
		СтрокаСписка.Вставить("КодРезультатаПроверки");
		СтрокаСписка.Вставить("КодМаркировкиПроверен");
		СтрокаСписка.Вставить("КодОбработкиЗапроса");
		СтрокаСписка.Вставить("ПредставлениеРезультатаПроверки");
		СтрокаСписка.Вставить("РезультатПроверки");
		СтрокаСписка.Вставить("РезультатПроверкиОИСМ");
		СтрокаСписка.Вставить("СтатусТовара");
		СтрокаСписка.Вставить("ТекстОшибки");
		СтрокаСписка.Вставить("ЗначениеОтраслевогоРеквизита");
		СтрокаСписка.Вставить("РезультатПроверкиРазрешительногоРежима");
		СтрокаСписка.Вставить("ТекстОшибкиПроверки");
		
		Если МенеджерОборудованияАвтосалонКлиентСервер.НеПроверенКодМаркировки(ТекущаяСтрока) Тогда
			ИмяСтатуса = "НеПроверено";
		ИначеЕсли МенеджерОборудованияАвтосалонКлиентСервер.ОшибкаПроверкиКодаМаркировки(ТекущаяСтрока) Тогда
			ИмяСтатуса = "Ошибка";
		Иначе
			ИмяСтатуса = "Выполнено";
		КонецЕсли;
		
		ПредставлениеПроверки = ПредставлениеПроверкиККТ.Получить(ИмяСтатуса);
		СтрокаСписка.Вставить("СтатусПроверкиККТ", ПредставлениеПроверки.Представление);
		СтрокаСписка.Вставить("КартинкаПроверкиККТ", ПредставлениеПроверки.Картинка);
		
		Если ТекущаяСтрока.РезультатПроверкиРазрешительногоРежима = 0 Тогда
			ИмяСтатуса = "НеПроверено";
		ИначеЕсли ТекущаяСтрока.РезультатПроверкиРазрешительногоРежима = 1 Тогда
			ИмяСтатуса = "Выполнено";
		ИначеЕсли ТекущаяСтрока.РезультатПроверкиРазрешительногоРежима = 2 Тогда
			ИмяСтатуса = "Ошибка";
		КонецЕсли;
		
		ПредставлениеПроверки = ПредставлениеПроверкиККТ.Получить(ИмяСтатуса);
		СтрокаСписка.Вставить("ПроверкаРазрешительногоРежима", ПредставлениеПроверки.Представление);
		СтрокаСписка.Вставить("КартинкаПроверкиРазрешительногоРежима", ПредставлениеПроверки.Картинка);
		
		ЗаполнитьЗначенияСвойств(СтрокаСписка, ТекущаяСтрока);
		
		Если НЕ ПроверкаСоответствияКодовМаркировкиПроводилась Тогда
			СтрокаСписка.Соответствует = Истина;
			СтрокаСписка.СостояниеКодаМаркировкиИБ = Неопределено;
			СтрокаСписка.СостояниеКодаМаркировкиСМТ = Неопределено;
			СтрокаСписка.Примечание = "";
		КонецЕсли;
		
		СписокКодовМаркировки.Добавить(СтрокаСписка);
		
	КонецЦикла;
	ТолькоПросмотрКодов = ТолькоПросмотр
		ИЛИ Элементы.ТоварыЧекКоррекции.ТолькоПросмотр
		ИЛИ Элементы.ТоварыКоличествоЧекКоррекции.ТолькоПросмотр;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокКодовМаркировки", СписокКодовМаркировки);
	ПараметрыФормы.Вставить("ИдентификаторТовара", Строка.ИдентификаторТовара);
	ПараметрыФормы.Вставить("Номенклатура", Строка.Номенклатура);
	ПараметрыФормы.Вставить("ОтображатьСостояния", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотрКодов);
	ПараметрыФормы.Вставить("Организация", Объект.ЧекКоррекции.Организация);
	ПараметрыФормы.Вставить("ПодразделениеКомпании", Объект.ЧекКоррекции.ПодразделениеКомпании);
	ПараметрыФормы.Вставить("ЭтоКорректировка", Ложь);
	ПараметрыФормы.Вставить("Ссылка", Объект.ЧекКоррекции.Ссылка);
	ПараметрыФормы.Вставить("ВыводитьПроверкуРазрешительногоРежима", Истина);
	ПараметрыФормы.Вставить("ЭтоЧекКоррекции", Истина);
	ПараметрыФормы.Вставить("ЭтоВозврат", Ложь);
	
	// Передадим ФР документа
	ПараметрыФормы.Вставить("ФР", Объект.ЧекКоррекции.ФР);
	
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		"РедактированиеКодовМаркировкиСтрокиТовара"
	);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСпискаМаркировок",
		ПараметрыФормы,
		ЭтотОбъект,
		, , ,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ОткрытьСписокКодовМаркировки()

&НаСервере
Процедура УстановитьКонтекстДокумента()
	
	Если ЗначениеЗаполнено(Объект.ЧекКоррекции.Ссылка) Тогда
		ДокументОбъект = Объект.ЧекКоррекции.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект.ЧекКоррекции");
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.ЧекКоррекции.Товары);
	
	Если (НЕ Элементы.Найти("ТоварыЧекКоррекцииХарактеристикаНоменклатуры") = Неопределено) Тогда
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, , , Объект.ЧекКоррекции);
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(ЭтотОбъект, , ,Объект.ЧекКоррекции);
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект.ЧекКоррекции);
	ОбновитьРеквизитыРезультатаПроверкиКМ();
	УправлениеДиалогомНаСервере();
	РасставитьАвтоотметкиНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПробитиеДокументов(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если ЗаписатьДокументы() Тогда
			ЗавершитьПробитиеДокументов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьДокументы()
	
	Возврат ЗаписатьНаСервере();
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПробитиеДокументов()
	
	Если НЕ Объект.НеприменениеККТ Тогда
		ПробитьЧекСторно();
	Иначе
		ПробитьЧекКоррекции();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекСторно();
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеНуженЭТ", Истина); // Убрали пробитие чеков коррекции на ЭТ. Версия 6.1.13.03
	ДополнительныеПараметры = Новый Структура("Объект", "ЧекСторно");
	Обработчик = Новый ОписаниеОповещения("ПечатьЧекаКоррекцииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыДействия.Вставить("ОповещениеПриЗавершении", Обработчик);
	ОповещениеПриЗавершенииПроверкиКодовМаркировки = Новый ОписаниеОповещения(
		"ПечатьЧекаКоррекцииНаККТ",
		ЭтотОбъект,
		Новый Структура
	);
	ПараметрыДействия.Вставить(
		"ОповещениеПриЗавершенииПроверкиКодовМаркировки",
		ОповещениеПриЗавершенииПроверкиКодовМаркировки
	);
	ОткрыватьФормуПроверкиМаркировкиККТ = Объект.ЧекСторно.КодыМаркировки.Количество() > 0
		И ОткрыватьФормуПроверкиМаркировкиККТ(Объект.ЧекСторно.ПризнакСпособаРасчета, Объект.ЧекСторно.ФР);
	ПараметрыДействия.Вставить("ОткрыватьФормуПроверкиМаркировкиККТ", ОткрыватьФормуПроверкиМаркировкиККТ);
	УправлениеДиалогомДокументаКлиент.ПробитьЧекКоррекции(ЭтотОбъект, ПараметрыДействия, Объект.ЧекСторно, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКоррекции()
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеНуженЭТ", Истина); // Убрали пробитие чеков коррекции на ЭТ. Версия 6.1.13.03
	
	ОткрыватьФормуПроверкиМаркировкиККТ = Объект.ЧекКоррекции.КодыМаркировки.Количество() > 0
		И ОткрыватьФормуПроверкиМаркировкиККТ(Объект.ЧекКоррекции.ПризнакСпособаРасчета, Объект.ЧекКоррекции.ФР);
	ПараметрыДействия.Вставить("ОткрыватьФормуПроверкиМаркировкиККТ", ОткрыватьФормуПроверкиМаркировкиККТ);
	ДополнительныеПараметры = Новый Структура("Объект", "ЧекКоррекции");
	Обработчик = Новый ОписаниеОповещения("ПечатьЧекаКоррекцииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыДействия.Вставить("ОповещениеПриЗавершении", Обработчик);
	ОповещениеПриЗавершенииПроверкиКодовМаркировки = Новый ОписаниеОповещения(
		"ПечатьЧекаКоррекцииНаККТ",
		ЭтотОбъект,
		Новый Структура
	);
	ПараметрыДействия.Вставить(
		"ОповещениеПриЗавершенииПроверкиКодовМаркировки",
		ОповещениеПриЗавершенииПроверкиКодовМаркировки
	);
	УправлениеДиалогомДокументаКлиент.ПробитьЧекКоррекции(ЭтотОбъект, ПараметрыДействия, Объект.ЧекКоррекции, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПеренаправитьСообщенияПользователю()
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Поле = ?(
			ЗначениеЗаполнено(Сообщение.Поле),
			"Объект.ЧекКоррекции." + Сообщение.Поле,
			"");
		
		ОбщегоНазначения.СообщитьПользователю(Сообщение.Текст,, Поле);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(ТекущиеДанные, ПараметрыДействия)
	
	ВидимостьХарактеристики = Ложь;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		ВидимостьХарактеристики = ВидимостьХарактеристики ИЛИ НЕ ТекущиеДанные.ВладелецХарактеристики = Неопределено;
	КонецЕсли;
	
	НовыеСтроки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеСтроки");
	Если ТипЗнч(НовыеСтроки) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицыТоваров Из НовыеСтроки Цикл
			ВидимостьХарактеристики = (ВидимостьХарактеристики
				ИЛИ НЕ Объект.ЧекКоррекции.Товары[СтрокаТаблицыТоваров].ВладелецХарактеристики = Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	// Видимость поля Характеристика можно изменять только в сторону Истина
	Если ВидимостьХарактеристики Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыХарактеристикаНоменклатурыЧекКоррекции",
			"Видимость",
			Истина
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКолонкиМаркировкаПриИзмененииНоменклатуры(ТекущиеДанные, ПараметрыДействия)
	
	ВидимостьМаркировки = Ложь;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		ВидимостьМаркировки = ВидимостьМаркировки ИЛИ ТекущиеДанные.МаркируемыйТовар;
	КонецЕсли;
	
	НовыеСтроки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеСтроки");
	Если ТипЗнч(НовыеСтроки) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицыТоваров Из НовыеСтроки Цикл
			ВидимостьМаркировки = ВидимостьМаркировки
				ИЛИ НЕ Объект.ЧекКоррекции.Товары[СтрокаТаблицыТоваров].МаркируемыйТовар;
		КонецЦикла;
	КонецЕсли;
	
	Если ВидимостьМаркировки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыГруппаКодыМаркировки",
			"Видимость",
			Истина
		);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаСохраненияИзменений(
		РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ЗаписатьНаСервере();
		ПризнакЗакрытияФормы = Истина;
		Закрыть();
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Нет Тогда 
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Закрыть", Ложь) Тогда
			ПризнакЗакрытияФормы = Истина;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если РезультатОповещения.Свойство("Действие") И РезультатОповещения.Действие = "УстановитьНоменклатуру" Тогда
		УстановитьНоменклатуру(РезультатОповещения.НайденныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНоменклатуру(ВыбранноеЗначение)
	
	Если ТолькоПросмотр ИЛИ Элементы.ТоварыЧекКоррекции.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура", ВыбранноеЗначение.Объект);
	Если ВыбранноеЗначение.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ВыбранноеЗначение.ЕдиницаИзмерения) Тогда
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыбранноеЗначение.ЕдиницаИзмерения);
	КонецЕсли;
	Если ВыбранноеЗначение.Свойство("ХарактеристикаНоменклатуры")
		И ЗначениеЗаполнено(ВыбранноеЗначение.ХарактеристикаНоменклатуры) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ВыбранноеЗначение.ХарактеристикаНоменклатуры);
	КонецЕсли;
	Количество = 1;
	Если ВыбранноеЗначение.Свойство("Вес") И ВыбранноеЗначение.Вес > 0 Тогда
		Количество = ВыбранноеЗначение.Вес;
	КонецЕсли;
	
	МассивСтрокТЧ = Объект.ЧекКоррекции.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрокТЧ.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Объект.ЧекКоррекции.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение.Объект;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		ПараметрыДействия = Новый Структура;
		Документы.ЧекКоррекции.ТоварыНоменклатураПриИзменении(Объект.ЧекКоррекции, СтрокаТабличнойЧасти, ПараметрыДействия);
		СтрокаТабличнойЧасти.Количество = Количество;
		Документы.ЧекКоррекции.ТоварыКоличествоПриИзменении(Объект.ЧекКоррекции, СтрокаТабличнойЧасти);
		ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ПараметрыДействия);
	Иначе
		СтрокаТабличнойЧасти = МассивСтрокТЧ[0];
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		Документы.ЧекКоррекции.ТоварыКоличествоПриИзменении(Объект.ЧекКоррекции, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИспользуетсяПСНПриИзменении(Элемент)
	ПараметрыДействия = Новый Структура;
	ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия);    
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
КонецПроцедуры

&НаСервере
Процедура ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия)
	Элементы.Патент.Доступность = ИспользуетсяПСН; 
	Если НЕ ИспользуетсяПСН Тогда
		Объект.ЧекКоррекции.Патент = Справочники.Патенты.ПустаяСсылка();
	Иначе
		ОбработкаРеквизитовДокументаСервер.УстановитьПатентПоОрганизации(Объект.ЧекКоррекции); 
	КонецЕсли; 
	УстановитьЦветЗаголовкаИспользуетсяПСН();
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСерверебезКонтекста
Функция КонтролируемыеРеквизиты()
	
	Результат = Новый Соответствие;
	Результат.Вставить("ТоварыПроцентСкидкиЧекКоррекции"       , "Объект.ЧекКоррекции.СкидкаНаценка");
	Результат.Вставить("ТоварыСуммаСкидкиЧекКоррекции"         , "Объект.ЧекКоррекции.СкидкаНаценка");
	Результат.Вставить("ТоварыСуммаСкидкиСтрокиЧекКоррекции"   , "Объект.ЧекКоррекции.Товары.СкидкаНаТовар");
	Результат.Вставить("ТоварыПроцентСкидкиСтрокиЧекКоррекции" , "Объект.ЧекКоррекции.Товары.СкидкаНаТовар");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЦветЗаголовкаИспользуетсяПСН()
	
	Если Не ИспользуетсяПСН Тогда
		Элементы.ИспользуетсяПСН.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветНедоступногоТекста;
	Иначе
		Элементы.ИспользуетсяПСН.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаКнопки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОснованиеВозвратДС(ДокументОснование)
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипРасчета = УправлениеДиалогомДокументаСервер.ТипРасчетаЧека(ДокументОснование);
	
	Возврат ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств")
		Или ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств");
	
КонецФункции

#КонецОбласти