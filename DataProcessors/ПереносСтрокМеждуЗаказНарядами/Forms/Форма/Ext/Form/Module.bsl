
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СводныйРемонтныйЗаказ = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СводныйРемонтныйЗаказ");
	
	Если НЕ ЗначениеЗаполнено(СводныйРемонтныйЗаказ) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указан сводный ремонтный заказ. Открытие формы запрещено.'"),
			,,, Отказ);
	КонецЕсли;
	
	ЗНИсточник = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЗНИсточник");
	
	Если ЗначениеЗаполнено(ЗНИсточник) Тогда
		ЗначениеВРеквизитФормы(ЗНИсточник.ПолучитьОбъект(), "ЗаказНарядИсточник");
		Элементы.ЗаказНарядИсточникСсылка.ТолькоПросмотр = Истина;
		ЗаказНарядИсточникСсылка = ЗНИсточник;
	КонецЕсли;
	
	ДобавлятьНовыйЗаказНаряд  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДобавлятьНовыйЗаказНаряд", Ложь);
	СозданиеНовогоЗаказНаряда = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СоздатьНовыйЗаказНаряд",   Ложь);
	Организация = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Организация");
	ПодразделениеКомпании = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании");
	
	Если СозданиеНовогоЗаказНаряда Тогда
		Заголовок = НСтр("ru = 'Создание нового заказ-наряда'");
		Элементы.ГруппаЗаказНарядПриемник.ОтображатьЗаголовок = Ложь;
		Элементы.ЗаказНарядПриемникСсылка.Видимость = Ложь;
		Элементы.ГруппаЗаказНарядИсточник.Видимость = Ложь;
		Элементы.ГруппаКнопокПерехода.Видимость = Ложь;
		Элементы.Записать.Видимость = Истина;
		Элементы.Записать.КнопкаПоУмолчанию = Истина;
		Элементы.СтраницаСписокПричинОбращений.Видимость = Ложь;
		Элементы.СтраницаУспешноеЗавершение.Видимость = Ложь;
		Элементы.СтраницаВыполненияСОшибкой.Видимость = Ложь;
		УстановитьЗаказНаряд("ЗаказНарядПриемник", Документы.ЗаказНаряд.ПустаяСсылка());
		ЗаполнитьПараметрыВыбораСостояния();
		Возврат;
	КонецЕсли;
	
	// Заполнение списка выборка ЗН.
	Если НЕ ЗаполнитьСпискиВыбораЗН(ДобавлятьНовыйЗаказНаряд, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// укажем в списке приемника ЗН.
	ЗНПриемник = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЗНПриемник");
	
	Если ЗначениеЗаполнено(ЗНПриемник) Тогда
		СтрокаСпискаЗН = Элементы.ЗаказНарядПриемникСсылка.СписокВыбора.НайтиПоЗначению(ЗНПриемник);
		Если СтрокаСпискаЗН <> Неопределено Тогда
			ЗаказНарядПриемникСсылка = ЗНПриемник;
			УстановитьЗаказНаряд("ЗаказНарядПриемник", СтрокаСпискаЗН.Значение);
			ЗаполнитьПараметрыВыбораСостояния(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним по источнику дерево причин обращения.
	Если НЕ ЗаказНарядИсточник.Ссылка = Документы.ЗаказНаряд.ПустаяСсылка() Тогда
		ЗаполнитьДеревоПричинОбращений();
		
		// Сформируем дерево по заказ-наряду.
		СформироватьДеревоЗаказНаряда();
		
		ВыбранныеСтроки = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СтрокиПереноса");
		
		Если ТипЗнч(ВыбранныеСтроки) = Тип("Структура") Тогда
			ЗаполнитьВыбранныеСтрокиПеремещения(ВыбранныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьЦены = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПересчитатьЦены", Ложь);
	
	Элементы.ГруппаДанныеЗаказНарядаПриемника.ТолькоПросмотр =
		ЗначениеЗаполнено(ЗаказНарядПриемникСсылка) И ТипЗнч(ЗаказНарядПриемникСсылка) = Тип("ДокументСсылка.ЗаказНаряд");
	
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	ИспользоватьУчетРабочегоВремени = ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции);
	РазрешитьУдалениеПакетовВРаботе = Ложь; 
	
	Элементы.Завершить.Доступность = Ложь;
	
	ВидыДоговоров = Справочники.ХозОперации.ПолучитьВидыДоговоров(Справочники.ХозОперации.ЗаказНаряд);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		Элементы.ЗаказНарядПриемникДоговорВзаиморасчетов.ПараметрыВыбора,
		"Отбор.ВидДоговора",
		ВидыДоговоров);
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыбораЗаказНаряда Тогда
		
		Если НЕ ПерейтиКВыборуСтрокПереноса() Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПричинОбращений;
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоПричинОбращенийЗаказНаряда");
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПричинОбращений Тогда
		
		// Непосредственно перенос данных.
		ВыполнитьПереносСтрок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПричинОбращений Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыбораЗаказНаряда;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненияСОшибкой Тогда
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоПричинОбращенийЗаказНаряда");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПричинОбращений;
		Элементы.Завершить.Доступность = Ложь;
		Элементы.Назад.Доступность = Истина;
		Элементы.Далее.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьЗаказНаряд("ЗаказНарядПриемник");
	
	Если ЗначениеЗаполнено(ЗаказНарядПриемник.Ссылка) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьСпискиВыбораЗН(ДобавлятьНовыйЗаказНаряд, Отказ)
	
	СписокВыбора = Элементы.ЗаказНарядПриемникСсылка.СписокВыбора;
	
	РедактированиеЗакрытыхЗН = ПраваИНастройкиПользователя.Значение("РедактированиеЗакрытыхЗаказНарядов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаряд.Ссылка КАК ЗаказНаряд,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Состояние КАК Состояние
	|ПОМЕСТИТЬ СписокЗН
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.СводныйРемонтныйЗаказ = &СводныйРемонтныйЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокЗН.ЗаказНаряд КАК ЗаказНаряд,
	|	СписокЗН.Номер КАК Номер,
	|	СписокЗН.Дата КАК Дата,
	|	СписокЗН.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА БлокировкаЗаказНарядов.ДатаБлокировки ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДокументЗаблокирован
	|ИЗ
	|	СписокЗН КАК СписокЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкаЗаказНарядов КАК БлокировкаЗаказНарядов
	|		ПО СписокЗН.ЗаказНаряд = БлокировкаЗаказНарядов.ЗаказНаряд";
	Запрос.УстановитьПараметр("СводныйРемонтныйЗаказ", СводныйРемонтныйЗаказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Проверим источник заказ-наряд на состояние и блокировку.
		Если ЗаказНарядИсточник.Ссылка = Выборка.ЗаказНаряд Тогда
			Если НЕ РедактированиеЗакрытыхЗН И Выборка.ЗаказНаряд = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Заказ-наряд, из которого осуществляется перенос, находится в состоянии ""Закрыт"".'"),,,,
					Отказ);
				Возврат Ложь;
			ИначеЕсли Выборка.ДокументЗаблокирован Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Заказ-наряд, из которого осуществляется перенос, заблокирован для изменений.'"),,,,
					Отказ);
				Возврат Ложь;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если право перемещения закрытых не установлено, то запретим выбор такого ЗН.
		Если НЕ РедактированиеЗакрытыхЗН И Выборка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			Продолжить;
		КонецЕсли;
		
		// Если ЗН заблокирован, то не добавляем в список.
		Если Выборка.ДокументЗаблокирован Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВыбора.Добавить(Выборка.ЗаказНаряд);
		
	КонецЦикла;
	
	Если ЗаказНарядИсточник.Ссылка = Документы.ЗаказНаряд.ПустаяСсылка() Тогда
		Элементы.ЗаказНарядИсточникСсылка.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	Иначе
		Элементы.ЗаказНарядИсточникСсылка.СписокВыбора.Добавить(ЗаказНарядИсточник.Ссылка);
		Элементы.ЗаказНарядИсточникСсылка.КнопкаСпискаВыбора = Ложь;
	КонецЕсли;
	Если ДобавлятьНовыйЗаказНаряд ИЛИ СозданиеНовогоЗаказНаряда Тогда
		НовыйЗаказНаряд = СписокВыбора.Добавить(Нстр("ru = 'Новый заказ-наряд'"));
		СписокВыбора.Сдвинуть(НовыйЗаказНаряд, -СписокВыбора.Количество() + 1);
	КонецЕсли;
	
	// Нет доступных ЗН для перемещения.
	Если СписокВыбора.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет доступных заказ-нарядов для переноса авторабот/деталей.'"),,,, Отказ);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьСпискиВыбораЗН()

&НаСервере
Процедура ЗаполнитьДеревоПричинОбращений()
	
	ПодчиненныеЗаказНаряды = Новый ТаблицаЗначений;
	ПодчиненныеЗаказНаряды.Колонки.Добавить("ИдентификаторОбъектаЗаказНаряд", Новый ОписаниеТипов("Строка"));
	ПодчиненныеЗаказНаряды.Колонки.Добавить("ЗаказНарядСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"));
	
	Если ЗаказНарядПриемник.Ссылка <> Документы.ЗаказНаряд.ПустаяСсылка() Тогда
		НоваяСтрока = ПодчиненныеЗаказНаряды.Добавить();
		НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ЗаказНарядПриемник";
		НоваяСтрока.ЗаказНарядСсылка               = ЗаказНарядПриемник.Ссылка;
	КонецЕсли;
	
	Если ЗаказНарядИсточник.Ссылка <> Документы.ЗаказНаряд.ПустаяСсылка() Тогда
		НоваяСтрока = ПодчиненныеЗаказНаряды.Добавить();
		НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ЗаказНарядИсточник";
		НоваяСтрока.ЗаказНарядСсылка               = ЗаказНарядИсточник.Ссылка;
	КонецЕсли;
	
	ПодчиненныеТаблицы = Новый Структура;
	ПодчиненныеТаблицы.Вставить("ПодчиненныеАвтоработы",                ПодчиненныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеТовары",                    ПодчиненныеТовары);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеПричиныОбращений",          ПодчиненныеПричиныОбращений);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеВспомогательныеАвтоработы", ПодчиненныеВспомогательныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеЗаказНаряды",               ПодчиненныеЗаказНаряды);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеМатериалы",                 ПодчиненныеМатериалы);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Основание", ПолучитьЗначениеПараметраСтруктуры(Параметры, "Основание"));
	ДополнительныеПараметры.Вставить("ДокументОснование", СводныйРемонтныйЗаказ.ДокументОснование);
	
	Автосервис.ОбновитьДанныеПодчиненныхТаблиц(ЭтотОбъект, ПодчиненныеТаблицы, ДополнительныеПараметры);
	
КонецПроцедуры // ЗаполнитьДеревоПричинОбращений()

&НаСервере
Процедура СформироватьДеревоЗаказНаряда(ОбновитьПодчиненныеТаблицы = Ложь)
	
	ДеревоПричинОбращенийЗаказНаряда.ПолучитьЭлементы().Очистить();
	
	Если ОбновитьПодчиненныеТаблицы Тогда
		ЗаполнитьДеревоПричинОбращений();
	КонецЕсли;
	
	ПодчиненныеЗаказНаряды = Новый ТаблицаЗначений;
	ПодчиненныеЗаказНаряды.Колонки.Добавить("ИдентификаторОбъектаЗаказНаряд", Новый ОписаниеТипов("Строка"));
	ПодчиненныеЗаказНаряды.Колонки.Добавить("ЗаказНарядСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"));
	ПодчиненныеЗаказНаряды.Колонки.Добавить("ПризнакБлокировки", Новый ОписаниеТипов("Булево"));
	
	СтрокаЗН = Новый Структура("Идентификатор,ВалютаДокумента");
	
	Если ЗаказНарядИсточник.Ссылка = Документы.ЗаказНаряд.ПустаяСсылка() Тогда
		НоваяСтрока = ПодчиненныеЗаказНаряды.Добавить();
		НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ЗаказНарядПриемник";
		НоваяСтрока.ЗаказНарядСсылка               = ЗаказНарядПриемник.Ссылка;
		
		СтрокаЗН.Идентификатор = "ЗаказНарядПриемник";
		СтрокаЗН.ВалютаДокумента = ЗаказНарядПриемник.ВалютаДокумента;
	Иначе
		НоваяСтрока = ПодчиненныеЗаказНаряды.Добавить();
		НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ЗаказНарядИсточник";
		НоваяСтрока.ЗаказНарядСсылка               = ЗаказНарядИсточник.Ссылка;
		
		СтрокаЗН.Идентификатор = "ЗаказНарядИсточник";
		СтрокаЗН.ВалютаДокумента = ЗаказНарядИсточник.ВалютаДокумента;
	КонецЕсли;
	
	НоваяСтрока.ПризнакБлокировки = Ложь;
	
	ПодчиненныеТаблицы = Новый Структура;
	ПодчиненныеТаблицы.Вставить("ПодчиненныеАвтоработы",                ПодчиненныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеТовары",                    ПодчиненныеТовары);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеПричиныОбращений",          ПодчиненныеПричиныОбращений);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеВспомогательныеАвтоработы", ПодчиненныеВспомогательныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеМатериалы",                 ПодчиненныеМатериалы);
	
	Автосервис.ЗаполнитьДеревоПоЗаказНаряду(
		ДеревоПричинОбращенийЗаказНаряда.ПолучитьЭлементы(),
		СтрокаЗН,
		НоваяСтрока,
		ПодчиненныеТаблицы);
	
	// Перезаполним количество в строках
	Для Каждого ТекущаяПричина Из ДеревоПричинОбращенийЗаказНаряда.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ТекущаяПричина.ПолучитьЭлементы() Цикл
			ТекущаяСтрока.КоличествоДоступно = ТекущаяСтрока.Количество;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоЗаказНаряда()

&НаСервере
Процедура ЗаполнитьВыбранныеСтрокиПеремещения(ВыбранныеСтроки)
	
	Для Каждого ТекущаяПричинаОбращений Из ДеревоПричинОбращенийЗаказНаряда.ПолучитьЭлементы() Цикл
		
		ДанныеПричины = ВыбранныеСтроки.ПричиныОбращения.Получить(ТекущаяПричинаОбращений.ПричинаОбращения);
		
		Если ДанныеПричины <> Неопределено Тогда
			ВыбратьСтрокиПереноса(ТекущаяПричинаОбращений, ДанныеПричины);
			Продолжить;
		КонецЕсли;
		
		// Заполним вспомогательные работы.
		Если ТекущаяПричинаОбращений.ИмяТаблицы = "ВспомогательныеАвтор"
			И ВыбранныеСтроки.ВспомогательныеАвтоработы.Свойство("ВспомогательныеАвтор") Тогда
			
			СписокАвторабот = ВыбранныеСтроки.ВспомогательныеАвтоработы.ВспомогательныеАвтор;
			
			// Выделяем все.
			ПометкаИспользования = Ложь;
			Если СписокАвторабот.Количество() = 0 Тогда
				ПометкаИспользования = Истина;
				ТекущаяПричинаОбращений.Использование = Истина;
			КонецЕсли;
			
			Для Каждого ТекущаяСтрока Из ТекущаяПричинаОбращений.ПолучитьЭлементы() Цикл
				ТекущаяСтрока.Использование = 
					ПометкаИспользования ИЛИ СписокАвторабот.Найти(ТекущаяСтрока.Авторабота) <> Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекущаяПричинаОбращений.ИмяТаблицы = "МатериалыЗаказчика"
			И ВыбранныеСтроки.МатериалыЗаказчика.Свойство("МатериалыЗаказчика") Тогда
			
			СписокМатериалов = ВыбранныеСтроки.МатериалыЗаказчика.МатериалыЗаказчика;
			
			// Выделяем все.
			ПометкаИспользования = Ложь;
			Если СписокМатериалов.Количество() = 0 Тогда
				ПометкаИспользования = Истина;
				ТекущаяПричинаОбращений.Использование = Истина;
			КонецЕсли;
			
			Для Каждого ТекущаяСтрока Из ТекущаяПричинаОбращений.ПолучитьЭлементы() Цикл
				ТекущаяСтрока.Использование = 
					ПометкаИспользования ИЛИ СписокМатериалов.Найти(ТекущаяСтрока.ИдентификаторСтроки) <> Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьСтрокиПереноса(ТекущаяПричинаОбращений, ДанныеПричины)
	
	// Выделяем все.
	ПометкаИспользования = Ложь;
	Если ДанныеПричины.Количество() = 0 Тогда
		ПометкаИспользования = Истина;
		ТекущаяПричинаОбращений.Использование = Истина;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТекущаяПричинаОбращений.ПолучитьЭлементы() Цикл
		
		Если ПометкаИспользования Тогда
			ТекущаяСтрока.Использование = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПричины.Свойство("Автоработы")
			И ДанныеПричины.Автоработы.Найти(ТекущаяСтрока.Номенклатура) <> Неопределено Тогда
			ТекущаяСтрока.Использование = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПричины.Свойство("Товары") Тогда
			Для Каждого ОтборСтрока Из ДанныеПричины.Товары Цикл
				Если ОтборСтрока.Номенклатура = ТекущаяСтрока.Номенклатура
					И ОтборСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмерения
					И ОтборСтрока.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатуры Тогда
					ТекущаяСтрока.Использование = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Раскраска = Новый Соответствие;
	Раскраска.Вставить(1, WebЦвета.НейтральноПурпурный);
	Раскраска.Вставить(2, WebЦвета.Зеленый);
	Раскраска.Вставить(3, WebЦвета.Оливковый);
	Раскраска.Вставить(4, WebЦвета.Ультрамарин);

	Для Каждого Строка Из Раскраска Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПричинОбращенийЗаказНаряда.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПричинОбращенийЗаказНаряда.ЦветРаскраскиСтроки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Строка.Ключ;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Строка.Значение);
	КонецЦикла;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПричинОбращенийЗаказНарядаКоличество.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПричинОбращенийЗаказНаряда.ИмяТаблицы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокТаблиц = Новый СписокЗначений;
	СписокТаблиц.Добавить("Товары");
	СписокТаблиц.Добавить("Автоработы");
	СписокТаблиц.Добавить("Материалы");
	ОтборЭлемента.ПравоеЗначение = СписокТаблиц;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПричинОбращенийЗаказНаряда.Использование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаказНаряд(
	ИмяЗаказНаряда,
	ТекущийЗаказНаряд = Неопределено,
	Очистить = Ложь,
	ДокументЗаполнения = Неопределено)
	
	ДокументОбъект = РеквизитФормыВЗначение(ИмяЗаказНаряда, Тип("ДокументОбъект.ЗаказНаряд"));
	
	Если Очистить ИЛИ ТекущийЗаказНаряд = Неопределено Тогда
		ДокументОбъект = Документы.ЗаказНаряд.СоздатьДокумент();
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущийЗаказНаряд) Тогда
		ДокументОбъект = Документы.ЗаказНаряд.СоздатьДокумент();
		ЗаполнитьНовыйЗаказНаряд(ДокументОбъект,, ДокументЗаполнения);
	Иначе
		ДокументОбъект = ТекущийЗаказНаряд.ПолучитьОбъект();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, ИмяЗаказНаряда);
	
КонецПроцедуры // УстановитьЗаказНаряд()

&НаСервере
Процедура ЗаполнитьНовыйЗаказНаряд(НовыйЗаказНаряд, ЭтоПервый = Истина, ДокументЗаполнения = Неопределено)
	
	Если ЗначениеЗаполнено(СводныйРемонтныйЗаказ) Тогда
		ДанныеСРЗ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СводныйРемонтныйЗаказ,
			"Заказчик,Автомобиль,ДокументОснование,Организация,ПодразделениеКомпании");
		
		НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("Заказчик", ДанныеСРЗ.Заказчик);
		НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("Автомобиль", ДанныеСРЗ.Автомобиль);
		НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("ЭтоПервый", ЭтоПервый);
		НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("СРЗ", СводныйРемонтныйЗаказ);
		НовыйЗаказНаряд.Заполнить(СводныйРемонтныйЗаказ);
		
	Иначе
		НовыйЗаказНаряд.Заполнить(Неопределено);
	КонецЕсли;
	
	// Заполним по документу источника
	Если ЗначениеЗаполнено(ДокументЗаполнения) Тогда
		НовыйЗаказНаряд.Контрагент = ДокументЗаполнения.Контрагент;
		Документы.ЗаказНаряд.КонтрагентПриИзменении(НовыйЗаказНаряд);
		НовыйЗаказНаряд.ДоговорВзаиморасчетов = ДокументЗаполнения.ДоговорВзаиморасчетов;
		Документы.ЗаказНаряд.ДоговорВзаиморасчетовПриИзменении(НовыйЗаказНаряд);
		НовыйЗаказНаряд.ВидРемонта = ДокументЗаполнения.ВидРемонта;
		Документы.ЗаказНаряд.ВидРемонтаПриИзменении(НовыйЗаказНаряд);
		НовыйЗаказНаряд.Цех = ДокументЗаполнения.Цех;
		Документы.ЗаказНаряд.ЦехПриИзменении(НовыйЗаказНаряд);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНовыйЗаказНаряд()

&НаСервере
Функция ПерейтиКВыборуСтрокПереноса()
	
	Если НЕ ПроверкаВыбораЗаказНаряда() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИзменилсяВыборЗаказНаряда Тогда
		СформироватьДеревоЗаказНаряда(Истина);
		ИзменилсяВыборЗаказНаряда = Ложь;
	КонецЕсли;
	
	СписокВыбораПричиныОбращенияПриемника = Элементы.ПричинаОбращенияПриемника.СписокВыбора;
	СписокВыбораПричиныОбращенияПриемника.Очистить();
		
	МаксимальноеЧилоСимволовВПричинеОбращения = 150;
	Для Каждого ТекущаяСтрока Из ЗаказНарядПриемник.ПричиныОбращения Цикл
		ПредставлениеСодержания = ТекущаяСтрока.ПричинаОбращенияСодержание;
		Если СтрДлина(ПредставлениеСодержания) > МаксимальноеЧилоСимволовВПричинеОбращения Тогда
			ПредставлениеСодержания = СтрШаблон(
				"%1...",
				Лев(ПредставлениеСодержания, МаксимальноеЧилоСимволовВПричинеОбращения));
		КонецЕсли;
		СписокВыбораПричиныОбращенияПриемника.Добавить(ТекущаяСтрока.ИдентификаторПричиныОбращения, ПредставлениеСодержания);
	КонецЦикла;
	
	СписокПуст = СписокВыбораПричиныОбращенияПриемника.Количество() = 0;
	Элементы.ПричинаОбращенияПриемника.Видимость = НЕ СписокПуст;
	
	Если СписокПуст Тогда
		ПричинаОбращенияПриемника = ПустойИдентификаторПричиныОбращения();
	Иначе
		ПричинаОбращенияПриемника = СписокВыбораПричиныОбращенияПриемника[0].Значение;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПустойИдентификаторПричиныОбращения()
	Возврат "                                    ";
КонецФункции

&НаСервере
Функция ПроверкаВыбораЗаказНаряда()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ЗаказНарядИсточник.Ссылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Необходимо выбрать источник заказ-наряд.'"),
			ЗаказНарядИсточник.Ссылка,
			"ЗаказНарядИсточникСсылка",,
			Отказ);
	КонецЕсли;
	
	Если НЕ СозданиеНовогоЗаказНаряда И НЕ ДобавлятьНовыйЗаказНаряд
		И НЕ ЗначениеЗаполнено(ЗаказНарядПриемник.Ссылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = 'Необходимо выбрать заказ-наряд для переноса.'"),
			ЗаказНарядПриемник.Ссылка,
			"СписокВыбора",,
			Отказ);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказНарядИсточник.Ссылка) И ЗаказНарядИсточник.Ссылка = ЗаказНарядПриемник.Ссылка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = 'Указан один и тот же заказ-наряд. Действие отменено'"),
			ЗаказНарядИсточник.Ссылка,,,
			Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если НЕ ЗначениеЗаполнено(ЗаказНарядИсточник.Ссылка) Тогда
			ДокументОбъект = РеквизитФормыВЗначение("ЗаказНарядИсточник", Тип("ДокументОбъект.ЗаказНаряд"));
			Отказ = Отказ ИЛИ НЕ ДокументОбъект.ПроверитьЗаполнение();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗаказНарядПриемник.Ссылка) Тогда
			ДокументОбъект = РеквизитФормыВЗначение("ЗаказНарядПриемник", Тип("ДокументОбъект.ЗаказНаряд"));
			Отказ = Отказ ИЛИ НЕ ДокументОбъект.ПроверитьЗаполнение();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПереносСтрок()
	
	ВыбранаПричинаОбращения = Истина;
	ОшибкиВводаКоличества = Ложь;
	СтрокиПереноса = СтрокиПереносаВЗаказНаряд(ВыбранаПричинаОбращения, ОшибкиВводаКоличества);
	
	Если СтрокиПереноса.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указаны строки для переноса. Операция отменена.'");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненияСОшибкой;
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыбранаПричинаОбращения И НЕ УказанаПричинаОбращения() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана причина обращения для переноса выбранных строк.'"),
			,
			"ПричинаОбращенияПриемника");
		Возврат;
	КонецЕсли;
	
	// Проверим возможность перетаскивания авторабот
	Если ИспользоватьУчетРабочегоВремени
		И НЕ РазрешитьУдалениеПакетовВРаботе
		И НЕ ПроверитьПеретаскиваниеАвторабот(СтрокиПереноса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкиВводаКоличества Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершениеПереносаСтрок(СтрокиПереноса);
	
КонецПроцедуры 

Функция УказанаПричинаОбращения()
	Возврат ЗначениеЗаполнено(ПричинаОбращенияПриемника) 
		ИЛИ ПричинаОбращенияПриемника = ПустойИдентификаторПричиныОбращения();
КонецФункции

&НаКлиенте
Процедура ЗавершениеПереносаСтрок(СтрокиПереноса)
	
	ВыполнитьПереносПоЗаказНарядам(СтрокиПереноса);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПеретаскиваниеАвторабот(ВыбранныеАвтоработы)
	
	Отказ = Ложь;
	МассивАвторабот = Новый Массив;
	Для Каждого ТекущаяСтрока Из ВыбранныеАвтоработы Цикл
		Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
			МассивАвторабот.Добавить(ТекущаяСтрока.ИдентификаторСтроки);
			Если ТекущаяСтрока.Количество <> ТекущаяСтрока.КоличествоДоступно Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для переноса автоработы %1 необходимо указать все доступное количество для переноса.'"),
						Строка(ТекущаяСтрока.Номенклатура)
					),
					,,,
					Отказ
				);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодчиненныеЗаказНаряды = Новый ТаблицаЗначений;
	ПодчиненныеЗаказНаряды.Колонки.Добавить("ИдентификаторОбъектаЗаказНаряд", Новый ОписаниеТипов("Строка"));
	ПодчиненныеЗаказНаряды.Колонки.Добавить("ЗаказНарядСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"));
	
	Если ЗаказНарядИсточник.Ссылка = Документы.ЗаказНаряд.ПустаяСсылка() Тогда
		НоваяСтрока = ПодчиненныеЗаказНаряды.Добавить();
		НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ЗаказНарядПриемник";
		НоваяСтрока.ЗаказНарядСсылка               = ЗаказНарядПриемник.Ссылка;
	Иначе
		НоваяСтрока = ПодчиненныеЗаказНаряды.Добавить();
		НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ЗаказНарядИсточник";
		НоваяСтрока.ЗаказНарядСсылка               = ЗаказНарядИсточник.Ссылка;
	КонецЕсли;
	
	Если НЕ Автосервис.ПроверитьПеретаскиваниеАвторабот(
		МассивАвторабот,
		ДеревоПричинОбращенийЗаказНаряда,
		ПодчиненныеАвтоработы,
		ПодчиненныеЗаказНаряды) Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрещен перенос авторабот из пакета работ, который находится в работе или завершен.'");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненияСОшибкой;
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПеретаскиваниеАвторабот()

&НаКлиенте
Функция СтрокиПереносаВЗаказНаряд(ВыбранаПричинаОбращения, ОшибкаКоличества)
	
	ВыбранныеСтроки = Новый Массив;
	
	Для Каждого ТекущаяПричина Из ДеревоПричинОбращенийЗаказНаряда.ПолучитьЭлементы() Цикл
		
		ВыбраныСтрокиПереноса = Ложь;
		
		Для Каждого ТекущаяСтрока Из ТекущаяПричина.ПолучитьЭлементы() Цикл
			
			Если ТекущаяСтрока.Использование Тогда
				СтруктураСтроки = Новый Структура(
					"Идентификатор,ИдентификаторСтроки,ИмяТаблицы,Номенклатура,ПричинаИзПриемника,Количество,КоличествоДоступно");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущаяСтрока);
				СтруктураСтроки.Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
				СтруктураСтроки.ПричинаИзПриемника = НЕ ТекущаяПричина.Использование;
				ВыбранныеСтроки.Добавить(СтруктураСтроки);
				ВыбраныСтрокиПереноса = Истина;
				
				Если ТекущаяСтрока.ИмяТаблицы = "ВспомогательнаяАРЗН" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущаяСтрока.Количество = 0 Тогда
					ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ДеревоПричинОбращенийЗаказНаряда",
						ТекущаяСтрока.ПолучитьИдентификатор() + 1,
						"Количество"
					);
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(Нстр("ru = 'Для переноса ""%1"" указано нулевое количество'"), ТекущаяСтрока.Представление),
						,
						ПутьКТабличнойЧасти,
						"Объект",
						ОшибкаКоличества
					);
				ИначеЕсли ТекущаяСтрока.Количество > ТекущаяСтрока.КоличествоДоступно Тогда
					ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ДеревоПричинОбращенийЗаказНаряда",
						ТекущаяСтрока.ПолучитьИдентификатор() + 1,
						"Количество"
					);
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(Нстр("ru = 'Для переноса ""%1"" указано количество больше допустимого'"), ТекущаяСтрока.Представление),
						,
						ПутьКТабличнойЧасти,
						"Объект",
						ОшибкаКоличества
					);

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыбраныСтрокиПереноса И НЕ ТекущаяПричина.Использование И ТекущаяПричина.ИмяТаблицы = "ПричиныОбращений" Тогда
			ВыбранаПричинаОбращения = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранныеСтроки;
	
КонецФункции // СтрокиПереносаВЗаказНаряд()

&НаСервере
Процедура ВыполнитьПереносПоЗаказНарядам(СтрокиПереноса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументЗаказНарядИсточник = РеквизитФормыВЗначение("ЗаказНарядИсточник", Тип("ДокументОбъект.ЗаказНаряд"));
	ДокументЗаказНарядПриемник = РеквизитФормыВЗначение("ЗаказНарядПриемник", Тип("ДокументОбъект.ЗаказНаряд"));
	
	// Список переносимых товаров для выполнения перевода из одно ЗН в другой.
	СписокТоваров = Новый Массив;
	
	ПереместитьСтрокуВЗаказНаряд(СтрокиПереноса, ЗаказНарядПриемник, ЗаказНарядИсточник, СписокТоваров);
	
	НачатьТранзакцию();
	
	Попытка
		ЗаписатьЗаказНаряд("ЗаказНарядИсточник");
		ЗаписатьЗаказНаряд("ЗаказНарядПриемник");
		
		ПеренестиТоварыМеждуЗаказами(СписокТоваров);
		
		Если ИспользоватьУчетРабочегоВремени Тогда
			ЗаписатьИнформациюОПакетах();
		КонецЕсли;
	
			ЗафиксироватьТранзакцию();
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУспешноеЗавершение;
			Элементы.Завершить.Доступность = Истина;
			Элементы.Назад.Доступность = Ложь;
			Элементы.Далее.Доступность = Ложь;
		
	Исключение
		ОтменитьТранзакцию();
		ЗначениеВРеквизитФормы(ДокументЗаказНарядИсточник, "ЗаказНарядИсточник");
		ЗначениеВРеквизитФормы(ДокументЗаказНарядПриемник, "ЗаказНарядПриемник");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненияСОшибкой;
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		МассивОшибок = ПолучитьСообщенияПользователю(Истина);
		
		СформироватьТекстОшибки(МассивОшибок);
		
		Элементы.Завершить.Доступность = Истина;
		Элементы.Далее.Доступность = Ложь;
		
		ЗаполнитьДеревоПричинОбращений();
		СформироватьДеревоЗаказНаряда();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиТоварыМеждуЗаказами(СписокТоваров)
	
	ТаблицаТоваров = ТаблицаВыбранныхТоваров(СписокТоваров);
	
	ПакетЗапроса = ТекстЗапросаТоваровЗаказНаряда(ЗаказНарядИсточник.Ссылка, ТаблицаТоваров);
	
	Комментарий = НСтр("ru = 'Создан автоматически при переносе деталей между заказ-нарядами'");
	
	СозданныеДокументы.Очистить();
	
	// 1. Сделаем перемещение детали в производстве.
	СформироватьПеремещениеНезавершенногоПроизводства(ТаблицаТоваров, ПакетЗапроса[2], ПакетЗапроса[9], Комментарий);
	
	// 2. Снятие резервов  заказов покупетля с истоника к приемнику.
	СформироватьЗаказПокупателя(ТаблицаТоваров, ПакетЗапроса[5], Комментарий);
	
КонецПроцедуры // ПеренестиТоварыМеждуЗаказами()

&НаСервере
Функция ТаблицаВыбранныхТоваров(СписокТоваров)
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить(
		"Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить(
		"ХарактеристикаНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить(
		"СкладКомпании",
		Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
	ТаблицаТоваров.Колонки.Добавить(
		"Количество",
		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить(
		"ВПроизводстве",
		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить(
		"Заказано",
		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить(
		"ВРезерве",
		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить(
		"Коэффициент",
		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить(
		"ЕдиницаИзмерения",
		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	Для Каждого ТекТовар Из СписокТоваров Цикл
		
		ТекущиеДанные = ДеревоПричинОбращенийЗаказНаряда.НайтиПоИдентификатору(ТекТовар);
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		НоваяСтрока.Количество = ТекущиеДанные.Количество * ТекущиеДанные.Коэффициент;
		
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть(
		"Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании,ЕдиницаИзмерения,Коэффициент",
		"Количество,ВПроизводстве,Заказано,ВРезерве");
	
	ПоказателиЗапасов = Документы.ЗаказНаряд.ПолучитьПоказателиЗапасов(
		ЗаказНарядИсточникСсылка,
		ТаблицаТоваров,
		Новый Структура("Основание,РезервыПоЗаказНаряду", "БезУчетаОснования", Истина));
	
	СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры,СкладКомпании");
	
	// Заполним запасы по ЗН
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		ТекущиеДанные =  ПоказателиЗапасов.НайтиСтроки(СтруктураПоиска);
		
		Если ТекущиеДанные.Количество() = 0 Тогда
			ТекущаяСтрока.ВПроизводстве = 0;
			ТекущаяСтрока.Заказано = 0;
			ТекущаяСтрока.ВРезерве = 0;
		Иначе
			ТекущаяСтрока.ВПроизводстве = ТекущиеДанные[0].ВПроизводстве;
			ТекущаяСтрока.Заказано = ТекущиеДанные[0].Заказано;
			ТекущаяСтрока.ВРезерве = ТекущиеДанные[0].Зарезервировано;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаТоваровЗаказНаряда(ЗаказНаряд, ТаблицаТоваров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	               |	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаТоваров.СкладКомпании КАК СкладКомпании
	               |ПОМЕСТИТЬ ТаблицаТоваровПереноса
	               |ИЗ
	               |	&ТаблицаТоваров КАК ТаблицаТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка КАК Регистратор
	               |ПОМЕСТИТЬ СписокЗаказовПокупеля
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Проведен
	               |	И ЗаказПокупателя.ДокументОснование = &ЗаказНаряд
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТоварыВПроизводствеОстатки.Партия КАК Партия,
	               |	ТоварыВПроизводствеОстатки.ГТД КАК ГТД,
	               |	ТоварыВПроизводствеОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыВПроизводстве.Остатки(
	               |			,
	               |			ЗаказНаряд = &ЗаказНаряд
	               |				И (Номенклатура, ХарактеристикаНоменклатуры) В
	               |					(ВЫБРАТЬ
	               |						ТаблицаТоваровПереноса.Номенклатура КАК Номенклатура,
	               |						ТаблицаТоваровПереноса.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	               |					ИЗ
	               |						ТаблицаТоваровПереноса КАК ТаблицаТоваровПереноса)) КАК ТоварыВПроизводствеОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладКомпании,
	               |	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Заказано,
	               |	ЗаказыПокупателейОстатки.РезервОстаток КАК Резерв,
	               |	ЗаказыПокупателейОстатки.РезервСвободныйОстаток КАК РезервСвободный
	               |ПОМЕСТИТЬ ЗаказыПокупателяОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	               |			Заказ В
	               |					(ВЫБРАТЬ
	               |						СписокЗаказовПокупеля.Регистратор КАК Регистратор
	               |					ИЗ
	               |						СписокЗаказовПокупеля КАК СписокЗаказовПокупеля)
	               |				И (Номенклатура, СкладКомпании, ХарактеристикаНоменклатуры) В
	               |					(ВЫБРАТЬ
	               |						ТаблицаТоваровПереноса.Номенклатура КАК Номенклатура,
	               |						ТаблицаТоваровПереноса.СкладКомпании КАК СкладКомпании,
	               |						ТаблицаТоваровПереноса.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	               |					ИЗ
	               |						ТаблицаТоваровПереноса КАК ТаблицаТоваровПереноса)) КАК ЗаказыПокупателейОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыРаспределениеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	               |	ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК ЗаказПоставщика,
	               |	ЗаказыРаспределениеОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗаказыРаспределениеОстатки.КоличествоОстаток КАК Распределено
	               |ПОМЕСТИТЬ РаспределениеЗаказовПокупателяОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыРаспределение.Остатки(
	               |			,
	               |			ЗаказПокупателя В
	               |					(ВЫБРАТЬ
	               |						СписокЗаказовПокупеля.Регистратор КАК Регистратор
	               |					ИЗ
	               |						СписокЗаказовПокупеля КАК СписокЗаказовПокупеля)
	               |				И (Номенклатура, ХарактеристикаНоменклатуры) В
	               |					(ВЫБРАТЬ
	               |						ТаблицаТоваровПереноса.Номенклатура КАК Номенклатура,
	               |						ТаблицаТоваровПереноса.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	               |					ИЗ
	               |						ТаблицаТоваровПереноса КАК ТаблицаТоваровПереноса)) КАК ЗаказыРаспределениеОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыПокупателяОстаток.Заказ КАК Заказ,
	               |	ЗаказыПокупателяОстаток.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателяОстаток.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗаказыПокупателяОстаток.СкладКомпании КАК СкладКомпании,
	               |	ЗаказыПокупателяОстаток.Заказано КАК Заказано,
	               |	ЗаказыПокупателяОстаток.Резерв КАК Резерв,
	               |	ЗаказыПокупателяОстаток.РезервСвободный КАК РезервСвободный,
	               |	ЕСТЬNULL(РаспределениеЗаказовПокупателяОстаток.Распределено, 0) КАК Распределено,
	               |	РаспределениеЗаказовПокупателяОстаток.ЗаказПоставщика КАК ЗаказПоставщика
	               |ИЗ
	               |	ЗаказыПокупателяОстаток КАК ЗаказыПокупателяОстаток
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗаказовПокупателяОстаток КАК РаспределениеЗаказовПокупателяОстаток
	               |		ПО ЗаказыПокупателяОстаток.Заказ = РаспределениеЗаказовПокупателяОстаток.ЗаказПокупателя
	               |			И ЗаказыПокупателяОстаток.Номенклатура = РаспределениеЗаказовПокупателяОстаток.Номенклатура
	               |			И ЗаказыПокупателяОстаток.ХарактеристикаНоменклатуры = РаспределениеЗаказовПокупателяОстаток.ХарактеристикаНоменклатуры
	               |ИТОГИ
	               |	МАКСИМУМ(Заказано),
	               |	МАКСИМУМ(Резерв),
	               |	СУММА(Распределено)
	               |ПО
	               |	Заказ,
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	СкладКомпании
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ЗаказыПокупателяОстаток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РаспределениеЗаказовПокупателяОстаток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	               |	МаркировкаТоваровВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	МаркировкаТоваровВПроизводствеОстатки.GTIN КАК GTIN,
	               |	МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК СерийныйНомер,
	               |	МаркировкаТоваровВПроизводствеОстатки.ГТД КАК ГТД
	               |ПОМЕСТИТЬ КодыМаркировкиПроизводства
	               |ИЗ
	               |	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(
	               |			,
	               |			ЗаказНаряд = &ЗаказНаряд
	               |				И (Номенклатура, ХарактеристикаНоменклатуры) В
	               |					(ВЫБРАТЬ
	               |						ТаблицаТоваровПереноса.Номенклатура КАК Номенклатура,
	               |						ТаблицаТоваровПереноса.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	               |					ИЗ
	               |						ТаблицаТоваровПереноса КАК ТаблицаТоваровПереноса)) КАК МаркировкаТоваровВПроизводствеОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КодыМаркировкиПроизводства.Номенклатура КАК Номенклатура,
	               |	КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	КодыМаркировкиПроизводства.GTIN КАК GTIN,
	               |	КодыМаркировкиПроизводства.СерийныйНомер КАК СерийныйНомер,
	               |	ЕСТЬNULL(СостоянияКодовМаркировкиСрезПоследних.КодМаркировки, """") КАК КодМаркировки,
	               |	КодыМаркировкиПроизводства.ГТД КАК ГТД
	               |ИЗ
	               |	КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКодовМаркировки.СрезПоследних(
	               |				,
	               |				(Номенклатура, ХарактеристикаНоменклатуры, GTIN, СерийныйНомер) В
	               |					(ВЫБРАТЬ
	               |						КодыМаркировкиПроизводства.Номенклатура КАК Номенклатура,
	               |						КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |						КодыМаркировкиПроизводства.GTIN КАК GTIN,
	               |						КодыМаркировкиПроизводства.СерийныйНомер КАК СерийныйНомер
	               |					ИЗ
	               |						КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства)) КАК СостоянияКодовМаркировкиСрезПоследних
	               |		ПО КодыМаркировкиПроизводства.Номенклатура = СостоянияКодовМаркировкиСрезПоследних.Номенклатура
	               |			И КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры = СостоянияКодовМаркировкиСрезПоследних.ХарактеристикаНоменклатуры
	               |			И КодыМаркировкиПроизводства.GTIN = СостоянияКодовМаркировкиСрезПоследних.GTIN
	               |			И КодыМаркировкиПроизводства.СерийныйНомер = СостоянияКодовМаркировкиСрезПоследних.СерийныйНомер";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

&НаСервере
Процедура СформироватьПеремещениеНезавершенногоПроизводства(
		ТаблицаТоваров,
		РезультатЗапроса,
		РезультатЗапросаМаркировки,
		Комментарий = "")
	
	ТаблицаТоваровВПроизводстве = РезультатЗапроса.Выгрузить();
	ТаблицаКодовМаркировки = РезультатЗапросаМаркировки.Выгрузить();
	
	// У ЗН источника нет деталей в произодстве
	Если ТаблицаТоваровВПроизводстве.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим копию ТЗ товаров только со сторами в производстве.
	КопияТаблицыТоваров = ТаблицаТоваров.Скопировать();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВПроизводстве", 0);
	
	НайденныеСтроки = КопияТаблицыТоваров.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		КопияТаблицыТоваров.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	// Нет данных для переноса.
	Если КопияТаблицыТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем документ перемещение незавершенного произодства на основании источника.
	ДокументПеремещения = Документы.ПеремещениеНезавершенногоПроизводства.СоздатьДокумент();
	ДокументПеремещения.Заполнить(ЗаказНарядИсточник.Ссылка);
	ПроверитьОшибкиПриСозданииДокумента();
	ДокументПеремещения.ЗаказНаряд = ЗаказНарядПриемник.Ссылка;
	ДокументПеремещения.ЦехПолучатель = ЗаказНарядПриемник.Цех;
	ДокументПеремещения.Комментарий = Комментарий;
	ДокументПеремещения.Товары.Очистить();
	
	// Заполняем перемещенными товарами
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	СтруктураПоискаМаркировки = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД");
	Для Каждого ТекущаяСтрока Из КопияТаблицыТоваров Цикл
		
		КоличествоПеремещения = Мин(ТекущаяСтрока.Количество, ТекущаяСтрока.ВПроизводстве);
		
		// Найдем строки для переноса
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		НайденныеСтроки = ТаблицаТоваровВПроизводстве.НайтиСтроки(СтруктураПоиска);
		
		ВыбранныеМаркировки = СписокВыбраннойМаркировки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
			
			ТекущееКоличествоТовара = Мин(КоличествоПеремещения, СтрокаТовара.Количество);
			
			НоваяСтрока = ДокументПеремещения.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			Документы.ПеремещениеНезавершенногоПроизводства.ТоварыНоменклатураПриИзменении(ДокументПеремещения, НоваяСтрока);
			НоваяСтрока.Количество =
				Окр(ТекущееКоличествоТовара / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент), 3);
			
			КоличествоПеремещения = КоличествоПеремещения - ТекущееКоличествоТовара;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаМаркировки, НоваяСтрока);
			КодыМаркировки = ТаблицаКодовМаркировки.НайтиСтроки(СтруктураПоискаМаркировки);
			
			ДобавленнаяМаркировка = Новый Массив;
			
			КоличествоТовара = НоваяСтрока.Количество * НоваяСтрока.Коэффициент;
			
			// Заполним маркировкой
			Для Каждого ТекущаяМаркировка Из КодыМаркировки Цикл
				
				СтруктураПоискаМаркировкиПоКоду = Новый Структура(
					"КодМаркировки", ТекущаяМаркировка.КодМаркировки);
				Если ВыбранныеМаркировки.Количество() > 0
					И СписокВыбраннойМаркировки.НайтиСтроки(СтруктураПоискаМаркировкиПоКоду).Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрокаМаркировки = ДокументПеремещения.КодыМаркировки.Добавить();
				НоваяСтрокаМаркировки.ИдентификаторТовара = НоваяСтрока.ИдентификаторТовара;
				НоваяСтрокаМаркировки.КодМаркировки = 
					?(ПустаяСтрока(ТекущаяМаркировка.КодМаркировки),
						СтрШаблон(
						"(01)%1(21)%2",
						ТекущаяМаркировка.GTIN,
						ТекущаяМаркировка.СерийныйНомер),
						ТекущаяМаркировка.КодМаркировки);
				ДобавленнаяМаркировка.Добавить(ТекущаяМаркировка);
				КоличествоТовара = КоличествоТовара - 1;
				Если КоличествоТовара = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Удалим из набора добалвленные маркировки
			Для Каждого ТекущаяМаркировка Из ДобавленнаяМаркировка Цикл
				ТаблицаКодовМаркировки.Удалить(ТекущаяМаркировка);
			КонецЦикла;
			
			Если КоличествоПеремещения = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Товарами ТЧ документа не заполнили
	Если ДокументПеремещения.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	СозданныеДокументы.Добавить(ДокументПеремещения.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаказПокупателя(ТаблицаТоваров, РезультатЗапроса, Комментарий = "")
	
	ТаблицаЗаказов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КопияТаблицыТоваров = ТаблицаТоваров.Скопировать();
	СтруктураПоиска = Новый Структура("Заказано,ВРезерве", 0, 0);
	НайденныеСтроки = КопияТаблицыТоваров.НайтиСтроки(СтруктураПоиска);
	
	// Оставим в ТЗ только заказанный и в резерве товар
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		КопияТаблицыТоваров.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	// Проверим есть ли заказанные детали.
	Если КопияТаблицыТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем новый заказ покупателя по приемнику.
	НовыйЗаказ = ЗаказПокупателяПереноса(ЗаказНарядПриемник.Ссылка, ТаблицаЗаказов, КопияТаблицыТоваров, Комментарий);
	
	// Пройдемся по каждому заказу пока есть данные для перемещения.
	СписокЗаказов = Новый Соответствие;
	Для Каждого ТекущийЗаказ Из ТаблицаЗаказов.Строки Цикл
		МассивТоваровКОтмене = Новый Массив;
		Для Каждого ТекущаяНоменклатура Из ТекущийЗаказ.Строки Цикл
			Для Каждого ТекущаяХарактеристика Из ТекущаяНоменклатура.Строки Цикл
				Для Каждого ТекущийТовар Из ТекущаяХарактеристика.Строки Цикл
					ТоварыКОтменеРезерваРаспределения(КопияТаблицыТоваров, ТекущийТовар, МассивТоваровКОтмене);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		СписокЗаказов.Вставить(ТекущийЗаказ.Заказ, СписокЗаказовСТоварами(МассивТоваровКОтмене));
	КонецЦикла;
	
	ВыполнитьПередачуРаспределенияРезерва(НовыйЗаказ, СписокЗаказов, Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПередачуРаспределенияРезерва(ЗаказПокупателя, ДанныеЗаказов, Комментарий)
	
	ПередачаРезерва = Документы.РезервированиеЗаказовПокупателя.СоздатьДокумент();
	ПередачаРезерва.Комментарий = Комментарий;
	ПередачаРезерва.Заполнить(Неопределено);
	ПередачаРезерва.ДокументОснование = ЗаказПокупателя.Ссылка;
	ПередачаРезерва.Контрагент = ЗаказПокупателя.Контрагент;
	ПередачаРезерва.Товары.Очистить();
	
	ПередачаРаспределения = Документы.РаспределениеЗаказаПокупателя.СоздатьДокумент();
	ПередачаРаспределения.Заполнить(ЗаказПокупателя.Ссылка);
	
	ПередачаРаспределения.Товары.Очистить();
	
	ТаблицаТоваров = ЗаказПокупателя.Товары.Выгрузить();
	
	Для Каждого ТекущийЗаказ Из ДанныеЗаказов Цикл
		
		СнятиеРезерва = Документы.СнятиеРезервовЗаказовПокупателя.СоздатьДокумент();
		СнятиеРезерва.Комментарий = Комментарий;
		СнятиеРезерва.КорректировкаЗаказа = Истина;
		СнятиеРезерва.Заполнить(ТекущийЗаказ.Ключ);
		СнятиеРезерва.Товары.Очистить();
		
		ДокументыСписания = Новый Соответствие;
		
		СформироватьДокументыПереносаПоЗаказам(
			ЗаказПокупателя,
			ТекущийЗаказ,
			СнятиеРезерва,
			ПередачаРезерва,
			ПередачаРаспределения,
			ДокументыСписания,
			Комментарий);
		
		Если СнятиеРезерва.Товары.Количество() > 0 Тогда
			
			ДокументыСписания.Вставить("СнятиеРезерва", СнятиеРезерва);
			
		КонецЕсли;
		
		// Создадим документ Корректировка заказа
		
		КорректировкаЗаказа = Документы.КорректировкаЗаказаПокупателя.СоздатьДокумент();
		КорректировкаЗаказа.Заполнить(ТекущийЗаказ.Ключ);
		КорректировкаЗаказа.Комментарий = Комментарий;
		
		// Удалим строки с количеством 0
		МассивСтрокУдалить = Новый Массив;
		
		Для Каждого Строка Из КорректировкаЗаказа.Товары Цикл
			
			СтруктураПоиска = Новый Структура(
				"Номенклатура, ХарактеристикаНоменклатуры",
				Строка.Номенклатура,
				Строка.ХарактеристикаНоменклатуры);
				
			НоваяСтрока = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
			
			Если НоваяСтрока.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НоваяСтрока[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество * НоваяСтрока.Коэффициент;
			НоваяСтрока.Коэффициент = 1;
			
			СтрокаРезерва = СнятиеРезерва.Товары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокаРезерва.Количество() > 0 Тогда
				Строка.Количество = Строка.Количество - СтрокаРезерва[0].Количество;
			КонецЕсли;
			
			Если НоваяСтрока.Количество > Строка.Количество Тогда
				Строка.Количество = 0;
				НоваяСтрока.Количество = НоваяСтрока.Количество - Строка.Количество;
				МассивСтрокУдалить.Добавить(Строка);
				Продолжить;
			Иначе
				Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
				НоваяСтрока.Количество = 0;
			КонецЕсли;
			
			Документы.КорректировкаЗаказаПокупателя.ТоварыКоличествоПриИзменении(КорректировкаЗаказа, Строка);
			
		КонецЦикла;
		
		Для Каждого СтрокаУдалить Из МассивСтрокУдалить Цикл
			КорректировкаЗаказа.Товары.Удалить(СтрокаУдалить);
		КонецЦикла;
		
		Если КорректировкаЗаказа.Товары.Количество() > 0 Тогда
			
			ДокументыСписания.Вставить("КорректировкаЗаказа", КорректировкаЗаказа);
			
		КонецЕсли;
		
		Для Каждого КлючЗначение Из ДокументыСписания Цикл
			
			КлючЗначение.Значение.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			СозданныеДокументы.Добавить(КлючЗначение.Значение.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПередачаРаспределения.Товары.Количество() > 0 Тогда
		ПередачаРаспределения.Товары.Свернуть(
			"Номенклатура,ЕдиницаИзмерения,Коэффициент,ЗаказПоставщику,ХарактеристикаНоменклатуры",
			"Количество");
		ПередачаРаспределения.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		СозданныеДокументы.Добавить(ПередачаРаспределения.Ссылка);
	КонецЕсли;
	
	Если ПередачаРезерва.Товары.Количество() > 0 Тогда
		ПередачаРезерва.Товары.Свернуть(
			"Номенклатура,ЕдиницаИзмерения,Коэффициент,МестоРазмещения,ЗаказПокупателя,ХарактеристикаНоменклатуры",
			"Количество");
		ПередачаРезерва.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		СозданныеДокументы.Добавить(ПередачаРезерва.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыПереносаПоЗаказам(
		ЗаказПокупателя,
		ТекущийЗаказ,
		СнятиеРезерва,
		ПередачаРезерва,
		ПередачаРаспределения,
		ДокументыСписания,
		Комментарий)
	
	ЗаказыПоставщикам = Новый Массив;
	ЗаказыВнутренние = Новый Массив;
	
	Для Каждого КлючЗначение Из ТекущийЗаказ.Значение Цикл
		
		Если ТипЗнч(КлючЗначение.Ключ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			ЗаказыПоставщикам.Добавить(КлючЗначение.Ключ);
			
		ИначеЕсли ТипЗнч(КлючЗначение.Ключ) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда
			
			ЗаказыВнутренние.Добавить(КлючЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	КонтрагентыЗаказов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаказыПоставщикам, "Контрагент");
	ПодразделенияЗаказов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаказыВнутренние, "ПодразделениеКомпании");
	
	Для Каждого КлючЗначение Из ТекущийЗаказ.Значение Цикл
		
		Если ТипЗнч(КлючЗначение.Ключ) = Тип("СправочникСсылка.СкладыКомпании") Тогда
			
			Для Каждого Товар Из КлючЗначение.Значение Цикл
				
				НоваяСтрока = СнятиеРезерва.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
				Документы.СнятиеРезервовЗаказовПокупателя.ТоварыНоменклатураПриИзменении(СнятиеРезерва, НоваяСтрока);
				НоваяСтрока.ЗаказПокупателя = ТекущийЗаказ.Ключ;
				НоваяСтрока.МестоРазмещения = Товар.СкладКомпании;
				
				НоваяСтрока = ПередачаРезерва.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
				Документы.РезервированиеЗаказовПокупателя.ТоварыНоменклатураПриИзменении(ПередачаРезерва, НоваяСтрока);
				НоваяСтрока.ЗаказПокупателя = ЗаказПокупателя.Ссылка;
				НоваяСтрока.МестоРазмещения = Товар.СкладКомпании;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ЭтоЗаказПоставщику = ТипЗнч(КлючЗначение.Ключ) = Тип("ДокументСсылка.ЗаказПоставщику");
		
		ОбъектКонтрагент = ?(
			ЭтоЗаказПоставщику,
			КонтрагентыЗаказов.Получить(КлючЗначение.Ключ),
			ПодразделенияЗаказов.Получить(КлючЗначение.Ключ));
		
		Документ = ДокументыСписания.Получить(ОбъектКонтрагент);
		
		Если Документ = Неопределено Тогда
			
			Документ = Документы.СнятиеРаспределенияЗаказовПокупателя.СоздатьДокумент();
			Документ.Заполнить(Неопределено);
			Документ.ДокументОснование = ТекущийЗаказ.Ключ;
			Документ.Контрагент = ОбъектКонтрагент;
			Документ.Комментарий = Комментарий;
			
			Если НЕ ЭтоЗаказПоставщику Тогда
				
				Документ.ХозОперация = Справочники.ХозОперации.СнятиеРаспределенияВнутреннего;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Товар Из КлючЗначение.Значение Цикл
			
			НоваяСтрока = Документ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
			Документы.СнятиеРаспределенияЗаказовПокупателя.ТоварыНоменклатураПриИзменении(Документ, НоваяСтрока);
			
			НоваяСтрока = ПередачаРаспределения.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
			НоваяСтрока.ЗаказПоставщику = Товар.ЗаказПоставщика;
			Документы.РаспределениеЗаказаПокупателя.ТоварыНоменклатураПриИзменении(ПередачаРаспределения, НоваяСтрока);
			НоваяСтрока.Количество = Товар.Количество;
			
		КонецЦикла;
		
		ДокументыСписания.Вставить(ОбъектКонтрагент, Документ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаказПокупателяПереноса(ДокументОснование, ТаблицаЗаказов, ТаблицаТоваров, Комментарий = "")
	
	Если ТаблицаЗаказов.Строки.Количество() > 0 Тогда
		СкладКомпании = ТаблицаЗаказов.Строки[0].Заказ.СкладКомпании;
	ИначеЕсли ТаблицаТоваров.Количество() > 0 Тогда
		СкладКомпании = ТаблицаТоваров[0].СкладКомпании;
	КонецЕсли;
	
	// Введем новый заказ покупателя.
	НовыйЗаказПокупателя = Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйЗаказПокупателя.Заполнить(ДокументОснование);
	НовыйЗаказПокупателя.СкладКомпании = СкладКомпании;
	ПроверитьОшибкиПриСозданииДокумента();
	НовыйЗаказПокупателя.ХозОперация = Справочники.ХозОперации.ЗаказПокупателя;
	НовыйЗаказПокупателя.Товары.Очистить();
	НовыйЗаказПокупателя.Комментарий = Комментарий;
	НовыйЗаказПокупателя.ПроцентПредоплаты = 0;
	Документы.ЗаказПокупателя.ПроцентПредоплатыПриИзменении(НовыйЗаказПокупателя);
	
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		НоваяСтрока = НовыйЗаказПокупателя.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КоличествоЗаказано = Мин(ТекущаяСтрока.Количество, ТекущаяСтрока.Заказано + ТекущаяСтрока.ВРезерве);
		НоваяСтрока.Количество = Окр(КоличествоЗаказано / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент), 3);
		Документы.ЗаказПокупателя.ТоварыНоменклатураПриИзменении(НовыйЗаказПокупателя, НоваяСтрока);
	КонецЦикла;
	
	НовыйЗаказПокупателя.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	СозданныеДокументы.Добавить(НовыйЗаказПокупателя.Ссылка);
	
	Возврат НовыйЗаказПокупателя;
	
КонецФункции // ЗаказПокупателяПереноса()

&НаСервере
Процедура ТоварыКОтменеРезерваРаспределения(ТаблицаТоваров, ДанныеЗаказа, КОтмене)
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеЗаказа);
	СтрокиТоваров = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТовара = СтрокиТоваров[0];
	
	Если СтрокаТовара.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвободныйОстаток = ДанныеЗаказа.Заказано - ДанныеЗаказа.Резерв - ДанныеЗаказа.Распределено;
	
	Если СвободныйОстаток >= СтрокаТовара.Количество Тогда
		// Отменять ничего не надо.
		Возврат;
	Иначе
		НадоСписать = СтрокаТовара.Количество - СвободныйОстаток;
	КонецЕсли;
	
	// Омена резерва.
	Если ДанныеЗаказа.Резерв > 0 Тогда
		
		КоличествоРезерва = Мин(НадоСписать, ДанныеЗаказа.Резерв);
		
		Элемент = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Количество,СкладКомпании");
		ЗаполнитьЗначенияСвойств(Элемент, СтрокаТовара);
		Элемент.Количество = КоличествоРезерва;
		КОтмене.Добавить(Элемент);
		
		НадоСписать = НадоСписать - КоличествоРезерва;
		
		Если НадоСписать = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Отмена распределения.
	Если ДанныеЗаказа.Распределено > 0 Тогда
		
		Для Каждого ТекущийЗаказПоставщику Из ДанныеЗаказа.Строки Цикл
			Если ТекущийЗаказПоставщику.Распределено = 0 Тогда
				Продолжить;
			КонецЕсли;
			КоличествоРаспределено = Мин(НадоСписать, ТекущийЗаказПоставщику.Распределено);
			Элемент = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Количество,ЗаказПоставщика");
			ЗаполнитьЗначенияСвойств(Элемент, ТекущийЗаказПоставщику);
			Элемент.Количество = КоличествоРаспределено;
			КОтмене.Добавить(Элемент);
			
			НадоСписать = НадоСписать - КоличествоРаспределено;
			
			Если НадоСписать = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыКОтменеРезерваРаспределения()

&НаСервере
Функция СписокЗаказовСТоварами(МассивТоваров)
	
	Результат = Новый Соответствие;
	
	Для Каждого Товар Из МассивТоваров Цикл
		
		Если Товар.Свойство("ЗаказПоставщика") Тогда
			
			Значение = Результат.Получить(Товар.ЗаказПоставщика);
			
			Если Значение = Неопределено Тогда
				
				Значение = Новый Массив;
				
			КонецЕсли;
			
			Значение.Добавить(Товар);
			Результат.Вставить(Товар.ЗаказПоставщика, Значение);
			
		Иначе
			
			Значение = Результат.Получить(Товар.СкладКомпании);
			
			Если Значение = Неопределено Тогда
				
				Значение = Новый Массив;
				
			КонецЕсли;
			
			Значение.Добавить(Товар);
			Результат.Вставить(Товар.СкладКомпании, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьОшибкиПриСозданииДокумента()
	
	// Проверим, что при заполнении объекта не было получено отмены заполнения.
	Отказ = Ложь;
	УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(ЭтотОбъект, Отказ);
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'При создании документа возникли ошибки.'");
	КонецЕсли;
	
КонецПроцедуры // 

&НаСервере
Процедура СформироватьТекстОшибки(МассивОшибок)
	
	МассивСообщений = Новый Массив;
	
	ШаблонТекста = "%1
					|%2
					|";
	
	Для Каждого ТекущееСообщение Из МассивОшибок Цикл
		ТекстСообщения = СтрШаблон(ШаблонТекста, Строка(ТекущееСообщение.КлючДанных), ТекущееСообщение.Текст);
		МассивСообщений.Добавить(ТекстСообщения);
	КонецЦикла;
	
	ТекстОшибки = СтрСоединить(МассивСообщений, Символы.ПС);
	
КонецПроцедуры // СформироватьТекстОшибки()

&НаСервере
Процедура ЗаписатьЗаказНаряд(ИмяЗН)
	
	ЗаказНарядОбъект = РеквизитФормыВЗначение(ИмяЗН, Тип("ДокументОбъект.ЗаказНаряд"));
	
	ЗаказНарядОбъект.СводныйРемонтныйЗаказ = СводныйРемонтныйЗаказ;
	
	УстановитьДополнительныеПараметрыДокумента(ЗаказНарядОбъект, ИмяЗН);
	
	Если ЗаказНарядОбъект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		
		Если ЗаказНарядОбъект.Проведен Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			
		Иначе
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			
		КонецЕсли;
		
	Иначе
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказНарядОбъект.Ссылка) Тогда
		ЗаказНарядОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ЗаказНарядОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьПробег");
	ЗаказНарядОбъект.ДополнительныеСвойства.Вставить("РежимЗаписиСводныйРемонтныйЗаказ", Истина);
	
	ЗаказНарядОбъект.Записать(РежимЗаписи);
	
	ШтрихкодЗН = ШтрихкодированиеВызовСервера.ПолучитьШтрихКодОбъекта(ЗаказНарядОбъект.Ссылка,,, Ложь);
	Если НЕ ЗначениеЗаполнено(ШтрихкодЗН) Тогда
		ШтрихКодДокумента = Новый Структура("Штрихкод");
		ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ШтрихКодДокумента, ЗаказНарядОбъект.Ссылка);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ЗаказНарядОбъект, ЭтотОбъект[ИмяЗН]);
	
КонецПроцедуры // ЗаписатьЗаказНаряд()

&НаСервере
Процедура УстановитьДополнительныеПараметрыДокумента(ОбъектЗаказНаряд, ИдентификаторЗаказНаряда)
	
	// Заполним таблицу состава причин обращения
	Условие = Новый Структура("ИдентификаторОбъектаЗаказНаряд", ИдентификаторЗаказНаряда);
	ВыгружаемыеСтроки = ПодчиненныеАвтоработы.НайтиСтроки(Условие);
	
	ВыгружаемыеКолонки = Новый Массив;
	ВыгружаемыеКолонки.Добавить("ИдентификаторПричиныОбращения");
	ВыгружаемыеКолонки.Добавить("ИдентификаторАвтоработы");
	
	СоставПричинОбращения = ПодчиненныеАвтоработы.Выгрузить(ВыгружаемыеСтроки, СтрСоединить(ВыгружаемыеКолонки, ","));
	СоставПричинОбращения.Колонки.ИдентификаторАвтоработы.Имя = "Авторабота";
	СоставПричинОбращения.Колонки.ИдентификаторПричиныОбращения.Имя = "ПричинаОбращения";
	
	ОбъектЗаказНаряд.ДополнительныеСвойства.Вставить("СоставПричинОбращения", СоставПричинОбращения);
	
	// признак нового документа
	ОбъектЗаказНаряд.ДополнительныеСвойства.Вставить("ЭтоНовый", ОбъектЗаказНаряд.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИнформациюОПакетах()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьСоставПакетоРабот("ЗаказНарядИсточник");
	ЗаписатьСоставПакетоРабот("ЗаказНарядПриемник");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоставПакетоРабот(ЗаказНаряд)
	
	НаборЗаказНаряда = РегистрыСведений.СоставПакетовРабот.СоздатьНаборЗаписей();
	НаборЗаказНаряда.Отбор.ЗаказНаряд.Установить(ЭтотОбъект[ЗаказНаряд].Ссылка);
	
	Условие = Новый Структура("ИдентификаторОбъектаЗаказНаряд", ЗаказНаряд);
	НайденныеРаботы = ПодчиненныеАвтоработы.НайтиСтроки(Условие);
	
	Для Каждого НайденнаяАвторабота Из НайденныеРаботы Цикл
		
		Запись = НаборЗаказНаряда.Добавить();
		Запись.ЗаказНаряд = ЭтотОбъект[ЗаказНаряд].Ссылка;
		Запись.ПакетРабот = НайденнаяАвторабота.ПакетРабот;
		Запись.Авторабота = НайденнаяАвторабота.ИдентификаторАвтоработы;
		
	КонецЦикла;
	
	НаборЗаказНаряда.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьСтрокуВЗаказНаряд(СтрокиПереноса, ДокументПриемник, ДокументИсточник, СписокТоваров)
	
	Если СписокТоваров = Неопределено Тогда
		СписокТоваров = Новый Массив;
	КонецЕсли;
	
	// выполняем перенос строк
	Для Каждого Источник Из СтрокиПереноса Цикл
		
		Если Источник.ИмяТаблицы = "Товары" Тогда
			
			ДобавитьСтрокуТовара(Источник, ДокументПриемник, ДокументИсточник, СписокТоваров);
			
		ИначеЕсли Источник.ИмяТаблицы = "Автоработы" Тогда
			
			ДобавитьСтрокуАвтоработы(Источник, ДокументПриемник, ДокументИсточник, СписокТоваров);
			
		ИначеЕсли Источник.ИмяТаблицы = "ВспомогательнаяАРЗН" Тогда
			
			// получим строку в таблице товаров
			Отбор = Новый Структура("ИдентификаторСтрокиВЗаказНаряде", Источник.ИдентификаторСтроки);
			Отбор.Вставить("ИдентификаторОбъектаЗаказНаряд", "ЗаказНарядИсточник");
			
			СтрокаВТаблица = ПодчиненныеВспомогательныеАвтоработы.НайтиСтроки(Отбор)[0];
			
			// найдем строку источник в ЗН
			СтрокаИсточникВЗН = ДокументИсточник.ВспомогательныеАвтоработы.НайтиПоИдентификатору(Источник.ИдентификаторСтроки);
			НоваяСтрока = ДокументПриемник.ВспомогательныеАвтоработы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточникВЗН);
			ЗаполнитьЗначенияСвойств(СтрокаВТаблица, НоваяСтрока);
			
			ДокументИсточник.ВспомогательныеАвтоработы.Удалить(СтрокаИсточникВЗН);
			
		ИначеЕсли Источник.ИмяТаблицы = "Материалы" Тогда
			
			// получим строку в таблице товаров
			Отбор = Новый Структура("ИдентификаторСтрокиВЗаказНаряде", Источник.ИдентификаторСтроки);
			Отбор.Вставить("ИдентификаторОбъектаЗаказНаряд", "ЗаказНарядИсточник");
			
			СтрокаВТаблица = ПодчиненныеМатериалы.НайтиСтроки(Отбор)[0];
			
			// найдем строку источник в ЗН
			СтрокаИсточникВЗН = ДокументИсточник.МатериалыЗаказчика.НайтиПоИдентификатору(Источник.ИдентификаторСтроки);
			НоваяСтрока = ДокументПриемник.МатериалыЗаказчика.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточникВЗН);
			НоваяСтрока.Количество = Источник.Количество;
			ЗаполнитьЗначенияСвойств(СтрокаВТаблица, НоваяСтрока);
			
			Если НоваяСтрока.Количество = СтрокаИсточникВЗН.Количество Тогда
				ДокументИсточник.МатериалыЗаказчика.Удалить(СтрокаИсточникВЗН);
			Иначе
				СтрокаИсточникВЗН.Количество = СтрокаИсточникВЗН.Количество - НоваяСтрока.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПересчитатьЦены Тогда
		
		// Пересчитаем цены в ТЧ Товары и ТЧ Автоработы Заказ-наряда
		ПараметрыДействия = Новый Структура();
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Истина);
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		Документы.ЗаказНаряд.ОбработкаПересчетаПоказателейОбъекта(ДокументИсточник, ПараметрыДействия);
		Документы.ЗаказНаряд.ОбработкаПересчетаПоказателейОбъекта(ДокументПриемник, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТовара(Источник, ДокументПриемник, ДокументИсточник, СписокТоваров)
	
	// получим строку в таблице товаров
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторСтрокиВЗаказНаряде", Источник.ИдентификаторСтроки);
	Отбор.Вставить("ИдентификаторОбъектаЗаказНаряд",  "ЗаказНарядИсточник");
	
	// найдем строку источник в ЗН
	СтрокаИсточникВЗН = ДокументИсточник.Товары.НайтиПоИдентификатору(Источник.ИдентификаторСтроки);
	
	// Определимся с причиной обращения.
	Если Источник.ПричинаИзПриемника Тогда
		ИдентификаторПричиныОбращения = ПричинаОбращенияПриемника;
	ИначеЕсли НЕ ПустаяСтрока(СтрокаИсточникВЗН.ИдентификаторПричиныОбращения) Тогда
		
		// Получим причину обращения источника.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторПричиныОбращения", СтрокаИсточникВЗН.ИдентификаторПричиныОбращения);
		СтрокаПричинаОбращения = ПодчиненныеПричиныОбращений.НайтиСтроки(СтруктураПоиска)[0];
		
		СтруктураПоискаПричины = Новый Структура;
		СтруктураПоискаПричины.Вставить("ПричинаОбращения", СтрокаПричинаОбращения.ПричинаОбращения);
		ПричинаОбращенияПриемник = ДокументПриемник.ПричиныОбращения.НайтиСтроки(СтруктураПоискаПричины);
		НетПричинОбращенияПриемник = ДокументПриемник.ПричиныОбращения.Количество() = 0;
		Если ПричинаОбращенияПриемник.Количество() = 0 Тогда
			НоваяПричинаОбращения = ДокументПриемник.ПричиныОбращения.Добавить();
			ПричинаОбращенияИсточник = ДокументИсточник.ПричиныОбращения.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(НоваяПричинаОбращения, ПричинаОбращенияИсточник);
			НоваяПричинаОбращения.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
			ИдентификаторПричиныОбращения = НоваяПричинаОбращения.ИдентификаторПричиныОбращения;
			Если НетПричинОбращенияПриемник Тогда
				
				Для Каждого Строка Из ДокументПриемник.Товары Цикл
					Строка.ИдентификаторПричиныОбращения = НоваяПричинаОбращения.ИдентификаторПричиныОбращения;
				КонецЦикла;
				ПараметрыОтбора = Новый Структура("ИдентификаторОбъектаЗаказНаряд", "ЗаказНарядПриемник");
				АвтоработыПриемника = ПодчиненныеАвтоработы.НайтиСтроки(ПараметрыОтбора);
				Для Каждого Строка Из АвтоработыПриемника Цикл
					Строка.ИдентификаторПричиныОбращения = НоваяПричинаОбращения.ИдентификаторПричиныОбращения;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ИдентификаторПричиныОбращения = ПричинаОбращенияПриемник[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
	Иначе
		// Получим -1ю причину обращения
		Если ДокументПриемник.ПричиныОбращения.Количество() <> 0 Тогда
			ИдентификаторПричиныОбращения = ДокументПриемник.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаИсточникВЗН);
	ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	НайденныеСтроки = ДокументПриемник.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ДокументПриемник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточникВЗН);
		Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(ДокументПриемник, НоваяСтрока);
		НоваяСтрока.Количество = Источник.Количество;
		Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ДокументПриемник, НоваяСтрока);
		НоваяСтрока.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
		Если НЕ ПересчитатьЦены Тогда
			НоваяСтрока.Цена = СтрокаИсточникВЗН.Цена;
			Документы.ЗаказНаряд.ТоварыЦенаПриИзменении(ДокументПриемник, НоваяСтрока);
		КонецЕсли;
	Иначе
		НоваяСтрока = НайденныеСтроки[0];
		НоваяСтрока.Количество = НоваяСтрока.Количество + Источник.Количество;
		Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ДокументПриемник, НоваяСтрока);
	КонецЕсли;
	
	Если Источник.Количество = СтрокаИсточникВЗН.Количество Тогда
		ДокументИсточник.Товары.Удалить(СтрокаИсточникВЗН);
	Иначе
		СтрокаИсточникВЗН.Количество = СтрокаИсточникВЗН.Количество - Источник.Количество;
		Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ДокументИсточник, СтрокаИсточникВЗН);
	КонецЕсли;
	СписокТоваров.Добавить(Источник.Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуАвтоработы(Источник, ДокументПриемник, ДокументИсточник, СписокТоваров)
	
	// перенос самой автоработы
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторСтрокиВЗаказНаряде", Источник.ИдентификаторСтроки);
	Отбор.Вставить("ИдентификаторОбъектаЗаказНаряд",  "ЗаказНарядИсточник");
	
	// найдем строку источник в ЗН
	СтрокаИсточникВЗН = ДокументИсточник.Автоработы.НайтиПоИдентификатору(Источник.ИдентификаторСтроки);
	ПеремещеныВсеАвтоработы = (Источник.Количество = СтрокаИсточникВЗН.Количество);
	ИдентификаторПричиныОбращенияИсточник = ПодчиненныеАвтоработы.НайтиСтроки(Отбор)[0].ИдентификаторПричиныОбращения;
	
	// Проверим наличие причиный обращения у приемника.
	Если Источник.ПричинаИзПриемника Тогда
		ИдентификаторПричиныОбращения = ПричинаОбращенияПриемника;
	ИначеЕсли НЕ ПустаяСтрока(ИдентификаторПричиныОбращенияИсточник) Тогда
		
		// Получим причину обращения источника.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращенияИсточник);
		СтрокаПричинаОбращения = ПодчиненныеПричиныОбращений.НайтиСтроки(СтруктураПоиска)[0];
		
		СтруктураПоискаПричины = Новый Структура;
		СтруктураПоискаПричины.Вставить("ПричинаОбращения", СтрокаПричинаОбращения.ПричинаОбращения);
		ПричинаОбращенияПриемник = ДокументПриемник.ПричиныОбращения.НайтиСтроки(СтруктураПоискаПричины);
		НетПричинОбращенияПриемник = ДокументПриемник.ПричиныОбращения.Количество() = 0;
		Если ПричинаОбращенияПриемник.Количество() = 0 Тогда
			НоваяПричинаОбращения = ДокументПриемник.ПричиныОбращения.Добавить();
			ПричинаОбращенияИсточник = ДокументИсточник.ПричиныОбращения.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(НоваяПричинаОбращения, ПричинаОбращенияИсточник);
			НоваяПричинаОбращения.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
			ИдентификаторПричиныОбращения = НоваяПричинаОбращения.ИдентификаторПричиныОбращения;
			Если НетПричинОбращенияПриемник Тогда
				Для Каждого Строка Из ДокументПриемник.Товары Цикл
					Строка.ИдентификаторПричиныОбращения = НоваяПричинаОбращения.ИдентификаторПричиныОбращения;
				КонецЦикла;
				ПараметрыОтбора = Новый Структура("ИдентификаторОбъектаЗаказНаряд", "ЗаказНарядПриемник");
				АвтоработыПриемника = ПодчиненныеАвтоработы.НайтиСтроки(ПараметрыОтбора);
				Для Каждого Строка Из АвтоработыПриемника Цикл
					Строка.ИдентификаторПричиныОбращения = НоваяПричинаОбращения.ИдентификаторПричиныОбращения;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ИдентификаторПричиныОбращения = ПричинаОбращенияПриемник[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
	Иначе
		// Получим -1ю причину обращения
		Если ДокументПриемник.ПричиныОбращения.Количество() <> 0 Тогда
			ИдентификаторПричиныОбращения = ДокументПриемник.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторОбъектаЗаказНаряд, Авторабота, ИдентификаторПричиныОбращения");
	ПараметрыОтбора.ИдентификаторОбъектаЗаказНаряд = "ЗаказНарядПриемник";
	ПараметрыОтбора.Авторабота = СтрокаИсточникВЗН.Авторабота;
	ПараметрыОтбора.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
	
	НайденныеСтроки = ПодчиненныеАвтоработы.НайтиСтроки(ПараметрыОтбора);
	НоваяСтрокаАвтоработы = Ложь;
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаАвтоработы = Истина;
		НоваяСтрока = ДокументПриемник.Автоработы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточникВЗН);
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("УстановитьСпособРасчетаСуммы", ПересчитатьЦены);
		Документы.ЗаказНаряд.АвтоработыАвтоработаПриИзменении(ДокументПриемник, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество = Источник.Количество;
		Документы.ЗаказНаряд.АвтоработыКоличествоПриИзменении(ДокументПриемник, НоваяСтрока);
		
		Если НЕ ПересчитатьЦены Тогда
			НоваяСтрока.Нормочас = СтрокаИсточникВЗН.Нормочас;
			НоваяСтрока.Цена = СтрокаИсточникВЗН.Цена;
			Документы.ЗаказНаряд.АвтоработыЦенаПриИзменении(ДокументПриемник, НоваяСтрока);
		КонецЕсли;
		
		Если НЕ ПеремещеныВсеАвтоработы Тогда
			СтрокаВТаблица = ПодчиненныеАвтоработы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВТаблица, ПодчиненныеАвтоработы.НайтиСтроки(Отбор)[0]);
		Иначе
			СтрокаВТаблица = ПодчиненныеАвтоработы.НайтиСтроки(Отбор)[0];
		КонецЕсли;
		СтрокаВТаблица.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
	Иначе
		СтрокаВТаблица = НайденныеСтроки[0];
		ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", СтрокаВТаблица.ИдентификаторАвтоработы);
		НайденныеСтроки = ДокументПриемник.Автоработы.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = НайденныеСтроки[0];
		НоваяСтрока.Количество = НоваяСтрока.Количество + Источник.Количество;
		Документы.ЗаказНаряд.АвтоработыКоличествоПриИзменении(ДокументПриемник, НоваяСтрока);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаВТаблица, НоваяСтрока);
	
	// перенос сопутствующих материалов
	Отбор = Новый Структура("ИдентификаторРаботы", НоваяСтрока.ИдентификаторРаботы);
	МатериалыКПереносу = ДокументИсточник.Материалы.НайтиСтроки(Отбор);
	
	Если МатериалыКПереносу.Количество() > 0 Тогда
		
		Для Каждого Материал Из МатериалыКПереносу Цикл
			ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СкладКомпании, ЕдиницаИзмерения");
			НайденныеСтроки = ДокументПриемник.Материалы.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ДокументПриемник.Материалы.Добавить(), Материал);
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Материал.Количество;
			КонецЕсли;
			ДокументИсточник.Материалы.Удалить(Материал);
		КонецЦикла;
		
	КонецЕсли;
	
	// переносим исполнителей
	Если ДокументПриемник.ИсполнителиОдинаковыеДляВсехРабот
		И ДокументПриемник.Автоработы.Количество() > 0
		И ДокументПриемник.Исполнители.Количество() > 0 Тогда
		
		Условие = Новый Структура("ИдентификаторРаботы", ДокументПриемник.Автоработы[0].ИдентификаторРаботы);
		ИсполнителиКПереносу = ДокументПриемник.Исполнители.НайтиСтроки(Условие);
		ИсполнителиКУдалению = ДокументИсточник.Исполнители.НайтиСтроки(Отбор);
		
	Иначе
		
		СтруктураПоискаПричины = Новый Структура;
		СтруктураПоискаПричины.Вставить("ИдентификаторПричиныОбращения", СтрокаВТаблица.ИдентификаторПричиныОбращения);
		ПричинаОбращенияПриемник = ДокументПриемник.ПричиныОбращения.НайтиСтроки(СтруктураПоискаПричины);
		
		Если НЕ ДокументПриемник.ИсполнителиОдинаковыеДляВсехРабот
			И ПричинаОбращенияПриемник.Количество() > 0 
			И ПричинаОбращенияПриемник[0].ИсполнителиОдинаковыеВРамкахПричины Тогда
			
			Автоработы = ПричиныОбращенийСлужебный.АвтоработыПричиныОбращения(ПричинаОбращенияПриемник[0].ИдентификаторПричиныОбращения);
			Если Автоработы.Количество() > 0 Тогда
				Условие = Новый Структура("ИдентификаторРаботы", Автоработы[0]);
				ИсполнителиКПереносу = ДокументПриемник.Исполнители.НайтиСтроки(Условие);
			Иначе
				ИсполнителиКПереносу = Новый Массив;
			КонецЕсли;
			
			ИсполнителиКУдалению = ДокументИсточник.Исполнители.НайтиСтроки(Отбор);
			
		Иначе
			
			ИсполнителиКПереносу = ДокументИсточник.Исполнители.НайтиСтроки(Отбор);
			ИсполнителиКУдалению = ИсполнителиКПереносу;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не НоваяСтрокаАвтоработы Тогда
		ИсполнителиКПереносу.Очистить();
	КонецЕсли;
	
	Для Каждого Исполнитель Из ИсполнителиКПереносу Цикл
		
		НоваяСтрокаИсполнитель = ДокументПриемник.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнитель, Исполнитель);
		НоваяСтрокаИсполнитель.ИдентификаторРаботы = НоваяСтрока.ИдентификаторРаботы;
		
	КонецЦикла;
	
	Если НЕ ПеремещеныВсеАвтоработы Тогда
		ИсполнителиКУдалению.Очистить();
	КонецЕсли;
	
	Для Каждого Исполнитель Из ИсполнителиКУдалению Цикл
		
		ДокументИсточник.Исполнители.Удалить(Исполнитель);
		
	КонецЦикла;
	
	Если НоваяСтрокаАвтоработы Тогда
		СтрокаВТаблица.ИдентификаторСтрокиВЗаказНаряде = НоваяСтрока.ПолучитьИдентификатор();
		СтрокаВТаблица.ИдентификаторОбъектаЗаказНаряд  = "ЗаказНарядПриемник";
	КонецЕсли;
	
	Если ПеремещеныВсеАвтоработы Тогда
		ДокументИсточник.Автоработы.Удалить(
			ДокументИсточник.Автоработы.НайтиПоИдентификатору(Источник.ИдентификаторСтроки)
		);
	Иначе
		СтрокаИсточникВЗН.Количество = СтрокаИсточникВЗН.Количество - НоваяСтрока.Количество;
		Документы.ЗаказНаряд.АвтоработыКоличествоПриИзменении(ДокументИсточник, СтрокаИсточникВЗН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораСостояния(ТолькоНеЗавершенные = Истина)
	
	СписокВыбораСостояния = Элементы.ЗаказНарядПриемникСостояние.СписокВыбора;
	СписокВыбораСостояния.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыСостоянийЗаказНарядов.Ссылка КАК Ссылка,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВидыСостоянийЗаказНарядов.Ссылка) КАК Представление
	               |ИЗ
	               |	Справочник.ВидыСостоянийЗаказНарядов КАК ВидыСостоянийЗаказНарядов
	               |ГДЕ
	               |	ВидыСостоянийЗаказНарядов.ИспользоватьВЗаказНаряде
	               |	И НЕ ВидыСостоянийЗаказНарядов.ПометкаУдаления
	               |	И НЕ ВидыСостоянийЗаказНарядов.Ссылка В (&СостоянияЗавершения)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидыСостоянийЗаказНарядов.Код";
	
	СостоянияЗавершения = Новый Массив;
	Если ТолькоНеЗавершенные Тогда
		СостоянияЗавершения.Добавить(Справочники.ВидыСостоянийЗаказНарядов.Выполнен);
		СостоянияЗавершения.Добавить(Справочники.ВидыСостоянийЗаказНарядов.Закрыт);
	КонецЕсли;
	Запрос.УстановитьПараметр("СостоянияЗавершения", СостоянияЗавершения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбораСостояния.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыВыбораСостояния()

&НаКлиенте
Процедура ДеревоПричинОбращенийЗаказНарядаКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПричинОбращенийЗаказНаряда.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.ИмяТаблицы <> "Товары"
		ИЛИ ТекущиеДанные.Количество = ТекущиеДанные.КоличествоДоступно
		ИЛИ НЕ МаркируемыйТовар(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим если ранее были выбораны, то ими и заполним
	СтруктураОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	НайденныеСтроки = СписокВыбраннойМаркировки.НайтиСтроки(СтруктураОтбора);
	
	СписокКодовМаркировки = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		СписокКодовМаркировки.Добавить(ТекущаяСтрока.КодМаркировки);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаказНаряд", ЗаказНарядИсточникСсылка);
	ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.ХарактеристикаНоменклатуры);
	ПараметрыФормы.Вставить("Количество", ТекущиеДанные.Количество * ТекущиеДанные.Коэффициент);
	ПараметрыФормы.Вставить("ВыбранныеКодыМаркировки", СписокКодовМаркировки);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаЗавершенияПодбораМаркировки",
		ЭтотОбъект,
		Новый Структура("Строка", ТекущиеДанные.ПолучитьИдентификатор()));
	
	ОткрытьФорму(
		"Обработка.ПереносСтрокМеждуЗаказНарядами.Форма.ФормаВыбораКодовМаркировки",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаркируемыйТовар(Номенклатура)
	
	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура")
		ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры.ВедетсяМаркировка");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаЗавершенияПодбораМаркировки(СписокМаркировки, ДополнительныеПараметры) Экспорт
	
	СтрокаДерева = ДеревоПричинОбращенийЗаказНаряда.НайтиПоИдентификатору(ДополнительныеПараметры.Строка);
	
	// Очистим ранее выбранные коды маркировки для товара
	СтруктураОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДерева);
	НайденныеСтроки = СписокВыбраннойМаркировки.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		СписокВыбраннойМаркировки.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	// Заполним выбранными значениями
	Если СписокМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийКодМаркировки Из СписокМаркировки Цикл
		НоваяСтрока = СписокВыбраннойМаркировки.Добавить();
		НоваяСтрока.Номенклатура = СтрокаДерева.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДерева.ХарактеристикаНоменклатуры;
		НоваяСтрока.КодМаркировки = ТекущийКодМаркировки;
	КонецЦикла;
	
КонецПроцедуры // Подключаемый_ОбработкаЗавершенияПодбораМаркировки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоПричинОбращенийЗаказНарядаИспользованиеПриИзменении(Элемент)
	
	ТекущаяПричина =
		ДеревоПричинОбращенийЗаказНаряда.НайтиПоИдентификатору(Элементы.ДеревоПричинОбращенийЗаказНаряда.ТекущаяСтрока);
	
	Если (ТекущаяПричина.ИмяТаблицы = "ПричиныОбращений"
		ИЛИ ТекущаяПричина.ИмяТаблицы = "ВспомогательныеАвтор"
		ИЛИ ТекущаяПричина.ИмяТаблицы = "МатериалыЗаказчика")
		И ТекущаяПричина.Использование Тогда
		Для Каждого ТекущаяСтрока Из ТекущаяПричина.ПолучитьЭлементы() Цикл
			ТекущаяСтрока.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПричинОбращенийЗаказНарядаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПричинОбращенийЗаказНаряда.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыДопИнформацияДеревоСводныйРемонтныйЗаказ.ТекущаяСтраница =
		?(ТекущиеДанные.ИмяТаблицы = "Товары", Элементы.ДопИнформацияОстатки, Элементы.НетДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядИсточникСсылкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗаказНарядИсточникСсылка) Тогда
		УстановитьЗаказНаряд("ЗаказНарядИсточник", ЗаказНарядИсточникСсылка);
	Иначе
		УстановитьЗаказНаряд("ЗаказНарядИсточник",, Истина);
	КонецЕсли;
	
	ИзменилсяВыборЗаказНаряда = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядПриемникСсылкаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ЗаказНарядПриемникСсылка)
		И ЗаказНарядПриемникСсылка <> Нстр("ru = 'Новый заказ-наряд'") Тогда
		УстановитьЗаказНаряд("ЗаказНарядПриемник", ЗаказНарядПриемникСсылка);
		Элементы.ГруппаДанныеЗаказНарядаПриемника.ТолькоПросмотр = Истина;
		ЗаполнитьПараметрыВыбораСостояния();
	Иначе
		Если ЗаказНарядПриемникСсылка <> Нстр("ru = 'Новый заказ-наряд'") Тогда
			УстановитьЗаказНаряд(
				"ЗаказНарядПриемник",
				ПредопределенноеЗначение("Документ.ЗаказНаряд.ПустаяСсылка"),,
				ЗаказНарядИсточникСсылка);
			ЗаполнитьПараметрыВыбораСостояния(Ложь);
		Иначе
			УстановитьЗаказНаряд("ЗаказНарядПриемник", ПредопределенноеЗначение("Документ.ЗаказНаряд.ПустаяСсылка"));
			ЗаполнитьПараметрыВыбораСостояния();
		КонецЕсли;
		Элементы.ГруппаДанныеЗаказНарядаПриемника.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ИзменилсяВыборЗаказНаряда = Истина;
	УстановитьДоступностьВзаиморасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПриемникСсылкаПриИзменении(Элемент)
	
	ЗаказНарядПриемникСсылкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВзаиморасчетов()
	
	ЕстьВзаиморасчеты = Не Автосервис.ЭтоБесплатный(ЗаказНарядПриемник.ВидРемонта)
		ИЛИ Элементы.ГруппаДанныеЗаказНарядаПриемника.ТолькоПросмотр;
	
	Элементы.ЗаказНарядПриемникКонтрагент.Доступность = ЕстьВзаиморасчеты;
	Элементы.ЗаказНарядПриемникДоговорВзаиморасчетов.Доступность = ЕстьВзаиморасчеты;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядПриемникКонтрагентПриИзмененииНаСервере()
	Документы.ЗаказНаряд.КонтрагентПриИзменении(ЗаказНарядПриемник);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПриемникКонтрагентПриИзменении(Элемент)
	ЗаказНарядПриемникКонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядПриемникДоговорВзаиморасчетовПриИзмененииНаСервере()
	Документы.ЗаказНаряд.ДоговорВзаиморасчетовПриИзменении(ЗаказНарядПриемник);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПриемникДоговорВзаиморасчетовПриИзменении(Элемент)
	ЗаказНарядПриемникДоговорВзаиморасчетовПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядПриемникВидРемонтаПриИзмененииНаСервере()
	Документы.ЗаказНаряд.ВидРемонтаПриИзменении(ЗаказНарядПриемник);
	УстановитьДоступностьВзаиморасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПриемникВидРемонтаПриИзменении(Элемент)
	ЗаказНарядПриемникВидРемонтаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядПриемникЦехПриИзмененииНаСервере()
	Документы.ЗаказНаряд.ЦехПриИзменении(ЗаказНарядПриемник);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПриемникЦехПриИзменении(Элемент)
	ЗаказНарядПриемникЦехПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ПоказатьЗначение(, СозданныеДокументы.НайтиПоИдентификатору(Значение).Значение);
	
КонецПроцедуры

#КонецОбласти

