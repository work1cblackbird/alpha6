#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция, получения ссылки на корень дерева документов
//
// Параметр:
//	ДокументКорень         - ДокументСсылка - Переданный документ
//	ТаблицаКонтроляПовтора - Переданный массив документов
//	ОписаниеТиповДок       -  Описание типов документов.
//
// Возвращаемое значение:
//	ДокументСсылка - Корень документа.
//
Функция НайтиПервыйДокументЦепочкиПодчиненности(ДокументКорень,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов) Экспорт
	
	ЗначениеРеквизита = Неопределено;
	ВидДокумента = ДокументКорень.Метаданные().Имя;
	
	// Обход реквизитов в поисках подходящего корня
	Для Каждого Реквизит Из Метаданные.Документы[ВидДокумента].Реквизиты Цикл
		ЗначениеРеквизита = ДокументКорень[Реквизит.Имя];
		
		Если ПроверкаПодчиненияРеквизиту(ДокументКорень,ЗначениеРеквизита,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов) Тогда
			ТаблицаКонтроляПовтора.Добавить(ЗначениеРеквизита);
			Возврат НайтиПервыйДокументЦепочкиПодчиненности(ЗначениеРеквизита,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим предмет взаимодействия
	Если ТипЗнч(ДокументКорень) = Тип("ДокументСсылка.СообщениеSMS") ИЛИ ТипЗнч(ДокументКорень) = Тип("ДокументСсылка.Встреча") ИЛИ ТипЗнч(ДокументКорень) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие")
		ИЛИ ТипЗнч(ДокументКорень) = Тип("ДокументСсылка.ТелефонныйЗвонок") ИЛИ ТипЗнч(ДокументКорень) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ ТипЗнч(ДокументКорень) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПредметыПапкиВзаимодействий.Предмет
			|ИЗ
			|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
			|ГДЕ
			|	ПредметыПапкиВзаимодействий.Взаимодействие = &ДокументСсылка";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ДокументСсылка",ДокументКорень);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ Выборка.Предмет = ДокументКорень Тогда
					ТаблицаКонтроляПовтора.Добавить(ЗначениеРеквизита);
					// +Софтфон
					//Возврат НайтиПервыйДокументЦепочкиПодчиненности(Выборка.Предмет,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов);
					Если ЗначениеЗаполнено(Выборка.Предмет) Тогда
						Возврат НайтиПервыйДокументЦепочкиПодчиненности(Выборка.Предмет,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов);
					КонецЕсли;
					// -Софтфон
				КонецЕсли;
			КонецЦикла;

	КонецЕсли;
	
	// Если в реквизитах ничего не было найдено, обходим реквизиты табличных частей
	// Перебираем все ТЧ.
	Для Каждого ТЧ Из Метаданные.Документы[ВидДокумента].ТабличныеЧасти Цикл
		
		// Перебираем все строки ТЧ
		Для ИндексСтроки = 0 По ДокументКорень[ТЧ.Имя].Количество()-1 Цикл
			
			// Перебираем все реквизиты строки
			Для Каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
				
				ИмяРеквизитТЧ = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ТЧ.Имя].Реквизиты[РеквизитТЧ.Имя];
				ЗначениеРеквизита = ДокументКорень[ТЧ.Имя][ИндексСтроки][ИмяРеквизитТЧ.Имя];
				
				Если ПроверкаПодчиненияРеквизиту(ДокументКорень,ЗначениеРеквизита,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов) Тогда
					ТаблицаКонтроляПовтора.Добавить(ЗначениеРеквизита);
					Возврат НайтиПервыйДокументЦепочкиПодчиненности(ЗначениеРеквизита,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументКорень;
	
КонецФункции

// Функция проверяет, может ли документ являться подчиненным реквизиту
//
// Параметр:
//	ДокументСсылка         - ДокументСсылка - Переданный документ
//	ЗнРеквизит             - Реквизит       - Переданный реквизит
//	ТаблицаКонтроляПовтора - Переданный массив документов.
//
// Возвращаемое значение:
//	Булево         - Результат проверки.
//
Функция ПроверкаПодчиненияРеквизиту(ДокументСсылка,Основание,ТаблицаКонтроляПовтора,ОписаниеТиповДокументов)
	
	Если (Основание <> Неопределено) И (ОписаниеТиповДокументов.СодержитТип(ТипЗнч(Основание))) Тогда
		
		Если (Основание<>Документы[Основание.Метаданные().Имя].ПустаяСсылка()) И (Основание<>ДокументСсылка) Тогда
			
			// проверка на дубль
			Если НЕ (ТаблицаКонтроляПовтора.Найти(Основание) = Неопределено) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Проверка, что текущий документ может быть подчиненным для предполагаемого корня.
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПодчиненныеДокументы.Ссылка КАК Документ
			|ИЗ
			|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
			|ГДЕ
			|	ПодчиненныеДокументы.Ссылка = &ДокументСсылка";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Основание",Основание);
			Запрос.УстановитьПараметр("ДокументСсылка",ДокументСсылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 0 Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПолучитьКореньДокумента()

// Функция получает текст запроса
Функция ПолучитьТекстЗапроса(ДокументКорень) Экспорт
	
	ТекстЗапроса = "";
	
	Для Каждого Элемент Из Метаданные.КритерииОтбора.ПодчиненныеДокументы.Состав Цикл
		
		Если Элемент.Тип.СодержитТип(ТипЗнч(ДокументКорень)) Тогда
			ПолноеИмя = Элемент.ПолноеИмя();
			Позиция = СтрНайти(ПолноеИмя, ".Реквизит.");
			ТаблицаОбъекта = Лев(ПолноеИмя, Позиция-1);
			ИмяРеквизита   = Сред(ПолноеИмя, Позиция+10);
			ПутьКДате = "";
			
			Если СтрНайти(ТаблицаОбъекта, ".ТабличнаяЧасть.")>0 Тогда
				ПутьКДате = "Ссылка.Дата";
				ТаблицаОбъекта = СтрЗаменить(ТаблицаОбъекта, ".ТабличнаяЧасть.", ".");
			Иначе
				ПутьКДате = "Дата";
			КонецЕсли;
			
			МассивИмени 		= СтрРазделить(ТаблицаОбъекта, ".");
			ОбъектМетаданных 	= Метаданные.НайтиПоПолномуИмени(СтрШаблон("%1.%2", МассивИмени[0], МассивИмени[1]));
			Если Не ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда 
				Продолжить;		
			КонецЕсли;			
			
			Если ТаблицаОбъекта = "Документ.ЗаказНаряд"
				И НЕ Метаданные.Документы.СводныйРемонтныйЗаказ.
				Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(ДокументКорень))
				И НЕ ТипЗнч(ДокументКорень) = Тип("ДокументСсылка.СводныйРемонтныйЗаказ")Тогда
				
				ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "" , "
				|	ОБЪЕДИНИТЬ ВСЕ
				|") + "
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ТаблицаОбъекта.СводныйРемонтныйЗаказ.Ссылка = ЗНАЧЕНИЕ(Документ.СводныйРемонтныйЗаказ.ПустаяСсылка)
				|			ТОГДА ТаблицаОбъекта.Ссылка
				|		ИНАЧЕ ТаблицаОбъекта.СводныйРемонтныйЗаказ.Ссылка
				|	КОНЕЦ КАК Документ,
				|	ВЫБОР
				|		КОГДА ТаблицаОбъекта.СводныйРемонтныйЗаказ.Ссылка = ЗНАЧЕНИЕ(Документ.СводныйРемонтныйЗаказ.ПустаяСсылка)
				|			ТОГДА ТаблицаОбъекта.Дата
				|		ИНАЧЕ ТаблицаОбъекта.СводныйРемонтныйЗаказ.Дата
				|	КОНЕЦ КАК Дата
				|	ИЗ
				|		"+ТаблицаОбъекта+" КАК ТаблицаОбъекта
				|	ГДЕ
				|		ТаблицаОбъекта."+ИмяРеквизита+" = &Основание
				|";
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "" , "
				|	ОБЪЕДИНИТЬ ВСЕ
				|") + "
				|	ВЫБРАТЬ
				|		ТаблицаОбъекта.Ссылка КАК Документ,
				|		ТаблицаОбъекта."+ПутьКДате+" КАК Дата
				|	ИЗ
				|		"+ТаблицаОбъекта+" КАК ТаблицаОбъекта
				|	ГДЕ
				|		ТаблицаОбъекта."+ИмяРеквизита+" = &Основание
				|";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим документы взаимодействий
	ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "" , "
			|	ОБЪЕДИНИТЬ ВСЕ
			|") + "
			|	ВЫБРАТЬ
			|		ТаблицаОбъекта.Взаимодействие КАК Документ,
			|		ТаблицаОбъекта.Взаимодействие.Дата КАК Дата
			|	ИЗ
			|		РегистрСведений.ПредметыПапкиВзаимодействий КАК ТаблицаОбъекта
			|	ГДЕ
			|		ТаблицаОбъекта.Предмет = &Основание
			|";
	
	Если НЕ ТекстЗапроса = "" Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПодчиненныеДокументы.Документ КАК Документ,
		|	ПодчиненныеДокументы.Дата КАК ДатаДокумента
		|ИЗ
		|	("+ТекстЗапроса+") КАК ПодчиненныеДокументы
		|УПОРЯДОЧИТЬ ПО
		|	ПодчиненныеДокументы.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли