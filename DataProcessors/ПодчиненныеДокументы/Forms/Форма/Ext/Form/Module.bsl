///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки ПодчиненныеДокументы
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Процедура - Обработчик события "ПриСозданииНаСервере" формы.
// Обрабатывает параметры формы и заполняет реквизиты формы значениями.
// А также вызывает процедуры формирования дерева.
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("Документ") И ЗначениеЗаполнено(Параметры.Документ) Тогда
		Объект.Документ = Параметры.Документ;
		СформироватьДеревоПодчиненныхДокументов();
	КонецЕсли;
	
	// В режиме веб-клиента произведем показ кнопки изменения текущего объекта
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.ОткрытьРасшифровку.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Установить текущую строку равной ДокументуОснованию 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		НастроитьДеревоДокументов();
	КонецЕсли;  
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обновить дерево при изменении документа
&НаКлиенте
Процедура ДокументПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		ОбновитьДеревоПодчиненныхДокументов(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

// Открыть форму документа при выборе документа в дереве значений.
&НаКлиенте
Процедура ИерархическийСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ЭлементКоллекции = Объект.ИерархическийСписок.НайтиПоИдентификатору(ВыбраннаяСтрока);
		СтандартнаяОбработка=Ложь;
		ПоказатьЗначение(,ЭлементКоллекции.Документ);
	КонецЕсли;
	
КонецПроцедуры

// Открыть форму списка выбранного документа в таблице (Журнал)
&НаКлиенте
Процедура ДеревоДокументовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаДокумента = ОткрытьФорму("Документ."+Расшифровка.Имя+".ФормаСписка");
		ФормаДокумента.Элементы.Список.ТекущаяСтрока = Расшифровка.Документ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Команда обновить таблицу и дерево
&НаКлиенте
Процедура ОбновитьДеревоПодчиненныхДокументов(Команда)
	
	СформироватьДеревоПодчиненныхДокументов();
	НастроитьДеревоДокументов();
	
КонецПроцедуры //ОбновитьДеревоПодчиненныхДокументов()

// Обработка команды выбора представления данных таблица
&НаКлиенте
Процедура ВидТаблица(Команда)

	УстановитьВидимостьЭлементовФормы(Истина);
	НастроитьДеревоДокументов();

КонецПроцедуры //ВидТаблица()

// Обработка команды выбора представления данных дерево
&НаКлиенте
Процедура ВидДерево(Команда)
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры //ВидДерево()

// Обработчик события возникающего на клиенте при выполнении команды "ОткрытьРасшифровку".
//
// Параметры:
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//
&НаКлиенте
Процедура ОткрытьРасшифровку(Команда)
	
	Расшифровка = Элементы.ДеревоДокументов.ТекущаяОбласть.Расшифровка;
	Если НЕ Расшифровка = Неопределено Тогда
		Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
			ФормаДокумента = ОткрытьФорму("Документ."+Расшифровка.Имя+".ФормаСписка");
			ФормаДокумента.Элементы.Список.ТекущаяСтрока = Расшифровка.Документ;
		Иначе
			ПоказатьЗначение(,Расшифровка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОткрытьРасшифровку()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура получения дерева документов
// ДеревоЗначенийДокумента - ДеревоЗначений , результат выполнения процедуры
// Использует Реквизит формы - ВыбранныйДокумент - ссылка на выбранный документ.
&НаСервере
Процедура СформироватьДеревоПодчиненныхДокументов()
	
	УстановитьПривилегированныйРежим(Истина);
	Объект.ИерархическийСписок.ПолучитьЭлементы().Очистить();
	ТаблицаКонтроляПовтора = Новый Массив;
	
	ОписаниеТиповДокументов = Документы.ТипВсеСсылки();
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ТаблицаКонтроляПовтора.Добавить(Объект.Документ);
	
	// Найти корень дерева
	ДокументКорень = Обработки.ПодчиненныеДокументы.НайтиПервыйДокументЦепочкиПодчиненности(Объект.Документ, ТаблицаКонтроляПовтора, ОписаниеТиповДокументов);
	
	// Добавить в дерево новою строку - корень документа
	НоваяСтрока = Объект.ИерархическийСписок.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Документ = ДокументКорень;
	НоваяСтрока.Дата     = ДокументКорень.Дата;
	НоваяСтрока.Номер    = ДокументКорень.Номер;
	КартинкаИтог = ?(ДокументКорень.Проведен ИЛИ ДокументКорень.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить, 
				БиблиотекаКартинок.ДокументПроведен, БиблиотекаКартинок.ДокументНеПроведен);	
	НоваяСтрока.Картинка = ?(ДокументКорень.ПометкаУдаления, БиблиотекаКартинок.ДокументПомеченНаУдаление, КартинкаИтог);
	
	Если ЕстьРеквизит(ДокументКорень,"ХозОперация") Тогда
		НоваяСтрока.Операция = ДокументКорень.ХозОперация;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДокументКорень,"Организация") Тогда
		НоваяСтрока.Организация = ДокументКорень.Организация;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДокументКорень,"ПодразделениеКомпании") Тогда
		НоваяСтрока.Подразделение = ДокументКорень.ПодразделениеКомпании;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДокументКорень,"Автор") Тогда
		НоваяСтрока.Автор = ДокументКорень.Автор;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДокументКорень,"СуммаДокумента") Тогда
		НоваяСтрока.Сумма = ДокументКорень.СуммаДокумента;
		
		Если ЗначениеЗаполнено(ДокументКорень.СуммаДокумента) Тогда
			НоваяСтрока.Валюта = ДокументКорень.ВалютаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаКонтроляПовтора = Новый Массив;
	ТаблицаКонтроляПовтора.Добавить(ДокументКорень);
	
	// Получим полную иерархию связей документов
	ДобавитьВДерево(НоваяСтрока, ДокументКорень, ТаблицаКонтроляПовтора);
	
	// Вывести дерево на форму с использованием макета
	ВывестиДеревоДокументов();
	
КонецПроцедуры 

// Процедура обхода дерева документов и добавления в дерево подчиненных документов
//
// Параметры:
//	Строка         - Массив         - Массив строк
//	ДокументКорень - ДокументСсылка - Документ корень
//	ТаблицаКонтроляПовтора - Переданный массив документов.
//
&НаСервере
Процедура ДобавитьВДерево(Строка, ДокументКорень, ТаблицаКонтроляПовтора)
	
	ТекстЗапроса = Обработки.ПодчиненныеДокументы.ПолучитьТекстЗапроса(ДокументКорень);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", ДокументКорень);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ (ТаблицаКонтроляПовтора.Найти(Выборка.Документ) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаКонтроляПовтора.Добавить(Выборка.Документ);
		ТекущийДокумент = Выборка.Документ;
			
		// Добавить в дерево новою строку
		НоваяСтрока = Строка.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Документ = ТекущийДокумент;
		НоваяСтрока.Дата     = ТекущийДокумент.Дата;
		НоваяСтрока.Номер    = ТекущийДокумент.Номер;
		КартинкаИтог = ?(ТекущийДокумент.Проведен ИЛИ ТекущийДокумент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить, 
						БиблиотекаКартинок.ДокументПроведен, БиблиотекаКартинок.ДокументНеПроведен);
		НоваяСтрока.Картинка = ?(ТекущийДокумент.ПометкаУдаления, БиблиотекаКартинок.ДокументПомеченНаУдаление, КартинкаИтог);
		
		Если ЕстьРеквизит(ТекущийДокумент, "ХозОперация") Тогда
			НоваяСтрока.Операция = ТекущийДокумент.ХозОперация;
		КонецЕсли;
		
		Если ЕстьРеквизит(ТекущийДокумент, "Организация") Тогда
			НоваяСтрока.Организация = ТекущийДокумент.Организация;
		КонецЕсли;
		
		Если ЕстьРеквизит(ТекущийДокумент, "ПодразделениеКомпании") Тогда
			НоваяСтрока.Подразделение = ТекущийДокумент.ПодразделениеКомпании;
		КонецЕсли;
		
		Если ЕстьРеквизит(ТекущийДокумент, "Автор") Тогда
			НоваяСтрока.Автор = ТекущийДокумент.Автор;
		КонецЕсли;
		
		Если ЕстьРеквизит(ТекущийДокумент, "СуммаДокумента") Тогда
			НоваяСтрока.Сумма = ТекущийДокумент.СуммаДокумента;
			
			Если ЗначениеЗаполнено(ТекущийДокумент.СуммаДокумента) Тогда
				НоваяСтрока.Валюта = ТекущийДокумент.ВалютаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьВДерево(НоваяСтрока,ТекущийДокумент,ТаблицаКонтроляПовтора);// Добавить подчиненные новой строке документы
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВДерево()

// Процедура вывода дерева документов на форму
// Дерево - ДеревоЗначений , результат выполнения процедуры.
&НаСервере
Процедура ВывестиДеревоДокументов()
	
	ДеревоДокументов.Очистить();
	Макет = Обработки.ПодчиненныеДокументы.ПолучитьМакет("ДеревоДокументовМакет");
	Область = Макет.ПолучитьОбласть("Кнопки");
	ДеревоДокументов.Вывести(Область);
	ГлубинаДерева = 0;
	ДеревоЗначений = Объект.ИерархическийСписок.ПолучитьЭлементы();
	ПолучитьГлубинуДерева(ДеревоЗначений, 0, ГлубинаДерева);
	спУровни = Новый Массив();
	
	Для К = 1 По ГлубинаДерева Цикл
		спУровни.Вставить(К, 0);
	КонецЦикла; 
	
	Корень = ДеревоЗначений.Получить(0);
	
	Если ГлубинаДерева > 1 Тогда
		спУровни[1] = 1;
	КонецЕсли;
	
	Если Корень.Документ = Объект.Документ Тогда
		Область = Макет.ПолучитьОбласть("КореньТекДок");
	Иначе
		Область = Макет.ПолучитьОбласть("Заголовок");
	КонецЕсли;
	
	Документ = Корень.Документ;
	
	Если ЕстьРеквизит(Документ,"СуммаДокумента") Тогда
		СтрокаСумма = ?(Документ.СуммаДокумента = 0, "", Символы.ПС + "Сумма: " + Документ.СуммаДокумента + " " + Документ.ВалютаДокумента);
	Иначе
		СтрокаСумма = "";
	КонецЕсли; 
	
	// Заполнение макета полученным значением элемента дерева
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СообщениеSMS") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.Встреча") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ТелефонныйЗвонок") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Область.Параметры.ДанныеДокумента = "" + Документ.Ссылка;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РабочийЛист") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Номер,Дата,Контрагент,ОбращениеККлиенту,Модель,Марка");
		ПредставлениеДокумента = Новый Массив;
		ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'РЛ №%1 от %2'"), СокрЛП(РеквизитыДокумента.Номер), Формат(РеквизитыДокумента.Дата, "ДФ='dd.MM.yyyy'")));
		ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'клиент <%1>'"), ?(ЗначениеЗаполнено(РеквизитыДокумента.Контрагент), РеквизитыДокумента.Контрагент, РеквизитыДокумента.ОбращениеККлиенту)));
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Модель) ИЛИ ЗначениеЗаполнено(РеквизитыДокумента.Марка) Тогда
			ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'автомобиль <%1>'"), ?(ЗначениеЗаполнено(РеквизитыДокумента.Модель), РеквизитыДокумента.Модель, РеквизитыДокумента.Марка)));
		КонецЕсли;
		
		Область.Параметры.ДанныеДокумента = СтрСоединить(ПредставлениеДокумента, "; ");
		
	ИначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.Выписка") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекКоррекции") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекНаОплату")) 
		И ЗначениеЗаполнено(Документ.ПризнакСпособаРасчета) Тогда 
		
		Область.Параметры.ДанныеДокумента = СтрШаблон("%1 (%2) № %3 от %4", Документ.ХозОперация, НРег(Документ.ПризнакСпособаРасчета), СокрЛП(Документ.Номер), ДатаВФорматеСВременем(Документ.Дата));
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Анкета") Тогда
		Область.Параметры.ДанныеДокумента = СтрШаблон("Анкета № %1 от %2", СокрЛП(Документ.Номер), ДатаВФорматеСВременем(Документ.Дата));
	Иначе
		Область.Параметры.ДанныеДокумента = СтрШаблон("%1 № %2 от %3 %4", Документ.ХозОперация.Наименование,Документ.Номер, ДатаВФорматеСВременем(Документ.Дата), СтрокаСумма);
	КонецЕсли;
	
	Область.Параметры.Документ        = Документ;
	Область.Параметры.Расшифровка     = Новый Структура("Имя,Документ", Документ.Метаданные().Имя, Документ);
	КартинкаИтог = ?(Документ.Проведен ИЛИ Документ.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить, 
									БиблиотекаКартинок.ДокументПроведен, БиблиотекаКартинок.ДокументНеПроведен);
	Область.Рисунки[0].Картинка       = ?(Документ.ПометкаУдаления, БиблиотекаКартинок.ДокументПомеченНаУдаление, КартинкаИтог);
	ДеревоДокументов.Вывести(Область);
	
	Для Каждого Строка Из Корень.ПолучитьЭлементы() Цикл
		ВывестиСтрокуДерева(ДеревоЗначений, Строка, Макет, ДеревоДокументов, 1, спУровни);
	КонецЦикла;
	
	ДеревоДокументов.ТолькоПросмотр      = Истина;
	ДеревоДокументов.ОтображатьСетку     = Ложь;
	ДеревоДокументов.ОтображатьЗаголовки = Ложь;
	
КонецПроцедуры // ВывестиДеревоДокументов()

Функция ДатаВФорматеСВременем(Дата)
	Возврат Формат(Дата, "ДФ='dd.MM.yyyy (HH:mm)'");
КонецФункции

// Функция, получает максимальную глубину дерева документов
//
// Параметр:
//	Дерево			- ДеревоЗначений	- Дерево
//	ТекГлубина		- Число				- Текущая глубина
//	ГлубинаДерева	- Число				- Глубина дерева.
//
// Возвращаемое значение:
// Число			- Максимальная глубина дерева.
//
&НаСервере
Функция ПолучитьГлубинуДерева(ДеревоЗначений,ТекГлубина, ГлубинаДерева)
	
	ПредГлубина = ТекГлубина;
	
	Для Каждого Строка Из ДеревоЗначений Цикл
		ТекГлубина = ПолучитьГлубинуДерева(Строка.ПолучитьЭлементы() , ТекГлубина+1 , ГлубинаДерева);
	КонецЦикла;
	
	Если ПредГлубина < ТекГлубина Тогда
		ГлубинаДерева = ГлубинаДерева + 1;
	КонецЕсли;
	
	Возврат ТекГлубина;
	
КонецФункции // ПолучитьГлубинуДерева()

// Обход дерева и печать элементов
//
// Параметры:
//	ДеревоДокумента	- ДеревоЗначений	- Дерево
//	СтрокаДерева	- Структура			- Строка дерева
//	Макет           - ТабличныйДокумент - Макет
//	Таб             - ТабличныйДокумент - Табличный документ
//	Уровень         - Число				- Уровень
//	спУровни        - Число				- Уровни.
//
&НаСервере
Процедура ВывестиСтрокуДерева(ДеревоДокумента, СтрокаДерева, Макет, Таб, Уровень, спУровни)
	
	Документ = СтрокаДерева.Документ;
	Область = Макет.ПолучитьОбласть("ГрУгол|В");
	Таб.Вывести(Область);
	
	Для к = 1 По Уровень - 1 Цикл
		Область = Макет.ПолучитьОбласть(?(спУровни[к] = 1, "ГрЛиния|Линии","ГрПуст|Линии"));
		Таб.Присоединить(Область);
	КонецЦикла;
	
	Если СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы().Индекс(СтрокаДерева) + 1 = СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы().Количество() Тогда
		Область = Макет.ПолучитьОбласть("ГрУгол|Линии");
		спУровни[Уровень] = 0;
	Иначе
		Область = Макет.ПолучитьОбласть("ГрДвСекция|Линии");
		спУровни[Уровень] = 1;
	КонецЕсли;
	
	Таб.Присоединить(Область);
	
	Если Документ = Объект.Документ Тогда
		Область = Макет.ПолучитьОбласть("ТекДок|Тело");
	Иначе
		Область = Макет.ПолучитьОбласть("Док|Тело");
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ,"СуммаДокумента") Тогда
		СтрокаСумма = ?(Документ.СуммаДокумента = 0, "", Символы.ПС + "Сумма: " + Документ.СуммаДокумента + " " + Документ.ВалютаДокумента);
	Иначе
		СтрокаСумма = "";
	КонецЕсли; 
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СообщениеSMS") ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.Встреча") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ТелефонныйЗвонок") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.Анкета") Тогда
		Область.Параметры.ДанныеДокумента = "" + Документ.Ссылка;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РабочийЛист") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Номер,Дата,Контрагент,ОбращениеККлиенту,Модель,Марка");
		ПредставлениеДокумента = Новый Массив;
		ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'РЛ №%1 от %2'"), СокрЛП(РеквизитыДокумента.Номер), Формат(РеквизитыДокумента.Дата, "ДФ='dd.MM.yyyy'")));
		ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'клиент <%1>'"), ?(ЗначениеЗаполнено(РеквизитыДокумента.Контрагент), РеквизитыДокумента.Контрагент, РеквизитыДокумента.ОбращениеККлиенту)));
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Модель) ИЛИ ЗначениеЗаполнено(РеквизитыДокумента.Марка) Тогда
			ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'автомобиль <%1>'"), ?(ЗначениеЗаполнено(РеквизитыДокумента.Модель), РеквизитыДокумента.Модель, РеквизитыДокумента.Марка)));
		КонецЕсли;
		
		Область.Параметры.ДанныеДокумента = СтрСоединить(ПредставлениеДокумента, "; ");
		
	ИначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.Выписка") 
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		Или	ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекКоррекции") 
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекНаОплату")) И ЗначениеЗаполнено(Документ.ПризнакСпособаРасчета) Тогда 
		Область.Параметры.ДанныеДокумента = СтрШаблон("%1 (%2) № %3 от %4 %5", Документ.ХозОперация, НРег(Документ.ПризнакСпособаРасчета), СокрЛП(Документ.Номер), Формат(Документ.Дата, "ДФ='dd.MM.yyyy (HH:mm)'"), СтрокаСумма);		
	Иначе
		Область.Параметры.ДанныеДокумента = Документ.ХозОперация.Наименование + " № "+СокрЛП(Документ.Номер) + " от " + Формат(Документ.Дата,"ДФ='dd.MM.yyyy (HH:mm)'") + СтрокаСумма;
	КонецЕсли;
	Область.Параметры.Документ        = Документ;
	Область.Параметры.Расшифровка     = Новый Структура("Имя,Документ" , Документ.Метаданные().Имя, Документ);
	КартинкаИтог = ?(Документ.Проведен ИЛИ Документ.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить, 
								БиблиотекаКартинок.ДокументПроведен, БиблиотекаКартинок.ДокументНеПроведен);
	Область.Рисунки[0].Картинка       = ?(Документ.ПометкаУдаления, БиблиотекаКартинок.ДокументПомеченНаУдаление, КартинкаИтог);
	Таб.Присоединить(Область);
	
	Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ВывестиСтрокуДерева(ДеревоДокументов, Строка, Макет, ДеревоДокументов, Уровень + 1, спУровни);
	КонецЦикла;
	
КонецПроцедуры // ВывестиСтрокуДерева()

// Процедура форматирования дерева значений
&НаКлиенте
Процедура НастроитьДеревоДокументов();
	
	Если Не Элементы.ИерархическийСписок.Видимость Тогда
		Возврат;
	КонецЕсли;

	// Развернуть полученное дерево значений
	КоллекцияЭлементовДерева=Объект.ИерархическийСписок.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки=СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ИерархическийСписок.Развернуть(ИдентификаторСтроки,Истина);
	КонецЦикла;
	
	ИдентификаторСтроки = 0;
	ПрекратитьПоиск=Ложь;
	
	// Получить идентификатор строки в которой находиться ДокументОснование	
	НайтиСтрокуДерева(Объект.ИерархическийСписок.ПолучитьЭлементы(), ИдентификаторСтроки, ПрекратитьПоиск);
	
	// Установить текущую строку, позиционирование на документе основании
	Элементы.ИерархическийСписок.ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

// Найти элемент дерева равный реквизиту "ДокументОснование"
&НаКлиенте 
Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ИдентификаторСтроки, ПрекратитьПоиск) 
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева.Документ = Объект.Документ Тогда
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			ПрекратитьПоиск = Истина;
			Возврат;
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			НайтиСтрокуДерева(КоллекцияЭлементов, ИдентификаторСтроки, ПрекратитьПоиск);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет текста, шрифт
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗначенийДокумента");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ИерархическийСписок.Документ");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Документ");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,0,0));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовФормы(Журнал = Ложь)
	
	Элементы.ИерархическийСписок.Видимость=Журнал;
	Элементы.ДеревоДокументов.Видимость=Не Журнал;
	Элементы.ВидДерево.Пометка=Не Журнал;
	Элементы.Журнал.Пометка=Журнал;
	
КонецПроцедуры 

#КонецОбласти

