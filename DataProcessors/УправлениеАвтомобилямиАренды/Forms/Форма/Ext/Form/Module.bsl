///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Управление автомобилями аренды"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Период = ТекущаяДатаСеанса();
	
	УстановитьПериодВОтборы();
	
	ОбщегоНазначенияКлиентСервер.
		УстановитьЭлементОтбораДинамическогоСписка(Список,        "ПодразделениеКомпании", Неопределено, , , Ложь);
	ОбщегоНазначенияКлиентСервер.
		УстановитьЭлементОтбораДинамическогоСписка(Список,        "ВидАренды",             Неопределено, , , Ложь);
	ОбщегоНазначенияКлиентСервер.
		УстановитьЭлементОтбораДинамическогоСписка(Список,        "Марка",                 Неопределено, , , Ложь);
	ОбщегоНазначенияКлиентСервер.
		УстановитьЭлементОтбораДинамическогоСписка(Список,        "Модель",                Неопределено, , , Ложь);
	
	ОбщегоНазначенияКлиентСервер.
		УстановитьЭлементОтбораДинамическогоСписка(Неисправности, "Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.
		УстановитьЭлементОтбораДинамическогоСписка(Страхование,   "Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	
	ОбщегоНазначенияКлиентСервер.
		УстановитьПараметрДинамическогоСписка(ОпцииАвтомобиля, "Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.
		УстановитьПараметрДинамическогоСписка(ОборудованиеАвтомобиля, "Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.
		УстановитьПараметрДинамическогоСписка(Ремонт, "Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.
		УстановитьПараметрДинамическогоСписка(ХранениеШин, "Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.
		УстановитьПараметрДинамическогоСписка(ДоговорыАренды, "Автомобиль", Справочники.Автомобили.ПустаяСсылка());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Тарификация,
		"ПодразделениеКомпании",
		Справочники.ПодразделенияКомпании.ПустаяСсылка());
		
	ОбщегоНазначенияКлиентСервер.
		УстановитьПараметрДинамическогоСписка(Тарификация, "Модель", Справочники.Модели.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Тарификация,
		"ВариантКомплектации",
		Справочники.ВариантыКомплектации.ПустаяСсылка());
	
	ИспользоватьПодменюКнопок = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Страхование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Элементы.Список.Обновить();
	ОбновитьТекущуюСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ИспользоватьПодменюКнопок") = Истина Тогда
		Элементы.СписокРазвернутьПодменюКнопок.Заголовок          = НСтр("ru = 'Развернуть подменю кнопок'");
		Элементы.СписокГруппаЭксплуатация.Вид                     = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаЭксплуатация.Картинка                = БиблиотекаКартинок.АвтомобильВыбор;
		Элементы.СписокГруппаДокументы.Вид                        = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаДокументы.Картинка                   = БиблиотекаКартинок.ЗаполнениеДокументовПодменю;
		Элементы.СписокГруппаЭксплуатацияКонтекстноеМеню.Вид      = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаЭксплуатацияКонтекстноеМеню.Картинка = БиблиотекаКартинок.АвтомобильВыбор;
		Элементы.СписокГруппаДокументыКонтекстноеМеню.Вид         = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаДокументыКонтекстноеМеню.Картинка    = БиблиотекаКартинок.ЗаполнениеДокументовПодменю;
	Иначе
		Элементы.СписокРазвернутьПодменюКнопок.Заголовок     = НСтр("ru = 'Свернуть подменю кнопок'");
		Элементы.СписокГруппаЭксплуатация.Вид                = ВидГруппыФормы.ГруппаКнопок;
		Элементы.СписокГруппаДокументы.Вид                   = ВидГруппыФормы.ГруппаКнопок;
		Элементы.СписокГруппаЭксплуатацияКонтекстноеМеню.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.СписокГруппаДокументыКонтекстноеМеню.Вид    = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьПериодВОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыДанныхПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТекущуюСтраницу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьФорму("Справочник.Автомобили.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Автомобиль));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ОпцииАвтомобиля,
			"Автомобиль",
			ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ОборудованиеАвтомобиля,
			"Автомобиль",
			ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Ремонт,
			"Автомобиль",
			ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ХранениеШин,
			"Автомобиль",
			ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ДоговорыАренды,
			"Автомобиль",
			ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Тарификация,
			"ПодразделениеКомпании",
			ПредопределенноеЗначение("Справочник.ПодразделенияКомпании.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Тарификация,
			"Модель",
			ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Тарификация,
			"ВариантКомплектации",
			ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Неисправности,
			"Автомобиль",
			ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Страхование,
			"Автомобиль",
			ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Водители,
			"ДействующееСоглашение",
			ПредопределенноеЗначение("Документ.ДоговорАренды.ПустаяСсылка"));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ОпцииАвтомобиля,
			"Автомобиль",
			ТекущаяСтрока.Автомобиль);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ОборудованиеАвтомобиля,
			"Автомобиль",
			ТекущаяСтрока.Автомобиль);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Ремонт,
			"Автомобиль",
			ТекущаяСтрока.Автомобиль);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ХранениеШин,
			"Автомобиль",
			ТекущаяСтрока.Автомобиль);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ДоговорыАренды,
			"Автомобиль",
			ТекущаяСтрока.Автомобиль);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Тарификация,
			"ПодразделениеКомпании",
			ТекущаяСтрока.ПодразделениеКомпании);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Тарификация,
			"Модель",
			ТекущаяСтрока.Модель);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Тарификация,
			"ВариантКомплектации",
			ТекущаяСтрока.ВариантКомплектации);
		
		ОбщегоНазначенияКлиентСервер.
			УстановитьЭлементОтбораДинамическогоСписка(Неисправности, "Автомобиль", ТекущаяСтрока.Автомобиль);
		ОбщегоНазначенияКлиентСервер.
			УстановитьЭлементОтбораДинамическогоСписка(Страхование,   "Автомобиль", ТекущаяСтрока.Автомобиль);
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Водители,
			"ДействующееСоглашение",
			ТекущаяСтрока.ДействующееСоглашение);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНеисправности

&НаКлиенте
Процедура НеисправностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ВыбраннаяСтрока.Регистратор);
	
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПолучитьИзображениеОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

#Область РаботаСИзображением

// Процедура для вывода изображений
//
&НаКлиенте
Процедура ПолучитьИзображениеОбработчикОжидания()
	
	Если Элементы.Неисправности.ТекущиеДанные = Неопределено Тогда
		ТекущаяКартинка = ПредопределенноеЗначение("Справочник.ДефектовочнаяВедомостьПрисоединенныеФайлы.ПустаяСсылка");
		ОбнаруженнаяНеисправностьАдресКартинки = "";
		Возврат;
	Иначе
		ПолучитьИзображение(Элементы.Неисправности.ТекущиеДанные.Медиафайл);
	КонецЕсли;
	
КонецПроцедуры

// Процедура для вывода последующих изображений
//
&НаСервере
Функция ПолучитьИзображения(Картинка)
	
	СписокФайлов = РаботаСФайламиАльфаАвтоВызовСервера.
		ВсеПодчиненныеФайлы(Элементы.Неисправности.ТекущаяСтрока.Регистратор);
	
	// Сформируем список форматов изображения
	СписокИзображений = Новый Массив;
	Для Каждого Файл Из СписокФайлов Цикл
		Если НЕ Файл.ПометкаУдаления И Файл.ИндексКартинки > 41 И Файл.ИндексКартинки < 51 И Файл = Картинка Тогда
			СписокИзображений.Добавить(Файл);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокИзображений;
	
КонецФункции// ПолучитьМассивИзображений()

// Процедура для вывода изображений на сервере
//
&НаСервере
Процедура ПолучитьИзображение(Картинка)
	
	// Сформируем список форматов изображения
	СписокИзображений = ПолучитьИзображения(Картинка);
	
	// Проверим тип выбранного файла картинки
	Если СписокИзображений.Количество() > 0 Тогда
		ТекущаяКартинка = СписокИзображений[0];
	Иначе
		ТекущаяКартинка = Справочники.ДефектовочнаяВедомостьПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ТекущаяКартинка.Пустая() Тогда
		ОбнаруженнаяНеисправностьАдресКартинки = НавигационнаяСсылкаКартинкиОбнаруженнаяНеисправность(ТекущаяКартинка,
													УникальныйИдентификатор);
	Иначе
		ОбнаруженнаяНеисправностьАдресКартинки = "";
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСледующееИзображение()

// Функция для получения ссылки на картинку для ее отображения
//
&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинкиОбнаруженнаяНеисправность(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ОбнаруженнаяНеисправностьАдресКартинки = РаботаСФайламиСлужебныйВызовСервера.
			ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбнаруженнаяНеисправностьАдресКартинки = "";
	КонецПопытки;
	
	Возврат ОбнаруженнаяНеисправностьАдресКартинки;
	
КонецФункции

// Обработчик события возникающего на клиенте при нажатии реквизита "АдресКартинки".
//
&НаКлиенте
Процедура ОбнаруженнаяНеисправностьАдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ТекущиеДанные = ?(Элементы.Неисправности.ТекущиеДанные = Неопределено,
			Неопределено,
			Элементы.Неисправности.ТекущиеДанные.Медиафайл);
	Если ЗначениеЗаполнено(ТекущаяКартинка) И ЗначениеЗаполнено(ТекущиеДанные) Тогда
		КартинкаДляПросмотра = ТекущиеДанные;
		
		Если (ЗначениеЗаполнено(КартинкаДляПросмотра)
				И ЗначениеЗаполнено(ТекущаяКартинка)
				И НЕ ТекущаяКартинка = КартинкаДляПросмотра)
			ИЛИ НЕ ЗначениеЗаполнено(КартинкаДляПросмотра) Тогда
			КартинкаДляПросмотра = ТекущаяКартинка;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
			КартинкаДляПросмотра,
			УникальныйИдентификатор));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Отсутствует изображение для просмотра'"), 2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонт

&НаКлиенте
Процедура РемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоговорыАренды

&НаКлиенте
Процедура ДоговорыАрендыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ДоговорыАренды.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ПоказатьЗначение(, ТекСтрока.Документ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтрахование

&НаКлиенте
Процедура СтрахованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Истина, Истина, Ложь, , , Истина);
	Если ИнформацияПоАктивам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.СтраховойПолис.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХранениеШин

&НаКлиенте
Процедура ХранениеШинВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВвестиВЭксплуатацию(Команда)
	
	ИнформацияПоАктивам = Новый Структура(
		"ХозОперация",
		ПредопределенноеЗначение("Справочник.ХозОперации.ПереводАвтомобиляВТестДрайв"));
	
	ОткрытьФорму(
		"Документ.ВводВЭксплуатациюАвтомобилей.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИэЭксплуатации(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("КарточкаАктива", Истина, Ложь, Ложь);
	Если ИнформацияПоАктивам = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ИнформацияПоАктивам.ПодразделениеКомпании) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ВыводИзЭксплуатацииАвтомобилей.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Переместить(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("КарточкаАктива", Истина, Ложь, Истина);
	Если ИнформацияПоАктивам = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ИнформацияПоАктивам.ПодразделениеКомпании) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПеремещениеАктивов.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТарификацияИзменитьТарификацию(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Истина, Истина, Ложь);
	Если ИнформацияПоАктивам = Неопределено
		ИЛИ НЕ (ЗначениеЗаполнено(ИнформацияПоАктивам.ПодразделениеКомпании)
			И ЗначениеЗаполнено(ИнформацияПоАктивам.ВидАренды)) Тогда
			Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ИзменениеЦенАренды.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаявкуНаРемонт(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Истина, Истина, Ложь,,, Истина);
	Если ИнформацияПоАктивам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ЗаявкаНаРемонт.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьИнформация(Команда)
	
	Элементы.ФормаВидимостьИнформация.Пометка = НЕ Элементы.ФормаВидимостьИнформация.Пометка;
	Элементы.СтраницыДанных.Видимость         =    Элементы.ФормаВидимостьИнформация.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВПланировщике(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Истина, Ложь, Ложь,, Ложь);
	
	ВыборВариантов = Новый СписокЗначений;
	Если ИнформацияПоАктивам <> Неопределено Тогда
		ВыборВариантов.Добавить(1, НСтр("ru = 'Выделенные в списке'"));
	КонецЕсли;
	ВыборВариантов.Добавить(2, НСтр("ru = 'Все автомобили'"));
	ВыборВариантов.Добавить(0, НСтр("ru = 'Отмена'"));
	ПоказатьВопрос(
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВопросОтображенияПланировщика"),
		НСтр("ru = 'Какие автомобили отобразить в планировщике?'"),
		ВыборВариантов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьФильтры(Команда)
	
	Элементы.ОтобразитьФильтры.Пометка = НЕ Элементы.ОтобразитьФильтры.Пометка;
	Элементы.СписокОтбор.Видимость     =    Элементы.ОтобразитьФильтры.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнформацию(Команда)
	
	Элементы.ОтобразитьИнформацию.Пометка = НЕ Элементы.ОтобразитьИнформацию.Пометка;
	Элементы.СтраницыДанных.Видимость     =    Элементы.ОтобразитьИнформацию.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДоговор(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Истина, Истина, Ложь);
	Если ИнформацияПоАктивам = Неопределено 
		ИЛИ НЕ (ЗначениеЗаполнено(ИнформацияПоАктивам.ПодразделениеКомпании)
			И ЗначениеЗаполнено(ИнформацияПоАктивам.ВидАренды)) Тогда
			Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ДоговорАренды.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаявку(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Истина, Истина, Ложь);
	Если ИнформацияПоАктивам = Неопределено
		ИЛИ НЕ (ЗначениеЗаполнено(ИнформацияПоАктивам.ПодразделениеКомпании)
			И ЗначениеЗаполнено(ИнформацияПоАктивам.ВидАренды)) Тогда
			Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ЗаявкаНаАренду.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиОтметитьИсправление(Команда)
	
	Если НЕ (Элементы.Список.ВыделенныеСтроки.Количество() И Элементы.Неисправности.ВыделенныеСтроки.Количество()) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите хотя бы одну неисправность.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ИсправлениеНеисправности"),
		НСтр("ru = 'Установить для повреждения признак ""Исправлено""?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиВвестиЗаявкуНаРемонт(Команда)
	
	Если НЕ (Элементы.Список.ВыделенныеСтроки.Количество() И Элементы.Неисправности.ВыделенныеСтроки.Количество()) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите хотя бы одну неисправность.'"));
		Возврат;
	КонецЕсли;
	
	МассивПричин = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Неисправности.ВыделенныеСтроки Цикл
		МассивПричин.Добавить(СтрШаблон(НСтр("ru = '%1%2: %3'"),
			ВыделеннаяСтрока.ТипПовреждения,
			?(ЗначениеЗаполнено(ВыделеннаяСтрока.НомерПовреждения), " [" + ВыделеннаяСтрока.НомерПовреждения + "]", ""),
			ВыделеннаяСтрока.Описание));
	КонецЦикла;
	
	ИнформацияПоАктивам = Новый Структура;
	ИнформацияПоАктивам.Вставить("Автомобиль",   Элементы.Неисправности.ТекущаяСтрока.Автомобиль);
	ИнформацияПоАктивам.Вставить("МассивПричин", МассивПричин);
	
	ОткрытьФорму(
		"Документ.ЗаявкаНаРемонт.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ИнформацияПоАктивам),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПодменюКнопок(Команда)
	
	РазвернутьПодменюКнопокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееВремя(Команда)
	
	Объект.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
	ДатаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникВводаДокументовАренды(Команда)
	
	ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Ложь, Ложь, Ложь,,, Истина);
	Если ИнформацияПоАктивам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорАренды = Элементы.Список.ВыделенныеСтроки[0].ДоговорАренды;
	
	Если ЗначениеЗаполнено(ДоговорАренды) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДоговорАренды);
		ПараметрыФормы.Вставить("Акт");
		ПараметрыФормы.Вставить("Счет");
		ПараметрыФормы.Вставить("СчетДепозита");
		
		ОткрытьФорму(
			"Обработка.ПомощникВводаДокументовАренды.Форма",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'На выбранный автомобиль не заключен договор аренды.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииКлиент

&НаКлиенте
Процедура ОбновитьТекущуюСтраницу()
	
	ТекущаяТаблица = СтрЗаменить(Элементы.СтраницыДанных.ТекущаяСтраница.Имя, "Страница", "");
	Если ТекущаяТаблица = "Комплектация" Тогда
		Элементы.ОпцииАвтомобиля.Обновить();
		Элементы.ОборудованиеАвтомобиля.Обновить();
	Иначе
		Элементы[ТекущаяТаблица].Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьИПолучитьВыделенныеАктивы(
	Поле,
	ОдноПодразделение,
	ОдинВидАренды,
	ОдинМОЛ,
	КонтрольСтрок = Истина,
	Сообщить = Истина,
	ОднаСтрока = Ложь)
	
	Если КонтрольСтрок И НЕ Элементы.Список.ВыделенныеСтроки.Количество() Тогда
		Если Сообщить Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите хотя бы один автомобиль.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОднаСтрока И Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		Если Сообщить Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Операция недоступна для нескольких активов. Выберите одну строку из списка.'")
			);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивАктивов       = Новый Массив;
	МассивПодразделений = Новый Массив;
	МассивВидовАренды   = Новый Массив;
	МассивМОЛ           = Новый Массив;
	Результат_Структура = Новый Структура;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		МассивАктивов.      Добавить(ВыделеннаяСтрока[Поле]);
		МассивПодразделений.Добавить(ВыделеннаяСтрока.ПодразделениеКомпании);
		МассивВидовАренды.  Добавить(ВыделеннаяСтрока.ВидАренды);
		МассивМОЛ.          Добавить(ВыделеннаяСтрока.МОЛ);
	КонецЦикла;
	Результат_Структура.Вставить(Поле, МассивАктивов);
	
	МассивПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПодразделений);
	Если ОдноПодразделение И МассивПодразделений.Количество() > 1 Тогда
		Если Сообщить Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Операция недоступна для активов из разных подразделений.
			| Выберите строки с одинаковым подразделением.'"));
		КонецЕсли;
		МассивПодразделений.Очистить();
		МассивПодразделений.Добавить(Неопределено);
	КонецЕсли;
	Результат_Структура.Вставить("ПодразделениеКомпании", МассивПодразделений[0]);
	
	МассивВидовАренды = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВидовАренды);
	Если ОдинВидАренды И МассивВидовАренды.Количество() > 1 Тогда
		Если Сообщить Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Операция недоступна для активов с разными видами аренды.
			| Выберите строки с одинаковым видом аренды.'"));
		КонецЕсли;
		МассивВидовАренды.Очистить();
		МассивВидовАренды.Добавить(Неопределено);
	КонецЕсли;
	Результат_Структура.Вставить("ВидАренды", МассивВидовАренды[0]);
	
	МассивМОЛ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивМОЛ);
	Если ОдинВидАренды И МассивМОЛ.Количество() > 1 Тогда
		Если Сообщить Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Операция недоступна для активов с разными МОЛ.
			| Выберите строки с одинаковым МОЛ.'"));
		КонецЕсли;
		МассивМОЛ.Очистить();
		МассивМОЛ.Добавить(Неопределено);
	КонецЕсли;
	Результат_Структура.Вставить("МОЛ", МассивМОЛ[0]);
	
	Возврат Результат_Структура;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьПодменюКнопокНаКлиенте()
	
	Если ИспользоватьПодменюКнопок Тогда
		Элементы.СписокРазвернутьПодменюКнопок.Заголовок     = НСтр("ru = 'Свернуть подменю кнопок'");
		Элементы.СписокГруппаЭксплуатация.Вид                = ВидГруппыФормы.ГруппаКнопок;
		Элементы.СписокГруппаДокументы.Вид                   = ВидГруппыФормы.ГруппаКнопок;
		Элементы.СписокГруппаЭксплуатацияКонтекстноеМеню.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.СписокГруппаДокументыКонтекстноеМеню.Вид    = ВидГруппыФормы.ГруппаКнопок;
		ИспользоватьПодменюКнопок                            = Ложь;
	Иначе
		Элементы.СписокРазвернутьПодменюКнопок.Заголовок          = НСтр("ru = 'Развернуть подменю кнопок'");
		Элементы.СписокГруппаЭксплуатация.Вид                     = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаЭксплуатация.Картинка                = БиблиотекаКартинок.АвтомобильВыбор;
		Элементы.СписокГруппаДокументы.Вид                        = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаДокументы.Картинка                   = БиблиотекаКартинок.ЗаполнениеДокументовПодменю;
		Элементы.СписокГруппаЭксплуатацияКонтекстноеМеню.Вид      = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаЭксплуатацияКонтекстноеМеню.Картинка = БиблиотекаКартинок.АвтомобильВыбор;
		Элементы.СписокГруппаДокументыКонтекстноеМеню.Вид         = ВидГруппыФормы.Подменю;
		Элементы.СписокГруппаДокументыКонтекстноеМеню.Картинка    = БиблиотекаКартинок.ЗаполнениеДокументовПодменю;
		ИспользоватьПодменюКнопок                                 = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСервер

&НаСервере
Процедура УстановитьПериодВОтборы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,         "Период", Объект.Период);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ХранениеШин,    "Период", Объект.Период);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Страхование,    "Период", Объект.Период);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонт,         "Период", Объект.Период);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДоговорыАренды, "Период", Объект.Период);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Тарификация,    "Период", Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура НеисправностиОтметитьИсправлениеНаСервере()
	
	МассивРегистраторов  = Новый Массив;
	МассивНеисправностей = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Неисправности.ВыделенныеСтроки Цикл
		
		Если МассивРегистраторов.Найти(ВыделеннаяСтрока.Регистратор) = Неопределено Тогда
			МассивРегистраторов.Добавить(ВыделеннаяСтрока.Регистратор);
		КонецЕсли;
		
		Если МассивНеисправностей.Найти(ВыделеннаяСтрока.ИдентификаторПовреждения) = Неопределено Тогда
			МассивНеисправностей.Добавить(ВыделеннаяСтрока.ИдентификаторПовреждения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Регистратор Из МассивРегистраторов Цикл
		
		НаборЗаписей = РегистрыСведений.ПоврежденияАвтомобилей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
			Если НЕ МассивНеисправностей.Найти(СтрокаНабораЗаписей.ИдентификаторПовреждения) = Неопределено Тогда
				СтрокаНабораЗаписей.ПоврежденияУстранены = Истина;
				СтрокаНабораЗаписей.ДатаУстранения       = ТекущаяДатаСеанса();
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Не удалось записать исправление повреждения по причине: %1'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				)
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВопроса) И ДополнительныеПараметры = "ВопросОтображенияПланировщика" Тогда
		
		ПараметрыФормы = Новый Структура;
		Если РезультатВопроса = 1 Тогда
			ИнформацияПоАктивам = ПроверитьИПолучитьВыделенныеАктивы("Автомобиль", Ложь, Ложь, Ложь, Ложь, Ложь);
			ПараметрыФормы.Вставить("МассивАвтомобилей_Показать", ИнформацияПоАктивам.Автомобиль);
		КонецЕсли;
		ОткрытьФорму("Обработка.ПланировщикАренды.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да И ДополнительныеПараметры = "ИсправлениеНеисправности" Тогда
		
		НеисправностиОтметитьИсправлениеНаСервере();
		Элементы.Неисправности.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
