///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Персональные настройки"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	// Получим разрешение на редактирование прав доступа.
	РазрешитьИзменениеПравДоступа    = ПравоДоступа("Администрирование", Метаданные);
	ТолькоПросмотр                   = НЕ РазрешитьИзменениеПравДоступа;
	
	// Профили можно редактировать только администратору, получим сразу значение прав.
	ТекущийПользовательАдминистратор = ПравоДоступа("Администрирование", Метаданные) ИЛИ Пользователи.РолиДоступны("ПолныеПрава");
	
	// Получаем пользователя из параметров формы
	ПользовательПрофиль = Параметры.ОбъектНастройкиПрав;
	
	Если НЕ ЗначениеЗаполнено(ПользовательПрофиль) 
		ИЛИ ПользовательПрофиль.ЭтоГруппа Тогда 
		ПользовательПрофиль = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Заполняем список выбора объектов для расширения прав доступа
	СписокВыбораОбъекта = Новый СписокЗначений;
	Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
		СписокВыбораОбъекта.Добавить(ЭлементМетаданных.Имя, ЭлементМетаданных.Синоним);
	КонецЦикла;
	Для Каждого ЭлементМетаданных Из Метаданные.Справочники Цикл
		СписокВыбораОбъекта.Добавить(ЭлементМетаданных.Имя, ЭлементМетаданных.Синоним);
	КонецЦикла;
	
	ИспользованиеПерсональногоДоступа = Ложь;

	Если ЗначениеЗаполнено(ПользовательПрофиль) Тогда
		
		Если ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ТекПользователь      = ПользовательПрофиль;
			ТекГруппаПравИНастроек = ГруппаНастройкиПользователя(ТекПользователь);
			ТекущаяГруппаПравИНастроек = ТекГруппаПравИНастроек;
			ВыбранПользователь   = ?(ИспользованиеПерсональногоДоступа, 0, 1);
			ИспользованиеПерсональногоДоступа = ТекПользователь.ИспользованиеПерсональногоДоступа;
			
		ИначеЕсли ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.ГруппыПравИНастроек") Тогда
			
			ВыбранПользователь   = 1;
			ТекГруппаПравИНастроек = ПользовательПрофиль;
			ТекущаяГруппаПравИНастроек = ПользовательПрофиль;
			
		КонецЕсли;
	КонецЕсли;
	
	РежимОтображенияПравИНастроек = "ОтображатьПраваИНастройки";
	
	// Заполняем дерево прав и настроек, дерево профилей и ролей, таблицу расширения прав доступа.
	ОбновитьНаСервере();
	
	// +СофтФон
	сфпМассивАвтоматическихДействий = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ЭлементМассива Из сфпМассивАвтоматическихДействий Цикл
		сфпСписокАвтоматическихДействий.Добавить(ЭлементМассива.Наименование);
	КонецЦикла;	
	сфпПривязкаНомера = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер");
	// -СофтФон
	
	АвторИзмененияПрав  = Пользователи.ТекущийПользователь();
	ГруппаПравАвтора = ГруппаНастройкиПользователя(АвторИзмененияПрав);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Пользователи");
	
	УстановитьПараметрыЭлементаВыбораПользователяГруппы();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(
		Новый ОписаниеОповещения("Подключаемый_ПередЗакрытиемПродолжение", ЭтотОбъект), Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Пользователь профиль" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ПользовательПрофильПриИзмененииНаСервере()
	
	Если ГрупповаяНастройка Тогда
		Для каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл 
			УдалитьКолонки(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"));
			УстановитьУсловноеОформлениеГрупповыхНастроек(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"), Истина);
		КонецЦикла;
		ГрупповаяНастройкаПользователиГруппы.Очистить();
		
		// Общая
		УдалитьКолонки("ВсеПользователи");
		УстановитьУсловноеОформлениеГрупповыхНастроек("ВсеПользователи", Истина);
		
		ГрупповаяНастройкаНаСервере();
		Возврат;
	КонецЕсли;
	
	// Заполняем дерево прав и настроек, дерево профилей и ролей, таблицу расширения прав доступа.
	ОбновитьНаСервере();
	
КонецПроцедуры // ПользовательПрофильПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Пользователь профиль".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПользовательПрофильПриИзменении(Элемент = Неопределено)
	
	Если ВыбранПользователь = 0 Тогда
		ПользовательПрофиль = ТекПользователь;
	Иначе
		ПользовательПрофиль  = ТекГруппаПравИНастроек;
		ТекущаяГруппаПравИНастроек = ТекГруппаПравИНастроек;
	КонецЕсли;
	
	ПользовательПрофильПриИзмененииНаСервере();
	
	Элементы.ДеревоПравИНастроек.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ПользовательПрофиль);
	
КонецПроцедуры // ПользовательПрофильПриИзменении()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Тек пользователь".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ТекПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если форма была изменена, зададим вопрос пользователю
	Если Модифицированность Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ТекПользовательНачалоВыбораПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры // ТекПользовательНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Тек пользователь".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТекПользовательПриИзменении(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ТекПользователь = ВыбранноеЗначение;
	КонецЕсли;
	
	ПользовательПрофильПриИзменении();
	
КонецПроцедуры // ТекПользовательПриИзменении()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Тек группа".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ТекГруппаПравИНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если форма была изменена, зададим вопрос пользователю
	Если Модифицированность Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ТекГруппаПравИНастроекНачалоВыбораПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры // ТекГруппаПравИНастроекНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Тек группа".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТекГруппаПравИНастроекПриИзменении(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекГруппаПравИНастроек = ВыбранноеЗначение;
	КонецЕсли;
	
	ПользовательПрофильПриИзменении();
	
КонецПроцедуры // ТекПользовательГруппаДоступаПриИзменении()

// Обработчик события возникающего во время начала ожидания ввода текста (в процессе набора текста сделана пауза)
// реквизита "Значение поиска".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  Текст                - Строка         - Строка текста, введенная в поле ввода.
//  ДанныеВыбора         - СписокЗначений - Содержит список значений, который будет использован при стандартной
//                                          обработке события.
//  ВходныеПараметры     - Структура; Неопределено - Содержит параметры поиска, которые будут переданы в метод ПолучитьДанныеВыбора.
//  Ожидание             - Число          - Интервал в секундах после ввода текста, через который произошло событие.
//  СтандартнаяОбработка - Булево         - Данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ЗначениеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ВходныеПараметры, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 2 Тогда
		ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ВходныеПараметры, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // ЗначениеПоискаАвтоПодбор()

// Обработчик события возникающего после осуществления выбора, но до помещения выбранного значения в элемент управления
// реквизита "Значение поиска".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ВыбранноеЗначение    - СписокЗначений - Выбранное значение, которое будет установлено как значения поля ввода или
//                                          массив выбранных значений в случае, если в подчиненной форме свойство
//                                          МножественныйВыбор имеет значение Истина..
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ЗначениеПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтраница     = Элементы.СтраницыФормы.ТекущаяСтраница;
	ЭтоСтраницаНастроек = ТекущаяСтраница = Элементы.ПраваИНастройки;
	ИмяЭлемента         = "ДеревоПравИНастроек";
	ИмяПоляДерева       = "Настройка";
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		
		// Пользователь сделал выбор, получаем выбранное значение.
		Индекс         = ВыбранноеЗначение;
		КодВыбранногоЗначенияПоиска = ВыбранноеЗначение;
		
		// Устанавливаем по полученному индексу текущую строку дерева
		Элементы[ИмяЭлемента].ТекущаяСтрока = Индекс + СмещениеТекущейСтрокиДереваНастроек - СтрокВДереве;
		
		ВыбранноеЗначение = Элементы[ИмяЭлемента].ТекущиеДанные[ИмяПоляДерева];
		
	КонецЕсли;
	
КонецПроцедуры // ЗначениеПоискаОбработкаВыбора()

// Обработчик события возникающего в момент при формировании значения по отредактированному тексту реквизита "Значение поиска".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  Текст                - Строка         - Строка текста, введенная в поле ввода.
//  ДанныеВыбора         - СписокЗначений - Параметр заполняется списком значений для последующего выбора одного из них
//                                          и размещения его в поле ввода..
//  ВходныеПараметры     - Структура; Неопределено - Содержит параметры поиска, которые будут переданы в метод ПолучитьДанныеВыбора.
//  СтандартнаяОбработка - Булево         - Данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ВходныеПараметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтраница        = Элементы.СтраницыФормы.ТекущаяСтраница;
	ЭтоСтраницаНастроек    = ТекущаяСтраница = Элементы.ПраваИНастройки;
	ТекДерево              = ДеревоПравИНастроек;
	ИмяПоляДерева          = "Настройка";
	
	Если НЕ ЗначениеЗаполнено(Текст) ИЛИ НЕ ЭтоСтраницаНастроек Тогда
		СтандартнаяОбработка = Истина;
		КодВыбранногоЗначенияПоиска = 0;
		Возврат;
	КонецЕсли;
	
	МассивНайденныхСтрок = Новый Массив;
	
	// Формируем параметры поиска и ищем по настройке.
	СтруктураОтбора      = Новый Структура(ИмяПоляДерева, Текст);
	НайтиСтрокиВДеревеНаКлиенте(ТекДерево, СтруктураОтбора, МассивНайденныхСтрок, Ложь, Истина);
	
	// Добавляем результаты поиска по коду.
	СтруктураОтбора      = Новый Структура("Код", Текст);
	НайтиСтрокиВДеревеНаКлиенте(ТекДерево, СтруктураОтбора, МассивНайденныхСтрок, Ложь, Истина);
	
	// Заполняем промежуточные списки групп и элементов для сортировки
	СписокГруппНастроек     = Новый СписокЗначений();
	СписокЭлементовНастроек = Новый СписокЗначений();
	
	Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
		ДобавляемоеПредставление =
			Строка(НайденнаяСтрока[ИмяПоляДерева]) + " [" + НайденнаяСтрока.Код + "]";
		Если НайденнаяСтрока.ЭтоГруппа Тогда
			СписокГруппНастроек.Добавить(НайденнаяСтрока.ИндексСтроки, ДобавляемоеПредставление);
		Иначе
			СписокЭлементовНастроек.Добавить(НайденнаяСтрока.ИндексСтроки, ДобавляемоеПредставление);
		КонецЕсли;
	КонецЦикла;
	
	СписокГруппНастроек.СортироватьПоПредставлению();
	СписокЭлементовНастроек.СортироватьПоПредставлению();
	
	// Заполняем полученными данными список значений.
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементНастройка Из СписокЭлементовНастроек Цикл
		ДанныеВыбора.Добавить(ЭлементНастройка.Значение, ЭлементНастройка.Представление);
	КонецЦикла;
	
	Для Каждого ГруппаНастроек Из СписокГруппНастроек Цикл
		ДанныеВыбора.Добавить(ГруппаНастроек.Значение, ВРег(ГруппаНастроек.Представление));
	КонецЦикла;
	
КонецПроцедуры // ЗначениеПоискаОкончаниеВводаТекста()

// Обработчик события возникающего Возникает, когда HTML-документ построен и готов к использованию.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОписаниеНастройкиДокументСформирован(Элемент)
	
	Элементы.ОписаниеНастройки.Документ.body.scroll = "auto";
	
КонецПроцедуры // ОписаниеНастройкиДокументСформирован()

// Обработчик события возникающего при переключении с одной страницы на другую.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ТекущаяСтраница - ГруппаФормы - Новая активная страница.
//
&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтоСтраницаНастроек = ТекущаяСтраница = Элементы.ПраваИНастройки;
	Элементы.ЗначениеПоиска.Доступность = ЭтоСтраницаНастроек;
	ЗначениеПоиска = "";
	КодВыбранногоЗначенияПоиска = 0;
	
КонецПроцедуры // СтраницыФормыПриСменеСтраницы()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Выбран пользователь".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВыбранПользовательПриИзменении(Элемент)
	
	// Если форма была изменена, зададим вопрос пользователю
	Если Модифицированность Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ВыборГруппыИлиПользователяПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		Подключаемый_ВыборГруппыИлиПользователяПродолжение(КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры // ВыбранПользовательПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Режим отображения прав и настроек".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура РежимОтображенияПравИНастроекПриИзменении(Элемент)
	
	ЗначениеПоиска = "";
	КодВыбранногоЗначенияПоиска = 0;
	
	ЗаполнитьДерево();
	
КонецПроцедуры // РежимОтображенияПравИНастроекПриИзменении()

// Обработчик события возникающего на клиенте при очистке данных реквизита "Значение поиска очистка".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗначениеПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	КодВыбранногоЗначенияПоиска = 0;
	
КонецПроцедуры // ЗначениеПоискаОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПравИНастроек

&НаКлиенте
Процедура ДеревоПравИНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "ДеревоПравИНастроекРасширениеДанных") > 0 Тогда
		
		ИдПользователя = СтрЗаменить(Поле.Имя, "ДеревоПравИНастроекРасширениеДанных", "");
		Если ИдПользователя = "" Тогда
			ИдПользователя = СтрЗаменить(ПользовательПрофиль.УникальныйИдентификатор(), "-", "_");
		КонецЕсли;
		
		// Для ячейки расширения данных открываем форму настроек.
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЕстьРасширениеДанных
			И НЕ ((ТекущиеДанные.НомерКартинки = 0 
				И (НЕ РазрешитьИзменениеПравДоступа ИЛИ (ВыбранПользователь = 0 И НЕ ИспользованиеПерсональногоДоступа)))
			ИЛИ (ТекущиеДанные.НомерКартинки = 2 
				И НЕ (РазрешитьИзменениеПравДоступа ИЛИ РазрешитьИзменениеЛичныхНастроек))) Тогда
			
			ЭтоДоступноеПраво     = ТекущиеДанные.НомерКартинки = 0 И (РазрешитьИзменениеПравДоступа ИЛИ (ВыбранПользователь = 0 И ИспользованиеПерсональногоДоступа));
			ЭтоДоступнаяНастройка = ТекущиеДанные.НомерКартинки = 2 И (РазрешитьИзменениеПравДоступа ИЛИ РазрешитьИзменениеЛичныхНастроек);
			
			Если ЭтоДоступноеПраво ИЛИ ЭтоДоступнаяНастройка Тогда
				
				РасширенияТекущегоПрава = Новый Массив;
				Для Каждого СтрокаРасширенияПравДоступа Из ТаблицаРасширенияПравДоступа.НайтиСтроки(Новый Структура("Настройка,ИдПользователя", ТекущиеДанные.Настройка, ИдПользователя)) Цикл
					
					ТекРасширениеПравДоступа = Новый Структура("Значение,Изменено,ИндексСтроки,Объект,ЗначениеБулево,СинонимОбъекта,ОбъектПредыдущий,ЗначениеПоУмолчанию,Настройка,ИмяПредопределенныхДанных");
					
					ЗаполнитьЗначенияСвойств(ТекРасширениеПравДоступа, СтрокаРасширенияПравДоступа);
					РасширенияТекущегоПрава.Добавить(ТекРасширениеПравДоступа);
				КонецЦикла;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("РасширенияТекущегоПрава",                 РасширенияТекущегоПрава);
				ПараметрыФормы.Вставить("ПользовательПрофиль",                     ПользовательПрофиль);
				ПараметрыФормы.Вставить("ПравоНастройкаИмяПредопределенныхДанных", ТекущиеДанные.ИмяПредопределенныхДанных);
				ПараметрыФормы.Вставить("ПравоДляСправочников", ЭтоПравоДляСправочников(ТекущиеДанные.ИмяПредопределенныхДанных));
				
				ОткрытьФорму("Обработка.ПерсональныеНастройки.Форма.РасширениеПравДоступа", ПараметрыФормы, ЭтотОбъект, , , , Новый ОписаниеОповещения("РасширениеПравДоступаПриИзменении", ЭтотОбъект, Новый Структура("ТекущаяНастройка,ИдПользователя", ТекущиеДанные, ИдПользователя)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// +Софтфон
	
КонецПроцедуры

// Обработка после закрытия формы РасширениеПравДоступа
&НаКлиенте
Процедура РасширениеПравДоступаПриИзменении(ВходныеПараметры, Дополнительно) Экспорт
	
	ИзмененныеРасширенияПравДоступа = Неопределено;
	ПравоНастройкаНаименование      = Неопределено;
	
	Если ЗначениеЗаполнено(ВходныеПараметры)
		И ВходныеПараметры.Свойство("ИзмененныеРасширенияПравДоступа", ИзмененныеРасширенияПравДоступа)
		И ИзмененныеРасширенияПравДоступа <> Неопределено
		И ВходныеПараметры.Свойство("ПравоНастройкаНаименование", ПравоНастройкаНаименование)
		И ПравоНастройкаНаименование <> Неопределено Тогда
		
		СтарыеРасширенияТекущегоПрава = ТаблицаРасширенияПравДоступа.НайтиСтроки(Новый Структура("Настройка,ИдПользователя", ПравоНастройкаНаименование, Дополнительно.ИдПользователя));
		Для Каждого ТекСтрокаСтарая Из СтарыеРасширенияТекущегоПрава Цикл
			НоваяСтрока =  ИзмененныеРасширенияПравДоступа.НайтиСтроки(Новый Структура("Объект", ТекСтрокаСтарая.Объект));
			Если НЕ НоваяСтрока.Количество() = 0 И НЕ ЗначениеЗаполнено(НоваяСтрока[0].Значение) Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдаляемыхРасширенийПравДоступа.Добавить(), ТекСтрокаСтарая);
			КонецЕсли;
			ТаблицаРасширенияПравДоступа.Удалить(ТекСтрокаСтарая);
		КонецЦикла;
		
		ПереченьОбъектов = "";
		
		Для Каждого ТекСтрокаНовая Из ИзмененныеРасширенияПравДоступа Цикл
			Если НЕ ТекСтрокаНовая.ЗначениеБулево = 2 Тогда
				НоваяСтрока = ТаблицаРасширенияПравДоступа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаНовая);
				НоваяСтрока.ИдПользователя = Дополнительно.ИдПользователя;
				ПереченьОбъектов = ПереченьОбъектов + ?(ПереченьОбъектов = "", "", ", ") + ТекСтрокаНовая.СинонимОбъекта;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
		
		Если ГрупповаяНастройка Тогда
			ТекущиеДанные["РасширениеДанных" + Дополнительно.ИдПользователя] = ВходныеПараметры.ЗначениеЯчейкиДереваНастроек;
		Иначе
			ТекущиеДанные["РасширениеДанных"] = ВходныеПараметры.ЗначениеЯчейкиДереваНастроек;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // РасширениеПравДоступаПриИзменении()

// Обработка после закрытия формы РасширениеПравДоступа
&НаСервере
Процедура РасширениеПравДоступаПриИзмененииНаСервере(ВходныеПараметры, Дополнительно)
	
	ИзмененныеРасширенияПравДоступа = Неопределено;
	ПравоНастройкаНаименование      = Неопределено;
	
	Если ЗначениеЗаполнено(ВходныеПараметры)
		И ВходныеПараметры.Свойство("ИзмененныеРасширенияПравДоступа", ИзмененныеРасширенияПравДоступа)
		И ИзмененныеРасширенияПравДоступа <> Неопределено
		И ВходныеПараметры.Свойство("ПравоНастройкаНаименование", ПравоНастройкаНаименование)
		И ПравоНастройкаНаименование <> Неопределено Тогда
		
		СтарыеРасширенияТекущегоПрава = ТаблицаРасширенияПравДоступа.НайтиСтроки(Новый Структура("Настройка,ИдПользователя", ПравоНастройкаНаименование, Дополнительно.ИдПользователя));
		Для Каждого ТекСтрокаСтарая Из СтарыеРасширенияТекущегоПрава Цикл
			НоваяСтрока = ИзмененныеРасширенияПравДоступа.НайтиСтроки(Новый Структура("Объект", ТекСтрокаСтарая.Объект));
			Если НоваяСтрока.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдаляемыхРасширенийПравДоступа.Добавить(), ТекСтрокаСтарая);
			КонецЕсли;
			ТаблицаРасширенияПравДоступа.Удалить(ТекСтрокаСтарая);
		КонецЦикла;
		
		ПереченьОбъектов = "";
		
		Для Каждого ТекСтрокаНовая Из ИзмененныеРасширенияПравДоступа Цикл
			Если НЕ ТекСтрокаНовая.ЗначениеБулево = 2 Тогда
				НоваяСтрока = ТаблицаРасширенияПравДоступа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаНовая);
				НоваяСтрока.ИдПользователя = Дополнительно.ИдПользователя;
				ПереченьОбъектов = ПереченьОбъектов + ?(ПереченьОбъектов = "", "", ", ") + ТекСтрокаНовая.СинонимОбъекта;
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // РасширениеПравДоступаПриИзменении()

&НаКлиенте
Процедура ДеревоПравИНастроекПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеНастройки = "<html><head></head><body>" + ТекущиеДанные.Описание + "</body></html>";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравИНастроекЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.Изменено = Истина;
		Модифицированность     = Истина;
		
		ТекущиеДанные.СтроковоеПредставлениеЗначения = СокрЛП(ТекущиеДанные.Значение);
		
	КонецЕсли;
	
	// АПК:1036-выкл
	// +Софтфон
	Если ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпПривязатьВнутреннийНомер'")Тогда
		сфпПривязкаНомера = ТекущиеДанные.Значение;
		сфпПереподключитьСофтФон = Истина;
		ЭлементыДерева = ДеревоПравИНастроек.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.ИмяПредопределенныхДанных = НСтр("ru = 'СофтФон'") Тогда
				ЭлементыДереваСофтфон = ЭлементДерева.ПолучитьЭлементы();
				Для Каждого ЭлементДереваСофтфон Из ЭлементыДереваСофтфон Цикл
					Если ЭлементДереваСофтфон.ИмяПредопределенныхДанных = НСтр("ru = 'сфпАвторизацияНаСерверСофтфона'") Тогда
						ЭлементДереваСофтфон.СкрыватьКолонку = НЕ сфпПривязкаНомера;
						ЭлементыДереваАвторизация = ЭлементДереваСофтфон.ПолучитьЭлементы();
						Для Каждого ЭлементДереваАвторизация Из ЭлементыДереваАвторизация Цикл
							ЭлементДереваАвторизация.СкрыватьКолонку = НЕ сфпПривязкаНомера;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпИспользоватьСофтФон'") Тогда // АльфаАвто
		сфпИспользоватьСофтФон = ТекущиеДанные.Значение;
	// Конец АльфаАвто
	КонецЕсли;
	// -Софтфон
	// АПК:1036-вкл
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравИНастроекЗначениеБулевоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Значение = ТекущиеДанные.ЗначениеБулево;
		ДеревоПравИНастроекЗначениеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПравИНастроекЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если СтрНайти(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ДеревоПравИНастроекЗначениеБулево") = 0 Тогда
			ПредставлениеПользователя = СтрЗаменить(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ДеревоПравИНастроекЗначение", "");
		Иначе
			ПредставлениеПользователя = СтрЗаменить(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ДеревоПравИНастроекЗначениеБулево", "");
		КонецЕсли;
		
		Если СтрНайти(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ВсеПользователи") Тогда
			СтандартнаяОбработка = Ложь;
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
				"Подключаемый_ГрупповаяУстановкаПрава",
				ЭтотОбъект,
				Новый Структура("ПредставлениеПользователя,ВыбранноеЗначение", ПредставлениеПользователя, ТекущиеДанные.ЗначениеВсеПользователи)
			);
			ТекстВопроса = НСтр("ru = 'Установить право/настройку для всех выбранных'") + " " + ?(ВыбранПользователь = 0, "пользователей", "групп") + " в <" + ТекущиеДанные.ЗначениеВсеПользователи + ">?";
			ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные["Изменено" + ПредставлениеПользователя] = Истина;
		Модифицированность = Истина;
		
		ТекущиеДанные["СтроковоеПредставлениеЗначения" + ПредставлениеПользователя] = СокрЛП(ТекущиеДанные["Значение" + ПредставлениеПользователя]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПравИНастроекЗначениеБулевоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
		
	Если ТекущиеДанные <> Неопределено Тогда
		ПредставлениеПользователя = СтрЗаменить(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ДеревоПравИНастроекЗначениеБулево", "");
		Если СтрНайти(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ВсеПользователи") > 0 И НЕ ТекущиеДанные["ЗначениеБулево" + ПредставлениеПользователя] = 2 Тогда
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ГрупповаяУстановкаПрава", ЭтотОбъект,Новый Структура("ПредставлениеПользователя", ПредставлениеПользователя));
			ТекстВопроса = НСтр("ru = 'Установить право/настройку для всех выбранных'") + " " + ?(ВыбранПользователь = 0, "пользователей", "групп") + " в <" + ?(ТекущиеДанные["ЗначениеБулево" + ПредставлениеПользователя] = 0, "Ложь", "Истина") + ">?";
			ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ТекущиеДанные["Значение" + ПредставлениеПользователя] = ТекущиеДанные["ЗначениеБулево"+ ПредставлениеПользователя];
			Подключаемый_ДеревоПравИНастроекЗначениеПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПравИНастроекЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПредставлениеПользователя = СтрЗаменить(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ДеревоПравИНастроекЗначение", "");
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ГрупповаяУстановкаПрава", ЭтотОбъект, Новый Структура("ПредставлениеПользователя,ВыбранноеЗначение", ПредставлениеПользователя, ВыбранноеЗначение));
			ТекстВопроса = НСтр("ru = 'Установить право/настройку для всех выбранных'") + " " + ?(ВыбранПользователь = 0, "пользователей", "групп") + " в <" + ВыбранноеЗначение + ">?";
			ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПравИНастроекЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	ПредставлениеПользователя = СтрЗаменить(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ДеревоПравИНастроекЗначение", "");
	Если СтрНайти(Элементы.ДеревоПравИНастроек.ТекущийЭлемент.Имя, "ВсеПользователи") > 0 Тогда
		ТекущиеДанные.ПоследнееЗначение = ТекущиеДанные["Значение" + ПредставлениеПользователя];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравИНастроекЗначениеПоУмолчаниюБулевоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЗначениеПоУмолчаниюБулево = ТекущиеДанные.ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравИНастроекПередНачаломИзменения(Элемент, Отказ)
	
	// АПК:1036-выкл
	// +СофтФон
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	Если ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпИспользоватьСофтФон'") Тогда
		Если ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() Тогда
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;	
	КонецЕсли;
	Если ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпТекущийВнутреннийНомер'") Тогда
		Если ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() И Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") И Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекущийНомер", Элемент.ТекущиеДанные.Значение);
			// АльфаАвто
			ПараметрыФормы.Вставить("сфпИспользоватьСофтФон", сфпИспользоватьСофтФон);
			// Конец АльфаАвто
			ОткрытьФорму("ОбщаяФорма.сфпСписокВнутреннихНомеров", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпДействиеПриВходящемЗвонке'") Тогда
		ВыбранныйЭлемент		= сфпСписокАвтоматическихДействий.НайтиПоЗначению(Элемент.ТекущиеДанные.Значение);
		ДополнительныеПараметры	= Новый Структура;
		ОповещениеВыбора		= Новый ОписаниеОповещения("сфпОбработкаВыбораАктивногоДействия", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВыборИзСписка(ОповещениеВыбора, сфпСписокАвтоматическихДействий, Элементы.ДеревоПравИНастроекЗначение, ВыбранныйЭлемент);
	ИначеЕсли ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпДействиеПриИсходящемЗвонке'") Тогда
		ВыбранныйЭлемент		= сфпСписокАвтоматическихДействий.НайтиПоЗначению(Элемент.ТекущиеДанные.Значение);
		ДополнительныеПараметры	= Новый Структура;
		ОповещениеВыбора		= Новый ОписаниеОповещения("сфпОбработкаВыбораАктивногоДействия", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВыборИзСписка(ОповещениеВыбора, сфпСписокАвтоматическихДействий, Элементы.ДеревоПравИНастроекЗначение, ВыбранныйЭлемент);
	ИначеЕсли ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпЛогинНаСерверСофтФон'") Тогда
		Если НЕ сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина;
	ИначеЕсли ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'сфпПарольНаСерверСофтФон'") Тогда
		Если НЕ сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина;
	КонецЕсли;
	// -СофтФон
	// АПК:1036-вкл 
	
	Если ТекущиеДанные.ИмяПредопределенныхДанных = НСтр("ru = 'ЗапрашиватьПодтверждениеПриЗавершенииПрограммы'") Тогда
		НастроитьВыводПодтвержденияПриВыходе(Не ТекущиеДанные.Значение);
		Параметрыприложения["СтандартныеПодсистемы.ПараметрыКлиента"].ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = Не ТекущиеДанные.Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "Подобрать пользователей/группы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодобратьПользователейГруппы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыРасширеннойФормыПодбора", ВыбранныеПользователиГруппы());
	ПараметрыФормы.Вставить("ВыборПользователей", (ВыбранПользователь = 0));
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ОбновитьСостав", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПерсональныеНастройки.Форма.СоставГрупповогоРедактирования", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПодобратьПользователейГруппы()

&НаСервере
Функция ВыбранныеПользователиГруппы()
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников группы доступа'");
	ПараметрыРасширеннойФормыПодбора = Новый Структура("ЗаголовокФормыПодбора, ВыбранныеПользователи",
	                                                   ЗаголовокФормыПодбора, ГрупповаяНастройкаПользователиГруппы.Выгрузить());
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции // ВыбранныеПользователиГруппы()

// Обработчик события возникающего на клиенте при выполнении команды "Записать и закрыть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда = Неопределено)
	
	Результат = Записать();
	
	Если Результат Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьИЗакрыть()

// Обработчик события возникающего на клиенте при выполнении команды "Записать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Функция Записать(Команда = Неопределено)
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ПользовательПрофиль) ИЛИ ГрупповаяНастройка Тогда
		
		Если Модифицированность Тогда
			Результат = СохранитьНастройки();
			Модифицированность = НЕ Результат;
		КонецЕсли;
		
	Иначе
		Результат = Ложь;
		ТекстОшибки = НСтр("ru = 'Не заполнен реквизит «%1», запись отменена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				ТекстОшибки,
				?(ВыбранПользователь = 0, "Пользователь", НСтр("ru = 'Группа прав и настроек'"))
			)
		);
	КонецЕсли;
	
	// АПК:1036-выкл
	// +СофтФон
	Если сфпПереподключитьСофтФон Тогда
		Если НЕ сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
			сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
		Иначе	
			Оповестить("СофтФон_ЗакрытьВнутреннююПанель");
			сфпСофтФонПроКлиент.сфпПодключитьСофтФон();
		КонецЕсли;	
	КонецЕсли;	
	// -СофтФон
	// АПК:1036-вкл
	
	Возврат Результат;
КонецФункции // Записать()

// Обработчик события возникающего на клиенте при выполнении команды "Обновить".
// Повторное чтение из регистра настроек пользователя.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ОбновитьПродолжение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Вернуться к сохраненным значениям прав и настроек?'");
	ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // Обновить()

// Обработчик события возникающего на клиенте при выполнении команды "Скопировать профиль пользователя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
// Копирование набора прав для между пользователями
&НаКлиенте
Процедура СкопироватьПрофильПользователя(Команда)
	
	// Инициализируем переменные пользователей.
	ПользовательПриемник = Неопределено;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработкаРезультатаЗакрытия","СкопироватьПрофильПользователяВыборПолучателя");
	ДополнительныеПараметры.Вставить("Результат", ТекПользователь);
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработкаРезультатаЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
	
	// Запрашиваем и проверяем заполнение пользователя-получателя.
	ПоказатьВводЗначения(ОбработкаРезультатаЗакрытия, ПользовательПриемник, НСтр("ru = 'Выберите пользователя, которому будет скопирован профиль настроек исходного пользователя «" + СокрЛП(ТекПользователь) + "»'"), Тип("СправочникСсылка.Пользователи"));
	
КонецПроцедуры // СкопироватьПрофильПользователя()

// Обработчик события возникающего на клиенте при выполнении команды "Свернуть дерево".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СвернутьДерево(Команда)
	
	РазвернутьСвернутьДеревоРекурсивно(ЭтотОбъект["ДеревоПравИНастроек"].ПолучитьЭлементы(), Истина, "ДеревоПравИНастроек");
	
КонецПроцедуры // СвернутьДерево()

// Обработчик события возникающего на клиенте при выполнении команды "Развернуть дерево".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура РазвернутьДерево(Команда)
	
	РазвернутьСвернутьДеревоРекурсивно(ЭтотОбъект["ДеревоПравИНастроек"].ПолучитьЭлементы(), Ложь, "ДеревоПравИНастроек");
	
КонецПроцедуры // РазвернутьДерево()

// Обработчик события возникающего при выполнении команды "Сохранить настройки в файл" в контексте сервера.
//
// Параметры:
//  ПолноеИмяФайла  - Строка  - Полное имя файла, полученное из диалога выбора файла.
//
&НаСервере
Функция СохранитьНастройкиВФайлНаСервере(УникальныйИдентификаторФормы)
	
	ДобавитьТаблицуВДерево(ДеревоПравИНастроек.ПолучитьЭлементы()); 
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ВременныйФайл);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДеревоНастроек");
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДеревоПравИНастроек, НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Файл = Новый ДвоичныеДанные(ВременныйФайл);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Файл, УникальныйИдентификаторФормы);
	УдалитьФайлы(ВременныйФайл);
	Возврат АдресВоВременномХранилище;
	
КонецФункции // СохранитьНастройкиВФайлНаСервере()

// процедура добавляет в дерево таблицу расширений прав
&НаСервере
Процедура ДобавитьТаблицуВДерево(ДобавляемыеЭлементы)
	Для Каждого ТекЭлемент Из ДобавляемыеЭлементы Цикл
		Если ТекЭлемент.ЭтоГруппа Тогда
			ДобавитьТаблицуВДерево(ТекЭлемент.ПолучитьЭлементы());
		Иначе
			ТекЭлемент.ТаблицаРасширенияПравДоступа.Очистить();
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИмяПредопределенныхДанных", ТекЭлемент.ИмяПредопределенныхДанных);
			
			НайденныеСтроки = ТаблицаРасширенияПравДоступа.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					НоваяСтрокаПрав = ТекЭлемент.ТаблицаРасширенияПравДоступа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПрав, ТекСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Обработчик события возникающего на клиенте при выполнении команды "Сохранить настройки в файл".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	// Проверяем заполнение пользователя.
	Если НЕ ЗначениеЗаполнено(ПользовательПрофиль) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран пользователь/группа доступа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем имя файла.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.МножественныйВыбор = Ложь;
	Если ВыбранПользователь = 0 Тогда
		ПрефиксИмениФайла = "НастройкиПоПользователю_";
	Иначе
		ПрефиксИмениФайла = "ГрупповаяНастройка_";
	КонецЕсли;
	Диалог.ПолноеИмяФайла     = ПрефиксИмениФайла + ПользовательПрофиль;
	Диалог.Расширение         = "xml";
	Диалог.Фильтр             = "Файлы XML (*.xml)|*.xml";
	
	Диалог.Показать(
		Новый ОписаниеОповещения("СохранитьНастройкиВФайлЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПолноеИмяФайла = Диалог.ПолноеИмяФайла;
		Адрес = СохранитьНастройкиВФайлНаСервере(УникальныйИдентификатор);
		ПолучитьФайл(Адрес, ПолноеИмяФайла, Ложь);
	КонецЕсли;

КонецПроцедуры // СохранитьНастройкиВФайл()

// Обработчик события возникающего при выполнении команды "Загрузить настройки из файла" в контексте сервера.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
// Загружает настройки пользователя из xml-файла
//
// Параметры:
//  ПолноеИмяФайла  - Строка  - Полное имя файла, полученное из диалога выбора файла.
//
&НаСервере
Процедура ЗагрузитьНастройкиИзФайлаНаСервере(Адрес)
	
	ПотокДляЧтения = ПолучитьИзВременногоХранилища(Адрес).ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьПоток(ПотокДляЧтения);
	
	Попытка
		
		// Пропускаем заголовок XML и корневой элемент.
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		ДеревоИзФайла = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		Если ТипЗнч(ДеревоИзФайла) <> Тип("ДанныеФормыДерево") Тогда
			
			ВызватьИсключение НСтр("ru = 'Неверный формат файла настроек.'");
			
		КонецЕсли;
		
	Исключение
		
		 ВызватьИсключение НСтр("ru = 'Некорректный формат файла настроек. Выберите другой файл.'");
		
	КонецПопытки;
	
	ПроверитьКорректностьСсылочныхЗначений(ДеревоИзФайла);
	ЗагрузитьИзмененныеНастройкиВДерево(ДеревоИзФайла, ДеревоПравИНастроек);
	
КонецПроцедуры // ЗагрузитьНастройкиИзФайлаНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Загрузить настройки из файла".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
// Загружает настройки пользователя из xml-файла
&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	// Проверяем заполнение пользователя.
	Если НЕ ЗначениеЗаполнено(ПользовательПрофиль) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран пользователь/группа доступа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем имя файла.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПолноеИмяФайла     = "ПерсональныеНастройки" + ПользовательПрофиль + ".xml";
	Диалог.Фильтр             = "Файлы XML (*.xml)|*.xml";
	
	// Если пользователь выбрал файл, передаем его имя в серверную процедуру.
	Диалог.Показать(
		Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПолноеИмяФайла = Диалог.ПолноеИмяФайла;
		Файл = Новый ДвоичныеДанные(ПолноеИмяФайла);
		Адрес = ПоместитьВоВременноеХранилище(Файл, Новый УникальныйИдентификатор);
		ЗагрузитьНастройкиИзФайлаНаСервере(Адрес);
	КонецЕсли;

КонецПроцедуры // ЗагрузитьНастройкиИзФайла()

// Обработчик события возникающего на клиенте при выполнении команды "Печать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
// Напечатать перечень прав и настроек
Процедура Печать(Команда)
	
	ВхПараметры = Новый Структура;
	Если ЗначениеЗаполнено(ТекПользователь) Тогда
		ВхПараметры.Вставить("Пользователь", ТекПользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекГруппаПравИНастроек) Тогда
		ВхПараметры.Вставить("ГруппаПравИНастроек", ТекГруппаПравИНастроек);
	КонецЕсли;
	
	ОповещениеЗаписи = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "КомандаОткрытьФормуНастроекПечати");
	ОткрытьФорму("Обработка.ПерсональныеНастройки.Форма.НастройкаПечати", ВхПараметры, ЭтотОбъект, , , , ОповещениеЗаписи);
	
КонецПроцедуры // Печать()

// Обработчик события возникающего на клиенте при выполнении команды "По умолчанию".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
// Установить значения прав и настроек по умолчанию
Процедура ПоУмолчанию(Команда)
	
	ТекстВопроса          = НСтр("ru = 'Текущие значения прав и настроек будут заменены значениями по умолчанию. Продолжить?'");
	ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ПоУмолчаниюПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Сбросить значения настроек?'"));
	
КонецПроцедуры // ПоУмолчанию()

// Обработчик события возникающего на сервере при выполнении команды "Групповая настройка".
//
&НаСервере
Процедура ГрупповаяНастройкаНаСервере()
	
	Если ГрупповаяНастройка Тогда
		
		НоваяСтрока = ГрупповаяНастройкаПользователиГруппы.Добавить();
		НоваяСтрока.Пользователь = ПользовательПрофиль;
		
		// Общая
		Общая = ?(ВыбранПользователь = 0, НСтр("ru = 'Все пользователи'"), НСтр("ru = 'Все группы'"));
		СоздатьКолонки("ВсеПользователи", Общая);
		УстановитьУсловноеОформлениеГрупповыхНастроек("ВсеПользователи");
		
		Для каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл 
			СоздатьКолонки(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"),Строка.Пользователь.Наименование);
			УстановитьУсловноеОформлениеГрупповыхНастроек(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"));
		КонецЦикла;
		
	Иначе
		
		Для каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл 
			УдалитьКолонки(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"));
			УстановитьУсловноеОформлениеГрупповыхНастроек(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"), Истина);
		КонецЦикла;
		ГрупповаяНастройкаПользователиГруппы.Очистить();
		
		// Общая
		УдалитьКолонки("ВсеПользователи");
		УстановитьУсловноеОформлениеГрупповыхНастроек("ВсеПользователи", Истина);
		
	КонецЕсли;
	
	ОбновитьНаСервере();
	
КонецПроцедуры // ГрупповаяНастройкаНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Групповая настройка".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
// Установить значения прав и настроек по умолчанию
&НаКлиенте
Процедура ГрупповаяНастройка(Команда)
	
	Если ГрупповаяНастройка Тогда
		ГрупповаяНастройка = Ложь;
		Элементы.ГрупповаяНастройка.Пометка = Ложь;
	Иначе
		ГрупповаяНастройка = Истина;
		Элементы.ГрупповаяНастройка.Пометка = Истина;
	КонецЕсли;
	
	УстановитьПараметрыЭлементаВыбораПользователяГруппы();
	ГрупповаяНастройкаНаСервере();
	
КонецПроцедуры // ГрупповаяНастройка()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// +Софтфон

&НаКлиенте
// Процедура - обработчик выбора активного действия
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранное действие
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура сфпОбработкаВыбораАктивногоДействия(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	ТД = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	ТД.Значение = ВыбранныйЭлемент.Значение;
	ТД.Изменено = Истина;
	Модифицированность = Истина;
КонецПроцедуры // сфпОбработкаВыбораАктивногоДействия()

// -Софтфон

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбновитьПродолжение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ОбработкаРезультатаЗакрытия") Тогда
		
		Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Пользователь-получатель не выбран.'"));
			Возврат;
		КонецЕсли;
		
		// Пользователи должны отличаться друг от друга.
		Если ДополнительныеПараметры.Результат = РезультатОповещения Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Объект источник и объект приемник совпадают.'"));
			Возврат;
		КонецЕсли;
		
		// Передаем выбранных пользователей в серверную процедуру копирования.
		СкопироватьПрофильПользователяНаСервере(ДополнительныеПараметры.Результат, РезультатОповещения);
		
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ПередЗакрытиемПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры // Подключаемый_ПередЗакрытиемПродолжение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ     			- Произвольный - Результат выполнения операции в подчиненной форме.
//  ВходныеПараметры 	- Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ВыборГруппыИлиПользователяПродолжение(Ответ, ВходныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ <> КодВозвратаДиалога.Отмена Тогда
		
		ТекГруппаПравИНастроек = ГруппаПравИНастроекПользователя;
		УстановитьПараметрыЭлементаВыбораПользователяГруппы();
		ПользовательПрофильПриИзменении();
		Если НЕ КодВыбранногоЗначенияПоиска = 0 Тогда
			ВыбранноеЗначение = КодВыбранногоЗначенияПоиска;
			ЗначениеПоискаОбработкаВыбора(Элементы.ЗначениеПоиска, ВыбранноеЗначение, Истина);
		КонецЕсли;
		
	Иначе
		
		ВыбранПользователь = ?(ВыбранПользователь = 0, 1, 0);
		
	КонецЕсли;
	
	ЭтоСтраницаНастроек = Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПраваИНастройки;
	Элементы.ЗначениеПоиска.Доступность = ЭтоСтраницаНастроек;
	
КонецПроцедуры // Подключаемый_ВыборГруппыИлиПользователяПродолжение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	// Вызываем общий обработчик события
	Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ                   - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ПоУмолчаниюПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьДерево(Истина);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ПоУмолчаниюПродолжение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ                   - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ТекПользовательНачалоВыбораПродолжение(Ответ = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
	Если Ответ <> КодВозвратаДиалога.Отмена Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекПользователь);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ТекПользовательПриИзменении", ЭтотОбъект);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ТекПользовательНачалоВыбораПродолжение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ                   - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ТекГруппаПравИНастроекНачалоВыбораПродолжение(
		Ответ = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
	Если Ответ <> КодВозвратаДиалога.Отмена Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекГруппаПравИНастроек);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ТекГруппаПравИНастроекПриИзменении", ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ГруппыПравИНастроек.ФормаВыбора",
			ПараметрыФормы,
			ЭтотОбъект,
			ЭтотОбъект, , ,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ТекГруппаПравИНастроекНачалоВыбораПродолжение()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьСостав(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено И Результат.Модифицированность Тогда
		
		Для каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл 
			УдалитьКолонки(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"));
			УстановитьУсловноеОформлениеГрупповыхНастроек(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"), Истина);
		КонецЦикла;
		ГрупповаяНастройкаПользователиГруппы.Очистить();
		
		ОбновитьСоставНаСервере(Результат.РезультатПодбора);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбновитьСостав()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ                   - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ГрупповаяУстановкаПрава(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПравИНастроек.ТекущиеДанные;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Истина;
		Если ДополнительныеПараметры.Свойство("ВыбранноеЗначение") Тогда
			ТекущиеДанные["Значение" + ДополнительныеПараметры.ПредставлениеПользователя] = ДополнительныеПараметры.ВыбранноеЗначение;
		Иначе
			ТекущиеДанные["Значение" + ДополнительныеПараметры.ПредставлениеПользователя] = ТекущиеДанные["ЗначениеБулево" + ДополнительныеПараметры.ПредставлениеПользователя];
		КонецЕсли;
		Для Каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл
				ИдПользователя = СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_");
				ТекущиеДанные["Значение" + ИдПользователя] = ТекущиеДанные["Значение"+ ДополнительныеПараметры.ПредставлениеПользователя];
				ТекущиеДанные["ЗначениеБулево" + ИдПользователя] = ТекущиеДанные["Значение" + ДополнительныеПараметры.ПредставлениеПользователя];
				ТекущиеДанные["Изменено" + ИдПользователя] = Истина;
				ТекущиеДанные["СтроковоеПредставлениеЗначения"+ ИдПользователя] = СокрЛП(ТекущиеДанные["Значение" + ДополнительныеПараметры.ПредставлениеПользователя]);
		КонецЦикла;
		
	Иначе
		Если НЕ ДополнительныеПараметры.Свойство("ВыбранноеЗначение") Тогда
			ТекущиеДанные["ЗначениеБулево" + ДополнительныеПараметры.ПредставлениеПользователя] = ТекущиеДанные["Значение" + ДополнительныеПараметры.ПредставлениеПользователя];
		ИначеЕсли СтрНайти(ДополнительныеПараметры.ПредставлениеПользователя, "ВсеПользователи") > 0 и Не ТекущиеДанные.ЭтоБулевоЗначение Тогда
			ТекущиеДанные["Значение" + ДополнительныеПараметры.ПредставлениеПользователя] = ТекущиеДанные.ПоследнееЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ГрупповаяУстановкаПрава()

&НаСервере
Процедура ОбновитьСоставНаСервере(АдресХранилища)
	
	РезультатПодбора = ПолучитьИзВременногоХранилища(АдресХранилища);
	РезультатПодбора.ВыбранныеПользователи.Свернуть("Пользователь");
	
	Для каждого Строка Из РезультатПодбора.ВыбранныеПользователи Цикл 
		Если ЗначениеЗаполнено(Строка.Пользователь) Тогда
			НоваяСтрока = ГрупповаяНастройкаПользователиГруппы.Добавить();
			НоваяСтрока.Пользователь = Строка.Пользователь;
			СоздатьКолонки(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"), Строка.Пользователь.Наименование);
			УстановитьУсловноеОформлениеГрупповыхНастроек(СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_"));
		КонецЕсли;
	КонецЦикла;
	ОбновитьНаСервере();
	
КонецПроцедуры // ОбновитьСоставНаСервере()

// Повторное чтение из регистра настроек пользователя
&НаСервере
Процедура ОбновитьНаСервере()
	
	Если ВыбранПользователь = 0 Тогда
		
		ГруппаПравИНастроекПользователя = ГруппаНастройкиПользователя(ТекПользователь);
		ИспользованиеПерсональногоДоступа = ТекПользователь.ИспользованиеПерсональногоДоступа;
		
	КонецЕсли;
	
	ЗаполнитьДерево();
	ЗаполнитьТаблицуРасширенияПравДоступа();
	
	
	Если ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.ГруппыПравИНастроек")
		ИЛИ ЗначениеЗаполнено(ГруппаПравИНастроекПользователя) Тогда
		
		// Сделаем переменную. в которой будем хранить текущую группу доступа (или группу доступа пользователя с индивидуальным доступом).
		ГруппаДоступаДляРолей = ?(ИспользованиеПерсональногоДоступа, ГруппаПравИНастроекПользователя, ПользовательПрофиль);
		
		ГруппаПравИНастроекПользователя = Справочники.ГруппыПравИНастроек.ПустаяСсылка();
		ПользовательВходитВГруппуПравИНастроек = Ложь;
		
		// Подготовка дерева пользователей.
		ЗаполнитьУчастникамиГруппыНастроек(ГруппаДоступаДляРолей);
		
	КонецЕсли;
	
	Если ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.ГруппыПравИНастроек") Тогда
		ВыбранПользователь = 1;
	Иначе
		
		ВыбранПользователь = 0;
		ПользовательВходитВГруппуНастройки(ПользовательПрофиль, ГруппаПравИНастроекПользователя);
		ПользовательВходитВГруппуПравИНастроек = ЗначениеЗаполнено(ГруппаПравИНастроекПользователя);
		
		Если НЕ Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПраваИНастройки Тогда
			ЗначениеПоиска = "";
			КодВыбранногоЗначенияПоиска = 0;
		КонецЕсли;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПраваИНастройки;
	КонецЕсли;
	
	// Получим разрешение на редактирование личных настроек.
	РазрешитьИзменениеЛичныхНастроек = ВыбранПользователь = 0
		И Пользователи.ТекущийПользователь() = ТекПользователь
		И ПравоДоступа("Администрирование", Метаданные);
	
	Элементы.Записать.Доступность                = РазрешитьИзменениеЛичныхНастроек ИЛИ РазрешитьИзменениеПравДоступа;
	Элементы.ЗаписатьИЗакрыть.Доступность        = РазрешитьИзменениеЛичныхНастроек ИЛИ РазрешитьИзменениеПравДоступа;
	
	ПользовательПрофильЗаполнен = ЗначениеЗаполнено(ПользовательПрофиль);
	
	Элементы.ВыбранПользователь.Доступность      = НЕ ГрупповаяНастройка И ПользовательПрофильЗаполнен И ТекущийПользовательАдминистратор И НЕ ИспользованиеПерсональногоДоступа;
	Элементы.ПользователиГруппы.Доступность      = НЕ ГрупповаяНастройка И ПользовательПрофильЗаполнен И НЕ ИспользованиеПерсональногоДоступа И ВыбранПользователь = 1;
	Элементы.СкопироватьПрофильПользователя.Доступность = НЕ ГрупповаяНастройка И ПользовательПрофильЗаполнен И (ВыбранПользователь = 0);
	Элементы.ДеревоПравИНастроекГруппаОперацииСДанными.Видимость = НЕ ГрупповаяНастройка;
	Элементы.ПоУмолчанию.Видимость = НЕ ГрупповаяНастройка;
	Элементы.СоставПользователейГруппы.Видимость = ГрупповаяНастройка;
	Элементы.СоставПользователейГруппы.Заголовок = ?(ВыбранПользователь = 0, "Пользователи", "Группы");
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры // ОбновитьНаСервере()

// Настройка условного оформления реквизитов типа цен
//
&НаСервере
Процедура УстановитьУсловноеОформлениеГрупповыхНастроек(ИдПользователя,УдалитьУсловноеОформление=Ложь)
	
	МассивОформленияСтрокиНоменклатуры = Новый Массив;
	
	КоличествоОформлений = УсловноеОформление.Элементы.Количество() - 1;
	
	Индекс = КоличествоОформлений;
	
	Для НомерСтроки = 8 По КоличествоОформлений Цикл
		
		ЭлементУсловноеОформление = УсловноеОформление.Элементы.Получить(Индекс);
		Если ЭлементУсловноеОформление.Представление = "Изменено" + ИдПользователя Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловноеОформление);
		ИначеЕсли ЭлементУсловноеОформление.Представление  = "Доступность" + ИдПользователя Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловноеОформление);
		ИначеЕсли ЭлементУсловноеОформление.Представление  = "ВидимостьБулево" + ИдПользователя Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловноеОформление);
		ИначеЕсли ЭлементУсловноеОформление.Представление  = "ВидимостьЗначение" + ИдПользователя Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловноеОформление);
		ИначеЕсли ЭлементУсловноеОформление.Представление  = "ДоступностьРасширений" + ИдПользователя Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловноеОформление);
		КонецЕсли;
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Если УдалитьУсловноеОформление Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = "Изменено" + ИдПользователя;
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.Изменено" + ИдПользователя);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Доступность редактирования
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = "Доступность"+ИдПользователя;
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначение" + ИдПользователя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначениеБулево" + ИдПользователя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекРасширениеДанных" + ИдПользователя);
	
	ОтборЭлементаГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборЭлементаГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлементаГруппаИЛИИ1 = ОтборЭлементаГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборЭлементаГруппаИЛИИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлементаГруппаИЛИИ2 = ОтборЭлементаГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборЭлементаГруппаИЛИИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборЭлементаГруппаИЛИИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.НомерКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлементаГруппаИЛИИ1ИЛИ = ОтборЭлементаГруппаИЛИИ1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборЭлементаГруппаИЛИИ1ИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборЭлементаГруппаИЛИИ1ИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешитьИзменениеПравДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлементаГруппаИЛИИ1ИЛИИ = ОтборЭлементаГруппаИЛИИ1ИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборЭлементаГруппаИЛИИ1ИЛИИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборЭлементаГруппаИЛИИ1ИЛИИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыбранПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ОтборЭлементаГруппаИЛИИ1ИЛИИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользованиеПерсональногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ОтборЭлементаГруппаИЛИИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.НомерКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ОтборЭлементаГруппаИЛИИ2НЕ = ОтборЭлементаГруппаИЛИИ2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборЭлементаГруппаИЛИИ2НЕ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОтборЭлементаГруппаИЛИИ2НЕИЛИ = ОтборЭлементаГруппаИЛИИ2НЕ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборЭлементаГруппаИЛИИ2НЕИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборЭлементаГруппаИЛИИ2НЕИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешитьИзменениеПравДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ОтборЭлементаГруппаИЛИИ2НЕИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешитьИзменениеЛичныхНастроек");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Видимость булево
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = "ВидимостьБулево"+ИдПользователя;
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначениеБулево" + ИдПользователя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.ЭтоБулевоЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость значение
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = "ВидимостьЗначение"+ИдПользователя;
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначение" + ИдПользователя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.ЭтоБулевоЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Доступность расширений
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = "ДоступностьРасширений"+ИдПользователя;
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекРасширениеДанных" + ИдПользователя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.ЕстьРасширениеДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры // УстановитьУсловноеОформлениеТиповЦен()

// Копирование набора прав для между пользователями
//
// Параметры:
//  ПользовательИсточник  - СправочникСсылка.Пользователи   - Исходный пользователь
//  ПользовательПриемник  - СправочникСсылка.Пользователи   - Пользователь-получатель.
//
&НаСервере
Процедура СкопироватьПрофильПользователяНаСервере(ПользовательИсточник, ПользовательПриемник)
	
	// Получаем и читаем набор записей исходного пользователя.
	НаборИсточник = РегистрыСведений.ПраваИНастройки.СоздатьНаборЗаписей();
	НаборИсточник.Отбор.ПользовательПрофиль.Установить(ПользовательИсточник);
	НаборИсточник.Прочитать();
	
	// Получаем и чистим набор записей пользователя-получателя.
	НаборПриемник = РегистрыСведений.ПраваИНастройки.СоздатьНаборЗаписей();
	НаборПриемник.Отбор.ПользовательПрофиль.Установить(ПользовательПриемник);
	НаборПриемник.Очистить();
	
	// Обходим набор записей исходного пользователя и заполняем по ним записи пользователя-получателя.
	Для Каждого ЗаписьИсточник Из НаборИсточник Цикл
		
		НоваяЗапись = НаборПриемник.Добавить();
		
		НоваяЗапись.ПользовательПрофиль = ПользовательПриемник;
		НоваяЗапись.Объект              = ЗаписьИсточник.Объект;
		НоваяЗапись.ПравоНастройка      = ЗаписьИсточник.ПравоНастройка;
		НоваяЗапись.Значение            = ЗаписьИсточник.Значение;
	КонецЦикла;
	
	// Записываем набор записей пользователя-получателя.
	Попытка
		НаборПриемник.Записать();
	Исключение
		ОписаниеОшибки    = ОписаниеОшибки();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось записать профиль настроек пользователя «%1».'" + Символы.ПС + ОписаниеОшибки);
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(СообщениеОбОшибке,СокрЛП(ПользовательПриемник)));
	КонецПопытки;
	
КонецПроцедуры // СкопироватьПрофильПользователяНаСервере()

// Настраивает визуальное отображение дерева настроек.
//
&НаКлиенте
Процедура РазвернутьСвернутьДеревоРекурсивно(Дерево, ЭтоСвертка, ИмяДерева)
	
	// Обходим переданный набор строк дерева
	Для Каждого СтрокаДерева Из Дерево Цикл
		
		// Сворачиваем или разворачиваем в зависимости от необходимого действия
		Если ЭтоСвертка Тогда
			// Проверяем наличие вложенных строк, если нужно - вызываем эту функцию рекурсивно
			ВложенныеСтроки = СтрокаДерева.ПолучитьЭлементы();
			Если ВложенныеСтроки.Количество() > 0 Тогда
				
				РазвернутьСвернутьДеревоРекурсивно(ВложенныеСтроки, ЭтоСвертка, ИмяДерева);
			КонецЕсли;
			Элементы[ИмяДерева].Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		Иначе
			Элементы[ИмяДерева].Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //РазвернутьСвернутьДеревоРекурсивно()

&НаКлиенте
Процедура УстановитьПараметрыЭлементаВыбораПользователяГруппы()
	
	Элементы.ТекПользователь.Видимость  = (ВыбранПользователь = 0 И НЕ ГрупповаяНастройка);
	Элементы.ТекГруппаДоступа.Видимость = (ВыбранПользователь =1 И НЕ ГрупповаяНастройка);
	
КонецПроцедуры // УстановитьПараметрыЭлементаВыбораПользователяГруппы()

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ГрупповаяНастройка Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Персональные права и настройки: групповая настройка'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Строка(ПользовательПрофиль), ГруппаПравИНастроекПользователя);
		
	ИначеЕсли ЗначениеЗаполнено(ПользовательПрофиль) Тогда
		
		ПользовательВходитВГруппуПравИНастроекТекст = ?(ПользовательВходитВГруппуПравИНастроек, " (%2)", "");	
		ТекстЗаголовка = НСтр("ru = 'Персональные права и настройки: %1'") + ?(ВыбранПользователь = 0, 
			ПользовательВходитВГруппуПравИНастроекТекст, " " + НСтр("ru = '(Группа прав и настроек)'"));
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Строка(ПользовательПрофиль), 
			ГруппаПравИНастроекПользователя);
		
	Иначе
		
		Заголовок = НСтр("ru = 'Персональные права и настройки: <пользователь не выбран>'");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура выполняет рекурсивный поиск настройки в дереве настроек
//
// Параметры:
//	СтрокиДерева	- КоллекцияСтрокДереваЗначений	- Строки дерева, в которых выполняется поиск
//	Настройка		- ПланВидовХарактеристикСсылка	- Настройка для поиска
//	ТолькоГруппы	- Булево						- Признак поиска только групп.
//
// Возвращаемое значение:
//	СтрокаДереваЗначений	- Строка настройки.
//
&НаСервере
Функция НайтиНастройкуВДереве(СтрокиДерева, Настройка, ТолькоГруппы = Истина)
	
	НайденныйЭлемент = Неопределено;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ТолькоГруппы И НЕ СтрокаДерева.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СокрЛП(СтрокаДерева.ИмяПредопределенныхДанных)) = ВРег(Настройка.ИмяПредопределенныхДанных) Тогда
			НайденныйЭлемент = СтрокаДерева;
		Иначе
			ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
			НайденныйЭлемент        = НайтиНастройкуВДереве(ПодчиненныеСтрокиДерева, Настройка, ТолькоГруппы);
		КонецЕсли;
		
		Если НЕ (НайденныйЭлемент = Неопределено) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции // НайтиНастройкуВДереве()

// Заполняет соответствие описаний настроек из макета "НастройкиПоУмолчанию"
&НаСервере
Функция ПолучитьОписанияНастроек()
	
	ОписанияНастроек = Новый Соответствие;
	
	Макет = ПланыВидовХарактеристик.ПраваИНастройки.ПолучитьМакет("НастройкиПоУмолчанию");
	
	Для Номер = 1 По 10000 Цикл // Заведомо больше, чем есть в макете
		
		// Получаем код настройки
		Код = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C3").ТекущаяОбласть.Текст);
		
		// Дошли до конца макета, выходим из цикла
		Если НЕ ЗначениеЗаполнено(Код) Тогда
			Прервать;
		КонецЕсли;
		
		// Пробуем получить HTML-описание настройки
		Описание = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C9").ТекущаяОбласть.Текст);
		
		// HTML-описание отсутствует, получаем обычное описание
		Если НЕ ЗначениеЗаполнено(Описание) Тогда
			Описание = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C8").ТекущаяОбласть.Текст);
		КонецЕсли;
		
		// Если получили описание, добавляем его в соответствие
		Если ЗначениеЗаполнено(Описание) Тогда
			ОписанияНастроек.Вставить(Число(Код), Описание);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписанияНастроек;
	
КонецФункции // ПолучитьСтруктуруОписаний()

// Процедура обновляет информацию в таблице настроек.
&НаСервере
Процедура ЗаполнитьДерево(ПоУмолчанию = Ложь)
	
	ГруппаПравИНастроекПользователя = Неопределено;
	ПользовательВходитВГруппуНастройки(ПользовательПрофиль, ГруппаПравИНастроекПользователя);
	
	НастройкиЭлементы = ДеревоПравИНастроек.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();
	
	ОписанияНастроек = ПолучитьОписанияНастроек();
	
	// Создадим список для переключения режима отображения.
	НомераТиповЭлементов = Новый Массив;
	НомераТиповЭлементов.Добавить(1);
	Если РежимОтображенияПравИНастроек = "ОтображатьПраваИНастройки" ИЛИ НЕ ЗначениеЗаполнено(РежимОтображенияПравИНастроек) Тогда
		НомераТиповЭлементов.Добавить(0);
		НомераТиповЭлементов.Добавить(2);
	ИначеЕсли РежимОтображенияПравИНастроек = "ОтображатьПрава" Тогда
		НомераТиповЭлементов.Добавить(0);
	ИначеЕсли РежимОтображенияПравИНастроек = "ОтображатьНастройки" Тогда
		НомераТиповЭлементов.Добавить(2);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ГрупповаяНастройка Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПВХПраваИНастройки.Код КАК Код,
		|	ПВХПраваИНастройки.Родитель КАК Родитель,
		|	ПВХПраваИНастройки.Наименование КАК Настройка,
		|	ПВХПраваИНастройки.ЭтоГруппа КАК ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА ПВХПраваИНастройки.ЭтоГруппа
		|			ТОГДА 1
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПВХПраваИНастройки.ЭтоНастройка
		|					ТОГДА 2
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК НомерКартинки,
		|	ВЫБОР
		|		КОГДА &ПоУмолчанию
		|			ТОГДА ПВХПраваИНастройки.ЗначениеПоУмолчанию
		|		ИНАЧЕ ЕСТЬNULL(РегистрСведенийПраваИНастройки.Значение, ЕСТЬNULL(РегистрСведенийПраваИНастройкиПрофиля.Значение, ПВХПраваИНастройки.ЗначениеПоУмолчанию))
		|	КОНЕЦ КАК Значение,
		|	ПВХПраваИНастройки.РасширениеДанных КАК ЕстьРасширениеДанных,
		|	ВЫБОР
		|		КОГДА &ПоПользователю
		|			ТОГДА ЕСТЬNULL(РегистрСведенийПраваИНастройкиПрофиля.Значение, ПВХПраваИНастройки.ЗначениеПоУмолчанию)
		|		ИНАЧЕ ПВХПраваИНастройки.ЗначениеПоУмолчанию
		|	КОНЕЦ КАК ЗначениеПоУмолчанию,
		|	ПВХПраваИНастройки.ТипЗначения КАК ТипЗначения,
		|	ПВХПраваИНастройки.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ПВХПраваИНастройки.Предопределенный КАК Предопределенный,
		|	РегистрСведенийПраваИНастройки.ПользовательПрофиль КАК ПользовательПрофиль,
		|	РегистрСведенийПраваИНастройкиПрофиля.ПользовательПрофиль КАК ПользовательПрофильГруппа
		|ИЗ
		|	ПланВидовХарактеристик.ПраваИНастройки КАК ПВХПраваИНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваИНастройки КАК РегистрСведенийПраваИНастройки
		|		ПО (РегистрСведенийПраваИНастройки.ПравоНастройка = ПВХПраваИНастройки.Ссылка)
		|			И (РегистрСведенийПраваИНастройки.ПользовательПрофиль В (&ПользовательПрофиль))
		|			И (ЕСТЬNULL(РегистрСведенийПраваИНастройки.Объект, """") = """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваИНастройки КАК РегистрСведенийПраваИНастройкиПрофиля
		|		ПО (РегистрСведенийПраваИНастройкиПрофиля.ПравоНастройка = ПВХПраваИНастройки.Ссылка)
		|			И (РегистрСведенийПраваИНастройкиПрофиля.ПользовательПрофиль В (&ПрофильПользователя))
		|			И (ЕСТЬNULL(РегистрСведенийПраваИНастройкиПрофиля.Объект, """") = """")
		|ГДЕ
		|	НЕ ПВХПраваИНастройки.ПометкаУдаления
		|	И НЕ ПВХПраваИНастройки.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПраваИНастройки.УДАЛЯЕМЫЕ))
		|	И ВЫБОР
		|			КОГДА ПВХПраваИНастройки.ЭтоГруппа
		|				ТОГДА 1
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПВХПраваИНастройки.ЭтоНастройка
		|						ТОГДА 2
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ В (&НомераТиповЭлементов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПВХПраваИНастройки.ЭтоГруппа ИЕРАРХИЯ,
		|	ПВХПраваИНастройки.Код ИЕРАРХИЯ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведенийПраваИНастройки.Объект КАК Объект,
		|	РегистрСведенийПраваИНастройки.ПравоНастройка.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	РегистрСведенийПраваИНастройки.ПользовательПрофиль КАК ПользовательПрофиль
		|ИЗ
		|	РегистрСведений.ПраваИНастройки КАК РегистрСведенийПраваИНастройки
		|ГДЕ
		|	РегистрСведенийПраваИНастройки.Объект <> """"
		|	И РегистрСведенийПраваИНастройки.ПользовательПрофиль В(&ПользовательПрофиль)
		|ИТОГИ
		|	КОЛИЧЕСТВО(Объект)
		|ПО
		|	ПользовательПрофиль,
		|	ИмяПредопределенныхДанных";
		
		ГруппыДоступаПользователя = Новый ТаблицаЗначений;
		ГруппыДоступаПользователя.Колонки.Добавить("Группа");
		ГруппыДоступаПользователя.Колонки.Добавить("Пользователь");
		Для Каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл
			ГруппаПравИНастроекПользователя = Неопределено;
			ПользовательВходитВГруппуНастройки(Строка.Пользователь, ГруппаПравИНастроекПользователя);
			НоваяСтрока = ГруппыДоступаПользователя.Добавить();
			НоваяСтрока.Группа = ГруппаПравИНастроекПользователя;
			НоваяСтрока.Пользователь = Строка.Пользователь;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ПользовательПрофиль",  ГрупповаяНастройкаПользователиГруппы.Выгрузить());
		Запрос.УстановитьПараметр("ПрофильПользователя",  ?(ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.Пользователи"), ГруппыДоступаПользователя.ВыгрузитьКолонку("Группа"), ГрупповаяНастройкаПользователиГруппы.Выгрузить()));
		Запрос.УстановитьПараметр("ПоПользователю",       ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.Пользователи"));
		Запрос.УстановитьПараметр("НомераТиповЭлементов", НомераТиповЭлементов);
		Запрос.УстановитьПараметр("ПоУмолчанию",          ПоУмолчанию);
		
		ИндексСтроки = 0;
		
		// Заполняем соответствие с данными расширения доступа.
		СоответствиеОбъектов = Новый Соответствие;
		ВыборкаПользователь     = Запрос.ВыполнитьПакет()[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПользователь.Следующий() Цикл
			
			ВыборкаНастройка = ВыборкаПользователь.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНастройка.Следующий() Цикл
				ПереченьОбъектов = "";
				ТекущаяНастройка = Строка(ВыборкаНастройка.ИмяПредопределенныхДанных + "Ид"+СтрЗаменить(ВыборкаНастройка.ПользовательПрофиль.УникальныйИдентификатор(),"-","_"));
				ВыборкаОбъект = ВыборкаНастройка.Выбрать();
				Пока ВыборкаОбъект.Следующий() Цикл
					
					ОбъектРасширенияДоступа = СписокВыбораОбъекта.НайтиПоЗначению(ВыборкаОбъект.Объект);
					Если ОбъектРасширенияДоступа <> Неопределено Тогда
						
						СинонимОбъекта   = ОбъектРасширенияДоступа.Представление;
						ПереченьОбъектов = ПереченьОбъектов + ?(ПереченьОбъектов = "", "", ", ") + СинонимОбъекта;
					КонецЕсли;
				КонецЦикла;
				
				СоответствиеОбъектов.Вставить(ТекущаяНастройка, ПереченьОбъектов);
			КонецЦикла;
		КонецЦикла;
		
		// Заполняем дерево прав и настроек.
		Выборка = Запрос.ВыполнитьПакет()[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Код) Тогда
				КодНастройки = Число(Выборка.Код);
			Иначе
				КодНастройки = 0;
			КонецЕсли;
			
			Если Выборка.ЭтоГруппа Тогда
				
				СтрокаГруппы = НастройкиЭлементы;
				
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					
					НайденныйРодитель = НайтиНастройкуВДереве(СтрокаГруппы, Выборка.Родитель);
					Если НЕ (НайденныйРодитель = Неопределено) Тогда
						
						СтрокаГруппы = НайденныйРодитель.ПолучитьЭлементы();
					КонецЕсли;
				КонецЕсли;
				
				СтрокаНастройки = СтрокаГруппы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНастройки, Выборка, "Код,Настройка,ЭтоГруппа,НомерКартинки,ИмяПредопределенныхДанных,Предопределенный");
				СтрокаНастройки.ИндексСтроки = ИндексСтроки;
				
				СтрокаГруппыЭлементы = СтрокаНастройки.ПолучитьЭлементы();
				ИндексСтроки = ИндексСтроки + 1;
			Иначе
				
				// Право уже добавлено
				Если СтрокаНастройки.ИмяПредопределенныхДанных = Выборка.ИмяПредопределенныхДанных Тогда
					Если ЗначениеЗаполнено(Выборка.ПользовательПрофиль) Тогда
						ИдПользователя = СтрЗаменить(Выборка.ПользовательПрофиль.УникальныйИдентификатор(),"-","_");
						СтрокаНастройки["Значение" + ИдПользователя] = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
						СтрокаНастройки["ЗначениеБулево" + ИдПользователя] = ?(ТипЗнч(СтрокаНастройки["Значение" + ИдПользователя]) = Тип("Булево"), СтрокаНастройки["Значение" +ИдПользователя],    Неопределено);
						СтрокаНастройки["СтроковоеПредставлениеЗначения" + ИдПользователя] = СокрЛП(СтрокаНастройки["Значение" + ИдПользователя]);
					ИначеЕсли 
						ЗначениеЗаполнено(Выборка.ПользовательПрофильГруппа) Тогда
						ИдПользователя = СтрЗаменить(ГруппыДоступаПользователя.Найти(Выборка.ПользовательПрофильГруппа,"Группа").Пользователь.УникальныйИдентификатор(),"-","_");
						СтрокаНастройки["Значение" + ИдПользователя] = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
						СтрокаНастройки["ЗначениеБулево" + ИдПользователя] = ?(ТипЗнч(СтрокаНастройки["Значение" + ИдПользователя]) = Тип("Булево"), СтрокаНастройки["Значение" +ИдПользователя],    Неопределено);
						СтрокаНастройки["СтроковоеПредставлениеЗначения" + ИдПользователя] = СокрЛП(СтрокаНастройки["Значение" + ИдПользователя]);
					КонецЕсли;
				Иначе
					
					СтрокаНастройки = СтрокаГруппыЭлементы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНастройки, Выборка, "Код,Настройка,ЭтоГруппа,НомерКартинки,ЕстьРасширениеДанных,ЗначениеПоУмолчанию,ТипЗначения,ИмяПредопределенныхДанных,Предопределенный");
					СтрокаНастройки.ИндексСтроки     = ИндексСтроки;
					СтрокаНастройки.Описание         = ОписанияНастроек.Получить(КодНастройки);
					
					Для Каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл
						ИдПользователя = СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(), "-", "_");
						СтрокаНастройки["Значение" + ИдПользователя] = Выборка.ТипЗначения.ПривестиЗначение(Выборка.ЗначениеПоУмолчанию);
						ТекРасширениеДанных = СоответствиеОбъектов.Получить(СтрокаНастройки.ИмяПредопределенныхДанных + "Ид" + ИдПользователя);
						ТекРасширениеДанныхТекст = ?(ЗначениеЗаполнено(ТекРасширениеДанных), ТекРасширениеДанных, НСтр("ru = '<настроить...>'"));
						СтрокаНастройки["РасширениеДанных" + ИдПользователя] = ?(НЕ СтрокаНастройки.ЕстьРасширениеДанных, НСтр("ru = '<недоступно>'"), ТекРасширениеДанныхТекст);
						СтрокаНастройки["ЗначениеБулево" + ИдПользователя] = ?(ТипЗнч(СтрокаНастройки["Значение" + ИдПользователя]) = Тип("Булево"), СтрокаНастройки["Значение" + ИдПользователя],    Неопределено);
						СтрокаНастройки["СтроковоеПредставлениеЗначения" + ИдПользователя] = СокрЛП(СтрокаНастройки["Значение" + ИдПользователя]);
					КонецЦикла;
					Если ЗначениеЗаполнено(Выборка.ПользовательПрофиль) Тогда
						ИдПользователя = СтрЗаменить(Выборка.ПользовательПрофиль.УникальныйИдентификатор(),"-","_");
						СтрокаНастройки["Значение" + ИдПользователя] = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
						СтрокаНастройки["ЗначениеБулево" + ИдПользователя] = ?(ТипЗнч(СтрокаНастройки["Значение" + ИдПользователя]) = Тип("Булево"), СтрокаНастройки["Значение" + ИдПользователя],    Неопределено);
						СтрокаНастройки["СтроковоеПредставлениеЗначения" + ИдПользователя] = СокрЛП(СтрокаНастройки["Значение" + ИдПользователя]);
					ИначеЕсли ЗначениеЗаполнено(Выборка.ПользовательПрофильГруппа) Тогда
						ИдПользователя = СтрЗаменить(ГруппыДоступаПользователя.Найти(Выборка.ПользовательПрофильГруппа,"Группа").Пользователь.УникальныйИдентификатор(),"-","_");
						СтрокаНастройки["Значение" + ИдПользователя] = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
						СтрокаНастройки["ЗначениеБулево" + ИдПользователя] = ?(ТипЗнч(СтрокаНастройки["Значение" + ИдПользователя]) = Тип("Булево"), СтрокаНастройки["Значение" + ИдПользователя],    Неопределено);
						СтрокаНастройки["СтроковоеПредставлениеЗначения" + ИдПользователя] = СокрЛП(СтрокаНастройки["Значение" + ИдПользователя]);
					КонецЕсли;
				
					// Дополнительные колонки для отображения флага вместо текстового значения в колонках со значением булевого типа.
					СтрокаНастройки.ЗначениеПоУмолчаниюБулево = ?(ТипЗнч(Выборка.ЗначениеПоУмолчанию) = Тип("Булево"), Выборка.ЗначениеПоУмолчанию, Неопределено);
					СтрокаНастройки.ЭтоБулевоЗначение         =  (ТипЗнч(Выборка.ЗначениеПоУмолчанию)    = Тип("Булево"));
					
					// Заполним "Все пользователи
					ИдПользователя = "ВсеПользователи";
					Если СтрокаНастройки.ЭтоБулевоЗначение Тогда
						СтрокаНастройки["Значение" + ИдПользователя] = 2;
						СтрокаНастройки["ЗначениеБулево" + ИдПользователя] = 2;
						СтрокаНастройки["СтроковоеПредставлениеЗначения" + ИдПользователя] = СокрЛП(СтрокаНастройки["Значение" + ИдПользователя]);
					Иначе
						Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Выборка.Значение)) Тогда
							СтрокаНастройки["Значение" + ИдПользователя] = Выборка.ТипЗначения.ПривестиЗначение(ПредопределенноеЗначение("" + ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.Значение) + ".ПустаяСсылка"));
						Иначе
							СтрокаНастройки["Значение" + ИдПользователя] = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
						КонецЕсли;
						СтрокаНастройки["ЗначениеБулево" + ИдПользователя] =  Неопределено;
						СтрокаНастройки["СтроковоеПредставлениеЗначения" + ИдПользователя] = СокрЛП(СтрокаНастройки["Значение" + ИдПользователя]);
					КонецЕсли;
					
					// Если перезаполняем значениями по умолчанию, поставим у всех флаг Изменено для доп. контроля при записи.
					СтрокаНастройки.Изменено = ПоУмолчанию;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПВХПраваИНастройки.Код КАК Код,
		|	ПВХПраваИНастройки.Родитель КАК Родитель,
		|	ПВХПраваИНастройки.Наименование КАК Настройка,
		|	ПВХПраваИНастройки.ЭтоГруппа КАК ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА ПВХПраваИНастройки.ЭтоГруппа
		|			ТОГДА 1
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПВХПраваИНастройки.ЭтоНастройка
		|					ТОГДА 2
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК НомерКартинки,
		|	ВЫБОР
		|		КОГДА &ПоУмолчанию
		|			ТОГДА ПВХПраваИНастройки.ЗначениеПоУмолчанию
		|		ИНАЧЕ ЕСТЬNULL(РегистрСведенийПраваИНастройки.Значение, ЕСТЬNULL(РегистрСведенийПраваИНастройкиПрофиля.Значение, ПВХПраваИНастройки.ЗначениеПоУмолчанию))
		|	КОНЕЦ КАК Значение,
		|	ПВХПраваИНастройки.РасширениеДанных КАК ЕстьРасширениеДанных,
		|	ВЫБОР
		|		КОГДА &ПоПользователю
		|			ТОГДА ЕСТЬNULL(РегистрСведенийПраваИНастройкиПрофиля.Значение, ПВХПраваИНастройки.ЗначениеПоУмолчанию)
		|		ИНАЧЕ ПВХПраваИНастройки.ЗначениеПоУмолчанию
		|	КОНЕЦ КАК ЗначениеПоУмолчанию,
		|	ПВХПраваИНастройки.ТипЗначения КАК ТипЗначения,
		|	ПВХПраваИНастройки.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ПВХПраваИНастройки.Предопределенный КАК Предопределенный
		|ИЗ
		|	ПланВидовХарактеристик.ПраваИНастройки КАК ПВХПраваИНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваИНастройки КАК РегистрСведенийПраваИНастройки
		|		ПО (РегистрСведенийПраваИНастройки.ПравоНастройка = ПВХПраваИНастройки.Ссылка)
		|			И (РегистрСведенийПраваИНастройки.ПользовательПрофиль = &ПользовательПрофиль)
		|			И (ЕСТЬNULL(РегистрСведенийПраваИНастройки.Объект, """") = """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваИНастройки КАК РегистрСведенийПраваИНастройкиПрофиля
		|		ПО (РегистрСведенийПраваИНастройкиПрофиля.ПравоНастройка = ПВХПраваИНастройки.Ссылка)
		|			И (РегистрСведенийПраваИНастройкиПрофиля.ПользовательПрофиль = &ПрофильПользователя)
		|			И (ЕСТЬNULL(РегистрСведенийПраваИНастройкиПрофиля.Объект, """") = """")
		|ГДЕ
		|	НЕ ПВХПраваИНастройки.ПометкаУдаления
		|	И НЕ ПВХПраваИНастройки.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПраваИНастройки.УДАЛЯЕМЫЕ))
		|	И ВЫБОР
		|			КОГДА ПВХПраваИНастройки.ЭтоГруппа
		|				ТОГДА 1
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПВХПраваИНастройки.ЭтоНастройка
		|						ТОГДА 2
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ В (&НомераТиповЭлементов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПВХПраваИНастройки.ЭтоГруппа ИЕРАРХИЯ,
		|	ПВХПраваИНастройки.Код ИЕРАРХИЯ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведенийПраваИНастройки.Объект КАК Объект,
		|	РегистрСведенийПраваИНастройки.ПравоНастройка.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	РегистрСведений.ПраваИНастройки КАК РегистрСведенийПраваИНастройки
		|ГДЕ
		|	РегистрСведенийПраваИНастройки.Объект <> """"
		|	И РегистрСведенийПраваИНастройки.ПользовательПрофиль = &ПользовательПрофиль
		|ИТОГИ
		|	КОЛИЧЕСТВО(Объект)
		|ПО
		|	ИмяПредопределенныхДанных";
		
		Запрос.УстановитьПараметр("ПользовательПрофиль",  ПользовательПрофиль);
		Запрос.УстановитьПараметр("ПрофильПользователя",  ?(ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.Пользователи"), ГруппаПравИНастроекПользователя, ПользовательПрофиль));
		Запрос.УстановитьПараметр("ПоПользователю",       ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.Пользователи"));
		Запрос.УстановитьПараметр("НомераТиповЭлементов", НомераТиповЭлементов);
		Запрос.УстановитьПараметр("ПоУмолчанию",          ПоУмолчанию);
		
		ИндексСтроки = 0;
		
		// Заполняем соответствие с данными расширения доступа.
		СоответствиеОбъектов = Новый Соответствие;
		ВыборкаНастройка     = Запрос.ВыполнитьПакет()[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНастройка.Следующий() Цикл
			
			ТекущаяНастройка = Строка(ВыборкаНастройка.ИмяПредопределенныхДанных);
			ПереченьОбъектов = "";
			
			ВыборкаОбъект = ВыборкаНастройка.Выбрать();
			Пока ВыборкаОбъект.Следующий() Цикл
				
				ОбъектРасширенияДоступа = СписокВыбораОбъекта.НайтиПоЗначению(ВыборкаОбъект.Объект);
				Если ОбъектРасширенияДоступа <> Неопределено Тогда
					
					СинонимОбъекта   = ОбъектРасширенияДоступа.Представление;
					ПереченьОбъектов = ПереченьОбъектов + ?(ПереченьОбъектов = "", "", ", ") + СинонимОбъекта;
				КонецЕсли;
			КонецЦикла;
			
			СоответствиеОбъектов.Вставить(ТекущаяНастройка, ПереченьОбъектов);
		КонецЦикла;
		
		// Заполняем дерево прав и настроек.
		Выборка = Запрос.ВыполнитьПакет()[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Код) Тогда
				КодНастройки = Число(Выборка.Код);
			Иначе
				КодНастройки = 0;
			КонецЕсли;
			
			Если Выборка.ЭтоГруппа Тогда
				
				СтрокаГруппы = НастройкиЭлементы;
				
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					
					НайденныйРодитель = НайтиНастройкуВДереве(СтрокаГруппы, Выборка.Родитель);
					Если НЕ (НайденныйРодитель = Неопределено) Тогда
						
						СтрокаГруппы = НайденныйРодитель.ПолучитьЭлементы();
					КонецЕсли;
				КонецЕсли;
				
				СтрокаНастройки = СтрокаГруппы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНастройки, Выборка, "Код,Настройка,ЭтоГруппа,НомерКартинки,ИмяПредопределенныхДанных,Предопределенный");
				СтрокаНастройки.ИндексСтроки = ИндексСтроки;
				
				// +Софтфон
				Если СтрокаНастройки.ИмяПредопределенныхДанных = НСтр("ru = 'сфпАвторизацияНаСерверСофтфона'") Тогда
					СтрокаНастройки.СкрыватьКолонку = НЕ сфпПривязкаНомера;
				КонецЕсли;
				// -Софтфон
				
				СтрокаГруппыЭлементы = СтрокаНастройки.ПолучитьЭлементы();
			Иначе
				СтрокаНастройки = СтрокаГруппыЭлементы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНастройки, Выборка, "Код,Настройка,ЭтоГруппа,НомерКартинки,ЕстьРасширениеДанных,ЗначениеПоУмолчанию,ТипЗначения,ИмяПредопределенныхДанных,Предопределенный");
				СтрокаНастройки.ИндексСтроки     = ИндексСтроки;
				СтрокаНастройки.Описание         = ОписанияНастроек.Получить(КодНастройки);
				
				ТекРасширениеДанных = СоответствиеОбъектов.Получить(СтрокаНастройки.ИмяПредопределенныхДанных);
				ТекРасширениеДанныхТекст = ?(ЗначениеЗаполнено(ТекРасширениеДанных), ТекРасширениеДанных, НСтр("ru = '<настроить...>'"));	
				СтрокаНастройки.РасширениеДанных = ?(НЕ СтрокаНастройки.ЕстьРасширениеДанных, НСтр("ru = '<недоступно>'"), ТекРасширениеДанныхТекст);
				
				СтрокаНастройки.Значение = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
				СтрокаНастройки.СтроковоеПредставлениеЗначения = СокрЛП(СтрокаНастройки.Значение);
				
				// Дополнительные колонки для отображения флага вместо текстового значения в колонках со значением булевого типа.
				СтрокаНастройки.ЗначениеБулево            = ?(ТипЗнч(СтрокаНастройки.Значение)    = Тип("Булево"), СтрокаНастройки.Значение,    Неопределено);
				СтрокаНастройки.ЗначениеПоУмолчаниюБулево = ?(ТипЗнч(Выборка.ЗначениеПоУмолчанию) = Тип("Булево"), Выборка.ЗначениеПоУмолчанию, Неопределено);
				СтрокаНастройки.ЭтоБулевоЗначение         =  (ТипЗнч(СтрокаНастройки.Значение)    = Тип("Булево"));
				
				// Если перезаполняем значениями по умолчанию, поставим у всех флаг Изменено для доп. контроля при записи.
				СтрокаНастройки.Изменено = ПоУмолчанию;
				
				// +Софтфон
				Если СтрокаНастройки.ИмяПредопределенныхДанных = НСтр("ru = 'сфпЛогинНаСерверСофтФон'")
				ИЛИ СтрокаНастройки.ИмяПредопределенныхДанных = НСтр("ru = 'сфпПарольНаСерверСофтФон'") Тогда
					СтрокаНастройки.СкрыватьКолонку = НЕ сфпПривязкаНомера;
				КонецЕсли;
				// -Софтфон
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоУдалений = 0;
	УдалитьПустыеГруппы(ДеревоПравИНастроек, КоличествоУдалений);
	
	// Дерево перезаполнили - нужно хранить смещение
	// если это у нас это первый раз - устанавливаемся в ноль, иначе увеличиваемся на количество строк.
	СмещениеТекущейСтрокиДереваНастроек = СмещениеТекущейСтрокиДереваНастроек + ИндексСтроки;
	СтрокВДереве = ИндексСтроки;
	
КонецПроцедуры // ЗаполнитьДерево()

// Процедура удаляет пустые группы в дереве прав и настроек.
&НаСервере
Процедура УдалитьПустыеГруппы(Дерево, КоличествоУдалений, Знач УдаляемыеСтроки = Неопределено)
	
	УдаляемыеСтроки = Новый Массив;
	
	Для каждого ТекСтрока Из Дерево.ПолучитьЭлементы() Цикл
		
		Если ТекСтрока.ЭтоГруппа Тогда
			
			Если ТекСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				УдалитьПустыеГруппы(ТекСтрока, КоличествоУдалений, УдаляемыеСтроки);
				
			КонецЕсли;
			
			Если ТекСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
				
				УдаляемыеСтроки.Добавить(ТекСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		
		Дерево.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
		КоличествоУдалений = КоличествоУдалений + 1;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьПустыеГруппы()

// Заполняет таблицу расширения прав доступа.
//
&НаСервере
Процедура ЗаполнитьТаблицуРасширенияПравДоступа()
	
	ТаблицаРасширенияПравДоступа.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегистрСведенийПраваИНастройки.Объект,
	|	РегистрСведенийПраваИНастройки.Объект КАК ОбъектПредыдущий,
	|	РегистрСведенийПраваИНастройки.Значение,
	|	ЛОЖЬ КАК Изменено,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрСведенийПраваИНастройки.Значение) = ТИП(БУЛЕВО)
	|			ТОГДА РегистрСведенийПраваИНастройки.Значение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗначениеБулево,
	|	ПВХПраваИНастройки.ЗначениеПоУмолчанию,
	|	ПВХПраваИНастройки.ИмяПредопределенныхДанных,
	|	РегистрСведенийПраваИНастройки.ПравоНастройка.Наименование КАК Настройка,
	|	РегистрСведенийПраваИНастройки.ПользовательПрофиль КАК ПользовательПрофиль
	|ИЗ
	|	РегистрСведений.ПраваИНастройки КАК РегистрСведенийПраваИНастройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПраваИНастройки КАК ПВХПраваИНастройки
	|		ПО РегистрСведенийПраваИНастройки.ПравоНастройка = ПВХПраваИНастройки.Ссылка
	|ГДЕ
	|	ПВХПраваИНастройки.РасширениеДанных
	|	И РегистрСведенийПраваИНастройки.Объект <> """"
	|	И РегистрСведенийПраваИНастройки.ПользовательПрофиль В(&ПользовательПрофиль)");
	
	Если ГрупповаяНастройка Тогда
		Запрос.УстановитьПараметр("ПользовательПрофиль", ГрупповаяНастройкаПользователиГруппы.Выгрузить());
	Иначе
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(ПользовательПрофиль);
		Запрос.УстановитьПараметр("ПользовательПрофиль", МассивПользователей);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ СписокВыбораОбъекта.НайтиПоЗначению(Выборка.Объект) = Неопределено Тогда
			СтрокаРасширенияПравДоступа = ТаблицаРасширенияПравДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасширенияПравДоступа, Выборка);
			СтрокаРасширенияПравДоступа.ИдПользователя = СтрЗаменить(Выборка.ПользовательПрофиль.УникальныйИдентификатор(),"-","_");
			СтрокаРасширенияПравДоступа.СинонимОбъекта = СписокВыбораОбъекта.НайтиПоЗначению(СтрокаРасширенияПравДоступа.Объект).Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьТаблицуРасширенияПравДоступа()

// Процедура добавляет записи в регистр настроек пользователей.
//
// Параметры:
//	НастройкиЭлементы	- КоллекцияСтрокДереваЗначений	- Строки настроек.
//
&НаСервере
Процедура ЗаписатьПраваИНастройки(НастройкиЭлементы)
	
	Если ГрупповаяНастройка Тогда
		
		Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
			
			Если СтрокаНастроек.ЭтоГруппа Тогда
				
				ЗаписатьПраваИНастройки(СтрокаНастроек.ПолучитьЭлементы());
				
			Иначе
				
				Для Каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл
					
					ИдПользователя = СтрЗаменить(Строка.Пользователь.УникальныйИдентификатор(),"-","_");
					
					// Записываем только измененные настройки.
					Если СтрокаНастроек["Изменено" + ИдПользователя] Тогда
						
						ПараметрыЭлементаПВХ = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(СтрокаНастроек.ИмяПредопределенныхДанных, "ПраваИНастройки");
						ПравоНастройка       = ПараметрыЭлементаПВХ.Ссылка;
						ЗначениеНастройки    = СтрокаНастроек.ТипЗначения.ПривестиЗначение(СтрокаНастроек["Значение" + ИдПользователя]);
						ЗначениеПоУмолчаниюГруппы = СтрокаНастроек.ТипЗначения.ПривестиЗначение(СтрокаНастроек.ЗначениеПоУмолчанию);
						
						РСПраваИНастройки = РегистрыСведений.ПраваИНастройки.СоздатьНаборЗаписей();
						
						РСПраваИНастройки.Отбор.ПользовательПрофиль.Установить(Строка.Пользователь);
						РСПраваИНастройки.Отбор.ПравоНастройка.Установить(ПравоНастройка);
						РСПраваИНастройки.Отбор.Объект.Установить("");
						
						Если ЗначениеНастройки <> ЗначениеПоУмолчаниюГруппы Тогда
							
							ЗаписьНастройки = РСПраваИНастройки.Добавить();
							
							ЗаписьНастройки.ПользовательПрофиль = Строка.Пользователь;
							ЗаписьНастройки.ПравоНастройка      = ПравоНастройка;
							ЗаписьНастройки.Объект              = "";
							ЗаписьНастройки.Значение            = ЗначениеНастройки;
						КонецЕсли;
						
						Попытка
							РСПраваИНастройки.Записать();
							
							Если Строка.Пользователь = АвторИзмененияПрав ИЛИ Строка.Пользователь = ГруппаПравАвтора Тогда
								ОбновитьПравоВКэше(ПравоНастройка, ЗначениеНастройки, "");
							КонецЕсли;
							
							// При успешной записи и обновлении кэша сбрасываем флаг изменения настройки.
							СтрокаНастроек["Изменено" + ИдПользователя] = Ложь;
						Исключение
							ОписаниеОшибки    = ОписаниеОшибки();
							СообщениеОбОшибке = НСтр("ru = 'Не удалось записать настройки пользователя.'") + Символы.ПС + ОписаниеОшибки;
							ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
						КонецПопытки;
						
						Если ТипЗнч(Строка.Пользователь) = Тип("СправочникСсылка.ГруппыПравИНастроек")
							И НЕ СтрокаНастроек["Изменено" + ИдПользователя] Тогда
							УдалитьСовпаденияПравИНастроекГруппыИПользователя(Строка.Пользователь, ЗначениеНастройки, ПравоНастройка);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ПользовательПрофиль) Тогда
		
		Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
			
			Если СтрокаНастроек.ЭтоГруппа Тогда
				
				ЗаписатьПраваИНастройки(СтрокаНастроек.ПолучитьЭлементы());
				
			Иначе
				
				// Записываем только измененные настройки.
				Если СтрокаНастроек.Изменено Тогда
					
					ПараметрыЭлементаПВХ = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(СтрокаНастроек.ИмяПредопределенныхДанных, "ПраваИНастройки");
					ПравоНастройка       = ПараметрыЭлементаПВХ.Ссылка;
					ЗначениеНастройки    = СтрокаНастроек.ТипЗначения.ПривестиЗначение(СтрокаНастроек.Значение);
					ЗначениеПоУмолчаниюГруппы = СтрокаНастроек.ТипЗначения.ПривестиЗначение(СтрокаНастроек.ЗначениеПоУмолчанию);
					
					РСПраваИНастройки = РегистрыСведений.ПраваИНастройки.СоздатьНаборЗаписей();
					
					РСПраваИНастройки.Отбор.ПользовательПрофиль.Установить(ПользовательПрофиль);
					РСПраваИНастройки.Отбор.ПравоНастройка.Установить(ПравоНастройка);
					РСПраваИНастройки.Отбор.Объект.Установить("");
					
					Если ЗначениеНастройки <> ЗначениеПоУмолчаниюГруппы Тогда
						
						ЗаписьНастройки = РСПраваИНастройки.Добавить();
						
						ЗаписьНастройки.ПользовательПрофиль = ПользовательПрофиль;
						ЗаписьНастройки.ПравоНастройка      = ПравоНастройка;
						ЗаписьНастройки.Объект              = "";
						ЗаписьНастройки.Значение            = ЗначениеНастройки;
					КонецЕсли;
					
					Попытка
						РСПраваИНастройки.Записать();
						
						// Для текущего пользователя обновим права в кэше, если они были изменены.
						Если ПользовательПрофиль = АвторИзмененияПрав ИЛИ ПользовательПрофиль = ГруппаПравАвтора Тогда
							ОбновитьПравоВКэше(ПравоНастройка, ЗначениеНастройки, "");
						КонецЕсли;
						
						// При успешной записи и обновлении кэша сбрасываем флаг изменения настройки.
						СтрокаНастроек.Изменено = Ложь;
					Исключение
						ОписаниеОшибки    = ОписаниеОшибки();
						СообщениеОбОшибке = НСтр("ru = 'Не удалось записать настройки пользователя.'") + Символы.ПС + ОписаниеОшибки;
						ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
					КонецПопытки;
					
					Если ТипЗнч(ПользовательПрофиль) = Тип("СправочникСсылка.ГруппыПравИНастроек")
						И НЕ СтрокаНастроек.Изменено Тогда
						УдалитьСовпаденияПравИНастроекГруппыИПользователя(ПользовательПрофиль, ЗначениеНастройки, ПравоНастройка);
				    КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры //ЗаписатьПраваИНастройки()

// Если значение по Группе совпадает со Значением по Пользователю, запись по пользователю удаляем.
//
&НаСервере
Процедура УдалитьСовпаденияПравИНастроекГруппыИПользователя(ГруппаПравИНастроек, ЗначениеНастройки, ПравоНастройка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаПользователйГруппы
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ГруппаПравИНастроек = &ГруппаНастроек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваИНастройки.ПользовательПрофиль КАК ПользовательПрофиль
		|ИЗ
		|	РегистрСведений.ПраваИНастройки КАК ПраваИНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПользователйГруппы КАК ТаблицаПользователйГруппы
		|		ПО ПраваИНастройки.ПользовательПрофиль = ТаблицаПользователйГруппы.Ссылка
		|ГДЕ
		|	ПраваИНастройки.ПользовательПрофиль ССЫЛКА Справочник.Пользователи
		|	И ПраваИНастройки.Значение = &Значение
		|	И ПраваИНастройки.ПравоНастройка = &ПравоНастройка"
	);
	Запрос.УстановитьПараметр("Значение", ЗначениеНастройки);
	Запрос.УстановитьПараметр("ПравоНастройка", ПравоНастройка);
	Запрос.УстановитьПараметр("ГруппаНастроек", ГруппаПравИНастроек);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РСПраваИНастройки = РегистрыСведений.ПраваИНастройки.СоздатьНаборЗаписей();
		РСПраваИНастройки.Отбор.ПользовательПрофиль.Установить(Выборка.ПользовательПрофиль);
		РСПраваИНастройки.Отбор.ПравоНастройка.Установить(ПравоНастройка);
		РСПраваИНастройки.Отбор.Объект.Установить("");
		
		Попытка
			
			РСПраваИНастройки.Записать();
			
		Исключение
			
			ИмяСобытия = НСтр("ru = 'Обновление настроек пользователя'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ВызватьИсключение НСтр("ru = 'Не удалось записать настройки пользователя. Подробнее в журнале регистрации'");
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры //УдалитьСовпаденияПравИНастроекГруппыИПользователя()

// Процедура добавляет записи расширения доступа в регистр настроек пользователей.
&НаСервере
Процедура ЗаписатьРасширенияПравДоступа(Пользователь)
	
	// Запишем расширение прав доступа (только измененные строки)
	Для Каждого СтрокаРасширенияПравДоступа Из ТаблицаРасширенияПравДоступа.НайтиСтроки(Новый Структура("Изменено,ИдПользователя", Истина,СтрЗаменить(Пользователь.УникальныйИдентификатор(),"-","_"))) Цикл
		
		РСПраваИНастройки = РегистрыСведений.ПраваИНастройки.СоздатьМенеджерЗаписи();
		
		РСПраваИНастройки.ПользовательПрофиль = Пользователь;
		РСПраваИНастройки.ПравоНастройка      = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(СтрокаРасширенияПравДоступа.ИмяПредопределенныхДанных, "ПраваИНастройки").Ссылка;
		
		Если ЗначениеЗаполнено(СтрокаРасширенияПравДоступа.ОбъектПредыдущий) Тогда
			
			РСПраваИНастройки.Объект              = СтрокаРасширенияПравДоступа.ОбъектПредыдущий;
			РСПраваИНастройки.Прочитать();
		КонецЕсли;
		
		Если НЕ РСПраваИНастройки.Выбран() Тогда
			РСПраваИНастройки.ПользовательПрофиль = Пользователь;
			РСПраваИНастройки.ПравоНастройка      = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(СтрокаРасширенияПравДоступа.ИмяПредопределенныхДанных, "ПраваИНастройки").Ссылка;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РСПраваИНастройки, СтрокаРасширенияПравДоступа, "Объект,Значение");
		
		Попытка
			РСПраваИНастройки.Записать();
			ОбновитьПравоВКэше(РСПраваИНастройки.ПравоНастройка, РСПраваИНастройки.Значение, РСПраваИНастройки.Объект);
			
			СтрокаРасширенияПравДоступа.Изменено           = Ложь;
			СтрокаРасширенияПравДоступа.ОбъектПредыдущий = СтрокаРасширенияПравДоступа.Объект;
		Исключение
			ОписаниеОшибки    = ОписаниеОшибки();
			СообщениеОбОшибке = НСтр("ru = 'Не удалось записать расширения прав доступа.'") + Символы.ПС + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		КонецПопытки;
	КонецЦикла;
	
	// Удалим с регистра ПраваИНастройки расширение прав доступа
	Для Каждого СтрокаРасширенияПравДоступа Из ТаблицаУдаляемыхРасширенийПравДоступа.НайтиСтроки(Новый Структура("ИдПользователя", СтрЗаменить(Пользователь.УникальныйИдентификатор(),"-","_"))) Цикл
		
		РСПраваИНастройки = РегистрыСведений.ПраваИНастройки.СоздатьМенеджерЗаписи();
		
		РСПраваИНастройки.ПользовательПрофиль = Пользователь;
		РСПраваИНастройки.ПравоНастройка      = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(СтрокаРасширенияПравДоступа.ИмяПредопределенныхДанных, "ПраваИНастройки").Ссылка;
		
		РСПраваИНастройки.Объект              = СтрокаРасширенияПравДоступа.Объект;
		РСПраваИНастройки.Прочитать();
		
		РСПраваИНастройки.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры //ЗаписатьРасширенияПравДоступа()

// Процедура вызывает запись настроек.
&НаСервере
Функция СохранитьНастройки()
	
	Результат = Истина;
	
	Если РазрешитьИзменениеПравДоступа ИЛИ РазрешитьИзменениеЛичныхНастроек Тогда
		ЗаписатьПраваИНастройки(ДеревоПравИНастроек.ПолучитьЭлементы());
		Если ГрупповаяНастройка Тогда
			Для Каждого Строка Из ГрупповаяНастройкаПользователиГруппы Цикл
				ЗаписатьРасширенияПравДоступа(Строка.Пользователь);
			КонецЦикла;
		Иначе
			ЗаписатьРасширенияПравДоступа(ПользовательПрофиль);
		КонецЕсли;
		ТаблицаУдаляемыхРасширенийПравДоступа.Очистить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СохранитьНастройки()

// Рекурсивный поиск строк дерева формы
//
// Параметры:
//  ДеревоФормы           - ДанныеФормыДерево - Дерево, в котором производится поиск
//  СтруктураОтбора       - Структура - Ключ - имя колонки, в которой идет поиск, значение - искомое значение
//  МассивНайденныхСтрок  - Массив    - Массив, в котором накапливаются найденные строки
//  ТочныйПоиск           - Булево    - Истина - поиск по точному совпадению значений,
//                                      Ложь - по вхождению искомой строки в строчное представление значения ячейки
//  ИскатьВГруппах        - Булево    - Истина - в результатах поиска будут присутствовать группы и элементы,
//                                      Ложь - в результатах поиска будут присутствовать только элементы.
//
&НаКлиенте
Процедура НайтиСтрокиВДеревеНаКлиенте(ДеревоФормы, СтруктураОтбора, МассивНайденныхСтрок, ТочныйПоиск = Истина, ИскатьВГруппах = Ложь)
	
	// Проверки пройдены успешно, перебираем вложенные элементы дерева.
	ЭлементыДерева = ДеревоФормы.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		// Проверяем флаг поиска в группах.
		Если ИскатьВГруппах ИЛИ НЕ СтрокаДерева.ЭтоГруппа Тогда
			
			// Инициализируем флаг успешного поиска.
			СтрокаСоответствуетВсемПараметрамОтбора = Истина;
			
			// Обходим все элементы структуры поиска
			Для Каждого ЭлементСтруктурыОтбора Из СтруктураОтбора Цикл
				
				ВидимоВДереве = (РежимОтображенияПравИНастроек = "ОтображатьПраваИНастройки" ИЛИ СтрокаДерева.НомерКартинки = 0 И РежимОтображенияПравИНастроек = "ОтображатьПрава" ИЛИ СтрокаДерева.НомерКартинки = 2 И РежимОтображенияПравИНастроек = "ОтображатьНастройки"); 
				
				// Накапливаем значение успешности поиска в зависимости от флага точного соответствия.
				СтрокаСоответствуетВсемПараметрамОтбора = СтрокаСоответствуетВсемПараметрамОтбора
					И ВидимоВДереве
					И (ТочныйПоиск И СтрокаДерева[ЭлементСтруктурыОтбора.Ключ] = ЭлементСтруктурыОтбора.Значение)
					ИЛИ (НЕ ТочныйПоиск И ЗначениеЗаполнено(ЭлементСтруктурыОтбора.Значение)
						И СтрНайти(ВРег(СокрЛП(СтрокаДерева[ЭлементСтруктурыОтбора.Ключ])), ВРег(СокрЛП(ЭлементСтруктурыОтбора.Значение))) > 0);
			КонецЦикла;
			
			// Если все значения удовлетворяют условиям поиска, добавляем строку в массив найденных строк.
			Если СтрокаСоответствуетВсемПараметрамОтбора Тогда
				МассивНайденныхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
		// Для группы элементов вызываем эту процедуру рекурсивно.
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			НайтиСтрокиВДеревеНаКлиенте(СтрокаДерева, СтруктураОтбора, МассивНайденныхСтрок, ТочныйПоиск, ИскатьВГруппах);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиСтрокиВДеревеНаКлиенте()

// Поиск и попытка исправления (поиск по наименованию) загруженных некорректных ссылочных значений.
//
// Параметры:
//  ДеревоФормы  - ДанныеФормыДерево - Дерево, загруженное из файла настроек.
//
&НаСервере
Процедура ПроверитьКорректностьСсылочныхЗначений(ДеревоФормы)
	
	МассивСтрокСНекорректнымиСсылками = Новый Массив;
	
	// Ищем битые ссылки в полученном дереве настроек.
	НайтиНекорректныеСсылкиВДереве(ДеревоФормы, МассивСтрокСНекорректнымиСсылками);
	
	Для Каждого СтрокаДерева Из МассивСтрокСНекорректнымиСсылками Цикл
		
		// Получаем менеджер объекта по ссылке.
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаДерева.Значение);
		
		// Пробуем найти объект по наименованию.
		НайденноеЗначение = МенеджерОбъекта.НайтиПоНаименованию(СтрокаДерева.СтроковоеПредставлениеЗначения, Истина);
		
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			// Нашли подходящий объект, подставляем его в настройку.
			СтрокаДерева.Значение = НайденноеЗначение;
		Иначе
			// Объект не найден, устанавливаем значение по умолчанию и сообщаем пользователю
			СтрокаДерева.Значение = СтрокаДерева.ЗначениеПоУмолчанию;
			ТекстСообщения = НСтр("ru = 'Ошибка при загрузке значения настройки: «%1»."
				+ Символы.ПС + "Не найден элемент «%2» (%3).'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					ТекстСообщения,
					СтрокаДерева.Настройка,
					СтрокаДерева.СтроковоеПредставлениеЗначения,
					СтрокаДерева.ТипЗначения
				)
			);

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКорректностьСсылочныхЗначений()

// Рекурсивный поиск некорректных ссылочных значений
//
// Параметры:
//  ДеревоФормы                        - ДанныеФормыДерево - Дерево, в котором производится поиск
//  МассивСтрокСНекорректнымиСсылками  - Массив - Массив, в котором накапливаются строки с некорректными значениями.
//
&НаСервере
Процедура НайтиНекорректныеСсылкиВДереве(ДеревоФормы, МассивСтрокСНекорректнымиСсылками)
	
	// Перебираем вложенные элементы дерева.
	ЭлементыДерева = ДеревоФормы.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			// Для группы элементов вызываем эту процедуру рекурсивно.
			НайтиНекорректныеСсылкиВДереве(СтрокаДерева, МассивСтрокСНекорректнымиСсылками);
		Иначе
			// Проверяем принадлежность типа значения к справочникам (в данный момент - единственный ссылочный тип значений).
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаДерева.Значение)) Тогда
				
				// Если невозможно получить объект по ссылке, его нет в базе, добавляем строку в массив для дальнейшей обработки.
				Если ЗначениеЗаполнено(СтрокаДерева.Значение) И СтрокаДерева.Значение.ПолучитьОбъект() = Неопределено Тогда
					МассивСтрокСНекорректнымиСсылками.Добавить(СтрокаДерева);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиНекорректныеСсылкиВДереве()

// Рекурсивная процедура загрузки измененных значений из файла в ДеревоНастроек
//
// Параметры:
//  ДеревоИсточник  - ДанныеФормыДерево   - Дерево настроек, полученное из файла
//  ДеревоПриемник  - ДанныеФормыДерево   - Дерево настроек в форме.
//
&НаСервере
Процедура ЗагрузитьИзмененныеНастройкиВДерево(ДеревоИсточник, ДеревоПриемник)
	
	// Получаем элементы деревьев
	ЭлементыДереваИсточника = ДеревоИсточник.ПолучитьЭлементы();
	ЭлементыДереваПриемника = ДеревоПриемник.ПолучитьЭлементы();
	ИдПользователя = СтрЗаменить(ПользовательПрофиль.УникальныйИдентификатор(), "-", "_");
	
	Для Каждого ТекСтрокаДереваПриемника Из ЭлементыДереваПриемника Цикл
		
		// Ищем строку дерева источника, соответствующую текущей строке дерева формы.
		ТекЭлементПВХ = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(ТекСтрокаДереваПриемника.ИмяПредопределенныхДанных, "ПраваИНастройки").Ссылка;
		СтрокаДереваИсточника = НайтиНастройкуВДереве(ЭлементыДереваИсточника, ТекЭлементПВХ, Ложь);
		
		Если СтрокаДереваИсточника <> Неопределено Тогда
			
			Если ТекСтрокаДереваПриемника.ЭтоГруппа Тогда
				                          
				// Для группы вызываем функцию рекурсивно. Передаем ДеревоИсточник целиком для полного поиска по нему всегда.
				ЗагрузитьИзмененныеНастройкиВДерево(ДеревоИсточник, ТекСтрокаДереваПриемника);
			Иначе
				
				Если ЗапрещеноИзменятьНастройкуПравДоступа(ТекСтрокаДереваПриемника) Тогда
				
					Продолжить;
				
				КонецЕсли;
				
				// Отдельный элемент дерева проверяем на изменение значения настройки
				Если ТекСтрокаДереваПриемника.Значение <> СтрокаДереваИсточника.Значение 
					ИЛИ ТекСтрокаДереваПриемника.РасширениеДанных <> СтрокаДереваИсточника.РасширениеДанных
					ИЛИ ТаблицыРасширенияПравДоступаРазличаются(СтрокаДереваИсточника, ИдПользователя) Тогда
					
					// Значение настройки изменилось, меняем его в дереве формы и взводим флаг измененной настройки.
					ТекСтрокаДереваПриемника.Значение             = СтрокаДереваИсточника.Значение;
					ТекСтрокаДереваПриемника.ЗначениеБулево       = СтрокаДереваИсточника.ЗначениеБулево;
					ТекСтрокаДереваПриемника.ЕстьРасширениеДанных = СтрокаДереваИсточника.ЕстьРасширениеДанных;
					ТекСтрокаДереваПриемника.РасширениеДанных     = СтрокаДереваИсточника.РасширениеДанных;
					ТекСтрокаДереваПриемника.Изменено             = Истина;
					Модифицированность                            = Истина;
					
					// получаем текущую таблицу расширений
					ТекТаблицаРасширенияПравДоступа = СтрокаДереваИсточника.ТаблицаРасширенияПравДоступа;
					
					// Получаем перечень объектов для обратной подстановки в дерево настроек.
					ПереченьОбъектов = "";
					Для Каждого СтрокаРасширенияПравДоступа Из ТекТаблицаРасширенияПравДоступа Цикл
						ПереченьОбъектов = ПереченьОбъектов + ?(ПереченьОбъектов = "", "", ", ") + СтрокаРасширенияПравДоступа.СинонимОбъекта;
						СтрокаРасширенияПравДоступа.Изменено = Истина;
					КонецЦикла;
					
					ЗначениеЯчейкиДереваНастроек = ?(ЗначениеЗаполнено(ПереченьОбъектов), ПереченьОбъектов, НСтр("ru = '<настроить...>'"));
					
					// определяем основные параметры
					ОсновныеПараметры = Новый Структура;
					ОсновныеПараметры.Вставить("ЗначениеЯчейкиДереваНастроек", ЗначениеЯчейкиДереваНастроек);
					ОсновныеПараметры.Вставить("ИзмененныеРасширенияПравДоступа", ТекТаблицаРасширенияПравДоступа);
					ОсновныеПараметры.Вставить("ПравоНастройкаНаименование", СтрокаДереваИсточника.Настройка);
					
					// определяем дополнительные параметры
					ДополнительныеПараметры = Новый Структура("ТекущаяНастройка, ИдПользователя",
						ТекСтрокаДереваПриемника, ИдПользователя);
					// заполняем
					РасширениеПравДоступаПриИзмененииНаСервере(ОсновныеПараметры, ДополнительныеПараметры);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗагрузитьИзмененныеНастройкиВДерево()

// Процедура создания реквизитов и элементов
//
&НаСервере
Процедура СоздатьКолонки(ИдПользователя,Наименование)
	
	Если НЕ Элементы.Найти("ДеревоПравИНастроек"+ИдПользователя) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим новые колонки
	НоваяГруппаКолонок           = Элементы.Добавить("ДеревоПравИНастроек"+ИдПользователя, Тип("ГруппаФормы"), Элементы.ДеревоПравИНастроек);
	НоваяГруппаКолонок.Вид       = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонок.Заголовок = Наименование;
	НоваяГруппаКолонок.ОтображатьВШапке = Истина;
	НоваяГруппаКолонок.Группировка = ГруппировкаКолонок.Горизонтальная;
	Если ИдПользователя = "ВсеПользователи" Тогда
		НоваяГруппаКолонок.Подсказка = Наименование;
		НоваяГруппаКолонок.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		НоваяГруппаКолонок.Ширина = 10;
		НоваяГруппаКолонок.РастягиватьПоГоризонтали = Ложь;
	Иначе
		НоваяГруппаКолонок.Подсказка = "Пользователь """ + Наименование + """";
		НоваяГруппаКолонок.Ширина = 25;
	КонецЕсли;
	
	НоваяГруппаКолонокЗначениеСФлагом           = Элементы.Добавить("ДеревоПравИНастроекЗначениеСФлагом"+ИдПользователя, Тип("ГруппаФормы"), НоваяГруппаКолонок);
	НоваяГруппаКолонокЗначениеСФлагом.Вид       = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонокЗначениеСФлагом.ОтображатьВШапке = Ложь;
	НоваяГруппаКолонокЗначениеСФлагом.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаКолонокЗначениеСФлагом.Ширина = 10;
	НоваяГруппаКолонокЗначениеСФлагом.РастягиватьПоГоризонтали = Ложь;
	
	Если НЕ ИдПользователя = "ВсеПользователи" Тогда
		НоваяГруппаКолонокРасширениеДанныхСФлагом           = Элементы.Добавить("ДеревоПравИНастроекРасширениеДанныхСФлагом"+ИдПользователя, Тип("ГруппаФормы"), НоваяГруппаКолонок);
		НоваяГруппаКолонокРасширениеДанныхСФлагом.Вид       = ВидГруппыФормы.ГруппаКолонок;
		НоваяГруппаКолонокРасширениеДанныхСФлагом.ОтображатьВШапке = Ложь;
		НоваяГруппаКолонокРасширениеДанныхСФлагом.Группировка = ГруппировкаКолонок.Горизонтальная;
		НоваяГруппаКолонокРасширениеДанныхСФлагом.Ширина = 15;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ИдПользователя = "ВсеПользователи" Тогда
		НовыйРеквизит = Новый РеквизитФормы("ЗначениеБулево"+ИдПользователя, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)), "ДеревоПравИНастроек","Значение");
	Иначе	
		НовыйРеквизит = Новый РеквизитФормы("ЗначениеБулево"+ИдПользователя, Новый ОписаниеТипов("Булево"), "ДеревоПравИНастроек","Значение");
	КонецЕсли;
	МассивРеквизитов.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Значение"+ИдПользователя, Метаданные.ПланыВидовХарактеристик.ПраваИНастройки.Тип, "ДеревоПравИНастроек", "Значение");
	МассивРеквизитов.Добавить(НовыйРеквизит);
	Если НЕ ИдПользователя = "ВсеПользователи" Тогда
		НовыйРеквизит = Новый РеквизитФормы("РасширениеДанных"+ИдПользователя, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()),  "ДеревоПравИНастроек", "Расширение");
		МассивРеквизитов.Добавить(НовыйРеквизит);
	КонецЕсли;
	НовыйРеквизит = Новый РеквизитФормы("Изменено"+ИдПользователя, Новый ОписаниеТипов("Булево"), "ДеревоПравИНастроек","Изменено");
	МассивРеквизитов.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтроковоеПредставлениеЗначения"+ИдПользователя, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()), "ДеревоПравИНастроек","СтроковоеПредставлениеЗначения");
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	Для Индекс = 0 По МассивРеквизитов.Количество() - 3 Цикл
		
		ТекСтрока = МассивРеквизитов[Индекс];
		
		// Создадим новые колонки
		Если Индекс = 0 Тогда
			НоваяКолонка = Элементы.Добавить("ДеревоПравИНастроек"+ТекСтрока.Имя, Тип("ПолеФормы"), НоваяГруппаКолонокЗначениеСФлагом);
			НоваяКолонка.Вид=ВидПоляФормы.ПолеФлажка;
			Если ИдПользователя = "ВсеПользователи" Тогда
				НоваяКолонка.ТриСостояния = Истина;
			КонецЕсли;
			НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ДеревоПравИНастроекЗначениеБулевоПриИзменении");
			НоваяКолонка.ПутьКДанным = "ДеревоПравИНастроек."+ТекСтрока.Имя;
		Иначе
			Если Индекс = 2 Тогда
				НоваяКолонка = Элементы.Добавить("ДеревоПравИНастроек"+ТекСтрока.Имя, Тип("ПолеФормы"), НоваяГруппаКолонокРасширениеДанныхСФлагом);
				НоваяКолонка.Вид=ВидПоляФормы.ПолеНадписи;
				НоваяКолонка.Ширина = 15;
			Иначе
				НоваяКолонка = Элементы.Добавить("ДеревоПравИНастроек"+ТекСтрока.Имя, Тип("ПолеФормы"), НоваяГруппаКолонокЗначениеСФлагом);
				НоваяКолонка.Вид=ВидПоляФормы.ПолеВвода;
				НоваяКолонка.Ширина = 10;
				НоваяКолонка.ВыбиратьТип = Ложь;
				НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
			КонецЕсли;
			Если ИдПользователя = "ВсеПользователи" И СтрНайти(ТекСтрока.Имя, "Значение")>0 Тогда
				НоваяКолонка.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ДеревоПравИНастроекЗначениеОбработкаВыбора");
				НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ДеревоПравИНастроекЗначениеПриИзменении");
				НоваяКолонка.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ДеревоПравИНастроекЗначениеОкончаниеВводаТекста");
			Иначе
				НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ДеревоПравИНастроекЗначениеПриИзменении");
			КонецЕсли;
			НоваяКолонка.ПутьКДанным = "ДеревоПравИНастроек."+ТекСтрока.Имя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СоздатьКолонки()

// Процедура удаления реквизитов и элементов
&НаСервере
Процедура УдалитьКолонки(ИдПользователя)
	
	// Уберем старые колонки с формы
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ДеревоПравИНастроек.Значение"+ИдПользователя);
	МассивРеквизитов.Добавить("ДеревоПравИНастроек.ЗначениеБулево"+ИдПользователя);
	Если НЕ ИдПользователя = "ВсеПользователи" Тогда
		МассивРеквизитов.Добавить("ДеревоПравИНастроек.РасширениеДанных"+ИдПользователя);
	КонецЕсли;
	МассивРеквизитов.Добавить("ДеревоПравИНастроек.Изменено"+ИдПользователя);
	МассивРеквизитов.Добавить("ДеревоПравИНастроек.СтроковоеПредставлениеЗначения"+ИдПользователя);
	
	ИзменитьРеквизиты(, МассивРеквизитов);
	
	// Удалим старые колонки
	Если НЕ Элементы.Найти("ДеревоПравИНастроек"+ИдПользователя) = Неопределено Тогда
		Элементы.Удалить(Элементы["ДеревоПравИНастроек"+ИдПользователя]);
	КонецЕсли;
	
КонецПроцедуры // СоздатьКолонки()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.Изменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Цвет текста, только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначениеБулево");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначение");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекРасширениеДанных");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекНастройка");
	
	Группа1Уровня = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа1Уровня.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Группа2Уровня = Группа1Уровня.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа2Уровня.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = Группа2Уровня.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.НомерКартинки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Группа3Уровня = Группа2Уровня.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа3Уровня.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = Группа3Уровня.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РазрешитьИзменениеПравДоступа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Группа4Уровня = Группа3Уровня.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа4Уровня.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = Группа4Уровня.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВыбранПользователь");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Группа4Уровня.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользованиеПерсональногоДоступа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Группа2Уровня = Группа1Уровня.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа2Уровня.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = Группа2Уровня.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.НомерКартинки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Группа3Уровня = Группа2Уровня.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа3Уровня.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	Группа4Уровня = Группа3Уровня.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа4Уровня.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = Группа4Уровня.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РазрешитьИзменениеПравДоступа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Группа4Уровня.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РазрешитьИзменениеЛичныхНастроек");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначениеБулево");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначениеПоУмолчаниюБулево");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.ЭтоБулевоЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначение");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначениеПоУмолчанию");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.ЭтоБулевоЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекРасширениеДанных");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.ЕстьРасширениеДанных");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТекПользователь");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТекГруппаПравИНастроек");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначениеБулево");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначение");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекРасширениеДанных");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ГрупповаяНастройка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.СкрыватьКолонку");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроекЗначение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПравИНастроек.ИмяПредопределенныхДанных");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "сфпПарольНаСерверСофтФон";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "********");
	
КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
Процедура ЗаполнитьУчастникамиГруппыНастроек(ГруппаПравИНастроек)
	
	ДеревоПользователей = ПользователиГруппы.ПолучитьЭлементы();
	ДеревоПользователей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ГруппаПравИНастроек = &ГруппаПравИНастроек"; 
	Запрос.УстановитьПараметр("ГруппаПравИНастроек", ГруппаПравИНастроек);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДеревоПользователей.Добавить();
		НоваяСтрока.Пользователь = Выборка.Пользователь;
		НоваяСтрока.НомерКартинки = 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапрещеноИзменятьНастройкуПравДоступа(ТекСтрокаДереваПриемника)

	Запрещено = Ложь;
	
	ЭтоПраво     = ТекСтрокаДереваПриемника.НомерКартинки = 0;
	ЭтоНастройка = ТекСтрокаДереваПриемника.НомерКартинки = 2;
	
	// Проверка возможности изменять расширения прав доступа для права
	Если ЭтоПраво Тогда
	
		Запрещено = (НЕ РазрешитьИзменениеПравДоступа ИЛИ (ВыбранПользователь = 0 И НЕ ИспользованиеПерсональногоДоступа));
	
	КонецЕсли;
	
	// Проверка возможности изменять расширения прав доступа для настройки
	Если НЕ Запрещено И ЭтоНастройка Тогда
	
		Запрещено = НЕ(РазрешитьИзменениеПравДоступа ИЛИ РазрешитьИзменениеЛичныхНастроек);
	
	КонецЕсли;
	
	Возврат Запрещено;

КонецФункции

&НаСервере
Функция ТаблицыРасширенияПравДоступаРазличаются(СтрокаДереваИсточника, ИдПользователя)

	ЕстьРазличия = Ложь;
	
	ОтборПарава = Новый Структура("Настройка,ИдПользователя", СтрокаДереваИсточника.Настройка, ИдПользователя);
	СтарыеРасширенияТекущегоПрава = ТаблицаРасширенияПравДоступа.НайтиСтроки(ОтборПарава);
	
	НовыеРасширенияТекущегоПрава = СтрокаДереваИсточника.ТаблицаРасширенияПравДоступа;
	
	// Обе таблицы не заполнены, значит отличий нет.
	Если НЕ СтарыеРасширенияТекущегоПрава.Количество() И НЕ НовыеРасширенияТекущегоПрава.Количество() Тогда
	
		Возврат ЕстьРазличия;
	
	КонецЕсли;
	
	// Количество элементов в таблицах отличается
	Если СтарыеРасширенияТекущегоПрава.Количество() <> НовыеРасширенияТекущегоПрава.Количество() Тогда
	
		ЕстьРазличия = Истина;
		
	Иначе // Проверка на различие значений настроек
		
		Для Каждого СтароеРасширение Из СтарыеРасширенияТекущегоПрава Цикл
		
			НовоеРасширение = НовыеРасширенияТекущегоПрава.НайтиСтроки(Новый Структура("Объект", СтароеРасширение.Объект));
			
			Если НовоеРасширение.Количество() = 0
				ИЛИ НовоеРасширение[0].Значение <> СтароеРасширение.Значение Тогда
			
				ЕстьРазличия = Истина;
				Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ЕстьРазличия;

КонецФункции

&НаСервере
Процедура НастроитьВыводПодтвержденияПриВыходе(Значение)
	
	Настройки = Новый Структура("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Значение);
	ОбщегоНазначения.СохранитьПерсональныеНастройки(Настройки); 
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПравоДляСправочников(ИмяПрава)
	
	ПраваДляСправочника = Новый Массив;
	ПраваДляСправочника.Добавить("РазрешитьРедактированиеКодовСправочников");
	
	Возврат ПраваДляСправочника.Найти(ИмяПрава) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДеревоПравИНастроекЗначениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравИНастроекЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти
