
#Область ОбработчикиСобытийФормы

// Создание формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьСхемуКомпановкиДанных();
	
	ОбновитьПредставлениеДатыОтчета();
	
КонецПроцедуры

// Открытие формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаОтчета = ТекущаяДата();
	УстановитьПериодОтчета();
	
КонецПроцедуры

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	// Производим сохранение параметров отображения элементов настройки
	Настройки.Вставить("ВидимостьНастроек", ВидимостьНастроек);
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ВидимостьНастроек = Настройки.Получить("ВидимостьНастроек");
	
	ОбновитьВидимостьНастроек();
		
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Изменение режима отчета
//
&НаКлиенте
Процедура РежимОтчетаПриИзменении(Элемент)
	
	УстановитьПериодОтчета();
	ОбновитьПредставлениеДатыОтчета();
	
КонецПроцедуры

// Изменение даты отчета
//
&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	
	УстановитьПериодОтчета();
	
КонецПроцедуры

// Изменение даты отчета
//
&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	ДатаОтчета = Объект.ОкончаниеПериода;
	УстановитьПериодОтчета();
	
КонецПроцедуры

// Изменение даты отчета
//
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ДатаОтчета = Объект.НачалоПериода;
	УстановитьПериодОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Форимрование отчета
//
&НаКлиенте
Процедура Сформировать(Команда)
	
	ПодготовитьПланировщик();
	
	СформироватьНаСервере();
	
КонецПроцедуры

// Обновление видимости настроек
//
&НаКлиенте
Процедура ВидмостьНастроек(Команда)
	
	ВидимостьНастроек = НЕ ВидимостьНастроек;
	ОбновитьВидимостьНастроек();
	
КонецПроцедуры

// Обработка сдвига периода вперед
//
&НаКлиенте
Процедура ПериодВперед(Команда)
	
	Если Объект.РежимОтчета = 0 Тогда
		ДатаОтчета = ДатаОтчета+(24*3600);
		УстановитьПериодОтчета();
	ИначеЕсли Объект.РежимОтчета = 1 Тогда
		Объект.НачалоПериода = НачалоНедели(Объект.ОкончаниеПериода+2);
		Объект.ОкончаниеПериода = КонецДня(КонецНедели(Объект.НачалоПериода));
		ДатаОтчета = Объект.ОкончаниеПериода;
	ИначеЕсли Объект.РежимОтчета = 2 Тогда
		Объект.НачалоПериода = НачалоМесяца(Объект.ОкончаниеПериода+2);
		Объект.ОкончаниеПериода = КонецДня(КонецМесяца(Объект.НачалоПериода));
		ДатаОтчета = Объект.ОкончаниеПериода;
		Элементы.ДатаОтчета.ФорматРедактирования = "ДФ='"""+Формат(ДатаОтчета, "ДФ='ММММ'")+""" гггг'";
	КонецЕсли;
	
КонецПроцедуры

// Обработка сдвига периода назад
//
&НаКлиенте
Процедура ПериодНазад(Команда)
	
	Если Объект.РежимОтчета = 0 Тогда
		ДатаОтчета = ДатаОтчета-(24*3600);
		УстановитьПериодОтчета();
	ИначеЕсли Объект.РежимОтчета = 1 Тогда
		Объект.НачалоПериода = НачалоНедели(Объект.НачалоПериода-2);
		Объект.ОкончаниеПериода = КонецНедели(Объект.НачалоПериода);
		ДатаОтчета = Объект.ОкончаниеПериода;
	ИначеЕсли Объект.РежимОтчета = 2 Тогда
		Объект.НачалоПериода = НачалоМесяца(Объект.НачалоПериода-2);
		Объект.ОкончаниеПериода = КонецМесяца(Объект.НачалоПериода);
		ДатаОтчета = Объект.ОкончаниеПериода;
		Элементы.ДатаОтчета.ФорматРедактирования = "ДФ='"""+Формат(ДатаОтчета, "ДФ='ММММ'")+""" гггг'";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определение границ интервала в зависимости от режима отчета и даты отчета
//
&НаКлиенте
Процедура УстановитьПериодОтчета()
	
	Если Объект.РежимОтчета = 0 Тогда
		Объект.НачалоПериода = НачалоДня(ДатаОтчета);
		Объект.ОкончаниеПериода = КонецДня(ДатаОтчета);
	ИначеЕсли Объект.РежимОтчета = 1 Тогда
		Объект.НачалоПериода = НачалоНедели(ДатаОтчета);
		Объект.ОкончаниеПериода = КонецДня(КонецНедели(ДатаОтчета));
	ИначеЕсли Объект.РежимОтчета = 2 Тогда
		Объект.НачалоПериода = НачалоМесяца(ДатаОтчета);
		Объект.ОкончаниеПериода = КонецДня(КонецМесяца(ДатаОтчета));
	КонецЕсли;
	
КонецПроцедуры

// Настройка шкалы времени планировщика взависимости от режима
//
&НаКлиенте
Процедура ПодготовитьПланировщик()
	
	ОбщегоНазначенияАвтосалонКлиентСервер.СброситьНастройкиШкал(Объект.Планировщик);
	
	ЛинияОсновная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияДополнительная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1,3);
	Если Объект.РежимОтчета = 0 Тогда // День
		Кратность = Неопределено;
		
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Объект.Планировщик, ТипЕдиницыШкалыВремени.Час,, "ДФ=HH", ЛинияОсновная, Ложь);
	ИначеЕсли Объект.РежимОтчета = 1 Тогда // Неделя
		Кратность = 2;
		
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Объект.Планировщик, ТипЕдиницыШкалыВремени.День,, "ДФ='dddd (dd.MM)'", ЛинияОсновная, Ложь);
			
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Объект.Планировщик, ТипЕдиницыШкалыВремени.Час, 2, "ДФ=HH", ЛинияДополнительная);
	ИначеЕсли Объект.РежимОтчета = 2 Тогда // Месяц
		Кратность = 1;
			
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Объект.Планировщик, ТипЕдиницыШкалыВремени.День,, "ДФ='ddd (dd.ММ)'", ЛинияОсновная, Ложь);
		
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Объект.Планировщик, ТипЕдиницыШкалыВремени.Час, 2, "ДФ=HH", ЛинияДополнительная);
	КонецЕсли;
	
	ОбщегоНазначенияАвтосалонКлиентСервер.СтартоваяНастройкаПланировщика(
		Объект.Планировщик,
		ОтображениеВремениЭлементовПланировщика.НеОтображать,
		Кратность);
	
	Объект.Планировщик.ТекущиеПериодыОтображения.Добавить(Объект.НачалоПериода, Объект.ОкончаниеПериода);
	Объект.Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	Объект.Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
	
КонецПроцедуры

// Получение, сохранение во временном хранилище и настройка схемы компановки данных
//
&НаСервере
Процедура ПодготовитьСхемуКомпановкиДанных()
	
	СхемаКомпановкиДанных      = Обработки.ЗанятостьСотрудников.ПолучитьМакет("СКД_ЗанятостьСотрудников");
	АдресСхемыКомпановкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпановкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпановкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпановкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

// Установка параметров компановщика данных
//
&НаСервере
Процедура УстановитьПараметрыКомпоновщикаМакетаКомпоновкиДанных()
	// установим параметры
	ПараметрыДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных;
	
	ПараметрыДанных.УстановитьЗначениеПараметра("ПустаяДата"    , Дата("00010101000000"));
	ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата"   , ТекущаяДатаСеанса());
	ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода" , Объект.НачалоПериода);
	ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода"  , Объект.ОкончаниеПериода);
	
КонецПроцедуры

// Получение интервалов фактических отметок времени сотрудников
//
&НаСервере
Функция ИнтервалыСотрудников()
	
	УстановитьПараметрыКомпоновщикаМакетаКомпоновкиДанных();
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки =
		КомпоновщикМакетаКомпоновкиДанных.Выполнить(
			ПолучитьИзВременногоХранилища(АдресСхемыКомпановкиДанных),
			КомпоновщикНастроекКомпоновкиДанных.Настройки,,,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода           = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаРезультат = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Формирует отчет в планировщике
//
&НаСервере
Процедура СформироватьНаСервере()
	
	// получим данные
	Интервалы =ИнтервалыСотрудников();
	ДобавленныеРабочиеМеста = Новый Массив;
	
	ЦветаСостоянийУРВ = Справочники.ВидыОтметокВремени.ЦветаВидовОтметокВремени();
	
	Сотрудники =
		ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьИзмерениеПланировщика(Объект.Планировщик.Измерения, "Сотрудники");
	
	РабочиеМеста = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьИзмерениеПланировщика(
					Объект.Планировщик.Измерения, "РабочиеМеста", "Рабочие места");
	
	Для Каждого Сотрудник Из Интервалы.Строки Цикл
		ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьИзмерениеПланировщика(
			Сотрудники.Элементы, Сотрудник.Сотрудник, Строка(Сотрудник.Сотрудник));
		
		Для Каждого РабочееМесто Из Сотрудник.Строки Цикл
			Если ДобавленныеРабочиеМеста.Найти(РабочееМесто.РабочееМесто) = Неопределено Тогда
				ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьИзмерениеПланировщика(
					РабочиеМеста.Элементы,
					РабочееМесто.РабочееМесто,
					?(НЕ РабочееМесто.РабочееМесто.Пустая(), Строка(РабочееМесто.РабочееМесто), "Не указан"));
				
				ДобавленныеРабочиеМеста.Добавить(РабочееМесто.РабочееМесто);
			КонецЕсли;
			
			Для Каждого Интервал Из РабочееМесто.Строки Цикл
				СтруктураПериода = Новый Структура("ДатаНачала,ДатаОкончания", Интервал.ДатаНачало, Интервал.ДатаОкончания);
				Значение         = Новый Структура("Сотрудники,РабочиеМеста", Интервал.Сотрудник, Интервал.РабочееМесто);
				
				СоответствиеЗначений = Новый Соответствие;
				СоответствиеЗначений.Вставить("Сотрудники"   , Интервал.Сотрудник);
				СоответствиеЗначений.Вставить("РабочиеМеста" , Интервал.РабочееМесто);
				
				ПредставлениеПериода = ПредставлениеПериода(Интервал.ДатаНачало, Интервал.ДатаОкончания, "ДФ=dd.MM:H.mm");
				
				ЦветЯчейки = ЦветаСостоянийУРВ.Получить(Интервал.Состояние);
				Оформление = Новый Структура("ЦветФона", ЦветЯчейки);
				
				ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНовоеСобытиеПланировщика(
					Объект.Планировщик,
					СтруктураПериода,
					Значение,
					СоответствиеЗначений,
					СтрШаблон("%1 (%2)", Строка(Интервал.Состояние), ПредставлениеПериода),,
					Оформление);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Настройка видимости элементов формы
//
&НаСервере
Процедура ОбновитьВидимостьНастроек()
	
	Элементы.ВидмостьНастроек.Пометка               = ВидимостьНастроек;
	Элементы.ОсновнаяПанельФормыНастройки.Видимость = ВидимостьНастроек;
	
КонецПроцедуры

// Настройка представления выбора периода
//
&НаСервере
Процедура ОбновитьПредставлениеДатыОтчета()
	
	Если Объект.РежимОтчета = 0 Тогда
		Элементы.ДатаОтчета.ФорматРедактирования = "ДФ=дд.ММ.гггг";
		ВидимостьПериода = Ложь;
	ИначеЕсли Объект.РежимОтчета = 1 Тогда
		Элементы.НачалоПериода.ФорматРедактирования    = "ДФ='дд.ММ.гггг'";
		Элементы.ОкончаниеПериода.ФорматРедактирования = "ДФ='дд.ММ.гггг'";
		ВидимостьПериода = Истина;
	ИначеЕсли Объект.РежимОтчета = 2 Тогда
		Элементы.ДатаОтчета.ФорматРедактирования = "ДФ='"""+Формат(ДатаОтчета, "ДФ='ММММ'")+""" гггг'";
		ВидимостьПериода = Ложь;
	КонецЕсли;
	
	Элементы.НачалоПериода.Видимость    = ВидимостьПериода;
	Элементы.ОкончаниеПериода.Видимость = ВидимостьПериода;
	Элементы.ДекорацияС.Видимость       = ВидимостьПериода;
	Элементы.ДекорацияПо.Видимость      = ВидимостьПериода;
	элементы.ДатаОтчета.Видимость       = Не ВидимостьПериода;
	
КонецПроцедуры

#КонецОбласти
