
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийНомерСтраницы; // Хранит текущий номер страницы

&НаКлиенте
Перем мСтраницы; // Соответствие страниц и и их номеров

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Скопируем значение параметра в реквизит формы, т.к. параметр очиститься до события "ПриОткрытии".
	ЕстьВладелец = Параметры.ЕстьВладелец;
	
	Если ЕстьВладелец Тогда
		// Форма заполнена в подчиненном режиме, реквизиты формы должны быть указаны
		Если ПустаяСтрока(Объект.ПолноеИмяМетаданныхОбъекта)
		     ИЛИ НЕ ЗначениеЗаполнено(Объект.ТипПрикладногоОбъекта) 
		     ИЛИ (Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ И НЕ ЗначениеЗаполнено(Объект.СсылкаИсточника)) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаВыгрузки = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПустаяСсылка();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если НЕ ВебКлиент Тогда
		
		// Инициализация переменных управления страницами
		мТекущийНомерСтраницы = 0;
		
		мСтраницы = Новый Соответствие;
		
		Если ЕстьВладелец Тогда
			// Если подчиненный режим установим объект для выгрузки
			УстановитьПрикладнойОбъект();
			
			// Пропусти первую страницу
			мСтраницы.Вставить(0, Элементы.СтраницаНастройки);
			мСтраницы.Вставить(1, Элементы.СтраницаПросмотр);
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
			
		Иначе
			// Если владелец не указан, то форма запущена в самостоятельном режиме.
			// Реквизиты обработки должны быть указаны пользователем. Заполнение
			// списков долгая процедура, и выполняется только в случае самостоятельного режима.
			ИнициализацияСписковВыбора(БиблиотекаКартинок.СправочникОбъект, БиблиотекаКартинок.ДокументОбъект);
			
			Для Каждого ЭлементСписка Из СписокВыбораДокументов Цикл
				ЭлементСписка.Картинка = БиблиотекаКартинок.ДокументОбъект;
			КонецЦикла;
			Для Каждого ЭлементСписка Из СписокВыбораСправочников Цикл
				ЭлементСписка.Картинка = БиблиотекаКартинок.СправочникОбъект;
			КонецЦикла;
			
			Список = Элементы.ТипПрикладногоОбъекта.СписокВыбора;
			Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Справочник"),,, БиблиотекаКартинок.Справочник);
			Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ")  ,,, БиблиотекаКартинок.Документ);
			
			мСтраницы.Вставить(0, Элементы.СтраницаНачало);
			мСтраницы.Вставить(1, Элементы.СтраницаНастройки);
			мСтраницы.Вставить(2, Элементы.СтраницаПросмотр);
			
			ЗаполнитьСписокПрикладныхОбъектов();
			
		КонецЕсли;
		
		Элементы.СсылкаИсточника.Доступность = (Объект.ТипПрикладногоОбъекта=ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ"));
		
	#Иначе
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выгрузка данных во внешние файлы не поддерживается в веб-клиенте.'"));
		Возврат;
		
	#КонецЕсли
	
	УстановитьДоступностьКнопок();
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПредварительныйПросмотр");
	
	Если Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ") И Не ЗначениеЗаполнено(Объект.СсылкаИсточника) Тогда
		Элементы.СсылкаИсточника.АвтоОтметкаНезаполненного = Истина
	Иначе
		Элементы.СсылкаИсточника.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриСохраненииДанныхВНастройкахНаСервере" формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Если обработка была вызвана в "подчиненном режиме", то настройки сохранять не нужно.
	Если ЕстьВладелец Тогда
		Настройки.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Если обработка была вызвана в "подчиненном режиме", то настройки восстанавливать не нужно.
	Если ЕстьВладелец Тогда
		Настройки.Очистить();
	Иначе
		Объект.СсылкаИсточника = Настройки.Получить("Объект.СсылкаИсточника");
		Если Настройки.Получить("НастройкаВыгрузки")<>Неопределено Тогда
			Настройки.Удалить("НастройкаВыгрузки");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля формы "ТипПрикладногоОбъекта".
//
&НаКлиенте
Процедура ТипПрикладногоОбъектаПриИзменении(Элемент)
	
	ИмяПрикладногоОбъекта = "";
	Объект.СсылкаИсточника = Неопределено;
	Элементы.СсылкаИсточника.Доступность = (Объект.ТипПрикладногоОбъекта=ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ"));
	Если Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ") И Не ЗначениеЗаполнено(Объект.СсылкаИсточника) Тогда
		Элементы.СсылкаИсточника.АвтоОтметкаНезаполненного = Истина
	Иначе
		Элементы.СсылкаИсточника.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	ЗаполнитьСписокПрикладныхОбъектов();
	
КонецПроцедуры // ТипПрикладногоОбъектаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля формы "СсылкаИсточника".
//
&НаКлиенте
Процедура СсылкаИсточникаПриИзменении(Элемент)
	Если Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ") И Не ЗначениеЗаполнено(Объект.СсылкаИсточника) Тогда
		Элементы.СсылкаИсточника.АвтоОтметкаНезаполненного = Истина
	Иначе
		Элементы.СсылкаИсточника.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля формы "ИмяПрикладногоОбъекта".
//
&НаКлиенте
Процедура ИмяПрикладногоОбъектаПриИзменении(Элемент)
	
	Объект.СсылкаИсточника = Неопределено;
	Если ЗначениеЗаполнено(ИмяПрикладногоОбъекта) Тогда
		// Заполним тип ссылки на документ
		Если Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ") Тогда
			ЗаполнитьСсылкуНаДокумент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИмяПрикладногоОбъектаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля формы "НастройкаВыгрузки".
//
&НаКлиенте
Процедура НастройкаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПараметрОтборПоВариантуИспользования" , ПредопределенноеЗначение("Перечисление.ВариантыИспользованияНастройки.ВыгрузкаДанных"));
	СтруктураПараметров.Вставить("ПараметрОтборПоКонтрагенту"           , Поставщик);
	СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Объект.ТипПрикладногоОбъекта);
	СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"            , Объект.ПолноеИмяМетаданныхОбъекта);
	СтруктураПараметров.Вставить("РежимВыбора"				            , Истина);
	
	ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаВыбора", СтруктураПараметров, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля формы "ФайлДанных".
//
&НаКлиенте
Процедура ФайлДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ФайлДанных;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Сохранить как'");
	ДиалогВыбораФайла.Фильтр = "dBase III (*.dbf)|*.dbf|Все файлы (*.*)|*.*";
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлДанныхНачалоВыбораЗавершение",
													ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла));
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры // ФайлДанныхНачалоВыбора()

&НаКлиенте
Процедура ФайлДанныхНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлДанных = ДиалогВыбораФайла.ПолноеИмяФайла;

КонецПроцедуры // ФайлДанныхНачалоВыбораЗавершение()

// Процедура - обработчик события "ПриИзменении" таблицы формы "ПредварительныйПросмотр".
//
&НаКлиенте
Процедура ПредварительныйПросмотрПриИзменении(Элемент)
	
	Для Каждого Строка Из ПредварительныйПросмотр Цикл
		
		Строка.НомерСтроки = ПредварительныйПросмотр.Индекс(Строка)+1;
		
	КонецЦикла;
	
КонецПроцедуры // ПредварительныйПросмотрПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Далее"
//
&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаНачало Тогда
		
		Если НЕ ПроверитьЗаполнениеНастроекОбъекта() Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаНастройки Тогда
		
		Если НЕ ПроверитьЗаполнениеНастроекВыгрузки() Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ВыполнитьЗагрузкуДанных() Тогда
			Возврат;
		КонецЕсли;
		
		РазрешитьРедактирование = Ложь;
		ИзменитьРедактирование();
		ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПредварительныйПросмотр");
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаПросмотр Тогда
		АдресХранилища = "";
		Результат = ВыгрузитьДанныеВФайл(АдресХранилища);
		
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			xDBF = ПолучитьИзВременногоХранилища(АдресХранилища);
			Попытка
				xDBF.Записать(ФайлДанных);
			Исключение
				ТехнологическаяПлатформаВызовСервера.СделатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи файла'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()) + " " + СокрЛП(ФайлДанных), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Если Результат Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ДалееЗавершение", ЭтотОбъект), НСтр("ru= 'Выгрузка успешно завершена'"));
			Возврат;
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru= 'Выгрузке данных в файл не выполнена'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	мТекущийНомерСтраницы = ?((мТекущийНомерСтраницы + 1)>мСтраницы.Количество()-1, мСтраницы.Количество()-1, мТекущийНомерСтраницы + 1);
	Элементы.Страницы.ТекущаяСтраница = мСтраницы[мТекущийНомерСтраницы];
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееЗавершение(ДополнительныеПараметры) Экспорт
    
    Закрыть();

КонецПроцедуры // Далее()

// Процедура - обработчик команды "Назад"
//
&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаПросмотр Тогда
		
		ОчиститьТаблицуПредварительногоПросмотра();
		
	КонецЕсли;
	
	Инкремент = -1;
	
	мТекущийНомерСтраницы = ?((мТекущийНомерСтраницы + Инкремент)<0, 0, мТекущийНомерСтраницы + Инкремент);
	Элементы.Страницы.ТекущаяСтраница = мСтраницы[мТекущийНомерСтраницы];
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Назад()

// Процедура - обработчик команды "РазрешитьРедактирование"
//
&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	
	РазрешитьРедактирование = НЕ РазрешитьРедактирование;
	ИзменитьРедактирование();
	
КонецПроцедуры // РазрешитьРедактирование()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура управления доступностью кнопок
//
&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	Элементы.Справка.Доступность = ИСТИНА;
	Элементы.Назад  .Доступность = (мТекущийНомерСтраницы<>0);
	Элементы.Далее  .Доступность = ИСТИНА;
	Элементы.Далее  .Заголовок   = ?(Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаПросмотр, "Выгрузить", "Далее");
	Элементы.Отмена .Доступность = ИСТИНА;
	
КонецПроцедуры // УстановитьДоступностьКнопок()

// Процедура управления возможностью редактирования таблицы предварительного просмотра.
//
&НаСервере
Процедура ИзменитьРедактирование()
	
	Элементы.ПредварительныйПросмотрРазрешитьРедактирование.Пометка = РазрешитьРедактирование;
	Элементы.ПредварительныйПросмотр.ТолькоПросмотр = НЕ РазрешитьРедактирование;
	
КонецПроцедуры // ИзменитьРедактирование()

// Процедура заполняет списки, которые в последующем будут использованы как списки выбора метаданных.
//
&НаСервере
Процедура ИнициализацияСписковВыбора(КартинкаСправочникаОбъекта, КартинкаДокументаОбъекта)
	
	// Для справочников
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		СписокВыбораСправочников.Добавить(ОбъектМетаданных.Имя, ОбъектМетаданных.Представление(),, КартинкаСправочникаОбъекта);
	КонецЦикла;
	
	// Для документов
	Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		Если ОбъектМетаданных.ТабличныеЧасти.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		СписокВыбораДокументов.Добавить(ОбъектМетаданных.Имя, ОбъектМетаданных.Представление(),, КартинкаДокументаОбъекта);
	КонецЦикла;
	
КонецПроцедуры // ИнициализацияСписковВыбора()

// Процедура настраивает обработку в соответствии с прикладным объектом
//
&НаСервере
Процедура УстановитьПрикладнойОбъект()
	
	Поставщик = Справочники.Контрагенты.ПустаяСсылка();
	
	// Получим представление документа
	Если Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
		Если ЕстьРеквизит(Метаданные.НайтиПоПолномуИмени(Объект.ПолноеИмяМетаданныхОбъекта),"Контрагент") Тогда
			Поставщик = Объект.СсылкаИсточника.Контрагент;
		КонецЕсли
	КонецЕсли;
	
	// Проверим не была ли восстановлена битая ссылка
	Если ЗначениеЗаполнено(НастройкаВыгрузки) И НастройкаВыгрузки.ПолучитьОбъект()=Неопределено Тогда
		НастройкаВыгрузки = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПустаяСсылка();
	КонецЕсли;
	
	// Если настройки выгрузки восстановлены, попытаемся восстановить и имя файла
	Если ЗначениеЗаполнено(НастройкаВыгрузки) Тогда
		ФайлНаДиске = Новый Файл(ФайлДанных);
		Если ФайлНаДиске.Существует() И ФайлНаДиске.ЭтоКаталог() Тогда
			ФайлДанных = "";
		КонецЕсли;
	Иначе
		ФайлДанных = "";
	КонецЕсли;
	
КонецПроцедуры // УстановитьПрикладнойОбъект()

// Процедура заполняет список доступных документов и справочников
//
&НаКлиенте
Процедура ЗаполнитьСписокПрикладныхОбъектов()
	
	Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Очистить();
	
	// Используем поэлементное добавление, т.к. при открытии сохраненного
	// элемента справочника элемент управления не позиционируется.
	Если Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Справочник") Тогда
		Для Каждого Элемент Из СписокВыбораСправочников Цикл
			Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление,, Элемент.Картинка);
		КонецЦикла;
	ИначеЕсли Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ") Тогда
		Для Каждого Элемент Из СписокВыбораДокументов Цикл
			Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление,, Элемент.Картинка);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ИмяПрикладногоОбъекта.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
КонецПроцедуры // ЗаполнитьСписокПрикладныхОбъектов()

// Процедура установки типа для Ссылки источника
//
&НаСервере
Процедура ЗаполнитьСсылкуНаДокумент()
	
	Объект.СсылкаИсточника = Документы[ИмяПрикладногоОбъекта].ПустаяСсылка();
	
КонецПроцедуры // ЗаполнитьСсылкуНаДокумент()

// Функция осуществляет проверку заполнения необходимых данных для выгрузки
//
&НаКлиенте
Функция ПроверитьЗаполнениеНастроекОбъекта()
	
	Результат = Истина;
	
	// Первичная проверка на заполненность реквизитов
	Если НЕ ЗначениеЗаполнено(Объект.ТипПрикладногоОбъекта) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан тип объекта.'"),,"Объект.ТипПрикладногоОбъекта");
		Результат = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяПрикладногоОбъекта) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан объект.'"),,"ИмяПрикладногоОбъекта");
		Результат = Ложь;
	КонецЕсли;
	Если Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Документ") И НЕ ЗначениеЗаполнено(Объект.СсылкаИсточника) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана ссылка.'"),,"Объект.СсылкаИсточника");
		Результат = Ложь;
	КонецЕсли;
	
	// Не прошли первичную проверку на заполненность реквизитов
	Если НЕ Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проверим и определим метаданные объекта
	Если НЕ ПроверитьМетаданныеОбъекта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПрикладнойОбъект();
	
	Возврат Истина;
	
КонецФункции // ПроверитьЗаполнениеНастроекОбъекта()

// Функция проверки объекта по метаданным
//
&НаСервере
Функция ПроверитьМетаданныеОбъекта()
	
	Результат = Истина;
	
	Объект.ПолноеИмяМетаданныхОбъекта = "";
	Если Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник Тогда
		ОбъектМетаданныхСправочник = Метаданные.Справочники.Найти(ИмяПрикладногоОбъекта);
		Если ОбъектМетаданныхСправочник<>Неопределено Тогда
			Объект.ПолноеИмяМетаданныхОбъекта = ОбъектМетаданныхСправочник.ПолноеИмя();
		КонецЕсли;
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
		ОбъектМетаданныхДокумент = Метаданные.Документы.Найти(ИмяПрикладногоОбъекта);
		Если ОбъектМетаданныхДокумент<>Неопределено Тогда
			Объект.ПолноеИмяМетаданныхОбъекта = ОбъектМетаданныхДокумент.ПолноеИмя();
		КонецЕсли;
	КонецЕсли;

	Если Объект.ПолноеИмяМетаданныхОбъекта = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Произошла ошибка получения прикладного объекта.'"));
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьМетаданныеОбъекта()

// Функция осуществляет проверку заполнения настроек выгрузки
//
&НаКлиенте
Функция ПроверитьЗаполнениеНастроекВыгрузки()
	
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(НастройкаВыгрузки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана настройка выгрузки.'"),,"НастройкаВыгрузки");
		Результат = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФайлДанных) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан файл данных.'"),,"ФайлДанных");
		Результат = Ложь;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Объект.ИмяТабличнойЧасти) И НЕ НастройкаВыгрузки.Ссылка.Пустая() Тогда
		Если НастройкаВыгрузки.ИмяТабличнойЧасти <> Объект.ИмяТабличнойЧасти Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранная настройка предназначена для выгрузки табличной части <%1>. Выгружается другая табличная часть <%2>.'"), НастройкаВыгрузки.ИмяТабличнойЧасти, Объект.ИмяТабличнойЧасти);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"НастройкаВыгрузки");
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьЗаполнениеНастроекВыгрузки()

// Процедура очищает таблицу предварительного просмотра, добавленные в нее поля(реквизиты)
// и удаляет соответствующие добавленным полям элементы формы.
//
&НаСервере
Процедура ОчиститьТаблицуПредварительногоПросмотра()
	
	// Очистим таблицу от данных
	ПредварительныйПросмотр.Очистить();
	
	// Получим массив добавленных колонок
	Попытка
		МассивВыгружаемыхКолонок = ПолучитьИзВременногоХранилища(АдресХранилищаВыгружаемыхКолонок);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения данных из временного хранилища по адресу:'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + СокрЛП(АдресХранилищаВыгружаемыхКолонок), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Удалим элементы с формы
	Для Каждого Элемент Из МассивВыгружаемыхКолонок Цикл
		Элементы.Удалить(Элементы["ПредварительныйПросмотр"+Элемент.Имя]);
	КонецЦикла;
	
	Если МассивВыгружаемыхКолонок<>Неопределено Тогда
		
		// Сформируем пути к реквизитам, которые надо удалить
		МассивПутей = Новый Массив();
		Для Каждого Колонка Из МассивВыгружаемыхКолонок Цикл
			МассивПутей.Добавить(Колонка.Путь+"."+Колонка.Имя);
		КонецЦикла;
		
		// Удалим реквизиты
		ИзменитьРеквизиты(, МассивПутей);
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьТаблицуПредварительногоПросмотра()

// Процедура получения данных для выгрузки, так же создает реквизиты и элементы формы для полей загружаемых данных.
//
&НаСервере
Функция ВыполнитьЗагрузкуДанных()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// Загрузим настройки в переменные модуля объекта и получим адрес в хранилище, куда были помещены эти настройки.
	АдресХранилищаПараметровМодуляОбъектов = ОбработкаОбъект.ЗагрузитьНастройки(НастройкаВыгрузки, УникальныйИдентификатор);
	
	Если АдресХранилищаПараметровМодуляОбъектов=Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Возникла ошибка при загрузке настроек.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Получим данные для выгрузки по полученным ранее настройкам
	ДанныеДляВыгрузки = ОбработкаОбъект.ПолучитьДанныеДляВыгрузки(?(Объект.ТипПрикладногоОбъекта=Перечисления.ТипыПрикладныхОбъектов.Обработка, ОбработкаОбъект, Неопределено), АдресХранилищаПараметровМодуляОбъектов);
	
	Если ДанныеДляВыгрузки = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка получения данных для выгрузки.'"));
		Возврат Ложь;
	ИначеЕсли ДанныеДляВыгрузки.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Создадим реквизиты колонок таблицы предварительного просмотра
	МассивКолонок = Новый Массив();
	Для Каждого КолонкаВыгрузки Из ДанныеДляВыгрузки.Колонки Цикл
		
		НоваяКолонка = Новый РеквизитФормы(КолонкаВыгрузки.Имя, КолонкаВыгрузки.ТипЗначения, "ПредварительныйПросмотр", СокрЛП(КолонкаВыгрузки.Заголовок));
		МассивКолонок.Добавить(НоваяКолонка);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивКолонок);
	
	// Сохраним массив колонок на случай, если придется перезаполнять таблицу
	АдресХранилищаВыгружаемыхКолонок = ПоместитьВоВременноеХранилище(МассивКолонок, УникальныйИдентификатор);
	
	// Создадим колонки на элементе формы
	Для Каждого КолонкаВыгрузки Из ДанныеДляВыгрузки.Колонки Цикл
		Элемент = Элементы.Добавить("ПредварительныйПросмотр"+КолонкаВыгрузки.Имя, Тип("ПолеФормы"), Элементы.ПредварительныйПросмотр);
		Элемент.Заголовок      = СокрЛП(КолонкаВыгрузки.Заголовок);
		Элемент.ПутьКДанным    = "ПредварительныйПросмотр."+КолонкаВыгрузки.Имя;
		Элемент.Вид            = ВидПоляФормы.ПолеВвода;
		Элемент.ТолькоПросмотр = Ложь;
		Элемент.КнопкаОчистки  = Истина;
	КонецЦикла;
	
	// Заполним данными выгрузки таблицу предварительного просмотра
	Сч = 1;
	Для Каждого СтрокаВыгрузки Из ДанныеДляВыгрузки Цикл
		НоваяСтрока = ПредварительныйПросмотр.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
		НоваяСтрока.НомерСтроки = Сч;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ВыполнитьЗагрузкуДанных()

// Процедура выгрузки данных объекта в файл
//
&НаСервере
Функция ВыгрузитьДанныеВФайл(АдресХранилища)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаВыгрузки = ПредварительныйПросмотр.Выгрузить();
	
	// Удалим колонку "Номер строки", т.к. она влияет на порядок выгружаемых колонок
	ТаблицаВыгрузки.Колонки.Удалить("НомерСтроки");
	
	Результат = ОбработкаОбъект.ВыгрузитьДанныеВФайл(ТаблицаВыгрузки, ФайлДанных, АдресХранилищаПараметровМодуляОбъектов, АдресХранилища);
	
	Возврат Результат;
	
КонецФункции // ВыгрузитьДанныеВФайл()

#КонецОбласти
