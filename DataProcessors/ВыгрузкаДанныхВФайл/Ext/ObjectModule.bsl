#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
// Переменные для работы с настройками (развернутые элементы табличного документа настроек).
Перем н_ИмяПрикладногоОбъекта;   // Имя прикладного объекта
Перем н_ИмяТабличнойЧасти;       // Имя табличной части
Перем н_ФорматФайла;             // Формат файла
Перем н_Кодировка;               // Кодировка
Перем н_ПередВыгрузкойОбъекта;   // Перед выгрузкой объекта
Перем н_ПослеДобавленияСтроки;   // После добавления строки
Перем н_ВыгружаемыеРеквизиты;    // Выгружаемые реквизиты
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет указанное выражение, служит для скрытия переменных вызывающего контекста
// не обрабатывает исключения.
//
Процедура ВыполнитьВыражение(Выражение, ПользовательскиеДанные,
		Знач Ссылка, ТекущиеДанные = Неопределено, Результат = Неопределено)
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьБезопасныйРежим(Истина);
	
	Выполнить Выражение;
	
	УстановитьБезопасныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
КонецПроцедуры

// Функция заполняет внутренние переменные обработки из справочника настроек
//
// Параметры
//  НастройкаВыгрузки - <СправочникСсылка.НастройкиЗагрузкиДанныхИзТабличногоДокумента> - Настройка выгрузки
//  УникальныйИдентификатор - <УникальныйИдентификатор> - УИД формы, для помещения инициализированных переменных
//                                                        модуля во временное хранилище.
//
// Возвращаемое значение:
//  <Строка>, Неопределено - адрес хранилища, в котором находятся инициализированные переменные модуля.
//
Функция ЗагрузитьНастройки(НастройкаВыгрузки, УникальныйИдентификатор) Экспорт
	
	Настройки = НастройкаВыгрузки.НастройкиЗагрузкиВыгрузки.Получить();
	Если Настройки=Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В выбранной настройке не выбрано ни одного поля для выгрузки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.
		ПолучитьНастройкиВыгрузкиИзТабличногоДокумента(Настройки);
	
	Если СтруктураНастроек = Неопределено ИЛИ СтруктураНастроек = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	н_ИмяПрикладногоОбъекта = НастройкаВыгрузки.ИмяПрикладногоОбъекта;
	н_ИмяТабличнойЧасти     = НастройкаВыгрузки.ИмяТабличнойЧасти;
	н_ФорматФайла           = СтруктураНастроек.ФорматФайла;
	н_Кодировка             = СтруктураНастроек.Кодировка;
	н_ПередВыгрузкойОбъекта = СтруктураНастроек.ПередВыгрузкойОбъекта;
	н_ПослеДобавленияСтроки = СтруктураНастроек.ПослеДобавленияСтроки;
 	н_ВыгружаемыеРеквизиты  = СтруктураНастроек.ВыгружаемыеРеквизиты;
	
	// Анализируем индексы т.к. имена могут быть не уникальны
	н_ВыгружаемыеРеквизиты.Колонки.Добавить("ИндексДБФ");
	ИндексДБФ = 0;
	Для Каждого КолонкаДБФ Из н_ВыгружаемыеРеквизиты Цикл
		КолонкаДБФ.ИндексДБФ = ИндексДБФ;
		ИндексДБФ = ИндексДБФ+1;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("н_ИмяПрикладногоОбъекта", н_ИмяПрикладногоОбъекта);
	СтруктураПараметров.Вставить("н_ИмяТабличнойЧасти"    , н_ИмяТабличнойЧасти);
	СтруктураПараметров.Вставить("н_ФорматФайла"          , н_ФорматФайла);
	СтруктураПараметров.Вставить("н_Кодировка"            , н_Кодировка);
	СтруктураПараметров.Вставить("н_ПередВыгрузкойОбъекта", н_ПередВыгрузкойОбъекта);
	СтруктураПараметров.Вставить("н_ПослеДобавленияСтроки", н_ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("н_ВыгружаемыеРеквизиты" , н_ВыгружаемыеРеквизиты);
	
	// Помести во временное хранилище, чтобы не потерять данные
	АдресХранилищаПараметровМодуля = ПоместитьВоВременноеХранилище(СтруктураПараметров, УникальныйИдентификатор);
	
	Возврат АдресХранилищаПараметровМодуля;
	
КонецФункции // ЗагрузитьНастройки()

// Функция возвращает таблицу значений с данными для выгрузки.
//
// Параметры
//  ОбработкаВладелец
//  АдресХранилищаПараметров - <Строка> - адрес, по которому будут получены переменные этого модуля.
//
// Возвращаемое значение:
//   <Таблица значений> - подготовленные данные для выгрузки, <Неопределено> - в случае ошибки.
//
Функция ПолучитьДанныеДляВыгрузки(ОбработкаВладелец, АдресХранилищаПараметров) Экспорт
	
	Если НЕ ОбновитьПараметрыИзХранилища(АдресХранилищаПараметров) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = Неопределено;
	ТЧРезультат = Новый ТаблицаЗначений;
	ПользовательскиеДанные = Новый Структура;
	
	Для Каждого КолонкаДБФ Из н_ВыгружаемыеРеквизиты Цикл
		// Определимся с типами
		Если КолонкаДБФ.Тип = "S" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Строка", ,
				Новый КвалификаторыСтроки (КолонкаДБФ.Длина, ДопустимаяДлина.Фиксированная));
		ИначеЕсли КолонкаДБФ.Тип = "N" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(КолонкаДБФ.Длина, КолонкаДБФ.Точность, ДопустимыйЗнак.Любой));
		ИначеЕсли КолонкаДБФ.Тип = "L" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Булево");
		ИначеЕсли КолонкаДБФ.Тип = "D" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
		Иначе
			ВызватьИсключение НСтр("ru = 'Неверный тип колонки DBF'");
		КонецЕсли;
		
		ТЧРезультат.Колонки.Добавить(КолонкаДБФ.ПолеДБФ, ОписаниеТипов, КолонкаДБФ.ПолеДБФ);
	КонецЦикла;
	
	Если ТипПрикладногоОбъекта <> Перечисления.ТипыПрикладныхОбъектов.Обработка Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникДанных.*
		|ИЗ";
		
		Если ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
			Ссылка = СсылкаИсточника; // Формируем ссылку для доступа из произвольного выражения
			Запрос.Текст = Запрос.Текст + "
			|	Документ." + н_ИмяПрикладногоОбъекта + "." + н_ИмяТабличнойЧасти + " КАК ИсточникДанных
			|ГДЕ
			|	ИсточникДанных.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
		Иначе // Справочник
			Запрос.Текст = Запрос.Текст + "
			|	Справочник." + н_ИмяПрикладногоОбъекта + " КАК ИсточникДанных";
		КонецЕсли;
		
		ИсточникДанных = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		// Возьмем переданную таблицу с выгруженной в нее табличной частью.
		ИсточникДанных = СсылкаИсточника;
		
		// Добавим колонку для каждого реквизита обработки и заполним ее значением реквизита.
		Для Каждого Реквизит Из Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданныхОбъекта).Реквизиты Цикл
			ИмяРеквизита = Реквизит.Имя;
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Если ИсточникДанных.Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
				ИсточникДанных.Колонки.Добавить(ИмяРеквизита);
				ИсточникДанных.ЗаполнитьЗначения(ОбработкаВладелец[ИмяРеквизита], ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(н_ПередВыгрузкойОбъекта) Тогда
		Попытка
			ВыполнитьВыражение(н_ПередВыгрузкойОбъекта, ПользовательскиеДанные, Ссылка);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Описание = ?(ИнформацияОбОшибке.Причина<>Неопределено, ИнформацияОбОшибке.Причина.Описание,
				ИнформацияОбОшибке.Описание);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'Ошибка при выполнении выражения ""Перед выгрузкой объекта""%1%2'"), Символы.ПС, Описание);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Для Каждого ТекущиеДанные Из ИсточникДанных Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НомерСтроки = НомерСтроки + 1;
		
		СтрокаРезультат = ТЧРезультат.Добавить();
		
		Для Каждого КолонкаДБФ Из н_ВыгружаемыеРеквизиты Цикл
			
			Результат = Неопределено;
			
			Если КолонкаДБФ.ТипПоля = НСтр("ru = 'Поле объекта'") Тогда
				// Для выгрузки поля "Штрихкод" справочника Номенклатуры, выполним его получение по принципу
				// первый попавшийся штрихкод принадлежащий номенклатуре (без учета характеристик).
				Если ВРег(КолонкаДБФ.Представление) = "ШТРИХКОД" Тогда
					НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Объект.Установить(ТекущиеДанные.Ссылка);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() > 0 Тогда
						Результат = НаборЗаписей[0].Штрихкод;
					КонецЕсли;
				Иначе
					
					Попытка
						
						Результат = ТекущиеДанные[КолонкаДБФ.Данные];
						
					Исключение
						
						// Если указанного поля не существует (поле нескольких типов) возвращаем Неопределено.
						
					КонецПопытки;
					
				КонецЕсли;
			Иначе //Выражение
				Выражение = КолонкаДБФ.Данные;
				Попытка
					ВыполнитьВыражение(Выражение, ПользовательскиеДанные, Ссылка, ТекущиеДанные, Результат);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Описание = ?(ИнформацияОбОшибке.Причина <> Неопределено, ИнформацияОбОшибке.Причина.Описание,
						ИнформацияОбОшибке.Описание);
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru= 'Строка №%1 ошибка при выполнении выражения для колонки ""%2""%3%4'"),
						НомерСтроки, КолонкаДБФ.Представление, Символы.ПС, Описание);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Возврат Неопределено;
				КонецПопытки;
			КонецЕсли;
			
			СтрокаРезультат[КолонкаДБФ.ИндексДБФ] = Результат;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(н_ПослеДобавленияСтроки) Тогда
			Попытка
				ВыполнитьВыражение(н_ПослеДобавленияСтроки, ПользовательскиеДанные, Ссылка, ТекущиеДанные, СтрокаРезультат);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Описание = ?(ИнформацияОбОшибке.Причина <> Неопределено, ИнформацияОбОшибке.Причина.Описание,
					ИнформацияОбОшибке.Описание);
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru= 'Строка №%1 ошибка при выполнении выражения ""После добавления строки""%2%3'"),
					НомерСтроки, Символы.ПС, Описание);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЧРезультат;
	
КонецФункции // ПолучитьДанныеДляВыгрузки()

// Функция выгружает данные полученные в качестве параметра в соответствии с настройками обработки.
//
// Параметры
//  ДанныеДляВыгрузки - <Таблица значений> - данные для выгрузки
//  ИмяФайла          - <Строка>           - имя файла выгрузки
//  АдресХранилищаПараметров - <Строка>    - адрес, по которому будут получены переменные этого модуля.
//
// Возвращаемое значение:
// <Булево> - признак успешной выгрузки в файл.
//
Функция ВыгрузитьДанныеВФайл(ДанныеДляВыгрузки, ИмяФайла, АдресХранилищаПараметров, АдресХранилища) Экспорт
	
	Если НЕ ОбновитьПараметрыИзХранилища(АдресХранилищаПараметров) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не указан файл данных. Операция отменена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	ВозниклиОшибки = Ложь;
	xDBF = Новый xBase();
	Для Каждого КолонкаДБФ Из н_ВыгружаемыеРеквизиты Цикл
		Попытка
			xDBF.Поля.Добавить(КолонкаДБФ.ПолеДБФ, КолонкаДБФ.Тип, КолонкаДБФ.Длина, КолонкаДБФ.Точность);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Описание = ?(ИнформацияОбОшибке.Причина <> Неопределено,
				ИнформацияОбОшибке.Причина.Описание, ИнформацияОбОшибке.Описание);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= '%1Ошибка создания поля DBF %2 : %3'"), ТекстОшибки, КолонкаДБФ.ПолеДБ, Описание);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ВозниклиОшибки = Истина;
		КонецПопытки;
	КонецЦикла;
	
	Если ВозниклиОшибки Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Операция отменена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
	ИмяФайлаБезПути = ИмяВременногоФайла;
	Пока СтрНайти(ИмяФайлаБезПути, "\")<>0 Цикл
		ИмяФайлаБезПути = Прав(ИмяФайлаБезПути, СтрДлина(ИмяФайлаБезПути) - СтрНайти(ИмяФайлаБезПути, "\"));
	КонецЦикла;
	Путь = СтрЗаменить(ИмяВременногоФайла, ИмяФайлаБезПути, "");
	ИмяФайлаСокр = Лев(ИмяФайлаБезПути, СтрДлина(ИмяФайлаБезПути)-4);
	Если СтрДлина(ИмяФайлаСокр) > 8 Тогда
		ИмяФайлаСокр = Лев(ИмяФайлаСокр, 8);
	КонецЕсли;
	ИмяВременногоФайла = Путь + ИмяФайлаСокр + ".dbf";
	
	Попытка
		xDBF.СоздатьФайл(ИмяВременногоФайла);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Описание = ?(ИнформацияОбОшибке.Причина <> Неопределено,ИнформацияОбОшибке.Причина.Описание,
			ИнформацияОбОшибке.Описание);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Ошибка при создании файла ""%1"" : %2. Операция отменена'"), ИмяФайла, Описание);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Пока НЕ xDBF.Открыта() Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Возникла ошибка при открытии файла ""%1"". Возможно файл занят другим приложением'"), ИмяФайла);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЦикла;
	
	// Настроим xDBF
	xDBF.Кодировка = ?(н_Кодировка = "DOS", КодировкаXBase.OEM, КодировкаXBase.ANSI);
	xDBF.АвтоСохранение = Истина; //При добавлении строки, при закрытии файла
	
	Для Каждого ТекущиеДанные Из ДанныеДляВыгрузки Цикл
		
		xDBF.Добавить();
		Для Каждого КолонкаДБФ Из н_ВыгружаемыеРеквизиты Цикл
			// Устанавливаем значения полей по индексу, т.к. имена могут быть не уникальны
			xDBF.УстановитьЗначениеПоля(КолонкаДБФ.ИндексДБФ, ТекущиеДанные[КолонкаДБФ.ИндексДБФ]);
		КонецЦикла;
		
	КонецЦикла;
	
	xDBF.Записать();
	xDBF.ЗакрытьФайл();
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый УникальныйИдентификатор);
	
	// Удаляем временный файл
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось удалить временный файл.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Истина;
	
КонецФункции // ВыгрузитьДанныеВФайл()

// Функция обновляет параметры модуля, т.к. при переходах с сервера на клиент параметры могут очиститься.
//
// Параметры:
//  АдресВХранилище - Строка - содержит адрес сохраненных параметров модуля в хранилище.
//
// Возвращаемое значение:
// Булево. Признак успешного получения параметров из хранилища.
//
Функция ОбновитьПараметрыИзХранилища(АдресВХранилище)
	
	Попытка
		СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Обновим параметры модуля
	н_ИмяПрикладногоОбъекта = СтруктураПараметров.н_ИмяПрикладногоОбъекта;
	н_ИмяТабличнойЧасти     = СтруктураПараметров.н_ИмяТабличнойЧасти;
	н_ФорматФайла           = СтруктураПараметров.н_ФорматФайла;
	н_Кодировка             = СтруктураПараметров.н_Кодировка;
	н_ПередВыгрузкойОбъекта = СтруктураПараметров.н_ПередВыгрузкойОбъекта;
	н_ПослеДобавленияСтроки = СтруктураПараметров.н_ПослеДобавленияСтроки;
	н_ВыгружаемыеРеквизиты  = СтруктураПараметров.н_ВыгружаемыеРеквизиты;
	
	Возврат Истина;
	
КонецФункции // ОбновитьПараметрыИзХранилища()

#КонецОбласти

#КонецЕсли