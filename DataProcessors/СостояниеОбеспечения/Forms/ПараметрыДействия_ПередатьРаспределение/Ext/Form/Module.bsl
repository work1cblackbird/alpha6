
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Заказ = Параметры.Заказ;
	Заголовок = СостояниеОбеспеченияСервер.ЗаголовокОкна(Заказ, "Передать распределение из");
	Элементы.ПозицииКПереносу.Заголовок = СостояниеОбеспеченияСервер.ЗаголовокОкна(Заказ, "К переносу из");
	
	// Статические отборы списка получателей
	ЗаказыПолучатели
		.КомпоновщикНастроек
		.ФиксированныеНастройки
		.ПараметрыДанных
		.УстановитьЗначениеПараметра("Заказ", Заказ);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыПолучатели,
		"Заказ.ПодразделениеКомпании",
		Параметры.ПодразделениеКомпании,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ Параметры.ПодразделениеКомпании.Пустая(),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗаказыПолучателиЗаказПодразделениеКомпании"
	);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыПолучатели,
		"Заказ.Организация",
		Параметры.Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ Параметры.Организация.Пустая(),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗаказыПолучателиЗаказОрганизация"
	);
	УстановитьПараметрыСпискаПолучателей(ЭтотОбъект);
	
	// Отбор по заказу обновлять не требуется поэтому установим отдельно от остальных параметров.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПозицииСРаспределением,
																																					"ЗаказПокупателя",
																																					Заказ,
																																					ВидСравненияКомпоновкиДанных.Равно,
																																					,
																																					Истина,
																																					РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	СостояниеОбеспеченияСервер.ДополнитьОтборСпискаНоменклатурой(ПозицииСРаспределением, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьПодчиненные" И ЭтотОбъект.ВладелецФормы = Источник Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Поля = СтрРазделить("Номенклатура,ЗаказПоставщика,Количество,Заказ", ",");
	
	Для Каждого Строка Из ПодобранныеПозиции Цикл
		
		Индекс = ПодобранныеПозиции.Индекс(Строка);
		
		Для Каждого Поле Из Поля Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка[Поле]) Тогда
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодобранныеПозиции", Индекс + 1,  Поле);
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле %1 в строке №%2'"),
					    НРег(Поле),
						Индекс + 1
					),
					,
					ПутьКТабличнойЧасти,
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если
			ЗначениеЗаполнено(Строка["ВладелецХарактеристики"])
			И НЕ ЗначениеЗаполнено(Строка["ХарактеристикаНоменклатуры"])
		Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодобранныеПозиции",
							Индекс + 1, "ХарактеристикаНоменклатуры");
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не заполнена характеристика в строке №%1'"),
					 	Индекс + 1
					),
					,
					ПутьКТабличнойЧасти,
					,
					Отказ
				);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если
		ВладелецФормы <> Неопределено
		И ВладелецФормы.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма"
	Тогда
		
		ВладелецФормы.ОткрытаПодчиненнаяФорма = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииСРаспределением

&НаКлиенте
Процедура ПозицииСРаспределениемПриАктивизацииСтроки(Элемент)
	
	Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	Если Элементы.ПозицииСРаспределением.ТекущиеДанные <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Отбор, Элементы.ПозицииСРаспределением.ТекущиеДанные);
		
	КонецЕсли;
	
	УстановитьПараметрыСпискаПолучателей(ЭтотОбъект, Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыПолучатели

&НаКлиенте
Процедура ЗаказыПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Товар = Элементы.ПозицииСРаспределением.ТекущиеДанные;
	Получатель = Элементы.ЗаказыПолучатели.ТекущиеДанные;
	
	ДанныеПодбираемойПозиции = Новый Структура("Номенклатура,
		|ХарактеристикаНоменклатуры,
		|ВладелецХарактеристики,
		|ЗаказПоставщика,
		|Заказ,
		|Количество,
		|КоличествоТребуется,
		|КоличествоЕсть");
	ЗаполнитьЗначенияСвойств(ДанныеПодбираемойПозиции, Товар);
	ЗаполнитьЗначенияСвойств(ДанныеПодбираемойПозиции, Получатель);
	ДанныеПодбираемойПозиции.Количество = 0;
	ДанныеПодбираемойПозиции.КоличествоТребуется = Получатель.ТребуетсяОбеспечить;
	ДанныеПодбираемойПозиции.КоличествоЕсть = Товар.КоличествоОстаток;
	НачатьДобавлениеПозиции(ДанныеПодбираемойПозиции);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодобранныеПозиции

&НаКлиенте
Процедура ПодобранныеПозицииНоменклатураПриИзменении(Элемент)
	
	Товар = ПодобранныеПозиции.НайтиПоИдентификатору(Элементы.ПодобранныеПозиции.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(Товар, СостояниеОбеспеченияКлиент.ДанныеПодобраннойНоменклатуры(Товар.Номенклатура));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПередатьРаспределение(Команда)
	
	РезультатПередачи = ПередатьРаспределениеНаСервере();
	
	Если РезультатПередачи.Ошибка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Закрыть(РезультатПередачи.СозданныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	Если Элементы.ЗаказыПолучатели.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", Элементы.ЗаказыПолучатели.ТекущиеДанные.Заказ);
	ИмяОткрываемойФормы = СтрШаблон(
		"Документ.%1.ФормаОбъекта",
		?(ТипЗнч(ПараметрыОткрытия.Ключ) = Тип("ДокументСсылка.ЗаказПокупателя"), "ЗаказПокупателя", "ЗаказВнутренний")
	);
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ПодобранныеПозицииХарактеристикаНоменклатуры",
		"ПодобранныеПозиции.ВладелецХарактеристики"
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСпискаПолучателей(Форма, ПараметрыСписка = Неопределено)
	
	Если ПараметрыСписка = Неопределено Тогда
		
		ПараметрыСписка = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыСписка Цикл
		
		Форма
			.ЗаказыПолучатели
			.КомпоновщикНастроек
			.ФиксированныеНастройки
			.ПараметрыДанных
			.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Считае кокое количество товара уже подобрано в результирующию таблицу.
//
// Параметры:
//  Позиция - Структура - структура с полями:
//                        * Номенклатура
//                        * ХарактеристикаНоменклатуры
//                        * Заказ
//                        * МестоРазмещения
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//              * ПоПриемнику - Число - подобрано по заказу
//              * ПоИсточнику - Число - подобрано по месту размещения
//
&НаКлиенте
Функция УжеПодобрано(Позиция)
	
	Результат = Новый Структура("ПоПриемнику,ПоИсточнику", 0, 0);
	Условие = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Заказ");
	ЗаполнитьЗначенияСвойств(Условие, Позиция);
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Условие);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Результат.ПоПриемнику = Результат.ПоПриемнику + Строка.Количество;
		
	КонецЦикла;
	
	Условие = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЗаказПоставщика");
	ЗаполнитьЗначенияСвойств(Условие, Позиция);
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Условие);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Результат.ПоИсточнику = Результат.ПоИсточнику + Строка.Количество;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // УжеПодобрано()

&НаКлиенте
Процедура ДобавитьПозицию(Позиция)
	
	Условие = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЗаказПоставщика,Заказ");
	ЗаполнитьЗначенияСвойств(Условие, Позиция);
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Условие);
	
	Если НайденныеСтроки.Количество() Тогда
		
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Позиция.Количество;
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПодобранныеПозиции.Добавить(), Позиция);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеПозиции(Позиция)
	
	УжеПодобрано = УжеПодобрано(Позиция);
	
	Если Позиция.КоличествоЕсть <= УжеПодобрано.ПоИсточнику Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Все доступные позиции в заказах поставщику уже распределены.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Позиция.КоличествоТребуется <= УжеПодобрано.ПоПриемнику Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Потребности в данном товаре уже покрыты.'"));
		Возврат;
		
	КонецЕсли;
	
	Позиция.Количество = Мин(Позиция.КоличествоЕсть - УжеПодобрано.ПоИсточнику,
		Позиция.КоличествоТребуется - УжеПодобрано.ПоПриемнику);
	ДобавитьПозицию(Позиция);
	
КонецПроцедуры

// Создает документы для отражения передачи распределения.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//  * Ошибка - Булево
//  * СозданныеДокументы - Массив
//
&НаСервере
Функция ПередатьРаспределениеНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		
		Возврат Новый Структура("Ошибка", Истина);
		
	КонецЕсли;
	
	Заказы = ПодобранныеПозиции.Выгрузить(, "ЗаказПоставщика,Заказ");
	УникальныеЗаказы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заказы.ВыгрузитьКолонку("ЗаказПоставщика"));
	ДокументыСнятия = Новый Массив();
	
	Для Каждого ЗаказПоставщика Из УникальныеЗаказы Цикл
		
		НовоеСнятие = Документы.СнятиеРаспределенияЗаказовПокупателя.СоздатьДокумент();
		НовоеСнятие.Заполнить(ЗаказПоставщика);
		НовоеСнятие.Товары.Очистить();
		НовоеСнятие.Комментарий = Комментарий;
		ПозицииПоЗаказу = ПодобранныеПозиции.НайтиСтроки(Новый Структура("ЗаказПоставщика", ЗаказПоставщика));
		
		Для Каждого Позиция Из ПозицииПоЗаказу Цикл
			
			НоваяСтрока = НовоеСнятие.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Позиция);
			Документы.СнятиеРаспределенияЗаказовПокупателя.ТоварыНоменклатураПриИзменении(НовоеСнятие, НоваяСтрока);
			НоваяСтрока.ЗаказПокупателя = Заказ;
			
		КонецЦикла;
		
		ДокументыСнятия.Добавить(НовоеСнятие);
		
	КонецЦикла;
	
	УникальныеЗаказы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заказы.ВыгрузитьКолонку("Заказ"));
	ДокументыРаспределения = Новый Массив();
	
	Для Каждого ЗаказКлиента Из УникальныеЗаказы Цикл
		
		НовоеРаспределение = Документы.РаспределениеЗаказаПокупателя.СоздатьДокумент();
		НовоеРаспределение.Заполнить(ЗаказКлиента);
		НовоеРаспределение.Комментарий = Комментарий;
		НовоеРаспределение.Товары.Очистить();
		ПозицииПоЗаказу = ПодобранныеПозиции.НайтиСтроки(Новый Структура("Заказ", ЗаказКлиента));
		
		Для Каждого Позиция Из ПозицииПоЗаказу Цикл
			
			НоваяСтрока = НовоеРаспределение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Позиция);
			Документы.РаспределениеЗаказаПокупателя.ТоварыНоменклатураПриИзменении(НовоеРаспределение, НоваяСтрока);
			НоваяСтрока.Количество = Позиция.Количество;
			НоваяСтрока.ЗаказПоставщику = Позиция.ЗаказПоставщика;
			
		КонецЦикла;
		
		ДокументыРаспределения.Добавить(НовоеРаспределение);
		
	КонецЦикла;
	
	СозданныеДокументы = Новый Массив();
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		Для Каждого Документ Из ДокументыСнятия Цикл
			
			Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			СозданныеДокументы.Добавить(Документ.Ссылка);
			
		КонецЦикла;
		
		Для Каждого Документ Из ДокументыРаспределения Цикл
			
			Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			СозданныеДокументы.Добавить(Документ.Ссылка);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Новый Структура("Ошибка,СозданныеДокументы", Истина, Новый ФиксированныйМассив(Новый Массив()));
		
	КонецПопытки;
	
	
	Возврат Новый Структура("Ошибка,СозданныеДокументы", Ложь, Новый ФиксированныйМассив(СозданныеДокументы));
	
КонецФункции // ПередатьРаспределениеНаСервере()

#КонецОбласти
