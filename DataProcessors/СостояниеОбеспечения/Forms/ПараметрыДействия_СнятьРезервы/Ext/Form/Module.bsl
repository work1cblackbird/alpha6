#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Заказ = Параметры.Заказ;
	Заголовок = СостояниеОбеспеченияСервер.ЗаголовокОкна(Заказ, "Отмена резервирования для");
	ЗаполнитьТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьПодчиненные" И ЭтотОбъект.ВладелецФормы = Источник Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если
		ВладелецФормы <> Неопределено
		И ВладелецФормы.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма"
	Тогда
		
		ВладелецФормы.ОткрытаПодчиненнаяФорма = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	Товар = Элементы.Товары.ТекущиеДанные.ПолучитьРодителя();
	
	Если Товар = Неопределено Тогда
		
		РаспределитьКоличество(Элементы.Товары.ТекущиеДанные);
		Возврат;
		
	КонецЕсли;
	
	РассчитатьИтог(Товар);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	Если НЕ ЗаполнениеКорректно() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не корректно задано количество для отмены резервов.'"));
		Возврат;
		
	КонецЕсли;
	
	Закрыть(ОтменитьРезервированиеНаСервере());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементыУсловногоФормления = Новый Массив;
	
	ВыделениеГруппыШрифтом = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ВыделениеГруппыШрифтом.Поля.Добавить(Элементы.Товары.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "Товары.МестоРазмещения";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ВыделениеГруппыШрифтом.Условия.Добавить(Условие);
	ВыделениеГруппыШрифтом.Оформление.Вставить("Шрифт", ШрифтыСтиля.СостояниеОбеспеченияШрифтГруппы);
	ЭлементыУсловногоФормления.Добавить(ВыделениеГруппыШрифтом);
	
	ВыделениеНеКорректногоКоличества = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ВыделениеНеКорректногоКоличества.Поля.Добавить(Элементы.ТоварыКоличество.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "Товары.Количество";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	Условие.Правое = "Товары.ВРезерве";
	ВыделениеНеКорректногоКоличества.Условия.Добавить(Условие);
	ВыделениеНеКорректногоКоличества.Оформление.Вставить("ЦветФона", ЦветаСтиля.ЦветФонаНекорректногоКонтрагентаВДокументе);
	ЭлементыУсловногоФормления.Добавить(ВыделениеНеКорректногоКоличества);
	
	ОбщегоНазначенияАвтосалон.УстановитьУсловноеОформление(УсловноеОформление.Элементы, ЭлементыУсловногоФормления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТовары()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Построитель = Новый ПостроительЗапроса(
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.СкладКомпании КАК МестоРазмещения,
	|	ЗаказыПокупателейОстатки.РезервОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.РезервОстаток КАК ВРезерве,
	|	ЗаказыПокупателейОстатки.РезервСвободныйОстаток КАК ИзСвободногоОстатка
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|		,
	|		Заказ = &Заказ
	|		{(Номенклатура), (ХарактеристикаНоменклатуры)}) КАК ЗаказыПокупателейОстатки
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(ВРезерве),
	|	СУММА(ИзСвободногоОстатка)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры");
	Построитель.Параметры.Вставить("Заказ", Параметры.Заказ);
	Построитель = СостояниеОбеспеченияСервер.ДополнитьОтборПостроителяНоменклатурой(Построитель, Параметры);
	Построитель.Выполнить();
	ЗаполнитьДеревоТоваровПоПостроителю(Построитель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеСтроки(Строка)
	
	Возврат Строка(Строка.МестоРазмещения);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоТоваровПоПостроителю(Построитель)
	
	ЭлементыТоваров = Товары.ПолучитьЭлементы();
	ЭлементыТоваров.Очистить();
	
	Если Построитель.Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаНоменклатура = Построитель.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			НовыйТовар = ЭлементыТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйТовар, ВыборкаХарактеристика);
			НовыйТовар.ПредставлениеСтроки = СостояниеОбеспеченияСервер.ПредставлениеГруппыДерева(НовыйТовар);
			
			Выборка = ВыборкаХарактеристика.Выбрать();
			ЭлементыГруппы = НовыйТовар.ПолучитьЭлементы();
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ЭлементыГруппы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ПредставлениеСтроки = ПредставлениеСтроки(НоваяСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьКоличество(Товар)
	
	Осталось = Товар.Количество;
	
	Для Каждого Строка Из Товар.ПолучитьЭлементы() Цикл
		
		Строка.Количество = Мин(Осталось, Строка.ВРезерве);
		Осталось = Осталось - Строка.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтог(Товар)
	
	Итог = 0;
	
	Для Каждого Строка Из Товар.ПолучитьЭлементы() Цикл
		
		Итог = Итог + Строка.Количество;
		
	КонецЦикла;
	
	Товар.Количество = Итог;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеКорректно()
	
	Для Каждого Группа Из Товары.ПолучитьЭлементы() Цикл
		
		Если Группа.Количество > Группа.ВРезерве Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для Каждого Строка Из Группа.ПолучитьЭлементы() Цикл
			
			Если Строка.Количество > Строка.ВРезерве Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОтменитьРезервированиеНаСервере()
	
	СнятиеРезервов = Документы.СнятиеРезервовЗаказовПокупателя.СоздатьДокумент();
	СнятиеРезервов.Заполнить(Заказ);
	СнятиеРезервов.Комментарий = Комментарий;
	СнятиеРезервов.Товары.Очистить();
	СнятиеРезервов.КорректировкаЗаказа = КорректировкаЗаказа;
	
	Для Каждого Группа Из Товары.ПолучитьЭлементы() Цикл
		
		Для Каждого Строка Из Группа.ПолучитьЭлементы() Цикл
			
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СнятиеРезервов.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Документы.СнятиеРезервовЗаказовПокупателя.ТоварыНоменклатураПриИзменении(СнятиеРезервов, НоваяСтрока);
			НоваяСтрока.ЗаказПокупателя = Заказ;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СнятиеРезервов.Товары.Количество() = 0 Тогда
		
		Возврат Новый ФиксированныйМассив(Новый Массив);
		
	КонецЕсли;
	
	Попытка
		
		СнятиеРезервов.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Новый ФиксированныйМассив(Новый Массив);
		
	КонецПопытки;
	
	Возврат Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СнятиеРезервов.Ссылка));
	
КонецФункции

#КонецОбласти
