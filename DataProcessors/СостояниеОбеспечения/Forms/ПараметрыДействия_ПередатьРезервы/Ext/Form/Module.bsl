
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Заказ = Параметры.Заказ;
	Заголовок = СостояниеОбеспеченияСервер.ЗаголовокОкна(Заказ, "Передать резервы из");
	Элементы.ПозицииКПереносу.Заголовок = СостояниеОбеспеченияСервер.ЗаголовокОкна(Заказ, "К переносу из");
	// Статические отборы списка получателей
	ЗаказыПолучатели
		.КомпоновщикНастроек
		.ФиксированныеНастройки
		.ПараметрыДанных
		.УстановитьЗначениеПараметра("Заказ", Заказ);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыПолучатели,
		"Заказ.ПодразделениеКомпании",
		Параметры.ПодразделениеКомпании,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ Параметры.ПодразделениеКомпании.Пустая(),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗаказыПолучателиЗаказПодразделениеКомпании"
	);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыПолучатели,
		"Заказ.Организация",
		Параметры.Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ Параметры.Организация.Пустая(),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗаказыПолучателиЗаказОрганизация"
	);
	УстановитьПараметрыСпискаПолучателей(ЭтотОбъект);
	// Отбор по заказу обновлять не требуется поэтому установим отдельно от остальных параметров.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПозицииСРезервами,
		"Заказ",
		Заказ,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	СостояниеОбеспеченияСервер.ДополнитьОтборСпискаНоменклатурой(ПозицииСРезервами, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьПодчиненные" И ЭтотОбъект.ВладелецФормы = Источник Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если
		ВладелецФормы <> Неопределено
		И ВладелецФормы.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма"
	Тогда
		
		ВладелецФормы.ОткрытаПодчиненнаяФорма = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииСРезервами

&НаКлиенте
Процедура ПозицииСРезервамиПриАктивизацииСтроки(Элемент)
	
	Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	Если Элементы.ПозицииСРезервами.ТекущиеДанные <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Отбор, Элементы.ПозицииСРезервами.ТекущиеДанные);
		
	КонецЕсли;
	
	УстановитьПараметрыСпискаПолучателей(ЭтотОбъект, Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыПолучатели

&НаКлиенте
Процедура ЗаказыПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Товар = Элементы.ПозицииСРезервами.ТекущиеДанные;
	Получатель = Элементы.ЗаказыПолучатели.ТекущиеДанные;
	
	ДанныеПодбираемойПозиции = Новый Структура("Номенклатура,
		|ХарактеристикаНоменклатуры,
		|ВладелецХарактеристики,
		|МестоРазмещения,
		|Заказ,
		|Количество,
		|КоличествоТребуется,
		|КоличествоЕсть");
	ЗаполнитьЗначенияСвойств(ДанныеПодбираемойПозиции, Товар);
	ЗаполнитьЗначенияСвойств(ДанныеПодбираемойПозиции, Получатель);
	ДанныеПодбираемойПозиции.МестоРазмещения = Товар.СкладКомпании;
	ДанныеПодбираемойПозиции.Количество = 0;
	ДанныеПодбираемойПозиции.КоличествоТребуется = Получатель.ТребуетсяОбеспечить;
	ДанныеПодбираемойПозиции.КоличествоЕсть = Товар.РезервОстаток;
	НачатьДобавлениеПозиции(ДанныеПодбираемойПозиции);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодобранныеПозиции

&НаКлиенте
Процедура ПодобранныеПозицииНоменклатураПриИзменении(Элемент)
	
	Товар = ПодобранныеПозиции.НайтиПоИдентификатору(Элементы.ПодобранныеПозиции.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(Товар, СостояниеОбеспеченияКлиент.ДанныеПодобраннойНоменклатуры(Товар.Номенклатура));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	Если ЗаполнениеКорректно() Тогда
		
		Закрыть(ПередатьРезервы());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСКорректировкой(Команда)
	
	Если ЗаполнениеКорректно() Тогда
		
		Закрыть(ПередатьРезервы(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	Если Элементы.ЗаказыПолучатели.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", Элементы.ЗаказыПолучатели.ТекущиеДанные.Заказ);
	ИмяОткрываемойФормы = СтрШаблон(
		"Документ.%1.ФормаОбъекта",
		?(ТипЗнч(ПараметрыОткрытия.Ключ) = Тип("ДокументСсылка.ЗаказПокупателя"), "ЗаказПокупателя", "ЗаказВнутренний")
	);
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СостояниеОбеспеченияСервер.УстановитьУсловноеОформлениеСписка(ПозицииСРезервами);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ПодобранныеПозицииХарактеристикаНоменклатуры",
		"ПодобранныеПозиции.ВладелецХарактеристики"
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСпискаПолучателей(Форма, ПараметрыСписка = Неопределено)
	
	Если ПараметрыСписка = Неопределено Тогда
		
		ПараметрыСписка = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыСписка Цикл
		
		Форма
			.ЗаказыПолучатели
			.КомпоновщикНастроек
			.ФиксированныеНастройки
			.ПараметрыДанных
			.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПозицию(Позиция)
	
	Условие = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,МестоРазмещения,Заказ");
	ЗаполнитьЗначенияСвойств(Условие, Позиция);
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Условие);
	
	Если НайденныеСтроки.Количество() Тогда
		
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Позиция.Количество;
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПодобранныеПозиции.Добавить(), Позиция);
	
КонецПроцедуры

// Считае кокое количество товара уже подобрано в результирующию таблицу.
//
// Параметры:
//  Позиция - Структура - структура с полями:
//                        * Номенклатура
//                        * ХарактеристикаНоменклатуры
//                        * Заказ
//                        * МестоРазмещения
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//              * ПоПриемнику - Число - подобрано по заказу
//              * ПоИсточнику - Число - подобрано по месту размещения
//
&НаКлиенте
Функция УжеПодобрано(Позиция)
	
	Результат = Новый Структура("ПоПриемнику,ПоИсточнику", 0, 0);
	Условие = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Заказ");
	ЗаполнитьЗначенияСвойств(Условие, Позиция);
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Условие);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Результат.ПоПриемнику = Результат.ПоПриемнику + Строка.Количество;
		
	КонецЦикла;
	
	Условие = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(Позиция, "МестоРазмещения")) Тогда
		
		Условие.Вставить("МестоРазмещения");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Условие, Позиция);
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Условие);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Результат.ПоИсточнику = Результат.ПоИсточнику + Строка.Количество;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // УжеПодобрано()

&НаКлиенте
Процедура НачатьДобавлениеПозиции(Позиция)
	
	УжеПодобрано = УжеПодобрано(Позиция);
	
	Если Позиция.КоличествоЕсть <= УжеПодобрано.ПоИсточнику Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Все доступные резервы уже распределены с данной позиции.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Позиция.КоличествоТребуется <= УжеПодобрано.ПоПриемнику Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Потребности в данном товаре уже покрыты.'"));
		Возврат;
		
	КонецЕсли;
	
	// TODO: Подумать над заполнением, с автоматическим заполнением места если выбран верхний уровень группировки.
	
	Позиция.Количество = Мин(Позиция.КоличествоЕсть - УжеПодобрано.ПоИсточнику,
		Позиция.КоличествоТребуется - УжеПодобрано.ПоПриемнику);
	ДобавитьПозицию(Позиция);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеКорректно()
	
	Если НЕ ПодобранныеПозиции.Количество() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указаны резервы к перемещению'"),,
			"ПодобранныеПозиции");
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбязательныеПоля = СтрРазделить("Номенклатура;ХарактеристикаНоменклатуры;МестоРазмещения;Количество;Заказ", ";");
	Успешно = Истина;
	
	Для Каждого Товар Из ПодобранныеПозиции Цикл
		
		Для Каждого Поле Из ОбязательныеПоля Цикл
			
			Если НЕ ЗначениеЗаполнено(Товар.ВладелецХарактеристики) И Поле = "ХарактеристикаНоменклатуры" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Успешно = Успешно И ЗначениеЗаполнено(Товар[Поле]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ Успешно Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не все обязательные реквизиты заполнены'"));
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

&НаСервере
Функция ПередатьРезервы(СКорректировкой = Ложь)
	
	СнятиеРезервов = Документы.СнятиеРезервовЗаказовПокупателя.СоздатьДокумент();
	СнятиеРезервов.Заполнить(Заказ);
	СнятиеРезервов.Товары.Очистить();
	СнятиеРезервов.КорректировкаЗаказа = СКорректировкой;
	СнятиеРезервов.Комментарий = Комментарий;
	
	Для Каждого Товар Из ПодобранныеПозиции Цикл
		
		НоваяСтрока = СнятиеРезервов.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
		Документы.СнятиеРезервовЗаказовПокупателя.ТоварыНоменклатураПриИзменении(СнятиеРезервов, НоваяСтрока);
		НоваяСтрока.ЗаказПокупателя = Заказ;
		
	КонецЦикла;
	
	// Будем делать документ по каждому заказу для более удобной отмены изменений вручную.
	УникальныеЗаказыПолучатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ПодобранныеПозиции.Выгрузить(, "Заказ").ВыгрузитьКолонку("Заказ"));
	ДокументыРезервирования = Новый Массив();
	Условие = Новый Структура("Заказ");
	
	Для Каждого ЗаказПолучатель Из УникальныеЗаказыПолучатели Цикл
		
		Резервирование = Документы.РезервированиеЗаказовПокупателя.СоздатьДокумент();
		Резервирование.Заполнить(ЗаказПолучатель);
		Резервирование.Товары.Очистить();
		Резервирование.Комментарий = Комментарий;
		
		Условие.Заказ = ЗаказПолучатель;
		ТоварыЗаказа = ПодобранныеПозиции.НайтиСтроки(Условие);
		
		Для Каждого Товар Из ТоварыЗаказа Цикл
			
			НоваяСтрока = Резервирование.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
			Документы.РезервированиеЗаказовПокупателя.ТоварыНоменклатураПриИзменении(Резервирование, НоваяСтрока);
			НоваяСтрока.ЗаказПокупателя = ЗаказПолучатель;
			
		КонецЦикла;
		
		Если НЕ Резервирование.Товары.Количество() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументыРезервирования.Добавить(Резервирование);
		
	КонецЦикла;
	
	СозданныеДокументы = Новый Массив(); 
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		СнятиеРезервов.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		СозданныеДокументы.Добавить(СнятиеРезервов.Ссылка);
		
		Для Каждого Резервирование Из ДокументыРезервирования Цикл
			
			Резервирование.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			СозданныеДокументы.Добавить(Резервирование.Ссылка);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Новый ФиксированныйМассив(Новый Массив);
		
	КонецПопытки;
		
	Возврат Новый ФиксированныйМассив(СозданныеДокументы);
	
КонецФункции

#КонецОбласти
