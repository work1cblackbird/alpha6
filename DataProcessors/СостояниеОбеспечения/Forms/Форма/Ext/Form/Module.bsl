
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшНастроекПоУмолчанию();
	
	Если Параметры.Свойство("Отбор") Тогда 
		АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.НеИспользовать;
		ЗаполнитьЗначенияСвойств(Объект, Параметры.Отбор);
		ЗаполнитьЗначенияСвойств(КэшНастроекПоУмолчанию, Объект);
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, КэшНастроекПоУмолчанию);
	КонецЕсли;
	
	ДоступныеСклады = СостояниеОбеспеченияСервер.ДоступныеСкладыПоУмолчанию();
	ДоступныеСкладыПредставление = ПредставлениеДоступныхСкладов(ДоступныеСклады);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы И ОткрытаПодчиненнаяФорма Тогда
		
		Отказ = Истина;
		Оповестить("ЗакрытьПодчиненные",, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ДоступныеСклады = Настройки.Получить("ДоступныеСклады");
	ДоступныеСкладыПредставление = ПредставлениеДоступныхСкладов(ДоступныеСклады);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоступныеСкладыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("РедактированиеДоступныхСкладовЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ДоступныеСклады", ДоступныеСклады);
	
	ОткрытьФорму(
		"Обработка.СостояниеОбеспечения.Форма.РедактированиеДоступныхСкладов",
		ПараметрыФормы,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостояниеОбеспечения

&НаКлиенте
Процедура СостояниеОбеспеченияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "СостояниеОбеспеченияДействие" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = СостояниеОбеспечения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		
		ВвестиКорректировкуЗаказа(ТекущиеДанные.ЗаказПокупателя);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуДействия("Резервировать");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспеченияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СостояниеОбеспечения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДоступностьОтбора = НЕ Элементы.СостояниеОбеспечения.ТекущиеДанные.Номенклатура.Пустая();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СостояниеОбеспеченияКонтекстноеМенюУстановитьОтборНоменклатура",
		"Доступность",
		ДоступностьОтбора
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыСеанса

&НаКлиенте
Процедура ДокументыСеансаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Документ = ДокументыСеанса.Получить(ВыбраннаяСтрока).Значение;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(Документ));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура Обновить(Команда)
	
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	ТекущиеДанные = Элементы.СостояниеОбеспечения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		ОткрытьФорму("Документ.ЗаказВнутренний.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ЗаказПокупателя));
	Иначе
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ЗаказПокупателя));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьФильтры(Команда)
	
	ОчиститьФильтры();
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьМоиДокументы(Команда)
	
	ОчиститьФильтры();
	ЗаполнитьЗначенияСвойств(Объект, КэшНастроекПоУмолчанию);
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьДокументыМоейОрганизации(Команда)
	
	ОчиститьФильтры();
	ЗаполнитьЗначенияСвойств(Объект, КэшНастроекПоУмолчанию, "Организация");
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьДокументыМоегоПодразделения(Команда)
	
	ОчиститьФильтры();
	ЗаполнитьЗначенияСвойств(Объект, КэшНастроекПоУмолчанию, "Организация,ПодразделениеКомпании");
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура Резервировать(Команда)
	
	ОткрытьФормуДействия("Резервировать");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезервы(Команда)
	
	ОткрытьФормуДействия("СнятьРезервы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРаспределение(Команда)
	
	ОткрытьФормуДействия("ОтменитьРаспределение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьРезервыНаДругойЗаказ(Команда)
	
	ОткрытьФормуДействия("ПередатьРезервы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьРаспределение(Команда)
	
	ОткрытьФормуДействия("ПередатьРаспределение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказКлиента(Команда)
	
	ОткрытьФормуДействия("ОтменитьЗаказ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗаказ(Команда)
	
	ОткрытьФормуДействия("ПередатьЗаказ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	ТекущиеДанные = Элементы.СостояниеОбеспечения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗаказ(Команда)
	
	Если Элементы.СостояниеОбеспечения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ЗаказПокупателя = Элементы.СостояниеОбеспечения.ТекущиеДанные.ЗаказПокупателя;
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНоменклатура(Команда)
	
	Если Элементы.СостояниеОбеспечения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.Номенклатура = Элементы.СостояниеОбеспечения.ТекущиеДанные.Номенклатура;
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьЗаказы(Команда)
	
	Свернуть = СтрНайти(Команда.Имя, "Свернуть");
	ЭлементыДерева = СостояниеОбеспечения.ПолучитьЭлементы();
	
	Для Каждого Строка Из ЭлементыДерева Цикл
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Если Свернуть Тогда
			Элементы.СостояниеОбеспечения.Свернуть(ИдентификаторСтроки);
		Иначе
			Элементы.СостояниеОбеспечения.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершение ввода корректировки заказа.
//
// Параметры:
//  Результат - ДокументСсылка.ЗаказПокупателя - Выбранные документы для выоплнения действия.
//  ДопСвойства    - Структура                 - Дополнительные свойства
//
&НаКлиенте
Процедура ВвестиКорректировкуЗаказаЗавершение(Результат=Неопределено, ДопСвойства=Неопределено) Экспорт
	
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

// Завершение операции действия с заказом.
//
// Параметры:
//  НовыеДокументы - Массив из ДокументСсылка.ЗаказПокупателя - Выбранные документы для выполнения действия.
//  ДопСвойства    - Структура                      - Дополнительные свойства
//
&НаКлиенте
Процедура ДействиеСЗаказомЗавершение(НовыеДокументы, ДопСвойства=Неопределено) Экспорт
	
	ОткрытаПодчиненнаяФорма = Ложь;
	Активизировать();
	
	Если НЕ ЗначениеЗаполнено(НовыеДокументы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Документ Из НовыеДокументы Цикл
		
		ДокументыСеанса.Добавить(Документ);
		
	КонецЦикла;
	
	НачатьОбновлениеСостоянияОбеспечения();
	
КонецПроцедуры

// Завершение ввода корректировки заказа.
//
// Параметры:
//  Результат   - Массив из СправочникСсылка.СкладыКомпании - Список доступных складов.
//  ДопСвойства - Структура - Дополнительные свойства
//
&НаКлиенте
Процедура РедактированиеДоступныхСкладовЗавершение(Результат, ДопСвойства=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеСклады = Результат;
	НачатьОбновлениеСостоянияОбеспечения();
	ДоступныеСкладыПредставление = ПредставлениеДоступныхСкладов(Результат);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ЭлементыУсловногоФормления = Новый Массив;
	
	ВыделениеГруппыШрифтом = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ВыделениеГруппыШрифтом.Поля.Добавить(Элементы.СостояниеОбеспечения.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Номенклатура";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ВыделениеГруппыШрифтом.Условия.Добавить(Условие);
	ВыделениеГруппыШрифтом.Оформление.Вставить("Шрифт", ШрифтыСтиля.СостояниеОбеспеченияШрифтГруппы);
	ЭлементыУсловногоФормления.Добавить(ВыделениеГруппыШрифтом);
	
	ТекстНаличияЗамен = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ТекстНаличияЗамен.Поля.Добавить(Элементы.СостояниеОбеспеченияЕстьЗамены.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.ЕстьЗамены";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Правое = Истина;
	ТекстНаличияЗамен.Условия.Добавить(Условие);
	ТекстНаличияЗамен.Оформление.Вставить("Текст", "СЗ");
	ЭлементыУсловногоФормления.Добавить(ТекстНаличияЗамен);
	
	ТекстОтсутствияЗамен = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ТекстОтсутствияЗамен.Поля.Добавить(Элементы.СостояниеОбеспеченияЕстьЗамены.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.ЕстьЗамены";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Правое = Ложь;
	ТекстОтсутствияЗамен.Условия.Добавить(Условие);
	ТекстОтсутствияЗамен.Оформление.Вставить("Текст", "");
	ЭлементыУсловногоФормления.Добавить(ТекстОтсутствияЗамен);
	
	СкрытьПоляГруппировки = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	СкрытьПоляГруппировки.Поля.Добавить(Элементы.СостояниеОбеспеченияЗаказПокупателя.Имя);
	СкрытьПоляГруппировки.Поля.Добавить(Элементы.СостояниеОбеспеченияКонтрагент.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Номенклатура";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	СкрытьПоляГруппировки.Условия.Добавить(Условие);
	СкрытьПоляГруппировки.Оформление.Вставить("Отображать", Ложь);
	ЭлементыУсловногоФормления.Добавить(СкрытьПоляГруппировки);
	
	НеУспеваемКДатеОтгрузке = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	НеУспеваемКДатеОтгрузке.Поля.Добавить(Элементы.СостояниеОбеспеченияДатаОтгрузки.Имя);
	НеУспеваемКДатеОтгрузке.Поля.Добавить(Элементы.СостояниеОбеспеченияДатаПоставки.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.ДатаОтгрузки";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	Условие.Правое = "СостояниеОбеспечения.ДатаПоставки";
	НеУспеваемКДатеОтгрузке.Условия.Добавить(Условие);
	НеУспеваемКДатеОтгрузке.Оформление.Вставить("ЦветФона", ЦветаСтиля.ЦветФонаНекорректногоКонтрагентаВДокументе);
	ЭлементыУсловногоФормления.Добавить(НеУспеваемКДатеОтгрузке);
	
	СтатусЗаказаГотовКОтгрузке = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	СтатусЗаказаГотовКОтгрузке.Поля.Добавить(Элементы.СостояниеОбеспеченияСостояние.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Состояние";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Правое = 2;
	СтатусЗаказаГотовКОтгрузке.Условия.Добавить(Условие);
	СтатусЗаказаГотовКОтгрузке.Оформление.Вставить("Текст", НСтр("ru = 'готов к отгрузке'"));
	СтатусЗаказаГотовКОтгрузке.Оформление.Вставить("ЦветФона",  ЦветаСтиля.СостояниеОбеспеченияГотовКОтгрузке);
	ЭлементыУсловногоФормления.Добавить(СтатусЗаказаГотовКОтгрузке);
	
	СтатусЗаказаОжидаетПоставки = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	СтатусЗаказаОжидаетПоставки.Поля.Добавить(Элементы.СостояниеОбеспеченияСостояние.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Состояние";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Правое = 1;
	СтатусЗаказаОжидаетПоставки.Условия.Добавить(Условие);
	СтатусЗаказаОжидаетПоставки.Оформление.Вставить("Текст", НСтр("ru = 'ожидает поставки'"));
	СтатусЗаказаОжидаетПоставки.Оформление.Вставить("ЦветФона", ЦветаСтиля.СостояниеОбеспеченияОжидаетПоставки);
	ЭлементыУсловногоФормления.Добавить(СтатусЗаказаОжидаетПоставки);
	
	СтатусЗаказаТребуется = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	СтатусЗаказаТребуется.Поля.Добавить(Элементы.СостояниеОбеспеченияСостояние.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Состояние";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Правое = 0;
	СтатусЗаказаТребуется.Условия.Добавить(Условие);
	СтатусЗаказаТребуется.Оформление.Вставить("Текст", НСтр("ru = 'требуется обеспечение'"));
	ЭлементыУсловногоФормления.Добавить(СтатусЗаказаТребуется);
	
	НеОплачено = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	НеОплачено.Поля.Добавить(Элементы.СостояниеОбеспеченияОплачено.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Оплачено";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Правое = 0;
	НеОплачено.Условия.Добавить(Условие);
	НеОплачено.Оформление.Вставить("Текст", НСтр("ru = 'не оплачено'"));
	ЭлементыУсловногоФормления.Добавить(НеОплачено);
	
	ОплаченоЧастично = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ОплаченоЧастично.Поля.Добавить(Элементы.СостояниеОбеспеченияОплачено.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Оплачено";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	Условие.Правое = 0;
	ОплаченоЧастично.Условия.Добавить(Условие);
	ОплаченоЧастично.Оформление.Вставить("Текст", НСтр("ru = 'частично'"));
	ЭлементыУсловногоФормления.Добавить(ОплаченоЧастично);
	
	ОплаченоПолностью = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ОплаченоПолностью.Поля.Добавить(Элементы.СостояниеОбеспеченияОплачено.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Оплачено";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	Условие.Правое = "СостояниеОбеспечения.КОплате";
	ОплаченоПолностью.Условия.Добавить(Условие);
	ОплаченоПолностью.Оформление.Вставить("Текст", НСтр("ru = 'полностью'"));
	ЭлементыУсловногоФормления.Добавить(ОплаченоПолностью);
	
	СкрытьОплатуДляНоменклатуры = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	СкрытьОплатуДляНоменклатуры.Поля.Добавить(Элементы.СостояниеОбеспеченияОплачено.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Номенклатура";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	СкрытьОплатуДляНоменклатуры.Условия.Добавить(Условие);
	СкрытьОплатуДляНоменклатуры.Оформление.Вставить("Отображать", Ложь);
	ЭлементыУсловногоФормления.Добавить(СкрытьОплатуДляНоменклатуры);
	
	СкрытьДокументОснованиеДляНоменклатуры = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	СкрытьДокументОснованиеДляНоменклатуры.Поля.Добавить(Элементы.СостояниеОбеспеченияДокументОснование.Имя);
	Условие = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	Условие.Левое = "СостояниеОбеспечения.Номенклатура";
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	СкрытьДокументОснованиеДляНоменклатуры.Условия.Добавить(Условие);
	СкрытьДокументОснованиеДляНоменклатуры.Оформление.Вставить("Отображать", Ложь);
	ЭлементыУсловногоФормления.Добавить(СкрытьДокументОснованиеДляНоменклатуры);
	
	ОбщегоНазначенияАвтосалон.УстановитьУсловноеОформление(УсловноеОформление.Элементы, ЭлементыУсловногоФормления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшНастроекПоУмолчанию()
	
	НастройкиПоУмолчанию = Новый Структура;
	НастройкиПоУмолчанию.Вставить("Организация", ПараметрыСеанса.Организация);
	НастройкиПоУмолчанию.Вставить("ПодразделениеКомпании", ПараметрыСеанса.ПодразделениеКомпании);
	АктивныйСотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "Сотрудник");
	НастройкиПоУмолчанию.Вставить("Менеджер", АктивныйСотрудник);
	НастройкиПоУмолчанию.Вставить("СостояниеГотовКОтгрузке", Истина);
	НастройкиПоУмолчанию.Вставить("СостояниеОжидаетПоставки", Истина);
	НастройкиПоУмолчанию.Вставить("СостояниеТребуетсяОбеспечение", Истина);
	КэшНастроекПоУмолчанию = Новый ФиксированнаяСтруктура(НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДоступныхСкладов(Склады)
	
	Если НЕ ЗначениеЗаполнено(Склады) Тогда
		
		Возврат НСтр("ru = 'Не заданы доступные склады'");
		
	КонецЕсли;
	
	Возврат СтрСоединить(Склады, ", ");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФильтров()
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Организация");
	Реквизиты.Добавить("ПодразделениеКомпании");
	Реквизиты.Добавить("Менеджер");
	Реквизиты.Добавить("Клиент");
	Реквизиты.Добавить("Номенклатура");
	Реквизиты.Добавить("ЗаказПокупателя");
	Реквизиты.Добавить("ДокументОснование");
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьФильтры()
	
	Для Каждого Реквизит Из РеквизитыФильтров() Цикл
		
		Объект[Реквизит] = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ФильтрыОбеспечения()
	
	Фильтры = Новый Структура;
	Для Каждого Реквизит Из РеквизитыФильтров() Цикл
		
		Если НЕ ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		Фильтры.Вставить(Реквизит, Объект[Реквизит]);
		
	КонецЦикла;
	
	ФильтрСостояние = Новый Массив;
	
	Если Объект.СостояниеГотовКОтгрузке = "Полностью" Тогда
		
		ФильтрСостояние.Добавить(3);
		
	КонецЕсли;
	
	Если Объект.СостояниеГотовКОтгрузке = "Частично" Тогда
		
		ФильтрСостояние.Добавить(2);
		
	КонецЕсли;
	
	Если Объект.СостояниеОжидаетПоставки Тогда
		
		ФильтрСостояние.Добавить(1);
		
	КонецЕсли;
	
	Если Объект.СостояниеТребуетсяОбеспечение Тогда
		
		ФильтрСостояние.Добавить(0);
		
	КонецЕсли;
	
	
	Фильтры.Вставить("Состояние", ФильтрСостояние);
	
	Возврат Фильтры;
	
КонецФункции

&НаСервере
Функция ПараметрыОбеспечения()
	
	Возврат Новый Структура("Склады", ДоступныеСклады);
	
КонецФункции

&НаКлиенте
Процедура НачатьОбновлениеСостоянияОбеспечения()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ДлительнаяОперация;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ОбновитьСостоянияОбеспечения(),
		Новый ОписаниеОповещения("ОбновлениеСостоянияОбеспеченияЗаверщение", ЭтотОбъект),
		ПараметрыОжидания
	);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСостоянияОбеспечения()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Фильтры", ФильтрыОбеспечения());
	ПараметрыФормирования.Вставить("Параметры", ПараметрыОбеспечения());
	
	РезультатВыполнения = ДлительныеОперации
		.ВыполнитьВФоне("СостояниеОбеспеченияСервер.СостояниеОбеспечения", ПараметрыФормирования, ПараметрыВыполнения);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыполнения, "ИдентификаторЗадания,АдресРезультата");
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбновлениеСостоянияОбеспеченияЗаверщение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт		
		
	Если Не ЗначениеЗаполнено(ДлительнаяОперация) Или ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		Возврат;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		Возврат;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		Возврат;
		
	КонецЕсли;
	
	ПерезаполнитьДерево();
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "СостояниеОбеспечения");
	Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДерево()
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатИзХранилища = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если РезультатИзХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(РезультатИзХранилища, "СостояниеОбеспечения");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКорректировкуЗаказа(Заказ)
	
	ПараметрыФормы = Новый Структура("Основание", Заказ);
	Обработчик = Новый ОписаниеОповещения("ВвестиКорректировкуЗаказаЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Документ.КорректировкаЗаказаПокупателя.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Обработчик);
	
КонецПроцедуры

// Формирует коллекцию строк по дерева по идентификаторам
//
// Параметры:
//  Идентификаторы - Массив из Число - идентификаторы строк в дереве СостояниеОбеспечения
// 
// Возвращаемое значение:
//  Массив из Структура:
//	* ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказВнутренний -;
//	* Номенклатура - СправочникСсылка.Номенклатура - ;
//	* ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - ;
//
&НаКлиенте
Функция ЭлементыКоллекцииСостояниеОбеспечения(Идентификаторы)
	
	Результат = Новый Массив;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		Результат.Добавить(СостояниеОбеспечения.НайтиПоИдентификатору(Идентификатор));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыДействия()
	
	Если НЕ Элементы.СостояниеОбеспечения.ВыделенныеСтроки.Количество() Тогда
		
		Возврат Новый Структура("Ошибка,Предупреждение", Истина, НСтр("ru = 'Не указана строка выполнения действия.'"));
		
	КонецЕсли;
	
	ДанныеВыделеныхСтрок = ЭлементыКоллекцииСостояниеОбеспечения(Элементы.СостояниеОбеспечения.ВыделенныеСтроки);
	Заказы = Новый Массив;
	Товары = Новый Массив;
	ВыделенРодитель = Ложь;
	
	Для Каждого Строка Из ДанныеВыделеныхСтрок Цикл
		
		Родитель = Строка.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			
			Заказы.Добавить(Строка.ЗаказПокупателя);
			ВыделенРодитель = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Товар = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		ЗаполнитьЗначенияСвойств(Товар, Строка);
		
		Товары.Добавить(Товар);
		Заказы.Добавить(Родитель.ЗаказПокупателя);
		
	КонецЦикла;
	
	// Проверим, что все товары из одного заказа.
	Заказы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заказы);
	
	Если Заказы.Количество() > 1 Тогда
		
		Возврат Новый Структура("Ошибка,Предупреждение",
														Истина,
														НСтр("ru = 'Товары должны быть выделены в пределах одного заказа.'"));
		
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура("Заказ,Организация,ПодразделениеКомпании",
																			Заказы[0],
																			Объект.Организация,
																			Объект.ПодразделениеКомпании
	);
	ПараметрыДействия.Вставить("ДоступныеСклады", ДоступныеСклады);
	
	Если НЕ ВыделенРодитель Тогда
		
		ПараметрыДействия.Вставить("Товары", Товары);
		
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДействия(Действие)
	
	Обработчик = Новый ОписаниеОповещения("ДействиеСЗаказомЗавершение", ЭтотОбъект);
	ОткрытаПодчиненнаяФорма = Истина;
	
	ПараметрыДействия = ПараметрыДействия();
	
	Если ПараметрыДействия.Свойство("Ошибка") И ПараметрыДействия.Ошибка Тогда
		
		ПоказатьПредупреждение(, ПараметрыДействия.Предупреждение);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.СостояниеОбеспечения.Форма.ПараметрыДействия_" + Действие,
		ПараметрыДействия,
		ЭтотОбъект,
		ЭтотОбъект,
		Окно,
		,
		Обработчик);
	
КонецПроцедуры

#КонецОбласти