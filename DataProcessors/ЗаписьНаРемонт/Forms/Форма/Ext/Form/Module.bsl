#Область ОписаниеПеременных

&НаКлиенте
Перем СтруктураДанныхТекущейСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка
		ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаТОР");
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Если Параметры.Свойство("АвтоТест") Тогда
		
		// Возврат при получении формы для анализа.
		Возврат;
		
	КонецЕсли;	

	ПланированиеРесурсов.УстановитьНастройкиПользователя(ЭтотОбъект);
	УстановитьРежимРедактирования(ПолучитьЗначениеПараметраСтруктуры(Параметры, "РежимРедактирования"));
	
	// Добавим параметры выбора на контрагентов
	Если Не Элементы.Найти("КонтрагентЗаявкаНаРемонт") = Неопределено Тогда
		ЭлементыДляОтбораКонтрагентов = Новый Массив;
		ЭлементыДляОтбораКонтрагентов.Добавить(Элементы.КонтрагентЗаявкаНаРемонт.ПараметрыВыбора);
		
		ВидыКонтрагентов = Справочники.Контрагенты.ПолучитьВидыКонтрагентов();
		Для каждого ЭлементДляОтбора Из ЭлементыДляОтбораКонтрагентов Цикл
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(ЭлементДляОтбора, "Отбор.ВидКонтрагента", ВидыКонтрагентов);
		КонецЦикла;
	КонецЕсли;
	// Произведем инициализацию служебных реквизитов формы
	ИнициализироватьСлужебныеРеквизиты();
	
	// Установим видимость информационных колонок номенклатуры
	УстановитьВидимостьКолонокКодАртикулПроизводитель();
	
	// Установим параметры выбора для цеха
	НовыйПараметрВыбора = Новый СвязьПараметраВыбора(
		"Отбор.Организация",
		"ЗаписьНаРемонт.ЗаказНаряд.Организация",
		РежимИзмененияСвязанногоЗначения.НеИзменять
	);
	УправлениеДиалогомСервер.ОбновитьФиксированныйМассивПараметровВыбора(
		Элементы.ЦехЗаказНаряд.СвязиПараметровВыбора,
		НовыйПараметрВыбора
	);
	
	НовыйПараметрВыбора = Новый СвязьПараметраВыбора(
		"Отбор.Организация",
		"ЗаписьНаРемонт.ЗаявкаНаРемонт.Организация",
		РежимИзмененияСвязанногоЗначения.НеИзменять
	);
	УправлениеДиалогомСервер.ОбновитьФиксированныйМассивПараметровВыбора(
		Элементы.ЦехЗаявкаНаРемонт.СвязиПараметровВыбора,
		НовыйПараметрВыбора
	);
	
	// Добавим команды заполнения объекта
	//ЗащищенныеФункцииСервер.ИнициализироватьКомандыЗаполнения(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
		
	// Установим вариант отображения цен и сумм
	ЗащищенныеФункцииСервер.УстановитьДоступностьКолонокЦенИСумм(ЭтотОбъект, "Товары", "ЗаявкаНаРемонт",
		ЗаписьНаРемонт.ЗаявкаНаРемонт);
	
	ЗащищенныеФункцииСервер.УстановитьДоступностьКолонокЦенИСумм(ЭтотОбъект, "Автоработы", "ЗаявкаНаРемонт",
		ЗаписьНаРемонт.ЗаявкаНаРемонт);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	МатериалыЗаказчикаУстановитьВидимостьКолонок();
	
	// установим режим календаря
	РежимКалендаря = "Месяц";
	Элементы.ДатаПланировщика.Формат = "ДФ='ММММ гггг'";
	
	Для Каждого Режим Из Элементы.РежимКалендаря.СписокВыбора Цикл
		Режим.Картинка = БиблиотекаКартинок.Календарь;
	КонецЦикла;
	
	Если РежимШкалыМинут = 0 Тогда
		РежимШкалыМинут = 2;
	КонецЕсли;
	
	Если МасштабЯчейки = 0 Тогда
		МасштабЯчейки = 20;
	КонецЕсли;

	Элементы.ПробегЗаявкаНаРемонтРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль, КлючевыеДатыПробегов(ЗаписьНаРемонт.ЗаявкаНаРемонт));
	
	РедактированиеНоменклатуры = ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда", ТекущийОбъект(ЭтотОбъект));
	ЗапрашиватьИсполнителей = ПраваИНастройкиПользователя.Значение("ПодборИсполнителейПриДобавленииАвтоработыВЗаказНаряд", ТекущийОбъект(ЭтотОбъект));
	РедактированиеРабот        = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", ТекущийОбъект(ЭтотОбъект));
	ИспользоватьУпрощенныйРежимАвтоматическогоПланирования =
		ПраваИНастройкиПользователя.Значение("ИспользоватьУпрощенныйРежимАвтоматическогоПланирования");
	
	// заполнение реквизитов формы
	РазрешитьУдалениеПакетовВРаботе = ПраваИНастройкиПользователя.Значение("УРВ_РазрешитьУдалениеПакетовВРаботе");
	РежимРазделенияРаботПоПакетам   = ПравоПользователя(ПланыВидовХарактеристик.ПраваИНастройки.УРВ_РежимРазделенияРаботПоПакетам);
	ЗапретЗакрытияПакетов           = НЕ ПравоПользователя(ПланыВидовХарактеристик.ПраваИНастройки.УРВ_ЗапретЗакрытияПакетов);
	ПереносРаботДеталейВРекомендацииПриУдалении = ПраваИНастройкиПользователя.Значение("ПереносРаботДеталейВРекомендацииПриУдалении");
	КонтрольПересеченияВремениРабот = Строка(
		ПраваИНастройкиПользователя.Значение("КонтрольПересеченияВремениРабот", ТекущийОбъект(ЭтотОбъект))
	);
	КонтрольПланированияПрошедшимВременем = Строка(
		ПраваИНастройкиПользователя.Значение("КонтрольПланированияПрошедшимВременем", ТекущийОбъект(ЭтотОбъект))
	);
	
	ЦветаРаскраски = ПолучитьЦветаРаскраски();
	
	ОбновитьДинамическиеРеквизиты();
	
	СмещениеЧасовогоПояса = ОбщегоНазначенияАвтосалон.
		СмещениеВремениВПодразделенииКомпании(ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании);
		
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	ИспользоватьУчетРабочегоВремени = ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СоставПакетовРабот);
		
	Элементы["КартинкаРекомендации" + ЗаписьНаРемонт.РежимРедактирования].Видимость = Ложь;
	
	ИспользоватьПодключаемоеОборудование =
		МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование();
	
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	
	ИнициализироватьПоляКонтактнойИнформации();
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ЗаписьНаРемонт.РежимРедактирования = "ЗаказНаряд" Тогда
		РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(ЗаписьНаРемонт.ЗаказНаряд);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.МаксимумМетокНаФорме = 3;
	ПараметрыОтображенияМеток.ВариантОтображенияМеток = Перечисления.ВариантыОтображенияМеток.Надпись;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	Если Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов") <> Неопределено Тогда
		
		Элементы.Удалить(Элементы["РедактироватьСоставДополнительныхРеквизитов"]);
		
	КонецЕсли;
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик,
			"МеткиЗаказчикаЗаявкиНаРемонт");
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент,
			"МеткиКонтрагентаЗаявкиНаРемонт");
	Иначе
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик,
			"МеткиЗаказчикаЗаказНаряда");
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаказНаряд.Контрагент,
			"МеткиКонтрагентаЗаказНаряда");
	КонецЕсли;
	
	
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПорядокРесурсовВОбщемРежиме.Видимость = (РежимОтображенияРесурсовНаГрафике = "Общий");
	
	// определим стандартный ключ уникальности для поиска формы
	Если КлючУникальности <> "ОткрытаяЗаписьНаРемонт" Тогда
		
		КлючУникальности = "ОткрытаяЗаписьНаРемонт";
		
	КонецЕсли;
	
	НастроитьКомандныеПанелиФормы();
	ОбновитьВидимостьДереваОбъектовПланирования();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	УстановитьОтборПоПодразделениюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаполнитьЗаписьНаРемонт" Тогда
		
		Активизировать();
		
		// Разблокируем документ при необходимости
		РазблокироватьДокументДляРедактирования(Параметр, Источник.УникальныйИдентификатор);
		
		Если ЕстьНезапланированныеРаботы() Тогда
			
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить("ЕстьНезапланированныеРаботы", Истина);
			ПараметрыВопроса.Вставить("ТочкаВызова", "ПереходВЗаписьНаРемонт");
			ПараметрыВопроса.Вставить("Параметр", Параметр);
			ВопросОСохраненииОбъекта(ПараметрыВопроса, НСтр("ru = 'Есть незапланированные работы. Продолжить?'"));
			Возврат;
			
		КонецЕсли;
		
		ОО = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборДокумента");
		ВыполнитьОбработкуОповещения(ОО, Новый Структура("Значение", Параметр));
		
	ИначеЕсли ИмяСобытия = "ВыборРекомендацииАвтомобиля" И Источник = ТекущийОбъект(ЭтотОбъект).Ссылка Тогда
		
		ДобавитьРекомендациюАвтомобиля(Параметр);
		Модифицированность = Истина;
		
	Иначе
		
		ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Объект") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если ТолькоПросмотр ИЛИ Элементы["Товары" + ЗаписьНаРемонт.РежимРедактирования].ТолькоПросмотр Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Номенклатура", ВыбранноеЗначение.Объект);
			Если ВыбранноеЗначение.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ВыбранноеЗначение.ЕдиницаИзмерения) Тогда
				СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыбранноеЗначение.ЕдиницаИзмерения);
			КонецЕсли;
			Если ВыбранноеЗначение.Свойство("ХарактеристикаНоменклатуры")
				И ЗначениеЗаполнено(ВыбранноеЗначение.ХарактеристикаНоменклатуры) Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ВыбранноеЗначение.ХарактеристикаНоменклатуры);
			КонецЕсли;
			// для ЗаказНаряда и пр
			Если ПараметрыДействия <> Неопределено
				И ПараметрыДействия.Свойство("ИдентификаторПричиныОбращения")
				И ЗначениеЗаполнено(ПараметрыДействия.ИдентификаторПричиныОбращения) Тогда
				СтруктураПоиска.Вставить("ИдентификаторПричиныОбращения", ПараметрыДействия.ИдентификаторПричиныОбращения);
			КонецЕсли;
			Количество = 1;
			Если ВыбранноеЗначение.Свойство("Вес") И ВыбранноеЗначение.Вес > 0 Тогда
				Количество = ВыбранноеЗначение.Вес;
			КонецЕсли;
			ИмяРеквизитаКоличество = Неопределено;
			Если ПараметрыДействия <> Неопределено Тогда
				ПараметрыДействия.Свойство("ИмяРеквизитаКоличество", ИмяРеквизитаКоличество);
			КонецЕсли;
			Если ИмяРеквизитаКоличество = Неопределено Тогда
				ИмяРеквизитаКоличество = "Количество";
			КонецЕсли;
			
			МассивСтрокТЧ = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение.Объект;
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыДействия);
				СтрокаТабличнойЧасти.Количество = Количество;
				МенеджерОбъекта.ТоварыКоличествоПриИзменении(Объект, СтрокаТабличнойЧасти);
				ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ПараметрыДействия);
		
			Иначе
				СтрокаТабличнойЧасти = МассивСтрокТЧ[0];
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
				МенеджерОбъекта.ТоварыКоличествоПриИзменении(Объект, СтрокаТабличнойЧасти);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораНаСервере()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Если ЗавершениеРаботы Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Изменения будут потеряны.'");
			Отказ = Истина;
			
		ИначеЕсли Не ПризнакЗакрытияФормы Тогда
			
			ВопросОСохраненииОбъекта(Новый Структура("Закрыть", Истина));
			Отказ = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ЕстьНезапланированныеРаботы() И НЕ ПризнакЗакрытияФормы Тогда
		
		Если НЕ ЗавершениеРаботы Тогда
		
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить("ЕстьНезапланированныеРаботы", Истина);
			ПараметрыВопроса.Вставить("ТочкаВызова", "ПередЗакрытием");
			ВопросОСохраненииОбъекта(ПараметрыВопроса, НСтр("ru = 'Есть незапланированные работы. Продолжить?'"));
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПараметрыДействия = Новый Структура;
	
	Если ТекущаяСтраница = Элементы.Планирование Тогда
		РежимКалендаряПриИзменении();
		
		ПараметрыДействия.Вставить("ОбновитьДеревоОбъектовПланирования", ОбновитьДеревоОбъектовПланирования);
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
КонецПроцедуры

&НаКлиенте
Процедура РежимКалендаряПриИзменении(Элемент = Неопределено)
	
	ОбновитьКэш = (Элемент <> Неопределено);
	
	Если НЕ ЗначениеЗаполнено(ДатаПланировщика) Тогда
		ДатаПланировщика = ТекущаяДата();
		
		ОбновитьКэш = Истина;
	КонецЕсли;
	
	// установим формат даты отображения
	Если РежимКалендаря = "Месяц" Тогда
		Элементы.СтраницыКалендари.ТекущаяСтраница = Элементы.КалендарьНаМесяц;
		
		ФорматПериода = НСтр("ru = 'ДФ=""ММММ гггг""'");
	Иначе
		Элементы.СтраницыКалендари.ТекущаяСтраница = Элементы.Планировщик;
		
		ФорматПериода = НСтр("ru = 'ДФ=""дд - ММ - гггг""'");
	КонецЕсли;
	
	Элементы.ДатаПланировщика.Формат = ФорматПериода;
	
	Если РежимОтображенияРесурсовНаГрафике = "Общий" Тогда
		Элементы.ГруппаПотенциал.Заголовок = НСтр("ru = 'Потенциал ресурсов'");
		Элементы.ПорядокРесурсовВОбщемРежиме.Видимость = Истина;
	Иначе
		Элементы.ПорядокРесурсовВОбщемРежиме.Видимость = Ложь;
	КонецЕсли;
	
	Если РежимОтображенияРесурсовНаГрафике = "Исполнители" Тогда 
		Элементы.ГруппаПотенциал.Заголовок = НСтр("ru = 'Потенциал исполнителей'");
	КонецЕсли;
	
	Если РежимОтображенияРесурсовНаГрафике = "РабочиеМеста" Тогда
		Элементы.ГруппаПотенциал.Заголовок = НСтр("ru = 'Потенциал рабочих мест'");
	КонецЕсли;
	
	ОбновитьКалендарь(, ОбновитьКэш);
	
	// Для режима "Месяц" отключим доступность кнопки "дерева объектов планирования"
	Элементы.ПоказатьДеревоОбъектовПланирования.Доступность = (НЕ РежимКалендаря = "Месяц");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияРесурсовНаГрафикеПриИзменении(Элемент)
	
	ОбновитьКалендарь();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРесурсовВОбщемРежимеПриИзменении(Элемент)
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланировщикаПриИзменении(Элемент)
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСписокРесурсовПоПодразделениюПриИзменении(Элемент)
	Элементы.ПодразделениеОтбора.Доступность = ФормироватьСписокРесурсовПоПодразделению;
	УстановитьОтборПоПодразделениюНаСервере();
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодразделениюПриИзменении(Элемент)
	УстановитьОтборПоПодразделениюНаСервере();
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийЗаявкаНаРемонтОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбъектОбработки = ЭтотОбъект.ЗаписьНаРемонт.ЗаявкаНаРемонт;
	
	ОткрытьПолеКомментарийДляИзменения(ОбъектОбработки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийЗаказНарядОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбъектОбработки = ЭтотОбъект.ЗаписьНаРемонт.ЗаказНаряд;
	
	ОткрытьПолеКомментарийДляИзменения(ОбъектОбработки, СтандартнаяОбработка); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланированиеОбъекты

&НаКлиенте
Процедура ПланированиеОбъектыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПланированиеОбъектыПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКалендарьДневной

&НаКлиенте
Процедура КалендарьДневнойОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТипРасшифровки = ТипЗнч(Расшифровка);
	
	Если ТипРасшифровки = Тип("Массив") И ТипЗнч(Расшифровка[0]) = Тип("Структура") Тогда
		СписокИнтервалов = Новый СписокЗначений;
		Для Каждого Интервал Из Расшифровка Цикл
			// подготовим представление
			Формат = "ДФ=ЧЧ.мм";
			
			составПредставления = Новый Массив;
			составПредставления.Добавить(СтрШаблон(НСтр("ru = 'с %1 по %2 - %3'"),
				Формат(Интервал.Начало, Формат),
				Формат(Интервал.Конец, Формат),
				Интервал.Состояние)
			);
			
			Если НЕ Интервал.Документ.Пустая() Тогда
				составПредставления.Добавить(
					СтрШаблон(НСтр("ru = 'ЗН №%1 от %2'"), Интервал.Номер, Формат(Интервал.Дата, "ДЛФ=DD"))
				);
			КонецЕсли;
			
			СписокИнтервалов.Добавить(Интервал.Документ, СтрСоединить(составПредставления, " "));
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			"ОткрытьФормуЗаказНаряда");
		
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокИнтервалов);
	ИначеЕсли ТипРасшифровки = Тип("Массив") Тогда
		
		ПоказатьВыборИзМенюДокументов(Расшифровка);
		
	ИначеЕсли СтрНачинаетсяС(Расшифровка, "{""type"":""CurrentPlan""") Тогда
		
		#Если ВебКлиент Тогда
			Расшифровка = КалендарьДневнойОбработкаРасшифровкиНаСервере(Расшифровка);
			
			ТекущаяОбласть = Неопределено; name = Расшифровка.Получить("name");
			Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
				Если Рисунок.Имя = name Тогда
					ТекущаяОбласть = Рисунок;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.КалендарьДневной.ТекущаяОбласть = ТекущаяОбласть;
			ОтобразитьПримечаниеКИнтервалу(Расшифровка, ТекущаяОбласть);
			Элементы.ПланированиеОбъекты.ТекущаяСтрока = Расшифровка.Получить("obj");
		#Иначе
			
			Расшифровка = ПланированиеРесурсовКлиентСервер.РазобратьРасшифровку(Расшифровка);
			
			ТекущаяОбласть = Неопределено; name = Расшифровка.Получить("name");
			Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
				Если Рисунок.Имя = name Тогда
					ТекущаяОбласть = Рисунок;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// перенесем картинку в конец списка
			НовыйРисунок = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			ЗаполнитьЗначенияСвойств(НовыйРисунок, ТекущаяОбласть,
			"Текст,ЦветФона,Лево,Верх,Ширина,Высота,ГиперСсылка,Линия,ВертикальноеПоложение,Шрифт,РазмещениеТекста");
			
			данныеРасшифровки = Новый Массив;
			данныеРасшифровки.Добавить(Расшифровка.Получить("index"));
			данныеРасшифровки.Добавить(НовыйРисунок.Имя);
			данныеРасшифровки.Добавить(Расшифровка.Получить("obj"));
			данныеРасшифровки.Добавить(Расшифровка.Получить("note"));
			
			НовыйРисунок.Расшифровка = ПланированиеРесурсовКлиентСервер.РасшифровкаТекущегоИнтервала(данныеРасшифровки);
			
			КалендарьДневной.Рисунки.Удалить(ТекущаяОбласть);
			
			Элементы.КалендарьДневной.ТекущаяОбласть = НовыйРисунок;
			
			ОтобразитьПримечаниеКИнтервалу(Расшифровка, НовыйРисунок);
			
			Элементы.ПланированиеОбъекты.ТекущаяСтрока = Расшифровка.Получить("obj");
			
		#КонецЕсли
		
	ИначеЕсли стрНачинаетсяС(Расшифровка,  "{""type"":""Note""") Тогда
		
		#Если ВебКлиент Тогда
			УдалитьПримечанияНаСервере();
			Расшифровка = РазобратьРасшифровкуНаСервере(Расшифровка);
			Элементы.КалендарьДневной.ТекущаяОбласть = КалендарьДневной.Рисунки.Получить(Расшифровка.Получить("parent") + 1);
		#Иначе
			УдалитьПримечания(Истина);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДневнойОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНачинаетсяС(Расшифровка, "{""type"":""CurrentPlan""")
		И Элементы.КалендарьДневнойКонтекстноеМеню.Доступность Тогда
		
		#Если ВебКлиент Тогда
			ОписаниеИнтервала = РазобратьРасшифровкуНаСервере(Расшифровка);
		#Иначе
			ОписаниеИнтервала = ПланированиеРесурсовКлиентСервер.РазобратьРасшифровку(Расшифровка);
		#КонецЕсли
		
		Интервал = ПланированиеИнтервалы.НайтиПоИдентификатору(ОписаниеИнтервала.Получить("index"));
		СписокДействий = Новый СписокЗначений;
		
		Если Интервал <> Неопределено
			И НЕ ПланированиеРесурсовКлиентСервер
				.ПроверитьДоступностьВремениИнтервалаПланирования(Интервал.Конец, КонтрольПланированияПрошедшимВременем) Тогда
			
			СписокДействий.Добавить("просмотр", "Просмотреть",, БиблиотекаКартинок.ПредвПросмотр);
			СписокДействий.Добавить("скопировать", "Копировать",, БиблиотекаКартинок.Буфер_Копировать);
			
		Иначе
			
			СписокДействий.Добавить("изменить", "Изменить",, БиблиотекаКартинок.Изменить);
			СписокДействий.Добавить("вырезать", "Вырезать",, БиблиотекаКартинок.Буфер_Вырезать);
			СписокДействий.Добавить("скопировать", "Копировать",, БиблиотекаКартинок.Буфер_Копировать);
			СписокДействий.Добавить("переместить", "Переместить",, БиблиотекаКартинок.ПереместитьВправо);
			СписокДействий.Добавить("удалить", "Удалить",, БиблиотекаКартинок.Удалить);
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура("Интервал, Описание, Расшифровка", Интервал, ОписаниеИнтервала, Расшифровка);
		ПоказатьВыборИзМеню(
			Новый ОписаниеОповещения("Подключаемый_ДействиеСИнтервалом", ЭтотОбъект, ДопПараметры), СписокДействий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДневнойПриАктивизацииОбласти(Элемент)
	Область = Элемент.ТекущаяОбласть;
	
	Если ТипЗнч(Область) <> Тип("РисунокТабличногоДокумента") ИЛИ Область.Имя <> "Note" Тогда
		
		#Если ВебКлиент Тогда
			Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
				Если Рисунок.Имя = "Note" И ИмяОбластиДляВебКлиента <> Область.Имя Тогда
					УдалитьПримечанияНаСервере();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		#Иначе
			УдалитьПримечания();
		#КонецЕсли
		
		Если РежимПеремещения Тогда
			
			Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") 
				ИЛИ НЕ ПроверитьВозможностьПеремещения(Область) Тогда
				Возврат;
			КонецЕсли;
			ПереместитьИнтервал(Область);
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКалендарьОтложено", 0.1, Истина);
			
		КонецЕсли;
		
	Иначе
		
		РежимПеремещения = Ложь;
		Элементы.КалендарьДневной.Подсказка = "";
		
	КонецЕсли;
	
	Если Не РежимПеремещения Тогда
		
		Если ТипЗнч(Область) <> Тип("РисунокТабличногоДокумента") Тогда
			
			ОбновитьДоступностьДобавленияИнтервала();
			ОбновитьДоступностьДобавленияИзСправочника();
			ОбновитьДоступностьАвтоматическогоПланированияОтРесурса();
			ОбновитьДоступностьВставкиИнтервалаИзБуфера();
			ПланированиеРесурсовКлиент.ВыделитьСопутствующиеИнтервалы(Область.Расшифровка, ЭтотОбъект);
			
		Иначе
			
			ПланированиеРесурсовКлиент.ВыделитьСопутствующиеИнтервалы(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийОбъект(ЭтотОбъект).Ссылка),
				ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКалендарьНаМесяцПоле

&НаКлиенте
Процедура КалендарьНаМесяцПолеПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Цел((Конец - Начало) / 86400) = 1 Тогда
		
		РежимКалендаря = "День";
		
	Иначе
		
		РежимКалендаря = "2Дня";
		
	КонецЕсли;
	
	ДатаПланировщика = Начало;
	РежимКалендаряПриИзменении(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаМесяцПолеПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаМесяцПолеПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаМесяцПолеВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаМесяцПолеПриАктивизации(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	Если РежимКалендаря = "Месяц" Тогда
		
		Если Элемент.ВыделенныеЭлементы.Количество() = 1 Тогда
			
			ВыделитьДень(Элемент.ВыделенныеЭлементы[0].Начало, Ложь);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
	ОписаниеОбъекта = Неопределено;
	РежимПросмотраМеток = Ложь;
	
	Если СтрНайти(ЭлементИлиКоманда.Имя, "ОстальныеМетки") = 1 Тогда
		
		Если ЭлементИлиКоманда.Родитель.Имя = "МеткиКонтрагентаЗаявкиНаРемонт" Тогда
			ОписаниеОбъекта = ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент;
			РежимПросмотраМеток = Истина;
		ИначеЕсли ЭлементИлиКоманда.Родитель.Имя = "МеткиЗаказчикаЗаявкиНаРемонт" Тогда
			ОписаниеОбъекта = ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик;
			РежимПросмотраМеток = Истина;
		ИначеЕсли ЭлементИлиКоманда.Родитель.Имя = "МеткиЗаказчикаЗаказНаряда" Тогда
			ОписаниеОбъекта = ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик;
			РежимПросмотраМеток = Истина;
		ИначеЕсли ЭлементИлиКоманда.Родитель.Имя = "МеткиКонтрагентаЗаказНаряда" Тогда
			ОписаниеОбъекта = ЗаписьНаРемонт.ЗаказНаряд.Контрагент;
			РежимПросмотраМеток = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(
		ЭтотОбъект,
		ЭлементИлиКоманда,
		СтандартнаяОбработка,
		ОписаниеОбъекта,
		РежимПросмотраМеток);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НоваяЗаявкаНаРемонт(Команда)
	
	Если Команда <> Неопределено И Модифицированность Тогда
		
		ВопросОСохраненииОбъекта(Новый Структура("НоваяЗаявка", Истина));
		
	Иначе
		
		ПараметрыДействия =  Новый Структура;
		
		НоваяЗаявкаНаРемонтНаСервере(ПараметрыДействия);
		
		ШтрихКод = "";
		
		ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
		ПризнакЗаписиПланирования = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСводныйРемонтныйЗаказ(Команда)
	
	Основание = ТекущийОбъект(ЭтотОбъект).Ссылка;
	
	Если Команда <> Неопределено И (Не ЗначениеЗаполнено(Основание) Или Модифицированность) Тогда
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("СозданиеСРЗ", Истина);
		ВопросОСохраненииОбъекта(ПараметрыВопроса, НСтр("ru = 'Документ не записан. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрКоманды = Новый Структура;
		
		// проверим, должен ли быть проведен документ основание и проведен ли он
		Если НЕ ДокументПроведен(Основание) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Ввод на основании непроведенного документа запрещен. Процедура заполнения прервана.'"));
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
			Если ПроверкаНаличияПричиныОбращения(Основание) Тогда
				ПараметрыФормы.Вставить("Основание", Основание);
				ОбработчикОповещения = Новый ОписаниеОповещения("РезультатОповещенияДобавленияПричиныОбращения", ЭтотОбъект, ПараметрыФормы);
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ <%1> введен без причин обращения. %2Добавить причину обращения?'"), Основание, Символы.ПС);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			ИначеЕсли ПроверкаРеквизитовЗаявкиНаРемонт(Основание) Тогда
				ПараметрыФормы.Вставить("Основание", Основание);
				ОткрытьФормуСозданияСводногоРемонтногоЗаказа(Основание, ПараметрыФормы);
			Иначе
				ОткрытьФормуВводаСводногоРемонтногоЗаказа(Основание, ПараметрыФормы);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("СправочникСсылка.Автомобили") Тогда
			Основание = Новый Структура;
			Основание.Вставить("Автомобиль", ПараметрКоманды);
			ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаОбъекта", Новый Структура("Основание", Основание), ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказНаряд(Команда)
	
	Основание = ТекущийОбъект(ЭтотОбъект).Ссылка;
	
	Если Команда <> Неопределено И (Не ЗначениеЗаполнено(Основание) Или Модифицированность) Тогда
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("СозданиеЗаказНаряда", Истина);
		ВопросОСохраненииОбъекта(ПараметрыВопроса, НСтр("ru = 'Документ не записан. Записать?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	// Проверим, должен ли быть проведен документ основание и проведен ли он
	Если НЕ ДокументПроведен(Основание) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Ввод на основании непроведенного документа запрещен. Процедура заполнения прервана.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);			
	
	Если ПроверкаРеквизитовЗаявкиНаРемонт(Основание, Истина) Тогда

		ОткрытьФормуВводаЗаказНаряда(Основание, ПараметрыФормы);
	Иначе
		ОткрытьФорму(
			"Документ.ЗаказНаряд.ФормаОбъекта",
			ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если КонтрольПересеченияВремениРабот <> "Нет"
		И КонтрольПересеченияИнтервалов(Новый Структура("Проведение", Ложь)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроверкаСоответствияВременныхРамокПланированию(Команда) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьПослеЗаписи = Новый Структура;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Команда, "НеЗаполнятьВременныеРамки", Истина) Тогда
		
		Рамки = ПланированиеРесурсовКлиентСервер.ПолучитьВременныеРамки(ПланированиеИнтервалы);
		
			
		Если Рамки.Начало <> Дата (1,1,1) Тогда  
			
			ТекущийОбъект(ЭтотОбъект).ДатаНачала = Рамки.Начало; 
			
		КонецЕсли;  
		
		Если Рамки.Начало <> Дата (1,1,1) Тогда
		
			ТекущийОбъект(ЭтотОбъект).ДатаОкончания = Рамки.Конец;  
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьТекущийОбъектНаСервере(Ложь, ВыполнитьПослеЗаписи);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ВыполнитьПослеЗаписи, "Ошибка", Ложь) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать документ.'"));
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(ВыполнитьПослеЗаписи);
	
	ПроверитьРекомендацииПоАвтомобилю();
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	Если КонтрольПересеченияВремениРабот <> "Нет"
		И КонтрольПересеченияИнтервалов(Новый Структура("Проведение", Истина)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроверкаСоответствияВременныхРамокПланированию(Команда) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьПослеЗаписи = Новый Структура;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Команда, "НеЗаполнятьВременныеРамки", Истина) Тогда
		
		Рамки = ПланированиеРесурсовКлиентСервер.ПолучитьВременныеРамки(ПланированиеИнтервалы);
		
		Если Рамки.Начало <> Дата (1,1,1) Тогда  
			
			ТекущийОбъект(ЭтотОбъект).ДатаНачала = Рамки.Начало; 
			
		КонецЕсли;  
		
		Если Рамки.Начало <> Дата (1,1,1) Тогда
		
			ТекущийОбъект(ЭтотОбъект).ДатаОкончания = Рамки.Конец;  
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьТекущийОбъектНаСервере(Истина, ВыполнитьПослеЗаписи);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ВыполнитьПослеЗаписи, "Ошибка", Ложь) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось провести документ.'"));
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(ВыполнитьПослеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаСоответствияВременныхРамокПланированию(Команда)
	
	Если ПолучитьЗначениеПараметраСтруктуры(Команда, "НеЗаполнятьВременныеРамки") = Неопределено
		И ПризнакЗаписиПланирования Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Команда", Команда.Имя);
		ДатаНачала    = Дата(1,1,1);
		ДатаОкончания = Дата(1,1,1);
		Документ = ТекущийОбъект(ЭтотОбъект);
		
		Если НЕ ЗначениеЗаполнено(Документ.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Документ.ДатаОкончания) Тогда
			
			ДополнительныеПараметры.Вставить("НеЗаполнятьВременныеРамки", Ложь);
			Подключаемый_ОбработкаЗаполнитьВременныеРамкиПоПланированию(КодВозвратаДиалога.Да, ДополнительныеПараметры);
			
			Возврат Ложь;
			
		Иначе
			
			// Если нет планирования, то не проверяем соответствие временных рамок.
			Если ПланированиеИнтервалы.Количество() > 0 Тогда
				
				Рамки = ПланированиеРесурсовКлиентСервер.ПолучитьВременныеРамки(ПланированиеИнтервалы);
				
				Если Рамки.Начало <> Документ.ДатаНачала ИЛИ Рамки.Конец <> Документ.ДатаОкончания Тогда
					
					ОбработчикОповещения = Новый ОписаниеОповещения(
						"Подключаемый_ОбработкаЗаполнитьВременныеРамкиПоПланированию",
						ЭтотОбъект,
						ДополнительныеПараметры);
						
					ПоказатьВопрос(ОбработчикОповещения,
						НСтр("ru = 'Временные рамки не соответствуют планированию. Изменить даты?'"),
						РежимДиалогаВопрос.ДаНет,
						,
						,
						НСтр("ru = 'Изменились даты начала и окончания'"));
						
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПараметрыДокумента(Команда)
	
	// Формируем структуру параметров открытия вспомогательной формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", ТекущийОбъект(ЭтотОбъект));
	ПараметрыФормы.Вставить("Операция", СокрЛП(ТекущийОбъект(ЭтотОбъект).ХозОперация));
	ПараметрыФормы.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	ПараметрыФормы.Вставить("ТолькоПросмотр",
		ТекущийОбъект(ЭтотОбъект).Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт")
		ИЛИ ТекущийОбъект(ЭтотОбъект).Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Выполнен"));
	ПараметрыФормы.Вставить("ИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыВидимости = Новый Структура;
	
	Если НЕ ЭтоПлатный(ТекущийОбъект(ЭтотОбъект).ВидРемонта) Тогда
		
		ПараметрыВидимости.Вставить("Карточка",              Ложь);
		ПараметрыВидимости.Вставить("СкидкаНаценка",         Ложь);
		ПараметрыВидимости.Вставить("СкидкаНаценкаНаРаботы", Ложь);
		ПараметрыВидимости.Вставить("ПерерасчетСкидок",      Ложь);
		
	КонецЕсли;
	
	Если НЕ РедактированиеНоменклатуры Тогда
		
		ПараметрыВидимости.Вставить("СкидкаНаценка", Ложь);
		
	КонецЕсли;
	
	Если НЕ РедактированиеРабот Тогда
		
		ПараметрыВидимости.Вставить("СкидкаНаценкаНаРаботы", Ложь);
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПараметрыВидимости", ПараметрыВидимости);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Штрихкод", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтотОбъект);
	
	Если НЕ СтруктураПоиска.Штрихкод = Неопределено Тогда
		
		ПараметрыФормы.Вставить("Штрихкод", СтруктураПоиска.Штрихкод);
		
	КонецЕсли;
	
	// Перенесем возможные дополнительные параметры
	ПараметрыФормы.Вставить("ДопПараметры", Неопределено);
	
	// Производим открытие формы параметров
	ОткрытьФорму(
		"ОбщаяФорма.ПараметрыДокумента",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПараметрыДокумента"),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПланированияПоГруппе(Команда)
	
	ПланированиеРесурсовКлиент.УстановитьРежимПланированияПоГруппе(
		ЭтотОбъект,
		Элементы.ПланированиеОбъекты.ТекущаяСтрока,
		ПланированиеОбъекты,
		ПланированиеИнтервалы,
		"Планирование%1",
		ТекущийОбъект(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ПланированиеРесурсовКлиент.СместитьПериод(ДатаПланировщика, 1, РежимКалендаря);
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ПланированиеРесурсовКлиент.СместитьПериод(ДатаПланировщика, -1, РежимКалендаря);
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиДневногоКалендаря(Команда)
	
	Настройки = ПолучитьНастройки();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		"ОткрытьНастройкиДневногоКалендаря");
	
	ОткрытьФорму(
		"Обработка.ЗаписьНаРемонт.Форма.НастройкиДневногоКалендаря",
		Настройки,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКалендарьНаСервере(ОбновитьКэш=Истина)
	
	Если РежимКалендаря = "Месяц" Тогда
		
		Элементы.ИтогиЗаМесяц.Видимость = Истина;
		Элементы.ИтогиЗаДень.Видимость = Ложь;
		
		ОбновитьКалендарьНаМесяц();
		
	Иначе
		
		Элементы.ИтогиЗаМесяц.Видимость = Ложь;
		Элементы.ИтогиЗаДень.Видимость = Истина;
		
		Возврат СформироватьПланировщикНаДень(ОбновитьКэш);
		
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКалендарьАвтоматически()
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендарь(Команда=Неопределено, ОбновитьКэш=Истина)
	
	РезультатОбновления = ОбновитьКалендарьНаСервере(ОбновитьКэш);
	
	ОбработкаРезультатаВыполненияДействия(РезультатОбновления);
	
	// + Автоматическое обновление календаря
	
	Если ИнтервалОбновленияКалендаря = 0 Тогда
		ОтключитьОбработчикОжидания("ОбновитьКалендарьАвтоматически");
	Иначе
		ПодключитьОбработчикОжидания("ОбновитьКалендарьАвтоматически", ИнтервалОбновленияКалендаря*60); 
	КонецЕсли;
	
	// - Автоматическое обновление календаря
	
	ОбновитьТекущееПланированиеВШапке();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасположениеРесурсов(Команда)
	
	Если РасположениеРесурсов = "ЛЕВО" Тогда
		
		РасположениеРесурсов = "ВЕРХ";
		
	Иначе
		
		РасположениеРесурсов = "ЛЕВО";
		
	КонецЕсли;
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	ДатаПланировщика = НачалоДня(ТекущаяДата());
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеПланирование(Команда)
	
	Результат = ПодготовитьДанныеДляАвтоматическогоПланирования();
	
	Если Результат.ВозможноПланирование Тогда
		
		АвтоматическоеПланированиеРесурсовКлиент.ОткрытьФормуАвтоматическогоПланирования(
			Результат.Данные,
			ЭтотОбъект,
			НЕ ИспользоватьУпрощенныйРежимАвтоматическогоПланирования
		);
		
	Иначе
		
		ПоказатьПредупреждение(
			,
			СтрСоединить(Результат.Предупреждения, Символы.ПС),
			,
			НСтр("ru = 'Автоматическое планирование отменено...'")
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеПланированиеОтРесурса(Команда)
	
	Результат = ПодготовитьДанныеДляАвтоматическогоПланирования();
	
	Если Результат.ВозможноПланирование Тогда
		
		// получим ресурс
		Условие = Новый Структура("Номер", ВыделенныеРесурсы(ЭтотОбъект)[0]);
		СтрокиРесурса = ОтображаемыеРесурсы.НайтиСтроки(Условие);
		
		Если СтрокиРесурса.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось установить соответствие с ресурсом.'"));
			Возврат;
			
		ИначеЕсли СтрокиРесурса[0].Ресурс.Пустая() Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя планировать на пустой ресурс.'"));
			Возврат;
			
		КонецЕсли;
		
		РамкиОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов);
		ИнтервалыОбласти = ИнтервалыОбласти(
			РамкиОбласти.Первая,
			РамкиОбласти.Последняя,
			ИнтервалыОтображения,
			ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект));
			
		Если ИнтервалыОбласти[0].Начало < ТекущаяДата() Тогда
			ПланированиеРесурсовКлиент.ПоказатьПредупреждениеАвтоматическогоПланирования();
			Возврат;
		КонецЕсли;		
				
		Результат.Данные.Вставить("ПланироватьОтРесурса", Истина);
		Результат.Данные.Вставить("РесурсПланирования", СтрокиРесурса[0].Ресурс);
		Результат.Данные.Вставить("НачалоПериодаРасчетаОтРесурса", ИнтервалыОбласти[0].Начало);
		
		АвтоматическоеПланированиеРесурсовКлиент.ОткрытьФормуАвтоматическогоПланирования(
			Результат.Данные,
			ЭтотОбъект,
			НЕ ИспользоватьУпрощенныйРежимАвтоматическогоПланирования
		);
		
	Иначе
		
		ПоказатьПредупреждение(, СтрСоединить(Результат.Предупреждения, Символы.ПС),,
			НСтр("ru = 'Автоматическое планирование отменено...'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнтервалДляТекущегоОбъекта(Команда)
	
	// Определим текущие данные
	ТекущиеДанные = Элементы.ПланированиеОбъекты.ТекущиеДанные;
	
	// Если они пусты, то добавлять некуда
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Заполним данные объекта
	ДанныеОбъектаПланирования = ДанныеОбъектаПланирования(ТекущиеДанные);
	
	// Добавим интервалы
	Для Каждого Область Из КалендарьДневной.ВыделенныеОбласти Цикл
		
		ДобавитьИнтервалНаКалендарь(
			Область,
			ТекущиеДанные,
			ДанныеОбъектаПланирования.Объект,
			ДанныеОбъектаПланирования.ВидОбъектаПланирования);
		
	КонецЦикла;
	
	ОбновитьТекущееПланированиеВШапке();
	ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(ТекущиеДанные, ПланированиеИнтервалы);
	СформироватьПотенциалыРесурсовНаНеделю(НачалоНедели(ДатаПланировщика), КонецНедели(ДатаПланировщика));
	ПризнакЗаписиПланирования = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоОбъектовПланирования(Команда)
	
	ВидимостьДереваОбъектовПланирования = НЕ ВидимостьДереваОбъектовПланирования;
	
	ОбновитьВидимостьДереваОбъектовПланирования();
	
	Если ТипЗнч(КалендарьДневной.ТекущаяОбласть) <> Тип("РисунокТабличногоДокумента") Тогда
	
		ОбновитьДоступностьДобавленияИнтервала();
		ОбновитьДоступностьДобавленияИзСправочника();
		ОбновитьДоступностьВставкиИнтервалаИзБуфера();
		ОбновитьДоступностьАвтоматическогоПланированияОтРесурса();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИнтервал(Команда)
	
	Перем Объект, ВидОбъектаПланирования;
	
	// Проверим, а есть ли данные для копирования
	Если КопияИнтервала = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Найдем данные объекта в дереве
	ТекущиеДанные  = ПолучитьОбъектПоИдентификатору(КопияИнтервала.Идентификатор);
	
	// Пока копировали, объект уже снесли
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Объект, которому принадлежит интервал, не найден.'"),
			,
			НСтр("ru = 'Данные копирования удалены.'")
		);
		
		КопияИнтервала = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	// Заполним данные об объекте
	ДанныеОбъектаПланирования = ДанныеОбъектаПланирования(ТекущиеДанные);
	
	// Добавим для выделенных областей новый интервал
	Для Каждого Область Из КалендарьДневной.ВыделенныеОбласти Цикл
		
		Если НЕ ПроверитьВозможностьПеремещения(Область) Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьИнтервалНаКалендарь(
			Область,
			ТекущиеДанные,
			ДанныеОбъектаПланирования.Объект,
			ДанныеОбъектаПланирования.ВидОбъектаПланирования,
			Истина);
		ПереместитьИнтервалыПоОбласти(Область);
		
	КонецЦикла;
	
	ОбновитьТекущееПланированиеВШапке();
	
	// Обновим данные
	ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(ТекущиеДанные, ПланированиеИнтервалы);
	
	СформироватьПотенциалыРесурсовНаНеделю(НачалоНедели(ДатаПланировщика), КонецНедели(ДатаПланировщика));
	
	// Возведем признаки планирования
	ПризнакЗаписиПланирования = Истина;
	Модифицированность = Истина;
	КопияИнтервала = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзСправочника(Команда)
	
	ПараметрыВызова = Новый Структура();
	ПараметрыВызова.Вставить(
		"РамкиОбласти",
		ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов));
	
	ПараметрыФормы = Новый Структура();
	
	// подготовим причины обращения из документа
	ПричиныОбращенияВДокументе = Новый Массив;
	
	Для Каждого Строка Из ТекущийОбъект(ЭтотОбъект).ПричиныОбращения Цикл
		
		ПричиныОбращенияВДокументе.Добавить(Строка.ПричинаОбращения);
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ПричиныОбращенияВДокументе", ПричиныОбращенияВДокументе);
	РесурсыПланирования = Новый Массив;
	
	Для каждого ТекущийРесурс Из ВыделенныеРесурсы(ЭтотОбъект) Цикл
		
		Ресурсы = ОтображаемыеРесурсы.НайтиСтроки(Новый Структура("Номер", ТекущийРесурс));
		
		Если Ресурсы.Количество() > 0 Тогда
			
			РесурсыПланирования.Добавить(Ресурсы[0].Ресурс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("РесурсыПланирования", РесурсыПланирования);
	ПараметрыВызова.Вставить("Ресурсы", РесурсыПланирования);
	
	ОткрытьФорму(
		"Обработка.ЗаписьНаРемонт.Форма.ВыборОбъектаПланированияИзСправочников",
		ПараметрыФормы,
		ЭтотОбъект,
		КлючУникальности,
		,
		,
		Новый ОписаниеОповещения("Подключаемый_ДобавлениеИзСправочникаЗавершение", ЭтотОбъект, ПараметрыВызова),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛегендуГрафика(Команда)
	
	ОткрытьФорму(
		"Обработка.ЗаписьНаРемонт.Форма.ЛегендаЦветовГрафика",
		Новый Структура("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени),
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиДокумент(Команда)
	
	ВыборДокументаКонтекста();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	ВыборДокументаКонтекста();
	
КонецПроцедуры

// Обработчик события нажатия кнопки подменю заполнения "Очистить табличную часть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя);
	
КонецПроцедуры // ОчиститьТабличнуюЧасть()

// Обработчик события возникающего на клиенте при нажатии кнопки подменю "Связанные работы".
//
&НаКлиенте
Процедура ЗаполнитьСвязанныеРаботы(Команда)
	
	ТекущаяПричинаОбращения = Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные;
	
	Если ТекущаяПричинаОбращения <> Неопределено Тогда
		
		КлючСтроки = ТекущаяПричинаОбращения.ИдентификаторПричиныОбращения;
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.НачатьВыборКомплекснойРаботы(ЭтотОбъект, КлючСтроки, ТекущийОбъект(ЭтотОбъект));
	
КонецПроцедуры // ЗаполнитьСвязанныеРаботы()

// Обработчик события возникающего на клиенте при нажатии кнопки подменю "Связанные работы".
//
&НаКлиенте
Процедура ЗаполнитьПоВидуРемонта(Команда)
	
	СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(ТекущийОбъект(ЭтотОбъект), ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоВидуРемонта()

// Процедура - Загрузить из файла
//
// Параметры:
//  Команда	 - 	 - 
//
&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		
		// Определим табличную часть, для которой была вызвана данная команда
		ИмяТабличнойЧасти = ?(НЕ СтрНайти(Команда.Имя, "Автоработы") = 0, "Автоработы", "Товары");
		ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьИзФайла()

// Обработчик события нажатия кнопки "Подбор авторабот".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборАвторабот(Команда)
	
	ПараметрыДействия = Новый Структура;
	ЭлементПричин = "ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования;
	
	Если Элементы[ЭлементПричин].ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.НайтиПоИдентификатору(Элементы[ЭлементПричин].ТекущаяСтрока);
		
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.АвтоработыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.ТоварыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
			
		Иначе
			
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.АвтоработыЗаказНаряд, ИспользоватьПричиныОбращений);
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.ТоварыЗаказНаряд, ИспользоватьПричиныОбращений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если РежимыРедактирования().ЗаявкаНаРемонт = ЗаписьНаРемонт.РежимРедактирования Тогда
		УправлениеДиалогомАльфаАвтоКлиент.ОткрытьПодборАвторабот(ЭтотОбъект,, ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль, ПараметрыДействия);
	Иначе
		УправлениеДиалогомАльфаАвтоКлиент.ОткрытьПодборАвторабот(ЭтотОбъект,, ПолучитьАвтомобильЗаказНаряда(), ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ПодборАвторабот()

// Обработчик события возникающего на клиенте при нажатии кнопки "Заполнить деталями из производства".
//
&НаКлиенте
Процедура ЗаполнитьДеталямиИзПроизводства(Команда)
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		ЗаполнитьДеталямиИзПроизводстваНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеталямиИзПроизводства()

// Обработчик события возникающего на клиенте при нажатии кнопки "Заполнить заказными деталями".
//
&НаКлиенте
Процедура ЗаполнитьЗаказнымиДеталями(Команда)
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		ЗаполнитьЗаказнымиДеталямиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗаказнымиДеталями()

// Обработчик события возникающего на клиенте при нажатии кнопки "Заполнить красками из производства".
//
&НаКлиенте
Процедура ЗаполнитьКраскамиИзПроизводства(Команда)
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		ЗаполнитьКраскамиИзПроизводстваНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКраскамиИзПроизводства()

&НаКлиенте
Процедура КомандаНаСебестоимость(Команда)
	
	ТекущийОбъект(ЭтотОбъект).НаСебестоимость = НЕ Элементы.ТоварыКнопкаНаСебестоимость.Пометка;
	Элементы.ТоварыКнопкаНаСебестоимость.Пометка = ТекущийОбъект(ЭтотОбъект).НаСебестоимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписаниеТоваровПоСебестоимостиСНДС(Команда)
	
	ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимостиВключатьНДС = Истина;
	ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости = Не Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Пометка;
	Если Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиБезНДС.Пометка Тогда
		Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Пометка = ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости;
		Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиБезНДС.Пометка = НЕ ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости;
	Иначе
		Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Пометка = ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписаниеТоваровПоСебестоимостиБезНДС(Команда)
	
	ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимостиВключатьНДС = Ложь;
	ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости = Не Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиБезНДС.Пометка;
	Если Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Пометка Тогда
		Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Пометка = НЕ ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости;
		Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиБезНДС.Пометка = ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости;
	Иначе
		Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиБезНДС.Пометка = ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПричиныОбращений(Команда)
	
	ИспользоватьПричиныОбращений = НЕ ИспользоватьПричиныОбращений;
	
	ЗаявкаНаРемонтПричиныОбращенияПриАктивизацииСтроки(Элементы.ПричиныОбращенияЗаявкаНаРемонт);
	ЗаказНарядПричиныОбращенияПриАктивизацииСтроки(Элементы.ПричиныОбращенияЗаказНаряд);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду(Команда)
	
	ТекущийОбъект(ЭтотОбъект).ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду = НЕ ТекущийОбъект(ЭтотОбъект).ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	
	Элементы.ТоварыКнопкаЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду.Пометка = ТекущийОбъект(ЭтотОбъект).ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказать(Команда)
	
	Если Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = ЗаписьНаРемонт.ЗаказНаряд.Ссылка;
		ДействиеДокумент = "Документ." + Команда.Имя + ".ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Ложь;
		Если Команда.Имя = "ЗаказПокупателя" Тогда
			ДействиеНаДокумент = Истина;
			ДействиеХозОперацияДокумента = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаказПокупателя");
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Оформить заказ %1?'"), НРег(Сред(Команда.Имя, 6)));
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Зарезервировать(Команда)
	
	Если Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = ЗаписьНаРемонт.ЗаказНаряд.Ссылка;
		ДействиеДокумент = "Документ.ЗаказПокупателя.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Ложь;
		ДействиеНаДокумент = Истина;
		ДействиеХозОперацияДокумента = ПредопределенноеЗначение("Справочник.ХозОперации.РезервированиеПокупателя");
		ТекстСообщения = НСтр("ru = 'Зарезервировать выбранный товар из заказ-наряда?'");
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезервы(Команда)
	
	Если Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = ЗаписьНаРемонт.ЗаказНаряд.Ссылка;
		ДействиеДокумент = "Обработка.СнятиеЗапчастиСРезерва.Форма";
		ДействиеДокументИзПричинаОбращения = Ложь;
		
		Если Команда.Имя = "ОтменитьЗаказ" Тогда
			ТекстСообщения = НСтр("ru = 'Отменить заказ на выбранный товар из заказ-наряда?'");
			СнятиеРезерваСОтменой = Истина;
		Иначе
			ТекстСообщения = НСтр("ru = 'Снять с резерва выбранный товар из заказ-наряда?'");
			СнятиеРезерваСОтменой = Ложь;
		КонецЕсли;
		
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПроизводство(Команда)
	
	Если Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = ЗаписьНаРемонт.ЗаказНаряд.Ссылка;
		ДействиеДокумент = "Документ.ПеремещениеТоваровВПроизводство.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Ложь;
		ДействиеНаДокумент = Истина;
		ТекстСообщения = НСтр("ru = 'Сформировать перемещение в производство по заказ-наряду?'");
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзПроизводства(Команда)
	
	Если Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = ЗаписьНаРемонт.ЗаказНаряд.Ссылка;
		ДействиеДокумент = "Документ.ИзвлечениеТоваровИзПроизводства.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Ложь;
		ТекстСообщения = НСтр("ru = 'Сформировать перемещение из производства по заказ-наряду?'");
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Подбор номенклатуры".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Модель = ?(ЗаписьНаРемонт.РежимРедактирования = "ЗаказНаряд",
		ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Модель
	);
	
	ПараметрыДействия = Новый Структура;
	Если ЗначениеЗаполнено(Модель) Тогда
		ПараметрыДействия.Вставить("Модель", Модель);
		ПараметрыДействия.Вставить("ОтборНоменклатурыПоПрименяемости");
	КонецЕсли;
	
	Если Команда.Имя = "ПодборМатериалыЗаказчика" Тогда
		
		ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
		
		УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект, ,"МатериалыЗаказчика", , , ПараметрыДействия);
		
	Иначе
		
		ПараметрыОбратногоВызова = Новый Структура;
		
		Если Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока <> Неопределено Тогда
			
			ДанныеОбращения = ТекущийОбъект(ЭтотОбъект)
				.ПричиныОбращения
				.НайтиПоИдентификатору(Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока);
			ПараметрыОбратногоВызова.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
			
			Если РежимыРедактирования().ЗаявкаНаРемонт = ЗаписьНаРемонт.РежимРедактирования Тогда
				
				ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
					Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные,
					Элементы.АвтоработыЗаявкаНаРемонт,
					ИспользоватьПричиныОбращений
				);
				ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
					Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные,
					Элементы.ТоварыЗаявкаНаРемонт,
					ИспользоватьПричиныОбращений
				);
				
			Иначе
				
				ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
					Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные,
					Элементы.АвтоработыЗаказНаряд,
					ИспользоватьПричиныОбращений
				);
				ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
					Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные,
					Элементы.ТоварыЗаказНаряд,
					ИспользоватьПричиныОбращений
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументАвтосервиса(
			ЭтотОбъект,
			ТекущийОбъект(ЭтотОбъект),
			,
			ПараметрыОбратногоВызова,
			ПараметрыДействия
		);
		
	КонецЕсли;
	
КонецПроцедуры // ПодборНоменклатуры()

&НаКлиенте
Процедура Подключаемый_ПодборЗаменЗавершение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораЗамен(РезультатОповещения, ДополнительныеПараметры);
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораЗамен(Результат, ДополнительныеПараметры=Неопределено)
	
	ЗаменыСервер.ВыполнитьЗаменуТоваровВДокументе(ТекущийОбъект(ЭтотОбъект), Результат, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗамен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвернутьПо", "ИдентификаторПричиныОбращения,Номенклатура,ХарактеристикаНоменклатуры");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПодборЗаменЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладКомпанииОстатки", Неопределено);
	ПараметрыОткрытия.Вставить("ПодразделениеКомпании", ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании);
	ПараметрыОткрытия.Вставить("ТипЦен",                ТекущийОбъект(ЭтотОбъект).ТипЦен);
	ПараметрыОткрытия.Вставить("Валюта",                ТекущийОбъект(ЭтотОбъект).ВалютаДокумента);
	ПодборТоваровКлиент.ОткрытьПодборЗаменНоменклатуры(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект), ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Подбор по списку заказанного".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборПоЗаказам(Команда)
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("Контрагент"                 , ТекущийОбъект(ЭтотОбъект).Контрагент);
	Отборы.Вставить("Заказ.ПодразделениеКомпании", ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании);
	
	Если РежимыРедактирования().ЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования
		И ТекущийОбъект(ЭтотОбъект).ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду Тогда
		
		Отборы.Вставить("Заказ.ДокументОснование", ТекущийОбъект(ЭтотОбъект).Ссылка);
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура();
	Если Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные <> Неопределено Тогда
		
		ДопПараметры.Вставить(
			"ИдентификаторПричиныОбращения",
			Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ОткрытьПодборПоЗаказам(
		ЭтотОбъект,
		ТекущийОбъект(ЭтотОбъект),
		ЗаписьНаРемонт.РежимРедактирования+".СКД_ПодборПоЗаказам",
		Отборы,
		"Остаток",
		,
		,
		ДопПараметры);
	
КонецПроцедуры // ПодборПоЗаказам()

&НаКлиенте
Процедура ИнформацияОбОстатках(Команда)
	
	// подготовим параметры формы
	ОткрытьФорму(
		"ОбщаяФорма.ФормаИнформацииОбОстаткахНоменклатурыВЗаказНаряде",
		ПодготовитьПараметрыКОткрытиюФормы(),
		ЭтотОбъект,
		УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРекомендацииНажатие(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект(ЭтотОбъект).Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросЗаписиДокументаДляПодбораРекомендации");
		ДополнительныеПараметры.Вставить("ИмяКоманды", Кнопка.Имя);
		
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Документ еще не записан, загрузка не возможна. Записать документ?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьПодборРекомендаций(Кнопка.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборРекомендаций(ИмяКоманды)
	
	Автомобиль = АвтомобильТекущегоОбъекта();
	
	Если ТипЗнч(Автомобиль) <> Тип("СправочникСсылка.Автомобили") И (НЕ ЗначениеЗаполнено(Автомобиль)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Автомобиль не выбран.'"));
		Возврат;
	КонецЕсли;
	
	ТекОбъект = ТекущийОбъект(ЭтотОбъект);
	
	// передадим начальные параметры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",            Автомобиль);
	СтруктураПараметров.Вставить("ТипЦен",                ТекОбъект.ТипЦен);
	СтруктураПараметров.Вставить("ТипЦенАвторабот",       ТекОбъект.ТипЦенРабот);
	СтруктураПараметров.Вставить("Дата",                  ТекОбъект.Дата);
	СтруктураПараметров.Вставить("Контрагент",            ТекОбъект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорВзаиморасчетов", ТекОбъект.ДоговорВзаиморасчетов);
	СтруктураПараметров.Вставить("Цех",                   ТекОбъект.Цех);
	СтруктураПараметров.Вставить("ВидРемонта",            ТекОбъект.ВидРемонта);
	СтруктураПараметров.Вставить("Рекомендации",          ОбработкаПодборРекомендаций.Рекомендации);  
	
	Если ТипЗнч(ТекущийОбъект(ЭтотОбъект).Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		
		СтруктураПараметров.Вставить("ИмяДокумента", "Документ.ЗаявкаНаРемонт"); 
		
	Иначе 
		СтруктураПараметров.Вставить("ИмяДокумента", "Документ.ЗаказНаряд"); 
		
	КонецЕсли;
	
	
	// Добавим текущую причину обращения если они используются
	ДанныеОбращения = Неопределено;
	ИмяПричинОбращения = "ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования;
	Если Элементы[ИмяПричинОбращения].ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = ТекОбъект.ПричиныОбращения.
			НайтиПоИдентификатору(Элементы[ИмяПричинОбращения].ТекущаяСтрока).ИдентификаторПричиныОбращения;
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения);
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",           Истина);
	СтруктураПараметров.Вставить("ОтборАктуальный",       Истина);
	
	Если ИмяКоманды = "ПодборРекомендацийАвторабот" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Ложь);
	ИначеЕсли ИмяКоманды = "ПодборРекомендацийТоваров" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Ложь);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	Иначе
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборРекомендаций");
	
	ОткрытьФорму(
		"Обработка.ПодборРекомендаций.Форма",
		СтруктураПараметров,
		ЭтотОбъект,
		,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВРекомендации(Команда)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект(ЭтотОбъект).Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросЗаписиДокументаДляПодбораРекомендации");
		ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
		
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Документ еще не записан, загрузка не возможна. Записать документ?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Событие", "ВопросУдаленияСтрокПеренесенныхВРекомендации");
	ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
	
	Оповещение = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВопрос(
		Оповещение,
		НСтр("ru = 'Удалить из документа строки, перенесенные в рекомендации?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРекомендациюАвтомобиля(ИмяКоманды)
	
	Автомобиль = АвтомобильТекущегоОбъекта();
	Объект = ТекущийОбъект(ЭтотОбъект);
	
	Если ТипЗнч(Автомобиль) <> Тип("СправочникСсылка.Автомобили") И (НЕ ЗначениеЗаполнено(Автомобиль)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Автомобиль не выбран.'"));
		Возврат;
	КонецЕсли; 
	
	Если ИмяКоманды = "ПеренестиАвтоработыВРекомендации" И Объект.Автоработы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Таблица ""Автоработы"" не заполнена.'"));
		Возврат;
	ИначеЕсли ИмяКоманды = "ПеренестиНоменклатуруВРекомендации" И Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Таблица ""Товары"" не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	ОтказПеремещения = Ложь;
	
	ЗаписатьНовуюРекомендациюАвтомобиля(ИмяКоманды, ОтказПеремещения);
	
	Если ОтказПеремещения Тогда
		Возврат;
	КонецЕсли;
	
	// передадим начальные параметры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",            Автомобиль);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТипЦенАвторабот",       Объект.ТипЦенРабот);
	СтруктураПараметров.Вставить("Дата",                  Объект.Дата);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	СтруктураПараметров.Вставить("Цех",                   Объект.Цех);
	СтруктураПараметров.Вставить("ВидРемонта",            Объект.ВидРемонта);
	СтруктураПараметров.Вставить("Рекомендации",          ОбработкаПодборРекомендаций.Рекомендации);
	
	// Добавим текущую причину обращения если они используются
	ДанныеОбращения = Неопределено;
	ИмяПричинОбращения = "ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования;
	Если Элементы[ИмяПричинОбращения].ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.
			НайтиПоИдентификатору(Элементы[ИмяПричинОбращения].ТекущаяСтрока).ИдентификаторПричиныОбращения;
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения);
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",           Истина);
	СтруктураПараметров.Вставить("ОтборАктуальный",       Истина);
	
	Если ИмяКоманды = "ПеренестиАвтоработыВРекомендации" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
	ИначеЕсли ИмяКоманды = "ПеренестиНоменклатуруВРекомендации" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	КонецЕсли; 
	
КонецПроцедуры // ПеренестиРекомендациюАвтомобиля()

&НаСервере
Процедура ЗаписатьНовуюРекомендациюАвтомобиля(ИмяКоманды, ОтказПеремещения)
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	Период = ДатаТекущегоОбъекта();
	Автомобиль = АвтомобильТекущегоОбъекта();
	РежимРедактирования = ЗаписьНаРемонт.РежимРедактирования;
	
	// создадим структуру строки для записи рекомендации
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Период",            Период);
	СтруктураСтроки.Вставить("Автомобиль",        Автомобиль);
	СтруктураСтроки.Вставить("Исполнитель",       Справочники.Пользователи.ПустаяСсылка());
	СтруктураСтроки.Вставить("ЗаказНаряд",        Документы.ЗаказНаряд.ПустаяСсылка());
	СтруктураСтроки.Вставить("ЗаявкаНаРемонт",    Документы.ЗаявкаНаРемонт.ПустаяСсылка());
	СтруктураСтроки.Вставить("Автор",             Объект.Автор);
	СтруктураСтроки.Вставить("ПричинаОтказа",     Справочники.ПричиныОтказаОтОбслуживания.ПустаяСсылка());
	СтруктураСтроки.Вставить("ДатаВыполнения",    '00010101');
	СтруктураСтроки.Вставить("Выполнена",         Ложь);
	СтруктураСтроки.Вставить("Состояние",         Перечисления.СостоянияСобытий.ПустаяСсылка());
	СтруктураСтроки.Вставить("ПериодЗаписи",      СтруктураСтроки.Период);
	СтруктураСтроки.Вставить("ДатаАктуальности",  '00010101');
	СтруктураСтроки.Вставить("ДатаЗаписи",        '00010101');
	СтруктураСтроки.Вставить("Комментарий",       "");
	
	Если НЕ ЗначениеЗаполнено(ОбработкаПодборРекомендаций.Автомобиль) И ЗначениеЗаполнено(Автомобиль) Тогда
		
		ОбработкаПодборРекомендаций.Автомобиль = Автомобиль;
		
	КонецЕсли;
	
	Если ИмяКоманды = "ПеренестиАвтоработыВРекомендации" Тогда
		Для Каждого Строка Из Элементы["Автоработы" + РежимРедактирования].ВыделенныеСтроки Цикл
			ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Строка);
			СтруктураСтроки.Вставить("Рекомендация", ТекущиеДанные.Авторабота);
			СтруктураСтроки.Вставить("Количество", ТекущиеДанные.Количество);
			СтруктураСтроки.Вставить("Коэффициент", ТекущиеДанные.Коэффициент);
			
			Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Рекомендация) Тогда
				ОтказПеремещения = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнена рекомендация автомобиля. Перемещение рекомендации отменено.'")
				);
				Возврат;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("РекомендацияЗаписи", СтруктураСтроки.Рекомендация);
			Обработки.ПодборРекомендаций.ЗаписатьСтрокуРекомендации(ОбработкаПодборРекомендаций, СтруктураСтроки);
			
			// Выполним обновление объекта обработки подбора рекомендации.
			ПроверитьРекомендацииПоАвтомобилю();
			
			СтруктураСтроки.Удалить("Рекомендация");
			СтруктураСтроки.Удалить("Количество");
			СтруктураСтроки.Удалить("РекомендацияЗаписи");
		КонецЦикла;
	ИначеЕсли ИмяКоманды = "ПеренестиНоменклатуруВРекомендации" Тогда
		Для Каждого Строка Из Элементы["Товары" + РежимРедактирования].ВыделенныеСтроки Цикл
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Строка);
			СтруктураСтроки.Вставить("Рекомендация", 		ТекущиеДанные.Номенклатура);
			СтруктураСтроки.Вставить("Количество", 			ТекущиеДанные.Количество);
			СтруктураСтроки.Вставить("Коэффициент", 		ТекущиеДанные.Коэффициент);
			СтруктураСтроки.Вставить("ЕдиницаИзмерения", 	ТекущиеДанные.ЕдиницаИзмерения);
			
			Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Рекомендация) Тогда
				ОтказПеремещения = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнена рекомендация автомобиля. Перемещение рекомендации отменено.'")
				);
				Возврат;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("РекомендацияЗаписи", СтруктураСтроки.Рекомендация);
			Обработки.ПодборРекомендаций.ЗаписатьСтрокуРекомендации(ОбработкаПодборРекомендаций, СтруктураСтроки);
			
			// Выполним обновление объекта обработки подбора рекомендации.
			ПроверитьРекомендацииПоАвтомобилю();
			
			СтруктураСтроки.Удалить("Рекомендация");
			СтруктураСтроки.Удалить("Количество");
			СтруктураСтроки.Удалить("РекомендацияЗаписи");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьНовуюРекомендациюАвтомобиля()

// Проверка возможности подбора рекомендаций для выбранного автомобиля
//
// Параметры:
//  ПерезаполнениеСпискаРекомендаций - Булево	 - Признак перезаполнения списка рекомендации
//  УстанавливатьВидимостьДекорации	 - Булево	 - Признак установления видимости декорации.
//
&НаСервере
Процедура ПроверитьРекомендацииПоАвтомобилю(ПерезаполнениеСпискаРекомендаций = Истина,
	УстанавливатьВидимостьДекорации = Ложь)
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	Автомобиль = АвтомобильТекущегоОбъекта();
	ИмяПоля = "КартинкаРекомендации" + ЗаписьНаРемонт.РежимРедактирования;
	
	Если УстанавливатьВидимостьДекорации Тогда
		ОбработкаПодборРекомендаций.Автомобиль = Автомобиль;
		ОбъектПодборРекомендаций = РеквизитФормыВЗначение("ОбработкаПодборРекомендаций");
		Элементы[ИмяПоля].Видимость = ОбъектПодборРекомендаций.ПроверитьНаличиеРекомендация(
			Перечисления.СостоянияСобытий.Запланировано);
	КонецЕсли;
	
	Если ПерезаполнениеСпискаРекомендаций Тогда
		ОбработкаПодборРекомендаций.Автомобиль            = Автомобиль;
		ОбработкаПодборРекомендаций.ТипЦен                = Объект.ТипЦен;
		ОбработкаПодборРекомендаций.ТипЦенАвторабот       = Объект.ТипЦенРабот;
		ОбработкаПодборРекомендаций.Дата                  = Объект.Дата;
		ОбработкаПодборРекомендаций.Контрагент            = Объект.Контрагент;
		ОбработкаПодборРекомендаций.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
		ОбработкаПодборРекомендаций.Цех                   = Объект.Цех;
		ОбработкаПодборРекомендаций.ВидРемонта            = Объект.ВидРемонта;
		ОбъектПодборРекомендаций = РеквизитФормыВЗначение("ОбработкаПодборРекомендаций");
		ОбъектПодборРекомендаций.ЗаполнитьРекомендации();
		ОбработкаПодборРекомендаций.Рекомендации.Загрузить(ОбъектПодборРекомендаций.Рекомендации.Выгрузить());
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Состояние", Перечисления.СостоянияСобытий.Запланировано);
	
	Если ОбработкаПодборРекомендаций.Рекомендации.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		Элементы[ИмяПоля].Видимость = Ложь;
	Иначе
		Элементы[ИмяПоля].Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзВнешнихКаталогов(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Автомобиль", АвтомобильСРЗ);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Дата", ТекущийОбъект(ЭтотОбъект).Дата);
	
	ПараметрыДействия = Новый Структура;
	
	ЭлементПричин = "ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования;
	Если Элементы[ЭлементПричин].ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.НайтиПоИдентификатору(
			Элементы[ЭлементПричин].ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
			Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.АвтоработыЗаказНаряд, ИспользоватьПричиныОбращений);
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
			Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.ТоварыЗаказНаряд, ИспользоватьПричиныОбращений);
	КонецЕсли;
	
	АвтосервисКлиент.ЗагрузкаИзВнешнихКаталогов(ЭтотОбъект, ПараметрыФормы, ПараметрыДействия);
	
КонецПроцедуры // ЗагрузкаИзВнешнихКаталогов()

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировки(Команда)
	
	ИмяДействия = "ОтправкаЗапросаНаПолучениеТекущихСтатусовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("КодыМаркировки", ЗаполнитьКодыМаркировкиДляПроверки());
	ДополнительныеПараметры.Вставить("Организация", ЗаписьНаРемонт.ЗаказНаряд.Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", ЗаписьНаРемонт.ЗаказНаряд.ПодразделениеКомпании);
	ДополнительныеПараметры.Вставить("НеТребуетсяКлючСессии", Ложь);
	ДополнительныеПараметры.Вставить("РазрешенныеСостояния", МаркировкаТоваровКлиент.РазрешенныеСостояния());
	ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработчикОповещения);
	
	Если ДополнительныеПараметры.КодыМаркировки.Количество() > 0 Тогда
		МаркировкаТоваровКлиент.ОтправитьПолучитьЗапрос(ЭтотОбъект, ЗаписьНаРемонт.ЗаказНаряд, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокКодовМаркировки", Результат.Данные.КодыМаркировки);
	ПараметрыФормы.Вставить("ОтображатьСостояния"  , Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр"       , Истина);
	ПараметрыФормы.Вставить("Организация"          , ЗаписьНаРемонт.ЗаказНаряд.Организация);
	ПараметрыФормы.Вставить("ПодразделениеКомпании", ЗаписьНаРемонт.ЗаказНаряд.ПодразделениеКомпании);
	ПараметрыФормы.Вставить("ИдентификаторТовара"  , ИмяФормы);
	ПараметрыФормы.Вставить("Ссылка"               , ЗаписьНаРемонт.ЗаказНаряд.Ссылка);
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		"РедактированиеКодовМаркировкиСтрокиТовара");
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСпискаМаркировок",
		ПараметрыФормы,
		ЭтотОбъект,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзДокументаТовары(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ИдентификаторПричиныОбращения = "";
	
	Если Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = ТекущийОбъект(ЭтотОбъект)
				.ПричиныОбращения
				.НайтиПоИдентификатору(Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_ЗагрузитьИзДокументаТовары",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ДополнительныеПараметры = Новый Структура("ОбработчикОповещения", Обработчик);
	ОписаниеКоманды = Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЗаполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	
	ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзДокумента(ТекущийОбъект(ЭтотОбъект), ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКорзины(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ИдентификаторПричиныОбращения = "";
	
	Если Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = ТекущийОбъект(ЭтотОбъект)
				.ПричиныОбращения
				.НайтиПоИдентификатору(Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_ЗагрузитьИзКорзины",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ДополнительныеПараметры = Новый Структура("ОбработчикОповещения", Обработчик);
	ОписаниеКоманды = Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЗаполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	
	ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзКорзины(ТекущийОбъект(ЭтотОбъект), ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвансов(Команда)
	
	ТекущийЗаказНаряд = ТекущийОбъект(ЭтотОбъект);
	УправлениеДиалогомКлиент.ОткрытьПодборАвансов(
		ЭтотОбъект,,
		ТекущийЗаказНаряд);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДобавлениеНаГрафикИзСправочника

// Постобработка закрытия формы выбора объекта планирования из справочника
//
// Параметры:
//  Результат - Структура - Описание выбранных автоработы и причины обращения.
//  ПараметрыВызова - Структура, Неопределено - Параметры определенные перед открытием формы.
//                                              Например, описывается выбранный интервал и
//                                              ресурс для расположения добавленного интервала.
//
&НаКлиенте
Процедура Подключаемый_ДобавлениеИзСправочникаЗавершение(Результат, ПараметрыВызова = Неопределено) Экспорт
	
	// Если форма закрыта без выбора параметров ничего делать не будем
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатДобавления = ДобавитьОбъектыНаСервере(Результат);
	СоставОбъектовСвязанныхРабот = Новый Массив;
	
	ПостобработкаПричины = ПолучитьЗначениеПараметраСтруктуры(РезультатДобавления.Причина, "НеобходимаПостобработка", Ложь);
	ПостобработкаАвтоработы = ПолучитьЗначениеПараметраСтруктуры(РезультатДобавления.Авторабота, "НеобходимаПостобработка", Ложь);
	
	Если ПостобработкаПричины Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ТекущийОбъект(ЭтотОбъект));
		
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			ЭлементОписания = Элементы.ОписаниеПричиныОбращенияЗаявкаНаРемонт;
		Иначе
			ЭлементОписания = Элементы.ОписаниеПричиныОбращенияЗаказНаряд;
		КонецЕсли;
		
		ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(ТекущийОбъект(ЭтотОбъект), ЭлементОписания);
		СоставОбъектовСвязанныхРабот.Добавить(
			ТекущийОбъект(ЭтотОбъект)
				.ПричиныОбращения
				.НайтиПоИдентификатору(ПолучитьЗначениеПараметраСтруктуры(РезультатДобавления.Причина, "КлючСтроки")));
		
	КонецЕсли;
	
	Если ПостобработкаАвтоработы Тогда
		
		СоставОбъектовСвязанныхРабот.Добавить(
			ТекущийОбъект(ЭтотОбъект)
				.Автоработы
				.НайтиПоИдентификатору(ПолучитьЗначениеПараметраСтруктуры(РезультатДобавления.Авторабота, "КлючСтроки")));
		
	КонецЕсли;
	
	Если ПостобработкаПричины ИЛИ ПостобработкаАвтоработы Тогда
		
		ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
			ТекущийОбъект(ЭтотОбъект).ПричиныОбращения,
			ТекущийОбъект(ЭтотОбъект).Автоработы,
			ТекущийОбъект(ЭтотОбъект).Товары);
		
	КонецЕсли;
	
	Если СоставОбъектовСвязанныхРабот.Количество() > 0 Тогда
		
		Постобработка = Новый Структура;
		Постобработка.Вставить("Данные", РезультатДобавления);
		Постобработка.Вставить(
			"Обработчик", Новый ОписаниеОповещения("ДобавлениеИзСправочникаПостобработка", ЭтотОбъект, ПараметрыВызова));
		
		ОбновитьДеревоОбъектовПланирования = Истина;
		
		ПараметрыОткрытия = Неопределено;
		Если РежимыРедактирования().ЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования Тогда
			ПараметрыОткрытия = Новый Структура("Автомобиль", ПолучитьАвтомобильЗаказНаряда());
		КонецЕсли;
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(
			ТекущийОбъект(ЭтотОбъект),
			СоставОбъектовСвязанныхРабот,
			ЭтотОбъект,
			ПараметрыОткрытия,
			,
			Постобработка);
		
		Возврат;
		
	КонецЕсли;
	
	ПланированиеРесурсовКлиентСервер
		.ЗаполнитьОбъектыПланирования(ТекущийОбъект(ЭтотОбъект), ПланированиеИнтервалы, ПланированиеОбъекты);
	
	ОбновитьДеревоОбъектовПланирования = Ложь;
	
	ДобавлениеИзСправочникаПостобработка(РезультатДобавления, ПараметрыВызова);
	
КонецПроцедуры

// Выполняет добавление информации о выбранных объектах планирования в объект текущего документа.
//
// Параметры:
//  ОписаниеДобавляемыхДанных - Структура - Содержит информацию об объектах планирования.
//
// Возвращаемое значение:
//  Структура - Содержит информацию о добавленных данных и признаки необходимости дальнейшей обработки.
//
&НаСервере
Функция ДобавитьОбъектыНаСервере(ОписаниеДобавляемыхДанных)
	
	НоваяПричина = ДобавитьПричинуВДокумент(ОписаниеДобавляемыхДанных, ТекущийОбъект(ЭтотОбъект));
	НоваяАвторабота = ДобавитьАвтоработуВДокумент(
		ОписаниеДобавляемыхДанных,
		ПолучитьЗначениеПараметраСтруктуры(НоваяПричина, "Идентификатор")
	);
		
	Возврат Новый Структура("Причина,Авторабота", НоваяПричина, НоваяАвторабота);
	
КонецФункции // ДобавитьОбъектыНаСервере()

&НаСервере
Функция ДобавитьПричинуВДокумент(ОписаниеДобавляемыхДанных, Объект)
	
	Если ОписаниеДобавляемыхДанных.Свойство("Причина") И ЗначениеЗаполнено(ОписаниеДобавляемыхДанных.Причина) Тогда
		
		// проверим есть ли такая причина в документе
		СтрокиПричины = Объект
			.ПричиныОбращения
			.НайтиСтроки(Новый Структура("ПричинаОбращения", ОписаниеДобавляемыхДанных.Причина));
		
		Если СтрокиПричины.Количество() > 0 Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("КлючСтроки", СтрокиПричины[0].ПолучитьИдентификатор());
			Результат.Вставить("Идентификатор", СтрокиПричины[0].ИдентификаторПричиныОбращения);
			Результат.Вставить("НеобходимаПостобработка", Ложь);
			Результат.Вставить("Значение", ОписаниеДобавляемыхДанных.Причина);
			Возврат Результат;
			
		КонецЕсли;
		
		СтрокаПричины = Объект.ПричиныОбращения.Добавить();
		СтрокаПричины.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор();
		
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			
			ПараметрыДанных = Новый Структура("Модель,Комплектация", Объект.Модель, Объект.ВариантКомплектации);
			
		Иначе
			
			ПараметрыДанных =  Новый Структура("Документ", Объект.СводныйРемонтныйЗаказ);
			
		КонецЕсли;
		
		ДанныеПричины = ПричиныОбращенийСлужебныйВызовСервера
			.ДанныеСтрокиПричиныОбращения(ОписаниеДобавляемыхДанных.Причина, ПараметрыДанных);
		ЗаполнитьЗначенияСвойств(СтрокаПричины, ДанныеПричины);
		
		Результат = Новый Структура();
		Результат.Вставить("КлючСтроки", СтрокаПричины.ПолучитьИдентификатор());
		Результат.Вставить("Идентификатор", СтрокаПричины.ИдентификаторПричиныОбращения);
		Результат.Вставить("НеобходимаПостобработка", Истина);
		Результат.Вставить("Значение", ОписаниеДобавляемыхДанных.Причина);
		Возврат Результат;
	
	КонецЕсли;
	
	Если
		Объект.ПричиныОбращения.Количество() > 0
		И НЕ ЭтоВспомогательнаяРабота(ОписаниеДобавляемыхДанных.Авторабота)
	Тогда
	
		Результат = Новый Структура();
		Результат.Вставить("КлючСтроки", Объект.ПричиныОбращения[0].ПолучитьИдентификатор());
		Результат.Вставить("Идентификатор", Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения);
		Результат.Вставить("НеобходимаПостобработка", Ложь);
		Результат.Вставить("Значение", Объект.ПричиныОбращения[0].ПричинаОбращения);
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоВспомогательнаяРабота(Работа)
	
	ВидИспользованияРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Работа, "ВидИспользования");
	Возврат ВидИспользованияРаботы = Перечисления.ВидыИспользованияАвторабот.Планирование;
	
КонецФункции

&НаСервере
Функция ДобавитьАвтоработуВДокумент(ОписаниеДобавляемыхДанных, ИдентификаторКонтейнера)
	
	Если
		НЕ ОписаниеДобавляемыхДанных.Свойство("Авторабота")
		ИЛИ НЕ ЗначениеЗаполнено(ОписаниеДобавляемыхДанных.Авторабота)
	Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ЭтоВспомогательнаяРабота(ОписаниеДобавляемыхДанных.Авторабота) Тогда
		
		Возврат ДобавитьАвтоработуВоВспомогательныеАвтоработы(ОписаниеДобавляемыхДанных);
		
	КонецЕсли;
	
	Возврат ДобавитьАвтоработуВАвтоработы(ОписаниеДобавляемыхДанных, ИдентификаторКонтейнера);
	
КонецФункции

&НаСервере
Функция ДобавитьАвтоработуВАвтоработы(ОписаниеДобавляемыхДанных, ИдентификаторКонтейнера)
	
	УсловиеПоиска = Новый Структура(
		"ИдентификаторПричиныОбращения,Авторабота",
		ИдентификаторКонтейнера,
		ОписаниеДобавляемыхДанных.Авторабота
	);
	НайденныеСтроки = ТекущийОбъект(ЭтотОбъект)
		.Автоработы
		.НайтиСтроки(УсловиеПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаАвтоработы = ТекущийОбъект(ЭтотОбъект).Автоработы.Добавить();
		СтрокаАвтоработы.ИдентификаторПричиныОбращения = ИдентификаторКонтейнера;
		СтрокаАвтоработы.ИдентификаторРаботы = Новый УникальныйИдентификатор();
		СтрокаАвтоработы.Авторабота = ОписаниеДобавляемыхДанных.Авторабота;
		ПараметрыДействия = Документы[ЗаписьНаРемонт.РежимРедактирования]
			.ПолучитьПараметрыДействия(ТекущийОбъект(ЭтотОбъект));
		ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
		Документы[ЗаписьНаРемонт.РежимРедактирования].АвтоработыАвтоработаПриИзменении(
			ТекущийОбъект(ЭтотОбъект),
			СтрокаАвтоработы,
			ПараметрыДействия
		);
		
		Если ИспользоватьУчетРабочегоВремени Тогда
			
			ДобавитьНовуюАвтоработуВПакет(СтрокаАвтоработы.ПолучитьИдентификатор());
			ОбновитьДеревоПакетов = Истина;
			ИзмененыПакетыРабот = Истина;
			
		КонецЕсли;
		
		НеобходимаПостобработка = Истина;
		
	Иначе
		
		СтрокаАвтоработы = НайденныеСтроки[0];
		СтрокаАвтоработы.Количество = СтрокаАвтоработы.Количество + 1;
		ПараметрыДействия = Документы[ЗаписьНаРемонт.РежимРедактирования].ПолучитьПараметрыДействия(
			ТекущийОбъект(ЭтотОбъект)
		);
		ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
		Документы[ЗаписьНаРемонт.РежимРедактирования].АвтоработыКоличествоПриИзменении(
			ТекущийОбъект(ЭтотОбъект),
			СтрокаАвтоработы,
			ПараметрыДействия
		);
		НеобходимаПостобработка = Ложь;
		
	КонецЕсли;
	
	Если РежимыРедактирования().ЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования Тогда
		
		Документы.ЗаказНаряд.ПерерасчетСуммыСкидкиБонусами(ЗаписьНаРемонт.ЗаказНаряд);
		Документы.ЗаказНаряд.ПерерасчетСуммыНачисленийИсполнителям(
			ЗаписьНаРемонт.ЗаказНаряд,
			Перечисления.СпособыРасчета.Процентом);
		Документы.ЗаказНаряд.РассчитатьСуммуСкидкиНаценки(ЗаписьНаРемонт.ЗаказНаряд);
			
	КонецЕсли;
	
	СтруктураДанных = УправлениеДиалогомАльфаАвтоСервер.ПриОкончанииРедактирования(
		ТекущийОбъект(ЭтотОбъект),
		Истина,
		Ложь,
		"Автоработы"
	);
	Если СтруктураДанных.Свойство("_Объект") И СтруктураДанных._Объект <> ТекущийОбъект(ЭтотОбъект) Тогда
		
		КопироватьДанныеФормы(СтруктураДанных._Объект, ТекущийОбъект(ЭтотОбъект));
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураДанных);
	
	Результат = Новый Структура();
	Результат.Вставить("КлючСтроки",               СтрокаАвтоработы.ПолучитьИдентификатор());
	Результат.Вставить("НеобходимаПостобработка",  НеобходимаПостобработка);
	Результат.Вставить("Значение",                 ОписаниеДобавляемыхДанных.Авторабота);
	Результат.Вставить("ЭтоВспомогательнаяРабота", Ложь);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьАвтоработуВоВспомогательныеАвтоработы(ОписаниеДобавляемыхДанных)
	
	НоваяРабота = ТекущийОбъект(ЭтотОбъект).ВспомогательныеАвтоработы.Добавить();
	НоваяРабота.Авторабота = ОписаниеДобавляемыхДанных.Авторабота;
	НоваяРабота.ИдентификаторРаботы = Новый УникальныйИдентификатор();
	Документы[ЗаписьНаРемонт.РежимРедактирования].ВспомогательныеАвтоработыАвтоработаПриИзменении(
		ТекущийОбъект(ЭтотОбъект),
		НоваяРабота
	);
	
	Результат = Новый Структура();
	Результат.Вставить("КлючСтроки",               НоваяРабота.ПолучитьИдентификатор());
	Результат.Вставить("НеобходимаПостобработка",  Ложь);
	Результат.Вставить("Значение",                 НоваяРабота.Авторабота);
	Результат.Вставить("ЭтоВспомогательнаяРабота", Истина);
	Возврат Результат;
	
КонецФункции

// Планирование объекта добавленного из справочника после выполнения всех действия по добавлению.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Добавленные из справочника объекты:
//                                   *Причина    - Структура, Неопределено:
//                                     **Значение   - СправочникСсылка.Автоработы
//                                     **КлючСтроки - Число
//                                   *Авторабота - Структура, Неопределено:
//                                     **Значение   - СправочникСсылка.Автоработы
//                                     **КлючСтроки - Число
//  ВходныеПараметры - Структура - Информация о области выделенной для планирования:
//                                   *РамкиОбласти - Структура - Описание выделенной области на графике:
//                                     **Первая    - Число
//                                     **Последняя - Число
//                                   *Ресурсы - Массив из СправочникСсылка.Цеха, Массив из СправочникСсылка.Сотрудники
//
&НаКлиенте
Процедура ДобавлениеИзСправочникаПостобработка(ДанныеЗаполнения, ВходныеПараметры) Экспорт
	
	ОбъектПланирования = НовыйОбъектПланирования(ДанныеЗаполнения.Причина, ДанныеЗаполнения.Авторабота);
	
	Если НЕ ЗначениеЗаполнено(ОбъектПланирования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбновитьДеревоОбъектовПланирования Тогда
		
		ПланированиеРесурсовКлиентСервер.ЗаполнитьОбъектыПланирования(
			ТекущийОбъект(ЭтотОбъект),
			ПланированиеИнтервалы,
			ПланированиеОбъекты
		);
		ОбновитьДеревоОбъектовПланирования = Ложь;
		
	КонецЕсли;
	
	СтрокиОбъекта = ПланированиеРесурсовКлиентСервер.НайтиВДеревеОбъектов(
		ПланированиеОбъекты,
		Новый Структура("Идентификатор", ОбъектПланирования.Идентификатор)
	);
	
	Если СтрокиОбъекта.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектПланирования.Вставить("ДанныеДерева", СтрокиОбъекта[0]);
	
	Если РежимДобавления = 0 ИЛИ НЕ ЗначениеЗаполнено(ОбъектПланирования.ДанныеДерева.НормаВремениПлан) Тогда
		
		НовыеИнтервалы = ИнтервалыОбласти(
			ВходныеПараметры.РамкиОбласти.Первая,
			ВходныеПараметры.РамкиОбласти.Последняя,
			ИнтервалыОтображения,
			ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект)
		);
		
	Иначе
		
		НовыеИнтервалы = ИнтервалыОбласти(
			ВходныеПараметры.РамкиОбласти.Первая,
			ВходныеПараметры.РамкиОбласти.Первая,
			ИнтервалыОтображения,
			ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект)
		);
		
		Если НовыеИнтервалы.Количество() > 0 Тогда
			
			НовыеИнтервалы[0].Конец = НовыеИнтервалы[0].Начало + ОбъектПланирования.ДанныеДерева.НормаВремениПлан;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем интервалы планирования.
	Для Каждого Ресурс Из ВходныеПараметры.Ресурсы Цикл
		
		Если ТипЗнч(Ресурс) = Тип("СправочникСсылка.Цеха") Тогда
			
			ИмяРеквизита = "РабочееМесто";
			ЗначениеРесурса = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")
			
		Иначе
			
			ИмяРеквизита = "Исполнитель";
			ЗначениеРесурса = ПредопределенноеЗначение("Справочник.Цеха.ПустаяСсылка");
			
		КонецЕсли;
		
		НомерРесурса = НомерСтрокиРесурса(Ресурс);
		НомерВторогоРесурса = НомерСтрокиРесурса(ЗначениеРесурса);
		
		Для Каждого Интервал Из НовыеИнтервалы Цикл
			
			НовыйИнтервал = ПланированиеИнтервалы.Добавить();
			НовыйИнтервал.НормаВремени = Интервал.Конец - Интервал.Начало;
			ЗаполнитьЗначенияСвойств(НовыйИнтервал, Интервал, "Начало,Конец");
			
			НовыйИнтервал.НормаВремениПредставление = ПланированиеРесурсовКлиентСервер
				.ПолучитьПредставлениеВремени(НовыйИнтервал.НормаВремени);
			НовыйИнтервал.Объект = ОбъектПланирования.Значение;
			НовыйИнтервал.ВидОбъектаПланирования = ОбъектПланирования.Вид;
			НовыйИнтервал.Идентификатор = ОбъектПланирования.Идентификатор;
			
			Если ОбъектПланирования.Свойство("ИдентификаторГруппы")
				И ЗначениеЗаполнено(ОбъектПланирования.ИдентификаторГруппы) Тогда
				
				НовыйИнтервал.ИдентификаторГруппы = ОбъектПланирования.ИдентификаторГруппы;
				
			КонецЕсли;
			
			НовыйИнтервал[ИмяРеквизита] = Ресурс;
			
			ГраницыОбласти = ПланированиеРесурсовКлиентСервер.НомераЯчеекОбласти(
				Интервал.Начало,
				Интервал.Конец,
				ИнтервалыОтображения,
				ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект))[0];
			
			СтруктураОбластиИнтервала = Новый Структура;
			СтруктураОбластиИнтервала.Вставить("НомерРесурса", НомерРесурса);
			СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПервая", ГраницыОбласти.Первая);
			СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПоследняя", ГраницыОбласти.Последняя);
			
			РасположитьИнтервалНаКалендаре(
				НовыйИнтервал.ПолучитьИдентификатор(),
				ОбъектПланирования.ДанныеДерева.ПолучитьИдентификатор(),
				ПланированиеРесурсовКлиентСервер.ПредставлениеИнтервала(ТекущийОбъект(ЭтотОбъект), НовыйИнтервал),
				СтруктураОбластиИнтервала
			);
			
			Если РежимОтображенияРесурсовНаГрафике = "Общий" Тогда
				
				СтруктураОбластиИнтервала = Новый Структура;
				СтруктураОбластиИнтервала.Вставить("НомерРесурса", НомерВторогоРесурса);
				СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПервая", ГраницыОбласти.Первая);
				СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПоследняя", ГраницыОбласти.Последняя);
				
				РасположитьИнтервалНаКалендаре(
					НовыйИнтервал.ПолучитьИдентификатор(),
					ОбъектПланирования.ДанныеДерева.ПолучитьИдентификатор(),
					ПланированиеРесурсовКлиентСервер.ПредставлениеИнтервала(ТекущийОбъект(ЭтотОбъект), НовыйИнтервал),
					СтруктураОбластиИнтервала
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПризнакЗаписиПланирования = Истина;
	СформироватьПотенциалыРесурсовНаНеделю(НачалоНедели(ДатаПланировщика), КонецНедели(ДатаПланировщика));
	ОбновитьТекущееПланированиеВШапке();
	ВыделитьИнтервал(НовыйИнтервал.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Функция НовыйОбъектПланирования(Знач Причина, Знач Авторабота)
	
	Результат = Новый Структура();
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(Причина, "Идентификатор")) Тогда
		
		ИнтервалыГруппы = ПланированиеИнтервалы.НайтиСтроки(
			Новый Структура("ИдентификаторГруппы", Причина.Идентификатор)
		);
		
		Если ИнтервалыГруппы.Количество() = 0 Тогда
			
			Результат.Вставить("Идентификатор", Причина.Идентификатор);
			Результат.Вставить("Значение",      Причина.Значение);
			Результат.Вставить(
				"Вид",
				ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.ПричинаОбращения")
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если
		НЕ ЗначениеЗаполнено(Результат)
		И ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(Авторабота, "Значение"))
	Тогда
		
		Если Авторабота.ЭтоВспомогательнаяРабота Тогда
			
			СтрокаАвтоработы = ТекущийОбъект(ЭтотОбъект).ВспомогательныеАвтоработы.НайтиПоИдентификатору(Авторабота.КлючСтроки);
			Результат.Вставить(
				"Вид",
				ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.ВспомогательнаяАвторабота")
			);
			
		Иначе
			
			СтрокаАвтоработы = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиПоИдентификатору(Авторабота.КлючСтроки);
			Результат.Вставить("ИдентификаторГруппы", СтрокаАвтоработы.ИдентификаторПричиныОбращения);
			Результат.Вставить("Вид", ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.Авторабота"));
			
		КонецЕсли;
		
		Результат.Вставить("Идентификатор", СтрокаАвтоработы.ИдентификаторРаботы);
		Результат.Вставить("Значение", Авторабота.Значение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОткрытьПолеКомментарийДляИзменения(ОбъектОбработки, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;
	
	ОбработкаРезультатаЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "РасширенноеРедактированиеПоляКомментарий");

	ПоказатьВводСтроки(ОбработкаРезультатаЗакрытия, СокрЛП(ОбъектОбработки.Комментарий), НСтр("ru = 'Введите комментарий'") + " ...",, ИСТИНА);	

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаПоискаАвтоПодборНаСервере(Знач Текст, НастройкиПоискаДокументов)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если НастройкиПоискаДокументов = Неопределено Тогда
		
		НастройкиПоискаДокументов = НастройкиПоискаПоУмолчанию();
		
	КонецЕсли;
	
	ШаблонПоЗнР =
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Ссылка КАК Документ,
		|	ЗаявкаНаРемонт.Дата КАК Дата
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	%1 И ЗаявкаНаРемонт.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ПланРемонта)";
	
	ШаблонПоЗН =
		"ВЫБРАТЬ
		|	ЗаказНаряд.Ссылка КАК Документ,
		|	ЗаказНаряд.Дата КАК Дата
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	%1";
	
	ВременныеТаблицы = Новый Массив; ОбъединенияЗапроса = Новый Массив;
	
	Если НастройкиПоискаДокументов.ПоНомеруТелефона Тогда
		ВременныеТаблицы.Добавить(
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ КонтрагентыПодходящиеПоТелефону
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КонтрагентыКонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска");
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Заказчик В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоТелефону)"));
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Контрагент В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоТелефону)"));
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ВЫРАЗИТЬ(ЗаявкаНаРемонт.ПредставлениеТелефона КАК Строка(30)) ПОДОБНО &СтрокаПоиска"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоТелефону)"));
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.Контрагент В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоТелефону)"));
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ВЫРАЗИТЬ(ЗаказНаряд.СводныйРемонтныйЗаказ.ПредставлениеТелефона КАК Строка(30)) ПОДОБНО &СтрокаПоиска"));
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоНомеруДокумента Тогда
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Номер ПОДОБНО &СтрокаПоиска"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.Номер ПОДОБНО &СтрокаПоиска"));
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоЗаказчику Тогда
		ВременныеТаблицы.Добавить(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ КонтрагентыПодходящиеПоНаименованию
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &СтрокаПоиска");
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ВЫРАЗИТЬ(ЗаявкаНаРемонт.ОбращениеККлиенту КАК Строка(50)) ПОДОБНО &СтрокаПоиска"));
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Заказчик В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоНаименованию)"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоНаименованию)"));
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоАвтомобилю Тогда
		ВременныеТаблицы.Добавить(
		"ВЫБРАТЬ
		|	Автомобили.Ссылка КАК Автомобиль
		|ПОМЕСТИТЬ АвтомобилиПодходящиеПоНаименованию
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|ГДЕ
		|	Автомобили.Наименование ПОДОБНО &СтрокаПоиска");
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоНаименованию)"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоНаименованию)"));
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоГосНомеру Тогда
		ВременныеТаблицы.Добавить(
		"ВЫБРАТЬ
		|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ АвтомобилиПодходящиеПоГосНомеру
		|ИЗ
		|	РегистрСведений.Автомобили.СрезПоследних(
		|			,
		|			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)
		|				И ВЫРАЗИТЬ(Значение КАК СТРОКА(20)) ПОДОБНО &СтрокаПоиска) КАК АвтомобилиСрезПоследних");
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоГосНомеру)"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоГосНомеру)"));
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоVIN Тогда
		ВременныеТаблицы.Добавить(
		"ВЫБРАТЬ
		|	Автомобили.Ссылка КАК Автомобиль
		|ПОМЕСТИТЬ АвтомобилиПодходящиеПоVIN
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|ГДЕ
		|	Автомобили.VIN ПОДОБНО &СтрокаПоиска");
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоVIN)"));
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.VIN ПОДОБНО &СтрокаПоиска"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоVIN)"));
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоКомментарию Тогда
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Комментарий ПОДОБНО &СтрокаПоиска"));
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.Комментарий ПОДОБНО &СтрокаПоиска"));
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоИНН Тогда
		
		ВременныеТаблицы.Добавить(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ КонтрагентыПодходящиеПоИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН ПОДОБНО &СтрокаПоиска");
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Заказчик В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоИНН)"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик В (ВЫБРАТЬ Контрагент ИЗ КонтрагентыПодходящиеПоИНН)"));
		
	КонецЕсли;
	
	Если НастройкиПоискаДокументов.ПоВладельцу Тогда
		
		ВременныеТаблицы.Добавить(
		"ВЫБРАТЬ
		|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ АвтомобилиПодходящиеПоВладельцу
		|ИЗ
		|	РегистрСведений.Автомобили.СрезПоследних(
		|		,
		|		ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Хозяин)
		|		И ВЫРАЗИТЬ(Значение КАК Справочник.Контрагенты).Наименование ПОДОБНО &СтрокаПоиска) КАК АвтомобилиСрезПоследних");
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗнР, "ЗаявкаНаРемонт.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоВладельцу)"));
		
		ОбъединенияЗапроса.Добавить(СтрШаблон(ШаблонПоЗН, "ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ АвтомобилиПодходящиеПоВладельцу)"));
		
	КонецЕсли;
	
	РазделительВременныхТаблиц = "
	|;
	|";
	
	РазделительОбъединений = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапроса = СтрСоединить(ВременныеТаблицы, РазделительВременныхТаблиц) + ?(ВременныеТаблицы.Количество() > 0, РазделительВременныхТаблиц, "") + СтрСоединить(ОбъединенияЗапроса, РазделительОбъединений);
	
	ТекстЗапроса = ТекстЗапроса +
	"
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если Результат.Найти(Выборка.Документ) = Неопределено Тогда
			
			Результат.Добавить(Выборка.Документ);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиПоискаПоУмолчанию()
	
	НастройкиПоУмолчанию = Новый Структура;
	НастройкиПоУмолчанию.Вставить("ПоVIN", Истина);
	НастройкиПоУмолчанию.Вставить("ПоАвтомобилю", Истина);
	НастройкиПоУмолчанию.Вставить("ПоГосНомеру", Истина);
	НастройкиПоУмолчанию.Вставить("ПоЗаказчику", Истина);
	НастройкиПоУмолчанию.Вставить("ПоКомментарию", Истина);
	НастройкиПоУмолчанию.Вставить("ПоНомеруДокумента", Истина);
	НастройкиПоУмолчанию.Вставить("ПоНомеруТелефона", Истина);
	НастройкиПоУмолчанию.Вставить("ПоПричинеОбращения", Истина);
	НастройкиПоУмолчанию.Вставить("ПоИНН", Истина);
	НастройкиПоУмолчанию.Вставить("ПоВладельцу", Истина);
	
	Возврат НастройкиПоУмолчанию;
	
КонецФункции

// Обновляет заголовки ресурсов в календаре на месяц по потенциалам.
//
// Параметры:
//  НачалоПериода - Дата - Начало периода для обновления заголовков.
//  КонецПериода - Дата - Конец периода для обновления заголовков.
//
&НаСервере
Процедура СформироватьПотенциалыРесурсовНаНеделю(НачалоПериода, КонецПериода)
	
	ТаблицаРесурсов = ПолучитьТаблицуРесурсов();
	
	// получим интервалы измерений
	ГрафикиРабот = ПланированиеРесурсов.ПолучитьГрафикиРабот(
		НачалоПериода,
		КонецПериода,
		ТаблицаРесурсов,
		РежимИспользованияГрафиков,
		БазовыйГрафик,
		УчитыватьДанныеТабеля);
	
	ТипРесурса = Новый Массив;
	ТипРесурса.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ТипРесурса.Добавить(Тип("СправочникСсылка.Цеха"));
	ТаблицаПотенциаловИтог = ПланированиеРесурсов.СформироватьТаблицуПотенциаловРесурсов(
		ТипРесурса,
		ГрафикиРабот,
		Истина,
		НачалоПериода,
		КонецПериода);
	
	ТаблицаЗапланированоИтог = ПланированиеРесурсов.СформироватьТаблицуНедельнойЗагрузкиРабочихМест(
		НачалоПериода,
		КонецПериода,
		РежимОтображенияРесурсовНаГрафике,
		РабочиеМестаДляГрафика,
		ИсполнителиДляГрафика,
		ПланированиеИнтервалы,
		ТекущийОбъект(ЭтотОбъект));
	
	ДиаграммаПотенциалов.Очистить();
	ДиаграммаПотенциалов.ВидПодписей = ВидПодписейКДиаграмме.Значение;
	ДиаграммаПотенциалов.Обновление  = Ложь;
	ДиаграммаПотенциалов.Серии.Добавить("Потенциал,ч.");
	ДиаграммаПотенциалов.Серии.Добавить("Записано,ч.");
	ТекущаяТочка = 0;
	
	Для Каждого ТекСтрока Из ТаблицаЗапланированоИтог Цикл
		ТекПотенциал = 0;
		ТекДата = НачалоПериода + ТекСтрока.Порядок*24*60*60;
		СтрокаИтогов = ТаблицаПотенциаловИтог.Найти(ТекДата, "Дата");
		Если СтрокаИтогов <> Неопределено Тогда
			ТекПотенциал = СтрокаИтогов.Потенциал;
		КонецЕсли;
		
		ДиаграммаПотенциалов.Точки.Добавить(ТекСтрока.Название + ", " + Формат(ТекДата,"ДФ=dd.MM"));
		ДиаграммаПотенциалов.УстановитьЗначение(ТекущаяТочка, 0, Окр(ТекПотенциал,2));
		ДиаграммаПотенциалов.УстановитьЗначение(ТекущаяТочка, 1, Окр(ТекСтрока.Записано,2));
		ТекущаяТочка = ТекущаяТочка + 1;
	КонецЦикла;
	
	ДиаграммаПотенциалов.Обновление = Истина;
	
КонецПроцедуры // СформироватьПотенциалыРесурсовНаНеделю()

&НаСервере
Функция ПолучитьТаблицуРесурсов()
	
	Запрос = Новый Запрос;
	
	Если (РежимОтображенияРесурсовНаГрафике = "Общий" ИЛИ РежимОтображенияРесурсовНаГрафике = "РабочиеМеста") Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ТаблицаЦехов.Ресурс КАК Цех,
		|	ТаблицаЦехов.График КАК График
		|ПОМЕСТИТЬ ТаблицаЦехов
		|ИЗ
		|	&ТаблицаЦехов КАК ТаблицаЦехов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Цеха.Ссылка КАК Ссылка,
		|	Цеха.Наименование КАК Наименование,
		|	Цеха.Псевдоним КАК Псевдоним,
		|	ТаблицаЦехов.График КАК ГрафикРаботы
		|ПОМЕСТИТЬ ИтогЦеха
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦехов КАК ТаблицаЦехов
		|		ПО Цеха.Ссылка = ТаблицаЦехов.Цех
		|;";
		
		Запрос.УстановитьПараметр("ТаблицаЦехов", РабочиеМестаДляГрафика.Выгрузить(, "Ресурс, График"));
		
	КонецЕсли;
	
	Если (РежимОтображенияРесурсовНаГрафике = "Общий" ИЛИ РежимОтображенияРесурсовНаГрафике = "Исполнители") Тогда
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	ТаблицаИсполнителей.Ресурс КАК Исполнитель,
			|	ТаблицаИсполнителей.График КАК График
			|ПОМЕСТИТЬ ТаблицаИсполнителей
			|ИЗ
			|	&ТаблицаИсполнителей КАК ТаблицаИсполнителей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Наименование КАК Наименование,
			|	Сотрудники.Псевдоним КАК Псевдоним,
			|	ТаблицаИсполнителей.График КАК ГрафикРаботы
			|ПОМЕСТИТЬ ИтогИсполнители
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсполнителей КАК ТаблицаИсполнителей
			|		ПО Сотрудники.Ссылка = ТаблицаИсполнителей.Исполнитель
			|;";
			
		Запрос.УстановитьПараметр("ТаблицаИсполнителей", ИсполнителиДляГрафика.Выгрузить(, "Ресурс, График"));
			
	КонецЕсли;
	
	Если РежимОтображенияРесурсовНаГрафике = "Общий" Тогда
		Запрос.Текст = Запрос.Текст + 
			"ВЫБРАТЬ
			|	ИтогИсполнители.Ссылка КАК Ресурс,
			|	ИтогИсполнители.Наименование КАК Наименование,
			|	ИтогИсполнители.Псевдоним КАК Псевдоним,
			|	ИтогИсполнители.ГрафикРаботы КАК График
			|ИЗ
			|	ИтогИсполнители КАК ИтогИсполнители
			|ГДЕ
			|	ИтогИсполнители.Ссылка.УчаствуетВПланировании В (&УчаствуетВПланировании)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИтогЦеха.Ссылка,
			|	ИтогЦеха.Наименование,
			|	ИтогЦеха.Псевдоним,
			|	ИтогЦеха.ГрафикРаботы
			|ИЗ
			|	ИтогЦеха КАК ИтогЦеха
			|&ИспользоватьОтборПоПодразделению";		
			
	ИначеЕсли РежимОтображенияРесурсовНаГрафике = "Исполнители" Тогда
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	ИтогИсполнители.Ссылка КАК Ресурс,
			|	ИтогИсполнители.Наименование КАК Наименование,
			|	ИтогИсполнители.Псевдоним КАК Псевдоним,
			|	ИтогИсполнители.ГрафикРаботы КАК График
			|ИЗ
			|	ИтогИсполнители КАК ИтогИсполнители
			|ГДЕ
			|	ИтогИсполнители.Ссылка.УчаствуетВПланировании В (&УчаствуетВПланировании)";
	Иначе
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	ИтогЦеха.Ссылка КАК Ресурс,
			|	ИтогЦеха.Наименование КАК Наименование,
			|	ИтогЦеха.Псевдоним КАК Псевдоним,
			|	ИтогЦеха.ГрафикРаботы КАК График
			|ИЗ
			|	ИтогЦеха КАК ИтогЦеха
			|&ИспользоватьОтборПоПодразделению";
	КонецЕсли;
	
	
	Если ФормироватьСписокРесурсовПоПодразделению Тогда
		
		ТекстЗамены = " 
		|ГДЕ
		|	ИтогЦеха.Ссылка.ПодразделениеКомпании = &ПодразделениеКомпании";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИспользоватьОтборПоПодразделению", ТекстЗамены);
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИспользоватьОтборПоПодразделению", "");
	КонецЕсли;	
	
	МассивВидовИспользования = Новый Массив;
	МассивВидовИспользования.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПроизводства);
	МассивВидовИспользования.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПриемкиВыдачи);
	
	Запрос.УстановитьПараметр("УчаствуетВПланировании", МассивВидовИспользования);	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьЦветаРаскраски()
	
	ЦветаРаскраски = Новый Структура;
	МакетОформления = Справочники.ГрафикиРаботы.ПолучитьМакет("МакетОформления");
	ОбластьОформления = МакетОформления.ПолучитьОбласть("Оформление");
	
	Для ПеременнаяЦикла = 1 По ОбластьОформления.ВысотаТаблицы Цикл
		
		ТекущаяОбласть = ОбластьОформления.Область(ПеременнаяЦикла, 1);
		
		Если НЕ ЗначениеЗаполнено(ТекущаяОбласть.Текст) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЦветаРаскраски.Вставить("Цвет" + ТекущаяОбласть.Текст, ТекущаяОбласть.ЦветФона);
		
	КонецЦикла;
	
	ЦветаРаскраски.Вставить("ЦветВыделенияДокумента", ЦветаСтиля.ЗаписьНаРемонтВыделенныйДокумент);
	ЦветаРаскраски.Вставить("ЦветВыделенияРаботы",    ЦветаСтиля.ЗаписьНаРемонтВыделеннаяРабота);
	ЦветаРаскраски.Вставить("ЦветРамкиСтандарт",      ЦветаСтиля.ЦветРамки);
	Возврат ЦветаРаскраски;
	
КонецФункции

// Выделение интервала в планировщике по его идентификатору
//
// Параметры:
//  Идентификатор - Число - Идентификатор текущего интервала
//
&НаКлиенте
Процедура ВыделитьИнтервал(Идентификатор)
	
	Рисунки = КалендарьДневной.Рисунки;
	
	Для Каждого Рисунок Из Рисунки Цикл
		
		текстПоиска = стрШаблон("{""type"":""CurrentPlan"",""index"":%1", Идентификатор);
		
		Если СтрНачинаетсяС(Рисунок.Расшифровка, текстПоиска) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Рисунок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КалендарьДневной.ТекущаяОбласть = Рисунок;
	
КонецПроцедуры

// Заполнение данных строки текущего объекта планирования
//
// Параметры:
//  ТекущиеДанные - ЭлементКоллекцииДанныхФормы - Строка интервала из таблицы интервалов
//
&НаКлиенте
Функция ДанныеОбъектаПланирования(ТекущиеДанные)
	
	Если ТекущиеДанные.ЭтоПричина Тогда
		
		ВидОбъектаПланирования = ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.ПричинаОбращения");
		НайденныеОбъекты = ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.НайтиСтроки(
			Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.Идентификатор));
		
		Если НайденныеОбъекты.Количество() > 0 Тогда
			
			Объект = НайденныеОбъекты[0].ПричинаОбращения;
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ЭтоВспомогательнаяАвторабота Тогда
		
		ВидОбъектаПланирования = ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.ВспомогательнаяАвторабота");
		НайденныеОбъекты = ТекущийОбъект(ЭтотОбъект).ВспомогательныеАвтоработы.НайтиСтроки(
			Новый Структура("ИдентификаторРаботы", ТекущиеДанные.Идентификатор));
		
		Если НайденныеОбъекты.Количество() > 0 Тогда
			
			Объект = НайденныеОбъекты[0].Авторабота;
			
		КонецЕсли;
		
	Иначе
		
		ВидОбъектаПланирования = ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.Авторабота");
		НайденныеОбъекты = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(
			Новый Структура("ИдентификаторРаботы",ТекущиеДанные.Идентификатор));
		
		Если НайденныеОбъекты.Количество() > 0 Тогда
			
			Объект = НайденныеОбъекты[0].Авторабота;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ВидОбъектаПланирования,Объект", ВидОбъектаПланирования, Объект);
	
КонецФункции

// Возвращает строку из дерева объекта по идентификатору строки
//
&НаКлиенте
Функция ПолучитьОбъектПоИдентификатору(Идентификатор)
	
	Результат = ПланированиеРесурсовКлиентСервер.НайтиВДеревеОбъектов(
		ПланированиеОбъекты,
		Новый Структура("Идентификатор", Идентификатор));
	
	Если Результат.Количество() <> 0 Тогда
		
		Возврат Результат[0];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПереместитьИнтервал(Область)
	
	#Если ВебКлиент Тогда
		Если Область.Имя = "R1C1" Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Условие = Новый Структура("Номер", ВыделенныеРесурсы(ЭтотОбъект, Область)[0]);
	Ресурсы = ОтображаемыеРесурсы.НайтиСтроки(Условие);
	Если Ресурсы.Количество() < 1 Тогда
		
		РежимПеремещения = Ложь;
		Элементы.КалендарьДневной.Подсказка = "";
		Возврат;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если ЗначениеЗаполнено(РасшифровкаДляВебКлиента) Тогда
			Описание = РазобратьРасшифровкуНаСервере(РасшифровкаДляВебКлиента);
			РасшифровкаДляВебКлиента = "";
			УдалитьПримечанияНаСервере();
			УдалитьРисунокНаСервере(Описание);
		КонецЕсли;
	#КонецЕсли
	
	Интервал = ПланированиеИнтервалы.НайтиПоИдентификатору(РежимПеремещенияИдентификатор);
	Ресурс = Ресурсы[0].Ресурс;
	ГраницыОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов, Область);
	ИнтервалыОбласти = ИнтервалыОбласти(
		ГраницыОбласти.Первая,
		ГраницыОбласти.Первая,
		ИнтервалыОтображения,
		ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект));
	
	Если ИнтервалыОбласти.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Границы интервала выходят за рамки отображаемого интервала'")
			,
			,
			НСтр("ru = 'Обнаружены ошибки'"));
		
		РежимПеремещения = Ложь;
		Элементы.КалендарьДневной.Подсказка = "";
		Возврат;
		
	КонецЕсли;
	
	ИнтервалыОбласти[0].Конец = ИнтервалыОбласти[0].Начало + Интервал.НормаВремени;
	ЭтоЦех = (ТипЗнч(Ресурс) = Тип("СправочникСсылка.Цеха"));
	
	Если СпособПеремещения = 1 Тогда // перенесем интервалы
		ПланированиеИнтервалы.Сортировать("Конец Возр");
		
		Результат = ПланированиеИнтервалы.НайтиСтроки(Новый Структура(?(ЭтоЦех, "РабочееМесто", "Исполнитель"), Ресурс));
		ПереместитьИнтервалы(ИнтервалыОбласти[0],Интервал, Ресурс, Результат);
	
	КонецЕсли;
	
	// Вставим интервал
	ЗаполнитьЗначенияСвойств(Интервал, ИнтервалыОбласти[0]);
	Интервал[?(ЭтоЦех, "РабочееМесто", "Исполнитель")] = Ресурс;
	ОбновитьТекущееПланированиеВШапке();
	РежимПеремещения = Ложь;
	Элементы.КалендарьДневной.Подсказка = "";
	ПризнакЗаписиПланирования = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

// Помещает данные интервала планирования в буфер копирования.
// Затирает данные которые хранились там ранее.
//
// Интервал - ЭлементКоллекцииДанныхФормы, Структура - Источник данных интервала для сохранения в буфер.
//                                                     Строка интервала из таблицы "ИнтервалыПланирование"
//                                                     или структура с полями "Идентификатор,НормаВремени".
//
&НаКлиенте
Процедура СкопироватьИнтервал(Интервал)
	
	КопияИнтервала = Новый Структура;
	КопияИнтервала.Вставить("НормаВремени",  Интервал.НормаВремени);
	КопияИнтервала.Вставить("Идентификатор", Интервал.Идентификатор);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Интервал помещен в буфер обмена.'"));
	ОбновитьТекущееПланированиеВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтервал(Описание)
	
	Если ТипЗнч(Описание) = Тип("Строка") Тогда
		
		ОписаниеИнтервала = ПланированиеРесурсовКлиентСервер.РазобратьРасшифровку(Описание);
		интервал = ПланированиеИнтервалы.НайтиПоИдентификатору(ОписаниеИнтервала.Получить("index"));
		
	Иначе
		
		ОписаниеИнтервала = Описание.Описание;
		интервал = Описание.интервал;
		
	КонецЕсли;
	
	Если интервал <> Неопределено Тогда
		
		ПланированиеИнтервалы.Удалить(интервал);
		
	КонецЕсли;
	
	name = ОписаниеИнтервала.Получить("name");
	текстПоиска = стрШаблон("{""type"":""CurrentPlan"",""index"":%1", ОписаниеИнтервала.Получить("index"));
	предыдущийРисунок = Неопределено; удаляемыеРисунки = Новый Массив;
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		
		Если Рисунок.Имя = name Тогда
			
			удаляемыеРисунки.Добавить(Рисунок);
			
		ИначеЕсли СтрНачинаетсяС(Рисунок.Расшифровка, текстПоиска) Тогда
			
			удаляемыеРисунки.Добавить(Рисунок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Рисунок Из удаляемыеРисунки Цикл
		
		Если предыдущийРисунок = Неопределено Тогда
			
			Индекс = КалендарьДневной.Рисунки.Индекс(Рисунок) - 1;
			
			Если Индекс >= 0 Тогда
				
				предыдущийРисунок = КалендарьДневной.Рисунки.Получить(Индекс);
				
			КонецЕсли;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			УдалитьРисунокДневногоКалендаряНаСервере(Рисунок.Имя);
		#Иначе	
			КалендарьДневной.Рисунки.Удалить(Рисунок);
		#КонецЕсли
		
	КонецЦикла;
	
	#Если ВебКлиент Тогда
		УдалитьПримечанияНаСервере();
	#Иначе
		УдалитьПримечания();
	#КонецЕсли
	
	Если предыдущийРисунок <> Неопределено Тогда
		
		Элементы.КалендарьДневной.ТекущаяОбласть = предыдущийРисунок;
		
	КонецЕсли;
	
	объектПланирования = ПланированиеОбъекты.НайтиПоИдентификатору(ОписаниеИнтервала.Получить("obj"));
	
	Если объектПланирования <> Неопределено Тогда
		
		ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(объектПланирования, ПланированиеИнтервалы);
		
	КонецЕсли;
	
	СформироватьПотенциалыРесурсовНаНеделю(НачалоНедели(ДатаПланировщика), КонецНедели(ДатаПланировщика));
	ОбновитьТекущееПланированиеВШапке();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДоступныеОбъектыПланирования(ВидОбъекта)
	
	СписокОбъектов = Новый СписокЗначений;
	ОбъектыПланирования = ПланированиеОбъекты.ПолучитьЭлементы();
	
	Для Каждого ОбъектПланирования Из ОбъектыПланирования Цикл
		
		Если Не ОбъектПланирования.ПланированиеПоГруппе И Не ОбъектПланирования.ЭтоВспомогательнаяАвторабота Тогда
			
			ОбъектГруппа = ОбъектПланирования.ПолучитьЭлементы();
			
			Для Каждого ЭлементГруппы Из ОбъектГруппа Цикл
				
				СписокОбъектов.Добавить(
					ЭлементГруппы.Идентификатор, ЭлементГруппы.Представление, ЭлементГруппы.НормаВремени = 0);
				
			КонецЦикла;
			
		Иначе
			
			СписокОбъектов.Добавить(
				ОбъектПланирования.Идентификатор, ОбъектПланирования.Представление, ОбъектПланирования.НормаВремени = 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокОбъектов;
	
КонецФункции

&НаКлиенте
Функция ЕстьНезапланированныеРаботы()
	
	Список = ПолучитьДоступныеОбъектыПланирования(Неопределено);
	
	Для Каждого Строка Из Список Цикл
		
		Если Строка.Пометка Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НачатьРедактированиеИнтервала(Описание, Доступность = Истина)
	
	Интервал = Описание.Интервал;
	
	СписокОбъектов = ПолучитьДоступныеОбъектыПланирования(Интервал.ВидОбъектаПланирования);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РабочееМесто");
	ПараметрыОткрытия.Вставить("Исполнитель");
	ПараметрыОткрытия.Вставить("Начало");
	ПараметрыОткрытия.Вставить("Конец");
	ПараметрыОткрытия.Вставить("НормаВремени");
	ПараметрыОткрытия.Вставить("КонтрольПланированияПрошедшимВременем",  КонтрольПланированияПрошедшимВременем);
	ПараметрыОткрытия.Вставить("СмещениеЧасовогоПояса", СмещениеЧасовогоПояса);
	
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Интервал);
	
	ПараметрыОткрытия.Вставить("ОбъектПланирования", Интервал.Объект);
	ПараметрыОткрытия.Вставить("ИдентификаторОбъекта", Интервал.Идентификатор); 
	
	ПараметрыОткрытия.Вставить("СписокОбъектов", СписокОбъектов);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Не Доступность);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактированиеИнтервалаЗавершение",
		ЭтотОбъект, Описание);
	
	ОткрытьФорму("Обработка.ЗаписьНаРемонт.Форма.РедактированиеИнтервала", 
		ПараметрыОткрытия, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выполняет действия после реакции на ответ пользователя на вопрос.
//
// Параметры:
//  ПараметрыДействий - Структура - Параметры действий.
//
&НаКлиенте
Процедура ПостОбработкаРезультатаВопроса(ПараметрыДействий, Ответ = Истина)
	
	Если ПараметрыДействий.Свойство("ВыводитьСообщение") Тогда
		
		Модифицированность = Ложь;
		НавигационнаяСсылкаСообщения = "";
		
		Если ЗначениеЗаполнено(ПараметрыДействий.ВыводитьСообщение) Тогда
			
			НавигационнаяСсылкаСообщения = ПолучитьНавигационнуюСсылку(ПараметрыДействий.ВыводитьСообщение);
			
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Данные сохранены.'"),
			НавигационнаяСсылкаСообщения,
			Строка(ПараметрыДействий.ВыводитьСообщение)
		);
		
	КонецЕсли;
		
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "Закрыть", Ложь) Тогда
		
		ПризнакЗакрытияФормы = Истина;
		Закрыть();
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "ОтрытьФормуВыбора", Ложь) Тогда
		
		ВыборДокументаКонтекста();
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "НоваяЗаявка", Ложь) Тогда
		
		Модифицированность = Ложь;
		НоваяЗаявкаНаРемонт(Неопределено);
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "СозданиеСРЗ", Ложь) Тогда
		
		Если Ответ Тогда
			
			НовыйСводныйРемонтныйЗаказ(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "СозданиеЗаказНаряда", Ложь) Тогда
		
		Если Ответ Тогда
			
			СоздатьЗаказНаряд(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "ВыборДокумента", Ложь) Тогда
		
		Модифицированность = Ложь;
		РезультатОповещения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "РезультатОповещения");
		ДополнительныеПараметры = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействий, "ДополнительныеПараметры");
		Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует и вызывает диалог вопроса о сохранении объекта.
//
// Параметры:
//  ПараметрыВопроса - Структура - Параметры, описывающие действия после вопроса.
//  ТекстВопроса	 - Строка	 - Альтернативный текст вопроса.
//
// Пример:
//  ВопросОСохраненииОбъекта(Новый Структура("Закрытие, Проведение", Истина, Ложь))
//
&НаКлиенте
Процедура ВопросОСохраненииОбъекта(ПараметрыВопроса, ТекстВопроса = Неопределено, Ответы = Неопределено)
	
	Если ТекстВопроса = Неопределено Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
	КонецЕсли;
	
	Если Ответы = Неопределено Тогда
		
		Ответы = РежимДиалогаВопрос.ДаНетОтмена;
		
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаСохраненияИзменений", ЭтотОбъект, ПараметрыВопроса);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, Ответы,,, НСтр("ru = '1С:Предприятие'"));
	
КонецПроцедуры

// Выполняет проверку пересечения интервалов планирования между собой.
//
// Параметры:
//  Проведение - Булево - Признак записи документа (Ложь - Запись, Истина - Проведение)
// 
// Возвращаемое значение:
//  Булево - Признак успешности проведения контроля (Ложь - Продолжить запись, Истина - Отменить запись).
//
&НаКлиенте
Функция КонтрольПересеченияИнтервалов(Параметры)
	
	Если Не ПризнакЗаписиПланирования Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыКонтроля = КонтрольПересеченияИнтерваловНаСервере();
	
	Если ПараметрыКонтроля.Отказ Тогда
		
		Если ПараметрыКонтроля.Спрашивать Тогда
			
			ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаКонтроляПересеченияРесурсов",
				ЭтотОбъект, Параметры);
			ПоказатьВопрос(ОбработчикОповещения, ПараметрыКонтроля.ТекстОшибки + Символы.ПС + НСтр("ru = 'Продолжить запись?'"),
				РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Контроль пересечения планирования'"));
			Возврат Истина;
			
		Иначе
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрыКонтроля.ТекстОшибки);
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНастройки()
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("БазовыйГрафик", БазовыйГрафик);
	Настройки.Вставить("РежимИспользованияГрафиков", РежимИспользованияГрафиков); 
	Настройки.Вставить("УчитыватьДанныеТабеля", УчитыватьДанныеТабеля);
	Настройки.Вставить("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени);
	Настройки.Вставить("МасштабЯчейки", МасштабЯчейки);
	Настройки.Вставить("ШиринаКолонкиРесурсов", ШиринаКолонкиРесурсов);
	Настройки.Вставить("РазмерСеткиРедактированияПланировщика", РазмерСеткиРедактированияПланировщика);
	Настройки.Вставить("ОтображатьТолькоРаботающих", ОтображатьТолькоРаботающих);
	Настройки.Вставить("ОтображатьТолькоДоступныеДляПланированияРесурсы", ОтображатьТолькоДоступныеДляПланированияРесурсы);
	Настройки.Вставить("РежимШкалыМинут", РежимШкалыМинут);
	Настройки.Вставить("АдресРесурсов", ПоместитьОтборыВХранилище());
	Настройки.Вставить("ПорядокРесурсовВОбщемРежиме", ПорядокРесурсовВОбщемРежиме);
	Настройки.Вставить("РежимОтображенияРесурсовНаГрафике", РежимОтображенияРесурсовНаГрафике);
	Настройки.Вставить("РасположениеРесурсов", РасположениеРесурсов);
	Настройки.Вставить("ШаблонПредставленияИнтервалаОбъекта", ШаблонПредставленияИнтервалаОбъекта);
	Настройки.Вставить("РежимДобавления", РежимДобавления);
	Настройки.Вставить("СпособПеремещения", СпособПеремещения);
	Настройки.Вставить("КритерийРасчетаЗагруженности", КритерийРасчетаЗагруженности);
	Настройки.Вставить("ИнтервалОбновленияКалендаря", ИнтервалОбновленияКалендаря);
	Настройки.Вставить("ПланироватьНаЦехДокумента", ПланироватьНаЦехДокумента);
	Настройки.Вставить("ФормироватьСписокРесурсовПоПодразделению", ФормироватьСписокРесурсовПоПодразделению);
	Настройки.Вставить("ПодразделениеОтбора", ПодразделениеОтбора);

	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИнтервалНаКалендарь(Область, ТекущиеДанные, Объект, ВидОбъектаПланирования, ЭтоКопирование = Ложь)
	
	РамкиОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов, Область);
	РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
	
	Для Каждого ТекущийРесурс Из ВыделенныеРесурсы(ЭтотОбъект, Область) Цикл
		
		// Найдем ресурс
		Ресурсы = ОтображаемыеРесурсы.НайтиСтроки(Новый Структура("Номер", ТекущийРесурс));
		Если Ресурсы.Количество() > 0 Тогда
			Если НЕ ЭтоКопирование Тогда
				Если РежимДобавления  = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.НормаВремениПлан) Тогда
					
					НовыеИнтервалы = ИнтервалыОбласти(
						РамкиОбласти.Первая,
						РамкиОбласти.Последняя,
						ИнтервалыОтображения,
						РазмерИнтервалаВСекундах);
					
				Иначе
					
					НовыеИнтервалы = ИнтервалыОбласти(
						РамкиОбласти.Первая,
						РамкиОбласти.Первая,
						ИнтервалыОтображения,
						РазмерИнтервалаВСекундах);
					
					Если НовыеИнтервалы.Количество() > 0 Тогда
						
						НовыеИнтервалы[0].Конец = НовыеИнтервалы[0].Начало + ТекущиеДанные.НормаВремениПлан;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				НовыеИнтервалы = ИнтервалыОбласти(
					РамкиОбласти.Первая,
					РамкиОбласти.Первая,
					ИнтервалыОтображения,
					РазмерИнтервалаВСекундах);
				
				Если НовыеИнтервалы.Количество() > 0 Тогда
					
					НовыеИнтервалы[0].Конец = НовыеИнтервалы[0].Начало + КопияИнтервала.НормаВремени;
					
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Интервал Из НовыеИнтервалы Цикл
				
				НовыйИнтервал = ПланированиеИнтервалы.Добавить();
				НовыйИнтервал.НормаВремени = Интервал.Конец - Интервал.Начало;
				ЗаполнитьЗначенияСвойств(НовыйИнтервал, Интервал, "Начало,Конец");
				
				НовыйИнтервал.НормаВремениПредставление =
					ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(НовыйИнтервал.НормаВремени);
				НовыйИнтервал.Объект = Объект;
				НовыйИнтервал.ВидОбъектаПланирования = ВидОбъектаПланирования;
				НовыйИнтервал.Идентификатор = ТекущиеДанные.Идентификатор;
				Родитель = ТекущиеДанные.ПолучитьРодителя();
				
				Если Родитель <> Неопределено Тогда
					
					НовыйИнтервал.ИдентификаторГруппы = Родитель.Идентификатор;
					
				КонецЕсли;
				
				ЭтоЦех = ТипЗнч(Ресурсы[0].Ресурс) = Тип("СправочникСсылка.Цеха");
				НовыйИнтервал[?(ЭтоЦех, "РабочееМесто", "Исполнитель")] = Ресурсы[0].Ресурс;
				
				ГраницыОбласти = ПланированиеРесурсовКлиентСервер.НомераЯчеекОбласти(
					Интервал.Начало,
					Интервал.Конец,
					ИнтервалыОтображения,
					РазмерИнтервалаВСекундах)[0];
				
				СтруктураОбластиИнтервала = Новый Структура;
				СтруктураОбластиИнтервала.Вставить("НомерРесурса", ТекущийРесурс);
				СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПервая", ГраницыОбласти.Первая);
				СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПоследняя", ГраницыОбласти.Последняя);
				
				РасположитьИнтервалНаКалендаре(
					НовыйИнтервал.ПолучитьИдентификатор(),
					ТекущиеДанные.ПолучитьИдентификатор(),
					ПланированиеРесурсовКлиентСервер.ПредставлениеИнтервала(ТекущийОбъект(ЭтотОбъект), НовыйИнтервал),
					СтруктураОбластиИнтервала
				);
				
				Если РежимОтображенияРесурсовНаГрафике = "Общий" Тогда
					
					// получим область второго интервала
					Если ЭтоЦех Тогда
						
						ЗначениеРесурса = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
						
					Иначе
						
						ЗначениеРесурса = ПредопределенноеЗначение("Справочник.Цеха.ПустаяСсылка");
						
					КонецЕсли;
					
					НомерРесурса = НомерСтрокиРесурса(ЗначениеРесурса);
					
					СтруктураОбластиИнтервала = Новый Структура;
					СтруктураОбластиИнтервала.Вставить("НомерРесурса", НомерРесурса);
					СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПервая", ГраницыОбласти.Первая);
					СтруктураОбластиИнтервала.Вставить("ГраницыОбластиПоследняя", ГраницыОбласти.Последняя);
					
					// Установим интервал
					РасположитьИнтервалНаКалендаре(
						НовыйИнтервал.ПолучитьИдентификатор(),
						ТекущиеДанные.ПолучитьИдентификатор(),
						ПланированиеРесурсовКлиентСервер.ПредставлениеИнтервала(ТекущийОбъект(ЭтотОбъект), НовыйИнтервал),
						СтруктураОбластиИнтервала
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВыделитьИнтервал(НовыйИнтервал.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура предлагает заполнить исполнителя при добавлении строки работ
//
&НаКлиенте
Процедура ЗаполнениеИсполнителей(Форма, ЗаказНаряд, МассивРабот = Неопределено)
	
	// скорректируем тип значения массива работ
	Если МассивРабот = Неопределено Тогда 
		МассивРабот = Новый СписокЗначений;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	
	Если ТекущиеДанные = Неопределено Тогда
		ИдентификаторТекущейРаботы = Неопределено;
		ПричинаОбращенияСтроки = Неопределено;
		КоличествоРаботВПричине = 0;
	Иначе
		ИдентификаторТекущейРаботы = Форма.Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные.ИдентификаторРаботы;
		СтрокиПричин = ЗаказНаряд.ПричиныОбращения.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПричин.Количество() = 0 ИЛИ НЕ Форма.ИспользоватьПричиныОбращений Тогда
			ПричинаОбращенияСтроки = Неопределено;
			КоличествоРаботВПричине = 0;
		Иначе
			ПричинаОбращенияСтроки = СтрокиПричин[0];
			КоличествоРаботВПричине = ЗаказНаряд.Автоработы.НайтиСтроки(СтруктураПоиска).Количество();
		КонецЕсли;
	КонецЕсли;
	
	// если массив не передан, значит устанавливаем исполнителя для текущей работы
	Если МассивРабот.Количество() = 0 И (НЕ ТекущиеДанные = Неопределено) Тогда
		// СтрокаТекущейРаботы = Форма.Работы.Найти(ИдентификаторТекущейРаботы,"ИдентификаторРаботы");
		// Если СтрокаТекущейРаботы <> Неопределено Тогда
		МассивРабот.Добавить(ТекущиеДанные);
		// КонецЕсли;
	КонецЕсли;
	
	// проверим, есть ли работы для заполнения исполнителей
	Если МассивРабот.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если установлен флаг одинаковых исполнителей для всех работ
	// запрашивать исполнителей не надо, а возьмем их из другой работы.
	Если ЗаказНаряд.ИсполнителиОдинаковыеДляВсехРабот И ЗаказНаряд.Автоработы.Количество()>1 И ЗаказНаряд.Исполнители.Количество()>0 Тогда
		ВремИдентификаторТекущейРаботы = Форма.Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока;
		Для Каждого Работа Из ЗаказНаряд.Автоработы Цикл
			// Найдем работу отличную от текущей
			Если (НЕ ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы) Тогда
				ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// И установим исполнителей из нее
		УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляВсех(ЗаказНаряд, ИдентификаторТекущейРаботы);
		Форма.Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока = ВремИдентификаторТекущейРаботы;
		
	ИначеЕсли ПричинаОбращенияСтроки <> Неопределено
		И КоличествоРаботВПричине > 1
		И ПричинаОбращенияСтроки.ИсполнителиОдинаковыеВРамкахПричины Тогда
		
		ВремИдентификаторТекущейРаботы = Форма.Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока;
		
		АвтоработыПричины = ЗаказНаряд.Автоработы.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Работа Из АвтоработыПричины Цикл
			// Найдем работу отличную от текущей
			Если (НЕ ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы) Тогда
				ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// И установим исполнителей из нее
		УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляПричиныОбращения(
			ЗаказНаряд, ПричинаОбращенияСтроки, ИдентификаторТекущейРаботы);
		Форма.Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока = ВремИдентификаторТекущейРаботы;
		
	Иначе
		
		ИсполнителиРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторТекущейРаботы));
		Если ИсполнителиРаботы.Количество() = 0 И Форма.ЗапрашиватьИсполнителей Тогда
			
			// Найдем работу из предыдущей строки
			ИндексПредыдущейСтроки = ЗаказНаряд.Автоработы.Индекс(МассивРабот[0]) - 1;
			Если ИндексПредыдущейСтроки < 0 Тогда
				СтрокаПредыдущейРаботы = Неопределено;
			Иначе
				СтрокаПредыдущейРаботы = ЗаказНаряд.Автоработы[ИндексПредыдущейСтроки];
			КонецЕсли;
			
			Если НЕ СтрокаПредыдущейРаботы = Неопределено Тогда
				// Получим список исполнителей работы из предыдущей строки
				ИсполнителиПредыдущейРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаПредыдущейРаботы.ИдентификаторРаботы));
				СтрокаИсполнителейПредыдущейРаботы = "";
				Для Каждого ИсполнительПредыдущейРаботы Из ИсполнителиПредыдущейРаботы Цикл
					Если НЕ ПустаяСтрока(СтрокаИсполнителейПредыдущейРаботы) Тогда
						СтрокаИсполнителейПредыдущейРаботы = СтрокаИсполнителейПредыдущейРаботы+"
							|";
					КонецЕсли; 
					СтрокаИсполнителейПредыдущейРаботы = СтрокаИсполнителейПредыдущейРаботы+СокрЛП(ИсполнительПредыдущейРаботы.Исполнитель)+" - "+Формат(ИсполнительПредыдущейРаботы.Процент,"ЧЦ=5; ЧДЦ=2; ЧН=0,00")+"%";
				КонецЦикла;
				
				Если ИсполнителиПредыдущейРаботы.Количество()>0 Тогда
					// Если у предыдущей работы есть исполнители
					// Зададим вопрос о копировании этих исполнителей.
					ОтветНаВопрос = КодВозвратаДиалога.Нет;
					Если МассивРабот.Количество() = 1 Тогда
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установить исполнителей для работы <""%1"">
													|как и у работы <""%2"">:
													|""%3""'"), СокрЛП(МассивРабот[0].Значение.Работа), СокрЛП(СтрокаПредыдущейРаботы.Работа), СтрокаИсполнителейПредыдущейРаботы);
					Иначе
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установить исполнителей для добавленных работ
													|как и у работы <""%1"">:
													|""%2""'"), СокрЛП(СтрокаПредыдущейРаботы.Работа), СтрокаИсполнителейПредыдущейРаботы);
					КонецЕсли;
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("МассивРабот",                 МассивРабот);
					ДополнительныеПараметры.Вставить("ИсполнителиПредыдущейРаботы", ИсполнителиПредыдущейРаботы);
					ДополнительныеПараметры.Вставить("Событие",                     "УстановитьИсполнителейПоПредыдущейРаботе");
					
					Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, ДополнительныеПараметры);
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, НСтр("ru = 'Заполнение исполнителей'"));
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПодборИсполнителей();
		КонецЕсли;
	КонецЕсли;
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные,
		Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования],
		ИспользоватьПричиныОбращений
	);
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные,
		Элементы["Товары" + ЗаписьНаРемонт.РежимРедактирования],
		ИспользоватьПричиныОбращений
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИсполнителей()
	
	СтрокаТабличнойЧасти = Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные.Исполнители) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказНаряд = ТекущийОбъект(ЭтотОбъект);
	СтрокиАвтоработы = ЗаказНаряд.Автоработы.НайтиСтроки(
		Новый Структура("ИдентификаторРаботы", СтрокаТабличнойЧасти.ИдентификаторРаботы));
	ИдентификаторПричины = СтрокиАвтоработы[0].ИдентификаторПричиныОбращения;
	ПричинаОбращения = ЗаказНаряд.ПричиныОбращения.НайтиСтроки(Новый Структура(
											"ИдентификаторПричиныОбращения", 
											ИдентификаторПричины));
	ИспользоватьПричины = ИспользоватьПричиныОбращений И ПричинаОбращения.Количество() > 0;
	
	ИсполнителиОдинаковыеВРамкахПричины = ?(ИспользоватьПричины, 
		ПричинаОбращения[0].ИсполнителиОдинаковыеВРамкахПричины,
		Ложь);
	
	// Инициализируем структуру параметров действия
	ПараметрыДействия = Новый Структура();
	
	ПараметрыРасчетаНачислений =
		АвтосервисКлиент.ПараметрыРасчетаНачисленийАвтоработы(ЗаказНаряд, СтрокаТабличнойЧасти.ИдентификаторРаботы);
	
	// Создаем и заполняем структуру параметров открытия формы номенклатуры
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора",                       Истина);
	ПараметрыОткрытия.Вставить("Цех",                               ЗаказНаряд.Цех);
	ПараметрыОткрытия.Вставить("ИдентификаторРаботы",               СтрокаТабличнойЧасти.ИдентификаторРаботы);
	ПараметрыОткрытия.Вставить("ЗапрашиватьПроцентУчастия",         Неопределено);
	ПараметрыОткрытия.Вставить("АвтоматическийПроцентУчастия",      Неопределено);
	ПараметрыОткрытия.Вставить("ИсполнителиОдинаковыеДляВсехРабот", ЗаказНаряд.ИсполнителиОдинаковыеДляВсехРабот);
	ПараметрыОткрытия.Вставить("ИдентификаторВладельца",            УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ЗаказНаряд",                        ЗаказНаряд.Ссылка);
	ПараметрыОткрытия.Вставить("ИспользоватьПричиныОбращений"       , ИспользоватьПричины);
	ПараметрыОткрытия.Вставить("ИсполнителиОдинаковыеВРамкахПричины", ИсполнителиОдинаковыеВРамкахПричины);
	ПараметрыОткрытия.Вставить("ПараметрыРасчетаНачислений"         , ПараметрыРасчетаНачислений);
	
	АдресИсполнителей = ПоместитьТаблицуИсполнителиВХранилище(
		ТекущийОбъект(ЭтотОбъект),
		УникальныйИдентификатор,
		СтрокаТабличнойЧасти.ИдентификаторРаботы
	);
	ПараметрыОткрытия.Вставить("АдресИсполнителей", АдресИсполнителей);
	
	// Производим открытие формы подбора исполнителей
	ОткрытьФорму(
		"Документ.ЗаказНаряд.Форма.ФормаИсполнителей",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , ,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборИсполнителей"),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

// Функция проверяет корректность изменения количества номенклатуры в ЗН
//
// Возвращаемое значение:
//   Булево - Результат проверки корректности.
//
&НаКлиенте
Функция КонтрольКоличестваДеталейВПроизводстве(ЭтаФорма, СтруктураДанныхТекущейСтроки, ИмяТаблицы = Неопределено)
	
	РезультатПроверки=Истина;
	
	Если КонтрольКоличестваДеталейВПроизводстве = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.НеКонтролировать") Тогда
		// Если не требуется контролировать, то всегда корректно
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Номенклатура = СтруктураДанныхТекущейСтроки.Номенклатура;
	
	// Проверим, что это не новая строка.
	Если Номенклатура = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	КэшТоварыВПроизводстве = СтруктураДанныхТекущейСтроки.КэшТоварыВПроизводстве;
	ТоварыВПроизводстве = ПолучитьСтрокуКешаПеремещенияДокументы(ТекущийОбъект(ЭтотОбъект),
																	Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	ВПроизводстве   = Макс(КэшТоварыВПроизводстве[0], ТоварыВПроизводстве[0]);
	Заказано        = Макс(КэшТоварыВПроизводстве[1], ТоварыВПроизводстве[1]);
	Зарезервировано = Макс(КэшТоварыВПроизводстве[2], ТоварыВПроизводстве[2]);
	
	Возврат ПроверкаКоличестваДеталейВПроизводстве(
		СтруктураДанныхТекущейСтроки,
		ВПроизводстве,
		Заказано,
		Зарезервировано);
	
КонецФункции // КонтрольКоличестваДеталейВПроизводстве()

&НаКлиенте
Процедура КонтрольКоличестваДеталейВПроизводствеПослеЗакрытияВопроса(Результат, ПараметрыВопроса) Экспорт
	
	Номенклатура               = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.Номенклатура;
	ХарактеристикаНоменклатуры = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.ХарактеристикаНоменклатуры;
	ЕдиницаИзмерения           = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.ЕдиницаИзмерения;
	Количество                 = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.Количество;
	СтрокаТЧ                   = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.Строка;
	СтрокаИсключение           = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.СтрокаИсключение;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущийОбъект(ЭтотОбъект).Товары.Удалить(СтрокаИсключение);
		ПерерасчетСуммыСкидкиБонусами();
		ЭтотОбъект.Модифицированность = Истина;
	Иначе
		Если СтрокаТЧ <> Неопределено Тогда
			ПараметрыОбработки = Новый Структура;
			Если СтрокаТЧ.Номенклатура <> Номенклатура Тогда
				СтрокаТЧ.Номенклатура = Номенклатура;
				ПараметрыОбработки.Вставить("Номенклатура");
			КонецЕсли; 
			Если СтрокаТЧ.ХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
				СтрокаТЧ.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				ПараметрыОбработки.Вставить("ХарактеристикаНоменклатуры");
			КонецЕсли; 
			Если СтрокаТЧ.ЕдиницаИзмерения <> ЕдиницаИзмерения Тогда
				СтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
				ПараметрыОбработки.Вставить("ЕдиницаИзмерения");
			КонецЕсли;
			Если СтрокаТЧ.Количество <> Количество Тогда
				СтрокаТЧ.Количество = Количество;
				ПараметрыОбработки.Вставить("Количество");
			КонецЕсли;
			ПодключитьОбработчикОжидания("ОбработкаКонтроляКоличестваДеталейВПроизводстве", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КонтрольКоличестваДеталейВПроизводствеПослеЗакрытияВопроса()

&НаКлиенте
Процедура ОбработкаКонтроляКоличестваДеталейВПроизводстве() Экспорт
	
	Если ТипЗнч(ПараметрыОбработки) <> Тип("Структура") Тогда
		ПараметрыОбработки = Неопределено;
		Возврат;
	КонецЕсли;
	
	ОбработкаКонтроляКоличестваДеталейВПроизводствеНаСервере();
	
	ПараметрыОбработки = Неопределено;
	
КонецПроцедуры // ОбработкаКонтроляКоличестваДеталейВПроизводстве()

&НаСервере
Процедура ОбработкаКонтроляКоличестваДеталейВПроизводствеНаСервере()
	
	Если ПараметрыОбработки.Свойство("Номенклатура") Тогда
		ЗаказНарядТоварыНоменклатураПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ХарактеристикаНоменклатуры") Тогда
		ЗаказНарядТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ЕдиницаИзмерения") Тогда
		ЗаказНарядТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("Количество") Тогда
		ЗаказНарядТоварыКоличествоПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КонтрольКоличестваДеталейВПроизводствеПередУдалением(СтрокиТоваров)
	
	ЗапретитьУдаление = Ложь;
	
	// Получим актуальную информацию о деталях
	Объект = ЭтотОбъект.ЗаписьНаРемонт.ЗаказНаряд;
	ТоварыВПроизводстве = АвтосервисВызовСервера.ПоказателиЗапасов(Объект.Ссылка, Объект.Товары);
	
	// Проверим каждую строку товара
	ВыделенныеСтрокиКоличество = Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Количество();
	ЗадаватьВопрос = (ВыделенныеСтрокиКоличество = 1);
	Для НомерСтроки = 0 По ВыделенныеСтрокиКоличество - 1 Цикл
		
		ВыделеннаяСтрока = Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки[НомерСтроки];
		НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтруктураДанныхТекущейСтроки = Новый Структура;
		СтруктураДанныхТекущейСтроки.Вставить("Строка", Неопределено);
		СтруктураДанныхТекущейСтроки.Вставить("СтрокаУдаление", НайденнаяСтрока.НомерСтроки);
		СтруктураДанныхТекущейСтроки.Вставить("Номенклатура", НайденнаяСтрока.Номенклатура);
		СтруктураДанныхТекущейСтроки.Вставить("ХарактеристикаНоменклатуры", НайденнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураДанныхТекущейСтроки.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ЕдиницаИзмерения);
		СтруктураДанныхТекущейСтроки.Вставить("Количество", НайденнаяСтрока.Количество);
		СтруктураДанныхТекущейСтроки.Вставить("Коэффициент", НайденнаяСтрока.Коэффициент);
		
		Если ЗадаватьВопрос Тогда
			СтруктураДанныхТекущейСтроки.Вставить("СтрокаИсключение", НайденнаяСтрока);
		КонецЕсли;
		
		ВПроизводстве = 0;
		Заказано = 0;
		Зарезервировано = 0;
		
		Для Каждого СтрокаПроизводства Из ТоварыВПроизводстве Цикл
			
			Если СтрокаПроизводства.ИдентификаторСтроки <> ВыделеннаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			ВПроизводстве = ВПроизводстве + СтрокаПроизводства.ВПроизводстве;
			
			Если СтрокаПроизводства.ЗаказаноПодЗН > 0 Тогда
				Заказано = СтрокаПроизводства.ЗаказаноПодЗН;
			КонецЕсли;
			
			Если СтрокаПроизводства.ЗарезервированоПодЗН > 0 Тогда
				Зарезервировано = СтрокаПроизводства.ЗарезервированоПодЗН;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапретитьУдаление = ЗапретитьУдаление
			ИЛИ НЕ ПроверкаКоличестваДеталейВПроизводстве(
				СтруктураДанныхТекущейСтроки,
			ВПроизводстве,
			Заказано,
			Зарезервировано,
			ЗадаватьВопрос);
		
	КонецЦикла;
	
	Возврат ЗапретитьУдаление;
	
КонецФункции

&НаКлиенте
Функция ПроверкаКоличестваДеталейВПроизводстве(
		СтруктураДанныхТекущейСтроки,
		ВПроизводстве,
		Заказано,
		Зарезервировано,
		ВыводитьВопрос = Истина)
	
	ИсходнаяТаблица = ЗаписьНаРемонт.ЗаказНаряд.Товары;
	
	Номенклатура               = СтруктураДанныхТекущейСтроки.Номенклатура;
	ХарактеристикаНоменклатуры = СтруктураДанныхТекущейСтроки.ХарактеристикаНоменклатуры;
	ЕдиницаИзмерения           = СтруктураДанныхТекущейСтроки.ЕдиницаИзмерения;
	Количество                 = СтруктураДанныхТекущейСтроки.Количество;
	Коэффициент                = СтруктураДанныхТекущейСтроки.Коэффициент;
	СтрокаТЧ                   = СтруктураДанныхТекущейСтроки.Строка;
	СтрокаУдаление             = СтруктураДанныхТекущейСтроки.СтрокаУдаление;
	
	// Если деталь уже перемещена в производство, или зарезервирована или заказана
	Если ВПроизводстве > 0 ИЛИ (Заказано + Зарезервировано) > 0 Тогда
		
		// подсчет нового итогового количества деталей в документе
		КоличествоНовое = 0;
		ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			Номенклатура, ХарактеристикаНоменклатуры
		);
		СтрокиДетали = ИсходнаяТаблица.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекСтрока Из СтрокиДетали Цикл
			
			Если ТекСтрока.НомерСтроки = СтрокаУдаление Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоСтроке = (ТекСтрока.Количество * ТекСтрока.Коэффициент);
			КоличествоНовое = КоличествоНовое + КоличествоПоСтроке;
			
		КонецЦикла;
		
		Если ВПроизводстве > 0 Тогда
			КоличествоИспользуемоеВЗН = ВПроизводстве + Заказано + Зарезервировано;
		Иначе
			КоличествоИспользуемоеВЗН = Заказано + Зарезервировано;
		КонецЕсли;
		
		КодНоменклатуры = ПолучитьЗначениеКолонкиКода(Номенклатура);
		Недостача = КоличествоИспользуемоеВЗН - КоличествоНовое;
		Если Недостача > 0 Тогда
			МинимальноеКоличество = 0;
			Если СтрокаТЧ = Неопределено Тогда
				МинимальноеКоличество = (Недостача / Коэффициент);
			Иначе
				МинимальноеКоличество = СтрокаТЧ.Количество + (Недостача / Коэффициент);
			КонецЕсли;
			
			РазрешеноУбрать = Макс(Количество - МинимальноеКоличество, 0);
			
			ТекстСообщения = Новый Массив;
			ТекстСообщения.Добавить(СтрШаблон(НСтр("ru = 'Деталь <%1><%2>'"), КодНоменклатуры, СокрЛП(Номенклатура)));
			ТекстСообщения.Добавить(
				СтрШаблон(
					НСтр("ru = 'Допускается убрать %1 %2:'"),
					Формат(РазрешеноУбрать, "ЧДЦ=3; ЧН=0.00"),
					СокрЛП(ЕдиницаИзмерения)
					)
				);
			Если Заказано > 0 Тогда
				ТекстСообщения.Добавить(
					СтрШаблон(
						НСтр("ru = '%1Заказано %2 %3.'"),
						"	",
						Формат(Заказано /Коэффициент, "ЧДЦ=3; ЧН=0.00"),
						СокрЛП(ЕдиницаИзмерения)
					)
				);
			КонецЕсли;
			Если Зарезервировано > 0 Тогда
				ТекстСообщения.Добавить(
					СтрШаблон(
						НСтр("ru = '%1Зарезервировано %2 %3.'"),
						"	",
						Формат(Зарезервировано / Коэффициент, "ЧДЦ=3; ЧН=0.00"),
						СокрЛП(ЕдиницаИзмерения)
					)
				);
			КонецЕсли;
			Если ВПроизводстве > 0 Тогда
				ТекстСообщения.Добавить(
					СтрШаблон(
						НСтр("ru = '%1Перемещено в производство %2 %3.'"),
						"	",
						Формат(ВПроизводстве / Коэффициент, "ЧДЦ=3; ЧН=0.00"),
						СокрЛП(ЕдиницаИзмерения)
					)
				);
			КонецЕсли;
			
			Если (КонтрольКоличестваДеталейВПроизводстве = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Запрещать"))
				ИЛИ (НЕ ВыводитьВопрос
					И КонтрольКоличестваДеталейВПроизводстве =
						ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Предупреждать")) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСоединить(ТекстСообщения, Символы.ПС));
				Если СтрокаТЧ <> Неопределено Тогда
					ПараметрыОбработки = Новый Структура;
					Если СтрокаТЧ.Номенклатура <> Номенклатура Тогда
						СтрокаТЧ.Номенклатура = Номенклатура;
						ПараметрыОбработки.Вставить("Номенклатура");
					КонецЕсли; 
					Если СтрокаТЧ.ХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
						СтрокаТЧ.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
						ПараметрыОбработки.Вставить("ХарактеристикаНоменклатуры");
					КонецЕсли; 
					Если СтрокаТЧ.ЕдиницаИзмерения <> ЕдиницаИзмерения Тогда
						СтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
						ПараметрыОбработки.Вставить("ЕдиницаИзмерения");
					КонецЕсли;
					Если СтрокаТЧ.Количество <> Количество Тогда
						СтрокаТЧ.Количество = Количество;
						ПараметрыОбработки.Вставить("Количество");
					КонецЕсли;
					ПодключитьОбработчикОжидания("ОбработкаКонтроляКоличестваДеталейВПроизводстве", 0.1, Истина);
				КонецЕсли;
				Возврат Ложь;
			ИначеЕсли КонтрольКоличестваДеталейВПроизводстве = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Предупреждать") Тогда
				
				ТекстСообщения.Добавить(НСтр("ru = 'Принять изменения?'"));
				
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыВопроса = Новый Структура;
				ПараметрыВопроса.Вставить("СтруктураДанныхТекущейСтроки", СтруктураДанныхТекущейСтроки);
				Оповещение = Новый ОписаниеОповещения(
					"КонтрольКоличестваДеталейВПроизводствеПослеЗакрытияВопроса",
					ЭтаФорма,
					ПараметрыВопроса
				);
				ПоказатьВопрос(Оповещение, СтрСоединить(ТекстСообщения, Символы.ПС), Режим, 0);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура - Открыть форму загрузки из файла
//
// Параметры:
//  ИмяТабличнойЧасти	 - 	 - 
//
&НаКлиенте
Процедура ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", Ложь);
	ПараметрыФормы.Вставить("РежимЗагрузки", 3);
	ПараметрыФормы.Вставить("ТабличнаяЧастьИсточника", ИмяТабличнойЧасти);
	ПараметрыФормы.Вставить("СсылкаИсточника", ТекущийОбъект(ЭтотОбъект).Ссылка);
	ПараметрыФормы.Вставить("Контрагент",
		?(ТекущийОбъект(ЭтотОбъект).Свойство("Контрагент"), ТекущийОбъект(ЭтотОбъект).Контрагент, Неопределено));
		
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",?(ТекущийОбъект(ЭтотОбъект).Свойство("ТипЦен"), ЦенаВключаетНДС(ТекущийОбъект(ЭтотОбъект).ТипЦен), Неопределено));
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаЗагрузкиИзФайла", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаПомощник",
		ПараметрыФормы,
		ЭтотОбъект,
		, , ,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ОткрытьФормуЗагрузкиИзФайла()

&НаСервере
Функция ЦенаВключаетНДС(ТипЦен)
	Возврат ТипЦен.ЦенаВключаетНДС;
КонецФункции

// Процедура обработки результата загрузки из файла
//
&НаКлиенте
Процедура ОбработкаРезультатаЗагрузкиИзФайла(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеТабличнойЧастиИзФайла(РезультатОповещения);
	
КонецПроцедуры // ОбработкаРезультатаЗагрузкиИзФайла()

&НаКлиенте
Функция ПолучитьТоварыИМатериалыПоЗаказНаряду(ЗаказНаряд, ВыделенныеСтроки, ТекстСообщения)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьТоварыИМатериалыПоЗаказНарядуПослеЗакрытияВопроса",
		ЭтаФорма,
		Параметры
	);
	
	Если НЕ ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.ВидРемонта) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Вид ремонта""'"),, "ВидРемонта");
		Возврат 0;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Сохранить заказ-наряд и'") + Символы.НПП + НРег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2),
			РежимДиалогаВопрос.ДаНет
		);
	Иначе
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьТоварыИМатериалыПоЗаказНарядуПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПолучения = Новый Структура;
	Товары = Новый Массив;
	
	Если ДействиеДокументИзПричинаОбращения Тогда
		Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Очистить();
		Для Каждого Строка Из ЗаписьНаРемонт.ЗаказНаряд.Товары Цикл
			ТекущийИдентификатор = Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные.ИдентификаторПричиныОбращения;
			Если Строка.ИдентификаторПричиныОбращения = ТекущийИдентификатор Тогда
				Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Добавить(Строка.НомерСтроки - 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДействиеНаДокумент Тогда
		
		ТаблицаТоваровПоСкладам = Новый Соответствие;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки Цикл
			
			Значение = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			СкладНоменклатуры = ТаблицаТоваровПоСкладам.Получить(Значение.СкладКомпании);
			
			Если СкладНоменклатуры = Неопределено Тогда
				ТаблицаТоваровПоСкладам.Вставить(Значение.СкладКомпании, Новый Массив());
				СкладНоменклатуры = ТаблицаТоваровПоСкладам.Получить(Значение.СкладКомпании);
			КонецЕсли;
			
			СкладНоменклатуры.Добавить(Значение.НомерСтроки);
		КонецЦикла;
		
		Для Каждого ТекущийСклад Из ТаблицаТоваровПоСкладам Цикл
			РезультатПолучения.Вставить("Товары", ТекущийСклад.Значение);
			
			ПараметрыФормы = Новый Структура; ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", РезультатПолучения);
			ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ЗаписьНаРемонт.ЗаказНаряд.Ссылка);
			ПараметрыЗаполнения.Вставить("СкладКомпании"   , ТекущийСклад.Ключ);
			
			Если ЗначениеЗаполнено(ДействиеХозОперацияДокумента) Тогда
				ПараметрыЗаполнения.Вставить("ХозОперация", ДействиеХозОперацияДокумента);
			КонецЕсли;
			
			ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
			
			ОткрытьФорму(ДействиеДокумент, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		КонецЦикла;
		
		ДействиеНаДокумент = Ложь;
		ДействиеХозОперацияДокумента = Неопределено;
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки Цикл
			Значение = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока).НомерСтроки;
			Если Товары.Найти(Значение) = Неопределено Тогда
				Товары.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
		
		РезультатПолучения.Вставить("Товары", Товары);
		
		ПараметрыФормы = Новый Структура; ПараметрыЗаполнения = Новый Структура;
		
		ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", РезультатПолучения);
		ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ЗаписьНаРемонт.ЗаказНаряд.Ссылка);
		ПараметрыЗаполнения.Вставить("КорректировкаЗаказа", СнятиеРезерваСОтменой);
		
		ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
		
		ОткрытьФорму(ДействиеДокумент, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзМенюДокументов(Документы)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборДокумента");
	ПоказатьВыборИзМеню(описаниеОповещения, СформироватьПредставлениеДокументовСпискаВыбора(Документы));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаНаПросмотр(Документ)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		
		ОткрываемаяФорма = "Документ.ЗаявкаНаРемонт.ФормаОбъекта";
		
	Иначе
		
		ОткрываемаяФорма = "Документ.ЗаказНаряд.ФормаОбъекта";
		
	КонецЕсли;
	
	РазрешитьИзменениеДокументаИзКалендаряПланирования =
		ПраваИНастройкиПользователяВызовСервера.Значение("РазрешитьИзменениеДокументаИзКалендаряПланирования");
		
	ПараметрыФормы = Новый Структура("Ключ", Документ);		
	Если НЕ РазрешитьИзменениеДокументаИзКалендаряПланирования Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму(ОткрываемаяФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступноПланированиеОбъектаНаРесурсе(Объект, ВыделенныеРесурсы)
	
	Если НЕ ЗначениеЗаполнено(Объект) ИЛИ ВыделенныеРесурсы.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Ресурсы = Новый Массив;
	Для Каждого Ресурс Из ВыделенныеРесурсы Цикл
		
		Ресурсы.Добавить(Ресурс.Ресурс);
		
	КонецЦикла;
	
	Возврат ПланированиеРесурсовВызовСервера.
		ДоступноПланированиеОбъектаНаРесурсе(Объект, Ресурсы);
	
КонецФункции

&НаСервере
Функция ДобавитьПричинуОбращения(ПричинаОбращения, ДокументЗаявкаНаРемонт)
	
	ДокументОбъект = ДокументЗаявкаНаРемонт.ПолучитьОбъект();
	НоваяСтрока = ДокументОбъект.ПричиныОбращения.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПричинаОбращения);
	НоваяСтрока.ПричинаОбращения = ПричинаОбращения;
	НоваяСтрока.ВидРемонтаПричиныОбращения = ПричинаОбращения.ВидРемонта;
	НоваяСтрока.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
	НоваяСтрока.ПричинаОбращенияСодержание = ?(НЕ ПустаяСтрока(ПричинаОбращения.ПричинаОбращения), 
		ПричинаОбращения.ПричинаОбращения, Строка(ПричинаОбращения));
	ДокументОбъект.ОписаниеПричиныОбращения = ДокументОбъект.ОписаниеПричиныОбращения
		+ ?(ПустаяСтрока(ДокументОбъект.ОписаниеПричиныОбращения), "", "; ")
		+ ДокументОбъект.ПричиныОбращения[0].ПричинаОбращенияСодержание;
	
	Если СтрДлина(ДокументОбъект.ОписаниеПричиныОбращения) > 300 Тогда
		ДокументОбъект.ОписаниеПричиныОбращения = Лев(ДокументОбъект.ОписаниеПричиныОбращения, 297) + "...";
	КонецЕсли;
	Для Каждого Строка Из ДокументОбъект.Автоработы Цикл
		Если ПустаяСтрока(Строка.ИдентификаторПричиныОбращения) Тогда
			Строка.ИдентификаторПричиныОбращения = НоваяСтрока.ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		Если ПустаяСтрока(Строка.ИдентификаторПричиныОбращения) Тогда
			Строка.ИдентификаторПричиныОбращения = НоваяСтрока.ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать();
		Возврат Истина;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи документа ""Заявка на ремонт""'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДокументОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции // ДобавитьПричинуОбращения()

&НаСервере
Функция ПроверкаНаличияПричиныОбращения(ЗаявкаНаРемонт)
	
	Возврат ЗаявкаНаРемонт.ПричиныОбращения.Количество() = 0;
	
КонецФункции // ПроверкаНаличияПричиныОбращения()

&НаСервере
Функция ПроверкаРеквизитовЗаявкиНаРемонт(ЗаявкаНаРемонт, СозданиеЗаказНаряда = Ложь)
	
	Если СозданиеЗаказНаряда Тогда
		
		АвтоматическиСоздаватьСводныйРемонтныйЗаказ = ПолучитьФункциональнуюОпцию(
			"АвтоматическиСоздаватьСводныйРемонтныйЗаказ"
		); 
		БесплатныйРемонт = ЗаявкаНаРемонт.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный; 

		Если АвтоматическиСоздаватьСводныйРемонтныйЗаказ Тогда 
			Возврат (НЕ ЗначениеЗаполнено(ЗаявкаНаРемонт.Контрагент) ИЛИ 
				НЕ ЗначениеЗаполнено(ЗаявкаНаРемонт.Автомобиль))
				ИЛИ Не ЗначениеЗаполнено(ЗаявкаНаРемонт.Заказчик);
		Иначе
			Возврат (НЕ ЗначениеЗаполнено(ЗаявкаНаРемонт.Контрагент) И Не БесплатныйРемонт);
		КонецЕсли; 
		
	Иначе 
		
		Возврат (НЕ ЗначениеЗаполнено(ЗаявкаНаРемонт.Заказчик) ИЛИ НЕ ЗначениеЗаполнено(ЗаявкаНаРемонт.Автомобиль));  
		
	КонецЕсли
		
КонецФункции

&НаСервере
Функция ДокументПроведен(ЗаявкаНаРемонт)
	
	Если ПраваИНастройкиПользователя.Значение("ВводНаОснованииПроведенныхДокументов", ЗаявкаНаРемонт) И НЕ ЗаявкаНаРемонт.Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ДокументПроведен()

&НаСервере
Функция КонтрольПересеченияИнтерваловНаСервере()
	
	Возврат  ПланированиеРесурсов.КонтрольПересеченияИнтервалов(ПланированиеИнтервалы, ТекущийОбъект(ЭтотОбъект).Ссылка);
	
КонецФункции

&НаСервере
Функция ПолучитьАвтомобильЗаказНаряда()
	Возврат ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль;
КонецФункции

&НаСервере
Функция ВидыАвтоработТекущегоОбъекта()
	
	ТОбъект = ТекущийОбъект(ЭтотОбъект);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Автоработы.Тип КАК Тип
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Ссылка В (&Автоработы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Автоработы.Тип
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Ссылка В (&ВспомогательныеАвтоработы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныОбращений.ТипАвторабот
	|ИЗ
	|	Справочник.ПричиныОбращений КАК ПричиныОбращений
	|ГДЕ
	|	ПричиныОбращений.Ссылка В (&ПричиныОбращения)");
	
	Запрос.УстановитьПараметр("Автоработы", ТОбъект.Автоработы.Выгрузить().ВыгрузитьКолонку("Авторабота"));
	Запрос.УстановитьПараметр("ВспомогательныеАвтоработы", ТОбъект.ВспомогательныеАвтоработы.Выгрузить().ВыгрузитьКолонку("Авторабота"));
	Запрос.УстановитьПараметр("ПричиныОбращения", ТОбъект.ПричиныОбращения.Выгрузить().ВыгрузитьКолонку("ПричинаОбращения"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Результат.Найти(Выборка.Тип) = Неопределено Тогда
			
			Результат.Добавить(Выборка.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыДлительнойОперации()
	
	ПараметрыОперации = Новый Структура;
	
	// таблицы ресурсов
	ПараметрыОперации.Вставить("РабочееМеста", ПолучитьРабочиеМестаДляГрафика());
	ПараметрыОперации.Вставить("Исполнители" , ПолучитьИсполнителиДляГрафика());
	ПараметрыОперации.Вставить("ПланированиеИнтервалы", ПланированиеИнтервалы.Выгрузить());
	ПараметрыОперации.Вставить("Начало", НачалоДня(ДатаПланировщика));
	ПараметрыОперации.Вставить("Конец", ПланированиеРесурсовКлиентСервер.ДатаОкончанияИнтервала(ДатаПланировщика, РежимКалендаря));
	ПараметрыОперации.Вставить("РежимОтображенияРесурсовНаГрафике", РежимОтображенияРесурсовНаГрафике);
	ПараметрыОперации.Вставить("РежимИспользованияГрафиков", РежимИспользованияГрафиков);
	ПараметрыОперации.Вставить("БазовыйГрафик", БазовыйГрафик);
	ПараметрыОперации.Вставить("УчитыватьДанныеТабеля", УчитыватьДанныеТабеля);
	ПараметрыОперации.Вставить("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени);
	ПараметрыОперации.Вставить("МасштабЯчейки", МасштабЯчейки);
	ПараметрыОперации.Вставить("ШиринаКолонкиРесурсов", ШиринаКолонкиРесурсов);
	ПараметрыОперации.Вставить("РазмерСеткиРедактированияПланировщика", РазмерСеткиРедактированияПланировщика);
	ПараметрыОперации.Вставить("Документ", ТекущийОбъект(ЭтотОбъект).Ссылка);
	ПараметрыОперации.Вставить("ОтображатьТолькоРаботающих", ОтображатьТолькоРаботающих);
	ПараметрыОперации.Вставить("ОтображатьТолькоДоступныеДляПланированияРесурсы", ОтображатьТолькоДоступныеДляПланированияРесурсы);
	ПараметрыОперации.Вставить("РежимШкалыМинут", РежимШкалыМинут);
	ПараметрыОперации.Вставить("ПорядокРесурсовВОбщемРежиме", ПорядокРесурсовВОбщемРежиме);
	ПараметрыОперации.Вставить("ШаблонПредставленияИнтервалаОбъекта", ШаблонПредставленияИнтервалаОбъекта);
	ПараметрыОперации.Вставить("РасположениеРесурсов", РасположениеРесурсов);
	ПараметрыОперации.Вставить("СмещениеЧасовогоПояса", СмещениеЧасовогоПояса);
	
	Если ОтображатьТолькоДоступныеДляПланированияРесурсы Тогда
		
		ПараметрыОперации.Вставить("ВидыАвторабот", ВидыАвтоработТекущегоОбъекта());
		
	КонецЕсли;
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаСервере
Функция НомерСтрокиРесурса(Ресурс)
	
	СтрокиРесурса = ОтображаемыеРесурсы.НайтиСтроки(Новый Структура("Ресурс", Ресурс));
	
	Если СтрокиРесурса.Количество() > 0 Тогда
		Возврат СтрокиРесурса[0].Номер;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ОбновитьНомераСтрокРесурсов(Ресурсы)
	
	ОтображаемыеРесурсы.Загрузить(Ресурсы);
	
КонецПроцедуры

// Формирует параметры для автоматического планирования авторабот
//
// Возвращаемое значение:
//   Структура - Параметры планирования
//
&НаСервере
Функция ПодготовитьДанныеДляАвтоматическогоПланирования()
	Перем ДанныеВспомогательныхАвторабот, ДокументОбъект, Автомобиль, Модель, Комплектация;
	
	Данные = Новый Структура("РежимПланированияПоРесурсам", РежимОтображенияРесурсовНаГрафике);
	ВозможноПланирование = Истина;
	Предупреждения = Новый Массив;
	
	Данные.Вставить("ИспользоватьБазовыйГрафик", РежимИспользованияГрафиков = 1);
	Данные.Вставить("БазовыйГрафик", БазовыйГрафик);
	Данные.Вставить("УчитыватьДанныеТабеля", УчитыватьДанныеТабеля);
	Данные.Вставить("ТекущийДокумент", ТекущийОбъект(ЭтотОбъект).Ссылка);
	Данные.Вставить("СмещениеЧасовогоПояса", СмещениеЧасовогоПояса);
	Данные.Вставить("ОсновнойЦех", ТекущийОбъект(ЭтотОбъект).Цех); 
	Данные.Вставить("ПланироватьНаЦехДокумента", ПланироватьНаЦехДокумента); 
	Данные.Вставить("Организация", ТекущийОбъект(ЭтотОбъект).Организация);

	Если Данные.ИспользоватьБазовыйГрафик И БазовыйГрафик.Пустая() Тогда
		ВозможноПланирование = Ложь;
		Предупреждения.Добавить(НСтр(
			"ru = 'Не указан базовый график. Укажите базовый график в настройках
			|или переведите переключатель использования графика в ""не учитывать графики""'")
		);
	КонецЕсли;
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		ДокументОбъект = ЗаписьНаРемонт.ЗаявкаНаРемонт;
		ДанныеВспомогательныхАвторабот = ДокументОбъект.ВспомогательныеАвтоработы;
		Автомобиль = ДокументОбъект.Автомобиль;
		Модель = ДокументОбъект.Модель;
		Комплектация = ДокументОбъект.ВариантКомплектации;
	Иначе
		ДокументОбъект = ЗаписьНаРемонт.ЗаказНаряд;
		ДанныеВспомогательныхАвторабот = ДокументОбъект.ВспомогательныеАвтоработы;
		Автомобиль = ДокументОбъект.СводныйРемонтныйЗаказ.Автомобиль;
		
		Данные.Вставить("ПроверятьНаличиеВыполненныхАвторабот", Истина);
	КонецЕсли;
	
	// определимся с автомобилем
	Если НЕ Автомобиль.Пустая() Тогда
		ДанныеАвтомобиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, "Модель,ВариантКомплектации");
		
		Модель = ДанныеАвтомобиля.Модель;
		Комплектация = ДанныеАвтомобиля.ВариантКомплектации;
	КонецЕсли;
	
	Данные.Вставить("Модель", Модель);
	Данные.Вставить("Комплектация", Комплектация);
	
	Если НЕ ЗначениеЗаполнено(Модель) И НЕ ЗначениеЗаполнено(Комплектация) Тогда
		ВозможноПланирование = Ложь;
		Предупреждения.Добавить(НСтр(
			"ru = 'Не заполнены модель и комплектация автомобиля.
			|Для автоматического планирования укажите в карточке автомобиля модель автомобиля или комплектацию.'")
		);
	КонецЕсли;
	
	// Укажем подразделение
	Данные.Вставить("ПодразделениеКомпании", ДокументОбъект.ПодразделениеКомпании);
	
	Если ДокументОбъект.ПодразделениеКомпании.Пустая() Тогда
		ВозможноПланирование = Ложь;
		Предупреждения.Добавить(НСтр("ru = 'Не заполнено подразделение документа.'"));
	КонецЕсли;
	
	// Определим дату планирования
	Если ЗначениеЗаполнено(ДокументОбъект.ДатаНачала) Тогда
		Данные.Вставить("НачалоПериодаРасчета", НачалоМинуты(ДокументОбъект.ДатаНачала));
	КонецЕсли;
	
	РесурсыДляПланирования = Новый ТаблицаЗначений;
	РесурсыДляПланирования.Колонки.Добавить("Ресурс");
	РесурсыДляПланирования.Колонки.Добавить("График");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РабочиеМестаДляГрафика, РесурсыДляПланирования);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИсполнителиДляГрафика, РесурсыДляПланирования);
	
	Данные.Вставить("ДоступныеРесурсы", ПоместитьВоВременноеХранилище(РесурсыДляПланирования, УникальныйИдентификатор));
	
	// Интервалы планирования
	Данные.Вставить(
		"ПланированиеИнтервалы",
		ПоместитьВоВременноеХранилище(ПланированиеИнтервалы.Выгрузить(), УникальныйИдентификатор));
	
	// Составим таблицу объектов
	Если ОбновитьДеревоОбъектовПланирования Тогда
		ПланированиеРесурсовКлиентСервер.ЗаполнитьОбъектыПланирования(
			ДокументОбъект,
			ПланированиеИнтервалы,
			ПланированиеОбъекты
		);
	КонецЕсли;
	
	// Подготовим таблицу приемник
	ТипСтрокаИдентификатор = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная));
	ТипЧислоНормыВремени = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Любой));
	
	ПриемникВрем = Новый ТаблицаЗначений;
	ПриемникВрем.Колонки.Добавить("Объект",
		Новый ОписаниеТипов("СправочникСсылка.Автоработы, СправочникСсылка.ПричиныОбращений"));
	ПриемникВрем.Колонки.Добавить("ВидОбъектаПланирования",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовПланированияРесурсов"));
	ПриемникВрем.Колонки.Добавить("Идентификатор", ТипСтрокаИдентификатор);
	ПриемникВрем.Колонки.Добавить("ИдентификаторГруппы", ТипСтрокаИдентификатор);
	ПриемникВрем.Колонки.Добавить("НормаВремениСправочная", ТипЧислоНормыВремени);
	ПриемникВрем.Колонки.Добавить("НормаВремениЗапланировано", ТипЧислоНормыВремени);
	ПриемникВрем.Колонки.Добавить("ПланированиеПоГруппе", Новый ОписаниеТипов("Булево"));
	ПриемникВрем.Колонки.Добавить("ОбъектГруппы", Новый ОписаниеТипов("СправочникСсылка.ПричиныОбращений"));
	
	СЕКУНД_В_ЧАСЕ = 3600;
	Для Каждого Родитель Из ПланированиеОбъекты.ПолучитьЭлементы() Цикл
		Если Родитель.ЭтоПричина Тогда
			НовыйОбъект = ПриемникВрем.Добавить();
			НовыйОбъект.Идентификатор             = Родитель.Идентификатор;
			НовыйОбъект.ВидОбъектаПланирования    = Перечисления.ВидыОбъектовПланированияРесурсов.ПричинаОбращения;
			НовыйОбъект.НормаВремениЗапланировано = Родитель.НормаВремени;
			НовыйОбъект.ПланированиеПоГруппе      = Родитель.ПланированиеПоГруппе;
			
			СтрокиПричиныОбращения = ДокументОбъект.ПричиныОбращения.НайтиСтроки(
				Новый Структура("ИдентификаторПричиныОбращения", НовыйОбъект.Идентификатор));
			Если СтрокиПричиныОбращения.Количество() > 0 Тогда
				НовыйОбъект.Объект = СтрокиПричиныОбращения[0].ПричинаОбращения;
			КонецЕсли;
			
			СтрокиПричины = ДокументОбъект.ПричиныОбращения.НайтиСтроки(
				Новый Структура("ИдентификаторПричиныОбращения", Родитель.Идентификатор));
			
			Если СтрокиПричины.Количество() > 0 Тогда
				НовыйОбъект.НормаВремениСправочная = СтрокиПричины[0].НормаВремени;
			КонецЕсли;
			
			НормаВремениВДочерних = 0; НормаВремениВДочернихЗапланировано = 0;
			Для Каждого Дочка Из Родитель.ПолучитьЭлементы() Цикл
				НовыйОбъектДочка = ПриемникВрем.Добавить();
				НовыйОбъектДочка.Идентификатор             = Дочка.Идентификатор;
				НовыйОбъектДочка.ИдентификаторГруппы       = НовыйОбъект.Идентификатор;
				НовыйОбъектДочка.ВидОбъектаПланирования    = Перечисления.ВидыОбъектовПланированияРесурсов.Авторабота;
				НовыйОбъектДочка.НормаВремениЗапланировано = Дочка.НормаВремени;
				НовыйОбъектДочка.ПланированиеПоГруппе = Дочка.ПланированиеПоГруппе;
				НовыйОбъектДочка.ОбъектГруппы = НовыйОбъект.Объект;
				
				НормаВремениВДочернихЗапланировано = НормаВремениВДочернихЗапланировано
					+ НовыйОбъектДочка.НормаВремениЗапланировано;
				
				СтрокиАвторабот = ДокументОбъект.Автоработы.НайтиСтроки(
					Новый Структура("ИдентификаторРаботы", НовыйОбъектДочка.Идентификатор));
				Если СтрокиАвторабот.Количество() > 0 Тогда
					НовыйОбъектДочка.Объект = СтрокиАвторабот[0].Авторабота;
					НовыйОбъектДочка.НормаВремениСправочная = СтрокиАвторабот[0].Количество 
						* СтрокиАвторабот[0].Коэффициент 
						* СЕКУНД_В_ЧАСЕ;
					НормаВремениВДочерних = НормаВремениВДочерних + НовыйОбъектДочка.НормаВремениСправочная;
				КонецЕсли;
			КонецЦикла;
			
			Если НормаВремениВДочернихЗапланировано <> 0 Тогда
				НовыйОбъект.НормаВремениЗапланировано = НормаВремениВДочернихЗапланировано;
			КонецЕсли;
				
			Если НормаВремениВДочерних <> 0 Тогда
				НовыйОбъект.НормаВремениСправочная = НормаВремениВДочерних;
			КонецЕсли;
		ИначеЕсли Родитель.ЭтоВспомогательнаяАвторабота Тогда
			НовыйОбъект = ПриемникВрем.Добавить();
			НовыйОбъект.Идентификатор = Родитель.Идентификатор;
			НовыйОбъект.ВидОбъектаПланирования = Перечисления.ВидыОбъектовПланированияРесурсов.ВспомогательнаяАвторабота;
			НовыйОбъект.НормаВремениЗапланировано = Родитель.НормаВремени;
			
			СтрокиАвторабот = ДанныеВспомогательныхАвторабот.НайтиСтроки(
				Новый Структура("ИдентификаторРаботы", НовыйОбъект.Идентификатор));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				НовыйОбъект.Объект = СтрокиАвторабот[0].Авторабота;
				НовыйОбъект.НормаВремениСправочная = СтрокиАвторабот[0].НормаВремени * СЕКУНД_В_ЧАСЕ;
			КонецЕсли;
		Иначе
			НовыйОбъект = ПриемникВрем.Добавить();
			НовыйОбъект.Идентификатор = Родитель.Идентификатор;
			НовыйОбъект.ВидОбъектаПланирования = Перечисления.ВидыОбъектовПланированияРесурсов.Авторабота;
			НовыйОбъект.НормаВремениЗапланировано = Родитель.НормаВремени;
			
			СтрокиАвторабот = ДокументОбъект.Автоработы.НайтиСтроки(
				Новый Структура("ИдентификаторРаботы", НовыйОбъект.Идентификатор));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				НовыйОбъект.Объект = СтрокиАвторабот[0].Авторабота;
				НовыйОбъект.НормаВремениСправочная = СтрокиАвторабот[0].Количество
					* СтрокиАвторабот[0].Коэффициент
					* СЕКУНД_В_ЧАСЕ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Данные.Вставить("ПланированиеОбъекты", ПоместитьВоВременноеХранилище(ПриемникВрем, УникальныйИдентификатор));
	
	Если ПриемникВрем.Количество() = 0 Тогда
		ВозможноПланирование = Ложь;
		Предупреждения.Добавить(НСтр("ru = 'Нет объектов для планирования.'"));
	КонецЕсли;
	
	Возврат Новый Структура("Данные,ВозможноПланирование,Предупреждения", Данные, ВозможноПланирование, Предупреждения);
	
КонецФункции // ПодготовитьДанныеДляАвтоматическогоПланирования()

&НаСервере
Процедура НоваяЗаявкаНаРемонтНаСервере(ПараметрыДействия)
	
	УстановитьРежимРедактирования(РежимыРедактирования().ЗаявкаНаРемонт);
	
	ДатаПланировщика = НачалоДня(ТекущаяДатаСеанса());
	ПараметрыДействия = ОбновитьКалендарьНаСервере();
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеДатыПробегов(ТекущийДокумент)
	
	ДатыПробега = Новый Массив;
	
	ДатыПробега.Добавить(?(ЗначениеЗаполнено(ТекущийДокумент.ДатаНачала), ТекущийДокумент.ДатаНачала, ТекущийДокумент.Дата));
	Если ЗначениеЗаполнено(ТекущийДокумент.ДатаОкончания) Тогда
		ДатыПробега.Добавить(ТекущийДокумент.ДатаОкончания);
	КонецЕсли;
	
	Возврат ДатыПробега;
	
КонецФункции

// Процедура делает пересчет планового интервала и пробела ТО автомобиля
//
//
&НаСервере
Процедура ПересчитатьПлановыеПоказателиПоТО(ИзменитьПлановыйПробегТО = Ложь, ИзменитьПлановуюДатуТО = Ложь)
	
	Автомобиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ, "Автомобиль");
	
	Если ЗаписьНаРемонт.ЗаказНаряд.ВидРемонта.ТехОбслуживание И НЕ Автомобиль.Пустая() Тогда
		
		Если ИзменитьПлановыйПробегТО Тогда
			МежсервисныйПробегТО = ?(ЗначениеЗаполнено(Автомобиль.ВариантКомплектации.МежсервисныйПробегТО),
				Автомобиль.ВариантКомплектации.МежсервисныйПробегТО,
				Автомобиль.Модель.МежсервисныйПробегТО);
			
			ЗаписьНаРемонт.ЗаказНаряд.ПробегСледующегоТО = ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ.Пробег
				+ МежсервисныйПробегТО;
		КонецЕсли;
		
		Если ИзменитьПлановуюДатуТО Тогда
			
			ДатаОтсчета = ?(
				ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.ДатаОкончания),
				ЗаписьНаРемонт.ЗаказНаряд.ДатаОкончания,
				ЗаписьНаРемонт.ЗаказНаряд.Дата
			);
			МежсервисныйИнтервалТО = ?(
				ЗначениеЗаполнено(Автомобиль.ВариантКомплектации.МежсервисныйИнтервалТО),
				Автомобиль.ВариантКомплектации.МежсервисныйИнтервалТО,
				Автомобиль.Модель.МежсервисныйИнтервалТО
			);
			ЗаписьНаРемонт.ЗаказНаряд.ДатаСледующегоТО = ДобавитьМесяц(ДатаОтсчета, МежсервисныйИнтервалТО);
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры // ПересчитатьПлановыеПоказателиПоТО()

&НаСервере
Процедура ЗаказНарядЗаполнитьИдентификаторыПричинОбращенийАвторабот(Объект)
	
	Если Объект.ПричиныОбращения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Объект);
	
	ТекОбъект = ТекущийОбъект(ЭтотОбъект);
	
	Для Каждого Авторабота Из ТекОбъект.Автоработы Цикл
		НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
		Иначе
			Авторабота.ИдентификаторПричиныОбращения = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеБонусныхБаллах()
	
	БонусныеБаллыПредставление = "Бонусы: " + Строка(ТекущийОбъект(ЭтотОбъект).КоличествоКСписанию)
		+ " / " + Строка(ТекущийОбъект(ЭтотОбъект).КоличествоКНачислению);
	
КонецПроцедуры // СформироватьПредставлениеБонусныхБаллах()

// Производит формирование и установку форматированной строки представления итоговой суммы по операции.
//
// Параметры
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
&НаСервере
Процедура УстановитьЗаголовокНадписиСуммаДокумента()
	
	// Проверим целесообразность дальнейших операций
	Если Элементы.НадписьСуммаДокумента.Видимость Тогда
		
		// Получим структуру итогов документа
		Если РежимыРедактирования().ЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования Тогда
			ИтогиОперации = Документы.ЗаказНаряд.РассчитатьИтогиОперации(ТекущийОбъект(ЭтотОбъект));
		Иначе
			ИтогиОперации = Документы.ЗаявкаНаРемонт.РассчитатьИтогиОперации(ТекущийОбъект(ЭтотОбъект));
		КонецЕсли;
		
		// Формируем и устанавливаем заголовок поля итоговой суммы документа
		НадписьСуммаДокумента = Новый ФорматированнаяСтрока(стрШаблон(" Итого: %1 %2 (%3)",
			Формат(ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"),
			ТекущийОбъект(ЭтотОбъект).ВалютаДокумента,
			Формат(ТекущийОбъект(ЭтотОбъект).КурсДокумента, "ЧДЦ=4; ЧН=0,0000")));
	КонецЕсли;
	
	Если Элементы.НадписьСогласованнаяСумма.Видимость Тогда
		Элементы.НадписьСогласованнаяСумма.Заголовок = "Согласовано: " + Формат(ЗаписьНаРемонт.ЗаказНаряд.СогласованнаяСумма, "ЧДЦ=2; ЧН=0,00");
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокНадписиСуммаДокумента()

&НаСервере
Процедура ПерерасчетСуммыСкидкиБонусами()
	
	Документы.ЗаказНаряд.ПерерасчетСуммыСкидкиБонусами(ЗаписьНаРемонт.ЗаказНаряд);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, ЗаписьНаРемонт.ЗаказНаряд);
	СформироватьПредставлениеБонусныхБаллах();
	Документы.ЗаказНаряд.ПерерасчетСуммыНачисленийИсполнителям(
		ЗаписьНаРемонт.ЗаказНаряд,
		Перечисления.СпособыРасчета.Процентом);
	Документы.ЗаказНаряд.РассчитатьСуммуСкидкиНаценки(ЗаписьНаРемонт.ЗаказНаряд);
		
КонецПроцедуры // ПерерасчетСуммыСкидкиБонусами()

// Устанавливает для новой автоработы подходящий пакет работ
//
// Параметры:
//	НомерСтроки - Число - Индекс строки в табличной части "Автоработы".
//
&НаСервере
Процедура ДобавитьНовуюАвтоработуВПакет(НомерСтроки)
	
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(НомерСтроки);
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ПустаяСтрока(ТекущиеДанные.ПакетРабот) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.НеРазбивать Тогда
		Документы.ЗаказНаряд.ПоместитьАвтоработуВнеПакетов(ТекущиеДанные);
	Иначе
		Документы.ЗаказНаряд.ПоместитьАвтоработуВПакет(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, РежимРазделенияРаботПоПакетам)
	КонецЕсли;

КонецПроцедуры

// Функция помещает список материалов во временное хранилище и возвращает адрес 
//
&НаСервереБезКонтекста
Функция ПоместитьТаблицуМатериаловВХранилище(Знач Объект, УникальныйИдентификатор, ИдентификаторРаботы)
	
	МатериалыРаботы = Объект.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить(МатериалыРаботы, "Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент, ХарактеристикаНоменклатуры, СкладКомпании, ПримечаниеНоменклатураПечать, ПримечаниеНоменклатура"), УникальныйИдентификатор);
	
КонецФункции // ПоместитьТаблицуМатериаловВХранилище()

&НаСервереБезКонтекста
Функция СкладЦеха(Цех)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Цех, "СкладКомпании");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоказателиТоваров(Форма)
	
	Объект = Форма.ЗаписьНаРемонт.ЗаказНаряд;
	ПоказателиЗапасов = АвтосервисВызовСервера.ПоказателиЗапасов(Объект.Ссылка, Объект.Товары);
	
	Если НЕ ЗначениеЗаполнено(ПоказателиЗапасов) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Показатель Из ПоказателиЗапасов Цикл
		
		Строка = Объект.Товары.НайтиПоИдентификатору(Показатель.ИдентификаторСтроки);
		
		Коэффициент         = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		ОстатокНаСкладе     = Показатель.ОстатокНаСкладе;
		Заказано            = Показатель.Заказано;
		Зарезервировано     = Показатель.Зарезервировано;
		ВПроизводстве       = Показатель.ВПроизводстве;
		ОсталосьПереместить = Показатель.ОсталосьПереместить;
		ВозможноПереместить = Показатель.ВозможноПереместить;
		
		Строка.ОстатокНаСкладе     = ОстатокНаСкладе;
		Строка.ВПроизводстве       = ВПроизводстве/Коэффициент;
		Строка.Заказано            = Заказано/Коэффициент;
		Строка.ВРезерве            = Зарезервировано/Коэффициент;
		Строка.ОсталосьПереместить = ОсталосьПереместить/Коэффициент;
		Строка.ВозможноПереместить = ВозможноПереместить/Коэффициент;
		
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если СтрокаТоваров.ОсталосьПереместить = 0 Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = 4;
			
		ИначеЕсли СтрокаТоваров.ОсталосьПереместить <= СтрокаТоваров.ВозможноПереместить Тогда
			
			Если СтрокаТоваров.ВРезерве >= СтрокаТоваров.ОсталосьПереместить Тогда
				
				СтрокаТоваров.ЦветРаскраскиСтроки = 1;
				
			Иначе
				
				СтрокаТоваров.ЦветРаскраскиСтроки = 2;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТоваров.ОсталосьПереместить <= (СтрокаТоваров.Заказано+СтрокаТоваров.ВозможноПереместить) Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = 3;
			
		Иначе
			
			СтрокаТоваров.ЦветРаскраскиСтроки = 5;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоказателиТоваровЗаявкаНаРемонт(Форма)
	
	Объект = Форма.ЗаписьНаРемонт.ЗаявкаНаРемонт;
	
	ПоказателиЗапасов = АвтосервисВызовСервера.ПоказателиЗапасов(Объект.Ссылка, Объект.Товары);
	
	Если НЕ ЗначениеЗаполнено(ПоказателиЗапасов) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Показатель Из ПоказателиЗапасов Цикл
		
		Строка = Объект.Товары.НайтиПоИдентификатору(Показатель.ИдентификаторСтроки);
		
		Коэффициент     = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		ОстатокНаСкладе = Показатель.ОстатокНаСкладе;
		Заказано        = Показатель.Заказано;
		Зарезервировано = Показатель.Зарезервировано;
		
		Строка.ОстатокНаСкладе = ОстатокНаСкладе;
		Строка.Заказано        = Заказано/Коэффициент;
		Строка.ВРезерве        = Зарезервировано/Коэффициент;
		
	КонецЦикла;
	
	СброситьРаскраску = (Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостояниеЗаявкиНаРемонт.Отклонено"));
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если СброситьРаскраску Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = 0;
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТоваров.Количество <= СтрокаТоваров.ОстатокНаСкладе Тогда
			
			Если СтрокаТоваров.ВРезерве >= СтрокаТоваров.Количество Тогда
				
				СтрокаТоваров.ЦветРаскраскиСтроки = 1;
				
			Иначе
				
				СтрокаТоваров.ЦветРаскраскиСтроки = 2;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТоваров.Количество <= (СтрокаТоваров.Заказано + СтрокаТоваров.ОстатокНаСкладе) Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = 3;
			
		Иначе
			
			СтрокаТоваров.ЦветРаскраскиСтроки = 4;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// возвращает строку кеша по параметрам
&НаСервереБезКонтекста
Функция ПолучитьСтрокуКешаПеремещенияДокументы(Знач Объект, ТекущаяСтрока)
	
	ТоварыВПроизводстве = Документы.ЗаказНаряд.ПолучитьПоказателиЗапасов(Объект, Объект.Товары);
	
	ВПроизводстве       = 0;
	Заказано            = 0;
	Зарезервировано     = 0;
	
	Для Каждого ТекСтрока Из ТоварыВПроизводстве Цикл
		Если ТекущаяСтрока = ТекСтрока.ИдентификаторСтроки Тогда
			ВПроизводстве = ВПроизводстве + ТекСтрока.ВПроизводстве;
			
			Если ТекСтрока.ЗаказаноПодЗН>0 Тогда
				Заказано = ТекСтрока.ЗаказаноПодЗН;
			КонецЕсли;
			
			Если ТекСтрока.ЗарезервированоПодЗН>0 Тогда
				Зарезервировано = ТекСтрока.ЗарезервированоПодЗН;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиЗапасов = Новый Массив;
	ПоказателиЗапасов.Добавить(ВПроизводстве);
	ПоказателиЗапасов.Добавить(Заказано);
	ПоказателиЗапасов.Добавить(Зарезервировано);
	
	Возврат ПоказателиЗапасов;
	
КонецФункции // ПолучитьСтрокуКешаПеремещенияПоЗаказам()

// Получение кода номенклатуры в зависимости от права режима вывода кода
//
// Параметры:
//  Номенклатура  - СправочникСсылка.Номенклатура - Номенклатура, код которой требуется получить
//  РежимыВыводаКодаВДокументах	- Строка - Имя реквизита номенклатуры, выступающее в качестве кода
//								- ПеречислениеСсылка.РежимыВыводаКодаВДокументах - Настройка режим отображения кода
// ПраваПользователя - Права пользователя или объект документа
// ВыводитьПроизводителя - Булево - При значении параметра в "Истина" добавление к артикулу номенклатуры производителя,
// 									если заполнен соответствующий реквизит у номенклатуры
// Возвращаемое значение:
//  Строка - значение кода номенклатуры в зависимости от настройки режима вывода.
//
&НаСервереБезКонтекста
Функция ПолучитьЗначениеКолонкиКода(Номенклатура)
	
	Возврат УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Номенклатура);
	
КонецФункции // ПолучитьЗначениеКолонкиКода()

&НаСервере
Процедура МатериалыЗаказчикаУстановитьВидимостьКолонок()
	
	УстановитьВидимость = Ложь;
	Для Каждого МатериалыЗаказчикаСтрока Из ЗаписьНаРемонт.ЗаказНаряд.МатериалыЗаказчика Цикл
		Если ТипЗнч(МатериалыЗаказчикаСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			УстановитьВидимость = Истина;
			МатериалыЗаказчикаСтрока.Код              = МатериалыЗаказчикаСтрока.Номенклатура.Код;
			МатериалыЗаказчикаСтрока.Артикул          = МатериалыЗаказчикаСтрока.Номенклатура.Артикул;
			МатериалыЗаказчикаСтрока.ЕдиницаИзмерения = МатериалыЗаказчикаСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			МатериалыЗаказчикаСтрока.Коэффициент      = МатериалыЗаказчикаСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
		Иначе
			МатериалыЗаказчикаСтрока.Код     = "";
			МатериалыЗаказчикаСтрока.Артикул = "";
			МатериалыЗаказчикаСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			МатериалыЗаказчикаСтрока.Коэффициент      = 1;
		КонецЕсли;
	КонецЦикла;
	Элементы.МатериалыЗаказчикаКодЗаказНаряд.Видимость                        = УстановитьВидимость;
	Элементы.МатериалыЗаказчикаАртикулЗаказНаряд.Видимость                    = УстановитьВидимость;
	Элементы.МатериалыЗаказчикаЕдиницаКоэффициентЗаказНаряд.Видимость         = УстановитьВидимость;
	Элементы.МатериалыЗаказчикаХарактеристикаНоменклатурыЗаказНаряд.Видимость = УстановитьВидимость;
	
	Если УстановитьВидимость Тогда
		УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонокКодАртикул(ЭтотОбъект, "МатериалыЗаказчикаЗаказНаряд");
	КонецЕсли;
	
КонецПроцедуры // МатериалыЗаказчикаУстановитьВидимостьКолонок()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Функция ПолучитьТаблицуМатериаловИзХранилища(АдресВХранилище, ИдентификаторРаботы)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если НЕ ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений") Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	МатериалыРаботы = ЗаписьНаРемонт.ЗаказНаряд.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	Для Каждого ТекМатериал Из МатериалыРаботы Цикл
		ЗаписьНаРемонт.ЗаказНаряд.Материалы.Удалить(ТекМатериал);
	КонецЦикла;
	
	СтрокаМатериалы = "";
	Для Каждого СтрокаТЧ Из ТаблицаДляЗагрузки Цикл
		НоваяСтрока = ЗаписьНаРемонт.ЗаказНаряд.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ИдентификаторРаботы = ИдентификаторРаботы;
		
		СтрокаМатериалы = СтрокаМатериалы + ?(СтрокаМатериалы = "", "", ", ") + СокрЛП(СтрокаТЧ.Номенклатура) 
			+ " - " + СокрЛП(СтрокаТЧ.Количество) + " (" + СокрЛП(СтрокаТЧ.ЕдиницаИзмерения) + ")";
	КонецЦикла;
	
	Возврат СтрокаМатериалы;
	
КонецФункции // ПолучитьТаблицуМатериаловИзХранилища()

// процедура передачи вызова в менеджер
//
&НаСервере
Процедура ЗаполнитьПоСервиснойКомпании(ПараметрыЗаполнения)
	
	Документы[ЗаписьНаРемонт.РежимРедактирования].ЗаполнениеПоСервиснойКомпании(ТекущийОбъект(ЭтотОбъект), ПараметрыЗаполнения);
	
	// Заполним пакет работ
	Если ИспользоватьУчетРабочегоВремени И ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		Для Каждого СтрокаАвтоработы Из ЗаписьНаРемонт.ЗаказНаряд.Автоработы Цикл
			Если ПустаяСтрока(СтрокаАвтоработы.ПакетРабот) Тогда
				ДобавитьНовуюАвтоработуВПакет(СтрокаАвтоработы.ПолучитьИдентификатор());
				ИзмененыПакетыРабот = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТабличнойЧастиИзФайла(РезультатОповещения)
	
	// Получим параметры работы
	АдресТаблицаЗагрузкаИЗФайлаВХранилище = РезультатОповещения.АдресТаблицаЗагрузкаИЗФайлаВХранилище;
	ИмяТабличнойЧасти                     = РезультатОповещения.ИмяТабличнойЧасти;
	
	ИдентификаторПричиныОбращения = "";
	Если НЕ Элементы["ПричиныОбращения"+ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.НайтиПоИдентификатору(Элементы["ПричиныОбращения"+ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ТекущиеДанные.ИдентификаторПричиныОбращения;
	КонецЕсли;
	
	// Производим заполнение таблицы объекта
	Если ЗначениеЗаполнено(АдресТаблицаЗагрузкаИЗФайлаВХранилище) Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТаблицаЗагрузкаИЗФайлаВХранилище);
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			НовСтр = ТекущийОбъект(ЭтотОбъект)[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваров);
			НовСтр.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеТабличнойЧастиИзФайла()

// Заполнение табличной части документа "Товары" деталями из производства
&НаСервере
Процедура ЗаполнитьДеталямиИзПроизводстваНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока);
		ПараметрыЗаполнения.Вставить("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	// Выполним заполнение ТЧ
	Документы.ЗаказНаряд.ТоварыЗаполнитьДеталямиИзПроизводства(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыЗаполнения);
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
	Иначе
		ОбновитьПоказателиТоваров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказнымиДеталямиНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока);
		ПараметрыЗаполнения.Вставить("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	// Выполним заполнение ТЧ
	Документы.ЗаказНаряд.ТоварыЗаполнитьЗаказнымиДеталями(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыЗаполнения);
	
	СформироватьПредставлениеБонусныхБаллах();
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
	Иначе
		ОбновитьПоказателиТоваров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗаказнымиДеталямиНаСервере()

&НаСервере
Процедура ЗаполнитьКраскамиИзПроизводстваНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока);
		ПараметрыЗаполнения.Вставить("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	// Выполним заполнение ТЧ
	Документы.ЗаказНаряд.ТоварыЗаполнитьКраскамиИзПроизводства(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыЗаполнения);
	
	СформироватьПредставлениеБонусныхБаллах();
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
	Иначе
		ОбновитьПоказателиТоваров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКраскамиИзПроизводстваНаСервере()

// Обработчик результата подбора номенклатуры
//
&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(Корзина, Контекст)
	
	ТоварыОбъекта = ТекущийОбъект(ЭтотОбъект).Товары;
	ПодборТоваровСервер.ЗаполнитьТоварыИзКорзиныВДокументахАвтосервиса(
		ТекущийОбъект(ЭтотОбъект), ТоварыОбъекта, Корзина, Контекст);
	КолонкаХарактеристики = Элементы.Найти("ТоварыХарактеристикаНоменклатуры" + ЗаписьНаРемонт.РежимРедактирования);
	ПодборТоваровКлиентСервер.ОбновитьВидимостьХарактеристики(КолонкаХарактеристики, ТоварыОбъекта);
	УправлениеДиалогомНаСервере();
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
	Иначе
		ОбновитьПоказателиТоваров(ЭтотОбъект);
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ТекущийОбъект(ЭтотОбъект).ПричиныОбращения,
		ТекущийОбъект(ЭтотОбъект).Автоработы,
		ТекущийОбъект(ЭтотОбъект).Товары
	);
	
КонецПроцедуры // ОбработкаРезультатаПодбораНоменклатуры()

&НаСервере
Функция ПодготовитьПараметрыКОткрытиюФормы()
	
	// инициализируем таблицу
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ЗаказНаряд", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"));
	ТаблицаДокумента.Колонки.Добавить("ЗаказНарядИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДокумента.Колонки.Добавить("СкладКомпании", Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
	ТаблицаДокумента.Колонки.Добавить("Количество");
	ТаблицаДокумента.Колонки.Добавить("Коэффициент");
	ТаблицаДокумента.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаДокумента.Колонки.Добавить("ХарактеристикаНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	СозданныеУникальныеИдентификаторы = Новый Структура;
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	
	// заполнение таблицы
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			
		НоваяСтрока.ЗаказНарядИдентификатор = Новый УникальныйИдентификатор;
		НоваяСтрока.ЗаказНаряд              = Объект.Ссылка;
	КонецЦикла;
	
	Возврат
		Новый Структура("АдресТаблицыВоВременномХранилище", ПоместитьВоВременноеХранилище(ТаблицаДокумента, Новый УникальныйИдентификатор));
	
КонецФункции

&НаСервере
Функция ПоместитьОтборыВХранилище()
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Исполнители", ИсполнителиДляГрафика.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	СтруктураОтборов.Вставить("Цеха", РабочиеМестаДляГрафика.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	
	Результат = ПоместитьВоВременноеХранилище(СтруктураОтборов, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРесурсы(Адрес)
	
	Ресурсы = ПолучитьИзВременногоХранилища(Адрес);
	ПланированиеРесурсов.ЗаполнитьИсполнителей(ИсполнителиДляГрафика, Ресурсы.Исполнители);
	ПланированиеРесурсов.ЗаполнитьРабочиеМеста(РабочиеМестаДляГрафика, Ресурсы.Цеха);
	
КонецПроцедуры

&НаСервере
Функция ДатаТекущегоОбъекта()
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		Возврат ЗаписьНаРемонт.ЗаявкаНаРемонт.Дата;
	ИначеЕсли ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		Возврат ЗаписьНаРемонт.ЗаказНаряд.Дата;
	КонецЕсли;
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Функция АвтомобильТекущегоОбъекта()
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		Возврат ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль;
	ИначеЕсли ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ, "Автомобиль");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура СформироватьПредставлениеБонусныхБаллахЗаявкаНаРемонт()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БонусныеБаллыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы.Остатки(
		|			,
		|			БонуснаяКарта = &Карта
		|				И АктивностьБонусов) КАК БонусныеБаллыОстатки";
	Запрос.УстановитьПараметр("Карта", ЭтотОбъект.ЗаписьНаРемонт.ЗаявкаНаРемонт.Карточка);
	Запрос.УстановитьПараметр("МоментВремени", ЭтотОбъект.ЗаписьНаРемонт.ЗаявкаНаРемонт.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Элементы.КонтрагентЗаявкаНаРемонт.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Бонусы в наличии:'") 
																		+ Символы.НПП 
																		+ ?(Выборка.Следующий(), Выборка.КоличествоОстаток, 0);
	
КонецПроцедуры // СформироватьПредставлениеБонусныхБаллах()

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалыОбласти(Лево, Право, ОтображаемыеИнтервалы, СекундВИнтервале)
	
	Интервалы = Новый Массив;
	
	// проверим корректность данных
	Если Лево > Право Тогда
		
		Возврат Интервалы;
		
	КонецЕсли;
	
	// Определим интервалы ячеек
	ШагРазделителя = ?(ОтображаемыеИнтервалы.Количество() > 1, 1, 0);
	ОтступСлева = 2 + ШагРазделителя;
	
	Для Каждого Интервал Из ОтображаемыеИнтервалы Цикл
		
		ЛеваяГраница = ОтступСлева;
		ПраваяГраница = ЛеваяГраница + Интервал.ВсегоИнтервалов;
		
		Если Лево <= ПраваяГраница И Право >= ЛеваяГраница Тогда
			
			СоставИнтервала = Новый Структура;
			СоставИнтервала.Вставить("Начало", Интервал.Начало + (Макс(Лево, ЛеваяГраница) - ЛеваяГраница) * СекундВИнтервале);
			СоставИнтервала.Вставить("Конец", Интервал.Начало + (Мин(Право + 1, ПраваяГраница) - ЛеваяГраница) * СекундВИнтервале);
			
			Если СоставИнтервала.Начало <> СоставИнтервала.Конец Тогда
				
				Интервалы.Добавить(СоставИнтервала);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Право <= ПраваяГраница Тогда // если вышли за пределы интервала прервем обход
			
			Прервать;
			
		КонецЕсли;
		
		ОтступСлева = ПраваяГраница + ШагРазделителя;
		
	КонецЦикла;
	
	Возврат Интервалы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыделенныеРесурсы(Форма, Область = Неопределено)
	
	Области = Новый Массив;
	
	Если Область = Неопределено Тогда
		
		ТекущаяОбласть = Форма.КалендарьДневной.ТекущаяОбласть;
		
	Иначе
		
		ТекущаяОбласть = Область;
		
	КонецЕсли;
	
	Если Форма.РасположениеРесурсов = "ЛЕВО" Тогда
		
		НачальныйСчетчик = ТекущаяОбласть.Верх;
		КонечныйСчетчик = ТекущаяОбласть.Низ;
		
	Иначе
		
		НачальныйСчетчик = ТекущаяОбласть.Лево;
		КонечныйСчетчик = ТекущаяОбласть.Право;
		
	КонецЕсли;
	
	Для Сч = НачальныйСчетчик По КонечныйСчетчик Цикл
		
		Области.Добавить(Сч);
		
	КонецЦикла;
	
	Если Области.Количество() > 0 Тогда
		
		Возврат Области;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГраницыИнтерфейса(Форма)
	
	// Определим рамки интерфейса
	ШагРазделителя = ?(Форма.ИнтервалыОтображения.Количество() > 1, 1, 0);
	Если Форма.РасположениеРесурсов = "ЛЕВО" Тогда
		ЛеваяГраница = Форма.КалендарьДневной.ФиксацияСлева + ШагРазделителя;
		ВерхняяГраница = Форма.КалендарьДневной.ФиксацияСверху;
	Иначе
		ЛеваяГраница = Форма.КалендарьДневной.ФиксацияСлева;
		ВерхняяГраница = Форма.КалендарьДневной.ФиксацияСверху + ШагРазделителя;
	КонецЕсли;
	
	Возврат Новый Структура("Лево,Верх", ЛеваяГраница, ВерхняяГраница);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеДокументовСпискаВыбора(Документы)
	
	СписокДокументов = Новый СписокЗначений;
	ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Документы, "Номер,Дата,ХозОперация");
	ПредставлениеХозОпераций = Новый Соответствие();
	ПредставлениеХозОпераций.Вставить(
		ПредопределенноеЗначение("Справочник.ХозОперации.ПланРемонта"), НСтр("ru = 'План ремонта №'"));
	ПредставлениеХозОпераций.Вставить(
		ПредопределенноеЗначение("Справочник.ХозОперации.ЗаказНаряд"), НСтр("ru = 'Заказ-наряд №'"));
	ПредставлениеХозОпераций.Вставить(
		ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРемонт"), НСтр("ru = 'Заявка на ремонт №'"));
	
	СтрокаУстановитьКонтекст = НСтр("ru = '(установить контекст)'");
	СтрокаОткрыть = НСтр("ru = '(открыть в отдельном окне)'");
	
	Для Каждого Документ Из Документы Цикл
		
		Данные = ДанныеДокументов.Получить(Документ);
		
		Если ЗначениеЗаполнено(Данные) Тогда
			
			ЭлементыСтроки = Новый Массив;
			ЭлементыСтроки.Добавить(ПредставлениеХозОпераций.Получить(Данные.ХозОперация));
			ЭлементыСтроки.Добавить(ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Данные.Номер));
			ЭлементыСтроки.Добавить(" ");
			ЭлементыСтроки.Добавить(НСтр("ru = 'от'"));
			ЭлементыСтроки.Добавить(" ");
			ЭлементыСтроки.Добавить(Формат(Данные.Дата, "ДЛФ=DDT"));
			ЭлементыСтроки.Добавить(" ");
			ЭлементыСтроки.Добавить(СтрокаУстановитьКонтекст);
			
			СписокДокументов.Добавить(Новый Структура("Ссылка,ОткрыватьВОтдельномОкне", Документ, Ложь),
				СтрСоединить(ЭлементыСтроки, ""));
			
			ЭлементыСтроки[ЭлементыСтроки.ВГраница()] = СтрокаОткрыть;
			СписокДокументов.Добавить(Новый Структура("Ссылка,ОткрыватьВОтдельномОкне", Документ, Истина),
				СтрСоединить(ЭлементыСтроки, ""));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Процедура ПеренаправитьСообщенияПользователю()
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Поле = ?(
			ЗначениеЗаполнено(Сообщение.Поле),
			"ЗаписьНаРемонт." + ЗаписьНаРемонт.РежимРедактирования + "." + Сообщение.Поле,
			"");
		
		ОбщегоНазначения.СообщитьПользователю(Сообщение.Текст,, Поле);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПричиныОбращенияНаСервере(ТекущаяСтрока, ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ПричинаОбращения.Пустая() Тогда
		
		ТекущиеДанные.ПричинаОбращения = Справочники.ПричиныОбращений.Прочее;
		
		ДопПараметры = Новый Структура;
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			
			ДопПараметры.Вставить("Модель", ЗаписьНаРемонт.ЗаявкаНаРемонт.Модель);
			ДопПараметры.Вставить("Комплектация", ЗаписьНаРемонт.ЗаявкаНаРемонт.ВариантКомплектации);
			
		Иначе
			
			ДопПараметры.Вставить("Документ", ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			ТекущиеДанные,
			ПричиныОбращенийСлужебныйВызовСервера.ДанныеСтрокиПричиныОбращения(ТекущиеДанные.ПричинаОбращения, ДопПараметры),
			,
			"ПричинаОбращенияСодержание");
		
	КонецЕсли;
	
	ОбщегоНазначения
		.МенеджерОбъектаПоСсылке(ТекущийОбъект(ЭтотОбъект).Ссылка)
		.ПричиныОбращенияПричинаОбращенияПриИзменении(ТекущийОбъект(ЭтотОбъект), ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПричиныОбращения(ТекущиеДанные)
	
	ПричинаОбращенияИзменилась = Ложь;
	
	ПараметрыДействия = Новый Структура;
	ОбработатьИзменениеПричиныОбращенияНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ПараметрыДействия);
	
	ДругиеИсточники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные);
	ПродолжитьЗаполнение = Истина;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменилсяВидРемонта", Ложь) Тогда
		
		ПродолжитьЗаполнение = НЕ СвязанныеРаботыКлиент
			.НачатьЗаполнениеПоВидуРемонта(ТекущийОбъект(ЭтотОбъект), ЭтотОбъект, ПараметрыДействия, ДругиеИсточники);
		
	КонецЕсли;
	
	Если ПродолжитьЗаполнение Тогда
		
		ПараметрыОткрытия = Неопределено;
		Если РежимыРедактирования().ЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования Тогда
			ПараметрыОткрытия = Новый Структура("Автомобиль", ПолучитьАвтомобильЗаказНаряда());
		КонецЕсли;
		
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(
			ТекущийОбъект(ЭтотОбъект),
			ДругиеИсточники,
			ЭтотОбъект,
			ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимыРедактирования()
	
	Возврат Новый Структура("ЗаявкаНаРемонт,ЗаказНаряд", "ЗаявкаНаРемонт", "ЗаказНаряд");
	
КонецФункции

&НаСервере
Процедура УстановитьРежимРедактирования(Знач НовыйРежим = Неопределено, ОбновитьОбъект = Истина)
	
	Если НовыйРежим = Неопределено Тогда
		
		НовыйРежим = РежимыРедактирования().ЗаявкаНаРемонт;
		
	КонецЕсли;
	
	ЗаписьНаРемонт.РежимРедактирования = НовыйРежим;
	
	Если ОбновитьОбъект Тогда
		
		// Разблокируем документ.
		Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка) Тогда
			Попытка
				РазблокироватьДанныеДляРедактирования(ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка разблокировки объекта для редактирования'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.Ссылка) Тогда
			Попытка
				РазблокироватьДанныеДляРедактирования(ЗаписьНаРемонт.ЗаказНаряд.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка разблокировки объекта для редактирования'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		ПустаяЗаявкаНаРемонт();
		ПустойЗаказНаряд();
		ДатаНачалаПредставление = Дата(1, 1, 1);
		ДатаОкончанияПредставление = Дата(1, 1, 1);
		ПланированиеИнтервалы.Очистить();
		ПланированиеОбъекты.ПолучитьЭлементы().Очистить();
		СнятоПовторноеОбращениеВСервис = Ложь;
		
	КонецЕсли;
	
	ОбновитьДинамическиеРеквизиты();
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийОбъект(Форма)
	
	Возврат Форма.ЗаписьНаРемонт[Форма.ЗаписьНаРемонт.РежимРедактирования];
	
КонецФункции

&НаСервере
Процедура ПустаяЗаявкаНаРемонт()
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаРемонт) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы.ЗаявкаНаРемонт.СоздатьДокумент();
	
	Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.Нормочас) Тогда
		НовыйДокумент.Нормочас = ЗаписьНаРемонт.ЗаявкаНаРемонт.Нормочас;
	КонецЕсли;
	
	НовыйДокумент.Заполнить(Неопределено);
	НовыйДокумент.ХозОперация = Справочники.ХозОперации.ПланРемонта;
	
	ЗначениеВРеквизитФормы(НовыйДокумент, "ЗаписьНаРемонт.ЗаявкаНаРемонт");
	
КонецПроцедуры

&НаСервере
Процедура ПустойЗаказНаряд()
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаряд) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Документы.ЗаказНаряд.СоздатьДокумент(), "ЗаписьНаРемонт.ЗаказНаряд");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонтекстДокумента(Документ, Постобработка)
	
	ТипЗнчДокумент = ТипЗнч(Документ);
	
	Если ТипЗнчДокумент = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		ИЛИ ТипЗнчДокумент = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		
	Иначе
		
		ДокументОбъект = Документ;
		
	КонецЕсли;
	
	Если ТипЗнчДокумент = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		ИЛИ ТипЗнчДокумент = Тип("ДокументОбъект.ЗаявкаНаРемонт") Тогда
		
		// Разблокируем предыдущий документ от редактирования.
		Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка) Тогда
			Попытка
				РазблокироватьДанныеДляРедактирования(ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка разблокировки объекта для редактирования'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		УстановитьРежимРедактирования(РежимыРедактирования().ЗаявкаНаРемонт);
		ЗначениеВРеквизитФормы(ДокументОбъект, "ЗаписьНаРемонт.ЗаявкаНаРемонт");
		
	Иначе
		
		// Разблокируем предыдущий документ от редактирования.
		Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.Ссылка) Тогда
			Попытка
				РазблокироватьДанныеДляРедактирования(ЗаписьНаРемонт.ЗаказНаряд.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка разблокировки объекта для редактирования'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		УстановитьРежимРедактирования(РежимыРедактирования().ЗаказНаряд);
		ЗначениеВРеквизитФормы(ДокументОбъект, "ЗаписьНаРемонт.ЗаказНаряд");
		АвтомобильСРЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СводныйРемонтныйЗаказ, "Автомобиль");
		
		ЗаполнитьИнформациюОПакетахНаСервере();
		ИзмененыПакетыРабот = Ложь;
		
		РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(ЗаписьНаРемонт.ЗаказНаряд);
		Автосервис.ЗаполнитьСебестоимостьАвтомобилей(ЭтотОбъект, ЗаписьНаРемонт.ЗаказНаряд);
	КонецЕсли;
	
	КэшВидРемонта = ТекущийОбъект(ЭтотОбъект).ВидРемонта;
	КэшПлательщик = ТекущийОбъект(ЭтотОбъект).Контрагент;
	
	ДатаПланировщика = ?(ЗначениеЗаполнено(ДокументОбъект.ДатаНачала), ДокументОбъект.ДатаНачала, ДокументОбъект.Дата);
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		
		УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
			ТекущийОбъект(ЭтотОбъект).Заказчик,
			ЭтотОбъект,
			"Телефон,АдресЭлектроннойПочты",
			СтрШаблон("ПредставлениеТелефона%1,КонтактнаяИнформация%1", ЗаписьНаРемонт.РежимРедактирования)
		);
		
		Элементы.ПробегЗаявкаНаРемонтРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль,
			КлючевыеДатыПробегов(ЗаписьНаРемонт.ЗаявкаНаРемонт)
		);
		ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
		КэшЗаказчик = ТекущийОбъект(ЭтотОбъект).Заказчик;
		
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик,
			"МеткиЗаказчикаЗаявкиНаРемонт");
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент,
			"МеткиКонтрагентаЗаявкиНаРемонт");
		
	ИначеЕсли ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		
		ЗаказНарядЗаполнитьИдентификаторыПричинОбращенийАвторабот(ТекущийОбъект(ЭтотОбъект).Ссылка);
		Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер
			.ПредставлениеПредыдущихПробегов(АвтомобильСРЗ, КлючевыеДатыПробегов(ЗаписьНаРемонт.ЗаказНаряд));
		МатериалыЗаказчикаУстановитьВидимостьКолонок();
		ОбновитьПоказателиТоваров(ЭтотОбъект);
		
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик,
			"МеткиЗаказчикаЗаказНаряда");
		УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
			ЭтотОбъект,
			ЗаписьНаРемонт.ЗаказНаряд.Контрагент,
			"МеткиКонтрагентаЗаказНаряда");
		
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныйРеквизитСуммаСписания(ТекущийОбъект(ЭтотОбъект));
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(ТекущийОбъект(ЭтотОбъект).Товары);
	Автосервис.ОбновитьПредставлениеИсполнителей(ТекущийОбъект(ЭтотОбъект));
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(
		ЭтотОбъект,, ЗаписьНаРемонт.РежимРедактирования, ТекущийОбъект(ЭтотОбъект));
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ТекущийОбъект(ЭтотОбъект).ПричиныОбращения, ТекущийОбъект(ЭтотОбъект).Автоработы, ТекущийОбъект(ЭтотОбъект).Товары);
	ЗапрашиватьИсполнителей = ПраваИНастройкиПользователя.Значение("ПодборИсполнителейПриДобавленииАвтоработыВЗаказНаряд", ТекущийОбъект(ЭтотОбъект));
	КонтрольКоличестваДеталейВПроизводстве = ПраваИНастройкиПользователя.Значение("КонтрольКоличестваДеталейВПроизводстве", ТекущийОбъект(ЭтотОбъект));
	ОбновитьДинамическиеРеквизиты();
	СмещениеЧасовогоПояса = ОбщегоНазначенияАвтосалон
		.СмещениеВремениВПодразделенииКомпании(ДокументОбъект.ПодразделениеКомпании);
	ДатаНачалаПредставление = ОбщегоНазначенияАвтосалонКлиентСервер
		.ВЧасовойПоясПодразделения(ТекущийОбъект(ЭтотОбъект).ДатаНачала, СмещениеЧасовогоПояса);
	ДатаОкончанияПредставление = ОбщегоНазначенияАвтосалонКлиентСервер
		.ВЧасовойПоясПодразделения(ТекущийОбъект(ЭтотОбъект).ДатаОкончания, СмещениеЧасовогоПояса);
	ПланированиеРесурсов
		.ЗаполнитьИнтервалыПланирования(ПланированиеИнтервалы, ДокументОбъект.Ссылка, КонтрольПланированияПрошедшимВременем);
	ПланированиеРесурсовКлиентСервер
		.ЗаполнитьОбъектыПланирования(ТекущийОбъект(ЭтотОбъект), ПланированиеИнтервалы, ПланированиеОбъекты);
	Постобработка = ОбновитьКалендарьНаСервере();
	Постобработка.Вставить("ОбновитьДеревоОбъектовПланирования", Истина);
	Постобработка.Вставить("ПредставлениеДокумента", Строка(Документ));
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	ПризнакЗаписиПланирования = Ложь;
	Модифицированность = Ложь;
	
	// Проверим возможность штрихкодирования и получим штрихкод
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, ДокументОбъект.Ссылка);
	
	УправлениеДиалогомНаСервере();
	
	// Заблокируем данные для изменения другими пользователями.
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка,, ЭтотОбъект.УникальныйИдентификатор);
			УстановитьДоступностьЭлементов();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Документ редактируется другим пользователем. Редактирование запрещено.'"));
			УстановитьДоступностьЭлементов(Истина);
		КонецПопытки;
	Иначе
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
	ПредставлениеПодчиненныхТаблицАвторабот();
	НастроитьПараметрыВыбораЭлементовФормы();
	
	
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(ТекущийОбъект(ЭтотОбъект));
	
	// ПрослеживаемыеТовары
	ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
	// Конец ПрослеживаемыеТовары
	
КонецПроцедуры

&НаСервере
Функция ДоступнаЗаписьЗаявкиНаРемонт(ДокументОбъект)
	ЕстьОшибки = Ложь;
	
	ЕстьОшибки = НЕ ДокументОбъект.ПроверитьЗаполнение();
	
	Возврат НЕ ЕстьОшибки;
КонецФункции

&НаСервере
Функция ДоступнаЗаписьЗаказНаряда(ДокументОбъект)
	ЕстьОшибки = Ложь;
	
	ЕстьОшибки = НЕ ДокументОбъект.ПроверитьЗаполнение();
	
	Возврат НЕ ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаписатьЗаявкуНаРемонт(Проведение, ВыполнитьПослеЗаписи)
	
	ДокументОбъект = ДанныеФормыВЗначение(ЗаписьНаРемонт.ЗаявкаНаРемонт, Тип("ДокументОбъект.ЗаявкаНаРемонт"));
	
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, , ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	Если НЕ ДоступнаЗаписьЗаявкиНаРемонт(ДокументОбъект) Тогда
		
		Возврат Новый Структура("Ошибка", Истина);
		
	КонецЕсли;
	
	УстановленоПовторноеОбращениеВСервис = Автосервис.УстановленПризнакПовторногоОбращенияВСервис(ДокументОбъект);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияДокумента", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ИсточникЗаписи", "ЗаписьНаРемонт");
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		ДокументОбъект.Записать(?(Проведение, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		
		Если ПризнакЗаписиПланирования Тогда
			
			Если ПланированиеРесурсов.ЗаписатьПланирование(ПланированиеИнтервалы.Выгрузить(), ДокументОбъект, Ложь) Тогда
				
				ВызватьИсключение НСтр("ru = 'Ошибка записи планирования.'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи документа ""Заявка на ремонт""'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДокументОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		Возврат Новый Структура("Ошибка", Истина);
		
	КонецПопытки;
	
	// Выполним автоматическое штрихкодирование документов
	СтруктураДокумента = Новый Структура("Ссылка,ПодразделениеКомпании");
	ЗаполнитьЗначенияСвойств(СтруктураДокумента, ДокументОбъект);
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, СтруктураДокумента);
	
	
	Если УстановленоПовторноеОбращениеВСервис Тогда
		
		Автосервис.ОтправитьУведомление(
			ДокументОбъект,
			Перечисления.ВидыУведомлений.ПовторноеОбращениеВСервис);
		
	КонецЕсли;
	
	Постобработка = Неопределено;
	УстановитьКонтекстДокумента(ДокументОбъект, Постобработка);
	Постобработка.Вставить("Ссылка", ДокументОбъект.Ссылка);
	
	Если ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения.Количество() <> 0 Тогда
		
		ПерваяСтрокаПричиныОбращения = ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения[0];
		Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущаяСтрока = ПерваяСтрокаПричиныОбращения.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат Постобработка;
	
КонецФункции // ЗаписатьЗаявкуНаРемонт()

&НаСервере
Функция ЗаписатьЗаказНаряд(Проведение, ВыполнитьПослеЗаписи)
	
	ДокументОбъект = ДанныеФормыВЗначение(ЗаписьНаРемонт.ЗаказНаряд, Тип("ДокументОбъект.ЗаказНаряд"));
	
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка,, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	Если НЕ ДоступнаЗаписьЗаказНаряда(ДокументОбъект) Тогда
		Возврат Новый Структура("Ошибка", Истина);
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ИсточникЗаписи", "ЗаписьНаРемонт");
	ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияДокумента", Истина);
	Автоработы = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.Выгрузить(, "ИдентификаторРаботы,ИдентификаторПричиныОбращения");
	Автоработы.Колонки.ИдентификаторПричиныОбращения.Имя = "ПричинаОбращения";
	Автоработы.Колонки.ИдентификаторРаботы.Имя           = "Авторабота";
	ДокументОбъект.ДополнительныеСвойства.Вставить("СоставПричинОбращения", Автоработы);
	
	// Подготовим таблицу пакетов работ
	Если ИзмененыПакетыРабот Тогда
		
		// Удалим из рассмотрения автоработы по субподряду
		КопияАвторабот = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.Выгрузить();
		КопияАвторабот.Очистить();
		
		Для Каждого Строка Из ЗаписьНаРемонт.ЗаказНаряд.Автоработы Цикл
			
			Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(КопияАвторабот.Добавить(), Строка);
			
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПакетыРабот", КопияАвторабот);
		
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Записать(?(Проведение, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		
		Если ПризнакЗаписиПланирования Тогда
			
			Если ПланированиеРесурсов.ЗаписатьПланирование(ПланированиеИнтервалы.Выгрузить(), ДокументОбъект, Ложь) Тогда
				
				ВызватьИсключение НСтр("ru = 'Ошибка записи планирования.'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи документа ""Заказ-наряд""'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДокументОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		Возврат Новый Структура("Ошибка", Истина);
		
	КонецПопытки;
	
	// Выполним автоматическое штрихкодирование документов
	СтруктураДокумента = Новый Структура("Ссылка,ПодразделениеКомпании");
	ЗаполнитьЗначенияСвойств(СтруктураДокумента, ДокументОбъект);
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, СтруктураДокумента);
	Автосервис.ЗаполнитьСебестоимостьАвтомобилей(ЭтотОбъект, ЗаписьНаРемонт.ЗаказНаряд);
	
	Постобработка = Неопределено;
	УстановитьКонтекстДокумента(ДокументОбъект, Постобработка);
	Постобработка.Вставить("Ссылка", ДокументОбъект.Ссылка);
	
	Возврат Постобработка;
	
КонецФункции

&НаСервере
Процедура ЗаписатьТекущийОбъектНаСервере(Проведение, ВыполнитьПослеЗаписи=Неопределено)
	
	Если ВыполнитьПослеЗаписи = Неопределено Тогда
		
		ВыполнитьПослеЗаписи = Новый Структура;
		
	КонецЕсли;
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		
		ВыполнитьПослеЗаписи = ЗаписатьЗаявкуНаРемонт(Проведение, ВыполнитьПослеЗаписи);
		
	ИначеЕсли ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		
		ВыполнитьПослеЗаписи = ЗаписатьЗаказНаряд(Проведение, ВыполнитьПослеЗаписи);
		
	КонецЕсли;
	
	Если Не ПолучитьЗначениеПараметраСтруктуры(ВыполнитьПослеЗаписи, "Ошибка", Ложь) Тогда
		
		ПризнакЗаписиПланирования = Ложь;
		Модифицированность = Ложь;
		
	КонецЕсли;
	
	ПеренаправитьСообщенияПользователю();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеРеквизиты()
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", ТекущийОбъект(ЭтотОбъект));
	
	ДоступныСкидки = (СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
	ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
	ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов);
	
	Элементы.МаркетинговаяПрограммаЗаявкаНаРемонт.ТолькоПросмотр = НЕ ДоступныСкидки;
	
	Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].Доступность =
	ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", ТекущийОбъект(ЭтотОбъект));
	
	Элементы["Товары" + ЗаписьНаРемонт.РежимРедактирования].Доступность =
	ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда", ТекущийОбъект(ЭтотОбъект));
	
	// Видимость колонки "Характеристика"
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,,, ТекущийОбъект(ЭтотОбъект), "ТоварыХарактеристикаНоменклатуры"+ЗаписьНаРемонт.РежимРедактирования);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(ТекущиеДанные, ПараметрыДействия)
	
	ВидимостьХарактеристики = Ложь;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		ВидимостьХарактеристики = ВидимостьХарактеристики ИЛИ НЕ ТекущиеДанные.ВладелецХарактеристики = Неопределено;
	КонецЕсли;
	
	НовыеСтроки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеСтроки");
	Если ТипЗнч(НовыеСтроки) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицыТоваров Из НовыеСтроки Цикл
			ВидимостьХарактеристики = (ВидимостьХарактеристики
				ИЛИ НЕ ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары[СтрокаТаблицыТоваров].ВладелецХарактеристики = Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	// Видимость поля Характеристика можно изменять только в сторону ИСТИНА
	Если ВидимостьХарактеристики Тогда
		Элементы["ТоварыХарактеристикаНоменклатуры"+ЗаписьНаРемонт.РежимРедактирования].Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокКодАртикулПроизводитель()
	
	ОтображатьАртикул = ПолучитьФункциональнуюОпцию("ИспользоватьАртикул");
	
	АртикулДоступен = Новый Массив;
	АртикулДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.Артикул);
	АртикулДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель);
	АртикулДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	АртикулДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул);
	
	КодДоступен = Новый Массив;
	КодДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.Код);
	КодДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул);
	КодДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель);
	КодДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	
	ПроизводительДоступен = Новый Массив;
	ПроизводительДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель);
	ПроизводительДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель);
	ПроизводительДоступен.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	
	Элементы.ТоварыКодЗаявкаНаРемонт.Видимость           = (КодДоступен.Найти(ОтображатьАртикул) <> Неопределено);
	Элементы.АвтоработыКодЗаявкаНаРемонт.Видимость       = Элементы.ТоварыКодЗаявкаНаРемонт.Видимость;
	
	Элементы.ТоварыАртикулЗаявкаНаРемонт.Видимость       = (АртикулДоступен.Найти(ОтображатьАртикул) <> Неопределено);
	Элементы.АвтоработыАртикулЗаявкаНаРемонт.Видимость   = Элементы.ТоварыАртикулЗаявкаНаРемонт.Видимость;
	
	Элементы.ТоварыПроизводительЗаявкаНаРемонт.Видимость = (ПроизводительДоступен.Найти(ОтображатьАртикул) <> Неопределено);
	
	Элементы.ТоварыКодЗаказНаряд.Видимость           = (КодДоступен.Найти(ОтображатьАртикул) <> Неопределено);
	Элементы.АвтоработыКодЗаказНаряд.Видимость       = Элементы.ТоварыКодЗаказНаряд.Видимость;
	
	Элементы.ТоварыАртикулЗаказНаряд.Видимость       = (АртикулДоступен.Найти(ОтображатьАртикул) <> Неопределено);
	Элементы.АвтоработыАртикулЗаказНаряд.Видимость   = Элементы.ТоварыАртикулЗаказНаряд.Видимость;
	
	Элементы.МатериалыЗаказчикаКодЗаказНаряд.Видимость       = (КодДоступен.Найти(ОтображатьАртикул) <> Неопределено);
	Элементы.МатериалыЗаказчикаАртикулЗаказНаряд.Видимость   = (АртикулДоступен.Найти(ОтображатьАртикул) <> Неопределено);
	
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизиты()
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта"      , ТекущийОбъект(ЭтотОбъект).Ссылка.Метаданные().ПолноеИмя());
	СлужебныеРеквизиты.Вставить("ИзменениеЗапрещено"    , Ложь);
	СлужебныеРеквизиты.Вставить("ИмяДополнительнойФормы",
		УправлениеДиалогомВызовСервера.ПолучитьИмяДополнительнойФормыОбъекта(ТекущийОбъект(ЭтотОбъект).Ссылка));
	
	// Проверим возможность штрихкодирования документа
	Если ШтрихкодированиеВызовСервера.ИспользоватьШтрихкодирование(ТекущийОбъект(ЭтотОбъект).Ссылка) Тогда
		СлужебныеРеквизиты.Вставить("Штрихкод", ШтрихкодированиеВызовСервера.ПолучитьШтрихКодОбъекта(ТекущийОбъект(ЭтотОбъект).Ссылка));
	КонецЕсли;
	
	// Признак разрешения пользователю редактировать реквизиты объекта
	СлужебныеРеквизиты.Вставить("РазрешитьРедактированиеЦенИСумм", 
		ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", ТекущийОбъект(ЭтотОбъект))
	);
	
	// Производим создание дополнительных реквизитов формы
	ПереченьНовыхРеквизитов = Новый Массив();
	Для каждого Реквизит Из СлужебныеРеквизиты Цикл
		Если НЕ ЕстьРеквизит(ЭтотОбъект, Реквизит.Ключ) Тогда
			ТипыРеквизита = Новый Массив();
			ТипыРеквизита.Добавить(ТипЗнч(Реквизит.Значение));
			
			ПереченьНовыхРеквизитов.Добавить(Новый РеквизитФормы(Реквизит.Ключ, Новый ОписаниеТипов(ТипыРеквизита)));
		КонецЕсли;
	КонецЦикла;
	
	// обновляем реквизиты по необходимости
	Если ПереченьНовыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(ПереченьНовыхРеквизитов);
	КонецЕсли;
	
	// Производим заполнение новых реквизит данными
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СлужебныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандныеПанелиФормы()
	// Заявка на ремонт
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПричиныОбращенияЗаявкаНаРемонт");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "АвтоработыЗаявкаНаРемонт");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ТоварыЗаявкаНаРемонт");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ВспомогательныеАвтоработыЗаявкаНаРемонт");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПланированиеИнтервалы");
	
	// ЗаказНаряд
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПричиныОбращенияЗаказНаряд");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "АвтоработыЗаказНаряд");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ТоварыЗаказНаряд");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ВспомогательныеАвтоработыЗаказНаряд"); 
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчикаЗаказНаряд");
	
КонецПроцедуры

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Установим заголовок формы
	УправлениеДиалогомКлиентСервер.ОбработкаПолученияПредставления(Неопределено, ТекущийОбъект(ЭтотОбъект), ЭтотОбъект.Заголовок);
	
	// Расставим признаки обязательности заполнения реквизитов формы
	УправлениеДиалогомСервер.
	РасставитьАвтоотметкиНезаполненного(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект), , , ЗаписьНаРемонт.РежимРедактирования);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
	УстановитьЗаголовокНадписиСуммаДокумента();
	
	// Обновляем заголовок индикатора состояния договора с контрагентом
	ДополнительныеПараметры = Новый Структура("ЭлементФормы",
		"ДоговорВзаиморасчетов" + ЗаписьНаРемонт.РежимРедактирования);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиВзаиморасчеты(ЭтотОбъект, ДополнительныеПараметры,
		?(ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт,
			ЗаписьНаРемонт.ЗаявкаНаРемонт, ЗаписьНаРемонт.ЗаказНаряд));
		
	// Обновляем текст подвала в колонке Номенклатура
	ЭлементКолонкиНоменклатура = Элементы.Найти("ТоварыНоменклатура" + ЗаписьНаРемонт.РежимРедактирования);
	Если ЭлементКолонкиНоменклатура <> Неопределено Тогда
		УправлениеДиалогомДокументаСервер.
			УстановитьНадписьПодвалаКолонкиНоменклатура(ЭлементКолонкиНоменклатура, ТекущийОбъект(ЭтотОбъект));
	КонецЕсли;
	
	// Обновляем текст подвала в колонке Авторабота
	ЭлементКолонкиАвторабота = Элементы.Найти("АвтоработыАвторабота" + ЗаписьНаРемонт.РежимРедактирования);
	Если ЭлементКолонкиАвторабота <> Неопределено Тогда
		УправлениеДиалогомАльфаАвтоСервер.
			УстановитьНадписьПодавалаКолонкиРабота(ЭлементКолонкиАвторабота, ТекущийОбъект(ЭтотОбъект));
	КонецЕсли;
	
	// заблокируем реквизиты взаиморасчетов
	ЕстьВзаиморасчеты = Не Автосервис.ЭтоБесплатный(ТекущийОбъект(ЭтотОбъект).ВидРемонта);
	
	РеквизитыВзаиморасчетов = Новый Массив;
	РеквизитыВзаиморасчетов.Добавить("Контрагент");
	РеквизитыВзаиморасчетов.Добавить("ДоговорВзаиморасчетов");
	РеквизитыВзаиморасчетов.Добавить("МаркетинговаяПрограмма");
	
	Для Каждого Реквизит Из РеквизитыВзаиморасчетов Цикл
		Элементы[Реквизит + ЗаписьНаРемонт.РежимРедактирования].Доступность = ЕстьВзаиморасчеты;
	КонецЦикла;
	
	РедактированиеНормВремениИНормочасов = ПраваИНастройкиПользователя.Значение("РедактированиеНормВремениИНормоЧасов",
		ТекущийОбъект(ЭтотОбъект));
	
	РеквизитыНормВремени = Новый Массив;
	РеквизитыНормВремени.Добавить("АвтоработыНормочас");
	РеквизитыНормВремени.Добавить("АвтоработыКоэффициент");
	
	Для Каждого Реквизит Из РеквизитыНормВремени Цикл
		Элементы[Реквизит + ЗаписьНаРемонт.РежимРедактирования].Доступность = РедактированиеНормВремениИНормочасов;
	КонецЦикла;
	
	Элементы.ПричиныОбращенияЗаявкаНаРемонт.Видимость  = ИспользоватьПричиныОбращений;
	Элементы.ПричиныОбращенияЗаказНаряд.Видимость	   = ИспользоватьПричиныОбращений;
	Элементы.ФормаИспользоватьПричиныОбращений.Пометка = ИспользоватьПричиныОбращений;
	
	// обновим состояние маркетинговой программы
	АвтомобилиСервер.ОбновитьСостояниеМаркетинговойПрограммы(
		ТекущийОбъект(ЭтотОбъект),
		Элементы["МаркетинговаяПрограмма" + ЗаписьНаРемонт.РежимРедактирования],
		Элементы["СостояниеМаркетинговойПрограммы" + ЗаписьНаРемонт.РежимРедактирования],
		?(ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт,
			ТекущийОбъект(ЭтотОбъект).Модель, ТекущийОбъект(ЭтотОбъект).СводныйРемонтныйЗаказ.Автомобиль.Модель)
	);
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		УправлениеДиалогомНаСервереЗаявкаНаРемонт();
	ИначеЕсли ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		УправлениеДиалогомНаСервереЗаказНаряд();
	КонецЕсли;
	
	СлужебныеРеквизиты = Новый Структура;
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта", ТекущийОбъект(ЭтотОбъект).Ссылка.Метаданные().ПолноеИмя());
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СлужебныеРеквизиты); 
	
	Если РежимОтображенияРесурсовНаГрафике = "Общий" Тогда
		Элементы.ГруппаПотенциал.Заголовок = НСтр("ru = 'Потенциал ресурсов'");
		Элементы.ПорядокРесурсовВОбщемРежиме.Видимость = Истина;
	Иначе
		Элементы.ПорядокРесурсовВОбщемРежиме.Видимость = Ложь;
	КонецЕсли;
	
	Если РежимОтображенияРесурсовНаГрафике = "Исполнители" Тогда 
		Элементы.ГруппаПотенциал.Заголовок = НСтр("ru = 'Потенциал исполнителей'");
	КонецЕсли;
	
	Если РежимОтображенияРесурсовНаГрафике = "РабочиеМеста" Тогда
		Элементы.ГруппаПотенциал.Заголовок = НСтр("ru = 'Потенциал рабочих мест'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОписаниеПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования,
		"Доступность",
		ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.Количество() <= 1
	);
	
	НастроитьДоступностьСкидок();
	
	Элементы.ПодразделениеОтбора.Доступность = ФормироватьСписокРесурсовПоПодразделению;
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура УстановитьДоступностьЭлементов(БлокироватьДокумент = Ложь)
	
	НеРедактированиеНоменклатуры = НЕ РедактированиеНоменклатуры;
	НеРедактированиеРабот        = НЕ РедактированиеРабот;
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		РедактированиеЗакрытыхЗаказНарядов = ПраваИНастройкиПользователя.Значение("РедактированиеЗакрытыхЗаказНарядов");
		Закрыт = (ТекущийОбъект(ЭтотОбъект).Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт)
		И НЕ РедактированиеЗакрытыхЗаказНарядов;
		Выполнен = (ТекущийОбъект(ЭтотОбъект).Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен)
		И НЕ РедактированиеЗакрытыхЗаказНарядов;
		
		БлокировкаРедактированияЭлемента = Выполнен ИЛИ Закрыт ИЛИ БлокироватьДокумент;
		
		// Составим список элементов для блокировки
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("ВидРемонтаЗаказНаряд",                БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ЦехЗаказНаряд",                       БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("МастерЗаказНаряд",                    БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ДиспетчерЗаказНаряд",                 БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("СводныйРемонтныйЗаказЗаказНаряд",     БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ДатаНачалаЗаказНаряд",                БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ВремяНачалаЗаказНаряд",               БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ДатаОкончанияЗаказНаряд",             БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ВремяОкончанияЗаказНаряд",            БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("КонтрагентЗаказНаряд",                БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ДоговорВзаиморасчетовЗаказНаряд",     БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ОписаниеПричиныОбращенияЗаказНаряд",  БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("СервиснаяКампанияЗаказНаряд",         БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("МаркетинговаяПрограммаЗаказНаряд",    БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("КомментарийЗаказНаряд",               БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("СостояниеЗаказНаряд",                 Закрыт ИЛИ БлокироватьДокумент);
		ПоляБлокировки.Вставить("Пробег",                              Закрыт ИЛИ БлокироватьДокумент);
		ПоляБлокировки.Вставить("ПричиныОбращенияЗаказНаряд",          БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("АвтоработыЗаказНаряд",                БлокировкаРедактированияЭлемента ИЛИ НеРедактированиеРабот);
		ПоляБлокировки.Вставить("ТоварыЗаказНаряд",                    БлокировкаРедактированияЭлемента ИЛИ НеРедактированиеНоменклатуры);
		ПоляБлокировки.Вставить("ВспомогательныеАвтоработыЗаказНаряд", БлокировкаРедактированияЭлемента ИЛИ НеРедактированиеРабот);
		ПоляБлокировки.Вставить("МатериалыЗаказчикаЗаказНаряд",        БлокировкаРедактированияЭлемента ИЛИ НеРедактированиеНоменклатуры);
		ПоляБлокировки.Вставить("ЗачетАвансов", (Закрыт ИЛИ БлокироватьДокумент)
			И ТекущийОбъект(ЭтотОбъект).СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу);
		ПоляБлокировки.Вставить("СпособЗачетаАвансов",                 Закрыт ИЛИ БлокироватьДокумент);
		ПоляБлокировки.Вставить("ЗаказНарядСкладКомпании",             БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("АвтомобилиЗаказНаряд",                БлокировкаРедактированияЭлемента);
		
		Для Каждого Поле Из ПоляБлокировки Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Поле.Ключ, "ТолькоПросмотр", Поле.Значение);
			
		КонецЦикла;
		
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("МатериалыЗаказчикаПодборМатериалыЗаказчика", БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("АвтоработыПодменюЗаполнениеЗаказНаряд",      БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("АвтоработыПодменюПодбораЗаказНаряд",         БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ТоварыПодменюЗаполнение",                    БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("КалендарьДневнойКонтекстноеМеню",            БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ТоварыГруппаСписание",                       БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ТоварыПодменюПодбора",                       БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("АвтоматическоеПланирование",                 БлокировкаРедактированияЭлемента);
		ПоляБлокировки.Вставить("ЗачетАвансовПодборАвансов", (Закрыт ИЛИ БлокироватьДокумент)
			И ТекущийОбъект(ЭтотОбъект).СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу);
		
		Для Каждого Поле Из ПоляБлокировки Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Поле.Ключ, "Доступность", НЕ Поле.Значение);
			
		КонецЦикла;
		
		Если НЕ Выполнен И НЕ Закрыт И НЕ БлокироватьДокумент Тогда
			
			УстановитьДоступностьРедактированияАвторов();
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.
			УстановитьСвойствоЭлементаФормы(Элементы, "ПричиныОбращенияПричинаОбращенияСодержаниеЗаказНаряд",
				"ГиперссылкаЯчейки", БлокировкаРедактированияЭлемента);
		
	Иначе
		
		// Составим список элементов для блокировки
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("ЗаказчикЗаявкаНаРемонт",                  БлокироватьДокумент);
		ПоляБлокировки.Вставить("ОбращениеККлиентуЗаявкаНаРемонт",         БлокироватьДокумент);
		ПоляБлокировки.Вставить("ПредставлениеТелефонаЗаявкаНаРемонт",     БлокироватьДокумент);
		ПоляБлокировки.Вставить("КонтактнаяИнформацияЗаявкаНаРемонт",      БлокироватьДокумент);
		ПоляБлокировки.Вставить("КонтрагентЗаявкаНаРемонт",                БлокироватьДокумент);
		ПоляБлокировки.Вставить("ДоговорВзаиморасчетовЗаявкаНаРемонт",     БлокироватьДокумент);
		ПоляБлокировки.Вставить("АвтомобильЗаявкаНаРемонт",                БлокироватьДокумент);
		ПоляБлокировки.Вставить("МодельЗаявкаНаРемонт",                    БлокироватьДокумент);
		ПоляБлокировки.Вставить("ВариантКомплектацииЗаявкаНаРемонт",       БлокироватьДокумент);
		ПоляБлокировки.Вставить("ГосНомерЗаявкаНаРемонт",                  БлокироватьДокумент);
		ПоляБлокировки.Вставить("VINЗаявкаНаРемонт",                       БлокироватьДокумент);
		ПоляБлокировки.Вставить("ПробегЗаявкаНаРемонт",                    БлокироватьДокумент);
		ПоляБлокировки.Вставить("ГодВыпускаЗаявкаНаРемонт",                БлокироватьДокумент);
		ПоляБлокировки.Вставить("МаркетинговаяПрограммаЗаявкаНаРемонт",    БлокироватьДокумент);
		ПоляБлокировки.Вставить("СервиснаяКампанияЗаявкаНаРемонт",         БлокироватьДокумент);
		ПоляБлокировки.Вставить("ВидРемонтаЗаявкаНаРемонт",                БлокироватьДокумент);
		ПоляБлокировки.Вставить("ЦехЗаявкаНаРемонт",                       БлокироватьДокумент);
		ПоляБлокировки.Вставить("МастерЗаявкаНаРемонт",                    БлокироватьДокумент);
		ПоляБлокировки.Вставить("ДатаНачалаЗаявкаНаРемонт",                БлокироватьДокумент);
		ПоляБлокировки.Вставить("ДатаОкончанияЗаявкаНаРемонт",             БлокироватьДокумент);
		ПоляБлокировки.Вставить("ВремяНачалаЗаявкаНаРемонт",               БлокироватьДокумент);
		ПоляБлокировки.Вставить("ВремяОкончанияЗаявкаНаРемонт",            БлокироватьДокумент);
		ПоляБлокировки.Вставить("ОписаниеПричиныОбращенияЗаявкаНаРемонт",  БлокироватьДокумент);
		ПоляБлокировки.Вставить("ПричиныОбращенияЗаявкаНаРемонт",          БлокироватьДокумент);
		ПоляБлокировки.Вставить("АвтоработыЗаявкаНаРемонт",                БлокироватьДокумент ИЛИ НеРедактированиеРабот);
		ПоляБлокировки.Вставить("ТоварыЗаявкаНаРемонт",                    БлокироватьДокумент ИЛИ НеРедактированиеНоменклатуры);
		ПоляБлокировки.Вставить("ВспомогательныеАвтоработыЗаявкаНаРемонт", БлокироватьДокумент ИЛИ НеРедактированиеРабот);
		
		Для Каждого Поле Из ПоляБлокировки Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Поле.Ключ, "ТолькоПросмотр", Поле.Значение);
			
		КонецЦикла;
		
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("АвтоработыПодменюЗаполнениеЗаявкаНаРемонт", БлокироватьДокумент);
		ПоляБлокировки.Вставить("АвтоработыПодменюПодбораЗаявкаНаРемонт",    БлокироватьДокумент);
		ПоляБлокировки.Вставить("ТоварыПодменюЗаполнениеЗаявкаНаРемонт",     БлокироватьДокумент);
		ПоляБлокировки.Вставить("КалендарьДневнойКонтекстноеМеню",           БлокироватьДокумент);
		ПоляБлокировки.Вставить("ТоварыПодменюПодбораЗаявкаНаРемонт",        БлокироватьДокумент);
		ПоляБлокировки.Вставить("АвтоматическоеПланирование",                БлокироватьДокумент);
		
		Для Каждого Поле Из ПоляБлокировки Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Поле.Ключ, "Доступность", НЕ Поле.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРедактированияАвторов()
	
	НеДоступноРедактированиеАвторов = НЕ ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаряд);
	ПоляАвторов = Новый Массив;
	ПоляАвторов.Добавить("АвтоработыАвторСтроки");
	ПоляАвторов.Добавить("АвтоработыАвторИзмененияСтроки");
	ПоляАвторов.Добавить("ТоварыАвторСтроки");
	ПоляАвторов.Добавить("ТоварыАвторИзмененияСтроки");
	ПоляАвторов.Добавить("МатериалыЗаказчикаАвторСтроки");
	ПоляАвторов.Добавить("МатериалыЗаказчикаАвторИзмененияСтроки");
	
	Для Каждого Поле Из ПоляАвторов Цикл
		
		ОбщегоНазначенияКлиентСервер
			.УстановитьСвойствоЭлементаФормы(Элементы, Поле, "ТолькоПросмотр", НеДоступноРедактированиеАвторов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервереЗаявкаНаРемонт()
	
	// Обновляем заголовок индикатора состояния договора с контрагентом
	ДополнительныеПараметры = Новый Структура("ЭлементФормы", "ДоговорВзаиморасчетовЗаявкаНаРемонт");
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиВзаиморасчеты(ЭтотОбъект, ДополнительныеПараметры,
		ЗаписьНаРемонт.ЗаявкаНаРемонт);
		
	Элементы.ОбращениеККлиентуЗаявкаНаРемонт.Доступность = ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик.Пустая();
	АвтомобилиСервер.УстановитьФорматПредставленияГодаВыпускаАвтомобиля(ЭтотОбъект, ЗаписьНаРемонт.РежимРедактирования);

	ДоступностьПолейАвтомобиля = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль.Пустая();
	Элементы.МодельЗаявкаНаРемонт.Доступность              = ДоступностьПолейАвтомобиля;
	Элементы.ВариантКомплектацииЗаявкаНаРемонт.Доступность = ДоступностьПолейАвтомобиля;
	Элементы.VINЗаявкаНаРемонт.Доступность                 = ДоступностьПолейАвтомобиля;
	Элементы.ГодВыпускаЗаявкаНаРемонт.Доступность          = ДоступностьПолейАвтомобиля;
	Элементы.СервиснаяКампанияЗаявкаНаРемонт.Доступность   = НЕ ДоступностьПолейАвтомобиля;
	
	Элементы.ЗаявкаНаРемонт.Видимость = Истина;
	Элементы.КалькуляцияЗаявкаНаРемонт.Видимость = Истина;
	Элементы.СтраницаЗаявкаНаРемонтВспомогательныеАвтоработы.Видимость = Истина;
	
	Элементы.ЗаказНаряд.Видимость = Ложь;
	Элементы.КалькуляцияЗаказНаряд.Видимость = Ложь;

	Элементы.СтраницаВспомогательныеАвтоработыМатериалыЗаказчикаЗаказНаряд.Видимость = Ложь;
	Элементы.СтраницаЗачетАвансов.Видимость = Ложь;
	
	Элементы.НадписьСогласованнаяСумма.Видимость = Ложь;
	
	Элементы.НовыйСводныйРемонтныйЗаказ.Видимость = Истина;
	Элементы.СоздатьЗаказНаряд.Видимость = Истина;
	Элементы.КомментарийЗаявкаНаРемонт.Видимость = Истина;
	Элементы.КомментарийЗаказНаряд.Видимость = Ложь;
	
	// Проверим вывод возможность вывода информации по бонусным баллам
	СформироватьПредставлениеБонусныхБаллахЗаявкаНаРемонт();
	Элементы.КонтрагентЗаявкаНаРемонт.ОтображениеПодсказки = ?(
		ЗначениеЗаполнено(ЭтотОбъект.ЗаписьНаРемонт.ЗаявкаНаРемонт.Карточка.БонуснаяПрограмма),
		ОтображениеПодсказки.ОтображатьСправа,
		ОтображениеПодсказки.Нет
	);	
		
	Элементы.ГруппаПовторноеОбращение.ТолькоПросмотр =
		НЕ ПраваИНастройкиПользователя.Значение("ИзменениеПризнаковПовторногоОбращенияВСервис")
		ИЛИ НЕ ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка);
		
	Если НЕ ЗначениеЗаполнено(ПодразделениеОтбора) Тогда
		ПодразделениеОтбора = ЗаписьНаРемонт.ЗаявкаНаРемонт.ПодразделениеКомпании;		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтомобилиЗаказНаряд",
		"Видимость",
		Ложь
	);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервереЗаказНаряд()
	
	Элементы.СервиснаяКампанияЗаказНаряд.Доступность   = НЕ АвтомобильСРЗ.Пустая();
	Элементы.ЗаявкаНаРемонт.Видимость = Ложь;
	Элементы.КалькуляцияЗаявкаНаРемонт.Видимость = Ложь;
	Элементы.СтраницаЗаявкаНаРемонтВспомогательныеАвтоработы.Видимость = Ложь;
	Элементы.ЗаказНаряд.Видимость = Истина;
	Элементы.КалькуляцияЗаказНаряд.Видимость = Истина;
	Элементы.СтраницаВспомогательныеАвтоработыМатериалыЗаказчикаЗаказНаряд.Видимость = Истина;
	Элементы.НадписьСогласованнаяСумма.Видимость = Истина;
	Элементы.НовыйСводныйРемонтныйЗаказ.Видимость = Ложь;
	Элементы.СоздатьЗаказНаряд.Видимость = Ложь;
	Элементы.КомментарийЗаявкаНаРемонт.Видимость = Ложь;
	Элементы.КомментарийЗаказНаряд.Видимость = Истина;
	Элементы.СтраницаЗачетАвансов.Видимость =
		ТекущийОбъект(ЭтотОбъект).ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный;
	
	// Проверим вывод возможность вывода информации по бонусным баллам
	СформироватьПредставлениеБонусныхБаллах();
	БонуснаяПрограмма = ОбщегоНазначения
		.ЗначениеРеквизитаОбъекта(ТекущийОбъект(ЭтотОбъект).Карточка, "БонуснаяПрограмма");
	Элементы.БонусныеБаллыПредставление.Видимость = ЗначениеЗаполнено(БонуснаяПрограмма);
	
	Элементы.КартинкаСводногоРемонтногоЗаказа.Видимость = ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.Ссылка)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ, "ПовторноеОбращение");
	
	ДоступностьНаСебестоимость = (ТекущийОбъект(ЭтотОбъект).ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный)
		И (НЕ Автосервис.ЭтоКомплектацияСборкаАвтомобиля(ТекущийОбъект(ЭтотОбъект).ВидРемонта));
	
	Элементы.ТоварыКнопкаНаСебестоимость.Доступность = ДоступностьНаСебестоимость;
	Элементы.ТоварыКнопкаНаСебестоимость.Пометка = ТекущийОбъект(ЭтотОбъект).НаСебестоимость;
	Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Пометка = ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости И ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимостиВключатьНДС;
	Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиБезНДС.Пометка = ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимости И НЕ ТекущийОбъект(ЭтотОбъект).СписаниеТоваровПоСебестоимостиВключатьНДС;
	
	// Получим значение права объекта
	Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Доступность = ПраваИНастройкиПользователя.Значение("СписаниеТоваровПоСебестоимости", ТекущийОбъект(ЭтотОбъект));
	Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиБезНДС.Доступность = Элементы.ТоварыКнопкаСписаниеТоваровПоСебестоимостиСНДС.Доступность;
	
	Элементы.ТоварыКнопкаЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду.Пометка =
		ТекущийОбъект(ЭтотОбъект).ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
		
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОтбора) Тогда
		ОтборПоПодразделению = ЗаписьНаРемонт.ЗаказНаряд.ПодразделениеКомпании;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗачетАвансов",
		"Доступность",
		ТекущийОбъект(ЭтотОбъект).СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу
	);
	
	ЭтоСборкаАвтомобиля = ТекущийОбъект(ЭтотОбъект).ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтомобилиЗаказНаряд",
		"Видимость",
		ЭтоСборкаАвтомобиля
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СкладКомпании",
		"Видимость",
		ЭтоСборкаАвтомобиля
	);
	Закрыт = ТекущийОбъект(ЭтотОбъект).Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтомобилиСуммаСписания",
		"Видимость",
		Закрыт
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтомобилиСуммаСписанияБезНДС",
		"Видимость",
		Закрыт
	);
	
КонецПроцедуры

// Производит настройку параметров выбора элементов управления диалога в зависимости от значений реквизитов объекта.
//
&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Настроим параметры заявки на ремонт
	ХозОперация = ЗаписьНаРемонт.ЗаявкаНаРемонт.ХозОперация;
	
	// Обновим параметры выбора договора для "Заявки на ремонт"
	ВидыДоговоров           = Справочники.ХозОперации.ПолучитьВидыДоговоров(ХозОперация);
	
	Если Не Элементы.Найти("ДоговорВзаиморасчетовЗаявкаНаРемонт")=Неопределено Тогда
		ПараметрыВыбораДоговора = Элементы.ДоговорВзаиморасчетовЗаявкаНаРемонт.ПараметрыВыбора;
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(ПараметрыВыбораДоговора, "Отбор.ВидДоговора", ВидыДоговоров);
	КонецЕсли;
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(ХозОперация);
	
	Если Не Элементы.Найти("ТоварыНоменклатураЗаявкаНаРемонт")=Неопределено Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ТоварыНоменклатураЗаявкаНаРемонт.ПараметрыВыбора,
			"Отбор.ВидНоменклатуры",
			ВидыНоменклатуры);
		
	КонецЕсли;

	// Настроим параметры заказ-наряда
	ХозОперация = ЗаписьНаРемонт.ЗаказНаряд.ХозОперация;
	ВидыДоговоров = Справочники.ХозОперации.ПолучитьВидыДоговоров(ХозОперация);
	
	Если Не Элементы.Найти("ДоговорВзаиморасчетовЗаказНаряд")=Неопределено Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ДоговорВзаиморасчетовЗаказНаряд.ПараметрыВыбора,
			"Отбор.ВидДоговора",
			ВидыДоговоров);
		
	КонецЕсли;
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(ХозОперация);
	
	Если Не Элементы.Найти("ТоварыНоменклатураЗаказНаряд")=Неопределено Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ТоварыНоменклатураЗаказНаряд.ПараметрыВыбора,
			"Отбор.ВидНоменклатуры",
			ВидыНоменклатуры);
		
	КонецЕсли;
	
	Если Не Элементы.Найти("МатериалыЗаказчикаНоменклатураЗаказНаряд")=Неопределено Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.МатериалыЗаказчикаНоменклатураЗаказНаряд.ПараметрыВыбора,
			"Отбор.ВидНоменклатуры",
			ВидыНоменклатуры);
		
	КонецЕсли;
	НастройкаПараметровВыбораСервиснойКампании();
	
	УправлениеДиалогомДокументаСервер.РасставитьСвязиПараметровВыбораДокументовАванса(
		ЭтотОбъект,
		ЗаписьНаРемонт.ЗаказНаряд,
		"ЗаписьНаРемонт.ЗаказНаряд");
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура НастройкаПараметровВыбораСервиснойКампании()
	
	// Настроим отбор сервисных кампаний
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
		Автомобиль = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль;
		Дата       = ЗаписьНаРемонт.ЗаявкаНаРемонт.Дата;
		Ссылка     = ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка;
	Иначе
		Автомобиль = ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль;
		Дата       = ЗаписьНаРемонт.ЗаказНаряд.Дата;
		Ссылка     = ЗаписьНаРемонт.ЗаказНаряд.Ссылка;
	КонецЕсли;
	
	СервисныеКампании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(Автомобиль, Дата, Истина, Ссылка)
		.ВыгрузитьКолонку("СервиснаяКампания");
	
	АвтомобилиСервер.ОбновитьСостояниеСервиснойКомпании(
		СервисныеКампании.Количество() > 0,
		Элементы["СервиснаяКампания" + ЗаписьНаРемонт.РежимРедактирования],
		Элементы["СостояниеСервиснойКомпании" + ЗаписьНаРемонт.РежимРедактирования]
	);
	
	Если Не Элементы.Найти("СервиснаяКампания" + ЗаписьНаРемонт.РежимРедактирования) = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(СервисныеКампании) Тогда
			СервисныеКампании.Добавить(Справочники.СервисныеКампании.ПустаяСсылка());
		КонецЕсли;
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы["СервиснаяКампания" + ЗаписьНаРемонт.РежимРедактирования].ПараметрыВыбора,
			"Отбор.Ссылка",
			СервисныеКампании
		);
		
	КонецЕсли;
	
КонецПроцедуры // НастройкаПараметровВыбораСервиснойКампании()

&НаКлиенте
Процедура ОбновитьВидимостьДереваОбъектовПланирования()
	
	Элементы.ПланированиеОбъекты.Видимость = ВидимостьДереваОбъектовПланирования;
	Элементы.ПоказатьДеревоОбъектовПланирования.Пометка = ВидимостьДереваОбъектовПланирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьДобавленияИнтервала()
	
	Если ИнтервалыОтображения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПланированиеОбъекты.ТекущиеДанные;
	ЭлементВидимостьДобавить = Истина;
	ГраницыИнтерфейса = ГраницыИнтерфейса(ЭтотОбъект);
	ВыделенныеРесурсы = ОтображаемыеРесурсы.НайтиСтроки(Новый Структура("Номер", ВыделенныеРесурсы(ЭтотОбъект)[0]));
	
	Если НЕ ВидимостьДереваОбъектовПланирования ИЛИ ТекущиеДанные = Неопределено Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли ТекущиеДанные.ЭтоПричина И НЕ ТекущиеДанные.ПланированиеПоГруппе Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли НЕ ТекущиеДанные.ЭтоПричина И ТекущиеДанные.ПланированиеПоГруппе Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли НЕ ДоступноПланированиеОбъектаНаРесурсе(ДанныеОбъектаПланирования(ТекущиеДанные).Объект, ВыделенныеРесурсы) Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли КалендарьДневной.ТекущаяОбласть.Расшифровка = "CurrentTime" Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли КалендарьДневной.ТекущаяОбласть.Лево <= ГраницыИнтерфейса.Лево
		ИЛИ КалендарьДневной.ТекущаяОбласть.Верх <= ГраницыИнтерфейса.Верх Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли КалендарьДневной.ТекущаяОбласть.Расшифровка = Неопределено Тогда
		
		ГраницыОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов);
		РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
		
		// Для добавления по выделенной области
		Если РежимДобавления = 0 Или Не ЗначениеЗаполнено(ТекущиеДанные.НормаВремениПлан) Тогда
		
			ВременныеИнтервалыОбласти = ИнтервалыОбласти(
				ГраницыОбласти.Первая,
				ГраницыОбласти.Последняя,
				ИнтервалыОтображения,
				РазмерИнтервалаВСекундах);
			
		// Для добавления по норме времени
		ИначеЕсли РежимДобавления = 1 Тогда
			
			ВременныеИнтервалыОбласти = ИнтервалыОбласти(
				ГраницыОбласти.Первая,
				ГраницыОбласти.Первая,
				ИнтервалыОтображения,
				РазмерИнтервалаВСекундах);
			
			ВременныеИнтервалыОбласти[0].Конец = ВременныеИнтервалыОбласти[0].Начало + ТекущиеДанные.НормаВремениПлан;
			
		КонецЕсли;
		
		Если ВременныеИнтервалыОбласти.Количество() = 0 Тогда
			
			ЭлементВидимостьДобавить = Ложь;
			
		КонецЕсли;
		
		Для Каждого Интервал Из ВременныеИнтервалыОбласти Цикл
			
			ИнтервалДоступен = ПланированиеРесурсовКлиентСервер.
				ПроверитьДоступностьВремениИнтервалаПланирования(Интервал.Конец, КонтрольПланированияПрошедшимВременем);
			
			КонецОтображаемогоВремени = ИнтервалыОтображения[ИнтервалыОтображения.ВГраница()].Конец;
			
			Если НЕ ИнтервалДоступен
				ИЛИ ВыделенныеРесурсы.Количество() = 0
				ИЛИ Интервал.Конец > КонецОтображаемогоВремени Тогда
				
				ЭлементВидимостьДобавить = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ДобавитьИнтервалДляТекущегоОбъекта.Видимость = ЭлементВидимостьДобавить;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьДобавленияИзСправочника()
	
	Если ИнтервалыОтображения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементВидимостьДобавить = Истина;
	ГраницыИнтерфейса = ГраницыИнтерфейса(ЭтотОбъект);
	ВыделенныеРесурсы = ОтображаемыеРесурсы.НайтиСтроки(Новый Структура("Номер", ВыделенныеРесурсы(ЭтотОбъект)[0]));
	
	Если КалендарьДневной.ТекущаяОбласть.Расшифровка = "CurrentTime" Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли КалендарьДневной.ТекущаяОбласть.Лево <= ГраницыИнтерфейса.Лево
		ИЛИ КалендарьДневной.ТекущаяОбласть.Верх <= ГраницыИнтерфейса.Верх Тогда
		
		ЭлементВидимостьДобавить = Ложь;
		
	ИначеЕсли КалендарьДневной.ТекущаяОбласть.Расшифровка = Неопределено Тогда
		
		ГраницыОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов);
		РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
		
		// Для добавления по выделенной области
		ВременныеИнтервалыОбласти = ИнтервалыОбласти(
			ГраницыОбласти.Первая,
			ГраницыОбласти.Последняя,
			ИнтервалыОтображения,
			РазмерИнтервалаВСекундах);
		
		Если ВременныеИнтервалыОбласти.Количество() = 0 Тогда
			
			ЭлементВидимостьДобавить = Ложь;
			
		КонецЕсли;
		
		Для Каждого Интервал Из ВременныеИнтервалыОбласти Цикл
			
			ИнтервалДоступен = ПланированиеРесурсовКлиентСервер.
				ПроверитьДоступностьВремениИнтервалаПланирования(Интервал.Конец, КонтрольПланированияПрошедшимВременем);
			
			КонецОтображаемогоВремени = ИнтервалыОтображения[ИнтервалыОтображения.ВГраница()].Конец;
			
			Если НЕ ИнтервалДоступен
				ИЛИ ВыделенныеРесурсы.Количество() = 0
				ИЛИ Интервал.Конец > КонецОтображаемогоВремени Тогда
				
				ЭлементВидимостьДобавить = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ДобавитьИзСправочника.Видимость = ЭлементВидимостьДобавить;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьВставкиИнтервалаИзБуфера()
	
	Если ИнтервалыОтображения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Элемент = Элементы.КалендарьДневнойКонтекстноеМенюВставитьИнтервал;
	ЭлементВидимость = Истина;
	ГраницыИнтерфейса = ГраницыИнтерфейса(ЭтотОбъект);
	ТекущаяОбласть = Элементы.КалендарьДневной.ТекущаяОбласть;
	
	#Если ВебКлиент Тогда
		ГраницыОбласти = ПолучитьГраницыОбластиНаСервере(ТекущаяОбласть.Имя);
	#Иначе
		ГраницыОбласти = Новый Структура("Лево, Верх", ТекущаяОбласть.Лево, ТекущаяОбласть.Верх);
	#КонецЕсли
	
	Если ЗначениеЗаполнено(КопияИнтервала) Тогда
		
		ТекущиеДанные = ПолучитьОбъектПоИдентификатору(КопияИнтервала.Идентификатор);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КопияИнтервала) ИЛИ ТекущиеДанные = Неопределено Тогда
		
		ЭлементВидимость = Ложь;
		
	ИначеЕсли ТекущиеДанные.ЭтоПричина И НЕ ТекущиеДанные.ПланированиеПоГруппе Тогда
		
		ЭлементВидимость = Ложь;
		
	ИначеЕсли НЕ ТекущиеДанные.ЭтоПричина И ТекущиеДанные.ПланированиеПоГруппе Тогда
		
		ЭлементВидимость = Ложь;
		
	ИначеЕсли ТекущаяОбласть.Расшифровка = "CurrentTime" Тогда
		
		ЭлементВидимость = Ложь;
		
	ИначеЕсли ГраницыОбласти.Лево <= ГраницыИнтерфейса.Лево
		ИЛИ ГраницыОбласти.Верх <= ГраницыИнтерфейса.Верх Тогда
		
		ЭлементВидимость = Ложь;
		
	ИначеЕсли ТекущаяОбласть.Расшифровка = Неопределено Тогда
		
		ГраницыОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов);
		ИнтервалыОбласти = ИнтервалыОбласти(
			ГраницыОбласти.Первая,
			ГраницыОбласти.Первая,
			ИнтервалыОтображения,
			ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект));
		
		Если ИнтервалыОбласти.Количество() > 0 Тогда
			
			ДоступностьПланирования = ПланированиеРесурсовКлиентСервер.ПроверитьДоступностьВремениИнтервалаПланирования(
				ИнтервалыОбласти[0].Конец, КонтрольПланированияПрошедшимВременем);
			
			Условие = Новый Структура("Номер", ВыделенныеРесурсы(ЭтотОбъект)[0]);
			ВыделенныеРесурсы = ОтображаемыеРесурсы.НайтиСтроки(Условие);
			
			КонецОтображаемогоВремени = ИнтервалыОтображения[ИнтервалыОтображения.ВГраница()].Конец;
			
			Если НЕ ДоступностьПланирования
				ИЛИ ВыделенныеРесурсы.Количество() = 0
				ИЛИ ИнтервалыОбласти[0].Начало > КонецОтображаемогоВремени Тогда
				
				ЭлементВидимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ЭлементВидимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элемент.Видимость = ЭлементВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьАвтоматическогоПланированияОтРесурса()
	
	Если ИнтервалыОтображения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Элемент = Элементы.КалендарьДневнойКонтекстноеМенюАвтоматическоеПланированиеОтРесурса;
	ГраницыИнтерфейса = ГраницыИнтерфейса(ЭтотОбъект);
	
	ЭлементВидимость = НЕ ЗначениеЗаполнено(КопияИнтервала);
	
	Если КалендарьДневной.ТекущаяОбласть.Лево <= ГраницыИнтерфейса.Лево
		ИЛИ КалендарьДневной.ТекущаяОбласть.Верх <= ГраницыИнтерфейса.Верх Тогда
		
		ЭлементВидимость = Ложь;
		
	ИначеЕсли КалендарьДневной.ТекущаяОбласть.Расшифровка <> Неопределено Тогда
		
		ЭлементВидимость = Ложь;
		
	ИначеЕсли КалендарьДневной.ТекущаяОбласть.Расшифровка = Неопределено Тогда
		
		ГраницыОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов);
		ИнтервалыОбласти = ИнтервалыОбласти(
			ГраницыОбласти.Первая,
			ГраницыОбласти.Последняя,
			ИнтервалыОтображения,
			ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект));
		
		Если ИнтервалыОбласти.Количество() > 0 Тогда
			
			ДоступностьПланирования = ПланированиеРесурсовКлиентСервер.ПроверитьДоступностьВремениИнтервалаПланирования(
				ИнтервалыОбласти[0].Конец, КонтрольПланированияПрошедшимВременем);
			
			Условие = Новый Структура("Номер", ВыделенныеРесурсы(ЭтотОбъект)[0]);
			ВыделенныеРесурсы = ОтображаемыеРесурсы.НайтиСтроки(Условие);
			КонецОтображаемогоВремени = ИнтервалыОтображения[ИнтервалыОтображения.ВГраница()].Конец;
			
			Если НЕ ДоступностьПланирования
				ИЛИ ВыделенныеРесурсы.Количество() = 0
				ИЛИ ИнтервалыОбласти[0].Начало > КонецОтображаемогоВремени Тогда
				
				ЭлементВидимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ЭлементВидимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элемент.Видимость = ЭлементВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПримечаниеКИнтервалу(РасшифровкаИнтервала, Область)
	
	#Если ВебКлиент Тогда
		СоздатьПримечаниеДневногоКалендаряНаСервере(Область.Имя);
		
		Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
			Если Рисунок.Имя = "РисунокСозданныйНаСервере" Тогда
				Примечание = Рисунок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	#Иначе
		Примечание = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	#КонецЕсли
	
	// данные
	Примечание.Имя = "Note";
	Примечание.ГиперСсылка = Истина;
	
	данныеРасшифровки = Новый Массив;
	данныеРасшифровки.Добавить(КалендарьДневной.Рисунки.Индекс(Область));
	Примечание.Расшифровка = ПланированиеРесурсовКлиентСервер.РасшифровкаПримечания(данныеРасшифровки);
	
	Примечание.Текст = РасшифровкаИнтервала.Получить("note");
	
	#Если НЕ ВебКлиент Тогда
		
		// внешний вид
		Примечание.Линия     = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 1);
		Примечание.ЦветФона  = ОбщегоНазначенияКлиент.ЦветСтиля("ЗаписьНаРемонтФонПримечания");
		Примечание.ЦветЛинии = ОбщегоНазначенияКлиент.ЦветСтиля("ЗаписьНаРемонтРамкаПримечания");
		Примечание.Шрифт     = ОбщегоНазначенияКлиент.ШрифтСтиля("ЗаписьНаРемонтШрифтГрафика");
		
		// расположение
		Если РасположениеРесурсов = "ЛЕВО" Тогда
			Примечание.Верх = Область.Верх + 1.5 + Область.Высота;
		Иначе
			Примечание.Верх = Область.Верх;
		КонецЕсли;
		Примечание.Лево = Область.Лево + 1.5 + Область.Ширина;
		Примечание.Высота = 25;
		Примечание.Ширина = 50;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПримечания(УстановитьВладельцаТекущейОбластью=Ложь)
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = "Note" Тогда
			Если УстановитьВладельцаТекущейОбластью Тогда
				Расшифровка = ПланированиеРесурсовКлиентСервер.РазобратьРасшифровку(Рисунок.Расшифровка);
				
				Элементы.КалендарьДневной.ТекущаяОбласть = КалендарьДневной.Рисунки.Получить(Расшифровка.Получить("parent"));
			КонецЕсли;
			
			КалендарьДневной.Рисунки.Удалить(Рисунок);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРисунок(Описание)
	
	// Удалим рисунок
	ИмяРисунка = Описание.Получить("name");
	ТекстПоиска = стрШаблон("{""type"":""CurrentPlan"",""index"":%1", Описание.Получить("index"));
	ПредыдущийРисунок = Неопределено;
	УдаляемыеРисунки = Новый Массив;
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = ИмяРисунка Тогда
			УдаляемыеРисунки.Добавить(Рисунок);
		ИначеЕсли СтрНачинаетсяС(Рисунок.Расшифровка, ТекстПоиска) Тогда
			УдаляемыеРисунки.Добавить(Рисунок);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Рисунок Из УдаляемыеРисунки Цикл
		КалендарьДневной.Рисунки.Удалить(Рисунок);
	КонецЦикла;
	
КонецПроцедуры

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	НеобходимоПерезаполнитьЗаказчика  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика",  Ложь);
	НеобходимоПерезаполнитьАвтомобиль = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьАвтомобиль", Ложь);
	
	Если НеобходимоПерезаполнитьЗаказчика Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия),
			СтрШаблон("Владелец автомобиля <%1> = <%2>.
				|Выбран заказчиком <%3>. Установить заказчиком <%2>?",
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль,
			ПараметрыДействия.ВладелецАвтомобиля,
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик),
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	Если НеобходимоПерезаполнитьАвтомобиль Тогда
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия);
		
		Если ЗначениеЗаполнено(ПараметрыДействия.ВладелецАвтомобиля) Тогда
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> = <%2>.
				|Выбран заказчиком <%3>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса,
				ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль,
				ПараметрыДействия.ВладелецАвтомобиля,
				ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик);
		Иначе
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> не указан.
				|Выбран заказчиком <%2>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль, ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик);
		КонецЕсли;
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Изменение заказчика'"));
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОткрытьСписокСервисныхКампаний", Ложь) Тогда
		
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			
			АвтосервисКлиент.ОткрытьФормуВыбораСервиснойКомпании(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект).Автомобиль);
			
		Иначе
			
			АвтосервисКлиент.ОткрытьФормуВыбораСервиснойКомпании(
				ЭтотОбъект,
				ТекущийОбъект(ЭтотОбъект).СводныйРемонтныйЗаказ.Автомобиль
			);
			
		КонецЕсли;
		
		ПараметрыДействия.ОткрытьСписокСервисныхКампаний = Ложь;
	КонецЕсли;
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	Если НЕ ПараметрыДействия = Неопределено И ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполнен", (ТекущийОбъект(ЭтотОбъект).Товары.Количество() > 0));
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", (ТекущийОбъект(ЭтотОбъект).Автоработы.Количество() > 0));
	КонецЕсли;
	АвтосервисКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия,,, ТекущийОбъект(ЭтотОбъект));
	
	АвтосервисКлиент.ПолучитьРазрешенияДляЗаполненияПоСервиснойКомпании(ЭтотОбъект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОчищатьПоляАвтомобиля", Ложь) Тогда
		
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			
			ЗаписьНаРемонтВременныеРамкиПриИзменении();
			
		Иначе
			
			ЗаказНарядВременныеРамкиПриИзменении();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Активируем строки причин обращения для обновления отбора
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьАктивныеПричиныОбращений", Ложь) Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ТекущийОбъект(ЭтотОбъект));
		
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.АвтоработыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.ТоварыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
				
		Иначе
			
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.АвтоработыЗаказНаряд, ИспользоватьПричиныОбращений);
			ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
				Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.ТоварыЗаказНаряд, ИспользоватьПричиныОбращений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним исполнителей для добавленных авторабот
	// FIXME: Что-то не работает нужно переписать
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗаполнятьИсполнителейРабот", Ложь)
		И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы") <> Неопределено Тогда
		
		МассивАвторабот.ЗагрузитьЗначения(ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы"));
		
		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОжидатьОбновлениеКэша", Ложь) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеОбновленияКэшаКалендаря", 0.5, Истина);
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьДеревоОбъектовПланирования", Ложь) Тогда
		
		// обновим планирование и календарь
		ПланированиеРесурсовКлиентСервер.ЗаполнитьОбъектыПланирования(
			ТекущийОбъект(ЭтотОбъект), ПланированиеИнтервалы, ПланированиеОбъекты);
		
		ОбновитьДеревоОбъектовПланирования = Ложь;
		
		Если РежимКалендаря <> "Месяц" Тогда
			
			// Разворачивать/Сворачивать можно только видимое дерево
			Если Элементы.ПланированиеОбъекты.Видимость Тогда
				ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПланированиеОбъекты", Истина);
			КонецЕсли;
			
			ОповещениеОбновитьКалендарь = Новый ОписаниеОповещения(
				"Подключаемый_ОбновитьКалендарь", ЭтотОбъект, Новый Структура("ОбновитьКэш", Истина));
			
			ВыполнитьОбработкуОповещения(ОповещениеОбновитьКалендарь, ОтображатьТолькоДоступныеДляПланированияРесурсы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДляВыводаНаКлиенте = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ДляВыводаНаКлиенте");
	
	Если ДляВыводаНаКлиенте <> Неопределено Тогда
		
		Для Каждого Сообщение Из ДляВыводаНаКлиенте Цикл
			
			ПоказатьОповещениеПользователя(Сообщение.Заголовок,, Сообщение.Текст, БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзмененныеРеквизиты", Новый Структура).Свойство("ПодразделениеКомпании") Тогда
		
		НовоеСмещение = ОбщегоНазначенияАвтосалонКлиент.
			СмещениеВремениВПодразделенииКомпании(ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании);
		
		Если НовоеСмещение <> СмещениеЧасовогоПояса Тогда
			
			СмещениеЧасовогоПояса = НовоеСмещение;
			ОбновитьКалендарь();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура")
		И РезультатОповещения.Свойство("ПоказыватьПараметрыДокумента")
		И РезультатОповещения.ПоказыватьПараметрыДокумента Тогда
		
		РезультатОповещения.ПоказыватьПараметрыДокумента = Ложь;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, ТекущийОбъект(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	Если
		ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ПодборПоСпискуЗаказанного"
		И ЭтоАдресВременногоХранилища(РезультатОповещения)
	Тогда
		
		ПодобранныеТовары = ПолучитьИзВременногоХранилища(РезультатОповещения);
		
		ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИдентификаторПричиныОбращения", "");
		
		ТекущийДокумент = ТекущийОбъект(ЭтотОбъект);
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
		Если НЕ ПустаяСтрока(СокрЛП(ИдентификаторПричиныОбращения)) Тогда
			УсловиеПоиска.Вставить("ИдентификаторПричиныОбращения");
		КонецЕсли;
		
		ПараметрыДействия = Документы[ЗаписьНаРемонт.РежимРедактирования]
			.ПолучитьПараметрыДействия(ТекущийДокумент, ПараметрыДействия);
		ПересчитатьСкидки = Ложь;
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			ПересчитатьСкидки = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		Для Каждого Строка Из ПодобранныеТовары Цикл
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
			Если УсловиеПоиска.Свойство("ИдентификаторПричиныОбращения") Тогда
				УсловиеПоиска.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
			КонецЕсли;
			
			ПодходящиеСтроки = ТекущийДокумент.Товары.НайтиСтроки(УсловиеПоиска);
			Если ПодходящиеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ТекущийДокумент.Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество,Коэффициент");
				НоваяСтрока.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
				
				Документы[ЗаписьНаРемонт.РежимРедактирования].ТоварыНоменклатураПриИзменении(ТекущийДокумент, НоваяСтрока, ПараметрыДействия);
				
				// Вызываем общий обработчик изменения реквизитов формы
				УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			Иначе
				НоваяСтрока = ПодходящиеСтроки[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
				
				Документы[ЗаписьНаРемонт.РежимРедактирования].ТоварыКоличествоПриИзменении(ТекущийДокумент, НоваяСтрока, ПараметрыДействия);
			КонецЕсли;
		КонецЦикла;
		
		// Пересчет скидок
		Если ПересчитатьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ТекущийДокумент, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаявкаНаРемонт Тогда
			ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
		Иначе
			ОбновитьПоказателиТоваров(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ПодборЗамен" Тогда
		
		Автосервис.ВыполнитьЗаменуТоваровВДокументе(ТекущийОбъект(ЭтотОбъект), РезультатОповещения);
		ОбновитьПоказателиТоваров(ЭтотОбъект);
		ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
		
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Функция помещает список исполнителей во временное хранилище и возвращает адрес 
//
&НаСервереБезКонтекста
Функция ПоместитьТаблицуИсполнителиВХранилище(Знач Объект, УникальныйИдентификатор, ИдентификаторРаботы, ТолькоДляПросмотра = Ложь)
	
	ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));

	
	КолонкиВывода = "Исполнитель, Цех, Процент";
	Если Автосервис.ДоступноНачислениеСотрудникам()
		И НЕ (ПравоПользователя("УровеньДоступаКНачислениямСотрудникамВЗаказНарядах") =
			Перечисления.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Запрещено
			И ТолькоДляПросмотра)
		И  ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		КолонкиВывода = КолонкиВывода + ", ВидНачисления, СпособРасчета, ПараметрРасчетаНачисления, Начислено";
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(ИсполнителиРаботы, КолонкиВывода), УникальныйИдентификатор);
	
КонецФункции // ПоместитьТаблицуИсполнителиВХранилище()

// Функция получает список исполнителей из временного хранилища
//
&НаСервере
Процедура ЗаполнитьТаблицуИсполнителейИзХранилища(АдресВХранилище, ИдентификаторРаботы)
	
	Автосервис.ЗаполнитьТаблицуИсполнителейИзХранилища(ТекущийОбъект(ЭтотОбъект), АдресВХранилище, ИдентификаторРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОповещенияДобавленияПричиныОбращения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаВыбораПричиныОбращения", 
														ЭтотОбъект, 
														ДополнительныеПараметры
														);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ПричиныОбращений.ФормаСписка", 
					 ПараметрыФормы,,,,, 
					 ОбработчикОповещения, 
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
					);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыФормы = Новый Структура("Основание", ДополнительныеПараметры.Основание);
		ПараметрыФормы.Вставить("СоздаватьЗН", Истина);
		ПараметрыФормы.Вставить("ВводБезПричиныОбращения", Истина);
		ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыбораПричиныОбращения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленаПричина = ДобавитьПричинуОбращения(Результат, ДополнительныеПараметры.Основание);
	
	Если НЕ ДобавленаПричина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Не удалось добавить причину обращения <%1> в документ <%2>.'"), 
			 	Результат, 
				ДополнительныеПараметры.Основание
			)
		);
		Возврат;
	КонецЕсли;
	
	ПостОбработка = Новый Структура();
	УстановитьКонтекстДокумента(ДополнительныеПараметры.Основание, ПостОбработка);
	ОбработкаРезультатаВыполненияДействия(ПостОбработка);
	
	Если ПроверкаРеквизитовЗаявкиНаРемонт(ДополнительныеПараметры.Основание) Тогда
		ОткрытьФормуСозданияСводногоРемонтногоЗаказа(ДополнительныеПараметры.Основание, ДополнительныеПараметры);
	Иначе
		ОткрытьФормуВводаСводногоРемонтногоЗаказа(ДополнительныеПараметры.Основание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаВыбораПричиныОбращения()

&НаКлиенте
Процедура ВыборДокументаКонтекста(ОтборПоДокументу=Неопределено)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ОтборПоПлануРемонта", Истина);
	
	Если ЗначениеЗаполнено(ОтборПоДокументу) Тогда
		
		ПараметрыОткрытия.Вставить("ОтборПоДокументу", ОтборПоДокументу);
		
	КонецЕсли;
	
	ОО = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборДокумента");
	
	ОткрытьФорму(
		"Обработка.ПоискКлиентовИДокументов.Форма.ФормаОбработкиОбслуживанияАвтомобиля",
		ПараметрыОткрытия,
		Элементы.СтрокаПоиска,
		ЭтотОбъект,
		,
		,
		ОО,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодборИсполнителей()
	
	Элемент = Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования];
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресИсполнителей = ПоместитьТаблицуИсполнителиВХранилище(ТекущийОбъект(ЭтотОбъект), УникальныйИдентификатор, Элемент.ТекущиеДанные.ИдентификаторРаботы);;
	
	АвтосервисКлиент.НачатьПодборИсполнителей(ТекущийОбъект(ЭтотОбъект), Элемент.ТекущиеДанные.ИдентификаторРаботы,
		АдресИсполнителей, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСводногоРемонтногоЗаказа(Основание, ДополнительныеПараметры)
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		ПараметрыФормы = Основание;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаявкаНаРемонт", Основание);
	КонецЕсли;
	
	ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.Форма.ФормаВводаСводногоРемонтногоЗаказа", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуВводаСводногоРемонтногоЗаказа()

&НаКлиенте
Процедура ОткрытьФормуСозданияСводногоРемонтногоЗаказа(Основание, ДополнительныеПараметры)
	
	ПараметрыФормы = Новый Структура("ЗаявкаНаРемонт", Основание);
	ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещенияСозданияСводногоРемонтногоЗаказа", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.Форма.ФормаСозданияСводногоРемонтногоЗаказа", ПараметрыФормы, ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуСозданияСводногоРемонтногоЗаказа()

&НаКлиенте
Процедура ОткрытьФормуВводаЗаказНаряда(Основание, ДополнительныеПараметры)
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		ПараметрыФормы = Основание;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаявкаНаРемонт", Основание); 
		ПараметрыФормы.Вставить("КомандаЗаказНаряд", Истина);
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещенияСозданияЗаказНаряда", ЭтотОбъект, ДополнительныеПараметры); 
	
	ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.Форма.ФормаСозданияСводногоРемонтногоЗаказа", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьКалендарьНаМесяц()
	
	Начало = НачалоМесяца(ДатаПланировщика);
	Конец  = КонецМесяца(ДатаПланировщика);
	НачалоОтображения = НачалоНедели(Начало);
	КонецОтображения  = КонецНедели(Конец);
	
	ЦветаГрафика = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков();
	РаскрашиватьПоГрафику = НЕ БазовыйГрафик.Пустая();
	
	Если РаскрашиватьПоГрафику Тогда
		
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		ДанныеГрафика = Справочники.ГрафикиРаботы.ПолучитьГрафик(БазовыйГрафик, Начало, Конец, ВыходныеДни);
		
	КонецЕсли;
	
	#Область Инициализация_данных_потенциалов
	
	ТаблицаИсполнителей = ИсполнителиДляГрафика.Выгрузить();
	
	// Получим графики работ для исполнителей
	ИнтервалыИсполнителей = ПланированиеРесурсов.ПолучитьГрафикиРабот(
		Начало,
		Конец,
		ТаблицаИсполнителей,
		РежимИспользованияГрафиков,
		БазовыйГрафик,
		УчитыватьДанныеТабеля
	);
	
	ТаблицаРабочихМест = РабочиеМестаДляГрафика.Выгрузить();
	
	// Получим графики работ для цехов
	ИнтервалыРабочихМест = ПланированиеРесурсов.ПолучитьГрафикиРабот(
		Начало,
		Конец,
		ТаблицаРабочихМест,
		РежимИспользованияГрафиков,
		БазовыйГрафик,
		УчитыватьДанныеТабеля
	);
	
	// Сформируем таблицу для исполнителей 
	ТипРесурса = Новый Массив;
	ТипРесурса.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ПотенциалыИсполнителей = ПланированиеРесурсов.СформироватьТаблицуПотенциаловРесурсов(
		ТипРесурса,
		ИнтервалыИсполнителей,
		Ложь,
		Начало,
		Конец
	);
	
	// Сформируем таблицу для цехов 
	ТипРесурса = Новый Массив;
	ТипРесурса.Добавить(Тип("СправочникСсылка.Цеха"));
	ПотенциалыРабочихМест = ПланированиеРесурсов.СформироватьТаблицуПотенциаловРесурсов(
		ТипРесурса,
		ИнтервалыРабочихМест,
		Ложь,
		Начало,
		Конец
	);
	
	МассивРезультатов = ПланированиеРесурсов.СформироватьТаблицуЗагрузкиРабочихМест(
		Начало,
		Конец,
		ПотенциалыРабочихМест,
		ПотенциалыИсполнителей,
		ТаблицаРабочихМест,
		ТаблицаИсполнителей,
		ПланированиеИнтервалы,
		АвтомобильТекущегоОбъекта(),
		ТекущийОбъект(ЭтотОбъект)
	);
	
	ТаблицаЗагрузкиЦехов = МассивРезультатов[16].Выгрузить();
	ТаблицаЗагрузкиЦехов.Индексы.Добавить("Дата");
	
	// В режиме использования графиков рабочих мест удалим рабочие места, для которых не задан график на дату.
	Если (НЕ РежимИспользованияГрафиков = 0) Тогда
		Сч = ТаблицаЗагрузкиЦехов.Количество()-1;
		Пока Сч >= 0 Цикл
			Строка = ТаблицаЗагрузкиЦехов[Сч];
			Если Строка.ЗагрузкаАвтомобилей = 0 И Строка.ЗагрузкаНормочасов = 0 Тогда
				Если Строка.ПотенциалПоГрафикам<0 ИЛИ (ОтображатьТолькоРаботающих И Строка.ПотенциалПоГрафикам=0) Тогда
					ТаблицаЗагрузкиЦехов.Удалить(Сч);
				КонецЕсли;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаЗагрузкиИсполнителей = МассивРезультатов[17].Выгрузить();
	ТаблицаЗагрузкиИсполнителей.Индексы.Добавить("Дата");
	
	// В режиме использования графиков рабочих мест удалим рабочие места, для которых не задан график на дату.
	Если (НЕ РежимИспользованияГрафиков = 0 ) Тогда
		Сч = ТаблицаЗагрузкиИсполнителей.Количество()-1;
		Пока Сч >= 0 Цикл
			Строка = ТаблицаЗагрузкиИсполнителей[Сч];
			Если Строка.ЗагрузкаАвтомобилей = 0 И Строка.ЗагрузкаНормочасов = 0 Тогда
				Если Строка.ПотенциалПоГрафикам<0 ИЛИ (ОтображатьТолькоРаботающих И Строка.ПотенциалПоГрафикам=0) Тогда
					ТаблицаЗагрузкиИсполнителей.Удалить(Сч);
				КонецЕсли;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
	КонецЕсли;
	
	ЗагрузкаИсполнителей.Очистить();
	ЗагрузкаРабочихМест.Очистить();
	
	#КонецОбласти
	
	// базовые настройки календаря
	ОбщегоНазначенияАвтосалонКлиентСервер.СброситьНастройкиШкал(КалендарьНаМесяц);
	
	ОбщегоНазначенияАвтосалонКлиентСервер
		.НастроитьШкалуВремени(КалендарьНаМесяц, "День",, "ДФ='ddd (dd.ММ)'", "спл:1", Ложь);
	
	ОбщегоНазначенияАвтосалонКлиентСервер.СтартоваяНастройкаПланировщика(
		КалендарьНаМесяц, ОтображениеВремениЭлементовПланировщика.НеОтображать, 7);
	
	ПланированиеРесурсовКлиентСервер.ДополнительныеНастройкиПоляПланировщика(КалендарьНаМесяц);
	КалендарьНаМесяц.ТекущиеПериодыОтображения.Добавить(НачалоОтображения, КонецОтображения);
	
	СЕКУНД_В_ДНЕ = 86400;
	ТЕКУЩИЙ_ДЕНЬ = НачалоДня(ТекущаяДатаСеанса());
	День = НачалоОтображения;
	Пока День <= КонецОтображения Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Дата", День);
		
		ЦехаТекущаяЗагрузкаЧасы = 0;
		ЦехаТекущаяЗагрузкаАвто = 0;
		ЦехаОптЗагрузкаЧасы = 0;
		ЦехаОптЗагрузкаАвто = 0;
		
		// получим сведения о загрузке цехов
		МассивСтрокЗагрузки = ТаблицаЗагрузкиЦехов.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокЗагрузки.Количество() > 0 Тогда
			ЦехаТекущаяЗагрузкаАвто = МассивСтрокЗагрузки[0].ЗагрузкаАвтомобилейИтоги;
			Для Каждого СтрокаТаблицы Из МассивСтрокЗагрузки Цикл
				
				ЦехаТекущаяЗагрузкаЧасы = ЦехаТекущаяЗагрузкаЧасы + СтрокаТаблицы.ЗагрузкаНормочасов;
				ЦехаОптЗагрузкаЧасы = ЦехаОптЗагрузкаЧасы + СтрокаТаблицы.ПотенциалНормочасов;
				ЦехаОптЗагрузкаАвто = ЦехаОптЗагрузкаАвто + СтрокаТаблицы.ПотенциалАвтомобилей;
				
				НоваяСтрока = ЗагрузкаРабочихМест.Добавить();
				НоваяСтрока.Цех                     = СтрокаТаблицы.Цех;
				НоваяСтрока.ЗагрузкаНЧ              = Окр(СтрокаТаблицы.ЗагрузкаНормочасов,2);
				НоваяСтрока.ПотенциалНЧ             = Окр(СтрокаТаблицы.ПотенциалНормочасов,2);
				НоваяСтрока.ПроцентЗагрузкиНЧ       = Окр(?(НоваяСтрока.ПотенциалНЧ<>0,НоваяСтрока.ЗагрузкаНЧ/НоваяСтрока.ПотенциалНЧ*100,0));
				НоваяСтрока.ЗагрузкаАМ              = Окр(СтрокаТаблицы.ЗагрузкаАвтомобилей,0);
				НоваяСтрока.ПотенциалАМ             = Окр(СтрокаТаблицы.ПотенциалАвтомобилей,0);
				НоваяСтрока.ПроцентЗагрузкиАМ       = Окр(?(НоваяСтрока.ПотенциалАМ<>0,НоваяСтрока.ЗагрузкаАМ/НоваяСтрока.ПотенциалАМ*100,0));
				НоваяСтрока.КатегорияУпорядочивания = СтрокаТаблицы.КатегорияУпорядочивания;
				НоваяСтрока.День                    = СтрокаТаблицы.Дата;
				НоваяСтрока.ОбщаяЗагрузкаАМ         = ЦехаТекущаяЗагрузкаАвто;
				
				Если КритерийРасчетаЗагруженности = 0 
					ИЛИ КритерийРасчетаЗагруженности = 1 Тогда
					НоваяСтрока.ПроцентЗагрузки = НоваяСтрока.ПроцентЗагрузкиНЧ;
				ИначеЕсли КритерийРасчетаЗагруженности = 2
					ИЛИ КритерийРасчетаЗагруженности = 3 Тогда
					НоваяСтрока.ПроцентЗагрузки = НоваяСтрока.ПроцентЗагрузкиАМ;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// получим сведения о загрузке исполнителей 
		МассивСтрокЗагрузки = ТаблицаЗагрузкиИсполнителей.НайтиСтроки(СтруктураОтбора);
		
		МастераТекущаяЗагрузкаЧасы = 0;
		МастераТекущаяЗагрузкаАвто = 0;
		МастераОптЗагрузкаЧасы = 0;
		МастераОптЗагрузкаАвто = 0;
		
		Если МассивСтрокЗагрузки.Количество() > 0 Тогда
			МастераТекущаяЗагрузкаАвто = МассивСтрокЗагрузки[0].ЗагрузкаАвтомобилейИтоги;
			Для Каждого СтрокаТаблицы Из МассивСтрокЗагрузки Цикл
				
				МастераТекущаяЗагрузкаЧасы = МастераТекущаяЗагрузкаЧасы + СтрокаТаблицы.ЗагрузкаНормочасов;
				МастераОптЗагрузкаЧасы = МастераОптЗагрузкаЧасы + СтрокаТаблицы.ПотенциалНормочасов;
				МастераОптЗагрузкаАвто = МастераОптЗагрузкаАвто + СтрокаТаблицы.ПотенциалАвтомобилей;
				
				НоваяСтрока = ЗагрузкаИсполнителей.Добавить();
				НоваяСтрока.Исполнитель             = СтрокаТаблицы.Исполнитель;
				НоваяСтрока.ЗагрузкаНЧ              = Окр(СтрокаТаблицы.ЗагрузкаНормочасов,2);
				НоваяСтрока.ПотенциалНЧ             = Окр(СтрокаТаблицы.ПотенциалНормочасов,2);
				НоваяСтрока.ПроцентЗагрузкиНЧ       = Окр(?(НоваяСтрока.ПотенциалНЧ<>0,НоваяСтрока.ЗагрузкаНЧ/НоваяСтрока.ПотенциалНЧ*100,0));
				НоваяСтрока.ЗагрузкаАМ              = Окр(СтрокаТаблицы.ЗагрузкаАвтомобилей,0);
				НоваяСтрока.ПотенциалАМ             = Окр(СтрокаТаблицы.ПотенциалАвтомобилей,0);
				НоваяСтрока.ПроцентЗагрузкиАМ       = Окр(?(НоваяСтрока.ПотенциалАМ<>0,НоваяСтрока.ЗагрузкаАМ/НоваяСтрока.ПотенциалАМ*100,0));
				НоваяСтрока.КатегорияУпорядочивания = СтрокаТаблицы.КатегорияУпорядочивания;
				НоваяСтрока.День                    = СтрокаТаблицы.Дата;
				НоваяСтрока.ОбщаяЗагрузкаАМ         = МастераТекущаяЗагрузкаАвто;
				
				Если КритерийРасчетаЗагруженности = 0
					ИЛИ КритерийРасчетаЗагруженности = 1 Тогда
					НоваяСтрока.ПроцентЗагрузки = НоваяСтрока.ПроцентЗагрузкиНЧ;
				ИначеЕсли КритерийРасчетаЗагруженности = 2
					ИЛИ КритерийРасчетаЗагруженности = 3 Тогда
					НоваяСтрока.ПроцентЗагрузки = НоваяСтрока.ПроцентЗагрузкиАМ;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ЦветДня = "ЦветРабочий";
		
		Если РаскрашиватьПоГрафику Тогда
			ДанныеДня = ДанныеГрафика.НайтиСтроки(Новый Структура("Дата", День));
			Если ДанныеДня.Количество() = 0 Тогда
				ЦветДня = "ЦветВнеПериода";
			ИначеЕсли День = ТЕКУЩИЙ_ДЕНЬ Тогда
				ЦветДня = "ЦветТекущаяДата";
			ИначеЕсли ДанныеДня[0].ВидДня = Перечисления.ВидДня.Выходной Тогда
				ЦветДня = "ЦветВыходной";
			ИначеЕсли ДанныеДня[0].ВидДня = Перечисления.ВидДня.Праздник Тогда
				ЦветДня = "ЦветПраздник";
			ИначеЕсли ДанныеДня[0].ВидДня = Перечисления.ВидДня.Предпраздничный Тогда
				ЦветДня = "ЦветПредпраздничный";
			ИначеЕсли ДанныеДня[0].ВидДня = Перечисления.ВидДня.Рабочий Тогда
				ЦветДня = "ЦветРабочий";
			КонецЕсли;
		ИначеЕсли День < Начало ИЛИ День > Конец Тогда
			ЦветДня = "ЦветВнеПериода";
		ИначеЕсли День = ТЕКУЩИЙ_ДЕНЬ Тогда
			ЦветДня = "ЦветТекущаяДата";
		ИначеЕсли ДеньНедели(День) > 5 Тогда
			ЦветДня = "ЦветВыходной";
		КонецЕсли;
		
		НовыйФон = КалендарьНаМесяц.ИнтервалыФона.Добавить(День, КонецДня(День));
		НовыйФон.Цвет = ЦветаГрафика[ЦветДня];		
		ПроцентЗагруженности = -1;
		
		Если КритерийРасчетаЗагруженности = 0 Тогда
			ПроцентЗагруженности = ?(ЦехаОптЗагрузкаЧасы=0,0,ЦехаТекущаяЗагрузкаЧасы/ЦехаОптЗагрузкаЧасы*100);
		ИначеЕсли КритерийРасчетаЗагруженности = 1 Тогда
			ПроцентЗагруженности = ?(ЦехаОптЗагрузкаАвто=0,0,ЦехаТекущаяЗагрузкаАвто/ЦехаОптЗагрузкаАвто*100);
		ИначеЕсли КритерийРасчетаЗагруженности = 2 Тогда
			ПроцентЗагруженности = ?(МастераОптЗагрузкаАвто=0,0,МастераТекущаяЗагрузкаАвто/МастераОптЗагрузкаАвто*100);
		ИначеЕсли КритерийРасчетаЗагруженности = 3 Тогда
			ПроцентЗагруженности = ?(МастераОптЗагрузкаАвто=0,0,МастераТекущаяЗагрузкаАвто/МастераОптЗагрузкаАвто*100);
		КонецЕсли;
		
		Если ПроцентЗагруженности <= 0 Тогда
			ЦветПоДанным = "ЦветСвободно";
		ИначеЕсли ПроцентЗагруженности > 0 И ПроцентЗагруженности < 50 Тогда
			ЦветПоДанным = "ЦветЗагрузкаМин";
		ИначеЕсли ПроцентЗагруженности >= 50 И ПроцентЗагруженности < 100 Тогда
			ЦветПоДанным = "ЦветЗагрузкаНорм";
		ИначеЕсли ПроцентЗагруженности >= 100 Тогда
			ЦветПоДанным = "ЦветЗагрузкаМакс";
		КонецЕсли;
		
		МассивЗагрузки = Новый Массив;
		
		Если ЦехаТекущаяЗагрузкаЧасы > 0
			ИЛИ ЦехаТекущаяЗагрузкаАвто > 0
			ИЛИ МастераТекущаяЗагрузкаЧасы > 0
			ИЛИ МастераТекущаяЗагрузкаАвто > 0 Тогда
			
			ПредставлениеЗагрузки = НСтр("ru = 'Рабочие места:'") + Символы.ПС;
			ПредставлениеЗагрузки = ПредставлениеЗагрузки + Строка(Окр(ЦехаТекущаяЗагрузкаЧасы)) + "/" + Строка(Окр(ЦехаОптЗагрузкаЧасы)) + " ";
			ПредставлениеЗагрузки = ПредставлениеЗагрузки + Строка(Окр(ЦехаТекущаяЗагрузкаАвто)) + "/" + Строка(Окр(ЦехаОптЗагрузкаАвто)) + Символы.ПС;
			МассивЗагрузки.Добавить(ПредставлениеЗагрузки);
			
			ПредставлениеЗагрузки = НСтр("ru = 'Исполнители:'") + Символы.ПС;
			ПредставлениеЗагрузки = ПредставлениеЗагрузки + Строка(Окр(МастераТекущаяЗагрузкаЧасы)) + "/" + Строка(Окр(МастераОптЗагрузкаЧасы)) + " ";
			ПредставлениеЗагрузки = ПредставлениеЗагрузки + Строка(Окр(МастераТекущаяЗагрузкаАвто)) + "/" + Строка(Окр(МастераОптЗагрузкаАвто)) + Символы.ПС;
			МассивЗагрузки.Добавить(ПредставлениеЗагрузки);
		КонецЕсли;
		
		ЦветТекста = Новый Цвет(128, 128, 128);
		Для Каждого ПредставлениеЗагрузки Из МассивЗагрузки Цикл
			
			НовоеСобытие = КалендарьНаМесяц.Элементы.Добавить(День, КонецДня(День));
			НовоеСобытие.Текст     = ПредставлениеЗагрузки;
			НовоеСобытие.ЦветФона  = Новый Цвет(214, 255, 255);
			НовоеСобытие.Подсказка = ПредставлениеЗагрузки;
			НовоеСобытие.ЦветТекста = ЦветТекста;
			НовоеСобытие.Подсказка = НСтр("ru = 'Выделить день'");
			
			Если ЦветПоДанным = "ЦветСвободно" ИЛИ ЦветПоДанным = "" Тогда
				НовоеСобытие.ЦветФона = ЦветаРаскраски[ЦветДня];
			Иначе
				НовоеСобытие.ЦветФона = ЦветаРаскраски[ЦветПоДанным];
			КонецЕсли;
			
			НовоеСобытие.Значение  = Новый Структура("Доступность, Цвет", Ложь, НовоеСобытие.ЦветФона);
			
		КонецЦикла;
		
		День = День + СЕКУНД_В_ДНЕ;
	КонецЦикла;
	СтруктураОтбора = Новый ФиксированнаяСтруктура("День", ДатаПланировщика);
	
	Элементы.ЗагрузкаРабочихМест.ОтборСтрок  = СтруктураОтбора;
	Элементы.ЗагрузкаИсполнителей.ОтборСтрок = СтруктураОтбора;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьТекущееПланирование()
	
	ИдентификаторВыделенногоОбъекта = Неопределено;
	
	Если Элементы.ПланированиеОбъекты.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = ПланированиеОбъекты.НайтиПоИдентификатору(Элементы.ПланированиеОбъекты.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			
			ИдентификаторВыделенногоОбъекта = ТекущиеДанные.Идентификатор;
			
		ИначеЕсли ПланированиеОбъекты.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ИдентификаторВыделенногоОбъекта = ПланированиеОбъекты.ПолучитьЭлементы()[0].Идентификатор;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИдентификаторВыделенногоОбъекта <> Неопределено Тогда
		
		Для Каждого Интервал Из ПланированиеИнтервалы Цикл
			
			Интервал.Выделенный = (Интервал.Идентификатор = ИдентификаторВыделенногоОбъекта);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПланированиеИнтервалы.Сортировать("Выделенный");
	ОбъектыПоИдентификатору = Новый Соответствие;
	
	Для Каждого Интервал Из ПланированиеИнтервалы Цикл
		
		Если ПланированиеРесурсовКлиентСервер.ИнтервалОтображается(Интервал.Начало, Интервал.Конец, ИнтервалыОтображения) Тогда
			
			// получим номера ячеек области интервала
			НомераЯчеек = ПланированиеРесурсовКлиентСервер.НомераЯчеекОбласти(
				Интервал.Начало,
				Интервал.Конец,
				ИнтервалыОтображения,
				ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект));
			
			// получим идентификатор строки объекта
			Идентификатор = ОбъектыПоИдентификатору.Получить(Интервал.Идентификатор);
			
			Если Идентификатор = Неопределено Тогда
				
				РезультатПоиска = ПланированиеРесурсовКлиентСервер.НайтиВДеревеОбъектов(
					ПланированиеОбъекты,
					Новый Структура("Идентификатор", Интервал.Идентификатор));
				
					Если РезультатПоиска.Количество() > 0 Тогда
						
					Идентификатор = РезультатПоиска[0].ПолучитьИдентификатор();
					ОбъектыПоИдентификатору.Вставить(Интервал.Идентификатор, Идентификатор);
					
				Иначе
					
					Идентификатор = -1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НаборОбластей = Новый Массив;
			
			Для Каждого ГруппаОбласти Из НомераЯчеек Цикл
				
				Если РежимОтображенияРесурсовНаГрафике = "Общий" Тогда
					
					НомерРесурса = НомерСтрокиРесурса(Интервал.Исполнитель);
					НаборОбластей.Добавить(ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						РасположениеРесурсов,
						НомерРесурса,
						ГруппаОбласти.Первая,
						ГруппаОбласти.Последняя));
					
					НомерРесурса = НомерСтрокиРесурса(Интервал.РабочееМесто);
					НаборОбластей.Добавить(ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						РасположениеРесурсов,
						НомерРесурса,
						ГруппаОбласти.Первая,
						ГруппаОбласти.Последняя));
					
				ИначеЕсли РежимОтображенияРесурсовНаГрафике = "Исполнители" Тогда
					
					НомерРесурса = НомерСтрокиРесурса(Интервал.Исполнитель);
					НаборОбластей.Добавить(ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						РасположениеРесурсов,
						НомерРесурса,
						ГруппаОбласти.Первая,
						ГруппаОбласти.Последняя));
					
				Иначе
					
					НомерРесурса = НомерСтрокиРесурса(Интервал.РабочееМесто);
					НаборОбластей.Добавить(ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						РасположениеРесурсов,
						НомерРесурса,
						ГруппаОбласти.Первая,
						ГруппаОбласти.Последняя));
					
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого областьИнтервала Из НаборОбластей Цикл
				
				ПланированиеРесурсовКлиентСервер.РасположитьИнтервалНаКалендаре(
					КалендарьДневной.Рисунки,
					Интервал.ПолучитьИдентификатор(),
					Идентификатор,
					ПланированиеРесурсовКлиентСервер.ПредставлениеИнтервала(ТекущийОбъект(ЭтотОбъект), Интервал),
					(Интервал.Выделенный И ВидимостьДереваОбъектовПланирования),
					областьИнтервала
				);
					
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасположитьИнтервалНаКалендаре(Идентификатор, ИдентификаторОбъекта, Представление, СтруктураОбластиИнтервала)
	
	ОбластьИнтервала = ПланированиеРесурсовКлиентСервер.Область(
		КалендарьДневной,
		РасположениеРесурсов,
		СтруктураОбластиИнтервала.НомерРесурса,
		СтруктураОбластиИнтервала.ГраницыОбластиПервая,
		СтруктураОбластиИнтервала.ГраницыОбластиПоследняя
	);
	
	
	ПланированиеРесурсовКлиентСервер.РасположитьИнтервалНаКалендаре(
		КалендарьДневной.Рисунки,
		Идентификатор,
		ИдентификаторОбъекта,
		Представление,
		ВидимостьДереваОбъектовПланирования,
		ОбластьИнтервала
	);
	
КонецПроцедуры

// Процедура отображает отдельной строкой интервалы по текущему документу без разбивки по ресурсам.
&НаКлиенте
Процедура ОбновитьТекущееПланированиеВШапке();
	
	Если РасположениеРесурсов = "ЛЕВО" Тогда
		
		НомерСтрокиТекущегоПланирования = КалендарьДневной.ФиксацияСверху - 1;
		
	Иначе
		
		НомерСтрокиТекущегоПланирования = КалендарьДневной.ФиксацияСлева;
		
	КонецЕсли;
	
	Если НомерСтрокиТекущегоПланирования < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЦветФонаБелый = Новый Цвет(255,255,255);
	ЦветФонаЗаполнения = ОбщегоНазначенияКлиент.ЦветСтиля("ЗаписьНаРемонтТекущийДокумент");
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	
	// Сбросим настройки области текущего планирования
	ШагРазделителя = ?(ИнтервалыОтображения.Количество() > 1, 1, 0);
	
	Если РасположениеРесурсов = "ЛЕВО" Тогда
		
		ОтступОтКрая = КалендарьДневной.ФиксацияСлева + ШагРазделителя;
		
	Иначе
		
		ОтступОтКрая = КалендарьДневной.ФиксацияСверху + ШагРазделителя;
		
	КонецЕсли;
	
	Для Каждого Интервал Из ИнтервалыОтображения Цикл
		
		ОбластьИнтервала = ПланированиеРесурсовКлиентСервер.Область(
			КалендарьДневной,
			РасположениеРесурсов,
			НомерСтрокиТекущегоПланирования,
			ОтступОтКрая + 1,
			ОтступОтКрая + Интервал.ВсегоИнтервалов);
		
		ОбластьИнтервала.ЦветФона = ЦветФонаБелый;
		
		Если РасположениеРесурсов = "ЛЕВО" Тогда
			
			ОбластьИнтервала.ГраницаСлева  = Линия;
			ОбластьИнтервала.ГраницаСправа = Линия;
			
		Иначе
			
			ОбластьИнтервала.ГраницаСверху  = Линия;
			ОбластьИнтервала.ГраницаСнизу = Линия;
			
		КонецЕсли;
		
		ОтступОтКрая = ОтступОтКрая + Интервал.ВсегоИнтервалов + ШагРазделителя;
		
	КонецЦикла;
	
	Для Каждого Интервал Из ПланированиеИнтервалы Цикл
		
		Если ПланированиеРесурсовКлиентСервер.ИнтервалОтображается(Интервал.Начало, Интервал.Конец, ИнтервалыОтображения) Тогда
			
			НомераЯчеек = ПланированиеРесурсовКлиентСервер.НомераЯчеекОбласти(
				Интервал.Начало,
				Интервал.Конец,
				ИнтервалыОтображения,
				ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект));
			
			Для Каждого ГруппаОбласти Из НомераЯчеек Цикл
				ОбластьИнтервала = ПланированиеРесурсовКлиентСервер.Область(
					КалендарьДневной,
					РасположениеРесурсов,
					НомерСтрокиТекущегоПланирования,
					ГруппаОбласти.Первая,
					ГруппаОбласти.Последняя);
				
				ОбластьИнтервала.ЦветФона = ЦветФонаЗаполнения;
				Если РасположениеРесурсов = "ЛЕВО" Тогда
					
					ОбластьИнтервала.ГраницаСлева  = НетЛинии;
					ОбластьИнтервала.ГраницаСправа = НетЛинии;
					
				Иначе
					
					ОбластьИнтервала.ГраницаСверху  = НетЛинии;
					ОбластьИнтервала.ГраницаСнизу = НетЛинии;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюДату()
	
	Если РасположениеРесурсов <> "ВЕРХ" Тогда
		
		ВывестиТекущуюДатуВертикально();
		
	Иначе
		
		ВывестиТекущуюДатуГоризонтально();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТекущуюДатуВертикально()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ПланированиеРесурсовКлиентСервер.ИнтервалОтображается(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения) Тогда
		
		РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
		НомерЯчейки = ПланированиеРесурсовКлиентСервер
			.НомераЯчеекОбласти(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0]
			.Первая;
		
		РисунокТекущееВремя = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
		РисунокТекущееВремя.Имя = "CurrentTime";
		РисунокТекущееВремя.Расшифровка = "CurrentTime";
		РисунокТекущееВремя.ЦветЛинии = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков()["ЦветТекущаяДата"];
		
		ВерхТаблицы = КалендарьДневной.ФиксацияСверху + 1;
		
		РисунокТекущееВремя.Расположить(
			КалендарьДневной.Область(ВерхТаблицы, НомерЯчейки, КалендарьДневной.ВысотаТаблицы, НомерЯчейки));
		
		НачалоИнтервалаЛево = РисунокТекущееВремя.Лево;
		
		РисунокТекущееВремя.Расположить(
			КалендарьДневной.Область(ВерхТаблицы, НомерЯчейки + 1, КалендарьДневной.ВысотаТаблицы, НомерЯчейки + 1));
		
		КонецИнтервалаЛево = РисунокТекущееВремя.Лево;
		
		РисунокТекущееВремя.Ширина = 0.4;
		
		НачалоИнтервалаОтображения = ПланированиеРесурсовКлиентСервер
			.ИнтервалОтображенияПоДате(ТекущаяДатаСеанса, ИнтервалыОтображения)
			.Начало;
		
		ЯчейкаНачало = ПланированиеРесурсовКлиентСервер
			.НомераЯчеекОбласти(НачалоИнтервалаОтображения, НачалоИнтервалаОтображения, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0]
			.Первая;
		
		РисунокТекущееВремя.Лево = НачалоИнтервалаЛево
			+ (КонецИнтервалаЛево - НачалоИнтервалаЛево) / РазмерИнтервалаВСекундах
			*(ТекущаяДатаСеанса - (НачалоИнтервалаОтображения + РазмерИнтервалаВСекундах * (НомерЯчейки - ЯчейкаНачало)));
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТекущуюДатуГоризонтально()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ПланированиеРесурсовКлиентСервер.ИнтервалОтображается(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения) Тогда
		
		РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
		НомерЯчейки = ПланированиеРесурсовКлиентСервер
			.НомераЯчеекОбласти(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0]
			.Первая;
		
		РисунокТекущееВремя = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
		РисунокТекущееВремя.Имя = "CurrentTime";
		РисунокТекущееВремя.Расшифровка = "CurrentTime";
		РисунокТекущееВремя.ЦветЛинии = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков()["ЦветТекущаяДата"];
		
		ЛеваяГраница = КалендарьДневной.ФиксацияСлева + 1;
		ПраваяГраница = КалендарьДневной.ШиринаТаблицы - ?(ИнтервалыОтображения.Количество() > 1, 1, 0);
		РисунокТекущееВремя.Расположить(КалендарьДневной.Область(НомерЯчейки, ЛеваяГраница, НомерЯчейки, ПраваяГраница));
		НачалоИнтервалаВерх = РисунокТекущееВремя.Верх;
		РисунокТекущееВремя.Расположить(КалендарьДневной.Область(НомерЯчейки + 1, ЛеваяГраница, НомерЯчейки + 1, ПраваяГраница));
		КонецИнтервалаВерх = РисунокТекущееВремя.Верх;
		РисунокТекущееВремя.Высота = 0.4;
		
		НачалоИнтервалаОтображения = ПланированиеРесурсовКлиентСервер
			.ИнтервалОтображенияПоДате(ТекущаяДатаСеанса, ИнтервалыОтображения)
			.Начало;
		
		ЯчейкаНачало = ПланированиеРесурсовКлиентСервер.НомераЯчеекОбласти(
			НачалоИнтервалаОтображения, НачалоИнтервалаОтображения, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0].Первая;
		
		РисунокТекущееВремя.Верх = НачалоИнтервалаВерх
			+ (КонецИнтервалаВерх - НачалоИнтервалаВерх) / РазмерИнтервалаВСекундах
			*(ТекущаяДатаСеанса - (НачалоИнтервалаОтображения + РазмерИнтервалаВСекундах * (НомерЯчейки - ЯчейкаНачало)));
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьОбновлениеДневногоКалендаря(ОбновитьКэш = Ложь)
	
	Если НЕ ЭтоАдресВременногоХранилища(КэшОшибок) ИЛИ НЕ ЭтоАдресВременногоХранилища(КэшКалендаря) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// сбросим параметры планировщика
	КалендарьДневной.Очистить();
	КалендарьДневной.Рисунки.Очистить();
	
	Ошибки = ПолучитьИзВременногоХранилища(КэшОшибок);
	Если Ошибки <> Неопределено Тогда
		
		ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(
			Элементы.КалендарьДневной, , Ошибки.Текст, БиблиотекаКартинок.Предупреждение32);
		
		Возврат;
		
	КонецЕсли;
	
	// обработаем результат
	ДанныеКэша = ПолучитьИзВременногоХранилища(КэшКалендаря);
	ИнтервалыОтображения = Новый ФиксированныйМассив(ДанныеКэша.ИнтервалыОтображения);
	КэшЯчеекДокументов = Новый ФиксированноеСоответствие(ДанныеКэша.КэшЯчеекДокументов);
	
	ПланированиеРесурсовКлиентСервер.УстановитьФиксациюПланировщика(ЭтотОбъект);
	ОбновитьНомераСтрокРесурсов(ДанныеКэша.Ресурсы);
	КалендарьДневной.Вывести(ДанныеКэша.КалендарьДневной);
	ОтобразитьТекущееПланирование();
	УстановитьТекущуюДату();
	ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.КалендарьДневной, Истина);
	СформироватьПотенциалыРесурсовНаНеделю(НачалоНедели(ДатаПланировщика), КонецНедели(ДатаПланировщика));
	
	Если ОбновитьКэш Тогда
		
		ДатаПоследнегоОбновления = ТекущаяДатаСеанса();
		ИнформацияОПоследнемОбновлении = Новый ФорматированнаяСтрока(
			НСтр("ru = 'последнее обновление в'"), " ", Лев(Формат(ДатаПоследнегоОбновления, "ДЛФ=""В"""), 5)
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПланировщикНаДень(ОбновитьКэш)
	
	ВозможноДальнейшееОбновление = Истина;
	
	// Запустим обновление кэша
	Если ОбновитьКэш
		ИЛИ ПустаяСтрока(КэшКалендаря)
		ИЛИ ПолучитьИзВременногоХранилища(КэшКалендаря) = Неопределено
		ИЛИ (НЕ ПустаяСтрока(КэшОшибок)
		И ПолучитьИзВременногоХранилища(КэшОшибок) <> Неопределено) Тогда
		
		ПараметрыПланирования = ПодготовитьПараметрыДлительнойОперации();
		
		ВозможноДальнейшееОбновление = ПланированиеРесурсов.НачатьОбновлениеДневногоКалендаря(
			ПараметрыПланирования,
			УникальныйИдентификатор,
			ИдентификаторДлительнойОперации,
			КэшКалендаря,
			КэшОшибок);
		
	КонецЕсли;
	
	Если ВозможноДальнейшееОбновление Тогда
		ЗакончитьОбновлениеДневногоКалендаря(ОбновитьКэш);
		
		Возврат Новый Структура;
	Иначе
		ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.КалендарьДневной);
		
		Возврат Новый Структура("ОжидатьОбновлениеКэша", Истина);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыделитьДень(ТекущийДень, СПереходом = Истина)
	
	ЦветАктивнойЯчейки = ОбщегоНазначенияКлиент.ЦветСтиля("ЗаписьНаРемонтТекущийИнтервал");
	
	Для Каждого ЭлементГрафика Из КалендарьНаМесяц.Элементы Цикл
		Если СПереходом И ЭлементГрафика.Начало = ТекущийДень И ЭлементГрафика.ЦветФона = ЦветАктивнойЯчейки Тогда
			ДатаПланировщика = ТекущийДень;
			РежимКалендаря   = ?(РежимКалендаря = "Месяц", "День", РежимКалендаря);
			
			РежимКалендаряПриИзменении();
			Возврат;
		ИначеЕсли ЭлементГрафика.Начало = ТекущийДень Тогда
			ЭлементГрафика.ЦветФона = ОбщегоНазначенияКлиент.ЦветСтиля("ЗаписьНаРемонтТекущийИнтервал");
		Иначе
			ЭлементГрафика.ЦветФона = ЭлементГрафика.Значение.Цвет;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбора = Новый ФиксированнаяСтруктура("День", ТекущийДень);
	
	Элементы.ЗагрузкаРабочихМест.ОтборСтрок        = СтруктураОтбора;
	Элементы.ЗагрузкаИсполнителей.ОтборСтрок = СтруктураОтбора;
	
	СтруктураОтбора = Новый Структура("День", ТекущийДень);
	
	// для цехов
	МассивСтрок = ЗагрузкаРабочихМест.НайтиСтроки(СтруктураОтбора);
	СуммаПотенциаловНЧ = 0;
	СуммаЗагрузкиНЧ    = 0;
	СуммаПотенциаловАМ = 0;
	СуммаЗагрузкиАМ    = 0;
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СуммаПотенциаловНЧ = СуммаПотенциаловНЧ + Окр(СтрокаТаблицы.ПотенциалНЧ, 2);
		СуммаЗагрузкиНЧ    = СуммаЗагрузкиНЧ + Окр(СтрокаТаблицы.ЗагрузкаНЧ, 2);
		СуммаПотенциаловАМ = СуммаПотенциаловАМ + Окр(СтрокаТаблицы.ПотенциалАМ, 0);
		СуммаЗагрузкиАМ    = Окр(СтрокаТаблицы.ОбщаяЗагрузкаАМ, 0);
	КонецЦикла;
	
	Элементы.ЗагрузкаЦеховПотенциалНЧ.ТекстПодвала       = СуммаПотенциаловНЧ;
	Элементы.ЗагрузкаЦеховЗагрузкаНЧ.ТекстПодвала        = СуммаЗагрузкиНЧ;
	СуммаПотенциаловНЧИтог = ?(СуммаПотенциаловНЧ > 0, СуммаПотенциаловНЧ, 0);
	Элементы.ЗагрузкаЦеховПроцентЗагрузкиНЧ.ТекстПодвала = Окр(?(СуммаПотенциаловНЧ <> 0, СуммаЗагрузкиНЧ / СуммаПотенциаловНЧИтог *100, 0));
	Элементы.ЗагрузкаЦеховПотенциалАМ.ТекстПодвала       = СуммаПотенциаловАМ;
	Элементы.ЗагрузкаЦеховЗагрузкаАМ.ТекстПодвала        = СуммаЗагрузкиАМ;
	СуммаПотенциаловАМИтог = ?(СуммаПотенциаловАМ > 0, СуммаПотенциаловАМ, 0);
	Элементы.ЗагрузкаЦеховПроцентЗагрузкиАМ.ТекстПодвала = Окр(?(СуммаПотенциаловАМ <> 0, СуммаЗагрузкиАМ / СуммаПотенциаловАМИтог * 100, 0));
	
	// для исполнителей
	СтруктураОтбора = Новый Структура("День", ТекущийДень);
	
	// для цехов
	МассивСтрок = ЗагрузкаИсполнителей.НайтиСтроки(СтруктураОтбора);
	СуммаПотенциаловНЧ = 0;
	СуммаЗагрузкиНЧ    = 0;
	СуммаПотенциаловАМ = 0;
	СуммаЗагрузкиАМ    = 0;
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СуммаПотенциаловНЧ = СуммаПотенциаловНЧ + Окр(СтрокаТаблицы.ПотенциалНЧ, 2);
		СуммаЗагрузкиНЧ    = СуммаЗагрузкиНЧ + Окр(СтрокаТаблицы.ЗагрузкаНЧ, 2);
		СуммаПотенциаловАМ = СуммаПотенциаловАМ + Окр(СтрокаТаблицы.ПотенциалАМ, 0);
		СуммаЗагрузкиАМ    = Окр(СтрокаТаблицы.ОбщаяЗагрузкаАМ, 0);
	КонецЦикла;
	
	Элементы.ЗагрузкаИсполнителейПотенциалНЧ.ТекстПодвала       = СуммаПотенциаловНЧ;
	Элементы.ЗагрузкаИсполнителейЗагрузкаНЧ.ТекстПодвала        = СуммаЗагрузкиНЧ;
	СуммаПотенциаловНЧИтог = ?(СуммаПотенциаловНЧ > 0, СуммаПотенциаловНЧ, 0);
	Элементы.ЗагрузкаИсполнителейПроцентЗагрузкиНЧ.ТекстПодвала = Окр(?(СуммаПотенциаловНЧ <> 0, СуммаЗагрузкиНЧ / СуммаПотенциаловНЧИтог * 100, 0));
	Элементы.ЗагрузкаИсполнителейПотенциалАМ.ТекстПодвала       = СуммаПотенциаловАМ;
	Элементы.ЗагрузкаИсполнителейЗагрузкаАМ.ТекстПодвала        = СуммаЗагрузкиАМ;
	СуммаПотенциаловАМИтог = ?(СуммаПотенциаловАМ > 0, СуммаПотенциаловАМ, 0);
	Элементы.ЗагрузкаИсполнителейПроцентЗагрузкиАМ.ТекстПодвала = Окр(?(СуммаПотенциаловАМ <> 0, СуммаЗагрузкиАМ / СуммаПотенциаловАМИтог * 100, 0));
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьВопросОбОчисткеТабличнойЧасти(ИмяКоманды)
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	
	// Определим табличную часть, для которой была вызвана данная команда
	ИмяТабличнойЧасти = ?(НЕ СтрНайти(ИмяКоманды, "Автоработы") = 0, "Автоработы", "Товары");
	
	СтрокиДляУдаленияИзТабличнойЧасти = Новый Массив;
	
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы["ПричиныОбращения"+ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные = Неопределено Тогда
		
		// Вычислим имеются ли строки для соответствующей причины обращения
		ТекущиеДанные = Элементы["ПричиныОбращения"+ЗаписьНаРемонт.РежимРедактирования].ТекущиеДанные;
		
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Сформируем массив строк для удаления из табличной части документа
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СтрокиДляУдаленияИзТабличнойЧасти.Добавить(ТекущаяСтрока);
		КонецЦикла;
		
	ИначеЕсли Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		// Табличная часть пустая и нечего очищать
		Возврат Ложь;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды",        ИмяКоманды);
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	Если СтрокиДляУдаленияИзТабличнойЧасти.Количество() > 0 Тогда
		ДополнительныеПараметры.Вставить("СтрокиТабличнойЧастиДляУдаления", СтрокиДляУдаленияИзТабличнойЧасти);
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОчисткиТабличнойЧасти", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработкаОповещения, НСтр("ru = 'Очистить табличную часть """+ИмяТабличнойЧасти+"""?'"), РежимДиалогаВопрос.ДаНет);
	
	Возврат Истина;
	
КонецФункции // СформироватьВопросОбОчисткеТабличнойЧасти()

&НаСервере
Процедура ОбработкаРезультатаПодбораАвторабот(ПараметрыПодбора)
	
	// Получим параметры выполнения подбора
	ПодобраннаяАвторабота  = ПолучитьИзВременногоХранилища(ПараметрыПодбора.ПодобранныеАвтоработы);
	ТабличнаяЧастьОбъекта  = ТекущийОбъект(ЭтотОбъект).Автоработы;
	
	ИдентификаторПричиныОбращения  = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыПодбора.ПараметрыДействия,
		"ИдентификаторПричиныОбращения",
		Неопределено
	);
	ЕстьИдентификаторПричиныОбращения  = (НЕ ИдентификаторПричиныОбращения  = Неопределено);
	
	ПараметрыДействия = Документы[ЗаписьНаРемонт.РежимРедактирования].ПолучитьПараметрыДействия(ТекущийОбъект(ЭтотОбъект));
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	ПересчитатьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитатьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура(?(ЕстьИдентификаторПричиныОбращения , "ИдентификаторПричиныОбращения,", "")+"Авторабота");
	Если ЕстьИдентификаторПричиныОбращения  Тогда
		ПараметрыОтбора.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения ;
	КонецЕсли;
	
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаАвторабот Из ПодобраннаяАвторабота Цикл
			
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаАвторабот);
		НайденныеСтроки = ТабличнаяЧастьОбъекта.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество()=0 Тогда
			
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаАвторабот);
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
			
			Если ЕстьИдентификаторПричиныОбращения  Тогда
				СтрокаТабличнойЧасти.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения ;
			КонецЕсли;
			
			// Вызываем обработчик изменения данных объекта
			Документы[ЗаписьНаРемонт.РежимРедактирования].АвтоработыАвтоработаПриИзменении(
				ТекущийОбъект(ЭтотОбъект),
				СтрокаТабличнойЧасти,
				ПараметрыДействия
			);
			
			Если ИспользоватьУчетРабочегоВремени Тогда
				ДобавитьНовуюАвтоработуВПакет(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				ОбновитьДеревоПакетов = Истина;
				ИзмененыПакетыРабот = Истина;
			КонецЕсли;
			
			МассивАвторабот.Добавить(СтрокаТабличнойЧасти.ИдентификаторРаботы);
			
		Иначе
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаАвторабот.Количество;
			
			// Вызываем обработчик изменения данных объекта
			Документы[ЗаписьНаРемонт.РежимРедактирования].АвтоработыКоличествоПриИзменении(
				ТекущийОбъект(ЭтотОбъект),
				СтрокаТабличнойЧасти,
				ПараметрыДействия
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пересчет скидок
	Если ПересчитатьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ТекущийОбъект(ЭтотОбъект), ПараметрыДействия);
	КонецЕсли;
	
	Если РежимыРедактирования().ЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования Тогда
		
		ПерерасчетСуммыСкидкиБонусами();
		ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, ЗаписьНаРемонт.ЗаказНаряд);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаПодбораАвторабот()

&НаСервереБезКонтекста
Функция ЭтоПлатный(ВидРемонта)
	
	Возврат НЕ Автосервис.ЭтоБесплатный(ВидРемонта);
	
КонецФункции

// Заполняет представление данных из подчиненных таблиц авторабот.
//
&НаСервере
Процедура ПредставлениеПодчиненныхТаблицАвторабот()
	
	Если ЗаписьНаРемонт.РежимРедактирования <> РежимыРедактирования().ЗаказНаряд Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Строка Из ТекущийОбъект(ЭтотОбъект).Автоработы Цикл
		
		Отбор = Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы);
		Материалы = ТекущийОбъект(ЭтотОбъект).Материалы.НайтиСтроки(Отбор);
		Исполнители = ТекущийОбъект(ЭтотОбъект).Исполнители.НайтиСтроки(Отбор);
		
		Если Материалы.Количество() > 0 Тогда
			
			Представление = Новый Массив;
			
			Для Каждого Материал Из Материалы Цикл
				
				Представление
					.Добавить(СтрШаблон("%1 - %2 (%3)", Материал.Номенклатура, Материал.Количество, Материал.ЕдиницаИзмерения));
				
			КонецЦикла;
			
			Строка.Материалы = СтрСоединить(Представление, "; ");
			
		КонецЕсли;
		
		Если Исполнители.Количество() > 0 Тогда
			
			Представление = Новый Массив;
			
			Для Каждого Исполнитель Из Исполнители Цикл
				
				Представление.Добавить(СтрШаблон("%1 - %2 (%3)", Исполнитель.Исполнитель, Исполнитель.Цех, Исполнитель.Процент));
				
			КонецЦикла;
			
			Строка.Исполнители = СтрСоединить(Представление, "; ");
			
		КонецЕсли;
		
		Представление = Новый Массив;
		
		Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
			
			Представление.Добавить(Строка(Строка.Контрагент));
			
			Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) Тогда
				
				Представление.Добавить(" [" + Строка(Строка.ДоговорВзаиморасчетов) + "]");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.Субподряд = СтрСоединить(Представление, "; ");
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты в тч Автоработы, для работы с пакетами
//
// Параметры:
//	ОбновитьДерево - Булево - После заполнения обновить дерево пакетов автоматически.
//
&НаСервере
Процедура ЗаполнитьИнформациюОПакетахНаСервере()
	
	ИнформацияОПакетах = РегистрыСведений.СоставПакетовРабот.ПолучитьДанныеПакетовДокумента(ЗаписьНаРемонт.ЗаказНаряд.Ссылка);
	
	Если ИнформацияОПакетах <> Неопределено И ЕстьРеквизит(ИнформацияОПакетах, "ИдентификаторРаботы") Тогда
		Отбор = Новый Структура("ИдентификаторРаботы");
		Для Каждого Авторабота Из ЗаписьНаРемонт.ЗаказНаряд.Автоработы Цикл
			Отбор.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
			НайденныеЗначения = ИнформацияОПакетах.НайтиСтроки(Отбор);
			Если НайденныеЗначения.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Авторабота, НайденныеЗначения[0]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверный формат результат процедуры ""РегистрыСведений.СоставПакетовРабот.ПолучитьДанныеПакетовДокумента"".'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДокументДляРедактирования(Документ, ИдентификаторФормы)
	
	Попытка
		РазблокироватьДанныеДляРедактирования(Документ, ИдентификаторФормы);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРекомендациюАвтомобиляНаСервере(РекомендацияАвтомобиля, НоваяСтрокаАвторабот)
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	
	Обработки.ПодборРекомендаций.ДобавитьРекомендациюВДокумент(Объект, ЭтотОбъект, РекомендацияАвтомобиля, НоваяСтрокаАвторабот);
	
	Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		
		НайденныеСтроки = Объект.Автоработы.НайтиСтроки(Новый Структура("Авторабота", РекомендацияАвтомобиля.Рекомендация));
		Если ИспользоватьУчетРабочегоВремени
			И НайденныеСтроки.Количество() > 0
			И ПустаяСтрока(НайденныеСтроки[0].ПакетРабот) Тогда
			
			ДобавитьНовуюАвтоработуВПакет(НайденныеСтроки[0].ПолучитьИдентификатор());
			ИзмененыПакетыРабот = Истина;
			
		КонецЕсли;
		
		КоличествоЗаписейВТаблице = ЗаписьНаРемонт.ЗаказНаряд.Товары.Количество();
		
		Если КоличествоЗаписейВТаблице > 0 Тогда
			
			ПоследняяСтрокаВТаблице = ЗаписьНаРемонт.ЗаказНаряд.Товары[КоличествоЗаписейВТаблице - 1];
			
		КонецЕсли;
		
	Иначе
		
		КоличествоЗаписейВТаблице = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.Количество();
		
		Если КоличествоЗаписейВТаблице > 0 Тогда
			
			ПоследняяСтрокаВТаблице = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары[КоличествоЗаписейВТаблице - 1];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоЗаписейВТаблице > 0 Тогда
		
		ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(ПоследняяСтрокаВТаблице, Новый Структура);
		
	КонецЕсли;
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	
КонецПроцедуры // ДобавитьРекомендациюАвтомобиляНаСервере()

&НаКлиенте
Процедура ДобавитьРекомендациюАвтомобиля(РекомендацияАвтомобиля)
	
	// Если будет добавлена новая строка в ТЧ Автоработы, то выполним подбор исполнителей и связанный работ.
	НоваяСтрокаАвторабот = Ложь;
	
	ДобавитьРекомендациюАвтомобиляНаСервере(РекомендацияАвтомобиля, НоваяСтрокаАвторабот);
	
	РежимРедактирования = ЗаписьНаРемонт.РежимРедактирования;
	
	Если РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		
		ЗаказНарядПричиныОбращенияПриАктивизацииСтроки(Неопределено);
		
	Иначе
		
		ЗаявкаНаРемонтПричиныОбращенияПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	
	Если НоваяСтрокаАвторабот Тогда
		
		НайденнаяСтрока = Объект.Автоработы.НайтиСтроки(Новый Структура("Авторабота", РекомендацияАвтомобиля.Рекомендация));
		
		Элементы["Автоработы" + РежимРедактирования].ТекущаяСтрока = НайденнаяСтрока[0].ПолучитьИдентификатор();
		
		ПараметрыОткрытия = Неопределено;
		
		Если РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
			
			ПараметрыОткрытия = Новый Структура("Автомобиль", ПолучитьАвтомобильЗаказНаряда());
			
		КонецЕсли;
		
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, РекомендацияАвтомобиля, ЭтотОбъект, ПараметрыОткрытия);
		
		Если РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
			ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ДобавитьРекомендациюАвтомобиля()

&НаСервере
Процедура ПроверитьСервиснуюКампанию()
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.СервиснаяКампания) Тогда
		Возврат;
	КонецЕсли;
	
	// получим сервисные компании
	СервисныеКомпании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(Объект.Автомобиль, Объект.Дата, Истина, Объект.Ссылка);
	
	Отбор = Новый Структура("СервиснаяКампания", Объект.СервиснаяКампания);
	НайденныеСтроки = СервисныеКомпании.НайтиСтроки(Отбор);
	
	Если СервисныеКомпании.Количество() = 0 ИЛИ НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Сервисная кампания <%1> недоступна для автомобиля <%2>.'"),
			Объект.СервиснаяКампания,
			Объект.Автомобиль
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Объект.СервиснаяКампания = Справочники.СервисныеКампании.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧастиДокумента()
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	
	ТекущиеДанные = Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные;
	
	Если Объект.ПричиныОбращения.Количество() > 0 И ТекущиеДанные <> Неопределено Тогда
		НайденныеСтроки = Объект.Автоработы.НайтиСтроки(
			Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Объект.Автоработы.Удалить(ТекущаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(
			Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Объект.Товары.Удалить(ТекущаяСтрока);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Объект.Автоработы.Очистить();
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Объект.ВспомогательныеАвтоработы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеПланированиеЗавершение(ЗапланированныеИнтервалы, Контекст) Экспорт
	
	Если ЗапланированныеИнтервалы = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УдалитьИнтервалы = Новый Массив;
	
	СтруктураПоиска = Новый Структура("Идентификатор");
	Для Каждого ЭлементПланирования Из ЗапланированныеИнтервалы Цикл
		
		Если УдалитьИнтервалы.Найти(ЭлементПланирования.Идентификатор) = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементПланирования);
			СтрокиСтарыхИнтервалов = ПланированиеИнтервалы.НайтиСтроки(СтруктураПоиска);
			
			// Удалим устаревшие данные
			Для Каждого ТекущаяСтрока Из СтрокиСтарыхИнтервалов Цикл
				ПланированиеИнтервалы.Удалить(ТекущаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		УдалитьИнтервалы.Добавить(ЭлементПланирования.Идентификатор);
		
		НовыйИнтервалПланирования = ПланированиеИнтервалы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйИнтервалПланирования, ЭлементПланирования);
		НовыйИнтервалПланирования.НормаВремениПредставление = ПланированиеРесурсовКлиентСервер
			.ПолучитьПредставлениеВремени(НовыйИнтервалПланирования.НормаВремени);
		
	КонецЦикла;
	
	ОбновитьКалендарь();
	ВыполняемыеДействия = Новый Структура("ОбновитьДеревоОбъектовПланирования", Истина);
	ОбработкаРезультатаВыполненияДействия(ВыполняемыеДействия);
	ПризнакЗаписиПланирования = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗагрузкиИзВнешнегоКаталога(АдресЗагрузки, ДополнительныеПараметры)
	
	МассивАвторабот.Очистить();
	
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры, "ИдентификаторПричиныОбращения", Неопределено);
	ЕстьИдентификаторПричиныОбращения = (НЕ ИдентификаторПричиныОбращения = Неопределено);
	
	ОбъектДокумента 	= ТекущийОбъект(ЭтотОбъект);
	МенеджерДокумента 	= ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектДокумента.Ссылка);
	
	ПараметрыДействия 	= МенеджерДокумента.ПолучитьПараметрыДействия(ОбъектДокумента);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	// Заблокируем пересчет скидок
	ПересчитатьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитатьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ПараметрыДействия", ПараметрыДействия);
	
	Если ЕстьИдентификаторПричиныОбращения Тогда
		ПараметрыЗагрузки.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	Автосервис.ЗагрузитьДанныеИзВнешнихКаталогов(ЭтотОбъект, ОбъектДокумента, АдресЗагрузки, ПараметрыЗагрузки);
	
	Если НЕ ПараметрыЗагрузки.Свойство("РезультатЗагрузки") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПараметрыЗагрузки.РезультатЗагрузки;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАвторабот, РезультатЗагрузки.МассивАвторабот);
	
	Если ПересчитатьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		Если РезультатЗагрузки.ЗагруженыАвтоработы Тогда
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ОбъектДокумента, ПараметрыДействия, "Автоработы");
		КонецЕсли;
		Если РезультатЗагрузки.ЗагруженыТовары Тогда
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ОбъектДокумента, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, ОбъектДокумента);
	
КонецПроцедуры // ОбработкаРезультатаПодбораАвторабот()

&НаКлиенте
Функция ЗаполнитьКодыМаркировкиДляПроверки()
	
	Возврат ЗаполнитьКодыМаркировкиДляПроверкиНаСервере(ЗаписьНаРемонт.ЗаказНаряд.Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьКодыМаркировкиДляПроверкиНаСервере(Ссылка)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаркировкаТоваровВПроизводствеОстатки.GTIN КАК GTIN,
	|	МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК СерийныйНомер,
	|	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	|	МаркировкаТоваровВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	""(01)"" + МаркировкаТоваровВПроизводствеОстатки.GTIN + ""(21)"" + МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК КодМаркировки
	|ПОМЕСТИТЬ КодыМаркировкиПроизводства
	|ИЗ
	|	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК МаркировкаТоваровВПроизводствеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КодыМаркировкиПроизводства.GTIN КАК GTIN,
	|	КодыМаркировкиПроизводства.СерийныйНомер КАК СерийныйНомер,
	|	ЕСТЬNULL(СостоянияКодовМаркировкиСрезПоследних.КодМаркировки, КодыМаркировкиПроизводства.КодМаркировки) КАК КодМаркировки
	|ИЗ
	|	КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКодовМаркировки.СрезПоследних(
	|				,
	|				(Номенклатура, ХарактеристикаНоменклатуры, GTIN, СерийныйНомер) В
	|					(ВЫБРАТЬ
	|						КодыМаркировкиПроизводства.Номенклатура КАК Номенклатура,
	|						КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|						КодыМаркировкиПроизводства.GTIN КАК GTIN,
	|						КодыМаркировкиПроизводства.СерийныйНомер КАК СерийныйНомер
	|					ИЗ
	|						КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства)) КАК СостоянияКодовМаркировкиСрезПоследних
	|		ПО КодыМаркировкиПроизводства.Номенклатура = СостоянияКодовМаркировкиСрезПоследних.Номенклатура
	|			И КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры = СостоянияКодовМаркировкиСрезПоследних.ХарактеристикаНоменклатуры
	|			И КодыМаркировкиПроизводства.GTIN = СостоянияКодовМаркировкиСрезПоследних.GTIN
	|			И КодыМаркировкиПроизводства.СерийныйНомер = СостоянияКодовМаркировкиСрезПоследних.СерийныйНомер";
	Запрос.УстановитьПараметр("ЗаказНаряд", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.КодМаркировки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекстаСнятияПовторногоОбращения(
		Результат,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричинаСнятияПовторногоОбращения = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформациюПоСнятиюПовторногоОбращения()
	
	СнятоПовторноеОбращение =
		(ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка)
		ИЛИ СнятоПовторноеОбращениеВСервис) И НЕ ЗаписьНаРемонт.ЗаявкаНаРемонт.ПовторноеОбращение
		И ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.АвторСнятияПовторногоОбращения);
	Элементы.ИнформацияСнятииПовторногоОбращения.Видимость = СнятоПовторноеОбращение;
	Элементы.ПричинаСнятияПовторногоОбращения.Видимость = СнятоПовторноеОбращение;
	Элементы.ИнформацияСнятииПовторногоОбращения.Заголовок =
		СтрШаблон(НСтр("ru = 'Снял %1 от %2'"),
		Строка(ЗаписьНаРемонт.ЗаявкаНаРемонт.АвторСнятияПовторногоОбращения),
		Формат(ЗаписьНаРемонт.ЗаявкаНаРемонт.ДатаСнятияПовторногоОбращения, ""));
	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьСкидок()
	
	БлокироватьПерерасчетСкидок = ТекущийОбъект(ЭтотОбъект).БлокироватьПерерасчетСкидок;
	СпособВыбораСкидки = ПравоПользователя("СпособВыбораСкидки", ТекущийОбъект(ЭтотОбъект));
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	// Автоработы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыПроцентСкидки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСуммаСкидки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСкидкаНаТовар" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыПроцентСкидкиСтроки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСуммаСкидкиСтроки" + ЗаписьНаРемонт.РежимРедактирования,
		"ТолькоПросмотр",
		БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьТОНаСервере(Автомобиль)
	
	РегистрыСведений.ЗапланированныеТО.ЧтениеЗначенияРегистраСведения(Автомобиль, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииТелефона = Новый Структура;
	ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
	ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КомментарийТелефонаЗаявкаНаРемонт = ЗначениеКомментарияКонтактнойИнформацииСервер(ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКомментарияКонтактнойИнформацииСервер(КонтактнаяИнформация)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(КонтактнаяИнформация);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент)
	
	ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ТекущийОбъект(ЭтотОбъект));
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ТекущийОбъект(ЭтотОбъект).ПричиныОбращения,
		ТекущийОбъект(ЭтотОбъект).Автоработы,
		ТекущийОбъект(ЭтотОбъект).Товары
	);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элемент.ТекущиеДанные,
		Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования],
		ИспользоватьПричиныОбращений
	);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элемент.ТекущиеДанные,
		Элементы["Товары" + ЗаписьНаРемонт.РежимРедактирования],
		ИспользоватьПричиныОбращений
	);
	
КонецПроцедуры

#Область Обработчики_событий_изменения_реквизитов_объекта_ЗАЯВКА_НА_РЕМОНТ

#Область Шапка_заявки_на_ремонт

// Обработчик события возникающего на клиенте при изменении данных реквизитов группы "Временные рамки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаписьНаРемонтВременныеРамкиПриИзменении(Элемент = Неопределено)
	
	ТекущийОбъект(ЭтотОбъект).ДатаНачала = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(ДатаНачалаПредставление, СмещениеЧасовогоПояса);
	
	ТекущийОбъект(ЭтотОбъект).ДатаОкончания = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(ДатаОкончанияПредставление, СмещениеЧасовогоПояса);
	
	Элементы.ПробегЗаявкаНаРемонтРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль, КлючевыеДатыПробегов(ЗаписьНаРемонт.ЗаявкаНаРемонт));
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтПовторноеОбращениеПриИзмененииНаСервере()
	
	Если НЕ ЗаписьНаРемонт.ЗаявкаНаРемонт.ПовторноеОбращение Тогда
		
		ЗаписьНаРемонт.ЗаявкаНаРемонт.АвторСнятияПовторногоОбращения = Пользователи.ТекущийПользователь();
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ДатаСнятияПовторногоОбращения = ТекущаяДатаСеанса();
		СнятоПовторноеОбращениеВСервис = Истина;
		
	Иначе
		
		ЗаписьНаРемонт.ЗаявкаНаРемонт.АвторСнятияПовторногоОбращения = Неопределено;
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ДатаСнятияПовторногоОбращения = Неопределено;
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричинаСнятияПовторногоОбращения = "";
		СнятоПовторноеОбращениеВСервис = Ложь;
		
	КонецЕсли;
	
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПовторноеОбращениеПриИзменении(Элемент)
	
	ЗаявкаНаРемонтПовторноеОбращениеПриИзмененииНаСервере();
	
	Если НЕ ЗаписьНаРемонт.ЗаявкаНаРемонт.ПовторноеОбращение Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОкончаниеВводаТекстаСнятияПовторногоОбращения",
			ЭтотОбъект);
		
		ПоказатьВводСтроки(
			ОбработчикОповещения,
			ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричинаСнятияПовторногоОбращения,
			НСтр("ru = 'Комментарий к снятию признака повторного обращения'"),
			500,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Заказчик" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаявкаНаРемонтЗаказчикПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ПараметрыДействия);

	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик, ПараметрыДействия);
	
	// Обновим списки выбора КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик, ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты", "ПредставлениеТелефонаЗаявкаНаРемонт,КонтактнаяИнформацияЗаявкаНаРемонт");
	КомментарийТелефонаЗаявкаНаРемонт = ЗначениеКомментарияКонтактнойИнформацииСервер(ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой);
	
	// заполним список выбора автомобилями контрагента
	АвтомобилиКонтрагента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобилиКонтрагента", Новый Массив);
	Элементы.АвтомобильЗаявкаНаРемонт.СписокВыбора.ЗагрузитьЗначения(АвтомобилиКонтрагента);
	
	УстановитьСвойстваПоляВводаТелефона();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик,
		"МеткиЗаказчикаЗаявкиНаРемонт");
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент,
		"МеткиКонтрагентаЗаявкиНаРемонт");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Заказчик".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗаявкаНаРемонтЗаказчикПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеВыводитьСообщенияНаСервере", Истина);
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьАвтомобиль", Ложь);
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	ПараметрыДействия.Вставить("КэшЗаказчик"  , КэшЗаказчик);

	ЗаявкаНаРемонтЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	
	КэшПлательщик = ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент;
	КэшЗаказчик   = ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик;
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтКонтрагентПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.ЗаявкаНаРемонт.КонтрагентПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ПараметрыДействия);
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент,
		"МеткиКонтрагентаЗаявкиНаРемонт");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтКонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеВыводитьСообщенияНаСервере", Истина);
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	ПараметрыДействия.Вставить("КэшЗаказчик"  , КэшЗаказчик);
	
	ЗаявкаНаРемонтКонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	КэшПлательщик = ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.ЗаявкаНаРемонт.ДоговорВзаиморасчетовПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтомобильПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.ЗаявкаНаРемонт.АвтомобильПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ПараметрыДействия);
	
	Элементы.ПробегЗаявкаНаРемонтРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль, КлючевыеДатыПробегов(ЗаписьНаРемонт.ЗаявкаНаРемонт));
	
	ЗапланироватьТОНаСервере(ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль);
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль, ПараметрыДействия);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьЗаказчика", Ложь);
	
	ЗаявкаНаРемонтАвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	ПроверитьРекомендацииПоАвтомобилю();
	
	ПроверитьСервиснуюКампанию();
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильЗаявкаНаРемонтАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтомобильАвтоПодборПоВладельцу(ЗаписьНаРемонт.ЗаявкаНаРемонт.Заказчик, Элемент, Текст,
		ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтМодельПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтМодельПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтМодельПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтВариантКомплектацииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтГосНомерПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	АвтомобилиСервер.ПроверитьКорректностьГосНомера(ТекущийОбъект(ЭтотОбъект), ЗаписьНаРемонт.ЗаявкаНаРемонт.ГосНомер, Истина);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтГосНомерПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтГосНомерПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтVINПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтVINПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтVINПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтСервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.СервиснаяКампания.ВидРемонта) Тогда
		
		Если  ЗаписьНаРемонт.ЗаявкаНаРемонт.СервиснаяКампания.ВидРемонта <> ЗаписьНаРемонт.ЗаявкаНаРемонт.ВидРемонта Тогда
			ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта", Истина);
		Иначе
			
			ЗадаватьВопросОбОчисткеТабличныхЧастей = (ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.Количество() > 0
				ИЛИ ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.Количество() > 0 
				ИЛИ ЗаписьНаРемонт.ЗаявкаНаРемонт.ВспомогательныеАвтоработы.Количество() > 0);
			
			Если ЗадаватьВопросОбОчисткеТабличныхЧастей Тогда
				ПараметрыДействия.Вставить("ЗадаватьВопросОбОчисткеТабличныхЧастей", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписьНаРемонт.ЗаявкаНаРемонт.СервиснаяКампания.Автоработы.Количество() > 0
		И (ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеДеталейЗаказНаряда)
		ИЛИ ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеРаботЗаказНаряда)) Тогда
		
		ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Истина);
		
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтСервиснаяКампанияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтСервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтМаркетинговаяПрограммаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.ЗаявкаНаРемонт.МаркетинговаяПрограммаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтМаркетинговаяПрограммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтМаркетинговаяПрограммаПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтВидРемонтаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.ЗаявкаНаРемонт.ВидРемонтаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сервисная кампания".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗаявкаНаРемонтСервиснаяКампанияРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтосервисКлиент.ОткрытьФормуВыбораСервиснойКомпании(ЭтотОбъект, ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтВидРемонтаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	ПараметрыДействия.Вставить("КэшЗаказчик"  , КэшЗаказчик);

	
	ЗаявкаНаРемонтВидРемонтаПриИзмененииНаСервере(ПараметрыДействия);
	
	СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(ЗаписьНаРемонт.ЗаявкаНаРемонт, ЭтотОбъект, ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	КэшВидРемонта = ЗаписьНаРемонт.ЗаявкаНаРемонт.ВидРемонта;
	КэшПлательщик = ЗаписьНаРемонт.ЗаявкаНаРемонт.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтЦехПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.ЗаявкаНаРемонт.ЦехПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтЦехПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтЦехПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОписаниеПричиныОбращенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОписаниеПричиныОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОписаниеПричиныОбращенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ПричиныОбращенийКлиент
			.ДобавитьПричиныОбращенияВДокумент(ВыбранноеЗначение, ЗаписьНаРемонт.ЗаявкаНаРемонт);
		
		ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(
			ЗаписьНаРемонт.ЗаявкаНаРемонт, Элементы.ОписаниеПричиныОбращенияЗаявкаНаРемонт);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтОписаниеПричиныОбращенияПриИзменении(Элемент)
	
	ПерваяСтрокаПричиныОбращения = ПричиныОбращенийКлиент.ПерваяСтрокаПричиныОбращения(ЗаписьНаРемонт.ЗаявкаНаРемонт);
	ПерваяСтрокаПричиныОбращения.ПричинаОбращенияСодержание = ЗаписьНаРемонт.ЗаявкаНаРемонт.ОписаниеПричиныОбращения;
	
	Если НЕ ЗначениеЗаполнено(ПерваяСтрокаПричиныОбращения.ИдентификаторПричиныОбращения) Тогда
		ПричинаОбращенияИзменилась = Истина;
	КонецЕсли;
	
	// Если изменился только текст содержания - выполнять обработку изменения причины обращения не нужно.
	Если НЕ ПричинаОбращенияИзменилась Тогда
		ПризнакЗаписиПланирования = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеПричиныОбращения(ПерваяСтрокаПричиныОбращения);
	ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ЗаписьНаРемонт.ЗаявкаНаРемонт, Ложь);
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары);
	//@skip-check unknown-method-property
	Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущаяСтрока = ПерваяСтрокаПричиныОбращения.ПолучитьИдентификатор();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при нажатии на надпись "Взаиморасчеты".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект,,, ЗаписьНаРемонт.ЗаявкаНаРемонт);
	
КонецПроцедуры // НадписьВзаиморасчетыНажатие()

&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона        = "";
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой = "";
		УстановитьСвойстваПоляВводаТелефона();
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.     
	ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона        = Текст;
	ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииТелефона);
	
	УстановитьСвойстваПоляВводаТелефона();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона Тогда
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона        = Элемент.ТекстРедактирования;
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
	ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона,
		КомментарийТелефонаЗаявкаНаРемонт
	);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТелефонИзменен = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона        = ВыбранноеЗначение.Представление;
		КомментарийТелефонаЗаявкаНаРемонт                          = ВыбранноеЗначение.Комментарий;
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой = ВыбранноеЗначение.Значение;
		ТелефонИзменен = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона        = ВыбранноеЗначение;
		КомментарийТелефонаЗаявкаНаРемонт                          = "";
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(ВыбранноеЗначение, ВидКонтактнойИнформацииТелефона);
		ТелефонИзменен = Истина;
		
	КонецЕсли;
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ТелефонИзменен Тогда
		УправлениеДиалогомНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Элемент, СтандартнаяОбработка)
	
	ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона        = "";
	КомментарийТелефонаЗаявкаНаРемонт                          = "";
	ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой = "";
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ЗаписьНаРемонт.ЗаявкаНаРемонт.АдресЭлектроннойПочты        = "";
		ЗаписьНаРемонт.ЗаявкаНаРемонт.АдресЭлектроннойПочтыСтрокой = "";
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.
	ЗаписьНаРемонт.ЗаявкаНаРемонт.АдресЭлектроннойПочты        = Текст;
	ЗаписьНаРемонт.ЗаявкаНаРемонт.АдресЭлектроннойПочтыСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииЭлектроннойПочты);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыОчистка(Элемент, СтандартнаяОбработка)
	
	ЗаписьНаРемонт.ЗаявкаНаРемонт.АдресЭлектроннойПочты        = "";
	ЗаписьНаРемонт.ЗаявкаНаРемонт.АдресЭлектроннойПочтыСтрокой = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСводногоРемонтногоЗаказаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ);
	
	ОткрытьФорму(
		"Документ.СводныйРемонтныйЗаказ.ФормаОбъекта",
		ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Причины_обращения_заявки_на_ремонт

&НаКлиенте
Процедура ПричиныОбращенияЗаявкаНаРемонтПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если (НоваяСтрока И ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения)) ИЛИ Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ТекущийОбъект(ЭтотОбъект));
		ПричиныОбращенийКлиент
			.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.АвтоработыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
		ПричиныОбращенийКлиент
			.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.ТоварыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПриАктивизацииСтроки(Элемент)
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.АвтоработыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.ТоварыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПриИзменении(Элемент)
	
	ПричиныОбращенийКлиент
		.ОбновитьОписаниеПричиныОбращения(ТекущийОбъект(ЭтотОбъект), Элементы.ОписаниеПричиныОбращенияЗаявкаНаРемонт);
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ТекущийОбъект(ЭтотОбъект));
		
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПередУдалением(Элемент, Отказ)
	
	Если ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения.Количество() > 1 Тогда
		
		Отбор = Новый Структура("ИдентификаторПричиныОбращения", Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		СтрокиУдаляемогоЭлементаАвтоработы = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиСтроки(Отбор);
		СтрокиУдаляемогоЭлементаТовары = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиСтроки(Отбор);
		
		Если НЕ СтрокиУдаляемогоЭлементаАвтоработы.Количество() = 0 ИЛИ НЕ СтрокиУдаляемогоЭлементаТовары.Количество() = 0 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияПозицийВДругуюПричинуОбращеий");
			ДополнительныеПараметры.Вставить("ИмяКоманды", "");
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить("Перенести", "Перенести в другую причину обращения");
			КнопкиВопроса.Добавить("Удалить", "Удалить позиции");
			КнопкиВопроса.Добавить("Отмена", "Отменить удаление причины обращения");
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Выберите что необходимо сделать с Автоработами/Товарами удаляемой причины обращения?'"), КнопкиВопроса);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПричиныОбращенийКлиент.СброситьИдентификаторПричиныОбращения(
			ЗаписьНаРемонт.ЗаявкаНаРемонт, Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПослеУдаления(Элемент)
	
	ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПричинаОбращенияСодержаниеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные;
	
	Если ПричинаОбращенияИзменилась ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПричинаОбращения) Тогда
		
		ОбработатьИзменениеПричиныОбращения(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПричинаОбращенияСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущаяСтрока;
	ТекущаяПричинаОбращения = ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения.НайтиПоИдентификатору(ТекущаяСтрока).ПричинаОбращения;
	
	ПричиныОбращенийКлиент.ОткрытьФормуВыбораПричиныОбращения(Элемент, ТекущаяПричинаОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПричинаОбращенияСодержаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.НачатьРедактированиеПричины(Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПричинаОбращенияСодержаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Модель", ЗаписьНаРемонт.ЗаявкаНаРемонт.Модель);
		ДопПараметры.Вставить("Комплектация", ЗаписьНаРемонт.ЗаявкаНаРемонт.ВариантКомплектации);
		ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(
			Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, ВыбранноеЗначение, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПричиныОбращенияПричинаОбращенияСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияЗаявкаНаРемонтПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Причина = ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения.НайтиПоИдентификатору(Строка);
		
		Если Причина <> Неопределено И ПараметрыПеретаскивания.Значение.Количество() > 0
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции") И ПараметрыПеретаскивания.Значение[0].Свойство("ИдентификаторПричиныОбращения") Тогда
			
			Для Каждого ПереносимаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
				
				ПереносимаяСтрока.ИдентификаторПричиныОбращения = Причина.ИдентификаторПричиныОбращения;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.АвтоработыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущиеДанные, Элементы.ТоварыЗаявкаНаРемонт, ИспользоватьПричиныОбращений);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область Автоработы_заявка_на_ремонт_обработчики_табличного_поля

&НаКлиенте
Процедура АвтоработыЗаявкаНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработчикСтрокаВыбор(ВыбраннаяСтрока, Поле, "Автоработы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПередУдалением(Элемент, Отказ, ПослеВопроса = Ложь)
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Авторабота)
		И НЕ ПослеВопроса Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрок");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элементы.АвтоработыЗаявкаНаРемонт);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"),
			РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
	ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(
		ОбщегоНазначенияАвтосалонКлиент.ИдентификаторыТаблицыВСтроки(Элемент.ВыделенныеСтроки, ТекущийОбъект(ЭтотОбъект).Автоработы),
		ТекущийОбъект(ЭтотОбъект).Исполнители,
		"ИдентификаторРаботы");
		
	Если НЕ Отказ Тогда
		
		Объект = ТекущийОбъект(ЭтотОбъект);
		
		ВыделенныеСтрокиКоличество = Элементы.АвтоработыЗаявкаНаРемонт.ВыделенныеСтроки.Количество();
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			ВыделеннаяСтрока = Элементы.АвтоработыЗаявкаНаРемонт.ВыделенныеСтроки[0];
			НайденнаяСтрока = Объект.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Объект.Автоработы.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
	ТекущиеДанные = Элементы.АвтоработыЗаявкаНаРемонт.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторРаботы) ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.Исполнители = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения)
		И Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения.НайтиПоИдентификатору(
			Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущаяСтрока
		);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.АвтоработыЗаявкаНаРемонт.ТекущиеДанные;
	
	Если НоваяСтрока
		И НЕ ОтменаРедактирования 
		И (НЕ ТекущиеДанные = Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнители)) Тогда
		ЗаполнениеИсполнителей(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования,
		,
		ТекущийОбъект(ЭтотОбъект)
	);
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	ТекОбъект = ТекущийОбъект(ЭтотОбъект);
	
	// После удаления строки необходимо пересчитать скидки/наценки.
	УправлениеДиалогомАльфаАвтоСервер.ПересчитатьСкидкиНаценки(ЭтотОбъект, ТекОбъект,, ПараметрыДействия);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, ТекОбъект);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(ТекОбъект.ПричиныОбращения,
	ТекОбъект.Автоработы, ТекОбъект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПослеУдаления(Элемент)
	
	АвтоработыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыЗаявкаНаРемонтПриИзменении(Элемент)
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область Автоработы_заявка_на_ремонт_обработчики_реквизитов

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыАвтоработаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыАвтоработаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЗаявкаНаРемонтАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия);
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.АвтоработыЗаявкаНаРемонт.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(ТекущийОбъект(ЭтотОбъект), ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыКоличествоПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыАвтоработаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыКоличествоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыКоличествоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыНормочасПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыНормочасПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыНормочасПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыНормочасПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыКоэффициентПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыКоэффициентПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыКоэффициентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыКоэффициентПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыЦенаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыЦенаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыЦенаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыЦенаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыСуммаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыСуммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыСуммаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыПроцентСкидкиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПроцентСкидкиПриИзменении(Элемент)
	
	ПараметрыДействия = Неопределено;
	ЗаявкаНаРемонтАвтоработыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаСкидкиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыСуммаСкидкиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСкидкаНаТоварПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыСкидкаНаТоварПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыПроцентСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);

	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаВсегоПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСтавкаНДСПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтАвтоработыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаНДСПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыСуммаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтАвтоработыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтАвтоработыИсполнителиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПодборИсполнителей();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.НайтиПоИдентификатору(
		Элементы.АвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(
		ЗаписьНаРемонт.ЗаявкаНаРемонт,
		ТекущиеДанные,
		ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Элемент)
	
	АвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Товары_заявка_на_ремонт_обработчики_табличного_поля

&НаКлиенте
Процедура ТоварыЗаявкаНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработчикСтрокаВыбор(ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломДобавления(
		ЭтотОбъект,
		Элемент,
		Отказ,
		Копирование,
		Родитель,
		Группа,
		Параметр
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПередНачаломИзменения(Элемент, Отказ)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПередУдалением(Элемент, Отказ, ПослеВопроса = Ложь)
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура)
		И НЕ ПослеВопроса Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрокТоваров");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элементы.ТоварыЗаявкаНаРемонт);
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"),
			РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		
		Объект = ТекущийОбъект(ЭтотОбъект);
		
		ВыделенныеСтрокиКоличество = Элементы.ТоварыЗаявкаНаРемонт.ВыделенныеСтроки.Количество();
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			ВыделеннаяСтрока = Элементы.ТоварыЗаявкаНаРемонт.ВыделенныеСтроки[0];
			НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Объект.Товары.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// установим идентификатор причины обращения
	ТекущиеДанные = Элементы.ТоварыЗаявкаНаРемонт.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения)
		И Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения.
			НайтиПоИдентификатору(Элементы.ПричиныОбращенияЗаявкаНаРемонт.ТекущаяСтрока);
		
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент
		.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования,, ТекущийОбъект(ЭтотОбъект));
	ОбновитьПоказателиТоваровЗаявкаНаРемонт(ЭтотОбъект);
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(ТекущийОбъект(ЭтотОбъект), "Товары", ПараметрыДействия);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(ТоварыНоменклатурыТекстПодвала, ТекущийОбъект(ЭтотОбъект));
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьКолонкиСуммаВсего(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПослеУдаления(Элемент)
	
	ЗаявкаНаРемонтТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаявкаНаРемонтПриИзменении(Элемент)
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Товары_заявка_на_ремонт_обработчики_реквизитов

&НаСервере
Процедура ЗаявкаНаРемонтТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыНоменклатураПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
	// Установим видимость колонки "Характеристика" (пришлось отказаться от основного механизма из-за различия в наименованиях реквизитов)
	ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыНоменклатураПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ТекущиеДанные = Элементы.ТоварыЗаявкаНаРемонт.ТекущиеДанные;
	
	ЗаявкаНаРемонтТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия);
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(ТекущийОбъект(ЭтотОбъект), ТекущиеДанные, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыХарактеристикаНоменклатурыПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыКоличествоПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыКоличествоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыЕдиницаИзмеренияПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыЦенаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыЦенаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыСуммаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыСуммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыПроцентСкидкиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыСуммаСкидкиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыСкидкаНаТоварПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыПроцентСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыСуммаСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);

	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыСуммаВсегоПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаявкаНаРемонтТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРемонтТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаявкаНаРемонт.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаРемонт.ТоварыСтавкаНДСПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Неопределено;
	ЗаявкаНаРемонтТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураЗаявкаНаРемонтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.Модель) Тогда
		Возврат;
	КонецЕсли;
	
	// Установим отбор при изменении номенклатуры
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Модель",      ЗаписьНаРемонт.ЗаявкаНаРемонт.Модель);
	ПараметрыФормы.Вставить("ОтборНоменклатурыПоПрименяемости");
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры // ТоварыНоменклатураНачалоВыбора()
#КонецОбласти

#Область Вспомогательные_автоработы_заявка_на_ремонт_обработчики_табличного_поля

&НаКлиенте
Процедура ЗаявкаНаРемонтВспомогательныеАвтоработыПриИзменении(Элемент)
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтВспомогательныеАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторРаботы) Тогда
		Элемент.ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область Вспомогательные_автоработы_заявка_на_ремонт_обработчики_реквизитов

&НаСервере
Процедура ЗаявкаНаРемонтВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = ЗаписьНаРемонт.ЗаявкаНаРемонт.ВспомогательныеАвтоработы.НайтиПоИдентификатору(
		Элементы.ВспомогательныеАвтоработыЗаявкаНаРемонт.ТекущаяСтрока);
		
	Документы.ЗаявкаНаРемонт.ВспомогательныеАвтоработыАвтоработаПриИзменении(ЗаписьНаРемонт.ЗаявкаНаРемонт, ТекущиеДанные,
		ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтВспомогательныеАвтоработыАвтоработаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	
	ЗаявкаНаРемонтВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия);
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.ВспомогательныеАвтоработыЗаявкаНаРемонт.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(ТекущийОбъект(ЭтотОбъект), ТекущиеДанные, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область Обработчики_событий_изменения_реквизитов_объекта_ЗАКАЗ_НАРЯД

#Область Шапка_заказ_наряда

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сервисная кампания".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядСервиснаяКампанияРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтосервисКлиент.ОткрытьФормуВыбораСервиснойКомпании(ЭтотОбъект, ПолучитьАвтомобильЗаказНаряда());
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид ремонта".
//
&НаКлиенте
Процедура ЗаказНарядВидРемонтаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	
	ЗаказНарядВидРемонтаПриИзмененииНаСервере(ПараметрыДействия);
	
	СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(ЗаписьНаРемонт.ЗаказНаряд, ЭтотОбъект, ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	КэшВидРемонта = ЗаписьНаРемонт.ЗаказНаряд.ВидРемонта;
	КэшПлательщик = ЗаписьНаРемонт.ЗаказНаряд.Контрагент;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вид ремонта" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядВидРемонтаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ВидРемонтаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыДействия);
	
	ПересчитатьПлановыеПоказателиПоТО(НЕ ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.ПробегСледующегоТО), НЕ ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.ДатаСледующегоТО));
	ЗапланироватьТОНаСервере(АвтомобильСРЗ);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цех"
&НаКлиенте
Процедура ЗаказНарядЦехПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ЗаказНарядЦехПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цех" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядЦехПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ЦехПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сводный ремонтный заказ".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядСводныйРемонтныйЗаказПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ЗаказНарядСводныйРемонтныйЗаказПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // СводныйРемонтныйЗаказПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сводный ремонтный заказ" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядСводныйРемонтныйЗаказПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	АвтомобильСРЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ, "Автомобиль");
	
	// получим рекомендации автомобиля
	ПроверитьРекомендацииПоАвтомобилю();
	
	// Установим плательщика по виду ремонта
	Документы.ЗаказНаряд.УстановитьГарантийногоПлательщика(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыДействия);
	
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		АвтомобильСРЗ, КлючевыеДатыПробегов(ТекущийОбъект(ЭтотОбъект)));
	
	Если НЕ ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.Пробег) Тогда
		
		ДатаПробега = ?(ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.ДатаНачала), ЗаписьНаРемонт.ЗаказНаряд.ДатаНачала, ЗаписьНаРемонт.ЗаказНаряд.Дата);
		ЗаписьНаРемонт.ЗаказНаряд.Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			АвтомобильСРЗ, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, ДатаПробега);
		
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик,
		"МеткиЗаказчикаЗаказНаряда");
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		ЗаписьНаРемонт.ЗаказНаряд.Контрагент,
		"МеткиКонтрагентаЗаказНаряда");
	
КонецПроцедуры // СводныйРемонтныйЗаказПриИзмененииНаСервере()

&НаКлиенте
Процедура ЗаказНарядСводныйРемонтныйЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("СоздаватьЗН", Ложь);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ);
	
	ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаВыбора", ПараметрыОткрытия, Элемент, КлючУникальности,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Состояние".
&НаКлиенте
Процедура ЗаказНарядСостояниеПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядСостояниеПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Состояние" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядСостояниеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ЗаписьНаРемонт.ЗаказНаряд.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		И ЗаписьНаРемонт.ЗаказНаряд.СписаниеТоваровПоСебестоимости
		И ЗаписьНаРемонт.ЗаказНаряд.Товары.Количество() > 0 Тогда
		
		Документы.ЗаказНаряд.ЗаполнитьТоварыПоСебестоимости(ЗаписьНаРемонт.ЗаказНаряд, 
			ЗаписьНаРемонт.ЗаказНаряд.СписаниеТоваровПоСебестоимостиВключатьНДС);
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Стоимость деталей по заказ-наряду заполнена в соответствии с себестоимостью.'")
		);
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизитов группы "Временные рамки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядВременныеРамкиПриИзменении(Элемент = Неопределено)
	
	ТекущийОбъект(ЭтотОбъект).ДатаНачала = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(ДатаНачалаПредставление, СмещениеЧасовогоПояса);
	
	ТекущийОбъект(ЭтотОбъект).ДатаОкончания = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(ДатаОкончанияПредставление, СмещениеЧасовогоПояса);
	
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		АвтомобильСРЗ, КлючевыеДатыПробегов(ЗаписьНаРемонт.ЗаказНаряд));
	
	Если ТекущийОбъект(ЭтотОбъект).Состояние <> ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт")
		И (Элемент <> Неопределено И (Элемент.Имя = "ДатаОкончанияЗаказНаряд" ИЛИ Элемент.Имя = "ВремяОкончанияЗаказНаряд")) Тогда
		ОбновитьОстаткиАвансов();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядКонтрагентПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	
	// Обработаем событие в контексте сервера
	ЗаказНарядКонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	КэшПлательщик = ЗаписьНаРемонт.ЗаказНаряд.Контрагент;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Контрагент" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядКонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.КонтрагентПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыДействия);
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(ЗаписьНаРемонт.ЗаказНаряд.Контрагент, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		ЗаписьНаРемонт.ЗаказНаряд.Контрагент,
		"МеткиКонтрагентаЗаказНаряда");
	
КонецПроцедуры // КонтрагентПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ДоговорВзаиморасчетов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядДоговорВзаиморасчетовПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ЗаказНарядДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ДоговорВзаиморасчетов" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ДоговорВзаиморасчетовПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыДействия);
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(ЗаписьНаРемонт.ЗаказНаряд.ДоговорВзаиморасчетов, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сервисная кампания".
&НаКлиенте
Процедура ЗаказНарядСервиснаяКампанияПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ЗаказНарядСервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сервисная кампания" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядСервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.СервиснаяКампания)
		И ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.СервиснаяКампания.ВидРемонта)
		И (НЕ ЗаписьНаРемонт.ЗаказНаряд.СервиснаяКампания.ВидРемонта = ЗаписьНаРемонт.ЗаказНаряд.ВидРемонта) Тогда
		
		ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта", Истина);
		
	КонецЕсли;
	
	Если 
		ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.СервиснаяКампания)
		И ЗаписьНаРемонт.ЗаказНаряд.СервиснаяКампания.Автоработы.Количество() > 0
	Тогда
		Если РедактированиеРабот ИЛИ РедактированиеНоменклатуры Тогда
			ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОписаниеПричиныОбращенияПриИзменении(Элемент)
	
	ПерваяСтрокаПричиныОбращения = ПричиныОбращенийКлиент.ПерваяСтрокаПричиныОбращения(ЗаписьНаРемонт.ЗаказНаряд);
	ПерваяСтрокаПричиныОбращения.ПричинаОбращенияСодержание = ЗаписьНаРемонт.ЗаказНаряд.ОписаниеПричиныОбращения;
	
	Если НЕ ЗначениеЗаполнено(ПерваяСтрокаПричиныОбращения.ИдентификаторПричиныОбращения) Тогда
		ПричинаОбращенияИзменилась = Истина;
	КонецЕсли;
	
	// Если изменился только текст содержания - выполнять обработку изменения причины обращения не нужно.
	Если НЕ ПричинаОбращенияИзменилась Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check unknown-method-property
	ОбработатьИзменениеПричиныОбращения(ПерваяСтрокаПричиныОбращения);
	ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ЗаписьНаРемонт.ЗаказНаряд, Ложь);
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаказНаряд.Автоработы,
		ЗаписьНаРемонт.ЗаказНаряд.Товары);
	//@skip-check unknown-method-property
	Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока = ПерваяСтрокаПричиныОбращения.ПолучитьИдентификатор();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОписаниеПричиныОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ПричиныОбращений.ФормаВыбора", ПараметрыОткрытия, Элемент, Элемент,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОписаниеПричиныОбращенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ПричиныОбращенийКлиент
			.ДобавитьПричиныОбращенияВДокумент(ВыбранноеЗначение, ЗаписьНаРемонт.ЗаказНаряд);
		
		ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(
			ЗаписьНаРемонт.ЗаказНаряд, Элементы.ОписаниеПричиныОбращенияЗаказНаряд);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядОписаниеПричиныОбращенияАвтоПодбор(Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Отбор", Новый Структура());
	ПараметрыПодбора.Вставить("СтрокаПоиска", Текст);
	ПараметрыПодбора.Вставить("ВыборГруппИЭлементов", ПредопределенноеЗначение("ИспользованиеГруппИЭлементов.Элементы"));
	ПараметрыПодбора.Вставить("Источник", "ЗаказНаряд_ПричинаОбращения");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ПричиныОбращений"), ПараметрыПодбора);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Маркетинговая программа".
&НаКлиенте
Процедура ЗаказНарядМаркетинговаяПрограммаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядМаркетинговаяПрограммаПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Маркетинговая программа" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказНарядМаркетинговаяПрограммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.МаркетинговаяПрограммаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядНадписьСогласованнаяСуммаНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВводСогласованнойСуммыЗавершение", ЭтотОбъект);
	ПоказатьВводЧисла(
		ОписаниеОповещения,
		ЗаписьНаРемонт.ЗаказНаряд.СогласованнаяСумма,
		НСтр("ru = 'Сумма согласованная с клиентом'"),
		15,
		2
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьНаРемонтКонтрагентРасширеннаяПодсказкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект",                ЗаписьНаРемонт.ЗаявкаНаРемонт);
	ПараметрыФормы.Вставить("Карточка",              ЗаписьНаРемонт.ЗаявкаНаРемонт.Карточка);
	ПараметрыФормы.Вставить("Дата",                  ЗаписьНаРемонт.ЗаявкаНаРемонт.Дата);
	ПараметрыФормы.Вставить("КоличествоКНачислению", 0);
	ПараметрыФормы.Вставить("КоличествоКСписанию",   0);
	ПараметрыФормы.Вставить("ТолькоПросмотр",        Истина);
	
	ОткрытьФорму("ОбщаяФорма.ФормаДанныхОБонуснойПрограмме", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БонусныеБаллыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект",                ЗаписьНаРемонт.ЗаказНаряд);
	ПараметрыФормы.Вставить("Карточка",              ЗаписьНаРемонт.ЗаказНаряд.Карточка);
	ПараметрыФормы.Вставить("Дата",                  ЗаписьНаРемонт.ЗаказНаряд.Дата);
	ПараметрыФормы.Вставить("КоличествоКНачислению", ЗаписьНаРемонт.ЗаказНаряд.КоличествоКНачислению);
	ПараметрыФормы.Вставить("КоличествоКСписанию",   ЗаписьНаРемонт.ЗаказНаряд.КоличествоКСписанию);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаДанныхОБонуснойПрограмме",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаАвансовПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервереЗаказНаряд();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СпособЗачетаАвансовПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Причины_обращения_заказ_наряда

&НаКлиенте
Процедура ПричиныОбращенияЗаказНарядПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если (НоваяСтрока И ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения)) ИЛИ Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ТекущийОбъект(ЭтотОбъект));
		ПричиныОбращенийКлиент
			.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.АвтоработыЗаказНаряд, ИспользоватьПричиныОбращений);
		ПричиныОбращенийКлиент
			.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.ТоварыЗаказНаряд, ИспользоватьПричиныОбращений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПриАктивизацииСтроки(Элемент)
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.АвтоработыЗаказНаряд, ИспользоватьПричиныОбращений);
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.ТоварыЗаказНаряд, ИспользоватьПричиныОбращений);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПриИзменении(Элемент)
	
	ПричиныОбращенийКлиент
		.ОбновитьОписаниеПричиныОбращения(ТекущийОбъект(ЭтотОбъект), Элементы.ОписаниеПричиныОбращенияЗаказНаряд);
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияЗаказНарядВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = Элементы.ПричиныОбращенияПричинаОбращенияСодержаниеЗаказНаряд.Имя
		И Элементы.ПричиныОбращенияПричинаОбращенияСодержаниеЗаказНаряд.ГиперссылкаЯчейки Тогда
		ПричиныОбращенийКлиент.НачатьРедактированиеПричины(Элемент.ТекущиеДанные, ЭтотОбъект, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(ТекущийОбъект(ЭтотОбъект));
		
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаказНаряд.Автоработы,
		ЗаписьНаРемонт.ЗаказНаряд.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПередУдалением(Элемент, Отказ)
	
	Если ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.Количество() > 1 Тогда
		
		Отбор = Новый Структура("ИдентификаторПричиныОбращения", Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		СтрокиУдаляемогоЭлементаАвтоработы = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиСтроки(Отбор);
		СтрокиУдаляемогоЭлементаТовары = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиСтроки(Отбор);
		
		Если НЕ СтрокиУдаляемогоЭлементаАвтоработы.Количество() = 0 ИЛИ НЕ СтрокиУдаляемогоЭлементаТовары.Количество() = 0 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияПозицийВДругуюПричинуОбращеий");
			ДополнительныеПараметры.Вставить("ИмяКоманды", "");
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить("Перенести", "Перенести в другую причину обращения");
			КнопкиВопроса.Добавить("Удалить", "Удалить позиции");
			КнопкиВопроса.Добавить("Отмена", "Отменить удаление причины обращения");
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Выберите что необходимо сделать с Автоработами/Товарами удаляемой причины обращения?'"), КнопкиВопроса);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПричиныОбращенийКлиент.СброситьИдентификаторПричиныОбращения(
		ЗаписьНаРемонт.ЗаказНаряд, Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПослеУдаления(Элемент)
	
	ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПричинаОбращенияСодержаниеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные;
	
	Если ПричинаОбращенияИзменилась ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПричинаОбращения) Тогда
		
		ОбработатьИзменениеПричиныОбращения(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры // ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеПриИзменении()

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПричинаОбращенияСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока;
	ТекущаяПричинаОбращения = ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.НайтиПоИдентификатору(ТекущаяСтрока).ПричинаОбращения;
	
	ПричиныОбращенийКлиент.ОткрытьФормуВыбораПричиныОбращения(Элемент, ТекущаяПричинаОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПричинаОбращенияСодержаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.НачатьРедактированиеПричины(Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПричинаОбращенияСодержаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Документ", ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ);
		ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(
			Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, ВыбранноеЗначение, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПричинаОбращенияСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПричиныОбращенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		Причина = ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.НайтиПоИдентификатору(Строка);
		Если Причина <> Неопределено И ПараметрыПеретаскивания.Значение.Количество() > 0
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции") И ПараметрыПеретаскивания.Значение[0].Свойство("ИдентификаторПричиныОбращения") Тогда
			ПараметрыПеретаскивания.Значение[0].ИдентификаторПричиныОбращения = Причина.ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЕсли;
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.АвтоработыЗаказНаряд, ИспользоватьПричиныОбращений);
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияЗаказНаряд.ТекущиеДанные, Элементы.ТоварыЗаказНаряд, ИспользоватьПричиныОбращений);
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаказНаряд.Автоработы,
		ЗаписьНаРемонт.ЗаказНаряд.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область Автоработы_заказ_наряда_обработчики_табличного_поля

&НаСервере
Процедура ЗаказНарядАвтоработыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПерерасчетСуммыСкидкиБонусами();
	
КонецПроцедуры // ЗаказНарядАвтоработыПриИзмененииНаСервере()

&НаКлиенте
Процедура ЗаказНарядАвтоработыПриИзменении(Элемент)
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
	ЗаказНарядАвтоработыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
	ТекущиеДанные = Элементы.АвтоработыЗаказНаряд.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторРаботы) ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения)
		И Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.НайтиПоИдентификатору(
			Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока
		);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.АвторСтроки          = ПользователиКлиент.ТекущийПользователь();
		ТекущиеДанные.АвторИзмененияСтроки = ТекущиеДанные.АвторСтроки;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.СуммаСкидкиБонусами = 0;
		ТекущиеДанные.Исполнители = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыПередУдалением(Элемент, Отказ, ПослеВопроса=Ложь)
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Авторабота) И НЕ ПослеВопроса Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрок");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элементы.АвтоработыЗаказНаряд);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"), РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
	ВыделенныеСтроки = ОбщегоНазначенияАвтосалонКлиент.ИдентификаторыТаблицыВСтроки(
		Элемент.ВыделенныеСтроки, ТекущийОбъект(ЭтотОбъект).Автоработы);
	
	ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(
		ВыделенныеСтроки, ТекущийОбъект(ЭтотОбъект).Исполнители, "ИдентификаторРаботы");
		
	ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(
		ВыделенныеСтроки, ТекущийОбъект(ЭтотОбъект).Материалы, "ИдентификаторРаботы");
		
	Если НЕ Отказ Тогда
			
		ВыделенныеСтрокиКоличество = Элементы.АвтоработыЗаказНаряд.ВыделенныеСтроки.Количество();
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			ВыделеннаяСтрока = Элементы.АвтоработыЗаказНаряд.ВыделенныеСтроки[0];
			НайденнаяСтрока = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ЗаписьНаРемонт.ЗаказНаряд.Автоработы.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
			Если ИспользоватьУчетРабочегоВремени Тогда
				ИзмененыПакетыРабот = Истина;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования,
		,
		ТекущийОбъект(ЭтотОбъект)
	);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаказНаряд.Автоработы,
		ЗаписьНаРемонт.ЗаказНаряд.Товары);
	
	Если Элементы.АвтоработыЗаказНаряд.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(Элементы.АвтоработыЗаказНаряд.ТекущиеДанные.Исполнители) Тогда
			ЗаполнениеИсполнителей(ЭтотОбъект, ЗаписьНаРемонт.ЗаказНаряд);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыПослеУдаления(Элемент)
	
	АвтоработыПослеУдаленияНаСервере();
	
	Если ИспользоватьУчетРабочегоВремени Тогда
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автоработы_заказ_наряда_обработчики_реквизитов

// Обработчик события возникающего на клиенте при изменении данных реквизита "Авторабота".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядАвтоработыАвтоработаПриИзменении(Элемент)
	
	ЗаказНарядАвтоработыАвтоработаПриИзмененииНаСервере();
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.АвтоработыЗаказНаряд.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", ПолучитьАвтомобильЗаказНаряда());
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(
			ЗаписьНаРемонт.ЗаказНаряд,
			ТекущиеДанные,
			ЭтотОбъект,
			ПараметрыОткрытия);
			
		// FIXME: Перенести на сервер
		// Заполним пакет для добавленной автоработы
		Если ИспользоватьУчетРабочегоВремени И ПустаяСтрока(ТекущиеДанные.ПакетРабот) Тогда
			ДобавитьНовуюАвтоработуВПакет(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
			ИзмененыПакетыРабот = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыЗаказНарядВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Объект = ТекущийОбъект(ЭтотОбъект);
	Строка = Объект.Автоработы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = Элементы.АвтоработыЗаказНарядИсполнители.Имя Тогда
		
		Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если Элемент.ТолькоПросмотр Тогда
			
			ОбщегоНазначенияАвтосалонКлиент.ПоказатьТаблицуЗначений(
				ПоместитьТаблицуИсполнителиВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы, Истина),
				НСтр("ru = 'Исполнители'"),
				ЭтотОбъект);
			Возврат;
			
		КонецЕсли;
		
		АвтосервисКлиент.НачатьПодборИсполнителей(
			Объект,
			Строка.ИдентификаторРаботы,
			ПоместитьТаблицуИсполнителиВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы),
			ЭтотОбъект,
			Объект.Ссылка);
		
	ИначеЕсли Поле.Имя = Элементы.АвтоработыЗаказНарядСубподряд.Имя Тогда
		
		Если НЕ РедактированиеРабот ИЛИ (Элемент.ТолькоПросмотр И НЕ ЗначениеЗаполнено(Строка.Контрагент)) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ПакетРабот)
			И Строка.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.ВРаботе")
			И Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", Строка.ПакетРабот)).Количество() <= 1 Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Пакет данной работы уже в работе.
			                                    |Ее нельзя перевести на субподряд так как она одна на пакет.'"));
			Возврат;
			
		КонецЕсли;
		
		// Создаем и заполняем структуру параметров открытия формы редактирования субподрядчика.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Контрагент", Строка.Контрагент);
		ПараметрыФормы.Вставить("ДоговорВзаиморасчетов", Строка.ДоговорВзаиморасчетов);
		ПараметрыФормы.Вставить("Авторабота", Строка.Авторабота);
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
		ПараметрыФормы.Вставить("ДатаНачала", Объект.Дата);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Элемент.ТолькоПросмотр);
		
		// Производим открытие формы подбора номенклатуры
		ОткрытьФорму(
			"Документ.ЗаказНаряд.Форма.ФормаСубподрядчик",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборСубподрядчика"),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = Элементы.АвтоработыЗаказНарядМатериалы.Имя Тогда
		
		Если НЕ РедактированиеРабот ИЛИ (Элемент.ТолькоПросмотр И НЕ ЗначениеЗаполнено(Строка.Материалы)) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если Элемент.ТолькоПросмотр Тогда
			
			ОбщегоНазначенияАвтосалонКлиент.ПоказатьТаблицуЗначений(
				ПоместитьТаблицуМатериаловВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы),
				НСтр("ru = 'Материалы'"),
				ЭтотОбъект);
			Возврат;
			
		КонецЕсли;
		
		// Инициализируем структуру параметров действия
		ПараметрыДействия = Новый Структура();
		
		// Инициализируем структуру основных параметры подбора товаров в документ
		ПараметрыПодбора = Новый Структура();
		ПараметрыПодбора.Вставить("ПолноеИмяОбъекта",       ЭтотОбъект.ПолноеИмяОбъекта);
		ПараметрыПодбора.Вставить("ИмяТабличнойЧасти",      "Материалы");
		ПараметрыПодбора.Вставить("ИмяРеквизитаКоличество", "Количество");
		
		// Создаем и заполняем структуру параметров открытия формы номенклатуры
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ПараметрыПодбора",      ПараметрыПодбора);
		ПараметрыОткрытия.Вставить("РежимВыбора",           ИСТИНА);
		ПараметрыОткрытия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
		ПараметрыОткрытия.Вставить("Контрагент",            Объект.Контрагент);
		ПараметрыОткрытия.Вставить("Валюта",                Объект.ВалютаДокумента);
		ПараметрыОткрытия.Вставить("КурсВалюты",            Объект.КурсДокумента);
		ПараметрыОткрытия.Вставить("ТипЦен",                Объект.ТипЦенРабот);
		ПараметрыОткрытия.Вставить("СкладКомпании",         СкладЦеха(Объект.Цех));
		ПараметрыОткрытия.Вставить("Контрагент",            Неопределено);
		ПараметрыОткрытия.Вставить("ЕстьСклад",             Истина);
		ПараметрыОткрытия.Вставить("ЕстьЦена",              Ложь);
		ПараметрыОткрытия.Вставить("ЕстьСумма",             Ложь);
		ПараметрыОткрытия.Вставить("ЕстьПримечание",        Истина);
		
		АдресНоменклатуры = ПоместитьТаблицуМатериаловВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы);
		ПараметрыОткрытия.Вставить("АдресКорзины", АдресНоменклатуры);
		
		// Получим назначенные на поле ввода Номенклатуры параметры отбора
		ПараметрыОтбора = Новый Структура();
		
		Для каждого ПараметрВыбора Из Элементы.ТоварыНоменклатураЗаказНаряд.ПараметрыВыбора Цикл
			
			ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
			
		КонецЦикла;
		
		Для каждого ПараметрВыбора Из Элементы.ТоварыНоменклатураЗаказНаряд.СвязиПараметровВыбора Цикл
			
			ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), Вычислить("Форма."+ПараметрВыбора.ПутьКДанным));
			
		КонецЦикла;
		
		ПараметрыОтбора.Вставить("ПараметрыВыбора",       Элементы.ТоварыНоменклатураЗаказНаряд.ПараметрыВыбора);
		ПараметрыОтбора.Вставить("СвязиПараметровВыбора", Элементы.ТоварыНоменклатураЗаказНаряд.СвязиПараметровВыбора);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		
		// Производим открытие формы подбора номенклатуры
		ОткрытьФорму(
			"Справочник.Номенклатура.ФормаСписка",
			ПараметрыОткрытия,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборМатериалов"),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	ОбработчикСтрокаВыбор(ВыбраннаяСтрока, Поле, "Автоработы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыАвтоработаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыКоличествоПриИзменении(Элемент)
	ЗаказНарядАвтоработыКоличествоПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыКоличествоПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыНормочасПриИзменении(Элемент)
	ЗаказНарядАвтоработыНормочасПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыНормочасПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыНормочасПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыКоэффициентПриИзменении(Элемент)
	ЗаказНарядАвтоработыКоэффициентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыКоэффициентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыКоэффициентПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыЦенаПриИзменении(Элемент)
	ЗаказНарядАвтоработыЦенаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыЦенаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыСуммаПриИзменении(Элемент)
	ЗаказНарядАвтоработыСуммаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСуммаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыСуммаВсегоПриИзменении(Элемент)
	ЗаказНарядАвтоработыСуммаВсегоПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСуммаВсегоПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядАвтоработыСтавкаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядАвтоработыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСтавкаНДСПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядАвтоработыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСуммаНДСПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // АвтоработыСуммаНДСПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма НДС".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядАвтоработыСуммаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядАвтоработыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры // АвтоработыСуммаНДСПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Автоработы".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядАвтоработыПроцентСкидкиПриИзменении(Элемент)
	ЗаказНарядАвтоработыПроцентСкидкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыПроцентСкидкиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Автоработы".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядАвтоработыСуммаСкидкиПриИзменении(Элемент)
	ЗаказНарядАвтоработыСуммаСкидкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСуммаСкидкиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Автоработы".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядАвтоработыСкидкаНаТоварПриИзменении(Элемент)
	ЗаказНарядАвтоработыСкидкаНаТоварПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗаказНарядАвтоработыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСкидкаНаТоварПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);

	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Автоработы".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядАвтоработыПроцентСкидкиСтрокиПриИзменении(Элемент)
	ЗаказНарядАвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыПроцентСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Автоработы".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядАвтоработыСуммаСкидкиСтрокиПриИзменении(Элемент)
	ЗаказНарядАвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядАвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСуммаСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСпособРасчетаСтоимостиРаботыЗаказНарядПриИзменении(Элемент)
	
	АвтоработыСпособРасчетаСтоимостиРаботыЗаказНарядПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСпособРасчетаСтоимостиРаботыЗаказНарядПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиПоИдентификатору(
		Элементы.АвтоработыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.АвтоработыСпособРасчетаСтоимостиРаботыПриИзменени(
		ЗаписьНаРемонт.ЗаказНаряд,
		ТекущиеДанные,
		ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Товары_заказ_наряда_обработчики_табличного_поля

&НаКлиенте
Процедура ЗаказНарядТоварыПриИзменении(Элемент)
	
	ПерерасчетСуммыСкидкиБонусами();
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказНарядВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработчикСтрокаВыбор(ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	
	Если Копирование Тогда
		Элементы.ТоварыЗаказНаряд.ТекущиеДанные.СуммаСкидкиБонусами = 0;
		ПерерасчетСуммыСкидкиБонусами();
	КонецЕсли;
	
	СтруктураДанныхТекущейСтроки = Новый Структура;
	КэшТоварыВПроизводстве = ПолучитьСтрокуКешаПеремещенияДокументы(ТекущийОбъект(ЭтотОбъект),
																	Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	СтруктураДанныхТекущейСтроки.Вставить("Строка",                     Элемент.ТекущиеДанные);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаИсключение",           Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаУдаление",             Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("Номенклатура",               Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("ХарактеристикаНоменклатуры", Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("ЕдиницаИзмерения",           Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("Количество",                 Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("Коэффициент",                Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("КэшТоварыВПроизводстве",     КэшТоварыВПроизводстве);
	
КонецПроцедуры // ТоварыПередНачаломДобавления()

// Обработчик события возникающего на клиенте перед началом интерактивного изменения строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПередНачаломИзменения(Элемент, Отказ)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
	СтруктураДанныхТекущейСтроки = Новый Структура;
	
	КэшТоварыВПроизводстве = ПолучитьСтрокуКешаПеремещенияДокументы(ТекущийОбъект(ЭтотОбъект),
																	Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	СтруктураДанныхТекущейСтроки.Вставить("Строка",                     Элемент.ТекущиеДанные);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаИсключение",           Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаУдаление",             Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("Номенклатура",               Элемент.ТекущиеДанные.Номенклатура);
	СтруктураДанныхТекущейСтроки.Вставить("ХарактеристикаНоменклатуры", Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры);
	СтруктураДанныхТекущейСтроки.Вставить("ЕдиницаИзмерения",           Элемент.ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураДанныхТекущейСтроки.Вставить("Количество",                 Элемент.ТекущиеДанные.Количество);
	СтруктураДанныхТекущейСтроки.Вставить("Коэффициент",                Элемент.ТекущиеДанные.Коэффициент);
	СтруктураДанныхТекущейСтроки.Вставить("КэшТоварыВПроизводстве",     КэшТоварыВПроизводстве);
	
КонецПроцедуры // ТоварыПередНачаломИзменения()

// Обработчик события возникающего на клиенте перед удалением строки или группы строк.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПередУдалением(Элемент, Отказ, ПослеВопроса=Ложь)
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) И НЕ ПослеВопроса Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрокТоваров");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"), РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Отказ = КонтрольКоличестваДеталейВПроизводствеПередУдалением(Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ВыделенныеСтрокиКоличество = Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки.Количество();
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			ВыделеннаяСтрока = Элементы.ТоварыЗаказНаряд.ВыделенныеСтроки[0];
			НайденнаяСтрока = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ЗаписьНаРемонт.ЗаказНаряд.Товары.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыПередУдалением()

// Обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КонтрольКоличестваДеталейВПроизводстве(ЭтаФорма, СтруктураДанныхТекущейСтроки);
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования,, ТекущийОбъект(ЭтотОбъект));
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаказНаряд.Автоработы,
		ЗаписьНаРемонт.ЗаказНаряд.Товары);
	
КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Обработчик события возникающего на клиенте после удаления строки в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(ТекущийОбъект(ЭтотОбъект), "Товары", ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(ТоварыНоменклатурыТекстПодвала, ТекущийОбъект(ЭтотОбъект));
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьКолонкиСуммаВсего(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
	ПерерасчетСуммыСкидкиБонусами();
	УстановитьЗаголовокНадписиСуммаДокумента();
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения,
		ЗаписьНаРемонт.ЗаказНаряд.Автоработы,
		ЗаписьНаРемонт.ЗаказНаряд.Товары);
	
КонецПроцедуры // ТоварыПослеУдаленияНаСервере()

// Обработчик события возникающего на клиенте после удаления строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПослеУдаления(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры // ТоварыПослеУдаления()

// Обработчик события возникающего на клиенте при движении курсора в поле приемнике данных.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка                        - Строка таблицы, над которой находится курсор.
//  Поле                          - Элемент управляемой формы, с которым связана данная колонка таблицы.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
КонецПроцедуры // ТоварыПроверкаПеретаскивания()

&НаКлиенте
Процедура ЗаказНарядТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТоварыЗаказНаряд.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения) И Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = ЗаписьНаРемонт.ЗаказНаряд.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияЗаказНаряд.ТекущаяСтрока);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.АвторСтроки          = ПользователиКлиент.ТекущийПользователь();
		ТекущиеДанные.АвторИзмененияСтроки = ТекущиеДанные.АвторСтроки;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.СуммаСкидкиБонусами = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Товары_заказ_наряда_обработчики_реквизитов

&НаСервере
Процедура ЗаказНарядТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
	// Установим видимость колонки "Характеристика" (пришлось отказаться от основного механизма из-за различия в наименованиях реквизитов)
	ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Номенклатура".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТоварыЗаказНаряд.ТекущиеДанные;
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыНоменклатураПриИзмененииНаСервере();
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", ПолучитьАвтомобильЗаказНаряда());
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(
			ЗаписьНаРемонт.ЗаказНаряд,
			ТекущиеДанные,
			ЭтотОбъект,
			ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыХарактеристикаНоменклатурыПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Характеристика номенклатуры".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыЕдиницаИзмеренияПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Единица измерения".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыКоличествоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыЦенаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыЦенаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыСуммаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыСуммаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыСуммаВсегоПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма всего".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыСуммаВсегоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыСтавкаНДСПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыСтавкаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыСуммаНДСПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма НДС".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыСуммаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыСуммаСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма скидки строки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыСуммаСкидкиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма скидки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыСуммаСкидкиПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыСкидкаНаТоварПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Скидка на товар".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыПроцентСкидкиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Процент скидки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПроцентСкидкиПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в контексте сервера.
//
&НаСервере
Процедура ЗаказНарядТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Товары.НайтиПоИдентификатору(Элементы.ТоварыЗаказНаряд.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаряд.ТоварыПроцентСкидкиСтрокиПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры // ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Процент скидки строки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ЗаказНарядТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыПроцентСкидкиСтрокиПриИзменении()

&НаКлиенте
Процедура ТоварыНоменклатураЗаказНарядНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Установим отбор при изменении номенклатуры
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Модель", ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ);
	ПараметрыФормы.Вставить("ОтборНоменклатурыПоПрименяемости");
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_автоработы_заказ_наряда_обработчики_табличного_поля

&НаКлиенте
Процедура ЗаказНарядВспомогательныеАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ПустаяСтрока(Элементы.ВспомогательныеАвтоработыЗаказНаряд.ТекущиеДанные.ИдентификаторРаботы) Тогда
		Элементы.ВспомогательныеАвтоработыЗаказНаряд.ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядВспомогательныеАвтоработыПриИзменении(Элемент)
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_автоработы_заказ_наряда_обработчики_реквизитов

&НаСервере
Процедура ЗаказНарядВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.ВспомогательныеАвтоработы.НайтиПоИдентификатору(
		Элементы.ВспомогательныеАвтоработыЗаказНаряд.ТекущаяСтрока);
	
	Документы.ЗаказНаряд.ВспомогательныеАвтоработыАвтоработаПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядВспомогательныеАвтоработыАвтоработаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	
	ЗаказНарядВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия);
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.ВспомогательныеАвтоработыЗаказНаряд.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", ПолучитьАвтомобильЗаказНаряда());
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(
			ЗаписьНаРемонт.ЗаказНаряд,
			ТекущиеДанные,
			ЭтотОбъект,
			ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Материалы_заказчика_заказ_наряда_обработчики_табличного_поля

// Обработчик события возникающего на клиенте при начале редактирования строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока - Булево       - Истина, если строка была добавлена или скопирована.
//  Копирование - Булево       - Определяет режим копирования.
//
&НаКлиенте
Процедура ЗаказНарядМатериалыЗаказчикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.АвторСтроки          = ПользователиКлиент.ТекущийПользователь();
		ТекущиеДанные.АвторИзмененияСтроки = ТекущиеДанные.АвторСтроки;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура МатериалыЗаказчикаЗаказНарядПриИзменении(Элемент)
	
	// Установим видимость колонок в ТЧ "Материалы заказчика"
	МатериалыЗаказчикаУстановитьВидимостьКолонок();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте после удаления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядМатериалыЗаказчикаПослеУдаления(Элемент)
	
	// Установим видимость колонок в ТЧ "Материалы заказчика"
	МатериалыЗаказчикаУстановитьВидимостьКолонок();
	
КонецПроцедуры

#КонецОбласти

#Область Материалы_заказчика_заказ_наряда_обработчики_обработчики_реквизитов

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Материалы заказчика".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядМатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	ЗаказНарядМатериалыЗаказчикаНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядМатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.МатериалыЗаказчика.НайтиПоИдентификатору(Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущаяСтрока);
	
	Документы.ЗаказНаряд.МатериалыЗаказчикаНоменклатураПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
	// Вызываем общий обработчик изменения реквизитов формы
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия, "МатериалыЗаказчикаЗаказНаряд");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед началом выбора данных реквизита "Номенклатура".
//
&НаКлиенте
Процедура ЗаказНарядМатериалыЗаказчикаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборТипаДанных = Новый СписокЗначений;
	ВыборТипаДанных.Добавить("Строка");
	ВыборТипаДанных.Добавить("Номенклатура");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораТипаДанных", ЭтотОбъект);
	ВыборТипаДанных.ПоказатьВыборЭлемента(ОписаниеОповещенияОЗакрытии, НСтр("ru = 'Выбор типа данных'"), "Строка");
	
КонецПроцедуры // МатериалыЗаказчикаНоменклатураНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Материалы заказчика".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядМатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЗаказНарядМатериалыЗаказчикаЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядМатериалыЗаказчикаЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.МатериалыЗаказчика.НайтиПоИдентификатору(Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущаяСтрока);
	
	Документы.ЗаказНаряд.МатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита табличной части "Материалы заказчика".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказНарядМатериалыЗаказчикаХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ЗаказНарядМатериалыЗаказчикаХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядМатериалыЗаказчикаХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.МатериалыЗаказчика.НайтиПоИдентификатору(Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущаяСтрока);
	
	Документы.ЗаказНаряд.МатериалыЗаказчикаХарактеристикаНоменклатурыПриИзменении(ЗаписьНаРемонт.ЗаказНаряд, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыФормыЗачетАвансов

&НаСервере
Процедура ЗачетАвансовДокументАвансаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.ЗачетАвансов.НайтиПоИдентификатору(Элементы.ЗачетАвансов.ТекущаяСтрока);
	Документы.ЗаказНаряд.ЗачетАвансовДокументАвансаПриИзменении(
		ЗаписьНаРемонт.ЗаказНаряд,
		ТекущиеДанные,
		ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаПриИзменении(Элемент)
	
	ЗачетАвансовДокументАвансаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
                                                     ДополнительныеПараметры = Неопределено) Экспорт
	
	НеТребуетсяДальнейшаяОбработка = НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры,
		ТекущийОбъект(ЭтотОбъект)
	);
	
	Если НеТребуетсяДальнейшаяОбработка Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	
	Если ДополнительныеПараметры = "ПодборИсполнителей" Тогда
		Элемент = Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования];
		ЭлементПричина = Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования];
		
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаПричиныОбращения = ЭлементПричина.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторРаботы) Тогда
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ТекущийОбъект(ЭтотОбъект).ИсполнителиОдинаковыеДляВсехРабот = РезультатОповещения.ИсполнителиОдинаковыеДляВсехРабот;
		
		Если СтрокаПричиныОбращения <> Неопределено Тогда
			СтрокаПричиныОбращения.ИсполнителиОдинаковыеВРамкахПричины =
				РезультатОповещения.ИсполнителиОдинаковыеВРамкахПричины;
		КонецЕсли;
		
		ЗаполнитьТаблицуИсполнителейИзХранилища(РезультатОповещения.АдресИсполнителейВХранилище,
			СтрокаТабличнойЧасти.ИдентификаторРаботы);
			
		
		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(
				Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока =
					СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "РасширенноеРедактированиеПоляКомментарий" Тогда  
		Если ЭтотОбъект.ЗаписьНаРемонт.РежимРедактирования = "ЗаявкаНаРемонт" Тогда
			Объект = ЭтотОбъект.ЗаписьНаРемонт.ЗаявкаНаРемонт;	
		Иначе	
		    Объект = ЭтотОбъект.ЗаписьНаРемонт.ЗаказНаряд;
		КонецЕсли;
		Если НЕ Объект.Комментарий = СокрЛП(РезультатОповещения) 
			И НЕ ЭтотОбъект.ТолькоПросмотр Тогда 
				Объект.Комментарий = СокрЛП(РезультатОповещения);
				ЭтотОбъект.Модифицированность = Истина;	
		ИначеЕсли НЕ Объект.Комментарий = СокрЛП(РезультатОповещения) Тогда	 
				Результат = Новый Структура();
				Результат.Вставить("Комментарий",  СокрЛП(РезультатОповещения));
	
				УправлениеДиалогомВызовСервера.ОбновитьЗначениеПоляКомментарий(Объект.Ссылка, Результат); 
				ЭтотОбъект.Прочитать();
		КонецЕсли;	
	ИначеЕсли ДополнительныеПараметры = "ОткрытьНастройкиДневногоКалендаря" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатОповещения); 
		
		Если РезультатОповещения.Свойство("АдресРесурсов") Тогда
			ЗаполнитьРесурсы(РезультатОповещения.АдресРесурсов);
		КонецЕсли;
		
		Элементы.ПодразделениеОтбора.Доступность = ФормироватьСписокРесурсовПоПодразделению;
		УстановитьОтборПоПодразделениюНаСервере();
		
		ОбновитьКалендарь();
		УправлениеДиалогомНаСервере();
		
		
	ИначеЕсли ДополнительныеПараметры = "ВыборДокумента" Тогда
		
		Если Модифицированность Тогда
			
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить("ВыборДокумента", Истина);
			ПараметрыВопроса.Вставить("РезультатОповещения", РезультатОповещения);
			ПараметрыВопроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			ВопросОСохраненииОбъекта(ПараметрыВопроса);
			
			Возврат;
			
		КонецЕсли;
		
		УстановитьКонтекст = Истина;
		Документ = РезультатОповещения.Значение;
		
		Если ТипЗнч(РезультатОповещения.Значение) = Тип("Структура") Тогда
			
			УстановитьКонтекст = НЕ РезультатОповещения.Значение.ОткрыватьВОтдельномОкне;
			Документ = РезультатОповещения.Значение.Ссылка;
			
		КонецЕсли;
		
		Если УстановитьКонтекст Тогда
			
			Постобработка = Неопределено;
			УстановитьКонтекстДокумента(Документ, Постобработка);
			// Разворачивать/Сворачивать можно только видимое дерево
			Если Элементы.ПланированиеОбъекты.Видимость Тогда
				ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПланированиеОбъекты", Истина);
			КонецЕсли;
			РезультатОповещения = Постобработка;
			
		Иначе
			
			ОткрытьФормуДокументаНаПросмотр(Документ);
			РезультатОповещения = Новый Структура;
			
		КонецЕсли;
		
		// получим рекомендации автомобиля
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
			ПроверитьРекомендацииПоАвтомобилю(Истина, Истина);
			ЗапланироватьТОНаСервере(АвтомобильСРЗ);
		Иначе
			Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаявкаНаРемонт.Ссылка) Тогда
				ПроверитьРекомендацииПоАвтомобилю();
				ЗапланироватьТОНаСервере(ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "УстановитьИсполнителейПоПредыдущейРаботе" Тогда
			
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			МассивРабот                 = ДополнительныеПараметры.МассивРабот;
			ИсполнителиПредыдущейРаботы = ДополнительныеПараметры.ИсполнителиПредыдущейРаботы;
			
			Для Каждого СтрокаТекущейРаботы Из МассивРабот Цикл
				
				СтрокаИсполнители = "";
				ДанныеРасчетаАвтоработы = АвтосервисКлиент.ПараметрыРасчетаНачисленийАвтоработы(
					ТекущийОбъект(ЭтотОбъект),
					СтрокаТекущейРаботы.Значение.ИдентификаторРаботы);
				Для Каждого ИсполнительПредыдущейРаботы Из ИсполнителиПредыдущейРаботы Цикл
					НовыйИсполнитель = ТекущийОбъект(ЭтотОбъект).Исполнители.Добавить();
					НовыйИсполнитель.ИдентификаторРаботы = СтрокаТекущейРаботы.Значение.ИдентификаторРаботы;
					НовыйИсполнитель.Исполнитель         = ИсполнительПредыдущейРаботы.Исполнитель;
					НовыйИсполнитель.Цех                 = ИсполнительПредыдущейРаботы.Цех;
					НовыйИсполнитель.Процент             = ИсполнительПредыдущейРаботы.Процент;
					Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
						НовыйИсполнитель.ВидНачисления       = ИсполнительПредыдущейРаботы.ВидНачисления;
						НовыйИсполнитель.СпособРасчета       = ИсполнительПредыдущейРаботы.СпособРасчета;
						НовыйИсполнитель.ПараметрРасчетаНачисления = ИсполнительПредыдущейРаботы.ПараметрРасчетаНачисления;
						
						// Перерасчет суммы начисления
						АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(НовыйИсполнитель, ДанныеРасчетаАвтоработы);
						СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(ИсполнительПредыдущейРаботы.Исполнитель);
					КонецЕсли;
					СтрокаТекущейРаботы.Значение.Исполнители = СтрокаИсполнители;
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			ПодборИсполнителей();
		КонецЕсли; 
		
	ИначеЕсли ДополнительныеПараметры = "ОткрытьФормуЗаказНаряда" Тогда
		
		Если НЕ РезультатОповещения.Значение.Пустая() Тогда
			ОткрытьФорму("Документ.ЗаказНаряд.ФормаОбъекта", Новый Структура("Ключ", РезультатОповещения.Значение));
		КонецЕсли;
		
		РезультатОповещения = Неопределено;
		
	ИначеЕсли ДополнительныеПараметры = "ЗаполнениеПоСервиснойКомпании" Тогда
		
		Вопросы = РезультатОповещения.КоллекцияОпераций;
		ОчиститьТабличныеЧастиПередЗаполнением = Ложь;
		ПараметрыЗаполнения = Новый Структура();
		Для Каждого Вопрос Из Вопросы Цикл
			Если Вопрос.Ключ = "ТребуетсяУстановкаВидаРемонта" Тогда
				ПараметрыЗаполнения.Вставить("ТребуетсяУстановкаВидаРемонта", ВРег(Вопрос.Значение) = "ДА");
			КонецЕсли;
			Если Вопрос.Ключ = "ЗадаватьВопросОбОчисткеТабличныхЧастей" Тогда
				ОчиститьТабличныеЧастиПередЗаполнением = ВРег(Вопрос.Значение) = "ДА";
			КонецЕсли;
		КонецЦикла;
		
		ТекущийОбъект = ТекущийОбъект(ЭтотОбъект);
		ДругиеИсточники = Новый Массив;
		ДругиеИсточники.Добавить(ТекущийОбъект.СервиснаяКампания);
		Если ПараметрыЗаполнения.Свойство("ТребуетсяУстановкаВидаРемонта") Тогда
			ЗаполнитьПоСервиснойКомпании(ПараметрыЗаполнения);
			СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(ТекущийОбъект, ЭтотОбъект, ДополнительныеПараметры, ДругиеИсточники);
		Иначе
			ПараметрыОткрытия = Неопределено;
			Если РежимыРедактирования().ЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования Тогда
				ПараметрыОткрытия = Новый Структура("Автомобиль", ПолучитьАвтомобильЗаказНаряда());
			КонецЕсли;
			Если ОчиститьТабличныеЧастиПередЗаполнением Тогда
				ОчиститьТабличныеЧастиДокумента();
			КонецЕсли;
			СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(
				ТекущийОбъект,
				ТекущийОбъект.СервиснаяКампания,
				ЭтотОбъект,
				ПараметрыОткрытия);
		КонецЕсли;
		ОбновитьДеревоОбъектовПланирования = Истина;
		ПризнакЗаписиПланирования = Истина;
		ОбработкаРезультатаВыполненияДействия(ПараметрыЗаполнения);
		
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ВыборСервиснойКомпании" Тогда
		ТекущийОбъект(ЭтотОбъект).СервиснаяКампания = РезультатОповещения;
		Если РежимыРедактирования().ЗаявкаНаРемонт = ЗаписьНаРемонт.РежимРедактирования Тогда
			ЗаявкаНаРемонтСервиснаяКампанияПриИзменении(Неопределено);
		Иначе
			ЗаказНарядСервиснаяКампанияПриИзменении(Неопределено);
		КонецЕсли;
		
		ОбновитьДеревоОбъектовПланирования = Истина;
		ПризнакЗаписиПланирования = Истина;
		Возврат;
	
	ИначеЕсли ДополнительныеПараметры = "ПодборМатериалов" Тогда
		АдресВХранилище = РезультатОповещения.Корзина;
		
		СтрокаТабличнойЧасти = Элементы.АвтоработыЗаказНаряд.ТекущиеДанные;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторРаботы) Тогда
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Результат = ПолучитьТаблицуМатериаловИзХранилища(АдресВХранилище, СтрокаТабличнойЧасти.ИдентификаторРаботы);
		
		СтрокаТабличнойЧасти.Материалы = Результат;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборАвторабот" Тогда
		
		МассивАвторабот.Очистить();
		ОбработкаРезультатаПодбораАвторабот(РезультатОповещения);
		
		// Связанные автоработы
		СоставОбъектовСвязанныхРабот = Новый Массив;
		Для Каждого Авторабота Из МассивАвторабот Цикл
			
			СтрокиАвторабот = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Авторабота.Значение));
			
			Если СтрокиАвторабот.Количество() > 0 И СоставОбъектовСвязанныхРабот.Найти(СтрокиАвторабот[0]) = Неопределено Тогда
				СоставОбъектовСвязанныхРабот.Добавить(СтрокиАвторабот[0]);
			КонецЕсли;
			
		КонецЦикла;
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(ТекущийОбъект(ЭтотОбъект), СоставОбъектовСвязанныхРабот, ЭтотОбъект);

		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы["Автоработы"+ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
		ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
			ТекущийОбъект(ЭтотОбъект).ПричиныОбращения,
			ТекущийОбъект(ЭтотОбъект).Автоработы,
			ТекущийОбъект(ЭтотОбъект).Товары
		);
		
		ОбновитьДеревоОбъектовПланирования = Истина;
		ПризнакЗаписиПланирования = Истина;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборСубподрядчика" Тогда
		
		Если НЕ РезультатОповещения = Неопределено Тогда
			СтрокаТабличнойЧасти = Элементы.АвтоработыЗаказНаряд.ТекущиеДанные;
			СтрокаТабличнойЧасти.Контрагент = РезультатОповещения.Контрагент;
			СтрокаТабличнойЧасти.ДоговорВзаиморасчетов = РезультатОповещения.ДоговорВзаиморасчетов;
			
			// Сформируем представление
			СубподрядчикТекст = "";
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
				Если ЗаписьНаРемонт.ЗаказНаряд.ИсполнителиОдинаковыеДляВсехРабот Тогда
					РаботаНеПоСубподряду = Неопределено;
					РаботыНеПоСубподряду = ЗаписьНаРемонт.ЗаказНаряд.Автоработы.НайтиСтроки(Новый Структура("Контрагент",ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")));
					Для Каждого СтрокаРабот Из РаботыНеПоСубподряду Цикл
						Если СтрокаРабот.ИдентификаторРаботы <> СтрокаТабличнойЧасти.ИдентификаторРаботы Тогда
							РаботаНеПоСубподряду=СтрокаРабот;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					Если РаботаНеПоСубподряду<>Неопределено Тогда
						ИдентификаторТекущейРаботыСтарый=СтрокаТабличнойЧасти.ИдентификаторРаботы;
						ИдентификаторТекущейРаботы=РаботаНеПоСубподряду.ИдентификаторРаботы;
						УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляВсех(ЗаписьНаРемонт.ЗаказНаряд,ИдентификаторТекущейРаботы);
						ИдентификаторТекущейРаботы=ИдентификаторТекущейРаботыСтарый;
					КонецЕсли;
					// Установим представление поля "Исполнители"
					СтрокаИсполнители = "";
					НайденныеСтроки = ЗаписьНаРемонт.ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаТабличнойЧасти.ИдентификаторРаботы));
					Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
						СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(ТекущаяСтрока.Исполнитель);
					КонецЦикла;
					СтрокаТабличнойЧасти.Исполнители = СтрокаИсполнители;
				КонецЕсли;
				Если ПустаяСтрока(СтрокаТабличнойЧасти.ПакетРабот) Тогда
					СтрокаТабличнойЧасти.ПакетРабот="00000000-0000-0000-0000-000000000000";
				КонецЕсли;
			Иначе
				ИсполнителиРаботы = ЗаписьНаРемонт.ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы",СтрокаТабличнойЧасти.ИдентификаторРаботы));
				Для каждого ИсполнительРаботы Из ИсполнителиРаботы Цикл
					ЗаписьНаРемонт.ЗаказНаряд.Исполнители.Удалить(ИсполнительРаботы);
				КонецЦикла;
				СтрокаТабличнойЧасти.ПакетРабот="";
				СтрокаТабличнойЧасти.НомерПакета=0;
				СубподрядчикТекст = СокрЛП(СтрокаТабличнойЧасти.Контрагент);
				СтрокаТабличнойЧасти.Исполнители = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорВзаиморасчетов) Тогда
				СубподрядчикТекст=СубподрядчикТекст+" ["+СокрЛП(СтрокаТабличнойЧасти.ДоговорВзаиморасчетов)+"]";
			КонецЕсли;
			СтрокаТабличнойЧасти.Субподряд = СубподрядчикТекст;
			ОбновитьДеревоПакетов = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьЗаказчика", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ЗаявкаНаРемонтАвтомобильПриИзмененииНаСервере(ДополнительныеПараметры);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьАвтомобиль", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ЗаписьНаРемонт.ЗаявкаНаРемонт.Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
			ЗаявкаНаРемонтЗаказчикПриИзмененииНаСервере(ДополнительныеПараметры);
			ЗаявкаНаРемонтАвтомобильПриИзменении(Неопределено);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(
				ДополнительныеПараметры,
				"Событие",
				"") = "ВопросЗаписиДокументаДляПодбораРекомендации" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			Попытка
				ЕстьОшибки = Ложь;
				Записать(Новый Структура("Имя", "Записать")); 
				Если ЕстьОшибки Тогда
					Возврат;
				КонецЕсли;
				Если СтрНайти(ДополнительныеПараметры.ИмяКоманды, "Перенести") > 0 Тогда
					
					Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
					
						ДополнительныеПараметрыПослеВопроса = Новый Структура;
						ДополнительныеПараметрыПослеВопроса.Вставить("Событие", "ВопросУдаленияСтрокПеренесенныхВРекомендации");
						ДополнительныеПараметрыПослеВопроса.Вставить("ИмяКоманды", ДополнительныеПараметры.ИмяКоманды);
						Оповещение = Новый ОписаниеОповещения(
							"Подключаемый_ОбработкаРезультатаОповещения",
							ЭтотОбъект,
							ДополнительныеПараметрыПослеВопроса);
						ПоказатьВопрос(Оповещение,
							НСтр("ru = 'Удалить из документа строки, перенесенные в рекомендации?'"),
							РежимДиалогаВопрос.ДаНет);
						Возврат;
					
					Иначе
						ПеренестиРекомендациюАвтомобиля(ДополнительныеПараметры.ИмяКоманды);
					КонецЕсли;
					
				Иначе
					ОткрытьПодборРекомендаций(ДополнительныеПараметры.ИмяКоманды);
				КонецЕсли;
			Исключение
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(
				ДополнительныеПараметры,
				"Событие",
				"") = "ВопросУдаленияСтрокПеренесенныхВРекомендации" Тогда
		
		ПеренестиРекомендациюАвтомобиля(ДополнительныеПараметры.ИмяКоманды);
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ЭтоЗаказНаряд = ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд;
			Если ДополнительныеПараметры.ИмяКоманды = Команды.Найти("ПеренестиАвтоработыВРекомендации").Имя Тогда
				Модифицированность = Истина;
				Если ЭтоЗаказНаряд Тогда
					ЗаказНарядАвтоработыПередУдалением(Элементы.АвтоработыЗаказНаряд, Ложь, Истина);
				Иначе
					ЗаявкаНаРемонтАвтоработыПередУдалением(Элементы.АвтоработыЗаявкаНаРемонт, Ложь, Истина);
				КонецЕсли;
			ИначеЕсли ДополнительныеПараметры.ИмяКоманды = Команды.Найти("ПеренестиНоменклатуруВРекомендации").Имя Тогда
				Модифицированность = Истина;
				Если ЭтоЗаказНаряд Тогда
					ЗаказНарядТоварыПередУдалением(Элементы.ТоварыЗаказНаряд, Ложь, Истина);
				Иначе
					ЗаявкаНаРемонтТоварыПередУдалением(Элементы.ТоварыЗаявкаНаРемонт, Ложь, Истина);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(
				ДополнительныеПараметры,
				"Событие",
				"") = "ВопросПеренесенияВРекомендацииУдаляемыхСтрок" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ПеренестиРекомендациюАвтомобиля(Команды.Найти("ПеренестиАвтоработыВРекомендации").Имя);
		КонецЕсли;
		
		Модифицированность = Истина;
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
			ЗаказНарядАвтоработыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
		Иначе
			ЗаявкаНаРемонтАвтоработыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
			Объект = ТекущийОбъект(ЭтотОбъект);
			ПричиныОбращенийКлиентСервер
				.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
		КонецЕсли;
		
		ОбновитьДеревоОбъектовПланирования = Истина;
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(
				ДополнительныеПараметры,
				"Событие",
				"") = "ВопросПеренесенияВРекомендацииУдаляемыхСтрокТоваров" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ПеренестиРекомендациюАвтомобиля(Команды.Найти("ПеренестиНоменклатуруВРекомендации").Имя);
		КонецЕсли;
		
		Модифицированность = Истина;
		Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
			ЗаказНарядТоварыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
		Иначе
			ЗаявкаНаРемонтТоварыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборРекомендаций" Тогда
		
		ОбработкаПодборРекомендаций.Рекомендации.Очистить();
		ОбработкаПодборРекомендаций.Модифицированность = РезультатОповещения.Модифицированность;
		Для Каждого ТекСтрока Из РезультатОповещения.Рекомендации Цикл
			ЗаполнитьЗначенияСвойств(ОбработкаПодборРекомендаций.Рекомендации.Добавить(), ТекСтрока);
		КонецЦикла;
		
		УстановитьЗаголовокНадписиСуммаДокумента();
		
	ИначеЕсли
		ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ЗагрузкаИзВнешнихКаталогов" Тогда
		
		ОбработкаРезультатаЗагрузкиИзВнешнегоКаталога(РезультатОповещения, ДополнительныеПараметры);
		
		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(
				Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы["Автоработы" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока =
					СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, ТекущийОбъект(ЭтотОбъект));
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
		ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
			ТекущийОбъект(ЭтотОбъект).ПричиныОбращения,
			ТекущийОбъект(ЭтотОбъект).Автоработы,
			ТекущийОбъект(ЭтотОбъект).Товары
		);
		
		ОбновитьДеревоОбъектовПланирования = Истина;
		ПризнакЗаписиПланирования = Истина;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ВопросПеренесенияПозицийВДругуюПричинуОбращеий" Тогда
		
		СтрокаПричиныОбращения = ДополнительныеПараметры.Элемент.ТекущиеДанные;
		ИдентификаторПричиныОбращения = СтрокаПричиныОбращения.ИдентификаторПричиныОбращения;
		
		Если РезультатОповещения = "Перенести" Тогда
			
			ДополнительныеПараметры.Вставить("Событие", "ВыборПричиныОбращенияДляПереносаПозиций");
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			МассивСсылок = Новый Массив;
			
			Для Каждого ПричинаОбращения Из ТекущийОбъект(ЭтотОбъект).ПричиныОбращения Цикл
				Если ПричинаОбращения <> СтрокаПричиныОбращения Тогда
					МассивСсылок.Добавить(ПричинаОбращения.ПричинаОбращения);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ссылка", МассивСсылок);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ОткрытьФорму(
				"Справочник.ПричиныОбращений.ФормаВыбора",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
			
		ИначеЕсли РезультатОповещения = "Удалить" Тогда
			
			ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.Удалить(СтрокаПричиныОбращения);
			
			Отбор = Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
			СтрокиУдаляемогоЭлемента = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
				ТекущийОбъект(ЭтотОбъект).Автоработы.Удалить(Строка);
			КонецЦикла;
			
			СтрокиУдаляемогоЭлемента = ТекущийОбъект(ЭтотОбъект).Товары.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
				ТекущийОбъект(ЭтотОбъект).Товары.Удалить(Строка);
			КонецЦикла;
			
			ОбновитьДанныеПослеУдаленияПричиныОбращения(ДополнительныеПараметры.Элемент);
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ВыборПричиныОбращенияДляПереносаПозиций" Тогда
		
		Если ЗначениеЗаполнено(РезультатОповещения) Тогда
			
			СтрокаПричиныОбращения = ДополнительныеПараметры.Элемент.ТекущиеДанные;
			ИдентификаторПричиныОбращения = СтрокаПричиныОбращения.ИдентификаторПричиныОбращения;
			ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.Удалить(СтрокаПричиныОбращения);
			
			Отбор = Новый Структура("ПричинаОбращения", РезультатОповещения);
			НайденныеСтроки = ТекущийОбъект(ЭтотОбъект).ПричиныОбращения.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Отбор = Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
				СтрокиЗаменяемогоЭлемента = ТекущийОбъект(ЭтотОбъект).Автоработы.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из СтрокиЗаменяемогоЭлемента Цикл
					Строка.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ИдентификаторПричиныОбращения;
				КонецЦикла;
				
				СтрокиЗаменяемогоЭлемента = ТекущийОбъект(ЭтотОбъект).Товары.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из СтрокиЗаменяемогоЭлемента Цикл
					Строка.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ИдентификаторПричиныОбращения;
				КонецЦикла;
				
			КонецЕсли;
			
			ОбновитьДанныеПослеУдаленияПричиныОбращения(ДополнительныеПараметры.Элемент);
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Возврат;
	
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаКлиенте
Процедура Подключаемый_ПодборТоваровЗавершение(Корзина, Контекст) Экспорт
	
	Если Корзина = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораНоменклатуры(Корзина, Контекст);
	
	Если Корзина.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", АвтомобильСРЗ);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(ТекущийОбъект(ЭтотОбъект), Корзина, ЭтотОбъект, ПараметрыОткрытия);	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения обновление календаря из внешних источников
//
&НаКлиенте
Процедура Подключаемый_ОбновитьКалендарь(ТребуетсяОбновление, ДопПараметры) Экспорт
	
	Если ТребуетсяОбновление Тогда
		
		ОбновитьКалендарь(, ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "ОбновитьКэш", Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКалендарьОтложено()
	
	ОбновитьКалендарь(, Ложь);
	
	ВыделитьИнтервал(РежимПеремещенияИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаВыбораТипаДанных(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущиеДанные.Номенклатура = Результат;
		Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущиеДанные.Количество   = 1;
		МатериалыЗаказчикаУстановитьВидимостьКолонок();
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.Номенклатура") Тогда
		Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущиеДанные.Номенклатура = Результат;
		Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущиеДанные.Количество   = 1;
		МатериалыЗаказчикаУстановитьВидимостьКолонок();
		Возврат;
	ИначеЕсли Результат.Значение = "Строка" Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораТипаДанных", ЭтотОбъект), Строка(Элементы.МатериалыЗаказчикаЗаказНаряд.ТекущиеДанные.Номенклатура), "Номенклатура", 100, Ложь);
		Возврат;
	ИначеЕсли Результат.Значение = "Номенклатура" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		Если ЗначениеЗаполнено(ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ) Тогда
			ПараметрыФормы.Вставить("Модель", ЗаписьНаРемонт.ЗаказНаряд.СводныйРемонтныйЗаказ);
			ПараметрыФормы.Вставить("ОтборНоменклатурыПоПрименяемости");
		КонецЕсли;
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",
					ПараметрыФормы,
					ЭтаФорма,,,,
					Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораТипаДанных", ЭтотОбъект), 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаВыбораТипаДанных()

&НаКлиенте
Процедура Подключаемый_ВводСогласованнойСуммыЗавершение(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьНаРемонт.ЗаказНаряд.СогласованнаяСумма = РезультатОповещения;
	УстановитьЗаголовокНадписиСуммаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьНаРемонт.ЗаказНаряд.КоличествоКСписанию = Результат;
	ПерерасчетСуммыСкидкиБонусами();
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию()

&НаКлиенте
Процедура Подключаемый_ОжиданиеОбновленияКэшаКалендаря()
	
	Если ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
		ЗакончитьОбновлениеДневногоКалендаря(Истина);
		ОбновитьТекущееПланированиеВШапке();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеОбновленияКэшаКалендаря", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеСИнтервалом(Действие, Описание) Экспорт
	
	Если Действие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(Действие.Значение) = "удалить" Тогда
		
		УдалитьИнтервал(Описание);
		
		ПризнакЗаписиПланирования = Истина;
		Модифицированность = Истина;
		
	ИначеЕсли НРег(Действие.Значение) = "изменить" Тогда
		
		НачатьРедактированиеИнтервала(Описание);
		
	ИначеЕсли НРег(Действие.Значение) = "скопировать" Тогда
		
		СкопироватьИнтервал(Описание.Интервал);
		
		ОбновитьДоступностьВставкиИнтервалаИзБуфера();
		
	ИначеЕсли НРег(Действие.Значение) = "просмотр" Тогда
		
		НачатьРедактированиеИнтервала(Описание, Ложь);
		
	ИначеЕсли НРег(Действие.Значение) = "вырезать" Тогда
		
		СкопироватьИнтервал(Описание.Интервал);
		
		ОбновитьДоступностьВставкиИнтервалаИзБуфера();
		
		УдалитьИнтервал(Описание);
		
		ПризнакЗаписиПланирования = Истина;
		
		Модифицированность = Истина;
		
	ИначеЕсли НРег(Действие.Значение) = "переместить" Тогда
		
		РежимПеремещения = Истина;
		
		Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
			Если Рисунок.Имя <> "CurrentTime" Тогда				
				Рисунок.Высота = Рисунок.Высота / 3;
				Рисунок.ГиперСсылка = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.КалендарьДневной.Подсказка = НСтр("ru = 'Укажите ячейку'");
		
		РежимПеремещенияИдентификатор = Описание.Интервал.ПолучитьИдентификатор();
		
		#Если ВебКлиент Тогда
			РасшифровкаДляВебКлиента = Описание.Расшифровка;
		#Иначе
			УдалитьПримечания();
			УдалитьРисунок(Описание.Описание);
		#КонецЕсли
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаКонтроляПересеченияРесурсов(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПослеЗаписи = Новый Структура;
	
	ЗаписатьТекущийОбъектНаСервере(ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Проведение", Ложь), 
		ВыполнитьПослеЗаписи);
	
	ОбработкаРезультатаВыполненияДействия(ВыполнитьПослеЗаписи);
	
	Если Не ПолучитьЗначениеПараметраСтруктуры(ВыполнитьПослеЗаписи, "Ошибка", Ложь) Тогда
		ДополнительныеПараметры.Вставить("ВыводитьСообщение", ВыполнитьПослеЗаписи.Ссылка);
		ПостОбработкаРезультатаВопроса(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаСохраненияИзменений(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	Если РезультатОповещения = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ЕстьНезапланированныеРаботы", Ложь) Тогда
			Возврат;
		КонецЕсли;
		ПостОбработкаРезультатаВопроса(ДополнительныеПараметры, Ложь);
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ЕстьНезапланированныеРаботы", Ложь) Тогда
			Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ТочкаВызова", "") = "ПереходВЗаписьНаРемонт" Тогда
				ОО = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборДокумента");
				Параметр = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Параметр", Неопределено);
				ВыполнитьОбработкуОповещения(ОО, Новый Структура("Значение", Параметр));
				Возврат;
			ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ТочкаВызова", "") = "ПередЗакрытием" Тогда
				ПризнакЗакрытияФормы = Истина;
				Закрыть();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если КонтрольПересеченияВремениРабот <> "Нет" И КонтрольПересеченияИнтервалов(ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьПослеЗаписи = Новый Структура;
		
		ЗаписатьТекущийОбъектНаСервере(ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Проведение", Ложь), 
			ВыполнитьПослеЗаписи);
		
		Если Не ПолучитьЗначениеПараметраСтруктуры(ВыполнитьПослеЗаписи, "Ошибка", Ложь) Тогда
			ДополнительныеПараметры.Вставить("ВыводитьСообщение", ВыполнитьПослеЗаписи.Ссылка);
			ПостОбработкаРезультатаВопроса(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещенияСозданияСводногоРемонтногоЗаказа(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		ПараметрыФормы = ДополнительныеПараметры.Основание;
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗаявкаНаРемонт", ДополнительныеПараметры.Основание);
		ПараметрыФормы.Вставить("АдресЗначенияРеквизитовДокумента", РезультатОповещения);
	КонецЕсли;
	
	ОткрытьФормуВводаСводногоРемонтногоЗаказа(ПараметрыФормы, ДополнительныеПараметры);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещенияСозданияСводногоРемонтногоЗаказа()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещенияСозданияЗаказНаряда(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", ДополнительныеПараметры.Основание);
	Иначе 
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("ДокументОснование", ДополнительныеПараметры.Основание);
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(РезультатОповещения);
		ПараметрыЗаполнения.Вставить("Контрагент", ДанныеЗаполнения.Плательщик); 
		ПараметрыЗаполнения.Вставить("Заказчик", ДанныеЗаполнения.Заказчик);
		ПараметрыЗаполнения.Вставить("Автомобиль", ДанныеЗаполнения.Автомобиль);
		ПараметрыЗаполнения.Вставить("ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт", Истина);		
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
	
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказНаряд.ФормаОбъекта", ПараметрыФормы); 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактированиеИнтервалаЗавершение(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	// Если данные не изменились, тогда возврат
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
		
		ДоступностьПланирования = ПланированиеРесурсовКлиентСервер.ПроверитьДоступностьВремениИнтервалаПланирования(
		РезультатОповещения.Начало, КонтрольПланированияПрошедшимВременем);
		
		Если НЕ ДоступностьПланирования Тогда
			ПланированиеРесурсовКлиент.ПоказатьПредупреждениеЗаписиЗаднимЧислом(КонтрольПланированияПрошедшимВременем);
			Возврат;
		КонецЕсли;
		
		НовыйОбъект = ПолучитьОбъектПоИдентификатору(РезультатОповещения.Идентификатор);
		Если НовыйОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Интервал = ДополнительныеПараметры.Интервал;
		ЗаполнитьЗначенияСвойств(Интервал, ДанныеОбъектаПланирования(НовыйОбъект));
		СтарыйОбъект = ПолучитьОбъектПоИдентификатору(Интервал.Идентификатор);
		ЗаполнитьЗначенияСвойств(Интервал, РезультатОповещения);
		Родитель = НовыйОбъект.ПолучитьРодителя();
		
		Если Родитель <> Неопределено Тогда
			Интервал.ИдентификаторГруппы = Родитель.Идентификатор;
		КонецЕсли;
		
		Интервал.НормаВремениПредставление = 
			ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(Интервал.НормаВремени);
		ОбновитьКалендарь(, Ложь);
		
		Если СтарыйОбъект = НовыйОбъект Тогда
			
			ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(НовыйОбъект, ПланированиеИнтервалы);
			
		Иначе
			
			Если СтарыйОбъект <> Неопределено Тогда
				
				ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(СтарыйОбъект, ПланированиеИнтервалы);
				
			КонецЕсли;
			
			ПланированиеРесурсовКлиентСервер.ОбновитьИндикаторНормыВремениОбъекта(НовыйОбъект, ПланированиеИнтервалы);
			
		КонецЕсли;
		
		ВыделитьИнтервал(ДополнительныеПараметры.Описание.Получить("index"));
		
	ИначеЕсли РезультатОповещения Тогда
		
		УдалитьИнтервал(ДополнительныеПараметры);
		
	КонецЕсли;
	
	Ресурс = ?(ЗначениеЗаполнено(ДополнительныеПараметры.Интервал.РабочееМесто), ДополнительныеПараметры.Интервал.РабочееМесто, 
	ДополнительныеПараметры.Интервал.Исполнитель);
	СтруктураИнтервала = Новый Структура;
	СтруктураИнтервала.Вставить("Начало", ДополнительныеПараметры.Интервал.Начало);
	СтруктураИнтервала.Вставить("Конец", ДополнительныеПараметры.Интервал.Конец);
	ПереместитьИнтервалы(СтруктураИнтервала, ДополнительныеПараметры.Интервал, Ресурс);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКалендарьОтложено", 0.1, Истина);
	
	СформироватьПотенциалыРесурсовНаНеделю(НачалоНедели(ДатаПланировщика), КонецНедели(ДатаПланировщика));
	ПризнакЗаписиПланирования = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланированиеОбъектыПриАктивизацииСтроки()
	
	Элемент = Элементы.ПланированиеОбъекты;
	
	ПланированиеРесурсовКлиент.ОбъектыПриАктивизацииСтроки(ЭтотОбъект, Элемент.ТекущиеДанные, "Планирование%1");
	
	Если ТипЗнч(КалендарьДневной.ТекущаяОбласть) <> Тип("РисунокТабличногоДокумента") Тогда
		
		ОбновитьДоступностьДобавленияИнтервала();
		ОбновитьДоступностьДобавленияИзСправочника();
		ОбновитьДоступностьВставкиИнтервалаИзБуфера();
		ОбновитьДоступностьАвтоматическогоПланированияОтРесурса();
		
	КонецЕсли;
	
	Цвета = Новый Структура;
	Цвета.Вставить("ТекущийДокумент", ОбщегоНазначенияКлиент.ЦветСтиля("ЗаписьНаРемонтТекущийДокумент"));
	Цвета.Вставить("ТекущийИнтервал", ОбщегоНазначенияКлиент.ЦветСтиля("ЗаписьНаРемонтТекущийИнтервал"));
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	текстПоиска = стрШаблон("""obj"":%1" , Элемент.ТекущиеДанные.ПолучитьИдентификатор());
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		
		Если стрНачинаетсяС(Рисунок.Расшифровка, "{""type"":""CurrentPlan") Тогда
			
			Если СтрНайти(Рисунок.Расшифровка, текстПоиска) Тогда
				
				Рисунок.ЦветФона = Цвета.ТекущийИнтервал;
				
			Иначе
				
				Рисунок.ЦветФона = Цвета.ТекущийДокумент;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаЗаполнитьВременныеРамкиПоПланированию(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДополнительныеПараметры.Вставить("НеЗаполнятьВременныеРамки", РезультатОповещения <> КодВозвратаДиалога.Да);
	
	Если ДополнительныеПараметры.Команда = "Записать" Тогда
		Записать(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.Команда = "Провести" Тогда
		Провести(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// НачалоБлока: Обработка связанных работ.

&НаСервере
Функция ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеПозиции)
	
	СоставПолей = СвязанныеРаботы.СоставПолейДокументаПоУмолчанию();
	СоставПолей.Суффикс = ЗаписьНаРемонт.РежимРедактирования;
	ПараметрыДействия = СвязанныеРаботы.ЗаполнитьСвязаннымиРаботами(
		СвязанныеПозиции, ТекущийОбъект(ЭтотОбъект), ЭтотОбъект, СоставПолей);
	
	Если ИспользоватьУчетРабочегоВремени И ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
		
		Для Каждого Строка Из ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы", Новый Массив) Цикл
			ДобавитьНовуюАвтоработуВПакет(Строка);
			ИзмененыПакетыРабот = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработка выбора пользователем связанных работ.
//
// Параметры:
//  СвязанныеРаботы - Массив - Выбранные пользователем связанные работы.
//  Постобработка   - Структура - Содержит поля:
//                                  Обработчик - ОписаниеОповещения - Обработчик который необходимо выполнить после
//                                                                    выбора связанных.
//                                  Данные - Произвольный - Данные передаваемые в выполнение обработчика как результат.
//
&НаКлиенте
Процедура Подключаемый_ПодборСвязанныхРаботЗавершение(СвязанныеРаботы, Постобработка=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СвязанныеРаботы) Тогда
		
		ПараметрыДействия = ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеРаботы);
		
		ПланированиеРесурсовКлиентСервер
			.ЗаполнитьОбъектыПланирования(ТекущийОбъект(ЭтотОбъект), ПланированиеИнтервалы, ПланированиеОбъекты);
		
		ОбновитьДеревоОбъектовПланирования = Ложь;
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.Постобработка(Постобработка);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ПодборСвязанныхРаботЗавершение()

// Обработка ответа пользователя на вопрос об очистке табличных частей перед заполнением по виду ремонта
//
// Параметры:
//  Ответ - Строка - Ответ пользователя. Доступны значения:
//                     "Заполнить_с_очисткой" - перед заполнением будет произведена очистка по текущей
//                                              причине обращения или весь документ если причин нет.
//                     "Заполнить_без_очистки" - очистка производиться не будет.
//                     "Отмена" - Заполнение выполняться не будет.
//  ДругиеИсточники - Массив, Неопределено - Описание других объектов для которых так же необходимо
//                                           выполнить заполнение связанными работами.
//
&НаКлиенте
Процедура Подключаемый_ЗавершениеЗаполнениеПоВидуРемонта(Ответ, ДругиеИсточники) Экспорт
	
	СвязанныеРаботыКлиент.ЗавершениеЗаполнениеПоВидуРемонта(
		ТекущийОбъект(ЭтотОбъект),
		ЭтотОбъект,
		Ответ,
		ДругиеИсточники,
		,
		"ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования);
	
	Если НРег(Ответ) = "заполнить_с_очисткой" И ИспользоватьУчетРабочегоВремени Тогда
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
	
КонецПроцедуры

// КонецБлока: Обработка связанных работ.

// НачалоБлок: Причины обращения.

// Обработка результат редактирования причины пользователем.
//
// Параметры:
//  ДанныеСтроки - Структура, Неопределено - Структура с полями строки причины или Неопределено при отмене редактирования.
//  КлючСтроки - Число - Идентификатор редактируемой строки.
//
&НаКлиенте
Процедура Подключаемый_РедактированиеПричиныЗавершение(ДанныеСтроки, КлючСтроки) Экспорт
	
	ИмяЭлемента = "ОписаниеПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования;
	
	Если ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричины(ДанныеСтроки, КлючСтроки, ЭтотОбъект, ТекущийОбъект(ЭтотОбъект), ИмяЭлемента) Тогда
		
		ОбновитьДеревоОбъектовПланирования = Истина;
		ПризнакЗаписиПланирования = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// КонецБлока: Причины обращения.

// Процедура обработки результата по очистке табличной части по команде из подменю заполнения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОчисткиТабличнойЧасти(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// FIXME: Неудачно написано, нужно переписать
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяКоманды        = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяКоманды");
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяТабличнойЧасти");
	СтрокиДляУдаления = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "СтрокиТабличнойЧастиДляУдаления");
	
	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокиДляУдаления) Тогда
			
			СтрокиДляУдаления = Новый Массив;
			
			Для Каждого Строка Из ТекущийОбъект(ЭтотОбъект)[ИмяТабличнойЧасти] Цикл
				
				СтрокиДляУдаления.Добавить(Строка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// выполним действия необходимые перед удалением.
		Если ИмяТабличнойЧасти = "Автоработы" Тогда
			ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(
				СтрокиДляУдаления, ТекущийОбъект(ЭтотОбъект).Исполнители, "ИдентификаторРаботы");
			
			Если ЗаписьНаРемонт.РежимРедактирования = РежимыРедактирования().ЗаказНаряд Тогда
				
				ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(
					СтрокиДляУдаления, ТекущийОбъект(ЭтотОбъект).Материалы, "ИдентификаторРаботы");
				
				Если ИспользоватьУчетРабочегоВремени Тогда
					ИзмененыПакетыРабот = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Удаляем строки
		Для Каждого Строка Из СтрокиДляУдаления Цикл
			
			ТекущийОбъект(ЭтотОбъект)[ИмяТабличнойЧасти].Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Продолжим заполнение табличной части
	Если СтрНайти(ИмяКоманды, "ЗагрузитьИзФайла") Тогда
		ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти);
	ИначеЕсли СтрНайти(ИмяКоманды, "ЗаполнитьДеталямиИзПроизводства") Тогда
		ЗаполнитьДеталямиИзПроизводстваНаСервере();
	ИначеЕсли СтрНайти(ИмяКоманды, "ЗаполнитьЗаказнымиДеталями") Тогда
		ЗаполнитьЗаказнымиДеталямиНаСервере();
	ИначеЕсли СтрНайти(ИмяКоманды, "ЗаполнитьКраскамиИзПроизводства") Тогда
		ЗаполнитьКраскамиИзПроизводстваНаСервере();
	КонецЕсли;
	
	ОбновитьДеревоОбъектовПланирования = Истина;
	ПризнакЗаписиПланирования = Истина;
	
КонецПроцедуры // ОбработкаРезультатаОчисткиТабличнойЧасти()

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения.Свойство("Действие") И ЗначениеЗаполнено(РезультатОповещения.Действие)Тогда
		
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	Если РезультатОповещения.Действие = "УстановитьНоменклатуру"  Тогда
		
		Если ТолькоПросмотр ИЛИ Элементы["Товары" + ЗаписьНаРемонт.РежимРедактирования].ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = РезультатОповещения.НайденныйОбъект;
		Объект = ТекущийОбъект(ЭтотОбъект);
		
		СтруктураПоиска = Новый Структура("Номенклатура", ВыбранноеЗначение.Объект);
		Если ВыбранноеЗначение.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ВыбранноеЗначение.ЕдиницаИзмерения) Тогда
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыбранноеЗначение.ЕдиницаИзмерения);
		КонецЕсли;
		Если ВыбранноеЗначение.Свойство("ХарактеристикаНоменклатуры")
			И ЗначениеЗаполнено(ВыбранноеЗначение.ХарактеристикаНоменклатуры) Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ВыбранноеЗначение.ХарактеристикаНоменклатуры);
		КонецЕсли;
		// для ЗаказНаряда и пр
		
		ТекущаяСтрокаПричиныОбращения = Элементы["ПричиныОбращения" + ЗаписьНаРемонт.РежимРедактирования].ТекущаяСтрока;
		Если ТекущаяСтрокаПричиныОбращения <> Неопределено Тогда
			
			Объект = ТекущийОбъект(ЭтотОбъект);
			ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(ТекущаяСтрокаПричиныОбращения);
			Если ЗначениеЗаполнено(ДанныеОбращения.ИдентификаторПричиныОбращения) Тогда
				СтруктураПоиска.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
			КонецЕсли;
		КонецЕсли;
		
		Количество = 1;
		Если ВыбранноеЗначение.Свойство("Вес") И ВыбранноеЗначение.Вес > 0 Тогда
			Количество = ВыбранноеЗначение.Вес;
		КонецЕсли;
		
		МассивСтрокТЧ = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение.Объект;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			ПараметрыДействия = Новый Структура;
			МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыДействия);
			СтрокаТабличнойЧасти.Количество = Количество;
			МенеджерОбъекта.ТоварыКоличествоПриИзменении(Объект, СтрокаТабличнойЧасти);
			ОбновитьВидимостьКолонкиХарактеристикаПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ПараметрыДействия);
			СтрокаТабличнойЧасти.ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
				СтруктураПоиска,
				"ИдентификаторПричиныОбращения",
				Неопределено);
		Иначе
			СтрокаТабличнойЧасти = МассивСтрокТЧ[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			МенеджерОбъекта.ТоварыКоличествоПриИзменении(Объект, СтрокаТабличнойЧасти);
		КонецЕсли;
		
	Иначе
		
		Объект = ТекущийОбъект(ЭтотОбъект);
		ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);
		
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ФункционалДляРаботыВВебКлиенте

&НаСервере
Функция КалендарьДневнойОбработкаРасшифровкиНаСервере(Расшифровка)
	
	Расшифровка = РазобратьРасшифровкуНаСервере(Расшифровка);
	
	ТекущаяОбласть = Неопределено;
	name = Расшифровка.Получить("name");
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = name Тогда
			ТекущаяОбласть = Рисунок;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// перенесем картинку в конец списка
	НовыйРисунок = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	ЗаполнитьЗначенияСвойств(НовыйРисунок, ТекущаяОбласть,
	"Текст,ЦветФона,Лево,Верх,Ширина,Высота,ГиперСсылка,Линия,ВертикальноеПоложение,Шрифт,РазмещениеТекста");
	
	данныеРасшифровки = Новый Массив;
	данныеРасшифровки.Добавить(Расшифровка.Получить("index"));
	данныеРасшифровки.Добавить(НовыйРисунок.Имя);
	данныеРасшифровки.Добавить(Расшифровка.Получить("obj"));
	данныеРасшифровки.Добавить(Расшифровка.Получить("note"));
	
	НовыйРисунок.Расшифровка = ПланированиеРесурсовКлиентСервер.РасшифровкаТекущегоИнтервала(данныеРасшифровки);
	КалендарьДневной.Рисунки.Удалить(ТекущаяОбласть);
	Расшифровка = РазобратьРасшифровкуНаСервере(НовыйРисунок.Расшифровка);
	
	Возврат Расшифровка;
	
КонецФункции

&НаСервере
Процедура УдалитьПримечанияНаСервере()
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = "Note" Тогда
			КалендарьДневной.Рисунки.Удалить(Рисунок);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРисунокНаСервере(Описание)
	
	// Удалим рисунок
	ИмяРисунка = Описание.Получить("name");
	ТекстПоиска = стрШаблон("{""type"":""CurrentPlan"",""index"":%1", Описание.Получить("index"));
	ПредыдущийРисунок = Неопределено;
	УдаляемыеРисунки = Новый Массив;
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = ИмяРисунка Тогда
			УдаляемыеРисунки.Добавить(Рисунок);
		ИначеЕсли СтрНачинаетсяС(Рисунок.Расшифровка, ТекстПоиска) Тогда
			УдаляемыеРисунки.Добавить(Рисунок);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Рисунок Из УдаляемыеРисунки Цикл
		КалендарьДневной.Рисунки.Удалить(Рисунок);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РазобратьРасшифровкуНаСервере(Расшифровка) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Расшифровка);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина);
	
КонецФункции

&НаСервере
Функция СоздатьПримечаниеДневногоКалендаряНаСервере(ИмяОбласти)
	
	ИмяОбластиДляВебКлиента = ИмяОбласти;
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = ИмяОбласти Тогда
			Область = Рисунок;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Примечание = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	Примечание.Имя = "РисунокСозданныйНаСервере";
	
	// расположение
	Если РасположениеРесурсов = "ЛЕВО" Тогда
		Примечание.Верх = Область.Верх + 1.5 + Область.Высота;
	Иначе
		Примечание.Верх = Область.Верх;
	КонецЕсли;
	
	Примечание.Лево = Область.Лево + 1.5 + Область.Ширина;
	Примечание.Высота = 25;
	Примечание.Ширина = 50;
	
КонецФункции

&НаСервере
Функция УдалитьРисунокДневногоКалендаряНаСервере(ИмяОбласти)
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = ИмяОбласти Тогда
			КалендарьДневной.Рисунки.Удалить(Рисунок);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьГраницыОбластиНаСервере(ИмяОбласти)
	
	ГраницыОбласти = Новый Структура;
	ГраницыОбласти.Вставить("Верх", 1);
	ГраницыОбласти.Вставить("Лево", 1);
	
	Для Каждого Рисунок Из КалендарьДневной.Рисунки Цикл
		Если Рисунок.Имя = ИмяОбласти Тогда
			ЗаполнитьЗначенияСвойств(ГраницыОбласти, Рисунок);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГраницыОбласти;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект, КонтролируемыеРеквизиты())
	);
	
КонецПроцедуры

&НаКлиентеНаСерверебезКонтекста
Функция КонтролируемыеРеквизиты()
	
	Результат = Новый Соответствие;
	Результат.Вставить("ТоварыПроцентСкидкиЗаказНаряд"       , "ЗаписьНаРемонт.ЗаказНаряд.СкидкаНаценка");
	Результат.Вставить("ТоварыСуммаСкидкиЗаказНаряд"         , "ЗаписьНаРемонт.ЗаказНаряд.СкидкаНаценка");
	Результат.Вставить("ТоварыСуммаСкидкиСтрокиЗаказНаряд"   , "ЗаписьНаРемонт.ЗаказНаряд.Товары.СкидкаНаТовар");
	Результат.Вставить("ТоварыПроцентСкидкиСтрокиЗаказНаряд" , "ЗаписьНаРемонт.ЗаказНаряд.Товары.СкидкаНаТовар");
	
	Результат.Вставить("АвтоработыПроцентСкидкиЗаказНаряд"       , "ЗаписьНаРемонт.ЗаказНаряд.СкидкаНаценкаРаботы");
	Результат.Вставить("АвтоработыСуммаСкидкиЗаказНаряд"         , "ЗаписьНаРемонт.ЗаказНаряд.СкидкаНаценкаРаботы");
	Результат.Вставить("АвтоработыСуммаСкидкиСтрокиЗаказНаряд"   , "ЗаписьНаРемонт.ЗаказНаряд.Автоработы.СкидкаНаТовар");
	Результат.Вставить("АвтоработыПроцентСкидкиСтрокиЗаказНаряд" , "ЗаписьНаРемонт.ЗаказНаряд.Автоработы.СкидкаНаТовар");
	
	Результат.Вставить("ТоварыПроцентСкидкиЗаявкаНаРемонт"       , "ЗаписьНаРемонт.ЗаявкаНаРемонт.СкидкаНаценка");
	Результат.Вставить("ТоварыСуммаСкидкиЗаявкаНаРемонт"         , "ЗаписьНаРемонт.ЗаявкаНаРемонт.СкидкаНаценка");
	Результат.Вставить("ТоварыСуммаСкидкиСтрокиЗаявкаНаРемонт"   , "ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.СкидкаНаТовар");
	Результат.Вставить("ТоварыПроцентСкидкиСтрокиЗаявкаНаРемонт" , "ЗаписьНаРемонт.ЗаявкаНаРемонт.Товары.СкидкаНаТовар");
	
	Результат.Вставить("АвтоработыПроцентСкидкиЗаявкаНаРемонт"       , "ЗаписьНаРемонт.ЗаявкаНаРемонт.СкидкаНаценкаРаботы");
	Результат.Вставить("АвтоработыСуммаСкидкиЗаявкаНаРемонт"         , "ЗаписьНаРемонт.ЗаявкаНаРемонт.СкидкаНаценкаРаботы");
	Результат.Вставить("АвтоработыСуммаСкидкиСтрокиЗаявкаНаРемонт"   , "ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.СкидкаНаТовар");
	Результат.Вставить("АвтоработыПроцентСкидкиСтрокиЗаявкаНаРемонт" , "ЗаписьНаРемонт.ЗаявкаНаРемонт.Автоработы.СкидкаНаТовар");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикСтрокаВыбор(ВыбраннаяСтрока, Поле, ИмяТабличнойЧасти = "Товары")
	
	Строка = ТекущийОбъект(ЭтотОбъект)[ИмяТабличнойЧасти].НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не
		ПраваИНастройкиПользователяКлиент.Значение("СпособВыбораСкидки")
			= ПредопределенноеЗначение("Перечисление.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов")
		Или ТекущийОбъект(ЭтотОбъект).БлокироватьПерерасчетСкидок
	Тогда
		Возврат;
	КонецЕсли;
	
	КонтролируемыеРеквизиты = КонтролируемыеРеквизиты();
	Результат = КонтролируемыеРеквизиты.Получить(Поле.Имя);
	Если Результат <> Неопределено Тогда
		ПутьКРеквизиту = СтрРазделить(Результат, ".");
		Если СтрНайти(Результат, ИмяТабличнойЧасти) Тогда
			ИмяРеквизита = ПутьКРеквизиту[3];
			Значение = Строка[ИмяРеквизита];
		Иначе
			ИмяРеквизита = ПутьКРеквизиту[2];
			Значение = ТекущийОбъект(ЭтотОбъект)[ИмяРеквизита];
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Значение) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для редактирования суммы или процента необходимо выбрать скидку.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюНаСервере()
	
	Если НЕ Элементы.ПодразделениеОтбора.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	
	Если Элементы.ПодразделениеОтбора.Доступность Тогда
		
		Организация = ТекущийОбъект(ЭтотОбъект).Организация;
		Подразделений = ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании;
		
		ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании = ПодразделениеОтбора;
		ИмяОбъекта = ТекущийОбъект(ЭтотОбъект).Ссылка.Метаданные().Имя;
		Документы[ИмяОбъекта].ПодразделениеКомпанииПриИзменении(ТекущийОбъект(ЭтотОбъект), ПараметрыДействия);
		
		ИзмененныеРеквизиты = Новый Структура;
		
		Если Организация <> ТекущийОбъект(ЭтотОбъект).Организация Тогда
			 ИзмененныеРеквизиты.Вставить("Организация",ТекущийОбъект(ЭтотОбъект).Организация);
		КонецЕсли;
		
		Если Подразделений <> ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании Тогда
			 ИзмененныеРеквизиты.Вставить("ПодразделениеКомпании",ТекущийОбъект(ЭтотОбъект).ПодразделениеКомпании);
		КонецЕсли;
		
		РезультатОповещения = Новый Структура();
		РезультатОповещения.Вставить("ИзмененныеРеквизиты",          ИзмененныеРеквизиты);		
	
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИсполнителиДляГрафика()
	
	Если ФормироватьСписокРесурсовПоПодразделению Тогда
				
	 	МассивУчаствуетВПланировании = Новый Массив;
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПроизводства);
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПриемкиВыдачи);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("УчаствуетВПланировании", МассивУчаствуетВПланировании);
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеОтбора);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Ресурс,
		|	Сотрудники.Псевдоним КАК Псевдоним,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Ссылка) КАК РесурсПредставление,
		|	Сотрудники.ГрафикРаботы КАК График
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.УчаствуетВПланировании В(&УчаствуетВПланировании)
		|	И Сотрудники.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И НЕ Сотрудники.ФлагУволен";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выгрузить();		
	Иначе 	
		Возврат ИсполнителиДляГрафика.Выгрузить();
	КонецЕсли;
КонецФункции 

Функция ПолучитьРабочиеМестаДляГрафика()
	
	Если ФормироватьСписокРесурсовПоПодразделению Тогда
				
	 	МассивУчаствуетВПланировании = Новый Массив;
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПроизводства);
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПриемкиВыдачи);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеОтбора);
		Запрос.УстановитьПараметр("ВидИспользованияРабочегоМеста", МассивУчаствуетВПланировании);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цеха.Ссылка КАК Ресурс,
		|	Цеха.Псевдоним КАК Псевдоним,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Цеха.Ссылка) КАК РесурсПредставление,
		|	Цеха.ГрафикРаботы КАК График
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|ГДЕ
		|	Цеха.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И Цеха.ВидИспользованияРабочегоМеста В(&ВидИспользованияРабочегоМеста)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выгрузить();
		
	Иначе 	
		Возврат РабочиеМестаДляГрафика.Выгрузить();;
	КонецЕсли;
	 
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьПеремещения(Область)
	ГраницыОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов, Область);
	ИнтервалыОбласти = ИнтервалыОбласти(
	ГраницыОбласти.Первая,
	ГраницыОбласти.Первая,
	ИнтервалыОтображения,
	ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект));
	
	Если ИнтервалыОбласти.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДоступностьПланирования = ПланированиеРесурсовКлиентСервер.ПроверитьДоступностьВремениИнтервалаПланирования(
		ИнтервалыОбласти[0].Начало, КонтрольПланированияПрошедшимВременем);
	
	Если НЕ ДоступностьПланирования Тогда
		ПланированиеРесурсовКлиент.ПоказатьПредупреждениеЗаписиЗаднимЧислом(КонтрольПланированияПрошедшимВременем);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПереместитьИнтервалыПоОбласти(Область)

	Если СпособПеремещения <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	РамкиОбласти = ПланированиеРесурсовКлиентСервер.ВременныеРамкиОбласти(КалендарьДневной, РасположениеРесурсов, Область);
	РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
	
	НовыеИнтервалы = ИнтервалыОбласти(
	РамкиОбласти.Первая,
	РамкиОбласти.Первая,
	ИнтервалыОтображения,
	РазмерИнтервалаВСекундах);
	
	Условие = Новый Структура("Номер", ВыделенныеРесурсы(ЭтотОбъект, Область)[0]);
	Ресурсы = ОтображаемыеРесурсы.НайтиСтроки(Условие);
	Если Ресурсы.Количество() < 1 ИЛИ ПланированиеИнтервалы.Количество() <= 0 Тогда
		Возврат;		
	КонецЕсли;
		
	Интервал = ПланированиеИнтервалы[ПланированиеИнтервалы.Количество()-1];
	Ресурс = Ресурсы[0].Ресурс;
	
	ЭтоЦех = (ТипЗнч(Ресурс) = Тип("СправочникСсылка.Цеха"));	
	ПланированиеИнтервалы.Сортировать("Конец Возр");
	
	Результат = ПланированиеИнтервалы.НайтиСтроки(Новый Структура(?(ЭтоЦех, "РабочееМесто", "Исполнитель"), Ресурс));
	
	Если Результат.Количество() > 0 Тогда			
		ПереместитьИнтервалы(НовыеИнтервалы[0], Интервал, Ресурс, Результат);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКалендарьОтложено", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИнтервалы(ИнтервалОбласти, Интервал, Ресурс = Неопределено, Результат = Неопределено)	
	Если СпособПеремещения <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбхода = Новый Массив;
	ЭтоКопия = ?(ТипЗнч(ИнтервалОбласти) = Тип("Структура"), Ложь, Истина);
	
	ПланированиеИнтервалы.Сортировать("Начало ВОЗР");
	СкопироватьПеренести(ИнтервалОбласти, Ресурс, Интервал, ЭтоКопия);	
	ЭтоЦех = (ТипЗнч(Ресурс) = Тип("СправочникСсылка.Цеха"));
	
	Результат = ПланированиеИнтервалы.НайтиСтроки(Новый Структура(?(ЭтоЦех, "РабочееМесто", "Исполнитель"), Ресурс));
	
	РазбитьИнтервал = Истина;	
	СчетчикОбщий = 0;	
	Пока СчетчикОбщий < Результат.Количество() Цикл
		
		ИнтервалСмещенияОбщий = Результат[СчетчикОбщий];
		СчетчикОбщий = СчетчикОбщий + 1;
		Счетчик = 0;		
		
		Пока Счетчик < Результат.Количество() Цикл
			
			ИнтервалСмещения = Результат[Счетчик];
			
			Счетчик = Счетчик + 1;
			
			Если ИнтервалСмещения = ИнтервалСмещенияОбщий Тогда
				Продолжить;
			КонецЕсли;
			
			ДлительностьИнтервала = (ИнтервалСмещенияОбщий.Конец - ИнтервалСмещения.Начало);
			
			Если ИнтервалСмещенияОбщий.Начало < ИнтервалСмещения.Конец
				И ИнтервалСмещенияОбщий.Конец > ИнтервалСмещения.Начало
				И ДлительностьИнтервала > 0 Тогда				
				
				СтруктураИнтервала = Новый Структура;
				СтруктураИнтервала.Вставить("Начало", ИнтервалСмещения.Начало + ДлительностьИнтервала);
				СтруктураИнтервала.Вставить("Конец", ИнтервалСмещения.Конец + ДлительностьИнтервала);
				
				Если ИнтервалСмещенияОбщий.Начало > ИнтервалСмещения.Начало
					И ИнтервалСмещенияОбщий.Начало < ИнтервалСмещения.Конец
					И ИнтервалОбласти.Начало < ИнтервалСмещения.Конец
					И ИнтервалОбласти.Начало > ИнтервалСмещения.Начало
					И РазбитьИнтервал Тогда
					СкопироватьПеренести(СтруктураИнтервала, Ресурс, ИнтервалСмещения, ЭтоКопия, Истина, ИнтервалСмещенияОбщий, Истина);
					РазбитьИнтервал = Ложь;
				Иначе
					СкопироватьПеренести(СтруктураИнтервала, Ресурс, ИнтервалСмещения, ЭтоКопия, Истина, ИнтервалСмещенияОбщий);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = ПланированиеИнтервалы.НайтиСтроки(Новый Структура(?(ЭтоЦех, "РабочееМесто", "Исполнитель"), Ресурс));
		
	КонецЦикла;
	
	ОбъединитьИнтервалы(Ресурс);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПеренести(ИнтервалОбласти, Ресурс, Интервал, ЭтоКопия = Ложь, ИзменитьИнтервал = Ложь,
	ИнтервалСмещенияОбщий = Неопределено, РазбитьИнтервал = Ложь)
	
	МассивСвободныеИнтервалы = Новый Массив;
	ИнтервалНачало = ИнтервалОбласти.Начало;
	ИнтервалКонец = ИнтервалОбласти.Конец;
	
	ПолучитьСвободныеИнтервалыНаСервере(ИнтервалОбласти, Ресурс, МассивСвободныеИнтервалы); 
	ОсталосьРаспределить = Интервал.Конец - Интервал.Начало;

	ИндексИнтервал = ПланированиеИнтервалы.Индекс(ИнтервалСмещенияОбщий);
	Если ПланированиеИнтервалы.Индекс(Интервал) >= 0
		И Не ИзменитьИнтервал Тогда
		ПланированиеИнтервалы.Удалить(Интервал);
	КонецЕсли;
	
	Индекс = 1;
	
	Для Каждого СвободныйИнтервал Из МассивСвободныеИнтервалы Цикл
		
		Если ОсталосьРаспределить = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ИнтервалОбласти.Начало > СвободныйИнтервал.Конец Тогда
			Продолжить;
		КонецЕсли;
		
		ИнтервалНачало = Макс(СвободныйИнтервал.Начало, ИнтервалНачало);
		ИнтервалКонец = Мин(СвободныйИнтервал.Конец, ИнтервалНачало + ОсталосьРаспределить);
		
		Если ИзменитьИнтервал Тогда			
			
			Если ИнтервалНачало = ИнтервалКонец Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ РазбитьИнтервал Тогда
				Интервал.Начало = ИнтервалНачало;
				Интервал.Конец = ИнтервалКонец;
				Длительность = Интервал.Конец - Интервал.Начало;			
				ОсталосьРаспределить = ОсталосьРаспределить - Длительность;
				Интервал.НормаВремени = Интервал.Конец - Интервал.Начало;
				Интервал.НормаВремениПредставление =
				ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(Интервал.НормаВремени);
				
			Иначе
				Интервал.Конец = ИнтервалСмещенияОбщий.Начало;
				
				ОсталосьРаспределить = ОсталосьРаспределить - (Интервал.Конец - Интервал.Начало);
				
				Если ИндексИнтервал >= 0 Тогда
					НовыйИнтервалПланирования = ПланированиеИнтервалы.Вставить(Мин(ПланированиеИнтервалы.Количество(), ИндексИнтервал + 1));
				Иначе
					НовыйИнтервалПланирования = ПланированиеИнтервалы.Вставить(0);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовыйИнтервалПланирования, Интервал);		
				НовыйИнтервалПланирования.Начало = ИнтервалНачало;		 
				НовыйИнтервалПланирования.Конец = Мин(ИнтервалКонец, НовыйИнтервалПланирования.Начало + ОсталосьРаспределить);
				НовыйИнтервалПланирования.НормаВремени = НовыйИнтервалПланирования.Конец - НовыйИнтервалПланирования.Начало;
				НовыйИнтервалПланирования.НормаВремениПредставление =
				ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(НовыйИнтервалПланирования.НормаВремени);
				
				ОсталосьРаспределить = ОсталосьРаспределить - (НовыйИнтервалПланирования.Конец - НовыйИнтервалПланирования.Начало); 
				
			КонецЕсли;
			
			ИзменитьИнтервал = Ложь;
			
		Иначе
			
			Если ИндексИнтервал >= 0 Тогда
				НовыйИнтервалПланирования = ПланированиеИнтервалы.Вставить(Мин(ПланированиеИнтервалы.Количество(), ИндексИнтервал + 1));
			Иначе
				НовыйИнтервалПланирования = ПланированиеИнтервалы.Вставить(0);
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(НовыйИнтервалПланирования, Интервал);		
			НовыйИнтервалПланирования.Начало = ИнтервалНачало;		 
			НовыйИнтервалПланирования.Конец = ИнтервалКонец;
			НовыйИнтервалПланирования.НормаВремени = НовыйИнтервалПланирования.Конец - НовыйИнтервалПланирования.Начало;
			НовыйИнтервалПланирования.НормаВремениПредставление =
			ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(НовыйИнтервалПланирования.НормаВремени);
						
			ЭтоИсполнитель = ?(ТипЗнч(Ресурс) = Тип("СправочникСсылка.Сотрудники"), Истина, Ложь);
			Если ЭтоИсполнитель Тогда
				НовыйИнтервалПланирования.Исполнитель = Ресурс;
			Иначе
				НовыйИнтервалПланирования.РабочееМесто = Ресурс;
			КонецЕсли;
			
			Длительность = НовыйИнтервалПланирования.Конец - НовыйИнтервалПланирования.Начало; 
			ОсталосьРаспределить = ОсталосьРаспределить - Длительность;
			
		КонецЕсли;
		ИндексИнтервал = ИндексИнтервал + 1;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСвободныеИнтервалыНаСервере(ИнтервалОбласти, Ресурс, МассивСвободныеИнтервалы)
	
	ПараметрыКалендаря = ПодготовитьПараметрыДлительнойОперации(); 
	ПараметрыКалендаря.Начало = НачалоДня(ИнтервалОбласти.Начало);
	ПараметрыКалендаря.Конец = КонецДня(ИнтервалОбласти.Начало + 86400);
	ПараметрыПланирования = ПланированиеРесурсов.ПолучитьПараметрыПланирования(ПараметрыКалендаря);
	
	МассивСвободныеИнтервалы = ПолучитьСвободныеИнтервалы(ПараметрыПланирования, Ресурс);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвободныеИнтервалы(ПараметрыПланирования, Ресурс)
	
	МассивСвободныеИнтервалы = Новый Массив; 
	НачалоИнтервала = Неопределено;
	
	Для Каждого РабочийИнтервал Из ПараметрыПланирования.РабочиеИнтервалы Цикл
		
		Если РабочийИнтервал.Ресурс = Ресурс И РабочийИнтервал.ЭтоРабочий Тогда
			
			НачалоРабочегоИнтервала = РабочийИнтервал.Дата + (РабочийИнтервал.НачалоРабочегоВремени - Дата(1,1,1));
			КонецРабочегоИнтервала  = РабочийИнтервал.Дата + (РабочийИнтервал.КонецРабочегоВремени - Дата(1,1,1)); 
			
			НачалоИнтервала = НачалоРабочегоИнтервала;
			КонецИнтервала = КонецРабочегоИнтервала; 
			
			Для Каждого ЗапланированыПаралельно Из ПараметрыПланирования.ЗапланированыПаралельно Цикл
				
				ЭтоИсполнитель = ?(ТипЗнч(Ресурс) = Тип("СправочникСсылка.Сотрудники"), Истина, Ложь);
				
				Если ЭтоИсполнитель И Ресурс = ЗапланированыПаралельно.Исполнитель
					ИЛИ Не ЭтоИсполнитель И Ресурс = ЗапланированыПаралельно.РабочееМесто Тогда					
					
					Если ЗапланированыПаралельно.КонецИнтервала <= КонецРабочегоИнтервала
						И ЗапланированыПаралельно.НачалоИнтервала >= НачалоРабочегоИнтервала Тогда 
						
						СтруктураСвободныеИнтервалы = Новый Структура;
						СтруктураСвободныеИнтервалы.Вставить("Начало", НачалоИнтервала);
						СтруктураСвободныеИнтервалы.Вставить("Конец", Мин(КонецИнтервала, ЗапланированыПаралельно.НачалоИнтервала));
						
						Если НЕ СтруктураСвободныеИнтервалы.Начало = СтруктураСвободныеИнтервалы.Конец Тогда 
							МассивСвободныеИнтервалы.Добавить(СтруктураСвободныеИнтервалы);
						КонецЕсли;
						НачалоИнтервала = ЗапланированыПаралельно.КонецИнтервала;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НачалоИнтервала < КонецРабочегоИнтервала Тогда
				
				СтруктураСвободныеИнтервалы = Новый Структура;
				СтруктураСвободныеИнтервалы.Вставить("Начало", Макс(НачалоРабочегоИнтервала,НачалоИнтервала));
				СтруктураСвободныеИнтервалы.Вставить("Конец", КонецИнтервала);
				МассивСвободныеИнтервалы.Добавить(СтруктураСвободныеИнтервалы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСвободныеИнтервалы;
	
КонецФункции 

&НаКлиенте
Процедура ОбъединитьИнтервалы(Ресурс)
	
	ЭтоЦех = (ТипЗнч(Ресурс) = Тип("СправочникСсылка.Цеха"));
	ПланированиеИнтервалы.Сортировать("Начало ВОЗР");
	Результат = ПланированиеИнтервалы.НайтиСтроки(Новый Структура(?(ЭтоЦех, "РабочееМесто", "Исполнитель"), Ресурс));

	СчетчикОбщий = 0;
	Пока СчетчикОбщий < Результат.Количество() Цикл
		
		ИнтервалОбщий = Результат[СчетчикОбщий];
		СчетчикОбщий = СчетчикОбщий + 1;
		Счетчик = 0;
		
		ИнтервалКонец = ИнтервалОбщий.Конец;
		
		Пока Счетчик < Результат.Количество() Цикл
			
			Интервал = Результат[Счетчик];
			Счетчик = Счетчик + 1;
			
			Если ИнтервалОбщий.Идентификатор <> Интервал.Идентификатор Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИнтервалКонец = Интервал.Начало Тогда 			
				ИнтервалОбщий.Конец = Интервал.Конец;
				ИнтервалКонец = Интервал.Конец;
				ИнтервалОбщий.НормаВремени = ИнтервалОбщий.Конец - ИнтервалОбщий.Начало;
				ИнтервалОбщий.НормаВремениПредставление =
				ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(ИнтервалОбщий.НормаВремени);
				ПланированиеИнтервалы.Удалить(Интервал);
			КонецЕсли;
			
		КонецЦикла;
		Результат = ПланированиеИнтервалы.НайтиСтроки(Новый Структура(?(ЭтоЦех, "РабочееМесто", "Исполнитель"), Ресурс));		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзДокументаТовары(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзДокументаТоварыНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзДокументаТоварыНаСервере(Результат, ДополнительныеПараметры)
	
	Товары = ПолучитьИзВременногоХранилища(Результат.Корзина);
	ОбработкаРезультатаПодбораНоменклатуры(Товары, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзКорзины(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзКорзиныЗавершениеНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзКорзиныЗавершениеНаСервере(Результат, ДополнительныеПараметры)
	
	Товары = РегистрыСведений.Корзина.ТоварыИзКорзины(Результат.Наименование, Результат.Дата);
	ОбработкаРезультатаПодбораНоменклатуры(Товары, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиАвансов()
	
	Если Не Элементы.СтраницаЗачетАвансов.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(ТекущийОбъект(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаТелефона()
	
	УправлениеКонтактнойИнформациейАльфаАвто.УстановитьСвойстваПоляВводаТелефона(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		ЗаписьНаРемонт.ЗаявкаНаРемонт.ПредставлениеТелефона,
		Элементы.ПредставлениеТелефонаЗаявкаНаРемонт
	);
	
КонецПроцедуры

// ПрослеживаемыеТовары
&НаСервере
Процедура ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара()
	
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(ТекущийОбъект(ЭтотОбъект));
	ИменаРеквизитов = УчетПрослеживаемыхТоваровСервер
		.ИменаРеквизитовДляЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
	ИменаРеквизитов.ИмяТаблицы = "Автомобили";
	ИменаРеквизитов.ИмяРеквизита = "Автомобиль";
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(
		ТекущийОбъект(ЭтотОбъект),,
		ИменаРеквизитов);
	
КонецПроцедуры
// Конец ПрослеживаемыеТовары

#КонецОбласти

#Область Автомобили_заказ_наряда_обработчики_обработчики_реквизитов

&НаКлиенте
Процедура АвтомобилиАвтомобильПриИзменении(Элемент)
	
	АвтомобилиАвтомобильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ЗаписьНаРемонт.ЗаказНаряд.Автомобили.НайтиПоИдентификатору(Элементы.ЗаказНарядАвтомобили.ТекущаяСтрока);
	ТекущиеДанные.ПрослеживаемыйТовар = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущиеДанные.Автомобиль,
		"Прослеживаемый");
	ОбработкаТабличнойЧастиАвтомобили.ЗаполнитьДополнительныеРеквизиты(
		ЗаписьНаРемонт.ЗаказНаряд,
		ТекущиеДанные,
		ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти
