///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Настройки дневного календаря АРМ-а запись на ремонт"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ				 - Булево	 - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево	 - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,, "ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца,ТолькоПросмотр");
	
	Если РежимМастера Тогда
		
		СброситьНастройки();
		КлючНастроек = ИмяПользователя();
		ЗаполнитьСписокПользователей();
		
	Иначе
		
		Адрес = ПолучитьЗначениеПараметраСтруктуры(Параметры, "АдресРесурсов", "");
		
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			
			ЗаполнитьРесурсы(Адрес);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСоответствиеСтраниц();
	ОбновитьДоступностьКнопокМастера(ЭтотОбъект);
	ОбновитьВидимостьПорядкаРесурсов(ЭтотОбъект);
	НачальнаяНастройкаФормыПоРежиму();
	УстановитьПредставлениеМаштабаЯчейки(ЭтотОбъект);
	УстановитьПредставлениеШириныКолонкиРесурсов(ЭтотОбъект);
	ОбновитьДоступностьСтраниц();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ	 - Булево	 - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "РабочиеМеста");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры <> Неопределено И Не РежимМастера Тогда
		
		Параметры.Свойство("ПорядокРесурсовВОбщемРежиме", ПорядокРесурсовВОбщемРежиме);
		Параметры.Свойство("РежимОтображенияРесурсовНаГрафике", РежимОтображенияРесурсовНаГрафике);
		Параметры.Свойство("РазмерСеткиРедактированияПланировщика", РазмерСеткиРедактированияПланировщика);
		
		Параметры.Свойство("ФормироватьСписокРесурсовПоПодразделению", ФормироватьСписокРесурсовПоПодразделению);
		
	КонецЕсли;
	
	ОбновитьВидимостьПорядкаРесурсов(ЭтотОбъект);
	УстановитьПредставлениеМаштабаЯчейки(ЭтотОбъект);
	УстановитьПредставлениеШириныКолонкиРесурсов(ЭтотОбъект);
	ОбновитьДоступностьСтраниц();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - Страницы при смене страницы
//
&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДоступностьКнопокМастера(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	ЗаполнитьСписокПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ЗаполнитьСписокПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВИерархииПриИзменении(Элемент)
	
	ЗаполнитьСписокПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияРесурсовНаГрафикеПриИзменении(Элемент)
	
	ОбновитьВидимостьПорядкаРесурсов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПредставленияИнтервалаОбъектаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПредставленияИнтервалаОбъекта = ПолучитьШаблонПредставленияИнтервала();
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабЯчейкиПриИзменении(Элемент)
	
	УстановитьПредставлениеМаштабаЯчейки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаКолонкиРесурсовПриИзменении(Элемент)
	
	УстановитьПредставлениеШириныКолонкиРесурсов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСписокРесурсовПоПодразделениюПриИзменении(Элемент)	
	ОбновитьДоступностьСтраниц();	
КонецПроцедуры
  
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочиеМеста

&НаСервере
Процедура РабочиеМестаПриИзмененииНаСервере()
	
	ЗаполнитьДоступностьРесурсов(РеквизитФормыВЗначение("РабочиеМеста", Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Ресурс"));
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаПриИзменении(Элемент)
	
	РабочиеМестаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаРесурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("РежимВыбора,ОтключитьОтбор", Истина, 2);
	
	ОткрытьФорму("Справочник.Цеха.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборЦехаВРабочиеМеста"),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - Закончить
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Закончить(Команда)
	
	Если РежимМастера Тогда
		КоличествоСохраненных = СохранитьНастройкиПользователей();
		Если КоличествоСохраненных >= 0 Тогда
			Пояснение = "";
			Если КоличествоСохраненных > 0 Тогда
				Пояснение = СтрШаблон(НСтр("ru = 'Настройки применены для %1 пользователей.'"), КоличествоСохраненных);
			КонецЕсли;
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Настройки успешно сохранены'"),
				,
				Пояснение);
			
			Закрыть();
		КонецЕсли;
	ИначеЕсли НастройкиКорректны(Исполнители, РабочиеМеста) Тогда
		Настройки = Новый Структура();
		Настройки.Вставить("БазовыйГрафик", БазовыйГрафик);
		Настройки.Вставить("РежимИспользованияГрафиков", РежимИспользованияГрафиков); 
		Настройки.Вставить("УчитыватьДанныеТабеля", УчитыватьДанныеТабеля);
		Настройки.Вставить("МасштабЯчейки", МасштабЯчейки);
		Настройки.Вставить("ШиринаКолонкиРесурсов", ШиринаКолонкиРесурсов);
		Настройки.Вставить("НеОбновлятьМасштабЯчейки", Истина);
		Настройки.Вставить("ОтображатьТолькоРаботающих", ОтображатьТолькоРаботающих);
		Настройки.Вставить("ОтображатьТолькоДоступныеДляПланированияРесурсы", ОтображатьТолькоДоступныеДляПланированияРесурсы);
		Настройки.Вставить("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени);
		Настройки.Вставить("РежимШкалыМинут", РежимШкалыМинут);
		Настройки.Вставить("РазмерСеткиРедактированияПланировщика", РазмерСеткиРедактированияПланировщика);
		Настройки.Вставить("АдресРесурсов", ПоместитьОтборыВХранилище());
		Настройки.Вставить("ПорядокРесурсовВОбщемРежиме",	ПорядокРесурсовВОбщемРежиме);
		Настройки.Вставить("РежимОтображенияРесурсовНаГрафике", РежимОтображенияРесурсовНаГрафике);
		Настройки.Вставить("РасположениеРесурсов", РасположениеРесурсов);
		Настройки.Вставить("ШаблонПредставленияИнтервалаОбъекта", ШаблонПредставленияИнтервалаОбъекта);
		Настройки.Вставить("РежимДобавления", РежимДобавления);
		Настройки.Вставить("СпособПеремещения", СпособПеремещения);
		Настройки.Вставить("КритерийРасчетаЗагруженности", КритерийРасчетаЗагруженности);
		Настройки.Вставить("ИнтервалОбновленияКалендаря", ИнтервалОбновленияКалендаря); 
		Настройки.Вставить("ПланироватьНаЦехДокумента", ПланироватьНаЦехДокумента);
		Настройки.Вставить("ПодразделениеОтбора", ПодразделениеОтбора);
		Настройки.Вставить("ФормироватьСписокРесурсовПоПодразделению", ФормироватьСписокРесурсовПоПодразделению);
		
		Закрыть(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Подбор исполнителей
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборИсполнителей(Команда)
	
	ИмяФормыРедактирования = Лев(ИмяФормы, СтрНайти(ЭтотОбъект.ИмяФормы, ".НастройкиДневногоКалендаря", НаправлениеПоиска.СКонца)) + "ПодборИсполнителей";
	ОписаниеОповещенияОЗакрытииДиалога = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборИсполнителей");
	ОткрытьФорму(ИмяФормыРедактирования,, ЭтотОбъект, УникальныйИдентификатор, ЭтотОбъект.Окно,, ОписаниеОповещенияОЗакрытииДиалога, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

// Процедура - Подбор рабочих мест
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборРабочихМест(Команда)
	
	ИмяФормыРедактирования = Лев(ИмяФормы, СтрНайти(ЭтотОбъект.ИмяФормы, ".НастройкиДневногоКалендаря", НаправлениеПоиска.СКонца)) + "ПодборРабочихМест";
	ОписаниеОповещенияОЗакрытииДиалога = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборРабочихМест");
	ОткрытьФорму(ИмяФормыРедактирования,, ЭтотОбъект, УникальныйИдентификатор, ЭтотОбъект.Окно,, ОписаниеОповещенияОЗакрытииДиалога, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

// Процедура - Сохранить настройки
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СохранитьНастройки(Команда)
	// Проверим возможность сохранения настроек
	Если НастройкиКорректны(Исполнители, РабочиеМеста) Тогда
		
		// зададим вопрос о сохранении
		ОбработкаОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			"СохранитьНастройки");
		
		ПоказатьВопрос(ОбработкаОповещения, НСтр("ru = 'Сохранить текущие настройки?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

// Процедура - Загрузить настройки
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		"ВыборНастроекПользователя");
	
	ОткрытьФорму(
		"Обработка.ЗаписьНаРемонт.Форма.ВыборНастроекПользователя",
		Новый Структура("Должность, ПодразделениеКомпании, ВИерархии", Должность, ПодразделениеКомпании, ВИерархии),
		ЭтотОбъект,
		,
		,
		,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - Выделить все
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыделитьВсе(Команда)
	Для Каждого Пользователь Из ЭтотОбъект.Пользователи Цикл
		Пользователь.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

// Процедура - Снять все
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого Пользователь Из ЭтотОбъект.Пользователи Цикл
		Пользователь.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

// Обработчик переключения на следующую страницу
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Далее(Команда)
	
	УстановитьСтраницу(1);
	
КонецПроцедуры

// Обработчик переключения на предыдущую страницу
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда, в которой возникло данное событие. 
//
&НаКлиенте
Процедура Назад(Команда)
	
	УстановитьСтраницу(-1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует шаблон представления интервала по умолчанию
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШаблонПредставленияИнтервала()
	
	Возврат "{{.Документ.Тип}} {{.Документ.Номер}} от {{.Документ.Дата}}
		|Контрагент: {{.Заказчик}} {{.Заказчик.Телефон}} 
		|Вид ремонта: {{.Документ.ВидРемонта}}
		|Автомобиль: {{.Автомобиль}} {{.Автомобиль.ГосНомер}}
		|Объект планирования: {{.ОбъектПланирования}}
		|Причина обращения: {{.Документ.ОписаниеПричиныОбращения}}";
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеМаштабаЯчейки(Форма)
	
	КоэффициентШкалы = 5;
	Форма.ПредставлениеМасштабаЯчейки = Строка(Форма.МасштабЯчейки * КоэффициентШкалы) + НСтр("ru = '%'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеШириныКолонкиРесурсов(Форма)

	Если Форма.ШиринаКолонкиРесурсов <= 5 Тогда 
		Форма.ПредставлениеШиринаКолонкиРесурсов = НСтр("ru = 'Автоматическая'");
	Иначе
		Форма.ПредставлениеШиринаКолонкиРесурсов = Строка(Форма.ШиринаКолонкиРесурсов) + НСтр("ru = ' символ(а,ов)'");
	КонецЕсли;
		
КонецПроцедуры

// Установить значения настроек в значение по умолчанию
//
&НаСервере
Процедура СброситьНастройки()
	
	РежимИспользованияГрафиков = 1;
	РежимШкалыМинут = 2;
	РазмерСеткиРедактированияПланировщика = Перечисления.РазмерСеткиРедактированияПланировщика.ПятьМинут;
	ПорядокРесурсовВОбщемРежиме = 0;
	РежимОтображенияРесурсовНаГрафике = "Общий";
	РасположениеРесурсов = "ЛЕВО";
	ШаблонПредставленияИнтервалаОбъекта = ПолучитьШаблонПредставленияИнтервала();
	РежимДобавления = 0;
	СпособПеремещения = 0;
	КритерийРасчетаЗагруженности = 0;
	МасштабЯчейки = 20;
	ШиринаКолонкиРесурсов = 0;
	
	Исполнители.Загрузить(ПолучитьИсполнителейПоУмолчанию());
	ТаблицаРабочихМест = ПолучитьРабочиеМестаПоУмолчанию();
	РабочиеМеста.Загрузить(ТаблицаРабочихМест);
	ЗаполнитьДоступностьРесурсов(ТаблицаРабочихМест.ВыгрузитьКолонку("Ресурс"));
	
КонецПроцедуры

// Получение исполнителей для текущего пользователя
// 
// Возвращаемое значение:
//  ТаблицаЗначение - Список ресурсов.
//
&НаСервере
Функция ПолучитьИсполнителейПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ресурс
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Исполнитель = ИСТИНА";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получение рабочих мест для текущего пользователя
// 
// Возвращаемое значение:
//  ТаблицаЗначение - Список ресурсов.
//
&НаСервере
Функция ПолучитьРабочиеМестаПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Цеха.Ссылка КАК Ресурс
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ГДЕ
	|	Цеха.ВидИспользованияРабочегоМеста <> ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.НеУчаствуетВПланировании)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Сохранить настройки пользователей
//
// Возвращаемое значение:
//  Число - Количество пользователей, которым применены настройки.
//
&НаСервере
Функция СохранитьНастройкиПользователей()
	Если НастройкиКорректны(Исполнители, РабочиеМеста) Тогда
		Настройки = ПолучитьОписаниеНастроек();
		
		КоличествоСохраненныхНастроек = 0;
		Для Каждого Пользователь Из Пользователи Цикл
			Если Пользователь.Пометка Тогда
				ХранилищеСистемныхНастроек.Сохранить(
					ЭтотОбъект.ИмяФормы + "/ТекущиеДанные"
					,
					,
					Настройки,
					,
					Пользователь.Пользователь);
				
				КоличествоСохраненныхНастроек = КоличествоСохраненныхНастроек + 1;
			КонецЕсли;
		КонецЦикла;
		
		Возврат КоличествоСохраненныхНастроек;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции

// Сохранить настройки пользователя
//
&НаСервере
Процедура ЗаписатьНастройкиПользователя()
	
	Настройки = ПолучитьОписаниеНастроек();
	
	ХранилищеСистемныхНастроек.Сохранить(ЭтотОбъект.ИмяФормы + "/ТекущиеДанные",, Настройки);
	
КонецПроцедуры

// Установить настройки пользователя
//
// Параметры:
//  КлючНастроек	 - Строка	 - Ключ настроек (ИмяФормы+"/ТекущиеДанные")
//  ИмяПользователя	 - Строка	 - Имя пользователя настрйоки которого применяются.
//
&НаСервере
Процедура УстановитьНастройкиПользователя(КлючНастроек, ИмяПользователя = Неопределено)
	
	ИмяПользователя = ?(ИмяПользователя = Неопределено, ИмяПользователя(), ИмяПользователя);
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроек, , , ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		УчитыватьДанныеТабеля = Настройки.Получить("УчитыватьДанныеТабеля");
		ОтображатьДанныеУчетаРабочегоВремени = Настройки.Получить("ОтображатьДанныеУчетаРабочегоВремени");
		РежимШкалыМинут = Настройки.Получить("РежимШкалыМинут");
		МасштабЯчейки = Настройки.Получить("МасштабЯчейки");
		ШиринаКолонкиРесурсов = Настройки.Получить("ШиринаКолонкиРесурсов");
		РазмерСеткиРедактированияПланировщика = Настройки.Получить("РазмерСеткиРедактированияПланировщика");
		РежимИспользованияГрафиков = Настройки.Получить("РежимИспользованияГрафиков");
		ОтображатьТолькоРаботающих = Настройки.Получить("ОтображатьТолькоРаботающих");
		ОтображатьТолькоДоступныеДляПланированияРесурсы = Настройки.Получить("ОтображатьТолькоДоступныеДляПланированияРесурсы");
		БазовыйГрафик = Настройки.Получить("БазовыйГрафик");
		ПорядокРесурсовВОбщемРежиме = Настройки.Получить("ПорядокРесурсовВОбщемРежиме");
		РежимОтображенияРесурсовНаГрафике = Настройки.Получить("РежимОтображенияРесурсовНаГрафике");
		РасположениеРесурсов = Настройки.Получить("РасположениеРесурсов");
		ШаблонПредставленияИнтервалаОбъекта = Настройки.Получить("ШаблонПредставленияИнтервалаОбъекта");
		РежимДобавления = Настройки.Получить("РежимДобавления");
		СпособПеремещения = Настройки.Получить("СпособПеремещения");
		КритерийРасчетаЗагруженности = Настройки.Получить("КритерийРасчетаЗагруженности");
		ИнтервалОбновленияКалендаря = Настройки.Получить("ИнтервалОбновленияКалендаря");
		ПланироватьНаЦехДокумента = Настройки.Получить("ПланироватьНаЦехДокумента");
		
		// очистим старые настройки
		Исполнители.Очистить();
		РабочиеМеста.Очистить();
		
		мИсполнители = Настройки.Получить("Исполнители");
		
		Если ТипЗнч(мИсполнители) <> Тип("Массив") Тогда
			
			мИсполнители = ПолучитьИсполнителейПоУмолчанию().ВыгрузитьКолонку("Ресурс");
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Исполнители, мИсполнители, "Ресурс");
		
		мРабочиеМеста = Настройки.Получить("РабочиеМеста");
		
		Если ТипЗнч(мРабочиеМеста) <> Тип("Массив") Тогда
			
			мРабочиеМеста = ПолучитьРабочиеМестаПоУмолчанию().ВыгрузитьКолонку("Ресурс");
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(РабочиеМеста, мРабочиеМеста, "Ресурс");
		ЗаполнитьДоступностьРесурсов(мРабочиеМеста);
	КонецЕсли;
	
КонецПроцедуры

// Поместить отборы в хранилище
//  Сохраняет выбранные ресурсы в хранилище.
// 
// Возвращаемое значение:
//  Строка - Адрес объектов в хранилище.
//
&НаСервере
Функция ПоместитьОтборыВХранилище()
	
	Ресурсы = Новый Структура;
	Ресурсы.Вставить("Исполнители", Исполнители.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	Ресурсы.Вставить("Цеха", РабочиеМеста.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	
	Возврат ПоместитьВоВременноеХранилище(Ресурсы, УникальныйИдентификатор);
	
КонецФункции

// Получить описание настроек
//
// Возвращаемое значение:
//  Соответствие - Возвращает описание настроек формы.
//
&НаСервере
Функция ПолучитьОписаниеНастроек()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("УчитыватьДанныеТабеля", УчитыватьДанныеТабеля);
	Настройки.Вставить("МасштабЯчейки", МасштабЯчейки);
	Настройки.Вставить("ШиринаКолонкиРесурсов", ШиринаКолонкиРесурсов);
	Настройки.Вставить("НеОбновлятьМасштабЯчейки", Истина);
	Настройки.Вставить("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени);
	Настройки.Вставить("РежимШкалыМинут", РежимШкалыМинут);
	Настройки.Вставить("РазмерСеткиРедактированияПланировщика", РазмерСеткиРедактированияПланировщика);
	Настройки.Вставить("РежимИспользованияГрафиков", РежимИспользованияГрафиков);
	Настройки.Вставить("ОтображатьТолькоРаботающих", ОтображатьТолькоРаботающих);
	Настройки.Вставить("ОтображатьТолькоДоступныеДляПланированияРесурсы", ОтображатьТолькоДоступныеДляПланированияРесурсы);
	Настройки.Вставить("БазовыйГрафик", БазовыйГрафик);
	Настройки.Вставить("ПорядокРесурсовВОбщемРежиме", ПорядокРесурсовВОбщемРежиме);
	Настройки.Вставить("РежимОтображенияРесурсовНаГрафике",РежимОтображенияРесурсовНаГрафике);
	Настройки.Вставить("РасположениеРесурсов", РасположениеРесурсов);
	Настройки.Вставить("ШаблонПредставленияИнтервалаОбъекта", ШаблонПредставленияИнтервалаОбъекта);
	Настройки.Вставить("РежимДобавления", РежимДобавления);
	Настройки.Вставить("СпособПеремещения", СпособПеремещения);
	Настройки.Вставить("КритерийРасчетаЗагруженности", КритерийРасчетаЗагруженности);
	Настройки.Вставить("ИнтервалОбновленияКалендаря", ИнтервалОбновленияКалендаря);
	Настройки.Вставить("ПланироватьНаЦехДокумента", ПланироватьНаЦехДокумента);
	
	Настройки.Вставить("Исполнители", Исполнители.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	Настройки.Вставить("РабочиеМеста", РабочиеМеста.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	
	Настройки.Вставить("ФормироватьСписокРесурсовПоПодразделению", ФормироватьСписокРесурсовПоПодразделению);
	Настройки.Вставить("ПодразделениеОтбора", ПодразделениеОтбора);	
	
	Возврат Настройки;
	
КонецФункции

// Заполнить ресурсы
//
// Параметры:
//  Адрес					 - Строка	 - Адрес ресурсов в хранилище
//  ЗаполнятьПоУмолчанию	 - Булево	 - Заполнять ресурсами по умолчанию, если отоборы пустые.
//  ЗагружатьИсполнителей	 - Булево	 - Загружать только исполнителей
//  ЗагружатьРабочиеМеста	 - Булево	 - Загружать только рабочие места
//  ЗагружатьВручную		 - Булево	 - Перенос строк вручную.
//
&НаСервере
Процедура ЗаполнитьРесурсы(Адрес)
	Исполнители.Очистить(); РабочиеМеста.Очистить();
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Исполнители, ДанныеЗаполнения.Исполнители, "Ресурс");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Исполнители) Тогда
		Исполнители.Загрузить(ПолучитьИсполнителейПоУмолчанию());
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Цеха") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(РабочиеМеста, ДанныеЗаполнения.Цеха, "Ресурс");
		ЗаполнитьДоступностьРесурсов(ДанныеЗаполнения.Цеха);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РабочиеМеста) Тогда
		ТаблицаРабочихМест = ПолучитьРабочиеМестаПоУмолчанию();
		РабочиеМеста.Загрузить(ТаблицаРабочихМест);
		ЗаполнитьДоступностьРесурсов(ТаблицаРабочихМест.ВыгрузитьКолонку("Ресурс"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиКорректны(Знач Исполнители, Знач РабочиеМеста)
	ВсеОК = Истина;
	
	// проверим исполнителей на дубли
	тзИсполнители = Исполнители.Выгрузить(, "Ресурс");
	тзИсполнители.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тзИсполнители.ЗаполнитьЗначения(1, "Количество");
	тзИсполнители.Свернуть("Ресурс", "Количество");
	тзИсполнители.Сортировать("Количество УБЫВ");
	
	повторяющиесяИсполнители = Новый Массив;
	Для Каждого строка Из тзИсполнители Цикл
		Если строка.Количество > 1 Тогда
			ВсеОК = Ложь;
			повторяющиесяИсполнители.Добавить(строка.Ресурс);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВсеОК Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ресурсы %1 в списке исполнителей не уникальны.'"), СтрСоединить(повторяющиесяИсполнители, ";")
			)
		);
	КонецЕсли;
	
	// проверим рабочие места на дубли
	тзРабочиеМеста = РабочиеМеста.Выгрузить(, "Ресурс");
	тзРабочиеМеста.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тзРабочиеМеста.ЗаполнитьЗначения(1, "Количество");
	тзРабочиеМеста.Свернуть("Ресурс", "Количество");
	тзРабочиеМеста.Сортировать("Количество УБЫВ");
	
	повторяющиесяРабочиеМеста = Новый Массив;
	Для Каждого строка Из тзРабочиеМеста Цикл
		Если строка.Количество > 1 Тогда
			ВсеОК = Ложь;
			повторяющиесяРабочиеМеста.Добавить(строка.Ресурс);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВсеОК Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ресурсы %1 в списке рабочих мест не уникальны.'"), СтрСоединить(повторяющиесяИсполнители, ";")
			)
		);

	КонецЕсли;
	
	// проверим исполнителей на пустые строки
	Если Исполнители.НайтиСтроки(Новый Структура("Ресурс", Справочники.Сотрудники.ПустаяСсылка())).Количество() > 0 Тогда
		ВсеОК = Ложь;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В списке исполнителей найдены незаполненные строки.'"));
	КонецЕсли;
	
	// проверим исполнителей на пустые строки
	Если РабочиеМеста.НайтиСтроки(Новый Структура("Ресурс", Справочники.Цеха.ПустаяСсылка())).Количество() > 0 Тогда
		ВсеОК = Ложь;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В списке рабочих мест найдены незаполненные строки.'"));
	КонецЕсли;
	
	Возврат ВсеОК;
КонецФункции

// Процедура - Загрузить список пользователей
//
&НаСервере
Функция ПолучитьИдентификаторыПользователей()
	
	Идентификаторы = Новый Массив;
	ИменаПользователей = Новый Соответствие;
	УстановитьПривилегированныйРежим(Истина);
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Пользователь Из ПользователиИБ Цикл
		
		Идентификаторы.Добавить(Пользователь.УникальныйИдентификатор);
		ИменаПользователей.Вставить(Пользователь.УникальныйИдентификатор, Пользователь.Имя);
		
	КонецЦикла;
	
	Возврат Новый Структура(
		"ИдентификаторыПользователейИБ,СоответствиеИменИИдентификаторв", Идентификаторы, ИменаПользователей);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПользователей()
	Пользователи.Очистить();
	
	ДаннныеПользователей = ПолучитьИдентификаторыПользователей();
	
	Построитель = Новый ПостроительЗапроса(
	"ВЫБРАТЬ
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.Представление КАК Представление,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&ИдентификаторПользователяИБ)
	|	И НЕ(Пользователи.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|					И Пользователи.Сотрудник.ФлагУволен)
	|				И  НЕ Пользователи.Недействителен
	|{ГДЕ
	|	Пользователи.Сотрудник.Должность КАК Должность,
	|	Пользователи.ПодразделениеКомпании КАК ПодразделениеКомпании}");
	
	Построитель.ЗаполнитьНастройки();
	
	Если НЕ Должность.Пустая() Тогда
		Построитель.Отбор.Добавить("Должность").Установить(Должность, Истина);
	КонецЕсли;
	
	Если НЕ ПодразделениеКомпании.Пустая() Тогда
		НовыйОтбор = Построитель.Отбор.Добавить("ПодразделениеКомпании");
		НовыйОтбор.Значение = ПодразделениеКомпании;
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ВидСравнения = ?(НЕ ВИерархии, ВидСравнения.Равно, ВидСравнения.ВИерархии);
	КонецЕсли;
	
	Построитель.Параметры.Вставить("ИдентификаторПользователяИБ", ДаннныеПользователей.ИдентификаторыПользователейИБ);
	
	Построитель.Выполнить();
	
	Если НЕ Построитель.Результат.Пустой() Тогда
		Выборка = Построитель.Результат.Выбрать();
		
		ИмяТекущегоПользователя = ИмяПользователя();
		Пока Выборка.Следующий() Цикл
			Пользователь =  ДаннныеПользователей.СоответствиеИменИИдентификаторв.Получить(Выборка.ИдентификаторПользователяИБ);
			НоваяСтрока = Пользователи.Добавить();
			НоваяСтрока.Пользователь = Пользователь;
			НоваяСтрока.Представление = Выборка.Представление;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет реквизит "Доступность ресурса" таблицы значений "Рабочие места".
//
&НаСервере
Процедура ЗаполнитьДоступностьРесурсов(ДанныеЗаполнения)
	
	ЗначенияТипИспользования = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДанныеЗаполнения, "ВидИспользованияРабочегоМеста");
	Элементы.ГруппаПредупреждение.Видимость = Ложь;
	Для Каждого СтрокаСоответствия Из ЗначенияТипИспользования Цикл
		Ресурсы = РабочиеМеста.НайтиСтроки(Новый Структура("Ресурс", СтрокаСоответствия.Ключ));
		Если СтрокаСоответствия.Значение = Перечисления.ВидыИспользованияРабочихМест.НеУчаствуетВПланировании Тогда
			Элементы.ГруппаПредупреждение.Видимость = Истина;
			Для Каждого Ресурс Из Ресурсы Цикл
				Ресурс.ДоступностьРесурса = Ложь;
			КонецЦикла;
		Иначе
			Для Каждого Ресурс Из Ресурсы Цикл
				Ресурс.ДоступностьРесурса = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область УправлениеВнешнимВидомФормы

// Изменение отображения порядка ресурсов при общем режиме отображения
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьПорядкаРесурсов(Форма)
	
	Форма.Элементы.ПорядокРесурсовВОбщемРежиме.Видимость = (Форма.РежимОтображенияРесурсовНаГрафике = "Общий");
	
КонецПроцедуры

// Управление доступностью кнопок мастера
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьКнопокМастера(Форма)
	
	ТСтраница = Форма.Страницы.Найти(Форма.Элементы.Страницы.ТекущаяСтраница.Имя);
	
	Если ТСтраница = Неопределено Тогда
		ТСтраница = 0;
	КонецЕсли;
	
	Форма.Элементы.ФормаНазад.Доступность = (ТСтраница > 0);
	Форма.Элементы.ФормаДалее.Доступность = (ТСтраница < Форма.Страницы.ВГраница());
	
КонецПроцедуры

// Возвращает элементы настроек редактирования.
//
// Возвращаемое значение:
//   Массив - Список элементов формы с настройками для редактирования.
//
&НаСервере
Функция ЭлементыНастроекРедактирования()
	
	Список = Новый Массив;
	Список.Добавить(Элементы.АвтообновлениеКалендаря);
	Список.Добавить(Элементы.ОтображатьТолькоДоступныеДляПланированияРесурсы);
	Список.Добавить(Элементы.ПояснениеОтображатьТолькоДоступныеДляПланированияРесурсы);
	Список.Добавить(Элементы.СтраницаРедактирование);
	Список.Добавить(Элементы.СтраницаПотенциалы);
	
	Возврат Список;
	
КонецФункции // ЭлементыНастроекРедактирования()

// Настройка отображения кнопок мастера
//
&НаСервере
Процедура НачальнаяНастройкаФормыПоРежиму()
	
	Элементы.ФормаДалее.Видимость = РежимМастера;
	Элементы.ФормаНазад.Видимость = РежимМастера;
	Элементы.СтраницаПользователи.Видимость = РежимМастера;
	
	ЭлементыРедактирования = ЭлементыНастроекРедактирования();
	
	Для Каждого Элемент Из ЭлементыРедактирования Цикл
		
		Элемент.Видимость = НЕ СкрыватьНастройкиРедактирования;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВРежимеМастера

// Формирует соответствие страниц для обхода мастером
//
&НаСервере
Процедура ЗаполнитьСоответствиеСтраниц()
	
	мСтраницы = Новый Массив;
	мСтраницы.Добавить("СтраницаНастройкиДневногоКалендаря");
	мСтраницы.Добавить("СтраницаРедактирование");
	мСтраницы.Добавить("СтраницаПотенциалы");
	мСтраницы.Добавить("СтраницаНастройкиПредставленияДокументов");
	мСтраницы.Добавить("СтраницаРабочиеМеста");
	мСтраницы.Добавить("СтраницаИсполнители");
	мСтраницы.Добавить("СтраницаПользователи");
	
	Страницы = Новый ФиксированныйМассив(мСтраницы);
	
КонецПроцедуры

// Определяет номер текущей страницы
// 
// Возвращаемое значение:
//  Число - Возвращает число в имени текущей страницы.
//
&НаКлиенте
Функция ПолучитьНомерТекущейСтраницы()
	
	ТСтраница = Страницы.Найти(Элементы.Страницы.ТекущаяСтраница.Имя);
	Возврат ?(ТСтраница <> Неопределено, ТСтраница, 0);
	
КонецФункции

// Определяет страницу по порядковому номеру
//
&НаКлиенте
Функция ПолучитьСтраницуПоНомеру(Номер)
	
	Возврат Элементы[Страницы.Получить(Номер)];
	
КонецФункции

// Устанавливает новую текущую страницу
//
// Параметры:
//  Направление	 - Число - Число указывет смещение страницы ("+" вправо, "-" влево).
//
&НаКлиенте
Процедура УстановитьСтраницу(Направление)
	
	Элементы.Страницы.ТекущаяСтраница = ПолучитьСтраницуПоНомеру(ПолучитьНомерТекущейСтраницы() + Направление);
	
	ОбновитьДоступностьКнопокМастера(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Обработчик события возникающего при получении результата работы подчиненной формы.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры вызова обработчика.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Отмена ИЛИ РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ПодборИсполнителей" И ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
		Значение = ПолучитьИзВременногоХранилища(РезультатОповещения);
		Если ЗначениеЗаполнено(Значение) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Исполнители, Значение, "Ресурс");
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "ПодборРабочихМест"  И ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
		Значение = ПолучитьИзВременногоХранилища(РезультатОповещения);
		Если ЗначениеЗаполнено(Значение) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(РабочиеМеста, Значение, "Ресурс");
			РабочиеМестаПриИзменении(Неопределено);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "СохранитьНастройки" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ЗаписатьНастройкиПользователя();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ВыборНастроекПользователя"
		И ТипЗнч(РезультатОповещения) = Тип("Соответствие") Тогда
		
		ИмяПользователя = РезультатОповещения.Получить("КлючНастроек");
		Если ИмяПользователя <> Неопределено Тогда
			УстановитьНастройкиПользователя(ЭтотОбъект.ИмяФормы + "/ТекущиеДанные", ИмяПользователя);
		КонецЕсли
		
	ИначеЕсли ДополнительныеПараметры = "ВыборЦехаВРабочиеМеста" Тогда
		
		Элементы.РабочиеМеста.ТекущиеДанные.Ресурс = РезультатОповещения;
		РабочиеМестаПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбновитьДоступностьСтраниц()
	Элементы.ПодразделениеОтбора.Доступность = ФормироватьСписокРесурсовПоПодразделению;
	Элементы.СтраницаИсполнители.Доступность = НЕ ФормироватьСписокРесурсовПоПодразделению;
	Элементы.СтраницаРабочиеМеста.Доступность = НЕ ФормироватьСписокРесурсовПоПодразделению;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

