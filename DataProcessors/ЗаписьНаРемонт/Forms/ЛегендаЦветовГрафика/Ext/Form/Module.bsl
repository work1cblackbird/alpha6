
#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получим все цвета оформления графиков
	Цвета = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков();
	
	// Укажем какие цвета необходимо отобразить в легенде
	СлужебныеЦветаДляВывода = СлужебныеЦветаДляВывода();
	
	// Получим цвета заказ-нарядов
	ЗаказНарядЦветаДляВывода = ЗаказНарядЦветаДляВывода();
	
	// Получим цвета отметок учета рабочего времени сотрудника
	ОтображатьДанныеУчетаРабочегоВремени = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ОтображатьДанныеУчетаРабочегоВремени", Ложь);
	УРВЦветаДляВывода = Новый Массив;
	
	Если ОтображатьДанныеУчетаРабочегоВремени Тогда
		
		УРВЦветаДляВывода = УРВЦветаДляВывода();
		
	КонецЕсли;
	
	ОтобразитьПолученныеДанныеНаФорме(Цвета, СлужебныеЦветаДляВывода, ЗаказНарядЦветаДляВывода, УРВЦветаДляВывода);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Эта форма не должна вызываться самостоятельно
	Если ЭтотОбъект.ВладелецФормы = Неопределено Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Запрещен самостоятельный вызов.'"),,
			НСтр("ru = 'Данная форма используется другими объектами конфигурации.'"),
			БиблиотекаКартинок.Предупреждение32,
			СтатусОповещенияПользователя.Важное);
			
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает перечень цветов для отображения на форме.
// 
// Возвращаемое значение:
//  Массив - Содержит перечень цветов для вывода на форме.
//
&НаСервере
Функция СлужебныеЦветаДляВывода()
	
	СтруктураЦветов = Новый Структура;
	
	СтруктураЦветов.Вставить("ЦветСвободно",           НСтр("ru = 'Свободно'"));
	СтруктураЦветов.Вставить("ЦветСвободно2",          НСтр("ru = 'Свободно (2)'"));
	СтруктураЦветов.Вставить("ЦветОбеденныйПерерыв",   НСтр("ru = 'Обеденный перерыв'"));
	СтруктураЦветов.Вставить("ЦветТехническийПерерыв", НСтр("ru = 'Технический перерыв'"));
	СтруктураЦветов.Вставить("ЦветНерабочийИнтервал",  НСтр("ru = 'Нерабочий интервал'"));
	СтруктураЦветов.Вставить("ЦветВнеПериода",         НСтр("ru = 'Вне графика'"));
	СтруктураЦветов.Вставить("ЦветТекущаяДата",        НСтр("ru = 'Текущая дата'"));
	СтруктураЦветов.Вставить("ЦветСлужебнаяЯчейка",    НСтр("ru = 'Служебная ячейка'"));
	
	Возврат СтруктураЦветов;
	
КонецФункции

// Функция возвращает цвета состояний заказ-нарядов для отображения на форме.
// 
// Возвращаемое значение:
//  Массив - Содержит перечень цветов для вывода на форме.
//
&НаСервере
Функция ЗаказНарядЦветаДляВывода()
	
	// получаем цвета состояний заказ-нарядов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСостоянийЗаказНарядов.Ссылка КАК Ссылка,
	|	ВидыСостоянийЗаказНарядов.Представление КАК Представление,
	|	ВидыСостоянийЗаказНарядов.Цвет КАК Цвет
	|ИЗ
	|	Справочник.ВидыСостоянийЗаказНарядов КАК ВидыСостоянийЗаказНарядов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСостоянийЗаказНарядов.РеквизитДопУпорядочивания";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает цвета состояний учета рабочего времени сотрудника для отображения на форме.
// 
// Возвращаемое значение:
//  Массив - Содержит перечень цветов для вывода на форме.
//
&НаСервере
Функция УРВЦветаДляВывода()
	
	// получаем цвета состояний УРВ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВидыОтметокВремени.Ссылка,
		|	ВидыОтметокВремени.Представление,
		|	ВидыОтметокВремени.Цвет
		|ИЗ
		|	Справочник.ВидыОтметокВремени КАК ВидыОтметокВремени";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура отрисовывает полученные данные на форме.
//
&НаСервере
Процедура ОтобразитьПолученныеДанныеНаФорме(Цвета, СлужебныеЦветаДляВывода, ЗаказНарядЦветаДляВывода, УРВЦветаДляВывода)
	
	// Отрисуем элементы служебных цветов
	Если Цвета.Количество() > 0 И СлужебныеЦветаДляВывода.Количество() > 0 Тогда
		
		// Создадим группу для элементов цветов
		Группа                       = Элементы.Добавить("ГруппаСлужебныеЦветаДляВывода", Тип("ГруппаФормы"), ЭтотОбъект);
		Группа.Вид                   = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок             = НСтр("ru = 'Служебные цвета'");
		Группа.Группировка           = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Группа.ТолькоПросмотр        = Истина;
		Группа.Поведение             = ПоведениеОбычнойГруппы.Обычное;
		Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
		Группа.Отображение           = ОтображениеОбычнойГруппы.СильноеВыделение;
		Группа.Ширина                = 20;
		
		// Создадим элементы цветов
		Для Каждого Цвет Из СлужебныеЦветаДляВывода Цикл
			
			// Если этот цвет найден в используемых цветах оформления графика, то отобразим его
			Если Цвета.Свойство(Цвет.Ключ) Тогда
				
				// Создадим реквизиты формы
				НовыеРеквизиты = Новый Массив;
				НовыйРеквизит  = Новый РеквизитФормы("СлужебныеЦвета" + Цвет.Ключ, Новый ОписаниеТипов(),, "СлужебныеЦвета" + Цвет.Ключ, Ложь);
				НовыеРеквизиты.Добавить(НовыйРеквизит);
				ИзменитьРеквизиты(НовыеРеквизиты);
				
				// Создадим элементы формы
				НовыйЦвет                          = ЭтотОбъект.Элементы.Добавить("СлужебныеЦвета" + Цвет.Ключ, Тип("ПолеФормы"), Группа);
				НовыйЦвет.Вид                      = ВидПоляФормы.ПолеНадписи;
				НовыйЦвет.ПутьКДанным              = "СлужебныеЦвета" + Цвет.Ключ;
				Новыйцвет.ЦветФона                 = ?(Цвета[Цвет.Ключ] = Неопределено, Новый Цвет(255,255,255), Цвета[Цвет.Ключ]);
				НовыйЦвет.Ширина                   = 4;
				НовыйЦвет.РастягиватьПоГоризонтали = Ложь;
				НовыйЦвет.Заголовок                = " - " + Цвет.Значение;
				НовыйЦвет.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Право;
				НовыйЦвет.Рамка                    = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отрисуем элементы цветов заказ-нарядов
	Если ЗаказНарядЦветаДляВывода.Количество() > 0 Тогда
		
		// Создадим группу для элементов цветов
		Группа                       = Элементы.Добавить("ГруппаЗаказНарядЦветаДляВывода", Тип("ГруппаФормы"), ЭтотОбъект);
		Группа.Вид                   = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок             = НСтр("ru = 'Состояние ремонта'");
		Группа.Группировка           = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Группа.ТолькоПросмотр        = Истина;
		Группа.Поведение             = ПоведениеОбычнойГруппы.Обычное;
		Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
		Группа.Отображение           = ОтображениеОбычнойГруппы.СильноеВыделение;
		Группа.Ширина                = 20;
		
		// Создадим элементы цветов
		Итератор = 0;
		Для Каждого Цвет Из ЗаказНарядЦветаДляВывода Цикл
			
			ИмяРеквизитаИЭлемента = Строка(Цвет.Ссылка.Код) + Строка(Итератор);
			Итератор = Итератор + 1;
			
			// Создадим реквизиты формы
			НовыеРеквизиты = Новый Массив;
			НовыйРеквизит  = Новый РеквизитФормы("ЗаказНарядЦвета" + ИмяРеквизитаИЭлемента, Новый ОписаниеТипов(),, "ЗаказНарядЦвета" + ИмяРеквизитаИЭлемента, Ложь);
			НовыеРеквизиты.Добавить(НовыйРеквизит);
			ИзменитьРеквизиты(НовыеРеквизиты);
			
			// Создадим элементы формы
			НовыйЦвет                          = ЭтотОбъект.Элементы.Добавить("ЗаказНарядЦвета" + ИмяРеквизитаИЭлемента, Тип("ПолеФормы"), Группа);
			НовыйЦвет.Вид                      = ВидПоляФормы.ПолеНадписи;
			НовыйЦвет.ПутьКДанным              = "ЗаказНарядЦвета" + ИмяРеквизитаИЭлемента;
			Новыйцвет.ЦветФона                 = ?(Цвет.Цвет.Получить() = Неопределено, Новый Цвет(255,255,255), Цвет.Цвет.Получить());
			НовыйЦвет.Ширина                   = 4;
			НовыйЦвет.РастягиватьПоГоризонтали = Ложь;
			НовыйЦвет.Заголовок                = " - " + Цвет.Представление;
			НовыйЦвет.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Право;
			НовыйЦвет.Рамка                    = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отрисуем элементы цветов УРВ
	Если УРВЦветаДляВывода.Количество() > 0 Тогда
		
		// Создадим группу для элементов цветов
		Группа                       = Элементы.Добавить("ГруппаУРВЦветаДляВывода", Тип("ГруппаФормы"), ЭтотОбъект);
		Группа.Вид                   = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок             = НСтр("ru = 'Состояние работ в цехе'");
		Группа.Группировка           = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Группа.ТолькоПросмотр        = Истина;
		Группа.Поведение             = ПоведениеОбычнойГруппы.Обычное;
		Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
		Группа.Отображение           = ОтображениеОбычнойГруппы.СильноеВыделение;
		Группа.Ширина                = 20;
		
		// Создадим элементы цветов
		Итератор = 0;
		Для Каждого Цвет Из УРВЦветаДляВывода Цикл
			
			ИмяРеквизитаИЭлемента = Строка(Цвет.Ссылка.Код) + Строка(Итератор);
			Итератор = Итератор + 1;
			
			// Создадим реквизиты формы
			НовыеРеквизиты = Новый Массив;
			НовыйРеквизит  = Новый РеквизитФормы("УРВЦвета" + ИмяРеквизитаИЭлемента, Новый ОписаниеТипов(),, "УРВЦвета" + ИмяРеквизитаИЭлемента, Ложь);
			НовыеРеквизиты.Добавить(НовыйРеквизит);
			ИзменитьРеквизиты(НовыеРеквизиты);
			
			// Создадим элементы формы
			НовыйЦвет                          = ЭтотОбъект.Элементы.Добавить("УРВЦвета" + ИмяРеквизитаИЭлемента, Тип("ПолеФормы"), Группа);
			НовыйЦвет.Вид                      = ВидПоляФормы.ПолеНадписи;
			НовыйЦвет.ПутьКДанным              = "УРВЦвета" + ИмяРеквизитаИЭлемента;
			Новыйцвет.ЦветФона                 = ?(Цвет.Цвет.Получить() = Неопределено, Новый Цвет(255,255,255), Цвет.Цвет.Получить());
			НовыйЦвет.Ширина                   = 4;
			НовыйЦвет.РастягиватьПоГоризонтали = Ложь;
			НовыйЦвет.Заголовок                = " - " + Цвет.Представление;
			НовыйЦвет.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Право;
			НовыйЦвет.Рамка                    = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

