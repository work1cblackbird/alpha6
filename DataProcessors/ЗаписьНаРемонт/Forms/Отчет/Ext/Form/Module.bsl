
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		
		// Возврат при получении формы для анализа.
		Возврат;
		
	КонецЕсли;
	
	ПланированиеРесурсов.УстановитьНастройкиПользователя(ЭтотОбъект);
	РежимКалендаря = "День";
	ДатаПланировщика = НачалоДня(ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимКалендаряПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПодразделениеДляЧасовогоПояса") <> Неопределено Тогда
		
		СмещениеЧасовогоПояса = ОбщегоНазначенияАвтосалон
			.СмещениеВремениВПодразделенииКомпании(ПодразделениеДляЧасовогоПояса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПланировщикаПриИзменении(Элемент)
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимКалендаряПриИзменении(Элемент=Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ДатаПланировщика) Тогда
		
		ДатаПланировщика = ТекущаяДата();
		
	КонецЕсли;
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДневнойПриАктивизацииОбласти(Элемент)
	
	ПланированиеРесурсовКлиент.ВыделитьСопутствующиеИнтервалы(Элемент.ТекущаяОбласть.Расшифровка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеДляЧасовогоПоясаПриИзменении(Элемент)
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДневнойОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	ТипРасшифровки = ТипЗнч(Расшифровка);
	
	Если ТипРасшифровки = Тип("Массив") И ТипЗнч(Расшифровка[0]) = Тип("Структура") Тогда
		
		СписокВыбора = СформироватьПредставлениеДокументовСпискаВыбораПоУРВ(Расшифровка);
		
	ИначеЕсли ТипРасшифровки = Тип("Массив") Тогда
		
		СписокВыбора = СформироватьПредставлениеДокументовСпискаВыбора(Расшифровка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокВыбора) Тогда
		
		ПоказатьВыборИзМенюДокументов(СписокВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сегодня(Команда)
	
	ДатаПланировщика = НачалоДня(ТекущаяДата());
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ПланированиеРесурсовКлиент.СместитьПериод(ДатаПланировщика, 1, РежимКалендаря);
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ПланированиеРесурсовКлиент.СместитьПериод(ДатаПланировщика, -1, РежимКалендаря);
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендарь(Команда=Неопределено)
	
	Результат = СформироватьПланировщикНаДень();
	
	Если ПолучитьЗначениеПараметраСтруктуры(Результат, "ОжидатьОбновлениеКэша", Ложь) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеОбновленияКэшаКалендаря", 0.5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасположениеРесурсов(Команда)
	
	Если РасположениеРесурсов = "ЛЕВО" Тогда
		
		РасположениеРесурсов = "ВЕРХ";
		
	Иначе
		
		РасположениеРесурсов = "ЛЕВО";
		
	КонецЕсли;
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛегендуГрафика(Команда)
	
	ОткрытьФорму(
		"Обработка.ЗаписьНаРемонт.Форма.ЛегендаЦветовГрафика",
		Новый Структура("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени),
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиДневногоКалендаря(Команда)
	
	Настройки = ПолучитьНастройки();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		"ОткрытьНастройкиДневногоКалендаря");
	
	ОткрытьФорму(
		"Обработка.ЗаписьНаРемонт.Форма.НастройкиДневногоКалендаря",
		Настройки,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьНастройки()
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("БазовыйГрафик", БазовыйГрафик);
	Настройки.Вставить("РежимИспользованияГрафиков", РежимИспользованияГрафиков); 
	Настройки.Вставить("УчитыватьДанныеТабеля", УчитыватьДанныеТабеля);
	Настройки.Вставить("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени);
	Настройки.Вставить("МасштабЯчейки", МасштабЯчейки);
	Настройки.Вставить("ШиринаКолонкиРесурсов", ШиринаКолонкиРесурсов);
	Настройки.Вставить("РазмерСеткиРедактированияПланировщика", РазмерСеткиРедактированияПланировщика);
	Настройки.Вставить("ОтображатьТолькоРаботающих", ОтображатьТолькоРаботающих);
	Настройки.Вставить("РежимШкалыМинут", РежимШкалыМинут);
	Настройки.Вставить("АдресРесурсов", ПоместитьОтборыВХранилище());
	Настройки.Вставить("ПорядокРесурсовВОбщемРежиме", ПорядокРесурсовВОбщемРежиме);
	Настройки.Вставить("РежимОтображенияРесурсовНаГрафике", РежимОтображенияРесурсовНаГрафике);
	Настройки.Вставить("РасположениеРесурсов", РасположениеРесурсов);
	Настройки.Вставить("ШаблонПредставленияИнтервалаОбъекта", ШаблонПредставленияИнтервалаОбъекта);
	Настройки.Вставить("ОтображатьТолькоДоступныеДляПланированияРесурсы", ОтображатьТолькоДоступныеДляПланированияРесурсы);
	Настройки.Вставить("ИнтервалОбновленияКалендаря", ИнтервалОбновленияКалендаря);
	Настройки.Вставить("РежимДобавления", РежимДобавления);
	Настройки.Вставить("СпособПеремещения", СпособПеремещения);
	Настройки.Вставить("КритерийРасчетаЗагруженности", КритерийРасчетаЗагруженности);
	
	// режим открытия формы
	Настройки.Вставить("СкрыватьНастройкиРедактирования", Истина);
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ПоместитьОтборыВХранилище()
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Исполнители", ИсполнителиДляГрафика.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	СтруктураОтборов.Вставить("Цеха", РабочиеМестаДляГрафика.Выгрузить().ВыгрузитьКолонку("Ресурс"));
	
	Результат = ПоместитьВоВременноеХранилище(СтруктураОтборов, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРесурсы(Адрес)
	
	Ресурсы = ПолучитьИзВременногоХранилища(Адрес);
	ПланированиеРесурсов.ЗаполнитьИсполнителей(ИсполнителиДляГрафика, Ресурсы.Исполнители);
	ПланированиеРесурсов.ЗаполнитьРабочиеМеста(РабочиеМестаДляГрафика, Ресурсы.Цеха);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПланировщикНаДень()
	
	ПараметрыПланирования = ПодготовитьПараметрыДлительнойОперации();
	ВозможноДальнейшееОбновление = ПланированиеРесурсов.НачатьОбновлениеДневногоКалендаря(
		ПараметрыПланирования,
		УникальныйИдентификатор,
		ИдентификаторДлительнойОперации,
		КэшКалендаря,
		КэшОшибок);
	
	Если ВозможноДальнейшееОбновление Тогда
		
		ЗакончитьОбновлениеДневногоКалендаря();
		Возврат Новый Структура;
		
	КонецЕсли;
	
	ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.КалендарьДневной);
	Возврат Новый Структура("ОжидатьОбновлениеКэша", Истина);
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыДлительнойОперации()
	
	ПараметрыОперации = Новый Структура;
	
	// таблицы ресурсов
	ПараметрыОперации.Вставить("РабочееМеста", ПолучитьРабочиеМестаДляГрафика());
	ПараметрыОперации.Вставить("Исполнители" , ПолучитьИсполнителиДляГрафика());
	ПараметрыОперации.Вставить("ПланированиеИнтервалы", Новый ТаблицаЗначений);
	ПараметрыОперации.Вставить("Начало", НачалоДня(ДатаПланировщика));
	ПараметрыОперации.Вставить("Конец", ПланированиеРесурсовКлиентСервер.ДатаОкончанияИнтервала(ДатаПланировщика, РежимКалендаря));
	ПараметрыОперации.Вставить("РежимОтображенияРесурсовНаГрафике", РежимОтображенияРесурсовНаГрафике);
	ПараметрыОперации.Вставить("РежимИспользованияГрафиков", РежимИспользованияГрафиков);
	ПараметрыОперации.Вставить("БазовыйГрафик", БазовыйГрафик);
	ПараметрыОперации.Вставить("УчитыватьДанныеТабеля", УчитыватьДанныеТабеля);
	ПараметрыОперации.Вставить("ОтображатьДанныеУчетаРабочегоВремени", ОтображатьДанныеУчетаРабочегоВремени);
	ПараметрыОперации.Вставить("МасштабЯчейки", МасштабЯчейки);
	ПараметрыОперации.Вставить("ШиринаКолонкиРесурсов", ШиринаКолонкиРесурсов);
	ПараметрыОперации.Вставить("РазмерСеткиРедактированияПланировщика", РазмерСеткиРедактированияПланировщика);
	ПараметрыОперации.Вставить("Документ", Документы.ЗаявкаНаРемонт.ПустаяСсылка());
	ПараметрыОперации.Вставить("ОтображатьТолькоРаботающих", ОтображатьТолькоРаботающих);
	ПараметрыОперации.Вставить("ОтображатьТолькоДоступныеДляПланированияРесурсы", Ложь);
	ПараметрыОперации.Вставить("РежимШкалыМинут", РежимШкалыМинут);
	ПараметрыОперации.Вставить("ПорядокРесурсовВОбщемРежиме", ПорядокРесурсовВОбщемРежиме);
	ПараметрыОперации.Вставить("ШаблонПредставленияИнтервалаОбъекта", ШаблонПредставленияИнтервалаОбъекта);
	ПараметрыОперации.Вставить("РасположениеРесурсов", РасположениеРесурсов);
	ПараметрыОперации.Вставить("СмещениеЧасовогоПояса", СмещениеЧасовогоПояса);
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаСервере
Функция ПолучитьИсполнителиДляГрафика()
	
	Если ЗначениеЗаполнено(ПодразделениеДляЧасовогоПояса) Тогда
		
		МассивУчаствуетВПланировании = Новый Массив;
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПроизводства);
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПриемкиВыдачи);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("УчаствуетВПланировании", МассивУчаствуетВПланировании);
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеДляЧасовогоПояса);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Ресурс,
		|	Сотрудники.Псевдоним КАК Псевдоним,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Ссылка) КАК РесурсПредставление,
		|	Сотрудники.ГрафикРаботы КАК График
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.УчаствуетВПланировании В(&УчаствуетВПланировании)
		|	И Сотрудники.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И НЕ Сотрудники.ФлагУволен";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выгрузить();
	Иначе
		Возврат ИсполнителиДляГрафика.Выгрузить();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьРабочиеМестаДляГрафика()
	
	Если ЗначениеЗаполнено(ПодразделениеДляЧасовогоПояса) Тогда
		
		МассивУчаствуетВПланировании = Новый Массив;
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПроизводства);
		МассивУчаствуетВПланировании.Добавить(Перечисления.ВидыИспользованияРабочихМест.ПланированиеПриемкиВыдачи);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеДляЧасовогоПояса);
		Запрос.УстановитьПараметр("ВидИспользованияРабочегоМеста", МассивУчаствуетВПланировании);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цеха.Ссылка КАК Ресурс,
		|	Цеха.Псевдоним КАК Псевдоним,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Цеха.Ссылка) КАК РесурсПредставление,
		|	Цеха.ГрафикРаботы КАК График
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|ГДЕ
		|	Цеха.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И Цеха.ВидИспользованияРабочегоМеста В(&ВидИспользованияРабочегоМеста)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выгрузить();
		
	Иначе
		Возврат РабочиеМестаДляГрафика.Выгрузить();;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗакончитьОбновлениеДневногоКалендаря()
	
	Если НЕ ЭтоАдресВременногоХранилища(КэшОшибок) ИЛИ НЕ ЭтоАдресВременногоХранилища(КэшКалендаря) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// сбросим параметры планировщика
	КалендарьДневной.Очистить();
	КалендарьДневной.Рисунки.Очистить();
	
	Ошибки = ПолучитьИзВременногоХранилища(КэшОшибок);
	Если Ошибки <> Неопределено Тогда
		
		ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(
			Элементы.КалендарьДневной,, Ошибки.Текст, БиблиотекаКартинок.Предупреждение32);
		
		Возврат;
		
	КонецЕсли;
	
	// обработаем результат
	ДанныеКэша = ПолучитьИзВременногоХранилища(КэшКалендаря);
	ИнтервалыОтображения = Новый ФиксированныйМассив(ДанныеКэша.ИнтервалыОтображения);
	КэшЯчеекДокументов = Новый ФиксированноеСоответствие(ДанныеКэша.КэшЯчеекДокументов);
	
	ПланированиеРесурсовКлиентСервер.УстановитьФиксациюПланировщика(ЭтотОбъект);
	КалендарьДневной.Вывести(ДанныеКэша.КалендарьДневной);
	УстановитьТекущуюДату();
	ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.КалендарьДневной, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзМенюДокументов(Список)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытьФормуДокумента");
	ПоказатьВыборИзМеню(ОписаниеОповещения, Список);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПредставлениеДокументовСпискаВыбора(Документы)
	
	СписокДокументов = Новый СписокЗначений;
	ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Документы, "Номер,Дата,ХозОперация");
	ПредставлениеХозОпераций = Новый Соответствие();
	ПредставлениеХозОпераций.Вставить(
		ПредопределенноеЗначение("Справочник.ХозОперации.ПланРемонта"), НСтр("ru = 'План ремонта №'"));
	ПредставлениеХозОпераций.Вставить(
		ПредопределенноеЗначение("Справочник.ХозОперации.ЗаказНаряд"), НСтр("ru = 'Заказ-наряд №'"));
	ПредставлениеХозОпераций.Вставить(
		ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРемонт"), НСтр("ru = 'Заявка на ремонт №'"));
	
	Для Каждого Документ Из Документы Цикл
		
		Данные = ДанныеДокументов.Получить(Документ);
		
		Если ЗначениеЗаполнено(Данные) Тогда
			
			ЭлементыСтроки = Новый Массив;
			ЭлементыСтроки.Добавить(ПредставлениеХозОпераций.Получить(Данные.ХозОперация));
			ЭлементыСтроки.Добавить(ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Данные.Номер));
			ЭлементыСтроки.Добавить(" ");
			ЭлементыСтроки.Добавить(НСтр("ru = 'от'"));
			ЭлементыСтроки.Добавить(" ");
			ЭлементыСтроки.Добавить(Формат(Данные.Дата, "ДЛФ=DDT"));
			
			СписокДокументов.Добавить(Документ, СтрСоединить(ЭлементыСтроки, ""));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеДокументовСпискаВыбораПоУРВ(Интервалы)
	
	СписокИнтервалов = Новый СписокЗначений;
	
	Для Каждого Интервал Из Интервалы Цикл
		
		Формат = "ДФ=ЧЧ.мм";
		СоставПредставления = Новый Массив;
		СоставПредставления.Добавить(
		СтрШаблон("с %1 по %2 - %3", Формат(Интервал.Начало, Формат), Формат(Интервал.Конец, Формат), Интервал.Состояние));
		
		Если НЕ Интервал.Документ.Пустая() Тогда
			
			СоставПредставления.Добавить(СтрШаблон("ЗН №%1 от %2", Интервал.Номер, Формат(Интервал.Дата, "ДФ=dd.MM.yyyy")));
			
		КонецЕсли;
		
		СписокИнтервалов.Добавить(Интервал.Документ, СтрСоединить(СоставПредставления, " "));
		
	КонецЦикла;
	
	Возврат СписокИнтервалов;
	
КонецФункции // СформироватьПредставлениеДокументовСпискаВыбораПоУРВ()

&НаСервере
Процедура УстановитьТекущуюДату()
	
	Если РасположениеРесурсов <> "ВЕРХ" Тогда
		
		ВывестиТекущуюДатуВертикально();
		
	Иначе
		
		ВывестиТекущуюДатуГоризонтально();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТекущуюДатуВертикально()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ПланированиеРесурсовКлиентСервер.ИнтервалОтображается(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения) Тогда
		
		РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
		НомерЯчейки = ПланированиеРесурсовКлиентСервер
			.НомераЯчеекОбласти(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0]
			.Первая;
		
		РисунокТекущееВремя = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		РисунокТекущееВремя.Имя = "CurrentTime";
		РисунокТекущееВремя.Расшифровка = "CurrentTime";
		РисунокТекущееВремя.ЦветФона = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков()["ЦветТекущаяДата"];
		
		РисунокТекущееВремя.ГраницаСверху = Ложь;
		РисунокТекущееВремя.ГраницаСлева  = Ложь;
		РисунокТекущееВремя.ГраницаСнизу  = Ложь;
		РисунокТекущееВремя.ГраницаСправа = Ложь;
		
		ВерхТаблицы = КалендарьДневной.ФиксацияСверху + 1;
		
		РисунокТекущееВремя.Расположить(
			КалендарьДневной.Область(ВерхТаблицы, НомерЯчейки, КалендарьДневной.ВысотаТаблицы, НомерЯчейки));
		
		НачалоИнтервалаЛево = РисунокТекущееВремя.Лево;
		
		РисунокТекущееВремя.Расположить(
			КалендарьДневной.Область(ВерхТаблицы, НомерЯчейки + 1, КалендарьДневной.ВысотаТаблицы, НомерЯчейки + 1));
		
		КонецИнтервалаЛево = РисунокТекущееВремя.Лево;
		
		РисунокТекущееВремя.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		РисунокТекущееВремя.Ширина = 0.4;
		
		НачалоИнтервалаОтображения = ПланированиеРесурсовКлиентСервер
			.ИнтервалОтображенияПоДате(ТекущаяДатаСеанса, ИнтервалыОтображения)
			.Начало;
		
		ЯчейкаНачало = ПланированиеРесурсовКлиентСервер
			.НомераЯчеекОбласти(НачалоИнтервалаОтображения, НачалоИнтервалаОтображения, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0]
			.Первая;
		
		РисунокТекущееВремя.Лево = НачалоИнтервалаЛево
			+ (КонецИнтервалаЛево - НачалоИнтервалаЛево) / РазмерИнтервалаВСекундах
			*(ТекущаяДатаСеанса - (НачалоИнтервалаОтображения + РазмерИнтервалаВСекундах * (НомерЯчейки - ЯчейкаНачало)));
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТекущуюДатуГоризонтально()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ПланированиеРесурсовКлиентСервер.ИнтервалОтображается(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения) Тогда
		
		РазмерИнтервалаВСекундах = ПланированиеРесурсовКлиентСервер.РазмерИнтервалаВСекундах(ЭтотОбъект);
		НомерЯчейки = ПланированиеРесурсовКлиентСервер
			.НомераЯчеекОбласти(ТекущаяДатаСеанса, ТекущаяДатаСеанса, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0]
			.Первая;
		
		РисунокТекущееВремя = КалендарьДневной.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		РисунокТекущееВремя.Имя = "CurrentTime";
		РисунокТекущееВремя.Расшифровка = "CurrentTime";
		РисунокТекущееВремя.ЦветФона = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков()["ЦветТекущаяДата"];
		
		РисунокТекущееВремя.ГраницаСверху = Ложь;
		РисунокТекущееВремя.ГраницаСлева  = Ложь;
		РисунокТекущееВремя.ГраницаСнизу  = Ложь;
		РисунокТекущееВремя.ГраницаСправа = Ложь;
		
		ЛеваяГраница = КалендарьДневной.ФиксацияСлева + 1;
		ПраваяГраница = КалендарьДневной.ШиринаТаблицы - ?(ИнтервалыОтображения.Количество() > 1, 1, 0);
		РисунокТекущееВремя.Расположить(КалендарьДневной.Область(НомерЯчейки, ЛеваяГраница, НомерЯчейки, ПраваяГраница));
		НачалоИнтервалаВерх = РисунокТекущееВремя.Верх;
		РисунокТекущееВремя.Расположить(КалендарьДневной.Область(НомерЯчейки + 1, ЛеваяГраница, НомерЯчейки + 1, ПраваяГраница));
		КонецИнтервалаВерх = РисунокТекущееВремя.Верх;
		РисунокТекущееВремя.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		РисунокТекущееВремя.Высота = 0.4;
		
		НачалоИнтервалаОтображения = ПланированиеРесурсовКлиентСервер
			.ИнтервалОтображенияПоДате(ТекущаяДатаСеанса, ИнтервалыОтображения)
			.Начало;
		
		ЯчейкаНачало = ПланированиеРесурсовКлиентСервер
			.НомераЯчеекОбласти(НачалоИнтервалаОтображения, НачалоИнтервалаОтображения, ИнтервалыОтображения, РазмерИнтервалаВСекундах)[0]
			.Первая;
		
		РисунокТекущееВремя.Верх = НачалоИнтервалаВерх
			+ (КонецИнтервалаВерх - НачалоИнтервалаВерх) / РазмерИнтервалаВСекундах
			*(ТекущаяДатаСеанса - (НачалоИнтервалаОтображения + РазмерИнтервалаВСекундах * (НомерЯчейки - ЯчейкаНачало)));
			
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ОткрытьНастройкиДневногоКалендаря" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатОповещения);
		
		Если РезультатОповещения.Свойство("АдресРесурсов") Тогда
			ЗаполнитьРесурсы(РезультатОповещения.АдресРесурсов);
		КонецЕсли;
		
		ОбновитьКалендарь();
		
	ИначеЕсли ДополнительныеПараметры = "ОткрытьФормуДокумента" Тогда
		
		Если НЕ РезультатОповещения.Значение.Пустая() Тогда
			
			Если ТипЗнч(РезультатОповещения.Значение) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
				
				ОткрываемаяФорма = "Документ.ЗаявкаНаРемонт.ФормаОбъекта";
				
			Иначе
				
				ОткрываемаяФорма = "Документ.ЗаказНаряд.ФормаОбъекта";
				
			КонецЕсли;
			
			ОткрытьФорму(ОткрываемаяФорма, Новый Структура("Ключ", РезультатОповещения.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеОбновленияКэшаКалендаря()
	
	Если ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
		
		ЗакончитьОбновлениеДневногоКалендаря();
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеОбновленияКэшаКалендаря", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти