
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Установим правило проверки кодов организации
	КонтрольКорректностиКодов = ИСТИНА;
	
	// Производим получение регистрационных данных
	ПрочитатьДанные();
	
	// Кнопку отправки статистики скрывам если база работает в режиме сервиса или рег. данные заполнены
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ОтправитьСведенияОПродуктеГруппа.Видимость = ЛОЖЬ;
	Иначе
		Элементы.ОтправитьСведенияОПродуктеГруппа.Видимость = НЕ ЦентрМониторингаОтраслевой.ВключенаОтправкаСтатистики();
	КонецЕсли;
	
	// Подготовим список выбора рег.номеров
	СписокЛицензий = ЭтотОбъект.Элементы.РегНомер.СписокВыбора;
	СписокЛицензий.Очистить();
	ЦентрМониторингаОтраслевой.ПолучитьПараметрыЛицензий(ЭтотОбъект, СписокЛицензий);
	
	ЭтотОбъект.Элементы.РегНомер.КнопкаВыпадающегоСписка = (СписокЛицензий.Количество() > 0);
	Если ПустаяСтрока(ЭтотОбъект.РегНомер) И СписокЛицензий.Количество() > 0 Тогда
		ЭтотОбъект.РегНомер = СписокЛицензий[0].Значение;
	КонецЕсли;
	
	// Если есть стандартный механизм авторизации на ИТС, то отображать кнопку выбора и запретить редактирование текста
	ОбъектМетаданныхПодключениеИнтернетПоддержки = Метаданные.НайтиПоПолномуИмени("ОбщаяФорма.ПодключениеИнтернетПоддержки");
	Элементы.ЛогинИТС.КнопкаВыбора = (ОбъектМетаданныхПодключениеИнтернетПоддержки<>Неопределено);
	
	// Если есть реквизит ИНН у спр. Организации, то данные подтягиваются при выборе элемента справочника
	ОбъектМетаданныхОрганизации = Метаданные.НайтиПоПолномуИмени("Справочник.Организации");
	ЕстьОрганизации             = (ОбъектМетаданныхОрганизации<>Неопределено);
	Элементы.ИНН.КнопкаВыбора   = (ЕстьОрганизации И ОбъектМетаданныхОрганизации.Реквизиты.Найти("ИНН") <> Неопределено);
	
	ПроверяемыеОбъекты = Новый Массив();
	ПроверяемыеОбъекты.Добавить("Сотрудники");
	ПроверяемыеОбъекты.Добавить("ФизическиеЛица");
	ПроверяемыеОбъекты.Добавить("Пользователи");
	
	ОбъектыСодержащиеКонтактнуюИнформацию = Новый СписокЗначений();
	Для каждого ИмяОбъекта Из ПроверяемыеОбъекты Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени("Справочник."+ИмяОбъекта);
		Если ОбъектМетаданных=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьКонтактнаяИнформация = УправлениеКонтактнойИнформацией.СодержитКонтактнуюИнформацию(Тип("СправочникСсылка."+ИмяОбъекта));
		ОбъектыСодержащиеКонтактнуюИнформацию.Добавить(ИмяОбъекта,, ЕстьКонтактнаяИнформация);
	
	КонецЦикла;
	
	Если ОбъектыСодержащиеКонтактнуюИнформацию.Количество() > 0 Тогда
		
		Элементы.Руководитель.КнопкаВыбора = Истина;
		
		ИмяОбъектаРуководитель = ОбъектыСодержащиеКонтактнуюИнформацию[0].Значение;
		Для каждого Элемент Из ОбъектыСодержащиеКонтактнуюИнформацию Цикл
			Если Элемент.Пометка Тогда
				ИмяОбъектаРуководитель = Элемент.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ КонтрольКорректностиКодов Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИНН) И НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЭтотОбъект.ИНН, Истина, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИНН");
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КПП) И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ЭтотОбъект.КПП, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КПП");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если КонтрольКорректностиКодов Тогда
		ИННСоответствуетТребованиям(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если КонтрольКорректностиКодов Тогда
		КППСоответствуетТребованиям(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДопПараметры=Неопределено) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ИНН = "";
	ЭтотОбъект.КПП = "";
	ЭтотОбъект.Руководитель = "";
	ЭтотОбъект.ТелефонРуководителя = "";
	
	// подтягивание данных из справочника
	ЗаполнитьДанныеОрганизации(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ИНННачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Если НЕ ЕстьОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект);
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЛогинИТС(Результат, ДопПараметры=Неопределено) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ЛогинИТС = Результат.Логин;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинИТСНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		Возврат
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЛогинИТС", ЭтотОбъект);
	
	МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
	МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораРуководителяНаСервере(Результат)
	
	// заполним ФИО выбранного руководителя
	ЭтотОбъект.Руководитель = СокрЛП(Результат);
	
	// подтягивание контактных данных из справочника
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	Если НЕ МодульУправлениеКонтактнойИнформацией.СодержитКонтактнуюИнформацию(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЭлектроннаяПочта = МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("АдресЭлектроннойПочты");
	ТипТелефон          = МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("Телефон");
	
	ЭлектроннаяПочта = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Результат, ТипЭлектроннаяПочта, ТекущаяДатаСеанса(), Ложь);
	ЭтотОбъект.ПочтаРуководителя = ?(ЭлектроннаяПочта.Количество() > 0, ЭлектроннаяПочта[0].Представление, "");
	
	Телефон = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Результат, ТипТелефон, ТекущаяДатаСеанса(), Ложь);
	ЭтотОбъект.ТелефонРуководителя = ?(Телефон.Количество() > 0, Телефон[0].Представление, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРуководителя(Результат, ДопПараметры=Неопределено) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВыбораРуководителяНаСервере(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ПустаяСтрока(ИмяОбъектаРуководитель) Тогда
		Возврат
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораРуководителя", ЭтотОбъект);
	ОткрытьФорму("Справочник." + ИмяОбъектаРуководитель + ".ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьПродукт(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанные();
	
	РегистрационныеДанные          = Новый Структура("РегНомер,ИНН");
	РегистрационныеДанные.РегНомер = ЭтотОбъект.РегНомер;
	РегистрационныеДанные.ИНН      = ЭтотОбъект.ИНН;
	ЭтотОбъект.Закрыть(РегистрационныеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСведенияОПродуктеНаСервере()
	
	// Производим настройку параметров подсистемы
	ЦентрМониторингаОтраслевой.ВключитьОтправкуСтатистики();
	
	// Скрываем кнопку, не зависимо от результата включения
	Элементы.ОтправитьСведенияОПродуктеГруппа.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСведенияОПродукте(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанные();
	
	ОтправитьСведенияОПродуктеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииПараметровЛицензии(СписокЛицензий, ТипСистемыЗащиты, Серия, Наименование, Лицензия, ВерсияКомпоненты) Экспорт
	
	Если ТипСистемыЗащиты=1 Тогда
		РегНомер = ПолучитьРегНомерПоНомеруКлючаРарус(Лицензия.KeyNo);
	ИначеЕсли Лицензия.RegNo=0 ИЛИ Лицензия.RegNo="0" Тогда
		Возврат;
	Иначе
		РегНомер = Формат(Лицензия.RegNo, "ЧГ=0");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РегНомер) Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеЛицензии = ?(ЗначениеЗаполнено(Лицензия.ArticleName), Лицензия.ArticleName, ?(ЗначениеЗаполнено(Лицензия.ProductName), Лицензия.ProductName, Наименование));
	СписокЛицензий.Добавить(РегНомер, РегНомер + " " + НазваниеЛицензии);
	
КонецПроцедуры // ПриПолученииПараметровЛицензии()

&НаСервере
Функция ПолучитьРегНомерПоНомеруКлючаРарус(НомерСерии, ПрефиксСН="2190")
	
	КоличествоСимволов = СтрДлина(ПрефиксСН);
	ДлинаНомера = 12 - КоличествоСимволов;
	ФорматнаяСтрока = "ЧЦ="+ Строка(ДлинаНомера) +"; ЧВН=; ЧГ=0";
	ТекущийНомерСерии = Формат(НомерСерии, ФорматнаяСтрока);
	ТекущийНомерСерии = ПрефиксСН + ТекущийНомерСерии;
	ТекущийНомерСерии = ТекущийНомерСерии + КонтрольныйСимволEAN(ТекущийНомерСерии,13);
	
	Возврат ТекущийНомерСерии
	
КонецФункции // ПолучитьРегНомерПоНомеруКлючаРарус()

&НаСервере
Функция КонтрольныйСимволEAN(ШтрихКод, Тип)

	Четн   = 0;
	Нечетн = 0;
	// функция работоспособна в предположении что длина ШтрихКод:
	// 7,8 или 12 цифр
	ЦифрВШтрихкоде = СтрДлина(ШтрихКод);
	Если Тип = 13 И ЦифрВШтрихкоде <> 12 Тогда
		Возврат "";
	КонецЕсли;
	Если Тип = 8 И
		(ЦифрВШтрихкоде > 8 ИЛИ ЦифрВШтрихкоде < 7) Тогда
		Возврат "";
	КонецЕсли;
	КоличествоИтераций = ?(Тип = 13, 6, 4);
	
	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Число(Сред(ШтрихКод, 2 * Индекс, 1));
		КонецЕсли;
		Нечетн = Нечетн + Число(Сред(ШтрихКод, 2 * Индекс - 1, 1));
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции // КонтрольныйСимволEAN()

&НаСервереБезКонтекста
Функция ИННСоответствуетТребованиям(Текст, ТекстСообщения = "")
	
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Текст, Истина, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИНН");
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции // ИННСоответствуетТребованиям()

&НаСервереБезКонтекста
Функция КППСоответствуетТребованиям(Текст, ТекстСообщения = "")
	
	Если НЕ ПустаяСтрока(Текст) И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Текст, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КПП");
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции // КППСоответствуетТребованиям()

&НаСервере
Процедура ПрочитатьДанные()
	
	// Получение данных из безопасного храниилища
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		
		// Получаем идентификатор записи в безопасное хранилище
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ИдентификаторПодсистемыБИП = МодульИнтернетПоддержкаПользователей.ИдентификаторПодсистемы();
		
		// Получаем РегНомер, ИНН и КПП
		ЭтотОбъект.РегНомер = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИП, "regnumber");
		ЭтотОбъект.ИНН      = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИП, "inn");
		ЭтотОбъект.КПП      = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИП, "kpp");
		
		// Получаем логин ИТС
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ТипЗнч(ДанныеАутентификации)=Тип("Структура") Тогда
			ДанныеАутентификации.Свойство("Логин", ЭтотОбъект.ЛогинИТС);
		КонецЕсли;
		
	КонецЕсли;
	
	// Читаем сохраненные регистрационные данных из параметров Цента мониторинга
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаРегНомер");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаИНН");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаКПП");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаПартнер");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаДатаПриобретения");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаКонтактноеЛицо");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаНомерТелефона");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаЭлектроннаяПочта");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаАккаунт");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаИТС");
	ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	// Корректируем ранее полученные значения
	Если ПустаяСтрока(ЭтотОбъект.РегНомер) Тогда
		ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаРегНомер", ЭтотОбъект.РегНомер);
	КонецЕсли;
	Если ПустаяСтрока(ЭтотОбъект.ИНН) Тогда
		ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаИНН", ЭтотОбъект.ИНН);
	КонецЕсли;
	Если ПустаяСтрока(ЭтотОбъект.КПП) Тогда
		ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаКПП", ЭтотОбъект.КПП);
	КонецЕсли;
	Если ПустаяСтрока(ЭтотОбъект.ЛогинИТС) Тогда
		ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаИТС", ЭтотОбъект.ЛогинИТС);
	КонецЕсли;
	
	// Производим заполнение полей из свойств Центра мониторинга
	ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаАккаунт",          ЭтотОбъект.ЛогинРарус);
	ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаПартнер",          ЭтотОбъект.Партнер);
	ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаДатаПриобретения", ЭтотОбъект.ДатаПриобретения);
	ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаКонтактноеЛицо",   ЭтотОбъект.Руководитель);
	ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаНомерТелефона",    ЭтотОбъект.ТелефонРуководителя);
	ПараметрыЦентраМониторинга.Свойство("РегистрацияПродуктаЭлектроннаяПочта", ЭтотОбъект.ПочтаРуководителя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанные()
	
	Попытка
		
		НачатьТранзакцию();
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
			
			// Получаем идентификатор записи в безопасное хранилище
			МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
			ИдентификаторПодсистемыБИП = МодульИнтернетПоддержкаПользователей.ИдентификаторПодсистемы();
			
			// Перезаписываем данные в безопасном хранилище
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИП, "regnumber,inn,kpp,login");
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемыБИП, СокрЛП(РегНомер), "regnumber");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемыБИП, СокрЛП(ИНН),      "inn");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемыБИП, СокрЛП(КПП),      "kpp");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемыБИП, СокрЛП(ЛогинИТС), "login");
			
		КонецЕсли;
		
		// Обновляем параметры Центра мониторинга
		ПараметрыЦентраМониторинга = Новый Структура();
		
		ПараметрыЦентраМониторинга.Вставить("КонтактнаяИнформацияИзменена",        ИСТИНА);
		ПараметрыЦентраМониторинга.Вставить("ЗапросКонтактнойИнформации",          1);
		ПараметрыЦентраМониторинга.Вставить("ОзнакомительныйПакетОтправлен",       ЛОЖЬ);
		
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаРегНомер",         СокрЛП(ЭтотОбъект.РегНомер));
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаИНН",              СокрЛП(ЭтотОбъект.ИНН));
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаКПП",              СокрЛП(ЭтотОбъект.КПП));
		
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаПартнер",          СокрЛП(ЭтотОбъект.Партнер));
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаДатаПриобретения", ЭтотОбъект.ДатаПриобретения);
		
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаКонтактноеЛицо",   СокрЛП(ЭтотОбъект.Руководитель));
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаНомерТелефона",    СокрЛП(ЭтотОбъект.ТелефонРуководителя));
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаЭлектроннаяПочта", СокрЛП(ЭтотОбъект.ПочтаРуководителя));
		
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаАккаунт",          СокрЛП(ЭтотОбъект.ЛогинРарус));
		ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаИТС",              СокрЛП(ЭтотОбъект.ЛогинИТС));
		
		Шаблон = "Рег.номер: %1; ИНН: %2; ИТС: %3; rarus.ru: %4; Руководитель: %5; Телефон: %6; Эл.почта: %7";
		КонтактнаяИнформация = СтрШаблон(Шаблон, ЭтотОбъект.РегНомер, ЭтотОбъект.ИНН, ЭтотОбъект.ЛогинИТС, ЭтотОбъект.ЛогинРарус, ЭтотОбъект.Руководитель, ЭтотОбъект.ТелефонРуководителя, ЭтотОбъект.ПочтаРуководителя);
		
		ПараметрыЦентраМониторинга.Вставить("КонтактнаяИнформация",                КонтактнаяИнформация);
		ПараметрыЦентраМониторинга.Вставить("ЛогинПортала",                        СокрЛП(ЭтотОбъект.ЛогинИТС));
		ПараметрыЦентраМониторинга.Вставить("КонтактнаяИнформацияКомментарий",     НСтр("ru = 'Регистрация продукта'"));
		
		ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Причина = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОрганизации(Организация)
	
	Если НЕ ЕстьОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
		
		МодульОрганизацииСервер = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСервер");
		
		РегистрационныеДанные = МодульОрганизацииСервер.РегистрационныеДанныеОрганизации(Организация, "ИНН, КПП");
		РегистрационныеДанные.Свойство("ИНН", ЭтотОбъект.ИНН);
		РегистрационныеДанные.Свойство("КПП", ЭтотОбъект.КПП);
		
		ДанныеРуководителя = МодульОрганизацииСервер.РегистрационныеДанныеРуководителяОрганизации(Организация, "РуководительФИО, РуководительТелефон");
		ДанныеРуководителя.Свойство("РуководительФИО",     ЭтотОбъект.Руководитель);
		ДанныеРуководителя.Свойство("РуководительТелефон", ЭтотОбъект.ТелефонРуководителя);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ИНН) И Метаданные.Справочники.Организации.Реквизиты.Найти("ИНН")<>Неопределено Тогда
		ЭтотОбъект.ИНН = Организация.ИНН;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
