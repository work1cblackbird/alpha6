
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонфигурацияПоследовательностей = Новый ФиксированныйМассив(
		Обработки.ВосстановлениеПоследовательностей.КонфигурацияПоследовательностей());
	ЗаполнитьДерево();
	ДоступностьЭлементаПоДату(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НеОграничиватьПриИзменении(Элемент)
	
	ДоступностьЭлементаПоДату(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадержкаИспользоватьПриИзменении(Элемент)
	
	Элементы.Задержка.Доступность = ЗадержкаИспользовать;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(Расшифровка) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоследовательности

&НаКлиенте
Процедура ПоследовательностиВосстановитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Последовательности.ТекущиеДанные;
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущийРодитель = Неопределено Тогда
		
		ЭлементыСтроки = ТекущиеДанные.ПолучитьЭлементы();
		
		Для Каждого Элемент Из ЭлементыСтроки Цикл
			
			Элемент.Восстановить = ТекущиеДанные.Восстановить;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементыСтроки = ТекущийРодитель.ПолучитьЭлементы();
	Значение = Ложь;
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		
		Значение = Значение ИЛИ Элемент.Восстановить;
		
	КонецЦикла;
	
	ТекущийРодитель.Восстановить = Значение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоПоследовательностей();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ЗаполнитьПризнакВосстановления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ЗаполнитьПризнакВосстановления(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВосстановление(Команда)
	
	ДлительнаяОперация = НачатьВосстановление();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ВосстановлениеПрогресс", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ВосстановлениеЗавершение", ЭтотОбъект),
		ПараметрыОжидания
	);
	Элементы.Страницы.ТекущаяСтраница = Элементы.ДлительнаяОперация;
	Элементы.ИндикаторДлительнойОперации.ТекущаяСтраница = Элементы.Выполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнениеВосстановления(Команда)
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКДереву(Команда)
	
	ОбновитьДеревоПоследовательностей();
	Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоследовательностиОрганизация.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Последовательности.Последовательность");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьЭлементаПоДату(Форма)
	
	Форма.Элементы.ПоДату.Доступность = Форма.Объект.ОграничитьПоДате;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеГраницы(Граница)
	
	//@skip-check wrong-string-literal-content
	ДатаОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Граница, "ДатаОперации");
	Возврат Новый Структура("Актуальна,ДатаРазрушения", Строка(Граница), ДатаОперации);
	
КонецФункции

&НаСервере
Функция ОрганизацииБазы()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Код";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДерево()
	
	ЭлементыПоследовательностей = Последовательности.ПолучитьЭлементы();
	ЭлементыПоследовательностей.Очистить();
	Организации.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	ОрганизацииВыборка = ОрганизацииБазы();
	ПараметрыПолучения = Обработки
		.ВосстановлениеПоследовательностей
		.СоздатьПараметрыПолученияНеактуальныхДокументов();
	
	Если Объект.ОграничитьПоДате Тогда
		
		ПараметрыПолучения.ПоДату = Объект.ПоДату;
		
	КонецЕсли;
	
	НеактуальныеДокументы = Обработки
		.ВосстановлениеПоследовательностей
		.ПолучитьНеактуальныеДокументы(КонфигурацияПоследовательностей, ПараметрыПолучения);
		
	Пока ОрганизацииВыборка.Следующий() Цикл
		
		Организации.Добавить(ОрганизацииВыборка.Организация);
		НоваяСтрокаОрганизации = ЭлементыПоследовательностей.Добавить();
		НоваяСтрокаОрганизации.Организация = ОрганизацииВыборка.Организация;
		НоваяСтрокаОрганизации.Восстановить = Истина;
		ЭлементыОрганизации = НоваяСтрокаОрганизации.ПолучитьЭлементы();
		
		Условие = Новый Структура("Организация", ОрганизацииВыборка.Организация);
		Если НЕ ЗначениеЗаполнено(НеактуальныеДокументы.НайтиСтроки(Условие)) Тогда
			
			НоваяСтрокаОрганизации.Восстановить = Ложь;
			НоваяСтрокаОрганизации.Актуальна = НСтр("ru = 'Нет нарушений по организации'");
			
		КонецЕсли;
		
		Для Каждого Граница Из КонфигурацияПоследовательностей Цикл
			
			Условие = Новый Структура("Организация,ИмяПоследовательности", ОрганизацииВыборка.Организация, Граница.Имя);
			ДокументыПоследовательности = НеактуальныеДокументы.НайтиСтроки(Условие);
			НоваяПоследовательность = ЭлементыОрганизации.Добавить();
			НоваяПоследовательность.Организация = ОрганизацииВыборка.Организация;
			НоваяПоследовательность.Последовательность = Граница.Представление;
			НоваяПоследовательность.Восстановить = Истина;
			
			Если НЕ ЗначениеЗаполнено(ДокументыПоследовательности) Тогда
				
				НоваяПоследовательность.Восстановить = Ложь;
				НоваяПоследовательность.Актуальна = НСтр("ru = 'Не нарушена'");
				Продолжить;
				
			КонецЕсли;
			
			Если ДокументыПоследовательности[0].Граница = Неопределено Тогда
				
				НоваяПоследовательность.Граница = ДокументыПоследовательности[0].МоментВремени;
				НоваяПоследовательность.Актуальна = Формат(ДокументыПоследовательности[0].МоментВремени, "ДЛФ=D");
				Продолжить;
				
			КонецЕсли;
			
			НоваяПоследовательность.Организация = ОрганизацииВыборка.Организация;
			НоваяПоследовательность.Граница = ДокументыПоследовательности[0].Граница;
			ЗаполнитьЗначенияСвойств(НоваяПоследовательность, ПредставлениеГраницы(ДокументыПоследовательности[0].Граница));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакВосстановления(Значение)
	
	ЭлементыПоследовательностей = Последовательности.ПолучитьЭлементы();
	
	Для Каждого Организация Из ЭлементыПоследовательностей Цикл
		
		Организация.Восстановить = Значение;
		ЭлементыОрганизации = Организация.ПолучитьЭлементы();
		
		Для Каждого Граница Из ЭлементыОрганизации Цикл
			
			Граница.Восстановить = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(СПодчиненными = Истина)
	
	Для Каждого ЭлементДерева Из Последовательности.ПолучитьЭлементы() Цикл
		
		Элементы.Последовательности.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), СПодчиненными);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСообщенияВЛог(Сообщения)
	
	Макет = Обработки.ВосстановлениеПоследовательностей.ПолучитьМакет("ОформлениеЛога");
	Начало = Макет.ПолучитьОбласть("НАЧАЛО");
	Внимание = Макет.ПолучитьОбласть("ВНИМАНИЕ");
	Успех = Макет.ПолучитьОбласть("УСПЕХ");
	Текст = Макет.ПолучитьОбласть("ТЕКСТ");
	Ошибка = Макет.ПолучитьОбласть("ОШИБКА");
	ОЖИДАНИЕ = Макет.ПолучитьОбласть("ОЖИДАНИЕ");
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если СтрНачинаетсяС(Сообщение.Текст, "{") Тогда
			
			ОписаниеСообщения = ЗначениеИзJSON(Сообщение.Текст);
			
			Если ОписаниеСообщения.ВидСобытия = "НАЧАЛО" Тогда
				
				Начало.Параметры.Заполнить(ОписаниеСообщения);
				Лог.Вывести(Начало);
				
			ИначеЕсли ОписаниеСообщения.ВидСобытия = "ВНИМАНИЕ" Тогда
				
				Лог.Вывести(Внимание);
				
			ИначеЕсли ОписаниеСообщения.ВидСобытия = "УСПЕХ" Тогда
				
				Лог.Вывести(Успех);
				
			ИначеЕсли ОписаниеСообщения.ВидСобытия = "ОШИБКА" Тогда
				
				Лог.Вывести(Ошибка);
				
			ИначеЕсли ОписаниеСообщения.ВидСобытия = "ОЖИДАНИЕ" Тогда
				
				Лог.Вывести(ОЖИДАНИЕ);
				
			КонецЕсли;
			
		Иначе
			
			Текст.Параметры.Заполнить(Сообщение);
			Лог.Вывести(Текст);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Лог.ТекущаяОбласть = Лог.Область(Лог.ВысотаТаблицы, 1, Лог.ВысотаТаблицы, 1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеИзJSON(Строка)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Строка);
	
	Возврат СериализаторXDTO.ПрочитатьJSON(Чтение);
	
КонецФункции

&НаСервере
Функция ЕстьПоследовательностиДляВосстановления()
	
	Возврат РеквизитФормыВЗначение("Последовательности")
		.Строки
		.НайтиСтроки(Новый Структура("Восстановить", Истина))
		.Количество();
	
КонецФункции

&НаСервере
Функция ПараметрыВосстановления()
	
	СписокПоследовательностей = Новый Структура;
	ДеревоПоследовательностей = РеквизитФормыВЗначение("Последовательности");
	
	Если ДеревоПоследовательностей.Строки.НайтиСтроки(Новый Структура("Восстановить", Истина)).Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для Каждого Последовательность Из КонфигурацияПоследовательностей Цикл
		
		Условие = Новый Структура("Последовательность,Восстановить", Последовательность.Представление, Истина);
		СтрокиПоследовательности = ДеревоПоследовательностей.Строки.НайтиСтроки(Условие, Истина);
		
		Если ЗначениеЗаполнено(СтрокиПоследовательности) Тогда
			
			ОрганизацииКВостановлению = Новый Массив;
			Для Каждого Строка Из СтрокиПоследовательности Цикл
				
				ОрганизацииКВостановлению.Добавить(Строка.Организация);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ОрганизацииКВостановлению) Тогда
				
				СписокПоследовательностей.Вставить(Последовательность.Имя, ОрганизацииКВостановлению);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОграничениеПоДате = ?(Объект.ОграничитьПоДате, Объект.ПоДату, Дата('00010101'));
	ПараметрыВосстановления = Новый Структура("СписокПоследовательностей,ОграничениеПоДате", СписокПоследовательностей, ОграничениеПоДате);
	
	Если ЗадержкаИспользовать И Задержка <> 0 Тогда
		
		ПараметрыВосстановления.Вставить("Задержка", Задержка);
		
	КонецЕсли;
	
	Возврат ПараметрыВосстановления;
	
КонецФункции

&НаСервере
Функция ПараметрыВыполнения()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	Возврат ПараметрыВыполнения;
	
КонецФункции

&НаСервере
Функция НачатьВосстановление()
	
	Лог.Очистить();
	
	Если Не ЕстьПоследовательностиДляВосстановления() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не выбраны последовательности для восстановления'");
		
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ВосстановлениеПоследовательностей.Восстановить",
		ПараметрыВосстановления(),
		ПараметрыВыполнения()
	);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДлительнаяОперация, "ИдентификаторЗадания");
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВосстановлениеПрогресс(ДлительнаяОперация, ДополнительныеОпции) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация.Сообщения) Тогда
		
		ДобавитьСообщенияВЛог(ДлительнаяОперация.Сообщения);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеЗавершение(ДлительнаяОперация, ДополнительныеОпции) Экспорт
	

	Если ДлительнаяОперация = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
			
		Возврат;
			
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
			
		Элементы.ИндикаторДлительнойОперации.ТекущаяСтраница = Элементы.Успех;
			
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			
		Элементы.ИндикаторДлительнойОперации.ТекущаяСтраница = Элементы.Ошибка;
			
	КонецЕсли;  
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоПоследовательностей()
	
	ЗаполнитьДерево();
	РазвернутьДерево();
	
КонецПроцедуры

#КонецОбласти
