
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Описание последовательностей для восстановления.
//
Функция КонфигурацияПоследовательностей() Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Обработки
		.ВосстановлениеПоследовательностей
		.ПолучитьМакет("КонфигурацияПоследовательностей")
		.ПолучитьТекст());
	Возврат ПрочитатьJSON(Чтение);
	
КонецФункции

// Возвращает параметры по умолчанию для вызова ПолучитьНеактуальныеДокументы()
//
// Возвращаемое значение:
//  Структура - структура параметров по умолчанию:
//   * РежимВывода 							 - Строка 					 - Определяет представление результата вывода.
//																			Доступные значения: Дерево, Таблица, Документ.
//   * КВосстановлению						 - Структура 				 - Последовательности, выбранные для восстановления.
//   * ПоДату								 - Дата 					 - Дата до которой будут получены неактуальные документы.
//   * МенеджерПоследовательностиДокументов	 - МенеджерВременныхТаблиц 	 - менеджер временных таблиц.
Функция СоздатьПараметрыПолученияНеактуальныхДокументов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("РежимВывода",                          "Таблица");
	Параметры.Вставить("КВосстановлению",                      Неопределено);
	Параметры.Вставить("ПоДату",                               Неопределено);
	Параметры.Вставить("МенеджерПоследовательностиДокументов", Неопределено);
	Параметры.Вставить("ОдинДокумент",                         Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает таблицу документов с неактуальными движениями по границам.
//
// Параметры:
//	Границы - ТаблицаЗначений- Таблица с описанием границ.
//	Параметры - Структура - структура необязательных параметров, возвращаемая функцией 
//							СоздатьПараметрыПолученияНеактуальныхДокументов().
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица неактуальных документов.
//
Функция ПолучитьНеактуальныеДокументы(Границы, Параметры=Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = СоздатьПараметрыПолученияНеактуальныхДокументов();
	КонецЕсли;
	
	Если Параметры.МенеджерПоследовательностиДокументов = Неопределено Тогда
		
		Параметры.МенеджерПоследовательностиДокументов = НовыйМенеджерПоследовательностиДокументов(
			Границы, Параметры.КВосстановлению, Параметры.ПоДату);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Параметры.МенеджерПоследовательностиДокументов;
	Запрос.УстановитьПараметр("ПоДату", Параметры.ПоДату);
	
	Отбирать = ЗначениеЗаполнено(Параметры.КВосстановлению);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ //#ТОЛЬКО_ПЕРВЫЙ_ДОКУМЕНТ
	|	Таблица%1.ИмяПоследовательности,
	|	Таблица%1.Граница,
	|	Таблица%1.Документ,
	|	Таблица%1.Организация,
	|	Таблица%1.МоментВремени
	|ИЗ
	|	(ВЫБРАТЬ //ПЕРВЫЕ 1
	|		""%1"" КАК ИмяПоследовательности,
	|		%1Границы.ДокументСсылка КАК Граница,
	|		%1.Регистратор КАК Документ,
	|		%1Границы.%4 КАК Организация,
	|		%1.МоментВремени КАК МоментВремени
	|	ИЗ
	|		РегистрСведений.%1 КАК %1Границы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность%1 КАК %1
	|	ПО
	|		%1Границы.ДокументСсылка <> %1.Регистратор
	|		И ВЫБОР
	|			КОГДА %1Границы.МоментВремени = %1.Период ТОГДА
	|				%1Границы.ДокументСсылка < %1.Регистратор
	|			ИНАЧЕ
	|				%1Границы.МоментВремени < %1.Период
	|		КОНЕЦ
	|		%2
	|%3) КАК Таблица%1";
	
	ЗапросыГраниц = Новый Массив;
	
	Для Каждого Граница Из Границы Цикл
		
		ОтборПоОрганизациям = Неопределено;
		
		Если Отбирать И НЕ Параметры.КВосстановлению.Свойство(Граница.Имя, ОтборПоОрганизациям) Тогда
			Продолжить;
		КонецЕсли;
		
		Соединения = Новый Массив;
		
		Для Каждого Измерение Из Граница.Измерения Цикл
			Соединения.Добавить(СтрШаблон("И %1Границы.%2 = %1.%2", Граница.Имя, Измерение));
		КонецЦикла;
		
		Где = "";
		Если Отбирать И ТипЗнч(ОтборПоОрганизациям) = Тип("Массив") Тогда
			Где = СтрШаблон("ГДЕ %1.%2 В (&СписокОрганизаций%1)", Граница.Имя, Граница.ПутьКОрганизации);
			Запрос.УстановитьПараметр(СтрШаблон("СписокОрганизаций%1", Граница.Имя), ОтборПоОрганизациям);
		КонецЕсли;
		
		ЗапросыГраниц.Добавить(СтрШаблон(
			ШаблонЗапроса, Граница.Имя, СтрСоединить(Соединения, Символы.ПС), Где, Граница.ПутьКОрганизации));
		
	КонецЦикла;
	
	Хвост = Новый Массив;
	Хвост.Добавить("УПОРЯДОЧИТЬ ПО МоментВремени");
	Обход = ОбходРезультатаЗапроса.Прямой;
	
	Если Параметры.РежимВывода = "Дерево" Тогда
		Хвост.Добавить("ИТОГИ ПО Организация, ИмяПоследовательности");
		Обход = ОбходРезультатаЗапроса.ПоГруппировкам;
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЗапросыГраниц, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС)
		+ Символы.ПС
		+ СтрСоединить(Хвост, Символы.ПС);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОдинДокумент", Ложь) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ТОЛЬКО_ПЕРВЫЙ_ДОКУМЕНТ", "ПЕРВЫЕ 1");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить(Обход);
	
КонецФункции // ПолучитьНеактуальныеДокументы()

// Выполняет восстановление последовательностей.
//
// Параметры:
//  ПараметрыВосстановления - Структура - Параметры выполнения операции восстановления:
//      ТаблицаПоследовательностей - ТаблицаЗначений - Таблица с описание последовательностей.
//      СписокПоследовательностей - СписокЗначений - Список последовательностей к восстановлению.
//      ОграничениеПоДате - Дата - Верхнее ограничение периода восстановления.
//  АдресРезультата - Строка - Адрес во временном хранилище в который будет помещен результат выполнения.
//
Процедура Восстановить(ПараметрыВосстановления, АдресРезультата="") Экспорт
	Перем СоответствиеПоследовательностей;
	
	СписокПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(ПараметрыВосстановления, "СписокПоследовательностей");
	ПоДату = ПолучитьЗначениеПараметраСтруктуры(ПараметрыВосстановления, "ОграничениеПоДате", Дата(1, 1, 1));
	КонфигурацияПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(ПараметрыВосстановления, "ТаблицаПоследовательностей");
	Задержка = ПолучитьЗначениеПараметраСтруктуры(ПараметрыВосстановления, "Задержка", 0);
	ИспользоватьЗадержку = Задержка > 0;
	Обработка = Метаданные.Обработки.ВосстановлениеПоследовательностей;
	
	СписокПроведенныхДокументов = Новый Массив;
	
	Если КонфигурацияПоследовательностей = Неопределено Тогда
		
		КонфигурацияПоследовательностей = КонфигурацияПоследовательностей();
		
	КонецЕсли;
	
	СоответствиеПоследовательностей = ТипыДокументовПоследовательностей(КонфигурацияПоследовательностей);
	
	Если НЕ ПраваИНастройкиПользователя.Значение("РедактированиеПроведенныхДокументов") Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'У пользователя «%1» нет прав на редактирование проведенных документов.'"),
			ПредставлениеТекущегоПользователя());
	КонецЕсли;
	
	Если СписокПоследовательностей.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не выбраны последовательности.'");
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Неопределено;
	Документ = Неопределено;
	ПервыйДокумент = Истина;
	
	Пока СледующийНеактуальныйДокумент(
		Документ, КонфигурацияПоследовательностей, СписокПоследовательностей, ПоДату, МенеджерВременныхТаблиц) Цикл
		
		Если ИспользоватьЗадержку И НЕ ПервыйДокумент Тогда
			
			ВывестиСообщениеВЛог(СобытияЛога().Ожидание);
			Подождать(Задержка);
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			
			ПервыйДокумент = Ложь;
			
		КонецЕсли;
		
		ВывестиСообщениеВЛог(СобытияЛога().Начало, НСтр("ru = 'Начало проведения документа'"), Документ);
		
		Если СписокПроведенныхДокументов.Найти(Документ) <> Неопределено Тогда
			ВывестиСообщениеВЛог(СобытияЛога().Внимание);
		КонецЕсли;
		
		ПерепроводимыйДокумент = Документ.ПолучитьОбъект();
		ПерепровестиДокумент(ПерепроводимыйДокумент);
		СдвинутьГраницыДокумента(
			ПерепроводимыйДокумент,
			СписокПоследовательностей,
			КонфигурацияПоследовательностей,
			СоответствиеПоследовательностей,
			МенеджерВременныхТаблиц);
		
		ПерепроводимыйДокумент = Неопределено;
		СписокПроведенныхДокументов.Добавить(Документ);
		
		ВывестиСообщениеВЛог(СобытияЛога().Успех);
		
		ЗаписьЖурналаРегистрации(
			СобытияЖурналаРегистрации().ПроведениеДокумента,
			УровеньЖурналаРегистрации.Информация,
			Обработка,
			Документ);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СписокПоследовательностей) Тогда
		
		УдалитьАктуальныеГраницы(КонфигурацияПоследовательностей, СписокПоследовательностей);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытияЖурналаРегистрации().Успех,
		УровеньЖурналаРегистрации.Информация,
		Обработка,
		,
		НСтр("ru = 'Последовательности восстановлены.'"));
	
КонецПроцедуры // Восстановить()

Функция ПолучитьМинимальнуюДатуГраниц(Границы, КВосстановлению) Экспорт
	
	Отбирать = ЗначениеЗаполнено(КВосстановлению);
	ШаблонЗапроса = "ВЫБРАТЬ %1Границы.МоментВремени КАК МоментВремени ИЗ РегистрСведений.%1 КАК %1Границы";
	РазделительЗапросов = "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ГраницыВЗапросе = Новый Массив;
	Для Каждого Граница Из Границы Цикл
		
		Если Отбирать И НЕ КВосстановлению.Свойство(Граница.Имя) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ГраницыВЗапросе.Добавить(СтрШаблон(ШаблонЗапроса, Граница.Имя));
		
	КонецЦикла;
	
	Если ГраницыВЗапросе.Количество() = 0 Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ МИНИМУМ(Таблица.МоментВремени) КАК МоментВремени ИЗ (%1) КАК Таблица",
		СтрСоединить(ГраницыВЗапросе, РазделительЗапросов))); 
		
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.МоментВремени;
	
КонецФункции //ПолучитьМинимальнуюДатуГраниц()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипыДокументовПоследовательностей(Конфигурация)
	
	Результат = Новый Соответствие;
	
	Для Каждого Последовательность Из Конфигурация Цикл
		
		ДоступныеРегистры = Новый Массив;
		
		Для Каждого Регистр Из Последовательность.РегистрыНакопления Цикл
			
			ДоступныеРегистры.Добавить(Регистр.Имя);
			
		КонецЦикла;
		
		ТипыДокументов = Новый Соответствие;
		
		Для Каждого Документ Из Метаданные.Документы Цикл
			
			Для Каждого Регистр Из Документ.Движения Цикл
				
				Если ДоступныеРегистры.Найти(Регистр.Имя) <> Неопределено Тогда
					
					ТипыДокументов.Вставить(Документ.Имя, Истина);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Результат.Вставить(Последовательность.Имя, ТипыДокументов);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПоследовательностьПоИмени(Имя, Конфигурация)
	
	Для Каждого Последовательность Из Конфигурация Цикл
		
		Если Последовательность.Имя = Имя Тогда
			
			Возврат Последовательность;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОтборПоДате(МинимальнаяДата, ПоДату)
	
	Если ЗначениеЗаполнено(МинимальнаяДата) И ЗначениеЗаполнено(ПоДату) Тогда
		
		Возврат "ГДЕ %1.Период МЕЖДУ &МинимальнаяДата И &ПоДату";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
		
		Возврат "ГДЕ %1.Период >= &МинимальнаяДата";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоДату) Тогда
		
		Возврат "ГДЕ %1.Период <= &ПоДату";
		
	КонецЕсли;
	
	Возврат "ГДЕ %1.Период МЕЖДУ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1) И ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)";
	
КонецФункции

Функция ПредставлениеТекущегоПользователя()
	
	ПредставлениеПользователя = ПолноеИмяПользователя();
	
	Если НЕ ПустаяСтрока(ПредставлениеПользователя) Тогда
		Возврат ПредставлениеПользователя;
	КонецЕсли;
	
	ПредставлениеПользователя = ИмяПользователя();
	
	Если НЕ ПустаяСтрока(ПредставлениеПользователя) Тогда
		Возврат ПредставлениеПользователя;
	КонецЕсли;
	
	Возврат НСтр("ru = 'Администратор информационной базы'");
	
КонецФункции

Функция ТекстЗапросаКРегиструНакопления(Регистр, Условие)
	
	БазовыйШаблон =
	"ВЫБРАТЬ //ПАРАМЕТРЫ_ВЫБРАТЬ
	|	%1.Период КАК Период,
	|	%1.Регистратор КАК Регистратор,
	|	%1.МоментВремени КАК МоментВремени%2
	|	%3
	|//МЕСТО_ПОМЕЩЕНИЯ_ВО_ВРЕМЕННУЮ_ТАБЛИЦУ
	|ИЗ
	|	РегистрНакопления.%1 КАК %1
	|%4";
	
	Измерения = Новый Массив;
	
	Для Каждого Измерение Из Регистр.Измерения Цикл
		
		Для Каждого КлючЗначение Из Измерение Цикл
			
			Измерения.Добавить(СтрШаблон("%1.%2 КАК %3", Регистр.Имя, КлючЗначение.Значение, КлючЗначение.Ключ));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ФорматированноеУсловие = ?(ПустаяСтрока(Условие), Условие, СтрШаблон(Условие, Регистр.Имя));
	Возврат СтрШаблон(
		БазовыйШаблон,
		Регистр.Имя,
		?(ЗначениеЗаполнено(Измерения), ",", ""),
		СтрСоединить(Измерения, "," + Символы.ПС),
		ФорматированноеУсловие);
	
КонецФункции

Функция ПолучитьТекстЗапросаРегистровНакопления(Границы, КВосстановлению, МинимальнаяДата, ПоДату)
	
	Отбирать = ЗначениеЗаполнено(КВосстановлению);
	УсловиеПоДате = ОтборПоДате(МинимальнаяДата, ПоДату);
	ЗапросОбщий = Новый Массив;
	
	Для Каждого Граница Из Границы Цикл
		
		Если Отбирать И НЕ КВосстановлению.Свойство(Граница.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросыПоследовательности = Новый Массив;
		
		Для Каждого Регистр Из Граница.РегистрыНакопления Цикл
			
			ЗапросыПоследовательности.Добавить(ТекстЗапросаКРегиструНакопления(Регистр, УсловиеПоДате));
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ЗапросыПоследовательности) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗапросыПоследовательности.Количество() = 1 Тогда
			
			ФорматированныйЗапрос = СтрЗаменить(
				ЗапросыПоследовательности[0],
				"//МЕСТО_ПОМЕЩЕНИЯ_ВО_ВРЕМЕННУЮ_ТАБЛИЦУ",
				СтрШаблон("ПОМЕСТИТЬ Последовательность%1", Граница.Имя));
			ФорматированныйЗапрос = СтрЗаменить(ФорматированныйЗапрос, "//ПАРАМЕТРЫ_ВЫБРАТЬ", "РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ");
			
			ЗапросОбщий.Добавить(СтрШаблон(
				"%1
				|%2",
				ФорматированныйЗапрос,
				?(НЕ ПустаяСтрока(Граница.ТекстПолейИндексов), "ИНДЕКСИРОВАТЬ ПО " + Граница.ТекстПолейИндексов, "")));
			Продолжить;
			
		КонецЕсли;
		
		ШаблонПомещения =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Запрос%1.Период КАК Период,
		|	Запрос%1.Регистратор КАК Регистратор,
		|	Запрос%1.МоментВремени КАК МоментВремени%2
		|	%3
		|ПОМЕСТИТЬ Последовательность%1
		|ИЗ (
		|	%4
		|) КАК Запрос%1
		|%5";
		
		Измерения = Новый Массив;
		Для Каждого Измерение Из Граница.Измерения Цикл
			
			Измерения.Добавить(СтрШаблон("Запрос%1.%2 КАК %2", Граница.Имя, Измерение));
			
		КонецЦикла;
		
		ЗапросОбщий.Добавить(СтрШаблон(
			ШаблонПомещения,
			Граница.Имя,
			?(ЗначениеЗаполнено(Измерения), ",", ""),
			СтрСоединить(Измерения, "," + Символы.ПС),
			СтрСоединить(ЗапросыПоследовательности, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС),
			?(НЕ ПустаяСтрока(Граница.ТекстПолейИндексов), "ИНДЕКСИРОВАТЬ ПО " + Граница.ТекстПолейИндексов, "")));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЗапросОбщий, Символы.ПС + ";" + Символы.ПС);
	
КонецФункции //ПолучитьТекстЗапросаРегистровНакопления()

Функция НовыйМенеджерПоследовательностиДокументов(Границы, КВосстановлению, ПоДату)
	
	МинимальнаяДата = ПолучитьМинимальнуюДатуГраниц(Границы, КВосстановлению);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРегистровНакопления(Границы, КВосстановлению, МинимальнаяДата, ПоДату);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.УстановитьПараметр("ПоДату", ПоДату);
	Запрос.Выполнить();
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Функция СледующийНеактуальныйДокумент(
	Документ,
	Границы,
	КВосстановлению=Неопределено,
	ПоДату=Неопределено,
	Менеджер=Неопределено)
	
	ПараметрыПолучения = СоздатьПараметрыПолученияНеактуальныхДокументов();
	ПараметрыПолучения.КВосстановлению                      = КВосстановлению;
	ПараметрыПолучения.ПоДату                               = ПоДату;
	ПараметрыПолучения.МенеджерПоследовательностиДокументов = Менеджер;
	ПараметрыПолучения.ОдинДокумент                         = Истина;

	ТаблицаДокументов = ПолучитьНеактуальныеДокументы(Границы, ПараметрыПолучения);
	
	Если Менеджер = Неопределено Тогда
		
		Менеджер = ПараметрыПолучения.МенеджерПоследовательностиДокументов;
		
	КонецЕсли;
	
	Если ТаблицаДокументов.Количество() = 0 Тогда
		Документ = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	Документ = ТаблицаДокументов[0].Документ;
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДополнительныеСвойства(ДополнительныеСвойства)
	
	ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения",           Ложь);
	ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения",     Истина);
	ДополнительныеСвойства.Вставить("ПроверкаПроведенияЗаднимЧислом",         Ложь);
	ДополнительныеСвойства.Вставить("ИспользоватьВерсионированиеОбъектов",    Ложь);
	ДополнительныеСвойства.Вставить("ИспользоватьЗначимыеСобытия",            Ложь);
	ДополнительныеСвойства.Вставить("ПроверкаПродажиНижеСебестоимости",       Ложь);
	ДополнительныеСвойства.Вставить("ПроверкаВводаДокументовПоКураторам",     Ложь);
	ДополнительныеСвойства.Вставить("ПроверкаИзмененияПриНаличииПодчиненных", Ложь);
	ДополнительныеСвойства.Вставить("ПроверкаУдаленияПриНаличииПодчиненных",  Ложь);
	ДополнительныеСвойства.Вставить("ЭтоВосстановлениеПоследовательностей",   Истина);
	
КонецПроцедуры

Процедура ПерепровестиДокумент(Документ)
	
	Обработка = Метаданные.Обработки.ВосстановлениеПоследовательностей;
	
	// Если документ не был проведен или не проводится его проводить не нужно.
	Если НЕ Документ.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДополнительныеСвойства(Документ.ДополнительныеСвойства);
	
	Если НЕ Документ.ПроверитьЗаполнение() Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Документ «%1» имеет ошибки заполнения и не может быть проведен.'"), Документ.Ссылка);
		
	КонецЕсли;
	
	Попытка
		
		Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
	Исключение
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Документ «%1» не удалось провести.'"), Документ.Ссылка); 
		
		ВывестиСообщение(ТекстОшибки);
		ЗаписьЖурналаРегистрации(
			СобытияЖурналаРегистрации().Ошибка,
			УровеньЖурналаРегистрации.Ошибка,
			Обработка,
			Документ.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СдвинутьГраницыДокумента(
	Документ,
	Последовательности,
	КонфигурацияПоследовательностей,
	СоответствиеПоследовательностей,
	МенеджерВременныхТаблиц)
	
	ВидДокумента = Документ.Метаданные().Имя;
	Попытка
		ДатаДокумента = Документ.ПолучитьДатуДокумента();
	Исключение
		ДатаДокумента = Документ.Дата;
	КонецПопытки;
	
	МоментВремениДокумента = Новый МоментВремени(ДатаДокумента, Документ.Ссылка);
	ЗатронутыеГраницы = Новый Массив;
	
	// Переместим границу последовательностей.
	Для Каждого Последовательность Из Последовательности Цикл
		
		Если СоответствиеПоследовательностей[Последовательность.Ключ][ВидДокумента] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПоследовательности = ПоследовательностьПоИмени(Последовательность.Ключ, КонфигурацияПоследовательностей);
		
		ШаблонИзмерений = "%1 КАК %1";
		Измерения = Новый Массив;
		Для Каждого Измерение Из ОписаниеПоследовательности.Измерения Цикл
			Измерения.Добавить(СтрШаблон(ШаблонИзмерений, Измерение));
		КонецЦикла;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	%1,
		|	МоментВремени КАК МоментВремени,
		|	ДокументСсылка КАК ДокументСсылка
		|ИЗ
		|	РегистрСведений.%2 КАК ГраницаПоследовательности
		|ГДЕ
		|	(%3) В (ВЫБРАТЬ
		|						%3
		|					ИЗ
		|						Последовательность%2 КАК ДвиженияДокументаПоПоследовательности
		|					ГДЕ
		|						ДвиженияДокументаПоПоследовательности.Регистратор = &ВыбРегистратор)";
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВыбРегистратор", Документ.Ссылка);
		Запрос.Текст = СтрШаблон(
			ТекстЗапроса,
			СтрСоединить(Измерения, "," + Символы.ПС),
			ОписаниеПоследовательности.Имя,
			СтрСоединить(ОписаниеПоследовательности.Измерения, ", "));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СдвинулГраницу = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			МоментВремениГраницы = Новый МоментВремени(Выборка.МоментВремени);
			
			Если ЗначениеЗаполнено(Выборка.ДокументСсылка) Тогда
				
				МоментВремениГраницы = Новый МоментВремени(Выборка.МоментВремени, Выборка.ДокументСсылка);
				
			КонецЕсли;
			
			Если МоментВремениГраницы.Сравнить(МоментВремениДокумента) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений[ОписаниеПоследовательности.Имя].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, СтрСоединить(ОписаниеПоследовательности.Измерения, ","));
			МенеджерЗаписи.МоментВремени = МоментВремениДокумента.Дата;
			МенеджерЗаписи.ДокументСсылка = МоментВремениДокумента.Ссылка;
			МенеджерЗаписи.Записать(Истина);
			СдвинулГраницу = Истина;
			
		КонецЦикла;
		
		Если СдвинулГраницу Тогда
			
			ЗатронутыеГраницы.Добавить(ОписаниеПоследовательности.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗатронутыеГраницы) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Изменены границы: %1;'"), СтрСоединить(ЗатронутыеГраницы, ", ")));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьАктуальныеГраницы(Границы, КУдалению=Неопределено)
	
	Отбирать = ЗначениеЗаполнено(Границы);
	МенеджерПоследовательностиДокументов = НовыйМенеджерПоследовательностиДокументов(Границы, КУдалению, Неопределено);
	
	Измерения = Новый Массив;
	
	Для Каждого Граница Из Границы Цикл
		
		Если Отбирать И НЕ КУдалению.Свойство(Граница.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Измерения, Граница.Измерения, Истина);
		
	КонецЦикла;
	
	ШаблонИтоговогоЗапроса =
	"ВЫБРАТЬ
	|	ИтоговаяТаблица.ИмяПоследовательности КАК ИмяПоследовательности,
	|	%1
	|ИЗ
	|	(%2) КАК ИтоговаяТаблица
	|
	|ИТОГИ
	|ПО
	|	ИмяПоследовательности";
	
	ШаблонЗапросаКГранице =
	"ВЫБРАТЬ
	|	%2
	|ИЗ
	|	РегистрСведений.%1 КАК %1Границы
	|ЛЕВОЕ СОЕДИНЕНИЕ Последовательность%1 КАК %1
	|ПО 
	|	%3
	|СГРУППИРОВАТЬ ПО
	|	%4
	|ИМЕЮЩИЕ МАКСИМУМ(ВЫБОР
	|		КОГДА %1Границы.МоментВремени = %1.Период И %1Границы.ДокументСсылка < %1.Регистратор ТОГДА
	|			ИСТИНА
	|		КОГДА %1Границы.МоментВремени < %1.Период И %1Границы.ДокументСсылка <> %1.Регистратор ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ)=ЛОЖЬ";
	
	РазделительЗапросаКГраницам = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	РазделительИзмерений = ",
	|";
	РазделительСоединений = " И
	|";
	РазделительГруппировок = ",
	|";
	
	ИзмеренияИтоговойТаблицы = Новый Массив;
	Для Каждого Измерение Из Измерения Цикл
		
		ИзмеренияИтоговойТаблицы.Добавить(СтрШаблон("ИтоговаяТаблица.%1 КАК %1", Измерение));
		
	КонецЦикла;
	
	ЗапросыКГраницам = Новый Массив;
	Для Каждого Граница Из Границы Цикл
		
		Если Отбирать И НЕ КУдалению.Свойство(Граница.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ВставкаПоИзмерениям = Новый Массив;
		ВставкаПоСоединениям = Новый Массив;
		ВставкаПоГруппировкам = Новый Массив;
		
		ВставкаПоИзмерениям.Добавить(СтрШаблон("""%1"" КАК ИмяПоследовательности", Граница.Имя));
		
		Для Каждого Измерение Из Измерения Цикл
			
			Если Граница.Измерения.Найти(Измерение) = Неопределено Тогда
				
				ВставкаПоИзмерениям.Добавить(СтрШаблон("NULL КАК %1", Измерение));
				Продолжить;
				
			КонецЕсли;
			
			ВставкаПоИзмерениям.Добавить(СтрШаблон("%1Границы.%2 КАК %2", Граница.Имя, Измерение));
			ВставкаПоСоединениям.Добавить(СтрШаблон("%1Границы.%2 = %1.%2", Граница.Имя, Измерение));
			ВставкаПоГруппировкам.Добавить(СтрШаблон("%1Границы.%2", Граница.Имя, Измерение));
			
		КонецЦикла;
		
		ЗапросыКГраницам.Добавить(СтрШаблон(
			ШаблонЗапросаКГранице,
			Граница.Имя,
			СтрСоединить(ВставкаПоИзмерениям, РазделительИзмерений),
			СтрСоединить(ВставкаПоСоединениям, РазделительСоединений),
			СтрСоединить(ВставкаПоГруппировкам, РазделительГруппировок)));
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерПоследовательностиДокументов;
	Запрос.Текст = СтрШаблон(
		ШаблонИтоговогоЗапроса,
		СтрСоединить(ИзмеренияИтоговойТаблицы, РазделительИзмерений),
		СтрСоединить(ЗапросыКГраницам, РазделительЗапросаКГраницам));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаГраницы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГраницы.Следующий() Цикл
		
		Выборка = ВыборкаГраницы.Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений[ВыборкаГраницы.ИмяПоследовательности].СоздатьНаборЗаписей();
		ИзмеренияГраницы = ПоследовательностьПоИмени(ВыборкаГраницы.ИмяПоследовательности, Границы).Измерения;
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Измерение Из ИзмеренияГраницы Цикл
				
				Набор.Отбор[Измерение].Установить(Выборка[Измерение]);
				Набор.Записать(Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьАктуальныеГраницы()

Функция ЗначениеВJSON(Значение)
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(Запись, Значение, НазначениеТипаXML.Явное);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Процедура ВывестиСообщениеВЛог(ВидСобытия, Текст="",  Документ=Неопределено)
	
	ОписаниеСообщения = Новый Структура;
	ОписаниеСообщения.Вставить("ВидСобытия", ВидСобытия);
	ОписаниеСообщения.Вставить("Текст", Текст);
	ОписаниеСообщения.Вставить("Дата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ОписаниеСообщения.Вставить("Документ", Строка(Документ));
		ОписаниеСообщения.Вставить("Ссылка", ПолучитьНавигационнуюСсылку(Документ));
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ЗначениеВJSON(ОписаниеСообщения));
	
КонецПроцедуры

Функция СобытияЖурналаРегистрации()
	
	Возврат Новый Структура(
		"Успех,ПроведениеДокумента,Ошибка",
		НСтр("ru = 'Восстановление последовательностей. Последовательности восстановлены'"),
		НСтр("ru = 'Восстановление последовательностей. Документ проведен'"),
		НСтр("ru = 'Восстановление последовательностей. Ошибка'"));
	
КонецФункции

Функция СобытияЛога()
	
	События = Новый Структура("Начало,Ошибка,Внимание");
	События.Вставить("Начало", "НАЧАЛО");
	События.Вставить("Ожидание", "ОЖИДАНИЕ");
	События.Вставить("Ошибка", "ОШИБКА");
	События.Вставить("Внимание", "ВНИМАНИЕ");
	События.Вставить("Успех", "УСПЕХ");
	Возврат События;
	
КонецФункции

Процедура Подождать(Время)
	
	Конец = ТекущаяДата() + Время;
	Пока Конец > ТекущаяДата() Цикл
		
		Задержка = 10; // Просто ждем
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли