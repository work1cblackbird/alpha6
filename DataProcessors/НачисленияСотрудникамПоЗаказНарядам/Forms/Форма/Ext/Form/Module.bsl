
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Период.Вариант = ВариантСтандартногоПериода.ЭтаНеделя;
	Объект.Организация = ПараметрыСеанса.Организация;
	Объект.ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	
	УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
			ПравоПользователя("УровеньДоступаКНачислениямСотрудникамВЗаказНарядах");
	
	УстановитьУсловноеОформление();
	
	Если УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
		Перечисления.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Просмотр Тогда
		Элементы.ЗавершитьРедактирование.Доступность = Ложь;
		Элементы.ДеревоДокументов.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Временно запретим использования обработки
	ПоказатьПредупреждение(,
		НСтр("ru = 'Доступ к обработке временно запрещен.'"));
	Отказ = Истина;
	Возврат;
	
	Если УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
		ПредопределенноеЗначение("Перечисление.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Запрещено") Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'У текущего пользователя нет прав на открытие обработки. Обратитесь к администратору.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоОтборам", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Период = Настройки.Получить("Период");
	Организация = Настройки.Получить("Организация");
	ПодразделениеКомпании = Настройки.Получить("ПодразделениеКомпании");
	
	Если Период <> Неопределено Тогда
		Объект.Период = Период;
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		Объект.Организация = Организация;
	КонецЕсли;
	
	Если ПодразделениеКомпании = Неопределено Тогда
		Объект.ПодразделениеКомпании = ПодразделениеКомпании;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("Период", Объект.Период);
	Настройки.Вставить("Организация", Объект.Организация);
	Настройки.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДеревоДокументовВидНачисленияПриИзмененииНаСервере()
	
	ТекущаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока);
	ТекущаяСтрока.СпособРасчета = ТекущаяСтрока.ВидНачисления.СпособРасчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВидНачисленияПриИзменении(Элемент)
	
	ДеревоДокументовВидНачисленияПриИзмененииНаСервере();
	
	ВыполнитьПерезаполнениеСуммыНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПараметрРасчетаНачисленияПриИзменении(Элемент)
	
	ВыполнитьПерезаполнениеСуммыНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовНачисленоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Изменено = Истина;
	ТекущиеДанные.ПометкаИзмененного = БиблиотекаКартинок.ПринятьИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ЗадаватьВопросПередОбновлением = Ложь;
	ОбновитьДанныеПоОтборам();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ЗадаватьВопросПередОбновлением = Ложь;
	ОбновитьДанныеПоОтборам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗадаватьВопросПередОбновлением = Ложь;
	ОбновитьДанныеПоОтборам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗадаватьВопросПередОбновлением = Ложь;
	ОбновитьДанныеПоОтборам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоДокументовПредставление" Тогда
		
		Строка = ДеревоДокументов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(Строка.ЗаказНаряд) Тогда
			
			ПоказатьЗначение(,Строка.ЗаказНаряд);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Авторабота) Тогда
			
			ПоказатьЗначение(,Строка.Авторабота);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Исполнитель) Тогда
			
			ПоказатьЗначение(,Строка.Исполнитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗадаватьВопросПередОбновлением = Истина;
	ОбновитьДанныеПоОтборам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	// Запусти длительную операцию
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаписиИзмененийЗаказНарядов");
	
	ДлительнаяОперацияЗагрузкаЗаданий = Истина;
	Элементы.ДекорацияДлительнаяОперацияНадпись.Заголовок =
		НСтр("ru = 'Записываем изменения в заказ-наряды. Пожалуйста, подождите...'");
	ОбновитьСтатусЗагрузки();
	
	Если ВыполнитьЗавершениеРедактированияВФоне() Тогда
		ДлительнаяОперацияЗагрузкаЗаданий = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаписиИзмененийЗаказНарядов", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	// Откроем форму списка Заказ-нард в режиме выбора
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораЗаказНаряда", ЭтотОбъект);
	
	ОткрытьФорму(
		"Документ.ЗаказНаряд.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьРезультатПоискаЗаказНарядов()
	
	РезультатЗапроса = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокиЗаказНаряда(РезультатЗапроса, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиЗаказНаряда(РезультатЗаказНарядов, ОчищатьПередЗаполнением = Ложь, ЗаказНарядВНачало = Ложь)
	
	// Получим дерево для заполнения
	ДеревоЗаказНаряда = РеквизитФормыВЗначение("ДеревоДокументов");
	
	// Очистим от предыдущей выборки
	Если ОчищатьПередЗаполнением Тогда
		ДеревоЗаказНаряда.Строки.Очистить();
	КонецЕсли;
	СтрокаЗаказНаряда = Неопределено;
	ШаблонПредставленияАвтоработы = НСтр("ru = '%1; Количество нормочасов: %2; Сумма: %3; Выручка до применения скидки: %4, %5'");
	ШаблонПредставленияИсполнителей = НСтр("ru = '%1; Цех: %2'");
	
	// Получим выборку документа
	ВыборкаПоЗаказНаряду = РезультатЗаказНарядов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоЗаказНаряду.Следующий() Цикл
		
		СтрокаЗаказНаряда = ДеревоЗаказНаряда.Строки.Добавить();
		СтрокаЗаказНаряда.ЗаказНаряд = ВыборкаПоЗаказНаряду.ЗаказНаряд;
		СтрокаЗаказНаряда.Представление = ВыборкаПоЗаказНаряду.ЗаказНарядПредставление;
		
		// Получим автоработы документа с исполнителями
		ВыборкаРабот = ВыборкаПоЗаказНаряду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРабот.Следующий() Цикл
			
			СтрокаАвтоработы = СтрокаЗаказНаряда.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(
				СтрокаАвтоработы,
				ВыборкаРабот,
				"ИдентификаторРаботы,Авторабота,КоличествоНормочасов,Сумма,ВыручкаДоПримененияСкидки");
			СтрокаАвтоработы.Представление = СтрШаблон(
				ШаблонПредставленияАвтоработы,
				ВыборкаРабот.АвтоработаПредставление,
				Формат(ВыборкаРабот.КоличествоНормочасов, "ЧЦ=10; ЧДЦ=3; ЧН=0"),
				Формат(ВыборкаРабот.Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=0"),
				Формат(ВыборкаРабот.ВыручкаДоПримененияСкидки, "ЧЦ=15; ЧДЦ=2; ЧН=0"),
				ВыборкаРабот.ВалютаДокументаПредставление);
			
			// Получим исполнителей с параметрами
			ВыборкаИсполнителей = ВыборкаРабот.Выбрать();
			
			Пока ВыборкаИсполнителей.Следующий() Цикл
				
				СтрокаИсполнителя = СтрокаАвтоработы.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(
					СтрокаИсполнителя,
					ВыборкаИсполнителей,
					"ИдентификаторРаботы,Исполнитель,Цех,Процент,ВидНачисления,СпособРасчета,ПараметрРасчетаНачисления,Начислено");
				СтрокаИсполнителя.Представление = СтрШаблон(
					ШаблонПредставленияИсполнителей, 
					ВыборкаИсполнителей.ИсполнительПредставление,
					ВыборкаИсполнителей.ЦехПредставление);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗаказНарядВНачало И СтрокаЗаказНаряда <> Неопределено Тогда
		ИндексСтроки = ДеревоЗаказНаряда.Строки.Индекс(СтрокаЗаказНаряда);
		ДеревоЗаказНаряда.Строки.Сдвинуть(ИндексСтроки, - ИндексСтроки);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДеревоЗаказНаряда, ДеревоДокументов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Ручное списание характеристик
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДокументовВидНачисления.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДокументовПараметрРасчетаНачисления.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДокументовНачислено.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДокументов.Исполнитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПерезаполнениеСуммыНачисления()
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчетов = Новый Структура;
	ПараметрыРасчетов.Вставить("КоличествоНормочасов", ТекущиеДанные.ПолучитьРодителя().КоличествоНормочасов);
	ПараметрыРасчетов.Вставить("СуммаБезСкидки", ТекущиеДанные.ПолучитьРодителя().ВыручкаДоПримененияСкидки);
	
	АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(
		ТекущиеДанные,
		ПараметрыРасчетов);
	ТекущиеДанные.Изменено = Истина;
	ТекущиеДанные.ПометкаИзмененного = БиблиотекаКартинок.ПринятьИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОтборам()
	
	Если НЕ ЗначениеЗаполнено(Объект.Период.ДатаНачала) И НЕ ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Укажите период поиска заказ-нарядов'"),
			,
			"Период",
			"Объект"
		);
		Возврат;
	КонецЕсли;
	
	Если ЗадаватьВопросПередОбновлением И ДеревоДокументов.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ВопросОбОчисткеДанных", ЭтотОбъект);
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Все изменения будут потеряны после обновления данных. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеЗаказНарядов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВопросОбОчисткеДанных(РезультатОтвета, ДоплнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ПродолжитьПолучениеЗаказНарядов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеЗаказНарядов()
	
	// Запусти длительную операцию
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолучениеЗаказНарядов");
	
	ДлительнаяОперацияЗагрузкаЗаданий = Истина;
	Элементы.ДекорацияДлительнаяОперацияНадпись.Заголовок =
		НСтр("ru = 'Формируем список заказ-нарядов. Пожалуйста, подождите...'");
	ОбновитьСтатусЗагрузки();
	
	Если ВыполнитьОбновлениеЗаданийВФоне() Тогда
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоДокументов", Истина);
		ДлительнаяОперацияЗагрузкаЗаданий = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолучениеЗаказНарядов", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбновлениеЗаданийВФоне()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторФоновогоЗадания);
	
	Фильтры = Новый Структура;
	Фильтры.Вставить("ДатаНачала"    , Объект.Период.ДатаНачала);
	Фильтры.Вставить("ДатаОкончания" , Объект.Период.ДатаОкончания);
	Фильтры.Вставить("Организация"          , Объект.Организация);
	Фильтры.Вставить("ПодразделениеКомпании"    , Объект.ПодразделениеКомпании);
	Фильтры.Вставить("Сотрудник" , Объект.Сотрудник);
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("Фильтры", Фильтры);
	
	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Автосервис.ПолучитьЗаказНарядыНачисленияСотрудников",
		ПараметрыДлительнойОперации,
		"Обновление списка заказ-нарядов");
	
	АдресХранилища               = РезультатВыполнения.АдресХранилища;
	ИдентификаторФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультатПоискаЗаказНарядов();
	КонецЕсли;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПолучениеЗаказНарядов()
	
	Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		ЗагрузитьРезультатПоискаЗаказНарядов();
		
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоДокументов", Истина);
		ДлительнаяОперацияЗагрузкаЗаданий = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолучениеЗаказНарядов", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРезультатИзменений()
	
	// Преобразуем дерево в таблицу с измененными строками
	ДеревоЗаказНарядов = РеквизитФормыВЗначение("ДеревоДокументов");
	Объект.Начисления.Очистить();
	
	Для Каждого ЗаказНаряд Из ДеревоЗаказНарядов.Строки Цикл
		
		Для Каждого Авторабота Из ЗаказНаряд.Строки Цикл
			
			Для Каждого Исполнитель Из Авторабота.Строки Цикл
				
				Если Исполнитель.Изменено Тогда
					НоваяСтрока = Объект.Начисления.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаказНаряд);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Авторабота,, "ЗаказНаряд");
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Исполнитель,, "ЗаказНаряд,Авторабота");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗавершениеРедактированияВФоне()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторФоновогоЗадания);
	
	СформироватьРезультатИзменений();
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("Начисления", Объект.Начисления.Выгрузить());
	
	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Автосервис.ОбновитьДанныеОНачисленияхСотрудникам",
		ПараметрыДлительнойОперации,
		"Запись изменений заказ-нарядов");
	
	АдресХранилища               = РезультатВыполнения.АдресХранилища;
	ИдентификаторФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ПроверитьРезультатЗагрузкиИзменений();
	КонецЕсли;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаписиИзмененийЗаказНарядов()
	
	Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		ПроверитьРезультатЗагрузкиИзменений();
		
		ДлительнаяОперацияЗагрузкаЗаданий = Ложь;
		ОбновитьСтатусЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаписиИзмененийЗаказНарядов", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРезультатЗагрузкиИзменений()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбщегоНазначения.СообщитьПользователю(
		Результат.Сообщение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЗагрузки()
	
	Элементы.Страницы.ТекущаяСтраница =
		?(ДлительнаяОперацияЗагрузкаЗаданий, Элементы.СписокЗаданийДлительнаяОперация, Элементы.ДаннныеЗаказНарядов);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораЗаказНаряда(РезультатВыбора, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Не выбрали заказ-наряд
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем заказ-наряд среди ранее добавленных в дерево
	Для Каждого СтрокаЗаказНаряда Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Если СтрокаЗаказНаряда.ЗаказНаряд = РезультатВыбора Тогда
			Элементы.ДеревоДокументов.ТекущаяСтрока = СтрокаЗаказНаряда.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Подобранный заказ-наряд был ранее добавлен.'")
			);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗаказНаряд", РезультатВыбора);
	
	Если ДобавленаСтрокаЗаказНаряда(ПараметрыОтбора) Тогда
		// Позиционирование на строке и ее развернуть
		Элементы.ДеревоДокументов.ТекущаяСтрока = ДеревоДокументов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоДокументов", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавленаСтрокаЗаказНаряда(ПараметрыОтбора)
	
	РезультатЗапроса = Автосервис.ЗапросПолученияЗаказНарядов(ПараметрыОтбора);
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Документ %1 не был добавлен. Проверьте наличие авторабот и исполнителей у документа.'"),
				ПараметрыОтбора.ЗаказНаряд
			)
		);
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьСтрокиЗаказНаряда(РезультатЗапроса,, Истина);
	Возврат Истина;
	
КонецФункции

#Область ДлительныеОперации

// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
//
&НаСервере
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#КонецОбласти