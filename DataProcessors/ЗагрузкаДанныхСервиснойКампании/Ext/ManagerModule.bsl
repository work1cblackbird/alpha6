
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФайлами

Функция РаспаковатьФайл(Знач Путь, Расширение) Экспорт
	НовыйПуть = ПолучитьИмяВременногоФайла(Расширение);
	Попытка
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Путь);
		ДвоичныеДанные.Записать(НовыйПуть);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат НовыйПуть;
КонецФункции

#КонецОбласти

#Область EXCEL

Функция ЗаполнитьСоответствиеДанныхXLS(Путь, ДополнительныеПараметры, СоответствиеОбразец)
	
	Если ПрочитатьДанныеИзEXCEL(Путь, Истина, ДополнительныеПараметры) Тогда
		СоответствиеОбразец = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "СоответствиеДанных", Неопределено);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗаполнитьСоответствиеДанныхXLS()

Функция ПрочитатьДанныеИзEXCEL(Путь, ВернутьВсеЛисты, ДополнительныеПараметры)
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Получение данных из Excel'"));
	
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КоличествоСтрок", 0);
	
	Результат = EXCEL_УстановитьСвязь_ADO(Путь, ДополнительныеПараметры, ВернутьВсеЛисты, КоличествоСтрок);
	
	Если Результат = Неопределено Тогда
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Ошибка связи с Excel'"));
		Возврат Ложь;
	Иначе
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Данные из Excel получены'"));
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПрочитатьДанныеИзEXCEL()

Процедура ConnectionClose(Connection)
	
	Попытка
		Connection.Close();
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка закрытия соединения'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Connection = Неопределено;
	
КонецПроцедуры

Функция EXCEL_УстановитьСвязь_ADO(ИмяФайла, ДополнительныеПараметры, ВернутьВсеЛисты = Ложь, КоличествоСтрок = 0)
	
	ТипФайла = ВРег(ДополнительныеПараметры.Расширение);
	// HDR = ?(HDR, "YES", "NO");
	HDR = "NO";
	
	ExtendedProperties = "Excel 8.0"; // xls
	Если ТипФайла = ".XLSB" Тогда
		ExtendedProperties = "Excel 12.0"; // xlsb
	ИначеЕсли ТипФайла = ".XLSX" Тогда
		ExtendedProperties = "Excel 12.0 Xml"; // xlsx
	ИначеЕсли ТипФайла = ".XLSM" Тогда
		ExtendedProperties = "Excel 12.0 Macro"; // xlsm
	КонецЕсли;
	
	Попытка
		// Excel 2000 - 2003
		СообщениеОбОшибкеExcel20002003 = Неопределено;
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяФайла + "; Extended Properties="""
			+ ExtendedProperties + "; HDR=" + HDR + "; IMEX=1"";";
		Connection.Open();
	Исключение
		ДополнительныеПараметры.СообщениеОбОшибке = СтрШаблон("Microsoft.Jet.OLEDB.4.0: %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        СообщениеОбОшибкеExcel20002003 = ДополнительныеПараметры.СообщениеОбОшибке;
		ConnectionStringExcel20002003 = Connection.ConnectionString;
		Connection = Неопределено;
	КонецПопытки;
	
	Если Connection = Неопределено Тогда
		Попытка
			// Excel 2007 - 2010
			СообщениеОбОшибкеExcel20072010 = Неопределено;
			Connection = Новый COMОбъект("ADODB.Connection");
			Connection.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяФайла + 
				";Extended Properties=""" + ExtendedProperties + "; HDR=" + HDR + ";"";Persist Security Info=False;";
			Connection.Open();
		Исключение
			ДополнительныеПараметры.СообщениеОбОшибке = СтрШаблон("Microsoft.ACE.OLEDB.12.0: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	        СообщениеОбОшибкеExcel20072010 = ДополнительныеПараметры.СообщениеОбОшибке;
			ConnectionStringExcel20072010 = Connection.ConnectionString;
			Connection = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Connection = Неопределено Тогда
		Попытка
			// Excel
			СообщениеОбОшибкеExcel = Неопределено;
			Connection = Новый COMОбъект("ADODB.Connection");
			Connection.ConnectionString = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + ИмяФайла + ";";
			Connection.Open();
		Исключение
			ДополнительныеПараметры.СообщениеОбОшибке = СтрШаблон("{Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb): %1", 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	        СообщениеОбОшибкеExcel = ДополнительныеПараметры.СообщениеОбОшибке;
			ConnectionStringExcel = Connection.ConnectionString;
			Connection = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Connection = Неопределено Тогда
		Если СообщениеОбОшибкеExcel20002003 <> Неопределено Тогда 
		    ЗаписьЖурналаРегистрации("ADODB.Connection ""Excel 2000 - 2003"": ", УровеньЖурналаРегистрации.Ошибка, , СообщениеОбОшибкеExcel20002003, "Connection string: " + ConnectionStringExcel20002003);
		КонецЕсли;
		Если СообщениеОбОшибкеExcel20072010 <> Неопределено Тогда 
		    ЗаписьЖурналаРегистрации("ADODB.Connection ""Excel 2007 - 2010"": ", УровеньЖурналаРегистрации.Ошибка, , СообщениеОбОшибкеExcel20072010, "Connection string: " + ConnectionStringExcel20072010);
		КонецЕсли;
		Если СообщениеОбОшибкеExcel <> Неопределено Тогда 
		    ЗаписьЖурналаРегистрации("ADODB.Connection ""Microsoft Excel"": ", УровеньЖурналаРегистрации.Ошибка, , СообщениеОбОшибкеExcel, "Connection string: " + ConnectionStringExcel);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ADOXCatalog = Новый COMОбъект("ADOX.Catalog");
	ADOXCatalog.ActiveConnection = Connection;
	КоличествоЛистов = ADOXCatalog.Tables.Count;
	
	Результат = Новый Соответствие;
	ВсеЛисты = Новый Массив;
	МассивЛистов = Новый Массив;
	
	Для е = 1 По КоличествоЛистов Цикл
		ИмяЛиста = ADOXCatalog.Tables(е - 1).Name;
		Если Прав(ИмяЛиста, 1) = "$" Тогда
			ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста) - 1);
			ВсеЛисты.Добавить(ИмяЛиста);
			Если ВернутьВсеЛисты Тогда
				МассивЛистов.Добавить(ИмяЛиста);
			КонецЕсли;
		КонецЕсли;
		Если Прав(ИмяЛиста, 2) = "$'" Тогда
			ИмяЛиста = Сред(Лев(ИмяЛиста, СтрДлина(ИмяЛиста) - 2), 2);
			ВсеЛисты.Добавить(ИмяЛиста);
			Если ВернутьВсеЛисты Тогда
				МассивЛистов.Добавить(ИмяЛиста);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеЛисты.Количество() > 0 И МассивЛистов.Количество() = 0 Тогда
		// Хотя бы один лист добавим, так как может быть ситуация, когда каждый раз разные названия листов в файле
		МассивЛистов.Добавить(ВсеЛисты[0]);
	КонецЕсли;
	
	ADOXCatalog = Неопределено;
	
	Если МассивЛистов.Количество() = 0 Тогда
		// Все Ок, просто в книге нет страниц
		ConnectionClose(Connection);
		Возврат Истина;
	КонецЕсли;
	
	СоответствиеОбразец = Новый Соответствие;
	
	Для Каждого ИмяЛиста Из МассивЛистов Цикл
		
		МассивДанныхЛиста = Новый Массив;
		
		RecordSet = Новый COMОбъект("ADODB.Recordset");
		ТекстЗапроса = "SELECT" + ?(КоличествоСтрок > 0, " TOP " + Формат(КоличествоСтрок, "ЧГ=0"), "")
			+ " * FROM [" + ИмяЛиста + "$]";
		Попытка
			RecordSet.Open(ТекстЗапроса, Connection);
		Исключение
			ДополнительныеПараметры.СообщениеОбОшибке = СтрШаблон("Ошибка чтения листа [%1]: %2", ИмяЛиста, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	    	ЗаписьЖурналаРегистрации("ADODB.Recordset: ", УровеньЖурналаРегистрации.Предупреждение, , ДополнительныеПараметры.СообщениеОбОшибке, "Connection string: " + Connection.ConnectionString + "
				|Request text: " + ТекстЗапроса);
			Продолжить;
		КонецПопытки;
		
		КоличествоКолонок = RecordSet.Fields.Count;
		Для к = 1 По КоличествоКолонок Цикл
			МассивДанныхЛиста.Добавить(Новый Массив);
		КонецЦикла; 
		
		Пока RecordSet.EOF() = 0 Цикл
			СчКолонок = 0;
			Для Каждого Поле Из RecordSet.Fields Цикл
				ЗначениеПоля = Поле.Value;
				Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
					ЗначениеПоля = СокрЛП(ЗначениеПоля);
				КонецЕсли;
				МассивДанныхЛиста[СчКолонок].Добавить(ЗначениеПоля);
				СчКолонок = СчКолонок + 1;
			КонецЦикла; 
			RecordSet.MoveNext();
		КонецЦикла;
		
		СоответствиеОбразец.Вставить(ИмяЛиста, МассивДанныхЛиста);
		
	КонецЦикла;
	
	RecordSet = Неопределено;
	
	ConnectionClose(Connection);
	
	ДополнительныеПараметры.Вставить("СоответствиеДанных", СоответствиеОбразец);
	
	Возврат Истина;
	
КонецФункции // EXCEL_УстановитьСвязь_ADO()

Функция ЗагрузкаФайлаВТабличныйДокумент(ИмяФайла, ДополнительныеПараметры, СоответствиеОбразец)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ТабличныйДокумент.Прочитать(ИмяФайла);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Построитель = Новый ПостроительЗапроса;
	
	СчетчикЛистов = 1;
	
	Для каждого ОбластьТаб Из ТабличныйДокумент.Области Цикл
		
		ИмяЛиста = ОбластьТаб.Имя;
		
		ТабличныйДокумент.ВставитьОбласть(
			ТабличныйДокумент.Область("R" + Формат(ОбластьТаб.Верх, "ЧГ=0")),
			ТабличныйДокумент.Область("R" + Формат(ОбластьТаб.Верх, "ЧГ=0")),
			ТипСмещенияТабличногоДокумента.ПоВертикали
		);
		Для К = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ТабличныйДокумент.Область("R"+ Формат(ОбластьТаб.Верх,"ЧГ=0")+"C"+Формат(К,"ЧГ=0")).Текст = "Заголовок "+К;
		КонецЦикла;
		ОбластьЛиста = ТабличныйДокумент.Область(ОбластьТаб.Верх, 1, ОбластьТаб.Низ + 1, ТабличныйДокумент.ШиринаТаблицы);
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЛиста);
		Построитель.Выполнить();
		
		ТабДанные = Построитель.Результат.Выгрузить();
		МассивДанныхЛиста = Новый Массив;
		
		КоличествоКолонок = ТабДанные.Колонки.Количество();
		Для к = 1 По КоличествоКолонок Цикл
			// проверим, может данных в колонке просто нет и там пусто.
			МассивПустых = ТабДанные.НайтиСтроки(Новый Структура(ТабДанные.Колонки.Получить(к-1).Имя,""));
			Если МассивПустых.Количество() = ТабДанные.Количество() ИЛИ МассивПустых.Количество() = ТабДанные.Количество()-1 Тогда
				Продолжить;
			КонецЕсли;
			ДанныеКолонки = ТабДанные.ВыгрузитьКолонку(к-1);
			МассивДанныхЛиста.Добавить(ДанныеКолонки);
		КонецЦикла;
		
		СчетчикЛистов = СчетчикЛистов + 1;
		СоответствиеОбразец.Вставить(ИмяЛиста, МассивДанныхЛиста);
	
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("СоответствиеДанных", СоответствиеОбразец);
	
	Возврат Истина;
	
КонецФункции // ЗагрузкаФайлаВТабличныйДокумент()

#КонецОбласти

#Область OpenOffice

// "open office" заполняет массив свойств
Функция MakePropertyValue(ServiceManager, Name, Value)
	Struct = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Struct.Name = Name;
	Struct.Value = Value;
	Возврат Struct;
КонецФункции //MakePropertyValue()

// "open office" Функция преобразует Windows имя файла в URL OpenOffice
Функция ПреобразоватьВURL(ИмяФайла)
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
КонецФункции //ПреобразоватьВURL()

Функция ЗаполнитьСоответствиеДанныхODS(Путь, ДополнительныеПараметры, СоответствиеОбразец)
	
	OpenOfficeДоступен = Ложь;
	Попытка
	 	ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
		Params = MakePropertyValue(ServiceManager, "Hidden", Истина);
		Args = Новый COMSafeArray("VT_DISPATCH", 1); 
		Args.SetValue(0, Params);
		OpenOfficeДоступен = Истина;
	Исключение
		OpenOfficeДоступен = Ложь;
	КонецПопытки;
	
	Если OpenOfficeДоступен Тогда
		Если ПрочитатьДанныеИзOpenOffice(Путь, Истина, ДополнительныеПараметры) Тогда
			СоответствиеОбразец =
				ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "СоответствиеДанных", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Возврат OpenOfficeДоступен;
	
КонецФункции // ЗаполнитьМассивДанныхODS()

Функция ПрочитатьДанныеИзOpenOffice(Путь, ВернутьВсеЛисты, ДополнительныеПараметры)
	СоответствиеОбразец = Новый Соответствие; 
	СчПроцент = 0;
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Получение данных из OpenOffice'"));
	
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КоличествоСтрок", 0);
	
	// Получим объект листа файла
	Попытка
		ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
		Params         = MakePropertyValue(ServiceManager, "Hidden", Истина);
		Args           = Новый COMSafeArray("VT_DISPATCH", 1);
		Args.SetValue(0, Params);
		
		OODoc  = Desktop.loadComponentFromURL(ПреобразоватьВURL(Путь), "_blank", 0, Args);
		Sheets = OODoc.getSheets();
	Исключение
		ServiceManager = Неопределено;
		ДополнительныеПараметры.СообщениеОбОшибке =
		НСтр("ru = 'На компьютере должен быть установлен Open Office версии не ниже 2.0'");
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(Sheets) <> Тип("COMОбъект") Тогда
		ДополнительныеПараметры.СообщениеОбОшибке =
		НСтр("ru = 'Open Office не загружен'");
		
		Возврат Ложь;
	КонецЕсли;
	
	// Получим количество строк для обхода
	ТаблицаСтраниц = Новый ТаблицаЗначений();
	ТаблицаСтраниц.Колонки.Добавить("ИмяЛиста",      Новый ОписаниеТипов("Строка"));
	ТаблицаСтраниц.Колонки.Добавить("СтрокаНачало",  Новый ОписаниеТипов("Число"));
	ТаблицаСтраниц.Колонки.Добавить("СтрокаКонец",   Новый ОписаниеТипов("Число"));
	
	
	ТаблицаСтраниц.Очистить();
	
	Для СчЛистов = 0 По Sheets.getCount() - 1 Цикл
		Попытка
			Sheet = Sheets.getByIndex(СчЛистов);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(Sheet) <> Тип("COMОбъект") Тогда
			Продолжить;
		КонецЕсли;
		
		Cursor = Sheet.createCursor();
		Cursor.gotoStartOfUsedArea(0);
		Cursor.gotoEndOfUsedArea(-1);
		
		Addresses = Cursor.getRangeAddress();
		
		ВсегоКолонок = Addresses.EndColumn - Addresses.StartColumn + 1;
		ВсегоСтрок   = Addresses.EndRow - Addresses.StartRow + 1;
		
		СтрокаНачало = Addresses.StartRow;
		СтрокаКонец  = Мин(ВсегоСтрок, ДополнительныеПараметры.КоличествоСтрок);
		
		НоваяСтраница = ТаблицаСтраниц.Добавить();
		НоваяСтраница.СтрокаНачало = СтрокаНачало;
		НоваяСтраница.СтрокаКонец  = СтрокаКонец;
		НоваяСтраница.ИмяЛиста     = Sheet.Name;
	КонецЦикла;
	
	ВсегоСтрокНаВсехСтраницах = 0;
	Для Каждого ИспользуемаяСтраница Из ТаблицаСтраниц Цикл
		Попытка
			Sheet = Sheets.getByName(ИспользуемаяСтраница.ИмяЛиста);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Cursor = Sheet.createCursor();
		Cursor.gotoStartOfUsedArea(0);
		Cursor.gotoEndOfUsedArea(-1);
		Addresses = Cursor.getRangeAddress();
		
		ВсегоСтрок = (Addresses.EndRow - Addresses.StartRow + 1);
		
		Если ИспользуемаяСтраница.СтрокаНачало > 0 Тогда
			Если ВсегоСтрок < ИспользуемаяСтраница.СтрокаНачало Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНачало = Addresses.StartRow + ИспользуемаяСтраница.СтрокаНачало - 1;
		Иначе
			СтрокаНачало = Addresses.StartRow;
		КонецЕсли;
		
		Если ИспользуемаяСтраница.СтрокаКонец > 0 Тогда
			СтрокаКонец = Мин(ВсегоСтрок, ИспользуемаяСтраница.СтрокаКонец);
		Иначе
			СтрокаКонец = ВсегоСтрок;
		КонецЕсли;
		
		ВсегоСтрокНаВсехСтраницах = ВсегоСтрокНаВсехСтраницах + (СтрокаКонец - (СтрокаНачало -1));
	КонецЦикла;
	
	// Обходим файл
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Загрука данных...'"));
	Для Каждого ИспользуемаяСтраница Из ТаблицаСтраниц Цикл
		Попытка
			Sheet = Sheets.getByName(ИспользуемаяСтраница.ИмяЛиста);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Cursor = Sheet.createCursor();
		Cursor.gotoStartOfUsedArea(0);
		Cursor.gotoEndOfUsedArea(-1);
		Addresses = Cursor.getRangeAddress();
		
		ВсегоКолонок = Addresses.EndColumn - Addresses.StartColumn + 1;
		ВсегоСтрок   = Addresses.EndRow - Addresses.StartRow + 1;
		
		Если ИспользуемаяСтраница.СтрокаНачало > 0 Тогда
			Если ВсегоСтрок < ИспользуемаяСтраница.СтрокаНачало Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНачало = Addresses.StartRow + ИспользуемаяСтраница.СтрокаНачало - 1;
		Иначе
			СтрокаНачало = Addresses.StartRow;
		КонецЕсли;
		
		Если ИспользуемаяСтраница.СтрокаКонец > 0 Тогда
			СтрокаКонец = Мин(ВсегоСтрок, ИспользуемаяСтраница.СтрокаКонец);
		Иначе
			СтрокаКонец = ВсегоСтрок;
		КонецЕсли;
		
		Диапазон = Sheet.getCellRangeByPosition(Addresses.StartColumn, СтрокаНачало, Addresses.EndColumn, СтрокаКонец);
		
		МассивКолонок = Новый Массив;
		
		Для Сч = 1 По ВсегоКолонок Цикл
			МассивКолонок.Добавить(Новый Массив);
		КонецЦикла;
		
		Для СчСтрок = 0 По Диапазон.getRows().getCount() - 1 Цикл
			Для Сч = 0 По ВсегоКолонок - 1 Цикл
				Cell = Диапазон.getCellByPosition(Сч, СчСтрок);
				//ЗначениеПоля = СокрЛП(Cell.getText().String());
				ТипЯчейки = Cell.getType();
				Если ТипЯчейки = 1 Тогда
					ЗначениеПоля = Cell.getValue();
				ИначеЕсли ТипЯчейки = 2 Тогда
					ЗначениеПоля = СокрЛП(Cell.getString());
				ИначеЕсли ТипЯчейки = 3 Тогда
					ЗначениеПоля = Cell.getFormula();
				Иначе
					ЗначениеПоля = "";
				КонецЕсли;
				
				МассивКолонок[Сч].Добавить(ЗначениеПоля);
			КонецЦикла;
			
			СчПроцент = СчПроцент + 1;
			Если НЕ ВсегоСтрокНаВсехСтраницах = 0 Тогда
				ДлительныеОперации.СообщитьПрогресс(
				Окр(СчПроцент / ВсегоСтрокНаВсехСтраницах * 100, 0),
				НСтр("ru = 'Загрузка образца данных из OpenOffice'"));
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеОбразец.Вставить(Sheet.Name, МассивКолонок);
	КонецЦикла;
	
	Desktop.Terminate(); 
	ServiceManager = Неопределено;
	
	ДополнительныеПараметры.Вставить("СоответствиеДанных", СоответствиеОбразец);
	Возврат Истина;
	
КонецФункции // ПрочитатьОбразецOpenOffice()

#КонецОбласти

#Область ТХТ

// процедура разбора строки символов на массив символов
//
// Параметры:
// СтрокаДляРазбора  - Строка - Строка для разбора
// СтрокаПодключения - Строка - Адрес загружаемого файла.
//
// Возвращаемое значение:
// Массив - Массив символов строки.
//
Функция РазобратьСтрокуTXT(Знач СтрокаДляРазбора, Знач СтрокаПодключения, Знач Разд)
	Если Разд = "T" Тогда
		Разделитель = Символы.Таб;
	Иначе
		Разделитель = Разд;
	КонецЕсли;
	
	Возврат СтрРазделить(СтрокаДляРазбора, Разделитель, Истина);
КонецФункции // РазобратьСтрокуTXT()

// Функция - Прочитать данные TXT
//
// Параметры:
//  Путь					 - Строка	 - Путь к данным
//  ЭтоОбразец				 - Булево	 - Признак образца
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ПрочитатьДанныеTXT(Путь, ЭтоОбразец, ДополнительныеПараметры) Экспорт
	МассивДанныхОбразец = Новый Массив;
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КоличествоСтрок", 0);
	
	ПерваяСтрока    = 1;
	ПоследняяСтрока = КоличествоСтрок;
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Получение данных...'"));
	ФайлОбменаОбъект = Новый ЧтениеТекста(Путь);
	
	ОбрабатываемаяСтрока = 0;
	Пока Истина Цикл
		ОбрабатываемаяСтрока  = ОбрабатываемаяСтрока + 1;
		СтрокаФайлаПрайсЛиста = ФайлОбменаОбъект.ПрочитатьСтроку();
		Если СтрокаФайлаПрайсЛиста = Неопределено ИЛИ (ПоследняяСтрока > 0 И ОбрабатываемаяСтрока > ПоследняяСтрока) Тогда
			Прервать;
		КонецЕсли;
		
		Если ОбрабатываемаяСтрока < ПерваяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Сч = 0;
		Для Каждого ЗначениеПоля Из РазобратьСтрокуTXT(СокрЛП(СтрокаФайлаПрайсЛиста), Путь, ДополнительныеПараметры.Разделитель) Цикл
			Если МассивДанныхОбразец.ВГраница() < Сч Тогда
				МассивДанныхКолонки = Новый Массив;
				Для СчЦикла = 1 По ОбрабатываемаяСтрока-1 Цикл
					МассивДанныхКолонки.Добавить("");
				КонецЦикла;
				МассивДанныхОбразец.Добавить(МассивДанныхКолонки);
			КонецЕсли;
			
			Если СтрНачинаетсяС(ЗначениеПоля, """") И СтрЗаканчиваетсяНа(ЗначениеПоля, """") Тогда
				ЗначениеПоляСокр = Сред(ЗначениеПоля, 2, СтрДлина(ЗначениеПоля) -2);
			Иначе
				ЗначениеПоляСокр = ЗначениеПоля;
			КонецЕсли;
			
			МассивДанныхОбразец[Сч].Добавить(СокрЛП(ЗначениеПоляСокр));
			Сч = Сч + 1;
		КонецЦикла;
		
		Для СчЦикла = Сч По МассивДанныхОбразец.ВГраница() Цикл
			МассивДанныхОбразец[СчЦикла].Добавить("");
		КонецЦикла;
	КонецЦикла;
	
	ФайлОбменаОбъект.Закрыть();
	
	ДополнительныеПараметры.Вставить("МассивДанныхОбразец", МассивДанныхОбразец);
	
	Возврат Истина;
	
КонецФункции // ПрочитатьОбразецTXT()

#КонецОбласти

#Область ADO

Функция ПрочитатьДанныеADO(СтрокаПодключения, ПараметрыДействия, СообщениеОбОшибке, СоответствиеОбразец) Экспорт
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Catalog = Новый COMОбъект("ADOX.Catalog");
		Catalog.ActiveConnection = СтрокаПодключения;
	Исключение
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Ошибка подключения к источнику данных: %1%2'"),
			Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Для НомерТаблицы = 0 По Catalog.Tables.Count - 1 Цикл
			Table = Catalog.Tables.Item(НомерТаблицы);
			
			Если НРег(Table.Type) = "table" И Table.Name = ПараметрыДействия.ИмяТаблицы Тогда
				
				СоответствиеОбразец.Вставить(Table.Name, Новый Массив);
			КонецЕсли;
		КонецЦикла;
	Исключение
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Ошибка чтения таблиц в источнике данных: %1%2'"),
			Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыводитьСообщенияПользователю", Истина) Тогда
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Инициализация ADODB.Connection ...'"));
	КонецЕсли;
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection");
		Коннект = Connection.Open(СтрокаПодключения);
	Исключение
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Ошибка подключения к источнику данных: %1%2'"),
			Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого КлючЗначение Из СоответствиеОбразец Цикл
		ИмяТаблицы   = КлючЗначение.Ключ;
		МассивДанных = КлючЗначение.Значение;
		
		ПерваяСтрокаСДанными = 0; 
		ПоследняяСтрокаСДанными = 0;
		ПоследняяСтрокаСДанными = ПараметрыДействия.КоличествоСтрок;
		
		ТекстЗапроса = "SELECT %1 %2.* FROM %2"; 
		Приставка = "";
		Если ПоследняяСтрокаСДанными > 0 Тогда
			Приставка = "TOP " + Формат(ПоследняяСтрокаСДанными, "ЧГ=0");
		КонецЕсли;
		
		Если ПараметрыДействия.Свойство("Условие") Тогда
			ТекстЗапроса = ТекстЗапроса + ПараметрыДействия.Условие;
		КонецЕсли;
		
		Command = Новый  COMОбъект("ADODB.Command");
		Command.CommandText      = СтрШаблон(ТекстЗапроса, Приставка, ИмяТаблицы);
		Command.ActiveConnection = Connection;
		
		Попытка
			Recordset = Command.Execute();
		Исключение
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Ошибка чтения таблицы [%3] в источнике данных: %1%2'"),
				Символы.ПС,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ИмяТаблицы);
			
			Продолжить;
		КонецПопытки;
		
		КолПолей = Recordset.Fields.Count;
		Для Сч = 0 По КолПолей - 1 Цикл
			ИмяКолонки = Recordset.Fields(Сч).Name; МассивКолонка = Новый Массив;
			
			МассивКолонка.Добавить(ИмяКолонки);
			МассивДанных.Добавить(МассивКолонка);
		КонецЦикла;
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыводитьСообщенияПользователю", Истина) Тогда
			ДлительныеОперации.СообщитьПрогресс(, СтрШаблон(НСтр("ru = 'Чтение данных из таблицы [%1] ...'"), ИмяТаблицы));
		КонецЕсли;
		
		СчСтрок = -1;
		Пока Не Recordset.EOF Цикл
			СчСтрок = СчСтрок + 1;
			Если СчСтрок < ПерваяСтрокаСДанными Тогда
				Продолжить;
			КонецЕсли;
			
			Для Сч = 0 По КолПолей - 1 Цикл
				ЗначениеПоля = Recordset.Fields(Сч).Value;
				МассивДанных[Сч].Добавить(СокрЛП(ЗначениеПоля));
			КонецЦикла;
			
			Recordset.MoveNext();
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

// Функция - Получить образец данных из табличного документа
//
// Параметры:
//  Путь					 - Строка	 - Путь к данным
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Соответствие - Образец соответствия.
//
Функция ПолучитьОбразецДанныхИзТабличногоДокумента(Путь, ДополнительныеПараметры) Экспорт
	
	СоответствиеОбразец = Новый Соответствие; // Для каждой страницы будут свои массивы
	
	ЗагрузкаФайлаВТабличныйДокумент(Путь, ДополнительныеПараметры,СоответствиеОбразец);
		
	Возврат СоответствиеОбразец; 
	
КонецФункции // ПолучитьОбразецДанныхИзТабличногоДокумента()

Процедура ЗаполнитьСтруктуруДанныхИзФайла(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	ПутьКФайлу       = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ПутьКФайлу", "");
	Расширение       = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "Расширение", "");
	Разделитель      = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "Разделитель", ";");
	КоличествоСтрок  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "КоличествоСтрок", 0);
	СтруктураТаблицы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "СтруктураТаблицы", Неопределено);
	ИмяЛиста         = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ИмяЛиста", "");
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Расширение"      ,  Расширение);
	ДополнительныеПараметры.Вставить("Разделитель"     ,  Разделитель);
	ДополнительныеПараметры.Вставить("КоличествоСтрок" ,  КоличествоСтрок);
	ДополнительныеПараметры.Вставить("СтруктураТаблицы",  СтруктураТаблицы);
	ДополнительныеПараметры.Вставить("ИмяЛиста",          ИмяЛиста);
	ДополнительныеПараметры.Вставить("СообщениеОбОшибке", "");
	
	Если ПутьКФайлу = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПрайсЛистыКонтрагентовКлиентСервер.ЭтоТабличныйДокумент(ДополнительныеПараметры.Расширение) Тогда
		
		Результат = ПолучитьОбразецДанныхИзТабличногоДокумента(ПутьКФайлу, ДополнительныеПараметры);
		
	ИначеЕсли ПрайсЛистыКонтрагентовКлиентСервер.ЭтоТекстовыйДокумент(ДополнительныеПараметры.Расширение) Тогда
		
		Если ПрочитатьДанныеTXT(ПутьКФайлу, Истина, ДополнительныеПараметры) Тогда
			СоответствиеОбразец = Новый Соответствие;
			СоответствиеОбразец.Вставить("Текст", ДополнительныеПараметры.МассивДанныхОбразец);
			Результат = СоответствиеОбразец;
		КонецЕсли;
		
	Иначе
		Результат = Новый Соответствие;
	КонецЕсли;
	
	ПараметрыПроцедуры.Вставить("СоответствиеДанных", Результат);
	
	ПоместитьВоВременноеХранилище(ПараметрыПроцедуры, АдресХранилища);
КонецПроцедуры

Процедура ЗагрузитьПрайсЛистИзADO(ПараметрыПроцедуры, АдресХранилища) Экспорт
	СтрокаПодключения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "СтрокаПодключения", "");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеОбОшибке", "");
	
	СоответствиеДанных = Новый Соответствие;
	РезультатЗагрузки = ПрочитатьДанныеADO(
		СтрокаПодключения,
		ПараметрыПроцедуры,
		ДополнительныеПараметры,
		СоответствиеДанных);
	
	ПараметрыПроцедуры.Вставить("СоответствиеДанных", СоответствиеДанных);
	
	ПоместитьВоВременноеХранилище(ПараметрыПроцедуры, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
