///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы обработки "Загрузка данных сервисной кампании"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СсылкаСервиснаяКампания = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СсылкаСервиснаяКампания", 
							Справочники.СервисныеКампании.ПустаяСсылка());
	
	Объект.ФайлИсточникДанных = Истина;
	Объект.ПриоритетУДанныхВБазе = Ложь;
	ПриоритетУЗагружаемыхДанных = Истина;
	
	ЕстьПравоРедактирования = ПраваИНастройкиПользователя.Значение("РедактированиеСервисныхКампаний"); 
	
	Если НЕ ЕстьПравоРедактирования Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрещена загрузка списка VIN для сервисной кампании.'"),, 
			"!ОтменитьОткрытие",, Отказ);
		Возврат;
	КонецЕсли;
	
	// Заблокируем для редактирования сервисную кампанию.
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "БлокироватьОтИзменений", Истина) Тогда
		ЗаблокироватьДанныеДляРедактирования(СсылкаСервиснаяКампания,, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ПревФайлИсточникДанных     = Истина;
	
	ФайлИсточникДанных = Истина;
	ЗаполнитьПоляЗагрузки();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загрузка данных сервисной кампании ""%1""'"),
		СсылкаСервиснаяКампания
	);
	
	УправлениеДиалогом(ЕстьПравоРедактирования);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтотОбъект.ВладелецФормы = Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Запрещен самостоятельный вызов.'"),,
			НСтр("ru = 'Данная форма используется другими объектами конфигурации.'"),
			БиблиотекаКартинок.Предупреждение32,
			СтатусОповещенияПользователя.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ФайлИсточникДанныхПриИзменении(Элементы.ФайлИсточникДанных);
	ЗаполнитьСпискиВыбораКолонок();
	Если Объект.Разделитель = Символы.Таб Тогда
		КоманднаяПанельРазделителяВыбор(Элементы.Разделитель.КонтекстноеМеню.ПодчиненныеЭлементы.РазделительТабулятор);
	Иначе
		КоманднаяПанельРазделителяВыбор(Элементы.Разделитель.КонтекстноеМеню.ПодчиненныеЭлементы.РазделительСимвол);
	КонецЕсли;
	
	ТекстСтроки = Новый Структура("ОтображатьТекст, Текст", Ложь, "");

	Для Каждого ТекСтрока Из Объект.СтруктураФайлИсточникVIN Цикл
		ТекстСтроки = ОформлениеСтруктурыФайлИсточникVIN(ТекСтрока.ИмяРеквизитаФайлИсточникVIN);
		ТекСтрока.ИмяРеквизитаСправочникаПредставление = ТекстСтроки.Текст;
	КонецЦикла;
	
	КоличествоСтрокВОбразце = ?(КоличествоСтрокВОбразце = 0, 20, КоличествоСтрокВОбразце);
	Объект.СтрокаНачало     = 2;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлИсточникДанныхПриИзменении(Элемент)
	
	Если НЕ ПревФайлИсточникДанных = Объект.ФайлИсточникДанных Тогда
		Объект.СтрокаПодключения = "";
		ОчиститьСтруктуруДанных();
		ЗаполнитьТабличноеПолеОбразецДанных();
	КонецЕсли;
	
	УправлениеДиалогомВосстановлениеЗначений();
	
	ПревФайлИсточникДанных = Объект.ФайлИсточникДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПревФайлИсточникДанных = Объект.ФайлИсточникДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.СтрокаПодключения = "";
	Если Объект.ФайлИсточникДанных Тогда
		Объект.ФайлИсточникДанных = Ложь;
	Иначе
		Объект.ФайлИсточникДанных = Истина;
	КонецЕсли;
	
	ПревФайлИсточникДанных = Объект.ФайлИсточникДанных;
	УправлениеДиалогомВосстановлениеЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПодключенияПриИзменении(Элемент)
	
	ЗаполнитьСпискиВыбораКолонок();
	
	УправлениеДиалогомВосстановлениеЗначений();
	
	ЗаполнитьСтруктуруДанных(Объект.СтрокаПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПодключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ФайлИсточникДанных Тогда
		СтандартнаяОбработка = Ложь;
		ВыборФайла(Элемент, Истина);
	Иначе
		#Если НЕ МобильныйКлиент Тогда
		// получим строку ADO подключения
		Connection = Новый COMОбъект("ADODB.Connection");
		DataLinks = Новый COMОбъект("DataLinks"); // утилита для формирования и редактирования строки ConnectionString
		Попытка
			Connection.ConnectionString = Объект.СтрокаПодключения;
			DataLinks.PromptEdit(Connection); // создадим новый ConnectionString
		Исключение
			Connection.ConnectionString = "";
			DataLinks.PromptEdit(Connection); // создадим новый ConnectionString
		КонецПопытки;
		
		Объект.СтрокаПодключения = Connection.ConnectionString;
		ЗаполнитьСтруктуруДанных(Объект.СтрокаПодключения);
		ЗаполнитьСпискиВыбораКолонок();
		#Иначе
		ВызватьИсключение НСтр("ru = 'Функция недоступна в режиме мобильного клиента.'");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение(Объект.СтрокаПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещения", ЭтотОбъект, "ЗаполнитьИменаТаблицы");
	
	// Формируем текст вопроса
	ТекстВопроса = НСтр("ru = 'Заполнить имена таблицы?'");
	
	// Получаем подтверждение операции от пользователя
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СтрокаНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещения", ЭтотОбъект, "ЗаполнитьИменаТаблицы");
	
	// Формируем текст вопроса
	ТекстВопроса = НСтр("ru = 'Заполнить имена таблицы?'");
	
	// Получаем подтверждение операции от пользователя
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СтрокаКонецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещения", ЭтотОбъект, "ЗаполнитьИменаТаблицы");
	
	// Формируем текст вопроса
	ТекстВопроса = НСтр("ru = 'Заполнить имена таблицы?'");
	
	// Получаем подтверждение операции от пользователя
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетУДанныхВБазеПриИзменении(Элемент)
	
	Если Объект.ПриоритетУДанныхВБазе = Истина Тогда
		ПриоритетУЗагружаемыхДанных = Ложь;
	Иначе
		ПриоритетУЗагружаемыхДанных = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетУЗагружаемыхДанныхПриИзменении(Элемент)
	
	Если ПриоритетУЗагружаемыхДанных = Истина Тогда
		Объект.ПриоритетУДанныхВБазе = Ложь;
	Иначе
		Объект.ПриоритетУДанныхВБазе = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейВыбор(Элемент, Область, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Область.Расшифровка) И Область.Верх = 1 Тогда
		СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Область.Расшифровка));
		Если СтрокиЛиста.Количество() > 0 Тогда
			Лист = СтрокиЛиста[0];
		Иначе
			
			ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(
				Элементы.НастройкаСоответствияПолей,
				,
				НСтр("ru = 'Данные изменились. Обновите образец.'"),
				БиблиотекаКартинок.Нет
			);
			Возврат;
		КонецЕсли;
		
		Если НЕ ИмяТекущейСтраницы = Область.Расшифровка Тогда // страница активна
			
			ИмяТекущейСтраницы = Область.Расшифровка;
			
			Для Каждого ЛистСтруктуры Из Объект.СтруктураСтраницПрайсЛиста Цикл
				Если ЛистСтруктуры.ПолучитьИдентификатор() = Лист.ПолучитьИдентификатор() Тогда
					ЛистСтруктуры.Использовать = Истина;
					Продолжить;
				КонецЕсли;
				
				ЛистСтруктуры.Использовать = Ложь;
			КонецЦикла;
			
			Объект.ИмяТаблицы = ИмяТекущейСтраницы;
			
			ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы, Истина);
			
		ИначеЕсли Объект.СтруктураСтраницПрайсЛиста.Количество() = 1 И НЕ Лист.Использовать Тогда
			
			Лист.Использовать = Истина;
			ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
			
		КонецЕсли;
	ИначеЕсли Область.Верх = 2 И Область.Гиперссылка Тогда
		ДополнительныеПараметры = Неопределено;
		Если Объект.ФайлИсточникДанных Тогда
			ДополнительныеПараметры = Область.Лево - 1;
		Иначе
			ДополнительныеПараметры = Объект.ЗаголовкиКолонок[Область.Лево - 2].ИмяКолонки;
		КонецЕсли;
		
		Список = Новый СписокЗначений;
		Для Каждого Реквизит Из Объект.СтруктураФайлИсточникVIN Цикл
			ЭтоВыбранноеПоле = Реквизит.ИмяПоляФайла = Строка(ДополнительныеПараметры);
			
			Список.Добавить(
				Реквизит,
				Реквизит.ИмяРеквизитаСправочникаПредставление,
				ЭтоВыбранноеПоле,
				?(ЭтоВыбранноеПоле, БиблиотекаКартинок.Утвержден, Неопределено));
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСКолонкойОбразцаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОписаниеОповещения, Список);
	ИначеЕсли Область.Лево = 1 И Область.Гиперссылка Тогда
		СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
		Если СтрокиЛиста.Количество() > 0 Тогда
			Лист = СтрокиЛиста[0];
		Иначе
			
			ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(
				Элементы.НастройкаСоответствияПолей,
				,
				НСтр("ru = 'Данные изменились. Обновите образец.'"),
				БиблиотекаКартинок.Нет
			);
			Возврат;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НомерСтроки", Область.Верх - ?(Объект.ФайлИсточникДанных, 3, 2));
		ДополнительныеПараметры.Вставить("Лист"       , Лист);
		
		Список = Новый СписокЗначений;
		Если Объект.ФайлИсточникДанных Тогда
			Список.Добавить("Заголовок", "Указать строку с заголовками",, БиблиотекаКартинок.ГруппировкаКомпоновкиДанных);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСоСтрокойОбразцаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОписаниеОповещения, Список);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейПриАктивизацииОбласти(Элемент)
	
	ДоступностьВыбораКлючевогоПоля = Ложь;
	Если НастройкаСоответствияПолей.ВыделенныеОбласти.Количество() > 0 Тогда
		Область = НастройкаСоответствияПолей.ВыделенныеОбласти[0];
		
		Если Область.Верх = 2 И Область.Гиперссылка Тогда
			ПозицияОбласти = Неопределено;
			Если Объект.ФайлИсточникДанных Тогда
				ПозицияОбласти = Область.Лево - 1;
			Иначе
				ПозицияОбласти = Объект.ЗаголовкиКолонок[Область.Лево - 2].ИмяКолонки;
			КонецЕсли;
			
			Условие = Новый Структура("ИмяПоляФайла", Строка(ПозицияОбласти));
			Если Объект.СтруктураФайлИсточникVIN.НайтиСтроки(Условие).Количество() > 0 Тогда
				ДоступностьВыбораКлючевогоПоля = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияСоСтрокойОбразцаДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		НомерСтроки = Результат;
		Результат   = Новый Структура("Значение", ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Действие", ""));
	Иначе
		НомерСтроки = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НомерСтроки", 1);
	КонецЕсли;
	Лист = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Лист"       , Неопределено);
	
	Обновить = Ложь;
	
	Если Лист = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрНачинаетсяС(Результат.Значение, "Заголовок") Тогда
		Лист.СтрокаЗаголовковКолонок = НомерСтроки;
		Если Лист.СтрокаНачало <= НомерСтроки Тогда
			Лист.СтрокаНачало = НомерСтроки + 1;
		КонецЕсли;
		Если Лист.СтрокаКонец > 0 И Лист.СтрокаКонец < Лист.СтрокаНачало Тогда
			Лист.СтрокаКонец = Лист.СтрокаНачало;
		КонецЕсли;
		
		Обновить = Истина;
	
	КонецЕсли;
	
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы, Обновить);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлИсточникVINПриИзменении(Элемент)
	
	ОбразецДанныхСнятьВыделениеКолонки();
	УстановитьВыделеннуюКолонку();
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельРазделителяВыбор(Команда)
	Если Команда.Имя = "РазделительТабулятор" Тогда
		Если Объект.Разделитель <> Символы.Таб Тогда
			Объект.Разделитель = Символы.Таб;
		КонецЕсли; 
		Элементы.Разделитель.ТолькоПросмотр = Истина;
		Элементы.Разделитель.ЦветФона = Новый Цвет(240, 240, 240);
	ИначеЕсли Команда.Имя = "РазделительСимвол" Тогда
		Если Объект.Разделитель = Символы.Таб ИЛИ ПустаяСтрока(СокрЛП(Объект.Разделитель)) Тогда
			Объект.Разделитель = ";";
		КонецЕсли; 
		Элементы.Разделитель.ТолькоПросмотр=Ложь;
		Элементы.Разделитель.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельЗагруженныеДанныеУстановитьФлажки(Команда)
	Если Команда.Имя = "ВключитьВсе" Тогда
		УстановитьСнятьФлажки(Истина);
	ИначеЕсли Команда.Имя = "ВыключитьВсе" Тогда
		УстановитьСнятьФлажки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСправочникНаСервере()
	
	тзНайденныеВКомпании = Новый ТаблицаЗначений;
	тзНайденныеВКомпании.Колонки.Добавить("VIN");
	тзНайденныеВКомпании.Колонки.Добавить("СервиснаяКампания");
	тзНайденныеВКомпании.Колонки.Добавить("ДатаВыполнения");
	тзНайденныеВКомпании.Колонки.Добавить("ДокументВыполнения");
	
	РегистрСервисныеКампании = РегистрыСведений.ВыполнениеСервисныхКампаний.СоздатьНаборЗаписей();
	РегистрСервисныеКампании.Отбор.СервиснаяКампания.Значение = СсылкаСервиснаяКампания;
	РегистрСервисныеКампании.Отбор.СервиснаяКампания.Использование = Истина;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыполнениеСервисныхКампаний");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("СервиснаяКампания", СсылкаСервиснаяКампания);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		РегистрСервисныеКампании.Прочитать();
	
		Для Каждого ТекСтрока Из ЗагруженныйСписокVIN Цикл
			
			Если НЕ ТекСтрока.Пометка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ТекСтрока.НайденаВКампании Тогда
				
				Если 
					(Не ЗначениеЗаполнено(ТекСтрока.ДатаВыполненияВБазе)
						И Не ЗначениеЗаполнено(ТекСтрока.ДокументВыполнения))
					ИЛИ (НЕ Объект.ПриоритетУДанныхВБазе)
				Тогда
				
					НоваяСтрока = тзНайденныеВКомпании.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, "VIN,ДатаВыполнения");
					ТекСтрока.ДатаВыполненияВБазе = ТекСтрока.ДатаВыполнения;
					
				КонецЕсли;
				
			Иначе
				
				НоваяЗапись = РегистрСервисныеКампании.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока, "VIN,СервиснаяКампания,ДатаВыполнения");
				ТекСтрока.ДатаВыполненияВБазе = ТекСтрока.ДатаВыполнения;
				ТекСтрока.НайденаВКампании = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
	
		РегистрСервисныеКампании.Записать();
		
		Если тзНайденныеВКомпании.Количество() > 0 Тогда
			
			МенеджерЗаписи = РегистрыСведений.ВыполнениеСервисныхКампаний.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СервиснаяКампания = СсылкаСервиснаяКампания;
			
			Для Каждого Строка Из тзНайденныеВКомпании Цикл
				
				МенеджерЗаписи.VIN            = Строка.VIN;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ДатаВыполнения = Строка.ДатаВыполнения;
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ИмяСобытия = НСтр(
			"ru = 'Добавление сервисной компании.Ошибка записи'",
			ОбщегоНазначения.КодОсновногоЯзыка()
		);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки
		);
		ВызватьИсключение НСтр("ru = 'При выполнении операции произошла ошибка. Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСправочник(Команда)
	
	Отбор = Новый Структура("Пометка", Истина);
	
	Если ЗагруженныйСписокVIN.НайтиСтроки(Отбор).Количество() > 0 Тогда
		ДобавитьВСправочникНаСервере();
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("СервиснаяКампания", СсылкаСервиснаяКампания);
		ПараметрыФормы.Вставить("Отбор", Отбор);	
		ПараметрыФормы.Вставить("ТекущаяСтрока");	
		ОткрытьФорму("РегистрСведений.ВыполнениеСервисныхКампаний.ФормаСписка", ПараметрыФормы);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	РезультатЗагрузки = Ложь;
	
	ЗагруженныйСписокVIN.Очистить();
	
	Если ПустаяСтрока(Объект.СтрокаПодключения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана строка подключения.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ФайлИсточникДанных Тогда
			ОбработчикОповещенияОВыбореФайла =
			Новый ОписаниеОповещения(
				"ЗаполнитьПомещениеФайлаЗавершение",
				ЭтотОбъект
			);
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.СтрокаПодключения));
		НачатьПомещениеФайлов(ОбработчикОповещенияОВыбореФайла, ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	Иначе
		Отказ = Ложь;
		СформироватьПараметрыЗагрузкиФайла(Отказ, Новый Структура());
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьДанныеИзФайлаЗагрузки", 0.5, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторДлительнойОперации);
		Иначе
			ЗаполнитьСтруктуруДанныхИзФайлаВыполнено();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Загрузить()

&НаКлиенте
Процедура НастройкаСоответствияПолейОбновить(Команда)
	
	ЗаполнитьСтруктуруДанных(Объект.СтрокаПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейОчистить(Команда)
	
	ОчиститьСтруктуруДанных();
	ЗаполнитьТабличноеПолеОбразецДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуЗаголовков(Команда)
	
	СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
	Если СтрокиЛиста.Количество() > 0 Тогда
		Лист = СтрокиЛиста[0];
	Иначе
		
		ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(
			Элементы.НастройкаСоответствияПолей,
			,
			НСтр("ru = 'Данные устарели. Обновите образец.'"),
			БиблиотекаКартинок.Нет
		);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "Заголовок");
	ДополнительныеПараметры.Вставить("Лист"    , Лист);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСоСтрокойОбразцаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(ОписаниеОповещения, Лист.СтрокаЗаголовковКолонок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = "ЗаполнитьИменаТаблицы" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ЗаполнитьПоляЗагрузки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещения()

// Процедура управляет видимостью и доступностью элементов формы
&НаСервере
Процедура УправлениеДиалогом(ЕстьПрава = Ложь)
	
	// В случае если у пользователя отсутствуют права, мы не дадим ему возможность загружать данные.
	ЭтаФорма.КоманднаяПанель.Доступность = ЕстьПрава;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляЗагрузки()
	Объект.СтруктураФайлИсточникVIN.Очистить();
	
	// заполним табличку с полями
	ВсеСсылки = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки,Документы.ТипВсеСсылки().Типы());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки,ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки,Перечисления.ТипВсеСсылки().Типы());
	
	// Загрузим измерения регистра
	РеквизитыПрайсЛиста = Метаданные.РегистрыСведений.ВыполнениеСервисныхКампаний.Измерения;
	Для Каждого Рек Из РеквизитыПрайсЛиста Цикл
		ЭтоСсылка = Ложь;
		Для Каждого ТипРеквизита Из Рек.Тип.Типы() Цикл
			Если ВсеСсылки.СодержитТип(ТипРеквизита) Тогда
				ЭтоСсылка = Истина; Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если НЕ ЭтоСсылка Тогда
			НовоеПоле = Объект.СтруктураФайлИсточникVIN.Добавить();
			НовоеПоле.ИмяРеквизитаСправочникаПредставление = Рек.Синоним;
			НовоеПоле.ИмяРеквизитаФайлИсточникVIN = Рек.Имя;
			НовоеПоле.Ключевое = Истина;
		КонецЕсли; 
	КонецЦикла;
	// Загрузим ресурсы регистра
	РесурсыПрайсЛиста = Метаданные.РегистрыСведений.ВыполнениеСервисныхКампаний.Ресурсы;
	Для Каждого Рек Из РесурсыПрайсЛиста Цикл
		ЭтоСсылка = Ложь;
		Для Каждого ТипРеквизита Из Рек.Тип.Типы() Цикл
			Если ВсеСсылки.СодержитТип(ТипРеквизита) Тогда
				ЭтоСсылка = Истина; Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если НЕ ЭтоСсылка Тогда
			НовоеПоле = Объект.СтруктураФайлИсточникVIN.Добавить();
			НовоеПоле.ИмяРеквизитаФайлИсточникVIN = Рек.Имя;
			НовоеПоле.ИмяРеквизитаСправочникаПредставление = Рек.Синоним;
		КонецЕсли; 
	КонецЦикла;
	
	ЗаполнитьСпискиВыбораКолонок();
КонецПроцедуры // ЗаполнитьПоляЗагрузки()

// Процедура формирует список выбора колонок таблицы источника данных
&НаСервере
Процедура ЗаполнитьСпискиВыбораКолонок()
	
	// Загрузим поля внешнего источника
	Если Объект.ФайлИсточникДанных Тогда 
		// Ну а тут пока непонятно как получить колонки
		Если Не ПревФайлИсточникДанных = Объект.ФайлИсточникДанных Тогда
			Счетчик = 0;
			Для Каждого ТекСтрока Из Объект.СтруктураФайлИсточникVIN Цикл
				ТекСтрока.ИмяПоляФайла = Строка(Счетчик);
				Счетчик = Счетчик + 1;
			КонецЦикла;
			Объект.СтруктураФайлИсточникVIN[0].Ключевое = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСпискиВыбораКолонок()

// Процедура управляет видимостью и доступностью элементов формы
&НаКлиенте
Процедура УправлениеДиалогомВосстановлениеЗначений()
	
	Если Объект.ФайлИсточникДанных Тогда
		
		ЭтоTXT = СтрЗаканчиваетсяНа(НРег(Объект.СтрокаПодключения), ".txt");
		
		Элементы.Разделитель.Доступность     = ЭтоTXT;
		Элементы.СтрокаНачало.ТолькоПросмотр = Ложь;
		Элементы.СтрокаКонец.ТолькоПросмотр  = Ложь;
	Иначе
		Элементы.Разделитель.ТолькоПросмотр  = Истина;
		Элементы.СтрокаНачало.ТолькоПросмотр = Истина;
		Элементы.СтрокаКонец.ТолькоПросмотр  = Истина;
	КонецЕсли;
	ЗаполнитьСпискиВыбораКолонок();
	
КонецПроцедуры

// Устанавливает/снимает флажки в ТЧ
&НаКлиенте
Процедура УстановитьСнятьФлажки(Пометка)
	
	Для Каждого СтрокаТЧ Из ЗагруженныйСписокVIN Цикл
		СтрокаТЧ.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры // УстановитьСнятьФлажки()

&НаКлиенте
Функция ПодготовитьДиалогВыбораФайла()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      = "MS Excel (*.xls;*.xlsx)|*.xls;*.xlsx|OpenOffice.org.Calc (*.ods)|*.ods|Текстовый файл (*.txt)|*.txt";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Объект.СтрокаПодключения;
	ДиалогВыбораФайла.Заголовок                   = НСтр("ru = 'Выберите файл'");
	
	Возврат ДиалогВыбораФайла;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораФайла(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатОповещения = Неопределено Тогда
		Объект.СтрокаПодключения = РезультатОповещения.ПолноеИмя;
		СтрокаПодключенияПриИзменении(Элементы.СтрокаПодключения);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаВыбораФайла()

&НаКлиенте
Процедура ВыборФайлаЗавершениеКонтроляРасширенияРаботыСФайлами(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатОповещения Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение для работы с файлами не подключено.'"));
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = ПодготовитьДиалогВыбораФайла();
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораФайла", ЭтотОбъект);
	
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборФайла", ПрайсЛистыКонтрагентовКлиент, Новый Структура("Оповещение", Оповещение));
	
	НачатьПомещениеФайлов(ОбработчикОповещенияОЗакрытии,, ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры // ВыборФайлаЗавершениеКонтроляРасширенияРаботыСФайлами()

// Выбор файла внутреннего прайс-листа
&НаКлиенте
Процедура ВыборФайла(Элемент, ПроверятьСуществование = Ложь)
	
	ТекстСообщения = НСтр("ru = 'Для загрузки файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборФайлаЗавершениеКонтроляРасширенияРаботыСФайлами",
		ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);
	
КонецПроцедуры // ВыборФайла()

&НаСервере
Функция ОформлениеСтруктурыФайлИсточникVIN(ИмяРеквизитаФайла)
	
	Результат = Новый Структура("ОтображатьТекст, Текст", Ложь, "");
	
	Рек=Метаданные.РегистрыСведений.ВыполнениеСервисныхКампаний.Измерения.Найти(ИмяРеквизитаФайла);
	Если НЕ Рек=Неопределено Тогда
		Результат.ОтображатьТекст=Истина;
		Результат.Текст=Рек.Синоним;
	Иначе
		Рек=Метаданные.РегистрыСведений.ВыполнениеСервисныхКампаний.Ресурсы.Найти(ИмяРеквизитаФайла);
		Если НЕ Рек=Неопределено Тогда
			Результат.ОтображатьТекст=Истина;
			Результат.Текст=Рек.Синоним;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьЗначение(ТипПриемника, ЗначениеПоля)
	
	ТипИсточника = ТипЗнч(ЗначениеПоля);
		
	Если ТипИсточника = Тип("Строка") Тогда
		
		Если ТипПриемника = Тип("Дата") Тогда
			ИсходнаяСтрока = ЗначениеПоля;
			Результат = "";
			ЧастьДаты = "";
			Пока НЕ ИсходнаяСтрока = "" Цикл
				ТекСимвол = Лев(ИсходнаяСтрока, 1);
				КодТекСимвола    = КодСимвола(ТекСимвол);
				ИсходнаяСтрока   = Сред(ИсходнаяСтрока, 2);
				Если КодТекСимвола >= КодСимвола("0") И КодТекСимвола <= КодСимвола("9") Тогда
					ЧастьДаты = ЧастьДаты + ТекСимвол;
				Иначе
					Результат = ЧастьДаты + Результат;
					ЧастьДаты = "";
				КонецЕсли;
			КонецЦикла;
			Результат = ЧастьДаты + Результат;
			Попытка
				ЗначениеПоля = Дата(Результат);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения поля датой'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипИсточника = Тип("Число") И ТипПриемника = Тип("Дата") Тогда
		// Возникает при загрузке из табличного документа
		ЗначениеПоля = Дата("18991230") + ЗначениеПоля * 24 * 3600;
	ИначеЕсли ТипИсточника = Тип("Число") И ТипПриемника = Тип("Строка") Тогда
		ЗначениеПоля = Формат(ЗначениеПоля, "ЧГ=0");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзФайлаОтложено(СтруктураПараметровЗагрузкиФайла)
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка"          , Неопределено);
	ПараметрыПроцедуры.Вставить("СтруктураТаблицы", СтруктураПараметровЗагрузкиФайла.СтруктураТаблицы);
	ПараметрыПроцедуры.Вставить("ПутьКФайлу"      , СтруктураПараметровЗагрузкиФайла.СтрокаПодключения);
	ПараметрыПроцедуры.Вставить("Расширение"      , СтруктураПараметровЗагрузкиФайла.Расширение);
	ПараметрыПроцедуры.Вставить("Разделитель"     , Объект.Разделитель);
	ПараметрыПроцедуры.Вставить("КоличествоСтрок" , Объект.СтрокаКонец);
	ПараметрыПроцедуры.Вставить("ИмяЛиста"        , Объект.ИмяТаблицы);
	ПараметрыПроцедуры.Вставить("СтруктураПоиска" , СтруктураПараметровЗагрузкиФайла.СтруктураПоиска);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ЗагрузкаДанныхСервиснойКампании.ЗаполнитьСтруктуруДанныхИзФайла",
		ПараметрыПроцедуры,
		"Заполнение данных из файла");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьСтруктуруДанныхИзФайлаОтложеноНаСервере()

&НаСервере
Функция ЗагрузитьПрайсЛистИзADOОтложено(СтруктураПараметровЗагрузкиФайла)
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СтрокаПодключения" , Объект.СтрокаПодключения);
	ПараметрыПроцедуры.Вставить("КоличествоСтрок"   , Объект.СтрокаКонец);
	ПараметрыПроцедуры.Вставить("СтруктураТаблицы", СтруктураПараметровЗагрузкиФайла.СтруктураТаблицы);
	ПараметрыПроцедуры.Вставить("СтруктураПоиска" , СтруктураПараметровЗагрузкиФайла.СтруктураПоиска);
	ПараметрыПроцедуры.Вставить("ИмяТаблицы"      , Объект.ИмяТаблицы);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ЗагрузкаДанныхСервиснойКампании.ЗагрузитьПрайсЛистИзADO",
		ПараметрыПроцедуры,
		"Заполнение данных из источника данных");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьПрайсЛистИзADOОтложено()

&НаСервере
Функция ПолучитьТаблицуДанныхПоКомпаниям(СтруктураПоиска)
	
	ТаблицаДанныхПоКампаниям = Новый ТаблицаЗначений;
	// Получим набор записей регистра сведений
	Запрос=Новый Запрос;
	Если СтруктураПоиска.Количество()>0 Тогда
		Запрос.Текст="ВЫБРАТЬ
		|	ВыполнениеСервисныхКампаний.ДатаВыполнения КАК ДатаВыполнения,
		|	ВыполнениеСервисныхКампаний.ДокументВыполнения КАК ДокументВыполнения,
		|	ВыполнениеСервисныхКампаний.VIN КАК VIN,
		|	ЛОЖЬ КАК НоваяЗапись
		|ИЗ
		|	РегистрСведений.ВыполнениеСервисныхКампаний КАК ВыполнениеСервисныхКампаний
		|ГДЕ
		|	ВыполнениеСервисныхКампаний.СервиснаяКампания = &СервиснаяКампания";
		Запрос.УстановитьПараметр("СервиснаяКампания", СсылкаСервиснаяКампания);
		РезультатЗапроса = Запрос.Выполнить();
		Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
			ТаблицаДанныхПоКампаниям.Колонки.Добавить(ТекКолонка.Имя, ТекКолонка.ТипЗначения);
		КонецЦикла;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаДанныхПоКампаниям.Добавить();
			Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
				ИмяКолонки = ТекКолонка.Имя;
				Если СтруктураПоиска.Свойство(ИмяКолонки) Тогда
					НоваяСтрока[ИмяКолонки] = ВРег(Выборка[ИмяКолонки]);
				Иначе
					НоваяСтрока[ИмяКолонки] = Выборка[ИмяКолонки];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Проиндексируем ТЗ
	СписокКолонок = "";
	Для Каждого ТекущаяСтрока Из СтруктураПоиска Цикл
		СписокКолонок = ?(ПустаяСтрока(СписокКолонок), "", ", ") + ТекущаяСтрока.Ключ;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СписокКолонок) Тогда
		ТаблицаДанныхПоКампаниям.Индексы.Добавить(СписокКолонок);
	КонецЕсли;
	
	Возврат ТаблицаДанныхПоКампаниям;
	
КонецФункции // ПолучитьТаблицуДанныхПоКомпаниям()

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзФайлаВыполнено()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") ИЛИ Результат.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(Результат.СоответствиеДанных) = Тип("Структура") Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При загрузке данных на [" + ИмяКомпьютера() +"] произошла ошибка: '")
			+ Результат.СоответствиеДанных.Сообщение);
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДанныхПоКампаниям = ПолучитьТаблицуДанныхПоКомпаниям(Результат.СтруктураПоиска);
	
	ПроизводитьПоиск        = Результат.СтруктураПоиска.Количество()>0;
	
	Если Объект.ФайлИсточникДанных Тогда
		
		СтрокаНачалоЗначение    = ?(НЕ ЗначениеЗаполнено(Объект.СтрокаНачало), 1 ,Объект.СтрокаНачало);
		ТипФайла = ВРег(Результат.Расширение);
		Если ТипФайла = ".XLS" ИЛИ ТипФайла = ".XLSX" ИЛИ ТипФайла = ".ODS" Тогда
			ДанныеФайла = Результат.СоответствиеДанных.Получить(Результат.ИмяЛиста);
		ИначеЕсли ТипФайла = ".TXT" Тогда
			ДанныеФайла = Результат.СоответствиеДанных.Получить("Текст");
		КонецЕсли;
		
		КоличествоКолонок = 0;
		Для Каждого ТекущаяСтрока Из Результат.СтруктураТаблицы Цикл
			Если КоличествоКолонок < ТекущаяСтрока.Значение Тогда
				КоличествоКолонок = ТекущаяСтрока.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеФайла.Количество() < КоличествоКолонок Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В поле таблицы ""Структура файла"" заданы неверные данные'"));
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ДанныеФайла = Результат.СоответствиеДанных.Получить(Результат.ИмяТаблицы);
		СтрокаНачалоЗначение = 2;
	КонецЕсли;
	
	ОграничениеНаСтроки = ?(ЗначениеЗаполнено(Объект.СтрокаКонец), Объект.СтрокаКонец, ДанныеФайла[0].Количество());
	
	СтруктураДанных = ОбщегоНазначения.СкопироватьРекурсивно(Результат.СтруктураТаблицы);
	НовыйЗагруженныйСписокVIN = ЗагруженныйСписокVIN.Выгрузить().СкопироватьКолонки();
	
	СтруктураПоиска = Результат.СтруктураПоиска;
	
	// Считается, что все данные на одном листе
	Для НомерСтроки = СтрокаНачалоЗначение - 1 По ОграничениеНаСтроки - 1 Цикл
		
		Для Каждого ТекущаяСтрока Из Результат.СтруктураТаблицы Цикл
			ЗначениеПоля =  ДанныеФайла[ТекущаяСтрока.Значение - 1][НомерСтроки];
			ПреобразоватьЗначение(Тип(НовыйЗагруженныйСписокVIN.Колонки.Найти(ТекущаяСтрока.Ключ).ТипЗначения), ЗначениеПоля);
			СтруктураДанных[ТекущаяСтрока.Ключ] = ЗначениеПоля;
		КонецЦикла;
		
		СтрокаПоиска = Неопределено;
		
		Если ПроизводитьПоиск Тогда
			
			Для Каждого ПолеПоиска Из СтруктураПоиска Цикл
				СтруктураПоиска.Вставить(ПолеПоиска.Ключ, СтруктураДанных[ПолеПоиска.Ключ]);
			КонецЦикла;
			
			МассивПозицийНайденныхСтрок = ТаблицаДанныхПоКампаниям.НайтиСтроки(СтруктураПоиска);
			Если МассивПозицийНайденныхСтрок.Количество()>0 Тогда
				СтрокаПоиска = МассивПозицийНайденныхСтрок[0];
				// Если уже есть новая (загруженная из файла) строка с такими же полями поиска как и у исходной строки.
				Если СтрокаПоиска.НоваяЗапись Тогда
					Продолжить;
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Данный VIN числится в сервисной кампании. Кампания: %1, VIN: %2'"),
						СокрЛП(СсылкаСервиснаяКампания),
						СтрокаПоиска.VIN
					)
				);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПоиска = Неопределено Тогда
			НоваяПозицияVIN = НовыйЗагруженныйСписокVIN.Добавить();
			НоваяПозицияVIN.Пометка           = Истина;
			НоваяПозицияVIN.НайденаВКампании  = Ложь;
			НоваяПозицияVIN.СервиснаяКампания = СсылкаСервиснаяКампания;
			Если ПроизводитьПоиск Тогда
				СтрокаПоиска = ТаблицаДанныхПоКампаниям.Добавить();
				Для Каждого ПолеПоиска Из СтруктураПоиска Цикл
					СтрокаПоиска[ПолеПоиска.Ключ] = СтруктураПоиска[ПолеПоиска.Ключ];
				КонецЦикла;
				СтрокаПоиска.НоваяЗапись = Истина;
			КонецЕсли;
		Иначе
			НоваяПозицияVIN = НовыйЗагруженныйСписокVIN.Добавить();
			НоваяПозицияVIN.Пометка             = Ложь;
			НоваяПозицияVIN.НайденаВКампании    = Истина;
			НоваяПозицияVIN.СервиснаяКампания   = СсылкаСервиснаяКампания;
			НоваяПозицияVIN.ДатаВыполненияВБазе = СтрокаПоиска.ДатаВыполнения;
			НоваяПозицияVIN.ДокументВыполнения  = СтрокаПоиска.ДокументВыполнения;
			СтрокаПоиска.НоваяЗапись            = Истина;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из СтруктураДанных Цикл
			НоваяПозицияVIN[ТекущаяСтрока.Ключ] = ТекущаяСтрока.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗагруженныйСписокVIN.Загрузить(НовыйЗагруженныйСписокVIN);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженныеДанные;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьСтруктуруДанныхИзФайлаВыполнено()

&НаКлиенте
Процедура Подключаемый_ЗагрузитьДанныеИзФайлаЗагрузки() 
	
	Если ФормаДлительнойОперации.Открыта() Тогда
		
		Если ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
			
			Если ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторДлительнойОперации Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			
			ЗаполнитьСтруктуруДанныхИзФайлаВыполнено();
			
		Иначе
			
			ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьДанныеИзФайлаЗагрузки", 0.5, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ЗагрузитьДанныеИзФайлаЗагрузки()

&НаСервере
Функция РаспаковатьФайлЗагрузкиСписковVIN(Знач ПутьКФайлу, Расширение)
	
	Возврат ПрайсЛистыКонтрагентов.РаспаковатьФайл(ПутьКФайлу, Расширение);
	
КонецФункции

&НаСервере
Процедура СформироватьПараметрыЗагрузкиФайла(Отказ, СтруктураПараметровЗагрузки)
	
	Если СтруктураПараметровЗагрузки = Неопределено ИЛИ НЕ ТипЗнч(СтруктураПараметровЗагрузки) = Тип("Структура") Тогда
		СтруктураПараметровЗагрузки = Новый Структура;
	КонецЕсли;
	
	Если Объект.ФайлИсточникДанных Тогда
		
		Если НЕ СтруктураПараметровЗагрузки.Свойство("ПутьКФайлу") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось получить файл по указанной строке подключения.'"),
				,,,
				Отказ
			);
			Возврат;
		КонецЕсли;
		
		СтрокаПодключения = РаспаковатьФайлЗагрузкиСписковVIN(
			СтруктураПараметровЗагрузки.ПутьКФайлу, 
			СтруктураПараметровЗагрузки.Расширение
		);
		
	Иначе
		
		Если ПустаяСтрока(Объект.ИмяТаблицы) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбрана таблица.'"), ,,, Отказ);
			Возврат;
		КонецЕсли;
		
		СтрокаПодключения = Объект.СтрокаПодключения;
		
	КонецЕсли;
	
	СтруктураПараметровЗагрузки.Вставить("СтрокаПодключения", СтрокаПодключения);
	
	МассивНайденныхСтрок = Объект.СтруктураФайлИсточникVIN.НайтиСтроки(Новый Структура("ИмяПоляФайла", "0"));
	Если МассивНайденныхСтрок.Количество()>0 Тогда
		Для Каждого строкаМассива Из МассивНайденныхСтрок Цикл
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Ошибка в параметрах реквизита %1 номер колонки не может быть равен 0'"),
					СтрокаМассива.ИмяРеквизитаФайлИсточникVIN
				),
				,,,
				Отказ
			);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МассивНайденныхСтрок = Объект.СтруктураФайлИсточникVIN.НайтиСтроки(Новый Структура("Ключевое", Истина));
	Если МассивНайденныхСтрок.Количество()=0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны ключевое поле(я)'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ТипФайла = "";
	Если СтруктураПараметровЗагрузки.Свойство("Расширение") Тогда
		ТипФайла = ВРег(СтруктураПараметровЗагрузки.Расширение);
	Иначе
		ТипФайла = СтрокаПодключения;
		ПозицияТочки = Найти(ТипФайла, ".");
		Пока ПозицияТочки>0 Цикл
			ТипФайла = Сред(ТипФайла, ПозицияТочки+1);
			ПозицияТочки = Найти(ТипФайла, ".");
		КонецЦикла;
		ТипФайла = "."+ВРег(ТипФайла);
	КонецЕсли;
	
	СтруктураТаблицы = Новый Структура; // Имя поля регистра, номер ячейки
	СтруктураПоиска  = Новый Структура();
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяТаблицы) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан лист загрузки данных.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ФайлИсточникДанных Тогда
		
		Попытка
			Приложение = Новый COMОбъект("ADODB.Connection");
			Коннект = Приложение.Open(Объект.СтрокаПодключения);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Команда = Новый  COMОбъект("ADODB.Command");
		РезультатЗапроса = Новый  COMОбъект("ADODB.Recordset");
		РезультатЗапроса.ActiveConnection = Приложение;
		ТекстЗап="
		|SELECT TOP 1 "+СокрЛП(Объект.ИмяТаблицы)+".*
		|FROM "+СокрЛП(Объект.ИмяТаблицы);
		Команда.CommandText = ТекстЗап;
		Команда.ActiveConnection = Приложение;
		Попытка
			РезультатЗапроса=Команда.Execute();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Ошибка чтения колонок таблицы: %1'"),ОписаниеОшибки())
			);
			Возврат;
		КонецПопытки; 
		// а эти данные - будем выбирать из списка
		КолПолей=РезультатЗапроса.Fields.Count;
		НомерКолонки = 1;
		Для К=0 По КолПолей-1 Цикл
			ИмяКолонки = РезультатЗапроса.Fields(К).Name;
			СписокПолейТаблицы.Добавить(ИмяКолонки, НомерКолонки);
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
	КонецЕсли; 
	
	Для Каждого ПолеЗагрузки Из Объект.СтруктураФайлИсточникVIN Цикл
		
		Если НЕ ЗначениеЗаполнено(ПолеЗагрузки.ИмяПоляФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ПолеЗагрузки.ИмяРеквизитаФайлИсточникVIN;
		Если Объект.ФайлИсточникДанных Тогда
			
			Попытка
				Колонка_Источник = Число(ПолеЗагрузки.ИмяПоляФайла);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Ошибка: Для реквизита <%1> заданы неверные данные'"),
						ПолеЗагрузки.ИмяРеквизитаФайлИсточникVIN
					), 					
					,,, Отказ
				);
				Продолжить;
			КонецПопытки;
			
			Если ПолеЗагрузки.Ключевое Тогда
				СтруктураПоиска.Вставить(ИмяКолонки);
			КонецЕсли;
			
		Иначе
			
			Колонка_Источник = Число(СписокПолейТаблицы.НайтиПоЗначению(ПолеЗагрузки.ИмяПоляФайла).Представление);
			
		КонецЕсли;
		
		СтруктураТаблицы.Вставить(ИмяКолонки, Колонка_Источник);
		
	КонецЦикла;
	
	Если СтруктураТаблицы.Количество()=0 Тогда
		// если поля не заполнены продолжать не имеет смысла
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ни одно поле таблицы не заполнено.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если СтруктураПоиска.Количество()=0 И Объект.ФайлИсточникДанных Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны ключевое поле(я)'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЗагрузки.Вставить("СтруктураТаблицы", СтруктураТаблицы);
	СтруктураПараметровЗагрузки.Вставить("СтруктураПоиска",  СтруктураПоиска);
	
	Если Объект.ФайлИсточникДанных Тогда
		//Грузим Exсel
		Если ТипФайла = ".XLS" ИЛИ ТипФайла = ".XLSX" ИЛИ ТипФайла = ".TXT" ИЛИ ТипФайла=".ODS" Тогда
			ЗаполнитьСтруктуруДанныхИзФайлаОтложено(СтруктураПараметровЗагрузки);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недопустимый тип файла.'"));
			Возврат;
		КонецЕсли; 
	Иначе //Грузим из ADO
		ЗагрузитьПрайсЛистИзADOОтложено(СтруктураПараметровЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПомещениеФайлаЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		
		Расширение = ПрайсЛистыКонтрагентовКлиентСервер.ПолучитьРасширение(ПомещенныеФайлы[0].Имя);
		ПутьКФайлу = ПомещенныеФайлы[0].Хранение;
		
		СтруктураПараметровЗагрузки = Новый Структура;
		СтруктураПараметровЗагрузки.Вставить("Расширение", Расширение);
		СтруктураПараметровЗагрузки.Вставить("ПутьКФайлу", ПутьКФайлу);
		
		Отказ = Ложь;
		СформироватьПараметрыЗагрузкиФайла(Отказ, СтруктураПараметровЗагрузки);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Фоновое задание могло не стартовать
		Если НЕ ЗначениеЗаполнено(ИдентификаторДлительнойОперации) И ЗаполнитьСтруктуруДанныхИзФайлаВыполнено() Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьДанныеИзФайлаЗагрузки", 0.5, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторДлительнойОперации);
		Иначе
			ЗаполнитьСтруктуруДанныхИзФайлаВыполнено();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПомещениеФайлаЗавершение()

&НаСервере
Процедура ЗаполнитьЗаголовкиКолонок()
	
	Объект.ЗаголовкиКолонок.Очистить();
	
	Если ПустаяСтрока(Объект.ИмяТаблицы) Тогда
		// Не указана страница с заголовками!
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Объект.ИмяТаблицы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВыбраннаяСтраница = НайденныеСтроки[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбразецДанных    = ВыбраннаяСтраница.ДанныеОбразцаСтраницы;
	СтрокаЗаголовков = ?(Объект.ФайлИсточникДанных, ВыбраннаяСтраница.СтрокаЗаголовковКолонок, 1);
	
	Если СтрокаЗаголовков > 0 Тогда
		Если ЗначениеЗаполнено(ОбразецДанных) Тогда
			Для СчКолонок = 0 По ОбразецДанных.ВГраница() Цикл
				НоваяСтрока = Объект.ЗаголовкиКолонок.Добавить();
				НоваяСтрока.ИмяКолонки = Формат(СчКолонок + 1, "ЧГ=0");
				Если ОбразецДанных[СчКолонок].ВГраница() >= СтрокаЗаголовков-1 И ЗначениеЗаполнено(ОбразецДанных[СчКолонок][СтрокаЗаголовков-1]) Тогда
					НоваяСтрока.ПредставлениеКолонки = ОбразецДанных[СчКолонок][СтрокаЗаголовков-1];
				Иначе
					НоваяСтрока.ПредставлениеКолонки = НоваяСтрока.ИмяКолонки;
				КонецЕсли;
				Если Не Объект.ФайлИсточникДанных Тогда
					НоваяСтрока.ИмяКолонки = НоваяСтрока.ПредставлениеКолонки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОбразецДанных) Тогда
			Для СчКолонок = 0 По ОбразецДанных.ВГраница() Цикл
				НоваяСтрока = Объект.ЗаголовкиКолонок.Добавить();
				НоваяСтрока.ИмяКолонки = Формат(СчКолонок + 1, "ЧГ=0");
				НоваяСтрока.ПредставлениеКолонки = НоваяСтрока.ИмяКолонки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	// Сначала все очистим
	ИменаКолонок.Очистить();
	СписокВыбора = Элементы.СтруктураФайлИсточникVINИмяПоляФайла.СписокВыбора;
	СписокВыбора.Очистить();
	
	// Заполним списки выбора колонок
	Для Каждого СтрокаКолонка Из Объект.ЗаголовкиКолонок Цикл
		ИменаКолонок.Добавить(СтрокаКолонка.ИмяКолонки, СтрокаКолонка.ПредставлениеКолонки);
		СписокВыбора.Добавить(СтрокаКолонка.ИмяКолонки, СтрокаКолонка.ПредставлениеКолонки);
	КонецЦикла;
	
	ОбновитьУсловноеОформлениеДляЗаголовков();
	
КонецПроцедуры // ЗаполнитьСпискиВыбора()

&НаСервере
Процедура ОбновитьУсловноеОформлениеДляЗаголовков()
	
	// почистим старые элементы
	Удаляемые = Новый Массив;
	Для Каждого Элемент Из УсловноеОформление.Элементы Цикл
		Если СтрНайти(Элемент.Представление, УникальныйИдентификатор) > 0 Тогда
			Удаляемые.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Удаляемый Из Удаляемые Цикл
		УсловноеОформление.Элементы.Удалить(Удаляемый);
	КонецЦикла;
	
	// заполним новые значения
	Для Каждого ПолеПрайсЛиста Из Объект.ЗаголовкиКолонок Цикл
		// добавление элемента
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		НовыйЭлемент.Представление = СтрШаблон("Представление колонки <ИмяПоляФайла>(%1)", УникальныйИдентификатор);
		НовыйЭлемент.Использование = Истина;
		
		// добавление отбора
		ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлИсточникVIN.ИмяПоляФайла");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПолеПрайсЛиста.ИмяКолонки;
		ЭлементОтбора.Использование  = Истина;
		
		// Оформляемые поля
		ПолеДляОформления = НовыйЭлемент.Поля.Элементы.Добавить();
		ПолеДляОформления.Поле          = Новый ПолеКомпоновкиДанных("СтруктураФайлИсточникVINИмяПоляФайла");
		ПолеДляОформления.Использование = Истина;
		
		// Оформление
		НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеПрайсЛиста.ПредставлениеКолонки);
		НовыйЭлемент.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбразецДанныхВыделитьКолонку()
	
	Если ВыделеннаяКолонка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	ОбластьКолонки = НастройкаСоответствияПолей.Область(3, ВыделеннаяКолонка+1, НастройкаСоответствияПолей.ВысотаТаблицы, ВыделеннаяКолонка+1);
	ОбластьКолонки.Обвести(Рамка, Рамка, Рамка, Рамка);
	ОбластьКолонки.ЦветРамки = ЦветаСтиля.ЦветФонаВыделенияПоля;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличноеПолеОбразецДанных(Знач ИмяЛиста = Неопределено, ОбновитьЗаголовкиЛиста = Ложь)
	Перем ВыбраннаяСтраница;
	
	Если ОбновитьЗаголовкиЛиста Тогда
		ЗаполнитьЗаголовкиКолонок();
		ЗаполнитьСпискиВыбора();
	КонецЕсли;

	НастройкаСоответствияПолей.Очистить();	
	ПрайсЛистыКонтрагентовКлиентСервер.
		УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей, Истина);
	
	МакетОформления = Справочники.ПрайсЛистыКонтрагентов.ПолучитьМакет("ОбразецДанных");
	
	Если Объект.СтруктураСтраницПрайсЛиста.Количество() = 0 Тогда
		ПрайсЛистыКонтрагентовКлиентСервер.
			УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей,,  НСтр("ru = 'Нет данных для отображения...'"), БиблиотекаКартинок.Нет);
		
		Возврат;
	КонецЕсли;
	
	НомерСтрокиСЗаголовками = 1;
	НайденныеСтроки         = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Объект.ИмяТаблицы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НомерСтрокиСЗаголовками = НайденныеСтроки[0].СтрокаЗаголовковКолонок;
	КонецЕсли;
	
	// Теперь определимся с тем, что выводим в табличное поле
	Если ИмяЛиста = Неопределено Тогда
		ИмяЛиста = Объект.ИмяТаблицы;
	КонецЕсли;
	ИмяТекущейСтраницы = ИмяЛиста;
	
	// Выведем указанный лист!
	НайденныеСтроки = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВыбраннаяСтраница = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаНачало = 1; СтрокаКонец = 0; Использовать = Ложь;
	Если ВыбраннаяСтраница <> Неопределено Тогда
		Использовать  = ВыбраннаяСтраница.Использовать;
		ОбразецДанных = ВыбраннаяСтраница.ДанныеОбразцаСтраницы;
		СтрокаНачало  = ВыбраннаяСтраница.СтрокаНачало;
		СтрокаКонец   = ВыбраннаяСтраница.СтрокаКонец;
	КонецЕсли;
	
	Если ОбразецДанных = Неопределено ИЛИ ОбразецДанных.Количество() = 0 Тогда
		ЕстьДанные = Ложь;
		КоличествоКолонок = 0;
		КоличествоСтрок = 0;
		Если Объект.ФайлИсточникДанных Тогда
			КоличествоКолонок = ИменаКолонок.Количество();
		КонецЕсли;
	Иначе
		ЕстьДанные = Истина;
		Если Объект.ФайлИсточникДанных Тогда
			КоличествоКолонок = МАКС(ОбразецДанных.Количество(), ИменаКолонок.Количество());
		Иначе
			КоличествоКолонок = ОбразецДанных.Количество();
		КонецЕсли;
		КоличествоСтрок = ОбразецДанных[0].Количество();
	КонецЕсли;
	
	ЦветТекста = ?(Использовать, ЦветаСтиля.ЦветТекстаПоля, WebЦвета.ТемноСерый);
	
	ОбластьСтраницы                = МакетОформления.ПолучитьОбласть("Страницы");
	ОбластьИмяСтраницы             = МакетОформления.ПолучитьОбласть("ИмяСтраницы");
	ОбластьРеквизиты               = МакетОформления.ПолучитьОбласть("Реквизиты");
	ОбластьИмяРеквизитаКлючевое    = МакетОформления.ПолучитьОбласть("ИмяРеквизитаКлючевое");
	ОбластьИмяРеквизитаЗаполнено   = МакетОформления.ПолучитьОбласть("ИмяРеквизитаЗаполнено");
	ОбластьИмяРеквизитаНеЗаполнено = МакетОформления.ПолучитьОбласть("ИмяРеквизитаНеЗаполнено");
	ОбластьНомерКолонки            = МакетОформления.ПолучитьОбласть("НомерКолонки");
	ОбластьЗаголовки               = МакетОформления.ПолучитьОбласть("Заголовки");
	ОбластьЗаголовокКолонки        = МакетОформления.ПолучитьОбласть("ЗаголовокКолонки");
	ОбластьНачалоДанных            = МакетОформления.ПолучитьОбласть("НачалоДанных");
	ОбластьЗначениеПоляСтрока      = МакетОформления.ПолучитьОбласть("ЗначениеПоляСтрока");
	ОбластьЗначениеПоляЧисло       = МакетОформления.ПолучитьОбласть("ЗначениеПоляЧисло");
	ОбластьНомерСтроки             = МакетОформления.ПолучитьОбласть("НомерСтроки");
	ОбластьКонецДанных             = МакетОформления.ПолучитьОбласть("КонецДанных");
	ОбластьНомерСтрокиПустой       = МакетОформления.ПолучитьОбласть("НомерСтрокиПустой");
	
	ОбластьРеквизиты.Область("R1C1").ЦветТекста               = ЦветТекста;
	ОбластьИмяРеквизитаКлючевое.Область("R1C1").ЦветТекста    = ЦветТекста;
	ОбластьИмяРеквизитаЗаполнено.Область("R1C1").ЦветТекста   = ЦветТекста;
	ОбластьИмяРеквизитаНеЗаполнено.Область("R1C1").ЦветТекста = ЦветТекста;
	ОбластьНомерКолонки.Область("R1C1").ЦветТекста            = ЦветТекста;
	ОбластьЗаголовки.Область("R1C1").ЦветТекста               = ЦветТекста;
	ОбластьЗаголовокКолонки.Область("R1C1").ЦветТекста        = ЦветТекста;
	ОбластьНачалоДанных.Область("R1C1").ЦветТекста            = ЦветТекста;
	ОбластьЗначениеПоляСтрока.Область("R1C1").ЦветТекста      = ЦветТекста;
	ОбластьЗначениеПоляЧисло.Область("R1C1").ЦветТекста       = ЦветТекста;
	ОбластьНомерСтроки.Область("R1C1").ЦветТекста             = ЦветТекста;
	ОбластьКонецДанных.Область("R1C1").ЦветТекста             = ЦветТекста;
	
	// Строка листов\таблиц
	ОбластьСтраницы.Область("R1C1").Текст = ?(Объект.ФайлИсточникДанных, "Страницы", "Таблицы");
	
	НастройкаСоответствияПолей.Вывести(ОбластьСтраницы);
	Для Каждого СтрокаСтруктуры Из Объект.СтруктураСтраницПрайсЛиста Цикл
		Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, ?(ИмяТекущейСтраницы = СтрокаСтруктуры.ИмяЛиста, 2, 1));
		ОбластьИмяСтраницы.Область("R1C1").Обвести(Рамка, Рамка, Рамка, Рамка);
		
		ОбластьИмяСтраницы.Область("R1C1").Текст       = СтрокаСтруктуры.ИмяЛиста;
		ОбластьИмяСтраницы.Область("R1C1").ЦветТекста  = ?(СтрокаСтруктуры.Использовать, ЦветаСтиля.ЦветТекстаПоля, WebЦвета.ТемноСерый);
		ОбластьИмяСтраницы.Область("R1C1").Шрифт       = Новый Шрифт(,, ИмяТекущейСтраницы = СтрокаСтруктуры.ИмяЛиста,,, Не СтрокаСтруктуры.Использовать);
		ОбластьИмяСтраницы.Область("R1C1").Расшифровка = СтрокаСтруктуры.ИмяЛиста;
		
		НастройкаСоответствияПолей.Присоединить(ОбластьИмяСтраницы);
	КонецЦикла;
	
	// Строка реквизитов
	НастройкаСоответствияПолей.Вывести(ОбластьРеквизиты);
	Для СчКолонок = 1 По КоличествоКолонок Цикл
		ИмяКолонки = Формат(СчКолонок, "ЧГ=0");
		Если Не Объект.ФайлИсточникДанных И ЕстьДанные Тогда
			ИмяКолонки = ОбразецДанных[СчКолонок - 1][0];
		КонецЕсли;
		
		СтрокиСтруктуры = Объект.СтруктураФайлИсточникVIN.НайтиСтроки(Новый Структура("ИмяПоляФайла", ИмяКолонки));
		КлючевоеПоле = Ложь; ТекстЗаголовкаРеквизита = "";
		Для Каждого СтрокаСтруктуры Из СтрокиСтруктуры Цикл
			Если СтрокаСтруктуры.Ключевое Тогда
				КлючевоеПоле = Истина;
			КонецЕсли;
			
			ТекстЗаголовкаРеквизита = ТекстЗаголовкаРеквизита +
				?(ПустаяСтрока(ТекстЗаголовкаРеквизита), "", Символы.ПС) +
				СтрокаСтруктуры.ИмяРеквизитаСправочникаПредставление;
		КонецЦикла;
		
		Если КлючевоеПоле Тогда
			СекцияИмяРеквизита = ОбластьИмяРеквизитаКлючевое;
		ИначеЕсли ЗначениеЗаполнено(ТекстЗаголовкаРеквизита) Тогда
			СекцияИмяРеквизита = ОбластьИмяРеквизитаЗаполнено;
		Иначе
			СекцияИмяРеквизита = ОбластьИмяРеквизитаНеЗаполнено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗаголовкаРеквизита) Тогда
			СекцияИмяРеквизита.Область("R1C1").Текст = ТекстЗаголовкаРеквизита;
		КонецЕсли;
		
		НастройкаСоответствияПолей.Присоединить(СекцияИмяРеквизита);
	КонецЦикла;
	
	// Третья строка
	ЗаголовкиВывели = Ложь; ВыводитьИзТаблицыЗаголовков = Ложь;
	Если Объект.ФайлИсточникДанных Тогда
		Если Объект.ИмяТаблицы = ИмяТекущейСтраницы ИЛИ Объект.ЗаголовкиКолонок.Количество() = 0 Тогда
			НастройкаСоответствияПолей.Вывести(ОбластьНомерСтрокиПустой);
		Иначе
			ЗаголовкиВывели = Истина;
			ВыводитьИзТаблицыЗаголовков = Истина;
			ОбластьЗаголовки.Область("R1C1").Текст = "Заголовки на странице ["+Объект.ИмяТаблицы+"] в " + Формат(НомерСтрокиСЗаголовками, "ЧГ=0") + " строке";
			НастройкаСоответствияПолей.Вывести(ОбластьЗаголовки);
		КонецЕсли;
	Иначе
		ЗаголовкиВывели = Истина;
		НастройкаСоответствияПолей.Вывести(ОбластьНомерСтрокиПустой);
	КонецЕсли;
	
	Для СчКолонок = 1 По КоличествоКолонок Цикл
		// Вместо номеров строк можем выводить Заголовки колонок
		ИмяКолонки = Формат(СчКолонок, "ЧГ=0");
		Если ВыводитьИзТаблицыЗаголовков Тогда
			
			СтрокиТаблицыЗаголовков = Объект.ЗаголовкиКолонок.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
			Если СтрокиТаблицыЗаголовков.Количество() > 0 Тогда
				ИмяКолонки = СтрокиТаблицыЗаголовков[0].ПредставлениеКолонки;
			КонецЕсли;
		Иначе
			Если Не Объект.ФайлИсточникДанных И ЕстьДанные Тогда
				// Имена колонок всегда в первой строке Образца данных
				ИмяКолонки = ОбразецДанных[СчКолонок - 1][0];
			КонецЕсли;
		КонецЕсли;
		ОбластьНомерКолонки.Область("R1C1").Текст = ИмяКолонки;
		НастройкаСоответствияПолей.Присоединить(ОбластьНомерКолонки);
	КонецЦикла;
	
	// Четвертая и далее - область образца данных
	Для СчСтрок = ?(Объект.ФайлИсточникДанных, 1, 2) По КоличествоСтрок Цикл
		ЭтоЗаголовки = Ложь;
		Если Объект.ФайлИсточникДанных И Объект.ИмяТаблицы = ИмяТекущейСтраницы И СчСтрок = НомерСтрокиСЗаголовками Тогда
			ЗаголовкиВывели = Истина;
			ЭтоЗаголовки = Истина;
			НастройкаСоответствияПолей.Вывести(ОбластьЗаголовки);
		Иначе
			// Просто выводим как номер строки
			ОбластьНомерСтроки.Область("R1C1").Текст = Формат(СчСтрок, "ЧГ=0");
			НастройкаСоответствияПолей.Вывести(ОбластьНомерСтроки);
		КонецЕсли;
		Для СчКолонок = 1 По КоличествоКолонок Цикл
			Если ОбразецДанных.ВГраница() >= (СчКолонок - 1) Тогда
				ЗначениеПоля = ОбразецДанных[СчКолонок - 1][СчСтрок - 1];
			Иначе
				ЗначениеПоля = "";
			КонецЕсли;
			Если ЭтоЗаголовки Тогда
				ОбластьЗаголовокКолонки.Область("R1C1").Текст = ЗначениеПоля;
				НастройкаСоответствияПолей.Присоединить(ОбластьЗаголовокКолонки);
			Иначе
				Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
					ОбластьЗначениеПоляЧисло.Область("R1C1").Текст = ЗначениеПоля;
					НастройкаСоответствияПолей.Присоединить(ОбластьЗначениеПоляЧисло);
				Иначе
					ОбластьЗначениеПоляСтрока.Область("R1C1").Текст = ЗначениеПоля;
					НастройкаСоответствияПолей.Присоединить(ОбластьЗначениеПоляСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Выведем строку про заголовки, начало и конец загружаемых данных, если они не попали в основную таблицу.
	Если Не ЗаголовкиВывели И НомерСтрокиСЗаголовками > 0 Тогда
		
		Если Объект.ИмяТаблицы = ИмяТекущейСтраницы Тогда
			ОбластьЗаголовки.Область("R1C1").Текст = "Заголовки в " + Формат(НомерСтрокиСЗаголовками, "ЧГ=0") + " строке";
		Иначе
			ОбластьЗаголовки.Область("R1C1").Текст = "Заголовки на странице ["+Объект.ИмяТаблицы+"] в " + Формат(НомерСтрокиСЗаголовками, "ЧГ=0") + " строке";
		КонецЕсли;
		НастройкаСоответствияПолей.Вывести(ОбластьЗаголовки);
		
		Для СчКолонок = 1 По КоличествоКолонок Цикл
			// Вместо номеров строк можем выводить Заголовки колонок
			ИмяКолонки = Формат(СчКолонок, "ЧГ=0");
			
			СтрокиТаблицыЗаголовков = Объект.ЗаголовкиКолонок.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
			Если СтрокиТаблицыЗаголовков.Количество() > 0 Тогда
				ИмяКолонки = СтрокиТаблицыЗаголовков[0].ПредставлениеКолонки;
			КонецЕсли;
			ОбластьЗаголовокКолонки.Область("R1C1").Текст = ИмяКолонки;
			НастройкаСоответствияПолей.Присоединить(ОбластьЗаголовокКолонки);
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкаСоответствияПолей.ФиксацияСверху = 3;
	НастройкаСоответствияПолей.ФиксацияСлева  = 1;
	
	ОбразецДанныхВыделитьКолонку();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзФайла()
	
	ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей, Истина);
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат Результат.Сообщение;
	ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") Тогда
		СтараяСтруктураСтраниц = Объект.СтруктураСтраницПрайсЛиста.Выгрузить();
		НоваяСтруктураСтраниц  = СтараяСтруктураСтраниц.СкопироватьКолонки();
		
		Если Результат <> Неопределено Тогда
			Для Каждого КлючЗначение Из Результат Цикл
				НоваяСтрока  = НоваяСтруктураСтраниц.Добавить();
				СтараяСтрока = СтараяСтруктураСтраниц.Найти(КлючЗначение.Ключ, "ИмяЛиста");
				Если СтараяСтрока = Неопределено Тогда
					НоваяСтрока.ИмяЛиста = КлючЗначение.Ключ;
					НоваяСтрока.СтрокаЗаголовковКолонок = 1;
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока,, "ДанныеОбразцаСтраницы");
				КонецЕсли;
				НоваяСтрока.ДанныеОбразцаСтраницы = КлючЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Объект.СтруктураСтраницПрайсЛиста.Загрузить(НоваяСтруктураСтраниц);
		
		Если Объект.СтруктураСтраницПрайсЛиста.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.ИмяТаблицы) Тогда
				ИспользуемыеСтроки = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("Использовать", Истина));
				Если ИспользуемыеСтроки.Количество() > 0 Тогда
					Объект.ИмяТаблицы = ИспользуемыеСтроки[0].ИмяЛиста;
				Иначе
					Объект.ИмяТаблицы = Объект.СтруктураСтраницПрайсЛиста[0].ИмяЛиста;
					Объект.СтруктураСтраницПрайсЛиста[0].Использовать = Истина;
				КонецЕсли;
			Иначе
				СовпадаетСИменемТаблицы = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Объект.ИмяТаблицы));
				Если СовпадаетСИменемТаблицы.Количество() > 0 Тогда
					СовпадаетСИменемТаблицы[0].Использовать = Истина;
				Иначе
					Объект.ИмяТаблицы = Объект.СтруктураСтраницПрайсЛиста[0].ИмяЛиста;
					Объект.СтруктураСтраницПрайсЛиста[0].Использовать = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьТабличноеПолеОбразецДанных(, Истина);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение()
	Перем Текст, Процент;
	
	Если ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
		Результат = ЗаполнитьСтруктуруДанныхИзФайла();
		Если ЗначениеЗаполнено(Результат) Тогда
			ПоказатьПредупреждение(, Результат,, "Ошибка чтения файла");
		Иначе
			ЗаполнитьЗаголовкиКолонок();
			ЗаполнитьСпискиВыбора();
		КонецЕсли;
	Иначе
		Сообщение = ПрайсЛистыКонтрагентовВызовСервера.ПроверитьСообщения(ИдентификаторДлительнойОперации);
		Если Сообщение <> Неопределено Тогда
			Сообщение.Свойство("Текст", Текст);
			Сообщение.Свойство("Процент", Процент);
			
			Состояние("Состояние загрузки", Процент, Текст);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение", 0.5, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзЗагрузкиФайлаОтложено(Знач ПутьКФайлу, Расширение)
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка"                     , Справочники.ПрайсЛистыКонтрагентов.ПустаяСсылка());
	ПараметрыПроцедуры.Вставить("СтруктураСтраницПрайсЛиста" , Объект.СтруктураСтраницПрайсЛиста.Выгрузить());
	ПараметрыПроцедуры.Вставить("ПутьКФайлу"                 , ПрайсЛистыКонтрагентов.РаспаковатьФайл(ПутьКФайлу, Расширение));
	ПараметрыПроцедуры.Вставить("Расширение"                 , Расширение);
	ПараметрыПроцедуры.Вставить("Разделитель"                , Объект.Разделитель);
	ПараметрыПроцедуры.Вставить("КоличествоСтрок"            , КоличествоСтрокВОбразце);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.ПрайсЛистыКонтрагентов.ЗаполнитьСтруктуруДанныхИзФайла",
		ПараметрыПроцедуры,
		"Заполнение образца из файла");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнитьСтруктуруДанныхИзФайлаВыполнено();
	КонецЕсли;
	
	Возврат Результат.ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруДанныхПомещениеФайловЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		Расширение = ПрайсЛистыКонтрагентовКлиентСервер.ПолучитьРасширение(ПомещенныеФайлы[0].Имя);
	
		Если НЕ ЗаполнитьСтруктуруДанныхИзЗагрузкиФайлаОтложено(ПомещенныеФайлы[0].Хранение, Расширение) Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение", 0.5, Истина);
		Иначе
			Результат = ЗаполнитьСтруктуруДанныхИзФайла();
			Если ЗначениеЗаполнено(Результат) Тогда
				ПоказатьПредупреждение(, Результат,, "Ошибка чтения файла");
			Иначе
				ЗаполнитьЗаголовкиКолонок();
				ЗаполнитьСпискиВыбора();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзADOОтложено()
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПрайсЛист"         , Справочники.ПрайсЛистыКонтрагентов.ПустаяСсылка());
	ПараметрыПроцедуры.Вставить("СтрокаПодключения" , Объект.СтрокаПодключения);
	ПараметрыПроцедуры.Вставить("КоличествоСтрок"   , КоличествоСтрокВОбразце);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.ПрайсЛистыКонтрагентов.ЗаполнитьСтруктуруДанныхИзADO",
		ПараметрыПроцедуры,
		"Заполнение образца из ADO");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.ЗаданиеВыполнено = НЕ ЗначениеЗаполнено(ЗаполнитьСтруктуруДанныхИзФайла());
	КонецЕсли;
	
	Возврат Результат.ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруДанных(СтрокаПодключения)
	
	Если ПустаяСтрока(Объект.СтрокаПодключения) Тогда
		Возврат;
	КонецЕсли;
	
	ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей);
	
	Если Объект.ФайлИсточникДанных Тогда
		ОбработчикОповещенияОВыбореФайла =
			Новый ОписаниеОповещения(
				"ЗаполнитьСтруктуруДанныхПомещениеФайловЗавершение",
				ЭтотОбъект
			);
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.СтрокаПодключения));
		НачатьПомещениеФайлов(ОбработчикОповещенияОВыбореФайла, ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	Иначе
		Если НЕ ЗаполнитьСтруктуруДанныхИзADOОтложено() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение", 0.5, Истина);
		Иначе
			Результат = ЗаполнитьСтруктуруДанныхИзФайла();
			Если ЗначениеЗаполнено(Результат) Тогда
				ПоказатьПредупреждение(, Результат,, "Ошибка чтения файла");
			Иначе
				ЗаполнитьЗаголовкиКолонок();
				ЗаполнитьСпискиВыбора();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделеннуюКолонку()
	Если Элементы.СтруктураФайлИсточникVIN.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляФайла = Элементы.СтруктураФайлИсточникVIN.ТекущиеДанные.ИмяПоляФайла;
	
	Если ТипЗнч(ИмяПоляФайла) = Тип("Число") Тогда
		ВыделеннаяКолонка = ИмяПоляФайла;
	Иначе
		ВыделеннаяКолонка = 0;
		Для СчКолонок = 1 По ИменаКолонок.Количество() Цикл
			Если ИменаКолонок[СчКолонок - 1].Значение = ИмяПоляФайла Тогда
				ВыделеннаяКолонка = СчКолонок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияСКолонкойОбразцаДанныхЗавершение(Результат, Значение) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Представление <> "Добавить новое поле наименование" Тогда
		Результат.Значение.ИмяПоляФайла = ?(НЕ Результат.Пометка, Значение, "");
	Иначе
		НоваяСтрока = Объект.СтруктураФайлИсточникVIN.
			Вставить(Объект.СтруктураФайлИсточникVIN.Индекс(Результат.Значение) + 1);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат.Значение,, "Действие,ИмяПоляФайла");
		НоваяСтрока.ИмяПоляФайла = Значение;
		НоваяСтрока.Действие     = "Удалить";
	КонецЕсли;
	
	УстановитьВыделеннуюКолонку();
	
	// обновим табличный документ
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтруктуруДанных()
	
	ИменаКолонок.Очистить();
	Объект.СтруктураСтраницПрайсЛиста.Очистить();
	Объект.ЗаголовкиКолонок.Очистить();
	Элементы.СтруктураФайлИсточникVINИмяПоляФайла.СписокВыбора.Очистить();
	Объект.ИмяТаблицы = "";
	
	Для Каждого ТекущаяСтрока Из Объект.СтруктураФайлИсточникVIN Цикл
		ТекущаяСтрока.ИмяПоляФайла = "";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбразецДанныхСнятьВыделениеКолонки()
	
	Если ВыделеннаяКолонка = 0 ИЛИ Объект.СтруктураСтраницПрайсЛиста.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Рамка    = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	НетРамки = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1);
	
	НомерКолонки = Формат(ВыделеннаяКолонка + 1, "ЧГ=0");
	НомерСтроки  = Формат(НастройкаСоответствияПолей.ВысотаТаблицы, "ЧГ=0");
	
	ОбластьКолонки = НастройкаСоответствияПолей.Область(3, НомерКолонки, НомерСтроки, НомерКолонки);
	ОбластьКолонки.Обвести(НетРамки, Рамка, Рамка, Рамка);
	ОбластьКолонки.ЦветРамки = ЦветаСтиля.ЦветРамки;
	
	ОбластьКолонки = НастройкаСоответствияПолей.Область(3, НомерКолонки, 3, НомерКолонки);
	ОбластьКолонки.Обвести(НетРамки, НетРамки, Рамка, Рамка);
	
КонецПроцедуры

#КонецОбласти

