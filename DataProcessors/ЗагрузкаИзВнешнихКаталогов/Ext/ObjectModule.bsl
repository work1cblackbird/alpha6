
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Заполнение данными из файла
//
// Параметры:
//  СообщениеОбОшибке	 - Строка - Оповещение о некорректном чтении файла
//
Процедура ПолучитьДанныеИзФайла(СообщениеОбОшибке) Экспорт
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Загрузим данные по выбранному типу
	Если ТипФайла = "AutoData Online" Тогда
		ЗагрузитьAutoDataOnline(СообщениеОбОшибке);
	ИначеЕсли ТипФайла = "Автонормы" Тогда
		ЗагрузитьАвтонормы(СообщениеОбОшибке);
	ИначеЕсли ТипФайла = "MotorData" Тогда
		ЗагрузитьMotorData(СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиАвтоработAutoDataOnline(ЧтениеXML)
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "RepairInstruction" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПрочитатьAutoDataOnline(ЧтениеXML);
		ИначеЕсли ЧтениеXML.Имя = "RepairInstructions" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьAutoDataOnline(ЧтениеXML)
	
	стрСтрокаРабот = Новый Структура;
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "RepairInstruction" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			// вставить добавление строки
			НоваяСтрокаРабот = Автоработы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРабот, стрСтрокаРабот);
			НоваяСтрокаРабот.Сумма = НоваяСтрокаРабот.СтоимостьНормочаса * НоваяСтрокаРабот.КоличествоНормочасов;
			Прервать;
		ИначеЕсли ЧтениеXML.Имя = "Instruction" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			СформироватьПараметрыАвтоработы(ЧтениеXML, стрСтрокаРабот);
		ИначеЕсли ЧтениеXML.Имя = "InstructionType" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("Префикс", ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "Hours" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("КоличествоНормочасов", ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "Repetitions" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("Количество", ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "HourlyRate" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("СтоимостьНормочаса", ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "VAT" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("НДСНаличие", (ЧтениеXML.Значение = "true"));
		ИначеЕсли ЧтениеXML.Имя = "IncludedJobs" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			// Добавим описание включающих работ
			ДобавитьИнформациюОВключенныхРаботах(ЧтениеXML, стрСтрокаРабот);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьAutoDataOnline(СообщениеОбОшибке)
	
	// открываем файл
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	Попытка
		ЧтениеXML.Прочитать();
	Исключение
		СообщениеОбОшибке =
		НСтр("ru = 'Формат файла не соответствует формату AutoData Online'");
		Возврат;
	КонецПопытки;
	
	Автоработы.Очистить();
	Запчасти.Очистить();
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя = "RepairInstructions" Тогда
					ДобавитьСтрокиАвтоработAutoDataOnline(ЧтениеXML);
				ИначеЕсли ЧтениеXML.Имя = "RepairParts" Тогда
					ДобавитьСтрокиЗапчастейAutoDataOnline(ЧтениеXML);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
			
		ОбработатьОшибкуСтруктурыФайла(СообщениеОбОшибке, ИнформацияОбОшибке());	
			
	КонецПопытки;
			
	// Закрываем файлик
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура СформироватьПараметрыАвтоработы(ЧтениеXML, стрСтрокаРабот)
	
	СтрЗначение  = ЧтениеXML.Значение;
	ПервыйВариантПозиции = 3;
	ВторойВариантПозиции = 4;
	
	Если НЕ ПустаяСтрока(СтрЗначение) Тогда
		Если СтрНайти(СтрЗначение, ".") = ПервыйВариантПозиции Тогда
			ДлинаКода = 7;
			НачалоНаименования = 9;
			Код          = Лев(СтрЗначение, ДлинаКода);
			Наименование = Сред(СтрЗначение, НачалоНаименования);
		ИначеЕсли СтрНайти(СтрЗначение, ".") = ВторойВариантПозиции Тогда
			ДлинаКода = 8;
			НачалоНаименования = 10;
			Код          = Лев(СтрЗначение, ДлинаКода);
			Наименование = Сред(СтрЗначение, НачалоНаименования);
		Иначе
			Код          = "";
			Наименование = СтрЗначение;
		КонецЕсли;
	Иначе
		Код          = "";
		Наименование = "";
	КонецЕсли;
	стрСтрокаРабот.Вставить("Наименование", Наименование);
	стрСтрокаРабот.Вставить("КодАвтоработы", Код);
	
КонецПроцедуры

Процедура ДобавитьИнформациюОВключенныхРаботах(ЧтениеXML, стрСтрокаРабот)
	
	ПримечаниеРабот = Новый Массив;
	ПримечаниеРаботы = Новый Массив;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "LineSequence" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ПримечаниеРаботы.Количество() > 0 Тогда
				ПримечаниеРабот.Добавить(СтрСоединить(ПримечаниеРаботы, " "));
			КонецЕсли;
			ПримечаниеРаботы = Новый Массив;
			ЧтениеXML.Прочитать();
			ПримечаниеРаботы.Добавить(СтрШаблон("[%1]", ЧтениеXML.Значение));
		ИначеЕсли ЧтениеXML.Имя = "LeftText" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ПримечаниеРаботы.Добавить(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "RightText" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ПримечаниеРаботы.Добавить(СтрШаблон("(%1)", ЧтениеXML.Значение));
		ИначеЕсли ЧтениеXML.Имя = "IncludedJobs" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ПримечаниеРабот.Добавить(СтрСоединить(ПримечаниеРаботы, " "));
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	стрСтрокаРабот.Вставить("ПримечаниеРаботы", СтрСоединить(ПримечаниеРабот, "; "));
	
КонецПроцедуры

Процедура ДобавитьСтрокиЗапчастейAutoDataOnline(ЧтениеXML)
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "RepairPart" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			стрСтрокаЗапчастей = Новый Структура;
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "RepairPart" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					// вставить добавление строки
					НоваяСтрокаЗапчастей = Запчасти.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапчастей, стрСтрокаЗапчастей);
					НоваяСтрокаЗапчастей.Сумма = НоваяСтрокаЗапчастей.Цена * НоваяСтрокаЗапчастей.Количество;
					Прервать;
				ИначеЕсли ЧтениеXML.Имя = "PartName" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("Наименование", ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "UnitPrice" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("Цена", ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "Quantity" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("Количество", ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "VAT" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("НДСНаличие", ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "ADPartNo" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("ОригНомер", ЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеXML.Имя = "RepairParts" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьАвтонормы(СообщениеОбОшибке)
	
	СтруктураПараметровФайлаЗагрузки = Новый Структура();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла,Новый ПараметрыЧтенияXML(,,,,,,,,,Ложь));
	
	Попытка
		ЧтениеXML.Прочитать();
	Исключение
		СообщениеОбОшибке =
		НСтр("ru = 'Формат файла не соответствует формату АвтоНормы'");
		Возврат;
	КонецПопытки;
	
	Автоработы.Очистить();
	Запчасти.Очистить();
	
	Попытка
	
		Пока ЧтениеXML.Прочитать() Цикл
			ИмяЭлемента = ЧтениеXML.Имя;
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя = "CUSTOMERDETAILS" Тогда
					ЧтениеXML.Прочитать();
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ИмяЭлемента = ЧтениеXML.Имя;
						ЧтениеXML.Прочитать();
						ЗначениеЭлемента = ЧтениеXML.Значение;
						СтруктураПараметровФайлаЗагрузки.Вставить(ИмяЭлемента,ЗначениеЭлемента);
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "ESTIMATE" Тогда
					ИмяЭлемента=ЧтениеXML.Имя;
					ID=ЧтениеXML.ПолучитьАтрибут(0);
					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Если ЧтениеXML.Имя = "REPAIRINST" Тогда
								ДобавитьСтрокиАвтоработАвтонормы(ЧтениеXML);
							ИначеЕсли ЧтениеXML.Имя = "GOODS" ИЛИ ЧтениеXML.Имя = "ADDONS" Тогда
								ДобавитьСтрокиЗапчастейАвтонормы(ЧтениеXML);
							ИначеЕсли ЧтениеXML.Имя = "DISCOUNT" Тогда
								СтруктураПроцентСкидкиНаВидУслуг = Новый Структура;
								Пока ЧтениеXML.Прочитать()Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
										ИмяЭлемента = ЧтениеXML.Имя;
										ЧтениеXML.Прочитать();
										ЗначениеЭлемента = ЧтениеXML.Значение;
										СтруктураПроцентСкидкиНаВидУслуг.Вставить(ИмяЭлемента,ЗначениеЭлемента);
									ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "DISCOUNT" Тогда
										СтруктураПараметровФайлаЗагрузки.Вставить("DISCOUNT", СтруктураПроцентСкидкиНаВидУслуг);
										Прервать;
									КонецЕсли;
								КонецЦикла;
							Иначе
								Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
									ИмяЭлемента = ЧтениеXML.Имя;
									ЧтениеXML.Прочитать();
									ЗначениеЭлемента = ЧтениеXML.Значение;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;					
					КонецЦикла;
				ИначеЕсли ИмяЭлемента = "IDN" ИЛИ ИмяЭлемента = "VIN" 
					ИЛИ ИмяЭлемента = "REGISTRATION" ИЛИ ИмяЭлемента = "MODEL" Тогда
					ИмяЭлемента = ЧтениеXML.Имя;
					ЧтениеXML.Прочитать();
					ЗначениеЭлемента = ЧтениеXML.Значение;
					СтруктураПараметровФайлаЗагрузки.Вставить(ИмяЭлемента,ЗначениеЭлемента);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Исключение	
		
		ОбработатьОшибкуСтруктурыФайла(СообщениеОбОшибке, ИнформацияОбОшибке());
		
	КонецПопытки;	
		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ДобавитьСтрокиАвтоработАвтонормы(ЧтениеXML)
	
	ЕстьСекцияCDATA = Ложь;
	ИмяЭлемента = ЧтениеXML.Имя;
	СтруктураСтрокиРаботы = Новый Структура;
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "INST" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ИмяАтрибута = СокрЛП(ЧтениеXML.Имя);
				ЗначениеАтрибута = СокрЛП(ЧтениеXML.Значение);
				СтруктураСтрокиРаботы.Вставить(ИмяАтрибута,ЗначениеАтрибута);
			КонецЦикла;
			
			ЧтениеXML.Прочитать();
			Наименование = СокрЛП(ЧтениеXML.Значение);
			
			ЧтениеXML.Прочитать();
			
			НоваяСтрока = Автоработы.Добавить();
			НоваяСтрока.Пометка = Истина;
			
			Если НЕ СтруктураСтрокиРаботы.Свойство("OPCODE") Тогда
				НоваяСтрока.КодАвтоработы = "";
			Иначе
				НоваяСтрока.КодАвтоработы = СтруктураСтрокиРаботы.OPCODE;
			КонецЕсли;
			
			НоваяСтрока.Наименование=Наименование;
			
			Если НЕ СтруктураСтрокиРаботы.Свойство("TIME") Тогда
				ВремяВыполнения = 0;
			Иначе
				ВремяВыполнения = СтруктураСтрокиРаботы.TIME;
			КонецЕсли;
			
			Если НЕ СтруктураСтрокиРаботы.Свойство("QTY") Тогда
				Кратность = 1;
			Иначе
				Кратность = СтруктураСтрокиРаботы.QTY;
			КонецЕсли;
			
			НоваяСтрока.КоличествоНормочасов = ВремяВыполнения*Кратность;
			
			Если НЕ СтруктураСтрокиРаботы.Свойство("RATE") Тогда
				НоваяСтрока.СтоимостьНормочаса = 0;
			Иначе
				НоваяСтрока.СтоимостьНормочаса = СтруктураСтрокиРаботы.RATE;
			КонецЕсли;
			
			Если НЕ СтруктураСтрокиРаботы.Свойство("DISCOUNT") Тогда
				РаботаПроцентСкидки = 0;
			Иначе
				РаботаПроцентСкидки = СтруктураСтрокиРаботы.DISCOUNT;
			КонецЕсли;
			
			НоваяСтрока.Сумма = НоваяСтрока.КоличествоНормочасов * НоваяСтрока.СтоимостьНормочаса
			- НоваяСтрока.КоличествоНормочасов * НоваяСтрока.СтоимостьНормочаса * РаботаПроцентСкидки / 100;
		КонецЕсли;
		Если ЧтениеXML.Имя = "REPAIRINST" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗначениеЭлемента = ЧтениеXML.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокиЗапчастейАвтонормы(ЧтениеXML)
	
	ИмяЭлемента = ЧтениеXML.Имя;
	СтруктураСтрокиЗапчасти = Новый Структура;
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "INST" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ИмяАтрибута = СокрЛП(ЧтениеXML.Имя);
				ЗначениеАтрибута = СокрЛП(ЧтениеXML.Значение);
				СтруктураСтрокиЗапчасти.Вставить(ИмяАтрибута,ЗначениеАтрибута);
			КонецЦикла;
			ЧтениеXML.Прочитать();
			Наименование = СокрЛП(ЧтениеXML.Значение);
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.Имя = "INST" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				НоваяСтрока = Запчасти.Добавить();
				НоваяСтрока.Пометка = Истина;
				НоваяСтрока.Наименование = Наименование;
				
				ОригинальныйНомерЗ = Неопределено;
				
				Если СтруктураСтрокиЗапчасти.Свойство("NUM",ОригинальныйНомерЗ) Тогда
					НоваяСтрока.ОригНомер = ОригинальныйНомерЗ;
					СтруктураСтрокиЗапчасти.NUM = "";
				КонецЕсли;
				
				Если НЕ СтруктураСтрокиЗапчасти.Свойство("PRICE") Тогда
					РаботаЦена=0;
				Иначе
					РаботаЦена=СтруктураСтрокиЗапчасти.PRICE;
				КонецЕсли;
				
				Если НЕ СтруктураСтрокиЗапчасти.Свойство("CNT") Тогда
					РаботаКоличество = 1;
				Иначе
					РаботаКоличество = СтруктураСтрокиЗапчасти.CNT;
				КонецЕсли;
				
				Если НЕ СтруктураСтрокиЗапчасти.Свойство("DISCOUNT") Тогда
					РаботаПроцентСкидки = 0;
				Иначе
					РаботаПроцентСкидки = СтруктураСтрокиЗапчасти.DISCOUNT;
				КонецЕсли;
				
				РаботаСумма = РаботаЦена * РаботаКоличество - РаботаЦена * РаботаКоличество * РаботаПроцентСкидки / 100;
				
				НоваяСтрока.Сумма = РаботаСумма;
				НоваяСтрока.Количество = РаботаКоличество;
			КонецЕсли;
		КонецЕсли;
		Если ЧтениеXML.Имя = "GOODS" ИЛИ ЧтениеXML.Имя = "ADDONS" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗначениеЭлемента = ЧтениеXML.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьMotorData(СообщениеОбОшибке)
	
	// открываем файл
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	Попытка
		ЧтениеXML.Прочитать();
	Исключение
		СообщениеОбОшибке =
		НСтр("ru = 'Формат файла не соответствует формату MotorData'");
		Возврат;
	КонецПопытки;
	
	Автоработы.Очистить();
	Запчасти.Очистить();
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя = "Jobs" Тогда
					ДобавитьСтрокиАвтоработMotorData(ЧтениеXML);
				ИначеЕсли ЧтениеXML.Имя = "Parts" Тогда
					ДобавитьСтрокиЗапчастейMotorData(ЧтениеXML);
				КонецЕсли;  
			КонецЕсли;
		КонецЦикла;
		
	Исключение
			
		ОбработатьОшибкуСтруктурыФайла(СообщениеОбОшибке, ИнформацияОбОшибке());	
			
	КонецПопытки;
			
	// Закрываем файлик
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ДобавитьСтрокиАвтоработMotorData(ЧтениеXML)
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "Job" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПрочитатьMotorData(ЧтениеXML);
		ИначеЕсли ЧтениеXML.Имя = "Jobs" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьMotorData(ЧтениеXML)
	
	стрСтрокаРабот = Новый Структура;
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "Job" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			НоваяСтрокаРабот = Автоработы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРабот, стрСтрокаРабот);
			НоваяСтрокаРабот.Сумма = НоваяСтрокаРабот.СтоимостьНормочаса * НоваяСтрокаРабот.КоличествоНормочасов;
			Прервать;
		ИначеЕсли ЧтениеXML.Имя = "PartName" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("Наименование", СокрЛП(ЧтениеXML.Значение));   
		ИначеЕсли ЧтениеXML.Имя = "OperationName" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();						
			стрСтрокаРабот.Наименование = стрСтрокаРабот.Наименование + " - " + СокрЛП(ЧтениеXML.Значение); 
		ИначеЕсли ЧтениеXML.Имя = "Hours" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("КоличествоНормочасов", ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "HourPrice" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стрСтрокаРабот.Вставить("СтоимостьНормочаса", ЧтениеXML.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

Процедура ДобавитьСтрокиЗапчастейMotorData(ЧтениеXML)
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "Part" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			стрСтрокаЗапчастей = Новый Структура;
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Part" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					НоваяСтрокаЗапчастей = Запчасти.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапчастей, стрСтрокаЗапчастей);
					НоваяСтрокаЗапчастей.Сумма = НоваяСтрокаЗапчастей.Цена * НоваяСтрокаЗапчастей.Количество;
					Прервать;
				ИначеЕсли ЧтениеXML.Имя = "PartName" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("Наименование", ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "Price" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("Цена", ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "Amount" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стрСтрокаЗапчастей.Вставить("Количество", ЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеXML.Имя = "Part" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// Подготовка данных для установки цен авторабот
// 
// Возвращаемое значение:
//  Структура - Данные для формирования документа
//
Функция ДанныеДокументаУстановкиЦен() Экспорт
	
	НомерПоКаталогуОбязательный = Автосервис.АртикулОбязательный();
	
	// Группа работ, куда будут помещаться новые элементы
	СпрПр = ОсновнаяГруппаАвторабот(ТипФайла);
	
	Если СпрПр = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПР_Группа = СпрПр.Ссылка;
	
	// Получим валюту нормачаса
	Записи = РегистрыСведений.ЦеныНормочасов.СрезПоследних(
	ДатаДокумента, Новый Структура("Нормочас", НормочасРабот));
	
	
	// Сформируем данные документы в структуре
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Дата", ДатаДокумента);
	ДанныеДокумента.Вставить("ДатаНачалаДействия", ДатаДокумента);
	ДанныеДокумента.Вставить("ХозОперация", Справочники.ХозОперации.УстановкаЦенАвтоработКомпании);
	
	Если Записи.Количество() > 0 Тогда
		
		ДанныеДокумента.Вставить("ВалютаДокумента", Записи[0].Валюта);
		
	КонецЕсли;
	
	ЦеныАвторабот = Новый ТаблицаЗначений;
	ЦеныАвторабот.Колонки.Добавить("Авторабота");
	ЦеныАвторабот.Колонки.Добавить("Нормочас");
	ЦеныАвторабот.Колонки.Добавить("Цена");
			
	Для Каждого СтрокаРабот Из Автоработы Цикл
		
		Если НЕ СтрокаРабот.Пометка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ СформированНормочас(ТипФайла, СтрокаРабот) Тогда
			ОшибкаСозданияЭлемента = Истина;
			Продолжить;
		КонецЕсли;
	
		СтруктураСтроки = Новый Структура("Авторабота,Нормочас,Цена");
		
		Гр1_Имя = СтрокаРабот.Категория;
		Гр2_Имя = СокрЛП(СтрокаРабот.Подкатегория1);
		Гр3_Имя = СокрЛП(СтрокаРабот.Подкатегория2);
		Родитель = ПР_Группа;
		Отказ = Ложь;
		
		// первая подгруппа - категория
		Группа1 = ПодгруппаСправочникаАвторабот(Гр1_Имя, Родитель, "первой", Отказ);
		
		Если Отказ Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Родитель = ?(ЗначениеЗаполнено(Группа1), Группа1, Родитель);
		
		// вторая подгруппа - подкатегория 1
		Группа2 = ПодгруппаСправочникаАвторабот(Гр2_Имя, Родитель, "второй", Отказ);
		
		Если Отказ Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Родитель = ?(ЗначениеЗаполнено(Группа2), Группа2, Родитель);
		
		// третья подгруппа - подкатегория 2
		Группа3 = ПодгруппаСправочникаАвторабот(Гр3_Имя, Родитель, "третьей", Отказ);
		
		Если Отказ Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Родитель = ?(ЗначениеЗаполнено(Группа3), Группа3, Родитель);
		
		Если НомерПоКаталогуОбязательный Тогда
			
			Если ПустаяСтрока(СтрокаРабот.КодАвтоработы) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для автоработы <%1> не указан номер по каталогу. %2Авторабота не создана.'"),
						СтрокаРабот.Наименование,
						Символы.ПС
					),
				);
				Продолжить;
				
			КонецЕсли;
			СпрПР = Справочники.Автоработы.НайтиПоРеквизиту("Артикул", СтрокаРабот.КодАвтоработы);
			
		Иначе
			
			СпрПР = Справочники.Автоработы.НайтиПоНаименованию(СтрокаРабот.Наименование, Истина, Родитель);
			
		КонецЕсли;
		
		Если СпрПР.Пустая() Тогда
			
			АвтоработаОбъект = НоваяАвторабота(СтрокаРабот.Наименование, СтрокаРабот.КодАвтоработы, Родитель, Неопределено);
			
			Если АвтоработаОбъект = Неопределено Тогда
				
				Продолжить;
				
			Иначе
				
				СпрПР = АвтоработаОбъект.Ссылка;
				
			КонецЕсли;
			
		Иначе
			
			АвтоработаОбъект = СпрПР.ПолучитьОбъект();
			
		КонецЕсли;
		
		СтрокаАвтоработы = ЦеныАвторабот.Найти(СпрПр, "Авторабота");
		Если СтрокаАвтоработы = Неопределено Тогда
			СтрокаАвтоработы = ЦеныАвторабот.Добавить();
		КонецЕсли;	
		
		СтрокаАвтоработы.Авторабота	= СпрПР; 
		НормочасСтроки =  УстановитьНормочасРабот(СтрокаРабот.СтоимостьНормочаса);
		
		Если НормочасСтроки <> НормочасРабот И  НЕ НормочасРабот = Справочники.Нормочасы.ПустаяСсылка() Тогда 
			СтрокаАвтоработы.Нормочас = НормочасРабот;
		Иначе 
			СтрокаАвтоработы.Нормочас = НормочасСтроки;
		КонецЕсли;
				
		Если СтрокаАвтоработы.Нормочас = ПредопределенноеЗначение("Справочник.Нормочасы.Рубль") Тогда
			СтрокаАвтоработы.Цена = СтрокаРабот.Сумма;
		Иначе
			СтрокаАвтоработы.Цена		= 0;  
		КонецЕсли;
		
		ЗаписатьВремяВыполненияРабот(АвтоработаОбъект, СтрокаРабот.КоличествоНормочасов);
		СтрокаРабот.Авторабота = СпрПР;
		
	КонецЦикла;
	
	ЦеныАвторабот = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЦеныАвторабот);
	
	ДанныеДокумента.Вставить("Автоработы", ЦеныАвторабот);
	
	Возврат ДанныеДокумента;
	
КонецФункции // ДанныеДокументаУстановкиЦен()

Функция ПодгруппаСправочникаАвторабот(ИмяГруппы, Родитель, НомерГруппы, Отказ)
	
	Если ПустаяСтрока(ИмяГруппы) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СпрПР = Справочники.Автоработы.НайтиПоНаименованию(ИмяГруппы, Истина, Родитель);
	
	Если СпрПР.Пустая() ИЛИ НЕ СпрПР.ЭтоГруппа Тогда
		СпрПР = Справочники.Автоработы.СоздатьГруппу();
		СпрПР.УстановитьНовыйКод();
		СпрПР.Наименование = ИмяГруппы;
		СпрПР.Родитель = Родитель;
		Попытка
			СпрПР.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Ошибка записи %1 подгруппы справочника Перечень работ: %2'"),
				    НомерГруппы,
					Строка(ОписаниеОшибки())
				),
				СпрПР,,,
				Отказ
			);
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция НоваяАвторабота(
	Наименование,
	Артикул,
	Родитель,
	Модель,
	ВариантКомплектации = Неопределено,
	КоличествоНормочасов = 0)
	
	СпрПР = Справочники.Автоработы.СоздатьЭлемент();
	СпрПР.УстановитьНовыйКод();
	СпрПР.Родитель = Родитель;
	СпрПР.Наименование = Наименование;
	СпрПР.НаименованиеПолное = Наименование;
	СпрПР.Артикул = Артикул;
	СпрПР.Номенклатура = Справочники.Номенклатура.Авторабота;
	СпрПР.ВидИспользования = Перечисления.ВидыИспользованияАвторабот.ПланированиеИПроизводство;
	СпрПР.СпособРасчетаСтоимостиРаботы = Перечисления.СпособыРасчетаСтоимостиРаботы.ПоНормеВремени;
	
	Если Модель <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Модель) Тогда
			
			СпрПР.ВремяВыполнения = КоличествоНормочасов;
			
		Иначе
			
			// по модели владельца формы
			Если ЗначениеЗаполнено(Модель) Тогда
				
				НоваяСтрокаСпр = СпрПР.НормыВремени.Добавить();
				НоваяСтрокаСпр.Модель              = Модель;
				НоваяСтрокаСпр.ВариантКомплектации = ВариантКомплектации;
				НоваяСтрокаСпр.ВремяВыполнения     = КоличествоНормочасов;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		СпрПР.Записать();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Создан новый элемент справочника Автоработы : %1, код : %2'"),
				Наименование,
				Артикул
			),
			СпрПР
		);
		Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка записи элемента справочника Автоработы: %1,%2'"),
				Артикул,
				Строка(ОписаниеОшибки())
			),
			СпрПР
		);
 		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СпрПР;
	
КонецФункции // НоваяАвторабота()

Процедура ЗаписатьВремяВыполненияРабот(Авторабота, КоличествоНормочасов)
	
	// Запишем норму времени в автоработу
	Попытка
		Авторабота.ВремяВыполнения = КоличествоНормочасов;
		Авторабота.ОбменДанными.Загрузка = Истина;
		Авторабота.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка записи норм времени выполнения автоработы <%1>: %2'"),
				Авторабота.Ссылка,
				Строка(ОписаниеОшибки())
			),
			Авторабота
		);

	КонецПопытки;
	
КонецПроцедуры

Функция  ОсновнаяГруппаАвторабот(Наименование)
	
	СпрПр = Справочники.Автоработы.НайтиПоНаименованию(Наименование, Истина);
	
	Если СпрПР.Пустая() ИЛИ НЕ СпрПР.ЭтоГруппа Тогда
		
		ГруппаОбъект = Справочники.Автоработы.СоздатьГруппу();
		ГруппаОбъект.УстановитьНовыйКод();
		ГруппаОбъект.Наименование = Наименование;
		
		Попытка
			
			ГруппаОбъект.Записать();
			СпрПр = ГруппаОбъект.Ссылка;
			
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Ошибка создания группы <%1> справочника Автоработы: %2'"),
					Наименование,
					Строка(ОписаниеОшибки())
				),
				ГруппаОбъект
			);

			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СпрПр;
	
КонецФункции //  ОсновнаяГруппаАвторабот()

// Выгрузка данных из каталога в документ
// 
// Возвращаемое значение:
//  Структура - Данные выбора строк
//
Функция ВыгрузитьДанныеИзКаталога() Экспорт
	
	// Основная группа справочников
	Н_Группа = ОсновнаяГруппаНоменклатуры(ТипФайла);
	
	НомерПоКаталогуОбязательный  =Автосервис.АртикулОбязательный();
	
	Если Н_Группа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантКомплектации) И (НЕ ЗначениеЗаполнено(Модель)) Тогда
		Модель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантКомплектации, "Владелец");
	КонецЕсли;
	
	СтруктураПоискаНорм = Новый Структура("Модель, ВариантКомплектации", Модель, ВариантКомплектации);
	ПустаяМодель = (НЕ ЗначениеЗаполнено(Модель));
	ОшибкаСозданияЭлемента = Ложь;
	
	// Сформируем товары
	ПолучитьВыбранныеЗапчасти(Н_Группа);
	
	// Сформируем автоработы
	
	// Группа работ, куда будут помещаться новые элементы
	СпрПр = ОсновнаяГруппаАвторабот(ТипФайла);
	
	Если СпрПр = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПР_Группа = СпрПр.Ссылка;
	
	// Не перенесено создание модели автомобиля - добавить тут
	
	Для Каждого СтрокаРабот Из Автоработы Цикл
		
		ПустаяМодельАвтомобиля = (НЕ ЗначениеЗаполнено(Модель));
		
		Если НЕ СформированНормочас(ТипФайла, СтрокаРабот) Тогда
			ОшибкаСозданияЭлемента = Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаРабот.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРабот.КоличествоНормочасов = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана норма времени'"));
			ОшибкаСозданияЭлемента = Истина;
			Продолжить;
		КонецЕсли;
		
		ПоискИСозданиеВыбраннойАвтоработы(
			СтрокаРабот,
			ПР_Группа,
			ОшибкаСозданияЭлемента,
			ПустаяМодельАвтомобиля,
			НомерПоКаталогуОбязательный)
		;
		
	КонецЦикла;
	
	Если ОшибкаСозданияЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СформироватьДанныеЗагрузки();
	
КонецФункции // ВыгрузитьДанныеИзКаталога()

Процедура ПолучитьВыбранныеЗапчасти(Н_Группа)
	
	ПараметрыПоУмолчанию = Новый Структура();
	ПараметрыПоУмолчанию.Вставить("ПоУмолчаниюТипНоменклатуры", Справочники.ТипыНоменклатуры.Штучный);
	ПараметрыПоУмолчанию.Вставить("ПоУмолчаниюСтавкаНДС", Справочники.СтавкиНДС.ОсновнаяСтавкаНДС);
	ПараметрыПоУмолчанию.Вставить("ПоУмолчаниюВалютаУчета", Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	ПараметрыПоУмолчанию.Вставить("ПоУмолчаниюВидНоменклатуры", Перечисления.ВидыНоменклатуры.Товар);
	ПараметрыПоУмолчанию.Вставить(
		"ПоУмолчаниюБазоваяЕдиницаИзмерения", Константы.ОсновнаяЕдиницаИзмеренияКоличества.Получить());
	ПараметрыПоУмолчанию.Вставить("АртикулОбязательный", Автосервис.АртикулОбязательный());
	ПараметрыПоУмолчанию.Вставить("РежимКонтроля", Автосервис.РежимКонтроляУникальностиАртикула());
	
	Для Каждого СтрокаНоменклатуры Из Запчасти Цикл
		
		Если НЕ СтрокаНоменклатуры.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНоменклатуры.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СпрН = ПоискСозданиеНоменклатуры(СтрокаНоменклатуры, Н_Группа, ПараметрыПоУмолчанию);
		
		Если СпрН = Неопределено Тогда
			ОшибкаСозданияЭлемента = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатуры.Номенклатура = СпрН.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьВыбранныеЗапчасти()

Процедура ПоискИСозданиеВыбраннойАвтоработы(
		СтрокаРабот,
		ПР_Группа,
		ОшибкаСозданияЭлемента,
		ПустаяМодельАвтомобиля,
		НомерПоКаталогуОбязательный)
	
	Гр1_Имя = СтрокаРабот.Категория;
	Гр2_Имя = СокрЛП(СтрокаРабот.Подкатегория1);
	Гр3_Имя = СокрЛП(СтрокаРабот.Подкатегория2);
	Родитель = ПР_Группа;
	Отказ = Ложь;
	
	// первая подгруппа - категория
	Группа1 = ПодгруппаСправочникаАвторабот(Гр1_Имя, Родитель, "первой", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ?(ЗначениеЗаполнено(Группа1), Группа1, Родитель);
	
	// первая подгруппа - категория
	Группа1 = ПодгруппаСправочникаАвторабот(Гр1_Имя, Родитель, "первой", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ?(ЗначениеЗаполнено(Группа1), Группа1, Родитель);
	
	// вторая подгруппа - подкатегория 1
	Группа2 = ПодгруппаСправочникаАвторабот(Гр2_Имя, Родитель, "второй", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ?(ЗначениеЗаполнено(Группа2), Группа2, Родитель);
	
	// третья подгруппа - подкатегория 2
	Группа3 = ПодгруппаСправочникаАвторабот(Гр3_Имя, Родитель, "третьей", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ?(ЗначениеЗаполнено(Группа3), Группа3, Родитель);
	
	Если НомерПоКаталогуОбязательный Тогда
		
		Если ПустаяСтрока(СтрокаРабот.КодАвтоработы) Тогда
			
			
			СпрПР = Справочники.Автоработы.НайтиПоНаименованию(СтрокаРабот.Наименование, Истина, Родитель);

			Если СпрПР.Пустая() Тогда 
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для автоработы <%1> не указан номер по каталогу. %2Авторабота не создана.'"),
						СтрокаРабот.Наименование,
						Символы.ПС
					),
				);
			 КонецЕсли;
				
			ОшибкаСозданияЭлемента = Истина;
			Возврат;
			
		КонецЕсли;
		СпрПР = Справочники.Автоработы.НайтиПоРеквизиту("Артикул", СтрокаРабот.КодАвтоработы);
		
	Иначе
		
		СпрПР = Справочники.Автоработы.НайтиПоНаименованию(СтрокаРабот.Наименование, Истина, Родитель);
		
	КонецЕсли;
	
	Если СпрПР.Пустая() Тогда
		
		АвтоработаОбъект = НоваяАвторабота(
			СтрокаРабот.Наименование,
			СтрокаРабот.КодАвтоработы,
			Родитель,
			Модель,
			ВариантКомплектации,
			СтрокаРабот.КоличествоНормочасов);
		
		Если АвтоработаОбъект = Неопределено Тогда
			ОшибкаСозданияЭлемента = Истина;
			Возврат;
		Иначе
			СпрПР = АвтоработаОбъект.Ссылка;
		КонецЕсли;
		
	Иначе
		
		// Заполнение автонорм для существующего объекта
		Если НЕ ЗаполненыНормыАвтоработы(
				СпрПР,
				СтрокаРабот,
				ПустаяМодельАвтомобиля,
				Модель,
				ВариантКомплектации) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаРабот.Авторабота = СпрПР;
	
КонецПроцедуры

Функция ОсновнаяГруппаНоменклатуры(Наименование)
	
	СпрН = Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина);
	Если СпрН.Пустая() И НЕ СпрН.ЭтоГруппа Тогда
		НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();
		НоваяГруппа.УстановитьНовыйКод();
		НоваяГруппа.Наименование = Наименование;
		Попытка
			НоваяГруппа.Записать();
			СпрН = НоваяГруппа.Ссылка;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Ошибка создания группы <%1> справочника Номенклатура: %2'"),
					Наименование,
					Строка(ОписаниеОшибки())
				),
				НоваяГруппа
			);
			
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СпрН;
	
КонецФункции

Функция ПоискСозданиеНоменклатуры(
	СтрокаНоменклатуры,
	ГруппаНоменклатуры,
	ПараметрыПоУмолчанию)
	
	Если ПараметрыПоУмолчанию.АртикулОбязательный Тогда
		
		Если ПустаяСтрока(СтрокаНоменклатуры.ОригНомер) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для номенклатуры <%1> не указан номер по каталогу. %2Номенклатура не создана.'"),
					СтрокаНоменклатуры.Наименование,
					Символы.ПС
				),
			);

			Возврат Неопределено;
			
		КонецЕсли;
		
		Режим = ПараметрыПоУмолчанию.РежимКонтроля;
		Если Режим = Перечисления.РежимыКонтроляУникальностиНомераПоКаталогу.НеКонтролировать Тогда
			СпрН = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаНоменклатуры.Наименование, Истина);
		Иначе
			АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(СтрокаНоменклатуры.ОригНомер);
			СпрН = Справочники.Номенклатура.НайтиНоменклатуру(АртикулДляПоиска, Производитель);
		КонецЕсли;
	Иначе
		
		СпрН = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаНоменклатуры.Наименование, Истина);
		
	КонецЕсли;
	
	Если СпрН.Пустая() Тогда
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.Заполнить(Неопределено);
		НоваяНоменклатура.УстановитьНовыйКод();
		НоваяНоменклатура.Родитель = ГруппаНоменклатуры;
		НоваяНоменклатура.Наименование = СтрокаНоменклатуры.Наименование;
		НоваяНоменклатура.НаименованиеИностранное = СтрокаНоменклатуры.Наименование;
		НоваяНоменклатура.НаименованиеПолное = СтрокаНоменклатуры.Наименование;
		ТипНоменклатуры = ?(
		ЗначениеЗаполнено(НоваяНоменклатура.ТипНоменклатуры),
		НоваяНоменклатура.ТипНоменклатуры,
		ПараметрыПоУмолчанию.ПоУмолчаниюТипНоменклатуры);
		НоваяНоменклатура.ТипНоменклатуры = ТипНоменклатуры;
		Справочники.Номенклатура.ТипНоменклатурыПриИзменении(НоваяНоменклатура);
		НоваяНоменклатура.Артикул = СтрокаНоменклатуры.ОригНомер;
		
		// Обязательные реквизиты
		НоваяНоменклатура.ВалютаУчета = ?(
		ЗначениеЗаполнено(НоваяНоменклатура.ВалютаУчета),
		НоваяНоменклатура.ВалютаУчета,
		ПараметрыПоУмолчанию.ПоУмолчаниюВалютаУчета);
		НоваяНоменклатура.СтавкаНДС = ?(
		ЗначениеЗаполнено(НоваяНоменклатура.СтавкаНДС),
		НоваяНоменклатура.СтавкаНДС,
		ПараметрыПоУмолчанию.ПоУмолчаниюСтавкаНДС);
		НоваяНоменклатура.ВидНоменклатуры = ?(
		ЗначениеЗаполнено(ТипНоменклатуры.ВидНоменклатуры),
		ТипНоменклатуры.ВидНоменклатуры,
		ПараметрыПоУмолчанию.ПоУмолчаниюВидНоменклатуры);
		НоваяНоменклатура.БазоваяЕдиницаИзмерения = ?(
		ЗначениеЗаполнено(ТипНоменклатуры.ОсновнаяБазоваяЕдиницаИзмерения),
		ТипНоменклатуры.ОсновнаяБазоваяЕдиницаИзмерения,
		ПараметрыПоУмолчанию.ПоУмолчаниюБазоваяЕдиницаИзмерения);
		НоваяНоменклатура.Производитель = Производитель;
		НоваяНоменклатура.ОбменДанными.Загрузка = Истина;
		
		Попытка
			
			НоваяНоменклатура.Записать();
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Создан новый элемент справочника Номенклатура : %1, код : %2'"),
					СтрокаНоменклатуры.Наименование,
					СтрокаНоменклатуры.ОригНомер
				),
				НоваяНоменклатура
			);

					
			Если НЕ ЗначениеЗаполнено(НоваяНоменклатура.ОсновнаяЕдиницаИзмерения) Тогда
				
				Попытка
					
					// Возможна ошибка при записи основной единицы измерения (если не задана базовая)
					НоваяНоменклатура.ОсновнаяЕдиницаИзмерения =
					Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(НоваяНоменклатура);
					НоваяНоменклатура.Записать();
					
				Исключение
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Ошибка записи основной единицы измерения для номенклатуры <%1>'"),
							НоваяНоменклатура.Наименование			
						),
						НоваяНоменклатура
					);
					
				КонецПопытки;
				
			КонецЕсли;
			
			СпрН = НоваяНоменклатура.Ссылка;
			
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Ошибка записи элемента номенклатуры: %1'"),
					Строка(ОписаниеОшибки())			
				),
				НоваяНоменклатура
			);

			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СпрН;
	
КонецФункции // ПоискСозданиеНоменклатуры()

Функция СформированНормочас(ТипФайлаВыгрузки, СтрокаРабот)
	
	Если ТипФайлаВыгрузки = "Автонормы" 
		ИЛИ ТипФайлаВыгрузки = "AutoSoft" 
		ИЛИ ТипФайлаВыгрузки = "AutoData Online" 
		ИЛИ ТипФайлаВыгрузки = "MotorData" Тогда
		
		НормочасНаименование = "н/ч Автонормы(" + СтрокаРабот.СтоимостьНормочаса + ")";
		
		Если ТипФайлаВыгрузки = "AutoSoft" Тогда
			
			НормочасНаименование = СтрЗаменить(НормочасНаименование, "Автонормы", "AutoSoft");
			
		ИначеЕсли ТипФайлаВыгрузки = "AutoData Online" Тогда
			
			НормочасНаименование = СтрЗаменить(НормочасНаименование, "Автонормы", "AutoData");  
			
		ИначеЕсли  ТипФайлаВыгрузки = "MotorData" Тогда
			
			НормочасНаименование = СтрЗаменить(НормочасНаименование, "Автонормы", "MotorData"); 
			
		КонецЕсли;
		
		СпрСсылкаНЧ = Справочники.Нормочасы.НайтиПоНаименованию(НормочасНаименование, Истина);
		
		Если СпрСсылкаНЧ.Пустая() Тогда
			
			СпрНЧ = Справочники.Нормочасы.СоздатьЭлемент();
			СпрНЧ.УстановитьНовыйКод();
			
			Если ТипФайлаВыгрузки = "AutoSoft" Тогда
				
				СпрНЧ.Наименование = "н/ч AutoSoft(" + СтрокаРабот.СтоимостьНормочаса + ")";
				
			ИначеЕсли ТипФайлаВыгрузки = "AutoData Online" Тогда
				
				СпрНЧ.Наименование = "н/ч AutoData(" + СтрокаРабот.СтоимостьНормочаса + ")";  
				
			ИначеЕсли ТипФайлаВыгрузки = "MotorData" Тогда 
				
				СпрНЧ.Наименование = "н/ч MotorData(" + СтрокаРабот.СтоимостьНормочаса + ")"; 
				
			Иначе
				
				СпрНЧ.Наименование = "н/ч Автонормы(" + СтрокаРабот.СтоимостьНормочаса + ")"; 	
				
			КонецЕсли;
			
			Попытка
				
				СпрНЧ.Записать();
				СпрСсылкаНЧ = СпрНЧ.Ссылка;
				
			Исключение
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Ошибка записи элемента справочника <Нормочасы>: %1'"),
						Строка(ОписаниеОшибки())			
					),
					СпрНЧ
				);
				Возврат Ложь;
				
			КонецПопытки;
			
			Цена = СтрокаРабот.СтоимостьНормочаса;
			
			Если Цена = 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Стоимость нормочаса не заполнена'"),
					СпрНЧ
				);
				Возврат Ложь;
				
			Иначе
				
				// Добавим запись в регистр
				МенеджерЗаписи = РегистрыСведений.ЦеныНормочасов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ДатаДокумента;
				МенеджерЗаписи.Нормочас = СпрСсылкаНЧ;
				МенеджерЗаписи.Валюта = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
				МенеджерЗаписи.Цена = Цена;
				МенеджерЗаписи.Записать(Истина);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполненыНормыАвтоработы(Авторабота, СтрокаРабот, ПустаяМодельАвтомобиля, Модель, ВариантКомплектации)
	
	АвтоработаОбъект = Авторабота.ПолучитьОбъект();
	
	ИзменилиОбъект = Ложь;
	Если ПустаяМодельАвтомобиля Тогда
		
		Если НЕ АвтоработаОбъект.ВремяВыполнения = СтрокаРабот.КоличествоНормочасов Тогда
			
			АвтоработаОбъект.ВремяВыполнения = СтрокаРабот.КоличествоНормочасов;
			ИзменилиОбъект = Истина;
			
		КонецЕсли;
		
	Иначе
		// есть данные по модели из владельца формы
		Если ЗначениеЗаполнено(Модель) Тогда
			
			СтруктураПоискаНорм = Новый Структура("Модель, ВариантКомплектации", Модель, ВариантКомплектации);
			СтрокиНорм = АвтоработаОбъект.НормыВремени.НайтиСтроки(СтруктураПоискаНорм);
			
			Если СтрокиНорм.Количество() = 0 Тогда
				
				НоваяСтрокаСпр = АвтоработаОбъект.НормыВремени.Добавить();
				НоваяСтрокаСпр.Модель              = Модель;
				НоваяСтрокаСпр.ВариантКомплектации = ВариантКомплектации;
				НоваяСтрокаСпр.ВремяВыполнения     = СтрокаРабот.КоличествоНормочасов;
				ИзменилиОбъект = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		АвтоработаОбъект.Записать();
		
		Если ИзменилиОбъект Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Внесены изменения элемент справочника Автоработы : %1, код : %2'"),
						СтрокаРабот.Наименование,
						СтрокаРабот.КодАвтоработы			
					),
					АвтоработаОбъект
			);

		КонецЕсли;
		
	Исключение 
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка записи элемента справочника Автоработы: %1'"),
				Строка(ОписаниеОшибки())			
			),
			АвтоработаОбъект
		);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ЗаполненыНормыАвтоработы()

Функция СформироватьДанныеЗагрузки()
	
	ТаблицаАвторабот = Новый ТаблицаЗначений();
	ТаблицаАвторабот.Колонки.Добавить("Авторабота");
	ТаблицаАвторабот.Колонки.Добавить("Нормочас");
	ТаблицаАвторабот.Колонки.Добавить("Коэффициент");
	ТаблицаАвторабот.Колонки.Добавить("Сумма");
	ТаблицаАвторабот.Колонки.Добавить("СтавкаНДС");
	ТаблицаАвторабот.Колонки.Добавить("ПримечаниеРаботы");
	
	Для Каждого СтрокаРабот Из Автоработы Цикл
		
		Если НЕ СтрокаРабот.Пометка ИЛИ НЕ ЗначениеЗаполнено(СтрокаРабот.Авторабота) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРабот.КоличествоНормочасов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаАвторабот.Добавить();
		НоваяСтрока.Авторабота = СтрокаРабот.Авторабота;

		НоваяСтрока.Нормочас = УстановитьНормочасРабот(СтрокаРабот.СтоимостьНормочаса);
		НоваяСтрока.Коэффициент = СтрокаРабот.КоличествоНормочасов;
		НоваяСтрока.Сумма = СтрокаРабот.Сумма;
		НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРабот.Авторабота, "Номенклатура.СтавкаНДС");
		НоваяСтрока.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботы;
		
	КонецЦикла;
	
	ТаблицаЗапчастей = Новый ТаблицаЗначений();
	ТаблицаЗапчастей.Колонки.Добавить("Номенклатура");
	ТаблицаЗапчастей.Колонки.Добавить("Количество");
	ТаблицаЗапчастей.Колонки.Добавить("Цена");
	
	Для Каждого СтрокаНоменклатуры Из Запчасти Цикл 
		
		Если НЕ СтрокаНоменклатуры.Пометка
			ИЛИ СтрокаНоменклатуры.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНоменклатуры.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗапчастей.Добавить();
		НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		НоваяСтрока.Количество = СтрокаНоменклатуры.Количество;
		НоваяСтрока.Цена = Окр(СтрокаНоменклатуры.Сумма / СтрокаНоменклатуры.Количество, 2);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Автоработы", ТаблицаАвторабот);
	Результат.Вставить("Товары", ТаблицаЗапчастей);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОшибкуСтруктурыФайла(СообщениеОбОшибке, ИнформацияОбОшибке)
	
	СообщениеОбОшибке = Нстр("ru = 'При чтении файла возникла ошибка. Возможно, файл не соответствует формату.'");
	ЗаписьЖурналаРегистрации(Нстр("ru = 'Загрузка из внешних каталогов'"), 
		УровеньЖурналаРегистрации.Предупреждение, 
		Метаданные.Обработки.ЗагрузкаИзВнешнихКаталогов,, 
		СообщениеОбОшибке + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));	
			
	Автоработы.Очистить();
	Запчасти.Очистить();	
	
КонецПроцедуры	

Функция УстановитьНормочасРабот (СтоимостьНормочаса)
	
	Если ЗначениеЗаполнено(НормочасРабот) Тогда
		Возврат НормочасРабот;
	КонецЕсли;
	
	СтрокаПоиска = "";
	Если ТипФайла = "Автонормы" Тогда
		СтрокаПоиска = "н/ч Автонормы(" + СтоимостьНормочаса + ")";
	ИначеЕсли ТипФайла = "AutoSoft" Тогда
		СтрокаПоиска = "н/ч AutoSoft(" + СтоимостьНормочаса + ")";
	ИначеЕсли ТипФайла = "AutoData Online" Тогда
		СтрокаПоиска = "н/ч AutoData(" + СтоимостьНормочаса + ")"; 
	ИначеЕсли ТипФайла = "MotorData" Тогда
		СтрокаПоиска = "н/ч MotorData(" + СтоимостьНормочаса + ")"; 
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Нормочас = НормочасРабот;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Нормочасы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Нормочасы КАК Нормочасы
		|ГДЕ
		|	Нормочасы.Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", СтрокаПоиска);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат НормочасРабот;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли