
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СхемаКомпоновкиДанных = Обработки.ОтчетОКонтактнойИнформации.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	Объект.НастройкиОтбораКомпоновщикаДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Объект.НастройкиОтбораКомпоновщикаДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	СтруктураИзХранилища = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ОтчетОКонтактнойИнформации", "ОбъектОтчета");
	
	Если СтруктураИзХранилища = Неопределено Тогда
		Объект.ВидКонтрагентаВОтчете = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;
		ВидКонтрагента = "Контрагенты";
		Обработки.ОтчетОКонтактнойИнформации.ЗаполнитьНачальныеНастройки(Объект);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты";
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Пока РезультатЗапроса.Следующий() Цикл
			НоваяСтрока = Объект.Объекты.Добавить();
			НоваяСтрока.Контрагент = РезультатЗапроса.Ссылка;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Объект.ВидКонтрагентаВОтчете = СтруктураИзХранилища.ВидКонтрагентаВОтчете;
	Объект.ВыводитьКонтактнуюИнформациюКонтактныхЛиц = СтруктураИзХранилища.ВыводитьКонтактнуюИнформациюКонтактныхЛиц;
	
	Для Каждого Строка Из СтруктураИзХранилища.ВидыКонтактнойИнформации Цикл
		НоваяСтрока = Объект.ВидыКонтактнойИнформации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из СтруктураИзХранилища.ВидыПодтверждающихДокументов Цикл
		НоваяСтрока = Объект.ВидыПодтверждающихДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из СтруктураИзХранилища.Объекты Цикл
		НоваяСтрока = Объект.Объекты.Добавить();
		НоваяСтрока.Контрагент = Строка.Контрагент;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.СохранениеПечатнойФормы") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			
			ФайлыВоВременномХранилище = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			
			Если ВыбранноеЗначение.ВариантСохранения = "СохранитьВПапку" Тогда
				СохранитьОтчетыВПапку(ФайлыВоВременномХранилище, ВыбранноеЗначение.ПапкаДляСохранения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СтруктураДляХранилища = Новый Структура();
	СтруктураДляХранилища.Вставить("ВидКонтрагентаВОтчете", 					Объект.ВидКонтрагентаВОтчете);
	СтруктураДляХранилища.Вставить("ВидыКонтактнойИнформации", 					Объект.ВидыКонтактнойИнформации.Выгрузить());
	СтруктураДляХранилища.Вставить("ВидыПодтверждающихДокументов", 				Объект.ВидыПодтверждающихДокументов.Выгрузить());
	СтруктураДляХранилища.Вставить("ВыводитьКонтактнуюИнформациюКонтактныхЛиц", Объект.ВыводитьКонтактнуюИнформациюКонтактныхЛиц);
	СтруктураДляХранилища.Вставить("Объекты", 									Объект.Объекты.Выгрузить());
	ОбщегоНазначения.ХранилищеНастроекДанныхФормУдалить(  "ОтчетОКонтактнойИнформации", "ОбъектОтчета", Пользователи.ТекущийПользователь());
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("ОтчетОКонтактнойИнформации", "ОбъектОтчета", СтруктураДляХранилища,,Пользователи.ТекущийПользователь());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("ВидКонтрагентаВОтчете",Объект.ВидКонтрагентаВОтчете);
	ПараметрыОтчета.Вставить("ВыводитьКонтактнуюИнформациюКонтактныхЛиц",Объект.ВыводитьКонтактнуюИнформациюКонтактныхЛиц);
	ПараметрыОтчета.Вставить("ВидыКонтактнойИнформации",Объект.ВидыКонтактнойИнформации);
	ПараметрыОтчета.Вставить("ВидыПодтверждающихДокументов",Объект.ВидыПодтверждающихДокументов);
	ПараметрыОтчета.Вставить("Объекты",Объект.Объекты);
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОтбора", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОтчетОКонтактнойИнформации.Форма.ФормаНастроек", ПараметрыОтчета, ЭтотОбъект,,,, ОбработчикОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПриПодключенииРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	ТаблДок = Обработки.ОтчетОКонтактнойИнформации.СформироватьТабличныйДокумент(Объект);
	Результат = ТаблДок;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьОтчетыВПапку(СписокФайловВоВременномХранилище, Знач Папка = "")
	
	#Если ВебКлиент Тогда
		Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
			ПолучитьФайл(ФайлДляЗаписи.АдресВоВременномХранилище, ФайлДляЗаписи.Представление);
		КонецЦикла;
		Возврат;
	#КонецЕсли
	
	Папка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Папка);
	Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
		СохранитьОтчетыВПапкуПродолжение(ФайлДляЗаписи, Папка);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + Папка);
	
КонецПроцедуры // СохранитьОтчетыВПапку()

&НаКлиенте
Процедура СохранитьОтчетыВПапкуПродолжение(ФайлДляЗаписи, Папка)
	
	ПолноеИмяФайла		= Папка + ФайлДляЗаписи.Представление;
	Файл				= Новый Файл(ПолноеИмяФайла);
	ИмяБезРасширения	= Файл.ИмяБезРасширения;
	Расширение			= Файл.Расширение;
	
	Счетчик = 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ДополнительныеПараметры.Вставить("Папка",            Папка);
	ДополнительныеПараметры.Вставить("Расширение",       Расширение);
	ДополнительныеПараметры.Вставить("Файл",             Файл);
	ДополнительныеПараметры.Вставить("ФайлДляЗаписи",    ФайлДляЗаписи);
	ДополнительныеПараметры.Вставить("Счетчик",          Счетчик);
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("СохранитьОтчетыВПапкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры // СохранитьОтчетыВПапкуПродолжение()

&НаКлиенте
Процедура СохранитьОтчетыВПапкуЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ИмяБезРасширения	= ДополнительныеПараметры.ИмяБезРасширения;
	Папка				= ДополнительныеПараметры.Папка;
	Расширение			= ДополнительныеПараметры.Расширение;
	Файл				= ДополнительныеПараметры.Файл;
	ФайлДляЗаписи		= ДополнительныеПараметры.ФайлДляЗаписи;
	Счетчик				= ДополнительныеПараметры.Счетчик;
	
	Если Существует Тогда
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
		ДополнительныеПараметры.Файл    = Файл;
		ДополнительныеПараметры.Счетчик = Счетчик;
		ОписаниеОповещения =
			Новый ОписаниеОповещения("СохранитьОтчетыВПапкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	Иначе
		ПолноеИмяФайла = Файл.ПолноеИмя;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлДляЗаписи.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // СохранитьОтчетыВПапкуЗавершение()


&НаСервере
Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	РезультатПроцедуры = Новый Массив;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	// сохранение печатных форм
	ОбработанныеПечатныеФормы = Новый Массив;
	
	ИмяФайла = ?(ПолучитьЗначениеПараметраСтруктуры(НастройкиСохранения, "ИмяФайла")=Неопределено, НСтр("ru = 'Отчет о контактной информации'"), НастройкиСохранения.ИмяФайла);
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		ТипФайлаПоиска = ?(ТипЗнч(ТипФайла) = Тип("ТипФайлаТабличногоДокумента"), ТипФайла, ТипФайлаТабличногоДокумента[ТипФайла]);
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайлаПоиска))[0];
		
		Если НастройкиФормата.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT И ВыбранныеФорматыСохранения.Найти(ТипФайлаТабличногоДокумента.TXT) <> Неопределено И ЗаписьZipФайла <> Неопределено Тогда
			ПредставлениеФайла = ИмяФайла + "ANSI." + НастройкиФормата.Расширение;
		Иначе
			ПредставлениеФайла = ИмяФайла + "." + НастройкиФормата.Расширение;
		КонецЕсли;
		
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ПредставлениеФайла;
		// Файл может не записаться по разным причинам операционной системы (защищен от записи диск, нет памяти...).
		Попытка
			Результат.Записать(ПолноеИмяФайла, ТипФайла);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось записать файл по причине:'") + " " + ОписаниеОшибки());
			Возврат РезультатПроцедуры;
		КонецПопытки;
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Представление", ПредставлениеФайла);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
			Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
				ОписаниеФайла.Вставить("Кодировка", "windows-1251");
			КонецЕсли;
			РезультатПроцедуры.Добавить(ОписаниеФайла);
		КонецЕсли;
	КонецЦикла;
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ИмяФайла + ".zip");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		РезультатПроцедуры.Добавить(ОписаниеФайла);
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат РезультатПроцедуры;
	
КонецФункции //ПоместитьТабличныеДокументыВоВременноеХранилище()

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры //ВставитьКартинкиВHTML()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОтбора(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидКонтрагентаВОтчете = РезультатОповещения.ВидКонтрагентаВОтчете;
	Объект.ВыводитьКонтактнуюИнформациюКонтактныхЛиц = РезультатОповещения.ВыводитьКонтактнуюИнформациюКонтактныхЛиц;
	Объект.Куратор = РезультатОповещения.Куратор;
	Объект.ВидыКонтактнойИнформации.Очистить();
	Объект.ВидыПодтверждающихДокументов.Очистить();
	Объект.Объекты.Очистить();
	Для Каждого Строка Из РезультатОповещения.ВидыКонтактнойИнформации Цикл
		НоваяСтрока = Объект.ВидыКонтактнойИнформации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из РезультатОповещения.ВидыПодтверждающихДокументов Цикл
		НоваяСтрока = Объект.ВидыПодтверждающихДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из РезультатОповещения.Объекты Цикл
		НоваяСтрока = Объект.Объекты.Добавить();
		НоваяСтрока.Контрагент = Строка.Контрагент;
	КонецЦикла;
	
	СохранитьНастройки = Истина;
	
	// Сформируем отчет
	СформироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииРасширения(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасширениеДляРаботыСФайламиПодключено", РасширениеПодключено);
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти









