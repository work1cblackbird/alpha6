// Модуль менеджера обработки "Просмотр движений"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Отобразить все движения документа используя макет.
Процедура СформироватьТабличныйДокумент(Объект, ТабДокумент = Неопределено, НеПоказыватьТаблДокумент = Ложь) Экспорт
	
	ТонкаяСплошнаяЛиния   = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ТонкаяПунктирнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир, 1);
	ТолстаяСплошнаяЛиния  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЦветРамки = Новый Цвет(161, 161, 161);
	ЦветФона = Новый Цвет(254, 248, 210);
	
	// Создадим и проинициализируем основные объекты.
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	ПостроительОтчета = Новый ПостроительОтчета;
	
	// Сформируем заголовок макета.
	Макет = Обработки.ПросмотрДвижений.ПолучитьМакет("Макет");
	
	// Используются для отображения % выполненной работы.
	НомерРегистра = -1;
	КоличествоРегистров = Объект.Метаданные().Движения.Количество();
	
	// Шагаем по регистраторам
	Для Каждого ТекРегистр Из Объект.Метаданные().Движения Цикл
		
		// Данные без доступа не выводим
		Если НЕ ПравоДоступа("Просмотр", ТекРегистр) Тогда
			Продолжить;	
		КонецЕсли;
		
		НомерРегистра = НомерРегистра + 1;
		
		// Проверим, а является ли текущее движение, движением по регистру сведений или накопления.
		Если (Метаданные.РегистрыНакопления.Индекс(ТекРегистр) < 0) 
			И (Метаданные.РегистрыСведений.Индекс(ТекРегистр) < 0) Тогда
			
			Продолжить;
		КонецЕсли;
		
		// Это регистр накопления или сведений?
		ВидРегистра = ?(Метаданные.РегистрыНакопления.Индекс(ТекРегистр) >= 0, "Накопления", "Сведений");
		
		// Вспомогательные переменные
		ЕстьВидДвижения = ((ВидРегистра = "Накопления") 
								И (ТекРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки));
		ЕстьРеквизиты   = (ТекРегистр.Реквизиты.Количество() > 0 );
		ЕстьПериод = Ложь;
		
		Для Каждого ТекРеквизит Из ТекРегистр.СтандартныеРеквизиты Цикл
			Если ТекРеквизит.Имя = "Период" Тогда
				ЕстьПериод = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Определяем последнюю колонку 
		ЕстьРеквизиты65 = ?(ЕстьРеквизиты, 6, 5);
		ЕстьРеквизиты54 = ?(ЕстьРеквизиты, 5, 4);
		ПоследняяКолонка = ?(ЕстьПериод, ЕстьРеквизиты65, ЕстьРеквизиты54);
		
		// Получаем области макета
		ОбластьИмяРегистра = Макет.ПолучитьОбласть("ИмяРегистра");
		ОбластьИмяРегистра.Область(1, 2, 1, ПоследняяКолонка).Объединить();
		ОбластьИмяРегистра.Параметры.ВидРегистра = НРег(ВидРегистра);
		ОбластьИмяРегистра.Параметры.ИмяРегистра = ТекРегистр.Представление();
		
		Суффикс = ?(ЕстьВидДвижения, "В", "") + ?(ЕстьРеквизиты, "Р", "") + ?(ЕстьПериод, "С", "");
		ОбластьШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы" + Суффикс);
		ОбластьДетали = Макет.ПолучитьОбласть("Детали" + Суффикс);
		
		// Очистим от имен
		ОбластьИмяРегистра.Область("ИмяРегистра"           ).Имя = "";
		ОбластьШапка      .Область("ШапкаТаблицы" + Суффикс).Имя = "";
		ОбластьДетали     .Область("Детали"       + Суффикс).Имя = "";
		
		// Приступаем к формированию списка полей и макета детальных записей.
		Поля			= "";
		СинонимыПолей	= Новый Структура;
		
		Если ЕстьВидДвижения Тогда
			Поля = "ВЫБОР
			|		КОГДА ВидДвижения = &Приход
			|			ТОГДА ""+""
			|		КОГДА ВидДвижения = &Расход
			|			ТОГДА ""-""
			|		ИНАЧЕ ""+-""
			|	КОНЕЦ КАК ВидДвижения";
			СинонимыПолей.Вставить("ВидДвижения", "+/-");
		КонецЕсли;
		
		ИменаКоллекций = Новый Структура("Измерения,Ресурсы,Реквизиты,СтандартныеРеквизиты"); 
		Колонка = ?(ЕстьВидДвижения, 3, 2);
		ЕстьПериод = Ложь;
		Для каждого ТекКоллекция Из ИменаКоллекций Цикл
			
			Строка = 1;
			ЭтоСтандартныеРеквизиты = (ТекКоллекция.Ключ = "СтандартныеРеквизиты");
			
			Если ЭтоСтандартныеРеквизиты Тогда
				Колонка = ?(ЕстьРеквизиты, 6, 5);
			КонецЕсли;
			
			Для каждого ТекОбъект Из ТекРегистр[ТекКоллекция.Ключ] Цикл
				
				Если ЭтоСтандартныеРеквизиты И ТекОбъект.Имя <> "Период" Тогда
					Продолжить;
				КонецЕсли;
				
				Поля = Поля + "," + Символы.ПС + Символы.Таб + ТекОбъект.Имя;
				СинонимыПолей.Вставить(ТекОбъект.Имя, ?(ЗначениеЗаполнено(ТекОбъект.Синоним), ТекОбъект.Синоним, ТекОбъект.Имя));
				
				ТекОбласть = ОбластьДетали.Область(Строка, Колонка, Строка, 
						Колонка + ?((НЕ ЕстьВидДвижения) И (ТекКоллекция.Ключ = "Измерения"), 1, 0));
				ТекОбласть.Объединить();
				ТекОбласть.Заполнение              = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ТекОбласть.Параметр                = ТекОбъект.Имя;
				ТекОбласть.ПараметрРасшифровки     = ТекОбъект.Имя;
				ТекОбласть.РазмещениеТекста        = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
				ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ТекОбласть.Обвести(ТонкаяСплошнаяЛиния,ТонкаяСплошнаяЛиния,ТонкаяСплошнаяЛиния,ТонкаяСплошнаяЛиния);
				ТекОбласть.ЦветРамки = ЦветРамки;
				Если ТекОбъект.Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
					ТекОбласть.Формат = "ДЛФ=T";
				КонецЕсли;
				Строка = Строка + 1;
				
			КонецЦикла;
			
			Колонка = ?((Колонка = 2) И (НЕ ЕстьВидДвижения), 4, Колонка + 1);
			
		КонецЦикла;
		Поля = ?(ЕстьВидДвижения, Поля, Сред(Поля, 4));
		
		// Заполним область деталей синонимами полей и "допишем" ее к шапке.
		ВысотаМакета = МАКС(ТекРегистр.Измерения.Количество(), 
				ТекРегистр.Ресурсы.Количество(), ТекРегистр.Реквизиты.Количество());
		ОбластьДетали = ОбластьДетали.ПолучитьОбласть(1, , ВысотаМакета);
		ОбластьДетали.Параметры.Заполнить(СинонимыПолей);
		ОбластьШапка.Вывести(ОбластьДетали);
		ОбластьШапка = ОбластьШапка.ПолучитьОбласть(1, , ВысотаМакета + 1);
		
		// Обработаем макеты - объединим все что нужно объединить и обведем ячейки.
		Для Кол = 2 По ПоследняяКолонка Цикл
			
			Для Стр = 1 По ВысотаМакета Цикл
				ТекОбласть = ОбластьДетали.Область(Стр, Кол, Стр, Кол);
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ТекОбласть.Обвести(ТонкаяСплошнаяЛиния, ТонкаяПунктирнаяЛиния, ТонкаяСплошнаяЛиния, ТонкаяПунктирнаяЛиния);
				ТекОбласть.ЦветРамки = ЦветРамки;
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЕстьВидДвижения Тогда
			ОбластьШапка.Область(1, 2, ВысотаМакета + 1, 2).Объединить();
			ОбластьШапка.Область(1, 2, ВысотаМакета + 1, 2).Обвести(ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния,
																		ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния);
			
			ОбластьДетали.Область(1, 2, ВысотаМакета, 2).Объединить();
			ОбластьДетали.Область(1, 2, ВысотаМакета, 2).Обвести(ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния,
																		ТонкаяСплошнаяЛиния);
		КонецЕсли;
		
		// Обведем области "итоговой" линией.
		ОбластьШапка.Область(1, 2, ВысотаМакета + 1, ПоследняяКолонка).Обвести(ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния,
																					ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния);
		ОбластьШапка.Область(1, 2, ВысотаМакета + 1, ПоследняяКолонка).ЦветРамки = ЦветРамки;
		ОбластьШапка.Область(1, 2, ВысотаМакета + 1, ПоследняяКолонка).ЦветФона = ЦветФона;
		ОбластьДетали.Область(1, 2, ВысотаМакета, ПоследняяКолонка).Обвести(ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния,
																					ТонкаяСплошнаяЛиния, ТонкаяСплошнаяЛиния);
		
		// Проинициализируем построитель отчета и установим параметры.
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	" + Поля + "
		|{ВЫБРАТЬ
		|	" + Поля + "}
		|ИЗ
		|	Регистр" + ВидРегистра + "." + ТекРегистр.Имя + "
		|ГДЕ
		|	Регистратор = &ПоДокументу";
		
		ПостроительОтчета.Текст = ТекстЗапроса;
		ПостроительОтчета.Параметры.Вставить("ПоДокументу", Объект);
		ПостроительОтчета.Параметры.Вставить("Приход", ВидДвиженияНакопления.Приход);
		ПостроительОтчета.Параметры.Вставить("Расход", ВидДвиженияНакопления.Расход);
		
		// Заполним представления всех полей построителя отчета синонимами измерений, ресурсов или реквизитов.
		ЗаполнитьПредставленияПолей(СинонимыПолей, ПостроительОтчета);
		
		// Настроим построитель отчета
		ПостроительОтчета.МакетШапкиТаблицы       = ОбластьШапка;
		ПостроительОтчета.МакетДетальныхЗаписей   = ОбластьДетали;
		ПостроительОтчета.ВыводитьШапкуТаблицы    = Истина;
		ПостроительОтчета.ВыводитьПодвалОтчета    = Истина;
		ПостроительОтчета.ВыводитьОбщиеИтоги      = Ложь;
		ПостроительОтчета.ВыводитьПодвалТаблицы   = Ложь;
		ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
		
		Если ПостроительОтчета.ПолучитьЗапрос().Выполнить().Пустой() Тогда
			Продолжить;
		Иначе
			ОбластьСтрока = Макет.ПолучитьОбласть("R1");
			ТабДокумент.Вывести(ОбластьСтрока);
			ТабДокумент.Вывести(ОбластьИмяРегистра);
		КонецЕсли;
		ТабДокумент.НачатьГруппуСтрок();
		ПостроительОтчета.Вывести(ТабДокумент);
		ТабДокумент.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
	ТабДокумент.ОтображатьГруппировки = Истина;
	ТабДокумент.ОтображатьЗаголовки   = Ложь;
	ТабДокумент.ОтображатьСетку       = Ложь;
	ТабДокумент.ТолькоПросмотр        = Истина;
	ТабДокумент.Автомасштаб           = Истина;
	ТабДокумент.ПолеСлева             = 9;
	ТабДокумент.ПолеСправа            = 6;
	
	Если Не НеПоказыватьТаблДокумент Тогда
		ТабДокумент.Показать(НСтр("ru = 'Движения документа'") + " " + Строка(Объект.ВыбранныйДокументДокумент));
	КонецЕсли;
	
КонецПроцедуры // СформироватьТабличныйДокумент()

// Заполняет представление полей.
//
// Параметры
//   СинонимыПолей - структура - содержит синонимы полей
//   ПостроительОтчета - ПостроительОтчеты.
//
Процедура ЗаполнитьПредставленияПолей(СинонимыПолей, ПостроительОтчета)
	
	ИменаКоллекцийПостроителяОтчета = 
				Новый Структура("ДоступныеПоля, ВыбранныеПоля, ИзмеренияКолонки, ИзмеренияСтроки, Отбор");
	
	Для Каждого ТекКоллекция Из ИменаКоллекцийПостроителяОтчета Цикл
		
		Для Каждого ТекОбъект Из ПостроительОтчета[ТекКоллекция.Ключ] Цикл
			
			Если (НЕ ПустаяСтрока(ТекОбъект.Имя)) И (СинонимыПолей.Свойство(ТекОбъект.Имя)) Тогда
				ТекОбъект.Представление = СинонимыПолей[ТекОбъект.Имя];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредставленияПолей()

#КонецОбласти

#КонецЕсли