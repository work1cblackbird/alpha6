
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Документ") Тогда
		Объект.ВыбранныйДокумент = Параметры.Документ;
		Заголовок = "Движения:" + " " + Объект.ВыбранныйДокумент + " " 
									+ Формат(Объект.ВыбранныйДокумент.Дата, "ДЛФ=T");
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Cформировать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура переформирования формы.
//
&НаСервере
Процедура Cформировать()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВыбранныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем группу страниц, на которую будем помещать страницы.
	ЭлементСтраницы = Элементы.Добавить("ГруппаСтраницы", Тип("ГруппаФормы"));
	ЭлементСтраницы.Вид = ВидГруппыФормы.Страницы;
	ЭлементСтраницы.Заголовок = НСтр("ru = 'Группа страниц'");
	
	// СТРАНИЦЫ: По регистрам.
	
	// Получим информацию по каким регистрам документ сделал движения.
	ШаблонЗапроса = "ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ $Условие$
	|	""$ВидРегистра$"" КАК Вид,
	|	""$ИмяРегистра$"" КАК Имя,
	|	""$СинонимРегистра$"" КАК Синоним,
	|	КОЛИЧЕСТВО($ИмяРегистра$.НомерСтроки) КАК КоличествоДвижений
	|ИЗ
	|	Регистр$ВидРегистра$.$ИмяРегистра$ КАК $ИмяРегистра$
	|ГДЕ
	|	$ИмяРегистра$.Регистратор = &Регистратор
	|
	|";
	
	ТекстЗапроса = "//";
	
	РегистрыДокумента = Новый ТаблицаЗначений;
	РегистрыДокумента.Колонки.Добавить("МетаданныеРегистра");
	РегистрыДокумента.Колонки.Добавить("ПравоДоступно");
	
	// Добавим регистр "ЖурналСостояний" в коллекцию для проверки прав
	ДобавитьРегистрВКоллекцию(РегистрыДокумента, Метаданные.РегистрыСведений.ЖурналСостояний);
	
	Для каждого ТекРегистр Из Объект.ВыбранныйДокумент.Метаданные().Движения Цикл
		
		// Добавим регистры в коллекцию для проверки прав
		ДобавитьРегистрВКоллекцию(РегистрыДокумента, ТекРегистр);
		
		// Определим вид регистра
		Если Метаданные.РегистрыНакопления.Индекс(ТекРегистр) >= 0 Тогда
			ВидРегистра = "Накопления"
		ИначеЕсли Метаданные.РегистрыСведений.Индекс(ТекРегистр) >= 0 Тогда
			ВидРегистра = "Сведений"
		ИначеЕсли  Метаданные.РегистрыРасчета.Индекс(ТекРегистр) >= 0 Тогда
			ВидРегистра = "Расчета"
		ИначеЕсли  Метаданные.РегистрыБухгалтерии.Индекс(ТекРегистр) >= 0 Тогда
			ВидРегистра = "Бухгалтерии"
		КонецЕсли;
		
		// Заполним шаблон фрагмента запроса.
		Фрагмент = СтрЗаменить(ШаблонЗапроса,"$ВидРегистра$",ВидРегистра);
		Фрагмент = СтрЗаменить(Фрагмент     ,"$ИмяРегистра$",ТекРегистр.Имя);
		Фрагмент = СтрЗаменить(Фрагмент     ,"$СинонимРегистра$",ТекРегистр.Синоним);
		Фрагмент = СтрЗаменить(Фрагмент     ,"$Условие$",?(ТекстЗапроса = "//", "РАЗРЕШЕННЫЕ",""));
		ТекстЗапроса = ТекстЗапроса + Фрагмент;
		
	КонецЦикла;
	
	// Документ не связан с регистром.
	Если ТекстЗапроса = "//" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Объект.ВыбранныйДокумент);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьДвижения = (РезультатЗапроса.Выгрузить().Итог("КоличествоДвижений") > 0);
	
	// Расположим на текущей странице элемент управления поле табличного документа.
	ТабДокументВсеДвижения = Новый РеквизитФормы("Таб_ВсеДвижения", Новый ОписаниеТипов("ТабличныйДокумент"), ,"", Ложь);
	ТабДокументАктивыИПассивы = Новый РеквизитФормы("Таб_АктивыИПассивы", Новый ОписаниеТипов("ТабличныйДокумент"), ,"", Ложь);
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(ТабДокументВсеДвижения);
	МассивДобавляемыхРеквизитов.Добавить(ТабДокументАктивыИПассивы);
	
	// Добавим первую страницу с отчетом "Движения документа".
	НовСтраница = Элементы.Добавить("ВсеДвижения", Тип("ГруппаФормы"), ЭлементСтраницы);
	НовСтраница.Вид = ВидГруппыФормы.Страница;
	НовСтраница.Заголовок = НСтр("ru = 'Все движения'");
	НовСтраница.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	
	// Проверим доступность просмотра регистров
	ПроверитьПравоПросмотрНаРегистры(РегистрыДокумента);
	
	// Добавим страницу для каждого регистра.
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЕстьДвижения И (Выборка.КоличествоДвижений = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьПравоПросмотрНаРегистр(РегистрыДокумента, Выборка.Имя) Тогда
			ТабДокумент = Новый РеквизитФормы("ТабличноеПоле" + Выборка.Имя, Новый ОписаниеТипов("ДинамическийСписок"), , Выборка.Синоним, Ложь);
		Иначе
			ТабДокумент = Новый РеквизитФормы("ТабличноеПоле" + Выборка.Имя, Новый ОписаниеТипов("ТабличныйДокумент"), , "", Ложь);
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов.Добавить(ТабДокумент);
		НовСтраница = Элементы.Добавить(Выборка.Имя, Тип("ГруппаФормы"), ЭлементСтраницы);
		НовСтраница.Вид = ВидГруппыФормы.Страница;
		НовСтраница.Заголовок = Выборка.Синоним;
		НовСтраница.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
		
	КонецЦикла;
	
	// Добавим страницу с регистром "Журнал состояний".
	ТаблицаВыборки = РезультатЗапроса.Выгрузить();
	УчаствуетВДвиженияхРегистраЖурналСостояний = Метаданные.РегистрыСведений.ЖурналСостояний.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Объект.ВыбранныйДокумент));
	
	Если УчаствуетВДвиженияхРегистраЖурналСостояний Тогда
		
		НоваяСтрока = ТаблицаВыборки.Добавить();
		НоваяСтрока.Вид = "Сведений";
		НоваяСтрока.Имя = "ЖурналСостояний";
		НоваяСтрока.Синоним = НСтр("ru = 'Журнал состояний'");
		НоваяСтрока.КоличествоДвижений = 0;
		
		Если ЕстьПравоПросмотрНаРегистр(РегистрыДокумента, "ЖурналСостояний") Тогда
			ТабДокумент = Новый РеквизитФормы("ТабличноеПолеЖурналСостояний", Новый ОписаниеТипов("ДинамическийСписок"), ,НСтр("ru = 'Журнал состояний'"), Ложь);
			НоваяСтрока.КоличествоДвижений = РегистрыСведений.ЖурналСостояний.СрезПоследних(ТекущаяДатаСеанса(),
												Новый Структура("Объект", Объект.ВыбранныйДокумент)).Количество();
		Иначе
			ТабДокумент = Новый РеквизитФормы("ТабличноеПолеЖурналСостояний", Новый ОписаниеТипов("ТабличныйДокумент"), , "", Ложь); 
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов.Добавить(ТабДокумент);
		НовСтраница = Элементы.Добавить("ЖурналСостояний", Тип("ГруппаФормы"), ЭлементСтраницы);
		НовСтраница.Вид = ВидГруппыФормы.Страница;
		НовСтраница.Заголовок = НСтр("ru = 'Журнал состояний'");
		НовСтраница.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
		
		ЕстьДвижения = ЕстьДвижения ИЛИ ?(НоваяСтрока.КоличествоДвижений = 0, Ложь, Истина);
		
	КонецЕсли;
	
	// Добавим последнюю страницу.
	НовСтраница = Элементы.Добавить("АктивыИПассивы", Тип("ГруппаФормы"), ЭлементСтраницы);
	НовСтраница.Вид = ВидГруппыФормы.Страница;
	НовСтраница.Заголовок = НСтр("ru = 'Активы и пассивы'");
	НовСтраница.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Заполним табличный документ при помощи отчета "Движения документа".
	ТабличныйДокумент = Элементы.Добавить("ПолеТабличногоДокументаВсеДвижения", Тип("ПолеФормы"), Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ВсеДвижения);
	ТабличныйДокумент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
	ТабличныйДокумент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТабличныйДокумент.ПутьКДанным = "Таб_ВсеДвижения";
	
	// ПОСЛЕДНЯЯ СТРАНИЦА: "Все движения".
	Обработки.ПросмотрДвижений.СформироватьТабличныйДокумент(Объект.ВыбранныйДокумент, ЭтотОбъект.Таб_ВсеДвижения, Истина);
	
	// Обходим движения документа и добавляем табличные поля списков.
	Для Каждого Выборка Из ТаблицаВыборки Цикл
		
		Если ЕстьДвижения И (Выборка.КоличествоДвижений = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЕстьПравоПросмотрНаРегистр(РегистрыДокумента, Выборка.Имя) Тогда
			
			ТабличныйДокумент = Элементы.Добавить("Таб_" + Выборка.Имя, Тип("ПолеФормы"), Элементы[Выборка.Имя]);
			ТабличныйДокумент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
			ТабличныйДокумент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТабличныйДокумент.ПутьКДанным = "ТабличноеПоле" + Выборка.Имя;
			
			ВывестиИнформациюОНедоступностиПрав(ЭтотОбъект[ТабличныйДокумент.ПутьКДанным]);
			
			Продолжить;
			
		КонецЕсли;
		
		ДС = ЭтотОбъект["ТабличноеПоле"+Выборка.Имя];
		ДС.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
		ДС.ОсновнаяТаблица = "Регистр"+Выборка.Вид+"."+Выборка.Имя;
		ДС.ПроизвольныйЗапрос = Ложь;
		
		// Установка отбора по регистратору.
		ЭлементОтбора = ДС.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(?(Выборка.Имя = "ЖурналСостояний", "Объект", "Регистратор"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.ВыбранныйДокумент;
		ЭлементОтбора.Использование = Истина;
		
		// Помещаем табличное поле на страницу.
		ТабличноеПоле = Элементы.Добавить("Таб_" + Выборка.Имя, Тип("ТаблицаФормы"), Элементы[Выборка.Имя]);
		ТабличноеПоле.ПутьКДанным = "ТабличноеПоле" + Выборка.Имя;
		Если Выборка.Имя = "ЖурналСостояний" Тогда
			ТабличноеПоле.ТолькоПросмотр = Истина;
		Иначе
			НоваяКолонкаТаблицы = Элементы.Добавить("ТабличноеПоле"+Выборка.Имя+"НомерСтроки", Тип("ПолеФормы"), Элементы["Таб_"+Выборка.Имя]);
			НоваяКолонкаТаблицы.ПутьКДанным = "ТабличноеПоле"+Выборка.Имя+"."+"НомерСтроки";
			НоваяКолонкаТаблицы.Заголовок = "№";
			НоваяКолонкаТаблицы.Ширина = 2;
		КонецЕсли;
		
		// Добавляем период
		Для Каждого Поле Из Метаданные["Регистры"+Выборка.Вид][Выборка.Имя].СтандартныеРеквизиты Цикл
			
			ТекПоле = Строка(Поле.Имя);
			
			Если ТекПоле = "Период" Тогда
				НоваяКолонкаТаблицы = Элементы.Добавить("ТабличноеПоле"+Выборка.Имя+ТекПоле, Тип("ПолеФормы"), Элементы["Таб_"+Выборка.Имя]);
				НоваяКолонкаТаблицы.ПутьКДанным = "ТабличноеПоле"+Выборка.Имя+"."+ТекПоле;
			КонецЕсли;
			
			// Аренда
			Если ТекПоле = "ВидРасчета" ИЛИ ТекПоле = "ПериодДействия"
				ИЛИ ТекПоле = "ПериодДействияНачало" ИЛИ ТекПоле = "ПериодДействияКонец" Тогда
				НоваяКолонкаТаблицы = Элементы.Добавить(
					"ТабличноеПоле" + Выборка.Имя + ТекПоле,
					Тип("ПолеФормы"),
					Элементы["Таб_" + Выборка.Имя]);
				НоваяКолонкаТаблицы.ПутьКДанным = "ТабличноеПоле" + Выборка.Имя + "." + ТекПоле;
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавляем колонки в табличный документ.
		Для Каждого Поле Из Метаданные["Регистры"+Выборка.Вид][Выборка.Имя].Измерения Цикл
			
			ТекПоле = Строка(Поле.Имя);
			
			Если ТекПоле = "Активность" Или ТекПоле = "Регистратор" Или ТекПоле = "ВидДвижения" Или ТекПоле = "Период" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяКолонкаТаблицы = Элементы.Добавить("ТабличноеПоле"+Выборка.Имя+ТекПоле, Тип("ПолеФормы"), Элементы["Таб_"+Выборка.Имя]);
			НоваяКолонкаТаблицы.ПутьКДанным = "ТабличноеПоле"+Выборка.Имя+"."+ТекПоле;
			
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные["Регистры"+Выборка.Вид][Выборка.Имя].Реквизиты Цикл
			
			ТекПоле = Строка(Поле.Имя);
			
			Если ТекПоле = "Активность" Или ТекПоле = "Регистратор" Или ТекПоле = "ВидДвижения" Или ТекПоле = "Период" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяКолонкаТаблицы = Элементы.Добавить("ТабличноеПоле"+Выборка.Имя+ТекПоле, Тип("ПолеФормы"), Элементы["Таб_"+Выборка.Имя]);
			НоваяКолонкаТаблицы.ПутьКДанным = "ТабличноеПоле"+Выборка.Имя+"."+ТекПоле;
			
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные["Регистры"+Выборка.Вид][Выборка.Имя].Ресурсы Цикл
			
			ТекПоле = Строка(Поле.Имя);
			
			Если ТекПоле = "Активность" Или ТекПоле = "Регистратор" Или ТекПоле = "ВидДвижения" Или ТекПоле = "Период" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяКолонкаТаблицы = Элементы.Добавить("ТабличноеПоле"+Выборка.Имя+ТекПоле, Тип("ПолеФормы"), Элементы["Таб_"+Выборка.Имя]);
			НоваяКолонкаТаблицы.ПутьКДанным = "ТабличноеПоле"+Выборка.Имя+"."+ТекПоле;
		КонецЦикла;
		
		ТабличноеПоле.УстановитьДействие("Выбор", "ТабличноеПолеВыбор");
		
	КонецЦикла;
	
	// ПОСЛЕДНЯЯ СТРАНИЦА: "Активы и пассивы".
	ТабличныйДокумент = Элементы.Добавить("ПолеТабличногоДокументаАктивыИПассивы", Тип("ПолеФормы"), Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.АктивыИПассивы);
	ТабличныйДокумент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
	ТабличныйДокумент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТабличныйДокумент.ПутьКДанным = "Таб_АктивыИПассивы";
	ТабличныйДокумент.УстановитьДействие("ОбработкаРасшифровки", "Подключаемый_ОтчетТабличныйДокументОбработкаРасшифровки");
	
	// Заполним табличный документ при помощи отчета "Движения документа".
	УстановитьПривилегированныйРежим(Истина);
	Отчет = Отчеты.АктивыИПассивы.Создать();	
	Документ = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Документ.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Документ");
	Документ.ПравоеЗначение = Объект.ВыбранныйДокумент;
	Документ.Использование  = Истина;
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Объект.ВыбранныйДокумент.Дата);
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",  Объект.ВыбранныйДокумент.Дата);
	СтандартнаяОбработка    = Истина;
	Отчет.СкомпоноватьРезультат(ЭтотОбъект.Таб_АктивыИПассивы, ДанныеРасшифровки);
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при обработке расшифровки.
//
// Параметры:
//  Элемент				 - 	 - 
//  Расшифровка			 - 	 - 
//  СтандартнаяОбработка - 	 - 
//
&НаКлиенте
Процедура Подключаемый_ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Ссылка = ПолучитьИзВременногоХранилищаДанныеРасшифровки(Расшифровка);
	Если ПроверитьЗначениеСсылочногоТипа(Ссылка) Тогда
		ОткрытьФорму(ПолучитьИмяСправочника(Ссылка)
				+".ФормаОбъекта", Новый Структура("Ключ",Ссылка),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

// Обработчик события возникающего на клиенте при двойном щелчке мыши (нажатии Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока      - Ссылка       - Значение выбранной строки.
//  Поле                 - ПолеФормы    - Активное поле.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ТабличноеПолеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - 4);
	ИмяТекущегоЭлемента = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ТабличноеПоле"+ИмяРегистра, "");
	
	Если ЕстьРеквизитНаКлиенте(ТекущиеДанные, ИмяТекущегоЭлемента) Тогда
		
		Если ПроверитьВыбранныйОбъект(ТекущиеДанные[ИмяТекущегоЭлемента]) Тогда
			ПоказатьЗначение( , ТекущиеДанные[ИмяТекущегоЭлемента]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеВыбор()

// Процедура для проверки наличия выбранного элемента соответствующего объекта в метаданных.
//
&НаСервере
Функция ПроверитьВыбранныйОбъект(ВыбранныйЭлемент)
	
	Результат = Ложь;
	
	// Проверим есть ли соответствующий объект выбранному поля за исключением перечислений.
	Если Метаданные.НайтиПоТипу(ТипЗнч(ВыбранныйЭлемент)) <> Неопределено 
		И Метаданные.Перечисления.Найти(ВыбранныйЭлемент.Метаданные().Имя) = Неопределено Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьВыбранныйОбъект()

// Функция возвращает имя справочника по ссылке.
//
// Параметры:
//	Ссылка - СправочникСсылка.* - Ссылка, для которой выполняется проверка.
//	
// Возвращаемое значение:
//	Строка - имя справочника.
//
&НаСервере
Функция ПолучитьИмяСправочника(Ссылка)
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
КонецФункции // ПроверитьНаПринадлежностьНоменклатуры()

// Функция выполняет определение типа ссылки.
//
// Параметры:
//	Ссылка - ЛюбоеЗначение - Значение, для которого выполняется проверка.
//	
// Возвращаемое значение:
//	Булево - Это ссылка на справочник (истина).
//
&НаСервере
Функция ПроверитьЗначениеСсылочногоТипа(Ссылка)
	Возврат Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
КонецФункции // ПроверитьНаПринадлежностьНоменклатуры()

// Функция позволяет получить из временного хранилища данные расшифровки.
//
// Параметры:
//  Расшифровка	 - 	 -. 
// 
// Возвращаемое значение:
//   - .
//
&НаСервере
Функция ПолучитьИзВременногоХранилищаДанныеРасшифровки(Расшифровка)
	ДанныеРасшифровкиИзВременногоХранилища = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Возврат ДанныеРасшифровкиИзВременногоХранилища.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
КонецФункции

&НаСервере
Функция ЕстьПравоПросмотрНаРегистр(РегистрыДокумента, ИмяРегистра)
	
	Для Каждого СтрокаТаблицы Из РегистрыДокумента Цикл
		Если СтрокаТаблицы.МетаданныеРегистра.Имя = ИмяРегистра Тогда
			Возврат СтрокаТаблицы.ПравоДоступно; 	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВывестиИнформациюОНедоступностиПрав(ТабДокумент)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.Область("R3C1").Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
	ТабДокумент.Область("R3C1").ГоризонтальноеПоложениеКартинки = ГоризонтальноеПоложение.Центр; 
    ТабДокумент.Область("R3C2").Текст = "Недостаточно прав для просмотра движений";
	ТабДокумент.Область("R3C2").ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
КонецФункции

&НаСервере
Процедура ПроверитьПравоПросмотрНаРегистры(РегистрыДокумента)

	Для Каждого СтрокаТаблицы Из РегистрыДокумента Цикл
		СтрокаТаблицы.ПравоДоступно = ПравоДоступа("Просмотр", СтрокаТаблицы.МетаданныеРегистра)	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРегистрВКоллекцию(РегистрыДокумента, ТекРегистр)
	
	НоваяСтрока = РегистрыДокумента.Добавить();
	НоваяСтрока.МетаданныеРегистра = ТекРегистр; 
	НоваяСтрока.ПравоДоступно = Ложь;
	
КонецПроцедуры

#КонецОбласти

