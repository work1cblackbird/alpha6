//******************************************************//
//                                                      //
// Модуль основной формы обработки Обмен с Axalta v_1.3 //
//                                                      //
//******************************************************//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// получение параметров запуска обработки и настройка формы
	ЭтоПодборВДокумент = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЭтоПодборВДокумент", Ложь);
	Элементы.СмесиПометка.Заголовок = ?(ЭтоПодборВДокумент, "ВЫБРАТЬ в документ", "Создать документ");
	Элементы.СмесиПометка.Подсказка = ?(ЭтоПодборВДокумент, "ВЫБРАТЬ в документ комплектация в качестве комплекта.", "Создать документ комплектация с данным элементов в качестве комплекта.");
	Элементы.ПодобратьВДокументы.Видимость         = ЭтоПодборВДокумент;
	Элементы.ПодобратьВДокументы.КнопкаПоУмолчанию = ЭтоПодборВДокумент;
	Элементы.СоздатьДокументы.Видимость            = НЕ ЭтоПодборВДокумент;
	Элементы.СоздатьДокументы.КнопкаПоУмолчанию    = НЕ ЭтоПодборВДокумент;
	
	// регламентные действия
	УправлениеДиалогомНаСервере();
	
	Объект.ЗаказНаряд    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЗаказНаряд", Документы.ЗаказНаряд.ПустаяСсылка());
	Объект.СкладКомпании = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СкладКомпании", ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойСкладКомпании));
	
	ПредыдущийРежимЗагрузки = Объект.РежимЗагрузки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Объект.РежимЗагрузки = Настройки.Получить("Объект.РежимЗагрузки");
	ЗагрузитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаменятьНоменклатуруПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗаданийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыборФайлаКаталога", ЭтотОбъект, Ложь);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыборФайлаКаталога", ЭтотОбъект, Истина);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ЗагрузитьНастройкиПоРежимуПредложено", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,
					НСтр(СтрШаблон("ru = 'Обновить настройки из сохраненных для режима <%1>?'", Объект.РежимЗагрузки)),
					РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СмесиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Смеси.ТекущиеДанные <> Неопределено Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ИдентификаторСтроки", Элементы.Смеси.ТекущиеДанные.ИдентификаторСтроки));
	Иначе
		ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ИдентификаторСтроки", " "));
	КонецЕсли;
	
	Элементы.СоставСмеси.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаКлиенте
Процедура СмесиПометкаПриИзменении(Элемент)
	
	Исключения = Неопределено;
	Если ЭтоПодборВДокумент И Элементы.Смеси.ТекущиеДанные.Пометка Тогда
		Исключения = Новый Массив;
		Исключения.Добавить(Объект.Смеси.НайтиПоИдентификатору(Элементы.Смеси.ТекущаяСтрока));
		
		ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Ложь, Объект.Смеси,, Исключения);
	КонецЕсли;
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(
		Элементы.Смеси.ТекущиеДанные.Пометка,
		Объект.СоставСмеси.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Элементы.Смеси.ТекущиеДанные.ИдентификаторСтроки)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоЗаказНарядуПриИзменении(Элемент)
	
	Если ОтобратьПоЗаказНаряду Тогда
		Элементы.Смеси.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ЗаказНаряд", Объект.ЗаказНаряд));
	Иначе
		Элементы.Смеси.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядПриИзменении(Элемент)
	
	ОтобратьПоЗаказНарядуПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИмпортФайловИзКаталогаОбмена(Команда)
	
	РежимГлазурит = (Объект.РежимЗагрузки = ПредопределенноеЗначение("Перечисление.ОбменСAxaltaРежимыЗагрузки.Glasurit"));
	
	ПараметрыОповещения = Новый Структура("РежимГлазурит", РежимГлазурит);
	Оповещение = Новый ОписаниеОповещения("ИмпортИзКаталогаОбменаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	НачатьПоискФайлов(Оповещение, Объект.КаталогОбмена, ?(РежимГлазурит, "*.log", "*.xml"), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИзКаталогаОбменаЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
		ВызватьИсключение Нстр("ru = 'Операция не поддерживается в веб-клиенте.'");		
	#КонецЕсли
	
	РежимГлазурит = ДополнительныеПараметры.РежимГлазурит;
	
	Если НайденныеФайлы.Количество() = 0 Тогда // проверим есть ли файлы обмена
		ПоказатьПредупреждение(, "Нет файлов для обмена.");
		Возврат;
	КонецЕсли;
	
	СодержаниеФайлов.Очистить();
	Для Каждого Файл Из НайденныеФайлы Цикл
		//@skip-check type-not-defined
		ИзвлечениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя);
		НоваяСтрока = СодержаниеФайлов.Добавить();
		НоваяСтрока.ПолноеИмяФайла  = Файл.ПолноеИмя;
		НоваяСтрока.СодержаниеФайла = ИзвлечениеТекста.Прочитать();
	КонецЦикла;
	
	Если РежимГлазурит Тогда
		Результат = РазобратьСодержаниеФайловXMLДляРежимаGlasurit();
	Иначе
		Результат = РазобратьСодержаниеФайловXMLДляРежимаColorNetPro();
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
	
	// сразу установим текущую строку
	Если Объект.Смеси.Количество() > 0 Тогда
		Элементы.Смеси.ТекущаяСтрока = Объект.Смеси[0].ПолучитьИдентификатор();
		СмесиПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СмесиУстановитьПометки(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Истина, Объект.Смеси);
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Истина, Объект.СоставСмеси);
	
КонецПроцедуры

&НаКлиенте
Процедура СмесиСнятьФлажки(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Ложь, Объект.Смеси);
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Ложь, Объект.СоставСмеси);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСмесиУстановитьФлажки(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Истина, Объект.СоставСмеси);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСмесиСнятьФлажки(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Ложь, Объект.СоставСмеси);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если НеВозможноСоздатьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если СоздатьДокументыНаСервере() Тогда
		ПеренестиЗагруженныеФайлы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВДокументы(Команда)
	
	Если НеВозможноСоздатьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Неопределено;
	Если ДанныеДляЗаполненияДокументаКомплектации(Результат) Тогда
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗагруженныеФайлы()
	ПутиКФайлам = Новый Массив;
	
	// сформируем список удаляемых файлов
	Для Каждого Строка Из Объект.Смеси Цикл
		Если НЕ Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПутиКФайлам.Найти(Строка.ПутьКФайлу) = Неопределено Тогда
			ПутиКФайлам.Добавить(Строка.ПутьКФайлу);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Файл Из ПутиКФайлам Цикл
		НачатьПеремещениеФайла(
			Неопределено,
			Файл, 
			Объект.КаталогОбмена + "\" + Объект.ЗаказНаряд.УникальныйИдентификатор() + Новый УникальныйИдентификатор());
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает русский текст из транслитерированного
&НаСервере
Функция ОбратнаяТранслитерация(Текст)
	// Заполняем список соответствий
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("y","й");
	СписокСоответствийТранслитерации.Добавить("tz","ц");
	СписокСоответствийТранслитерации.Добавить("u","у");
	СписокСоответствийТранслитерации.Добавить("k","к");
	СписокСоответствийТранслитерации.Добавить("e","е");
	СписокСоответствийТранслитерации.Добавить("n","н");
	СписокСоответствийТранслитерации.Добавить("g","г");
	СписокСоответствийТранслитерации.Добавить("sh","ш");
	СписокСоответствийТранслитерации.Добавить("shch","щ");
	СписокСоответствийТранслитерации.Добавить("z","з");
	СписокСоответствийТранслитерации.Добавить("kh","х");
	СписокСоответствийТранслитерации.Добавить("f","ф");
	СписокСоответствийТранслитерации.Добавить("yi","ы");
	СписокСоответствийТранслитерации.Добавить("v","в");
	СписокСоответствийТранслитерации.Добавить("a","а");
	СписокСоответствийТранслитерации.Добавить("p","п");
	СписокСоответствийТранслитерации.Добавить("r","р");
	СписокСоответствийТранслитерации.Добавить("o","о");
	СписокСоответствийТранслитерации.Добавить("l","л");
	СписокСоответствийТранслитерации.Добавить("d","д");
	СписокСоответствийТранслитерации.Добавить("zh","ж");
	СписокСоответствийТранслитерации.Добавить("ye","э");
	СписокСоответствийТранслитерации.Добавить("ya","я");
	СписокСоответствийТранслитерации.Добавить("ch","ч");
	СписокСоответствийТранслитерации.Добавить("s","с");
	СписокСоответствийТранслитерации.Добавить("m","м");
	СписокСоответствийТранслитерации.Добавить("i","и");
	СписокСоответствийТранслитерации.Добавить("t","т");
	СписокСоответствийТранслитерации.Добавить("'","ь");
	СписокСоответствийТранслитерации.Добавить("b","б");
	СписокСоответствийТранслитерации.Добавить("yu","ю");
	
	ДлинаТекста = СтрДлина(Текст);
	РезультирующийТекст = "";
	
	Длина=1;
	Пока Длина<=ДлинаТекста Цикл
		// поищем сначала совпадения по 3-м символам
		Если НЕ Длина+2>ДлинаТекста Тогда
			Символ = Сред(Текст,Длина,3);
			ПервыйЗаглавный3 = КодСимвола(Лев(Символ,1))>=65 и КодСимвола(Лев(Символ,1))<=90;
			Перевод3 = СписокСоответствийТранслитерации.НайтиПоЗначению(НРег(Символ));
		Иначе
			 Перевод3=Неопределено
		КонецЕсли;
		Если Перевод3=Неопределено Тогда
			// смотрим на 2 символа :)
			Если НЕ Длина+1>ДлинаТекста Тогда
				Символ = Сред(Текст,Длина,2);
				ПервыйЗаглавный2 = КодСимвола(Лев(Символ,1))>=65 и КодСимвола(Лев(Символ,1))<=90;
				Перевод2 = СписокСоответствийТранслитерации.НайтиПоЗначению(НРег(Символ));
			Иначе
				Перевод2 = Неопределено
			КонецЕсли;
			Если Перевод2 = Неопределено тогда
				// смотрим на один символ :))))
				Символ = Сред(Текст,Длина,1);
				ПервыйЗаглавный1 = КодСимвола(Лев(Символ,1))>=65 и КодСимвола(Лев(Символ,1))<=90;
				Перевод1 = СписокСоответствийТранслитерации.НайтиПоЗначению(НРег(Символ));
				Если Перевод1 = Неопределено Тогда //ну тогда оставляем этот символ как есть
					РезультирующийТекст = РезультирующийТекст+Символ;
				Иначе
					Если ПервыйЗаглавный1 И Символ<>"'" Тогда
						РезПеревод = ВРег(Перевод1);
					Иначе
						РезПеревод = Перевод1
					КонецЕсли;
					РезультирующийТекст = РезультирующийТекст+РезПеревод;
				КонецЕсли;
				Длина=Длина+1
			Иначе
				Если ПервыйЗаглавный2 Тогда
					РезПеревод = ВРег(Лев(Перевод2,1))+Сред(Перевод2,2);
				Иначе
					РезПеревод = Перевод2
				КонецЕсли;
				РезультирующийТекст = РезультирующийТекст+РезПеревод;
				
				Длина=Длина+2
			КонецЕсли;
		Иначе
			Если ПервыйЗаглавный3 Тогда
				РезПеревод = ВРег(Лев(Перевод3,1))+Сред(Перевод3,2);
			Иначе
				РезПеревод = Перевод3
			КонецЕсли;
			РезультирующийТекст = РезультирующийТекст+РезПеревод;
			Длина=Длина+3
		КонецЕсли;
	КонецЦикла;
	Возврат РезультирующийТекст;
КонецФункции // ОбратнаяТранслитерация()

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	Элементы.НоменклатураЗаменитель.Доступность               = Объект.ЗаменятьНоменклатуру;
	Элементы.НоменклатураЗаменитель.АвтоОтметкаНезаполненного = Объект.ЗаменятьНоменклатуру;
	
	ЭтоГлазурит = (Объект.РежимЗагрузки = Перечисления.ОбменСAxaltaРежимыЗагрузки.Glasurit);
	Элементы.СмесиЕдиницаИзмерения.Видимость = ЭтоГлазурит;
	Элементы.СмесиКоличество.Видимость       = ЭтоГлазурит;
	Элементы.СоставСмесиКоличествоВЛитрах.Видимость = НЕ ЭтоГлазурит;
	Элементы.СоставСмесиКоличествоВКилограммах.Заголовок = ?(ЭтоГлазурит, "Количество", "Количество в граммах");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(Знач СохраняемыеРеквизиты = "", ДляПредыдущегоРежима = Ложь)
	
	Если ПустаяСтрока(СохраняемыеРеквизиты) Тогда
		СохраняемыеРеквизиты = "ФайлЗаданий,КаталогОбмена,НоменклатураЗаменитель,ЗаменятьНоменклатуру,Производитель,ГруппаНоменклатуры,СкладКомпании,Производитель,Маляр,Колорист,ДобавлятьСтрокиВЗаказНаряд";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РежимЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты = СтрРазделить(СохраняемыеРеквизиты, ",", Ложь);
	СохраняемыеНастройки = Новый Структура;
	
	Для Каждого Реквизит Из СохраняемыеРеквизиты Цикл
		Если ЕстьРеквизитНаКлиенте(Объект, СокрЛП(Реквизит)) Тогда
			СохраняемыеНастройки.Вставить(СокрЛП(Реквизит), Объект[СокрЛП(Реквизит)]);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("ОбменСAxalta", "Режим"+?(ДляПредыдущегоРежима, Строка(ПредыдущийРежимЗагрузки), Строка(Объект.РежимЗагрузки)), СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки(Знач ЗагружаемыеРеквизиты = "")
	
	Если ПустаяСтрока(ЗагружаемыеРеквизиты) Тогда
		ЗагружаемыеРеквизиты = "ФайлЗаданий,КаталогОбмена,НоменклатураЗаменитель,ЗаменятьНоменклатуру,Производитель,ГруппаНоменклатуры,СкладКомпании,Производитель,Маляр,Колорист,ДобавлятьСтрокиВЗаказНаряд";
	КонецЕсли;
	
	ЗагруженныеНастройки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ОбменСAxalta", "Режим"+Строка(Объект.РежимЗагрузки));
	ЗагружаемыеРеквизиты = СтрРазделить(ЗагружаемыеРеквизиты, ",");
	Если ЗагружаемыеРеквизиты <> Неопределено Тогда
		Для Каждого Реквизит Из ЗагружаемыеРеквизиты Цикл
			Объект[Реквизит] = ПолучитьЗначениеПараметраСтруктуры(ЗагруженныеНастройки, Реквизит);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборФайлаКаталога(РасширениеРаботыСФайламиПодключено, РежимДиалогаВыбораФайлаВыборКаталога) Экспорт
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		ДиалогВыбора = Новый ДиалогВыбораФайла(?( НЕ РежимДиалогаВыбораФайлаВыборКаталога, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.ВыборКаталога));
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.Заголовок = НСтр(СтрШаблон("ru = '%1'", ?( НЕ РежимДиалогаВыбораФайлаВыборКаталога, "Выбор файла задания", "Выбор каталога импорта")));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ДиалогВыбора", ДиалогВыбора);
		ПараметрыОповещения.Вставить("РежимДиалогаВыбораФайлаВыборКаталога", РежимДиалогаВыбораФайлаВыборКаталога);
		ДиалогВыбора.Показать(
			Новый ОписаниеОповещения("Подключаемый_ВыборФайлаКаталогаЗавершение", ЭтотОбъект, ПараметрыОповещения));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборФайлаКаталогаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	РежимДиалогаВыбораФайлаВыборКаталога = ДополнительныеПараметры.РежимДиалогаВыбораФайлаВыборКаталога;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Если НЕ РежимДиалогаВыбораФайлаВыборКаталога Тогда
			Объект.ФайлЗаданий = ДиалогВыбора.ПолноеИмяФайла;
		Иначе
			Объект.КаталогОбмена = ДиалогВыбора.Каталог;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьНастройкиПоРежимуПредложено(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки(, Истина);
		ЗагрузитьНастройки();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПредыдущийРежимЗагрузки = Объект.РежимЗагрузки;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСодержаниеФайловXMLДляРежимаGlasurit()
	Результат = Новый Структура("Ошибка,ОписаниеОшибки", Ложь,"");
	
	Объект.Смеси.Очистить(); Объект.СоставСмеси.Очистить();
	
	Для Каждого СодержаниеФайла Из СодержаниеФайлов Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СодержаниеФайла.СодержаниеФайла);
		ПрочитанныйОбъект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		ОбязательныеРеквизитыСмеси       = Новый Структура("jobnumber,mixsize,mixunit,colorcode,colorname,ingredient");
		ОбязательныеРеквизитыИнгредиента = Новый Структура("code,density,amount");
		ОбязательныеРеквизитыСмеси.ingredient = ОбязательныеРеквизитыИнгредиента;
		
		Если ПрочитанныйОбъект.Свойства().Получить("MIX") <> Неопределено Тогда
			Для Каждого СтруктураСмеси Из ПрочитанныйОбъект.MIX Цикл
				ОписаниеОшибки = "";
				Если СтруктураXDTOОбъектаПравильная(СтруктураСмеси, ОбязательныеРеквизитыСмеси, ОписаниеОшибки) Тогда
					// заполняем строку таблицы
					НоваяСтрокаСмеси = Объект.Смеси.Добавить();
					НоваяСтрокаСмеси.ИдентификаторСтроки = Новый УникальныйИдентификатор;
					НоваяСтрокаСмеси.ПутьКФайлу          = СодержаниеФайла.ПолноеИмяФайла;
					НоваяСтрокаСмеси.КодКраски           = ?(ПустаяСтрока(СтруктураСмеси.colorcode), СтруктураСмеси.colorname, СтруктураСмеси.colorcode);
					НоваяСтрокаСмеси.НаименованиеКраски  = СтруктураСмеси.colorname;
					
					// найдем заказ-наряд
					НомерРусскимиСимволами = ОбратнаяТранслитерация(СтруктураСмеси.jobnumber);
					НоваяСтрокаСмеси.ЗаказНаряд = Документы.ЗаказНаряд.НайтиПоНомеру(НомерРусскимиСимволами);
					Если НоваяСтрокаСмеси.ЗаказНаряд.Пустая() Тогда
						ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось найти заказ-наряд №%1.'"), НомерРусскимиСимволами));
					КонецЕсли;
					
					НоваяСтрокаСмеси.Количество = Число(СтруктураСмеси.mixsize);
					
					// найдем единицу измерения
					НайденнаяЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(СокрЛП(СтруктураСмеси.mixunit),,, Справочники.ТипыНоменклатуры.ЛКМ);
					Если НайденнаяЕдиница.Пустая() Тогда // если не нашли создадим
						НоваяЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
						
						НоваяЕдиницаИзмерения.Владелец                = Справочники.ТипыНоменклатуры.ЛКМ;
						НоваяЕдиницаИзмерения.Наименование            = СокрЛП(СтруктураСмеси.mixunit);
						НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору = НоваяЕдиницаИзмерения.Владелец.ОсновнаяБазоваяЕдиницаИзмерения;
						НоваяЕдиницаИзмерения.Коэффициент             = 1;
						НоваяЕдиницаИзмерения.УстановитьНовыйКод();
						НоваяЕдиницаИзмерения.ОбменДанными.Загрузка   = Истина;
						
						НоваяЕдиницаИзмерения.Записать();
						ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"Смеси",НоваяСтрокаСмеси.НомерСтроки, "ЕдиницаИзмерения");
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(НСтр("ru = 'Создан новый элемент справочника ""Единицы измерения"" <%1>. По умолчанию установлен коэффициент 1.'"), НоваяЕдиницаИзмерения.Ссылка),
							,
							ПутьКТабличнойЧасти,
							"Объект");
						
						НайденнаяЕдиница = НоваяЕдиницаИзмерения.Ссылка;
					КонецЕсли;
					
					НоваяСтрокаСмеси.ЕдиницаИзмерения = НайденнаяЕдиница;
					НоваяСтрокаСмеси.Номенклатура     = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрокаСмеси.НаименованиеКраски);
					НоваяСтрокаСмеси.НомерКартинки    = ?(ЗначениеЗаполнено(НоваяСтрокаСмеси.Номенклатура), 1, 0);
					
					// заполняем состав
					Для Каждого СтруктураСмесиИнгредиента Из СтруктураСмеси.ingredient Цикл
						НоваяСтрокаИнгредиента = Объект.СоставСмеси.Добавить();
						
						НоваяСтрокаИнгредиента.ИдентификаторСтроки    = НоваяСтрокаСмеси.ИдентификаторСтроки;
						НоваяСтрокаИнгредиента.КодКраски              = СтруктураСмесиИнгредиента.code;
						НоваяСтрокаИнгредиента.НаименованиеКраски     = СтруктураСмесиИнгредиента.code;
						НоваяСтрокаИнгредиента.КоличествоВКилограммах = СтруктураСмесиИнгредиента.amount;
						
						// поиск номенклатуры
						НоваяСтрокаИнгредиента.Номенклатура  = Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(НоваяСтрокаИнгредиента.НаименованиеКраски));
						НоваяСтрокаИнгредиента.НомерКартинки = ?(ЗначениеЗаполнено(НоваяСтрокаИнгредиента.Номенклатура), 1, 0);
					КонецЦикла;
				Иначе
					// выводим ошибки
					Результат.Ошибка         = Истина;
					Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + ?(ПустаяСтрока(Результат.ОписаниеОшибки), "", "," + Символы.ПС) +
						СтрШаблон(НСтр("ru = 'Неверный формат файла %2. Не хватает ключевых полей %1.'"), ОписаниеОшибки, СодержаниеФайла.ПолноеИмяФайла);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат.Ошибка         = Истина;
			Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Неверный формат объекта. Не хватает ключевого поля <MIX>.'"));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция РазобратьСодержаниеФайловXMLДляРежимаColorNetPro()
	Результат = Новый Структура("Ошибка,ОписаниеОшибки", Ложь,"");
	
	Объект.Смеси.Очистить(); Объект.СоставСмеси.Очистить();
	
	Для Каждого СодержаниеФайла Из СодержаниеФайлов Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СодержаниеФайла.СодержаниеФайла);
		ПрочитанныйОбъект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		ОбязательныеПоля = Новый Структура;
		ОбязательныеПоля.Вставить("FormData", Новый Структура("DatabaseItems,JobItems,MixRec",
			Новый Структура("MfInfo,Key", Новый Структура("ColCode,ColName"), Новый Структура("Quality")),
			Новый Структура("Customer", Новый Структура("CarReg")),
			Новый Структура("Product", Новый Структура("TintCode,TintName,Density,WeighedAbsMass"))));
			
		ОписаниеОшибки = "";
		Если СтруктураXDTOОбъектаПравильная(ПрочитанныйОбъект, ОбязательныеПоля, ОписаниеОшибки) Тогда
			НоваяСтрокаСмеси = Объект.Смеси.Добавить();
			НоваяСтрокаСмеси.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			НоваяСтрокаСмеси.ПутьКФайлу          = СодержаниеФайла.ПолноеИмяФайла;
			
			НомерЗаказНаряда = ОбратнаяТранслитерация(ВычленитьНомерЗаказНарядаИзОписания(ПрочитанныйОбъект.FormData.JobItems.Customer.CarReg));
			НоваяСтрокаСмеси.ЗаказНаряд = Документы.ЗаказНаряд.НайтиПоНомеру(НомерЗаказНаряда);
			Если НоваяСтрокаСмеси.ЗаказНаряд.Пустая() Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось найти заказ-наряд №%1.'"), НомерЗаказНаряда));
			КонецЕсли;
			
			// загрузим ингредиенты
			СтрокаПервогоИнгредиента = Неопределено;
			Для Каждого Ингредиент Из ПрочитанныйОбъект.FormData.MixRec.Product Цикл
				НоваяСтрокаИнгредиента = Объект.СоставСмеси.Добавить();
				
				НоваяСтрокаИнгредиента.ИдентификаторСтроки    = НоваяСтрокаСмеси.ИдентификаторСтроки;
				НоваяСтрокаИнгредиента.КодКраски              = Ингредиент.TintCode;
				НоваяСтрокаИнгредиента.НаименованиеКраски     = Ингредиент.TintName;
				НоваяСтрокаИнгредиента.КоличествоВКилограммах = Ингредиент.WeighedAbsMass;
				НоваяСтрокаИнгредиента.КоличествоВЛитрах      = ?(ЗначениеЗаполнено(Ингредиент.Density), Ингредиент.WeighedAbsMass/Ингредиент.Density, 0);
				
				НоваяСтрокаИнгредиента.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрокаИнгредиента.НаименованиеКраски);
				
				НоваяСтрокаИнгредиента.НомерКартинки = ?(ЗначениеЗаполнено(НоваяСтрокаИнгредиента.Номенклатура), 1, 0);
				
				Если СтрокаПервогоИнгредиента = Неопределено Тогда
					СтрокаПервогоИнгредиента = НоваяСтрокаИнгредиента;
				КонецЕсли;
			КонецЦикла;
			
			// продолжим заполнение строки смеси
			Приставка = ПолучитьПриставку(ПрочитанныйОбъект.FormData.DatabaseItems.Key.Quality);
			Если НРег(Приставка) = "краска" Тогда
				НоваяСтрокаСмеси.КодКраски = ПрочитанныйОбъект.FormData.DatabaseItems.MfInfo.ColCode;
				Если НЕ НоваяСтрокаСмеси.ЗаказНаряд.Пустая() И НЕ НоваяСтрокаСмеси.ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль.Пустая() Тогда
					НаименованиеАвтомобиль = НоваяСтрокаСмеси.ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль.Модель.НаименованиеПолное;
				Иначе
					НаименованиеАвтомобиль = "Не указан автомобиль";
				КонецЕсли;
				НоваяСтрокаСмеси.НаименованиеКраски = СтрШаблон("%1 %2 %3", Приставка, НаименованиеАвтомобиль, НоваяСтрокаСмеси.КодКраски);
				
				// чтоб получить уникальный атрикул соберем его из кода и наименования
				НоваяСтрокаСмеси.КодКраски = Лев(НоваяСтрокаСмеси.КодКраски + ПрочитанныйОбъект.FormData.DatabaseItems.MfInfo.ColName, 25);
				
				НоваяСтрокаСмеси.Номенклатура  = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрокаСмеси.НаименованиеКраски);
				НоваяСтрокаСмеси.НомерКартинки = ?(ЗначениеЗаполнено(НоваяСтрокаСмеси.Номенклатура), 1, 0);
			ИначеЕсли СтрокаПервогоИнгредиента <> Неопределено Тогда
				// чтоб получить уникальный атрикул соберем его из кода и наименования
				НоваяСтрокаСмеси.КодКраски          = Лев(СокрЛП(СтрокаПервогоИнгредиента.КодКраски) + СокрЛП(СтрокаПервогоИнгредиента.НаименованиеКраски),25);
				НоваяСтрокаСмеси.НаименованиеКраски = СтрШаблон("%1 %2 %3", Приставка, СтрокаПервогоИнгредиента.КодКраски, СтрокаПервогоИнгредиента.НаименованиеКраски);
				
				НоваяСтрокаСмеси.Номенклатура  = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрокаСмеси.НаименованиеКраски);
				НоваяСтрокаСмеси.НомерКартинки = ?(ЗначениеЗаполнено(НоваяСтрокаСмеси.Номенклатура), 1, 0);
			КонецЕсли;
		Иначе
			// выводим ошибки
			Результат.Ошибка         = Истина;
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + ?(ПустаяСтрока(Результат.ОписаниеОшибки), "", "," + Символы.ПС) +
				СтрШаблон(НСтр("ru = 'Неверный формат файла %2. Не хватает ключевых полей %1.'"), ОписаниеОшибки, СодержаниеФайла.ПолноеИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СтруктураXDTOОбъектаПравильная(XDTOОбъект, ОбязательныеРеквизиты, ОписаниеОшибки)
	ВсеОК = Истина;
	
	Если ТипЗнч(XDTOОбъект) <> Тип("ОбъектXDTO") Тогда
		ОписаниеОшибки = НСтр("ru = 'Не верный тип объекта XDTO.'");
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбязательныеРеквизиты Цикл
		Если XDTOОбъект.Свойства().Получить(Реквизит.Ключ) = Неопределено Тогда
			ВсеОК = Ложь;
			ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", ", ") + СтрШаблон("<%1>", Реквизит.Ключ);
		КонецЕсли;
		
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда
			Если ТипЗнч(XDTOОбъект[Реквизит.Ключ]) = Тип("ОбъектXDTO") Тогда
				ВсеОК = ВсеОК И СтруктураXDTOОбъектаПравильная(XDTOОбъект[Реквизит.Ключ], Реквизит.Значение, ОписаниеОшибки);
			ИначеЕсли ТипЗнч(XDTOОбъект[Реквизит.Ключ]) = Тип("СписокXDTO") Тогда
				Для Каждого ЭлементСписка Из XDTOОбъект[Реквизит.Ключ] Цикл
					ВсеОК = ВсеОК И СтруктураXDTOОбъектаПравильная(ЭлементСписка, Реквизит.Значение, ОписаниеОшибки);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеОК;
КонецФункции

&НаСервере
Функция ВычленитьНомерЗаказНарядаИзОписания(ОписаниеЗаказНаряда)
	КорректныеСимволы	= "0123456789-АБВГДЕЁЖЗИКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзиклмнопрстуфхцчшщъыьэюяABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; Заказ = "";
	
	Для Индекс=1 По СтрДлина(ОписаниеЗаказНаряда) Цикл
		ТекСимвол = Сред(ОписаниеЗаказНаряда,Индекс,1);
		Если ТекСимвол = " " ИЛИ ТекСимвол=Символы.Таб Тогда
			Прервать;
		ИначеЕсли Найти(КорректныеСимволы, ТекСимвол)>0 Тогда
			Заказ = Заказ + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заказ;
КонецФункции

&НаСервере
Функция ПолучитьПриставку(Значение, ЗначениеПоУмолчанию = "краска")
	Макет = Обработки.ОбменСAxalta.ПолучитьМакет("Макет");
	
	НайденнаяОбласть = Макет.НайтиТекст(СокрЛП(Значение),,,,Истина);
	Если НайденнаяОбласть<>Неопределено Тогда
		Рез = Макет.ПолучитьОбласть(НайденнаяОбласть.Верх,2,НайденнаяОбласть.Верх,2).ТекущаяОбласть.Текст;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ?(ПустаяСтрока(Рез),ЗначениеПоУмолчанию,Рез);
КонецФункции

&НаКлиенте
Функция НеВозможноСоздатьДокументы()
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ЗаказНаряд.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнен заказ-наряд для загрузки.'"),
			,
			"ЗаказНаряд",
			,
			ЕстьОшибки
		);
	КонецЕсли;
	
	Если Объект.ЗаменятьНоменклатуру И Объект.НоменклатураЗаменитель.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указана номенклатура для замены.'"),
			,
			"НоменклатураЗаменитель",
			,
			ЕстьОшибки
		);
	КонецЕсли;
	
	Если Объект.СкладКомпании.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнен склад компании.'"),
			,
			"СкладКомпании",
			,
			ЕстьОшибки
		);
	КонецЕсли;
	
	Если Объект.Смеси.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбраны смеси.'"),
			,
			"Смеси",
			, 
			ЕстьОшибки
		);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция НеВозможноСоздатьДокументыНаСервере()
	ЕстьОшибки = Ложь;
	
	Если Объект.ЗаказНаряд.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен ИЛИ
		Объект.ЗаказНаряд.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Заказ-наряд %1. Создание комплектации в производство не возможно.'"),
				НРег(Объект.ЗаказНаряд.Состояние)
			),
			,
			"ЗаказНаряд",, ЕстьОшибки
		);
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция СоздатьДокументыНаСервере()
	
	Если НеВозможноСоздатьДокументыНаСервере() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// обновим свойства заказ-наряда
	ОбновитьСвойстваЗаказНаряда();
	
	// создадим необходимую номенклатуру
	СоздатьНоменклатуру();
	
	// создаем документы
	Если СоздатьДокументыКомплектации() И Объект.РежимЗагрузки = Перечисления.ОбменСAxaltaРежимыЗагрузки.ColorNetPro Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДанныеДляЗаполненияДокументаКомплектации(СсылкаНаРезультат)
	
	Если НеВозможноСоздатьДокументыНаСервере() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// обновим свойства заказ-наряда
	ОбновитьСвойстваЗаказНаряда();
	
	// создадим необходимую номенклатуру
	СоздатьНоменклатуру();
	
	СтрокаСмеси = Объект.Смеси.НайтиСтроки(Новый Структура("Пометка", Истина))[0];
	
	ДокументКомплектация = Документы.Комплектация.СоздатьДокумент();
	ДокументКомплектация.Заполнить(Объект.ЗаказНаряд);
	
	// заполняем шапку
	ДокументКомплектация.ДокументОснование = Объект.ЗаказНаряд;
	ДокументКомплектация.СкладКомпании     = Объект.СкладКомпании;
	ДокументКомплектация.ХозОперация       = Справочники.ХозОперации.КомплектацияВПроизводство;
	ДокументКомплектация.Дата              = ТекущаяДата();
	ДокументКомплектация.СписаниеПоТЧ      = Истина;
	ДокументКомплектация.Комплект          = ?(Объект.ЗаменятьНоменклатуру, Объект.НоменклатураЗаменитель, СтрокаСмеси.Номенклатура);
	Документы.Комплектация.КомплектПриИзменении(ДокументКомплектация);
	
	Если Объект.РежимЗагрузки = Перечисления.ОбменСAxaltaРежимыЗагрузки.Glasurit Тогда
		ДокументКомплектация.КомплектЕдиницаИзмерения = СтрокаСмеси.ЕдиницаИзмерения;
	Иначе
		ДокументКомплектация.КомплектЕдиницаИзмерения = ДокументКомплектация.Комплект.ОсновнаяЕдиницаИзмерения;
	КонецЕсли;
	
	// заполняем таблиную часть
	Ингредиенты = Объект.СоставСмеси.НайтиСтроки(Новый Структура("ИдентификаторСтроки,Пометка", СтрокаСмеси.ИдентификаторСтроки, Истина));
	Для Каждого Ингредиент Из Ингредиенты Цикл
		НоваяСтрокаТоваров = ДокументКомплектация.Товары.Добавить();
		НоваяСтрокаТоваров.Номенклатура = Ингредиент.Номенклатура;
		Документы.Комплектация.ТоварыНоменклатураПриИзменении(ДокументКомплектация, НоваяСтрокаТоваров);
		
		РезультатПоискаЕдиницы = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("г",,, Справочники.ТипыНоменклатуры.ЛКМ);
		Если РезультатПоискаЕдиницы.Пустая() Тогда
			ЕдиницаГрамм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			ЕдиницаГрамм.УстановитьНовыйКод();
			ЕдиницаГрамм.Владелец                = Справочники.ТипыНоменклатуры.ЛКМ;
			ЕдиницаГрамм.Наименование            = "г";
			ЕдиницаГрамм.ЕдиницаПоКлассификатору = Справочники.ТипыНоменклатуры.ЛКМ.ОсновнаяБазоваяЕдиницаИзмерения;
			ЕдиницаГрамм.Коэффициент             = 0.001;
			ЕдиницаГрамм.ОбменДанными.Загрузка   = Истина;
			
			ЕдиницаГрамм.Записать();
			РезультатПоискаЕдиницы = ЕдиницаГрамм.Ссылка;
		КонецЕсли;
		
		НоваяСтрокаТоваров.ЕдиницаИзмерения = РезультатПоискаЕдиницы;
		Документы.Комплектация.ТоварыЕдиницаИзмеренияПриИзменении(ДокументКомплектация, НоваяСтрокаТоваров);
		
		НоваяСтрокаТоваров.Количество = Ингредиент.КоличествоВКилограммах;
		Документы.Комплектация.ТоварыКоличествоПриИзменении(ДокументКомплектация, НоваяСтрокаТоваров);
	КонецЦикла;
	
	Если Объект.РежимЗагрузки = Перечисления.ОбменСAxaltaРежимыЗагрузки.Glasurit Тогда
		ДокументКомплектация.КоличествоКомплектов = СтрокаСмеси.Количество;
	Иначе
		ДокументКомплектация.КоличествоКомплектов =
		ДокументКомплектация.Товары.Итог("Количество")/(1000*?(ЗначениеЗаполнено(ДокументКомплектация.КомплектЕдиницаИзмерения.Коэффициент),ДокументКомплектация.КомплектЕдиницаИзмерения.Коэффициент,1));
	КонецЕсли;
	
	Результат = Новый Структура("Товары", ДокументКомплектация.Товары.Выгрузить());
	Результат.Вставить("СписаниеПоТЧ", Истина);
	Результат.Вставить("Комплект"    , ДокументКомплектация.Комплект);
	Результат.Вставить("КомплектЕдиницаИзмерения" , ДокументКомплектация.КомплектЕдиницаИзмерения);
	Результат.Вставить("КоличествоКомплектов", ДокументКомплектация.КоличествоКомплектов);
	Результат.Вставить("ДокументОснование", ДокументКомплектация.ДокументОснование);
	Результат.Вставить("СкладКомпании", ДокументКомплектация.СкладКомпании);
	Если Объект.РежимЗагрузки = Перечисления.ОбменСAxaltaРежимыЗагрузки.ColorNetPro Тогда
		Результат.Вставить("ПутьКФайлуОбмена", СтрокаСмеси.ПутьКФайлу);
	КонецЕсли;
	Результат.Вставить("ДобавлятьСтрокиВЗаказНаряд", Объект.ДобавлятьСтрокиВЗаказНаряд);
	Результат.Вставить("КаталогОбмена"             , Объект.КаталогОбмена);
	
	СсылкаНаРезультат = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьДокументыКомплектации()
	ВсеОК = Истина;
	
	Если Объект.ДобавлятьСтрокиВЗаказНаряд Тогда
		ОбъектЗаказНаряд = Объект.ЗаказНаряд.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого СтрокаСмеси Из Объект.Смеси Цикл
		Если НЕ СтрокаСмеси.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументКомплектация = Документы.Комплектация.СоздатьДокумент();
		ДокументКомплектация.Заполнить(Объект.ЗаказНаряд);
		
		// заполняем шапку
		ДокументКомплектация.ДокументОснование = Объект.ЗаказНаряд;
		ДокументКомплектация.СкладКомпании     = Объект.СкладКомпании;
		ДокументКомплектация.ХозОперация       = Справочники.ХозОперации.КомплектацияВПроизводство;
		ДокументКомплектация.Дата              = ТекущаяДата();
		ДокументКомплектация.СписаниеПоТЧ      = Истина;
		ДокументКомплектация.Комплект          = ?(Объект.ЗаменятьНоменклатуру, Объект.НоменклатураЗаменитель, СтрокаСмеси.Номенклатура);
		Документы.Комплектация.КомплектПриИзменении(ДокументКомплектация);
		
		Если Объект.РежимЗагрузки = Перечисления.ОбменСAxaltaРежимыЗагрузки.Glasurit Тогда
			ДокументКомплектация.КомплектЕдиницаИзмерения = СтрокаСмеси.ЕдиницаИзмерения;
		Иначе
			ДокументКомплектация.КомплектЕдиницаИзмерения = ДокументКомплектация.Комплект.ОсновнаяЕдиницаИзмерения;
		КонецЕсли;
		
		// заполняем таблиную часть
		Ингредиенты = Объект.СоставСмеси.НайтиСтроки(Новый Структура("ИдентификаторСтроки,Пометка", СтрокаСмеси.ИдентификаторСтроки, Истина));
		Для Каждого Ингредиент Из Ингредиенты Цикл
			НоваяСтрокаТоваров = ДокументКомплектация.Товары.Добавить();
			НоваяСтрокаТоваров.Номенклатура = Ингредиент.Номенклатура;
			Документы.Комплектация.ТоварыНоменклатураПриИзменении(ДокументКомплектация, НоваяСтрокаТоваров);
			
			РезультатПоискаЕдиницы = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("г",,, Справочники.ТипыНоменклатуры.ЛКМ);
			Если РезультатПоискаЕдиницы.Пустая() Тогда
				ЕдиницаГрамм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаГрамм.УстановитьНовыйКод();
				ЕдиницаГрамм.Владелец                = Справочники.ТипыНоменклатуры.ЛКМ;
				ЕдиницаГрамм.Наименование            = "г";
				ЕдиницаГрамм.ЕдиницаПоКлассификатору = Справочники.ТипыНоменклатуры.ЛКМ.ОсновнаяБазоваяЕдиницаИзмерения;
				ЕдиницаГрамм.Коэффициент             = 0.001;
				ЕдиницаГрамм.ОбменДанными.Загрузка   = Истина;
				
				ЕдиницаГрамм.Записать();
				РезультатПоискаЕдиницы = ЕдиницаГрамм.Ссылка;
			КонецЕсли;
			
			НоваяСтрокаТоваров.ЕдиницаИзмерения = РезультатПоискаЕдиницы;
			Документы.Комплектация.ТоварыЕдиницаИзмеренияПриИзменении(ДокументКомплектация, НоваяСтрокаТоваров);
			
			НоваяСтрокаТоваров.Количество = Ингредиент.КоличествоВКилограммах;
			Документы.Комплектация.ТоварыКоличествоПриИзменении(ДокументКомплектация, НоваяСтрокаТоваров);
		КонецЦикла;
		
		Если Объект.РежимЗагрузки = Перечисления.ОбменСAxaltaРежимыЗагрузки.Glasurit Тогда
			ДокументКомплектация.КоличествоКомплектов = СтрокаСмеси.Количество;
		Иначе
			ДокументКомплектация.КоличествоКомплектов =
				ДокументКомплектация.Товары.Итог("Количество")/(1000*?(ЗначениеЗаполнено(ДокументКомплектация.КомплектЕдиницаИзмерения.Коэффициент),ДокументКомплектация.КомплектЕдиницаИзмерения.Коэффициент,1));
		КонецЕсли;
			
		Попытка
			ДокументКомплектация.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВсеОК = Ложь;
		КонецПопытки;
		
		Если Объект.ДобавлятьСтрокиВЗаказНаряд Тогда
			НайденныеСтроки = ОбъектЗаказНаряд.Товары.НайтиСтроки(Новый Структура("Номенклатура", ДокументКомплектация.Комплект));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаЗаказНаряда = ОбъектЗаказНаряд.Товары.Добавить();
				
				НоваяСтрокаЗаказНаряда.Номенклатура               = ДокументКомплектация.Комплект;
				НоваяСтрокаЗаказНаряда.ХарактеристикаНоменклатуры = ДокументКомплектация.ХарактеристикаКомплекта;
				Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(ОбъектЗаказНаряд, НоваяСтрокаЗаказНаряда);
				
				НоваяСтрокаЗаказНаряда.ЕдиницаИзмерения = ДокументКомплектация.КомплектЕдиницаИзмерения;
				Документы.ЗаказНаряд.ТоварыЕдиницаИзмеренияПриИзменении(ОбъектЗаказНаряд, НоваяСтрокаЗаказНаряда);
				
				НоваяСтрокаЗаказНаряда.Количество = ДокументКомплектация.КоличествоКомплектов;
				Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ОбъектЗаказНаряд, НоваяСтрокаЗаказНаряда);
				
				НоваяСтрокаЗаказНаряда.СуммаВсего = Документы.Комплектация.РассчитатьИтогиОперации(ДокументКомплектация).СуммаДокумента;
				Документы.ЗаказНаряд.ТоварыСуммаВсегоПриИзменении(ОбъектЗаказНаряд, НоваяСтрокаЗаказНаряда);
				
				Если ОбъектЗаказНаряд.ПричиныОбращения.Количество() > 0 Тогда
					НоваяСтрокаЗаказНаряда.ИдентификаторПричиныОбращения = ОбъектЗаказНаряд.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + ДокументКомплектация.КоличествоКомплектов;
				Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ОбъектЗаказНаряд, НайденныеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ДобавлятьСтрокиВЗаказНаряд Тогда
		Попытка
			ОбъектЗаказНаряд.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось добавить строку в заказ-наряд.'"));
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВсеОК;
КонецФункции

&НаСервере
Процедура СоздатьНоменклатуру()
	
	Для Каждого Ингредиент Из Объект.СоставСмеси Цикл
		Если НЕ Ингредиент.Пометка ИЛИ ЗначениеЗаполнено(Ингредиент.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		// повторим поиск в справочнике
		РезультатПоиска = Справочники.Номенклатура.НайтиПоНаименованию(Ингредиент.НаименованиеКраски);
		Если НЕ РезультатПоиска.Пустая() Тогда
			Ингредиент.Номенклатура = РезультатПоиска;
			Продолжить;
		КонецЕсли;
		
		// если не нашли создадим
		НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		
		НовыйЭлемент.Артикул                  = Ингредиент.КодКраски;
		НовыйЭлемент.Наименование             = Ингредиент.НаименованиеКраски;
		НовыйЭлемент.НаименованиеПолное       = Ингредиент.НаименованиеКраски;
		НовыйЭлемент.ТипНоменклатуры          = Справочники.ТипыНоменклатуры.ЛКМ;
		НовыйЭлемент.ВидНоменклатуры          = НовыйЭлемент.ТипНоменклатуры.ВидНоменклатуры;
		НовыйЭлемент.БазоваяЕдиницаИзмерения  = НовыйЭлемент.ТипНоменклатуры.ОсновнаяБазоваяЕдиницаИзмерения;
		НовыйЭлемент.ВалютаУчета              = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		НовыйЭлемент.СтавкаНДС                = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
		НовыйЭлемент.Родитель                 = Объект.ГруппаНоменклатуры;
		НовыйЭлемент.УстановитьНовыйКод();
		
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Записать();
		
		Ингредиент.Номенклатура = НовыйЭлемент.Ссылка;
		
		НовыйЭлемент.ОсновнаяЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(НовыйЭлемент.Ссылка);
		НовыйЭлемент.ОбменДанными.Загрузка    = Истина;
		НовыйЭлемент.Записать();
	КонецЦикла;
	
	Если НЕ Объект.ЗаменятьНоменклатуру Тогда
		Для Каждого Смесь Из Объект.Смеси Цикл
			Если НЕ Смесь.Пометка ИЛИ ЗначениеЗаполнено(Смесь.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			// повторим поиск в справочнике
			РезультатПоиска = Справочники.Номенклатура.НайтиПоНаименованию(Смесь.НаименованиеКраски);
			Если НЕ РезультатПоиска.Пустая() Тогда
				Смесь.Номенклатура = РезультатПоиска;
				Продолжить;
			КонецЕсли;
			
			// если не нашли создадим
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			
			НовыйЭлемент.Артикул                  = Смесь.КодКраски;
			НовыйЭлемент.Наименование             = Смесь.НаименованиеКраски;
			НовыйЭлемент.НаименованиеПолное       = Смесь.НаименованиеКраски;
			НовыйЭлемент.ТипНоменклатуры          = Справочники.ТипыНоменклатуры.ЛКМ;
			НовыйЭлемент.ВидНоменклатуры          = НовыйЭлемент.ТипНоменклатуры.ВидНоменклатуры;
			НовыйЭлемент.БазоваяЕдиницаИзмерения  = НовыйЭлемент.ТипНоменклатуры.ОсновнаяБазоваяЕдиницаИзмерения;
			НовыйЭлемент.ВалютаУчета              = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			НовыйЭлемент.СтавкаНДС                = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
			НовыйЭлемент.Родитель                 = Объект.ГруппаНоменклатуры;
			НовыйЭлемент.ОсновнаяЕдиницаИзмерения = Смесь.ЕдиницаИзмерения;
			НовыйЭлемент.УстановитьНовыйКод();
			
			НовыйЭлемент.ОбменДанными.Загрузка = Истина;
			НовыйЭлемент.Записать();
			
			Смесь.Номенклатура = НовыйЭлемент.Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЗаказНаряда()
	Если НЕ(Объект.Колорист.Пустая() И Объект.Маляр.Пустая()) И ЗначениеЗаполнено(Объект.ЗаказНаряд) Тогда
		Свойства = Новый Массив;
		Если НЕ Объект.Колорист.Пустая() Тогда
			Свойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Колорист);
		КонецЕсли;
		
		Если НЕ Объект.Маляр.Пустая() Тогда
			Свойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Маляр);
		КонецЕсли;
		
		ЗначенияСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект.ЗаказНаряд,, Ложь, Свойства);
		
		НеобходимоОбновить = Ложь;
		
		Если НЕ Объект.Колорист.Пустая() Тогда
			НайденнаяСтрока = ЗначенияСвойств.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Колорист, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ЗначенияСвойств.Добавить();
				НоваяСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Колорист;
				НоваяСтрока.Значение  = Объект.Колорист;
				НеобходимоОбновить = Истина;
			ИначеЕсли НайденнаяСтрока.Значение <> Объект.Колорист Тогда
				НайденнаяСтрока.Значение = Объект.Колорист;
				НеобходимоОбновить = Истина;
			КонецЕсли;;
		КонецЕсли;
		
		Если НЕ Объект.Маляр.Пустая() Тогда
			НайденнаяСтрока = ЗначенияСвойств.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Маляр, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ЗначенияСвойств.Добавить();
				НоваяСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Маляр;
				НоваяСтрока.Значение  = Объект.Маляр;
				НеобходимоОбновить = Истина;
			ИначеЕсли НайденнаяСтрока.Значение <> Объект.Маляр Тогда
				НайденнаяСтрока.Значение = Объект.Маляр;
				НеобходимоОбновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимоОбновить Тогда
			Попытка
				УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Объект.ЗаказНаряд, ЗначенияСвойств);
				ОбщегоНазначения.СообщитьПользователю("Обновлены свойства заказ-наряда.");
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон("Не удалось обновить свойства заказ-наряда(%1)", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
				);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
