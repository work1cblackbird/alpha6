///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы обработки "Настройки параметров учета"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЕстьЗаказы = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказы");
	ЕстьКомиссия = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнаяТорговля");
	
	Если Параметры.Свойство("ОбъектНастройки") Тогда
		ОбъектНастройки = Параметры.ОбъектНастройки;
	КонецЕсли;
	
	Дата = НачалоДня(ТекущаяДатаСеанса());
	
	// В зависимости от типа объекта выбираем соотв. вид назначения.
	ТипНастройки  = ТипЗнч(ОбъектНастройки);
	
	СкладКомпанияИтог = ?(ТипНастройки = Тип("СправочникСсылка.СкладыКомпании"), "Склад", "Компания");
	ПодразделениеСкладКомпанияИтог = ?(ТипНастройки = Тип("СправочникСсылка.ПодразделенияКомпании"), "Подразделение", СкладКомпанияИтог);
	ТекНазначение = ?(ТипНастройки = Тип("СправочникСсылка.Организации"), "Организация", ПодразделениеСкладКомпанияИтог);
	
	// Формируем перечень назначений учетных политик, его не меняем, работаем с копией.
	ВидыНазначений    = "Компания" + Символы.ПС + "Организация" + Символы.ПС + "Подразделение" + Символы.ПС + "Склад";
	
	// Устанавливаем заголовок группы.
	Для каждого КнопкаВыбора Из Элементы.ГруппаВыбораНазначенияУП.ПодчиненныеЭлементы Цикл
		Если СтрНайти(КнопкаВыбора.Заголовок, ТекНазначение) > 0 Тогда
			Элементы.ГруппаВыбораНазначенияУП.Заголовок = КнопкаВыбора.Заголовок;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем в список номеров остальные виды назначений.
	Для Сч = 1 По СтрЧислоСтрок(ВидыНазначений) Цикл
		
		// Добавляем назначения в список номеров.
		ТекСтрокаНазначение = СтрПолучитьСтроку(ВидыНазначений, Сч);
		ЭтоВыбранныйЭлемент = ТекСтрокаНазначение = ТекНазначение;
		
		НовыйНомерНазначения         = НомераНазначений.Добавить(Сч, ТекСтрокаНазначение);
		НовыйНомерНазначения.Пометка = ЭтоВыбранныйЭлемент;
		
		// Отключаем ненужные поля ввода.
		Элементы["Тек" + ТекСтрокаНазначение].Видимость = ЭтоВыбранныйЭлемент;
		Элементы["Назначение" + Сч].Пометка             = ЭтоВыбранныйЭлемент;
	КонецЦикла;
	
	// Устанавливаем в соотв. поле ввода значение объекта.
	ЭтотОбъект["Тек" + ТекНазначение] = ОбъектНастройки;
	
	ЗаполнитьДатыУчетныеПолитики();
	ЗаполнитьУчетныеПолитики();
	
	ПрошлаяОрганизация = ТекОрганизация;
	УстДата = Дата;
	
	// В режиме веб-клиента произведем показ кнопки изменения текущего объекта
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.Изменить.Видимость = Истина;
		Элементы.ГруппаКнопки.Видимость = Истина;
		Элементы.УчетныеПолитикиКонтекстноеМенюИзменить.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Выбор назначения".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыборНазначения(Команда)
	
	// Если форма была изменена, зададим вопрос пользователю
	Если Модифицированность Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаОтветаНаВопрос", ЭтотОбъект, 
					Новый Структура("ВыборНазначения", Команда));
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ПродолжитьВыборНазначения(Команда);
		
	КонецЕсли;
	
КонецПроцедуры // ВыборНазначения()

// Обработчик события нажатия кнопки "Удалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура УдалитьДату(Команда)
	
	Если Элементы.СписокДат.ТекущиеДанные.Представление = "ВЫБРАТЬ дату" 
		ИЛИ Элементы.СписокДат.ТекущиеДанные.Представление = НСтр("ru = 'Текущая дата'") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбранное значение даты удалить нельзя.'"));
		
	Иначе
		
		// Формируем описание обработчика перехвата закрытия формы.
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаОтветаНаВопрос", ЭтотОбъект, "УдалитьДату");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Настройка учетной политики на выбранную дату будет удалена. Продолжить?'");
		
		// Получаем подтверждение операции от пользователя.
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьДату()

// Обработчик события нажатия кнопки "Записать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Записать(Команда)
	
	ПроверитьНастройкиУСН(); 
	
	СохранитьНастройки();
	
	ТекДата = Дата;
	ЗаполнитьДатыУчетныеПолитики();
	ЗаполнитьУчетныеПолитики();
	НайденнаяСтрока = СписокДат.НайтиПоЗначению(ТекДата);
	Если НайденнаяСтрока <> Неопределено Тогда
		Дата = ТекДата;
		Элементы.СписокДат.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	УстДата = Дата;

	Оповестить("ОбновитьУчетнуюПолитику");
	
КонецПроцедуры  // Записать()

// Обработчик события нажатия кнопки "Записать и закрыть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Неопределено);
	Закрыть();
	
КонецПроцедуры // ЗаписатьИЗакрыть()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Объект".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	
	// Если форма была изменена, зададим вопрос пользователю
	Если Модифицированность Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаОтветаНаВопрос", ЭтотОбъект, "ОбъектПриИзменении");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ПродолжитьОбъектПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры // ОбъектПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Объект".
//
&НаКлиенте
Процедура ПродолжитьОбъектПриИзменении()
	
	// Устанавливаем в реквизит значение из соотв. поля ввода.
	ОбъектНастройки = ЭтотОбъект["Тек" + ТекНазначение];
	
	ЭтотОбъект["Уст" + ТекНазначение] = ОбъектНастройки;
	
	ЗаполнитьДатыУчетныеПолитики();
	УстДата = Дата;
	
	ЗаполнитьУчетныеПолитики();
	
КонецПроцедуры // ПродолжитьОбъектПриИзменении()

// Обработчик события вызывается при активизации строки таблице "Учетные политики".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура УчетныеПолитикиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.УчетныеПолитики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеНастройки = "<html><head></head><body>" + ТекущиеДанные.Описание + "</body></html>";
	КонецЕсли;
	
КонецПроцедуры // УчетныеПолитикиПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Значения" в таблице "Учетные политики".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура УчетныеПолитикиЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УчетныеПолитики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.Изменено = Истина;
		Модифицированность     = Истина;
	КонецЕсли;  
	
	УчетныеПолитикиЗначениеПриИзмененииНаСервере(ТекущиеДанные.Параметр, ТекущиеДанные.Значение);
	
КонецПроцедуры // УчетныеПолитикиЗначениеПриИзменении() 

&НаСервере
Процедура УчетныеПолитикиЗначениеПриИзмененииНаСервере(Параметр, Значение) 
	
	Если Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ВидНалога Тогда
		
		ВидНалогаПатент = (Значение = Перечисления.ВидыНалогов.ПСН);
		
		Отбор = Новый Структура(
			"Параметр",
			ПланыВидовХарактеристик.УчетныеПолитики.КонтрольПродажиПодакцизныхТоваровПриПатентнойСистемеНалогообложения
		);
			
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда
			
			Если ВидНалогаПатент Тогда 
				МассивСтрок[0].Заблокирован = Ложь;   	
			ИначеЕсли МассивСтрок[0].Значение <> Перечисления.ВидыКонтроля.ПустаяСсылка() Тогда
			
				МассивСтрок[0].Значение 	= Перечисления.ВидыКонтроля.ПустаяСсылка();
				МассивСтрок[0].Заблокирован = Истина;
				МассивСтрок[0].Изменено 	= Истина;

			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения Тогда
		
		НалогообложениеОбщее = (Значение = Перечисления.СистемыНалогообложения.Общая);
		
		Отбор = Новый Структура(
			"Параметр",
			ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН
		);
			
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда
			
			Если НалогообложениеОбщее Тогда 
				МассивСтрок[0].Значение 	= Перечисления.НалогообложениеНДСПриУСН.ПустаяСсылка();
				МассивСтрок[0].Заблокирован = Истина;
				МассивСтрок[0].Изменено 	= Истина;

			Иначе 
				МассивСтрок[0].Заблокирован = Ложь; 
			КонецЕсли; 
			
		КонецЕсли; 
		
		Отбор = Новый Структура(
			"Параметр",
			ПланыВидовХарактеристик.УчетныеПолитики.ОбъектНалогообложения
		);
			
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда
			
			Если НалогообложениеОбщее Тогда 
				МассивСтрок[0].Значение 	= Перечисления.ВидыОбъектовНалогообложения.ПустаяСсылка();
				МассивСтрок[0].Заблокирован = Истина;
				МассивСтрок[0].Изменено 	= Истина;

			Иначе 
				МассивСтрок[0].Заблокирован = Ложь; 
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Параметр = ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН Тогда
		
		УСНПлательщикНДС = РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(Значение);
		
		Отбор = Новый Структура(
			"Параметр",
			ПланыВидовХарактеристик.УчетныеПолитики.ВидНалога
		);
			
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда
			
			Если УСНПлательщикНДС Тогда 
				Если МассивСтрок[0].Значение <> Перечисления.ВидыНалогов.ПустаяСсылка() Тогда 
					МассивСтрок[0].Значение 	= Перечисления.ВидыНалогов.ПустаяСсылка();
					МассивСтрок[0].Заблокирован = Истина;
					МассивСтрок[0].Изменено 	= Истина;
				КонецЕсли;

			Иначе 
				МассивСтрок[0].Заблокирован = Ложь; 
			КонецЕсли; 
			
		КонецЕсли; 
		
		Отбор = Новый Структура(
			"Параметр",
			ПланыВидовХарактеристик.УчетныеПолитики.ПатентПоУмолчанию
		);
			
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда
			
			Если УСНПлательщикНДС Тогда 
				Если МассивСтрок[0].Значение <> Справочники.Патенты.ПустаяСсылка() Тогда
					МассивСтрок[0].Значение 	= Справочники.Патенты.ПустаяСсылка();
					МассивСтрок[0].Заблокирован = Истина;
					МассивСтрок[0].Изменено 	= Истина; 
				КонецЕсли;
			Иначе 
				МассивСтрок[0].Заблокирован = Ложь;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Отбор = Новый Структура(
			"Параметр",
			ПланыВидовХарактеристик.УчетныеПолитики.КонтрольПродажиПодакцизныхТоваровПриПатентнойСистемеНалогообложения
		);
			
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда
			
			Если УСНПлательщикНДС Тогда 
				Если МассивСтрок[0].Значение <> Перечисления.ВидыКонтроля.ПустаяСсылка() Тогда
					МассивСтрок[0].Значение = Перечисления.ВидыКонтроля.ПустаяСсылка();
					МассивСтрок[0].Заблокирован = Истина;
					МассивСтрок[0].Изменено 	= Истина; 
				КонецЕсли;
				
			Иначе
				МассивСтрок[0].Заблокирован = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура УчетныеПолитикиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УчетныеПолитики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.УчетныеПолитики.ВидНалога") Тогда
		
		РазрешенныеЗначения = Новый Массив;
		РазрешенныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ЕСХН"));
		РазрешенныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ПСН"));
		РазрешенныеЗначения = Новый ФиксированныйМассив(РазрешенныеЗначения);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", РазрешенныеЗначения);
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(ПараметрВыбора);
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли ТекущиеДанные.Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.УчетныеПолитики.ПатентПоУмолчанию") Тогда
		
		ЗначениеНачалоВыбораНаСервере(ДанныеВыбора, Дата, СтандартнаяОбработка);
		
	Иначе
		
		// Почистим параметры выбора поля для других позиций
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());		
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗначениеНачалоВыбораНаСервере(ДанныеВыбора, Дата, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПериодДействия = ?(ЗначениеЗаполнено(Дата), Дата, Неопределено);
	Владелец = Неопределено;
	Если ТекНазначение = "Организация" Тогда 
		Владелец = ТекОрганизация;
	ИначеЕсли ТекНазначение = "Подразделение" Тогда 
		Владелец = ТекПодразделение.Организация;
	КонецЕсли;
	ДоступныеПатенты = Справочники.Патенты.ДоступныеПатенты(Владелец, ПериодДействия);

	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ДоступныйПатент Из ДоступныеПатенты Цикл
		ДанныеВыбора.Добавить(ДоступныйПатент);
	КонецЦикла;

КонецПроцедуры

&НаСервере
функция УчетныеПолитикиЗначениеСозданиеНаСервере()

	СтруктураПараметров = Неопределено;
	
	Владелец = Неопределено;
	Если ТекНазначение = "Организация" Тогда 
		Владелец = ТекОрганизация;
	ИначеЕсли ТекНазначение = "Подразделение" Тогда 
		Владелец = ТекПодразделение.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Владелец) Тогда 
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения  = Новый Структура;
		ЗначенияЗаполнения.Вставить("Владелец", Владелец);
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("РежимВыбора", Истина);
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции

&НаКлиенте
Процедура УчетныеПолитикиЗначениеСоздание(Элемент, СтандартнаяОбработка)

	Если Элементы.УчетныеПолитики.ТекущиеДанные.Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.УчетныеПолитики.ПатентПоУмолчанию") Тогда 
		СтандартнаяОбработка = Ложь;
		СтруктураПараметров = УчетныеПолитикиЗначениеСозданиеНаСервере();
		Если СтруктураПараметров <> Неопределено Тогда 
			ОткрытьФорму("Справочник.Патенты.ФормаОбъекта", СтруктураПараметров, Элемент);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик события возникающего на клиенте при активизации строки списка.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СписокДатПриАктивизацииСтроки(Элемент)
	
	Если ТекСтрокаСписка = Элемент.ТекущаяСтрока Тогда
		Возврат;
	Иначе
		ТекСтрокаСписка = Элемент.ТекущаяСтрока;
	КонецЕсли;
	
	// Производим подключение обработчика события выполняемого с задержкой
	ПодключитьОбработчикОжидания("Подключаемый_СписокДатПриАктивизацииСтроки", 0.5, Истина);
	
КонецПроцедуры

// Обработчик события возникает при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы "Учетные политики".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока- Значение выбранной строки.
//  Поле - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево - В данный параметр передается признак 
//  									выполнения стандартной (системной) обработки события.
&НаКлиенте
Процедура СписокДатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СписокДат.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено
		И ТекСтрока.Представление = "ВЫБРАТЬ дату" Тогда
		Подключаемый_СписокДатПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение обработчика события нажатия кнопки "Выбор назначения".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПродолжитьВыборНазначения(Команда)
	
	// Получаем новое выбранное назначение учетной политики.
	ТекНомерНазначения = Число(СтрЗаменить(Команда.Имя, "ВыборНазначения", ""));
	ТекНазначение      = НомераНазначений.НайтиПоЗначению(ТекНомерНазначения).Представление;
	
	// Активируем соотв. поле ввода и устанавливаем заголовок группы.
	Элементы.ГруппаВыбораНазначенияУП.Заголовок = Элементы["Назначение" + ТекНомерНазначения].Заголовок;
	
	// Перебираем остальные виды назначений.
	Для Сч = 1 По СтрЧислоСтрок(ВидыНазначений) Цикл
		
		ТекСтрокаНазначение = СтрПолучитьСтроку(ВидыНазначений, Сч);
		ЭтоВыбранныйЭлемент = ТекСтрокаНазначение = ТекНазначение;
		
		ТекНомерНазначения         = НомераНазначений.НайтиПоЗначению(Сч);
		ТекНомерНазначения.Пометка = ЭтоВыбранныйЭлемент;
		
		// Отключаем ненужные поля ввода.
		Элементы["Тек" + ТекСтрокаНазначение].Видимость = ЭтоВыбранныйЭлемент;
		Элементы["Назначение" + Сч].Пометка             = ЭтоВыбранныйЭлемент;
		
	КонецЦикла;
	
	ОбъектНастройки = Неопределено;
	ОбъектПриИзменении(Команда);
	
КонецПроцедуры // ПродолжитьВыборНазначения()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаОтветаНаВопрос(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ВыборНазначения") Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			ПродолжитьВыборНазначения(ДополнительныеПараметры.ВыборНазначения);
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Записать(Неопределено);
			ПродолжитьВыборНазначения(ДополнительныеПараметры.ВыборНазначения);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ОбъектПриИзменении" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			ПродолжитьОбъектПриИзменении();
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Записать(Неопределено);
			ПродолжитьОбъектПриИзменении();
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Отмена Тогда
			ЭтотОбъект["Тек" + ТекНазначение] = ЭтотОбъект["Уст" + ТекНазначение];
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ДатаПриИзменении" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			Дата = НачалоДня(Дата);
			УстДата = Дата;
			ЗаполнитьУчетныеПолитики();
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Записать(Неопределено);
			Дата = НачалоДня(Дата);
			УстДата = Дата;
			ЗаполнитьУчетныеПолитики();
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Отмена Тогда
			Дата = УстДата;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ВыборДаты" И НЕ РезультатОповещения = Неопределено Тогда
		
		// Добавим выбранную дату в список и установим ее текущей
		Дата = РезультатОповещения;
		НайденнаяДата = СписокДат.НайтиПоЗначению(Дата);
		Если НайденнаяДата = Неопределено Тогда
			НоваяДатаУчетныеПолитики = СписокДат.Добавить();
			НоваяДатаУчетныеПолитики.Значение = Дата;
			СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			Элементы.СписокДат.ТекущаяСтрока = НоваяДатаУчетныеПолитики.ПолучитьИдентификатор();
		Иначе
			Элементы.СписокДат.ТекущаяСтрока = НайденнаяДата.ПолучитьИдентификатор();
		КонецЕсли;
		УстДата = Дата;
		ЗаполнитьУчетныеПолитики();
		
	ИначеЕсли ДополнительныеПараметры = "УдалитьДату" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			УдалитьУчетныеПолитики(Элементы.СписокДат.ТекущиеДанные.Значение);
			СписокДат.Удалить(СписокДат.НайтиПоЗначению(Элементы.СписокДат.ТекущиеДанные.Значение));
			Элементы.СписокДат.ТекущаяСтрока = СписокДат.НайтиПоЗначению(Дата("39991231") - 1).ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Обработчик события возникающего на клиенте при активизации строки списка выполняемый с задержкой.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_СписокДатПриАктивизацииСтроки()
	
	// Если форма была изменена, зададим вопрос пользователю.
	Если Модифицированность Тогда
		
		// Формируем описание обработчика перехвата закрытия формы.
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаОтветаНаВопрос", ЭтотОбъект, "ДатаПриИзменении");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить?'");
		
		// Получаем подтверждение операции от пользователя.
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	ИначеЕсли Элементы.СписокДат.ТекущиеДанные.Представление = "ВЫБРАТЬ дату" Тогда
		
		// Формируем описание обработчика перехвата закрытия формы.
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаОтветаНаВопрос", ЭтотОбъект, "ВыборДаты");
		ПоказатьВводДаты(ОбработчикВопроса, Дата,, ЧастиДаты.Дата);
		
	ИначеЕсли Элементы.СписокДат.ТекущиеДанные.Представление = НСтр("ru = 'Текущая дата'") Тогда
		
		Дата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		УстДата = Дата;
		
		ЗаполнитьУчетныеПолитики();
		
	ИначеЕсли НЕ Элементы.СписокДат.ТекущиеДанные = Неопределено 
		И НЕ Дата = НачалоДня(Элементы.СписокДат.ТекущиеДанные.Значение) Тогда
		
		Дата = НачалоДня(Элементы.СписокДат.ТекущиеДанные.Значение);
		УстДата = Дата;
		ЗаполнитьУчетныеПолитики();
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_СписокПриАктивизацииСтроки()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УчетныеПолитики");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("УчетныеПолитики.Изменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Цвет текста, доступность
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УчетныеПолитикиПараметр");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УчетныеПолитикиЗначение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("УчетныеПолитики.Заблокирован");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

// Заполняет таблицу учетных политик. Вызов процедуры производить после установки нулевого значения в НомераНазначений.
&НаСервере
Процедура ЗаполнитьУчетныеПолитики()
	
	УчетныеПолитики.Очистить();
	
	РедактированиеНедоступно = НЕ (ЗначениеЗаполнено(ОбъектНастройки) ИЛИ ТекНазначение = "Компания");
	Элементы.УчетныеПолитики.ТолькоПросмотр = РедактированиеНедоступно;  
		
	ОписанияНастроек = ПолучитьОписанияНастроек();
	
	// получим список учетных политик, доступные для текущего объекта
	СтруктураОтборов = Новый Структура(ТекНазначение, Истина);
	НайденныеСтроки = НазначениеУчетныхПолитик.НайтиСтроки(СтруктураОтборов);
	
	МассивУчетныхПолитик = Новый Массив;
	Для Каждого СтрокаУчетнаяПолитика Из НайденныеСтроки Цикл
		МассивУчетныхПолитик.Добавить(СтрокаУчетнаяПолитика.Параметр);
	КонецЦикла;
	
	ВидНалогаПатент = Ложь; НалогообложениеОбщее = Ложь; УСНПлательщикНДС = Ложь;  
	
	НастройкаПодразделения = ЗначениеЗаполнено(ОбъектНастройки) И ТипЗнч(ОбъектНастройки) = Тип("СправочникСсылка.ПодразделенияКомпании");
	
	Если НастройкаПодразделения Тогда 
		НалогообложениеНДСПриУСН = УчетныеПолитикиСервер.Значение("НалогообложениеНДСПриУСН", НачалоДня(Дата), ОбъектНастройки.Организация); 
		УСНПлательщикНДС = РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеНДСПриУСН);		 
	КонецЕсли; 	
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПВХУчетныеПолитики.Ссылка КАК Параметр,
	|	ЕСТЬNULL(УчетныеПолитикиСрезПоследних.Значение, ЕСТЬNULL(ПВХУчетныеПолитики.ЗначениеПоУмолчанию, """")) КАК Значение,
	|	ПВХУчетныеПолитики.Код
	|ИЗ
	|	ПланВидовХарактеристик.УчетныеПолитики КАК ПВХУчетныеПолитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеПолитики.СрезПоследних(&Дата, Объект = &Объект) КАК УчетныеПолитикиСрезПоследних
	|		ПО (УчетныеПолитикиСрезПоследних.Параметр = ПВХУчетныеПолитики.Ссылка)
	|ГДЕ
	|	ПВХУчетныеПолитики.Ссылка В(&ОтборНастроек)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПВХУчетныеПолитики.Код";
	
	Запрос.УстановитьПараметр("Дата",          НачалоДня(Дата));
	Запрос.УстановитьПараметр("Объект",        ОбъектНастройки);
	Запрос.УстановитьПараметр("ОтборНастроек", МассивУчетныхПолитик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Код) Тогда
			КодНастройки = Число(Выборка.Код);
		Иначе
			КодНастройки = 0;
		КонецЕсли;
		
		НоваяСтрокаУчетныеПолитики = УчетныеПолитики.Добавить();
		НоваяСтрокаУчетныеПолитики.Параметр = Выборка.Параметр;
		НоваяСтрокаУчетныеПолитики.Значение = Выборка.Параметр.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		НоваяСтрокаУчетныеПолитики.Описание = ОписанияНастроек.Получить(КодНастройки);
		Если НЕ ЕстьЗаказы И (Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрыватьНераспределенныеЗаказыПокупателей ИЛИ Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрытиеЗаказовПоПодразделению) Тогда
			НоваяСтрокаУчетныеПолитики.Заблокирован = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьКомиссия И Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СтратегияСписанияПартийТоваровПоСтатусам Тогда
			НоваяСтрокаУчетныеПолитики.Заблокирован = Истина;
		КонецЕсли;  
		
		Если НоваяСтрокаУчетныеПолитики.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ВидНалога Тогда
			ВидНалогаПатент = (НоваяСтрокаУчетныеПолитики.Значение = Перечисления.ВидыНалогов.ПСН);
		КонецЕсли; 
		
		Если НоваяСтрокаУчетныеПолитики.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения Тогда
			НалогообложениеОбщее = (НоваяСтрокаУчетныеПолитики.Значение = Перечисления.СистемыНалогообложения.Общая);
		КонецЕсли;
		
		Если НоваяСтрокаУчетныеПолитики.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН Тогда
			УСНПлательщикНДС = РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НоваяСтрокаУчетныеПолитики.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура(
		"Параметр",
		ПланыВидовХарактеристик.УчетныеПолитики.КонтрольПродажиПодакцизныхТоваровПриПатентнойСистемеНалогообложения
	); 
	
	МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
	Если  МассивСтрок.Количество()> 0 И НЕ ВидНалогаПатент Тогда 
		МассивСтрок[0].Заблокирован = Истина;
	КонецЕсли;  
	
	Если НалогообложениеОбщее Тогда 
		
		Отбор.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН;
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда 
			МассивСтрок[0].Заблокирован = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если УСНПлательщикНДС Тогда 
		
		Отбор.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ВидНалога;
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда 
			МассивСтрок[0].Заблокирован = Истина;
		КонецЕсли;
		
		Отбор.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ПатентПоУмолчанию;
		МассивСтрок = УчетныеПолитики.НайтиСтроки(Отбор);
		Если  МассивСтрок.Количество()> 0 Тогда 
			МассивСтрок[0].Заблокирован = Истина;
		КонецЕсли;
		
	КонецЕсли; 	
	
	
КонецПроцедуры // ЗаполнитьУчетныеПолитики()

// Заполняет таблицу дат изменения учетных политик.
&НаСервере
Процедура ЗаполнитьДатыУчетныеПолитики()
	
	СписокДат.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитики.Период КАК Период
	|ИЗ
	|	РегистрСведений.УчетныеПолитики КАК УчетныеПолитики
	|ГДЕ
	|	УчетныеПолитики.Объект = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетныеПолитики.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Если ОбъектНастройки = "" Тогда
		ОбъектНастройки = Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект",        ОбъектНастройки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавим текущую дату
	НоваяДатаУчетныеПолитики = СписокДат.Добавить();
	НоваяДатаУчетныеПолитики.Значение = Дата("39991231") - 1;
	НоваяДатаУчетныеПолитики.Представление = НСтр("ru = 'Текущая дата'");
	Элементы.СписокДат.ТекущаяСтрока = НоваяДатаУчетныеПолитики.ПолучитьИдентификатор();
	Дата = ТекущаяДатаСеанса();
	
	// Добавим возможность добавления новой записи за любое число.
	НоваяДатаУчетныеПолитики = СписокДат.Добавить();
	НоваяДатаУчетныеПолитики.Значение = Дата("39991231") - 2;
	НоваяДатаУчетныеПолитики.Представление = "ВЫБРАТЬ дату";
	
	Пока Выборка.Следующий() Цикл
		
		НоваяДатаУчетныеПолитики = СписокДат.Добавить();
		НоваяДатаУчетныеПолитики.Значение = Выборка.Период;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДатыУчетныеПолитики()

// Удаляет значение учетных политик на выбранную дату
&НаСервере
Процедура УдалитьУчетныеПолитики(УдаляемаяДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитики.Период КАК Период,
	|	УчетныеПолитики.Объект КАК Объект,
	|	УчетныеПолитики.Параметр КАК Параметр,
	|	УчетныеПолитики.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.УчетныеПолитики КАК УчетныеПолитики
	|ГДЕ
	|	УчетныеПолитики.Объект = &Объект
	|	И УчетныеПолитики.Период = &Дата";
	
	Запрос.УстановитьПараметр("Дата",   УдаляемаяДата);
	Запрос.УстановитьПараметр("Объект", ОбъектНастройки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРегистра = РегистрыСведений.УчетныеПолитики.СоздатьМенеджерЗаписи();
		СтрокаРегистра.Период = Выборка.Период;
		СтрокаРегистра.Объект = Выборка.Объект;
		СтрокаРегистра.Параметр = Выборка.Параметр;
		СтрокаРегистра.Значение = Выборка.Значение;
		СтрокаРегистра.Прочитать();
		СтрокаРегистра.Удалить();
	КонецЦикла;
	
	Дата = НачалоДня(ТекущаяДатаСеанса());
	ЗаполнитьУчетныеПолитики();
	
КонецПроцедуры // УдалитьУчетныеПолитики()

// Процедура выполняет запись значений настроек в регистр сведений.
//
&НаСервере
Процедура СохранитьНастройки()
	
	// Запишем расширение прав доступа (только измененные строки)
	Для Каждого СтрокаУчетнаяПолитика Из УчетныеПолитики.НайтиСтроки(Новый Структура("Изменено", Истина)) Цикл
		
		УСНПлательщикНДС = Ложь;

		Если СтрокаУчетнаяПолитика.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН Тогда 
			УСНПлательщикНДС = РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(СтрокаУчетнаяПолитика.Значение);
		КонецЕсли;
		
		РСУчетныеПолитики = РегистрыСведений.УчетныеПолитики.СоздатьМенеджерЗаписи();
		РСУчетныеПолитики.Период = НачалоДня(Дата);
		РСУчетныеПолитики.Объект = ОбъектНастройки;
		ЗаполнитьЗначенияСвойств(РСУчетныеПолитики, СтрокаУчетнаяПолитика);
		
		Попытка
			РСУчетныеПолитики.Записать();
			
			Если УСНПлательщикНДС Тогда 
				УдалитьПатентПоПодразделениям();
			КонецЕсли; 
			
			ОбновитьУчетнуюПолитикуВКэше(РСУчетныеПолитики.Параметр, РСУчетныеПолитики.Значение, РСУчетныеПолитики.Объект, Дата);
			// все равно придется сбрасывать кэш, т.к. он идет "по датам"
			ОбновитьПовторноИспользуемыеЗначения();
			СтрокаУчетнаяПолитика.Изменено = Ложь;
			Модифицированность = Ложь;
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // СохранитьНастройки()

// Заполняет соответствие описаний настроек из макета "НастройкиПоУмолчанию"
&НаСервере
Функция ПолучитьОписанияНастроек()
	
	ОписанияНастроек = Новый Соответствие;
	
	Макет = ПланыВидовХарактеристик.УчетныеПолитики.ПолучитьМакет("УчетныеПолитикиПоУмолчанию");
	
	Для Номер = 1 По Макет.ВысотаТаблицы Цикл
		
		// Получаем код настройки
		Код = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C7").ТекущаяОбласть.Текст);
		
		// Дошли до конца макета, выходим из цикла
		Если НЕ ЗначениеЗаполнено(Код) Тогда
			Прервать;
		КонецЕсли;
		
		// Пробуем получить HTML-описание настройки
		Описание = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C10").ТекущаяОбласть.Текст);
		
		// HTML-описание отсутствует, получаем обычное описание
		Если НЕ ЗначениеЗаполнено(Описание) Тогда
			Описание = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C9").ТекущаяОбласть.Текст);
		КонецЕсли;
		
		// Если получили описание, добавляем его в соответствие
		Если ЗначениеЗаполнено(Описание) Тогда
			ОписанияНастроек.Вставить(Число(Код), Описание);
		КонецЕсли;
		
		// заполним таблицу назначений учетных политик
		НазваниеУчетнойПолитики = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C2").ТекущаяОбласть.Текст);
		УчетнаяПолитика = ПланыВидовХарактеристик.УчетныеПолитики.НайтиПоНаименованию(НазваниеУчетнойПолитики);
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			// получим сразу ссылку
			НоваяСтрока               = НазначениеУчетныхПолитик.Добавить();
			НоваяСтрока.Параметр      = УчетнаяПолитика;
			НоваяСтрока.Компания      = ЗначениеЗаполнено(СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C3").ТекущаяОбласть.Текст));
			НоваяСтрока.Организация   = ЗначениеЗаполнено(СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C4").ТекущаяОбласть.Текст));
			НоваяСтрока.Подразделение = ЗначениеЗаполнено(СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C5").ТекущаяОбласть.Текст));
			НоваяСтрока.Склад         = ЗначениеЗаполнено(СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C6").ТекущаяОбласть.Текст));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписанияНастроек;
	
КонецФункции // ПолучитьСтруктуруОписаний()

// Проверяет для УСН заполнение учетных политик Объект налогообложения, Налогообложение НДС при УСН
//
&НаСервере
Процедура ПроверитьНастройкиУСН()
	
	УстановленУСН = УчетныеПолитики.НайтиСтроки(Новый Структура("Значение", Перечисления.СистемыНалогообложения.Упрощенная));
	
	Если УстановленУСН.Количество()> 0 Тогда 
		
		НеУстановленОбъектНалогообложения = УчетныеПолитики.НайтиСтроки(
			Новый Структура("Значение", Перечисления.ВидыОбъектовНалогообложения.ПустаяСсылка())); 
		НеУстановленНалогообложениеУСН = УчетныеПолитики.НайтиСтроки(
			Новый Структура("Значение", Перечисления.НалогообложениеНДСПриУСН.ПустаяСсылка()));  
			
		Если НеУстановленОбъектНалогообложения.Количество()> 0  Тогда 
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Выбрана система налогообложения ""Упрощенная"", необходимо заполнить значение учетной политики ""Объект налогообложения при УСН""'"),
				)
			);
			
		КонецЕсли; 
		
		Если НеУстановленНалогообложениеУСН.Количество()> 0 И ТекущаяДатаСеанса()>= Дата(2025,1,1) Тогда 
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Выбрана система налогообложения ""Упрощенная"", необходимо заполнить значение учетной политики ""Налогообложение НДС при УСН""'"),
				)
			);

		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры

// Удаляет значения учетных политик Вид налога, Патент по умолчанию, если УСН плательщик НДС
//
&НаСервере
Процедура УдалитьПатентПоПодразделениям()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеПолитикиСрезПоследних.Объект КАК Объект,
		|	УчетныеПолитикиСрезПоследних.Параметр КАК Параметр
		|ИЗ
		|	РегистрСведений.УчетныеПолитики.СрезПоследних(
		|			&Дата,
		|			ВЫРАЗИТЬ(Объект КАК Справочник.ПодразделенияКомпании).Организация = &Объект
		|				И (Значение = ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПСН)
		|					ИЛИ Значение <> ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))) КАК УчетныеПолитикиСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Объект", ОбъектНастройки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РСУчетныеПолитики = РегистрыСведений.УчетныеПолитики.СоздатьМенеджерЗаписи();
		РСУчетныеПолитики.Период = НачалоДня(Дата);
		РСУчетныеПолитики.Объект = Выборка.Объект;
		РСУчетныеПолитики.Параметр = Выборка.Параметр; 
		
		Если Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ВидНалога Тогда 
			РСУчетныеПолитики.Значение = Перечисления.ВидыНалогов.ПустаяСсылка();
		Иначе 
			РСУчетныеПолитики.Значение = Справочники.Патенты.ПустаяСсылка(); 
		КонецЕсли;
			
		Попытка
			РСУчетныеПолитики.Записать();
			ОбновитьУчетнуюПолитикуВКэше(РСУчетныеПолитики.Параметр, РСУчетныеПолитики.Значение, РСУчетныеПолитики.Объект, Дата);
			// все равно придется сбрасывать кэш, т.к. он идет "по датам"
			ОбновитьПовторноИспользуемыеЗначения();
			Модифицированность = Ложь;
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла; 

КонецПроцедуры 

#КонецОбласти

