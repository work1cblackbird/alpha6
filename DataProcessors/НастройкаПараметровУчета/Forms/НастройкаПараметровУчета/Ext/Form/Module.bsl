///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы обработки "Настройки параметров учета"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаКлиенте
Перем ПараметрыОбработчика;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтотУзел = ПланыОбмена.УдаленныеПодразделения.ЭтотУзел();
	РежимПроведенияПоПартиям = ЭтотУзел.РежимПроведенияПоПартиям;
	
	// Инициализация набора констант
	НаборКонстантОбъект = РеквизитФормыВЗначение("НаборКонстант");
	НаборКонстантОбъект.Прочитать();
	ЗначениеВДанныеФормы(НаборКонстантОбъект, НаборКонстант);
	
	РегламентноеЗадание = НайтиРегламентноеЗадание("ОчисткаНапечатанныхКодовМаркировки");
	
	Если РегламентноеЗадание <> Неопределено Тогда
		ОчисткаНапечатанныхКодовМаркировки = РегламентноеЗадание.Расписание;
	КонецЕсли;
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НаборКонстантРежимКонтроляУникальностиНомераПоКаталогу",
		"Доступность",
		НаборКонстант.НомерПоКаталогуОбязательный
	);
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных констант.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КонстантаПриИзменении(Элемент)
	
	ОбновитьИнтерфейс = ИСТИНА;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры // КонстантаПриИзменении()

&НаКлиенте
Процедура НаборКонстантРазрешитьПустойНомерПоКаталогуПриИзменении(Элемент)
	
	ОбновитьИнтерфейс = Истина;
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НаборКонстантРежимКонтроляУникальностиНомераПоКаталогу",
		"Доступность",
		НаборКонстант.НомерПоКаталогуОбязательный
	);
	
КонецПроцедуры

// Обработчик события возникающего в момент нажатия кнопки открытия реквизита "Формат вывода количества".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ФорматВыводаКоличестваОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Конструктор = Новый КонструкторФорматнойСтроки;
	
	// форматная строка только для типов Число
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	Конструктор.Текст = НаборКонстант.ФорматВыводаКоличества;
	Конструктор.Показать(Новый ОписаниеОповещения("Подключаемый_ОткрытьКонструкторФормата",ЭтотОбъект,"Количество"));
	
КонецПроцедуры //ФорматВыводаКоличестваОткрытие(0

// Обработчик события возникающего в момент нажатия кнопки открытия реквизита "Формат вывода суммы".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево         - данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ФорматВыводаСуммыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Конструктор = Новый КонструкторФорматнойСтроки;
	
	// форматная строка только для типов Число
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	Конструктор.Текст = НаборКонстант.ФорматВыводаСуммы;
	Конструктор.Показать(Новый ОписаниеОповещения("Подключаемый_ОткрытьКонструкторФормата",ЭтотОбъект,"Сумма"));
	
КонецПроцедуры //ФорматВыводаСуммыОткрытие()

// Обработчик события возникающего при изменении флага "Утверждение документов".
//
// Параметры:
//  Элемент              - ПолеФлажка      - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ИспользоватьУтверждениеДокументовПриИзменении(Элемент)
	
	ОбновитьИнтерфейс = ИСТИНА;
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры // ИспользоватьУтверждениеДокументовПриИзменении() 

// Обработчик события возникающего при изменении флага "Поле "Состояние" в заказах".
//
// Параметры:
//  Элемент              - ПолеФлажка      - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ИспользоватьСостоянияВЗаказахПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьСостоянияВЗаказах Тогда
		
		ТекстВопроса = НСтр("ru = 'Желаете, чтобы в существующих заказах установилось их текущее состояние?
			|Процесс установки состояний в заказах может занять некоторое время.
			|Продолжить?'");
		
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(1, НСтр("ru = 'Да, установить состояния'"));
		КнопкиДиалога.Добавить(2, НСтр("ru = 'Нет, не устанавливать состояния'"));
		КнопкиДиалога.Добавить(0, НСтр("ru = 'Отменить включение поля ""Состояние""'"));
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			Новый Структура("Событие,Элемент", "ВопросВключенияПоляСостоянияВЗаказах", Элемент)
		);
		ПоказатьВопрос(
			ОписаниеОповещенияОЗавершении,
			ТекстВопроса,
			КнопкиДиалога,,,
			НСтр("ru = 'Включение поля ""Состояние""'")
		);
	Иначе
		
		КонстантаПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении флага "Обмен с ФНС посредством открытых API".
//
// Параметры:
//  Элемент              - ПолеФлажка      - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НаборКонстантИспользоватьОбменСФНСПриИзменении(Элемент)
	
	ОбновитьИнтерфейс = ИСТИНА;
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыОбменаСФНС(Команда)
	
	ОткрытьФорму(
		"РегистрСведений.ПараметрыПодключенияКСервисуФНС.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПроверятьЗаполненностьРНПТПриПоступленииПриИзменении(Элемент)
	
	ОбновитьИнтерфейс = ИСТИНА;
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОбособленногоУчетаТоваровПоОрганизациямПриИзменении(Элемент)
	
	ТекстВопроса = НСтр(
		"ru = 'Не рекомендуется менять во избежание блокировки проведения старых документов, а также ошибок в учете.
			  |Ошибки могут возникнуть при изменении даты, если товар разных организаций уже хранится на одном складе/цехе.
			  |Продолжить?'");
	
	КнопкиДиалога = Новый СписокЗначений;
	КнопкиДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да (не рекомендуется)'"));
	КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить изменение'"));
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		Новый Структура("Событие,Элемент", "ВопросПриИзмененииДатыНачалаОбособленногоУчетаТоваровПоОрганизациям", Элемент)
	);
	ПоказатьВопрос(
		ОписаниеОповещенияОЗавершении,
		ТекстВопроса,
		КнопкиДиалога,,
		КодВозвратаДиалога.Отмена,
		НСтр("ru = 'Изменение даты начала обособленного учета товаров по организациям'")
	);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при нажатии на кнопку "Настроить префиксацию".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НастроитьПрефиксацию(Команда)
	
	ОткрытьФорму("РегистрСведений.ПрефиксацияОбъектов.ФормаСписка");
	
КонецПроцедуры // НастроитьПрефиксацию()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Настроить параметры СУЗ".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НастроитьПараметрыСУЗ(Команда)
	
	ОткрытьФорму("Справочник.НастройкаОбменаМаркировкиТоваров.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОчисткуКодовМаркировки(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ОчисткаНапечатанныхКодовМаркировки);
	Диалог.Показать(Новый ОписаниеОповещения("ОчисткаНапечатанныхКодовМаркировки", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУтверждениеДокументов(Команда)
	
	ОткрытьФорму("РегистрСведений.ИспользоватьУтверждениеДокументов.Форма.ВыборДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьCDNПлощадки(Команда)
	
	ОткрытьФорму("РегистрСведений.CDNПлощадки.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры //ОбновитьИнтерфейсПрограммы()

&НаКлиенте
Процедура Подключаемый_ОткрытьКонструкторФормата(Результат, ВходныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда 
		Если ВходныеПараметры = "Количество" Тогда
			НаборКонстант.ФорматВыводаКоличества = Результат;
			КонстантаПриИзменении(Элементы.ФорматВыводаКоличества);
		Иначе
			НаборКонстант.ФорматВыводаСуммы = Результат;
			КонстантаПриИзменении(Элементы.ФорматВыводаСуммы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_ОткрытьКонструкторФормата()

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		УправлениеДиалогомСервер.ДобавитьОповещениеФорм("Запись_НаборКонстант", Новый Структура, КонстантаИмя, Результат);
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "РежимПроведенияПоПартиям" Тогда
		Если НЕ ЭтотУзел.РежимПроведенияПоПартиям=РежимПроведенияПоПартиям Тогда
			Попытка
				ПланОбменаОбъект = ЭтотУзел.ПолучитьОбъект();
				ПланОбменаОбъект.РежимПроведенияПоПартиям = РежимПроведенияПоПартиям;
				ПланОбменаОбъект.Записать();
			Исключение
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //СохранитьЗначениеРеквизита()

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	БлокироватьЭлементыФормы(Ложь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции //ПриИзмененииРеквизитаСервер()

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)

	Если НеобходимоЗаблокироватьОтключенияПередачТоваровМеждуОрганизациями()
		Или НевозможноУстановитьРежимКонтроляОстатковПоКомпании() Тогда
		
		ОбновлятьИнтерфейс = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);

КонецПроцедуры //Подключаемый_ПриИзмененииРеквизита()

&НаКлиенте
Функция НеобходимоЗаблокироватьОтключенияПередачТоваровМеждуОрганизациями()
	
	РезультатПроверки = ПроверитьНеобходимостьБлокировкиОтключенияПередачТоваровМеждуОрганизациямиНаСервере(
		НаборКонстант.ИспользоватьПередачуТоваровМеждуОрганизациями
	);
	
	Если РезультатПроверки.ТребуетсяБлокировка Тогда
		
		НаборКонстант.ИспользоватьПередачуТоваровМеждуОрганизациями =
			Не НаборКонстант.ИспользоватьПередачуТоваровМеждуОрганизациями;
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция НевозможноУстановитьРежимКонтроляОстатковПоКомпании()
	
	РезультатПроверки = ПроверитьВозможностьУстановитьРежимКонтроляОстатковПоКомпании(
		НаборКонстант.РежимКонтроляОстатковНаСкладах
	);
	
	Если Не РезультатПроверки.Возможно Тогда
		
		НаборКонстант.РежимКонтроляОстатковНаСкладах = ПолучитьРежимКонтроляОстатковНаСкладах();
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРежимКонтроляОстатковНаСкладах()
	
	Возврат Константы.РежимКонтроляОстатковНаСкладах.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНеобходимостьБлокировкиОтключенияПередачТоваровМеждуОрганизациямиНаСервере(Значение);
	
	Возврат Константы
		.ИспользоватьПередачуТоваровМеждуОрганизациями
		.ПроверитьНеобходимостьБлокировкиОтключения(Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьУстановитьРежимКонтроляОстатковПоКомпании(Значение)
	
	Возврат Константы
		.РежимКонтроляОстатковНаСкладах
		.ПроверитьВозможностьУстановкиЗначенияПоКомпании(Значение);
	
КонецФункции

// Проверяет были ли введены документы.
//
&НаСервере
Функция ПроверитьНеобходимостьБлокировки()
	
	// проверим остатки
	ВалютаМожноИзменять = БалансЗакрыт();
	Если НЕ ВалютаМожноИзменять Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ""; 
	Для Каждого Док Из Метаданные.Документы Цикл
		Запрос.Текст = Запрос.Текст
		+ "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ." + Док.Имя + ".Ссылка
		|ГДЕ
		|	Документ." + Док.Имя + ".Проведен=Истина
		|";
	КонецЦикла;
	
	// Уберем первое "ОБЪЕДИНИТЬ ВСЕ"
	Запрос.Текст=Сред(Запрос.Текст,СтрДлина("ОБЪЕДИНИТЬ ВСЕ")+1);
	ВведеныДокументы = (Не Запрос.Выполнить().Пустой());
	Если ВведеныДокументы Тогда
		Возврат Истина;
	КонецЕсли; 
	Возврат Ложь;
	
КонецФункции // ПроверитьНеобходимостьБлокировки()

// Возвращает Истина в случае если нет остатков на балансовых регистрах
// Ложь если остатки нет.
//
&НаСервере
Функция БалансЗакрыт()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ДенежныеСредстваКомпанииОстатки.СуммаОстаток,0) КАК СуммаОстаток,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток,0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ПартииТоваровОтданныеОстатки.КоличествоОстаток,0) КАК КоличествоОстаток1,
	|	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток,0) КАК СуммаОстатокВзиморасчеты,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток,0) КАК СуммаОстатокРасчетыСКонтрагентами,
	|	ЕСТЬNULL(ДоходыИРасходыОстатки.ДоходУпрОстаток,0) КАК ДоходУпрОстаток,
	|	ЕСТЬNULL(ДоходыИРасходыОстатки.РасходУпрОстаток,0) КАК РасходУпрОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКомпании.Остатки КАК ДенежныеСредстваКомпанииОстатки,
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки КАК ПартииТоваровКомпанииОстатки,
	|	РегистрНакопления.ПартииТоваровОтданные.Остатки КАК ПартииТоваровОтданныеОстатки,
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки КАК РасчетыСКонтрагентамиОстатки,
	|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки КАК ВзаиморасчетыКомпанииОстатки,
	|	РегистрНакопления.ДоходыИРасходы.Остатки КАК ДоходыИРасходыОстатки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	// проверим остатки
	БалансЗакрыт = (Выборка.СуммаОстаток = 0
		И Выборка.КоличествоОстаток = 0
		И Выборка.КоличествоОстаток1 = 0
		И Выборка.СуммаОстатокВзиморасчеты = 0
		И Выборка.СуммаОстатокРасчетыСКонтрагентами = 0
		И Выборка.ДоходУпрОстаток = 0
		И Выборка.РасходУпрОстаток = 0);
	Возврат БалансЗакрыт;
	
КонецФункции //БалансЗакрыт()

// Производит настройку блокировки элементов формы.
//
&НаСервере
Процедура БлокироватьЭлементыФормы(ПроверитьДвижения = Истина)
	
	// Составим список элементов для блокировки
	СписокРеквизитов = Новый СписокЗначений();
	
	// Проверим участвует ли реквизит в движениях
	Если ПроверитьДвижения Тогда
		НеобходимостьБлокировки = ПроверитьНеобходимостьБлокировки();
		Элементы.ВалютаРегламентированногоУчетаОрганизаций.ТолькоПросмотр = НеобходимостьБлокировки;
		Элементы.ВалютаУправленческогоУчетаКомпании.ТолькоПросмотр = НеобходимостьБлокировки;
	КонецЕсли;
	
	Элементы.НастроитьОчисткуКодовМаркировки.Доступность = (НаборКонстант.СрокХраненияКодовМаркировкиПечати <> 0);
	
КонецПроцедуры // БлокироватьЭлементыФормы()

#Область Установка_состояний_Заказов

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ВопросВключенияПоляСостоянияВЗаказах" Тогда
		
		Если РезультатОповещения = 1 Тогда
			
			КонстантаПриИзменении(ДополнительныеПараметры.Элемент);
			
			// выполним фоново
			ВыполнитьПроцедуруФоново();
			
		ИначеЕсли РезультатОповещения = 2 Тогда
			
			КонстантаПриИзменении(ДополнительныеПараметры.Элемент);
			
		ИначеЕсли РезультатОповещения = 0 Тогда
			
			НаборКонстант.ИспользоватьСостоянияВЗаказах = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") =
		"ВопросПриИзмененииДатыНачалаОбособленногоУчетаТоваровПоОрганизациям" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			КонстантаПриИзменении(ДополнительныеПараметры.Элемент);
			
		Иначе
			
			НаборКонстант.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям =
				ПолучитьДатуНачалаОбособленногоУчетаТоваровПоОрганизациям();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаКлиенте
Процедура ВыполнитьПроцедуруФоново()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = ВыполнитьФоновоеЗаданиеНаСервере();
	
	Если РезультатВыполнения.Статус = "Выполнено" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Иначе
		ПараметрыОжидания 	= ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения,, ПараметрыОжидания);
		//ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьФоновоеЗаданиеНаСервере()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	
	СтруктураПараметров = Новый Структура;
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Установка состояния заказов'");
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
			"ЗаказыСервер.УстановитьСостоянияЗаказов",
			СтруктураПараметров,
			ПараметрыЗапуска);
	
	//РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
	//	"ЗаказыСервер.УстановитьСостоянияЗаказов",
	//	СтруктураПараметров,
	//	"УстановкаСостоянияЗаказов");
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресРезультата;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
			ПараметрыОбработчика.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОчисткаНапечатанныхКодовМаркировки(Расписание, ПараметрыВыполнения) Экспорт
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчисткаНапечатанныхКодовМаркировки = Расписание;
	ЗаписатьРегламентноеЗадание("ОчисткаНапечатанныхКодовМаркировки", Истина, 
		ОчисткаНапечатанныхКодовМаркировки, "ОчисткаНапечатанныхКодовМаркировкиРасписание");
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегламентноеЗадание(ИмяПредопределенного, Использование, Расписание, РеквизитПутьКДанным)
	РегламентноеЗадание = НайтиРегламентноеЗадание(ИмяПредопределенного);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
	
КонецПроцедуры

&НаСервере
Функция НайтиРегламентноеЗадание(ИмяПредопределенного)
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", ИмяПредопределенного);
	
	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Возврат ?(РезультатПоиска.Количество() = 0, Неопределено, РезультатПоиска[0]);
КонецФункции

&НаКлиенте
Процедура НастройкиШтрихкодирования(Команда)
	
	ПодразделениеПользователя = ПолучитьПодразделение();
	ПараметрыФормы = Новый Структура("ВыборПодразделения, ПодразделениеКомпании", Истина, ПодразделениеПользователя);
	ОткрытьФорму("РегистрСведений.ИспользованиеШтрихкодированияДокументов.Форма.ФормаСпискаПоПодразделению",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделение()
	Возврат ПользователиКлиентСервер.ТекущийПользователь().ПодразделениеКомпании;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуНачалаОбособленногоУчетаТоваровПоОрганизациям()
	
	Возврат Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.Получить();
	
КонецФункции

#КонецОбласти

