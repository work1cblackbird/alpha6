///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Настройки параметров учета"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при нажатии на кнопку "Загрузка курсов валют".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОбработкаЗагрузкаКурсовВалют(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОткрытиеИзСписка", Истина);
	
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма", ПараметрыФормы);
	
КонецПроцедуры //ОбработкаЗагрузкаКурсовВалют()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Загрузить классификатор банков".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗагрузитьКлассификаторБанков(Команда)
	
	РаботаСБанкамиКлиент.ОткрытьФормуЗагрузкиКлассификатора();
	
КонецПроцедуры //ЗагрузитьКлассификаторБанков()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Настроить производственный календарь".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НастроитьПроизводственныйКалендарь(Команда)
	
	ОткрытьФорму("Справочник.ПроизводственныеКалендари.ФормаСписка");
	
КонецПроцедуры //НастроитьПроизводственныйКалендарь()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Справочник валюты открыть список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СправочникВалютыОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.Валюты.ФормаСписка");
	
КонецПроцедуры //СправочникВалютыОткрытьСписок()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Справочник банки открыть список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СправочникБанкиОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторБанков.ФормаСписка");
	
КонецПроцедуры //СправочникБанкиОткрытьСписок()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Справочник единицы открыть список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СправочникЕдиницыОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторЕдиницИзмерения.ФормаСписка");
	
КонецПроцедуры //СправочникЕдиницыОткрытьСписок()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Подобрать из классификатора".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодобратьИзКлассификатора(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторЕдиницИзмерения.Форма.ФормаПодборИзКлассификатора");
	
КонецПроцедуры // ПодобратьИзКлассификатора()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Справочник страны мира открыть список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СправочникСтраныМираОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.СтраныМира.ФормаСписка");
	
КонецПроцедуры //СправочникСтраныМираОткрытьСписок()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Выбрать из классификатора".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыбратьИзКлассификатора(Команда)
	
	// Открываем для выбора
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.СтраныМира.Форма.Классификатор", ПараметрыОткрытия);
	
КонецПроцедуры //ВыбратьИзКлассификатора()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Справочник ставка НДС открыть список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СправочникСтавкиНДСОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.СтавкиНДС.ФормаСписка");
	
КонецПроцедуры //СправочникСтавкиНДСОткрытьСписок()

&НаКлиенте
Процедура СправочникКлассификаторТНВЭДОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторТНВЭД.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКодТНВЭДИзКлассификатора(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторТНВЭД.Форма.ДобавлениеЭлементовВКлассификатор");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхФИАСПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

// Обработчик события возникающего на клиенте
// при нажатии на кнопку "Справочник типы номенклатуры открыть список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СправочникТипыНоменклатурыОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.ТипыНоменклатуры.ФормаСписка");
	
КонецПроцедуры //СправочникТипыНоменклатурыОткрытьСписок()

// Обработчик события возникающего на клиенте
// при нажатии на кнопку "Справочник типы маркировки открыть список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СправочникТипыМаркировкиОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.ТипыМаркировки.ФормаСписка");
	
КонецПроцедуры //СправочникТипыМаркировкиОткрытьСписок()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции //ПриИзмененииРеквизитаСервер()

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);

КонецПроцедуры //Подключаемый_ПриИзмененииРеквизита()

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		УправлениеДиалогомСервер.ДобавитьОповещениеФорм("Запись_НаборКонстант", Новый Структура, КонстантаИмя, Результат);
	КонецЕсли;
	
КонецПроцедуры //СохранитьЗначениеРеквизита()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	  
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМноговалютныйУчет") Тогда
		Элементы.Валюты.Видимость = Истина;
	Иначе
		Элементы.Валюты.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

