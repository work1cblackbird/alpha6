#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьНачальноеЗаполнениеПараметрыУчета() Экспорт
	
	// Номер релиза конфигурации используется для определения факта перехода с прошлой редакции решения на новую.
	Если НЕ Метаданные.Константы.Найти("НомерРелизаКонфигурации") = Неопределено Тогда
		Константы["НомерРелизаКонфигурации"].Установить("");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ИспользованиеОперативногоПроведенияДокументов.Получить()) Тогда
		Константы.ИспользованиеОперативногоПроведенияДокументов.Установить(
			Перечисления.ИспользованиеОперативногоПроведенияДокументов.РазрешеноОперативноеПроведение
		);
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// Параметры валютного учета
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		
		ВалютаРегламентированногоУчета = Справочники.Валюты.НайтиПоКоду("643");
		
		Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
			
			Объект = Справочники.Валюты.СоздатьЭлемент();
			Объект.НаименованиеПолное        = НСтр("ru = 'Российский рубль'");
			Объект.Код                       = "643";
			Объект.Наименование              = "RUB";
			Объект.ЗагружаетсяИзИнтернета    = Ложь;
			Объект.СпособУстановкиКурса      = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
			Объект.ПараметрыПрописи = НСтр("ru = 'рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2 знака'");
			Объект.Записать();
			
			ВалютаРегламентированногоУчета = Объект.Ссылка;
			
			Запись = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			Запись.Валюта    = ВалютаРегламентированногоУчета;
			Запись.Период    = '19800101';
			Запись.Курс      = 1;
			Запись.Кратность = 1;
			Запись.Записать();
			
		КонецЕсли;
		
		Константы.ВалютаРегламентированногоУчетаОрганизаций.Установить(ВалютаРегламентированногоУчета);
		
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаУправленческогоУчетаКомпании.Получить()) Тогда
		Константы.ВалютаУправленческогоУчетаКомпании.Установить(ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ЧекиПослеСвертки.Получить()) Тогда
		Константы.ЧекиПослеСвертки.Установить(Перечисления.ВариантыОтветов.Спрашивать);
	КонецЕсли;
	
	// Параметры основных единиц учета
	Если НЕ ЗначениеЗаполнено(Константы.ОсновнаяЕдиницаИзмеренияКоличества.Получить()) Тогда
		ЕдиницаКоличества = ПолучитьКлассификаторЕдиницыИзмерения("796", "шт", "Штука");
		Константы.ОсновнаяЕдиницаИзмеренияКоличества.Установить(ЕдиницаКоличества);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ОсновнаяЕдиницаИзмеренияМассы.Получить()) Тогда
		ЕдиницаВеса = ПолучитьКлассификаторЕдиницыИзмерения("166", "кг", "Килограмм");
		Константы.ОсновнаяЕдиницаИзмеренияМассы.Установить(ЕдиницаВеса);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ОсновнаяЕдиницаРазмерности.Получить()) Тогда
		ЕдиницаРазмерности = ПолучитьКлассификаторЕдиницыИзмерения("006", "м", "Метр");
		Константы.ОсновнаяЕдиницаРазмерности.Установить(ЕдиницаРазмерности);
	КонецЕсли;
	
	// Параметры штрихкодирования
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксШтучногоШК.Получить()) Тогда
		Константы.ПрефиксШтучногоШК.Установить(20);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВесовогоШК.Получить()) Тогда
		Константы.ПрефиксВесовогоШК.Установить(22);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПартияТоваровОтрицательныхОстатков.Получить()) Тогда
		
		// Найдем существующий документ партии отрицательных остатков
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваров.Ссылка,
		|	ПоступлениеТоваров.Дата
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	ПоступлениеТоваров.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ПоступлениеТоваровСреднееОтрицательное)";
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Константы.ПартияТоваровОтрицательныхОстатков.Установить(Выборка.Ссылка);
		Иначе
			
			// Определим дату первого документа поступления товаров
			Выборка = Документы.ПоступлениеТоваров.Выбрать(,,, "Дата");
			Если Выборка.Следующий() Тогда
				Дата = Мин(Выборка.Дата-1, НачалоГода(ТекущаяДатаСеанса())-1);
			Иначе
				Дата = НачалоГода(ТекущаяДатаСеанса())-1;
			КонецЕсли;
			
			// Создадим и заполним новый документ
			Объект = Документы.ПоступлениеТоваров.СоздатьДокумент();
			Объект.ХозОперация           = Справочники.ХозОперации.ПоступлениеТоваровСреднееОтрицательное;
			Объект.Дата                  = Дата;
			Объект.ВалютаДокумента       = ВалютаРегламентированногоУчета;
			Объект.Контрагент            = Справочники.Контрагенты.ОсновнойПоставщик;
			Объект.Организация           = Справочники.Организации.ОсновнаяОрганизация;
			Объект.ПодразделениеКомпании = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
			Объект.СкладКомпании         = Справочники.СкладыКомпании.ОсновнойСкладКомпании;
			Документы.ПоступлениеТоваров.КонтрагентПриИзменении(Объект);
			Объект.Заполнить(Неопределено);
			Объект.УстановитьНовыйНомер();
			
			// Производим запись нового документа
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать(РежимЗаписиДокумента.Запись);
			
			// Устанавливаем значение константы
			Константы.ПартияТоваровОтрицательныхОстатков.Установить(Объект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПланыОбмена.УдаленныеПодразделения.ЭтотУзел().РежимПроведенияПоПартиям) Тогда
		ПланОбменаОбъект = ПланыОбмена.УдаленныеПодразделения.ЭтотУзел().ПолучитьОбъект();
		ПланОбменаОбъект.РежимПроведенияПоПартиям = Перечисления.РежимыПроведенияПартий.ПервичнымиДокументамиДопроведение;
		ПланОбменаОбъект.Записать();
	КонецЕсли;
	
	// Параметры подсистемы скидок
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаНакопительныхСумм.Получить()) Тогда
		Константы.ВалютаНакопительныхСумм.Установить(ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	// Форматы вывода числовых показателей
	Если НЕ ЗначениеЗаполнено(Константы.ФорматВыводаКоличества.Получить()) Тогда
		Константы.ФорматВыводаКоличества.Установить("ЧН=0");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ФорматВыводаСуммы.Получить()) Тогда
		Константы.ФорматВыводаСуммы.Установить("ЧДЦ=2; ЧН=0,00");
	КонецЕсли;
	Константы.ПолныйНомерДокументаВПечатныхФормах.Установить(Истина);
	
	// Обработка жалоб клиента
	Если НЕ ЗначениеЗаполнено(Константы.ВремяРазбораЖалобы.Получить()) Тогда
		Константы.ВремяРазбораЖалобы.Установить(6);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ВремяРеакцииНаЖалобу.Получить()) Тогда
		Константы.ВремяРеакцииНаЖалобу.Установить(24);
	КонецЕсли;
	
	УстановитьЗначениеКонстантыНомерПоКаталогуОбязательный();
	УстановитьЗначениеКонстантыРежимКонтроляУникальностиНомераПоКаталогу();
	УстановитьЗначениеКонстантыСрокНапоминанияСнятияРезервов();
	УстановитьЗначениеКонстантыРежимКонтроляОстатковНаСкладах();
	
КонецПроцедуры // ВыполнитьНачальноеЗаполнениеРазделыУчета()

Процедура ВыполнитьНачальноеЗаполнениеРазделыУчета() Экспорт
	
	Константы.ИспользоватьОрдерныйСклад.       Установить(Истина);
	Константы.ИспользоватьКомиссионнаяТорговля.Установить(Истина);
	Константы.ИспользоватьЗаказы.              Установить(Истина);
	Константы.ИспользоватьРозничнаяТорговля.   Установить(Истина);
	Константы.ИспользоватьПланирование.        Установить(Истина);
	Константы.ИспользоватьБюджетирование.      Установить(Истина);
	Константы.ИспользоватьРасчетыПоЗарплате.   Установить(Истина);
	Константы.ИспользоватьЦенныеБумаги.        Установить(Истина);
	Константы.ИспользоватьРозничнаяТорговля.   Установить(Истина);
	Константы.ИспользоватьВнеоборотныеАктивы.  Установить(Истина);
	
КонецПроцедуры // ВыполнитьНачальноеЗаполнениеРазделыУчета()

Процедура ВыполнитьНачальноеЗаполнениеАналитикиУчета() Экспорт
	
	Константы.ИспользоватьМногофирменныйУчет.Установить(Истина);
	Константы.ИспользоватьМноговалютныйУчет.Установить(Истина);
	Константы.ИспользоватьПроекты.Установить(Истина);
	Константы.ИспользоватьПризнакРегламентированногоУчета.Установить(Истина);
	Если НЕ ЗначениеЗаполнено(Константы.ИспользоватьАртикул.Получить()) Тогда
		Константы.ИспользоватьАртикул.Установить(Перечисления.РежимыВыводаКодаВДокументах.Код);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ИспользоватьХарактеристики.Получить()) Тогда
		Константы.ИспользоватьХарактеристики.Установить(Истина);
	КонецЕсли;
	Константы.ИспользоватьЕдиницыИзмерения.Установить(Истина);
	Константы.ИспользоватьКоэффициентЕдиницИзмерения.Установить(Истина);
	Если ЗначениеЗаполнено(Константы.ИспользоватьБазовоеКоличество.Получить()) Тогда
		Константы.ИспользоватьБазовоеКоличество.Установить(Ложь);
	КонецЕсли;
	Константы.ИспользоватьГТД.Установить(Истина);
	Константы.ИспользоватьЯчейкиХранения.Установить(Истина);
	Если НЕ ЗначениеЗаполнено(Константы.ИспользоватьИндикациюОстатковТовара.Получить()) Тогда
		Константы.ИспользоватьИндикациюОстатковТовара.Установить(Истина);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Константы.ИспользоватьИндикациюСуммыСписания.Получить()) Тогда
		Константы.ИспользоватьИндикациюСуммыСписания.Установить(Истина);
	КонецЕсли; 
	
	УстановитьЗначениеКонстантыИспользоватьАртикулПечатныеФормы();
	
КонецПроцедуры // ВыполнитьНачальноеЗаполнениеАналитикиУчета()

Процедура ВыполнитьНачальноеЗаполнениеСлужебныеПодсистемы() Экспорт
	
	Константы.ИспользоватьПодключаемоеОборудование.Установить(Истина);
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	Константы.ИспользоватьОбщиеДополнительныеЗначения.Установить(Истина);
	Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Установить(Истина);
		
КонецПроцедуры // ВыполнитьНачальноеЗаполнениеСлужебныеПодсистемы()

Процедура УстановитьЗначениеКонстантыНомерПоКаталогуОбязательный() Экспорт
	
	Константы.НомерПоКаталогуОбязательный.Установить(Истина);
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыРежимКонтроляУникальностиНомераПоКаталогу() Экспорт
	
	Константы
	.РежимКонтроляУникальностиНомераПоКаталогу
	.Установить(Перечисления.РежимыКонтроляУникальностиНомераПоКаталогу.ПоПроизводителю);
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыСрокНапоминанияСнятияРезервов() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.СрокНапоминанияСнятияРезервов.Получить()) Тогда
		Константы.СрокНапоминанияСнятияРезервов.Установить(5);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗначениеКонстантыРежимКонтроляОстатковНаСкладах() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.РежимКонтроляОстатковНаСкладах.Получить()) Тогда
		Константы.РежимКонтроляОстатковНаСкладах.Установить(
			Перечисления.РежимыКонтроляОстатковНаСкладах.ПоОрганизации
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыИспользоватьАртикулПечатныеФормы() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ИспользоватьАртикулПечатныеФормы.Получить()) Тогда
		Константы.ИспользоватьАртикулПечатныеФормы.Установить(Перечисления.РежимыВыводаКодаВДокументах.Артикул);
	КонецЕсли;  
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКлассификаторЕдиницыИзмерения(Код, Наименование, ПолноеНаименование)
	
	КлассификаторЕдиницы = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);
	
	Если НЕ ЗначениеЗаполнено(КлассификаторЕдиницы) Тогда
		
		Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		Объект.НаименованиеПолное = ПолноеНаименование;
		Объект.Код                = Код;
		Объект.Наименование       = Наименование;
		Объект.Записать();
		
		КлассификаторЕдиницы = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат КлассификаторЕдиницы;
	
КонецФункции // ПолучитьКлассификаторЕдиницыИзмерения()

#КонецОбласти

#КонецЕсли