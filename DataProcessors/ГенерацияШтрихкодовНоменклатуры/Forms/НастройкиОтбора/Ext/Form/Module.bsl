#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	СхемаКомпоновкиДанных = Обработки.ГенерацияШтрихкодовНоменклатуры.ПолучитьМакет("Макет");
	АдресХранилища = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилища));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	ДеревоОтбор.Очистить();
	Настройки = Компоновщик.ПолучитьНастройки();
	ЗаполнитьНастройки(ДеревоОтбор, Настройки.Отбор.Элементы, Настройки.Отбор.ДоступныеПоляОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтбор

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Элементы.ОтборПравоеЗначение, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		ИЛИ НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОтборЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("КомпоновщикНастроекИзНоменклатуры", Компоновщик);
		ПараметрыВыбора.Вставить("ВидПолей", "Отбор");
		ПараметрыВыбора.Вставить("ТекущееПоле", ТекущиеДанные.ЛевоеЗначение);
		ПараметрыВыбора.Вставить("ВидСравнения", ПолучитьПолноеИмяПредопределенногоЗначения(ТекущиеДанные.ВидСравнения));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		ДополнительныеПараметры.Вставить("Событие", "Отбор");
		
		ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения(
			"Подключаемый_ОповещениеИзменениеОтбора",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ОткрытьФорму(
			"ОбщаяФорма.ФормаВыбораПолейОтчета",
			ПараметрыВыбора,
			ЭтотОбъект,
			, , ,
			ОписаниеОповещенияВыбораПоля,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	ИначеЕсли Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		Если ТекущиеДанные.Папка Тогда
			Возврат;
		КонецЕсли;
		
		ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
		
		Если ДоступноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		Иначе
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("КомпоновщикНастроекИзНоменклатуры", Компоновщик);
	ПараметрыВыбора.Вставить("ВидПолей", "Отбор");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Событие", "НовыйОтбор");
	ОписаниеОповещенияВыбораПоля = Новый ОписаниеОповещения("Подключаемый_ОповещениеНовыйОтбор", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораПолейОтчета",
		ПараметрыВыбора,
		ЭтотОбъект,
		, , ,
		ОписаниеОповещенияВыбораПоля,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И НЕ ОтчетыПлатформаВызовСервера.ДействиеОтбораВозможноВыполнить(ТекущиеДанные.ЛевоеЗначение) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" ИЛИ Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если НЕ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Отбор.НайтиПоИдентификатору(Значение);
	
	ДеревоПоказателей = Отбор.ПолучитьЭлементы();
	
	Если Строка = Неопределено Тогда
		
		НоваяСтрока = ДеревоПоказателей.Добавить();
		
	ИначеЕсли ТипЗнч(Строка) = Тип("Число") Тогда
		
		СтрокаПриемник = Отбор.НайтиПоИдентификатору(Строка);
		
		// Нельзя перетаскивать группу в собственную ветку
		Если СтрокаИсточник.Папка Тогда
			ТекущийРодитель = СтрокаПриемник.ПолучитьРодителя();
			Пока НЕ ТекущийРодитель = Неопределено Цикл
				Если ТекущийРодитель = СтрокаИсточник Тогда
					Возврат;
				КонецЕсли;
				ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаПриемник.Папка Тогда
			
			НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
			
		Иначе
			
			РодительПриемника = СтрокаПриемник.ПолучитьРодителя();
			Если РодительПриемника = Неопределено Тогда
				КоллекцияПриемника = ДеревоПоказателей;
			Иначе
				КоллекцияПриемника = РодительПриемника.ПолучитьЭлементы();
			КонецЕсли;
			ИндексПриемника = КоллекцияПриемника.Индекс(СтрокаПриемник);
			НоваяСтрока = КоллекцияПриемника.Вставить(ИндексПриемника+1);
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	
	СкопироватьСтрокуДерева(НоваяСтрока.ПолучитьЭлементы(), СтрокаИсточник.ПолучитьЭлементы());
	
	РодительИсточника = СтрокаИсточник.ПолучитьРодителя();
	Если РодительИсточника = Неопределено Тогда
		ДеревоПоказателей.Удалить(СтрокаИсточник);
	Иначе
		РодительИсточника.ПолучитьЭлементы().Удалить(СтрокаИсточник);
	КонецЕсли;
	
	Элементы.Отбор.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	
	Элементы.Отбор.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Папка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.Заполнено")
		ИЛИ ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.НеЗаполнено") Тогда
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
	Иначе
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
	КонецЕсли;
	
	ПривестиЗначениеКВидуСравнения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПривестиЗначениеКВидуСравнения(ТекущиеДанные);
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
		ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
		
		Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СписокВыбора", ТекущиеДанные.ПравоеЗначение);
		СтруктураПараметров.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
		СтруктураПараметров.Вставить("ДоступныеЗначения", ДоступноеПоле.ДоступныеЗначения);
		СтруктураПараметров.Вставить("ТолькоГруппы", ТолькоГруппы);
		
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения(
			"Подключаемый_ОповещениеВыбораЗначенияОтбора",
			ЭтотОбъект
		);
		ОткрытьФорму(
			"ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка",
			СтруктураПараметров,
			Элемент,
			, , ,
			ОписаниеОповещенияВыбораЗначения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтборДобавить(Команда)
	
	Элементы.Отбор.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДобавитьГруппу(Команда)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	ЭлементыОтбора = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Отбор);
	
	НоваяГруппаОтборов = ЭлементыОтбора.Добавить();
	НоваяГруппаОтборов.Использование = Истина;
	НоваяГруппаОтборов.Папка = Истина;
	НоваяГруппаОтборов.ВыводитьТолькоЗаголовок = Истина;
	НоваяГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Элементы.Отбор.ТекущаяСтрока = НоваяГруппаОтборов.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСнятьПометки(Команда)
	
	УстановитьПометки(Отбор.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУстановитьПометки(Команда)
	
	УстановитьПометки(Отбор.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Закрыть(ПараметрыЗакрытия());
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Папка Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторОтбора = Строка(Элементы.Отбор.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтбора = Элементы.Отбор.ТекущаяСтрока;
	
	// Настройка вида сравнения отбора
	СписокВидовСравнения = Элементы.ОтборВидСравнения.СписокВыбора;
	СписокВидовСравнения.Очистить();
	
	// Настройка значения отбора
	СписокВыбораЗначений = Элементы.ОтборПравоеЗначение.СписокВыбора;
	СписокВыбораЗначений.Очистить();
	
	Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка     = Ложь;
	Элементы.ОтборПравоеЗначение.КнопкаВыбора            = Истина;
	Элементы.ОтборПравоеЗначение.КнопкаВыпадающегоСписка = Ложь;
	Элементы.ОтборПравоеЗначение.ОграничениеТипа         = Новый ОписаниеТипов("Неопределено");
	
	ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
	
	Если ДоступноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Настройка вида сравнения отбора
	Для Каждого ДоступноеСравнения Из ДоступноеПоле.ДоступныеВидыСравнения Цикл
		СписокВидовСравнения.Добавить(ДоступноеСравнения.Значение, Строка(ДоступноеСравнения.Значение));
	КонецЦикла;
	
	// Настройка значения отбора
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
		ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	Иначе
		Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	КонецЕсли;
	
	Элементы.ОтборПравоеЗначение.Маска                = ДоступноеПоле.Маска;
	Элементы.ОтборПравоеЗначение.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
	Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ДоступноеПоле.ТипЗначения;
	
	Если ТипЗнч(ДоступноеПоле.ДоступныеЗначения) = Тип("СписокЗначений")
		И ДоступноеПоле.ДоступныеЗначения.Количество() > 0 Тогда
		
		Для Каждого ДоступноеЗначение Из ДоступноеПоле.ДоступныеЗначения Цикл
			СписокВыбораЗначений.Добавить(ДоступноеЗначение.Значение, ДоступноеЗначение.Представление);
		КонецЦикла;
		
		Элементы.ОтборПравоеЗначение.РежимВыбораИзСписка     = Истина;
		Элементы.ОтборПравоеЗначение.КнопкаВыбора            = Ложь;
		Элементы.ОтборПравоеЗначение.КнопкаВыпадающегоСписка = Истина;
		
	Иначе
		
		Элементы.ОтборПравоеЗначение.БыстрыйВыбор = ДоступноеПоле.БыстрыйВыбор;
		
		Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
		
		МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
		Если МассивТипов.Количество() > 0 Тогда
			Если МассивТипов[0] = Тип("Строка") Тогда
				Элементы.ОтборПравоеЗначение.КнопкаВыбора = Ложь;
				Элементы.ОтборПравоеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуДерева(КоллекцияПриемник, КоллекцияИсточник)
	
	КоллекцияПриемник.Очистить();
	
	Для Каждого ТекущаяСтрока Из КоллекцияИсточник Цикл
		
		НоваяСтрока = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		СкопироватьСтрокуДерева(НоваяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиЗначениеКВидуСравнения(Строка)
	
	ТекущееЗначение = Строка.ПравоеЗначение;
	ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(Строка.ЛевоеЗначение);
	// Если старый вид сравнения был в списке
	Если НЕ ОтборПоСписку(Строка.ВидСравнения) И ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений") Тогда
		Если ТекущееЗначение.Количество() = 0 Тогда
			ТекущееЗначение = Неопределено;
		Иначе
			ТекущееЗначение = ТекущееЗначение[0].Значение;
		КонецЕсли;
		// Если новый вид сравнения стал в списке
	ИначеЕсли ОтборПоСписку(Строка.ВидСравнения) И (НЕ ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений")) Тогда
		ВременныйСписок = Новый СписокЗначений;
		ВременныйСписок.Добавить(ТекущееЗначение);
		ТекущееЗначение = ВременныйСписок;
	КонецЕсли;
	
	Если ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений") Тогда
		КоличествоЭлементов = ТекущееЗначение.Количество()-1;
		Пока КоличествоЭлементов >= 0 Цикл
			
			ПоследнийЭлемент = ТекущееЗначение[КоличествоЭлементов];
			ПоследнийЭлемент.Значение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(ПоследнийЭлемент.Значение);
			
			Если НЕ ЗначениеЗаполнено(ПоследнийЭлемент.Значение) Тогда
				ТекущееЗначение.Удалить(ПоследнийЭлемент);
			КонецЕсли;
			
			КоличествоЭлементов = КоличествоЭлементов - 1;
			
		КонецЦикла;
	Иначе
		МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
		Если МассивТипов[0] = Тип("Строка") Тогда
			ТипСтрока = Новый ОписаниеТипов("Строка");
			ТекущееЗначение = ТипСтрока.ПривестиЗначение(ТекущееЗначение);
		Иначе
			ТекущееЗначение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(ТекущееЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Строка.ПравоеЗначение = ТекущееЗначение;
	
КонецПроцедуры

&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	Результат = Ложь;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ВидСравненияОтбора= ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОповещениеНовыйОтбор(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	ЭлементыОтбора = ОтчетыПлатформаКлиент.ПолучитьЭлементыДляДерева(ТекущиеДанные, Отбор);
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.Заголовок     = РезультатЗакрытия.Заголовок;
	НовыйОтбор.ЛевоеЗначение = РезультатЗакрытия.Поле;
	НовыйОтбор.ВидСравнения  = ПредопределенноеЗначение(РезультатЗакрытия.ВидСравнения);
	НовыйОтбор.Папка         = Ложь;
	
	Элементы.Отбор.ТекущаяСтрока = НовыйОтбор.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки(КоллекцияЭлементов, ОбъектНастройки, ДоступныеНастройки)
	
	Для Каждого ЭлементОтбора Из ОбъектНастройки Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ГруппаОтборов = КоллекцияЭлементов.Добавить();
			ГруппаОтборов.Использование           = ЭлементОтбора.Использование;
			ГруппаОтборов.ТипГруппы               = ЭлементОтбора.ТипГруппы;
			ГруппаОтборов.Папка                   = Истина;
			ГруппаОтборов.ВыводитьТолькоЗаголовок = Истина;
			
			ЗаполнитьНастройки(ГруппаОтборов.ПолучитьЭлементы(), ЭлементОтбора.Элементы, ДоступныеНастройки);
			
		Иначе
			
			ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
			// Имя поля изменилось или поле было удалено.
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаголовокПоля = ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПоле);
			
			НовыйОтбор = КоллекцияЭлементов.Добавить();
			НовыйОтбор.Использование           = ЭлементОтбора.Использование;
			НовыйОтбор.ЛевоеЗначение           = ЭлементОтбора.ЛевоеЗначение;
			НовыйОтбор.ВидСравнения            = ЭлементОтбора.ВидСравнения;
			НовыйОтбор.ПравоеЗначение          = ЭлементОтбора.ПравоеЗначение;
			НовыйОтбор.Заголовок               =  ЗаголовокПоля;
			НовыйОтбор.Папка                   = Ложь;
			НовыйОтбор.ВыводитьТолькоЗаголовок = (НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
				ИЛИ НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(ТаблицаЭлементов, Флаг)
	
	Для Каждого ЭлементТаблицы Из ТаблицаЭлементов Цикл
		
		ЭлементТаблицы.Использование = Флаг;
		
		Если ЭлементТаблицы.Папка Тогда
			УстановитьПометки(ЭлементТаблицы.ПолучитьЭлементы(), Флаг);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОповещениеИзменениеОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ ДополнительныеПараметры = Неопределено) И ДополнительныеПараметры.Свойство("ТекущиеДанные") Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.ВидПолей = "Отбор" Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		ТекущиеДанные.Заголовок     = РезультатЗакрытия.Заголовок;
		ТекущиеДанные.Использование = Истина;
		ТекущиеДанные.ЛевоеЗначение = РезультатЗакрытия.Поле;
		ТекущиеДанные.ВидСравнения  = ПредопределенноеЗначение(РезультатЗакрытия.ВидСравнения);
		ТекущиеДанные.Папка         = Ложь;
		
		ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(РезультатЗакрытия.Поле);
		Если ДоступноеПоле = Неопределено
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ТекущиеДанные.ПравоеЗначение          = Неопределено;
			ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
		Иначе
			ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
			ПривестиЗначениеКВидуСравнения(ТекущиеДанные);
		КонецЕсли;
		
		ИдентификаторОтбора = "";
		Подключаемый_ОбработчикОжиданияОтборПриАктивизацииСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборТипГруппы.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборИспользованиеГруппы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборИспользование.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПравоеЗначение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборВидСравнения.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборЗаголовок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборИспользование.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПравоеЗначение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборВидСравнения.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборЗаголовок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.ВыводитьТолькоЗаголовок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.ВыводитьТолькоЗаголовок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗакрытия()
	
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	ОтборКомпоновщика = Компоновщик.Настройки.Отбор.Элементы;
	ОтборКомпоновщика.Очистить();
	
	ЗаполнитьНастройкиКомпоновщика(ОтборКомпоновщика, ДеревоОтбор);
	Результат = Новый Структура;
	Результат.Вставить("Компоновщик", Компоновщик.Настройки);
	
	Возврат ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиКомпоновщика(ОбъектНастройки, КоллекцияЭлементов)
	
	Для Каждого СтрокаОтбора Из КоллекцияЭлементов Цикл
		
		Если СтрокаОтбора.Папка Тогда
			ГруппаОтбора = ОбъектНастройки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.Использование = СтрокаОтбора.Использование;
			ГруппаОтбора.ТипГруппы     = СтрокаОтбора.ТипГруппы;
			
			ЗаполнитьНастройкиКомпоновщика(ГруппаОтбора.Элементы, СтрокаОтбора.ПолучитьЭлементы());
		Иначе
			ЭлементОтбора = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = СтрокаОтбора.Использование;
			ЭлементОтбора.ЛевоеЗначение  = СтрокаОтбора.ЛевоеЗначение;
			ЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
			ЭлементОтбора.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		ТекущиеДанные.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти