#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИспользуютсяХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользуютсяЕдиницыИзмерения = ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмерения");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыХарактеристикаНоменклатуры",
		"Видимость",
		ИспользуютсяХарактеристики
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЕдиницаИзмерения",
		"Видимость",
		ИспользуютсяЕдиницыИзмерения
	);
	
	Элементы.ТоварыПодсветка.Пометка = Истина;
	СоздатьКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Принимаем только внешние события от сканера ШК
	Если НЕ ВводДоступен() ИЛИ ИмяСобытия <> "ScanData" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Штрихкод = ШтрихкодированиеКлиент.ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр);
	ПараметрыДействия = Новый Структура;
	ШтрихкодированиеКлиент.ОбработатьПолныйШтрихкод(Штрихкод, ПараметрыДействия);
	Если ШтрихКод = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что считана именно маркировка.
	ТекстСообщения = "";
	Если НЕ МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(ПараметрыДействия.Штрихкод) = "EAN13" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Введен штрихкод не в формате EAN13'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.Штрихкод = Штрихкод;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыНоменклатура Тогда
		ПоказатьЗначение(, Элементы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьШтрихкоды(Команда)
	
	ЗаполнитьШтрихкодыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьШтрихкоды(Команда)
	
	ЗаписатьШтрихкодыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	Если Не Товары.Количество() = 0 Тогда
		
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьПоОтборуПродолжить", ЭтотОбъект);
		ПоказатьВопрос(
			Обработчик,
			НСтр("ru = 'Очистить табличную часть перед заполнением?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да
		);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоОтборуПродолжить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТовары(Команда)
	
	Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНезаполненныеСтроки(Команда)
	
	КУдалению = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод) Тогда
			КУдалению.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из КУдалению Цикл
		
		Товары.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодсветка(Команда)
	
	Элементы.ТоварыПодсветка.Пометка = НЕ Элементы.ТоварыПодсветка.Пометка;
	ОбновитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзДокументов(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипДокумента", Команда.Имя);
	
	Если Не Товары.Количество() = 0 Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_ЗаполнитьПоДокументуПродолжить",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ПоказатьВопрос(
			Обработчик,
			НСтр("ru = 'Очистить табличную часть перед заполнением?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да
		);
		Возврат;
		
	КонецЕсли;
	
	Подключаемый_ЗаполнитьПоДокументуПродолжить(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТоварыНаСервере(НастройкиКомпоновщика = Неопределено, СписокНоменклатуры = Неопределено)
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	СхемаКомпоновкиДанных = Обработки.ГенерацияШтрихкодовНоменклатуры.ПолучитьМакет("Макет");
	Если ЗначениеЗаполнено(СписокНоменклатуры) Тогда
		Параметр = СхемаКомпоновкиДанных.Параметры.Получить(0);
		Параметр.Значение = СписокНоменклатуры;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если НЕ СписокНоменклатуры = Неопределено Тогда
		ЗначениеПараметра = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("СписокНоменклатуры")
		);
		ЗначениеПараметра.Значение = СписокНоменклатуры;
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ПоСписку")
		);
		ЗначениеПараметра.Значение = Истина;
		ЗначениеПараметра.Использование = Истина;
	ИначеЕсли ЗначениеЗаполнено(НастройкиКомпоновщика) Тогда
		Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновщика);
		ЗначениеПараметра = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ПоСписку")
		);
		ЗначениеПараметра.Значение = Ложь;
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
		СхемаКомпоновкиДанных,
		Компоновщик.Настройки,
		, ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаТоваров);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	Для Каждого Выборка Из ТаблицаТоваров Цикл
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура", Выборка.Ссылка);
		Если ИспользуютсяХарактеристики И ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
			ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ИспользуютсяЕдиницыИзмерения И ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		КонецЕсли;
		
		Если Товары.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Ссылка;
		Если ИспользуютсяХарактеристики Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			Если Выборка.ИспользованиеХарактеристик = 1 Тогда
				НоваяСтрока.ВладелецХарактеристики = Выборка.ТипНоменклатуры;
			ИначеЕсли Выборка.ИспользованиеХарактеристик = 2 Тогда
				НоваяСтрока.ВладелецХарактеристики = Выборка.Ссылка;
			Иначе
				НоваяСтрока.ВладелецХарактеристики = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользуютсяЕдиницыИзмерения Тогда
			НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			Если Выборка.ИспользованиеЕдиницИзмерения = 1 Тогда
				НоваяСтрока.ВладелецЕдиницыИзмерения = Выборка.ТипНоменклатуры;
			ИначеЕсли Выборка.ИспользованиеЕдиницИзмерения = 2 Тогда
				НоваяСтрока.ВладелецЕдиницыИзмерения = Выборка.Ссылка;
			Иначе
				НоваяСтрока.ВладелецЕдиницыИзмерения = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.ИспользованиеШтрихКодов = Выборка.ИспользованиеШтрихКодов;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидСравнения(ВидСравненияСКД)
	
	Если ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Больше Тогда
		Результат = ВидСравнения.Больше;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Результат = ВидСравнения.БольшеИлиРавно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Результат = ВидСравнения.ВИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Результат = ВидСравнения.ВСписке;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Результат = ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Результат = ВидСравнения.Меньше;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Результат = ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Результат = ВидСравнения.НеВИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Результат = ВидСравнения.НеВСписке;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Результат = ВидСравнения.НеВСпискеПоИерархии;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Результат = ВидСравнения.НеРавно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Результат = ВидСравнения.НеСодержит;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно Тогда
		Результат = ВидСравнения.Равно;
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Результат = ВидСравнения.Содержит;
	Иначе
		// Не нашли соответствие - не применяем отбор
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеоформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ИспользованиеШтрихКодов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 3;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ИспользованиеШтрихКодов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Штрихкод");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПравоСозданияФон);
	ЭлементУсловногоОформления.Использование = Истина;
	
	Для Каждого ПолеОформления Из Элементы.Товары.ПодчиненныеЭлементы Цикл
		
		ПолеДляОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеДляОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления.Имя);
		ПолеДляОформления.Использование = Истина;
		Если ТипЗнч(ПолеОформления) = Тип("ГруппаФормы") Тогда
			Для Каждого ПолеОформленияГруппы Из ПолеОформления.ПодчиненныеЭлементы Цикл
				ПолеДляОформленияГруппы = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеДляОформленияГруппы.Поле = Новый ПолеКомпоновкиДанных(ПолеОформленияГруппы.Имя);
				ПолеДляОформленияГруппы.Использование = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Штрихкод");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПравоПросмотраФон);
	ЭлементУсловногоОформления.Использование = Истина;
	
	Для Каждого ПолеОформления Из Элементы.Товары.ПодчиненныеЭлементы Цикл
		
		ПолеДляОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеДляОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления.Имя);
		ПолеДляОформления.Использование = Истина;
		Если ТипЗнч(ПолеОформления) = Тип("ГруппаФормы") Тогда
			Для Каждого ПолеОформленияГруппы Из ПолеОформления.ПодчиненныеЭлементы Цикл
				ПолеДляОформленияГруппы = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеДляОформленияГруппы.Поле = Новый ПолеКомпоновкиДанных(ПолеОформленияГруппы.Имя);
				ПолеДляОформленияГруппы.Использование = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШтрихкодыНаСервере()
	
	Для Каждого Строка Из Товары Цикл
		
		Если Не ПустаяСтрока(Строка.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Штрихкод = ШтрихкодированиеВызовСервера.СформироватьНовыйШтрихкод(Строка.Номенклатура);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьШтрихкодыНаСервере()
	
	ЕстьОшибки = Ложь;
	
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод) Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Штрихкод не заполнен.'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Штрихкод"),
			);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого Строка Из Товары Цикл
		
		НоваяЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = Строка.Номенклатура;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка, "ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
		НоваяЗапись.Прочитать();
		НоваяЗапись.Объект = Строка.Номенклатура;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка, "ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
		НоваяЗапись.Штрихкод = Строка.Штрихкод;
		
		ПараметрыДействия = Новый Структура;
		ШтрихкодУникален = ШтрихкодированиеВызовСервера.ПроверкаУникальностиШтрихкодов(
			Строка.Штрихкод,
			Строка.Номенклатура,
			,
			ПараметрыДействия
		);
		Если Не ШтрихкодУникален Тогда
			ОбщегоНазначения.СообщитьПользователю(
				ПараметрыДействия.ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Штрихкод")
			);
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			НоваяЗапись.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось записать штрихкоды:'") + Символы.ПС + ОписаниеОшибки()
			);
		КонецПопытки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПоДокументуПродолжить(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ОчищатьТаблицу");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнитьПоДокументуЗавершить",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор",Истина);
	ОткрытьФорму(
		"Документ." + ДополнительныеПараметры.ТипДокумента + ".ФормаСписка",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПоДокументуЗавершить(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ОчищатьТаблицу") Тогда
		Товары.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоДокументуНаСервере(Результат, ДополнительныеПараметры.ТипДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуНаСервере(Результат, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", Результат);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ИЗ
	|	Документ." + ТипДокумента + ".Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&МассивОбъектов)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры = Новый СписокЗначений;
	Для Каждого Элемент Из Результат Цикл
		СписокНоменклатуры.Добавить(Элемент);
	КонецЦикла;
	
	ЗаполнитьТоварыНаСервере(, СписокНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКоманды()
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить(Метаданные.Документы.ЗаказПокупателя);
	СписокДокументов.Добавить(Метаданные.Документы.ЗаказПоставщику);
	СписокДокументов.Добавить(Метаданные.Документы.ПоступлениеТоваров);
	СписокДокументов.Добавить(Метаданные.Документы.РеализацияТоваров);
	
	Для Каждого Документ Из СписокДокументов Цикл
		НоваяКоманда = Команды.Добавить(Документ.Имя);
		НоваяКоманда.Заголовок = Документ.Синоним;
		НоваяКоманда.Действие = "ЗаполнитьИзДокументов";
		
		НовыйЭлемент = Элементы.Добавить(Документ.Имя, Тип("КнопкаФормы"),Элементы.ИзДокументов);
		НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
		НовыйЭлемент.Заголовок = Документ.Синоним;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШтрихкодНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.Штрихкод) Тогда
		
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТоварыШтрихкодНачалоВыбора", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Сформировать новый штрихкод?'");
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекущиеДанные.Штрихкод = СформироватьШтрихкодНаСервере(ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьШтрихкодНаСервере(Номенклатура)
	
	Возврат ШтрихкодированиеВызовСервера.СформироватьНовыйШтрихкод(Номенклатура);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТоварыШтрихкодНачалоВыбора(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.Штрихкод = СформироватьШтрихкодНаСервере(ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформление()
	
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		
		ЭлементОформления.Использование = Элементы.ТоварыПодсветка.Пометка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтборуЗавершить(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ОчищатьТаблицу") Тогда
		Товары.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоОтборуНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОтборуНаСервере(АдресХранилища)
	
	ОтборКомпоновщика = ПолучитьИзВременногоХранилища(АдресХранилища).Компоновщик;
	ЗаполнитьТоварыНаСервере(ОтборКомпоновщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтборуПродолжить(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ОчищатьТаблицу");
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьПоОтборуЗавершить", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Обработка.ГенерацияШтрихкодовНоменклатуры.Форма.НастройкиОтбора",
		,
		ЭтотОбъект,
		, , ,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

#КонецОбласти