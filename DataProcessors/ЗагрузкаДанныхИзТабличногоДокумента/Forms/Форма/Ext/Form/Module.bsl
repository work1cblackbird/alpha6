#Область ОписаниеПеременных

&НаСервере
Перем ПрошлыйМетаданныеСсылкиИсточника;                    // Метаданные ссылки источника

&НаКлиенте
Перем КаталогЗагружаемогоФайла;                            // Каталог загружаемого файла

&НаКлиенте
Перем ПолныйПутьКЗагружаемомуФайлу;                        // Полный путь к файлу

&НаКлиенте
Перем ИндексТипаЗагружаемогоФайла;                         // Индекс типа загружаемого файла

&НаКлиенте
Перем НастройкиЗагруженыИзФайла;                           // Флаг загрузки настройки из файла

&НаКлиенте
Перем флКонтрольЗаполнения;                                // Вспомогательный флаг Контроль/Заполнение для выражений

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события формы "при создании на сервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Объект.ТаблицаЗагружаемыхРеквизитов.Загрузить(ТаблицаЗагружаемыхРеквизитов.Выгрузить());
	
	СписокВыбора = Элементы.ТипОбъекта.СписокВыбора;
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		СписокВыбора.Добавить(Справочники[ОбъектМетаданных.Имя].ПустаяСсылка(), ОбъектМетаданных.Представление());
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	МетаданныеПодчиненРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	СписокВыбора = Элементы.ИмяВидаРегистра.СписокВыбора;
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		Если НЕ ОбъектМетаданных.РежимЗаписи = МетаданныеПодчиненРегистратору Тогда
			СписокВыбора.Добавить(ОбъектМетаданных.Имя, ОбъектМетаданных.Представление());
		КонецЕсли;
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Типы = Новый Массив;
	ВидыТипов = Новый Структура("Справочники,Документы");
	Для Каждого КлючИЗначение Из ВидыТипов Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Количество() Тогда
				Типы.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(),".","Ссылка.")));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Элементы.СтраницаСоответствия.Видимость = Ложь;
	
	Элементы.СсылкаИсточника.ОграничениеТипа = Новый ОписаниеТипов(Типы);
	
	Объект.ДействиеСЗагружаемымФайлом = 2;
	Объект.ФорматДатыСрокаГодности    = "дд.мм.гггг";
	
	Элементы.КаталогАрхиваЗагруженныхФайлов.Доступность = Объект.ДействиеСЗагружаемымФайлом = 0;
	мОбновитьДанныеТабличногоДокумента(Объект.ТабличныйДокумент);
	НастройкиЗагруженыИзФайла = ЛОЖЬ;
	НомерКолонкиСНаименованием = 1;
	
КонецПроцедуры

// Обработчик события формы "ПриОткрытии".
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	#Если НЕ ВебКлиент Тогда
		ИнициализацияПриОткрытии();
		
		Если Объект.РежимЗагрузки = 3 Тогда
			
			Отказ = Истина;
			
			ФормаИмя = "Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаПомощник";
			
			ПараметрыФормы = Новый Структура();
			
			Результат = Неопределено;

			ОткрытьФорму(ФормаИмя, ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            Возврат;
			
		КонецЕсли;
		
	#Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Загрузка данных из внешних файлов не поддерживается в веб-клиенте.'"));
		Отказ = ИСТИНА;
		Возврат;
		
	#КонецЕсли

    ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Обработчик события формы "ПриЗакрытии".
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	Если (Объект.РежимЗагрузки = 3) ИЛИ (ЭтоДокумент И (Объект.РежимЗагрузки = 1)) Тогда
		Если Объект.СоответствиеНоменклатуры<>Неопределено И Объект.СоответствиеНоменклатуры.Количество()>0 Тогда
			ОтмеченныеСтроки = Объект.СоответствиеНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
			Если ОтмеченныеСтроки.Количество()<>Объект.СоответствиеНоменклатуры.Количество() Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект), НСтр("ru = 'Сохранить соответствия номенклатуры в прайс-лист поставщика?'"), РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Да Тогда 
        СохранитьТаблицуСоответствия();
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗагружатьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	УстановитьИсточник();
	ОбновлениеОтображенияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыИСведенияТолькоОбщиеПриИзменении(Элемент)
	
	Если Объект.ДополнительныеРеквизитыИСведенияТолькоОбщие Тогда
		ДополнительныеРеквизитыИСведенияТипНоменклатурыНаФорме.Очистить();
	КонецЕсли;
	УстановитьИсточник();
	ОбновлениеОтображенияНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПоТипуНоменклатурыПриИзменении(Элемент)
	УстановитьИсточник();
	ОбновлениеОтображенияНаКлиенте();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага "ИспользоватьВнешнийМодульПреобразованияФайла".
//
&НаКлиенте
Процедура ИспользоватьВнешнийМодульПреобразованияФайлаПриИзменении(Элемент)
	
	НастроитьДоступностьПоляОбработки();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля формы "ДействиеСЗагружаемымФайлом".
//
&НаКлиенте
Процедура ДействиеСЗагружаемымФайломПриИзменении(Элемент)
	
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля формы "КаталогАрхиваЗагруженныхФайлов".
//
&НаКлиенте
Процедура КаталогАрхиваЗагруженныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//	Обработка выбора каталога хранения архива сохраняемых файлов.
	СтандартнаяОбработка   = Ложь;
	ДиалогОткрытияКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияКаталога.ПолноеИмяФайла = "";
	ДиалогОткрытияКаталога.МножественныйВыбор = Ложь;
	
	// Определим, какой каталог выбираем.
	ДиалогОткрытияКаталога.Заголовок = НСтр("ru = 'Выберите каталог архива загружаемых файлов'");
	ДиалогОткрытияКаталога.Каталог   = Объект.КаталогАрхиваЗагруженныхФайлов;
	
	// Предоставим выбор пользователю.
	ПараметрыОповещения = Новый Структура("ДиалогОткрытияКаталога", ДиалогОткрытияКаталога);
	ОписаниеОповещения =
		Новый ОписаниеОповещения("КаталогАрхиваЗагруженныхФайловНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ДиалогОткрытияКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогАрхиваЗагруженныхФайловНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияКаталога = ДополнительныеПараметры.ДиалогОткрытияКаталога;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогАрхиваЗагруженныхФайлов = ДиалогОткрытияКаталога.Каталог;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗагружаемыхРеквизитов

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ВозможностьУстановкиЗагрузки = ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ТекущиеДанные.ОписаниеТипов, ТекущиеДанные.ЗначениеПоУмолчанию);
		СписокВыбораЭлемента = Элемент.СписокВыбора;
		Если ВозможностьУстановкиЗагрузки И СписокВыбораЭлемента.Количество() = 3 Тогда
			СписокВыбораЭлемента.Добавить("Загружать", "Загружать");
		ИначеЕсли Не ВозможностьУстановкиЗагрузки И СписокВыбораЭлемента.Количество() = 4 Тогда
			СписокВыбораЭлемента.Удалить(СписокВыбораЭлемента.Количество() - 1);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПометкаПриИзменении(Элемент)
	ОбновлениеОтображенияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовИскатьПоПриИзменении(Элемент)
	ОбновлениеОтображенияНаКлиенте();
КонецПроцедуры

// Обработчик события "ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ИндексТекущейСтроки = ТаблицаЗагружаемыхРеквизитов.Индекс(Элемент.ТекущиеДанные);
	ТекущийЭлементИмя = Элемент.ТекущийЭлемент.Имя;
	РежимЗагрузкиИскать = Элемент.ТекущиеДанные.РежимЗагрузки = "Искать";
	
	Если ТекущийЭлементИмя = "ТаблицаЗагружаемыхРеквизитовИскатьПо"
	 ИЛИ ТекущийЭлементИмя = "ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцу"
	 ИЛИ ТекущийЭлементИмя = "ТаблицаЗагружаемыхРеквизитовСвязьПоТипу" Тогда
		СписокВыбора = ЗаполнитьСпискиВыбора(ИндексТекущейСтроки, ТекущийЭлементИмя, РежимЗагрузкиИскать);
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		Для Каждого СтрокаСписка Из СписокВыбора Цикл
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
		КонецЦикла;
		Элемент.ТекущийЭлемент.ТолькоПросмотр = СписокВыбора.Количество() = 0 ИЛИ НЕ РежимЗагрузкиИскать;
	КонецЕсли;
	
	Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.КнопкаВыбора = НЕ ТипЗНЧ(Элемент.ТекущиеДанные.ЗначениеПоУмолчанию) = Тип("Строка");
	
	Если Элемент.ТекущиеДанные.ВыборГрупп = "Группы" Тогда
		Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;	
	ИначеЕсли Элемент.ТекущиеДанные.ВыборГрупп = НСтр("ru = 'Группы и элементы'") Тогда
		Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;	
	Иначе
		Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;	
	КонецЕсли;
		
	
КонецПроцедуры

// Обработчик события "ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаИмя = "Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Форма.ФормаРедактированияВыражения";
	ПараметрыФормы = Новый Структура("Выражение", ТекущийЭлемент.ТекущиеДанные.Выражение);
	
	ОткрытьФорму(ФормаИмя, ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	ТекущийЭлемент.ТекущиеДанные.Выражение = СокрЛП(Результат);
    
    Модифицированность = Истина;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ТаблицаЗагружаемыхРеквизитовРежимПоиска".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ВозможностьУстановкиРежима = ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(ТекущиеДанные.ИмяРеквизита, ТекущиеДанные.ОписаниеТипов, ТекущиеДанные.ИскатьПо, ТекущиеДанные.ЗначениеПоУмолчанию);
		СписокВыбораЭлемента = Элемент.СписокВыбора;
		Если ВозможностьУстановкиРежима И СписокВыбораЭлемента.Количество() = 1 Тогда
			СписокВыбораЭлемента.Добавить("По похожим словам", НСтр("ru = 'По похожим словам'"));
		ИначеЕсли Не ВозможностьУстановкиРежима И СписокВыбораЭлемента.Количество() = 2 Тогда
			СписокВыбораЭлемента.Удалить(СписокВыбораЭлемента.Количество() - 1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствие

// Процедура - обработчик события "ПриИзменении" реквизита "Загружать" таблицы формы "СоответствиеНоменклатуры".
//
&НаКлиенте
Процедура СоответствиеНоменклатурыЗагружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеНоменклатуры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ТекущиеДанные.Загружать Тогда
		ТекущиеДанные.Загружать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита "Номенклатура" таблицы формы "СоответствиеНоменклатуры".
//
&НаКлиенте
Процедура СоответствиеНоменклатурыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеНоменклатуры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И (ТекущиеДанные.Загружать) Тогда
		ТекущиеДанные.Загружать = Ложь
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И (НЕ ТекущиеДанные.Загружать) Тогда
		ТекущиеДанные.Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события "РежимЗагрузкиПриИзменении".
//
&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	Объект.СсылкаИсточника         = Неопределено;
	Объект.ИмяВидаРегистра         = Неопределено;
	Объект.ТабличнаяЧастьИсточника = Неопределено;
	УстановитьСписокТабличныхЧастейНаКлиенте();
	УстановитьИсточник();
	ОбновлениеОтображенияНаКлиенте();

КонецПроцедуры

// Обработчик события "ТипОбъектаПриИзменении".
//
&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	УстановитьИсточник();
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Обработчик события "ТипОбъектаОткрытие".
//
&НаКлиенте
Процедура ТипОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СсылкаИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "СсылкаИсточникаПриИзменении".
//
&НаКлиенте
Процедура СсылкаИсточникаПриИзменении(Элемент)
	
	Если ПроверитьСовпадениеСПрошлымиМетаданнымиНаСервере() Тогда
		УстановитьСписокТабличныхЧастейНаКлиенте();
		УстановитьИсточник();
	КонецЕсли;
	
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Обработчик события "ТабличнаяЧастьИсточникаПриИзменении".
//
&НаКлиенте
Процедура ТабличнаяЧастьИсточникаПриИзменении(Элемент)
	
	УстановитьИсточник();
	ТабличнаяЧастьИсточникаПроверитьСохраненныеНастройки();
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Обработчик события "ИмяВидаРегистраПриИзменении".
//
&НаКлиенте
Процедура ИмяВидаРегистраПриИзменении(Элемент)
	
	УстановитьИсточник();
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Обработчик события "ИмяВидаРегистраОткрытие".
//
&НаКлиенте
Процедура ИмяВидаРегистраОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(Объект.ИмяВидаРегистра) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "СохранитьНастройкиВФайл"
//
&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	Настройки = ПараметрыИНастройкиНаСервере();
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Сохранить значения настройки в файл'");
	ДиалогВыбораФайла.Фильтр    = "Настройка загрузки в табличный документ (*.mxlz)|*.mxlz|Все файлы (*.*)|*.*|";
	ПараметрыОповещения = Новый Структура("ДиалогВыбораФайла, Настройки", ДиалогВыбораФайла, Настройки);
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНастройкиВФайлЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	Настройки = ДополнительныеПараметры.Настройки;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Настройки.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "СохранитьВФайл"
//
&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.СохранитьВФайл(КаталогЗагружаемогоФайла, Объект.ТабличныйДокумент);
	
КонецПроцедуры

// Процедура - обработчик команды "ОбновитьТабличныйДокумент"
//
&НаКлиенте
Процедура ОбновитьТабличныйДокумент(Команда)
	
	мОбновитьДанныеТабличногоДокумента(Объект.ТабличныйДокумент, Истина);
	
КонецПроцедуры

// Процедура - обработчик команды "КонтрольЗаполнения"
//
&НаКлиенте
Процедура КонтрольЗаполнения(Команда)
	
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не указана первая строка данных табличного документа'"));
		Возврат;
	КонецЕсли;
	
	флКонтрольЗаполнения = Истина;
	мКонтрольЗаполнения(Объект.ТабличныйДокумент);
	
КонецПроцедуры

// Процедура - обработчик команды "Загрузить"
//
&НаКлиенте
Процедура Загрузить(Команда)
	
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не указана первая строка данных табличного документа'"));
		Возврат;
	КонецЕсли;
	
	флКонтрольЗаполнения = Ложь;
	мЗагрузитьДанные(Объект.ТабличныйДокумент);
	
	Если Объект.РежимЗагрузки = 3 Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "ЗаполнитьСоответствиеНоменклатуры"
//
&НаКлиенте
Процедура ЗаполнитьСоответствиеНоменклатуры(Команда)
	
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не указана первая строка данных табличного документа'"));
		Возврат;
	КонецЕсли;
	
	мЗагрузитьСоответствиеНоменклатуры(Объект.ТабличныйДокумент);
	
КонецПроцедуры

// Процедура - обработчик команды "ВосстановитьНастройки"
//
&НаКлиенте
Процедура ВосстановитьНастройки(Команда)
	
	// Если загрузка в табличную часть документа, переопределим выбор настройки
	Если ИспользоватьСправочникНастроек() Тогда
		
		СтруктураПараметров = СформироватьСтруктуруОтбораДляВыбораНастройки();
		СтруктураПараметров.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаВыбора", СтруктураПараметров, ЭтотОбъект,,,, Новый ОписаниеОповещения("ВосстановитьНастройкиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиЗавершение(Настройка, ДополнительныеПараметры) Экспорт
    
    Если Настройка<>Неопределено Тогда
        
        ВыбраннаяНастройка = Настройка;
        ЗагрузитьНастройки(Настройка);
        
        ОбновлениеОтображенияНаКлиенте();
        НастройкиЗагруженыИзФайла = Истина;
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "СохранитьНастройки"
//
&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Если ИспользоватьСправочникНастроек() Тогда
		
		СтруктураПараметров = СформироватьСтруктуруПараметровДляСохраненияНастроек();
		
		ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "События"
//
&НаКлиенте
Процедура События(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ПередЗаписьюОбъекта",			Объект.ПередЗаписьюОбъекта);
	ПараметрыОткрытияФормы.Вставить("ПриЗаписиОбъекта",				Объект.ПриЗаписиОбъекта);
	ПараметрыОткрытияФормы.Вставить("ПослеДобавленияСтроки",		Объект.ПослеДобавленияСтроки);
	ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Форма.ФормаРедактированияСобытий",ПараметрыОткрытияФормы,ЭтотОбъект,,,,Новый ОписаниеОповещения("ОповещениеОРедактированииСобытий",ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОРедактированииСобытий(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	Для Каждого РезультирующееЗначение Из Результат Цикл
		Объект[РезультирующееЗначение.Ключ] = РезультирующееЗначение.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик команды "СформироватьНоменклатуру"
//
&НаКлиенте
Процедура СформироватьНоменклатуру(Команда)
	
	Если Объект.СоответствиеНоменклатуры.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Таблица соответствий пуста'"));
		Возврат;
	КонецЕсли;
	
	ОтмеченныеСтроки = Объект.СоответствиеНоменклатуры.НайтиСтроки(Новый Структура("Загружать", Истина));
	Если ОтмеченныеСтроки.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не выбраны позиции, которые необходимо добавить'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьНоменклатуруЗавершение", ЭтотОбъект), НСтр("ru= 'Добавить выбранные позиции в справочник номенклатуры?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    СтруктураПараметров = Новый Структура("СоответствиеНоменклатуры", Объект.СоответствиеНоменклатуры);
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаДобавленияНоменклатуры", СтруктураПараметров, ЭтотОбъект,,,, Новый ОписаниеОповещения("СформироватьНоменклатуруПоНастройкеГотово", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройкеГотово(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат=Неопределено Тогда
        мЗагрузитьСоответствиеНоменклатуры(Объект.ТабличныйДокумент, Истина);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьНоменклатуруПоНастройкеНаСервере(ТабличныйДокумент, Настройка, НомерКолонки)
	Возврат ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.СоздатьНоменклатуруПоНастройке(ТабличныйДокумент,
																				Настройка, 
																				НомерКолонки, 
																				Объект.СоответствиеНоменклатуры.Выгрузить(), 
																				ЭтотОбъект,
																				Объект.ПерваяСтрокаДанныхТабличногоДокумента);
КонецФункции

// Процедура - обработчик команды "СформироватьНоменклатуруПоНастройке"
//
&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройке(Команда)
	
	Если Объект.СоответствиеНоменклатуры.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Таблица соответствий пуста'"));
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ПредставлениеРеквизита", "Номенклатура"));
	Если НайденнаяСтрока.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не найдено в настройках поле ""Номенклатура""'"));
		Возврат;
	Иначе
		НайденнаяСтрока = НайденнаяСтрока[0];
	КонецЕсли;
	
	Если НЕ НайденнаяСтрока.Пометка ИЛИ НайденнаяСтрока.НомерКолонки=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'В настройках поле ""Номенклатура"" не используется'"));
		Возврат;
	КонецЕсли;
	
	ОтмеченныеСтроки = Объект.СоответствиеНоменклатуры.НайтиСтроки(Новый Структура("Загружать", Истина));
	Если ОтмеченныеСтроки.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не выбраны позиции, которые необходимо добавить'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьНоменклатуруПоНастройкеРезультатВопроса", ЭтотОбъект, Новый Структура("НайденнаяСтрока", НайденнаяСтрока)), НСтр("ru= 'Добавить выбранные позиции в справочник номенклатуры?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройкеРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НайденнаяСтрока = ДополнительныеПараметры.НайденнаяСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    // Выберем настройку, по которой будем загружать
    СтруктураПараметров = СформироватьСтруктуруОтбораДляВыбораНастройки(Истина);
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
    
    ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаВыбора", СтруктураПараметров, ЭтотОбъект,,,, Новый ОписаниеОповещения("СформироватьНоменклатуруПоНастройкеЗавершение", ЭтотОбъект, Новый Структура("НайденнаяСтрока", НайденнаяСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройкеЗавершение(Настройка, ДополнительныеПараметры) Экспорт
    
    НайденнаяСтрока = ДополнительныеПараметры.НайденнаяСтрока;
    ЕстьЧтоЗагружать = Ложь;
	
    Если Настройка<>Неопределено Тогда
        
        ЕстьЧтоЗагружать = СоздатьНоменклатуруПоНастройкеНаСервере(Объект.ТабличныйДокумент,
        Настройка, 
        НайденнаяСтрока.НомерКолонки);
        
    КонецЕсли;
    
    Если ЕстьЧтоЗагружать Тогда
        мЗагрузитьСоответствиеНоменклатуры(Объект.ТабличныйДокумент, Истина);
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "Перечитать"
//
&НаКлиенте
Процедура Перечитать(Команда)
	
	ЗаполнитьНастройкиКолонок(Истина);
	
КонецПроцедуры

// Процедура - обработчик команды "РучнаяНумерацияКолонокТабличногоДокумента"
//
&НаКлиенте
Процедура РучнаяНумерацияКолонокТабличногоДокумента(Команда)
	
	УстановитьРучнаяНумерацияКолонок();
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьФайл"
//
&НаКлиенте
Процедура ПеренумероватьКолонки(Команда)
	
	НомерКолонки = 1;
	Для Каждого Реквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Реквизит.Пометка Тогда
			Если НЕ Реквизит.НомерКолонки = НомерКолонки Тогда
				Реквизит.НомерКолонки = НомерКолонки;
			КонецЕсли;
			НомерКолонки = НомерКолонки + 1;
		Иначе
			Реквизит.НомерКолонки = 0;
		КонецЕсли;
		
		Если Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Искать" Тогда
			Реквизит.РежимЗагрузки = "Устанавливать"
		ИначеЕсли НЕ Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Устанавливать" Тогда
			Реквизит.РежимЗагрузки = "Искать"
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды "ПеренумероватьКолонки"
//
&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Объект.ИспользоватьВнешнийМодульПреобразованияФайла Тогда
		ЗагрузкаИзЭлектронныхДокументовКлиент.
		ЗаполнитьТабличныйДокументИзXML(
			Объект.ОбработкаПреобразования,
			Объект.ТабличныйДокумент,
			КаталогЗагружаемогоФайла,
			ИндексТипаЗагружаемогоФайла);
	Иначе
		ЗаполнитьТабличныйДокументИзТабличногоФайла(КаталогЗагружаемогоФайла,
			ИндексТипаЗагружаемогоФайла,
			Объект.Табуляция,
			Объект.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "СнятьФлажки"
//
&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.УстановитьФлагТаблицы(Ложь, ТаблицаЗагружаемыхРеквизитов);
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик команды "УстановитьФлажки"
//
&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.УстановитьФлагТаблицы(Истина, ТаблицаЗагружаемыхРеквизитов);
	ОбновлениеОтображенияНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик команды "УстановитьФлажкиСоответствия"
//
&НаКлиенте
Процедура УстановитьФлажкиСоответствия(Команда)
	
	УстановитьФлагТаблицыСоответствий(Истина);
	
КонецПроцедуры

// Процедура - обработчик команды "СнятьФлажкиСоответствия"
//
&НаКлиенте
Процедура СнятьФлажкиСоответствия(Команда)
	
	УстановитьФлагТаблицыСоответствий(Ложь);
	
КонецПроцедуры

// Процедура - обработчик команды "ЗагрузитьНастройкиИзФайла".
//
&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок                   = НСтр("ru = 'Восстановить значения из файла'");
	ДиалогВыбораФайла.Фильтр    = "Настройка загрузки в табличный документ (*.mxlz)|*.mxlz|Все файлы (*.*)|*.*|";
	
	ПараметрыОповещения = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ОписаниеОповещения =Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаПродолжение", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Засунем файл во временное хранилище и перекинем на сервер
	АдресВоВременномХранилище = "";
	ПараметрыПомещения = Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище);
	НачатьПомещениеФайла(
		Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтотОбъект, ПараметрыПомещения),
		АдресВоВременномХранилище,
		ДиалогВыбораФайла.ПолноеИмяФайла,
		Ложь,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	АдресВоВременномХранилище = Адрес;
	
	ВыполнитьЗагрузкуНастроек(АдресВоВременномХранилище);
	ОбновлениеОтображенияНаКлиенте();
	НастройкиЗагруженыИзФайла = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - обработчик управляет доступностью поля обработки
//
&НаКлиенте
Процедура НастроитьДоступностьПоляОбработки()
	
	Если Объект.ИспользоватьВнешнийМодульПреобразованияФайла Тогда
		Элементы.ОбработкаПреобразования.Доступность = Истина;
		Элементы.ОбработкаПреобразования.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ОбработкаПреобразования.Доступность = Ложь;
		Элементы.ОбработкаПреобразования.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет использовать ли справочник настроек вместо СохранитьЗначение().
//
// Параметры
//  Нет. 
//
// Возвращаемое значение:
//   Булево   - Использовать или нет.
//
&НаСервере
Функция ИспользоватьСправочникНастроек()
	Возврат (Объект.РежимЗагрузки=1 ИЛИ Объект.РежимЗагрузки=3 ИЛИ Объект.РежимЗагрузки=0 ИЛИ Объект.РежимЗагрузки = 2) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.СсылкаИсточника)) ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.СсылкаИсточника)) ИЛИ Не ПустаяСтрока(Объект.ИмяВидаРегистра));
КонецФункции // ИспользоватьСправочникНастроек()

// Функция формирования структуры параметров для установки отбора в форме выбора настроек.
//
&НаСервере
Функция СформироватьСтруктуруОтбораДляВыбораНастройки(ДляФормированияНоменклатуры=Ложь)
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("РежимЗагрузки",           Объект.РежимЗагрузки);
	СтруктураРеквизитов.Вставить("СсылкаИсточника",         Объект.СсылкаИсточника);
	СтруктураРеквизитов.Вставить("ТабличнаяЧастьИсточника", Объект.ТабличнаяЧастьИсточника);
	СтруктураРеквизитов.Вставить("ИмяВидаРегистра",         Объект.ИмяВидаРегистра);
	СтруктураРеквизитов.Вставить("ИмяСправочника",          Объект.ИмяСправочника);
	
	ПараметрОтборПоМетаданнымТабличнойЧасти = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьМетаданныеИсточника(СтруктураРеквизитов);
	
	Поставщик = ПолучитьПоставщика();
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ПараметрОтборПоВариантуИспользования", Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных);
	
	Если ДляФормированияНоменклатуры Тогда
		
		СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Справочник);
		СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"            , Метаданные.Справочники.Номенклатура.ПолноеИмя());
		
	Иначе
		
		СтруктураПараметров.Вставить("ПараметрОтборПоКонтрагенту", Поставщик);
		
		Если Метаданные.Справочники.Содержит(ПараметрОтборПоМетаданнымТабличнойЧасти) Тогда
			// Это справочник
			СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Справочник);
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"            , ПараметрОтборПоМетаданнымТабличнойЧасти.ПолноеИмя());
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ПараметрОтборПоМетаданнымТабличнойЧасти) Тогда
			// это регистр
			СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.РегистрСведений);
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"              , ПараметрОтборПоМетаданнымТабличнойЧасти.ПолноеИмя());
		Иначе
			// Это ТЧ, надо только выяснить чья
			Если Метаданные.Документы.Содержит(ПараметрОтборПоМетаданнымТабличнойЧасти.Родитель()) Тогда
				Если ПолучитьЗначениеПараметраСтруктуры(Объект.СсылкаИсточника, "Контрагент", Неопределено) <> Неопределено Тогда
					СтруктураПараметров.Вставить("ПараметрОтборПоКонтрагенту", Объект.СсылкаИсточника.Контрагент);
				КонецЕсли;
				СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Документ);
			Иначе
				СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Справочник);
			КонецЕсли;
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"              , ?(ПараметрОтборПоМетаданнымТабличнойЧасти = Неопределено, "", ПараметрОтборПоМетаданнымТабличнойЧасти.Родитель().ПолноеИмя()));
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданнымТабличнойЧасти", ПараметрОтборПоМетаданнымТабличнойЧасти.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция формирования структуры параметров для сохранения настроек в справочник
//
&НаСервере
Функция СформироватьСтруктуруПараметровДляСохраненияНастроек()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВариантИспользованияНастройки", Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных);
	СтруктураПараметровНастроек = ПараметрыДляСохраненияНастроек();
	Настройки = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьНастройки(СтруктураПараметровНастроек);
	СтруктураПараметров.Вставить("НастройкиЗагрузкиВыгрузки"    , Новый ХранилищеЗначения(Настройки));
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ОбновлениеОтображенияНаКлиенте()
	Если Объект.РежимЗагрузки = 0 Тогда
		Элементы.СтраницыРежимы.ТекущаяСтраница = Элементы.ЗагрузкаВСправочник;
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		Элементы.СтраницыРежимы.ТекущаяСтраница = Элементы.ЗагрузкаВТабличнуюЧасть;
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		Элементы.СтраницыРежимы.ТекущаяСтраница = Элементы.ЗагрузкаВРегистрСведений;
	КонецЕсли;
	
	ДоступностьЗагрузкиДопРеквизитов = Объект.РежимЗагрузки = 0
									И (ТипЗнч(Объект.СсылкаИсточника) = Тип("СправочникСсылка.Номенклатура")
									ИЛИ ТипЗнч(Объект.СсылкаИсточника) = Тип("СправочникСсылка.Контрагенты")
									ИЛИ ТипЗнч(Объект.СсылкаИсточника) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Элементы.ГруппаЗагрузкаДопРеквизитов.Видимость = ДоступностьЗагрузкиДопРеквизитов;
	
	ЭтоЗагрузкаКонтрагентов 	= Объект.РежимЗагрузки = 0 И ТипЗнч(Объект.СсылкаИсточника) = Тип("СправочникСсылка.Контрагенты");
	Элементы.ГруппаОтборРеквизитов.Видимость		  = Объект.ЗагружатьДополнительныеРеквизитыИСведения И НЕ ЭтоЗагрузкаКонтрагентов;
	Элементы.ДополнительныеРеквизитыПоТипуНоменклатуры.Доступность = НЕ Объект.ДополнительныеРеквизитыИСведенияТолькоОбщие;

	Элементы.ТаблицаЗагружаемыхРеквизитовПолеПоиска.Видимость         = Объект.РежимЗагрузки = 0;
	Элементы.ТаблицаЗагружаемыхРеквизитовРежимПоиска.Видимость        = НЕ (Объект.РежимЗагрузки = 0);
	
	Элементы.НеСоздаватьНовыхЭлементов.Видимость = Объект.РежимЗагрузки = 0;
	Элементы.НеОбновлятьСуществующиеЭлементы.Видимость = Объект.РежимЗагрузки = 0;
	Элементы.флПоискПоПрайсуПоставщика.Видимость  = (Объект.РежимЗагрузки = 3)
	         ИЛИ (ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПроверитьЧтоЭтоДокумент(Объект.СсылкаИсточника) И (Объект.РежимЗагрузки = 1));
			 
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("РежимЗагрузки",           Объект.РежимЗагрузки);
	СтруктураРеквизитов.Вставить("СсылкаИсточника",         Объект.СсылкаИсточника);
	СтруктураРеквизитов.Вставить("ТабличнаяЧастьИсточника", Объект.ТабличнаяЧастьИсточника);
	СтруктураРеквизитов.Вставить("ИмяВидаРегистра",         Объект.ИмяВидаРегистра);
	СтруктураРеквизитов.Вставить("ИмяСправочника",          Объект.ИмяСправочника);
	
	МетаданныеЗаполнены = МетаданныеИсточникаЗаполнены(СтруктураРеквизитов);
	
	ДоступностьКнопкиСохранитьЗначения = МетаданныеЗаполнены;
	Если ИспользоватьСправочникНастроек() Тогда
		ДоступностьКнопкиВосстановитьЗначения = МетаданныеЗаполнены;
	Иначе
		ДоступностьКнопкиВосстановитьЗначения = Ложь;
	КонецЕсли;
	
	Элементы.ТаблицаЗагружаемыхРеквизитовВосстановитьНастройки.Доступность = ДоступностьКнопкиВосстановитьЗначения;
	Элементы.ТаблицаЗагружаемыхРеквизитовСохранитьНастройки.   Доступность = ДоступностьКнопкиСохранитьЗначения;
	
	Элементы.ТаблицаЗагружаемыхРеквизитовСохранитьНастройкиВФайл.Доступность = ДоступностьКнопкиСохранитьЗначения;
	
	Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Пометка = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.КаталогАрхиваЗагруженныхФайлов.Доступность = Объект.ДействиеСЗагружаемымФайлом = 0;
	
	// Доступность реквизитов соответствия номенклатуры
	СтрокаНастройкиЗагрузкиНоменклатуры = Неопределено;
	ОтборСтрок = Новый Структура("ПредставлениеРеквизита","Номенклатура");
	Строки = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
	Если Строки.Количество() > 0 Тогда
		СтрокаНастройкиЗагрузкиНоменклатуры = Строки[0];
	КонецЕсли;
	
	Если (СтрокаНастройкиЗагрузкиНоменклатуры = Неопределено) ИЛИ (СтрокаНастройкиЗагрузкиНоменклатуры.Пометка = Ложь)
	 ИЛИ (СтрокаНастройкиЗагрузкиНоменклатуры.НомерКолонки=0) Тогда
		Элементы.СтраницаСоответствия.Видимость = Ложь;
		Элементы.НомерКолонкиСНаименованием.Видимость = Ложь;
	Иначе
		Элементы.СтраницаСоответствия.Видимость = Истина;
		
		// Если номенклатуру ищем по наименованию, тогда скроем соответствующую колонку.
		Если СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо = "Наименование" Тогда
			Элементы.СоответствиеНоменклатурыНаименование.Видимость = Ложь;
		Иначе
			Элементы.СоответствиеНоменклатурыНаименование.Видимость = Истина;
		КонецЕсли;
		
		НомерКолонкиЦена = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаКлиент.ПолучитьНомерКолонкиЦена(ЭтотОбъект);
		
		Элементы.СоответствиеНоменклатурыЦена.Видимость = НомерКолонкиЦена>0;
		
		// Т.к. попали сюда, то СтрокаНастройкиЗагрузкиНоменклатуры<>Неопределено
		Элементы.СоответствиеНоменклатурыНаименование.Видимость = НЕ СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо="Наименование";
		Элементы.НомерКолонкиСНаименованием.Видимость = НЕ СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо="Наименование";
		Элементы.СоответствиеНоменклатурыЦена.Видимость = НомерКолонкиЦена>0;
		
	КонецЕсли;
	
	Элементы.КаталогАрхиваЗагруженныхФайлов.Доступность = (Объект.ДействиеСЗагружаемымФайлом = 0);
	
	НастроитьДоступностьПоляОбработки();
КонецПроцедуры

// Функция определить возможность установки режима поиска для текущих данных
//
&НаСервере
Функция ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(РеквизитПоиска, ОписаниеТиповРеквизита, РеквизитИскатьПо, РеквизитЗначениеПоУмолчанию)
	
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(РеквизитПоиска, ОписаниеТиповРеквизита, РеквизитИскатьПо, РеквизитЗначениеПоУмолчанию);
	
КонецФункции

// Функция определить возможность установки режима загрузки для текущих данных
//
&НаСервере
Функция ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ОписаниеТиповРеквизита, РеквизитЗначениеПоУмолчанию)
	
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ОписаниеТиповРеквизита, РеквизитЗначениеПоУмолчанию);
	
КонецФункции

&НаСервере
Функция МетаданныеИсточникаЗаполнены(СтруктураРеквизитов)
	МетаданныеИсточника = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьМетаданныеИсточника(СтруктураРеквизитов);
	Возврат МетаданныеИсточника <> Неопределено;
КонецФункции

// Процедура выполняет установку реквизитов, связанных с источником данных
//
&НаКлиенте
Процедура УстановитьИсточник()
	
	Источник        = Неопределено;
	ОбъектИсточника = Неопределено;
	СписокСохраненныхНастроек = Неопределено;
	СтеретьПрошлыеМетаданныеИсточникаНаСервере();
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("РежимЗагрузки",           Объект.РежимЗагрузки);
	СтруктураРеквизитов.Вставить("СсылкаИсточника",         Объект.СсылкаИсточника);
	СтруктураРеквизитов.Вставить("ТабличнаяЧастьИсточника", Объект.ТабличнаяЧастьИсточника);
	СтруктураРеквизитов.Вставить("ИмяВидаРегистра",         Объект.ИмяВидаРегистра);
	СтруктураРеквизитов.Вставить("ИмяСправочника",          Объект.ИмяСправочника);

	Если НЕ МетаданныеИсточникаЗаполнены(СтруктураРеквизитов) Тогда
		СписокСохраненныхНастроек = Неопределено;
		ТаблицаЗагружаемыхРеквизитов.Очистить();
	Иначе
		ЗаполнитьНастройкиКолонок(Неопределено);
	КонецЕсли;
	
	Если Объект.РежимЗагрузки = 1 И ЗначениеЗаполнено(Объект.СсылкаИсточника) Тогда
		ЗафиксироватьПрошлыеМетаданныеНаСервере();
	КонецЕсли;
	
	мОбновитьДанныеТабличногоДокумента(Объект.ТабличныйДокумент, Истина);
	
	Если НЕ Объект.СсылкаИсточника = Неопределено Тогда
		ЭтоДокумент = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПроверитьЧтоЭтоДокумент(Объект.СсылкаИсточника);
	Иначе
		ЭтоДокумент = Ложь;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьИсточник()

&НаСервере
Функция ПроверитьСовпадениеСПрошлымиМетаданнымиНаСервере()
	Возврат ПрошлыйМетаданныеСсылкиИсточника = Неопределено ИЛИ Объект.СсылкаИсточника = Неопределено
		ИЛИ НЕ ПрошлыйМетаданныеСсылкиИсточника = Объект.СсылкаИсточника.Метаданные();
КонецФункции

&НаСервере
Процедура ЗафиксироватьПрошлыеМетаданныеНаСервере() 
	ПрошлыйМетаданныеСсылкиИсточника = Объект.СсылкаИсточника.Метаданные();
КонецПроцедуры

&НаСервере
Процедура СтеретьПрошлыеМетаданныеИсточникаНаСервере()
	ПрошлыйМетаданныеСсылкиИсточника = Неопределено;
КонецПроцедуры

// Процедура выполняет инициализацию служебных переменных и констант модуля
//
&НаСервере
Процедура ИнициализацияПриОткрытии()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураПараметровИнициализации = ЗагрузкаИзЭлектронныхДокументовВызовСервера.Инициализация();
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураПараметровИнициализации);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента < 2 Тогда
		Объект.ПерваяСтрокаДанныхТабличногоДокумента = 2;
	КонецЕсли;

КонецПроцедуры // ИнициализацияПриОткрытии()

// Процедура заполняет список выбора элемента управления "ТабличнаяЧастьИсточника"
//
&НаКлиенте
Процедура УстановитьСписокТабличныхЧастейНаКлиенте()
	
	СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокТабличныхЧастей(Объект.СсылкаИсточника);
	
	Элементы.ТабличнаяЧастьИсточника.СписокВыбора.Очистить();
	Для Каждого ЗначениеСписка Из СписокВыбора Цикл
		Элементы.ТабличнаяЧастьИсточника.СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры // УстановитьСписокТабличныхЧастей()

// Заполняет списки выбора для реквизитов табличной части
//
&НаСервере
Функция ЗаполнитьСпискиВыбора(ТекущаяСтрокаТаблицы, ТекущийЭлементИмя, РежимЗагрузкиИскать)
	
	СписокВыбора = Новый СписокЗначений;
	ТекущиеДанные = ТаблицаЗагружаемыхРеквизитов[ТекущаяСтрокаТаблицы];
	
	Если ТекущийЭлементИмя = "ТаблицаЗагружаемыхРеквизитовИскатьПо" Тогда
		
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокИменПредставлений(ТекущиеДанные);
		
	ИначеЕсли ТекущийЭлементИмя = "ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцу" Тогда
		
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные, ТаблицаЗагружаемыхРеквизитов);
		
	ИначеЕсли ТекущийЭлементИмя = "ТаблицаЗагружаемыхРеквизитовСвязьПоТипу" Тогда
		
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоТипу(ТекущиеДанные, ТаблицаЗагружаемыхРеквизитов);
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
&НаСервере
Функция мЗагрузитьДанные(ТабличныйДокумент)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("флКонтрольЗаполнения", 						Ложь);
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ТаблицаЗагружаемыхРеквизитов.Выгрузить());
	
	СтруктураПараметров.Вставить("ТЧДокумента", 								ТЧДокумента);
	СтруктураПараметров.Вставить("ОписаниеОшибок", 								"");
	СтруктураПараметров.Вставить("ДопПараметры", 								Неопределено);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	Объект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("РежимЗагрузки", 								Объект.РежимЗагрузки);
	СтруктураПараметров.Вставить("СсылкаИсточника", 							Объект.СсылкаИсточника);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника",	 					Объект.ТабличнаяЧастьИсточника);
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 							Объект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника", 								Объект.ИмяСправочника);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 		Объект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ВладелецСерии", 								Неопределено);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов", 					Объект.НеСоздаватьНовыхЭлементов);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы", 			Объект.НеОбновлятьСуществующиеЭлементы);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи", 					Объект.ЗамещатьСуществующиеЗаписи);
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта", 						Объект.ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта", 							Объект.ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки", 						Объект.ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 					Объект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии", 				Объект.ВсегдаФормироватьНовыеСерии);
	СтруктураПараметров.Вставить("СоответствиеНоменклатуры", 					Объект.СоответствиеНоменклатуры.Выгрузить());
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности",						Объект.ФорматДатыСрокаГодности);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект,Объект);
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.ЗагрузитьДанные(ТабличныйДокумент,СтруктураПараметров);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецФункции // мЗагрузитьДанные()

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
&НаСервере
Функция мЗагрузитьСоответствиеНоменклатуры(ТабличныйДокумент, СохранятьПроставленные = Ложь)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 			ТаблицаЗагружаемыхРеквизитов.Выгрузить());
	СтруктураПараметров.Вставить("СоответствиеНоменклатуры", 				ОбработкаОбъект.СоответствиеНоменклатуры.Выгрузить());
	СтруктураПараметров.Вставить("РежимЗагрузки",							ОбработкаОбъект.РежимЗагрузки);
	СтруктураПараметров.Вставить("СсылкаИсточника",							ОбработкаОбъект.СсылкаИсточника);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника",					ОбработкаОбъект.ТабличнаяЧастьИсточника);
	СтруктураПараметров.Вставить("ИмяВидаРегистра",							ОбработкаОбъект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника",							ОбработкаОбъект.ИмяСправочника);
	СтруктураПараметров.Вставить("Поставщик", 								Справочники.Контрагенты.ПустаяСсылка());
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",	ОбработкаОбъект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("СоздаватьПроизводителя",					ОбработкаОбъект.СоздаватьПроизводителя);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика",				ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ТЧДокумента",								ОбработкаОбъект.ТЧДокумента);
	СтруктураПараметров.Вставить("флКонтрольЗаполнения",					Истина);
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии",				ОбработкаОбъект.ВсегдаФормироватьНовыеСерии);
	СтруктураПараметров.Вставить("СохранятьПроставленные", 					СохранятьПроставленные);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект,ОбработкаОбъект);
	
	Если (Объект.РежимЗагрузки = 1) Тогда
		Если ЕстьРеквизит(Объект.СсылкаИсточника, "Контрагент") Тогда
			СтруктураПараметров.Поставщик = Объект.СсылкаИсточника.Контрагент;
		КонецЕсли;
	КонецЕсли;
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.ЗагрузитьСоответствиеНоменклатуры(ТабличныйДокумент, СтруктураПараметров, НомерКолонкиСНаименованием);
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураПараметров);
	ОбработкаОбъект.СоответствиеНоменклатуры.Загрузить(СтруктураПараметров.СоответствиеНоменклатуры.Скопировать());
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецФункции // мЗагрузитьСоответствиеНоменклатуры()

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
&НаСервере
Процедура мКонтрольЗаполнения(ТабличныйДокумент)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// получим метаданные источника
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов = ТаблицаЗагружаемыхРеквизитов.Выгрузить();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов.Скопировать());
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	ОбработкаОбъект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("СоответствиеНоменклатуры", 					ОбработкаОбъект.СоответствиеНоменклатуры.Выгрузить());
	СтруктураПараметров.Вставить("РежимЗагрузки", 								ОбработкаОбъект.РежимЗагрузки);
	СтруктураПараметров.Вставить("СсылкаИсточника", 							ОбработкаОбъект.СсылкаИсточника);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 					ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ТЧДокумента",		 							?(ОбработкаОбъект.ТЧДокумента=Неопределено, Неопределено, ОбработкаОбъект.ТЧДокумента.Выгрузить()));
	СтруктураПараметров.Вставить("флКонтрольЗаполнения", 						Истина);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика",					ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ВладелецСерии",								Неопределено);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности",						ОбработкаОбъект.ФорматДатыСрокаГодности);
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта",							ОбработкаОбъект.ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта",							ОбработкаОбъект.ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",		ОбработкаОбъект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки",						ОбработкаОбъект.ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("ИмяВидаРегистра",								ОбработкаОбъект.ИмяВидаРегистра);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект,ОбработкаОбъект);
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.КонтрольЗаполнения(ТабличныйДокумент, СтруктураПараметров);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // мКонтрольЗаполнения()

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
&НаСервере
Процедура мОбновитьДанныеТабличногоДокумента(ТабличныйДокумент, БезВопросов = Ложь, ЗаполнитьИзТЧДокумента=Истина)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// получим метаданные источника
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов = ТаблицаЗагружаемыхРеквизитов.Выгрузить();
	СтруктураРеквизитовОбработки = Новый Структура();
	СтруктураРеквизитовОбработки.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	ОбработкаОбъект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураРеквизитовОбработки.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов.Скопировать());
	СтруктураРеквизитовОбработки.Вставить("РежимЗагрузки", 								ОбработкаОбъект.РежимЗагрузки);
	СтруктураРеквизитовОбработки.Вставить("СсылкаИсточника", 							ОбработкаОбъект.СсылкаИсточника);
	СтруктураРеквизитовОбработки.Вставить("ТабличнаяЧастьИсточника",					ОбработкаОбъект.ТабличнаяЧастьИсточника);
	СтруктураРеквизитовОбработки.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 		ОбработкаОбъект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураРеквизитовОбработки.Вставить("ИмяВидаРегистра", 							ОбработкаОбъект.ИмяВидаРегистра);
	СтруктураРеквизитовОбработки.Вставить("ИмяСправочника", 							ОбработкаОбъект.ИмяСправочника);
	СтруктураРеквизитовОбработки.Вставить("ТЧДокумента", 								?(ОбработкаОбъект.ТЧДокумента = Неопределено, Неопределено, ОбработкаОбъект.ТЧДокумента.Выгрузить()));
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.ОбновитьДанныеТабличногоДокумента(СтруктураРеквизитовОбработки, ТабличныйДокумент, БезВопросов, ЗаполнитьИзТЧДокумента);
	ОбработкаОбъект.ТабличныйДокумент = ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураРеквизитовОбработки);
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов = СтруктураРеквизитовОбработки.ТаблицаЗагружаемыхРеквизитов.Скопировать();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // мОбновитьДанныеТабличногоДокумента()

// Проверяем сохраненные настройки табличной части документа
//
&НаСервере
Процедура ПроверитьСохраненныеНастройкиТЧДокумента()
	
	Объект.ДействиеСЗагружаемымФайлом = 2;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураИнициализированныхПараметров = ЗагрузкаИзЭлектронныхДокументовВызовСервера.Инициализация();
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураИнициализированныхПараметров);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	ЗаполнитьНастройкиКолонок(Истина);
	Элементы.СтраницаСоответствия.Видимость = Истина;
	
КонецПроцедуры

// Процедура установки нумерации
//
&НаСервере
Процедура УстановитьРучнаяНумерацияКолонок()
	
	Объект.РучнаяНумерацияКолонокТабличногоДокумента = НЕ Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	
КонецПроцедуры

// Процедура загрузки настроек
//
&НаСервере
Процедура ВыполнитьЗагрузкуНастроек(АдресВременногоХранилища)
	
	Настройки = Новый ТабличныйДокумент;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ВременныйФайл = КаталогВременныхФайлов() + "testUASettings.mxlz";
	ДанныеФайла.Записать(ВременныйФайл);
		
	Попытка
		Настройки.Прочитать(ВременныйФайл);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= '%1'"), ИнформацияОбОшибке.Причина.Описание);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	ВсеОк = Истина;
	ЗаполнитьНастройкиКолонок(Настройки, ВсеОк);
	Если Не ВсеОк Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Загружаемые настройки не являются настройками выбранного объекта.'"));
		Возврат;
	КонецЕсли;
	мОбновитьДанныеТабличногоДокумента(Объект.ТабличныйДокумент, Истина);
	
	ТЧДокумента = Объект.ТабличнаяЧастьДокументаОбъекта;
	
КонецПроцедуры

// Процедура сохранения настроек
//
&НаКлиенте
Процедура ТабличнаяЧастьИсточникаПроверитьСохраненныеНастройки()
	
	Если ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПроверитьЧтоЭтоДокумент(Объект.СсылкаИсточника) И Объект.РежимЗагрузки = 1 Тогда
		ПроверитьСохраненныеНастройкиТЧДокумента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет данные таблицы соответствия номенклатуры в прайс-лист поставщика.
//
&НаКлиенте
Процедура СохранитьТаблицуСоответствия()
	
	Поставщик = ПолучитьПоставщика();
	
	Если Поставщик = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Неопределен контрагент, невозможно сохранить соответствия в прайс-лист поставщика.'"));
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = Истина;
	НайденныеСтроки = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ПредставлениеРеквизита", "Номенклатура"));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не найден реквизит номенклатура.'"));
		Возврат;
	КонецЕсли;

	ИскатьПо = НайденныеСтроки[0].ИскатьПо;
	Если НайденныеСтроки.Количество()=0 ИЛИ НЕ НайденныеСтроки[0].Пометка Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не отмечен реквизит номенклатура.'"));
		Возврат;
	ИначеЕсли (ИскатьПо = "ЕГК") Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Нельзя сохранить соответствия номенклатуры при поиске по'") + Символы.НПП + ИскатьПо);
		Возврат;
	КонецЕсли;
	
	// Откроем форму подбора, установив предварительно отбор на контрагента
	Отбор = Новый Структура("Владелец", Поставщик);
	СтруктураПараметровОтбора = Новый Структура("РежимВыбора, Отбор", Истина, Отбор);
	ОткрытьФорму("Справочник.ПрайсЛистыКонтрагентов.ФормаСписка",СтруктураПараметровОтбора,ЭтотОбъект,,,,Новый ОписаниеОповещения("ОповещениеОВыбореПрайса",ЭтотОбъект, ИскатьПо),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОВыбореПрайса(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	СохранитьТаблицуСоответствияСервер(Результат, ДополнительныеПараметры);
	
	ПоказатьПредупреждение(,НСтр("ru = 'Обработка таблицы соответствия завершена.'"));
	
КонецПроцедуры

// Функция получения поставщика (контрагента)
//
&НаСервере
Функция ПолучитьПоставщика()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Поставщик = ОбработкаОбъект.Поставщик;
	
	Если НЕ ЗначениеЗаполнено(Поставщик) И ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПроверитьЧтоЭтоДокумент(Объект.СсылкаИсточника) И Объект.РежимЗагрузки = 1 Тогда
		Попытка
			Поставщик = Объект.СсылкаИсточника.Контрагент;
		Исключение
			Поставщик = Справочники.Контрагенты.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;
	
	Возврат Поставщик;
	
КонецФункции

// Процедура сохраняет данные таблицы соответствия номенклатуры в прайс-лист поставщика.
//
&НаСервере
Процедура СохранитьТаблицуСоответствияСервер(ПрайсЛистКонтрагента, ИскатьПо)
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.СохранитьТаблицуСоответствия(ПрайсЛистКонтрагента, ИскатьПо, ТаблицаЗагружаемыхРеквизитов.Выгрузить(), Объект.СоответствиеНоменклатуры.Выгрузить(), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Доступность
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОбработкаПреобразования");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ИспользоватьВнешнийМодульПреобразованияФайла");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитовПолеПоиска");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов.МожетБытьПолемПоиска");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов.ЭтоДополнительныйРеквизит");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.КожаноКоричневый);
	
КонецПроцедуры

// НАСТРОЙКИ ЗАГРУЗКИ - ТАБЛИЦА ЗАГРУЖАМЫХ РЕКВИЗИТОВ

// Процедура загрузки настроек в форму по переданной настройке
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиЗагрузкиДанныхИзТабличногоДокумента - хранит элемент настроек.
//
&НаСервере
Процедура ЗагрузитьНастройки(Настройка)
	
	ЗаполнитьНастройкиКолонок(Настройка.НастройкиЗагрузкиВыгрузки.Получить());
	мОбновитьДанныеТабличногоДокумента(Объект.ТабличныйДокумент, Истина);
	ТЧДокумента = Объект.ТабличнаяЧастьДокументаОбъекта;
	
КонецПроцедуры

// Заполняет настройки колонок по умолчанию или по переданным настройкам
//
// Параметры:
//  СтруктураУмолчаний - Структура - Структура настройки колонок по умолчанию.
//
&НаСервере
Процедура ЗаполнитьНастройкиКолонок(Настройки, ВсеОк = Истина)
	
	Попытка
		КоличествоИсходныхПомеченныхСтрок = ТаблицаЗагружаемыхРеквизитов.Выгрузить().НайтиСтроки(Новый Структура("Пометка", Истина)).Количество();
	Исключение
		КоличествоИсходныхПомеченныхСтрок = 0;
	КонецПопытки;
	
	ПромежуточнаяТаблица = ТаблицаЗагружаемыхРеквизитов.Выгрузить();
	ТаблицаЗагружаемыхРеквизитов.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов    = ТаблицаЗагружаемыхРеквизитов.Выгрузить().СкопироватьКолонки();
	ПромежуточныйСписокВидовНоменклатуры	   = ДополнительныеРеквизитыИСведенияТипНоменклатурыНаФорме.Скопировать();
	ОбработкаОбъект.ДополнительныеРеквизитыПоТипуНоменклатуры = ДополнительныеРеквизитыИСведенияТипНоменклатурыНаФорме.Скопировать();
	ОбработкаОбъект.ТЧДокумента = ТЧДокумента;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СсылкаИсточника", 							ОбработкаОбъект.СсылкаИсточника);
	СтруктураПараметров.Вставить("РежимЗагрузки", 								ОбработкаОбъект.РежимЗагрузки);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника", 					ОбработкаОбъект.ТабличнаяЧастьИсточника);
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 							ОбработкаОбъект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника", 								ОбработкаОбъект.ИмяСправочника);
	СтруктураПараметров.Вставить("ТабличнаяЧастьДокументаОбъекта",				ОбработкаОбъект.ТабличнаяЧастьДокументаОбъекта);
	СтруктураПараметров.Вставить("ТЧДокумента",									ОбработкаОбъект.ТЧДокумента);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов",					ОбработкаОбъект.НеСоздаватьНовыхЭлементов);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы",				ОбработкаОбъект.НеОбновлятьСуществующиеЭлементы);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи",					ОбработкаОбъект.ЗамещатьСуществующиеЗаписи);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента",	ОбработкаОбъект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",		ОбработкаОбъект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности",						ОбработкаОбъект.ФорматДатыСрокаГодности);
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии",					ОбработкаОбъект.ВсегдаФормироватьНовыеСерии);
	СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом",					ОбработкаОбъект.ДействиеСЗагружаемымФайлом);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика",					ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов",				ОбработкаОбъект.КаталогАрхиваЗагруженныхФайлов);
	СтруктураПараметров.Вставить("СоздаватьПроизводителя",						ОбработкаОбъект.СоздаватьПроизводителя);
	СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла",ОбработкаОбъект.ИспользоватьВнешнийМодульПреобразованияФайла);
	СтруктураПараметров.Вставить("ОбработкаПреобразования",						ОбработкаОбъект.ОбработкаПреобразования);
	СтруктураПараметров.Вставить("Кодировка",									ОбработкаОбъект.Кодировка);
	СтруктураПараметров.Вставить("Табуляция",									ОбработкаОбъект.Табуляция);
	СтруктураПараметров.Вставить("ИмяТаблицы",									ОбработкаОбъект.ИмяТаблицы);
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта",							ОбработкаОбъект.ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта",							ОбработкаОбъект.ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки",						ОбработкаОбъект.ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов",				ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов.Скопировать());
	СтруктураПараметров.Вставить("ИмяВидаРегистра",								ОбработкаОбъект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника",								ОбработкаОбъект.ИмяСправочника);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры",	ОбработкаОбъект.ДополнительныеРеквизитыПоТипуНоменклатуры.Скопировать());
	СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	ОбработкаОбъект.ЗагружатьДополнительныеРеквизитыИСведения);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	ОбработкаОбъект.ДополнительныеРеквизитыИСведенияТолькоОбщие);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект, ОбработкаОбъект, Истина);
	
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.ЗаполнитьНастройкиКолонок(Настройки, СтруктураПараметров);
	
	КоличествоПомеченныхСтрокВСтруктуре = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество();
	
	Если СтруктураПараметров.РежимЗагрузки = 0 И СтруктураПараметров.ИмяСправочника = "" И СтруктураПараметров.СсылкаИсточника = Неопределено
		ИЛИ СтруктураПараметров.РежимЗагрузки = 1 И Не ЗначениеЗаполнено(СтруктураПараметров.СсылкаИсточника) 
		ИЛИ СтруктураПараметров.РежимЗагрузки = 2 И СтруктураПараметров.ИмяВидаРегистра = "" 
		ИЛИ КоличествоИсходныхПомеченныхСтрок<>0 И КоличествоПомеченныхСтрокВСтруктуре = 0 Тогда
		// что-то пошло не так
		ВсеОк = Ложь;
		ТаблицаЗагружаемыхРеквизитов.Загрузить(ПромежуточнаяТаблица);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураПараметров);
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Скопировать();
	ОбработкаОбъект.ДополнительныеРеквизитыПоТипуНоменклатуры = СтруктураПараметров.ДополнительныеРеквизитыПоТипуНоменклатуры.Скопировать();
	ТаблицаЗагружаемыхРеквизитов.Загрузить(ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов);
	ДополнительныеРеквизитыИСведенияТипНоменклатурыНаФорме = ОбработкаОбъект.ДополнительныеРеквизитыПоТипуНоменклатуры.Скопировать();
	
	ТЧДокумента = ОбработкаОбъект.ТЧДокумента;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // ЗаполнитьНастройкиКолонок()

&НаСервере
Процедура УстановитьФлагТаблицыСоответствий(ЗначениеФлага)
	
	ТаблицаСоответствия = Объект.СоответствиеНоменклатуры.Выгрузить();
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.УстановитьФлагТаблицыСоответствий(ЗначениеФлага, ТаблицаСоответствия);
	Объект.СоответствиеНоменклатуры.Загрузить(ТаблицаСоответствия);
	
КонецПроцедуры

// Процедура переноса табличного файла в табличное поле
//
&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзТабличногоФайла(КаталогЗагружаемогоФайла, ИндексТипаЗагружаемогоФайла, Табуляция, Кодировка)
	
	ДиалогВыбораФайла 			= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Каталог   = КаталогЗагружаемогоФайла;
	
	Если ИндексТипаЗагружаемогоФайла <> Неопределено Тогда
		ДиалогВыбораФайла.ИндексФильтра = ИндексТипаЗагружаемогоФайла;
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Прочитать табличный документ из файла'");
	ДиалогВыбораФайла.Фильтр    = НСтр("ru = 'dBase III (*.dbf)|*.dbf|Лист Excel (*.xls)|*.xls|Лист Excel 2007 (*.xlsx)|*.xlsx|Текстовый документ (*.txt)|*.txt|Табличный документ (*.mxl)|*.mxl|Формат sst (*.sst)|*.sst|Формат mmo (*.mmo)|*.mmo|'");
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ПараметрыОповещения.Вставить("Кодировка", Кодировка);
	ПараметрыОповещения.Вставить("Табуляция", Табуляция);
	ПараметрыОповещения.Вставить("ИндексТипаЗагружаемогоФайла", ИндексТипаЗагружаемогоФайла);
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ЗаполнитьТабличныйДокументИзТабличногоФайлаПродолжение", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзТабличногоФайлаПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	Кодировка = ДополнительныеПараметры.Кодировка;
	Табуляция = ДополнительныеПараметры.Табуляция;
	ИндексТипаЗагружаемогоФайла = ДополнительныеПараметры.ИндексТипаЗагружаемогоФайла;
	
	КаталогЗагружаемогоФайла 		= ДиалогВыбораФайла.Каталог; 
	ПолныйПутьКЗагружаемомуФайлу 	= ДиалогВыбораФайла.ПолноеИмяФайла;
	ИндексТипаЗагружаемогоФайла  	= ДиалогВыбораФайла.ИндексФильтра;
	ФайлНаДиске 					= Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	
	АдресВоВременномХранилище 		= "";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ДополнительныеПараметры.Вставить("Кодировка",                 Кодировка);
	ДополнительныеПараметры.Вставить("Табуляция",                 Табуляция);
	ДополнительныеПараметры.Вставить("ФайлНаДиске",               ФайлНаДиске);
	
	НачатьПомещениеФайла(
		Новый ОписаниеОповещения("ЗаполнитьТабличныйДокументИзТабличногоФайлаЗавершение",
									ЭтотОбъект, ДополнительныеПараметры),
		АдресВоВременномХранилище,
		ДиалогВыбораФайла.ПолноеИмяФайла,
		Ложь,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзТабличногоФайлаЗавершение(Результат,
		Адрес,
		ВыбранноеИмяФайла,
		ДополнительныеПараметры) Экспорт
	
	АдресВоВременномХранилище 	= Адрес;
	Кодировка 					= ДополнительныеПараметры.Кодировка;
	Табуляция					= ДополнительныеПараметры.Табуляция;
	ФайлНаДиске 				= ДополнительныеПараметры.ФайлНаДиске;
	
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.
	ПрочитатьТабличныйДокумент(Объект.ТабличныйДокумент,
		ФайлНаДиске.Расширение,
		ФайлНаДиске.ИмяБезРасширения,
		АдресВоВременномХранилище,
		Табуляция,
		Кодировка);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСохраненияНастроек()
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимЗагрузки",			 					Объект.РежимЗагрузки);
	СтруктураПараметров.Вставить("СсылкаИсточника", 							Объект.СсылкаИсточника);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника", 					Объект.ТабличнаяЧастьИсточника);
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 							Объект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника", 								Объект.ИмяСправочника);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов", 					Объект.НеСоздаватьНовыхЭлементов);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы",				Объект.НеОбновлятьСуществующиеЭлементы);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи", 					Объект.ЗамещатьСуществующиеЗаписи);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	Объект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 		Объект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности", 					Объект.ФорматДатыСрокаГодности);
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии", 				Объект.ВсегдаФормироватьНовыеСерии);
	СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом", 					Объект.ДействиеСЗагружаемымФайлом);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 					Объект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов", 				Объект.КаталогАрхиваЗагруженныхФайлов);
	СтруктураПараметров.Вставить("СоздаватьПроизводителя", 						Объект.СоздаватьПроизводителя);
	СтруктураПараметров.Вставить("Кодировка", 									Объект.Кодировка);
	СтруктураПараметров.Вставить("Табуляция", 									Объект.Табуляция);
	СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла",Объект.ИспользоватьВнешнийМодульПреобразованияФайла);
	СтруктураПараметров.Вставить("ОбработкаПреобразования", 					Объект.ОбработкаПреобразования);
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ТаблицаЗагружаемыхРеквизитов.Выгрузить());
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта", 						Объект.ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта", 							Объект.ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки", 						Объект.ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры", 	Объект.ДополнительныеРеквизитыПоТипуНоменклатуры.Скопировать());
	СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения", 	Объект.ЗагружатьДополнительныеРеквизитыИСведения);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие", Объект.ДополнительныеРеквизитыИСведенияТолькоОбщие);
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект,Объект);

	Возврат СтруктураПараметров;	
КонецФункции

&НаСервере
Функция ПараметрыИНастройкиНаСервере()
	СтруктураПараметров = ПараметрыДляСохраненияНастроек();
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьНастройки(СтруктураПараметров);
КонецФункции

#КонецОбласти

