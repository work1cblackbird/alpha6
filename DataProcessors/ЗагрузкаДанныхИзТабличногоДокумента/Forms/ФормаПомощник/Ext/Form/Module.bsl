
#Область ОписаниеПеременных

&НаКлиенте
Перем мСтраницы;                             // Соответствие страниц и и их номеров

&НаКлиенте
Перем СтрокаНастройкиЗагрузкиНоменклатуры;   // Строка настройки загрузки номенклатуры

&НаКлиенте
Перем НастройкиЗагрузкиНоменклатурыИскатьПо; // Значение реквизита "ИскатьПо" строки настройки загрузки номенклатуры

&НаКлиенте
Перем ИзмененаРучнаяНумерацияКолонок;

&НаКлиенте
Перем РазвернутТабличныйДокумент;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("РежимЗагрузки") Тогда
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Самостоятельное использование формы не предусмотрено'");
	КонецЕсли;
	
	Объект.РучнаяНумерацияКолонокТабличногоДокумента = Параметры.РучнаяНумерацияКолонокТабличногоДокумента;
	Объект.РежимЗагрузки                             = Параметры.РежимЗагрузки;
	
	Если Параметры.Свойство("ТабличнаяЧастьИсточника") Тогда
		Объект.ТабличнаяЧастьИсточника                   = Параметры.ТабличнаяЧастьИсточника;
		Объект.СсылкаИсточника                           = Параметры.СсылкаИсточника;
		Если Параметры.Свойство("ЦенаВключаетНДС") Тогда
			Объект.ЦенаВключаетНДС                       = Параметры.ЦенаВключаетНДС;
		КонецЕсли;
		Контрагент = Параметры.Контрагент;
	ИначеЕсли Параметры.Свойство("ИмяВидаРегистра") Тогда
		Объект.ИмяВидаРегистра = Параметры.ИмяВидаРегистра;
	КонецЕсли;
	
	мТекущийНомерСтраницы = 0;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события формы "ПриОткрытии"
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если НЕ ВебКлиент Тогда
		
		// Инициализация переменных управления страницами и кнопками перехода
		мСтраницы = Новый Соответствие;
		мСтраницы.Вставить(0, Элементы.СтраницаВыборНастройки);
		мСтраницы.Вставить(1, Элементы.СтраницаИсточникДанных);
		мСтраницы.Вставить(2, Элементы.СтраницаСоответствияНоменклатуры);
		мСтраницы.Вставить(3, Элементы.СтраницаРезультат);
		мСтраницы.Вставить(4, Элементы.СтраницаХодЗагрузки);
		
		ПодготовитьРезультатРаботы();
		
	#Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Загрузка данных из внешних файлов не поддерживается в веб-клиенте.'"));
		Отказ = ИСТИНА;
		Возврат;
		
	#КонецЕсли
	
	ИзмененаРучнаяНумерацияКолонок = Ложь;
	РазвернутТабличныйДокумент = Ложь;

	ОтображениеНастроекЗагрузки = Ложь;
	УстановитьВидимостьНастроекЗагрузки();
	
	Элементы.флПоискПоПрайсуПоставщика.Видимость 										= ПустаяСтрока(Объект.ИмяСправочника) И ПустаяСтрока(Объект.ИмяВидаРегистра);
	Элементы.НеСоздаватьНовыхЭлементов.Видимость 										= Не ПустаяСтрока(Объект.ИмяСправочника);
	Элементы.НеОбновлятьСуществующиеЭлементы.Видимость 									= Не ПустаяСтрока(Объект.ИмяСправочника);
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриАктивизацииОбласти" поля "ТабличныйДокумент"
//
&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	НомерКолонки = Объект.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Если ЗначениеЗаполнено(НомерКолонки) Тогда
		РасставитьПометкиНаКнопках(НомерКолонки);
	КонецЕсли;
	ПодсветитьВыбраннуюКолонку(Неопределено);
	РазобратьсяСОформлениемСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистКонтрагентаПриИзменении(Элемент)
	УправлениеДиалогом();
КонецПроцедуры

// Процедура - обработчик события "СохранитьСоответствияВПрайсЛистеПоставщикаПриИзменении".
//
&НаКлиенте
Процедура СохранитьСоответствияВПрайсЛистеПоставщикаПриИзменении(Элемент)
	УправлениеДиалогом();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ПрайсЛистКонтрагента".
//
&НаКлиенте
Процедура ПрайсЛистКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Откроем форму подбора, установив предварительно отбор на контрагента
	Отбор = Новый Структура("Владелец", Контрагент);
	СтруктураПараметровОтбора = Новый Структура("РежимВыбора, Отбор", Истина, Отбор);
	ОткрытьФорму("Справочник.ПрайсЛистыКонтрагентов.ФормаСписка",СтруктураПараметровОтбора,ЭтотОбъект,,,,Новый ОписаниеОповещения("ОповещениеОВыбореПрайса",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОВыбореПрайса(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	ПрайсЛистКонтрагента = Результат;
	УправлениеДиалогом();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствиеНоменклатуры

// Процедура - обработчик события "ПриИзменении" реквизита "Загружать" таблицы формы "СоответствиеНоменклатуры".
//
&НаКлиенте
Процедура СоответствиеНоменклатурыЗагружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеНоменклатуры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ТекущиеДанные.Загружать Тогда
		ТекущиеДанные.Загружать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита "Номенклатура" таблицы формы "СоответствиеНоменклатуры".
//
&НаКлиенте
Процедура СоответствиеНоменклатурыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеНоменклатуры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И (ТекущиеДанные.Загружать) Тогда
		ТекущиеДанные.Загружать = Ложь
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И (НЕ ТекущиеДанные.Загружать) Тогда
		ТекущиеДанные.Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗагружаемыхРеквизитов

// Обработчик события "ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьСпискиВыбора();
	
	Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.КнопкаВыбора = НЕ ТипЗНЧ(Элемент.ТекущиеДанные.ЗначениеПоУмолчанию) = Тип("Строка");
	
КонецПроцедуры

// Обработчик события "ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаИмя = "Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Форма.ФормаРедактированияВыражения";
	ПараметрыФормы = Новый Структура("Выражение", ТекущийЭлемент.ТекущиеДанные.Выражение);
	
	ОткрытьФорму(ФормаИмя, ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ТекущийЭлемент.ТекущиеДанные.Выражение = СокрЛП(Результат);
    
    Модифицированность = Истина;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТаблицаЗагружаемыхРеквизитовНомерКолонки".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовНомерКолонкиПриИзменении(Элемент)
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки"  табличного поля "ТаблицаЗагружаемыхРеквизитов".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПриАктивизацииСтроки(Элемент)
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
КонецПроцедуры

// Обработчик события "ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиНачалоВыбора".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ВозможностьУстановкиЗагрузки = ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ТекущиеДанные.ОписаниеТипов, ТекущиеДанные.ЗначениеПоУмолчанию);
		СписокВыбораЭлемента = Элемент.СписокВыбора;
		Если ВозможностьУстановкиЗагрузки И СписокВыбораЭлемента.Количество() = 3 Тогда
			СписокВыбораЭлемента.Добавить("Загружать", "Загружать");
		ИначеЕсли Не ВозможностьУстановкиЗагрузки И СписокВыбораЭлемента.Количество() = 4 Тогда
			СписокВыбораЭлемента.Удалить(СписокВыбораЭлемента.Количество() - 1);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ТаблицаЗагружаемыхРеквизитовРежимПоиска".
//
&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ВозможностьУстановкиРежима = ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(ТекущиеДанные.ИмяРеквизита, ТекущиеДанные.ОписаниеТипов, ТекущиеДанные.ИскатьПо, ТекущиеДанные.ЗначениеПоУмолчанию);
		СписокВыбораЭлемента = Элемент.СписокВыбора;
		Если ВозможностьУстановкиРежима И СписокВыбораЭлемента.Количество() = 1 Тогда
			СписокВыбораЭлемента.Добавить("По похожим словам", НСтр("ru = 'По похожим словам'"));
		ИначеЕсли Не ВозможностьУстановкиРежима И СписокВыбораЭлемента.Количество() = 2 Тогда
			СписокВыбораЭлемента.Удалить(СписокВыбораЭлемента.Количество() - 1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовИскатьПоПриИзменении(Элемент)
	
	СтрокаНастройкиЗагрузкиНоменклатуры=Неопределено;
	ОтборСтрок = Новый Структура("ПредставлениеРеквизита", "Номенклатура");
	СтрокиТаблицы = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		СтрокаНастройкиЗагрузкиНоменклатуры = СтрокиТаблицы[0];
		Если НЕ СтрокаНастройкиЗагрузкиНоменклатуры.Пометка ИЛИ (СтрокаНастройкиЗагрузкиНоменклатуры.РежимЗагрузки = "Искать" И СтрокаНастройкиЗагрузкиНоменклатуры.НомерКолонки=0) Тогда
			СтрокаНастройкиЗагрузкиНоменклатуры = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если СтрокаНастройкиЗагрузкиНоменклатуры=Неопределено Тогда
		Элементы.НомерКолонкиНаименованиеТабличногоДокумента.Видимость = Ложь;
	Иначе
		НастройкиЗагрузкиНоменклатурыИскатьПо = СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо;
		Элементы.НомерКолонкиНаименованиеТабличногоДокумента.Видимость = НЕ НастройкиЗагрузкиНоменклатурыИскатьПо="Наименование";
		Если НомерКолонкиНаименованиеТабличногоДокумента = 0 Тогда
			НомерКолонкиНаименованиеТабличногоДокумента = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьНастройкиЗавершение", ЭтотОбъект), НСтр("ru = 'Записать измененные настройки?'"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса<>КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Рез = СохранитьИзмененныеНастройкиНаСервере();
    Если ПустаяСтрока(Рез) Тогда
        ПоказатьОповещениеПользователя(НСтр("ru = 'Настройка успешно сохранена'"));
    Иначе
        ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При сохранении настройки возникли ошибки: %1'"), Рез);
        ПоказатьОповещениеПользователя(ТекстСообщения);
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "УстановитьКолонку"
//
&НаКлиенте
Процедура УстановитьКолонку(Команда)
	
	НомерКолонки = Объект.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	Если НомерКолонки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.НомерКолонки = НомерКолонки Тогда
		Возврат;
	ИначеЕсли ТекСтрока.НомерКолонки<>0 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для текущего реквизита ""%1"" уже установлен номер колонки %2. Изменить его на номер %3?'"),СокрЛП(ТекСтрока.ПредставлениеРеквизита),ТекСтрока.НомерКолонки,НомерКолонки);

		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьКолонкуЗавершение", ЭтотОбъект, Новый Структура("НомерКолонки, ТекСтрока", НомерКолонки, ТекСтрока)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	УстановитьКолонкуОбщиеДействия(НомерКолонки, ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКолонкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НомерКолонки = ДополнительныеПараметры.НомерКолонки;
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьКолонкуОбщиеДействия(НомерКолонки, ТекСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКолонкуОбщиеДействия(Знач НомерКолонки, Знач ТекСтрока)
    
    ТекСтрока.НомерКолонки = НомерКолонки;
    ТекСтрока.Пометка = Истина;
    
    Если Не Объект.РучнаяНумерацияКолонокТабличногоДокумента Тогда
        Объект.РучнаяНумерацияКолонокТабличногоДокумента = Истина;
        Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
        Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
        Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Пометка = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
    КонецЕсли;
    
    РасставитьПометкиНаКнопках(НомерКолонки);

КонецПроцедуры

// Процедура - обработчик команды "События"
//
&НаКлиенте
Процедура События(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ПередЗаписьюОбъекта",			Объект.ПередЗаписьюОбъекта);
	ПараметрыОткрытияФормы.Вставить("ПриЗаписиОбъекта",				Объект.ПриЗаписиОбъекта);
	ПараметрыОткрытияФормы.Вставить("ПослеДобавленияСтроки",		Объект.ПослеДобавленияСтроки);
	ПараметрыОткрытияФормы.Вставить("РежимЗагрузки",				Объект.РежимЗагрузки);
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаРедактированияСобытий",ПараметрыОткрытияФормы,ЭтотОбъект,,,,Новый ОписаниеОповещения("ОповещениеОРедактированииСобытий",ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОРедактированииСобытий(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	Для Каждого РезультирующееЗначение Из Результат Цикл
		ЭтотОбъект[РезультирующееЗначение.Ключ] = РезультирующееЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды "СнятьФлажки"
//
&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.УстановитьФлагТаблицы(Ложь, ТаблицаЗагружаемыхРеквизитов);
	
КонецПроцедуры

// Процедура - обработчик команды "УстановитьФлажки"
//
&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.УстановитьФлагТаблицы(Истина, ТаблицаЗагружаемыхРеквизитов);
	
КонецПроцедуры

// Процедура - обработчик команды "РучнаяНумерацияКолонокТабличногоДокумента"
//
&НаКлиенте
Процедура РучнаяНумерацияКолонокТабличногоДокумента(Команда)
	
	УстановитьРучнаяНумерацияКолонок();
	Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Пометка = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	ИзмененаРучнаяНумерацияКолонок = Истина;
	
КонецПроцедуры

// Процедура - обработчик команды "ПоказатьНастройки"
//
&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	УстановитьВидимостьНастроекЗагрузки();
	ОбновитьОтображениеДанных();
	ЗаполнитьМассивКнопок();
	ПодсветитьВыбраннуюКолонку(Неопределено);
КонецПроцедуры

// Процедура - обработчик команды "ПодключаемыеКнопкиНажатие"
//
&НаКлиенте
Процедура ПодключаемыеКнопкиНажатие(Команда)
	
	НомерКолонки = Объект.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Если НомерКолонки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТек Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Команда.Имя = "ПодключаемаяКнопка_"+СтрокаТек.ИмяРеквизита Тогда
			Если Элементы[Команда.Имя].Пометка Тогда
				СтрокаТек.НомерКолонки = 0;
			Иначе
				СтрокаТек.НомерКолонки = НомерКолонки;
				Если Не СтрокаТек.Пометка Тогда
					СтрокаТек.Пометка = Истина;
				КонецЕсли;
				Если НЕ Объект.РучнаяНумерацияКолонокТабличногоДокумента Тогда
					Объект.РучнаяНумерацияКолонокТабличногоДокумента = Истина;
					Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
					Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
					Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Пометка = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
				КонецЕсли;
			КонецЕсли;
			РасставитьПометкиНаКнопках(НомерКолонки);
			РазобратьсяСОформлениемСтрок();
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик команды "ПеренумероватьКолонки".
//
&НаКлиенте
Процедура ПеренумероватьКолонки(Команда)
	
	НомерКолонки = 1;
	Для Каждого Реквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Реквизит.Пометка Тогда
			Если НЕ Реквизит.НомерКолонки = НомерКолонки Тогда
				Реквизит.НомерКолонки = НомерКолонки;
			КонецЕсли;
			НомерКолонки = НомерКолонки + 1;
		Иначе
			Реквизит.НомерКолонки = 0;
		КонецЕсли;
		
		Если Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Искать" Тогда
			Реквизит.РежимЗагрузки = "Устанавливать"
		ИначеЕсли НЕ Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Устанавливать" Тогда
			Реквизит.РежимЗагрузки = "Искать"
		КонецЕсли;
	КонецЦикла;
	
	ИзмененаРучнаяНумерацияКолонок = Истина;
	ТекущийЭлемент = Элементы.ТаблицаЗагружаемыхРеквизитов;
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
	
КонецПроцедуры

// Процедура - обработчик команды "Далее".
//
&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаВыборНастройки Тогда
		
		Инкремент = 1;
		
		ОписаниеОшибок = "";
		Если НЕ ЗначениеЗаполнено(ФайлДанных) Тогда
			ОписаниеОшибок = ОписаниеОшибок+ НСтр("ru = 'Файл данных не указан'") + Символы.ПС;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкаЗагрузки) Тогда
			ОписаниеОшибок = ОписаниеОшибок+ НСтр("ru = 'Настройка загрузки не указана'") + Символы.ПС;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОписаниеОшибок) Тогда
			ПоказатьПредупреждение(,Лев(ОписаниеОшибок,СтрДлина(ОписаниеОшибок)-СтрДлина(Символы.ПС)),,"Ошибка");
			Возврат;
		КонецЕсли;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаХодЗагрузки;
		Элементы.ИнформацияЗагрузки.Заголовок = НСтр("ru = 'Выполняется загрузка данных из файла.
		|Операция может занять несколько минут...'");
		УстановитьДоступностьКнопок();
		
		// Подключение настройки загрузки
		Попытка
			Если ЗначениеЗаполнено(НастройкаЗагрузки) Тогда
				Настройки = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьНастройкуИзХранилища(НастройкаЗагрузки);
			КонецЕсли;
		Исключение
			ТехнологическаяПлатформаВызовСервера.
			СделатьЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка получения данных из хранилища'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ЗаполнитьНастройкиКолонок(Настройки);
		
		СтрокаНастройкиЗагрузкиНоменклатуры=Неопределено;
		ОтборСтрок = Новый Структура("ПредставлениеРеквизита", "Номенклатура");
		СтрокиТаблицы = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаНастройкиЗагрузкиНоменклатуры = СтрокиТаблицы[0];
			Если НЕ СтрокаНастройкиЗагрузкиНоменклатуры.Пометка 
				ИЛИ (СтрокаНастройкиЗагрузкиНоменклатуры.РежимЗагрузки = "Искать"
					И СтрокаНастройкиЗагрузкиНоменклатуры.НомерКолонки=0) Тогда
				СтрокаНастройкиЗагрузкиНоменклатуры = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка настройки загрузки
		ОтборСтрок = Новый Структура("Пометка", Истина);
		СтрокиТаблицы = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
		Если СтрокиТаблицы.Количество() = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'В настройке загрузки не отмечен ни один загружаемый реквизит.'"));
			Возврат;
		КонецЕсли;
		
		// Загрузка данных из файла
		ФайлНаДиске = Новый Файл(ФайлДанных);
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОписаниеОшибок",            ОписаниеОшибок);
		ПараметрыОповещения.Вставить("ОтборСтрок",                ОтборСтрок);
		ПараметрыОповещения.Вставить("ФайлНаДиске",               ФайлНаДиске);
		ПараметрыОповещения.Вставить("ФайлДанных",                ФайлДанных);
		ПараметрыОповещения.Вставить("Инкремент",                 Инкремент);
		ПараметрыОповещения.Вставить("АдресВоВременномХранилище", "");
		Оповещение = Новый ОписаниеОповещения("КомандаДалееПроверка", ЭтотОбъект, ПараметрыОповещения);
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
		Возврат;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаИсточникДанных Тогда
		
		Инкремент = 1;
		
		КоличествоЭлементов = Объект.ТабличныйДокумент.ВысотаТаблицы - Объект.ПерваяСтрокаДанныхТабличногоДокумента + 1;
		Если КоличествоЭлементов <= 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Нет данных для загрузки'"));
			Возврат;
		КонецЕсли;
		
		Если Объект.ПерваяСтрокаДанныхТабличногоДокумента = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Не указана первая строка данных табличного документа'"));
			Возврат;
		КонецЕсли;
		
		// Проверим - необходимо ли показать страницу "СоответствиеНоменклатуры". 
		Если СтрокаНастройкиЗагрузкиНоменклатуры=Неопределено ИЛИ СтрокаНастройкиЗагрузкиНоменклатуры.РежимЗагрузки<>"Искать" Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаХодЗагрузки;
			Элементы.ИнформацияЗагрузки.Заголовок = НСтр("ru = 'Выполняется обработка данных.
			|Операция может занять несколько минут...'");
			УстановитьДоступностьКнопок();
			ЗагрузитьДанныеВФорме(Объект.ТабличныйДокумент, ОписаниеОшибок, "");
			// Выполним действия с файлом после загрузки.
			ДействияСФайломПослеЗагрузки();
		ЗаполнитьРезультатРаботы(ОписаниеОшибок);
			Инкремент = 2;
		Иначе
			
			ОтборСтрок = Новый Структура("ИмяРеквизита", "Номенклатура");
			СтрокиТаблицы = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаНастройки = СтрокиТаблицы[0];
				Если (СтрокаНастройкиЗагрузкиНоменклатуры.Пометка И СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо="Наименование"
					И СтрокаНастройки.НомерКолонки=0) ИЛИ (СтрокаНастройкиЗагрузкиНоменклатуры.Пометка И СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо<>"Наименование" И НомерКолонкиНаименованиеТабличногоДокумента = 0) Тогда
					ПоказатьПредупреждение(,НСтр("ru = 'Не указан номер колонки наименования номенклатуры в табличном документе.'"));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			НастройкиЗагрузкиНоменклатурыИскатьПо = СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо;
			Элементы.СоответствиеНоменклатурыНаименование.Видимость = НЕ НастройкиЗагрузкиНоменклатурыИскатьПо="Наименование";
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаХодЗагрузки;
			Элементы.ИнформацияЗагрузки.Заголовок = НСтр("ru = 'Выполняется обработка данных.
			|Операция может занять несколько минут...'");
			УстановитьДоступностьКнопок();
			УправлениеДиалогом();
			
			// Пользователь первый раз перешел на эту страницу.
			Если Объект.СоответствиеНоменклатуры.Количество()=0 Тогда
				Результат = ЗагрузитьСоответствиеНоменклатуры(Объект.ТабличныйДокумент);
				Если НЕ Результат Тогда
					Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИсточникДанных;
					УстановитьДоступностьКнопок();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаСоответствияНоменклатуры Тогда
		
		Инкремент = 1;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаХодЗагрузки;
		Элементы.ИнформацияЗагрузки.Заголовок = НСтр("ru = 'Выполняется обработка данных.
		|Операция может занять несколько минут...'");
		УстановитьДоступностьКнопок();
		
		ЗагрузитьДанныеВФорме(Объект.ТабличныйДокумент, ОписаниеОшибок, НастройкиЗагрузкиНоменклатурыИскатьПо);
		// Выполним действия с файлом после загрузки.
		ДействияСФайломПослеЗагрузки();
		ЗаполнитьРезультатРаботы(ОписаниеОшибок);
		
	Иначе
		Инкремент = 1;
	КонецЕсли;
	
	КомандаДалееФрагмент(Инкремент);
КонецПроцедуры

&НаКлиенте
Процедура ДействияСФайломПослеЗагрузки()
	
	Файл = Новый Файл(ФайлДанных);
	
	Если Объект.ДействиеСЗагружаемымФайлом = 0 Тогда
		КаталогАрхиваПеремещаемыхФайлов = Объект.КаталогАрхиваЗагруженныхФайлов
											+"\"+Строка(Формат(ОбщегоНазначенияКлиент.ДатаСеанса(),"ДФ=""дд-ММ-гггг"""));
		
		ПараметрыОповещения = Новый Структура("Файл", Файл);
		Оповещение = Новый ОписаниеОповещения("РезультатСозданияКаталога", ЭтотОбъект,
												ПараметрыОповещения, "ДействияСФайломПослеЗагрузкиОбработкаОшибки", ЭтотОбъект);
		НачатьСозданиеКаталога(Оповещение, КаталогАрхиваПеремещаемыхФайлов);
	ИначеЕсли Объект.ДействиеСЗагружаемымФайлом = 1 Тогда
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСозданияКаталога(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	Оповещение =
		Новый ОписаниеОповещения(,,ДополнительныеПараметры, "ДействияСФайломПослеЗагрузкиОбработкаОшибки",ЭтотОбъект);
	НачатьПеремещениеФайла(Оповещение, ФайлДанных, ИмяКаталога + "\"+Файл.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСФайломПослеЗагрузкиОбработкаОшибки(ИнформацияОбОшибке,
		СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаОшибки = НСтр("ru = 'Ошибка при выполнении действий с файлом после загрузки'") + Символы.ПС + Символы.ПС;
	ИнформацияОбОшибкеПричина = ИнформацияОбОшибке.Причина;
	Пока ИнформацияОбОшибкеПричина<>Неопределено Цикл
		СтрокаОшибки = СтрокаОшибки+"   "+ИнформацияОбОшибкеПричина.Описание+Символы.ПС;
		ИнформацияОбОшибкеПричина = ИнформацияОбОшибкеПричина.Причина;
	КонецЦикла;
	ПоказатьОповещениеПользователя(СтрокаОшибки);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаДалееПроверка(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Файл данных не существует'"),,НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	
	Оповещение = Новый ОписаниеОповещения("КомандаДалееПроверкаОкончание", ЭтотОбъект, ДополнительныеПараметры);
	ФайлНаДиске.НачатьПроверкуЭтоКаталог(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалееПроверкаОкончание(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Файл данных не существует'"),,НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ИспользоватьВнешнийМодульПреобразованияФайла И НЕ ЗначениеЗаполнено(Объект.ОбработкаПреобразования) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'В настройке загрузки указано, что файл преобразовывается в табличный документ внешней обработкой, но обработка не указана.'"),,НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецЕсли;
	
	Если НомерКолонкиНаименованиеТабличногоДокумента = 0 Тогда
		НомерКолонкиНаименованиеТабличногоДокумента = 1;
	КонецЕсли;
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	ФайлДанных = ДополнительныеПараметры.ФайлДанных;
	НачатьПомещениеФайла(Новый ОписаниеОповещения("КомандаДалееПомещениеФайлаВХранилище", ЭтотОбъект, ДополнительныеПараметры), АдресВоВременномХранилище, ФайлДанных, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура КомандаДалееПомещениеФайлаВХранилищеНаСервере(АдресВоВременномХранилище, Расширение, ИмяБезРасширения)
	
	Если Объект.ИспользоватьВнешнийМодульПреобразованияФайла И ЗначениеЗаполнено(Объект.ОбработкаПреобразования) Тогда
		ЗагрузкаИзЭлектронныхДокументовВызовСервера.
		ЗаполнитьТабличныйДокументИзXMLСервер(
			ФайлДанных,
			Объект.ОбработкаПреобразования,
			Объект.ТабличныйДокумент,
			АдресВоВременномХранилище);
	Иначе
		ЗагрузкаИзЭлектронныхДокументовВызовСервера.
		ПрочитатьТабличныйДокумент(
			Объект.ТабличныйДокумент,
			Расширение,
			ИмяБезРасширения,
			АдресВоВременномХранилище,
			Объект.Табуляция,
			Объект.Кодировка);
	КонецЕсли;
	
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалееПомещениеФайлаВХранилище(Результат1, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	АдресВоВременномХранилище = Адрес;
	ОписаниеОшибок = ДополнительныеПараметры.ОписаниеОшибок;
	ОтборСтрок = ДополнительныеПараметры.ОтборСтрок;
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	Инкремент = ДополнительныеПараметры.Инкремент;
	
	КомандаДалееПомещениеФайлаВХранилищеНаСервере(АдресВоВременномХранилище,ФайлНаДиске.Расширение, ФайлНаДиске.ИмяБезРасширения);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаКлиент.НастроитьВидимостьЭлементовФормыПомощника(СтрокаНастройкиЗагрузкиНоменклатуры, Элементы,НастройкиЗагрузкиНоменклатурыИскатьПо);
	
	Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Пометка = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	
	КомандаДалееФрагмент(Инкремент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалееФрагмент(Знач Инкремент)
	
	Перем Структура;
	
	Если Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаРезультат Тогда
		// Первое условие МОЖЕТ выполниться только в случае РежимЗагрузки = 3
		Если ЗначениеЗаполнено(АдресТаблицаЗагрузкаИЗФайлаВХранилище) Тогда
			Структура = Новый Структура("АдресТаблицаЗагрузкаИЗФайлаВХранилище,ИмяТабличнойЧасти", АдресТаблицаЗагрузкаИЗФайлаВХранилище, Объект.ТабличнаяЧастьИсточника);
			ОповеститьОВыборе(Структура);
			// Остальные режимы загрузки предполагают закрытие формы
		ИначеЕсли Объект.РежимЗагрузки <> 3 Тогда
			Закрыть();
		Иначе
			ПоказатьПредупреждение(,НСтр("ru= 'В ходе работы мастера возникли ошибки. Невозможно выполнить загрузку в документ.'"),,НСтр("ru= 'Ошибка загрузки в документ'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мТекущийНомерСтраницы = ?((мТекущийНомерСтраницы + Инкремент)>4, 4, мТекущийНомерСтраницы + Инкремент);
	Элементы.Страницы.ТекущаяСтраница = мСтраницы[мТекущийНомерСтраницы];
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // КомандаДалее()

// Процедура - обработчик команды "Назад"
//
&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Инкремент = -1;
		
	ПодготовитьРезультатРаботы();
	
	мТекущийНомерСтраницы = ?((мТекущийНомерСтраницы + Инкремент)<0, 0, мТекущийНомерСтраницы + Инкремент);
	Элементы.Страницы.ТекущаяСтраница = мСтраницы[мТекущийНомерСтраницы];
	Если (СтрокаНастройкиЗагрузкиНоменклатуры = Неопределено ИЛИ СтрокаНастройкиЗагрузкиНоменклатуры.РежимЗагрузки<>"Искать") И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСоответствияНоменклатуры Тогда
		КомандаНазад(Неопределено);
	КонецЕсли;
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // КомандаНазад()

// Процедура - обработчик события "НачалоВыбора" поля формы "ФайлДанных"
//
&НаКлиенте
Процедура ФайлДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла = ФайлДанных;
	ДиалогВыбораФайла.Заголовок = "ВЫБРАТЬ источник данных";
	ДиалогВыбораФайла.Фильтр = "Все форматы (*.dbf;*.xls;*.xlsx;*.txt;*.mxl;*.mdb;*.sst;*.mmo;*.xml;*.ods;*.csv)|*.dbf;*.xls;*.xlsx;*.txt;*.mxl;*.mdb;*.sst;*.mmo;*.xml;*.ods;*.csv|dBase III (*.dbf)|*.dbf|Лист Excel (*.xls)|*.xls|Лист Excel 2007 (*.xlsx)|*.xlsx|Текстовый документ (*.txt)|*.txt|Табличный документ (*.mxl)|*.mxl|Microsoft Access(*.mdb)|*.mdb|Формат sst (*.sst)|*.sst|Формат mmo (*.mmo)|*.mmo|Формат xml (*.xml)|*.xml|Электронная таблица OpenDocument (*.ods)|*.ods|Текстовый документ c разделителями (*.csv)|*.csv";
	ПараметрыОповещения = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ДиалогВыбораФайла.Показать(
		Новый ОписаниеОповещения("ФайлДанныхНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДанныхНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлДанных = ДиалогВыбораФайла.ПолноеИмяФайла;
	
КонецПроцедуры

// Процедура - обработчик команды "СохранитьВФайл"
//
&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.СохранитьВФайл(Неопределено, Объект.ТабличныйДокумент);
	
КонецПроцедуры

// Процедура - обработчик команды "КонтрольЗаполнения"
//
&НаКлиенте
Процедура КонтрольЗаполнения(Команда)
	
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не указана первая строка данных табличного документа'"));
		Возврат;
	КонецЕсли;
	
	флКонтрольЗаполнения = Истина;
	КонтрольЗаполненияНаСервере(Объект.ТабличныйДокумент);

КонецПроцедуры

// Процедура - обработчик команды "ЗаполнитьСоответствиеНоменклатуры"
//
&НаКлиенте
Процедура ЗаполнитьСоответствиеНоменклатуры(Команда)

	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не указана первая строка данных табличного документа'"));
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСоответствиеНоменклатуры(Объект.ТабличныйДокумент);
	
КонецПроцедуры

// Процедура - обработчик команды "УстановитьФлажкиСоответствия"
//
&НаКлиенте
Процедура УстановитьФлажкиСоответствия(Команда)
	
	УстановитьФлагТаблицыСоответствий(Истина);
	
КонецПроцедуры

// Процедура - обработчик команды "СнятьФлажкиСоответствия"
//
&НаКлиенте
Процедура СнятьФлажкиСоответствия(Команда)
	
	УстановитьФлагТаблицыСоответствий(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагТаблицыСоответствий(ЗначениеФлага)
	
	ТаблицаСоответствия = Объект.СоответствиеНоменклатуры.Выгрузить();
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.УстановитьФлагТаблицыСоответствий(ЗначениеФлага, ТаблицаСоответствия);
	Объект.СоответствиеНоменклатуры.Загрузить(ТаблицаСоответствия);
	
КонецПроцедуры

// Процедура - обработчик команды "СформироватьНоменклатуру"
//
&НаКлиенте
Процедура СформироватьНоменклатуру(Команда)
	
	Если Объект.СоответствиеНоменклатуры.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Таблица соответствий пуста'"));
		Возврат;
	КонецЕсли;
	
	ОтмеченныеСтроки = Объект.СоответствиеНоменклатуры.НайтиСтроки(Новый Структура("Загружать", Истина));
	Если ОтмеченныеСтроки.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не выбраны позиции, которые необходимо добавить'"));
		Возврат;
	КонецЕсли;
	

	ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьНоменклатуруПослеВопроса", ЭтотОбъект), НСтр("ru= 'Добавить выбранные позиции в справочник номенклатуры?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    СтруктураПараметров = Новый Структура("СоответствиеНоменклатуры", Объект.СоответствиеНоменклатуры);
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаДобавленияНоменклатуры", СтруктураПараметров, ЭтотОбъект,,,, Новый ОписаниеОповещения("СформироватьНоменклатуруПоНастройкеГотово", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройкеГотово(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат=Неопределено Тогда
        ЗагрузитьСоответствиеНоменклатуры(Объект.ТабличныйДокумент, Истина);
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "СформироватьНоменклатуру"
//
&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройке(Команда)
	
	Если Объект.СоответствиеНоменклатуры.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Таблица соответствий пуста'"));
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ПредставлениеРеквизита", "Номенклатура"));
	Если НайденнаяСтрока.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не найдено в настройках поле ""Номенклатура""'"));
		Возврат;
	Иначе
		НайденнаяСтрока = НайденнаяСтрока[0];
	КонецЕсли;
	
	Если НЕ НайденнаяСтрока.Пометка ИЛИ НайденнаяСтрока.НомерКолонки=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'В настройках поле ""Номенклатура"" не используется'"));
		Возврат;
	КонецЕсли;
	
	ОтмеченныеСтроки = Объект.СоответствиеНоменклатуры.НайтиСтроки(Новый Структура("Загружать", Истина));
	Если ОтмеченныеСтроки.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Не выбраны позиции, которые необходимо добавить'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьНоменклатуруПоНастройкеПослеВопроса", ЭтотОбъект, Новый Структура("НайденнаяСтрока", НайденнаяСтрока)), НСтр("ru= 'Добавить выбранные позиции в справочник номенклатуры?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройкеПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НайденнаяСтрока = ДополнительныеПараметры.НайденнаяСтрока;
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    // Выберем настройку, по которой будем загружать
    СтруктураПараметров = СформироватьСтруктуруОтбораДляВыбораНастройки(Истина);
    СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
    ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаВыбора", СтруктураПараметров, ЭтотОбъект,,,, Новый ОписаниеОповещения("СформироватьНоменклатуруПоНастройкеВыборНастройки", ЭтотОбъект, Новый Структура("НайденнаяСтрока", НайденнаяСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНоменклатуруПоНастройкеВыборНастройки(Настройка, ДополнительныеПараметры) Экспорт
	
	ЕстьЧтоЗагружать = Ложь;
	
    НайденнаяСтрока = ДополнительныеПараметры.НайденнаяСтрока;
    
    Если Настройка<>Неопределено Тогда
        
        ЕстьЧтоЗагружать = СоздатьНоменклатуруПоНастройкеНаСервере(Объект.ТабличныйДокумент,
        Настройка, 
        НайденнаяСтрока.НомерКолонки);
    КонецЕсли;
    
    Если ЕстьЧтоЗагружать Тогда
        ЗагрузитьСоответствиеНоменклатуры(Объект.ТабличныйДокумент, Истина);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает метаданные источника данных
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   ОбъектМетаданныхТабличнаяЧасть	- Объект метаданных.
//
&НаСервере
Функция ПолучитьМетаданныеИсточникаИзВременногоХранилища()
	
	Если НастройкаЗагрузки.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник Тогда
		ОбъектМетаданныхСправочник = Метаданные.Справочники.Найти(НастройкаЗагрузки.ИмяПрикладногоОбъекта);
		Если ОбъектМетаданныхСправочник<>Неопределено Тогда
			Возврат ОбъектМетаданныхСправочник;
		КонецЕсли;
		
	ИначеЕсли НастройкаЗагрузки.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
		ОбъектМетаданныхДокумент = Метаданные.Документы.Найти(НастройкаЗагрузки.ИмяПрикладногоОбъекта);
		Если ОбъектМетаданныхДокумент<>Неопределено Тогда
			ОбъектМетаданныхТабличнаяЧасть = ОбъектМетаданныхДокумент.ТабличныеЧасти.Найти(НастройкаЗагрузки.ИмяТабличнойЧасти);
			Если ОбъектМетаданныхТабличнаяЧасть<>Неопределено Тогда
				Возврат ОбъектМетаданныхТабличнаяЧасть;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НастройкаЗагрузки.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Обработка Тогда
		ОбъектМетаданныхОбработка = Метаданные.Обработки.Найти(НастройкаЗагрузки.ИмяПрикладногоОбъекта);
		Если ОбъектМетаданныхОбработка<>Неопределено Тогда
			Возврат ОбъектМетаданныхОбработка;
		КонецЕсли;
		
	ИначеЕсли НастройкаЗагрузки.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.РегистрСведений Тогда
		ОбъектМетаданныхРегистр = Метаданные.РегистрыСведений.Найти(НастройкаЗагрузки.ИмяПрикладногоОбъекта);
		Если ОбъектМетаданныхРегистр<>Неопределено Тогда
			Возврат ОбъектМетаданныхРегистр;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьМетаданныеИсточника()

// Процедура установки нумерации
//
&НаСервере
Процедура УстановитьРучнаяНумерацияКолонок()
	
	Объект.РучнаяНумерацияКолонокТабличногоДокумента = НЕ Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	
КонецПроцедуры

// Процедура устанавливает видимость настроек загрузки.
//
&НаКлиенте
Процедура УстановитьВидимостьНастроекЗагрузки()
	Если ОтображениеНастроекЗагрузки Тогда
		Элементы.ПоказатьНастройки.Заголовок = НСтр("ru = 'Свернуть настройки'");
		Элементы.ГруппаНастройкиЗагрузки.Видимость = Истина;
		Элементы.УстановитьКолонку.Доступность = Истина;
		РазвернутТабличныйДокумент = Истина;
        ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	Иначе
		Элементы.ПоказатьНастройки.Заголовок = НСтр("ru = 'Развернуть настройки'");
		Элементы.ГруппаНастройкиЗагрузки.Видимость = Ложь;
		Элементы.УстановитьКолонку.Доступность = Ложь;
	КонецЕсли; 
	ОтображениеНастроекЗагрузки = НЕ ОтображениеНастроекЗагрузки;
	РазобратьсяСОформлениемСтрок();
	Элементы.ТаблицаЗагружаемыхРеквизитовПолеПоиска.Видимость         = Объект.РежимЗагрузки <> 2;
КонецПроцедуры

// Процедура расстановки пометок на кнопках контекстного меню табличного документа.
//
&НаКлиенте
Процедура РасставитьПометкиНаКнопках(НомерКолонки)
	
	Если ОтображениеНастроекЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПомеченныхКолонок = Новый Массив;
	СтрокиТЧ = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("НомерКолонки", НомерКолонки));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ИменаПомеченныхКолонок.Добавить("ПодключаемаяКнопка_"+СокрЛП(СтрокаТЧ.ИмяРеквизита));
	КонецЦикла;
	
	Для Каждого Кнопка Из Элементы.ТабличныйДокументКонтекстноеМеню.ПодчиненныеЭлементы Цикл
		Кнопка.Пометка = ИменаПомеченныхКолонок.Найти(Кнопка.Имя)<>Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// Процедура установки условного оформления строк таблицы.
//
&НаКлиенте
Процедура РазобратьсяСОформлениемСтрок()
	НомерКолонки = Объект.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Если ТекущийЭлемент <> Элементы.ТабличныйДокумент Тогда
		НомерКолонки = 0;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаЗагружаемыхРеквизитов Цикл
		СтрокаТаблицы.ПодсвечиватьСтроку = ?(НомерКолонки = 0, Ложь, НомерКолонки = СтрокаТаблицы.НомерКолонки);
	КонецЦикла;
КонецПроцедуры

// Процедура выделения цветом нужной колонки табличного документа.
//
&НаКлиенте
Процедура ПодсветитьВыбраннуюКолонку(ТекТаблицаФормы)
	
	ТипЛинииРамки 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, 0);

	ЦветРамки = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветФонаКнопки");
	
	ТекОбласть 				= Объект.ТабличныйДокумент.Область(1,1,Объект.ТабличныйДокумент.ВысотаТаблицы,Объект.ТабличныйДокумент.ШиринаТаблицы);
	ТекОбласть.ЦветФона 	= ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветФонаПоля");
	
	Если НЕ Элементы.ГруппаНастройкиЗагрузки.Видимость Тогда
		Объект.ТабличныйДокумент.ОтображатьСетку = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекТаблицаФормы = Неопределено И (ИзмененаРучнаяНумерацияКолонок ИЛИ РазвернутТабличныйДокумент) И Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные<>Неопределено Тогда
		РазвернутТабличныйДокумент = Ложь;
		ИзмененаРучнаяНумерацияКолонок = Ложь;
		ТекТаблицаФормы = Элементы.ТаблицаЗагружаемыхРеквизитов;
	КонецЕсли;
	
	Если ТекТаблицаФормы = Неопределено Тогда
		НомерКолонкиПодсветки = Объект.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Иначе
		ТекСтрока 		= ТекТаблицаФормы.ТекущиеДанные;
		Если ТекСтрока = Неопределено ИЛИ ТекСтрока.НомерКолонки = 0 Тогда
			Возврат;
		КонецЕсли;
		НомерКолонкиПодсветки = ТекСтрока.НомерКолонки;
	КонецЕсли;
	
	ТекОбласть = Объект.ТабличныйДокумент.Область(1, НомерКолонкиПодсветки, Объект.ТабличныйДокумент.ВысотаТаблицы, НомерКолонкиПодсветки);
	ТекОбласть.ЦветФона 	= ОбщегоНазначенияВызовСервера.ЦветСтиля("НедоступныеДанныеЦвет");
	
	Если ТекТаблицаФормы<>Неопределено Тогда
		Объект.ТабличныйДокумент.ТекущаяОбласть = Объект.ТабличныйДокумент.Область(1, НомерКолонкиПодсветки, 1, НомерКолонкиПодсветки);
	КонецЕсли;
	Объект.ТабличныйДокумент.ОтображатьСетку = Истина;
	
КонецПроцедуры

// Функция определить возможность установки режима поиска для текущих данных.
//
&НаСервере
Функция ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(РеквизитПоиска, ОписаниеТиповРеквизита, РеквизитИскатьПо, РеквизитЗначениеПоУмолчанию)
	
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(РеквизитПоиска, ОписаниеТиповРеквизита, РеквизитИскатьПо, РеквизитЗначениеПоУмолчанию);
	
КонецФункции

// Функция определить возможность установки режима загрузки для текущих данных.
//
&НаСервере
Функция ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ОписаниеТиповРеквизита, РеквизитЗначениеПоУмолчанию)
	
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ОписаниеТиповРеквизита, РеквизитЗначениеПоУмолчанию);
	
КонецФункции

// Заполняет списки выбора для реквизитов табличной части.
//
&НаСервере
Функция ЗаполнитьСпискиВыбораНаСервере(ТекущаяСтрокаТаблицы)
	
	СпискиВыбораЭлементов = Новый Структура;
	ТекущиеДанные = ТаблицаЗагружаемыхРеквизитов[ТекущаяСтрокаТаблицы];
	
	СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокИменПредставлений(ТекущиеДанные);
	СпискиВыбораЭлементов.Вставить("ТаблицаЗагружаемыхРеквизитовИскатьПо", СписокВыбора);
	
	СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные, ТаблицаЗагружаемыхРеквизитов);
	СпискиВыбораЭлементов.Вставить("ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцу", СписокВыбора);
	
	СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоТипу(ТекущиеДанные, ТаблицаЗагружаемыхРеквизитов);
	СпискиВыбораЭлементов.Вставить("ТаблицаЗагружаемыхРеквизитовСвязьПоТипу", СписокВыбора);
	
	Возврат СпискиВыбораЭлементов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()
	
	ИндексТекущейСтроки = ТаблицаЗагружаемыхРеквизитов.Индекс(Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные);
	СтруктураСписковВыбора = ЗаполнитьСпискиВыбораНаСервере(ИндексТекущейСтроки);
	
	Для Каждого КлючЗначение Из СтруктураСписковВыбора Цикл
		
		СписокВыбораЭлемента = Элементы[КлючЗначение.Ключ].СписокВыбора;
		СписокВыбораЭлемента.Очистить();
		
		Для Каждого СтрокаСписка Из КлючЗначение.Значение Цикл
			СписокВыбораЭлемента.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения контекстного меню табличного документа
//
&НаСервере
Процедура ЗаполнитьМассивКнопок()
	
	МассивКнопокДляУдаления = Новый Массив;
	Для Каждого СуществующаяКнопка Из Элементы.ТабличныйДокументКонтекстноеМеню.ПодчиненныеЭлементы Цикл
		МассивКнопокДляУдаления.Добавить(СуществующаяКнопка);
	КонецЦикла;
	
	Для Каждого Кнопка Из МассивКнопокДляУдаления Цикл
		Попытка
			Команды.Удалить(Кнопка.Имя);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении команды:'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + СокрЛП(Кнопка.Имя), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Попытка
			Элементы.Удалить(Кнопка);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении элемента формы:'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + СокрЛП(Кнопка.Имя), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Если ОтображениеНастроекЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДействия = "ПодключаемыеКнопкиНажатие";
	Для Каждого СтрокаТЧ Из ТаблицаЗагружаемыхРеквизитов Цикл
		ИмяКнопки = "ПодключаемаяКнопка_"+СокрЛП(СтрокаТЧ.ИмяРеквизита);
		Команда = Команды.Найти(ИмяКнопки);
		
		Если Команда = Неопределено Тогда
			Команда = Команды.Добавить(ИмяКнопки);
		КонецЕсли;
		
		Кнопка = Элементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"), Элементы.ТабличныйДокументКонтекстноеМеню);
		Команда.Действие = ИмяДействия;
		Кнопка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), СтрокаТЧ.ПредставлениеРеквизита);
		Кнопка.ИмяКоманды = ИмяКнопки;
	КонецЦикла;

КонецПроцедуры

// Процедура управления доступностью кнопок.
//
&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	Элементы.Справка.Доступность = ИСТИНА;
	Элементы.Назад  .Доступность = (мТекущийНомерСтраницы<>0);
	Элементы.Далее  .Доступность = (мТекущийНомерСтраницы<>4);
	Элементы.Отмена .Доступность = ИСТИНА;
	Элементы.Далее  .Заголовок   = ?(мТекущийНомерСтраницы=3, "Готово", "Далее");
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаХодЗагрузки Тогда
		Элементы.Справка.Доступность = ЛОЖЬ;
		Элементы.Назад  .Доступность = ЛОЖЬ;
		Элементы.Далее  .Доступность = ЛОЖЬ;
		Элементы.Отмена .Доступность = ИСТИНА;
		Элементы.Отмена .Заголовок   = "Отмена";
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКнопок()

// Процедура управления доступностью.
//
&НаКлиенте
Процедура УправлениеДиалогом()
	
	Элементы.СохранитьСоответствияВПрайсЛистеПоставщика.Доступность = Истина;
	Элементы.ПрайсЛистКонтрагента.Доступность = СохранитьСоответствияВПрайсЛистеПоставщика;
	Если СохранитьСоответствияВПрайсЛистеПоставщика Тогда
		Элементы.ПрайсЛистКонтрагента.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ПрайсЛистКонтрагента);
	Иначе
		Элементы.ПрайсЛистКонтрагента.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогом()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет фона
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов.ПодсвечиватьСтроку");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитовПолеПоиска");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов.МожетБытьПолемПоиска");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
&НаСервере
Процедура КонтрольЗаполненияНаСервере(ТабличныйДокумент)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// получим метаданные источника
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов = ТаблицаЗагружаемыхРеквизитов.Выгрузить();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов.Скопировать());
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	ОбработкаОбъект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("СоответствиеНоменклатуры", 					ОбработкаОбъект.СоответствиеНоменклатуры.Выгрузить());
	СтруктураПараметров.Вставить("РежимЗагрузки", 								ОбработкаОбъект.РежимЗагрузки);
	СтруктураПараметров.Вставить("СсылкаИсточника", 							ОбработкаОбъект.СсылкаИсточника);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 					ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ТЧДокумента",		 							?(ОбработкаОбъект.ТЧДокумента=Неопределено, Неопределено, ОбработкаОбъект.ТЧДокумента.Выгрузить()));
	СтруктураПараметров.Вставить("флКонтрольЗаполнения", 						Истина);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика",					ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ВладелецСерии",								Неопределено);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности",						ОбработкаОбъект.ФорматДатыСрокаГодности);
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта",							ОбработкаОбъект.ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта",							ОбработкаОбъект.ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",		ОбработкаОбъект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки",						ОбработкаОбъект.ПослеДобавленияСтроки);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект,ОбработкаОбъект);
    ЗагрузкаИзЭлектронныхДокументовВызовСервера.КонтрольЗаполнения(ТабличныйДокумент, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураПараметров);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // мКонтрольЗаполнения()

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
&НаСервере
Функция ЗагрузитьСоответствиеНоменклатуры(ТабличныйДокумент, СохранятьПроставленные = Ложь)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 			ТаблицаЗагружаемыхРеквизитов.Выгрузить());
	СтруктураПараметров.Вставить("СоответствиеНоменклатуры", 				ОбработкаОбъект.СоответствиеНоменклатуры.Выгрузить());
	СтруктураПараметров.Вставить("РежимЗагрузки",							ОбработкаОбъект.РежимЗагрузки);
	СтруктураПараметров.Вставить("СсылкаИсточника",							ОбработкаОбъект.СсылкаИсточника);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника",					ОбработкаОбъект.ТабличнаяЧастьИсточника);
	СтруктураПараметров.Вставить("ИмяВидаРегистра",							ОбработкаОбъект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника",							ОбработкаОбъект.ИмяСправочника);
	СтруктураПараметров.Вставить("Поставщик", 								Контрагент);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",	ОбработкаОбъект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("СоздаватьПроизводителя",					ОбработкаОбъект.СоздаватьПроизводителя);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика",				ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ТЧДокумента",								ОбработкаОбъект.ТЧДокумента);
	СтруктураПараметров.Вставить("флКонтрольЗаполнения",					Истина);
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии",				ОбработкаОбъект.ВсегдаФормироватьНовыеСерии);
	СтруктураПараметров.Вставить("СохранятьПроставленные", 					СохранятьПроставленные);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект,ОбработкаОбъект);
	
	НомерКолонкиНаименование = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ПолучитьНомерКолонкиНаименованияСФормы(ЭтотОбъект);
	
	Результат = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ЗагрузитьСоответствиеНоменклатуры(ТабличныйДокумент, СтруктураПараметров, НомерКолонкиНаименование);
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураПараметров);
	ОбработкаОбъект.СоответствиеНоменклатуры.Загрузить(СтруктураПараметров.СоответствиеНоменклатуры.Скопировать());
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

	Возврат Результат;

КонецФункции // мЗагрузитьСоответствиеНоменклатуры()

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
&НаСервере
Функция ЗагрузитьДанныеНаСервере(ТабличныйДокумент, ОписаниеОшибок)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("флКонтрольЗаполнения", 						Ложь);
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ТаблицаЗагружаемыхРеквизитов.Выгрузить());
	
	СтруктураПараметров.Вставить("ТЧДокумента", 								?(ЗначениеЗаполнено(Объект.ТабличнаяЧастьИсточника), Объект.СсылкаИсточника[Объект.ТабличнаяЧастьИсточника].Выгрузить(), Неопределено));
	СтруктураПараметров.Вставить("ОписаниеОшибок", 								"");
	СтруктураПараметров.Вставить("ДопПараметры", 								Новый Структура("ЗадаватьВопросы",Ложь));
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	Объект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("РежимЗагрузки", 								Объект.РежимЗагрузки);
	СтруктураПараметров.Вставить("СсылкаИсточника", 							Объект.СсылкаИсточника);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника",	 					Объект.ТабличнаяЧастьИсточника);
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 							Объект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника", 								Объект.ИмяСправочника);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 		Объект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ВладелецСерии", 								Неопределено);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов", 					Объект.НеСоздаватьНовыхЭлементов);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы", 			Объект.НеОбновлятьСуществующиеЭлементы);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи", 					Объект.ЗамещатьСуществующиеЗаписи);
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта", 						Объект.ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта", 							Объект.ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки", 						Объект.ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 					Объект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии", 				Объект.ВсегдаФормироватьНовыеСерии);
	СтруктураПараметров.Вставить("СоответствиеНоменклатуры", 					Объект.СоответствиеНоменклатуры.Выгрузить());
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности",						Объект.ФорматДатыСрокаГодности);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",								Объект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("Поставщик",									Контрагент);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект,Объект);
	СтруктураРезультата = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ЗагрузитьДанные(ТабличныйДокумент,СтруктураПараметров);
	
	Возврат СтруктураРезультата;
	
КонецФункции // мЗагрузитьДанные()

// Процедура заполнения результата выполнения мастера результатами работы и возникших ошибок.
//
&НаКлиенте
Процедура ЗаполнитьРезультатРаботы(РезультатРаботыТекст="")
	
	РезультатРаботы = СтрЗаменить(РезультатРаботы, "%РезультатРаботы%", РезультатРаботыТекст);
	
КонецПроцедуры // ЗаполнитьРезультатРаботы()

// Процедура очищает поле HTML результата работы путем получения текста из макета.
//
&НаСервере
Процедура ПодготовитьРезультатРаботы()
	
	РезультатРаботы = НСтр("ru = 'Результаты загрузки:'") + Символы.ПС + "%РезультатРаботы%";
	
КонецПроцедуры // ПодготовитьРезультатРаботы()

// Процедура выполняет непосредственную загрузку данных в документ, отображает ход выполнения процесса.
&НаСервере
Процедура ЗагрузитьДанныеВФорме(ТабличныйДокумент, ОписаниеОшибок ="", НастройкиЗагрузкиНоменклатурыИскатьПо = "")
	//
	//// Проверим оставшиеся реквизиты формы
	СохранитьСоответствия = Ложь;
	Если Элементы.СохранитьСоответствияВПрайсЛистеПоставщика.Доступность И СохранитьСоответствияВПрайсЛистеПоставщика Тогда
		Если НЕ ЗначениеЗаполнено(ПрайсЛистКонтрагента) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан прайс-лист поставщика'")); 
			Возврат;
		КонецЕсли;
		СохранитьСоответствия = Истина;
	КонецЕсли;
	
	Если Объект.ТабличнаяЧастьИсточника=Неопределено И НЕ Объект.ИмяВидаРегистра="" Тогда
		Объект.РежимЗагрузки = 2;
	КонецЕсли;
	
	// Выполним загрузку
	ДопПараметры = Новый Структура("ЗадаватьВопросы",Ложь);
	флКонтрольЗаполнения = Ложь;
	
	Результат = ЗагрузитьДанныеНаСервере(ТабличныйДокумент, ОписаниеОшибок);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ОписаниеОшибок = Результат.ОписаниеОшибок;
		АдресТаблицаЗагрузкаИЗФайлаВХранилище = ПоместитьВоВременноеХранилище(Результат.ТЧДокумента, УникальныйИдентификатор);
	КонецЕсли;
	
	// Сохраним соответствие в прайс-лист контрагента
	
	Если СохранитьСоответствия Тогда
		ЗагрузкаИзЭлектронныхДокументовВызовСервера.СохранитьТаблицуСоответствия(ПрайсЛистКонтрагента, НастройкиЗагрузкиНоменклатурыИскатьПо, ТаблицаДополнительныхПараметров.Выгрузить(), ТаблицаЗагружаемыхРеквизитов.Выгрузить(), Объект.СоответствиеНоменклатуры.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДанныеВФорме()

// Заполняет настройки колонок по умолчанию или по переданным настройкам.
//
// Параметры:
//  СтруктураУмолчаний - Структура - Структура настройки колонок по умолчанию.
//
&НаСервере
Процедура ЗаполнитьНастройкиКолонок(Настройки)
	
	ТаблицаЗагружаемыхРеквизитов.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов    = ТаблицаЗагружаемыхРеквизитов.Выгрузить().СкопироватьКолонки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СсылкаИсточника", 							ОбработкаОбъект.СсылкаИсточника);
	СтруктураПараметров.Вставить("РежимЗагрузки", 								ОбработкаОбъект.РежимЗагрузки);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника", 					ОбработкаОбъект.ТабличнаяЧастьИсточника);
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 							ОбработкаОбъект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника", 								ОбработкаОбъект.ИмяСправочника);
	СтруктураПараметров.Вставить("ТабличнаяЧастьДокументаОбъекта",				ОбработкаОбъект.ТабличнаяЧастьДокументаОбъекта);
	СтруктураПараметров.Вставить("ТЧДокумента",									ОбработкаОбъект.ТЧДокумента);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов",					ОбработкаОбъект.НеСоздаватьНовыхЭлементов);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы",				ОбработкаОбъект.НеОбновлятьСуществующиеЭлементы);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи",					ОбработкаОбъект.ЗамещатьСуществующиеЗаписи);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента",	ОбработкаОбъект.РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",		ОбработкаОбъект.ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности",						ОбработкаОбъект.ФорматДатыСрокаГодности);
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии",					ОбработкаОбъект.ВсегдаФормироватьНовыеСерии);
	СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом",					ОбработкаОбъект.ДействиеСЗагружаемымФайлом);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика",					ОбработкаОбъект.флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов",				ОбработкаОбъект.КаталогАрхиваЗагруженныхФайлов);
	СтруктураПараметров.Вставить("СоздаватьПроизводителя",						ОбработкаОбъект.СоздаватьПроизводителя);
	СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла",ОбработкаОбъект.ИспользоватьВнешнийМодульПреобразованияФайла);
	СтруктураПараметров.Вставить("ОбработкаПреобразования",						ОбработкаОбъект.ОбработкаПреобразования);
	СтруктураПараметров.Вставить("Кодировка",									ОбработкаОбъект.Кодировка);
	СтруктураПараметров.Вставить("Табуляция",									ОбработкаОбъект.Табуляция);
	СтруктураПараметров.Вставить("ИмяТаблицы",									ОбработкаОбъект.ИмяТаблицы);
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта",							ОбработкаОбъект.ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта",							ОбработкаОбъект.ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки",						ОбработкаОбъект.ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов",				ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов.Скопировать());
	СтруктураПараметров.Вставить("ИмяВидаРегистра",								ОбработкаОбъект.ИмяВидаРегистра);
	СтруктураПараметров.Вставить("ИмяСправочника",								ОбработкаОбъект.ИмяСправочника);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры",	ОбработкаОбъект.ДополнительныеРеквизитыПоТипуНоменклатуры.Скопировать());
	СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	ОбработкаОбъект.ЗагружатьДополнительныеРеквизитыИСведения);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	ОбработкаОбъект.ДополнительныеРеквизитыИСведенияТолькоОбщие);
	
	ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, ЭтотОбъект, ОбработкаОбъект, Истина);

	ЗагрузкаИзЭлектронныхДокументовВызовСервера.ЗаполнитьНастройкиКолонок(Настройки, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураПараметров);
	ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Скопировать();
	ТаблицаЗагружаемыхРеквизитов.Загрузить(ОбработкаОбъект.ТаблицаЗагружаемыхРеквизитов);

	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // ЗаполнитьНастройкиКолонок()

// Функция создания номенклатуры по настройке.
//
&НаСервере
Функция СоздатьНоменклатуруПоНастройкеНаСервере(ТабличныйДокументОбъекта, Настройка, НомерКолонкиНоменклатуры)
	
	Возврат ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.СоздатьНоменклатуруПоНастройке(ТабличныйДокументОбъекта,
																				Настройка, 
																				НомерКолонкиНоменклатуры, 
																				Объект.СоответствиеНоменклатуры.Выгрузить(), 
																				ЭтотОбъект,
																				Объект.ПерваяСтрокаДанныхТабличногоДокумента);
КонецФункции

// Функция формирования структуры параметров для установки отбора в форме выбора настроек.
//
&НаСервере
Функция СформироватьСтруктуруОтбораДляВыбораНастройки(ДляФормированияНоменклатуры=Ложь)
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("РежимЗагрузки",           Объект.РежимЗагрузки);
	СтруктураРеквизитов.Вставить("СсылкаИсточника",         Объект.СсылкаИсточника);
	СтруктураРеквизитов.Вставить("ТабличнаяЧастьИсточника", Объект.ТабличнаяЧастьИсточника);
	СтруктураРеквизитов.Вставить("ИмяВидаРегистра",         Объект.ИмяВидаРегистра);
	СтруктураРеквизитов.Вставить("ИмяСправочника",          Объект.ИмяСправочника);
	
	ПараметрОтборПоМетаданнымТабличнойЧасти = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьМетаданныеИсточника(СтруктураРеквизитов);
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ПараметрОтборПоВариантуИспользования", Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных);
	
	Если ДляФормированияНоменклатуры Тогда
		
		СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Справочник);
		СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"            , Метаданные.Справочники.Номенклатура.ПолноеИмя());
		
	Иначе
		
		Если Метаданные.Справочники.Содержит(ПараметрОтборПоМетаданнымТабличнойЧасти) Тогда
			// Это справочник
			СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Справочник);
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"            , ПараметрОтборПоМетаданнымТабличнойЧасти.ПолноеИмя());
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ПараметрОтборПоМетаданнымТабличнойЧасти) Тогда
			// Это регистр сведений
			СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.РегистрСведений);
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"            , ПараметрОтборПоМетаданнымТабличнойЧасти.ПолноеИмя());
			
		Иначе
			// Это ТЧ, надо только выяснить чья
			Если Метаданные.Документы.Содержит(ПараметрОтборПоМетаданнымТабличнойЧасти.Родитель()) Тогда
				СтруктураПараметров.Вставить("ПараметрОтборПоКонтрагенту", Контрагент);
				СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Документ);
			Иначе
				СтруктураПараметров.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", Перечисления.ТипыПрикладныхОбъектов.Справочник);
			КонецЕсли;
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданным"              , ?(ПараметрОтборПоМетаданнымТабличнойЧасти = Неопределено, "", ПараметрОтборПоМетаданнымТабличнойЧасти.Родитель().ПолноеИмя()));
			СтруктураПараметров.Вставить("ПараметрОтборПоМетаданнымТабличнойЧасти", ПараметрОтборПоМетаданнымТабличнойЧасти.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция СохранитьИзмененныеНастройкиНаСервере()
	Попытка
		НастройкаЗагрузкиОбъект = НастройкаЗагрузки.ПолучитьОбъект();
		МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МетаданныеИсточникаИзСправочника", МетаданныеИсточника);
		Если Метаданные.Справочники.Содержит(МетаданныеИсточника) Тогда
			ТекРежимЗагрузки                             = 0;
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника) Тогда
			ТекРежимЗагрузки                             = 2;
		Иначе
			ТекРежимЗагрузки                             = 1;	
		КонецЕсли;
		СтруктураПараметров.Вставить("РежимЗагрузки", 								ТекРежимЗагрузки);
		СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов", 					Объект.НеСоздаватьНовыхЭлементов);
		СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи", 					Ложь);
		СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	Объект.РучнаяНумерацияКолонокТабличногоДокумента);
		СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 		Объект.ПерваяСтрокаДанныхТабличногоДокумента);
		СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом", 					Объект.ДействиеСЗагружаемымФайлом);
		СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 					Объект.флПоискПоПрайсуПоставщика);
		СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов", 				Объект.КаталогАрхиваЗагруженныхФайлов);
		СтруктураПараметров.Вставить("Табуляция", 									Объект.Табуляция);
		СтруктураПараметров.Вставить("Кодировка", 									Объект.Кодировка);
		СтруктураПараметров.Вставить("ИмяТаблицы", 									Объект.ИмяТаблицы);
		СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы", 			Объект.НеОбновлятьСуществующиеЭлементы);
		СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла", Объект.ИспользоватьВнешнийМодульПреобразованияФайла);
		СтруктураПараметров.Вставить("ОбработкаПреобразования", 					Объект.ОбработкаПреобразования);
		СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ТаблицаЗагружаемыхРеквизитов.Выгрузить());
		СтруктураПараметров.Вставить("ПередЗаписьюОбъекта", 						Объект.ПередЗаписьюОбъекта);
		СтруктураПараметров.Вставить("ПриЗаписиОбъекта", 							Объект.ПриЗаписиОбъекта);
		СтруктураПараметров.Вставить("ПослеДобавленияСтроки", 						Объект.ПослеДобавленияСтроки);
		СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	Ложь);
		СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	Ложь);
		СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры",	Новый СписокЗначений);
		
		НастройкаЗагрузкиОбъект.НастройкиЗагрузкиВыгрузки = Новый ХранилищеЗначения(ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьНастройки(СтруктураПараметров));
		НастройкаЗагрузкиОбъект.Записать();
		Возврат "";
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
КонецФункции

#КонецОбласти



