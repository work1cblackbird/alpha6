#Область ОписаниеПеременных

&НаКлиенте
Перем Форма;

#КонецОбласти


#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	РезультатВзаимодействия = ПраваИНастройкиПользователя.Значение("РезультатВзаимодействия");
	
	Если ЗначениеЗаполнено(РезультатВзаимодействия) Тогда
		ПоискОтборДокументов = XMLСтрока(РезультатВзаимодействия);
		Элементы.ПоискОтборДокументов.Видимость = Ложь;
		ДобавитьКомандуСозданияДокумента(ПоискОтборДокументов);
	Иначе
		
		СписокВыбора = Элементы.ПоискОтборДокументовВсеДокумнеты.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("", НСтр("ru = 'Все документы'"));
		
		
		СписокВыбора = Элементы.ПоискОтборДокументов.СписокВыбора;
		СписокВыбора.Очистить();
		
		Для Индекс = 0 По Перечисления.ДокументыОбработкиСобытия.Количество() - 1 Цикл
			
			ТекущийТип = Перечисления.ДокументыОбработкиСобытия[Индекс];
			ИмяДокумента = XMLСтрока(ТекущийТип);
			
			Если ПравоДоступа("Просмотр", Метаданные.Документы[ИмяДокумента])
				И ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Метаданные.Документы[ИмяДокумента]) Тогда
				СписокВыбора.Добавить(ИмяДокумента, Строка(ТекущийТип));
				ДобавитьКомандуСозданияДокумента(ИмяДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим параметры заполнения полей отборов
	ОтборКлиент          = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Клиент");
	ОтборНомерТелефона   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НомерТелефона");
	ОтборЭлектроннаПочта = ПолучитьЗначениеПараметраСтруктуры(Параметры, "АдресЭлектроннойПочты");
	ДокументОснование    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументОснование");
	МаксимальноеЧилоРезультатаПоиска = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ОграничениеРезультатаПоиска", 50);
	
	// Для возможности выбора документа
	РежимВыбора = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РежимВыбора", Ложь);
	
	// Режим выбора контрагента
	РежимВыбораКонтрагента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РежимВыбораКонтрагента", Ложь);
	
	ДобавлятьНовогоКонтрагента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДобавлятьНовогоКонтрагента", Истина);
	
	Элементы.Выбрать.Видимость = (РежимВыбора ИЛИ РежимВыбораКонтрагента);
	Элементы.ДеревоДокументовВыбор.Видимость = РежимВыбора;
	
	Если РежимВыбораКонтрагента Тогда
		Команды.Найти("Открыть").Подсказка = Нстр("ru = 'Открыть форму контрагента'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборКлиент) Тогда
		ОтборКлиент = "";
	КонецЕсли;
	
	Элементы.СоздатьКонтрагента.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьПоискКонтрагентов();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ЭтоОповещениеОЗаписиКонтрагента(ИмяСобытия, Параметр, Источник) Тогда
		
		ОтборКлиент = Параметр;
		ОтборПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении отборов.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	ВыполнитьПоискКонтрагентов();
	
КонецПроцедуры // ОтборПриИзменении()

// Обработчик события возникающего на клиенте при изменении отборов по документу.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПоискОтборДокументовПриИзменении(Элемент)
	
	НайденныйДокумент = Элементы.ПоискОтборДокументов.СписокВыбора.НайтиПоЗначению(ПоискОтборДокументов);
	
	СформироватьСписокДокументовКлиента(, Истина);
	РазвернутьДеревоДокументов();
	
КонецПроцедуры // ПоискОтборДокументовПриИзменении()

&НаКлиенте
Процедура РежимПоискаПриИзменении(Элемент)
	
	ВыполнитьПоискКонтрагентов();
	
КонецПроцедуры // РежимПоискаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаКонтрагентов

// Обработчик события возникающего на клиенте при изменении данных реквизита "Выбор" в таблице контрагентов.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаКонтрагентовВыборПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ТекущиеДанные.Выбор Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаКонтрагентов Цикл
		ТекущаяСтрока.Выбор = Ложь;
	КонецЦикла;
	
	ТекущиеДанные.Выбор = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаКонтрагентов.ТекущиеДанные;
	
	Если
		ТипЗнч(ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И ЗначениеЗаполнено(ТекущиеДанные.Контрагент)
	Тогда
		
		ОткрытьФорму(
			"Справочник.Контрагенты.ФормаОбъекта",
			Новый Структура("Ключ", ТекущиеДанные.Контрагент),
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при активизации строки в таблице "Контрагенты".
//
&НаКлиенте
Процедура Подключаемый_ТаблицаКонтрагентовПриАктивизацииСтроки()
	
	СформироватьСписокДокументовКлиента();
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры // Подключаемый_ТаблицаКонтрагентовПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте при активизации строки в таблице "Контрагенты".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаКонтрагентовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ТаблицаКонтрагентовПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры // ТаблицаКонтрагентовПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДокументов

// Обработчик события возникающего на клиенте при изменении данных реквизита "Выбор" в дереве документов.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДеревоДокументовВыборПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Выбор Тогда
		ВыбранныйДокумент = ТекущиеДанные.Документ;
		Для Каждого ТекущийВидДокумента Из ДеревоДокументов.ПолучитьЭлементы() Цикл
			Для Каждого ТекущаяСтрока Из ТекущийВидДокумента.ПолучитьЭлементы() Цикл
				ТекущаяСтрока.Выбор = (ВыбранныйДокумент = ТекущаяСтрока.Документ);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ВыбранныйДокумент = Неопределено;
	КонецЕсли;
	
	УстановкаВидимостиВыбора(ТекущиеДанные.Выбор);
	
КонецПроцедуры // ДеревоДокументовВыборПриИзменении()

// Обработчик события возникающего на клиенте при двойном щелчке мыши (нажатии Enter) в ячейке дерева "Документы".
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока      - Ссылка       - Значение выбранной строки.
//  Поле                 - ПолеФормы    - Активное поле.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ РежимВыбора Тогда
		// Откроем форму документа
		ОбработкаОткрытияДокумента();
	КонецЕсли;
	
КонецПроцедуры // ДеревоДокументовВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при обновлении поиска.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОбновитьПоиск(Команда)
	
	ВыполнитьПоискКонтрагентов();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при открытии документа.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	ОбработкаОткрытияДокумента();
	
КонецПроцедуры // ОткрытьДокумент()

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	ВыбранныеКонтрагенты = ТаблицаКонтрагентов.НайтиСтроки(Новый Структура("Выбор", Истина));
	
	Если ВыбранныеКонтрагенты.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Перед созданием документа необходимо выбрать контрагента'"));
		Возврат;                                                                                   
		
	КонецЕсли;
	
	ИмяДокумента = СтрЗаменить(Команда.Имя, "Создать", "");
	ОбновитьЗначениеПрава("Разрешить");
	
	ДокументСобытие = ?(ЗначениеЗаполнено(ДокументОснование), ДокументОснование, Неопределено);
	Контрагент = ?(
		НЕ ЗначениеЗаполнено(ВыбранныеКонтрагенты[0].Контрагент),
		ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"),
		ВыбранныеКонтрагенты[0].Контрагент
	);
	
	СтруктураЗаполнения = Новый Структура();
	СтруктураЗаполнения.Вставить("Имя", "Событие");
	СтруктураЗаполнения.Вставить("Событие", ДокументСобытие);
	СтруктураЗаполнения.Вставить("Контрагент", Контрагент);
	
	ДопПараметры = Новый Структура("Событие,ТипДокумента", ДокументОснование, ИмяДокумента);
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаЗавершенияСозданияДокумента",
		ЭтотОбъект,
		ДопПараметры
	);
	
	ОткрытьФорму(
		СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента),
		Новый Структура("Основание", СтруктураЗаполнения),
		ЭтотОбъект,
		,
		,
		,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
	);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при выборе.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Выбрать(Команда)
	
	Если РежимВыбора Тогда
		ОбработкаВыбораДокумента();
	КонецЕсли;
		
	Если РежимВыбораКонтрагента Тогда
		ОбработкаВыбораКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при создании контрагента.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборНомерТелефона) Тогда
		ПараметрыФормы.Вставить("ТелефонКонтрагента", ОтборНомерТелефона);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборЭлектроннаПочта) Тогда
		ПараметрыФормы.Вставить("АдресЭП", ОтборЭлектроннаПочта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКлиент) Тогда
		
		Если ТипЗнч(ОтборКлиент) = Тип("Строка") Тогда
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Наименование", ОтборКлиент);
			ЗначенияЗаполнения.Вставить("НаименованиеПолное", ОтборКлиент);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Иначе
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ОтборКлиент);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Контрагенты.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Установим надпись для списка Контрагенты, где нет ссылки на справочник.
	ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаКонтрагентов.Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<Новый клиент>'"));
	ЭлементОформления.Использование = Истина;
	
	ПолеДляОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеДляОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКонтрагентовКонтрагент");
	ПолеДляОформления.Использование = Истина;
	
	// Уберем выбор документа из строки с ХО.
	ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДокументов.ХозОперация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	ЭлементОформления.Использование = Истина;
	
	ОформляемыеПоля = СтрРазделить(
		"ДеревоДокументовВыбор
		|ДеревоДокументовНомер
		|ДеревоДокументовДата
		|ДеревоДокументовВремя
		|ДеревоДокументовСтатус
		|ДеревоДокументовМенеджер
		|ДеревоДокументовПодразделениеКомпании",
		Символы.ПС
	);
	
	Для Каждого Поле Из ОформляемыеПоля Цикл
		
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Поле);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеПрава(ТочкаВхода = "")
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Событие")
		И НЕ ДокументОснование.Проведен
		И ПраваИНастройкиПользователя.Значение("ВводНаОснованииПроведенныхДокументов") Тогда
		
		Если ТочкаВхода = "Разрешить" Тогда
			ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", Ложь);
		Иначе
			ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаВводаПоиска(ТекстПоиска, ПредставлениеПоля, МинимальнаяДлина = 5)
	
	Если ТипЗнч(ТекстПоиска) = Тип("Строка") И СтрДлина(ТекстПоиска) < МинимальнаяДлина Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для поиска по ""%1"" необходимо ввести более %2 символов!'"),
				ПредставлениеПоля,
				МинимальнаяДлина
			)
		);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция удаления лишних символов с телефона.
//
&НаСервере
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз - 1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

// Функция представления номера телефона в формат для поиска.
//
&НаСервере
Функция ПреобразоватьНомерТелефонаДляПоиска(НомерТелефона)
	
	Источник = УправлениеКонтактнойИнформациейЛокализация.ДесериализацияФакса(
		"",
		НомерТелефона,
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	
	Данные = Источник.Состав;
	
	Результат = Новый Структура();
	Результат.Вставить(
		"НомерТелефона",
		УбратьРазделителиВНомерТелефона(Данные.КодСтраны + Данные.КодГорода + Данные.Номер)
	);
	Результат.Вставить("Добавочный", Данные.Добавочный);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискКонтрагентов()
	
	Если НЕ ВыполнитьПоискКонтрагентовНаСервере() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
		Форма = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПоискКонтрагентов()

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФоновогоЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		
		ЗаполнитьТаблицуКонтрагентов();
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(Форма);
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКонтрагентов()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = ПолучитьЗначениеПараметраСтруктуры(Результат, "ТекстОшибки", "");
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		НовыйКлиент = ТаблицаКонтрагентов.Добавить();
		НовыйКлиент.НомерКартинки = 1;
		
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = ПолучитьЗначениеПараметраСтруктуры(Результат, "ТаблицаКонтрагентов");
	Если ТипЗнч(РезультатПоиска) = Тип("ТаблицаЗначений") Тогда
		ТаблицаКонтрагентов.Загрузить(РезультатПоиска);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуКонтрагентов()

&НаСервере
Функция ВыполнитьПоискКонтрагентовНаСервере()
	
	ТаблицаКонтрагентов.Очистить();
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	Если НетДанныхДляПоискаКонтрагента() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска = ДополнитьПараметрыПоискаКлиентом(СтруктураПоиска);
	СтруктураПоиска = ДополнитьПараметрыПоискаТелефоном(СтруктураПоиска);
	СтруктураПоиска = ДополнитьПараметрыПоискаЭлектроннойПочтой(СтруктураПоиска);
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивТиповОбъектов = Новый Массив;
	Если ЗначениеЗаполнено(ПоискОтборДокументов) Тогда
		МассивТиповОбъектов.Добавить(ПоискОтборДокументов);
	Иначе
		Для Каждого ТекущаяСтрока Из Элементы.ПоискОтборДокументов.СписокВыбора Цикл
			
			Если ПустаяСтрока(ТекущаяСтрока.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТиповОбъектов.Добавить(ТекущаяСтрока.Значение);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПоиска.Вставить("МаксимальноеЧилоРезультатаПоиска", МаксимальноеЧилоРезультатаПоиска);
	СтруктураПоиска.Вставить("МассивТиповОбъектов", МассивТиповОбъектов);
	СтруктураПоиска.Вставить("РежимПоиска", ?(РежимПоиска = "ПоВсемПараметрамСразу", "Полный", "ПоОдному"));
	
	// Выполнение операции в фоновом задании (асинхронно).
	НаименованиеЗадания = НСтр("ru = 'Поиск контрагента'");
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(СтруктураПоиска);
	Задание = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ПоискКлиентовИДокументов.ВыполнитьПоискКонтрагента",
		СтруктураПоиска,
		НаименованиеЗадания);
	
	ИдентификаторЗадания = Задание.ИдентификаторЗадания;
	АдресХранилища       = Задание.АдресХранилища;
	
	Если Задание.ЗаданиеВыполнено Тогда
		ЗаполнитьТаблицуКонтрагентов();
	КонецЕсли;
	
	Возврат Задание.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция НетДанныхДляПоискаКонтрагента()
	
	Возврат НЕ (
		ЗначениеЗаполнено(ОтборКлиент)
		ИЛИ ЗначениеЗаполнено(ОтборНомерТелефона)
		ИЛИ ЗначениеЗаполнено(ОтборЭлектроннаПочта)
	);
	
КонецФункции

&НаСервере
Функция ДополнитьПараметрыПоискаКлиентом(ПараметрыПоиска)
	
	Если НЕ ЗначениеЗаполнено(ОтборКлиент)
		ИЛИ НЕ ПроверкаВводаПоиска(ОтборКлиент, НСтр("ru = 'Наименование клиента'")) Тогда
		
		Возврат ПараметрыПоиска;
		
	КонецЕсли;
	
	ПараметрыПоиска.Вставить("Контрагент", ОтборКлиент);
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаСервере
Функция ДополнитьПараметрыПоискаТелефоном(ПараметрыПоиска)
	
	СтруктураТелефона = ПреобразоватьНомерТелефонаДляПоиска(ОтборНомерТелефона);
	НомерТелефонаДляПоиска = СтруктураТелефона.НомерТелефона;
	
	Если ЗначениеЗаполнено(НомерТелефонаДляПоиска)
		И ПроверкаВводаПоиска(НомерТелефонаДляПоиска, НСтр("ru = 'Номер телефона'")) Тогда
		
		ПараметрыПоиска.Вставить("НомерТелефона", НомерТелефонаДляПоиска);
		ПараметрыПоиска.Вставить("НомерТелефонаИсходный", ОтборНомерТелефона);
		ПараметрыПоиска.Вставить("Добавочный",  СтруктураТелефона.Добавочный);
		
	КонецЕсли;
	
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаСервере
Функция ДополнитьПараметрыПоискаЭлектроннойПочтой(ПараметрыПоиска)
	
	Если ЗначениеЗаполнено(ОтборЭлектроннаПочта)
		И ПроверкаВводаПоиска(ОтборЭлектроннаПочта, НСтр("ru = 'Адрес электронной почты'")) Тогда
		
		ПараметрыПоиска.Вставить("АдресЭлектроннойПочты", ОтборЭлектроннаПочта);
		
	КонецЕсли;
	
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаПоискаДокументов(МассивТиповОбъектов)
	
	// Сфомируем запрос к документам
	Запрос = Новый Запрос;
	ТекстЗапроса = Новый Массив;
	Запрос.УстановитьПараметр("Контрагент", ТекущийКонтрагент);
	Запрос.УстановитьПараметр("НомерТелефона", "%" + ОтборНомерТелефона + "%");
	Запрос.УстановитьПараметр("АдресЭП", "%" + ОтборЭлектроннаПочта + "%");
	ЭтоПервыйДокумент = Истина;
	КонтрагентСсылка = (ТипЗнч(ТекущийКонтрагент) = Тип("СправочникСсылка.Контрагенты"));
	ПоискПоКИ = НЕ (ПустаяСтрока(ОтборНомерТелефона) И ПустаяСтрока(ОтборЭлектроннаПочта));
	
	Если КонтрагентСсылка Тогда
		МассивДокументов = Новый Массив;
		Для Каждого ТекущийДокумент Из МассивТиповОбъектов Цикл
			МассивДокументов.Добавить(Тип("ДокументСсылка." + ТекущийДокумент));
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокТиповДокументов", МассивДокументов);
		ШаблонТекстаЗапроса = "ВЫБРАТЬ
		|	%1 КАК Документ,
		|	%2 КАК Номер,
		|	%3 КАК Дата,
		|	%4 КАК ХозОперация,
		|	%5 КАК ПодразделениеКомпании,
		|	%6 КАК Менеджер,
		|	%7 КАК Статус,
		|	%8 КАК НомерТелефона,
		|	%9 КАК АдресЭлектроннойПочты
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	КритерийОтбора.Контрагенты(&Контрагент) КАК Контрагенты
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Контрагенты.Ссылка) В (&СписокТиповДокументов)
		|	И НЕ %10";
	Иначе
		ШаблонТекстаЗапросаПервое = "ВЫБРАТЬ
		|	ДокументПоиска.Ссылка КАК Документ,
		|	ДокументПоиска.Номер КАК Номер,
		|	ДокументПоиска.Дата КАК Дата,
		|	ДокументПоиска.ХозОперация КАК ХозОперация,
		|	ДокументПоиска.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ДокументПоиска.%2 КАК Менеджер,
		|	ДокументПоиска.%3 КАК Статус,
		|	%5 КАК НомерТелефона,
		|	%6 КАК АдресЭлектроннойПочты
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	Документ.%1 КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.%4 = &Контрагент  
		|	И Не ДокументПоиска.ПометкаУдаления";

		
		ШаблонТекстаЗапроса = "ВЫБРАТЬ
		|	ДокументПоиска.Ссылка,
		|	ДокументПоиска.Номер,
		|	ДокументПоиска.Дата,
		|	ДокументПоиска.ХозОперация,
		|	ДокументПоиска.ПодразделениеКомпании,
		|	ДокументПоиска.%2,
		|	ДокументПоиска.%3,
		|	%5,
		|	%6
		|ИЗ
		|	Документ.%1 КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.%4 = &Контрагент
		|	И Не ДокументПоиска.ПометкаУдаления";

	КонецЕсли;
	
	УсловиеНомер          = Новый Массив;
	УсловиеДата           = Новый Массив;
	УсловиеХозОперация    = Новый Массив;
	УсловиеПодразделение  = Новый Массив;
	УсловиеСсылки         = Новый Массив;
	УсловиеМенеджера      = Новый Массив;
	УсловиеСтатуса        = Новый Массив;
	УсловиеТелефона       = Новый Массив;
	УсловиеАдресаЭП       = Новый Массив;
	УсловиеПометкаУдаления= Новый Массив; 
		
	ШаблонУсловия = "КОГДА Контрагенты.Ссылка ССЫЛКА Документ.%1 ТОГДА ВЫРАЗИТЬ(Контрагенты.Ссылка КАК Документ.%1).%2 ";
	
	Для Каждого ТекущийДокумент Из МассивТиповОбъектов Цикл
		МетаданныеДокумента = Метаданные.Документы[ТекущийДокумент];
		ИмяСостояния = "";
		Если ЕстьРеквизит(МетаданныеДокумента, "Состояние") Тогда
			ИмяСостояния = "Состояние";
		ИначеЕсли ЕстьРеквизит(МетаданныеДокумента, "Статус") Тогда
			ИмяСостояния = "Статус";
		Иначе
			ИмяСостояния = "";
		КонецЕсли;
		Если ЕстьРеквизит(МетаданныеДокумента, "Менеджер") Тогда
			ИмяОтветственного = "Менеджер";
		ИначеЕсли ЕстьРеквизит(МетаданныеДокумента, "Ответственный") Тогда
			ИмяОтветственного = "Ответственный";
		ИначеЕсли ЕстьРеквизит(МетаданныеДокумента, "МенеджерКредитногоОтдела") Тогда
			ИмяОтветственного = "МенеджерКредитногоОтдела";
		ИначеЕсли ЕстьРеквизит(МетаданныеДокумента, "МенеджерОтделаСтрахования") Тогда
			ИмяОтветственного = "МенеджерОтделаСтрахования";
		Иначе
			ИмяОтветственного = "ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
		КонецЕсли;
		Если ЕстьРеквизит(МетаданныеДокумента, "ПредставлениеТелефона") Тогда
			НомерТелефона = "ПредставлениеТелефона";
		Иначе
			НомерТелефона = """""";
		КонецЕсли;
		Если ЕстьРеквизит(МетаданныеДокумента, "АдресЭлектроннойПочты") Тогда
			АдресЭП = "АдресЭлектроннойПочты";
		ИначеЕсли ЕстьРеквизит(МетаданныеДокумента, "КонтактнаяИнформация") Тогда
			АдресЭП = "КонтактнаяИнформация";
		Иначе
			АдресЭП = """""";
		КонецЕсли;
		Если КонтрагентСсылка Тогда
			Если НЕ ИмяОтветственного = "ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)" Тогда
				УсловиеМенеджера.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, ИмяОтветственного));
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяСостояния) Тогда
				УсловиеСтатуса.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, ИмяСостояния));
			КонецЕсли;
			Если НомерТелефона <> """""" Тогда
				УсловиеТелефона.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, НомерТелефона));
			КонецЕсли;
			Если АдресЭП <> """""" Тогда
				УсловиеАдресаЭП.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, АдресЭП));
			КонецЕсли;
			УсловиеНомер.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, "Номер"));
			УсловиеДата.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, "Дата"));
			УсловиеХозОперация.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, "ХозОперация"));
			УсловиеПодразделение.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, "ПодразделениеКомпании"));
			УсловиеСсылки.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, "Ссылка"));
			УсловиеПометкаУдаления.Добавить(СтрШаблон(ШаблонУсловия, ТекущийДокумент, "ПометкаУдаления"));
		Иначе
			ИмяРеквизитаКонтрагента = "";
			Реквизит = МетаданныеДокумента.Реквизиты.Найти("ОбращениеККлиенту");
			Если Реквизит = Неопределено Тогда
				Реквизит = МетаданныеДокумента.Реквизиты.Найти("Контрагент");
			Иначе
				ИмяРеквизитаКонтрагента = "ОбращениеККлиенту";
			КонецЕсли;
			Если Реквизит = Неопределено Тогда
				Реквизит = МетаданныеДокумента.Реквизиты.Найти("Клиент");
			Иначе
				Если ИмяРеквизитаКонтрагента = "" Тогда
					ИмяРеквизитаКонтрагента = "Контрагент";
				КонецЕсли;
			КонецЕсли;
			Если Реквизит = Неопределено Тогда
				Реквизит = МетаданныеДокумента.Реквизиты.Найти("Страхователь");
			Иначе
				Если ИмяРеквизитаКонтрагента = "" Тогда
					ИмяРеквизитаКонтрагента = "Клиент";
				КонецЕсли;
			КонецЕсли;
			Если НЕ Реквизит = Неопределено
				И ИмяРеквизитаКонтрагента = "" Тогда
				ИмяРеквизитаКонтрагента = "Страхователь";
			КонецЕсли;
			Если НЕ Реквизит = Неопределено И Реквизит.Тип.СодержитТип(Тип("Строка")) Тогда
				УсловиеОтбора = ИмяРеквизитаКонтрагента;
			Иначе
				Продолжить;
			КонецЕсли;
			ТекстЗапросаДокумента = СтрШаблон(
				?(ЭтоПервыйДокумент, ШаблонТекстаЗапросаПервое, ШаблонТекстаЗапроса),
				ТекущийДокумент,
				ИмяОтветственного,
				ИмяСостояния,
				УсловиеОтбора,
				?(НомерТелефона <> """""", "ДокументПоиска.", "") + НомерТелефона,
				?(АдресЭП <> """""", "ДокументПоиска.", "") + АдресЭП);
			ТекстЗапроса.Добавить(ТекстЗапросаДокумента);
		КонецЕсли;
		
		ЭтоПервыйДокумент = Ложь;
		
	КонецЦикла;
	
	Если ЭтоПервыйДокумент Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КонтрагентСсылка Тогда
		
		НачалоУсловия = "ВЫБОР ";
		КонецУсловия  = " %1 КОНЕЦ";
		
		УсловиеНомер.Вставить(0, НачалоУсловия);
		УсловиеНомер.Добавить(СтрШаблон(КонецУсловия, ""));
		УсловиеДата.Вставить(0, НачалоУсловия);
		УсловиеДата.Добавить(СтрШаблон(КонецУсловия, ""));
		УсловиеХозОперация.Вставить(0, НачалоУсловия);
		УсловиеХозОперация.Добавить(СтрШаблон(КонецУсловия, ""));
		УсловиеПодразделение.Вставить(0, НачалоУсловия);
		УсловиеПодразделение.Добавить(СтрШаблон(КонецУсловия, ""));
		УсловиеСсылки.Вставить(0, НачалоУсловия);
		УсловиеСсылки.Добавить(СтрШаблон(КонецУсловия, ""));
		Если УсловиеМенеджера.Количество() > 0 Тогда
			УсловиеМенеджера.Вставить(0, НачалоУсловия);
			УсловиеМенеджера.Добавить(СтрШаблон(КонецУсловия, "ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)"));
		Иначе
			УсловиеМенеджера.Добавить("ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)");
		КонецЕсли;
		Если УсловиеСтатуса.Количество() > 0 Тогда
			УсловиеСтатуса.Вставить(0, НачалоУсловия);
			УсловиеСтатуса.Добавить(СтрШаблон(КонецУсловия, "ИНАЧЕ """""));
		Иначе
			УсловиеСтатуса.Вставить(0, """""");
		КонецЕсли; 
		Если УсловиеПометкаУдаления.Количество() > 0 Тогда
			УсловиеПометкаУдаления.Вставить(0, НачалоУсловия);
			УсловиеПометкаУдаления.Добавить(СтрШаблон(КонецУсловия, "ИНАЧЕ Истина"));
		Иначе
			УсловиеПометкаУдаления.Вставить(0, """""");
		КонецЕсли; 
   		
		Если УсловиеТелефона.Количество() > 0 Тогда
			УсловиеТелефона.Вставить(0, НачалоУсловия);
			УсловиеТелефона.Добавить(СтрШаблон(КонецУсловия, "ИНАЧЕ """""));
		Иначе
			УсловиеТелефона.Вставить(0, """""");
		КонецЕсли;
		Если УсловиеАдресаЭП.Количество() > 0 Тогда
			УсловиеАдресаЭП.Вставить(0, НачалоУсловия);
			УсловиеАдресаЭП.Добавить(СтрШаблон(КонецУсловия, "ИНАЧЕ """""));
		Иначе
			УсловиеАдресаЭП.Вставить(0, """""");
		КонецЕсли;
		
		
		Запрос.Текст = СтрШаблон(
			ШаблонТекстаЗапроса,
			СтрСоединить(УсловиеСсылки, " "),
			СтрСоединить(УсловиеНомер, " "),
			СтрСоединить(УсловиеДата, " "),
			СтрСоединить(УсловиеХозОперация, " "),
			СтрСоединить(УсловиеПодразделение, " "),
			СтрСоединить(УсловиеМенеджера, " "),
			СтрСоединить(УсловиеСтатуса, " "),
			СтрСоединить(УсловиеТелефона, " "),
			СтрСоединить(УсловиеАдресаЭП, " "),
			СтрСоединить(УсловиеПометкаУдаления, " "));
		
	Иначе
		Разделитель = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Разделитель);
	КонецЕсли;
	
	Если ПоискПоКИ Тогда
		ПолучитьЗапросДокументаСОбором(Запрос.Текст);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ТаблицаДокументов", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьТекстЗапросаПоискаДокументов()

&НаСервере
Процедура ПолучитьЗапросДокументаСОбором(ТекстЗапроса)
	
	УсловиеОтбора = Новый Массив;
	
	Если НЕ ПустаяСтрока(ОтборНомерТелефона) Тогда
		УсловиеОтбора.Добавить("ВЫРАЗИТЬ(ТаблицаДокументов.НомерТелефона КАК СТРОКА (30)) ПОДОБНО &НомерТелефона");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОтборЭлектроннаПочта) Тогда
		УсловиеОтбора.Добавить("ВЫРАЗИТЬ(ТаблицаДокументов.АдресЭлектроннойПочты КАК СТРОКА (200)) ПОДОБНО &АдресЭП");
	КонецЕсли;  
	
	Если РежимПоиска = "ПоВсемПараметрамСразу" Тогда
		ЛогическаяОперация  = " И "
	Иначе
		ЛогическаяОперация  = " ИЛИ "
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Документ КАК Документ,
	|	ТаблицаДокументов.Номер КАК Номер,
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.ХозОперация КАК ХозОперация,
	|	ТаблицаДокументов.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ТаблицаДокументов.Менеджер КАК Менеджер,
	|	ТаблицаДокументов.Статус КАК Статус,
	|	ТаблицаДокументов.НомерТелефона КАК НомерТелефона,
	|	ТаблицаДокументов.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	" + СтрСоединить(УсловиеОтбора, ЛогическаяОперация);
	
КонецПроцедуры

// Процедура формирования документов контрагента
//
&НаСервере
Процедура СформироватьСписокДокументовКлиента(ВыбранныйДокумент = Неопределено, ОбновитьДокументы = Ложь)
	
	Если Элементы.ТаблицаКонтрагентов.ТекущаяСтрока = Неопределено Тогда
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ТаблицаКонтрагентов.НайтиПоИдентификатору(Элементы.ТаблицаКонтрагентов.ТекущаяСтрока);
	
	Если ТекущийКонтрагент = ТекущаяСтрока.Контрагент
		И ВыбранныйДокумент = Неопределено И НЕ ОбновитьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	Если ТекущийКонтрагент <> ТекущаяСтрока.Контрагент Тогда
		УстановкаВидимостиВыбора();
	КонецЕсли;
	
	ТекущийКонтрагент = ТекущаяСтрока.Контрагент;
	
	МассивТиповОбъектов = Новый Массив;
	
	Если ЗначениеЗаполнено(ПоискОтборДокументов) Тогда
		МассивТиповОбъектов.Добавить(ПоискОтборДокументов);
	Иначе
		Для Каждого ТекущаяСтрока Из Элементы.ПоискОтборДокументов.СписокВыбора Цикл
			
			Если ПустаяСтрока(ТекущаяСтрока.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТиповОбъектов.Добавить(ТекущаяСтрока.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивТиповОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнениеЗапроса = ПолучитьТекстЗапросаПоискаДокументов(МассивТиповОбъектов);
	
	Если ВыполнениеЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыполнениеЗапроса.Выбрать();
	
	ДокументыКонтрагента = РеквизитФормыВЗначение("ДеревоДокументов");
	
	СтруктураПоиска = Новый Структура("ХозОперация");
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		СтрокиДерева = ДокументыКонтрагента.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
		
		Если СтрокиДерева.Количество() > 0 Тогда
			СтрокаДерева = СтрокиДерева[0];
		Иначе
			СтрокаДерева = ДокументыКонтрагента.Строки.Добавить();
			СтрокаДерева.ХозОперация = Выборка.ХозОперация;
		КонецЕсли;
		
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "ХозОперация");
		НоваяСтрока.Клиент = ТекущийКонтрагент;
		
		Если НЕ ВыбранныйДокумент = Неопределено
			И ВыбранныйДокумент = НоваяСтрока.Документ Тогда
			НоваяСтрока.Выбор = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыКонтрагента.Строки.Сортировать("ХозОперация");
	
	Для Каждого ТекущаяХО Из ДокументыКонтрагента.Строки Цикл
		ТекущаяХО.Строки.Сортировать("Дата Убыв");
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДокументыКонтрагента, ДеревоДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	Для Каждого ТекущаяСтрока Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоДокументов.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоДокументов()

&НаСервере
Процедура УстановкаВидимостиВыбора(Использование = Ложь)
	
	Элементы.ГруппаСозданияДокументов.Доступность = НЕ Использование;
	
КонецПроцедуры

// Процедура получения имени документа по ссылке
//
&НаСервереБезКонтекста
Функция ПолучитьИмяДокумента(СсылкаДокумента)
	
	ДокументОбъект = СсылкаДокумента.ПолучитьОбъект();
	
	Возврат ДокументОбъект.Метаданные().Имя;
	
КонецФункции // ПолучитьИмяДокумента()

&НаКлиенте
Процедура ОбработкаОткрытияДокумента()
	
	ТекущаяСтрокаДокумента = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДокумента = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран документ.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаДокумента.Документ) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать документ.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискОтборДокументов) Тогда
		ИмяДокумента = ПоискОтборДокументов;
	Иначе
		ИмяДокумента = ПолучитьИмяДокумента(ТекущаяСтрокаДокумента.Документ);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущаяСтрокаДокумента.Документ);
	
	ТипДокумента = ТипЗнч(ТекущаяСтрокаДокумента.Документ);
	
	ОткрытьФорму(СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСформированныйДокумент(Событие, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПодчиненныеДокументы.Ссылка КАК Документ
	               |ИЗ
	               |	КритерийОтбора.ПодчиненныеДокументы(&Событие) КАК ПодчиненныеДокументы";
	Запрос.УстановитьПараметр("Событие", Событие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка." + ТипДокумента) Тогда
			Возврат Выборка.Документ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСформированныйДокумент()

// Обработка создания документа в контексте сервера.
//
&НаСервере
Процедура ОбработкаЗавершенияСозданияДокументаНаСервере(Событие, ТипДокумента, НовыйДокумент)
	
	НовыйДокумент = ПолучитьСформированныйДокумент(Событие, ТипДокумента);
	
	Если НовыйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьСписокДокументовКлиента(НовыйДокумент);
	
КонецПроцедуры // ОбработкаЗавершенияСозданияДокументаНаСервере()

// Обработка создания документа
//
&НаКлиенте
Процедура Подключаемый_ОбработкаЗавершенияСозданияДокумента(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ОбновитьЗначениеПрава();
	
	// Проверим, если форма закрыта, то нет необходимости в доп. действиях.
	Если НЕ ЭтотОбъект.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Неопределено;
	ОбработкаЗавершенияСозданияДокументаНаСервере(
		ДополнительныеПараметры.Событие,
		ДополнительныеПараметры.ТипДокумента,
		НовыйДокумент);
	
	РазвернутьДеревоДокументов();
	
	// Установим текущий документ.
	Если НЕ НовыйДокумент = Неопределено Тогда
		
		Если РежимВыбора Тогда
			РезультатВыбора = Новый Структура();
			РезультатВыбора.Вставить("Документ", НовыйДокумент);
			Закрыть(РезультатВыбора);
		КонецЕсли;
		
		ИдентификаторСтроки = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Документ",
			ИдентификаторСтроки,
			ДеревоДокументов.ПолучитьЭлементы(),
			НовыйДокумент,
			Ложь);
		Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
			Элементы.ДеревоДокументов.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаЗавершенияСозданияДокумента()

&НаКлиенте
Процедура ОбработкаВыбораДокумента()
	
	// Найдем выбранный документ
	ВыбранныйДокумент = Неопределено;
	Для Каждого ТекущийВидДокумента Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Для Каждого ТекущийДокумент Из ТекущийВидДокумента.ПолучитьЭлементы() Цикл
			Если ТекущийДокумент.Выбор Тогда
				ВыбранныйДокумент = ТекущийДокумент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВыбранныйДокумент = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ВыбранныйДокумент.Документ) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Необходимо выбрать документ.'")
		);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Клиент", ВыбранныйДокумент.Клиент);
	Результат.Вставить("Документ", ВыбранныйДокумент.Документ);
	
	Закрыть(Результат);
	
КонецПроцедуры // ОбработкаВыбораДокумента()

&НаКлиенте
Процедура ОбработкаВыбораКонтрагента()
	
	НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(Новый Структура("Выбор", Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран контрагент.'"));
		Возврат;
	КонецЕсли;
	
	// Выбрали нового контрагента - Создаем его карточку
	СтрокаКонтрагентов = НайденныеСтроки[0];
	
	Если НЕ ЗначениеЗаполнено(СтрокаКонтрагентов.Контрагент) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТелефонКонтрагента", ОтборНомерТелефона);
		ПараметрыФормы.Вставить("АдресЭП", ОтборЭлектроннаПочта);
		Если ЗначениеЗаполнено(ОтборКлиент)
			И ТипЗнч(ОтборКлиент) = Тип("Строка") Тогда
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("НаименованиеПолное", ОтборКлиент);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	Иначе
		Закрыть(СтрокаКонтрагентов.Контрагент);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораКонтрагента()

&НаСервере
Процедура ДобавитьКомандуСозданияДокумента(ИмяДокумента)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы[ИмяДокумента]) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
	ПараметрыНовойКоманды.ИмяКоманды = "Создать" + ИмяДокумента;
	ПараметрыНовойКоманды.ИмяГруппы = "ГруппаСозданияДокументов";
	ПараметрыНовойКоманды.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	ПараметрыНовойКоманды.Заголовок = Метаданные.Документы[ИмяДокумента].Синоним;
	ПараметрыНовойКоманды.ТолькоВоВсехДействиях = Ложь;
	ПараметрыНовойКоманды.Действие = "Подключаемый_СоздатьДокумент";
	ПараметрыНовойКоманды.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(ЭтотОбъект, ПараметрыНовойКоманды);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОповещениеОЗаписиКонтрагента(ИмяСобытия, Параметр, Источник)
	
	Возврат ИмяСобытия = "ЗаписанКонтрагент"
		И ТипЗнч(Параметр) = Тип("СправочникСсылка.Контрагенты")
		И ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения")
		И Источник.ВладелецФормы = ЭтотОбъект;

КонецФункции

#КонецОбласти