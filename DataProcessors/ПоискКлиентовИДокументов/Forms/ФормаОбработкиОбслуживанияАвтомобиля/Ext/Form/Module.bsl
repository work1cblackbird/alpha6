#Область ОписаниеПеременных

&НаКлиенте
Перем Форма;

#КонецОбласти


#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Получим параметры заполнения полей отборов
	ОтборКлиент          = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Клиент");
	ОтборНомерТелефона   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НомерТелефона");
	ОтборЭлектроннаПочта = ПолучитьЗначениеПараметраСтруктуры(Параметры, "АдресЭлектроннойПочты");
	
	Если НЕ ЗначениеЗаполнено(ОтборКлиент) Тогда
		ОтборКлиент = "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОтборАвтомобиль) Тогда
		ОтборАвтомобиль = "";
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьПоискДокументов();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении отборов.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	ВыполнитьПоискДокументов();
	
КонецПроцедуры // ОтборПриИзменении()

&НаКлиенте
Процедура РежимПоискаПриИзменении(Элемент)
	
	ВыполнитьПоискДокументов();
	
КонецПроцедуры // РежимПоискаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаКонтрагентов

&НаКлиенте
Процедура СписокОбслуживанияАвтомобиляВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Закрыть(Новый Структура("Значение", Значение));
	
КонецПроцедуры // СписокОбслуживанияАвтомобиляВыборЗначения()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при обновлении поиска.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОбновитьПоиск(Команда)
	
	ВыполнитьПоискДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ФормированиеСпискаОтборов(ТаблицаОтборов, ИмяОтбора, МассивРезультата, ИмяПоляОтбора, ГруппаОтбора)
	
	СтруктураПоиска = Новый Структура(ИмяОтбора, Истина);
	
	МассивОтбора = ТаблицаОтборов.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекущаяСтрока Из МассивОтбора Цикл
		МассивРезультата.Добавить(ТекущаяСтрока.Документ);
	КонецЦикла;
	
	Если МассивРезультата.Количество() > 0 Тогда
		
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбора,
			ИмяПоляОтбора,
			МассивРезультата,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформления(ЗначениеОтбора, ИмяПоляОтбора, ИмяПоляОформления)
	
	// Установим надпись для списка Контрагенты, где нет ссылки на справочник.
	ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбслуживанияАвтомобиля."+ИмяПоляОтбора);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	ЭлементОформления.Использование = Истина;
	
	ПолеДляОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеДляОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляОформления);
	ПолеДляОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОтборыСписка()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоКлиент");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоТелефону");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоАдресуЭлПочты");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоИНН");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоНомеруДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоВладельцу");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоГосНомеру");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоVIN");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоАвтомобилю");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОбслуживанияАвтомобиля, "СсылкаПоКомментарию");
	
КонецПроцедуры

// Условное офрмление формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление(ТаблицаОтбора = Неопределено)
	
	ЭтотОбъект.УсловноеОформление.Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		СписокОбслуживанияАвтомобиля.КомпоновщикНастроек.Настройки.Отбор,,
		"ОтборПоиска");
	
	СписокОтборПоКлиенту = Новый СписокЗначений();
	СписокОтборПоТелефону = Новый СписокЗначений();
	СписокОтборПоАдресуЭлПочты = Новый СписокЗначений();
	
	СписокОтборПоИНН = Новый СписокЗначений();
	СписокОтборПоНомеруДокумента = Новый СписокЗначений();
	СписокОтборПоВладельцу = Новый СписокЗначений();
	СписокОтборПоГосНомеру = Новый СписокЗначений();
	СписокОтборПоVIN = Новый СписокЗначений();
	СписокОтборПоАвтомобилю = Новый СписокЗначений();
	СписокОтборПоКомментарию = Новый СписокЗначений();
	
	УдалитьОтборыСписка();
	
	Если НЕ ТаблицаОтбора = Неопределено Тогда
		
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			СписокОбслуживанияАвтомобиля.КомпоновщикНастроек.Настройки.Отбор.Элементы,
			"ОтборПоиска",
			?(РежимПоиска = "ПоВсемПараметрамСразу",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли));
		
		ФормированиеСпискаОтборов(ТаблицаОтбора, "ПоКлиенту", СписокОтборПоКлиенту, "СсылкаПоКлиент",ГруппаОтбора);
		ФормированиеСпискаОтборов(ТаблицаОтбора, "ПоТелефону", СписокОтборПоТелефону, "СсылкаПоТелефону",ГруппаОтбора);
		ФормированиеСпискаОтборов(
			ТаблицаОтбора,
			"ПоАдресуПочты",
			СписокОтборПоАдресуЭлПочты,
			"СсылкаПоАдресуЭлПочты",
			ГруппаОтбора);
		ФормированиеСпискаОтборов(ТаблицаОтбора, "ПоИНН", СписокОтборПоИНН, "СсылкаПоИНН",ГруппаОтбора);
		ФормированиеСпискаОтборов(
			ТаблицаОтбора,
			"ПоНомеруДокумента",
			СписокОтборПоНомеруДокумента,
			"СсылкаПоНомеруДокумента",
			ГруппаОтбора);
		ФормированиеСпискаОтборов(ТаблицаОтбора, "ПоВладельцу", СписокОтборПоВладельцу, "СсылкаПоВладельцу",ГруппаОтбора);
		ФормированиеСпискаОтборов(ТаблицаОтбора, "ПоГосНомеру", СписокОтборПоГосНомеру, "СсылкаПоГосНомеру",ГруппаОтбора);
		ФормированиеСпискаОтборов(ТаблицаОтбора, "ПоVIN", СписокОтборПоVIN, "СсылкаПоVIN",ГруппаОтбора);
		ФормированиеСпискаОтборов(ТаблицаОтбора, "ПоАвтомобилю", СписокОтборПоАвтомобилю, "СсылкаПоАвтомобилю",ГруппаОтбора);
		ФормированиеСпискаОтборов(
			ТаблицаОтбора,
			"ПоКомментарию",
			СписокОтборПоКомментарию,
			"СсылкаПоКомментарию",
			ГруппаОтбора);
	КонецЕсли;
	
	ДобавитьЭлементУсловногоОформления(СписокОтборПоКлиенту, "СсылкаПоКлиент", Элементы.ФИО.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоТелефону, "СсылкаПоТелефону", Элементы.ТелефонКонтрагента.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоАдресуЭлПочты, "СсылкаПоАдресуЭлПочты", Элементы.ЭлПочта.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоИНН, "СсылкаПоИНН", Элементы.ИНН.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоВладельцу, "СсылкаПоВладельцу", Элементы.ВладелецАвтомобиля.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоГосНомеру, "СсылкаПоГосНомеру", Элементы.ГосНомер.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоVIN, "СсылкаПоVIN", Элементы.VIN.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоАвтомобилю, "СсылкаПоАвтомобилю", Элементы.Автомобиль.Имя);
	ДобавитьЭлементУсловногоОформления(СписокОтборПоКомментарию, "СсылкаПоКомментарию", Элементы.Комментарий.Имя);
	ДобавитьЭлементУсловногоОформления(
		СписокОтборПоНомеруДокумента,
		"СсылкаПоНомеруДокумента",
		Элементы.НомерДокумента.Имя);
	
КонецПроцедуры // УстановитьУсловноеОформление()

// Функция проверки корректности введенной информации в поисковых полях ввода.
//
&НаСервере
Функция ПроверкаВводаПоиска(ТекстПоиска, ПредставлениеПоля, МинимальнаяДлина = 5)
	
	Если ТипЗнч(ТекстПоиска) = Тип("Строка") И СтрДлина(ТекстПоиска) < МинимальнаяДлина Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для поиска по ""%1"" необходимо ввести более %2 символов!'"),
				ПредставлениеПоля,
				МинимальнаяДлина
			)
		);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПроверкаВводаПоиска()

// Функция удаления лишних символов с телефона.
//
&НаСервере
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

// Функция представления номера телефона в формат для поиска.
//
&НаСервере
Функция ПреобразоватьНомерТелефонаДляПоиска(НомерТелефона)
	
	Источник = УправлениеКонтактнойИнформациейЛокализация.ДесериализацияФакса(
		"",
		НомерТелефона,
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	
	Данные = Источник.Состав;
	
	Возврат УбратьРазделителиВНомерТелефона(Данные.КодСтраны + Данные.КодГорода + Данные.Номер);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискДокументов()
	
	Если НЕ ВыполнитьПоискДокументовНаСервере() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
		Форма = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПоискДокументов()

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФоновогоЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		
		ЗаполнитьОтборыДокументов();
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(Форма);
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборыДокументов()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УстановитьУсловноеОформление(Результат);
	
КонецПроцедуры // ЗаполнитьОтборыДокументов()

// Процедура поиска контрагентов
//
&НаСервере
Функция ВыполнитьПоискДокументовНаСервере()
	
	// Не заполнены поля поиска - нечего искать.
	Если НЕ (ЗначениеЗаполнено(ОтборКлиент)
		ИЛИ ЗначениеЗаполнено(ОтборНомерТелефона)
		ИЛИ ЗначениеЗаполнено(ОтборЭлектроннаПочта)
		ИЛИ ЗначениеЗаполнено(ОтборИНН)
		ИЛИ ЗначениеЗаполнено(ОтборНомерДокумента)
		ИЛИ ЗначениеЗаполнено(ОтборВладелецАвтомобиля)
		ИЛИ ЗначениеЗаполнено(ОтборГосНомерАвтомобиля)
		ИЛИ ЗначениеЗаполнено(ОтборVIN)
		ИЛИ ЗначениеЗаполнено(ОтборАвтомобиль)
		ИЛИ ЗначениеЗаполнено(ОтборКомментарий)) Тогда
		УстановитьУсловноеОформление();
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	
	Если ЗначениеЗаполнено(ОтборКлиент)
		И ПроверкаВводаПоиска(ОтборКлиент, Нстр("ru = 'Наименование клиента'")) Тогда
		СтруктураПоиска.Вставить("Контрагент", ОтборКлиент);
	КонецЕсли;
	
	НомерТелефонаДляПоиска = ПреобразоватьНомерТелефонаДляПоиска(ОтборНомерТелефона);
	
	Если ЗначениеЗаполнено(НомерТелефонаДляПоиска)
		И ПроверкаВводаПоиска(НомерТелефонаДляПоиска, Нстр("ru = 'Номер телефона'")) Тогда
		СтруктураПоиска.Вставить("НомерТелефона", НомерТелефонаДляПоиска);
		СтруктураПоиска.Вставить("НомерТелефонаИсходный", ОтборНомерТелефона);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборЭлектроннаПочта)
		И ПроверкаВводаПоиска(ОтборЭлектроннаПочта, Нстр("ru = 'Адрес электронной почты'")) Тогда
		СтруктураПоиска.Вставить("АдресЭлектроннойПочты", ОтборЭлектроннаПочта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборИНН)
		И ПроверкаВводаПоиска(ОтборИНН, Нстр("ru = 'ИНН'")) Тогда
		СтруктураПоиска.Вставить("ИНН", ОтборИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНомерДокумента)
		И ПроверкаВводаПоиска(ОтборНомерДокумента, Нстр("ru = 'Номер документа'")) Тогда
		СтруктураПоиска.Вставить("НомерДокумента", ОтборНомерДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборВладелецАвтомобиля)
		И ПроверкаВводаПоиска(ОтборВладелецАвтомобиля, Нстр("ru = 'Владелец автомобиля'")) Тогда
		СтруктураПоиска.Вставить("ВладелецАвтомобиля", ОтборВладелецАвтомобиля);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборГосНомерАвтомобиля)
		И ПроверкаВводаПоиска(ОтборГосНомерАвтомобиля, Нстр("ru = 'Гос. номер'")) Тогда
		СтруктураПоиска.Вставить("ГосНомер", ОтборГосНомерАвтомобиля);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборVIN)
		И ПроверкаВводаПоиска(ОтборVIN, Нстр("ru = 'VIN автомобиля'")) Тогда
		СтруктураПоиска.Вставить("VIN", ОтборVIN);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборАвтомобиль)
		И ПроверкаВводаПоиска(ОтборАвтомобиль, Нстр("ru = 'Автомобиль'")) Тогда
		СтруктураПоиска.Вставить("Автомобиль", ОтборАвтомобиль);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКомментарий)
		И ПроверкаВводаПоиска(ОтборКомментарий, Нстр("ru = 'Комментарий'")) Тогда
		СтруктураПоиска.Вставить("Комментарий", ОтборКомментарий);
	КонецЕсли;
	
	// Введенные данные для поиска не прошли проверку.
	Если СтруктураПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПоиска.Вставить("РежимПоиска", ?(РежимПоиска = "ПоВсемПараметрамСразу", "Полный", "ПоОдному"));
	
	// Выполнение операции в фоновом задании (асинхронно).
	НаименованиеЗадания = НСтр("ru = 'Поиск контрагента'");
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(СтруктураПоиска);
	Задание = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ПоискКлиентовИДокументов.ПолучитьОтборыПоДокументам",
		СтруктураПоиска,
		НаименованиеЗадания);
	
	ИдентификаторЗадания = Задание.ИдентификаторЗадания;
	АдресХранилища       = Задание.АдресХранилища;
	
	Если Задание.ЗаданиеВыполнено Тогда
		ЗаполнитьОтборыДокументов();
	КонецЕсли;
	
	Возврат Задание.ЗаданиеВыполнено;
	
КонецФункции // ВыполнитьПоискКонтрагентов()

#КонецОбласти