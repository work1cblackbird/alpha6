// Модуль формы обработки "Автозаполнение ячеистого склада"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Склад") ИЛИ НЕ ЗначениеЗаполнено(Параметры.Склад) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Данная обработка используется только объектами конфигурации.
		                          |Запрещен самостоятельный вызов.'"), , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Склад               = Параметры.Склад;
	СтратегияЗаполнения = 1;
	Заголовок           = НСтр("ru='Автозаполнение ячеистого склада:'") + Символы.НПП + Склад.Наименование;
	
	ЗаполнитьПараметрыСклада();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДиалогом();
	РассчитатьПараметрыЯчеек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при обработке выбора данных реквизита "Склад" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура СкладОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка, ПараметрыДействия = Неопределено)
	
	Если ВыбранноеЗначение.ВидСклада = Перечисления.ВидыСкладов.Ордерный ИЛИ ВыбранноеЗначение.ВидСклада = Перечисления.ВидыСкладов.Обычный Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Для данного склада заполнение невозможно. Необходимо выбрать ячеистый склад.'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // СкладОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при обработке выбора данных реквизита "Склад".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Обработаем событие в контексте сервера
	СкладОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СкладОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Склад".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ЗаполнитьПараметрыСклада();
	
	РассчитатьПараметрыЯчеек();
	
КонецПроцедуры // СкладПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Стратегия заполнения".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СтратегияЗаполненияПриИзменении(Элемент)
	
	УправлениеДиалогом();
	
	РассчитатьПараметрыЯчеек();
	
КонецПроцедуры // СтратегияЗаполненияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Длина ячейки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПараметрыЯчеекПриИзменении(Элемент)
	
	РассчитатьПараметрыЯчеек();
	
КонецПроцедуры // ДлинаЯчейкиПриИзменении()

&НаКлиенте
Процедура ШиринаЧислоРядовПриИзменении(Элемент)
	
	РасчетПоРазмерам = СтратегияЗаполнения = 1;
	ШиринаЯчейки     = ?(РасчетПоРазмерам, ШиринаЧислоРядов, 0);
	ЧислоРядов       = ?(РасчетПоРазмерам, 0, ШиринаЧислоРядов);
	
	РассчитатьПараметрыЯчеек();
	
КонецПроцедуры

&НаКлиенте
Процедура ДлинаЧислоВРядуПриИзменении(Элемент)
	
	РасчетПоРазмерам = СтратегияЗаполнения = 1;
	ДлинаЯчейки = ?(РасчетПоРазмерам, ДлинаЧислоВРяду, 0);
	ЧислоЯчеек  = ?(РасчетПоРазмерам, 0, ДлинаЧислоВРяду);
	
	РассчитатьПараметрыЯчеек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при нажатии на кнопку "Выполнить"в контексте сервера.
//
// Параметры:
//  ПараметрыЯчеек  - Структура - Рассчитанные параметры ячеек склада.
//
&НаСервере
Процедура ВыполнитьЗаполнениеЯчеекНаСервере(ПараметрыЯчеек)
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка. Не выбран склад.'"));
		Возврат;
	КонецЕсли;
	
	// Проверим нет ли уже созданных ячеек (пока проверяем только корень).
	ВыборкаЯчейки = Справочники.ЯчейкиХранения.Выбрать(Справочники.ЯчейкиХранения.ПустаяСсылка(), Склад);
	Если Справочники.СкладыКомпании.ЕстьЗаполненныеЯчейки(Склад) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Для данного склада уже есть введенные ячейки.
		                          |Автозаполнение невозможно. Воспользуйтесь ручным вводом.'"));
		Возврат;
	КонецЕсли;
	
	// Проверим введенные данные формы.
	СтрокаПустыхПараметров = "";
	Если СтратегияЗаполнения = 1 Тогда
		
		СтрокаПустыхПараметров = СтрокаПустыхПараметров + ?(ДлинаЯчейки  = 0, Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Длина ячейки'") + ",", "");
		СтрокаПустыхПараметров = СтрокаПустыхПараметров + ?(ШиринаЯчейки = 0, Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Ширина ячейки'") + ",", "");
		
	ИначеЕсли СтратегияЗаполнения = 2 Тогда
		
		СтрокаПустыхПараметров = СтрокаПустыхПараметров + ?(ЧислоЯчеек = 0, Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Число ячеек'") + ",", "");
		СтрокаПустыхПараметров = СтрокаПустыхПараметров + ?(ЧислоРядов = 0, Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Число рядов'") + ",", "");
	КонецЕсли;
	
	Если СтрокаПустыхПараметров <> "" Тогда
		
		СтрокаПустыхПараметров  = НСтр("ru = 'Не заполнены параметры заполнения:'")
			+ Символы.НПП
			+ Лев(СтрокаПустыхПараметров, СтрДлина(СтрокаПустыхПараметров) - 1);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Автозаполнение склада ячейками невозможно.'"));
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='Не введены параметры заполнения:  %1'"), Лев(СтрокаПустыхПараметров, СтрДлина(СтрокаПустыхПараметров) - 1)));
		Возврат;
	КонецЕсли;
	
	// Вызываем процедуру заполнения склада ячейками.
	СоздатьЯчейки(ПараметрыЯчеек);
	
КонецПроцедуры // ВыполнитьЗаполнениеЯчеекНаСервере()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Выполнить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыполнитьЗаполнениеЯчеек(Команда)
	
	ПараметрыЯчеек = ПараметрыЯчеек();
	
	// Обработаем событие в контексте сервера
	ВыполнитьЗаполнениеЯчеекНаСервере(ПараметрыЯчеек);
	
	Оповестить("ОбработкаОповещения", , ВладелецФормы);
	Закрыть();
	
КонецПроцедуры // ВыполнитьЗаполнениеЯчеек()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит настройку отображения элементов управления диалога в зависимости от значений реквизитов объекта.
&НаКлиенте
Процедура УправлениеДиалогом()
	
	РасчетПоРазмерам = СтратегияЗаполнения = 1;
	
	Элементы.ДлинаЧислоВРяду.Заголовок  = ?(РасчетПоРазмерам, НСтр("ru = 'Длина ячейки'"),  НСтр("ru = 'Число ячеек'"));
	Элементы.ШиринаЧислоРядов.Заголовок = ?(РасчетПоРазмерам, НСтр("ru = 'Ширина ячейки'"), НСтр("ru = 'Число рядов'"));
	
	ШиринаЧислоРядов = ?(РасчетПоРазмерам, ШиринаЯчейки, ЧислоРядов);
	ДлинаЧислоВРяду  = ?(РасчетПоРазмерам, ДлинаЯчейки,  ЧислоЯчеек);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Выводит на форму параметры выбранного склада
&НаСервере
Процедура ЗаполнитьПараметрыСклада()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Склад, "ДлинаСклада, ШиринаСклада, ЧислоУровней, ЕдиницаРазмерности");
	
	ДлинаЯчейки  = Склад.ДлинаЯчейкиПоУмолчанию;
	ШиринаЯчейки = Склад.ШиринаЯчейкиПоУмолчанию;
	
КонецПроцедуры // ЗаполнитьПараметрыСклада()

// Выводит расчетные значения по ячейкам (размеры или количество).
&НаКлиенте
Процедура РассчитатьПараметрыЯчеек()
	
	ПараметрыЯчеек = ПараметрыЯчеек();
	ВывестиРасчетныеЗначения(ПараметрыЯчеек);
	
КонецПроцедуры // РассчитатьПараметрыЯчеек()

// Выводит расчетные значения по ячейкам (размеры или количество).
//
// Параметры:
//  ПараметрыЯчеек  - Структура - Рассчитанные параметры ячеек склада.
//
&НаСервере
Процедура ВывестиРасчетныеЗначения(ПараметрыЯчеек)
	
	РасчетПоРазмерам = СтратегияЗаполнения = 1;
	
	КоличествоЯчеекДлина = ?(РасчетПоРазмерам, ПараметрыЯчеек.КоличествоЯчеек, ПараметрыЯчеек.СредняяДлинаЯчейки);
	Элементы.КоличествоЯчеекДлина.Заголовок = ?(РасчетПоРазмерам, НСтр("ru = 'Ячеек в ряде'"), "Длина");
	Элементы.КоличествоЯчеекДлина.Подсказка = ?(РасчетПоРазмерам, НСтр("ru = 'Расчетное количество ячеек в ряде'"), НСтр("ru = 'Расчетная длина создаваемой ячейки'"));
	
	КоличествоРядовШирина = ?(РасчетПоРазмерам, ПараметрыЯчеек.КоличествоРядов, ПараметрыЯчеек.СредняяШиринаЯчейки);
	Элементы.КоличествоРядовШирина.Заголовок = ?(РасчетПоРазмерам, НСтр("ru = 'Количество рядов'"), "Ширина");
	Элементы.КоличествоРядовШирина.Подсказка = ?(РасчетПоРазмерам, НСтр("ru = 'Расчетное количество рядов ячеек'"), НСтр("ru = 'Расчетная ширина создаваемой ячейки'"));
	
	ОбщееЧислоЯчеек =  ?(РасчетПоРазмерам, ПараметрыЯчеек.КоличествоЯчеек, ЧислоРядов) * ?(РасчетПоРазмерам, ПараметрыЯчеек.КоличествоРядов, ЧислоЯчеек) * ЧислоУровней;
	
КонецПроцедуры // ВывестиРасчетныеЗначения()

// Рассчитаем размеры или количество ячеек, исходя из указанных размеров ячеек и склада и стратегии заполнения.
//
// Возвращаемое значение:
//   Структура  - КоличествоЯчеек, КоличествоРядов, СредняяДлинаЯчейки, СредняяШиринаЯчейки.
//
&НаКлиенте
Функция ПараметрыЯчеек()
	
	ПараметрыЯчеек = Новый Структура();
	ПараметрыЯчеек.Вставить("КоличествоЯчеек",     0);
	ПараметрыЯчеек.Вставить("КоличествоРядов",     0);
	ПараметрыЯчеек.Вставить("СредняяДлинаЯчейки",  0);
	ПараметрыЯчеек.Вставить("СредняяШиринаЯчейки", 0);
	
	Если СтратегияЗаполнения = 1 Тогда
		
		// Длину склада увеличиваем на величину зазора, поскольку зазоры между крайними ячейками и стенами не учитываем.
		ПараметрыЯчеек.КоличествоЯчеек = ?(ДлинаЯчейки  > 0, Цел((ДлинаСклада  + Зазор) / (ДлинаЯчейки  + Зазор)), 0);
		ПараметрыЯчеек.КоличествоРядов = ?(ШиринаЯчейки > 0, Цел((ШиринаСклада + Зазор) / (ШиринаЯчейки + Зазор)), 0);
		
		ЧислоЯчеек = ПараметрыЯчеек.КоличествоЯчеек;
		ЧислоРядов = ПараметрыЯчеек.КоличествоРядов;
		
	ИначеЕсли СтратегияЗаполнения = 2 Тогда
		
		// Округляем в меньшую сторону, чтобы ячейки не "вылезли" за пределы склада
		ПараметрыЯчеек.СредняяДлинаЯчейки  = ?(ЧислоЯчеек > 0, Окр((ДлинаСклада  + Зазор) / ЧислоЯчеек, 2, РежимОкругления.Окр15как10) - Зазор, 0);
		ПараметрыЯчеек.СредняяШиринаЯчейки = ?(ЧислоРядов > 0, Окр((ШиринаСклада + Зазор) / ЧислоРядов, 2, РежимОкругления.Окр15как10) - Зазор, 0);
		
		ДлинаЯчейки  = ПараметрыЯчеек.СредняяДлинаЯчейки;
		ШиринаЯчейки = ПараметрыЯчеек.СредняяШиринаЯчейки;
		
	КонецЕсли;
	
	Возврат ПараметрыЯчеек;
	
КонецФункции // РассчитатьКоличествоЯчеек()

// Процедура заполнения выбранного склада ячейками.
&НаСервере
Процедура СоздатьЯчейки(ПараметрыЯчеек)
	
	РасчетПоРазмерам = СтратегияЗаполнения = 1;
	
	КоличествоЯчеек = ?(РасчетПоРазмерам, ПараметрыЯчеек.КоличествоЯчеек, ЧислоЯчеек);
	КоличествоРядов = ?(РасчетПоРазмерам, ПараметрыЯчеек.КоличествоРядов, ЧислоРядов);
	ТекДлинаЯчейки  = ?(РасчетПоРазмерам, ДлинаЯчейки,  ПараметрыЯчеек.СредняяДлинаЯчейки);
	ТекШиринаЯчейки = ?(РасчетПоРазмерам, ШиринаЯчейки, ПараметрыЯчеек.СредняяШиринаЯчейки);
	
	// Координаты x, y и z начинаются с нуля.
	Для x = 0 По КоличествоЯчеек - 1 Цикл
		
		Для y = 0 По КоличествоРядов - 1 Цикл
			
			Для z = 0 По ЧислоУровней - 1 Цикл
				
				НовыйЭлемент = Справочники.ЯчейкиХранения.СоздатьЭлемент();
				НовыйЭлемент.Владелец     = Склад;
				НовыйЭлемент.КоординатаX  = x * (ТекДлинаЯчейки  + Зазор);
				НовыйЭлемент.КоординатаY  = y * (ТекШиринаЯчейки + Зазор);
				НовыйЭлемент.Уровень      = z;
				НовыйЭлемент.ДлинаЯчейки  = ТекДлинаЯчейки;
				НовыйЭлемент.ШиринаЯчейки = ТекШиринаЯчейки;
				НовыйЭлемент.Недоступна   = Ложь;
				НовыйЭлемент.Код          = Строка(x + 1) + "-" + Строка(y + 1) + "-" + Строка(z);
				НовыйЭлемент.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // СоздатьЯчейки()

#КонецОбласти

