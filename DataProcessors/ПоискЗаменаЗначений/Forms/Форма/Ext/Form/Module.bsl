///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Поиск и замена значений"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЗаменяемыйОбъект") Тогда
		Найти = Параметры.ЗаменяемыйОбъект;
		НайтиИсходящие(Найти);
		НайтиВходящие(Найти);
		ТипНайти();
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаменяемыйОбъект") И ЗначениеЗаполнено(Параметры.ЗаменительОбъект) Тогда
		Заменить = Параметры.ЗаменительОбъект;
	КонецЕсли;
	
	Элементы.ОтключитьКонтрольКорректностиПриЗаписи.Видимость = ПравоДоступа("АдминистрированиеДанных", Метаданные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Произведем настройку параметров отображения кнопок командной панели списка ячеек.
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыДинамическогоСписка(ЭтотОбъект, "Отложенные");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура НайтиПриИзмененииНаСервере()
	ТипНайти();
	НайтиИсходящие(Найти);
	НайтиВходящие(Найти);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПриИзменении(Элемент)
	НайтиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВОбъектахФлажокПриИзменении(Элемент)
	ИДТекущейСтроки = Элементы.ИспользуетсяВОбъектах.ТекущаяСтрока;
	Если ИДТекущейСтроки <> Неопределено Тогда		
		ЭлементКоллекции = ИспользуетсяВОбъектах.НайтиПоИдентификатору(ИДТекущейСтроки);
		Если ЭлементКоллекции.Флажок = 2 Тогда
			ЭлементКоллекции.Флажок = 0;
		ИначеЕсли ЭлементКоллекции.Флажок = 0 Тогда
			ЭлементКоллекции.Флажок = 1;
		КонецЕсли;
		УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Флажок);
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель.Флажок = ?(УстановленоДляВсех(ЭлементКоллекции), ЭлементКоллекции.Флажок, 2);
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИспользуетсяВОбъектах

&НаКлиенте
Процедура ИспользуетсяВОбъектахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВОбъектахПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПомеченныеНаУдаление

&НаКлиенте
Процедура ПомеченныеНаУдалениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекОбъект = Элемент.ТекущиеДанные.Объект;
	Если ТипЗнч(ТекОбъект) <> Тип("Строка") Тогда
		ПоказатьЗначение(,ТекОбъект);
	Иначе
		Если Элементы.ПомеченныеНаУдаление.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.ПомеченныеНаУдаление.Свернуть(Элемент.ТекущаяСтрока);
		Иначе
			Элементы.ПомеченныеНаУдаление.Развернуть(Элемент.ТекущаяСтрока, Истина);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПомеченныеНаУдалениеПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные<>Неопределено Тогда
		Элементы.ПомеченныеНаУдалениеЗаменитьОбъект.Доступность = ТипЗнч(Элемент.ТекущиеДанные.Объект) <> Тип("Строка");
		Элементы.ПомеченныеНаУдалениеКонтекстноеМенюЗаменитьОбъект.Доступность = ТипЗнч(Элемент.ТекущиеДанные.Объект) <> Тип("Строка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Поиск(Команда)
	Если ЗначениеЗаполнено(Найти) Тогда
		НайтиИсходящие(Найти);
		НайтиВходящие(Найти);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не заданы параметры для поиска.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Заменить(Команда)
	Результат =Истина;
	Если Не ЗначениеЗаполнено(Найти) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не заполнено поле поиска.'"));
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Заменить) И Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Для заменяемого объекта <%1> не указано значение замены.'"),
				Строка(Найти)
			)
		);
		Результат = Ложь;
	КонецЕсли;
	
	Если Заменить = Найти И Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Для заменяемого объекта <%1> указано одинаковое значение замены.'"),
				Строка(Найти)
			)
		);
		Результат = Ложь;
	КонецЕсли;
	
	Если ПроверитьОтметкиВыбранныхОбъектов() И Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрано ни одного объекта для замены.'"));
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		ЗаменитьОбъекты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "Отложить");
	
	// Формируем текст вопроса
	ТекстВопроса = НСтр("ru = 'При обработке отложенных заданий выполняется замена во всех найденных объектах. Продолжить?'");
	
	// Получаем подтверждение операции от пользователя
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаИспользуетсяВОбъектах" Тогда
		КоллекцияЭлементовДерева = ИспользуетсяВОбъектах.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ИспользуетсяВОбъектах.Свернуть(ИдентификаторСтроки);
		КонецЦикла;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаПомеченныеНаУдаление" Тогда
		КоллекцияЭлементовДерева = ПомеченныеНаУдаление.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ПомеченныеНаУдаление.Свернуть(ИдентификаторСтроки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
		Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаИспользуетсяВОбъектах" Тогда
		КоллекцияЭлементовДерева = ИспользуетсяВОбъектах.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ИспользуетсяВОбъектах.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаПомеченныеНаУдаление" Тогда
		КоллекцияЭлементовДерева = ПомеченныеНаУдаление.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ПомеченныеНаУдаление.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсе(Команда)
	КоллекцияЭлементовДерева=ИспользуетсяВОбъектах.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		Строка.Флажок = 1;
		ПодчинЭлементы = Строка.ПолучитьЭлементы();
		Для Каждого ПодчинСтрока Из ПодчинЭлементы Цикл
			ПодчинСтрока.Флажок = 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьВсе(Команда)
	КоллекцияЭлементовДерева=ИспользуетсяВОбъектах.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		Строка.Флажок = 0;
		ПодчинЭлементы = Строка.ПолучитьЭлементы();
		Для Каждого ПодчинСтрока Из ПодчинЭлементы Цикл
			ПодчинСтрока.Флажок = 0;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьОбъект(Команда)
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаИспользуетОбъекты" Тогда
		Если Элементы.ИспользуетОбъекты.ТекущиеДанные <> Неопределено Тогда
			ЗаменяемыйОбъект = Элементы.ИспользуетОбъекты.ТекущиеДанные.Объект;
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаПомеченныеНаУдаление" Тогда
		Если Элементы.ПомеченныеНаУдаление.ТекущиеДанные <> Неопределено И ТипЗнч(Элементы.ПомеченныеНаУдаление.ТекущиеДанные) <> Тип("Строка") Тогда
			ЗаменяемыйОбъект = Элементы.ПомеченныеНаУдаление.ТекущиеДанные.Объект;
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаОтложенные" Тогда
		Если Элементы.Отложенные.ТекущиеДанные <> Неопределено Тогда
			СтруктураСсылок = ПолучитьСсылкуПоXML();
			ЗаменяемыйОбъект = СтруктураСсылок.Искать;
			ЗаменительОбъект = СтруктураСсылок.Заменить;
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаменяемыйОбъект", ЗаменяемыйОбъект);
	Если ЗначениеЗаполнено(ЗаменительОбъект) Тогда
		СтруктураПараметров.Вставить("ЗаменительОбъект", ЗаменительОбъект)
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПоискЗаменаЗначений.Форма",СтруктураПараметров,,Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НайтиВходящие(ИскомыйОбъект)
	
	Если ЗначениеЗаполнено(ИскомыйОбъект) Тогда
		
		СписокСсылокИспользует = Новый ТаблицаЗначений;
		СписокСсылокИспользует.Колонки.Добавить("Объект",Новый ОписаниеТипов(),"Объект");
		СписокСсылокИспользует.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"),"Тип");
		
		Если ИскомыйОбъект<>Неопределено Тогда
			ВидДок = ИскомыйОбъект.Метаданные().Имя;
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("Строка"));
			МассивТипов.Добавить(Тип("Число"));
			МассивТипов.Добавить(Тип("Дата"));
			МассивТипов.Добавить(Тип("Булево"));
			ОписаниеТиповДок = Новый ОписаниеТипов(МассивТипов);
			
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИскомыйОбъект)) Тогда
				КоллекцияРеквизитов = Новый Массив;
				Для Каждого ТекущийРеквизит Из ИскомыйОбъект.Метаданные().Реквизиты Цикл
					КоллекцияРеквизитов.Добавить(ТекущийРеквизит);
				КонецЦикла;
				Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
					ЗначениеСостава = Реквизит.Состав.Найти(ИскомыйОбъект.Метаданные());
					Если ЗначениеСостава=Неопределено ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
						Продолжить;
					КонецЕсли;
					КоллекцияРеквизитов.Добавить(Реквизит);
				КонецЦикла;
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ИскомыйОбъект)) Тогда
				КоллекцияРеквизитов = Новый Массив;
				Для Каждого ТекущийРеквизит Из ИскомыйОбъект.Метаданные().Реквизиты Цикл
					КоллекцияРеквизитов.Добавить(ТекущийРеквизит);
				КонецЦикла;
				Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
					ЗначениеСостава = Реквизит.Состав.Найти(ИскомыйОбъект.Метаданные());
					Если ЗначениеСостава=Неопределено ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
						Продолжить;
					КонецЕсли;
					КоллекцияРеквизитов.Добавить(Реквизит);
				КонецЦикла;
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ИскомыйОбъект))
				ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ИскомыйОбъект)) Тогда
				КоллекцияРеквизитов=ИскомыйОбъект.Метаданные().Реквизиты
			ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ИскомыйОбъект)) Тогда
				КоллекцияРеквизитов=ИскомыйОбъект.Метаданные().Реквизиты
			ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИскомыйОбъект)) Тогда
				КоллекцияРеквизитов=ИскомыйОбъект.Метаданные().Реквизиты
			ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ИскомыйОбъект)) Тогда
				КоллекцияРеквизитов=ИскомыйОбъект.Метаданные().Реквизиты
			Иначе 
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Поиск по данному типу ссылки не определен.'"));
				Возврат;
			КонецЕсли;
			Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
				ЗнРеквизит = ИскомыйОбъект[Реквизит.Имя];
				Если ЗначениеЗаполнено(ЗнРеквизит) И (Не ОписаниеТиповДок.СодержитТип(ТипЗнч(ЗнРеквизит))) Тогда
					Строка = СписокСсылокИспользует.Добавить();
					Строка.Объект = ЗнРеквизит;
					Строка.Тип = ТипЗнч(ЗнРеквизит);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		ИспользуетОбъекты.Очистить();
		ИспользуетОбъекты.Загрузить(СписокСсылокИспользует);
	КонецЕсли;
КонецПроцедуры // НайтиВходящие()

&НаСервере
Процедура НайтиИсходящие(ИскомыйОбъект)
	
	Если ЗначениеЗаполнено(ИскомыйОбъект) Тогда
		ДеревоЗнач = РеквизитФормыВЗначение("ИспользуетсяВОбъектах",Тип("ДеревоЗначений"));
		ДеревоЗнач.Строки.Очистить();
		МассивПоиска=Новый Массив(1);
		МассивПоиска[0]=ИскомыйОбъект;
		ТаблицаСсылок = НайтиПоСсылкам(МассивПоиска);
		Для Каждого ТекСсылка Из ТаблицаСсылок Цикл
			Если ДеревоЗнач.Строки.Найти(Строка(ТекСсылка.Метаданные)) = Неопределено Тогда
				Если ТекСсылка.Данные = Неопределено Тогда
					Если ДеревоЗнач.Строки.Найти("Константы") = Неопределено Тогда
						КорневаяСтрока = ДеревоЗнач.Строки.Добавить();
						КорневаяСтрока.Ссылка = "Константы";
					Иначе
						КорневаяСтрока = ДеревоЗнач.Строки.Найти("Константы");
					КонецЕсли;
					
					НоваяСтрока = КорневаяСтрока.Строки.Добавить();
					НоваяСтрока.Ссылка            = Строка(ТекСсылка.Метаданные);
					КорневаяСтрока.ИндексКартинки = УправлениеДиалогомСервер.ПолучитьИндексКартинкиВидаОбъектаМетаданных(ТекСсылка.Метаданные);
					НоваяСтрока.ИндексКартинки    = КорневаяСтрока.ИндексКартинки;
					НоваяСтрока.ПолноеИмяОбъекта  = ТекСсылка.Метаданные.ПолноеИмя();
					Продолжить;
				КонецЕсли;
				
				КорневаяСтрока = ДеревоЗнач.Строки.Добавить();
				КорневаяСтрока.Ссылка = Строка(ТекСсылка.Метаданные);
				
				НоваяСтрока = КорневаяСтрока.Строки.Добавить();
				НоваяСтрока.Ссылка            = Строка(ТекСсылка.Данные);
				НоваяСтрока.Объект            = ТекСсылка.Данные;
				КорневаяСтрока.ИндексКартинки = УправлениеДиалогомСервер.ПолучитьИндексКартинкиВидаОбъектаМетаданных(ТекСсылка.Метаданные);
				НоваяСтрока.ИндексКартинки    = КорневаяСтрока.ИндексКартинки;
				НоваяСтрока.ПолноеИмяОбъекта  = ТекСсылка.Метаданные.ПолноеИмя();
			Иначе
				НайденнаяСтрока = ДеревоЗнач.Строки.Найти(Строка(ТекСсылка.Метаданные));
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				НоваяСтрока.Ссылка           = Строка(ТекСсылка.Данные);
				НоваяСтрока.Объект           = ТекСсылка.Данные;
				НоваяСтрока.ИндексКартинки   = УправлениеДиалогомСервер.ПолучитьИндексКартинкиВидаОбъектаМетаданных(ТекСсылка.Метаданные);
				НоваяСтрока.ПолноеИмяОбъекта = ТекСсылка.Метаданные.ПолноеИмя();
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЗнач.Строки.Сортировать("ИндексКартинки Возр, Ссылка Возр");
		ЗначениеВРеквизитФормы(ДеревоЗнач,"ИспользуетсяВОбъектах");
		
		КоллекцияЭлементовДерева=ИспользуетсяВОбъектах.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			КоличествоПоз = Строка.ПолучитьЭлементы().Количество();
			Строка.Ссылка = Строка.Ссылка + " (" + КоличествоПоз + ")";
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // НайтиИсходящие()

&НаСервере
Функция ЗаписьВОбъектыДляЗамены()
	МенеджерЗаписи = РегистрыСведений.ОбъектыДляЗамены.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Автор = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();

	МенеджерЗаписи.ПредставлениеЗаменяемого = Строка(Найти); 
	МенеджерЗаписи.ПредставлениеЗаменителя  = Строка(Заменить);
	
	МенеджерЗаписи.ИдентификаторЗаменяемого = ОбщегоНазначения.ЗначениеВСтрокуXML(Найти);
	МенеджерЗаписи.ИдентификаторЗаменителя  = ОбщегоНазначения.ЗначениеВСтрокуXML(Заменить);
	
	МенеджерЗаписи.Записать();
	
	КлючЗаписи = РегистрыСведений.ОбъектыДляЗамены.СоздатьКлючЗаписи(Новый Структура("ИдентификаторЗаменяемого", МенеджерЗаписи.ИдентификаторЗаменяемого));
	Возврат КлючЗаписи;
КонецФункции

&НаСервере
Процедура ТипНайти()
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(ТипЗнч(Найти));
	Элементы.ИскомоеЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Заменить = Элементы.ИскомоеЗначение.ОграничениеТипа.ПривестиЗначение(Заменить);
КонецПроцедуры

&НаСервере
Функция ПроверитьОтметкиВыбранныхОбъектов()
	ДеревоЗнач = РеквизитФормыВЗначение("ИспользуетсяВОбъектах",Тип("ДеревоЗначений"));
	ОтборСтрока = Новый Структура;
	ОтборСтрока.Вставить("Флажок", 1);
	Если ДеревоЗнач.Строки.НайтиСтроки(ОтборСтрока, Истина).Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЗаменитьОбъекты()
	ПравильныйЭлемент = Заменить;
	ДеревоЗначений = РеквизитФормыВЗначение("ИспользуетсяВОбъектах",Тип("ДеревоЗначений"));
	ОтборСтрока = Новый Структура;
	ОтборСтрока.Вставить("Флажок", 1);
	МассивОбъектовДляЗамены = ДеревоЗначений.Строки.НайтиСтроки(ОтборСтрока, Истина);
	
	СтруктураПараметры = Новый Структура;
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		СтруктураПараметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		СтруктураПараметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);
	КонецЦикла;
	СтруктураПараметры.Вставить("Объект", Неопределено);
	
	Результат = Истина;
	Для Каждого ТекЭлемент Из МассивОбъектовДляЗамены Цикл
		Если ТекЭлемент.Родитель <> Неопределено Тогда
			Ссылка = Найти;
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ТекЭлемент.ПолноеИмяОбъекта);
			
			Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
				
				Результат = ПоискЗаменаЗначенийСервер.ИзменитьДокумент(ТекЭлемент.Объект.ПолучитьОбъект(),Ссылка, ПравильныйЭлемент, ОтключитьКонтрольКорректностиПриЗаписи) И Результат;
				
			ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
				
				Результат = ПоискЗаменаЗначенийСервер.ИзменитьСправочник(ТекЭлемент.Объект.ПолучитьОбъект(),Ссылка, ПравильныйЭлемент, ОтключитьКонтрольКорректностиПриЗаписи) И Результат;
				
			ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
				
				Результат = ПоискЗаменаЗначенийСервер.ИзменитьКонстанту(ОбъектМетаданных, ПравильныйЭлемент) И Результат;
			
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
				
				Результат = ПоискЗаменаЗначенийСервер.ИзменитьДругиеОбъекты(ТекЭлемент.Объект.ПолучитьОбъект(),Ссылка,ПравильныйЭлемент, ОтключитьКонтрольКорректностиПриЗаписи) И Результат;
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда	
				
				Результат = ПоискЗаменаЗначенийСервер.ИзменитьРегистрСведений(ОбъектМетаданных,ТекЭлемент.Объект, Ссылка, ПравильныйЭлемент) И Результат;
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Ссылки типа %1 не заменяются.'"),ТекЭлемент.Ссылка)
				);
			КонецЕсли;
		КонецЕсли;
		Если Не Результат Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Объект %1 не удалось записать.'"), ТекЭлемент.Ссылка)
			);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПометитьНаУдаление Тогда
		ОбъектДляУдаления = Ссылка.ПолучитьОбъект();
		Если (ОбъектДляУдаления <> Неопределено) И (Не Ссылка.ПометкаУдаления) Тогда
			ОбъектДляУдаления = Ссылка.ПолучитьОбъект();
			Предопределенный = Ложь;
			Если ОбщегоНазначения.ЭтоСправочник(ОбъектДляУдаления.Метаданные()) Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектДляУдаления.Метаданные())
				Или ОбщегоНазначения.ЭтоПланСчетов(ОбъектДляУдаления.Метаданные()) Или ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектДляУдаления.Метаданные()) Тогда
				Если ОбъектДляУдаления.Предопределенный Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru='Предопределенный элемент невозможно пометить на удаление.'")
					);
					Предопределенный = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Не Предопределенный Тогда
				ОбъектДляУдаления.УстановитьПометкуУдаления(Истина);
				ОбъектДляУдаления.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НайтиИсходящие(Найти);
	НайтиВходящие(Найти);
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПоXML()
	КлючЗаписи = Элементы.Отложенные.ТекущаяСтрока;
	НаборЗаписей = РегистрыСведений.ОбъектыДляЗамены.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗаменяемого.Установить(КлючЗаписи.ИдентификаторЗаменяемого);
	НаборЗаписей.Прочитать();
	СтруктураСсылок = Новый Структура;
	
	СтруктураСсылок.Вставить("Искать", ОбщегоНазначения.ЗначениеИзСтрокиXML(НаборЗаписей[0].ИдентификаторЗаменяемого));
	СтруктураСсылок.Вставить("Заменить", ОбщегоНазначения.ЗначениеИзСтрокиXML(НаборЗаписей[0].ИдентификаторЗаменителя));
	Возврат СтруктураСсылок;
	
КонецФункции

&НаСервере
Процедура ДеревоПомеченныеНаУдаление()
	ДеревоЗнач = РеквизитФормыВЗначение("ПомеченныеНаУдаление",Тип("ДеревоЗначений"));
	Если ДеревоЗнач.Строки.Количество() = 0 Тогда
		ДеревоЗнач.Строки.Очистить();
		ПомеченныеОбъекты = НайтиПомеченныеНаУдаление();
		Для Каждого ПомеченныйЭлемент Из ПомеченныеОбъекты  Цикл
			
			Если ДеревоЗнач.Строки.Найти(Строка(ПомеченныйЭлемент.Метаданные())) = Неопределено Тогда
				КорневаяСтрока = ДеревоЗнач.Строки.Добавить();
				КорневаяСтрока.Объект = Строка(ПомеченныйЭлемент.Метаданные());
				
				НоваяСтрока = КорневаяСтрока.Строки.Добавить();
				НоваяСтрока.Объект            = ПомеченныйЭлемент;
				КорневаяСтрока.ИндексКартинки = УправлениеДиалогомСервер.ПолучитьИндексКартинкиВидаОбъектаМетаданных(ПомеченныйЭлемент.Метаданные());
				НоваяСтрока.ИндексКартинки    = КорневаяСтрока.ИндексКартинки;
			Иначе
				НайденнаяСтрока = ДеревоЗнач.Строки.Найти(Строка(ПомеченныйЭлемент.Метаданные()));
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				НоваяСтрока.Объект         = ПомеченныйЭлемент;
				НоваяСтрока.ИндексКартинки = УправлениеДиалогомСервер.ПолучитьИндексКартинкиВидаОбъектаМетаданных(ПомеченныйЭлемент.Метаданные());
			КонецЕсли;
			
		КонецЦикла;
		
		ДеревоЗнач.Строки.Сортировать("ИндексКартинки Возр, Объект Возр");
		ЗначениеВРеквизитФормы(ДеревоЗнач,"ПомеченныеНаУдаление");
		КоллекцияЭлементовДерева=ПомеченныеНаУдаление.ПолучитьЭлементы();
		
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			КоличествоПоз = Строка.ПолучитьЭлементы().Количество();
			Строка.Объект = Строка.Объект + " (" + КоличествоПоз + ")";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ДополнительныеПараметры = "Отложить" И РезультатОповещения = КодВозвратаДиалога.Да Тогда
		КлючЗаписи = ЗаписьВОбъектыДляЗамены();
		ОповеститьОбИзменении(КлючЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)
	ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
		ТекЭлемент.Флажок = ЗначениеПометки;
		УстановкаФлажков(ТекЭлемент, ТекЭлемент.Флажок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция УстановленоДляВсех(ЭлементКоллекции)
	СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент.Флажок <> ЭлементКоллекции.Флажок Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ИспользуетсяВОбъектахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекОбъект = Элемент.ТекущиеДанные.Объект;
	Если ТекОбъект <> Неопределено Тогда
		ПоказатьЗначение(,ТекОбъект);
	Иначе
		
		Если Элементы.ИспользуетсяВОбъектах.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.ИспользуетсяВОбъектах.Свернуть(Элемент.ТекущаяСтрока);
		Иначе
			Элементы.ИспользуетсяВОбъектах.Развернуть(Элемент.ТекущаяСтрока, Истина);
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекОбъект = Элемент.ТекущиеДанные.Объект;
	Если ТекОбъект <> Неопределено Тогда
		ПоказатьЗначение(,ТекОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаПомеченныеНаУдаление" Тогда
		ДеревоПомеченныеНаУдаление();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

