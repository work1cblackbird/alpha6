///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Тестирование и исправление БД"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Подготовим основные структуры.
	ЗаполнитьТабличныеРеквизиты();
	
	СформироватьДерево();
	
	ПерепроводитьПриОшибках = ПроверитьБалансныеПроводки;
	
КонецПроцедуры //ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при двойном щелчке мыши (нажатии Enter) в ячейке таблицы "Дерево метаданных".
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока      - Ссылка       - Значение выбранной строки.
//  Поле                 - ПолеФормы    - Активное поле.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ДеревоМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество()<=0 Тогда
		СтандартнаяОбработка=Ложь;
		ОткрытьФорму("" + ТекущиеДанные.ПолноеИмя + ".ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры //ДеревоМетаданныхВыбор()

// Обработчик события возникающего на клиенте при изменении данных в дереве выполняемый с задержкой.
//
&НаКлиенте
Процедура Подключаемый_ОбработатьВыборВДереве()
	
	Для Каждого Строка Из ОбъектыМетаданных Цикл
		ОтметитьВыбранныеОбъекты(Обработка.ДеревоМетаданных, Строка.Объект, Строка.Пометка);
		ОтметитьВыбранныеОбъекты(Обработка.ДеревоМетаданныхПоВидам, Строка.Объект, Строка.Пометка);
	КонецЦикла;
	
КонецПроцедуры // Подключаемый_ОбработатьВыборВДереве()

// Обработчик события возникающего на клиенте при изменении данных таблицы "Дерево метаданных".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДеревоМетаданныхПриИзменении(Элемент)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоВидамОбъекта Тогда
		Дерево = Элементы.ДеревоМетаданныхПоВидам;
	Иначе
		Дерево = Элементы.ДеревоМетаданных;
	КонецЕсли;
	
	ТекущиеДанные = Дерево.ТекущиеДанные;
	
	// Проверка на наличие вложенных строк.
	Если ТекущиеДанные.ПолучитьЭлементы().Количество()=0 Тогда
		СтрокаОбъекты = ОбъектыМетаданных.НайтиСтроки(Новый Структура("Объект", ТекущиеДанные.Метаданные));
		Если СтрокаОбъекты.Количество()>0 Тогда
			СтрокаОбъекты[0].Пометка = ТекущиеДанные.Пометка;
		КонецЕсли;
	Иначе
		ОтметитьЭлементыГруппы(ТекущиеДанные,ТекущиеДанные.Пометка);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработатьВыборВДереве", 0.1, ИСТИНА);
	
КонецПроцедуры //ДеревоМетаданныхПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Проверить балансные проводки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПроверитьБалансныеПроводкиПриИзменении(Элемент)
	
	Если НЕ ПроверитьБалансныеПроводки Тогда
		ПерепроводитьПриОшибках = Ложь;
	КонецЕсли;
	
КонецПроцедуры //ПроверитьБалансныеПроводкиПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Перепроводить при ошибках".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПерепроводитьПриОшибкахПриИзменении(Элемент)
	
	Если ПерепроводитьПриОшибках Тогда
		ПроверитьБалансныеПроводки = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПерепроводитьПриОшибкахПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "Установка флажки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ИспользованиеУстановитьФлажки(Кнопка)
	
	Для Каждого СтрокаМетаданных Из Обработка.ДеревоМетаданныхПоВидам.ПолучитьЭлементы() Цикл
		СтрокаМетаданных.Пометка = 1;
		ОтметитьЭлементыГруппы(СтрокаМетаданных,СтрокаМетаданных.Пометка);
	КонецЦикла;
	
	Для Каждого СтрокаМетаданных Из Обработка.ДеревоМетаданных.ПолучитьЭлементы() Цикл
		СтрокаМетаданных.Пометка = 1;
		ОтметитьЭлементыГруппы(СтрокаМетаданных,СтрокаМетаданных.Пометка);
	КонецЦикла;
	
КонецПроцедуры // ИспользованиеУстановитьФлажки()

// Обработчик события возникающего на клиенте при выполнении команды "Снять флажки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ИспользованиеСнятьФлажки(Кнопка)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоВидамОбъекта Тогда
		Дерево = Обработка.ДеревоМетаданныхПоВидам;
	Иначе
		Дерево = Обработка.ДеревоМетаданных;
	КонецЕсли;
	
	Для Каждого СтрокаМетаданных Из Дерево.ПолучитьЭлементы() Цикл
		СтрокаМетаданных.Пометка = 0;
		ОтметитьЭлементыГруппы(СтрокаМетаданных,СтрокаМетаданных.Пометка);
	КонецЦикла;
	
КонецПроцедуры // ИспользованиеСнятьФлажки()

// Обработчик события возникающего на клиенте при выполнении команды "Выполнить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	ВыполнитьПроверкуНаСервере();
	
КонецПроцедуры //КомандаВыполнить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет все основные табличные реквизиты обработки по метаданным
// сохраняет их для ускорения последующего открытия.
//
&НаСервере
Процедура ЗаполнитьТабличныеРеквизиты()
	
	// Заполним список видов объектов метаданных.
	ЗаполнитьВидыМетаданных();
	
	// Заполним таблицу подсистем
	ЗаполнитьТаблицуПодсистем();
	
	// Заполним основную таблицу всех объектов конфигурации.
	ЗаполнитьТаблицуОбъектов();
	
КонецПроцедуры // ЗаполнитьТаблицуОбъектов()

// Заполнение таблицы значений "ВидыМетаданных" списком всех визуальных
// видов метаданных в том порядке, в котором они выводятся на закладках.
//
&НаСервере
Процедура ЗаполнитьВидыМетаданных()
	
	// Заполним таблицу видов документов.
	Строка=ВидыМетаданных.Добавить();
	Строка.Идентификатор="Справочники";
	Строка.Представление="Справочники";
	Строка=ВидыМетаданных.Добавить();
	Строка.Идентификатор="ПланыВидовХарактеристик";
	Строка.Представление= НСтр("ru = 'Планы видов характеристик'");
	Строка=ВидыМетаданных.Добавить();
	Строка.Идентификатор="ПланыВидовРасчета";
	Строка.Представление=НСтр("ru = 'Планы видов расчета'");
	Строка=ВидыМетаданных.Добавить();
	Строка.Идентификатор="Документы";
	Строка.Представление="Документы";
	
КонецПроцедуры // ЗаполнитьВидыМетаданных()

// Подготовка списка подсистем (как визуального так и общего).
//
&НаСервере
Процедура ЗаполнитьТаблицуПодсистем()
	
	// Создадим структуру для заливки дерева подсистем
	Обработка.ТаблицаПодсистем.Очистить();
	
	// Заполним список подсистем.
	Строка = Обработка.ТаблицаПодсистем.Добавить();
	Строка.ИмяПодсистемы = Метаданные.Имя;
	Строка.Подсистема = Метаданные;
	Строка.ПолныйПуть = "|"+ Метаданные.Имя+"|*";
	СформироватьСписокПодсистем (Метаданные,0,"|"+ Метаданные.Имя);
	
	// Заполним список подсистем.
	Строки = Обработка.ДеревоПодсистем.ПолучитьЭлементы();
	Строка = Строки.Добавить();
	Строка.Подсистема = "<ВСЕ ПОДСИСТЕМЫ>";
	СформироватьВеткуПодсистем(Метаданные,Строка);
	
КонецПроцедуры // ЗаполнитьТаблицуПодсистем()

// Формирует список всех подсистем, с указанием полного пути.
// рекурсивно вызывает сама себя, добавляя подсистемы от КорневойПодсистемы указанного уровня.
//
&НаСервере
Процедура СформироватьСписокПодсистем(КорневаяПодсистема, Уровень = 0, Знач ПолныйПуть = "")
	
	МаксУровень = ?(Уровень>МаксУровень,Уровень,МаксУровень);
	Для Каждого Подсистема Из КорневаяПодсистема.Подсистемы Цикл
		Строка = Обработка.ТаблицаПодсистем.Добавить();
		Строка.ИмяПодсистемы = Подсистема.Имя;
		Строка.Подсистема    = Подсистема;
		стрПуть = ПолныйПуть+"|"+ Подсистема.Имя;
		Строка.ПолныйПуть = стрПуть + "|*";
		СформироватьСписокПодсистем(Подсистема, Уровень+1, стрПуть);
	КонецЦикла; 
	
КонецПроцедуры // СформироватьСписокПодсистем()

// Формирует список всех подсистем, с указанием полного пути.
// рекурсивно вызывает сама себя, добавляя подсистемы от КорневойПодсистемы указанного уровня.
//
&НаСервере
Процедура СформироватьВеткуПодсистем(КорневаяПодсистема, КорневаяВетка)
	
	Для Каждого Подсистема Из КорневаяПодсистема.Подсистемы Цикл
		Строка = КорневаяВетка.ПолучитьЭлементы().Добавить();
		Строка.Подсистема = Подсистема;
		СформироватьВеткуПодсистем(Подсистема, Строка);
	КонецЦикла; 
	
КонецПроцедуры // СформироватьВеткуПодсистем()

// Формирует список объектов конфигурации, с указанием принадлежности к подсистемам.
//
&НаСервере
Процедура ЗаполнитьТаблицуОбъектов()
	
	// Переберем все метаданные, заполняя таблицу.
	Для Каждого Строка Из ВидыМетаданных Цикл
		Идентификатор = Строка.Идентификатор;
		Для Каждого Объект Из Метаданные[Идентификатор] Цикл
			Строка = ОбъектыМетаданных.Добавить();
			Строка.Подсистемы = ПодсистемыЧерезРазделитель(Объект);
			Строка.ПолноеИмя = Объект.ПолноеИмя();
			Строка.ВидОбъекта = Идентификатор;
			Строка.Имя = Объект.Имя;
			Строка.Объект = Объект;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОбъектов()

// Возвращает полные пути к подсистемам в виде строки с разделителями.
//
// Параметры:
//  Объект - ссылка на ОбъектМетаданных.
//
&НаСервере
Функция ПодсистемыЧерезРазделитель(Объект)
	
	стрПодсистемы = "";
	ОбъектПодсистемы = Новый Массив;
	ПолучитьПодсистемыОбъекта(Объект,ОбъектПодсистемы,Метаданные.Подсистемы);
	Для Каждого Подсистема Из ОбъектПодсистемы Цикл
		стрПолныйПуть = "";
		РезультатПоиска = Обработка.ТаблицаПодсистем.НайтиСтроки(Новый Структура("ИмяПодсистемы", Подсистема.Имя));
		Строка = ?(РезультатПоиска.Количество()>0, РезультатПоиска[0], Неопределено);
		стрПолныйПуть = стрПолныйПуть+?(Строка = Неопределено,"|"+Метаданные.Имя+"|*",Строка.ПолныйПуть);
		стрПодсистемы = стрПодсистемы +","+ стрПолныйПуть;
	КонецЦикла;
	Возврат стрПодсистемы;
	
КонецФункции // ПодсистемыЧерезРазделитель()

// Получение подсистем объекта метаданных.
//
// Параметры
//  Объект  - ОбъектМетаданных - Объект метаданных, для которого требуется получить его подсистемы
//  ПодсистемыОбъекта  - Массив - Массив, содержащий список подсистем объекта метаданных
//  КорневаяПодсистема  - ОбъектМетаданных - Корневая подсистема, относительно которой перебираются вложенные.
//
&НаСервере
Процедура ПолучитьПодсистемыОбъекта(Объект, ПодсистемыОбъекта, КорневаяПодсистема)
	
	Для каждого Подсистема Из КорневаяПодсистема Цикл
		Если Подсистема.Состав.Содержит(Объект) Тогда
			ПодсистемыОбъекта.Добавить(Подсистема);
		КонецЕсли;
		Если Подсистема.Подсистемы.Количество()>0 Тогда
			ПолучитьПодсистемыОбъекта(Объект,ПодсистемыОбъекта,Подсистема.Подсистемы);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ПолучитьПодсистемыОбъекта() 

// Процедура формирования дерева объекта.
&НаСервере
Процедура СформироватьДерево()
	
	Обработка.ДеревоМетаданных.ПолучитьЭлементы().Очистить();
	тбДанные = ОбъектыМетаданных;
	ПараметрФильтра = "|";
	ТекущаяПодсистема = Метаданные;
	ТекущаяВетвь = Обработка.ДеревоМетаданных;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоПодсистемам Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяПодсистемы", ТекущаяПодсистема.Имя);
		тбДанныеДерево = Обработка.ТаблицаПодсистем.НайтиСтроки(Отбор);
		Для Каждого Корень Из тбДанныеДерево Цикл
			ЗаполнитьДерево(Метаданные, ТекущаяВетвь, тбДанные);
		КонецЦикла; 
		ПараметрФильтра = "|*";
	КонецЕсли;
	
	ФильтрПоПодсистеме = "|"+ТекущаяПодсистема.Имя+ПараметрФильтра;
	Обработка.ДеревоМетаданныхПоВидам.ПолучитьЭлементы().Очистить();
	ТекущаяВетвь = Обработка.ДеревоМетаданныхПоВидам;
	НовыйКорень = ТекущаяВетвь;
	Для Каждого СтрокаДанные Из тбДанные Цикл
		ВидОбъектаПланыВидовРасчета = ?(СтрокаДанные.ВидОбъекта = "ПланыВидовРасчета", 13, 9);
		ВидОбъектаДокументы = ?(СтрокаДанные.ВидОбъекта = "Документы", 7, ВидОбъектаПланыВидовРасчета);
		Ветвь = Неопределено;
		Для каждого Строка Из ТекущаяВетвь.ПолучитьЭлементы() Цикл
			Если Строка.Метаданные = СтрокаДанные.ВидОбъекта Тогда
				Ветвь = Строка;
			КонецЕсли;
		КонецЦикла;
		
		Если Ветвь = Неопределено Тогда
			НовыйКорень = ТекущаяВетвь.ПолучитьЭлементы().Добавить();
			НовыйКорень.Метаданные = СтрокаДанные.ВидОбъекта;
			НовыйКорень.ПолноеИмя = "ВидОбъекта";
			НовыйКорень.Картинка = ?(СтрокаДанные.ВидОбъекта = "Справочники", 3, ВидОбъектаДокументы);;
		КонецЕсли;
		
		НоваяВетвь = НовыйКорень.ПолучитьЭлементы().Добавить();
		НоваяВетвь.Пометка = СтрокаДанные.Пометка;
		НоваяВетвь.Метаданные = СтрокаДанные.Объект;
		НоваяВетвь.ПолноеИмя = СтрокаДанные.ПолноеИмя;
		НоваяВетвь.Картинка = ?(СтрокаДанные.ВидОбъекта = "Справочники",3,ВидОбъектаДокументы);
	КонецЦикла;
	
КонецПроцедуры // СформироватьДерево()

// Рекурсивное формирование дерева объектов подсистемы.
// формирует ветвь КорневойПодсистемы по тбДанные в визуальном дереве.
&НаСервере
Процедура ЗаполнитьДерево(Знач КорневаяПодсистема, Знач Корень, тбДанные)
	
	// Для всех подсистем в составе текущей.
	Для Каждого Подсистема Из КорневаяПодсистема.Подсистемы Цикл
		
		// Добавление корневой строки подсистемы.
		ТекущаяВетвь = Корень.ПолучитьЭлементы().Добавить();
		ТекущаяВетвь.Метаданные = Подсистема;
		ТекущаяВетвь.Пометка = 0;
		ТекущаяВетвь.Картинка = 1;
		
		// Рекурсивный вызов дальнейшей развертки.
		ЗаполнитьДерево(Подсистема, ТекущаяВетвь, тбДанные);
		ФильтрПоПодсистеме = "|"+Подсистема.Имя + "|*";
		НовыйКорень = ТекущаяВетвь;
		
		// Вывод всех объектов данных для текущего нового корня.
		Для Каждого СтрокаДанные Из тбДанные Цикл
			Если СтрНайти(СтрокаДанные.Подсистемы, ФильтрПоПодсистеме)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Обходим ошибку с одинаковыми именами подсистем.
			ПодсистемаНайдена=Ложь;
			ОбъектПодсистемы = Новый Массив;
			ПолучитьПодсистемыОбъекта(Метаданные.НайтиПоПолномуИмени(СтрокаДанные.ПолноеИмя),
											ОбъектПодсистемы,Метаданные.Подсистемы);
			Для Каждого ПодсистемаОбъекта Из ОбъектПодсистемы Цикл
				Если ПодсистемаОбъекта = Подсистема Тогда
					ПодсистемаНайдена = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПодсистемаНайдена Тогда Продолжить; КонецЕсли;
			
			НоваяВетвь = НовыйКорень.ПолучитьЭлементы().Добавить();
			НоваяВетвь.Метаданные = СтрокаДанные.Объект;
			НоваяВетвь.ПолноеИмя = СтрокаДанные.ПолноеИмя; 
			ВидОбъектаПланыВидовРасчета = ?(СтрокаДанные.ВидОбъекта = "ПланыВидовРасчета", 13, 9);
			ВидОбъектаДокументы = ?(СтрокаДанные.ВидОбъекта = "Документы", 7, ВидОбъектаПланыВидовРасчета);
			НоваяВетвь.Картинка = ?(СтрокаДанные.ВидОбъекта = "Справочники", 3, ВидОбъектаДокументы);
		КонецЦикла;
		Если ТекущаяВетвь.ПолучитьЭлементы().Количество() = 0 Тогда
			Корень.ПолучитьЭлементы().Удалить(ТекущаяВетвь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДерево()

// Устанавливает пометки в родительских строках дерева в соответствии с пометкой.
// подчиненной строки.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  Пометка      - Число.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОтметитьГруппы(Знач СтрокаДерева,Пометка)
	
	ПометкаВерх = Пометка;
	Родитель = ?(ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева"),СтрокаДерева.ПолучитьРодителя(), СтрокаДерева.Родитель);
	Если НЕ Родитель = Неопределено Тогда
		ПометкаИзменялась = Ложь;
		
		Наследники = ?(ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева"), Родитель.ПолучитьЭлементы(), СтрокаДерева.Строки);
		
		Для Каждого Строка Из Наследники Цикл
			Если НЕ Строка.Пометка = Пометка Тогда
				ПометкаИзменялась = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПометкаИзменялась Тогда
			Родитель.Пометка = 2;
			ПометкаВерх = 2;
		Иначе
			Родитель.Пометка = Пометка;
		КонецЕсли;
		
		ОтметитьГруппы(Родитель,ПометкаВерх);
		
	КонецЕсли;
	
КонецПроцедуры // ОтметитьГруппы()

// Устанавливает пометки по подчиненных строках дерева в соответствии с пометкой.
// строки - владельца.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  Пометка      - Число.
//
&НаКлиенте
Процедура ОтметитьЭлементыГруппы(СтрокаДерева,Пометка)
	
	Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если Строка.ПолучитьЭлементы().Количество()=0 Тогда
			
			Строка.Пометка = Пометка;
			СтрокаОбъекты = ОбъектыМетаданных.НайтиСтроки(Новый Структура("Объект", Строка.Метаданные));
			Если СтрокаОбъекты.Количество()>0 Тогда
				СтрокаОбъекты[0].Пометка = Пометка;
			КонецЕсли;
			
		Иначе
			
			Строка.Пометка = Пометка;
			ОтметитьЭлементыГруппы(Строка,Пометка);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОтметитьЭлементыГруппы()

// Рекурсивное формирование пометок использования.
//
&НаКлиенте
Процедура ОтметитьВыбранныеОбъекты(СтрокаДерева, ИмяМетаданных, Пометка)
	
	Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если Строка.ПолучитьЭлементы().Количество()=0 Тогда
			Если Строка.Метаданные = ИмяМетаданных Тогда
				Строка.Пометка = Пометка;
				ОтметитьГруппы(Строка,Пометка);
			КонецЕсли;
		Иначе
			ОтметитьВыбранныеОбъекты(Строка,ИмяМетаданных,Пометка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОтметитьВыбранныеОбъекты()

&НаСервере
Функция ПолучитьТекстЗапроса(ВыводитьОтчетыПоПодразделениям)
	
	// Текст отборов таблиц запросов
	// Параметры виртуальных таблиц.
	ТекстПараметрыДоходыИРасходы = "";
	ТекстПараметрыДенежныеСредстваКомпании = "";
	ТекстПараметрыКассыККМ = "";
	ТекстПараметрыВзаиморасчетыКомпании = "";
	ТекстПараметрыПартииТоваровКомпании = "";
	ТекстПараметрыПартииТоваровОтданные = "";
	ТекстПараметрыРеализованныеТовары = "";
	ТекстПараметрыПрочиеАктивыВЭксплуатации = "";
	// ++ АЛЬФА-АВТО
	ТекстПараметрыТоварыВПроизводстве = "";
	ТекстПараметрыОстаткиАвтомобилей = "";
	ТекстПараметрыКомплектацияАвтомобилей = "";
	ТекстПараметрыАвтомобилиОтданные = "";
	ТекстПараметрыРеализованныеАвтомобили = "";
	ТекстПараметрыРасчетыСКонтрагентами = "";
	// -- АЛЬФА-АВТО
	
	// Отборы физических таблиц
	ТекстОтборыКассыККМ = "";
	ТекстОтборыВзаиморасчетыКомпании = "";
	ТекстОтборыПартииТоваровКомпании = "";
	ТекстОтборыПартииТоваровОтданные = "";
	ТекстОтборыРеализованныеТовары = "";
	ТекстОтборыПрочиеАктивыВЭксплуатации = "";
	// ++ АЛЬФА-АВТО
	ТекстОтборыТоварыВПроизводстве = "";
	ТекстОтборыОстаткиАвтомобилей = "";
	ТекстОтборыКомплектацияАвтомобилей = "";
	ТекстОтборыАвтомобилиОтданные = "";
	ТекстОтборыРеализованныеАвтомобили = "";
	ТекстОтборыРасчетыСКонтрагентами = "";
	// -- АЛЬФА-АВТО
	
	Если ВыводитьОтчетыПоПодразделениям Тогда
		// Параметры виртуальных таблиц.
		ТекстПараметрыДоходыИРасходы = "ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыДенежныеСредстваКомпании = "СтруктурнаяЕдиница.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыКассыККМ = " И КассаККМ.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыВзаиморасчетыКомпании = "ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыПартииТоваровКомпании = " И СкладКомпании.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыПартииТоваровОтданные = "ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыРеализованныеТовары = "ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыПрочиеАктивыВЭксплуатации = "ПодразделениеКомпании = &ВыбПодразделение";
		// ++ АЛЬФА-АВТО
		ТекстПараметрыТоварыВПроизводстве =" И Цех.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыОстаткиАвтомобилей = " И СкладКомпании.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыКомплектацияАвтомобилей =  " И СкладКомпании.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыАвтомобилиОтданные = "ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыРеализованныеАвтомобили = "ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстПараметрыРасчетыСКонтрагентами = "ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		// -- АЛЬФА-АВТО
		// Отборы физических таблиц.
		ТекстОтборыДоходыИРасходы = "	И ДоходыИРасходы.Регистратор = &ВыбДокумент
		| И ДоходыИРасходы.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыДенежныеСредстваКомпании = "	И ДенежныеСредстваКомпании.Регистратор = &ВыбДокумент
		| И ДенежныеСредстваКомпании.СтруктурнаяЕдиница.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыКассыККМ = "	И КассыККМ.Регистратор = &ВыбДокумент
		| И КассыККМ.КассаККМ.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыВзаиморасчетыКомпании = "	И ВзаиморасчетыКомпании.Регистратор = &ВыбДокумент
		| И ВзаиморасчетыКомпании.ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыПартииТоваровКомпании = "	И ПартииТоваровКомпании.Регистратор = &ВыбДокумент
		| И ПартииТоваровКомпании.СкладКомпании.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыПартииТоваровОтданные = "	И ПартииТоваровОтданныеКомпании.Регистратор = &ВыбДокумент
		| И ПартииТоваровОтданныеКомпании.ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыРеализованныеТовары = "	И РеализованныеТоварыКомпании.Регистратор = &ВыбДокумент
		| И РеализованныеТоварыКомпании.ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыПрочиеАктивыВЭксплуатации = "	И ПрочиеАктивыВЭксплуатацииКомпании.Регистратор = &ВыбДокумент
		| И ПрочиеАктивыВЭксплуатацииКомпании.ПодразделениеКомпании = &ВыбПодразделение";
		// ++ АЛЬФА-АВТО
		ТекстОтборыТоварыВПроизводстве = "	И ТоварыВПроизводстве.Регистратор = &ВыбДокумент
		| И ТоварыВПроизводстве.Цех.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыОстаткиАвтомобилей = "	И ОстаткиАвтомобилей.Регистратор = &ВыбДокумент
		| И ОстаткиАвтомобилей.СкладКомпании.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыКомплектацияАвтомобилей = "	И КомплектацияАвтомобилей.Регистратор = &ВыбДокумент
		| И КомплектацияАвтомобилей.СкладКомпании.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыАвтомобилиОтданные = "	И АвтомобилиОтданные.Регистратор = &ВыбДокумент
		| И АвтомобилиОтданные.ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыРеализованныеАвтомобили = "	И РеализованныеАвтомобили.Регистратор = &ВыбДокумент
		| И РеализованныеАвтомобили.ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		ТекстОтборыРасчетыСКонтрагентами = "	И ВзаиморасчетыКомпании.Регистратор = &ВыбДокумент
		| И ВзаиморасчетыКомпании.ДоговорВзаиморасчетов.ПодразделениеКомпании = &ВыбПодразделение";
		// -- АЛЬФА-АВТО
	Иначе
		// Отборы физических таблиц
		ТекстОтборыДоходыИРасходы = "	И ДоходыИРасходы.Регистратор = &ВыбДокумент";
		ТекстОтборыДенежныеСредстваКомпании = "	И ДенежныеСредстваКомпании.Регистратор = &ВыбДокумент";
		ТекстОтборыКассыККМ = "	И КассыККМ.Регистратор = &ВыбДокумент";
		ТекстОтборыВзаиморасчетыКомпании = "	И ВзаиморасчетыКомпании.Регистратор = &ВыбДокумент";
		ТекстОтборыПартииТоваровКомпании = "	И ПартииТоваровКомпании.Регистратор = &ВыбДокумент";
		ТекстОтборыПартииТоваровОтданные = "	И ПартииТоваровОтданныеКомпании.Регистратор = &ВыбДокумент";
		ТекстОтборыРеализованныеТовары = "	И РеализованныеТоварыКомпании.Регистратор = &ВыбДокумент";
		ТекстОтборыПрочиеАктивыВЭксплуатации = "	И ПрочиеАктивыВЭксплуатацииКомпании.Регистратор = &ВыбДокумент";
		// ++ АЛЬФА-АВТО
		ТекстОтборыТоварыВПроизводстве = "	И ТоварыВПроизводстве.Регистратор = &ВыбДокумент";
		ТекстОтборыОстаткиАвтомобилей = "	И ОстаткиАвтомобилей.Регистратор = &ВыбДокумент";
		ТекстОтборыКомплектацияАвтомобилей = "	И КомплектацияАвтомобилей.Регистратор = &ВыбДокумент";
		ТекстОтборыАвтомобилиОтданные = "	И АвтомобилиОтданные.Регистратор = &ВыбДокумент";
		ТекстОтборыРеализованныеАвтомобили = "	И РеализованныеАвтомобили.Регистратор = &ВыбДокумент";
		ТекстОтборыРасчетыСКонтрагентами = "	И РасчетыСКонтрагентами.Регистратор = &ВыбДокумент";
		// -- АЛЬФА-АВТО

	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.УчетныйБлок КАК УчетныйБлок,
	|	ВложенныйЗапрос.ТипОбъектаУчета КАК ТипОбъектаУчета,
	|	ВложенныйЗапрос.ОбъектУчета КАК ОбъектУчета,
	|	ВложенныйЗапрос.ОбъектУчета.Наименование КАК ПредставлениеОбъекта,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.АктивНачОст КАК АктивНачОст,
	|	ВложенныйЗапрос.ПассивНачОст КАК ПассивНачОст,
	|	ВложенныйЗапрос.Приход КАК Приход,
	|	ВложенныйЗапрос.Расход КАК Расход,
	|	ВложенныйЗапрос.АктивКонОст КАК АктивКонОст,
	|	ВложенныйЗапрос.ПассивКонОст КАК ПассивКонОст
	|
    |ИЗ
	|	(";
	// Доходы и расходы - Считаем что этот регистр есть всегда.
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ &ДоходыИРасходы КАК УчетныйБлок,
	|	ЕСТЬNULL(ДоходыИРасходы.СтатьяДоходовИРасходов.ВидДоходаИРасхода, ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИРасходов.ПустаяСсылка)) КАК ТипОбъектаУчета,
	|	ДоходыИРасходы.СтатьяДоходовИРасходов КАК ОбъектУчета,
	|	ДоходыИРасходы.Регистратор КАК Регистратор,
	|	ДоходыИРасходы.Период КАК Период,
	|	ДоходыИРасходы.РасходУпрНачальныйОстаток КАК АктивНачОст,
	|	ДоходыИРасходы.ДоходУпрНачальныйОстаток КАК ПассивНачОст,
	|	ДоходыИРасходы.РасходУпрОборот КАК Приход,
	|	ДоходыИРасходы.ДоходУпрОборот КАК Расход,
	|	ДоходыИРасходы.РасходУпрКонечныйОстаток КАК АктивКонОст,
	|	ДоходыИРасходы.ДоходУпрКонечныйОстаток КАК ПассивКонОст
	|ИЗ 
	|(ВЫБРАТЬ
	|	ДоходыИРасходы.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|	ДоходыИРасходы.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДоходыИРасходы.Регистратор КАК Регистратор,
	|	ДоходыИРасходы.Период КАК Период,
	|	0 КАК РасходУпрНачальныйОстаток,
	|	0 КАК ДоходУпрНачальныйОстаток,
	|	0 КАК РасходУпрКонечныйОстаток,
	|	0 КАК ДоходУпрКонечныйОстаток,
	|	ВЫБОР
	|		КОГДА ДоходыИРасходы.ВидДвижения = &ВидДвижения
	|			ТОГДА ДоходыИРасходы.РасходУпр
	|		ИНАЧЕ -ДоходыИРасходы.РасходУпр
	|	КОНЕЦ КАК РасходУпрОборот,
	|	ВЫБОР
	|		КОГДА ДоходыИРасходы.ВидДвижения = &ВидДвижения
	|			ТОГДА ДоходыИРасходы.ДоходУпр
	|		ИНАЧЕ -ДоходыИРасходы.ДоходУпр
	|	КОНЕЦ КАК ДоходУпрОборот
	|ИЗ
	|	РегистрНакопления.ДоходыИРасходы КАК ДоходыИРасходы
	|ГДЕ
	|	ДоходыИРасходы.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыДоходыИРасходы+") КАК ДоходыИРасходы";
		
	// Денежные средства
	Если Метаданные.РегистрыНакопления.Найти("ДенежныеСредстваКомпании")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ДенежныеСредства,
		|	ВЫБОР КОГДА ДенежныеСредства.СтруктурнаяЕдиница ССЫЛКА Справочник.КассыКомпании ТОГДА &Касса
		|		  КОГДА ДенежныеСредства.СтруктурнаяЕдиница ССЫЛКА Справочник.БанковскиеСчета ТОГДА &Банк
		|		  КОГДА ДенежныеСредства.СтруктурнаяЕдиница ССЫЛКА Справочник.ЦенныеБумаги ТОГДА &ЦенныеБумаги
		|		  ИНАЧЕ &Пусто КОНЕЦ,
		|	ДенежныеСредства.СтруктурнаяЕдиница,
		|	ДенежныеСредства.Регистратор КАК Регистратор,
		|	ДенежныеСредства.Период,
		|	ДенежныеСредства.СуммаУпрНачальныйОстаток,
		|	0,
		|	ДенежныеСредства.СуммаУпрПриход,
		|	ДенежныеСредства.СуммаУпрРасход,
		|	ДенежныеСредства.СуммаУпрКонечныйОстаток,
		|	0
		|ИЗ 
		|	(ВЫБРАТЬ
		|	ДенежныеСредстваКомпании.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ДенежныеСредстваКомпании.Регистратор КАК Регистратор,
		|	ДенежныеСредстваКомпании.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ДенежныеСредстваКомпании.ВидДвижения = &ВидДвижения
		|			ТОГДА ДенежныеСредстваКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА ДенежныеСредстваКомпании.ВидДвижения <> &ВидДвижения
		|			ТОГДА ДенежныеСредстваКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКомпании КАК ДенежныеСредстваКомпании
		|ГДЕ
		|	ДенежныеСредстваКомпании.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыДенежныеСредстваКомпании+"
		|) КАК ДенежныеСредства";
	КонецЕсли; 
	
	// КассыККМ
	Если Метаданные.РегистрыНакопления.Найти("КассыККМ")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ДенежныеСредстваВКассахККМ,
		|	&КассыККМ,
		|	РегистрНакопленияКассыККМ.КассаККМ,
		|	РегистрНакопленияКассыККМ.Регистратор КАК Регистратор,
		|	РегистрНакопленияКассыККМ.Период,
		|	ЕСТЬNULL(РегистрНакопленияКассыККМ.СуммаУпрНачальныйОстаток, 0),
		|	0,
		|	ЕСТЬNULL(РегистрНакопленияКассыККМ.СуммаУпрПриход, 0),
		|	ЕСТЬNULL(РегистрНакопленияКассыККМ.СуммаУпрРасход, 0),
		|	ЕСТЬNULL(РегистрНакопленияКассыККМ.СуммаУпрКонечныйОстаток, 0),
		|	0
		|ИЗ (ВЫБРАТЬ
		|	КассыККМ.КассаККМ КАК КассаККМ,
		|	КассыККМ.Регистратор КАК Регистратор,
		|	КассыККМ.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА КассыККМ.ВидДвижения = &ВидДвижения
		|			ТОГДА КассыККМ.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА КассыККМ.ВидДвижения <> &ВидДвижения
		|			ТОГДА КассыККМ.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И КассыККМ.ТипОплаты В(&СписокТиповОплаты)"+ТекстОтборыКассыККМ+") КАК РегистрНакопленияКассыККМ";
	КонецЕсли;

	// ВзаиморасчетыКомпании
	Если Метаданные.РегистрыНакопления.Найти("ВзаиморасчетыКомпании")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ВзаиморасчетыСКонтрагентами,
		|	Взаиморасчеты.Контрагент.ВидКонтрагента,
		|	Взаиморасчеты.Контрагент,
		|	Взаиморасчеты.Регистратор КАК Регистратор,
		|	Взаиморасчеты.Период,
		|	ВЫБОР КОГДА Взаиморасчеты.СуммаУпрНачальныйОстаток > 0 ТОГДА Взаиморасчеты.СуммаУпрНачальныйОстаток
		|		  ИНАЧЕ 0 КОНЕЦ,
		|	ВЫБОР КОГДА Взаиморасчеты.СуммаУпрНачальныйОстаток < 0 ТОГДА -(Взаиморасчеты.СуммаУпрНачальныйОстаток)
		|		  ИНАЧЕ 0 КОНЕЦ,
		|	Взаиморасчеты.СуммаУпрПриход,
		|	Взаиморасчеты.СуммаУпрРасход,
		|	ВЫБОР КОГДА Взаиморасчеты.СуммаУпрКонечныйОстаток > 0 ТОГДА Взаиморасчеты.СуммаУпрКонечныйОстаток
		|		  ИНАЧЕ 0 КОНЕЦ,
		|	ВЫБОР КОГДА Взаиморасчеты.СуммаУпрКонечныйОстаток < 0 ТОГДА -(Взаиморасчеты.СуммаУпрКонечныйОстаток)
		|		  ИНАЧЕ 0 КОНЕЦ
		|ИЗ (ВЫБРАТЬ
		|	ВзаиморасчетыКомпании.Контрагент КАК Контрагент,
		|	ВзаиморасчетыКомпании.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ВзаиморасчетыКомпании.Регистратор КАК Регистратор,
		|	ВзаиморасчетыКомпании.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыКомпании.ВидДвижения = &ВидДвижения
		|			ТОГДА ВзаиморасчетыКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыКомпании.ВидДвижения <> &ВидДвижения
		|			ТОГДА ВзаиморасчетыКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
		|ГДЕ
		|	ВзаиморасчетыКомпании.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыВзаиморасчетыКомпании+") КАК Взаиморасчеты";
	КонецЕсли;
	
	// ПартииТоваровКомпании
	Если Метаданные.РегистрыНакопления.Найти("ПартииТоваровКомпании")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
	    |
		|ОБЪЕДИНИТЬ ВСЕ
	    |
		|ВЫБРАТЬ &ОстаткиТоваров,
		|	ПартииТоваров.Номенклатура.ТипНоменклатуры,
		|	ПартииТоваров.Номенклатура,
		|	ПартииТоваров.Регистратор КАК Регистратор,
		|	ПартииТоваров.Период,
		|	ПартииТоваров.СуммаУпрНачальныйОстаток,
		|	0,
		|	ПартииТоваров.СуммаУпрПриход,
		|	ПартииТоваров.СуммаУпрРасход,
		|	ПартииТоваров.СуммаУпрКонечныйОстаток,
		|	0
		|ИЗ 
		|(ВЫБРАТЬ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпании.СкладКомпании КАК СкладКомпании,
		|	ПартииТоваровКомпании.Регистратор КАК Регистратор,
		|	ПартииТоваровКомпании.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпании.ВидДвижения = &ВидДвижения
		|			ТОГДА ПартииТоваровКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпании.ВидДвижения <> &ВидДвижения
		|			ТОГДА ПартииТоваровКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ПартииТоваровКомпании.СтатусПартии = &ТоварКупленный"+ТекстОтборыПартииТоваровКомпании+") КАК ПартииТоваров";
	КонецЕсли;
	
	// ПартииТоваровОтданные
	Если Метаданные.РегистрыНакопления.Найти("ПартииТоваровОтданные")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ОстаткиТоваровОтданных,
		|	ПартииТоваровОтданные.Номенклатура.ТипНоменклатуры,
		|	ПартииТоваровОтданные.Номенклатура,
		|	ПартииТоваровОтданные.Регистратор КАК Регистратор,
		|	ПартииТоваровОтданные.Период,
		|	ПартииТоваровОтданные.СуммаСебестоимостиУпрНачальныйОстаток,
		|	0,
		|	ПартииТоваровОтданные.СуммаСебестоимостиУпрПриход,
		|	ПартииТоваровОтданные.СуммаСебестоимостиУпрРасход,
		|	ПартииТоваровОтданные.СуммаСебестоимостиУпрКонечныйОстаток,
		|	0
		|ИЗ (ВЫБРАТЬ
		|	ПартииТоваровОтданныеКомпании.Номенклатура КАК Номенклатура,
		|	ПартииТоваровОтданныеКомпании.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ПартииТоваровОтданныеКомпании.Регистратор КАК Регистратор,
		|	ПартииТоваровОтданныеКомпании.Период КАК Период,
		|	0 КАК СуммаСебестоимостиУпрНачальныйОстаток,
		|	0 КАК СуммаСебестоимостиУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ПартииТоваровОтданныеКомпании.ВидДвижения = &ВидДвижения
		|			ТОГДА ПартииТоваровОтданныеКомпании.СуммаСебестоимостиУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаСебестоимостиУпрПриход,
		|	ВЫБОР
		|		КОГДА ПартииТоваровОтданныеКомпании.ВидДвижения <> &ВидДвижения
		|			ТОГДА ПартииТоваровОтданныеКомпании.СуммаСебестоимостиУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаСебестоимостиУпрРасход
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданныеКомпании
		|ГДЕ
		|	ПартииТоваровОтданныеКомпании.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыПартииТоваровОтданные+") КАК ПартииТоваровОтданные";
	КонецЕсли;
	
	// РеализованныеТовары
	Если Метаданные.РегистрыНакопления.Найти("РеализованныеТовары")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &РеализованныеТовары,
		|	РеализованныеТовары.Номенклатура.ТипНоменклатуры,
		|	РеализованныеТовары.Номенклатура,
		|	РеализованныеТовары.Регистратор КАК Регистратор,
		|	РеализованныеТовары.Период,
		|	0,
		|	РеализованныеТовары.СуммаУпрНачальныйОстаток,
		|	РеализованныеТовары.СуммаУпрРасход,
		|	РеализованныеТовары.СуммаУпрПриход,
		|	0,
		|	РеализованныеТовары.СуммаУпрКонечныйОстаток
		|ИЗ (ВЫБРАТЬ
		|	РеализованныеТоварыКомпании.Номенклатура КАК Номенклатура,
		|	РеализованныеТоварыКомпании.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	РеализованныеТоварыКомпании.Регистратор КАК Регистратор,
		|	РеализованныеТоварыКомпании.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА РеализованныеТоварыКомпании.ВидДвижения = &ВидДвижения
		|			ТОГДА РеализованныеТоварыКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА РеализованныеТоварыКомпании.ВидДвижения <> &ВидДвижения
		|			ТОГДА РеализованныеТоварыКомпании.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТоварыКомпании
		|ГДЕ
		|	РеализованныеТоварыКомпании.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыРеализованныеТовары+") КАК РеализованныеТовары";
	КонецЕсли;
	
	// Прочие активы в эксплуатации.
	Если Метаданные.РегистрыНакопления.Найти("ПрочиеАктивыВЭксплуатации")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ПрочиеАктивыВЭксплуатации,
		|	ПрочиеАктивыВЭксплуатации.ПрочийАктив.ВидПрочегоАктива,
		|	ПрочиеАктивыВЭксплуатации.ПрочийАктив,
		|	ПрочиеАктивыВЭксплуатации.Регистратор КАК Регистратор,
		|	ПрочиеАктивыВЭксплуатации.Период,
		|	ПрочиеАктивыВЭксплуатации.ОстаточнаяСтоимостьУпрНачальныйОстаток,
		|	0,
		|	ПрочиеАктивыВЭксплуатации.ОстаточнаяСтоимостьУпрПриход,
		|	ПрочиеАктивыВЭксплуатации.ОстаточнаяСтоимостьУпрРасход,
		|	ПрочиеАктивыВЭксплуатации.ОстаточнаяСтоимостьУпрКонечныйОстаток,
		|	0
		|ИЗ (ВЫБРАТЬ
		|	ПрочиеАктивыВЭксплуатацииКомпании.ПрочийАктив КАК ПрочийАктив,
		|	ПрочиеАктивыВЭксплуатацииКомпании.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ПрочиеАктивыВЭксплуатацииКомпании.Регистратор КАК Регистратор,
		|	ПрочиеАктивыВЭксплуатацииКомпании.Период КАК Период,
		|	0 КАК ОстаточнаяСтоимостьУпрНачальныйОстаток,
		|	0 КАК ОстаточнаяСтоимостьУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ПрочиеАктивыВЭксплуатацииКомпании.ВидДвижения = &ВидДвижения
		|			ТОГДА ПрочиеАктивыВЭксплуатацииКомпании.БалансоваяСтоимостьУпр-ПрочиеАктивыВЭксплуатацииКомпании.СуммаАмортизацииУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстаточнаяСтоимостьУпрПриход,
		|	ВЫБОР
		|		КОГДА ПрочиеАктивыВЭксплуатацииКомпании.ВидДвижения <> &ВидДвижения
		|			ТОГДА ПрочиеАктивыВЭксплуатацииКомпании.БалансоваяСтоимостьУпр-ПрочиеАктивыВЭксплуатацииКомпании.СуммаАмортизацииУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстаточнаяСтоимостьУпрРасход
		|ИЗ
		|	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатацииКомпании
		|ГДЕ
		|	ПрочиеАктивыВЭксплуатацииКомпании.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыПрочиеАктивыВЭксплуатации+") КАК ПрочиеАктивыВЭксплуатации";
	КонецЕсли;
	
	// ++ АЛЬФА-АВТО
	// ТоварыВПроизводстве
	Если Метаданные.РегистрыНакопления.Найти("ТоварыВПроизводстве")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ТоварыВПроизводстве,
		|	ТоварыВПроизводстве.Номенклатура.ТипНоменклатуры,
		|	ТоварыВПроизводстве.Номенклатура,
		|	ТоварыВПроизводстве.Регистратор КАК Регистратор,
		|	ТоварыВПроизводстве.Период,
		|	ТоварыВПроизводстве.СуммаУпрНачальныйОстаток,
		|	0,
		|	ТоварыВПроизводстве.СуммаУпрПриход,
		|	ТоварыВПроизводстве.СуммаУпрРасход,
		|	ТоварыВПроизводстве.СуммаУпрКонечныйОстаток,
		|	0
		|ИЗ 
		|(ВЫБРАТЬ
		|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
		|	ТоварыВПроизводстве.Цех КАК СкладКомпании,
		|	ТоварыВПроизводстве.Регистратор КАК Регистратор,
		|	ТоварыВПроизводстве.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ТоварыВПроизводстве.ВидДвижения = &ВидДвижения
		|			ТОГДА ТоварыВПроизводстве.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА ТоварыВПроизводстве.ВидДвижения <> &ВидДвижения
		|			ТОГДА ТоварыВПроизводстве.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ТоварыВПроизводстве.СтатусПартии = &ТоварКупленный"+ТекстОтборыТоварыВПроизводстве+") КАК ТоварыВПроизводстве";
	КонецЕсли;
	
	// ОстаткиАвтомобилей
	Если Метаданные.РегистрыНакопления.Найти("ОстаткиАвтомобилей")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ОстаткиАвтомобилей,
		|	ОстаткиАвтомобилей.Автомобиль.Модель,
		|	ОстаткиАвтомобилей.Автомобиль,
		|	ОстаткиАвтомобилей.Регистратор КАК Регистратор,
		|	ОстаткиАвтомобилей.Период,
		|	ОстаткиАвтомобилей.СуммаУпрНачальныйОстаток,
		|	0,
		|	ОстаткиАвтомобилей.СуммаУпрПриход,
		|	ОстаткиАвтомобилей.СуммаУпрРасход,
		|	ОстаткиАвтомобилей.СуммаУпрКонечныйОстаток,
		|	0
		|ИЗ 
		|(ВЫБРАТЬ
		|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
		|	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании,
		|	ОстаткиАвтомобилей.Регистратор КАК Регистратор,
		|	ОстаткиАвтомобилей.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ОстаткиАвтомобилей.ВидДвижения = &ВидДвижения
		|			ТОГДА ОстаткиАвтомобилей.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА ОстаткиАвтомобилей.ВидДвижения <> &ВидДвижения
		|			ТОГДА ОстаткиАвтомобилей.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ОстаткиАвтомобилей.СтатусПартии = &ТоварКупленный"+ТекстОтборыОстаткиАвтомобилей+") КАК ОстаткиАвтомобилей";
	КонецЕсли;
	
	// КомплектацияАвтомобилей
	Если Метаданные.РегистрыНакопления.Найти("КомплектацияАвтомобилей")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &КомплектацияАвтомобилей,
		|	КомплектацияАвтомобилей.Автомобиль.Модель,
		|	КомплектацияАвтомобилей.Автомобиль,
		|	КомплектацияАвтомобилей.Регистратор КАК Регистратор,
		|	КомплектацияАвтомобилей.Период,
		|	КомплектацияАвтомобилей.СуммаУпрНачальныйОстаток,
		|	0,
		|	КомплектацияАвтомобилей.СуммаУпрПриход,
		|	КомплектацияАвтомобилей.СуммаУпрРасход,
		|	КомплектацияАвтомобилей.СуммаУпрКонечныйОстаток,
		|	0
		|ИЗ 
		|(ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
		|	КомплектацияАвтомобилей.СкладКомпании КАК СкладКомпании,
		|	КомплектацияАвтомобилей.Регистратор КАК Регистратор,
		|	КомплектацияАвтомобилей.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА КомплектацияАвтомобилей.ВидДвижения = &ВидДвижения
		|			ТОГДА КомплектацияАвтомобилей.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА КомплектацияАвтомобилей.ВидДвижения <> &ВидДвижения
		|			ТОГДА КомплектацияАвтомобилей.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И КомплектацияАвтомобилей.СтатусПартии = &ТоварКупленный"+ТекстОтборыКомплектацияАвтомобилей+") КАК КомплектацияАвтомобилей";
	КонецЕсли;
	
	// АвтомобилиОтданные
	Если Метаданные.РегистрыНакопления.Найти("АвтомобилиОтданные")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &ОстаткиАвтомобилейОтданных,
		|	АвтомобилиОтданные.Автомобиль.Модель,
		|	АвтомобилиОтданные.Автомобиль,
		|	АвтомобилиОтданные.Регистратор КАК Регистратор,
		|	АвтомобилиОтданные.Период,
		|	АвтомобилиОтданные.СуммаСебестоимостиУпрНачальныйОстаток,
		|	0,
		|	АвтомобилиОтданные.СуммаСебестоимостиУпрПриход,
		|	АвтомобилиОтданные.СуммаСебестоимостиУпрРасход,
		|	АвтомобилиОтданные.СуммаСебестоимостиУпрКонечныйОстаток,
		|	0
		|ИЗ (ВЫБРАТЬ
		|	АвтомобилиОтданные.Автомобиль КАК Автомобиль,
		|	АвтомобилиОтданные.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	АвтомобилиОтданные.Регистратор КАК Регистратор,
		|	АвтомобилиОтданные.Период КАК Период,
		|	0 КАК СуммаСебестоимостиУпрНачальныйОстаток,
		|	0 КАК СуммаСебестоимостиУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА АвтомобилиОтданные.ВидДвижения = &ВидДвижения
		|			ТОГДА АвтомобилиОтданные.СуммаСебестоимостиУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаСебестоимостиУпрПриход,
		|	ВЫБОР
		|		КОГДА АвтомобилиОтданные.ВидДвижения <> &ВидДвижения
		|			ТОГДА АвтомобилиОтданные.СуммаСебестоимостиУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаСебестоимостиУпрРасход
		|ИЗ
		|	РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
		|ГДЕ
		|	АвтомобилиОтданные.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыАвтомобилиОтданные+") КАК АвтомобилиОтданные";
	КонецЕсли;
	
	// РеализованныеАвтомобили
	Если Метаданные.РегистрыНакопления.Найти("РеализованныеАвтомобили")<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &РеализованныеАвтомобили,
		|	РеализованныеАвтомобили.Автомобиль.Модель,
		|	РеализованныеАвтомобили.Автомобиль,
		|	РеализованныеАвтомобили.Регистратор КАК Регистратор,
		|	РеализованныеАвтомобили.Период,
		|	0,
		|	РеализованныеАвтомобили.СуммаУпрНачальныйОстаток,
		|	РеализованныеАвтомобили.СуммаУпрРасход,
		|	РеализованныеАвтомобили.СуммаУпрПриход,
		|	0,
		|	РеализованныеАвтомобили.СуммаУпрКонечныйОстаток
		|ИЗ (ВЫБРАТЬ
		|	РеализованныеАвтомобили.Автомобиль КАК Автомобиль,
		|	РеализованныеАвтомобили.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	РеализованныеАвтомобили.Регистратор КАК Регистратор,
		|	РеализованныеАвтомобили.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА РеализованныеАвтомобили.ВидДвижения = &ВидДвижения
		|			ТОГДА РеализованныеАвтомобили.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА РеализованныеАвтомобили.ВидДвижения <> &ВидДвижения
		|			ТОГДА РеализованныеАвтомобили.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.РеализованныеАвтомобили КАК РеализованныеАвтомобили
		|ГДЕ
		|	РеализованныеАвтомобили.Период МЕЖДУ &ДатаНачала И &ДатаКонца"+ТекстОтборыРеализованныеАвтомобили+") КАК РеализованныеАвтомобили";
	КонецЕсли; 
	
	// РасчетыСКонтрагентами
	Если Метаданные.РегистрыНакопления.Найти("РасчетыСКонтрагентами") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ &РасчетыСКонтрагентами,
		|	РасчетыСКонтрагентами.Контрагент.ВидКонтрагента,
		|	РасчетыСКонтрагентами.Контрагент,
		|	РасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|	РасчетыСКонтрагентами.Период,
		|	ВЫБОР КОГДА РасчетыСКонтрагентами.СуммаУпрНачальныйОстаток > 0 ТОГДА РасчетыСКонтрагентами.СуммаУпрНачальныйОстаток
		|		  ИНАЧЕ 0 КОНЕЦ,
		|	ВЫБОР КОГДА РасчетыСКонтрагентами.СуммаУпрНачальныйОстаток < 0 ТОГДА -(РасчетыСКонтрагентами.СуммаУпрНачальныйОстаток)
		|		  ИНАЧЕ 0 КОНЕЦ,
		|	РасчетыСКонтрагентами.СуммаУпрПриход,
		|	РасчетыСКонтрагентами.СуммаУпрРасход,
		|	ВЫБОР КОГДА РасчетыСКонтрагентами.СуммаУпрКонечныйОстаток > 0 ТОГДА РасчетыСКонтрагентами.СуммаУпрКонечныйОстаток
		|		  ИНАЧЕ 0 КОНЕЦ,
		|	ВЫБОР КОГДА РасчетыСКонтрагентами.СуммаУпрКонечныйОстаток < 0 ТОГДА -(РасчетыСКонтрагентами.СуммаУпрКонечныйОстаток)
		|		  ИНАЧЕ 0 КОНЕЦ
		|ИЗ (ВЫБРАТЬ
		|	РасчетыСКонтрагентами.Контрагент КАК Контрагент,
		|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	РасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|	РасчетыСКонтрагентами.Период КАК Период,
		|	0 КАК СуммаУпрНачальныйОстаток,
		|	0 КАК СуммаУпрКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА РасчетыСКонтрагентами.ВидДвижения = &ВидДвижения
		|			ТОГДА РасчетыСКонтрагентами.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрПриход,
		|	ВЫБОР
		|		КОГДА РасчетыСКонтрагентами.ВидДвижения <> &ВидДвижения
		|			ТОГДА РасчетыСКонтрагентами.СуммаУпр
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУпрРасход
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
		|ГДЕ
		|	РасчетыСКонтрагентами.Период МЕЖДУ &ДатаНачала И &ДатаКонца"
		+ ТекстОтборыРасчетыСКонтрагентами + ") КАК РасчетыСКонтрагентами";
	КонецЕсли;
	// -- АЛЬФА-АВТО
	
	ТекстЗапроса = ТекстЗапроса + " ) КАК ВложенныйЗапрос 
	|ГДЕ
	|	ВложенныйЗапрос.АктивНачОст <> 0
	|	ИЛИ ВложенныйЗапрос.ПассивНачОст <> 0
	|	ИЛИ ВложенныйЗапрос.Приход <> 0
	|	ИЛИ ВложенныйЗапрос.Расход <> 0
	|	ИЛИ ВложенныйЗапрос.АктивКонОст <> 0
	|	ИЛИ ВложенныйЗапрос.ПассивКонОст <> 0
	|
	|УПОРЯДОЧИТЬ ПО УчетныйБлок, ТипОбъектаУчета, ОбъектУчета.Наименование, Период
	|
	|ИТОГИ
	|	СУММА(АктивНачОст),
	|	СУММА(ПассивНачОст),
	|	СУММА(Приход),
	|	СУММА(Расход),
	|	МАКСИМУМ(Период),
	|	СУММА(АктивКонОст),
	|	СУММА(ПассивКонОст)
	|ПО
	|	ОБЩИЕ,
	|	УчетныйБлок, ТипОбъектаУчета, ОбъектУчета, Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

&НаСервере
Функция ПолучитьСписокПодразделений(ВыбРегистратор, ДатаНачала, ДатаКонца)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ДатаКонца));
	Запрос.УстановитьПараметр("Ссылка", ВыбРегистратор);
	Запрос.УстановитьПараметр("Статья", Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияКомпании.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
	|ГДЕ
	|	ПодразделенияКомпании.Балансовое = ИСТИНА
	|	И ПодразделенияКомпании.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ДоходыИРасходыОбороты.ПодразделениеКомпании КАК ПодразделениеКомпании
	|			ИЗ
	|				РегистрНакопления.ДоходыИРасходы.Обороты(&НачПериода, &КонПериода, Регистратор, СтатьяДоходовИРасходов = &Статья) КАК ДоходыИРасходыОбороты
	|			ГДЕ
	|				ДоходыИРасходыОбороты.Регистратор = &Ссылка)";
	
	СписокПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат СписокПодразделений;
КонецФункции

&НаСервере
Функция ПроверитьБалансноеУравнение(Документ, РазницаБаланса, ПараметрПриход = Неопределено,
	ПараметрРасход = Неопределено)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ)) Тогда
		// в параметре "Документ" передан документ
		ВыбРегистратор = Документ;
		ДатаНачала = Документ.Дата;
		ДатаКонца = Документ.Дата;
		
		ВыводитьОтчетыПоПодразделениям = Ложь;
		
		Если БалансВедетсяПоПодразделениям(ТекущаяДатаСеанса()) Тогда
			СписокПодразделений = ПолучитьСписокПодразделений(ВыбРегистратор, ДатаНачала, ДатаКонца);
			Если СписокПодразделений.Количество() = 0 Тогда
				ВыводитьОтчетыПоПодразделениям = Ложь;
			Иначе
				ВыводитьОтчетыПоПодразделениям = Истина;
			КонецЕсли;
		КонецЕсли;
		
		флБалансСходится = Истина;
		ТекстЗапроса = ПолучитьТекстЗапроса(ВыводитьОтчетыПоПодразделениям);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаКонца",КонецДня(ДатаКонца));
		Запрос.УстановитьПараметр("ТоварКупленный",Перечисления.СтатусыПартий.ТоварКупленный);
		Запрос.УстановитьПараметр("ВыбДокумент",ВыбРегистратор);
		Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ДатаНачалаИсключая",Новый Граница(НачалоДня(ДатаНачала), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ДатаНачалаВключая",Новый Граница(НачалоДня(ДатаНачала), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаКонцаИсключая",Новый Граница(КонецДня(ДатаКонца), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ДатаКонцаВключая",Новый Граница(КонецДня(ДатаКонца), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДоходыИРасходы", НСтр("ru = 'Доходы И расходы'"));
		Запрос.УстановитьПараметр("ПрочиеАктивыВЭксплуатации", НСтр("ru = 'Прочие активы В эксплуатации'"));
		Запрос.УстановитьПараметр("РеализованныеТовары", НСтр("ru = 'Реализованные товары'"));
		Запрос.УстановитьПараметр("ОстаткиТоваровОтданных", НСтр("ru = 'Остатки товаров отданных'"));
		Запрос.УстановитьПараметр("ОстаткиТоваров", НСтр("ru = 'Остатки товаров'"));
		Запрос.УстановитьПараметр("ВзаиморасчетыСКонтрагентами", НСтр("ru = 'Взаиморасчеты с контрагентами'"));
		Запрос.УстановитьПараметр("ДенежныеСредстваВКассахККМ", НСтр("ru = 'Денежные средства В кассах ККМ'"));
		Запрос.УстановитьПараметр("ДенежныеСредства", НСтр("ru = 'Денежные средства'"));
		Запрос.УстановитьПараметр("Пусто", НСтр("ru = ''"));
		Запрос.УстановитьПараметр("Касса", НСтр("ru = 'Касса'"));
		Запрос.УстановитьПараметр("Банк", НСтр("ru = 'Банк'"));
		Запрос.УстановитьПараметр("ЦенныеБумаги", НСтр("ru = 'Ценные бумаги'"));
		Запрос.УстановитьПараметр("КассыККМ", НСтр("ru = 'Кассы ККМ'"));
		Запрос.УстановитьПараметр("ТоварыВПроизводстве", НСтр("ru = 'Товары в производстве'"));
		Запрос.УстановитьПараметр("РеализованныеАвтомобили", НСтр("ru = 'Реализованные автомобили'"));
		Запрос.УстановитьПараметр("ОстаткиАвтомобилейОтданных", НСтр("ru = 'Остатки автомобилей отданных'"));
		Запрос.УстановитьПараметр("КомплектацияАвтомобилей", НСтр("ru = 'Комплектация автомобилей'"));
		Запрос.УстановитьПараметр("ОстаткиАвтомобилей", НСтр("ru = 'Остатки автомобилей'"));
		Запрос.УстановитьПараметр("РасчетыСКонтрагентами", НСтр("ru = 'Расчеты с контрагентами'"));
		
		СписокТиповОплаты = Новый Массив();
		СписокТиповОплаты.Добавить(Перечисления.ТипыОплатыККТ.Электронно);
		СписокТиповОплаты.Добавить(Перечисления.ТипыОплатыККТ.Наличные);
		Запрос.УстановитьПараметр("СписокТиповОплаты", СписокТиповОплаты);
		
		Если ВыводитьОтчетыПоПодразделениям Тогда
			
			Для Каждого БалПодразделение Из СписокПодразделений Цикл
				
				Запрос.УстановитьПараметр("ВыбПодразделение",БалПодразделение);
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); Выборка.Следующий();
				РазницаБаланса = Выборка.Приход - Выборка.Расход;
				Если НЕ РазницаБаланса=0 Тогда
			   		флБалансСходится = Ложь;
				КонецЕсли;

			КонецЦикла;
		Иначе
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат флБалансСходится;
			КонецЕсли;
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); Выборка.Следующий();
			РазницаБаланса = Выборка.Приход - Выборка.Расход;
			Если НЕ РазницаБаланса=0 Тогда
		   		флБалансСходится = Ложь;
			КонецЕсли;

		КонецЕсли;
		
	Иначе
		// в параметре "Документ" переданы движения документа
		флБалансСходится = Истина;
		Движения = Документ;
		
		ПриходИтог = 0;
		РасходИтог = 0;
		
		Для Каждого Движение Из Движения Цикл
			РегистрИмя = Движение.Метаданные().Имя;
			
			ТаблицаДвижений = Движение.Выгрузить();
			Если ТаблицаДвижений.Количество() = 0 Тогда
				// если набор записей пустой - продолжаем, обрабатывать нечего
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекСтр Из ТаблицаДвижений Цикл
				Если РегистрИмя = "ДоходыИРасходы" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.РасходУпр;
						РасходИтог = РасходИтог + ТекСтр.ДоходУпр;
					Иначе
						ПриходИтог = ПриходИтог - ТекСтр.РасходУпр;
						РасходИтог = РасходИтог - ТекСтр.ДоходУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "ДенежныеСредстваКомпании" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "КассыККМ" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "ВзаиморасчетыКомпании" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "ПартииТоваровКомпании" Тогда
					Если ТекСтр.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный Тогда
						Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
							ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
						Иначе
							РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "ПартииТоваровОтданные" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаСебестоимостиУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаСебестоимостиУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "РеализованныеТовары" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "ПрочиеАктивыВЭксплуатации" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.БалансоваяСтоимостьУпр - ТекСтр.СуммаАмортизацииУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.БалансоваяСтоимостьУпр - ТекСтр.СуммаАмортизацииУпр;
					КонецЕсли;
				// ++ АЛЬФА-АВТО
				ИначеЕсли РегистрИмя = "ОстаткиАвтомобилей" Тогда
					Если ТекСтр.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный Тогда
						Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
							ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
						Иначе
							РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "КомплектацияАвтомобилей" Тогда
					Если ТекСтр.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный Тогда
						Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
							ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
						Иначе
							РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "АвтомобилиОтданные" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаСебестоимостиУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаСебестоимостиУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "РеализованныеАвтомобили" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
					КонецЕсли;
				ИначеЕсли РегистрИмя = "РасчетыСКонтрагентами" Тогда
					Если ТекСтр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПриходИтог = ПриходИтог + ТекСтр.СуммаУпр;
					Иначе
						РасходИтог = РасходИтог + ТекСтр.СуммаУпр;
					КонецЕсли;
				// -- АЛЬФА-АВТО
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		ПараметрПриход = ПриходИтог;
		ПараметрРасход = РасходИтог;
		// посчитаем разницу баланса
		РазницаБаланса = Окр(ПриходИтог - РасходИтог, 2);
		Если НЕ РазницаБаланса = 0 Тогда
		   флБалансСходится = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат флБалансСходится;
КонецФункции  // ПроверитьБалансноеУравнение()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет текста, шрифт
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Ложь;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоМетаданных");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Обработка.ДеревоМетаданных.Картинка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,0,128));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", WindowsШрифты.ШрифтДиалоговИМеню);
	
КонецПроцедуры

#Область ПроцедурыИФункцииТестированиеИИсправленияБд

// Выполняет проверку всех выбранных объектов.
// СписокОбъектов - список имен объектов при программном вызове обработки.
&НаСервере
Процедура ВыполнитьПроверкуНаСервере()
	
	Если ВыполнятьМонопольно Тогда
		
		// Установка монопольного режима
		Попытка 
			УстановитьМонопольныйРежим(Истина);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не удалось установить монопольный режим.
				|Ошибка разделенного доступа к базе данных'"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ТаблицаОшибок.Очистить();
	
	ТаблицаОбработки = ОбъектыМетаданных.НайтиСтроки(Новый Структура("Пометка",1));
	КолОбъектов = ТаблицаОбработки.Количество();
	
	// Задвоенные/затроенные... движения товарных регистр.
	Если ЗадвоенныеДвижения Тогда
		НайтиЗадвоенныеДвижения();
	КонецЕсли;

	// Расхождения товарных движений
	Если РасхождениеТоварныхРегистров Тогда
		НайтиРасхожденияТоварныхРегистров();
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаОбработки Цикл
		
		Объект = Неопределено;
		
		// Если объект - документ
		Если Строка.ВидОбъекта = "Документы" Тогда
			
			ВидТекущегоОбъекта = Строка.ВидОбъекта;
			ТипТекущегоОбъекта = Строка.Объект;
			Выборка = Документы[Строка.Имя].Выбрать(ПериодВыборкиДокументов.ДатаНачала,ПериодВыборкиДокументов.ДатаОкончания);
			
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.ПолучитьОбъект();
				ОбработатьДокумент(Объект);
			КонецЦикла;
			
		ИначеЕсли Строка.ВидОбъекта = "Справочники" Тогда
			
			ВидТекущегоОбъекта = Строка.ВидОбъекта;
			ТипТекущегоОбъекта = Строка.Объект;
			Выборка = Справочники[Строка.Имя].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ЭтоГруппа Тогда
					Продолжить;
				Иначе
					Объект = Выборка.ПолучитьОбъект();
					ОбработатьЭлементСправочника(Объект);
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Строка.ВидОбъекта = "ПланыВидовХарактеристик" Тогда
			
			ВидТекущегоОбъекта = Строка.ВидОбъекта;
			ТипТекущегоОбъекта = Строка.Объект;
			Выборка = ПланыВидовХарактеристик[Строка.Имя].Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЭтоГруппа Тогда
					Продолжить;
				Иначе
					Объект = Выборка.ПолучитьОбъект();
					ОбработатьЭлементПВХ(Объект);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Строка.ВидОбъекта = "ПланыВидовРасчета" Тогда
			ВидТекущегоОбъекта = Строка.ВидОбъекта;
			ТипТекущегоОбъекта = Строка.Объект;
			Выборка = ПланыВидовРасчета[Строка.Имя].Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.ПолучитьОбъект();
				ОбработатьЭлементПВР(Объект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключение монопольного режима
	Если МонопольныйРежим() Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	// Печать таблицы ошибок
	ТабДокумент = РезультатВыполненияОбработки;
	ПечатьОтчета(ТабДокумент);
	
	// выводим ТабДокумент
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ФиксацияСверху = 3;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ТолькоПросмотр = Истина;
	
	// Откроем страницу отчета
	Элементы.СтраницыОсновные.ТекущаяСтраница = элементы.СтраницаОтчет;
	
КонецПроцедуры // ВыполнитьПроверку()

// Процедура обработки документа
// Объект - обрабатываемый документ
// Ошибки - список ошибок.
&НаСервере
Процедура ОбработатьДокумент(Объект)
	
	Вид = "Документ";
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоВосстановлениеПоследовательностей", Истина);
	
	// Проверка заполнения обязательных реквизитов.
	Если ПроверитьЗаполнениеОбъекта Тогда
		ПроверитьЗаполнениеОбъекта(Объект);
	КонецЕсли;
	
	// Проверка помеченных на удаление.
	Если ПроверятьПометкиНаУдаление Тогда
		ПроверитьПометкиНаУдаление(Объект, Вид);
	КонецЕсли;
	
	// Пересчет взаиморасчетов и курсов.
	Если ПересчетВзаиморасчетовИКурсовДокументов Тогда
		ПровестиПересчетВзаиморасчетовИКурсовДокумента(Объект);
	КонецЕсли;
	
	// Перепроведение
	Если Перепровести Тогда
		Перепровести(Объект);
	КонецЕсли;
	
	// Проверка проводок
	Если ПроверитьБалансныеПроводки Тогда
		ПроверитьБалансныеПроводки(Объект);
	КонецЕсли;
	
	// Непроведенные документы с движениями.
	Если НепроведенныеДокументыСДвижениями И НЕ Объект.Проведен Тогда
		НеПроведенныеДокументыСДвижениями(Объект);
	КонецЕсли;
	
	// Проведенные документы без движений
	Если ПроведенныеДокументыБезДвижений И Объект.Проведен Тогда
		ПроведенныеДокументыБезДвижений(Объект);
	КонецЕсли;
	
	// Расхождения товарных движений
	Если РасхождениеТоварныхРегистров Тогда
		РасхожденияТоварныхРегистров(Объект);
	КонецЕсли;
	
	// Задвоенные/затроенные... движения товарных регистр.
	Если ЗадвоенныеДвижения Тогда
		ЗадвоенныеДвижения(Объект);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДокумент()

// Процедура обработки элемента справочника
// Объект - элемент справочника
// Ошибки - список ошибок.
&НаСервере
Процедура ОбработатьЭлементСправочника(Объект)
	
	Вид = "ЭлементСправочника";
	
	// проверка заполнения обязательных реквизитов
	Если ПроверитьЗаполнениеОбъекта Тогда
		ПроверитьЗаполнениеОбъекта(Объект);
	КонецЕсли;
	
	// проверка на используемость
	Если ПроверятьНаНеИспользуемость Тогда
		ПроверитьНаНеИспользуемость(Объект);
	КонецЕсли;
	
	// проверка помеченных на удаление
	Если ПроверятьПометкиНаУдаление Тогда
		ПроверитьПометкиНаУдаление(Объект, Вид);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьЭлементСправочника()

// Процедура обработки элемента ПВХ
&НаСервере
Процедура ОбработатьЭлементПВХ(Объект)
	
	Вид = "ЭлементПВХ";
	
	// Проверка заполнения обязательных реквизитов.
	Если ПроверитьЗаполнениеОбъекта Тогда
		ПроверитьЗаполнениеОбъекта(Объект);
	КонецЕсли;
	
	// Проверка помеченных на удаление.
	Если ПроверятьПометкиНаУдаление Тогда
		ПроверитьПометкиНаУдаление(Объект, Вид);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьЭлементПВХ()

// Процедура обработки элемента ПВР
//
// Параметры:
//  Объект - текущий объект проверки.
//
&НаСервере
Процедура ОбработатьЭлементПВР(Объект)
	
	Вид = "ЭлементПВХ";
	
	// проверка заполнения обязательных реквизитов
	Если ПроверитьЗаполнениеОбъекта Тогда
		ПроверитьЗаполнениеОбъекта(Объект);
	КонецЕсли;
	
	// Проверка помеченных на удаление
	Если ПроверятьПометкиНаУдаление Тогда
		ПроверитьПометкиНаУдаление(Объект, Вид);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьЭлементПВХ()

// Проверяет корректность заполнения объекта
//
// Параметры:
//  Объект - текущий объект проверки.
//
&НаСервере
Процедура ПроверитьЗаполнениеОбъекта(Объект)
	
	НазваниеДействия = НСтр("ru = 'Проверка обязательных реквизитов'");
	ПроверяемыеРеквизиты = Новый Массив;
	Если НЕ Объект.ПроверитьЗаполнение() Тогда
		СтрокаОшибки = "";
		МассивОшибок = ПолучитьСообщенияПользователю(Истина);
		Для каждого Строка Из МассивОшибок Цикл
			СтрокаОшибки = СтрокаОшибки + ?(СтрокаОшибки = "", "",Символы.ПС) + Строка.Текст;
		КонецЦикла;
		ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
	Иначе
		// Если прошли проверку заполнения, все равно могут быть сообщения, которые нужно очистить.
		МассивОшибок = ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;
	
КонецПроцедуры //ПроверитьЗаполнениеОбъекта()

// Проверяет пометки на удаление.
// Объект  - проверяемый объект
// Вид     - вид проверяемого объекта
// Ошибки  - список ошибок.
&НаСервере
Процедура ПроверитьПометкиНаУдаление(Объект,Вид)
	
	НазваниеДействия = НСтр("ru = 'Проверка пометки на удаление'");
	Если Объект.ПометкаУдаления Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		Ссылки = НайтиПоСсылкам(Массив);
		
		ИсключенияПоискаСсылок = ОбщегоНазначения.ИсключенияПоискаСсылок();
		Исключения = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из Ссылки Цикл
			ИсключениеПоиска = ИсключенияПоискаСсылок[СтрокаТаблицы.Метаданные];
			Если ИсключениеПоиска = "*" Тогда
				Исключения.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Исключения Цикл
			Ссылки.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		Если НЕ Ссылки.Количество()=0 Тогда
			СтрокаОшибки = ?(Вид="Документ",
								НСтр("ru = 'Документ помечен на удаление. Ссылки на документ присутствуют в:'"),
								НСтр("ru = 'Элемент помечен на удаление. Ссылки на элемент присутствуют в:'"));
			Для Каждого Ссылка Из Ссылки Цикл
				СтрокаОшибки = СтрокаОшибки+Символы.ПС+Ссылка.Метаданные;
			КонецЦикла;
			ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПометкиНаУдаление()

// Производит перерасчет курсов документа (упр. валюты и валюты взаиморасчета)
// Объект  - обрабатываемый документ.
&НаСервере
Процедура ПровестиПересчетВзаиморасчетовИКурсовДокумента(Объект)
	
	НазваниеДействия = НСтр("ru = 'Пересчет взаиморасчетов и курсов'");
	ЕстьРеквизитКурсВалютыУпр = ЕстьРеквизит(Объект, "КурсВалютыУпр");
	ЕстьРеквизитКурсВалютыВзаиморасчетов = ЕстьРеквизит(Объект, "КурсВалютыВзаиморасчетов");
	ЕстьРеквизитДоговорВзаиморасчетов = ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов");
	
	Если ЕстьРеквизитКурсВалютыУпр Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			СтруктураКурса =РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
			КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			Если КурсУпр <> 0 Тогда
				Объект.КурсВалютыУпр = КурсУпр;
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					СтрокаОшибки = НСтр("ru = 'Ошибка записи документа.'");
					ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
				КонецПопытки;
			Иначе
				СтрокаОшибки = НСтр("ru = 'Ошибка получения курса валюты управленческого учета.'");
				ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитКурсВалютыВзаиморасчетов И ЕстьРеквизитДоговорВзаиморасчетов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыВзаиморасчетов) И ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов)Тогда
			Попытка
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.Дата);
				КурсРасч = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			Исключение
				КурсРасч = 0;
			КонецПопытки;
			Если КурсРасч <> 0 Тогда
				Объект.КурсВалютыВзаиморасчетов = КурсРасч;
				Если Объект.Проведен Тогда
					Попытка
						Объект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						СтрокаОшибки = НСтр("ru = 'Ошибка проведения документа.'");
						ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
					КонецПопытки;
				Иначе
					Попытка
						Объект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						СтрокаОшибки = НСтр("ru = 'Ошибка записи документа.'");
						ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
					КонецПопытки;
				КонецЕсли;
			Иначе
				СтрокаОшибки = НСтр("ru = 'Ошибка получения курса взаиморасчетов.'");
				ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПровестиПересчетВзаиморасчетовИКурсовДокумента()

// Перепроводит документ.
// Объект - перепроводимый документ
// Ошибки - список ошибок.
&НаСервере
Процедура Перепровести(Объект)
	
	НазваниеДействия = "Перепроведение";
	Если Объект.Проведен Тогда 
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение) 
		Исключение
			СтрокаОшибки = НСтр("ru = 'Ошибка проведения документа.'");
			ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры  // Перепровести()

// Проверяет балансные проводки документа
// Объект - проверяемый документ
// Ошибки - список ошибок.
&НаСервере
Процедура ПроверитьБалансныеПроводки(Объект)
	
	НазваниеДействия = НСтр("ru = 'Проверка балансных проводок'");
	Если Объект.Проведен Тогда
		РазницаБаланса = 0;
		БалансСходится = ПроверитьБалансноеУравнение(Объект.Ссылка,РазницаБаланса);
		Если НЕ БалансСходится Тогда
			СтрокаОшибки = НСтр("ru = 'Баланс документа не сходится.'") + Символы.ПС + НСтр("ru = 'Разница баланса:'") 
									+ " " + РазницаБаланса;
			Если ПерепроводитьПриОшибках Тогда
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					БалансСходится = ПроверитьБалансноеУравнение(Объект.Ссылка, РазницаБаланса);
					Если НЕ БалансСходится Тогда
						СтрокаОшибки = СтрокаОшибки + Символы.ПС + НСтр("ru = 'Документ перепроведен. Баланс документа не сходится.'") 
											+Символы.ПС +НСтр("ru = 'Разница баланса:'") + " " + РазницаБаланса;
					Иначе
						СтрокаОшибки = СтрокаОшибки + Символы.ПС + НСтр("ru = 'Документ перепроведен. Баланс документа сходится'");
					КонецЕсли;
				Исключение
					СтрокаОшибки = СтрокаОшибки + Символы.ПС +НСтр("ru = 'Ошибка проведения документа.'");
				КонецПопытки;
			КонецЕсли;
			ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьБалансныеПроводки()

// Проверяет элемент справочника на используемость
// Объект - элемент справочника
// Ошибки - список ошибок.
&НаСервере
Процедура ПроверитьНаНеИспользуемость(Объект)
	
	НазваниеДействия = НСтр("ru = 'Проверка на не используемость'");
	Если НЕ ОбщегоНазначения.ЕстьСсылкиНаОбъект(Объект.Ссылка) Тогда
		СтрокаОшибки = НСтр("ru = 'Элемент не используется'");
		ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаНеИспользуемость()

// Непроведенные документы с движениями.
&НаСервере
Процедура НеПроведенныеДокументыСДвижениями(Объект)
	
	НазваниеДействия = НСтр("ru = 'Наличие движений у непроведенных документов'");
	ДвиженияДокумента = Объект.Движения;
	ЕстьДвижения = Ложь;
	
	Для Каждого ТекНаборЗаписей Из ДвиженияДокумента Цикл
		ТекНаборЗаписей.Прочитать();
		Если ТекНаборЗаписей.Количество()<>0 Тогда
			ЕстьДвижения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДвижения Тогда
		СтрокаОшибки = НСтр("ru = 'Непроведенные документы с движениями'");
		ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
	КонецЕсли;
	
КонецПроцедуры //НеПроведенныеДокументыСДвижениями()

// Проведенные документы без движения.
&НаСервере
Процедура ПроведенныеДокументыБезДвижений(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеЦен") ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.Переоценка") Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеДействия = НСтр("ru = 'Отсутствие движений у проведенных документов'");
	ДвиженияДокумента = Объект.Движения;
	НетДвижений = Истина;
	
	Для Каждого ТекНаборЗаписей Из ДвиженияДокумента Цикл
		ТекНаборЗаписей.Прочитать();
		Если ТекНаборЗаписей.Количество()<>0 Тогда
			НетДвижений = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетДвижений Тогда
		СтрокаОшибки = НСтр("ru = 'Нет движений'");
		ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
	КонецЕсли;
	
КонецПроцедуры //ПроведенныеДокументыБезДвижений()

// Поиск расхождений движений между регистрами остатки, партии, продажи.
&НаСервере
Процедура НайтиРасхожденияТоварныхРегистров()
	
	ТаблицаДокументов=Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Выбран");
	ТаблицаДокументов.Колонки.Добавить("Документ");
	
	// Возврат поставщику
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ВозвратПоставщикуТовары.Ссылка КАК Ссылка,
	                    |	СУММА(ВозвратПоставщикуТовары.Коэффициент * ВозвратПоставщикуТовары.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Док
	                    |ИЗ
	                    |	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТовары
	                    |ГДЕ
	                    |	ВозвратПоставщикуТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатурыУслуга
	                    |	И ВозвратПоставщикуТовары.Ссылка.Проведен
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ВозвратПоставщикуТовары.Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ОстаткиТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Остатки
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	                    |		ПО Док.Ссылка = ОстаткиТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ОстаткиТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Партии
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	                    |		ПО Док.Ссылка = ПартииТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество = ЕСТЬNULL(ПартииТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ИСТИНА КАК Выбран,
	                    |	Док.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                    |		ПО Док.Ссылка = Остатки.Регистратор
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК Партии
	                    |		ПО (Партии.Регистратор = Остатки.Регистратор)
	                    |ГДЕ
	                    |	НЕ 1 В
	                    |				(ВЫБРАТЬ
	                    |					1
	                    |				ИЗ
	                    |					РегистрСведений.ДопроведениеПоПартиям
	                    |				ГДЕ
	                    |					РегистрСведений.ДопроведениеПоПартиям.Регистратор = Док.Ссылка)");
	Запрос.УстановитьПараметр("ВидНоменклатурыУслуга",Перечисления.ВидыНоменклатуры.Услуга);
	ТаблицаВозвратПоставщику=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаВозвратПоставщику Цикл
		НоваяСтрока=ТаблицаДокументов.Добавить();
		НоваяСтрока.Выбран=Истина;
		НоваяСтрока.Документ=СтрокаТаблицы.Ссылка;
	КонецЦикла;
	
	// Инвентаризация
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ИнвентаризацияТовары.Ссылка КАК Ссылка,
	                    |	СУММА(ВЫБОР
	                    |			КОГДА ИнвентаризацияТовары.Количество < 0
	                    |				ТОГДА -ИнвентаризацияТовары.Количество
	                    |			ИНАЧЕ ИнвентаризацияТовары.Количество
	                    |		КОНЕЦ) КАК Количество
	                    |ПОМЕСТИТЬ Док
	                    |ИЗ
	                    |	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
	                    |ГДЕ
	                    |	ИнвентаризацияТовары.Ссылка.ХозОперация <> &ХозОперацияИнвентаризацияТоваровОтданныхНаКомиссию
	                    |	И ИнвентаризацияТовары.Ссылка.Проведен
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ИнвентаризацияТовары.Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ОстаткиТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Остатки
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	                    |		ПО Док.Ссылка = ОстаткиТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ОстаткиТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Партии
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	                    |		ПО Док.Ссылка = ПартииТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ПартииТоваровКомпании.Регистратор, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ИСТИНА КАК Выбран,
	                    |	Док.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                    |		ПО Док.Ссылка = Остатки.Регистратор
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК Партии
	                    |		ПО (Партии.Регистратор = Остатки.Регистратор)
	                    |ГДЕ
	                    |	НЕ 1 В
	                    |				(ВЫБРАТЬ
	                    |					1
	                    |				ИЗ
	                    |					РегистрСведений.ДопроведениеПоПартиям
	                    |				ГДЕ
	                    |					РегистрСведений.ДопроведениеПоПартиям.Регистратор = Док.Ссылка)");
	Запрос.УстановитьПараметр("ХозОперацияИнвентаризацияТоваровОтданныхНаКомиссию",Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию);
	ТаблицаИнвентаризация=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаИнвентаризация Цикл
		НоваяСтрока=ТаблицаДокументов.Добавить();
		НоваяСтрока.Выбран=Истина;
		НоваяСтрока.Документ=СтрокаТаблицы.Ссылка;
	КонецЦикла;

	// Поступление товаров
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ПоступлениеТоваровТовары.Ссылка КАК Ссылка,
	                    |	СУММА(ПоступлениеТоваровТовары.КоличествоБазовое) КАК Количество
	                    |ПОМЕСТИТЬ Док
	                    |ИЗ
	                    |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	                    |ГДЕ
	                    |	ПоступлениеТоваровТовары.Ссылка.Проведен
	                    |	И ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатурыУслуга
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПоступлениеТоваровТовары.Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ОстаткиТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Остатки
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	                    |		ПО Док.Ссылка = ОстаткиТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ОстаткиТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Партии
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	                    |		ПО Док.Ссылка = ПартииТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ПартииТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ИСТИНА КАК Выбран,
	                    |	Док.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                    |		ПО Док.Ссылка = Остатки.Регистратор
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК Партии
	                    |		ПО (Партии.Регистратор = Остатки.Регистратор)
	                    |ГДЕ
	                    |	НЕ 1 В
	                    |				(ВЫБРАТЬ
	                    |					1
	                    |				ИЗ
	                    |					РегистрСведений.ДопроведениеПоПартиям
	                    |				ГДЕ
	                    |					РегистрСведений.ДопроведениеПоПартиям.Регистратор = Док.Ссылка)");
	Запрос.УстановитьПараметр("ВидНоменклатурыУслуга",Перечисления.ВидыНоменклатуры.Услуга);
	ТаблицаПоступлениеТоваров=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаПоступлениеТоваров Цикл
		НоваяСтрока=ТаблицаДокументов.Добавить();
		НоваяСтрока.Выбран=Истина;
		НоваяСтрока.Документ=СтрокаТаблицы.Ссылка;
	КонецЦикла;
	
	// Списание товаров
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СписаниеТоваровТовары.Ссылка КАК Ссылка,
	                    |	СУММА(СписаниеТоваровТовары.Количество * СписаниеТоваровТовары.Коэффициент) КАК Количество
	                    |ПОМЕСТИТЬ Док
	                    |ИЗ
	                    |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                    |ГДЕ
	                    |	СписаниеТоваровТовары.Ссылка.Проведен
	                    |	И СписаниеТоваровТовары.Номенклатура.ВидНоменклатуры <> &ХозОперацияСписаниеТоваровОтданныхНаКомиссию
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	СписаниеТоваровТовары.Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ОстаткиТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Остатки
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	                    |		ПО Док.Ссылка = ОстаткиТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ОстаткиТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Партии
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	                    |		ПО Док.Ссылка = ПартииТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ПартииТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ИСТИНА КАК Выбран,
	                    |	Док.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                    |		ПО Док.Ссылка = Остатки.Регистратор
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК Партии
	                    |		ПО (Партии.Регистратор = Остатки.Регистратор)
	                    |ГДЕ
	                    |	НЕ 1 В
	                    |				(ВЫБРАТЬ
	                    |					1
	                    |				ИЗ
	                    |					РегистрСведений.ДопроведениеПоПартиям
	                    |				ГДЕ
	                    |					РегистрСведений.ДопроведениеПоПартиям.Регистратор = Док.Ссылка)");
	Запрос.УстановитьПараметр("ХозОперацияСписаниеТоваровОтданныхНаКомиссию",Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию);
	ТаблицаСписаниеТоваров=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаСписаниеТоваров Цикл
		НоваяСтрока=ТаблицаДокументов.Добавить();
		НоваяСтрока.Выбран=Истина;
		НоваяСтрока.Документ=СтрокаТаблицы.Ссылка;
	КонецЦикла;
	
	// Реализация товаров
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	РеализацияТоваровТовары.Ссылка КАК Ссылка,
	                    |	СУММА(РеализацияТоваровТовары.КоличествоБазовое) КАК Количество
	                    |ПОМЕСТИТЬ Док
	                    |ИЗ
	                    |	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	                    |ГДЕ
	                    |	РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатурыУслуга
	                    |	И РеализацияТоваровТовары.Ссылка.Проведен
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	РеализацияТоваровТовары.Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ОстаткиТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Остатки
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	                    |		ПО Док.Ссылка = ОстаткиТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ОстаткиТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Партии
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	                    |		ПО Док.Ссылка = ПартииТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ПартииТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровОтданные.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровОтданные.Количество) КАК Количество
	                    |ПОМЕСТИТЬ ПартииТоваровОтданные
	                    |ИЗ
	                    |	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровОтданные.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	Продажи.Регистратор КАК Регистратор,
	                    |	СУММА(Продажи.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Продажи
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи КАК Продажи
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ ПартииТоваровОтданные КАК ПартииТоваровОтданные
	                    |			ПО Продажи.Регистратор = ПартииТоваровОтданные.Регистратор
	                    |		ПО Док.Ссылка = Продажи.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(Продажи.Количество, 0) + ЕСТЬNULL(ПартииТоваровОтданные.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	Продажи.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ИСТИНА КАК Выбран,
	                    |	Док.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                    |		ПО Док.Ссылка = Остатки.Регистратор
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК Партии
	                    |		ПО (Партии.Регистратор = Остатки.Регистратор)
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
	                    |		ПО (Партии.Регистратор = Продажи.Регистратор)
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ПартииТоваровОтданные КАК ПартииТоваровОтданные
	                    |		ПО (Партии.Регистратор = ПартииТоваровОтданные.Регистратор)
	                    |ГДЕ
	                    |	НЕ 1 В
	                    |				(ВЫБРАТЬ
	                    |					1
	                    |				ИЗ
	                    |					РегистрСведений.ДопроведениеПоПартиям
	                    |				ГДЕ
	                    |					РегистрСведений.ДопроведениеПоПартиям.Регистратор = Док.Ссылка)");
	Запрос.УстановитьПараметр("ВидНоменклатурыУслуга",Перечисления.ВидыНоменклатуры.Услуга);
	ТаблицаРеализацияТоваров=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаРеализацияТоваров Цикл
		НоваяСтрока=ТаблицаДокументов.Добавить();
		НоваяСтрока.Выбран=Истина;
		НоваяСтрока.Документ=СтрокаТаблицы.Ссылка;
	КонецЦикла;
	
	// Возврат от покупателя
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ВозвратОтПокупателяТовары.Ссылка КАК Ссылка,
	                    |	СУММА(ВозвратОтПокупателяТовары.КоличествоБазовое) КАК Количество
	                    |ПОМЕСТИТЬ Док
	                    |ИЗ
	                    |	Документ.ВозвратОтПокупателя.Товары КАК ВозвратОтПокупателяТовары
	                    |ГДЕ
	                    |	ВозвратОтПокупателяТовары.Ссылка.Проведен
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ВозвратОтПокупателяТовары.Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ОстаткиТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Остатки
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	                    |		ПО Док.Ссылка = ОстаткиТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ОстаткиТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Партии
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	                    |		ПО Док.Ссылка = ПартииТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ПартииТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ИСТИНА КАК Выбран,
	                    |	Док.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                    |		ПО Док.Ссылка = Остатки.Регистратор
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК Партии
	                    |		ПО (Партии.Регистратор = Остатки.Регистратор)
	                    |ГДЕ
	                    |	НЕ 1 В
	                    |				(ВЫБРАТЬ
	                    |					1
	                    |				ИЗ
	                    |					РегистрСведений.ДопроведениеПоПартиям
	                    |				ГДЕ
	                    |					РегистрСведений.ДопроведениеПоПартиям.Регистратор = Док.Ссылка)");
	ТаблицаВозвратОтПокупателя=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаВозвратОтПокупателя Цикл
		НоваяСтрока=ТаблицаДокументов.Добавить();
		НоваяСтрока.Выбран=Истина;
		НоваяСтрока.Документ=СтрокаТаблицы.Ссылка;
	КонецЦикла;
	
	// Перемещение товаров
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	                    |	СУММА(ВЫБОР
	                    |			КОГДА ПеремещениеТоваровТовары.Ссылка.ХозОперация = &ХозОперация
	                    |				ТОГДА ПеремещениеТоваровТовары.КоличествоБазовое * 2
	                    |			ИНАЧЕ ПеремещениеТоваровТовары.КоличествоБазовое
	                    |		КОНЕЦ) КАК Количество
	                    |ПОМЕСТИТЬ Док
	                    |ИЗ
	                    |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                    |ГДЕ
	                    |	ПеремещениеТоваровТовары.Ссылка.Проведен
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПеремещениеТоваровТовары.Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ОстаткиТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ОстаткиТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Остатки
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	                    |		ПО Док.Ссылка = ОстаткиТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ОстаткиТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	                    |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
	                    |ПОМЕСТИТЬ Партии
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	                    |		ПО Док.Ссылка = ПартииТоваровКомпании.Регистратор
	                    |ГДЕ
	                    |	Док.Количество <> ЕСТЬNULL(ПартииТоваровКомпании.Количество, 0)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ПартииТоваровКомпании.Регистратор
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ИСТИНА КАК Выбран,
	                    |	Док.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Док КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                    |		ПО Док.Ссылка = Остатки.Регистратор
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК Партии
	                    |		ПО (Партии.Регистратор = Остатки.Регистратор)
	                    |ГДЕ
	                    |	НЕ 1 В
	                    |				(ВЫБРАТЬ
	                    |					1
	                    |				ИЗ
	                    |					РегистрСведений.ДопроведениеПоПартиям
	                    |				ГДЕ
	                    |					РегистрСведений.ДопроведениеПоПартиям.Регистратор = Док.Ссылка)");
	Запрос.УстановитьПараметр("ХозОперация",Справочники.ХозОперации.ПеремещениеТоваров);
	ТаблицаПеремещениеТоваров=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаПеремещениеТоваров Цикл
		НоваяСтрока=ТаблицаДокументов.Добавить();
		НоваяСтрока.Выбран=Истина;
		НоваяСтрока.Документ=СтрокаТаблицы.Ссылка;
	КонецЦикла;
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		РасхожденияТоварныхРегистровТаблица.Загрузить(ТаблицаДокументов);
	КонецЕсли;
	
КонецПроцедуры //НайтиРасхожденияТоварныхРегистров()

// Поиск задвоенных/затроенных... движений товарных регистр.
&НаСервере
Процедура НайтиЗадвоенныеДвижения()
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	ИСТИНА КАК Выбран,
	|	Регистратор КАК Документ
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Рег1.Регистратор
	|	ИЗ
	|		РегистрНакопления.ОстаткиТоваровКомпании КАК Рег1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК Рег2
	|		ПО Рег1.Регистратор=Рег2.Регистратор
	|		И Рег1.ВидДвижения=Рег2.ВидДвижения
	|		И Рег1.Номенклатура=Рег2.Номенклатура
	|		И Рег1.СкладКомпании=Рег2.СкладКомпании
	|		И Рег1.ХарактеристикаНоменклатуры=Рег2.ХарактеристикаНоменклатуры
	|		И Рег1.ХозОперация=Рег2.ХозОперация
	|		И Рег1.Количество=Рег2.Количество
	|		И Рег1.СуммаРозн=Рег2.СуммаРозн
	|		И Рег1.Резерв=Рег2.Резерв
	|		И Рег1.НомерСтроки<>Рег2.НомерСтроки
	|
	|	ГДЕ
	|		НЕ Рег1.Регистратор ССЫЛКА Документ.ЗаказПокупателя
	|		И НЕ Рег1.Регистратор ССЫЛКА Документ.ЗаказВнутренний
	|		И НЕ Рег1.Регистратор ССЫЛКА Документ.ЗакрытиеСмены
	|
	|	СГРУППИРОВАТЬ ПО
	|		Рег1.Регистратор
	|
	|	ОБЪЕДИНИТЬ ВСЕ    
	|
	|	ВЫБРАТЬ
	|		Рег1.Регистратор
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровКомпании КАК Рег1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании КАК Рег2
	|		ПО Рег1.Регистратор=Рег2.Регистратор
	|		И Рег1.ВидДвижения=Рег2.ВидДвижения
	|		И Рег1.СкладКомпании=Рег2.СкладКомпании
	|		И Рег1.Номенклатура=Рег2.Номенклатура
	|		И Рег1.ХарактеристикаНоменклатуры=Рег2.ХарактеристикаНоменклатуры
	|		И Рег1.СтатусПартии=Рег2.СтатусПартии
	|		И Рег1.Партия=Рег2.Партия
	|		И Рег1.Количество=Рег2.Количество
	|		И Рег1.Сумма=Рег2.Сумма
	|		И Рег1.СуммаУпр=Рег2.СуммаУпр
	|		И Рег1.СуммаНДС=Рег2.СуммаНДС
	|		И Рег1.ХозОперация=Рег2.ХозОперация
	|		И Рег1.НомерСтроки<>Рег2.НомерСтроки
	|		
	|	ГДЕ
	|		НЕ Рег1.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|
	|	СГРУППИРОВАТЬ ПО
	|		Рег1.Регистратор
	|	) КАК Вн
	|	
	|УПОРЯДОЧИТЬ ПО Регистратор.Дата ВОЗР
	|");
	ТаблицаДокументов=Запрос.Выполнить().Выгрузить();
	
	ТаблицаДокументов.Свернуть("Выбран,Документ","");
	Если ТаблицаДокументов.Количество() > 0 Тогда
		ЗадвоенныеДвиженияТаблица.Загрузить(ТаблицаДокументов);
	КонецЕсли;
	
КонецПроцедуры // НайтиЗадвоенныеДвижения()

// Задвоенные движения документов
&НаСервере
Процедура ЗадвоенныеДвижения(Объект)
	
	НазваниеДействия = НСтр("ru = 'Задвоенные движения в документе'");
	Если ЗадвоенныеДвиженияТаблица.НайтиСтроки(Новый Структура("Документ",Объект.Ссылка)).Количество()>0 Тогда
		СтрокаОшибки = НСтр("ru = 'Задвоенные движения'");
		ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
	КонецЕсли;
	
КонецПроцедуры //ЗадвоенныеДвижения()

// Выводит расхождения в товарных регистрах.
&НаСервере
Процедура РасхожденияТоварныхРегистров(Объект)
	
	НазваниеДействия = НСтр("ru = 'Расхождение товарных регистров'");
	Если РасхожденияТоварныхРегистровТаблица.НайтиСтроки(Новый Структура("Документ",Объект.Ссылка)).Количество()>0 Тогда
		СтрокаОшибки = НСтр("ru = 'Расхождение товарных регистров'");
		ЗаписатьОшибку(ВидТекущегоОбъекта,Объект,НазваниеДействия,СтрокаОшибки);
	КонецЕсли;
	
КонецПроцедуры //РасхожденияТоварныхРегистров()

// Запись информации об ошибке в таблицу ошибок объекта.
//
// Параметры:
//  ВидОбъекта  - вид проверяемого объекта,
//  Объект      - проверяемый объект, 
//  ВидПроверки - Строка - название текущего действия,
//  Ошибка      - Строка - список ошибок.
//
&НаСервере
Функция ЗаписатьОшибку(ВидОбъекта,Объект,ВидПроверки,Ошибка)
	
	Если НЕ ПустаяСтрока(Ошибка) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ВидПроверки = ВидПроверки;
		НоваяСтрока.ОписаниеОшибки = Ошибка;
		НоваяСтрока.ВидОбъекта = ВидОбъекта;
		НоваяСтрока.ТипОбъекта = ТипТекущегоОбъекта;
		НоваяСтрока.Ссылка = Объект.Ссылка;
	КонецЕсли;
	
КонецФункции // ЗаписатьОшибку()

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Формирует печатную форму отчета.
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
&НаСервере
Процедура ПечатьОтчета(ТабДокумент)
	
	ТаблицаОшибок.Сортировать("ВидОбъекта,ТипОбъекта,Ссылка");
	ТабДокумент.Очистить();
	Макет = Обработки.ТестированиеИИсправлениеБД.ПолучитьМакет("Макет");
	
	// Выводим строку настроек.
	ОбластьМакета = Макет.ПолучитьОбласть("Настройки");
	ОбластьМакета.Параметры.СтрокаНастроек = СформироватьСтрокуНастроек();
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ФильтрУровней = Новый Структура;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоВидамОбъекта Тогда
		ФильтрУровней.Вставить("ВидОбъекта",Неопределено);
		ФильтрУровней.Вставить("ТипОбъекта",Неопределено);
	КонецЕсли;
	ФильтрУровней.Вставить("Объект",Неопределено);
	
	ТабДокумент.НачатьАвтогруппировкуСтрок();
	Для Каждого Строка Из ТаблицаОшибок Цикл
		ТекУровеньГруппировки = Неопределено;
		ФильтрУровней.Свойство("ВидОбъекта",ТекУровеньГруппировки);
		Если НЕ ТекУровеньГруппировки=Строка.ВидОбъекта Тогда
			ФильтрУровней.Вставить("ВидОбъекта",Строка.ВидОбъекта);
			ОбластьМакета = Макет.ПолучитьОбласть("Подсистема");
			ОбластьМакета.Параметры.Подсистема = Строка.ВидОбъекта;
			ОбластьМакета.Область(1,2).Отступ = 0;
			ТабДокумент.Вывести(ОбластьМакета,0);
		КонецЕсли;
		
		ФильтрУровней.Свойство("ТипОбъекта",ТекУровеньГруппировки);
		Если НЕ ТекУровеньГруппировки=Строка.ТипОбъекта Тогда
			ФильтрУровней.Вставить("ТипОбъекта",Строка.ТипОбъекта);
			ОбластьМакета = Макет.ПолучитьОбласть("Подсистема");
			ОбластьМакета.Параметры.Подсистема = Строка.ТипОбъекта;
			ОбластьМакета.Область(1,2).Отступ = 1;
			ТабДокумент.Вывести(ОбластьМакета,1);
		КонецЕсли;
		
		ФильтрУровней.Свойство("Объект",ТекУровеньГруппировки);
		Если НЕ ТекУровеньГруппировки=Строка.Ссылка Тогда
			ФильтрУровней.Вставить("Объект",Строка.Ссылка);
			ОбластьМакета = Макет.ПолучитьОбласть("Объект");
			ОбластьМакета.Параметры.Ссылка = Строка.Ссылка;
			ОбластьМакета.Область(1,2).Отступ = МаксУровень+1;
			ТабДокумент.Вывести(ОбластьМакета,МаксУровень+1);
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(Строка);
		ОбластьМакета.Область(1,2).Отступ = МаксУровень+3;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры // ПечатьОтчета()

// Получить уровни подсистем для строки дерева.
//
// Параметры:
//  СтрокаДерева - Строка Дерева Метаданных.
//  ТекУровень   - Число - текущий уровень.
//
&НаСервере
Процедура ПолучитьУровни(СтрокаДерева,ТекУровень)
	
	НовыйУровень = СписокУровней.Добавить();
	НовыйУровень.УровеньИерархии = ТекУровень;
	НовыйУровень.Объект = СтрокаДерева.Объект;
	ТекУровень = ТекУровень-1;
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолучитьУровни(СтрокаДерева.Родитель,ТекУровень);
	
КонецПроцедуры // ПолучитьУровни()

// Формирует строку настроек для вывода в отчет.
//
&НаСервере
Функция СформироватьСтрокуНастроек()
	
	СтрокаНастроек = "Настройки:" + " ";
	СтрокаНастроек = ?(ПроверитьЗаполнениеОбъекта,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Проверка обязательных реквизитов;'") + " ",СтрокаНастроек);
	СтрокаНастроек = ?(ПроверятьНаНеИспользуемость,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Проверка на не используемость;'") + " ",СтрокаНастроек);
	СтрокаНастроек = ?(ПроверятьПометкиНаУдаление,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Проверка пометок на удаление;'")+ " ",СтрокаНастроек);
	СтрокаНастроек = ?(ПересчетВзаиморасчетовИКурсовДокументов,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Пересчет взаиморасчетов и курсов;'") + " ",СтрокаНастроек);
	
	СтрокаНастроек = ?(ПерепроводитьПриОшибках,СтрокаНастроек  + Символы.ПС + Символы.Таб + Символы.Таб 
						+ НСтр("ru = 'Перепроведение документов;'") + " ",СтрокаНастроек);
	СтрокаНастроек = ?(ПроверитьБалансныеПроводки,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Проверка балансных проводок'") + "; ",СтрокаНастроек);
	СтрокаНастроек = ?(ПерепроводитьПриОшибках,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Перепроведение при ошибках баланса'"),СтрокаНастроек);
	
	СтрокаНастроек = ?(НепроведенныеДокументыСДвижениями,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Непроведенные документы с движениями;'"),СтрокаНастроек);
	СтрокаНастроек = ?(ПроведенныеДокументыБезДвижений,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Проведенные документы без движений;'"),СтрокаНастроек);
	СтрокаНастроек = ?(РасхождениеТоварныхРегистров,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Расхождение товарных регистров;'"),СтрокаНастроек);
	СтрокаНастроек = ?(ЗадвоенныеДвижения,СтрокаНастроек + Символы.ПС + Символы.Таб 
						+ НСтр("ru = 'Задвоенные движения'"),СтрокаНастроек);
	
	Возврат СтрокаНастроек;
	
КонецФункции // СформироватьСтрокуНастроек()

#КонецОбласти

#КонецОбласти

