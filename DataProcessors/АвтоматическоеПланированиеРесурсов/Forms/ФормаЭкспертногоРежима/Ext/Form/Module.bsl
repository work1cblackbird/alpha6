
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем ДанныеЗаполнения;
	
	Если НЕ Параметры.Свойство("Данные", ДанныеЗаполнения) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДатаОткрытияФормы = НачалоМинуты(ТекущаяДатаСеанса());
	
	ПереносимыеПоля = Новый Массив;
	ПереносимыеПоля.Добавить("Модель");
	ПереносимыеПоля.Добавить("Комплектация");
	ПереносимыеПоля.Добавить("ПодразделениеКомпании");
	ПереносимыеПоля.Добавить("РежимПланированияПоРесурсам");
	ПереносимыеПоля.Добавить("ИспользоватьБазовыйГрафик");
	ПереносимыеПоля.Добавить("БазовыйГрафик");
	ПереносимыеПоля.Добавить("УчитыватьДанныеТабеля");
	ПереносимыеПоля.Добавить("ТекущийДокумент");
	ПереносимыеПоля.Добавить("ПланироватьНаЦехДокумента");
	ПереносимыеПоля.Добавить("ОсновнойЦех");
	ПереносимыеПоля.Добавить("Организация");
	
	Если ДанныеЗаполнения.Свойство("НачалоПериодаРасчета") Тогда
		ПереносимыеПоля.Добавить("НачалоПериодаРасчета");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения, СтрСоединить(ПереносимыеПоля, ","));
	
	РесурсПланирования = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "РесурсПланирования");
	ЭтоРесурсПриемкиВыдачи = Ложь;
	
	Если ЗначениеЗаполнено(РесурсПланирования) Тогда
		
		ЭтоРесурсПриемкиВыдачи = ПланированиеРесурсов.ЭтоРесурсПриемкиВыдачи(РесурсПланирования);
		Объект[?(ЭтоРесурсПриемкиВыдачи, "РесурсПриемкиВыдачи", "РесурсПланирования")] = РесурсПланирования;
		
	КонецЕсли;
	
	Объект[?(ЭтоРесурсПриемкиВыдачи, "НачалоПериодаРасчета", "НачалоПериодаРасчетаОтРесурса")]
		= ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "НачалоПериодаРасчетаОтРесурса", Дата(1, 1, 1));
	
	ПроверятьНаличиеВыполненныхАвторабот = ПолучитьЗначениеПараметраСтруктуры(
		ДанныеЗаполнения,
		"ПроверятьНаличиеВыполненныхАвторабот",
		Ложь);
	
	АвтоматическоеПланированиеРесурсов.ЗаполнитьОбщимиНастройками(Объект);
	
	КонтрольПланированияПрошедшимВременем = Строка(ПраваИНастройкиПользователя.Значение("КонтрольПланированияПрошедшимВременем"));
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериодаРасчета) Тогда
		Объект.НачалоПериодаРасчета = НачалоМинуты(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СмещениеЧасовогоПояса = ДанныеЗаполнения.СмещениеЧасовогоПояса;
	
	НачалоПериодаРасчетаПредставление = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясПодразделения(Объект.НачалоПериодаРасчета, СмещениеЧасовогоПояса);
	
	НачалоПериодаРасчетаОтРесурсаПредставление = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясПодразделения(Объект.НачалоПериодаРасчетаОтРесурса, СмещениеЧасовогоПояса);
	
	УстановитьПредельныйСрокПланирования();
	
	УстановитьДоступностьБазовогоГрафика();
	
	УстановитьДоступностьТиповРесурса();
	
	КэшДанныхЗаполнения = ДанныеЗаполнения;
	
	ЗаполнитьПоДаннымДокумента(ДанныеЗаполнения);
	
	Элементы.ПланированиеОбъекты.ОтборСтрок = Новый ФиксированнаяСтруктура("Отображать", Истина);
	
	ЗаполнтьСписокВыбораКолонкиПланировать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПланированиеОбъектыПланированиеПоГруппеПриИзменении(Элемент)
	// поменяем признак планирования по групп
	ТекущиеДанные = Элементы.ПланированиеОбъекты.ТекущиеДанные;
	ЭтоГруппа = НЕ ТекущиеДанные.ПланированиеПоГруппе;
	Если ТекущиеДанные.ВидОбъектаПланирования =
		ПредопределенноеЗначение("Перечисление.ВидыОбъектовПланированияРесурсов.Авторабота") Тогда
		
		// найдем данные по родителю
		Условие = Новый Структура("Идентификатор", ТекущиеДанные.ИдентификаторГруппы);
		строкиРодителя = Объект.ПланированиеОбъекты.НайтиСтроки(Условие);
		Если строкиРодителя.Количество() > 0 Тогда
			строкиРодителя[0].ПланированиеПоГруппе = ТекущиеДанные.ПланированиеПоГруппе;
		КонецЕсли;
		
		// найдем строки в тойже группе
		Условие = Новый Структура("ИдентификаторГруппы", ТекущиеДанные.ИдентификаторГруппы);
		строкиВГруппе = Объект.ПланированиеОбъекты.НайтиСтроки(Условие);
		Если строкиВГруппе.Количество() Тогда
			Для Каждого строкаГруппы Из строкиВГруппе Цикл
				строкаГруппы.ПланированиеПоГруппе = ТекущиеДанные.ПланированиеПоГруппе;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// найдем строки в тойже группе
		Условие = Новый Структура("ИдентификаторГруппы", ТекущиеДанные.Идентификатор);
		строкиВГруппе = Объект.ПланированиеОбъекты.НайтиСтроки(Условие);
		Если строкиВГруппе.Количество() Тогда
			Для Каждого строкаГруппы Из строкиВГруппе Цикл
				строкаГруппы.ПланированиеПоГруппе = ТекущиеДанные.ПланированиеПоГруппе;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	идентификаторНовойТекущейСтроки = Неопределено;
	Если ЭтоГруппа Тогда // Сдвинем строки авторабот на место группы
		строкиКПереносу = Объект.ПланированиеОбъекты.НайтиСтроки(
			Новый Структура("ИдентификаторГруппы", ТекущиеДанные.Идентификатор)
		);
		
		индексНазначение = Объект.ПланированиеОбъекты.Индекс(ТекущиеДанные) + 1;
	Иначе // Сдвинем строку группы на место первой работы в группе
		строкиГруппы = Объект.ПланированиеОбъекты.НайтиСтроки(
			Новый Структура("ИдентификаторГруппы", ТекущиеДанные.ИдентификаторГруппы)
		);
		
		Если строкиГруппы.Количество() > 0 Тогда
			индексНазначение = Объект.ПланированиеОбъекты.Индекс(строкиГруппы[0]) + 1;
			
			строкиКПереносу = Объект.ПланированиеОбъекты.НайтиСтроки(
				Новый Структура("Идентификатор", ТекущиеДанные.ИдентификаторГруппы)
			);
		Иначе
			строкиКПереносу = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого строка Из строкиКПереносу Цикл
		новаяСтрока = Объект.ПланированиеОбъекты.Вставить(индексНазначение);
		ЗаполнитьЗначенияСвойств(новаяСтрока, строка);
		индексНазначение = индексНазначение + 1;
		
		Если идентификаторНовойТекущейСтроки = Неопределено Тогда
			идентификаторНовойТекущейСтроки = новаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого строка Из строкиКПереносу Цикл
		Объект.ПланированиеОбъекты.Удалить(строка);
	КонецЦикла;
	
	ОбновитьПризнакВидимостиСтроки();
	
	Если идентификаторНовойТекущейСтроки <> Неопределено Тогда
		Элементы.ПланированиеОбъекты.ТекущаяСтрока = идентификаторНовойТекущейСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаПриИзменении(Элемент)
	
	Объект.НачалоПериодаРасчета = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(НачалоПериодаРасчетаПредставление, СмещениеЧасовогоПояса);
	
	УстановитьПредельныйСрокПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаВремяПриИзменении(Элемент)
	
	Объект.НачалоПериодаРасчета = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(НачалоПериодаРасчетаПредставление, СмещениеЧасовогоПояса);
	
	УстановитьПредельныйСрокПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаОтРесурсаПриИзменении(Элемент)
	
	Объект.НачалоПериодаРасчетаОтРесурса = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(НачалоПериодаРасчетаОтРесурсаПредставление, СмещениеЧасовогоПояса);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаОтРесурсаВремяПриИзменении(Элемент)
	
	Объект.НачалоПериодаРасчетаОтРесурса = ОбщегоНазначенияАвтосалонКлиентСервер.
		ВЧасовойПоясИБ(НачалоПериодаРасчетаОтРесурсаПредставление, СмещениеЧасовогоПояса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБазовыйГрафикПриИзменении(Элемент)
	
	УстановитьДоступностьБазовогоГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокРасчетаПриИзменении(Элемент)
	
	УстановитьПредельныйСрокПланирования(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ПеречитатьИзДокументаНаСервере()
	
	ЗаполнитьПоДаннымДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьИзДокумента(Команда)
	
	ПеречитатьИзДокументаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьПоУмолчаниюНаСервере()
	
	Для Каждого ОбъектПланирования Из Объект.ПланированиеОбъекты Цикл
		ОбъектПланирования.Порядок = ОбъектПланирования.ТипАвтоработы.РеквизитДопУпорядочивания;
	КонецЦикла;
	
	Объект.ПланированиеОбъекты.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьПоУмолчанию(Команда)
	
	УпорядочитьПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ЗапланироватьНаСервере(ОтборПоОрганизации = Ложь)
	Ресурсы = ПолучитьДоступныеРесурсы(ОтборПоОрганизации);
	
	Результат = АвтоматическоеПланированиеРесурсов.ВыполнитьАвтоматическоеПланирование(
		Объект.ПланированиеОбъекты.Выгрузить(),
		Ресурсы,
		Объект.ПланированиеИнтервалы.Выгрузить(),
		АвтоматическоеПланированиеРесурсов.ПодготовитьПараметрыАвтоматическогоПланирования(Объект));
	
	Если Результат.Ошибка Тогда
		
		Результат.Данные = Неопределено;
		
	Иначе
		
		Результат.Данные = ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат.Данные);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеРесурсы(ОтборПоОрганизации = Ложь)
	
	Если Не Объект.ПланироватьНаЦехДокумента Тогда
		Возврат Объект.ДоступныеРесурсы.Выгрузить();
	КонецЕсли;
	
	Таблица = Объект.ДоступныеРесурсы.Выгрузить().СкопироватьКолонки();
	
	Для Каждого Строка Из Объект.ДоступныеРесурсы Цикл
		Если (Строка.Ресурс.Организация <> Объект.Организация И ОтборПоОрганизации)
			Или (Строка.Ресурс.Организация = Объект.Организация И Не ОтборПоОрганизации) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;                                       
	
	Возврат Таблица;

КонецФункции

&НаКлиенте
Процедура Запланировать(Команда)
	
	Объект.ПланироватьОтРесурса = (ЗначениеЗаполнено(Объект.НачалоПериодаРасчетаОтРесурса)
		ИЛИ ЗначениеЗаполнено(Объект.РесурсПланирования));
		
	ПериодРасчета = Макс(Объект.НачалоПериодаРасчетаОтРесурса, Объект.НачалоПериодаРасчета);
	Если ПериодРасчета < ДатаОткрытияФормы Тогда
		ПланированиеРесурсовКлиент.ПоказатьПредупреждениеАвтоматическогоПланирования();
		Возврат;
	КонецЕсли;
	
	Результат = ЗапланироватьНаСервере(Объект.ПланироватьНаЦехДокумента);
	
	Если НЕ Результат.Ошибка Тогда
		
		Закрыть(Результат.Данные);
		
	Иначе
		
		Если Не Объект.ПланироватьНаЦехДокумента  Тогда
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаОтветаПланированияПоЦехамДругихОрганизаций", ЭтотОбъект);
		
		ТекстВопроса = Результат.ОписаниеОшибки + Символы.ПС + "Запланировать работы на доступные ресурсы иных организаций ?"; 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОтветаПланированияПоЦехамДругихОрганизаций(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатПланирования = ЗапланироватьНаСервере(Ложь);
		
		Если НЕ РезультатПланирования.Ошибка Тогда
			
			Закрыть(РезультатПланирования.Данные);
			
		Иначе
			
			ПоказатьПредупреждение(, РезультатПланирования.ОписаниеОшибки);
			
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВверх(Команда)
	
	СдвинутьСтроку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВниз(Команда)
	
	СдвинутьСтроку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьЗакрытыеПакетыРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставПакетовРабот.ЗаказНаряд КАК ЗаказНаряд,
	|	СоставПакетовРабот.ПакетРабот КАК ПакетРабот,
	|	СоставПакетовРабот.Авторабота КАК Авторабота
	|ПОМЕСТИТЬ АвтоработыСПакетами
	|ИЗ
	|	РегистрСведений.СоставПакетовРабот КАК СоставПакетовРабот
	|ГДЕ
	|	СоставПакетовРабот.Авторабота В(&Автоработы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставПричинОбращенийЗаказНарядов.ПричинаОбращения КАК ПричинаОбращения,
	|	СоставПричинОбращенийЗаказНарядов.Авторабота КАК Авторабота
	|ПОМЕСТИТЬ ПричиныОбращения
	|ИЗ
	|	РегистрСведений.СоставПричинОбращенийЗаказНарядов КАК СоставПричинОбращенийЗаказНарядов
	|ГДЕ
	|	СоставПричинОбращенийЗаказНарядов.Использование = ИСТИНА
	|	И (СоставПричинОбращенийЗаказНарядов.ЗаказНаряд, СоставПричинОбращенийЗаказНарядов.Авторабота) В
	|			(ВЫБРАТЬ
	|				АвтоработыСПакетами.ЗаказНаряд КАК ЗаказНаряд,
	|				АвтоработыСПакетами.Авторабота КАК Авторабота
	|			ИЗ
	|				АвтоработыСПакетами КАК АвтоработыСПакетами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтоработыСПакетами.ПакетРабот КАК ПакетРабот,
	|	ЕСТЬNULL(ПричиныОбращения.ПричинаОбращения, """") КАК ПричинаОбращения,
	|	АвтоработыСПакетами.Авторабота КАК Авторабота
	|ПОМЕСТИТЬ АвтоработыИПричиныОбращения
	|ИЗ
	|	АвтоработыСПакетами КАК АвтоработыСПакетами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПричиныОбращения КАК ПричиныОбращения
	|		ПО АвтоработыСПакетами.Авторабота = ПричиныОбращения.Авторабота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АвтоработыСПакетами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПричиныОбращения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияПакетовРаботСрезПоследних.ПакетРабот КАК ПакетРабот,
	|	СостоянияПакетовРаботСрезПоследних.Состояние КАК Состояние
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	РегистрСведений.СостоянияПакетовРабот.СрезПоследних КАК СостоянияПакетовРаботСрезПоследних
	|ГДЕ
	|	СостоянияПакетовРаботСрезПоследних.ПакетРабот В
	|			(ВЫБРАТЬ
	|				АвтоработыИПричиныОбращения.ПакетРабот КАК ПакетРабот
	|			ИЗ
	|				АвтоработыИПричиныОбращения КАК АвтоработыИПричиныОбращения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтоработыИПричиныОбращения.ПричинаОбращения КАК ПричинаОбращения,
	|	АвтоработыИПричиныОбращения.Авторабота       КАК Авторабота,
	|	ЕСТЬNULL(Состояния.Состояние, ЗНАЧЕНИЕ(Справочник.ВидыСостоянийПакетовРабот.НеСтартовал)) КАК Состояние
	|ИЗ
	|	АвтоработыИПричиныОбращения КАК АвтоработыИПричиныОбращения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Состояния КАК Состояния
	|		ПО АвтоработыИПричиныОбращения.ПакетРабот = Состояния.ПакетРабот
	|ГДЕ
	|	ЕСТЬNULL(Состояния.Состояние, ЗНАЧЕНИЕ(Справочник.ВидыСостоянийПакетовРабот.НеСтартовал)) = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийПакетовРабот.Закрыт)
	|";
	
	СтрокиАвторабот = Объект.ПланированиеОбъекты.НайтиСтроки(
		Новый Структура("ВидОбъектаПланирования", Перечисления.ВидыОбъектовПланированияРесурсов.Авторабота)
	);
	
	Запрос.УстановитьПараметр(
		"Автоработы",
		Объект.ПланированиеОбъекты.Выгрузить(СтрокиАвторабот).ВыгрузитьКолонку("Идентификатор")
	);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Заполнение дополнительных реквизитов объектов планирования
//
&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты()
	// определимся есть ли запланированные работы
	ЕстьДанныеПланирования = (Объект.ПланированиеИнтервалы.Количество() > 0);
	Если ЕстьДанныеПланирования Тогда
		Объект.ПланированиеИнтервалы.Сортировать("Начало");
	КонецЕсли;
	
	Если ПроверятьНаличиеВыполненныхАвторабот Тогда
		закрытыеПакеты = ПолучитьЗакрытыеПакетыРабот();
	КонецЕсли;
	
	ДополнениеКПорядку = Объект.ПланированиеОбъекты.Количество();
	Для Каждого ОбъектПланирования Из Объект.ПланированиеОбъекты Цикл
		// Установим доступность перепланирования авторабот
		// если заявка то работы еще не начинали выполнения и выполнять проверку не требуется.
		Если НЕ ПроверятьНаличиеВыполненныхАвторабот Тогда
			ОбъектПланирования.ДоступноПерепланирование = Истина;
		Иначе
			закрытыеПакеты.Сбросить();
			
			Если ОбъектПланирования.ВидОбъектаПланирования = Перечисления.ВидыОбъектовПланированияРесурсов.ПричинаОбращения Тогда
				условиеПоиска = Новый Структура("ПричинаОбращения", ОбъектПланирования.Идентификатор);
			Иначе
				условиеПоиска = Новый Структура("Авторабота", ОбъектПланирования.Идентификатор);
			КонецЕсли;
			
			Если закрытыеПакеты.НайтиСледующий(условиеПоиска) Тогда
				ОбъектПланирования.Планировать = 1;
				ОбъектПланирования.ДоступноПерепланирование = Ложь;
			Иначе
				ОбъектПланирования.ДоступноПерепланирование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Определим порядок выполнения работы
		// уже запланированные работы имеют более высокий приоритет чем новые.
		Если ОбъектПланирования.ВидОбъектаПланирования = Перечисления.ВидыОбъектовПланированияРесурсов.ПричинаОбращения Тогда
			ОбъектПланирования.ТипАвтоработы = ОбъектПланирования.Объект.ТипАвторабот;
			ОбъектПланирования.НомерКартинки = 1;
		Иначе
			ОбъектПланирования.ТипАвтоработы = ОбъектПланирования.Объект.Тип;
			ОбъектПланирования.НомерКартинки = 3;
		КонецЕсли;
		
		Если ЕстьДанныеПланирования Тогда
			СтрокиЗапланированные = Объект.ПланированиеИнтервалы.НайтиСтроки(
				Новый Структура("Идентификатор", ОбъектПланирования.Идентификатор));
				
			Если СтрокиЗапланированные.Количество() > 0 Тогда
				ОбъектПланирования.Порядок = СтрокиЗапланированные[0].НомерСтроки;
				Доступен = Истина;
				Для Каждого Интервал Из СтрокиЗапланированные Цикл
					Если Не ПланированиеРесурсовКлиентСервер.ПроверитьДоступностьВремениИнтервалаПланирования(Интервал.Конец,
						КонтрольПланированияПрошедшимВременем) Тогда
						Доступен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не Доступен Тогда
					ОбъектПланирования.Планировать = 1;
					ОбъектПланирования.ДоступноПерепланирование = Ложь;
				КонецЕсли;
			Иначе
				ОбъектПланирования.Порядок = ОбъектПланирования.ТипАвтоработы.РеквизитДопУпорядочивания + ДополнениеКПорядку;
			КонецЕсли;
		Иначе
			ОбъектПланирования.Порядок = ОбъектПланирования.ТипАвтоработы.РеквизитДопУпорядочивания;
		КонецЕсли;
		
		// Заполним представление продолжительности
		// пересчитам продолжительность из секунд в более понятное пользователю представление.
		ПродолжительностьДляПредставления = Новый Массив;
		
		Если ЗначениеЗаполнено(ОбъектПланирования.НормаВремениСправочная) Тогда
			
			ПродолжительностьДляПредставления .Добавить(ОбъектПланирования.НормаВремениСправочная);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектПланирования.НормаВремениЗапланировано) Тогда
			
			ПродолжительностьДляПредставления.Добавить(ОбъектПланирования.НормаВремениЗапланировано);
			
		КонецЕсли;
		
		ПродолжительностьПредставление = Новый Массив;
		
		Для Каждого Продолжительность Из ПродолжительностьДляПредставления Цикл
			
			ПродолжительностьПредставление.Добавить(ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(Продолжительность));
			
		КонецЦикла;
		
		ОбъектПланирования.ПродолжительностьПредставление = СтрСоединить(ПродолжительностьПредставление, " / ");
		
	КонецЦикла;
	
	Объект.ПланированиеОбъекты.Сортировать("Порядок");
КонецПроцедуры // ЗаполнитьДополнительныеРеквизиты()

// Заполнение табличных частей из документа
//
&НаСервере
Процедура ЗаполнитьПоДаннымДокумента(ДанныеЗаполнения = Неопределено)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = КэшДанныхЗаполнения;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеЗаполнения.ДоступныеРесурсы) Тогда
		
		Объект.ДоступныеРесурсы.Загрузить(ПолучитьИзВременногоХранилища(ДанныеЗаполнения.ДоступныеРесурсы));
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеЗаполнения.ПланированиеИнтервалы) Тогда
		
		Объект.ПланированиеИнтервалы.Загрузить(ПолучитьИзВременногоХранилища(ДанныеЗаполнения.ПланированиеИнтервалы));
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеЗаполнения.ПланированиеОбъекты) Тогда
		
		Объект.ПланированиеОбъекты.Загрузить(ПолучитьИзВременногоХранилища(ДанныеЗаполнения.ПланированиеОбъекты));
		
		ЗаполнитьДополнительныеРеквизиты();
		
		ОбновитьПризнакВидимостиСтроки();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДаннымДокумента()

&НаСервере
Процедура ОбновитьПризнакВидимостиСтроки()
	
	Для Каждого ОбъектПланирования Из Объект.ПланированиеОбъекты Цикл
		ОбъектПланированияНеОтображать = (ОбъектПланирования.ВидОбъектаПланирования = Перечисления.ВидыОбъектовПланированияРесурсов.ПричинаОбращения
				И НЕ ОбъектПланирования.ПланированиеПоГруппе) 
			Или (ОбъектПланирования.ВидОбъектаПланирования = Перечисления.ВидыОбъектовПланированияРесурсов.Авторабота
				И ОбъектПланирования.ПланированиеПоГруппе
				И НЕ ПустаяСтрока(ОбъектПланирования.ИдентификаторГруппы));
		Если ОбъектПланированияНеОтображать Тогда
			
			ОбъектПланирования.Отображать = Ложь;
			
		Иначе
			
			ОбъектПланирования.Отображать = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредельныйСрокПланирования(ПересчитатьПредельныйСрок = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПредельныйСрокРасчетаПланирования)
		ИЛИ ПересчитатьПредельныйСрок Тогда
		
		Объект.ПредельныйСрокРасчетаПланирования = Объект.НачалоПериодаРасчета + Объект.СрокРасчета*86400;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьБазовогоГрафика()
	
	Элементы.БазовыйГрафик.Доступность = Объект.ИспользоватьБазовыйГрафик;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьСтроку(Вниз=Истина)
	// требуется организовать перешагивание через не отображаемые строки
	
	текущаяСтрока = Элементы.ПланированиеОбъекты.ТекущиеДанные;
	Если текущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим шаг сдвига
	ВерхняяГраница = ?(Вниз, Объект.ПланированиеОбъекты.Количество() - 1, 0);
	шаг    = ?(Вниз, 1, -1);
	индекс = Объект.ПланированиеОбъекты.Индекс(текущаяСтрока) + шаг;
	всегоШагов = 0;
	Пока ?(Вниз, индекс <= ВерхняяГраница, индекс >= ВерхняяГраница) Цикл
		всегоШагов = всегоШагов + шаг;
		Если Объект.ПланированиеОбъекты.Получить(индекс).Отображать Тогда
			Прервать;
		КонецЕсли;
		
		индекс = индекс + шаг;
	КонецЦикла;
	
	Если всегоШагов <> 0 Тогда
		Объект.ПланированиеОбъекты.Сдвинуть(Объект.ПланированиеОбъекты.Индекс(текущаяСтрока), всегоШагов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьТиповРесурса()
	
	Если Объект.РежимПланированияПоРесурсам = "РабочиеМеста" Тогда
		ограничениеТипаРесурса = Новый ОписаниеТипов("СправочникСсылка.Цеха");
	ИначеЕсли Объект.РежимПланированияПоРесурсам = "Исполнители" Тогда
		ограничениеТипаРесурса = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Иначе
		ограничениеТипаРесурса = Новый ОписаниеТипов;
	КонецЕсли;
	
	Элементы.РесурсПланирования.ОграничениеТипа = ограничениеТипаРесурса;
	Элементы.РесурсПриемкиВыдачи.ОграничениеТипа = ограничениеТипаРесурса;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнтьСписокВыбораКолонкиПланировать()
	
	Список = Элементы.ПланированиеОбъектыПланировать.СписокВыбора;
	Список.Очистить();
	Список.Добавить(0, Новый ФорматированнаяСтрока("Планировать"));
	
	ШрифтПояснения = Новый Шрифт(, 9,, Истина);
	
	// Не изменять планирование
	ЭлементыСтроки = Новый Массив;
	ЭлементыСтроки.Добавить("Не изменять");
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(
		" ранее заданные интервалы не будут изменены",
		ШрифтПояснения,
		Новый Цвет(175, 175, 175))
	);
	
	Список.Добавить(1, Новый ФорматированнаяСтрока(ЭлементыСтроки));
	
	// чистить старые интервалы
	ЭлементыСтроки = Новый Массив;
	ЭлементыСтроки.Добавить("Очищать");
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(
		" ранее заданные интервалы будут очищены",
		ШрифтПояснения,
		Новый Цвет(175, 175, 175))
	);
	
	Список.Добавить(2, Новый ФорматированнаяСтрока(ЭлементыСтроки));
	
КонецПроцедуры

#КонецОбласти

