
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем СоответствиеТиповАвтоработИРесурсов;
Перем СвободныеИнтервалыРесурсов;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Автоматическое планирование документов
// 
// Возвращаемое значение:
//  Структура - Описание ошибки и данные планирования.
//
Функция ВыполнитьАвтоматическоеПланирование() Экспорт
	
	Если НачалоМинуты(НачалоПериодаРасчета) < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		Возврат АвтоматическоеПланированиеРесурсов.Ошибка(
			НСтр("ru = 'Дата начала планирования не может быть меньше текущей.'"));
		
	КонецЕсли;
	
	Если НачалоМинуты(НачалоПериодаРасчета) >= ПредельныйСрокРасчетаПланирования
		ИЛИ НачалоМинуты(НачалоПериодаРасчетаОтРесурса) >= ПредельныйСрокРасчетаПланирования Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Автоматическое планирование доступно только в пределах %1 дней от текущей даты.
				|Измените выбранную дату или запланируйте работы вручную.'"),
			СрокРасчета);
		
		Возврат АвтоматическоеПланированиеРесурсов.Ошибка(ТекстОшибки);
		
	КонецЕсли;
	
	Если НЕ ОпределитьТипАвтомобиля() Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не указан тип автомобиля для планирования.
				|Заполните реквизит ""Тип автомобиля"" в %1 автомобиля.'"),
			?(ЗначениеЗаполнено(Комплектация) , НСтр("ru = 'модели или комплектации'"), НСтр("ru = 'модели'"))
		);
		Возврат АвтоматическоеПланированиеРесурсов.Ошибка(ТекстОшибки);
		
	КонецЕсли;
	
	// устраняем лишние объекты планирования
	ОтобратьПланируемыеСтроки();
	Если ПланированиеОбъекты.Количество() = 0 Тогда
		Возврат АвтоматическоеПланированиеРесурсов.Ошибка(НСтр("ru = 'Не указаны автоработы для планирования.'"));
	КонецЕсли;
	
	// устраняем лишние ресурсы
	ОтобратьДоступныеРесурсы();
	Если ДоступныеРесурсы.Количество() = 0 Тогда
		Возврат АвтоматическоеПланированиеРесурсов.Ошибка(НСтр("ru = 'Нет доступных ресурсов для планирования.
			|Укажите в карточке «Тип ресурса» необходимый «Тип авторабот» из карточки
			|""Авторабота"", и ""Тип автомобиля"" в Модели или Варианте комплектации ""Автомобиля"".'"));
	КонецЕсли;
	
	СвободныеИнтервалыРесурсов();
	
	Если СвободныеИнтервалыРесурсов = Неопределено Тогда
		Возврат АвтоматическоеПланированиеРесурсов.Ошибка(НСтр("ru = 'Нет доступных интервалов в указанном периоде.'"));
	КонецЕсли;
	
	Если ПланированиеВПределахОдногоДня Тогда
		Если НЕ ЗапланироватьНаДень() Тогда
			Возврат АвтоматическоеПланированиеРесурсов.Ошибка(
				НСтр("ru = 'Не удалось распланировать все работы в пределах одного дня.
				|Попробуйте снять флаг ""Планировать на день"" и повторите операцию планирования.'"));
		КонецЕсли;
	Иначе
		Результат = Запланировать(НачалоМинуты(НачалоПериодаРасчета), НачалоМинуты(ПредельныйСрокРасчетаПланирования));
		Если Результат.Ошибка Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Ошибка,ОписаниеОшибки,Данные", Ложь, "", ПланированиеИнтервалы.Выгрузить());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Оределяется ли планируемый объект вспомогательной автоработой.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоВспомогательнаяАвторабота(Объект)
	
	Возврат Объект.ВидОбъектаПланирования = Перечисления.ВидыОбъектовПланированияРесурсов.ВспомогательнаяАвторабота;
	
КонецФункции // ЭтоВспомогательнаяРабота()

// Определяет пренадлежит ли объект к типу авторабот "Приемка" или "Выдача".
//
Функция ЭтоПриемкаИлиВыдача(Объект)
	
	Возврат (Объект.ТипАвтоработы = Справочники.ТипыАвторабот.Выдача
			ИЛИ Объект.ТипАвтоработы = Справочники.ТипыАвторабот.Приемка);
	
КонецФункции

Функция ТипыАвтоработБезРазбиения(ТипыАвторабот)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТипыАвторабот.Ссылка КАК Тип
	|ИЗ
	|	Справочник.ТипыАвторабот КАК ТипыАвторабот
	|ГДЕ
	|	ТипыАвторабот.ВидРазбиенияИнтерваловПриПланировании = ЗНАЧЕНИЕ(Перечисление.ВидыРазбиенияИнтерваловПланирования.НеРазбивать)
	|	И ТипыАвторабот.Ссылка В(&ТипыАвторабот)");
	Запрос.УстановитьПараметр("ТипыАвторабот", ТипыАвторабот);
	Возврат Запрос.Выполнить()
		.Выгрузить()
		.ВыгрузитьКолонку("Тип");
	
КонецФункции // ТипыАвтоработБезРазбиения()

// Удаление строк которые планироваться не будут
//
Процедура ОтобратьПланируемыеСтроки()
	
	неПланируемыеОбъекты = Новый Массив;
	Для Каждого объект Из ПланированиеОбъекты Цикл
		Если НЕ ((объект.Планировать = 0 ИЛИ объект.Планировать = 2) И объект.Отображать) Тогда
			неПланируемыеОбъекты.Добавить(объект);
		КонецЕсли;
		
		// удалим интервалы объекта
		Если НЕ ((объект.Планировать = 1 ИЛИ объект.Планировать = 0) И объект.Отображать) Тогда
			интервалыОбъекта = ПланированиеИнтервалы.НайтиСтроки(Новый Структура("Идентификатор", объект.Идентификатор));
			
			Для Каждого интервал Из интервалыОбъекта Цикл
				ПланированиеИнтервалы.Удалить(интервал);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого объект Из неПланируемыеОбъекты Цикл
		ПланированиеОбъекты.Удалить(объект);
	КонецЦикла;
	
КонецПроцедуры

// Отбор доступных для планирования ресурсов
//
Процедура ОтобратьДоступныеРесурсы()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыАвтоработы", ПланированиеОбъекты.ВыгрузитьКолонку("ТипАвтоработы"));
	Запрос.УстановитьПараметр("ТипАвтомобиля", ТипАвтомобиля);
	Запрос.УстановитьПараметр("Ресурсы", ДоступныеРесурсы.ВыгрузитьКолонку("Ресурс"));
	
	// Убрать, если не потребуется поддерживать планирование и на любой выбранный тип ресурса.
	Запрос.УстановитьПараметр("РесурсПриемки", ?(ЗначениеЗаполнено(РесурсПриемкиВыдачи), РесурсПриемкиВыдачи, Неопределено));
	Запрос.УстановитьПараметр("РесурсПланирования", ?(ЗначениеЗаполнено(РесурсПланирования), РесурсПланирования, Неопределено));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипыРесурсовДоступныеТипыАвторабот.Ссылка КАК ТипРесурса,
	|	ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы КАК ТипАвтоработы
	|ПОМЕСТИТЬ ДоступныеТипыРесурсовПоАвтоработам
	|ИЗ
	|	Справочник.ТипыРесурсов.ДоступныеТипыАвторабот КАК ТипыРесурсовДоступныеТипыАвторабот
	|ГДЕ
	|	ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы В (&ТипыАвтоработы)
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипыРесурсовДоступныеТипыАвтомобилей.Ссылка КАК ТипРесурса
	|ПОМЕСТИТЬ ДоступныеТипыРесурсовПоАвтомобилям
	|ИЗ
	|	Справочник.ТипыРесурсов.ДоступныеТипыАвтомобилей КАК ТипыРесурсовДоступныеТипыАвтомобилей
	|ГДЕ
	|	ТипыРесурсовДоступныеТипыАвтомобилей.ТипАвтомобиля = &ТипАвтомобиля
	|;
	|
	|ВЫБРАТЬ
	|	ДоступныеТипыРесурсовПоАвтоработам.ТипРесурса,
	|	ДоступныеТипыРесурсовПоАвтоработам.ТипАвтоработы
	|ПОМЕСТИТЬ ДоступныеТипыРесурсов
	|ИЗ
	|	ДоступныеТипыРесурсовПоАвтоработам КАК ДоступныеТипыРесурсовПоАвтоработам
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеТипыРесурсовПоАвтомобилям КАК ДоступныеТипыРесурсовПоАвтомобилям
	|ПО
	|	ДоступныеТипыРесурсовПоАвтоработам.ТипРесурса = ДоступныеТипыРесурсовПоАвтомобилям.ТипРесурса
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка       КАК Ресурс,
	|	Сотрудники.ТипРесурса   КАК ТипРесурса,
	|	Сотрудники.ГрафикРаботы КАК График
	|ПОМЕСТИТЬ Ресурсы
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Ресурсы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Цеха.Ссылка       КАК Ресурс,
	|	Цеха.ТипРесурса   КАК ТипРесурса,
	|	Цеха.ГрафикРаботы КАК График
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ГДЕ
	|	Цеха.Ссылка В(&Ресурсы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ресурсы.Ресурс КАК Ресурс,
	|	Ресурсы.График КАК График
	|ИЗ
	|	Ресурсы КАК Ресурсы
	|ГДЕ
	|	Ресурсы.Ресурс = &РесурсПриемки
	|	ИЛИ Ресурсы.Ресурс = &РесурсПланирования
	|	ИЛИ Ресурсы.ТипРесурса В
	|			(ВЫБРАТЬ
	|				ДоступныеТипыРесурсов.ТипРесурса КАК ТипРесурса
	|			ИЗ
	|				ДоступныеТипыРесурсов КАК ДоступныеТипыРесурсов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ресурсы.Ресурс КАК Ресурс,
	|	ДоступныеТипыРесурсов.ТипАвтоработы КАК ТипАвтоработы
	|ИЗ
	|	Ресурсы КАК Ресурсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеТипыРесурсов КАК ДоступныеТипыРесурсов
	|		ПО Ресурсы.ТипРесурса = ДоступныеТипыРесурсов.ТипРесурса
	|ГДЕ
	|	НЕ ДоступныеТипыРесурсов.ТипАвтоработы ЕСТЬ NULL
	|	И ВЫБОР
	|		КОГДА ДоступныеТипыРесурсов.ТипАвтоработы.ТипРесурсаПланирования = ЗНАЧЕНИЕ(Перечисление.ТипыРесурсовАвтоматическогоПланирования.ПоИсполнителям)
	|		ТОГДА Ресурсы.Ресурс ССЫЛКА Справочник.Сотрудники
	|		ИНАЧЕ Ресурсы.Ресурс ССЫЛКА Справочник.Цеха
	|	КОНЕЦ
	|ИТОГИ ПО
	|	ТипАвтоработы";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДоступныеРесурсы.Загрузить(Результат[Результат.ВГраница() - 1].Выгрузить());
	
	СоответствиеТиповАвтоработИРесурсов = Новый Соответствие;
	Выборка = Результат[Результат.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Детали = Выборка.Выбрать();
		
		Ресурсы = Новый Массив;
		Пока Детали.Следующий() Цикл
			Ресурсы.Добавить(Детали.Ресурс);
		КонецЦикла;
		
		СоответствиеТиповАвтоработИРесурсов.Вставить(Выборка.ТипАвтоработы, Ресурсы);
		
	КонецЦикла;
	
КонецПроцедуры

// Составление списка свободных интервалов ресурсов
//
Процедура СвободныеИнтервалыРесурсов()
	
	Для Каждого Ресурс Из ДоступныеРесурсы Цикл
		Если ИспользоватьБазовыйГрафик ИЛИ Ресурс.График.Пустая() Тогда
			Ресурс.График = БазовыйГрафик;
		КонецЕсли;
	КонецЦикла;
	
	// получим интервалы по графикам ресурсов
	ИнтервалыРесурсов = ПланированиеРесурсов.ПолучитьГрафикиРабот(НачалоПериодаРасчета,
		ПредельныйСрокРасчетаПланирования, ДоступныеРесурсы, 2, БазовыйГрафик, УчитыватьДанныеТабеля);
	
	// Определим рабочие интервалы ресурсов
	Если НеУчитыватьПерерывы Тогда
		УсловиеОтбора = Новый Структура("ВидИнтервала", Справочники.ВидыИнтервалов.ОбеденныйПерерыв);
		РабочиеИнтервалыОбеды = ИнтервалыРесурсов.НайтиСтроки(УсловиеОтбора);
		
		РабочиеИнтервалы = ИнтервалыРесурсов.НайтиСтроки(Новый Структура("ЭтоРабочий", Истина));
		
		Для Каждого Обеденыйинтервал Из РабочиеИнтервалыОбеды Цикл
			РабочиеИнтервалы.Добавить(Обеденыйинтервал);
		КонецЦикла;
	Иначе
		РабочиеИнтервалы = ИнтервалыРесурсов.НайтиСтроки(Новый Структура("ЭтоРабочий", Истина));
	КонецЕсли;
	
	ИнтервалыРесурсов = ИнтервалыРесурсов.Скопировать(РабочиеИнтервалы);
	ИнтервалыРесурсов.Сортировать("Ресурс,Дата,НачалоРабочегоВремени");
	
	// объединим интервалы для исключение разбиения
	ОбъединяемыеСтроки = Новый Массив; 
	ТекущийИнтервалОбъединения = Неопределено; 
	ПредыдущаяСтрока = Неопределено;
	Для Каждого Интервал Из ИнтервалыРесурсов Цикл
		Попытка
			ПредыдущаяСтрока = ИнтервалыРесурсов.Получить(ИнтервалыРесурсов.Индекс(Интервал) - 1);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения интервала'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ПредыдущаяСтрока <> Неопределено Тогда
			Если ПредыдущаяСтрока.Ресурс = Интервал.Ресурс И ПредыдущаяСтрока.Дата = Интервал.Дата И ПредыдущаяСтрока.КонецРабочегоВремени = Интервал.НачалоРабочегоВремени Тогда
				Если ТекущийИнтервалОбъединения = Неопределено Тогда
					ТекущийИнтервалОбъединения = Новый Массив;
				КонецЕсли;
				
				Если ТекущийИнтервалОбъединения.Найти(ПредыдущаяСтрока) = Неопределено Тогда
					ТекущийИнтервалОбъединения.Добавить(ПредыдущаяСтрока);
				КонецЕсли;
				ТекущийИнтервалОбъединения.Добавить(Интервал);
			Иначе
				ОбъединяемыеСтроки.Добавить(ТекущийИнтервалОбъединения);
				ТекущийИнтервалОбъединения = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Объединение Из ОбъединяемыеСтроки Цикл
		Если Объединение <> Неопределено Тогда
			Объединение[0].КонецРабочегоВремени = Объединение[Объединение.ВГраница()].КонецРабочегоВремени;
			
			Для Сч = 1 По Объединение.ВГраница() Цикл
				ИнтервалыРесурсов.Удалить(Объединение[Сч]);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	ИнтервалыРесурсов.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ИнтервалыРесурсов.Дата, ЧАС, ЧАС(ИнтервалыРесурсов.НачалоРабочегоВремени)), МИНУТА, МИНУТА(ИнтервалыРесурсов.НачалоРабочегоВремени)) КАК Начало,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ИнтервалыРесурсов.Дата, ЧАС, ЧАС(ИнтервалыРесурсов.КонецРабочегоВремени)), МИНУТА, МИНУТА(ИнтервалыРесурсов.КонецРабочегоВремени)) КАК Конец
	|ПОМЕСТИТЬ РабочиеИнтервалыРесурсовВременная
	|ИЗ
	|	&ИнтервалыРесурсов КАК ИнтервалыРесурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеИнтервалыРесурсовВременная.Ресурс КАК Ресурс,
	|	ВЫБОР
	|		КОГДА РабочиеИнтервалыРесурсовВременная.Начало < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ РабочиеИнтервалыРесурсовВременная.Начало
	|	КОНЕЦ КАК Начало,
	|	ВЫБОР
	|		КОГДА РабочиеИнтервалыРесурсовВременная.Конец < &КонецПериода
	|			ТОГДА РабочиеИнтервалыРесурсовВременная.Конец
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ КАК Конец
	|ПОМЕСТИТЬ РабочиеИнтервалыРесурсов
	|ИЗ
	|	РабочиеИнтервалыРесурсовВременная КАК РабочиеИнтервалыРесурсовВременная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланированиеРесурсов.Ресурс КАК Ресурс,
	|	ВЫБОР КОГДА ПланированиеРесурсов.НачалоИнтервала < &НачалоПериода
	|	ТОГДА &НачалоПериода
	|	ИНАЧЕ ПланированиеРесурсов.НачалоИнтервала КОНЕЦ КАК Начало,
	|	ВЫБОР КОГДА ПланированиеРесурсов.КонецИнтервала < &КонецПериода
	|	ТОГДА ПланированиеРесурсов.КонецИнтервала
	|	ИНАЧЕ &КонецПериода КОНЕЦ КАК Конец
	|ПОМЕСТИТЬ ПланированиеРесурсовСВозможнымиДублями
	|ИЗ
	|	РегистрСведений.ПланированиеРесурсов КАК ПланированиеРесурсов
	|ГДЕ
	|	ПланированиеРесурсов.Ресурс В(&ДоступныеРесурсы)
	|	И ПланированиеРесурсов.Документ <> &ТекущийДокумент
	|	И ПланированиеРесурсов.НачалоИнтервала < &КонецПериода
	|	И ПланированиеРесурсов.КонецИнтервала > &НачалоПериода
	|;
	|
	|ВЫБРАТЬ
	|	ПланированиеРесурсовСВозможнымиДублями.Ресурс КАК Ресурс,
	|	ПланированиеРесурсовСВозможнымиДублями.Начало КАК Начало,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА НЕ ПланированиеРесурсовСВозможнымиДублями2.Ресурс ЕСТЬ NULL ТОГДА
	|				ВЫБОР
	|					КОГДА ПланированиеРесурсовСВозможнымиДублями.Конец > ПланированиеРесурсовСВозможнымиДублями2.Конец
	|						ТОГДА ПланированиеРесурсовСВозможнымиДублями.Конец
	|						ИНАЧЕ ПланированиеРесурсовСВозможнымиДублями2.Конец
	|				КОНЕЦ
	|			ИНАЧЕ ПланированиеРесурсовСВозможнымиДублями.Конец
	|		КОНЕЦ) КАК Конец
	|ПОМЕСТИТЬ ПланированиеРесурсов
	|ИЗ
	|	ПланированиеРесурсовСВозможнымиДублями КАК ПланированиеРесурсовСВозможнымиДублями
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ПланированиеРесурсовСВозможнымиДублями КАК ПланированиеРесурсовСВозможнымиДублями2
	|ПО
	|	ПланированиеРесурсовСВозможнымиДублями.Ресурс = ПланированиеРесурсовСВозможнымиДублями2.Ресурс
	|	И ПланированиеРесурсовСВозможнымиДублями.Начало <= ПланированиеРесурсовСВозможнымиДублями2.Начало
	|	И ПланированиеРесурсовСВозможнымиДублями.Конец > ПланированиеРесурсовСВозможнымиДублями2.Начало
	|СГРУППИРОВАТЬ ПО
	|	ПланированиеРесурсовСВозможнымиДублями.Ресурс,
	|	ПланированиеРесурсовСВозможнымиДублями.Начало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланированиеРесурсов.Ресурс КАК Ресурс,
	|	&НачалоПериода КАК Начало,
	|	МИНИМУМ(ПланированиеРесурсов.Начало) КАК Конец
	|ПОМЕСТИТЬ СвободныеИнтервалы
	|ИЗ
	|	ПланированиеРесурсов КАК ПланированиеРесурсов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланированиеРесурсов.Ресурс
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ПланированиеРесурсов.Начало) >= &НачалоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланированиеРабот.Ресурс,
	|	ПланированиеРабот.Конец,
	|	МИНИМУМ(ПланированиеРабот2.Начало)
	|ИЗ
	|	ПланированиеРесурсов КАК ПланированиеРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланированиеРесурсов КАК ПланированиеРабот2
	|		ПО ПланированиеРабот.Ресурс = ПланированиеРабот2.Ресурс
	|			И ПланированиеРабот.Конец <= ПланированиеРабот2.Начало
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланированиеРабот.Ресурс,
	|	ПланированиеРабот.Конец
	|
	|ИМЕЮЩИЕ
	|	ПланированиеРабот.Конец < МИНИМУМ(ПланированиеРабот2.Начало)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланированиеРабот.Ресурс,
	|	МАКСИМУМ(ПланированиеРабот.Конец),
	|	&КонецПериода
	|ИЗ
	|	ПланированиеРесурсов КАК ПланированиеРабот
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланированиеРабот.Ресурс
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ПланированиеРабот.Конец) <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПланированиеРесурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ресурс КАК Ресурс,
	|	ВложенныйЗапрос.Начало КАК Начало,
	|	ВложенныйЗапрос.Конец КАК Конец
	|ПОМЕСТИТЬ СвободныеИнтервалыРесурсовВрем
	|ИЗ
	|	(ВЫБРАТЬ
	|		РабочиеИнтервалыРесурсов.Ресурс КАК Ресурс,
	|		ВЫБОР
	|			КОГДА СвободныеИнтервалы.Начало ЕСТЬ NULL
	|					ИЛИ СвободныеИнтервалы.Начало < РабочиеИнтервалыРесурсов.Начало
	|				ТОГДА РабочиеИнтервалыРесурсов.Начало
	|			ИНАЧЕ СвободныеИнтервалы.Начало
	|		КОНЕЦ КАК Начало,
	|		ВЫБОР
	|			КОГДА НЕ СвободныеИнтервалы.Конец ЕСТЬ NULL
	|					И СвободныеИнтервалы.Конец < РабочиеИнтервалыРесурсов.Конец
	|				ТОГДА СвободныеИнтервалы.Конец
	|			ИНАЧЕ РабочиеИнтервалыРесурсов.Конец
	|		КОНЕЦ КАК Конец
	|	ИЗ
	|		РабочиеИнтервалыРесурсов КАК РабочиеИнтервалыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ СвободныеИнтервалы КАК СвободныеИнтервалы
	|			ПО (СвободныеИнтервалы.Начало <= РабочиеИнтервалыРесурсов.Начало
	|						И СвободныеИнтервалы.Конец >= РабочиеИнтервалыРесурсов.Начало
	|					ИЛИ РабочиеИнтервалыРесурсов.Начало <= СвободныеИнтервалы.Начало
	|						И СвободныеИнтервалы.Начало <= РабочиеИнтервалыРесурсов.Конец)
	|				И РабочиеИнтервалыРесурсов.Ресурс = СвободныеИнтервалы.Ресурс) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Конец > ВложенныйЗапрос.Начало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РабочиеИнтервалыРесурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СвободныеИнтервалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РабочиеИнтервалыРесурсовВременная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободныеИнтервалыРесурсовВрем.Ресурс КАК Ресурс,
	|	СвободныеИнтервалыРесурсовВрем.Начало КАК Начало,
	|	СвободныеИнтервалыРесурсовВрем.Конец  КАК Конец
	|ПОМЕСТИТЬ СвободныеИнтервалыРесурсов
	|ИЗ
	|	СвободныеИнтервалыРесурсовВрем КАК СвободныеИнтервалыРесурсовВрем
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ресурс";
	
	Запрос = Новый Запрос(ЗапросТекст);
	СвободныеИнтервалыРесурсов = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = СвободныеИнтервалыРесурсов;
	Запрос.УстановитьПараметр("ИнтервалыРесурсов", ИнтервалыРесурсов);
	Запрос.УстановитьПараметр("ДоступныеРесурсы" , ДоступныеРесурсы.ВыгрузитьКолонку("Ресурс"));
	Запрос.УстановитьПараметр("ТекущийДокумент"  , ТекущийДокумент);
	Запрос.УстановитьПараметр("НачалоПериода"    , НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("КонецПериода"     , ПредельныйСрокРасчетаПланирования);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Определение типа автомобиля по модели и варианту комплектации
//
Функция ОпределитьТипАвтомобиля()
	ЕстьДанные = Ложь;
	
	модельИКомплектация = Новый Массив;
	модельИКомплектация.Добавить(модель);
	
	модельИКомплектация.Добавить(комплектация);
	
	модельИКомплектация = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(модельИКомплектация, "ТипАвтомобиля");
	
	типАвтомобиляКомплектации = модельИКомплектация.Получить(комплектация);
	типАвтомобиляМодели = модельИКомплектация.Получить(модель);
	
	Если ЗначениеЗаполнено(типАвтомобиляКомплектации) Тогда
		ТипАвтомобиля = типАвтомобиляКомплектации;
		
		ЕстьДанные = Истина;
	ИначеЕсли ЗначениеЗаполнено(типАвтомобиляМодели) Тогда
		ТипАвтомобиля = типАвтомобиляМодели;
		
		ЕстьДанные = Истина;
	КонецЕсли;
	
	Возврат ЕстьДанные;
	
КонецФункции

// Составление интервалов доступных для планирования в указаном периоде
//
Функция ДоступныеИнтервалыДляОбъектаПланирования(Начало, Конец, ТипАвтоработы, Ресурс)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СвободныеИнтервалыРесурсов;
	Запрос.Текст = ПолучитьТекстЗапросаДляПоискаДоступныхИнтервалов();
	
	Запрос.УстановитьПараметр("Начало" , Начало);
	Запрос.УстановитьПараметр("Конец"  , Конец); 
	Запрос.УстановитьПараметр("ОсновнойЦех", ОсновнойЦех);
	Если Ресурс = Неопределено Тогда
		
		Запрос.УстановитьПараметр("Ресурсы", СоответствиеТиповАвтоработИРесурсов.Получить(ТипАвтоработы));
		
	Иначе
		
		Запрос.УстановитьПараметр("Ресурсы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ресурс));
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ПолучитьТекстЗапросаДляПоискаДоступныхИнтервалов() 
	Если  ПланироватьНаЦехДокумента Тогда
		Возврат "ВЫБРАТЬ
		        |	СвободныеИнтервалыРесурсов.Ресурс КАК Ресурс,
		        |	ВЫБОР
		        |		КОГДА СвободныеИнтервалыРесурсов.Начало < &Начало
		        |			ТОГДА &Начало
		        |		ИНАЧЕ СвободныеИнтервалыРесурсов.Начало
		        |	КОНЕЦ КАК Начало,
		        |	ВЫБОР
		        |		КОГДА СвободныеИнтервалыРесурсов.Конец > &Конец
		        |			ТОГДА &Конец
		        |		ИНАЧЕ СвободныеИнтервалыРесурсов.Конец
		        |	КОНЕЦ КАК Конец,
		        |	1 КАК Приоритет
		        |ИЗ
		        |	СвободныеИнтервалыРесурсов КАК СвободныеИнтервалыРесурсов
		        |ГДЕ
		        |	СвободныеИнтервалыРесурсов.Ресурс В(&Ресурсы)
		        |	И (СвободныеИнтервалыРесурсов.Начало <= &Начало
		        |				И СвободныеИнтервалыРесурсов.Конец > &Начало
		        |			ИЛИ СвободныеИнтервалыРесурсов.Начало < &Конец
		        |				И СвободныеИнтервалыРесурсов.Конец >= &Конец
		        |			ИЛИ СвободныеИнтервалыРесурсов.Начало >= &Начало
		        |				И СвободныеИнтервалыРесурсов.Начало < &Конец)
		        |	И СвободныеИнтервалыРесурсов.Ресурс <> &ОсновнойЦех
		        |
		        |ОБЪЕДИНИТЬ ВСЕ
		        |
		        |ВЫБРАТЬ
		        |	СвободныеИнтервалыРесурсов.Ресурс,
		        |	ВЫБОР
		        |		КОГДА СвободныеИнтервалыРесурсов.Начало < &Начало
		        |			ТОГДА &Начало
		        |		ИНАЧЕ СвободныеИнтервалыРесурсов.Начало
		        |	КОНЕЦ,
		        |	ВЫБОР
		        |		КОГДА СвободныеИнтервалыРесурсов.Конец > &Конец
		        |			ТОГДА &Конец
		        |		ИНАЧЕ СвободныеИнтервалыРесурсов.Конец
		        |	КОНЕЦ,
		        |	0
		        |ИЗ
		        |	СвободныеИнтервалыРесурсов КАК СвободныеИнтервалыРесурсов
		        |ГДЕ
		        |	СвободныеИнтервалыРесурсов.Ресурс = &ОсновнойЦех
		        |	И (СвободныеИнтервалыРесурсов.Начало <= &Начало
		        |				И СвободныеИнтервалыРесурсов.Конец > &Начало
		        |			ИЛИ СвободныеИнтервалыРесурсов.Начало < &Конец
		        |				И СвободныеИнтервалыРесурсов.Конец >= &Конец
		        |			ИЛИ СвободныеИнтервалыРесурсов.Начало >= &Начало
		        |				И СвободныеИнтервалыРесурсов.Начало < &Конец)
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Начало,
		        |	Приоритет
		        |ИТОГИ
		        |	МИНИМУМ(Начало)
		        |ПО
		        |	Ресурс";
	Иначе     
		Возврат "ВЫБРАТЬ
		        |	СвободныеИнтервалыРесурсов.Ресурс КАК Ресурс,
		        |	ВЫБОР
		        |		КОГДА СвободныеИнтервалыРесурсов.Начало < &Начало
		        |			ТОГДА &Начало
		        |		ИНАЧЕ СвободныеИнтервалыРесурсов.Начало
		        |	КОНЕЦ КАК Начало,
		        |	ВЫБОР
		        |		КОГДА СвободныеИнтервалыРесурсов.Конец > &Конец
		        |			ТОГДА &Конец
		        |		ИНАЧЕ СвободныеИнтервалыРесурсов.Конец
		        |	КОНЕЦ КАК Конец
		        |ИЗ
		        |	СвободныеИнтервалыРесурсов КАК СвободныеИнтервалыРесурсов
		        |ГДЕ
		        |	СвободныеИнтервалыРесурсов.Ресурс В(&Ресурсы)
		        |	И (СвободныеИнтервалыРесурсов.Начало <= &Начало
		        |				И СвободныеИнтервалыРесурсов.Конец > &Начало
		        |			ИЛИ СвободныеИнтервалыРесурсов.Начало < &Конец
		        |				И СвободныеИнтервалыРесурсов.Конец >= &Конец
		        |			ИЛИ СвободныеИнтервалыРесурсов.Начало >= &Начало
		        |				И СвободныеИнтервалыРесурсов.Начало < &Конец)
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Начало
		        |ИТОГИ
		        |	МИНИМУМ(Начало)
		        |ПО
		        |	Ресурс";
	КонецЕсли;
КонецФункции

// Выполнить планирование в указаном периоде
// если не указаны рамки интервала планируется в глобальном интервале
//
Функция Запланировать(Начало, Конец)
	СЕКУНД_В_ЧАСЕ = 3600;
	
	началоПланированияСледующегоОбъекта = Начало;
	
	планированиеРезультат = ПланированиеИнтервалы.Выгрузить().СкопироватьКолонки();
	
	ВыполнитьПланированиеОтРесурса = ПланироватьОтРесурса;
	ПредыдущийРесурс = Неопределено;
	ПланироватьБезРазбиения = ТипыАвтоработБезРазбиения(ПланированиеОбъекты.ВыгрузитьКолонку("ТипАвтоработы"));
	
	Для Каждого Объект Из ПланированиеОбъекты Цикл
		
		отборПоРесурсу = Неопределено;
		Если ВыполнитьПланированиеОтРесурса И НЕ ЭтоВспомогательнаяАвторабота(Объект) Тогда
			// если требуется заполнение от ресурса поставим необходимые отборы
			
			Если ЗначениеЗаполнено(НачалоПериодаРасчетаОтРесурса)
				И началоПланированияСледующегоОбъекта > НачалоПериодаРасчетаОтРесурса Тогда
				
				ТекстОшибки = НСтр("ru = 'Не удалось расположить вспомогательные работы до начала основных(%1)'");
				
				Возврат АвтоматическоеПланированиеРесурсов.Ошибка(
					СтрШаблон(ТекстОшибки, Формат(НачалоПериодаРасчетаОтРесурса, "ДФ='dd.MM.yyyy HH:mm'")));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НачалоПериодаРасчетаОтРесурса) Тогда
				
				началоПланированияСледующегоОбъекта = НачалоПериодаРасчетаОтРесурса;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РесурсПланирования) Тогда
				
				отборПоРесурсу = РесурсПланирования;
				
			КонецЕсли;
			
			ВыполнитьПланированиеОтРесурса = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(РесурсПриемкиВыдачи)
			И ЭтоВспомогательнаяАвторабота(Объект)
			И ЭтоПриемкаИлиВыдача(Объект) Тогда
			
			// Выполняем планирование приемки и выдачи на указаном ресурсе,
			// так же контралируем планирование приемки и выдачи на одном ресурсе.
			отборПоРесурсу = РесурсПриемкиВыдачи;
			
		КонецЕсли;
		
		// получим доступные ресурсы и интервалы для текущего объекта планирования
		ДоступныеИнтервалыРесурсы = ДоступныеИнтервалыДляОбъектаПланирования(
			началоПланированияСледующегоОбъекта,
			Конец,
			Объект.ТипАвтоработы,
			отборПоРесурсу);
			
		ВариантыПланирования = Новый Массив;
		
		// считам доступные варианты распределения
		Пока ДоступныеИнтервалыРесурсы.Следующий() Цикл
			
			ТребуетсяРаспланировать = Объект.НормаВремениСправочная;
			ИнтервалыРесурса = Новый Массив;
			началоПланированияСледующегоИнтервала = началоПланированияСледующегоОбъекта;
			ДоступныеИнтервалы = ДоступныеИнтервалыРесурсы.Выбрать();
			
			Если ТребуетсяРаспланировать = 0 Тогда 
				ТекстОшибки = НСтр("ru = 'Не удалось запланировать <%1>!
				|Не заполнена норма времени в объекте планирования.'");
				Возврат АвтоматическоеПланированиеРесурсов.Ошибка(СтрШаблон(ТекстОшибки, Объект.Объект));
			КонецЕсли;
			
			Пока ДоступныеИнтервалы.Следующий() И ТребуетсяРаспланировать > 0 Цикл
				
				ПродолжительностьИнтервала = ДоступныеИнтервалы.Конец - ДоступныеИнтервалы.Начало;
				
				Если НЕ ОдинИнтервалНаОдинОбъект
					И ПланироватьБезРазбиения.Найти(Объект.ТипАвтоработы) = Неопределено
					И ПродолжительностьИнтервала < ТребуетсяРаспланировать Тогда
					
					ТребуетсяРаспланировать = ТребуетсяРаспланировать - ПродолжительностьИнтервала;
					ИнтервалыРесурса.Добавить(ДоступныеИнтервалы.Начало);
					ИнтервалыРесурса.Добавить(ДоступныеИнтервалы.Конец);
					
				ИначеЕсли ПродолжительностьИнтервала >= ТребуетсяРаспланировать Тогда
					
					НачалоПланированияСледующегоИнтервала = ДоступныеИнтервалы.Начало + ТребуетсяРаспланировать;
					ТребуетсяРаспланировать = 0;
					ИнтервалыРесурса.Добавить(ДоступныеИнтервалы.Начало);
					ИнтервалыРесурса.Добавить(началоПланированияСледующегоИнтервала);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТребуетсяРаспланировать = 0 И ИнтервалыРесурса.Количество() > 0 Тогда
				
				ВариантПланирования = Новый Структура("Ключ, Значение", ДоступныеИнтервалыРесурсы.Ресурс, ИнтервалыРесурса);
				ВариантыПланирования.Добавить(ВариантПланирования); 
				
			КонецЕсли;
			
		КонецЦикла;
		
		// анализируем получивщиеся варианты
		Если ВариантыПланирования.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось запланировать <%1>!
				|Нет свободных ресурсов для выполнения работы данного типа,
				|либо настройки Типа ресурса не соответствуют выбранным Автоработам и/или Модели (комплектации).'");
			
			Возврат АвтоматическоеПланированиеРесурсов.Ошибка(СтрШаблон(ТекстОшибки, Объект.Объект));
		КонецЕсли;
		
		ПереспективныйВариант = Неопределено;
		Для Каждого Вариант Из ВариантыПланирования Цикл
			
			КонецТекущегоВарианта = Вариант.Значение[Вариант.Значение.ВГраница()];
			
			Если ПереспективныйВариант = Неопределено
				ИЛИ ПереспективныйВариант.Конец > КонецТекущегоВарианта
				ИЛИ (Вариант.Ключ = предыдущийРесурс И ПереспективныйВариант.Конец = КонецТекущегоВарианта) Тогда
				
				ПереспективныйВариант = Новый Структура;
				ПереспективныйВариант.Вставить("Ресурс", Вариант.Ключ);
				ПереспективныйВариант.Вставить("Конец" , КонецТекущегоВарианта);
				ПереспективныйВариант.Вставить("Интервалы", Вариант.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		началоПланированияСледующегоОбъекта = ПереспективныйВариант.Конец;
		
		Если НЕ ЗначениеЗаполнено(РесурсПриемкиВыдачи)
			И ЭтоВспомогательнаяАвторабота(Объект)
			И Объект.ТипАвтоработы = Справочники.ТипыАвторабот.Приемка Тогда
			
			РесурсПриемкиВыдачи = ПереспективныйВариант.Ресурс;
			
		КонецЕсли;
		
		интервалыВарианта = ПереспективныйВариант.Интервалы;
		предыдущийРесурс  = ПереспективныйВариант.Ресурс;
		
		Если ТипЗнч(ПереспективныйВариант.Ресурс) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			имяПоля = "Исполнитель";
			
		Иначе
			
			имяПоля = "РабочееМесто";
			
		КонецЕсли;
		
		Итератор = 0;
		Пока Итератор < интервалыВарианта.Количество() Цикл
			НоваяСтрокаИнтервала = планированиеРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаИнтервала, Объект);
			
			НоваяСтрокаИнтервала[имяПоля] = ПереспективныйВариант.Ресурс;
			
			НоваяСтрокаИнтервала.Начало = интервалыВарианта[Итератор];
			НоваяСтрокаИнтервала.Конец  = интервалыВарианта[Итератор + 1];
		
			НоваяСтрокаИнтервала.НормаВремени = НоваяСтрокаИнтервала.Конец - НоваяСтрокаИнтервала.Начало;
			
			Итератор = Итератор + 2;
		КонецЦикла;
	КонецЦикла;
	
	// перенесем в отновную таблицу планирования если удалось распланировать
	Для Каждого строка Из планированиеРезультат Цикл
		ЗаполнитьЗначенияСвойств(ПланированиеИнтервалы.Добавить(), строка);
	КонецЦикла;
	
	Возврат Новый Структура("Ошибка", Ложь);
	
КонецФункции

// Выполнить планирование с попыткой уместить интервалы в пределах однго дня
//
Функция ЗапланироватьНаДень()
	УдалосьЗапланировать = Ложь;
	
	Начало = НачалоПериодаРасчета;
	Пока Начало < ПредельныйСрокРасчетаПланирования Цикл
		Конец = Мин(ПредельныйСрокРасчетаПланирования, КонецДня(Начало));
		
		Если НЕ Запланировать(Начало, Конец).Ошибка Тогда
			УдалосьЗапланировать = Истина;
			Прервать;
		КонецЕсли;
		
		Начало = Конец + 1;
	КонецЦикла;
	
	Возврат УдалосьЗапланировать;
КонецФункции

#КонецОбласти

#КонецЕсли