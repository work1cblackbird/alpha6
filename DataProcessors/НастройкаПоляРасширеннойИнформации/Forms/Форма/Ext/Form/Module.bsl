///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "НастройкаПоляРасширеннойИнформации"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем мПредыдущийТекущийОбъект;
&НаСервере
Перем СписокЭлементовСРеквизитами;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПолноеИмяОбъекта")  Тогда
		ПолноеИмяОбъекта = Параметры.ПолноеИмяОбъекта;
		
		// Передана ссылка
		Если Параметры.Свойство("СсылкаНаОбъект") Тогда
			СсылкаНаОбъект = Параметры.СсылкаНаОбъект;
			ПолноеИмяОбъекта = СсылкаНаОбъект.Метаданные().ПолноеИмя();
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Служебная обработка. Вызывается из специального меню в формах списков. Интерактивная работа с обработкой не предполагается.'")
		);
		Возврат;
	КонецЕсли;
	
	ШиринаЛевойКолонкиАбсолютная	= Ложь;
	ШиринаПравойКолонкиАбсолютная	= Ложь;
	ШиринаЛевойКолонки				= 75;
	ШиринаПравойКолонки				= 25;
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект);
	
	ЗаполнитьДеревоОбъекты(ПолноеИмяОбъекта);
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	// Если в дереве объектов только один объект то он устанавливается как текущий.
	Если ДеревоОбъекты.ПолучитьЭлементы().Количество() = 1 Тогда
		Элементы.ДеревоОбъекты.ТекущаяСтрока =  ДеревоОбъекты.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	// Установим заголовок формы
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Параметры.ПолноеИмяОбъекта);
	Если ОбъектМетаданных<> Неопределено Тогда
		Заголовок = "" + ОбъектМетаданных.Синоним + ":" + НСтр("ru = 'настройка полей расширенной информации'");
	Иначе
		Заголовок = НСтр("ru = 'Настройка полей расширенной информации'");
	КонецЕсли;
	
КонецПроцедуры //ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		// Формируем описание обработчика перехвата закрытия формы.
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",
															ЭтотОбъект, "ПередЗакрытием");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить данные?'");
		
		// Получаем подтверждение операции от пользователя.
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры //ПередЗакрытием()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при двойном щелчке мыши (нажатии Enter) в ячейке таблицы "Список".
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока      - Ссылка       - Значение выбранной строки.
//  Поле                 - ПолеФормы    - Активное поле.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ДеревоОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоОбъект Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		КомандаДобавитьРеквизит(Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ДеревоОбъектыВыбор()

// Обработчик события возникающего на клиенте при активизации строки списка.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДеревоОбъектыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоОбъектыПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры //ДеревоОбъектыПриАктивизацииСтроки()

&НаКлиенте
Процедура Подключаемый_ДеревоОбъектыПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	
	Если КореньОбъекта = Неопределено Тогда
		ТекущийОбъектВДереве = Неопределено;
		Элементы.ДеревоОтображаемыеРеквизитыКнопкаЗаполнитьПоУмолчанию.Доступность = Ложь;
	Иначе
		ТекущийОбъектВДереве = КореньОбъекта.Объект;
		Элементы.ДеревоОтображаемыеРеквизитыКнопкаЗаполнитьПоУмолчанию.Доступность = Истина;
	КонецЕсли;
	
	Если ТекущийОбъектВДереве <> мПредыдущийТекущийОбъект Тогда
		ПриСменеТекущегоОбъекта(ТекущийОбъектВДереве, мПредыдущийТекущийОбъект);
		мПредыдущийТекущийОбъект = ТекущийОбъектВДереве;
	Иначе
		мПредыдущийТекущийОбъект = ТекущийОбъектВДереве;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при нажатии на надпись "Результат".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура РезультатПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры //РезультатПриНажатии()

&НаКлиенте
Процедура ТипЗначенияРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоСсылка Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ТипЗначенияРеквизита = "Строка";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаШириныКолонокПриИзменении(Элемент)
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
	
	КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
	КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
	КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
	КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
	
	Модифицированность = Истина;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	
КонецПроцедуры //НастройкаШириныКолонокПриИзменении()

&НаКлиенте
Процедура ШиринаКолонкиВПикселяхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
	
	КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
	КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
	КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
	КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
	
	Модифицированность = Истина;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	
КонецПроцедуры //ШиринаКолонкиВПикселахПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтносительнаяШиринаКолонокВПроцентахПриИзменении()
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
	
	КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
	КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
	КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
	КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
	
	Модифицированность = Истина;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	
КонецПроцедуры //Подключаемый_ОтносительнаяШиринаКолонокВПроцентахПриИзменении()

&НаКлиенте
Процедура ОтносительнаяШиринаКолонокВПроцентахПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтносительнаяШиринаКолонокВПроцентахПриИзменении", 0.1, Истина);
	
КонецПроцедуры //ОтносительнаяШиринаКолонокВПроцентахПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтображаемыеРеквизиты

&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПриИзменении(Элемент)
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	
КонецПроцедуры //ДеревоОтображаемыеРеквизитыПриИзменении()

// Обработчик события возникающего на клиенте при окончании перетаскивания в поле - приемнике данных.
//
// Параметры:
//  Элемент                 - ПолеФормы               - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Содержит перетаскиваемое значение, тип действия и возможные
//                                                      действия при перетаскивании.
//  СтандартнаяОбработка    - Булево                  - В данный параметр передается признак выполнения стандартной
//                                                      (системной) обработки события.
//  Строка                  - Содержит порядковый номер строки или ссылку на текущий объект.
//  Поле                     - Поле, с которым связана данная колонка таблицы, над которой находится объект.
//
&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ТекущиеДанные = ДеревоОбъекты.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоОбъект Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		КомандаДобавитьРеквизит(Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ДеревоПечатныхФормПеретаскивание()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование = Истина Тогда
		Возврат;
	КонецЕсли;
	
	КомандаДеревоОтображаемыеРеквизитыДобавитьРазделитель(Неопределено);
	
КонецПроцедуры //ДеревоОтображаемыеРеквизитыПередНачаломДобавления()

// Обработчик события возникающего на клиенте перед удалением строки или группы строк.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	КомандаУдалитьРеквизит(Неопределено);
	
КонецПроцедуры //ДеревоОтображаемыеРеквизитыПередУдалением()

// Обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры //ДеревоОтображаемыеРеквизитыПриОкончанииРедактирования()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "ОК".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если ПроверитьСохранить() Тогда
		ДанныеБылиМодифицированы = Модифицированность;
		Если НЕ ВладелецФормы = Неопределено Тогда
			ТекущаяСтрока = ВладелецФормы.элементы.Список.ТекущаяСтрока;
			ВладелецФормы.РасширеннаяИнформация = РасширеннаяИнформацияВызовСервера.СформироватьРасширеннуюИнформациюОбОбъекте(ТекущаяСтрока);
			ВладелецФормы.ОбновитьОтображениеДанных();
		КонецЕсли;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры //КомандаОК()

// Обработчик события возникающего на клиенте при выполнении команды "Добавить реквизит".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаДобавитьРеквизит(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоЗаголовок И Не ТекущиеДанные.ЭтоОбъект Тогда
		ДобавитьРеквизитВДеревоОтображаемыхРеквизитов(ТекущиеДанные);
		Модифицированность = Истина;
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры //КомандаДобавитьРеквизит()

// Обработчик события возникающего на клиенте при выполнении команды "Удалить реквизит".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаУдалитьРеквизит(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УдалитьРеквизитИзДереваОтображаемыхРеквизитов(ТекущиеДанные);
		Модифицированность = Истина;
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры //КомандаУдалитьРеквизит()

// Обработчик события возникающего на клиенте при выполнении команды "Добавить разделитель".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаДеревоОтображаемыеРеквизитыДобавитьРазделитель(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьРазделительВДеревоОтображаемыхРеквизитов(ТекущиеДанные);
		Модифицированность = Истина;
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры //КомандаДеревоОтображаемыеРеквизитыДобавитьРазделитель()

// Обработчик события возникающего на клиенте при выполнении команды "Заполнить по умолчанию".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеКорень = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если ТекущиеДанныеКорень = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы.
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",	ЭтотОбъект, 
															Новый Структура("КомандаЗаполнитьПоУмолчанию",ТекущиеДанныеКорень));
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Текущие настройки будут заменены настройками по умолчанию.
			|Продолжить?'");
		
		// Получаем подтверждение операции от пользователя.
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
	
		ЗаполнитьНастройкиПоУмолчанию(ТекущиеДанныеКорень.Объект);
		ТекущиеДанныеКорень.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
		
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
		
		Модифицированность = Истина; 
		
		КоллекцияЭлементовДерева=ДеревоОбъекты.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
			Элементы.ДеревоОбъекты.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры //КомандаЗаполнитьПоУмолчанию()

// Процедура сохраняет настройки полей отображения содержания в файл.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СохранитьФайлНастроекДляОбъекта(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеКорень = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если ТекущиеДанныеКорень = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		// Формируем описание обработчика перехвата закрытия формы.
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, 
															"СохранитьИзменения");
		
		// Формируем текст вопроса.
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить данные?'");
		
		// Получаем подтверждение операции от пользователя.
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ПродолжитьСохранитьФайлНастроекДляОбъекта();
		
	КонецЕсли;
	
КонецПроцедуры //СохранитьФайлНастроекДляОбъекта()

// Процедура сохраняет настройки полей отображения содержания в файл.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗагрузитьФайлНастроекДляОбъекта(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеКорень = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если ТекущиеДанныеКорень = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы.
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, 
														Новый Структура("КомандаЗагрузитьНастройки",ТекущиеДанныеКорень));
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Текущие настройки будут заменены настройками из файла.
			|Продолжить?'");
		
		// Получаем подтверждение операции от пользователя.
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПродолжитьЗагрузитьФайлНастроекДляОбъекта();
		
	КонецЕсли;
	
КонецПроцедуры //ЗагрузитьФайлНастроекДляОбъекта()

// Обработчик события нажатия кнопки "Показать реквизиты" контекстной панели дерева.
&НаКлиенте
Процедура ПоказатьРеквизиты(Команда)
	// Получаем текущую строку дерева.
	ТекущаяСтрока = Элементы.ДеревоОбъекты.ТекущиеДанные;
	ТекЭлемент = ТекущаяСтрока.ПолучитьЭлементы();
	
	// Для объекта, строки табличной части и уже развернутого реквизита - ничего не делаем.
	Если ТекущаяСтрока.ЭтоОбъект ИЛИ ТекущаяСтрока.ЭтоРеквизитТабличнойЧасти ИЛИ ТекущаяСтрока.ЭтоРеквизитЭлементаСРеквизитами Тогда
		// формируем сообщение пользователю
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для данного элемента невозможно вывести реквизиты.'");
		Сообщение.Сообщить();
	Иначе
		// Добавляем реквизиты
		ДобавитьРеквизиты(ТекущаяСтрока.Объект);
		
		// Делаем развертку дерева
		ЭлементыДерева = ДеревоОбъекты.ПолучитьЭлементы();
		ЭлементДерева = ЭлементыДерева[0];
		Элементы.ДеревоОбъекты.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
КонецПроцедуры

// Обработчик события нажатия кнопки "Убрать реквизиты" контекстной панели дерева.
&НаКлиенте
Процедура УбратьРеквизиты(Команда)
	// Получаем текущую строку дерева.
	ТекущаяСтрока = Элементы.ДеревоОбъекты.ТекущиеДанные;
	ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	
	// Смотрим, есть ли подчиненные строки.
	Если ПодчиненныеСтроки.Количество() > 0 И ПодчиненныеСтроки[0].ЭтоРеквизитЭлементаСРеквизитами Тогда
		// Чистим
		УдалитьПодчиненныеРеквизитыДерева(ТекущаяСтрока.Объект);
		
		// Перезаполним представление.
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
		
		// делаем развертку дерева
		ЭлементыДерева = ДеревоОбъекты.ПолучитьЭлементы();
		ЭлементДерева = ЭлементыДерева[0];
		Элементы.ДеревоОбъекты.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипЗначенияРеквизита");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоТабличнаяЧасть");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Табличная часть'"));
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипЗначенияРеквизита");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоТабличнаяЧасть");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипЗначенияРеквизита");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоСсылка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Положение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.Положение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ВТойЖеСтроке";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В той же строке'"));
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Положение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.Положение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "НоваяСтрока";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Новая строка'"));
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипЗначенияРеквизита");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ТипЗначенияРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Гиперссылка";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Гиперссылка'"));
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипЗначенияРеквизита");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ТипЗначенияРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Строка";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Строка");
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Размещение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоРеквизитТабличнойЧасти");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", "Истина");
	
	// Шрифт
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеОбъекта");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОбъекты.ПризнакЕстьНастройки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", WindowsШрифты.ШрифтДиалоговИМеню);
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Размещение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.Размещение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ПраваяКолонка";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В правой колонке'"));
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Размещение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.Размещение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ЛеваяКолонка";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В левой колонке'"));
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Размещение");
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.Размещение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ПоШирине";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.Размещение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'По ширине'"));
	
	// Текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОригинальноеПредставлениеРеквизита");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Разделитель>'"));
	
	// Цвет фона, текст
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Размещение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоРеквизитТабличнойЧасти");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаФормы);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипЗначенияРеквизита");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоТабличнаяЧасть");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизитыПредставлениеСписком");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЭтоТабличнаяЧасть");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры // УстановитьУсловноеОформление()

// Добавление данных по реквизитам.
&НаСервере
Процедура ДобавитьРеквизиты(Объект, УжеДобавленныеРеквизиты = Неопределено)
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	
	СтрокаДереваГлавная = Дерево.Строки[0];
	
	КореньОбъекта = СтрокаДереваГлавная.Строки.Найти(Объект, "Объект");
	
	КореньОбъекта.Строки.Очистить();
	
	// Получим полное имя необходимого нам объекта.
	ПолноеИмяОбъекта = СтрокаДереваГлавная.Объект;
	
	Если ТипЗнч(ПолноеИмяОбъекта) = Тип("Тип") Тогда
		МдОбъект = Метаданные.НайтиПоТипу(ПолноеИмяОбъекта); 
	Иначе
		МдОбъект = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	КонецЕсли;
	
	// Общая строка
	НайденнаяСтрока = Неопределено;
	
	// Ищем в реквизитах
	НайденнаяСтрокаРеквизиты   = МдОбъект.Реквизиты.Найти(Объект);
	
	Если НайденнаяСтрокаРеквизиты <> Неопределено Тогда
		НайденнаяСтрока = НайденнаяСтрокаРеквизиты;
	Иначе
		// Ищем в общих реквизитах
		НайденнаяСтрокаОбщие = Метаданные.ОбщиеРеквизиты.Найти(Объект);
		Если НайденнаяСтрокаОбщие <> Неопределено Тогда
			НайденнаяСтрока = НайденнаяСтрокаОбщие;
		Иначе
			// Ищем в стандартных
			Для Каждого ТекРеквизит Из МдОбъект.СтандартныеРеквизиты Цикл
				Если ТекРеквизит.Имя = Объект Тогда
					НайденнаяСтрока = ТекРеквизит;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		// Получаем массив типов
		МассивТипов = НайденнаяСтрока.Тип.Типы();
		
		// Получаем тип
		Тип = МассивТипов[0];
		
		// Получаем метаданные типа.
		МетаТип = Метаданные.НайтиПоТипу(Тип);
		
		Если МетаТип <> Неопределено Тогда
			// Получаем полное имя объекта.
			ИмяОбъекта = МетаТип.ПолноеИмя();
			
			// Получаем метаданные объекта.
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
			
			// Составим список исключений.
			ПропуститьРеквизиты = ",ПометкаУдаления,Проведен,Предопределенный,ЭтоГруппа,ИмяПредопределенныхДанных,ВходитВГруппу,Ссылка,Родитель,Владелец,";
			
			Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				Если СтрНайти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если УжеДобавленныеРеквизиты <> Неопределено И УжеДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = КореньОбъекта.Строки.Добавить();
				
				НоваяСтрока.Объект        = Реквизит.Имя;
				НоваяСтрока.Представление = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
				НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
				НоваяСтрока.ЭтоРеквизитЭлементаСРеквизитами = Истина;
			КонецЦикла;
				
			Если ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта) Тогда
				Для Каждого Реквизит Из МетаданныеОбъекта.РеквизитыАдресации Цикл
					
					Если СтрНайти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если УжеДобавленныеРеквизиты <> Неопределено И УжеДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = КореньОбъекта.Строки.Добавить();
					НоваяСтрока.Объект        = Реквизит.Имя;
					НоваяСтрока.Представление = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
					НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
					НоваяСтрока.ЭтоРеквизитЭлементаСРеквизитами = Истина;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ОбщегоНазначения.ЭтоЖурналДокументов(МетаданныеОбъекта) Тогда
				
				Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
					Если СтрНайти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если УжеДобавленныеРеквизиты <> Неопределено И УжеДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = КореньОбъекта.Строки.Добавить();
					НоваяСтрока.Объект        = Реквизит.Имя;
					НоваяСтрока.Представление = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
					НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
					НоваяСтрока.ЭтоРеквизитЭлементаСРеквизитами = Истина;
				КонецЦикла;
				
			КонецЕсли;
			
			// Добавим общие реквизиты для документов.
			Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
				Если СтрНайти(ПропуститьРеквизиты, "," + ОбщийРеквизит.Имя + ",") > 0 ИЛИ НЕ ОбщийРеквизит.Состав.Найти(МетаданныеОбъекта).Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
					Продолжить;
				КонецЕсли;
				
				Если УжеДобавленныеРеквизиты <> Неопределено И УжеДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = КореньОбъекта.Строки.Добавить();
				НоваяСтрока.Объект        = ОбщийРеквизит.Имя;
				НоваяСтрока.Представление = ?(ЗначениеЗаполнено(ОбщийРеквизит.Представление()), ОбщийРеквизит.Представление(), ОбщийРеквизит.Имя);
				НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
				НоваяСтрока.ЭтоРеквизитЭлементаСРеквизитами = Истина;
			КонецЦикла;
			
			КореньОбъекта.ЭтоЭлементСРеквизитами = Истина;
		
			ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъекты");

		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

// Удаление данных о подчиненных реквизитах из дерева.
//
&НаСервере
Процедура УдалитьПодчиненныеРеквизитыДерева(Объект)
	// Получаем дерево.
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");	
	
	// Ищем реквизит на первом уровне.
	КореньОбъекта = Дерево.Строки[0].Строки.Найти(Объект, "Объект");
	
	// Чистим подчиненные
	Если КореньОбъекта <> Неопределено Тогда
		КореньОбъекта.Строки.Очистить();
	КонецЕсли;
	
	// Преобразуем обратно в дерево.
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъекты");
	
	// Дерево отображаемых реквизитов.
	ТекДеревоОтображаемыеРеквизиты = РеквизитФормыВЗначение("ДеревоОтображаемыеРеквизиты");
	
	// Ищем в дереве на первом уровне.
	КореньОбъекта = ТекДеревоОтображаемыеРеквизиты.Строки.Найти(Объект, "Реквизит");
	
	// Чистим подчиненные
	Если КореньОбъекта <> Неопределено И КореньОбъекта.Строки.Количество() > 0 Тогда
		ТекДеревоОтображаемыеРеквизиты.Строки.Удалить(КореньОбъекта);
	КонецЕсли;
	
	// Преобразуем обратно в дерево.
	ЗначениеВРеквизитФормы(ТекДеревоОтображаемыеРеквизиты, "ДеревоОтображаемыеРеквизиты");
КонецПроцедуры

// Формирует дерево реквизитов для заданного объекта.
//
// Параметры:
//  ОграничениеТипов     - Строка - Полное имя объекта.
//
&НаСервере
Процедура ЗаполнитьДеревоОбъекты(ОграничениеТипов)
	
	ДеревоОбъектыЭлементы = ДеревоОбъекты.ПолучитьЭлементы();
	Если ДеревоОбъектыЭлементы.Количество() > 0 Тогда
		ДеревоОбъекты.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	СтрокаБланк = ДеревоОбъектыЭлементы.Добавить();
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	ДеревоНастроекБланк = Дерево.Строки[0].ДеревоНастроек.Скопировать();
	ДеревоОбъектыЭлементы.Удалить(СтрокаБланк);
	Дерево = Неопределено;
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	
	// Получим существующие настройки.
	ТаблицаНастройки = РасширеннаяИнформацияВызовСервера.НастройкиПолейРасширеннойИнформацииПолучитьНастройки(ОграничениеТипов);
	
	ДобавляемыеОбъекты = ПолучитьСписокОбъектов(ОграничениеТипов);
	
	Для Каждого ДобавляемыйОбъект Из ДобавляемыеОбъекты Цикл
		
		СтрокаНастройки = ТаблицаНастройки.Найти(ДобавляемыйОбъект.Значение, "Объект");
		Если СтрокаНастройки <> Неопределено И ТипЗнч(СтрокаНастройки.ДеревоНастроек) = Тип("ДеревоЗначений") 
			И СтрокаНастройки.ДеревоНастроек.Строки.Количество() > 0 Тогда
			
			СохраненноеТекущееДеревоНастроек = СтрокаНастройки.ДеревоНастроек;
		Иначе
			СохраненноеТекущееДеревоНастроек = Неопределено;
		КонецЕсли;
		
		КореньОбъекта = ДобавитьОбъектВДерево(Дерево, ДобавляемыйОбъект.Значение,, СохраненноеТекущееДеревоНастроек);
		Если КореньОбъекта <> Неопределено Тогда
			Если СохраненноеТекущееДеревоНастроек <> Неопределено Тогда
				КореньОбъекта.ДеревоНастроек = ДеревоНастроекБланк.Скопировать();
				СкопироватьДерево(КореньОбъекта.ДеревоНастроек.Строки, СохраненноеТекущееДеревоНастроек.Строки);
				КореньОбъекта.ПризнакЕстьНастройки = Истина;
			КонецЕсли;
			
			Если СтрокаНастройки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(КореньОбъекта, СтрокаНастройки,, "Объект,ДеревоНастроек");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъекты");
	
	// Если в сохраненных есть элементы с реквизитами то добавим в дерево реквизиты которые еще не выведены.
	Если СписокЭлементовСРеквизитами <> Неопределено И СписокЭлементовСРеквизитами.Количество() > 0 Тогда
		Для Каждого ТекЭлемент Из СписокЭлементовСРеквизитами Цикл
			ДобавитьРеквизиты(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьДеревоОбъекты()

// Заполняет строки дерева реквизитов для заданного объекта из строк источника.
//
// Параметры:
//
&НаСервере
Процедура СкопироватьДерево(СтрокиПриемник, СтрокиИсточник, УстановитьОбъектВСтроках = Неопределено)
	
	Для Каждого СтрокаИсточник Из СтрокиИсточник Цикл
		НоваяСтрока = СтрокиПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
		Если УстановитьОбъектВСтроках <> Неопределено Тогда
			НоваяСтрока.Объект = УстановитьОбъектВСтроках;
		КонецЕсли;
		Если СтрокаИсточник.Строки.Количество() > 0 Тогда
			СкопироватьДерево(НоваяСтрока.Строки, СтрокаИсточник.Строки, УстановитьОбъектВСтроках);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //СкопироватьДерево()

// Формирует список возможных объектов.
//
// Параметры:
//  ОграничениеТипов     - Строка - Полное имя объекта.
//
&НаСервере
Функция ПолучитьСписокОбъектов(ОграничениеТипов)
	
	Список = Новый СписокЗначений();
	
	Если ТипЗнч(ОграничениеТипов) = Тип("Тип") Тогда
		МдОбъект = Метаданные.НайтиПоТипу(ОграничениеТипов); 
	Иначе
		МдОбъект = Метаданные.НайтиПоПолномуИмени(ОграничениеТипов);
	КонецЕсли;
	Если МдОбъект <> Неопределено Тогда
		Если  ПравоДоступа("Чтение", МдОбъект) Тогда
			Список.Добавить(ОграничениеТипов, МдОбъект.Представление());
		КонецЕсли;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции //ПолучитьСписокОбъектов()

// Формирует дерево реквизитов для переданного объекта и добавляет объект в дерево.
//
// Параметры:
//  Корень          - ДеревоЗначений - Дерево для которого необходимо добавить строки.
//  ТипОбъектаСтрокой - Строка - Содержит полное имя объекта добавляемого в дерево.
//  Представление  - Строка - Содержите представление объекта добавляемого в дерево.
//  СохраненноеТекущееДеревоНастроек
//
&НаСервере
Функция ДобавитьОбъектВДерево(Корень, ТипОбъектаСтрокой, Представление = Неопределено, СохраненноеТекущееДеревоНастроек = Неопределено)
	
	Если ТипЗнч(ТипОбъектаСтрокой) = Тип("Строка") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТипОбъектаСтрокой);
	ИначеЕсли ТипЗнч(ТипОбъектаСтрокой) = Тип("Тип") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъектаСтрокой);
	Иначе
		МетаданныеОбъекта = Неопределено;
	КонецЕсли;
		
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		
		Точка = СтрНайти(ТипОбъектаСтрокой, "."); 
		ТипОбъекта = Лев(ТипОбъектаСтрокой,Точка-1);
		Если ТипОбъекта = "ЖурналДокументов" Тогда
			ПредставлениеТипа = НСтр("ru = 'Журнал документов'");
		ИначеЕсли ТипОбъекта = "БизнесПроцесс" Тогда
			ПредставлениеТипа = НСтр("ru = 'Бизнес процесс'");
		Иначе
			ПредставлениеТипа = ТипОбъекта;
		КонецЕсли;
		
		Представление = ПредставлениеТипа + " """ + МетаданныеОбъекта.Представление() + """";

	КонецЕсли;
	
	НоваяСтрока = Корень.Строки.Добавить();
	НоваяСтрока.Объект        = ТипОбъектаСтрокой;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ЭтоОбъект     = Истина;
	
	КореньОбъекта = НоваяСтрока;
	
	// Составим список исключений
	ПропуститьРеквизиты = ",ПометкаУдаления,Проведен,Предопределенный,ЭтоГруппа,ИмяПредопределенныхДанных,ВходитВГруппу,Ссылка,Родитель,Владелец,";
	СписокЭлементовСРеквизитами = Новый Структура;
	
	Если СохраненноеТекущееДеревоНастроек = Неопределено Тогда
		ДобавленныеРеквизиты = Неопределено;
	Иначе
		ЕстьЭлементСРеквизитами = (СохраненноеТекущееДеревоНастроек.Колонки.Найти("ЭтоЭлементСРеквизитами") <> Неопределено);
		ДобавленныеРеквизиты = Новый Массив();
		Для Каждого СтрокаДерева Из СохраненноеТекущееДеревоНастроек.Строки Цикл
			Если СтрокаДерева.ЭтоТабличнаяЧасть <> Истина И СтрокаДерева.ЭтоРазделитель <> Истина Тогда
				// Если это элемент с реквизитами
				Если ЕстьЭлементСРеквизитами И СтрокаДерева.ЭтоЭлементСРеквизитами Тогда
					УжеДобавленныеРеквизиты = Новый Массив;
					
					Для Каждого ТекРеквизит Из СтрокаДерева.Строки Цикл
						УжеДобавленныеРеквизиты.Добавить(ТекРеквизит.Реквизит);
					КонецЦикла;
					
					СписокЭлементовСРеквизитами.Вставить(СтрокаДерева.Реквизит, УжеДобавленныеРеквизиты);
					Продолжить;
				КонецЕсли;
				ДобавленныеРеквизиты.Добавить(СтрокаДерева.Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если СтрНайти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДобавленныеРеквизиты <> Неопределено И ДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = КореньОбъекта.Строки.Добавить();
		
		НоваяСтрока.Объект        = Реквизит.Имя;
		НоваяСтрока.Представление = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
		НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
		
	КонецЦикла;
		
	Если ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта) Тогда
		Для Каждого Реквизит Из МетаданныеОбъекта.РеквизитыАдресации Цикл
			
			Если СтрНайти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДобавленныеРеквизиты <> Неопределено И ДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КореньОбъекта.Строки.Добавить();
			НоваяСтрока.Объект        = Реквизит.Имя;
			НоваяСтрока.Представление = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
			НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЭтоЖурналДокументов(МетаданныеОбъекта) Тогда
		
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			Если СтрНайти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДобавленныеРеквизиты <> Неопределено И ДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КореньОбъекта.Строки.Добавить();
			НоваяСтрока.Объект        = Реквизит.Имя;
			НоваяСтрока.Представление = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
			НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавим общие реквизиты для документов.
	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если СтрНайти(ПропуститьРеквизиты, "," + ОбщийРеквизит.Имя + ",") > 0 ИЛИ НЕ ОбщийРеквизит.Состав.Найти(МетаданныеОбъекта).Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДобавленныеРеквизиты <> Неопределено И ДобавленныеРеквизиты.Найти(ОбщийРеквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = КореньОбъекта.Строки.Добавить();
		НоваяСтрока.Объект        = ОбщийРеквизит.Имя;
		НоваяСтрока.Представление = ?(ЗначениеЗаполнено(ОбщийРеквизит.Представление()), ОбщийРеквизит.Представление(), ОбщийРеквизит.Имя);
		НоваяСтрока.ЭтоСсылка     = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
	КонецЦикла;
	
	Если Не КореньОбъекта.ЭтоЭлементСРеквизитами Тогда
		// Добавим табличные части объекта.
		Если НЕ ОбщегоНазначения.ЭтоЖурналДокументов(МетаданныеОбъекта) Тогда
			
			Для Каждого ТабЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
				НоваяСтрока = КореньОбъекта.Строки.Добавить();
				НоваяСтрока.Объект            = ТабЧасть.Имя;
				НоваяСтрока.ЭтоТабличнаяЧасть = Истина;
				НоваяСтрока.Представление     = ТабЧасть.Представление();
				Если ТабЧасть.Имя = "КонтактнаяИнформация" ИЛИ ТабЧасть.Имя = "ДополнительныеРеквизиты" Тогда
					НоваяСтрока.ПредставлениеСписком = Истина;
				КонецЕсли;
				
				КореньТабЧасти = НоваяСтрока;
				
				Если СохраненноеТекущееДеревоНастроек = Неопределено Тогда
					ДобавленнаяСтрокаТЧ = Неопределено;
				Иначе
					ДобавленнаяСтрокаТЧ = СохраненноеТекущееДеревоНастроек.Строки.Найти(ТабЧасть.Имя, "Реквизит");
					Если ДобавленнаяСтрокаТЧ <> Неопределено И ДобавленнаяСтрокаТЧ.ЭтоТабличнаяЧасть <> Истина Тогда
						ДобавленнаяСтрокаТЧ = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Попытка    СтандартныеРеквизиты = ТабЧасть.СтандартныеРеквизиты
				Исключение СтандартныеРеквизиты = Неопределено;
				КонецПопытки;
				Если СтандартныеРеквизиты <> Неопределено Тогда
					
					Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
						
						Если ДобавленнаяСтрокаТЧ <> Неопределено И ДобавленнаяСтрокаТЧ.Строки.Найти(Реквизит.Имя, "Реквизит") <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = КореньТабЧасти.Строки.Добавить();
						НоваяСтрока.Объект                    = Реквизит.Имя;
						НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Истина;
						НоваяСтрока.Представление             = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
						НоваяСтрока.ЭтоСсылка                 = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
						
					КонецЦикла;
					
				КонецЕсли;
				
				Для Каждого Реквизит Из ТабЧасть.Реквизиты Цикл
					
					Если ДобавленнаяСтрокаТЧ <> Неопределено И ДобавленнаяСтрокаТЧ.Строки.Найти(Реквизит.Имя, "Реквизит") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = КореньТабЧасти.Строки.Добавить();
					НоваяСтрока.Объект                    = Реквизит.Имя;
					НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Истина;
					НоваяСтрока.Представление             = ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
					НоваяСтрока.ЭтоСсылка                 = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит));
					
				КонецЦикла;
				
				Если КореньТабЧасти.Строки.Количество() = 0 Тогда
					КореньТабЧасти.Родитель.Строки.Удалить(КореньТабЧасти);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КореньОбъекта;
	
КонецФункции //ДобавитьОбъектВДерево()

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	Форма.Элементы.ШиринаКолонкиВПикселях.Видимость = (Форма.НастройкаШириныКолонок <> 0);
	Форма.Элементы.ОтносительнаяШиринаКолонокВПроцентах.Видимость = (Форма.НастройкаШириныКолонок = 0);
	
КонецПроцедуры //НастроитьВидимостьИДоступностьФормы()

&НаКлиентеНаСервереБезКонтекста
Процедура СинхронизироватьНастройкиШириныКолонок(Форма, ПриоритетФормы = Истина)
	
	Если Форма.ШиринаЛевойКолонкиАбсолютная И Форма.ШиринаПравойКолонкиАбсолютная Тогда
		Форма.ШиринаПравойКолонкиАбсолютная = Ложь;
	КонецЕсли;
	
	Если ПриоритетФормы Тогда
		Если Форма.ШиринаЛевойКолонкиАбсолютная И Не Форма.ШиринаПравойКолонкиАбсолютная Тогда
			Форма.НастройкаШириныКолонок = 1;
			
			Форма.ШиринаКолонкиВПикселях = Форма.ШиринаЛевойКолонки;
			Форма.ШиринаПравойКолонки = 100;
			
		ИначеЕсли Не Форма.ШиринаЛевойКолонкиАбсолютная И Форма.ШиринаПравойКолонкиАбсолютная Тогда
			Форма.НастройкаШириныКолонок = 2;
			
			Форма.ШиринаКолонкиВПикселях = Форма.ШиринаПравойКолонки;
			Форма.ШиринаЛевойКолонки = 100;
			
		Иначе
			Форма.НастройкаШириныКолонок = 0;
			
			Если Форма.ШиринаЛевойКолонки > 100 Тогда
				Форма.ШиринаЛевойКолонки = 75;
			КонецЕсли;
			Форма.ОтносительнаяШиринаКолонокВПроцентах = Форма.ШиринаЛевойКолонки;
			Форма.ШиринаПравойКолонки = 100 - Форма.ШиринаЛевойКолонки;
			
			Форма.ШиринаКолонкиВПикселях = Форма.ШиринаЛевойКолонки;
			
		КонецЕсли;
		
	Иначе
		
		Если Форма.НастройкаШириныКолонок = 1 Тогда
			Если Форма.ШиринаКолонкиВПикселях = 0 Тогда
				Форма.ШиринаКолонкиВПикселях = Форма.ШиринаЛевойКолонки;
			КонецЕсли;
			
			Форма.ШиринаЛевойКолонкиАбсолютная = Истина;
			Форма.ШиринаПравойКолонкиАбсолютная = Ложь;
			Форма.ШиринаЛевойКолонки = Форма.ШиринаКолонкиВПикселях;
			Форма.ШиринаПравойКолонки = 100;
			
		ИначеЕсли Форма.НастройкаШириныКолонок = 2 Тогда
			Если Форма.ШиринаКолонкиВПикселях = 0 Тогда
				Форма.ШиринаКолонкиВПикселях = Форма.ШиринаПравойКолонки;
			КонецЕсли;
			
			Форма.ШиринаЛевойКолонкиАбсолютная = Ложь;
			Форма.ШиринаПравойКолонкиАбсолютная = Истина;
			Форма.ШиринаЛевойКолонки = 100;
			Форма.ШиринаПравойКолонки = Форма.ШиринаКолонкиВПикселях;
			
		Иначе
			Форма.ШиринаЛевойКолонкиАбсолютная = Ложь;
			Форма.ШиринаПравойКолонкиАбсолютная = Ложь;
			Форма.ШиринаЛевойКолонки = Форма.ОтносительнаяШиринаКолонокВПроцентах;
			Форма.ШиринаПравойКолонки = 100 - Форма.ШиринаЛевойКолонки;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры //СинхронизироватьНастройкиШириныКолонок()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента.
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("КомандаЗаполнитьПоУмолчанию") Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда 
		
			ТекущиеДанныеКорень = ДополнительныеПараметры.КомандаЗаполнитьПоУмолчанию;
			ЗаполнитьНастройкиПоУмолчанию(ТекущиеДанныеКорень.Объект);
			ТекущиеДанныеКорень.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
			
			ОбработкаОбновленияДереваОтображаемыхРеквизитов();
			
			Модифицированность = Истина;
			КоллекцияЭлементовДерева=ДеревоОбъекты.ПолучитьЭлементы();
			Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
				ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
				Элементы.ДеревоОбъекты.Развернуть(ИдентификаторСтроки);
			КонецЦикла;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("КомандаЗагрузитьНастройки") Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ПродолжитьЗагрузитьФайлНастроекДляОбъекта();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПередЗакрытием" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			Если ПроверитьСохранить() Тогда
				ДанныеБылиМодифицированы = Истина;
				Закрыть();
			КонецЕсли;
			
		Иначе
			
			Модифицированность = Ложь;
			Закрыть();
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "СохранитьИзменения" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			ДанныеБылиМодифицированы = ПроверитьСохранить();
			ПродолжитьСохранитьФайлНастроекДляОбъекта();
			
		Иначе
			
			Модифицированность = Ложь;
			ПродолжитьСохранитьФайлНастроекДляОбъекта();
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПродолжитьСохраненияВыборФайла" 
		И НЕ РезультатОповещения=Неопределено Тогда
		
		РезультатСохранения = РасширеннаяИнформацияВызовСервера.НастройкиПолейРасширеннойИнформацииСохранитьВФайл(РезультатОповещения[0], ПолноеИмяОбъекта);
		Если НЕ ПустаяСтрока(РезультатСохранения) Тогда
			ПоказатьПредупреждение(, РезультатСохранения);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПродолжитьЗагрузкуВыборФайла" 
		И НЕ РезультатОповещения=Неопределено Тогда
		
		АдресТаблицы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Результат = РасширеннаяИнформацияВызовСервера.НастройкиПолейРасширеннойИнформацииЗагрузитьИзФайла(РезультатОповещения[0], АдресТаблицы);
		Если ПустаяСтрока(Результат) Тогда
			ЗагрузитьНастройки(АдресТаблицы);
			ОбработкаОбновленияДереваОтображаемыхРеквизитов();
			Модифицированность = Истина; 
		Иначе
			ПоказатьПредупреждение(, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет введенные пользователем настройки.
//
&НаКлиенте
Функция ПроверитьСохранить()
	
	ПроверитьПеренестиНастройкиВДеревоОбъектов();
	РезультатСохранения = ПроверитьСохранитьНаСервере();
	
	Если РезультатСохранения Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Возврат РезультатСохранения;
	
КонецФункции //ПроверитьСохранить()

&НаКлиенте
Процедура ПроверитьПеренестиНастройкиВДеревоОбъектов()
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	КореньОбъекта = ПолучитьКореньТекущихДанных(?(ТекущиеДанные = Неопределено,ДеревоОбъекты.ПолучитьЭлементы()[0],
													ТекущиеДанные));
	Если КореньОбъекта <> Неопределено Тогда
		бСохранитьТаблицуВТекущиеДанныеДерева = Истина;
		ДеревоОтображаемыеРеквизитыЭлементы = ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ДеревоОтображаемыеРеквизитыЭлементы Цикл
			Если ЗначениеЗаполнено(ЭлементДерева.Объект) Тогда
				Если ЭлементДерева.Объект <> КореньОбъекта.Объект Тогда
					бСохранитьТаблицуВТекущиеДанныеДерева = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если бСохранитьТаблицуВТекущиеДанныеДерева Тогда
			СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
			
			КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
			КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
			КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
			КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
			
			СкопироватьДеревоВВетку(ДеревоОтображаемыеРеквизитыЭлементы, КореньОбъекта.ДеревоНастроек.ПолучитьЭлементы());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПроверитьПеренестиНастройкиВДеревоОбъектов()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура СкопироватьДеревоВВетку(ЭлементыИсточник, ЭлементыПриемник, ПервыйВызов = Истина)
	
	Если ПервыйВызов Тогда
		ЭлементыПриемник.Очистить();
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из ЭлементыИсточник Цикл
		НоваяСтрока = ЭлементыПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементИсточник);
		
		ПодчиненныеСтроки = ЭлементИсточник.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СкопироватьДеревоВВетку(ПодчиненныеСтроки, НоваяСтрока.ПолучитьЭлементы(), Ложь)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //СкопироватьДеревоВВетку()

// Сохраняет введенные пользователем настройки в контексте сервера.
//
&НаСервере
Функция ПроверитьСохранитьНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	РасширеннаяИнформацияВызовСервера.НастройкиПолейРасширеннойИнформацииСохранитьНастройки(Дерево);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат Истина;
	
КонецФункции //ПроверитьСохранитьНаСервере()

// Производит настройку параметров отображения элементов дерева.
//
&НаСервере
Процедура ОбработкаОбновленияДереваОтображаемыхРеквизитовСервер()
	
	Дерево = РеквизитФормыВЗначение("ДеревоОтображаемыеРеквизиты");
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ШиринаЛевойКолонки",            ШиринаЛевойКолонки);
	ДополнительныеПараметры.Вставить("ШиринаЛевойКолонкиАбсолютная",  ШиринаЛевойКолонкиАбсолютная);
	ДополнительныеПараметры.Вставить("ШиринаПравойКолонки",           ШиринаПравойКолонки);
	ДополнительныеПараметры.Вставить("ШиринаПравойКолонкиАбсолютная", ШиринаПравойКолонкиАбсолютная);
	
	Результат = РасширеннаяИнформацияВызовСервера.СформироватьРасширеннуюИнформациюОбОбъекте(Дерево,, ДополнительныеПараметры);
	
КонецПроцедуры //ОбработкаОбновленияДереваОтображаемыхРеквизитовСервер()

// Производит настройку параметров отображения элементов дерева в контексте клиента.
//
&НаКлиенте
Процедура ОбработкаОбновленияДереваОтображаемыхРеквизитов()
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитовСервер();
	
КонецПроцедуры //ОбработкаОбновленияДереваОтображаемыхРеквизитов()

// Производит настройку параметров заполнения дерева по умолчанию.
//
&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчанию(ЗаполнитьДляОбъекта)
	
	Если Не ЗначениеЗаполнено(ЗаполнитьДляОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Очистить();
	
	ДеревоОбъектыЭлементы = ДеревоОбъекты.ПолучитьЭлементы();
	Если ДеревоОбъектыЭлементы.Количество() > 0 Тогда
		ДеревоОбъекты.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	СтрокаБланк = ДеревоОбъектыЭлементы.Добавить();
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	ДеревоНастроекБланк = Дерево.Строки[0].ДеревоНастроек.Скопировать();
	ДеревоОбъектыЭлементы.Удалить(СтрокаБланк);
	Дерево = Неопределено;
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	
	// Получим существующие настройки.
	ТаблицаНастройки = РасширеннаяИнформацияВызовСервера.НастройкиПолейРасширеннойИнформацииПолучитьНастройки(ЗаполнитьДляОбъекта,Истина);
	
	ДобавляемыеОбъекты = ПолучитьСписокОбъектов(ЗаполнитьДляОбъекта);
	
	Для Каждого ДобавляемыйОбъект Из ДобавляемыеОбъекты Цикл
		
		СтрокаНастройки = ТаблицаНастройки.Найти(ДобавляемыйОбъект.Значение, "Объект");
		Если СтрокаНастройки <> Неопределено И ТипЗнч(СтрокаНастройки.ДеревоНастроек) = Тип("ДеревоЗначений") И СтрокаНастройки.ДеревоНастроек.Строки.Количество() > 0 Тогда
			СохраненноеТекущееДеревоНастроек = СтрокаНастройки.ДеревоНастроек;
		Иначе
			СохраненноеТекущееДеревоНастроек = Неопределено;
		КонецЕсли;
		
		КореньОбъекта = ДобавитьОбъектВДерево(Дерево, ДобавляемыйОбъект.Значение,, СохраненноеТекущееДеревоНастроек);
		Если КореньОбъекта <> Неопределено Тогда
			Если СохраненноеТекущееДеревоНастроек <> Неопределено Тогда
				КореньОбъекта.ДеревоНастроек = ДеревоНастроекБланк.Скопировать();
				СкопироватьДерево(КореньОбъекта.ДеревоНастроек.Строки, СохраненноеТекущееДеревоНастроек.Строки);
				КореньОбъекта.ПризнакЕстьНастройки = Истина;
			КонецЕсли;
			
			Если СтрокаНастройки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(КореньОбъекта, СтрокаНастройки,, "Объект,ДеревоНастроек");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъекты");
	
	Дерево = РеквизитФормыВЗначение("ДеревоОтображаемыеРеквизиты");
	
	Если ТаблицаНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаНастройки.Найти(ЗаполнитьДляОбъекта, "Объект");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоНастройкиПоУмолчанию = НайденнаяСтрока.ДеревоНастроек;
	Если ТипЗнч(ДеревоНастройкиПоУмолчанию) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьДерево(Дерево.Строки, ДеревоНастройкиПоУмолчанию.Строки, ЗаполнитьДляОбъекта);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОтображаемыеРеквизиты");
	
КонецПроцедуры //ЗаполнитьНастройкиПоУмолчанию()

&НаКлиенте
Процедура ДобавитьРеквизитВДеревоОтображаемыхРеквизитов(ТекущиеДанные)
	
	Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоОбъект Тогда
		Возврат;
	КонецЕсли;
	
	КореньТекущихДанных = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньТекущихДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бЭтоПоследнийЭлемент = Ложь;
	КореньТекущихДанныхЭлементы = КореньТекущихДанных.ПолучитьЭлементы();
	
	Если КореньТекущихДанныхЭлементы.Количество() > 0 Тогда
		ПоследнийЭлемент = КореньТекущихДанныхЭлементы[КореньТекущихДанныхЭлементы.Количество() - 1];
		Если ПоследнийЭлемент = ТекущиеДанные Тогда
			бЭтоПоследнийЭлемент = Истина;
		ИначеЕсли ПоследнийЭлемент.ЭтоТабличнаяЧасть 
			И ТекущиеДанные.ЭтоРеквизитТабличнойЧасти 
			И ТекущиеДанные.ПолучитьРодителя() = ПоследнийЭлемент Тогда
			
			ПоследнийЭлементЭлементы = ПоследнийЭлемент.ПолучитьЭлементы();
			Если ПоследнийЭлементЭлементы.Количество() > 0 
				И ТекущиеДанные = ПоследнийЭлементЭлементы[ПоследнийЭлементЭлементы.Количество() - 1] Тогда
				
				бЭтоПоследнийЭлемент = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
	
	Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
		СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДерева);
		Если СтрокаТабличнаяЧасть = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(),
													ТекущиеДанные.ПолучитьЭлементы(), Истина);
		
	ИначеЕсли ТекущиеДанные.ЭтоРеквизитТабличнойЧасти Тогда
		СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах(КореньТекущихДанных, 
													ТекущиеДанные, ЭлементыДерева);
		Если СтрокаТабличнаяЧасть = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(),
													ТекущиеДанные, Истина);
	ИначеЕсли ТекущиеДанные.ЭтоЭлементСРеквизитами Тогда
		СтрокаЭлементовДерева = ПолучитьСтрокуЭлементовДереваВОтображаемыхРеквизитах(КореньТекущихДанных,
																							ТекущиеДанные, ЭлементыДерева);
		Если СтрокаЭлементовДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, СтрокаЭлементовДерева.ПолучитьЭлементы(),
													ТекущиеДанные.ПолучитьЭлементы(), Ложь,,Истина);
	ИначеЕсли ТекущиеДанные.ЭтоРеквизитЭлементаСРеквизитами Тогда
		СтрокаЭлементовДерева = ПолучитьСтрокуЭлементовДереваВОтображаемыхРеквизитах(КореньТекущихДанных, 
																						ТекущиеДанные, ЭлементыДерева);
		Если СтрокаЭлементовДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, СтрокаЭлементовДерева.ПолучитьЭлементы(),
												ТекущиеДанные, Ложь, Истина);
	Иначе
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные,
													ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы(), ТекущиеДанные, Ложь);
	КонецЕсли;
	
	Если бЭтоПоследнийЭлемент Тогда
		Если КореньТекущихДанныхЭлементы.Количество() > 0 Тогда
			УстановитьТекущуюСтроку = КореньТекущихДанныхЭлементы[КореньТекущихДанныхЭлементы.Количество() - 1];
			Попытка
				Если УстановитьТекущуюСтроку.ЭтоТабличнаяЧасть 
					И Элементы.ДеревоОбъекты.Развернут(УстановитьТекущуюСтроку.ПолучитьИдентификатор()) Тогда
					
					УстановитьТекущуюСтрокуЭлементы = УстановитьТекущуюСтроку.ПолучитьЭлементы();
					Если УстановитьТекущуюСтрокуЭлементы.Количество() > 0 Тогда
						УстановитьТекущуюСтроку = УстановитьТекущуюСтрокуЭлементы[УстановитьТекущуюСтрокуЭлементы.Количество() - 1];
					КонецЕсли;
				КонецЕсли;
			Исключение
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Ошибка установки видимости'"),
       				"Ошибка",
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Истина);
			КонецПопытки;
		Иначе
			УстановитьТекущуюСтроку = КореньТекущихДанных;
		КонецЕсли;
		
		Попытка 
			Элементы.ДеревоОбъекты.ТекущаяСтрока = УстановитьТекущуюСтроку.ПолучитьИдентификатор();
		Исключение
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Ошибка установки видимости'"),
       				"Ошибка",
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Истина);
		КонецПопытки;
	КонецЕсли;
	
	КореньТекущихДанных.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
	
КонецПроцедуры // ДобавитьРеквизитВДеревоОтображаемыхРеквизитов()

&НаКлиенте
Функция ПолучитьКореньТекущихДанных(ТекущиеДанные)
	
	Если ТекущиеДанные.ЭтоОбъект Тогда
		Возврат ТекущиеДанные;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Пока ТекущийРодитель <> Неопределено И Не ТекущийРодитель.ЭтоОбъект Цикл
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Если ТекущийРодитель <> Неопределено И ТекущийРодитель.ЭтоОбъект Тогда
		Возврат ТекущийРодитель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьКореньТекущихДанных()

&НаКлиенте
Функция ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДерева)
	
	Если КореньТекущихДанных = Неопределено Или ТекущиеДанные = Неопределено Или ЭлементыДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
		КореньТЧ = ТекущиеДанные;
	Иначе
		КореньТЧ = ТекущиеДанные.ПолучитьРодителя();
		Если КореньТЧ = Неопределено Тогда Возврат
			Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки = РасширеннаяИнформацияКлиентСервер.НайтиВЭлементахДерева(ЭлементыДерева,
																					Новый Структура("Реквизит,ЭтоТабличнаяЧасть", КореньТЧ.Объект, Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Объект								= КореньТекущихДанных.Объект;
		НоваяСтрока.ЭтоТабличнаяЧасть					= Истина;
		Если КореньТЧ.Объект = "КонтактнаяИнформация" ИЛИ КореньТЧ.Объект = "ДополнительныеРеквизиты" Тогда
			НоваяСтрока.ПредставлениеСписком = Истина;
		КонецЕсли;
		НоваяСтрока.Реквизит							= КореньТЧ.Объект;
		НоваяСтрока.ПредставлениеРеквизита				= КореньТЧ.Представление;
		НоваяСтрока.ОригинальноеПредставлениеРеквизита	= КореньТЧ.Представление;
		НоваяСтрока.Положение							= "НоваяСтрока";
		НоваяСтрока.Размещение							= "ЛеваяКолонка";
		
		СтрокаТабличнаяЧасть = НоваяСтрока;
	Иначе
		СтрокаТабличнаяЧасть = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнаяЧасть;
	
КонецФункции //ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах()

&НаКлиенте
Функция ПолучитьСтрокуЭлементовДереваВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДерева)
	
	Если КореньТекущихДанных = Неопределено ИЛИ ТекущиеДанные = Неопределено ИЛИ ЭлементыДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭлементСРеквизитами Тогда
		КореньТЧ = ТекущиеДанные;
	Иначе
		КореньТЧ = ТекущиеДанные.ПолучитьРодителя();
		Если КореньТЧ = Неопределено Тогда Возврат
			Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки = РасширеннаяИнформацияКлиентСервер.НайтиВЭлементахДерева(ЭлементыДерева,
																					Новый Структура("Реквизит,ЭтоЭлементСРеквизитами", КореньТЧ.Объект, Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Объект								= КореньТекущихДанных.Объект;
		НоваяСтрока.ЭтоЭлементСРеквизитами					= Истина;
		Если ТекущиеДанные.Объект = "КонтактнаяИнформация" ИЛИ КореньТЧ.Объект = "ДополнительныеРеквизиты" Тогда
			НоваяСтрока.ПредставлениеСписком = Истина;
		КонецЕсли;
		НоваяСтрока.Реквизит							= КореньТЧ.Объект;
		НоваяСтрока.ПредставлениеРеквизита				= КореньТЧ.Представление;
		НоваяСтрока.ОригинальноеПредставлениеРеквизита	= КореньТЧ.Представление;
		НоваяСтрока.Положение							= "НоваяСтрока";
		НоваяСтрока.Размещение							= "ЛеваяКолонка";
		
		СтрокаЭлементовДерева = НоваяСтрока;
	Иначе
		СтрокаЭлементовДерева = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаЭлементовДерева;
	
КонецФункции //ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах()

&НаКлиенте
Процедура ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДляДобавления, ДобавляемыеДанные, ЭтоРеквизитТабличнойЧасти, ЭтоРеквизитЭлементаСРеквизитами = Ложь, ЭтоЭлементСРеквизитами = Ложь)
	
	Если КореньТекущихДанных = Неопределено 
		ИЛИ ТекущиеДанные = Неопределено 
		ИЛИ ЭлементыДляДобавления = Неопределено 
		ИЛИ ДобавляемыеДанные = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	МассивДанных = Новый Массив();
	Попытка
		КоличествоТест = ДобавляемыеДанные.Количество();
		бДобавляемыеДанныеЭтоКоллекция = Истина;
	Исключение
		бДобавляемыеДанныеЭтоКоллекция = Ложь;
	КонецПопытки;
	
	Если бДобавляемыеДанныеЭтоКоллекция Тогда
		Для Каждого СтрокаДанных Из ДобавляемыеДанные Цикл
			МассивДанных.Добавить(СтрокаДанных);
		КонецЦикла;
	Иначе
		МассивДанных.Добавить(ДобавляемыеДанные);
	КонецЕсли;
	
	Для нИндекс = 0 По МассивДанных.ВГраница() Цикл
		ДобавляемыйЭлемент = МассивДанных[нИндекс];
		
		НоваяСтрока = ЭлементыДляДобавления.Добавить();
		НоваяСтрока.Объект									= КореньТекущихДанных.Объект;
		НоваяСтрока.Реквизит								= ДобавляемыйЭлемент.Объект;
		НоваяСтрока.ПредставлениеРеквизита					= ДобавляемыйЭлемент.Представление;
		НоваяСтрока.ОригинальноеПредставлениеРеквизита		= ДобавляемыйЭлемент.Представление;
		НоваяСтрока.ЭтоСсылка								= ДобавляемыйЭлемент.ЭтоСсылка;
		Если ЭтоРеквизитТабличнойЧасти Тогда
			НоваяСтрока.ЭтоРеквизитТабличнойЧасти	= Истина;
		ИначеЕсли ЭтоРеквизитЭлементаСРеквизитами ИЛИ ЭтоЭлементСРеквизитами Тогда
			НоваяСтрока.ЭтоРеквизитЭлементаСРеквизитами = Истина;
		КонецЕсли;
		
		ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию(НоваяСтрока);
		
		МассивДанных[нИндекс] = Неопределено;
		Если ДобавляемыйЭлемент = ТекущиеДанные Тогда
			ТекущиеДанные = Неопределено;
		КонецЕсли;
		ДобавляемыйЭлемент.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ДобавляемыйЭлемент);
	КонецЦикла;

	Если ЭтоРеквизитТабличнойЧасти Тогда
		КореньТЧ = ?(ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоТабличнаяЧасть, ТекущиеДанные, ТекущиеДанныеРодитель);
		КореньТЧЭлементы = КореньТЧ.ПолучитьЭлементы();
		Если КореньТЧЭлементы.Количество() = 0 Тогда
			КореньТЧ.ПолучитьРодителя().ПолучитьЭлементы().Удалить(КореньТЧ);
		КонецЕсли;
	ИначеЕсли ЭтоРеквизитЭлементаСРеквизитами ИЛИ ЭтоЭлементСРеквизитами Тогда
		КореньТЧ = ?(ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоЭлементСРеквизитами,
						ТекущиеДанные, ТекущиеДанныеРодитель);
		КореньТЧЭлементы = КореньТЧ.ПолучитьЭлементы();
		Если КореньТЧЭлементы.Количество() = 0 Тогда
			КореньТЧ.ПолучитьРодителя().ПолучитьЭлементы().Удалить(КореньТЧ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСтрокиВОтображаемыхРеквизитах()

&НаКлиенте
Процедура ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию(СтрокаРеквизита)
	
	СтрокаРеквизита.ТипЗначенияРеквизита = ?(СтрокаРеквизита.ЭтоСсылка, "Гиперссылка", "Строка");
	СтрокаРеквизита.Положение	= ?(СтрокаРеквизита.ЭтоРеквизитТабличнойЧасти, "ВТойЖеСтроке", "НоваяСтрока");
	СтрокаРеквизита.Размещение	= "ЛеваяКолонка";
	
КонецПроцедуры //ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию()

&НаКлиенте
Процедура УдалитьРеквизитИзДереваОтображаемыхРеквизитов(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = РасширеннаяИнформацияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(), 
																					Новый Структура("Объект,ЭтоОбъект", ТекущиеДанные.Объект, Истина), Истина);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		// Если все хорошо, сюда попасть нельзя, страховка на случай битых данных.
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		Иначе
			ТекущиеДанныеРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КореньОбъекта = НайденныеСтроки[0];
	
	Если ТекущиеДанные.ЭтоРазделитель Тогда
		ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	Иначе
		Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
			СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВДеревеОбъектов(КореньОбъекта, ТекущиеДанные);
			Если СтрокаТабличнаяЧасть = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(), 
												ТекущиеДанные.ПолучитьЭлементы(), Истина);
			
		ИначеЕсли ТекущиеДанные.ЭтоРеквизитТабличнойЧасти Тогда
			СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВДеревеОбъектов(КореньОбъекта, ТекущиеДанные);
			Если СтрокаТабличнаяЧасть = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(), 
												ТекущиеДанные, Истина);
		ИначеЕсли ТекущиеДанные.ЭтоРеквизитЭлементаСРеквизитами Тогда
			Строка = ПолучитьСтрокуВДеревеОбъектов(КореньОбъекта, ТекущиеДанные);
			Если Строка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, Строка.ПолучитьЭлементы(), ТекущиеДанные, Ложь, Истина);
		ИначеЕсли ТекущиеДанные.ЭтоЭлементСРеквизитами Тогда
			Строка = ПолучитьСтрокуВДеревеОбъектов(КореньОбъекта, ТекущиеДанные);
			Если Строка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, Строка.ПолучитьЭлементы(), 
												ТекущиеДанные.ПолучитьЭлементы(), Ложь,,Истина);
		Иначе
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, КореньОбъекта.ПолучитьЭлементы(), ТекущиеДанные, Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	КореньОбъекта.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
	
КонецПроцедуры //УдалитьРеквизитИзДереваОтображаемыхРеквизитов()

&НаКлиенте
Функция ПолучитьСтрокуТабличнойЧастиВДеревеОбъектов(КореньОбъекта, ТекущиеДанные)
	
	Если КореньОбъекта = Неопределено Или ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
		КореньТЧ = ТекущиеДанные;
	Иначе
		КореньТЧ = ТекущиеДанные.ПолучитьРодителя();
		Если КореньТЧ = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = КореньОбъекта.ПолучитьЭлементы();
	
	НайденныеСтроки = РасширеннаяИнформацияКлиентСервер.НайтиВЭлементахДерева(ЭлементыДерева,
																				Новый Структура("Объект,ЭтоТабличнаяЧасть", КореньТЧ.Реквизит, Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Объект				= КореньТЧ.Реквизит;
		НоваяСтрока.ЭтоТабличнаяЧасть	= Истина;
		НоваяСтрока.Представление		= ?(ЗначениеЗаполнено(КореньТЧ.ОригинальноеПредставлениеРеквизита), 
											КореньТЧ.ОригинальноеПредставлениеРеквизита, КореньТЧ.ПредставлениеРеквизита);
		
		СтрокаТабличнаяЧасть = НоваяСтрока;
	Иначе
		СтрокаТабличнаяЧасть = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнаяЧасть;
	
КонецФункции //ПолучитьСтрокуТабличнойЧастиВДеревеОбъектов()

///////
&НаКлиенте
Функция ПолучитьСтрокуВДеревеОбъектов(КореньОбъекта, ТекущиеДанные)
	
	Если КореньОбъекта = Неопределено ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭлементСРеквизитами Тогда
		КореньТЧ = ТекущиеДанные;
	Иначе
		КореньТЧ = ТекущиеДанные.ПолучитьРодителя();
		Если КореньТЧ = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = КореньОбъекта.ПолучитьЭлементы();
	
	НайденныеСтроки = РасширеннаяИнформацияКлиентСервер.НайтиВЭлементахДерева(ЭлементыДерева, 
							Новый Структура("Объект,ЭтоЭлементСРеквизитами", КореньТЧ.Реквизит, Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Объект				= КореньТЧ.Реквизит;
		НоваяСтрока.ЭтоЭлементСРеквизитами	= Истина;
		НоваяСтрока.Представление		= ?(ЗначениеЗаполнено(КореньТЧ.ОригинальноеПредставлениеРеквизита), 
												КореньТЧ.ОригинальноеПредставлениеРеквизита, КореньТЧ.ПредставлениеРеквизита);
		
		СтрокаЭлемента = НоваяСтрока;
	Иначе
		СтрокаЭлемента = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаЭлемента;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьРазделительВДеревоОтображаемыхРеквизитов(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КореньТекущихДанных = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньТекущихДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДляДобавления = ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
	
	НоваяСтрока = ЭлементыДляДобавления.Добавить();
	НоваяСтрока.Объект			= КореньТекущихДанных.Объект;
	НоваяСтрока.ЭтоРазделитель	= Истина;
	ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию(НоваяСтрока);
	НоваяСтрока.ПредставлениеРеквизита				= НСтр("ru = ''");
	НоваяСтрока.ОригинальноеПредставлениеРеквизита	= НСтр("ru = '[Разделитель]'");
	
КонецПроцедуры //ДобавитьРазделительВДеревоОтображаемыхРеквизитов()

////////
&НаКлиенте
Процедура ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, ЭлементыДляДобавления, ДобавляемыеДанные, ЭтоРеквизитТабличнойЧасти, ЭтоРеквизитЭлементаСРеквизитами = Ложь, ЭтоЭлементСРеквизитами = Ложь)
	
	Если КореньОбъекта = Неопределено 
		ИЛИ ТекущиеДанные = Неопределено 
		ИЛИ ЭлементыДляДобавления = Неопределено 
		ИЛИ ДобавляемыеДанные = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	МассивДанных = Новый Массив();
	Попытка
		КоличествоТест = ДобавляемыеДанные.Количество();
		бДобавляемыеДанныеЭтоКоллекция = Истина;
	Исключение
		бДобавляемыеДанныеЭтоКоллекция = Ложь;
	КонецПопытки;
	
	Если бДобавляемыеДанныеЭтоКоллекция Тогда
		Для Каждого СтрокаДанных Из ДобавляемыеДанные Цикл
			МассивДанных.Добавить(СтрокаДанных);
		КонецЦикла;
	Иначе
		МассивДанных.Добавить(ДобавляемыеДанные);
	КонецЕсли;
	
	Для нИндекс = 0 По МассивДанных.ВГраница() Цикл
		ДобавляемыйЭлемент = МассивДанных[нИндекс];
		
		НоваяСтрока = ЭлементыДляДобавления.Добавить();
		НоваяСтрока.Объект			= ДобавляемыйЭлемент.Реквизит;
		НоваяСтрока.Представление	= ?(ЗначениеЗаполнено(ДобавляемыйЭлемент.ОригинальноеПредставлениеРеквизита), 
											ДобавляемыйЭлемент.ОригинальноеПредставлениеРеквизита, ДобавляемыйЭлемент.ПредставлениеРеквизита);
		НоваяСтрока.ЭтоСсылка		= ДобавляемыйЭлемент.ЭтоСсылка;
		Если ЭтоРеквизитТабличнойЧасти Тогда
			НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Истина;
		ИначеЕсли ЭтоРеквизитЭлементаСРеквизитами ИЛИ ЭтоЭлементСРеквизитами Тогда
			НоваяСтрока.ЭтоРеквизитЭлементаСРеквизитами = Истина;
		КонецЕсли;
		
		ДобавляемыйЭлементРодитель = ДобавляемыйЭлемент.ПолучитьРодителя();
		
		МассивДанных[нИндекс] = Неопределено;
		Если ДобавляемыйЭлемент = ТекущиеДанные Тогда
			ТекущиеДанные = Неопределено;
		КонецЕсли;
		ЭлементыДляУдаления = ?(ДобавляемыйЭлементРодитель = Неопределено, ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы(),
									ДобавляемыйЭлементРодитель.ПолучитьЭлементы());
		ЭлементыДляУдаления.Удалить(ДобавляемыйЭлемент);
	КонецЦикла;
	
	Если ЭтоРеквизитТабличнойЧасти Тогда
		КореньТЧ = ?(ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоТабличнаяЧасть, ТекущиеДанные, ТекущиеДанныеРодитель);
		КореньТЧЭлементы = КореньТЧ.ПолучитьЭлементы();
		Если КореньТЧЭлементы.Количество() = 0 Тогда
			ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Удалить(КореньТЧ);
		КонецЕсли;
	ИначеЕсли ЭтоРеквизитЭлементаСРеквизитами ИЛИ ЭтоЭлементСРеквизитами Тогда 
		КореньТЧ = ?(ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоЭлементСРеквизитами, ТекущиеДанные, ТекущиеДанныеРодитель);
		КореньТЧЭлементы = КореньТЧ.ПолучитьЭлементы();
		Если КореньТЧЭлементы.Количество() = 0 Тогда
			ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Удалить(КореньТЧ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСтрокиВДеревоОбъектов()

&НаКлиенте
Процедура ПриСменеТекущегоОбъекта(Знач НовыйТекущийОбъект, Знач ПредыдущийТекущийОбъект)
	
	Если НовыйТекущийОбъект = Неопределено Тогда
		НовыйТекущийОбъектКорень = Неопределено;
	Иначе
		НайденныеСтроки = РасширеннаяИнформацияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(),
																						Новый Структура("Объект", НовыйТекущийОбъект), Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НовыйТекущийОбъектКорень = ПолучитьКореньТекущихДанных(НайденныеСтроки[0]);
		Иначе
			НовыйТекущийОбъектКорень = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущийТекущийОбъект = Неопределено Тогда
		ПредыдущийТекущийОбъектКорень = Неопределено;
	Иначе
		НайденныеСтроки = РасширеннаяИнформацияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(), 
																						Новый Структура("Объект", ПредыдущийТекущийОбъект), Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПредыдущийТекущийОбъектКорень = ПолучитьКореньТекущихДанных(НайденныеСтроки[0]);
		Иначе
			ПредыдущийТекущийОбъектКорень = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущийТекущийОбъектКорень <> Неопределено Тогда
		СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
		ПредыдущийТекущийОбъектКорень.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
		ПредыдущийТекущийОбъектКорень.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
		ПредыдущийТекущийОбъектКорень.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
		ПредыдущийТекущийОбъектКорень.ШиринаПравойКолонки			= ШиринаПравойКолонки;
		СкопироватьДеревоВВетку(ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы(), 
										ПредыдущийТекущийОбъектКорень.ДеревоНастроек.ПолучитьЭлементы());
	КонецЕсли;
	
	Если НовыйТекущийОбъектКорень <> Неопределено Тогда
		ДеревоНастроекЭлементы = НовыйТекущийОбъектКорень.ДеревоНастроек.ПолучитьЭлементы();
		ШиринаЛевойКолонкиАбсолютная	= Ложь;
		ШиринаПравойКолонкиАбсолютная	= Ложь;
		ШиринаЛевойКолонки				= 75;
		ШиринаПравойКолонки				= 25;
		
		Если ДеревоНастроекЭлементы.Количество() = 0 Тогда
			ЗаполнитьНастройкиПоУмолчанию(НовыйТекущийОбъектКорень.Объект);
			НовыйТекущийОбъектКорень.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
		Иначе
			ШиринаЛевойКолонкиАбсолютная	= НовыйТекущийОбъектКорень.ШиринаЛевойКолонкиАбсолютная;
			ШиринаПравойКолонкиАбсолютная	= НовыйТекущийОбъектКорень.ШиринаПравойКолонкиАбсолютная;
			ШиринаЛевойКолонки				= ?(НовыйТекущийОбъектКорень.ШиринаЛевойКолонки = 0, 75,
														НовыйТекущийОбъектКорень.ШиринаЛевойКолонки);
			ШиринаПравойКолонки				= ?(НовыйТекущийОбъектКорень.ШиринаПравойКолонки = 0, 25,
														НовыйТекущийОбъектКорень.ШиринаПравойКолонки);
			СкопироватьДеревоВВетку(ДеревоНастроекЭлементы, ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы());
		КонецЕсли;
		
		СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект);
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	
КонецПроцедуры // ПриСменеТекущегоОбъекта()

// Процедура сохраняет настройки полей отображения содержания в файл.
//
&НаКлиенте
Процедура ПродолжитьСохранитьФайлНастроекДляОбъекта()
	
	ТекстСообщения = НСтр("ru = 'Для загрузки файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьФайлНастроекЗавершениеКонтроляРасширенияРаботыСФайлами",
		ЭтотОбъект);
		
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);	
	
КонецПроцедуры // ПродолжитьСохранитьФайлНастроекДляОбъекта()

&НаКлиенте
Процедура СохранитьФайлНастроекЗавершениеКонтроляРасширенияРаботыСФайлами(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатОповещения Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение для работы с файлами не подключено.'"));
		Возврат;
	КонецЕсли;
	
	ПродолжитьСохранитьФайлНастроекДляОбъектаВыборОбъекта();
	
КонецПроцедуры

// Процедура сохраняет настройки полей отображения содержания в файл.
//
//
&НаКлиенте
Процедура ПродолжитьЗагрузитьФайлНастроекДляОбъекта()
	
	ТекстСообщения = НСтр("ru = 'Для загрузки файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьФайлНастроекЗавершениеКонтроляРасширенияРаботыСФайлами",
		ЭтотОбъект);
		
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);	
	
КонецПроцедуры // ПродолжитьЗагрузитьФайлНастроекДляОбъекта()

&НаКлиенте
Процедура ЗагрузитьФайлНастроекЗавершениеКонтроляРасширенияРаботыСФайлами(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатОповещения Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение для работы с файлами не подключено.'"));
		Возврат;
	КонецЕсли;
	
	ПродолжитьЗагрузитьФайлНастроекДляОбъектаВыборОбъекта();
	
КонецПроцедуры

// Процедура сохраняет настройки полей отображения содержания в файл.
//
//
&НаСервере
Процедура ЗагрузитьНастройки(АдресТаблицы)
	
	ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Очистить();
	Дерево = РеквизитФормыВЗначение("ДеревоОтображаемыеРеквизиты");
	
	// Получим существующие настройки.
	ТаблицаНастройки = ПолучитьИзВременногоХранилища(АдресТаблицы);
	УдалитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТаблицаНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НайденнаяСтрока = ТаблицаНастройки.Найти(ПолноеИмяОбъекта, "Объект");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоНастройкиПоУмолчанию = НайденнаяСтрока.ДеревоНастроек;
	Если ТипЗнч(ДеревоНастройкиПоУмолчанию) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	СкопироватьДерево(Дерево.Строки, ДеревоНастройкиПоУмолчанию.Строки, ПолноеИмяОбъекта);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОтображаемыеРеквизиты");
	
КонецПроцедуры // ЗагрузитьНастройки()

// Процедура сохраняет настройки полей отображения содержания в файл.
//
&НаКлиенте
Процедура ПродолжитьСохранитьФайлНастроекДляОбъектаВыборОбъекта(Результат = Неопределено)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.Заголовок = НСтр("ru = 'Сохранение файла настроек полей отображения содержания'");
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.ПолноеИмяФайла = НСтр("ru = 'Настройки отображения содержания'") + ".xml";
	ВыборФайла.Фильтр = НСтр("ru = 'Файлы настроек отображения содержания (*.xml)|*.xml'");
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	ВыборФайла.Показать(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект,
								"ПродолжитьСохраненияВыборФайла"));
	
КонецПроцедуры // ПродолжитьСохранитьФайлНастроекДляОбъекта()

// Процедура сохраняет настройки полей отображения содержания в файл.
//
//
&НаКлиенте
Процедура ПродолжитьЗагрузитьФайлНастроекДляОбъектаВыборОбъекта(Результат = Неопределено)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Заголовок = НСтр("ru = 'Открытие файла настроек полей отображения содержания'");
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Фильтр = НСтр("ru = 'Файлы настроек отображения содержания (*.xml)|*.xml'");
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	ВыборФайла.Показать(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект,
							"ПродолжитьЗагрузкуВыборФайла"));
	
КонецПроцедуры // ПродолжитьЗагрузитьФайлНастроекДляОбъекта()

#КонецОбласти

