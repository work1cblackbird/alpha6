#Область ОписаниеПеременных

Перем Авто;
Перем ОграниченияОбщихРеквизитов;
Перем ОпцииВариантовКомлектации;
Перем ОпцииМодели;
Перем ВалютаУпр;
Перем ВалютаРегл;

&НаКлиенте
Перем Форма;

&НаКлиенте
Перем РежимЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	
	// Признак разрешения пользователю редактировать реквизиты объекта
	СлужебныеРеквизиты.Вставить("РазрешитьРедактированиеЦенИСумм",
		ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект)
	);
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(ЭтотОбъект, СлужебныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	ВзаиморасчетыКонтрагентаНаСервере();
	ОбновитьСуммуДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	Объект.Автор                 = ?(НЕ ЗначениеЗаполнено(Объект.Автор),Пользователи.ТекущийПользователь(),Объект.Автор);
	Объект.Организация           = ?(НЕ ЗначениеЗаполнено(Объект.Организация),ПараметрыСеанса.Организация,Объект.Организация);
	Объект.ПодразделениеКомпании = ?(НЕ ЗначениеЗаполнено(Объект.ПодразделениеКомпании),ПараметрыСеанса.ПодразделениеКомпании,Объект.ПодразделениеКомпании);
	
	// сформируем значение на форме
	Сп = Новый СписокЗначений();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Сп.Добавить(Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании) Тогда
		Сп.Добавить(Объект.ПодразделениеКомпании);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Автор) Тогда 
		Сп.Добавить(Объект.Автор);
	КонецЕсли;
	
	ОрганизацияПодразделение = Сп;
	
	ДатаНачала    = НачалоКвартала(ТекущаяДатаСеанса());
	ДатаОкончания = ТекущаяДатаСеанса();
	
	Комментарий = НСтр("ru = 'Документы пакетно сформировал(а)'")
					+" " 
					+ Объект.Автор 
					+ " " 
					+ Формат(ТекущаяДатаСеанса(), "Л=ru; ДЛФ=D");
	
	//ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
	ДополнительныеСвойства = Новый Структура;
	Дата = ТекущаяДатаСеанса();
	Объект.Дата = Дата;
	Попытка
		Объект.Контрагент            = ЭтаФорма.ВладелецФормы.ТекущийЭлемент.ТекущиеДанные.Контрагент;
		Объект.ТипЦен                = ЭтаФорма.ВладелецФормы.ТекущийЭлемент.ТекущиеДанные.Ссылка.ТипЦен;
		Объект.ВалютаДокумента       = ЭтаФорма.ВладелецФормы.ТекущийЭлемент.ТекущиеДанные.Ссылка.ВалютаДокумента;
		Объект.КурсДокумента         = ЭтаФорма.ВладелецФормы.ТекущийЭлемент.ТекущиеДанные.Ссылка.КурсДокумента;
		Объект.ДоговорВзаиморасчетов = ЭтаФорма.ВладелецФормы.ТекущийЭлемент.ТекущиеДанные.Ссылка.ДоговорВзаиморасчетов;
	Исключение
		ПравоТипЦен           		 = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей");
		Объект.ТипЦен                = ПравоТипЦен.Ссылка;
		Объект.Контрагент            = Справочники.Контрагенты.ОсновнойПоставщик;
		Объект.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Контрагент, Перечисления.ВидыДоговоров.Покупка, Объект,, Истина);
		Объект.ВалютаДокумента       = Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
		Объект.КурсДокумента         = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Объект.ВалютаДокумента)).Курс;
	КонецПопытки;

	Объект.СрокПоставки     = ТекущаяДата() + 604800;
	
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ЭтотОбъект.ДокуметОбъект.КурсВалютыУпр = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", ВалютаУпр)).Курс;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОпцииВариантовКомплектации.Опция КАК Опция,
	|	ОпцииВариантовКомплектации.ВариантКомплектации
	|ИЗ
	|	РегистрСведений.ОпцииВариантовКомплектации КАК ОпцииВариантовКомплектации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Опция";
	
	ОпцииВариантовКомлектации = Запрос.Выполнить().Выгрузить();
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	 |	ОпцииСоставНабора.Опция КАК Опция,
	 |	ОпцииСоставНабора.Ссылка
	 |ИЗ
	 |	Справочник.Опции.СоставНабора КАК ОпцииСоставНабора
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Опция";
	
	ОпцииМодели = Запрос.Выполнить().Выгрузить();
	Обработки.ПакетныйЗаказАвтомобилей.ПересчитатьСуммуДокумента(Объект);
	
	Объект.Комментарий = НСтр("ru = 'Документы пакетно сформировал(а)'")
							+ " "
							+ Объект.Автор
							+ " "
							+ Формат(ТекущаяДатаСеанса(), "Л=ru; ДЛФ=D");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	
	ВзаиморасчетыКонтрагентаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Обработки.ПакетныйЗаказАвтомобилей.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	
	ВзаиморасчетыКонтрагентаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Обработки.ПакетныйЗаказАвтомобилей.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

&НаКлиенте
Процедура АвтомобилиПриАктивизацииСтроки(Элемент)
	
	Перем ТекущийВариантКомплектации;
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		
		НовыйОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтроки", Элемент.ТекущиеДанные.ИдентификаторСтроки);
		Элементы.Опции.ОтборСтрок = НовыйОтборСтрок;
		
		ТекущийВариантКомплектации = Элемент.ТекущиеДанные.ВариантКомплектации;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		БазовыеОпции,
		"ВариантКомплектации",
		ТекущийВариантКомплектации,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Автомобили.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекСтрока.СрокПоставки = Объект.СрокПоставки; 
		ТекСтрока.ИдентификаторСтроки = Элементы.Автомобили.ТекущаяСтрока+1;
		ТекСтрока.Количество = 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура АвтомобилиВариантКомплектацииОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	Если ТекущиеДанные.Модель = Справочники.Модели.ПустаяСсылка() Тогда
		ТекущиеДанные.Модель = ВыбранноеЗначение.Владелец;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиВариантКомплектацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	АвтомобилиВариантКомплектацииОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = ОбщегоНазначенияАвтосалонКлиент.ИдентификаторыТаблицыВСтроки(Элемент.ВыделенныеСтроки, Объект.Автомобили);
	
	Для Каждого СтрокаВыделенная Из ВыделенныеСтроки Цикл

		СтрокиДляУдаления = Объект.Опции.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаВыделенная.ИдентификаторСтроки));
		Для Каждого Строка Из СтрокиДляУдаления Цикл
			Объект.Опции.Удалить(Строка);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийВариантКомплектации = Элемент.ТекущиеДанные.ВариантКомплектации;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		БазовыеОпции,
		"ВариантКомплектации",
		ТекущийВариантКомплектации,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыАвтомобили

&НаСервере
Процедура АвтомобилиАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиАвтомобильПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиАвтомобильПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиАвтомобильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	Если ТекущиеДанные.Автомобиль <> Справочники.Автомобили.ПустаяСсылка() Тогда
		ТекущиеДанные.Автомобиль = Справочники.Автомобили.ПустаяСсылка()
	КонецЕсли;

	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиВариантКомплектацииПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Вариант комплектации".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиВариантКомплектацииПриИзменении(Элемент)
	
	АвтомобилиВариантКомплектацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиТипСалонаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	Если ТекущиеДанные.Автомобиль <> Справочники.Автомобили.ПустаяСсылка() Тогда
		ТекущиеДанные.Автомобиль = Справочники.Автомобили.ПустаяСсылка()
	КонецЕсли;
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиТипСалонаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Тип салона".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиТипСалонаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиТипСалонаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиЦветПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	Если ТекущиеДанные.Автомобиль <> Справочники.Автомобили.ПустаяСсылка() Тогда
		ТекущиеДанные.Автомобиль = Справочники.Автомобили.ПустаяСсылка()
	КонецЕсли;
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиЦветПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цвет".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиЦветПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиЦветПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиКоличествоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиЦенаАвтомобиляПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиЦенаАвтомобиляПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиЦенаАвтомобиляПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиЦенаАвтомобиляПриИзмененииНаСервере();
	ОбновитьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиСуммаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиСуммаПриИзмененииНаСервере();
	ОбновитьСуммуДокумента();
		
КонецПроцедуры

&НаСервере
Процедура АвтомобилиВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Всего".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиВсегоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиВсегоПриИзмененииНаСервере();
	ОбновитьСуммуДокумента();
		
КонецПроцедуры

&НаСервере
Процедура АвтомобилиСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиСтавкаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма НДС".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиСуммаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиМодельПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	Если ТекущиеДанные.Автомобиль <> Справочники.Автомобили.ПустаяСсылка() Тогда
		ТекущиеДанные.Автомобиль = Справочники.Автомобили.ПустаяСсылка()
	КонецЕсли;
	Если ТекущиеДанные.ВариантКомплектации.Владелец <> ТекущиеДанные.Модель Тогда
		ТекущиеДанные.ВариантКомплектации = Справочники.ВариантыКомплектации.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиМодельПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Модель".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиМодельПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиМодельПриИзмененииНаСервере();
	ТекСтрока = Элементы.Автомобили.ТекущиеДанные;
	Авто = ТекСтрока.Модель;
	Если Авто <> ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Модель Тогда
		СтрокиДляУдаления = Объект.Опции.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ИдентификаторСтроки));
		Для Каждого Строка Из СтрокиДляУдаления Цикл
			Объект.Опции.Удалить(Строка);
		КонецЦикла;
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиМодельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Авто = Элементы.Автомобили.ТекущиеДанные.Модель;
	
	Марка = Элементы.Автомобили.ТекущиеДанные.Марка;
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Марка) И Марка <> ПредопределенноеЗначение("Справочник.Марки.МаркаНеУказана") Тогда
		//Отбор = Новый Структура("Марка", Элементы.Автомобили.ТекущиеДанные.Марка);
		ПараметрыВыбора = Новый Структура("Марка,РежимВыбора", Марка, Истина);
	Иначе
		ПараметрыВыбора = Новый Структура("РежимВыбора", Истина);
	КонецЕсли;
	ОткрытьФорму("Справочник.Модели.ФормаВыбора",
				ПараметрыВыбора,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборМодели"),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиМаркаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Автомобили.ТекущиеДанные;
	Если ТекущиеДанные.Марка <> МаркаМодели(ТекущиеДанные.Модель) И ТекущиеДанные.Марка <> ПредопределенноеЗначение("Справочник.Марки.МаркаНеУказана") Тогда
		ТекущиеДанные.Модель = ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура АвтомобилиЗаказПокупателяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиЗаказПокупателяПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Заказ покупателя".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиЗаказПокупателяПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	АвтомобилиЗаказПокупателяПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОпции

&НаКлиенте
Процедура ОпцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередДобавлениемОпции(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элементы.Опции.ТекущиеДанные.ИдентификаторСтроки = Элементы.Автомобили.ТекущиеДанные.ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыОпции

&НаКлиенте
Процедура ОпцииОпцияПриИзменении(Элемент)
	
	ОпцииОпцияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОпцииОпцияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	ТекущиеДанныеАвтомобиль = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	Обработки.ПакетныйЗаказАвтомобилей.ОпцииОпцияПриИзменении(Объект, ТекущиеДанные, ТекущиеДанныеАвтомобиль, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОпцииКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.ОпцииКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОпцииКоличествоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ОпцииКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОпцииЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.ОпцииЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОпцииЦенаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ОпцииЦенаПриИзмененииНаСервере();
	ОбновитьСуммуДокумента();
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОпцииСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.ОпцииСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОпцииСуммаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ОпцииСуммаПриИзмененииНаСервере();
	ОбновитьСуммуДокумента();
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОпцииСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.ОпцииСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма всего".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОпцииСуммаВсегоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ОпцииСуммаВсегоПриИзмененииНаСервере();
	ОбновитьСуммуДокумента();
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОпцииСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.ОпцииСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОпцииСтавкаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ОпцииСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОпцииСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Обработки.ПакетныйЗаказАвтомобилей.ОпцииСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма НДС".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОпцииСуммаНДСПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ОпцииСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииОпцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	Комплектация = Элементы.Автомобили.ТекущиеДанные.ВариантКомплектации;
	ДоступныеОпцииВариантаКомплектации = ДоступныеОпцииВариантаКомплектации(Комплектация);
	
	Если ДоступныеОпцииВариантаКомплектации.Количество() = 0 Тогда
		ДоступныеОпцииВариантаКомплектации.Добавить(ПредопределенноеЗначение("Справочник.Опции.ПустаяСсылка"));
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Ссылка", ДоступныеОпцииВариантаКомплектации));
	
	ОткрытьФорму(
		"Справочник.Опции.ФормаВыбора",
		ПараметрыОткрытия,
		Элемент,
		ЭтотОбъект,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииОпцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Комплектация = Элементы.Автомобили.ТекущиеДанные.ВариантКомплектации;
	ДоступныеОпцииВариантаКомплектации = ДоступныеОпцииВариантаКомплектации(Комплектация);
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", ДоступныеОпцииВариантаКомплектации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВзаиморасчетыКонтрагентаНаСервере()
	Если ЭтаФорма <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			// пустой договор
			Элементы.ДоговорВзаиморасчетов.РасширеннаяПодсказка.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			Элементы.ДоговорВзаиморасчетов.РасширеннаяПодсказка.Заголовок = "Договор или контрагент не выбран";
		Иначе
			// получим долг
			СтруктураОтбора = Новый Структура("Контрагент,ДоговорВзаиморасчетов",Объект.Контрагент,Объект.ДоговорВзаиморасчетов);
			Долги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора,, "Сумма,СуммаУпр");
			Долг = Долги.Итог("Сумма");
			// выведем на экран этот долг
			Элементы.ДоговорВзаиморасчетов.РасширеннаяПодсказка.Заголовок = "По договору долг контрагент" + ?(Долг < 0,"у","а") + " составляет: " + Формат(?(Долг < 0,-Долг,Долг),"ЧДЦ = 2; ЧН = 0,00") + " " + СокрЛП(Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов.Наименование);
			Если Долг < 0 Тогда
				Элементы.ДоговорВзаиморасчетов.РасширеннаяПодсказка.ЦветТекста = WebЦвета.ТемноКрасный;
			Иначе 
				Элементы.ДоговорВзаиморасчетов.РасширеннаяПодсказка.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВзаиморасчетыКонтрагента(Команда)
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтаФорма);
	ВзаиморасчетыКонтрагентаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Параметры(Команда)
	
	ДокуметОбъект.Организация = Объект.Организация;
	ДокуметОбъект.ПодразделениеКомпании = Объект.ПодразделениеКомпании;
	ДокуметОбъект.Автор = Объект.Автор;
	ДокуметОбъект.ТипЦен = Объект.ТипЦен;
	ДокуметОбъект.ВалютаДокумента = Объект.ВалютаДокумента;
	ДокуметОбъект.КурсДокумента = Объект.КурсДокумента;
	ДокуметОбъект.Дата = Объект.Дата;
	ДокуметОбъект.Контрагент = Объект.Контрагент;
	
	
	// Формируем структуру параметров открытия вспомогательной формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект",                       ДокуметОбъект);
	ПараметрыФормы.Вставить("Операция",                     СокрЛП(ЭтаФорма.Объект.ХозОперация));
	ПараметрыФормы.Вставить("ПоказыватьПараметрыДокумента", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр",               ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
	НеотображаемыеРеквизиты = Новый Массив();
	НеотображаемыеРеквизиты.Добавить("ДокументОснование");
	ПараметрыФормы.Вставить("НеотображаемыеРеквизиты", НеотображаемыеРеквизиты);

	// Проверим на клиенте, есть ли реквизит формы
	Если ЕстьРеквизитНаКлиенте(ЭтаФорма, "Штрихкод") Тогда
		ПараметрыФормы.Вставить("Штрихкод", ЭтаФорма.Штрихкод);
	КонецЕсли;
	
	// параметры выбора документа основание на форме
	Если ЭтаФорма.Элементы.Найти("ДокументОснование") <> Неопределено Тогда
		ПараметрыФормы.Вставить("ПараметрыВыбораДокументаОснование", ЭтаФорма.Элементы.ДокументОснование.ПараметрыВыбора);
		ПараметрыФормы.Вставить("ОграничениеТипаДокументаОснование", ЭтаФорма.Элементы.ДокументОснование.ОграничениеТипа);
	КонецЕсли;
		
	// Перенесем возможные дополнительные параметры
	ПараметрыФормы.Вставить("ДопПараметры", Неопределено);
	
	// Производим открытие формы параметров
	ОткрытьФорму("ОбщаяФорма.ПараметрыДокумента", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ПараметрыДокумента"),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Заполнение(Команда)
	Параметр = 1;
	ОчиститьВопрос(Команда);
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеНаСервере()
	Обработки.ПакетныйЗаказАвтомобилей.ЗаполнитьТЧПоПродажам(ДатаНачала, ДатаОкончания, Объект, ВалютаРегл, ВалютаУпр);	
	Обработки.ПакетныйЗаказАвтомобилей.ПересчитатьСуммуДокумента(Объект);
	ОбновитьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказамПокупателей(Команда)
	Параметр = 3;
	ОчиститьВопрос(Команда);
КонецПроцедуры

&НаСервере
Процедура ПоЗаказамПокупателейНаСервере()
	Обработки.ПакетныйЗаказАвтомобилей.ЗаполнитьТЧПоЗаказамПокупателей(Объект, ВалютаРегл, ВалютаУпр);	
	Обработки.ПакетныйЗаказАвтомобилей.ПересчитатьСуммуДокумента(Объект);
	ОбновитьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказамПоставщику(Команда)
	Параметр = 2;
	ОчиститьВопрос(Команда);
КонецПроцедуры

&НаСервере
Процедура ПоЗаказамПоставщикуНаСервере()
	Обработки.ПакетныйЗаказАвтомобилей.ЗаполнитьТЧПоЗаказамПоставщику(ДатаНачала, ДатаОкончания, Объект, ВалютаРегл, ВалютаУпр);
	Обработки.ПакетныйЗаказАвтомобилей.ПересчитатьСуммуДокумента(Объект);
	ОбновитьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВопрос(Команда)
	Если Объект.Автомобили.Количество() <> 0 ИЛИ Объект.Опции.Количество() <> 0 Тогда
		Оп = Новый ОписаниеОповещения("ОчиститьНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(Оп,"Очистить табличные части?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Да);
	Иначе
		ОчиститьНаКлиенте(КодВозвратаДиалога.Да, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Параметр = 0;
	ОчиститьВопрос(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	Если Объект.Автомобили.Количество() <> 0 Тогда
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КоличествоДокументов = Объект.Автомобили.Итог("Количество");
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗапись", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещения,
			"Количество документов ""Заказ автомобилей поставщику"" для проведения: " + КоличествоДокументов + ". Продожить?",
			РежимДиалогаВопрос.ДаНет,
			0,
			КодВозвратаДиалога.Да
		);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть <Автомобили> не содержит строк.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпций(Команда)
	
	Отказ = Ложь;
	
	ПередДобавлениемОпции(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПодборОпцийЗавершение", ЭтотОбъект);
	
	Комплектация = Элементы.Автомобили.ТекущиеДанные.ВариантКомплектации;
	ДоступныеОпцииВариантаКомплектации = ДоступныеОпцииВариантаКомплектации(Комплектация);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Отбор", Новый Структура("Ссылка", ДоступныеОпцииВариантаКомплектации));
	
	УправлениеДиалогомКлиент.ОткрытьПодборОпций(ЭтотОбъект, , ДопПараметры, ОбработчикОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьДокументовЗаказПоставщику

&НаКлиенте
Процедура НачатьЗапись(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДлительнаяОперация = НачатьЗаписьНаСервере(РежимЗаписи);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			
			ПоказатьПредупреждение(, ДлительнаяОперация.ПодробноеПредставлениеОшибки);
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьЗаписьНаСервере(РежимЗаписи)
	
	ЗаполнениеВерное = Обработки
		.ПакетныйЗаказАвтомобилей
		.ПолучитьОбязательныеРеквизиты(Объект.Автомобили, Объект.Опции, ПолучитьОбязательныеРеквизитыШапки());
	
	Если Не ЗаполнениеВерное Тогда
		
		Возврат Новый Структура("Статус,ПодробноеПредставлениеОшибки", "Ошибка");
		
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура("РежимПроведения", РежимЗаписи);
	ПараметрыОбъекта.Вставить("ТаблицаАвтомобили", Объект.Автомобили.Выгрузить());
	ПараметрыОбъекта.Вставить("ТаблицаОпции", Объект.Опции.Выгрузить());
	ПараметрыОбъекта.Вставить("Комментарий", Объект.Комментарий);
	ПараметрыОбъекта.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Автор", Объект.Автор);
	ПараметрыОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
	ПараметрыОбъекта.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыОбъекта.Вставить("КурсДокумента", Объект.КурсДокумента);
	ПараметрыОбъекта.Вставить("Организация", Объект.Организация);
	ПараметрыОбъекта.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ПараметрыОбъекта.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ПараметрыОбъекта.Вставить("СрокПоставки", Объект.СрокПоставки);
	ПараметрыОбъекта.Вставить("СтатусАвтомобиля", Объект.СтатусАвтомобиля);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обработка пакетного заказа автомобилей'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Обработки.ПакетныйЗаказАвтомобилей.НачатьЗаписьВФоне",
		ПараметрыОбъекта
	);
	
КонецФункции

&НаКлиенте
Процедура ЗаписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "ВсеОК", Ложь) Тогда
		
		ТекстСообщения = НСтр(
			"ru = 'В процессе возникли ошибки:
			|%1
			|Подробности в журнале регестрации'"
		);
		
		Для Каждого Сообщение Из РезультатВыполнения.Сообщения Цикл
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
			
		КонецЦикла;
		
		ПоказатьПредупреждение(, СтрШаблон(ТекстСообщения, РезультатВыполнения.Информация));
		Возврат;
		
	КонецЕсли;
	
	ФормаДокумента = ОткрытьФорму("Документ.ЗаказПоставщикуНаАвтомобиль.ФормаСписка");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ФормаДокумента.Список.Отбор,
		"Ссылка",
		РезультатВыполнения.СписокДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина
	);
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОчиститьНаКлиенте(РезультатВопроса, ЭтотОбъект) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Автомобили.Очистить();
		Объект.Опции.Очистить();
		ОчиститьНаСервере();
		
		Если Параметр = 1 Или Параметр = 2 Тогда
			
			СтандартныйПериод();
			
		ИначеЕсли Параметр = 3 Тогда
			
			ПоЗаказамПокупателейНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	
	Обработки.ПакетныйЗаказАвтомобилей.ПересчитатьСуммуДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПодборОпцийЗавершениеНаСервере(Результат, ДополнительныеПараметры)
	
	РезультатПодбора = ПолучитьИзВременногоХранилища(Результат.Опции);
	
	ИДСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	ТекущиеДанныеАвтомобиль = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	ПараметрыОтбора = Новый Структура ("Опция");
	ПараметрыОтбора.Вставить("ИдентификаторСтроки", ИДСтроки);
	
	Для Каждого Строка Из РезультатПодбора Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Строка);
		
		НайденныеСтроки = Объект.Опции.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Опции.Добавить();
			НоваяСтрока.Опция = Строка.Опция;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.ИдентификаторСтроки = ИДСтроки;
			
			Обработки.ПакетныйЗаказАвтомобилей.ОпцииОпцияПриИзменении(Объект, НоваяСтрока, ТекущиеДанныеАвтомобиль);
			
		Иначе
			
			СтрокаТаблицы = НайденныеСтроки[0];
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + Строка.Количество;
			Обработки.ПакетныйЗаказАвтомобилей.ОпцииКоличествоПриИзменении(Объект, СтрокаТаблицы);
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры
&НаКлиенте
Процедура ПодборОпцийЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Автомобили.ТекущиеДанные.ИдентификаторСтроки);
	
	ПодборОпцийЗавершениеНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеОпцииВариантаКомплектации(Комплектация)
	
	Возврат ОпцииАвтомобилей.ДополнительныеОпцииКомплектации(Комплектация);
	
КонецФункции

&НаКлиенте
Функция СтандартныйПериод()
	// Вызов процедуры клиентского модуля
	ДатаНачала    = ТекущаяДата();
	ДатаОкончания = ТекущаяДата();
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтотОбъект);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Показать(Оп);
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьПослеЗакрытияВопроса(Период, ЭтотОбъект) Экспорт
	Если Период <> Неопределено Тогда
		ДатаНачала    = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
	КонецЕсли; 
	Если Параметр = 1 Тогда
		ЗаполнениеНаСервере();
	Иначе
		ПоЗаказамПоставщикуНаСервере();
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьОбязательныеРеквизитыШапки()
	
	ОбязательныеРеквизиты=Новый Структура();
	ОбязательныеРеквизиты.Вставить("Организация",           Объект.Организация);
	ОбязательныеРеквизиты.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ОбязательныеРеквизиты.Вставить("Автор",                 Объект.Автор);
	ОбязательныеРеквизиты.Вставить("ВалютаДокумента",       Объект.ВалютаДокумента);
	ОбязательныеРеквизиты.Вставить("КурсДокумента",         Объект.КурсДокумента);
	ОбязательныеРеквизиты.Вставить("ТипЦен",                Объект.ТипЦен);
	ОбязательныеРеквизиты.Вставить("Контрагент",            Объект.Контрагент);
	ОбязательныеРеквизиты.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ОбязательныеРеквизиты.Вставить("СрокПоставки",          Объект.СрокПоставки);
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент)
	
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего") + Объект.Опции.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаНДС", Объект.Автомобили.Итог("СуммаНДС") + Объект.Опции.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	ШаблонПредставленийИтогов = Новый Массив();
	СуммаБезНДС = Новый Структура("Ключ,Формат,Шаблон", "СуммаБезНДС", "ЧДЦ=2; ЧН=0,00", "Сумма без НДС: %1 %2");
	ШаблонПредставленийИтогов.Добавить(СуммаБезНДС);
	СуммаНДС = Новый Структура("Ключ,Формат,Шаблон", "СуммаНДС", "ЧДЦ=2; ЧН=0,00", "Сумма НДС: %1 %2");
	ШаблонПредставленийИтогов.Добавить(СуммаНДС);
	СуммаДокумента = Новый Структура("Ключ,Формат,Шаблон", "СуммаДокумента", "ЧДЦ=2; ЧН=0,00", "Всего: %1 %2");
	ШаблонПредставленийИтогов.Добавить(СуммаДокумента);
	
	ПредставленияИтогов = Новый СписокЗначений;
	
	Для каждого ЭлементШаблона Из ШаблонПредставленийИтогов Цикл
		
		Если ИтогиОперации.Свойство(ЭлементШаблона.Ключ) Тогда
			
			ЗначениеИтога = Формат(ИтогиОперации[ЭлементШаблона.Ключ], ЭлементШаблона.Формат);
			ПредставленияИтогов.Добавить(
				ЗначениеИтога,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ЭлементШаблона.Шаблон,
					ЗначениеИтога,
					Объект.ВалютаДокумента
				)
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаРезультатаЗакрытия = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		"ВыборЭлементаРасширенныхИтоговОперации"
	);
	ПоказатьВыборИзМеню(ОбработкаРезультатаЗакрытия, ПредставленияИтогов, Элемент);
	
КонецПроцедуры

// Производит формирование и установку форматированной строки представления итоговой суммы по операции.
//
// Параметры
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
&НаСервере
Процедура ОбновитьСуммуДокумента()
	
	// Проверим целесообразность дальнейших операций
	Если Элементы.НадписьСуммаДокумента.Видимость Тогда
		// Получим структуру итогов 
		
		ВремСуммаАвтомобилей = Объект.Автомобили.Итог("СуммаВсего");
		ВремСуммаОпций       = Объект.Опции.Итог("СуммаВсего");
		
		СуммаДокумента = ВремСуммаАвтомобилей+ВремСуммаОпций;
		
		// Формируем перечень основной информации об итогах операции
		ИтогиОперации = Новый Структура();
		ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
		
		ВремСуммаАвтомобилей = Объект.Автомобили.Итог("СуммаНДС");
		ВремСуммаОпций       = Объект.Опции.Итог("СуммаНДС");
		СуммаДокумента = ВремСуммаАвтомобилей+ВремСуммаОпций;
		
		// Формируем перечень расширенной информации об итогах операции
		ИтогиОперации.Вставить("СуммаНДС",    СуммаДокумента);
		ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
				
		// Формируем и устанавливаем заголовок поля итоговой суммы документа
		Элементы.НадписьСуммаДокумента.Заголовок = " Итого: " + Формат(ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00") + " " + Объект.ВалютаДокумента + " (" + Формат(Объект.КурсДокумента, "ЧДЦ=4; ЧН=0,0000") + ")";
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСуммуДокумента()

&НаСервере
Функция МаркаМодели(Модель)
	Возврат Модель.Марка;
КонецФункции

&НаКлиенте
Процедура ПередДобавлениемОпции(Отказ)
	
	Если Элементы.Автомобили.ТекущаяСтрока = Неопределено Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Табличная часть ""Автомобили"" пустая.
			|Нельзя добавить опции'"
		);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Комплектация = Элементы.Автомобили.ТекущиеДанные.ВариантКомплектации;
	ДоступныеОпцииВариантаКомплектации = ДоступныеОпцииВариантаКомплектации(Комплектация);
	
	Если ДоступныеОпцииВариантаКомплектации.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для выбранного варианта комплектации установка дополнительных опций не предусмотрена'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	ПересчетаПоказателейОбъекта(РезультатОповещения, ДополнительныеПараметры);
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Действие", "") = "ВыборАвтомобиляСервер" Тогда
		Если РезультатОповещения = "ОТМЕНА" Тогда
			Возврат;
		ИначеЕсли РезультатОповещения = "ДА" Тогда
			ПараметрыДействия = Новый Структура("ОчиститьТЧ", Истина);
		Иначе
			ПараметрыДействия = Новый Структура("ОчиститьТЧ", Ложь);
		КонецЕсли;
		
		Объект.Автомобиль = ДополнительныеПараметры.Автомобиль;
		ЗначениеВРеквизитФормы(Объект.Автомобиль.ПолучитьОбъект(), "АвтомобильЗаказа");
		
		Документы.ЗаказПоставщикуНаАвтомобиль.АвтомобильПриИзменении(Объект, ПараметрыДействия);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
													 ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыборАвтомобиля" Тогда
		Если (Объект.Опции.Количество() > 0) Тогда
			ПараметрыДействия = Новый Структура("Действие,Автомобиль", "ВыборАвтомобиляСервер", РезультатОповещения);
			
			Описание = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия);
			
			ТекстВопроса = НСтр("ru = 'Очищать табличные части опции и оборудование?'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ДА"     , "Да");
			Кнопки.Добавить("НЕТ"    , "Нет");
			Кнопки.Добавить("ОТМЕНА" , "Отмена");
			
			ПоказатьВопрос(Описание, ТекстВопроса, Кнопки);
			
			Возврат;
		Иначе
			ДополнительныеПараметры = Новый Структура("Действие,Автомобиль", "ВыборАвтомобиляСервер", РезультатОповещения);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "ВыборМодели" Тогда
		Элементы.Автомобили.ТекущиеДанные.Модель = РезультатОповещения;
		АвтомобилиМодельПриИзменении(Неопределено);
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ПересчетаПоказателейОбъекта(РезультатОповещения, Событие)
	
	Если Событие <> "РазрешенияДляПересчета" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "ТребуетсяПересчетЦен",  Ложь);
	
	Если ТребуетсяУстановкаЦен Тогда
		
		НаМомент = Объект.Дата;
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации");
		
		Для Каждого Автомобиль Из Объект.Автомобили Цикл
			
			ЗаполнитьЗначенияСвойств(ОбъектыПоискаЦены, Автомобиль);
			Автомобиль.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
				Объект.ТипЦен,
				ОбъектыПоискаЦены,
				Автомобиль.ВариантКомплектации,
				НаМомент,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента
			);
			
			Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиЦенаАвтомобиляПриИзменении(Объект, Автомобиль, РезультатОповещения);
			
			ОпцииАвтомобиля = Объект.Опции.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Автомобиль.ИдентификаторСтроки));
			
			Для Каждого Опция Из ОпцииАвтомобиля Цикл
				
				Опция.Цена = ЦенообразованиеСервер.ПолучитьЦенуОпции(
					Объект.ТипЦен,
					Опция.Опция,
					Автомобиль.Модель,
					Автомобиль.ВариантКомплектации,
					НаМомент,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента
				);  
				
				Обработки.ПакетныйЗаказАвтомобилей.ОпцииЦенаПриИзменении(Объект, Опция, РезультатОповещения);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "СтарыйКурс", 0);
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс * НовыйКурс) = 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"));
			Возврат;
			
		КонецЕсли;
		
		Если СтарыйКурс = НовыйКурс Тогда
			
			Возврат;
			
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
		
		Для Каждого Автомобиль Из Объект.Автомобили Цикл
			
			Автомобиль.Цена = Окр(Автомобиль.Цена * КоэффициентСоотношенияКурсов, 2);
			Обработки.ПакетныйЗаказАвтомобилей.АвтомобилиЦенаАвтомобиляПриИзменении(Объект, Автомобиль, РезультатОповещения);
			
		КонецЦикла;
		
		Для Каждого Опция Из Объект.Опции Цикл
			
			Опция.Цена = Окр(Опция.Цена * КоэффициентСоотношенияКурсов, 2);
			Обработки.ПакетныйЗаказАвтомобилей.ОпцииЦенаПриИзменении(Объект, Опция, РезультатОповещения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатОповещения.Вставить("ТребуетсяУстановкаЦен", Ложь);
	РезультатОповещения.Вставить("ТребуетсяПересчетЦен", Ложь);
	ОбновитьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

