
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТребуетсяОбновлениеСпискаЮридическихЛиц = Истина;
	ТребуетсяОбновлениеСпискаФизическихЛиц = Истина;
	ТребуетсяОбновлениеСпискаКонтактныеЛица = Истина;
	ТребуетсяОбновлениеЖурнала = Истина;
	
	ЮридическиеЛицаЭлементовНаСтранице = 30;
	ФизическиеЛицаЭлементовНаСтранице = 30;
	ЖурналЭлементовНаСтранице = 30;
	КонтактныеЛицаЭлементовНаСтранице = 30;
	
	НастройкиОтображения = Новый ФиксированнаяСтруктура(
		"ЦветВведеногоAPIКлюча,ЦветПустогоAPIКлюча",
		ЦветаСтиля.ЦветВведеногоAPIКлюча,
		ЦветаСтиля.ЦветПустогоAPIКлюча
	);
	
	ПредставлениеАдресаСервера = ИнтеграцияПЭППереопределяемый.АдресСервераПЭП();
	
	APIКлюч = ИнтеграцияПЭППереопределяемый.APIКлюч();
	ТребуетсяПолучитьAPIКлюч = ПустаяСтрока(APIКлюч);
	ОбновитьПредставлениеAPIКлюча(ЭтотОбъект);
	
	Если Не ТребуетсяПолучитьAPIКлюч Тогда
		
		ТекущийБаланс();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыЗадания = ЗаявкиНаПодписаниеПЭП.ПараметрыЗаданияСинхронизацииЗаявок();
	РасписаниеСинхронизации = ПараметрыЗадания.РасписаниеСтрокой;
	Расписание = ПараметрыЗадания.Расписание;
	ИспользованиеСинхронизации = ПараметрыЗадания.Использование;
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТребуетсяПолучитьAPIКлюч Тогда
		
		НачатьАвторизацию();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаЮридическиеЛица И ТребуетсяОбновлениеСпискаЮридическихЛиц Тогда
		
		НачатьОбновлениеСпискаЮридическихЛиц();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФизическиеЛица И ТребуетсяОбновлениеСпискаФизическихЛиц Тогда
		
		НачатьОбновлениеСпискаФизическихЛиц();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКонтактныеЛица И ТребуетсяОбновлениеСпискаКонтактныеЛица Тогда 
		
		НачатьОбновлениеСпискаКонтактныхЛиц();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСистемныйЖурнал И ТребуетсяОбновлениеЖурнала Тогда 
		
		НачатьОбновлениеЖурнала();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическиеЛицаТекущаяСтраницаПриИзменении(Элемент)
	
	НачатьОбновлениеСпискаЮридическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическиеЛицаТекущаяСтраницаПриИзменении(Элемент)
	
	НачатьОбновлениеСпискаФизическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаТекущаяСтраницаПриИзменении(Элемент)
	
	НачатьОбновлениеСпискаКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналТекущаяСтраницаПриИзменении(Элемент)
	
	НачатьОбновлениеЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеСинхронизацииПриИзменении(Элемент)
	
	ИспользованиеСинхронизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеСинхронизацииНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("РасписаниеСтрокойНажатиеЗавершение", ЭтотОбъект));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЮридическиеЛица

&НаКлиенте
Процедура ЮридическиеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеЮрЛица = ЮридическиеЛица.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Не ЗначениеЗаполнено(ДанныеЮрЛица.Участник) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нет связи с объектом в базе. Редактирование не доступно.'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИдентификаторУчастника", ДанныеЮрЛица.ИдентификаторУчастника);
	ПараметрыОткрытия.Вставить("ЮридическоеЛицо", ДанныеЮрЛица.Участник);
	ПараметрыОткрытия.Вставить("Наименование", ДанныеЮрЛица.Имя);
	ПараметрыОткрытия.Вставить("ИНН", ДанныеЮрЛица.ИНН);
	ПараметрыОткрытия.Вставить("Адрес", ДанныеЮрЛица.Адрес);
	
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.ЮридическоеЛицо",
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ОбновитьЮридическоеЛицоЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеКонтактногоЛица = КонтактныеЛица.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Не ЗначениеЗаполнено(ДанныеКонтактногоЛица.Участник) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нет связи с объектом в базе. Редактирование не доступно.'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИдентификаторУчастника", ДанныеКонтактногоЛица.ИдентификаторУчастника);
	ПараметрыОткрытия.Вставить("КонтактноеЛицо", ДанныеКонтактногоЛица.Участник);
	ПараметрыОткрытия.Вставить("Имя", ДанныеКонтактногоЛица.Имя);
	ПараметрыОткрытия.Вставить("Почта", ДанныеКонтактногоЛица.Почта);
	ПараметрыОткрытия.Вставить("Телефон", ДанныеКонтактногоЛица.Телефон);
	
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.КонтактноеЛицо",
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ОбновитьКонтактноеЛицоЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФизическиеЛица

&НаКлиенте
Процедура ФизическиеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеФизическогоЛица = ЭтотОбъект["ФизическиеЛица"].НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Не ЗначениеЗаполнено(ДанныеФизическогоЛица.Участник) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нет связи с объектом в базе. Редактирование не доступно.'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИдентификаторУчастника", ДанныеФизическогоЛица.ИдентификаторУчастника);
	ПараметрыОткрытия.Вставить("ФизическоеЛицо", ДанныеФизическогоЛица.Участник);
	ПараметрыОткрытия.Вставить("Фамилия", ДанныеФизическогоЛица.Фамилия);
	ПараметрыОткрытия.Вставить("Имя", ДанныеФизическогоЛица.Имя);
	ПараметрыОткрытия.Вставить("Отчество", ДанныеФизическогоЛица.Отчество);
	ПараметрыОткрытия.Вставить("Почта", ДанныеФизическогоЛица.Почта);
	ПараметрыОткрытия.Вставить("Телефон", ДанныеФизическогоЛица.Телефон);
	
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.ФизическоеЛицо",
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ОбновитьФизическоеЛицоЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСистемныйЖурнал

&НаКлиенте
Процедура СистемныйЖурналВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗаписьСистемногоЖурнала = СистемныйЖурнал.НайтиПоИдентификатору(ВыбраннаяСтрока);
	//@skip-check structure-consructor-too-many-keys
	ПараметрыОткрытия = Новый Структура(
		"ДатаСоздания,
		|ИдентификаторДанных,
		|ИдентификаторЗаписи,
		|ПодсистемаПЭП,
		|УровеньЖурнала,
		|Контекст,
		|Данные"
	);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЗаписьСистемногоЖурнала);
	
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.СобытиеЖурнала",
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Авторизоваться(Команда)
	
	НачатьАвторизацию();
	
КонецПроцедуры

&НаКлиенте
Процедура Регистрация(Команда)
	
	ЗапуститьПриложение("https://doc4b.ru/register");
	
КонецПроцедуры

&НаКлиенте
Процедура Выйти(Команда)
	
	ТребуетсяПолучитьAPIКлюч = Истина;
	СохранитьAPIКлюч(Неопределено);
	ОбновитьПредставлениеAPIКлюча(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетНаОплату(Команда)
	
	НачатьСозданиеСчетаНаОплату();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическиеЛицаОбновить(Команда)
	
	НачатьОбновлениеСпискаЮридическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическиеЛицаНазад(Команда)
	
	ЮридическиеЛицаТекущаяСтраница = ЮридическиеЛицаТекущаяСтраница - 1;
	НачатьОбновлениеСпискаЮридическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическиеЛицаВперед(Команда)
	
	ЮридическиеЛицаТекущаяСтраница = ЮридическиеЛицаТекущаяСтраница + 1;
	НачатьОбновлениеСпискаЮридическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическиеЛицаВперед(Команда)
	
	ФизическиеЛицаТекущаяСтраница = ФизическиеЛицаТекущаяСтраница + 1;
	НачатьОбновлениеСпискаФизическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическиеЛицаНазад(Команда)
	
	ФизическиеЛицаТекущаяСтраница = ФизическиеЛицаТекущаяСтраница - 1;
	НачатьОбновлениеСпискаФизическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическиеЛицаОбновить(Команда)
	
	НачатьОбновлениеСпискаФизическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВперед(Команда)
	
	КонтактныеЛицаТекущаяСтраница = КонтактныеЛицаТекущаяСтраница + 1;
	НачатьОбновлениеСпискаКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаНазад(Команда)
	
	КонтактныеЛицаТекущаяСтраница = КонтактныеЛицаТекущаяСтраница - 1;
	НачатьОбновлениеСпискаКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаОбновить(Команда)
	
	НачатьОбновлениеСпискаКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЮридическоеЛицо(Команда)
	
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.ЮридическоеЛицо",
		,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ДобавитьЮридическоеЛицоЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизическоеЛицо(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.ФизическоеЛицо",
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ДобавитьФизическоеЛицоЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактноеЛицо(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.КонтактноеЛицо",
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ДобавитьКонтактноеЛицоЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВперед(Команда)
	
	ЖурналТекущаяСтраница = ЖурналТекущаяСтраница + 1;
	НачатьОбновлениеЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналНазад(Команда)
	
	ЖурналТекущаяСтраница = ЖурналТекущаяСтраница - 1;
	НачатьОбновлениеЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизацию(Команда)
	
	Попытка
		
		ВыполнитьСинхронизациюНаСервере();
		ПоказатьПредупреждение(, НСтр("ru = 'Обновлены статусы заявок на подписание'"));
		
	Исключение
		
		ВызватьИсключение НСтр("ru = 'Не удалось обновить статус заявок на подписание.
									 |Подробнее в журнале регистрации'");
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область APIКлюч

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.Авторизация",
		,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Новый ОписаниеОповещения("АвторизацияЗаверщение", ЭтотОбъект)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияЗаверщение(Ключ, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Ключ) Тогда
		
		ТребуетсяПолучитьAPIКлюч = Ложь;
		СохранитьAPIКлюч(Ключ);
		ТекущийБаланс();
		ОбновитьПредставлениеAPIКлюча(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьAPIКлюч(APIКлюч)
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.КлючAPIПЭП.Установить(APIКлюч);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеAPIКлюча(Форма)
	
	Если Форма.ТребуетсяПолучитьAPIКлюч Тогда
		
		Форма.ПредставлениеAPIКлюча = Новый ФорматированнаяСтрока(
			"Авторизация не выполнена",
			,
			Форма.НастройкиОтображения.ЦветПустогоAPIКлюча
		);
		
	Иначе
		
		Форма.ПредставлениеAPIКлюча = Новый ФорматированнаяСтрока(
			"Авторизация выполнена",
			,
			Форма.НастройкиОтображения.ЦветВведеногоAPIКлюча
		);
		
	КонецЕсли;
	
	Форма.Элементы.Авторизоваться.Видимость = Форма.ТребуетсяПолучитьAPIКлюч;
	Форма.Элементы.Регистрация.Видимость = Форма.ТребуетсяПолучитьAPIКлюч;
	Форма.Элементы.Выйти.Видимость = Не Форма.ТребуетсяПолучитьAPIКлюч;
	
КонецПроцедуры

#КонецОбласти

#Область Биллинг

&НаСервере
Процедура ТекущийБаланс()
	
	Попытка
		
		ПредставлениеТекущегоБаланса = ОбщегоНазначенияПЭП.МодульИнтеграции().ТекущийБаланс();
		
	Исключение
		
		ПредставлениеТекущегоБаланса = НСтр("ru = 'Не удалось получить'");
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеСчетаНаОплату()
	
	ОткрытьФорму(
		"Обработка.ЛичныйКабинетПЭП.Форма.СозданиеСчетаНаОплату",
		,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("СозданиеСчетаНаОплатуЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеСчетаНаОплатуЗавершение(ДанныеСчета, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСчета = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьСчетНаОплатуНаСервере(ДанныеСчета);
	ПоказатьПредупреждение(, НСтр("ru = 'Заявка на счет отправлена'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьСчетНаОплатуНаСервере(ДанныеСчета)
	
	Если Не УчастникиПЭП.УчастникЗарегистрированВПЭП(ДанныеСчета.ЮридическоеЛицо) Тогда
		
		ДанныеУчастника = УчастникиПЭП.ДанныеЮридическогоЛица(ДанныеСчета.ЮридическоеЛицо);
		ДанныеУчастника.Вставить("ЮридическоеЛицо", ДанныеСчета.ЮридическоеЛицо);
		ДанныеУчастника.Вставить(
			"ИдентификаторУчастника",
			УчастникиПЭП.ИдентификаторУчастника(ДанныеСчета.ЮридическоеЛицо)
		);
		ТипУчастника = Новый Структура("ЭтоЮридическоеЛицо,ЭтоКонтактноеЛицо,ЭтоФизическоеЛицо", Истина, Ложь, Ложь);
		
		Попытка
			
			УчастникиПЭП.ОтправитьИлиОбновитьУчастника(ДанныеУчастника, ТипУчастника);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				Нстр("ru = 'Простая электронная подпись.Создание участников при заказе счета'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ВызватьИсключение НСтр("ru = 'Не удалось зарегистрировать огранизацию'");
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОбщегоНазначенияПЭП.МодульИнтеграции().СоздатьСчетНаОплату(ДанныеСчета);
	
КонецПроцедуры

#КонецОбласти

#Область Синхронизация

&НаСервере
Процедура ИспользованиеСинхронизацииПриИзмененииНаСервере()
	
	ЗаявкиНаПодписаниеПЭП.ОбновитьПараметрыЗаданияСинхронизацииЗаявок(
		Новый Структура("Использование", ИспользованиеСинхронизации));
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Строка(Результат) <> РасписаниеСинхронизации Тогда
		
		Расписание = Результат;
		РасписаниеСинхронизации  = Строка(Результат);
		ОбновитьРасписаниеЗаданияСинхронизацииЗаявок();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьРасписаниеЗаданияСинхронизацииЗаявок()
	
	ЗаявкиНаПодписаниеПЭП.ОбновитьПараметрыЗаданияСинхронизацииЗаявок(
		Новый Структура("Расписание", Расписание));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Элементы.РасписаниеСинхронизации.Доступность = ИспользованиеСинхронизации;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьСинхронизациюНаСервере()
	
	ЗаявкиНаПодписаниеПЭП.ОбновитьСтатусЗаявокНаПодпись();
	
КонецПроцедуры

#КонецОбласти

#Область ЮридическиеЛица

&НаКлиенте
Процедура НачатьОбновлениеСпискаЮридическихЛиц()
	
	Элементы.СтраницыЮрЛица.ТекущаяСтраница = Элементы.ЮридическиеЛицаОбновление;
	
	Если ЮридическиеЛицаТекущаяСтраница = 0 Тогда
		
		ЮридическиеЛицаТекущаяСтраница = 1;
		
	КонецЕсли;
	
	ОбновитьСписокЮридическихЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЮридическихЛиц()
	
	НумерацияСтраниц = Новый Структура(
		"Текущая,НаСтранице",
		ЮридическиеЛицаТекущаяСтраница,
		ЮридическиеЛицаЭлементовНаСтранице
	);
	
	Попытка
		
		Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().ЮридическиеЛица(НумерацияСтраниц);
		РасчитатьНумерациюСтраниц(Результат.НумерацияСтраниц, "ЮридическиеЛица");
		ЗаполнитьЮридическиеЛица(Результат.ЮридическиеЛица);
		ТребуетсяОбновлениеСпискаЮридическихЛиц = Ложь;
		
	Исключение
		
		Элементы.СтраницыЮрЛица.ТекущаяСтраница = Элементы.ЮридическиеЛицаОшибка;
		Элементы.ЮридическиеЛицаОшибкаТекстОшибки.Заголовок = ОбработкаОшибок.КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
		Возврат;
		
	КонецПопытки;
	
	Элементы.СтраницыЮрЛица.ТекущаяСтраница = Элементы.ЮридическиеЛицаДанные;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЮридическиеЛица(ЮридическиеЛицаПЭП)
	
	ЮридическиеЛица.Очистить();
	
	Для Каждого ЮрЛицо Из ЮридическиеЛицаПЭП Цикл
		
		НовоеЮридическоеЛицо = ЮридическиеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеЮридическоеЛицо, ЮрЛицо);
		НовоеЮридическоеЛицо.Участник = УчастникиПЭП
			.УчастникПоИдентификатору(НовоеЮридическоеЛицо.ИдентификаторУчастника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЮридическоеЛицоЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьЮридическоеЛицоНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЮридическоеЛицоНаСервере(ДанныеЮрЛица)
	
	Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().НовоеЮридическоеЛицо(ДанныеЮрЛица);
	Результат.Вставить("Участник", ДанныеЮрЛица.ЮридическоеЛицо);
	УчастникиПЭП.ЗафиксироватьРегистрациюУчастникаВПЭП(ДанныеЮрЛица.ЮридическоеЛицо);
	ДобавитьЮридическоеЛицоВСписок(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЮридическоеЛицоВСписок(Результат)
	
	ЗаполнитьЗначенияСвойств(ЮридическиеЛица.Добавить(), Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЮридическоеЛицоЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьЮридическоеЛицоНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЮридическоеЛицоНаСервере(ДанныеЮрЛица)
	
	Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().ОбновитьЮридическоеЛицо(ДанныеЮрЛица);
	ОбновитьЮридическоеЛицоВСписке(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЮридическоеЛицоВСписке(ДанныеЮрЛица)
	
	Голова = МассивыКлиентСервер.Голова(
		ЮридическиеЛица.НайтиСтроки(
			Новый Структура("ИдентификаторУчастника", ДанныеЮрЛица.ИдентификаторУчастника)
		)
	);
	
	Если Голова <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Голова, ДанныеЮрЛица);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

&НаКлиенте
Процедура НачатьОбновлениеСпискаФизическихЛиц()
	
	Элементы.СтраницыФизЛица.ТекущаяСтраница = Элементы.ФизическиеЛицаОбновление;
	
	Если ФизическиеЛицаТекущаяСтраница = 0 Тогда
		
		ФизическиеЛицаТекущаяСтраница = 1;
		
	КонецЕсли;
	
	ОбновитьСписокФизическихЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокФизическихЛиц()
	
	НумерацияСтраниц = Новый Структура(
		"Текущая,НаСтранице",
		ФизическиеЛицаТекущаяСтраница,
		ФизическиеЛицаЭлементовНаСтранице
	);
	
	Попытка
		
		Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().ФизическиеЛица(НумерацияСтраниц);
		РасчитатьНумерациюСтраниц(Результат.НумерацияСтраниц, "ФизическиеЛица");
		ЗаполнитьФизическиеЛица(Результат.ФизическиеЛица);
		ТребуетсяОбновлениеСпискаФизическихЛиц = Ложь;
		
	Исключение
		
		Элементы.СтраницыФизЛица.ТекущаяСтраница = Элементы.ФизическиеЛицаОшибка;
		Элементы.ФизическиеЛицаОшибкаТекстОшибки.Заголовок = ОбработкаОшибок.КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
		Возврат;
		
	КонецПопытки;
	
	Элементы.СтраницыФизЛица.ТекущаяСтраница = Элементы.ФизическиеЛицаДанные;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизическиеЛица(ФизическиеЛицаПЭП)
	
	ФизическиеЛица.Очистить();
	
	Для Каждого ФизЛицо Из ФизическиеЛицаПЭП Цикл
		
		НовоеФизическоеЛицо = ФизическиеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеФизическоеЛицо, ФизЛицо);
		НовоеФизическоеЛицо.Участник = УчастникиПЭП
			.УчастникПоИдентификатору(НовоеФизическоеЛицо.ИдентификаторУчастника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизическоеЛицоЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьФизическоеЛицоНаСервере(Результат)
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФизическоеЛицоНаСервере(ДанныеФизЛица)
	
	Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().НовоеФизическоеЛицо(ДанныеФизЛица);
	Результат.Вставить("Участник", ДанныеФизЛица.ФизическоеЛицо);
	УчастникиПЭП.ЗафиксироватьРегистрациюУчастникаВПЭП(ДанныеФизЛица.ФизическоеЛицо);
	ДобавитьФизическоеЛицоВСписок(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФизическоеЛицоВСписок(Результат)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект["ФизическиеЛица"].Добавить(), Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФизическоеЛицоЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьФизическоеЛицоНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФизическоеЛицоНаСервере(Данные)
	
	Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().ОбновитьФизическоеЛицо(Данные);
	ОбновитьФизическоеЛицоВСписке(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФизическоеЛицоВСписке(Данные)
	
	Голова = МассивыКлиентСервер.Голова(
		ЭтотОбъект["ФизическиеЛица"].НайтиСтроки(
			Новый Структура("ИдентификаторУчастника", Данные.ИдентификаторУчастника)
		)
	);
	
	Если Голова <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Голова, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактныеЛица

&НаКлиенте
Процедура НачатьОбновлениеСпискаКонтактныхЛиц()
	
	Элементы.СтраницыКонтактныеЛица.ТекущаяСтраница = Элементы.КонтактныеЛицаОбновление;
	
	Если КонтактныеЛицаТекущаяСтраница = 0 Тогда
		
		КонтактныеЛицаТекущаяСтраница = 1;
		
	КонецЕсли;
	
	ОбновитьСписокКонтактныхЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКонтактныхЛиц()
	
	НумерацияСтраниц = Новый Структура(
		"Текущая,НаСтранице",
		КонтактныеЛицаТекущаяСтраница,
		КонтактныеЛицаЭлементовНаСтранице
	);
	
	Попытка
		
		Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().КонтактныеЛица(НумерацияСтраниц);
		РасчитатьНумерациюСтраниц(Результат.НумерацияСтраниц, "КонтактныеЛица");
		ЗаполнитьКонтактныеЛица(Результат.КонтактныеЛица);
		ТребуетсяОбновлениеСпискаКонтактныеЛица = Ложь;
		
	Исключение
		
		Элементы.СтраницыКонтактныеЛица.ТекущаяСтраница = Элементы.КонтактныеЛицаОшибка;
		Элементы.КонтактныеЛицаОшибкаТекстОшибки.Заголовок = ОбработкаОшибок.КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
		Возврат;
		
	КонецПопытки;
	
	Элементы.СтраницыКонтактныеЛица.ТекущаяСтраница = Элементы.КонтактныеЛицаДанные;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактныеЛица(КонтактныеЛицаПЭП)
	
	КонтактныеЛица.Очистить();
	
	Для Каждого КонтактноеЛицо Из КонтактныеЛицаПЭП Цикл
		
		НовоеКонтактноеЛицо = КонтактныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеКонтактноеЛицо, КонтактноеЛицо);
		НовоеКонтактноеЛицо.Участник = УчастникиПЭП
			.УчастникПоИдентификатору(НовоеКонтактноеЛицо.ИдентификаторУчастника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактноеЛицоЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьКонтактноеЛицоНаСервере(Результат)
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактноеЛицоНаСервере(ДанныеКонтактноеЛицо)
	
	Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().НовоеКонтактноеЛицо(ДанныеКонтактноеЛицо);
	Результат.Вставить("Участник", ДанныеКонтактноеЛицо.КонтактноеЛицо);
	УчастникиПЭП.ЗафиксироватьРегистрациюУчастникаВПЭП(ДанныеКонтактноеЛицо.КонтактноеЛицо);
	ДобавитьКонтактноеЛицоВСписок(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактноеЛицоВСписок(Результат)
	
	ЗаполнитьЗначенияСвойств(КонтактныеЛица.Добавить(), Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактноеЛицоЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьКонтактноеЛицоНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактноеЛицоНаСервере(Данные)
	
	Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().ОбновитьКонтактноеЛицо(Данные);
	ОбновитьКонтактноеЛицоВСписке(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактноеЛицоВСписке(Данные)
	
	Голова = МассивыКлиентСервер.Голова(
		КонтактныеЛица.НайтиСтроки(
			Новый Структура("ИдентификаторУчастника", Данные.ИдентификаторУчастника)
		)
	);
	
	Если Голова <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Голова, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Журнал

&НаКлиенте
Процедура НачатьОбновлениеЖурнала()
	
	Элементы.СтраницыСистемныйЖурнал.ТекущаяСтраница = Элементы.СистемныйЖурналОбновление;
	
	Если ЖурналТекущаяСтраница = 0 Тогда
		
		ЖурналТекущаяСтраница = 1;
		
	КонецЕсли;
	
	ОбновитьЖурнал();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЖурнал()
	
	НумерацияСтраниц = Новый Структура(
		"Текущая,НаСтранице",
		ЖурналТекущаяСтраница,
		ЖурналЭлементовНаСтранице
	);
	
	Попытка
		
		Результат = ОбщегоНазначенияПЭП.МодульИнтеграции().СистемныйЖурнал(НумерацияСтраниц);
		РасчитатьНумерациюСтраниц(Результат.НумерацияСтраниц, "Журнал");
		ЗаполнитьЖурнал(Результат.СобытияЖурнала);
		ТребуетсяОбновлениеЖурнала = Ложь;
		
	Исключение
		
		Элементы.СтраницыСистемныйЖурнал.ТекущаяСтраница = Элементы.СистемныйЖурналОшибка;
		Элементы.СистемныйЖурналОшибкаТекстОшибки.Заголовок = ОбработкаОшибок.КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
		Возврат;
		
	КонецПопытки;
	
	Элементы.СтраницыСистемныйЖурнал.ТекущаяСтраница = Элементы.СистемныйЖурналДанные;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЖурнал(СобытияЖурнала)
	
	СистемныйЖурнал.Очистить();
	
	Для Каждого Событие Из СобытияЖурнала Цикл
		
		ЗаполнитьЗначенияСвойств(СистемныйЖурнал.Добавить(), Событие);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Нумерация

&НаСервере
Процедура РасчитатьНумерациюСтраниц(НумерацияСтраниц, ПрефиксСчетчика)
	
	// На сервере нумерация с 0
	НумерацияСтраниц.Страница = НумерацияСтраниц.Страница;
	
	ЭтотОбъект[ПрефиксСчетчика + "ВсегоСтраниц"] = НумерацияСтраниц.ВсегоСтраниц;
	ЭтотОбъект[ПрефиксСчетчика + "ТекущаяСтраница"] = НумерацияСтраниц.Страница;
	ЭтотОбъект[ПрефиксСчетчика + "ЭлементовНаСтранице"] = НумерацияСтраниц.НаСтранице;
	
	Элементы[ПрефиксСчетчика + "Назад"].Доступность = НумерацияСтраниц.Страница > 1;
	Элементы[ПрефиксСчетчика + "Вперед"].Доступность = НумерацияСтраниц.Страница < НумерацияСтраниц.ВсегоСтраниц;
	Элементы[ПрефиксСчетчика + "ТекущаяСтраница"].СписокВыбора.Очистить();
	
	Для Сч = 1 По НумерацияСтраниц.ВсегоСтраниц Цикл
		
		Элементы[ПрефиксСчетчика + "ТекущаяСтраница"].СписокВыбора.Добавить(Сч);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
