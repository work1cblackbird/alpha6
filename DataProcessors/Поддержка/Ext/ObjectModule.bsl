// Модуль обработки "Поддержка"
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция предназначена для получения информации о системе, для отправки в службу поддержки программы.
//
// Параметры:
//  СтруктураПараметров - "Структура" - Фильтр информации о системе.
//
// Возвращаемое значение:
//  Структура:
//   Текст - Текст с информацией о системе.
//   СписокФайлов - Полные пути к файлам вложения.
//   СписокОшибок - Список возникших ошибок.
//
Функция СборИнформацииОСистеме(СтруктураПараметров) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("СписокФайлов", Новый Массив); // Полные пути к файлам.
	Результат.Вставить("СписокОшибок", Новый Массив); // Список возникших ошибок.
	
	СчетчикБлоков = 1;
	
	// 1. ОБЩАЯ ИНФОРМАЦИЯ.
	Если СтруктураПараметров.Свойство("ОбщиеСведения")
		ИЛИ СтруктураПараметров.Свойство("ИнформацияОбУстановленныхСоединениях") Тогда
		
		ТекстБлока = "";
		
		Если СтруктураПараметров.Свойство("ОбщиеСведения") Тогда
			
			ВремТекст = ПолучитьОбщиеСведения();
			
			Если НЕ ПустаяСтрока(ВремТекст) Тогда
				
				Если НЕ ПустаяСтрока(ТекстБлока) Тогда
					
					ТекстБлока = ТекстБлока + Символы.ПС;
				КонецЕсли;
				
				ТекстБлока = ТекстБлока + " " + НСтр("ru = 'Общие сведения о программе и системе:'");
				ТекстБлока = ТекстБлока + Символы.ПС;
				ТекстБлока = ТекстБлока + ВремТекст;
				ТекстБлока = ТекстБлока + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ИнформацияОбУстановленныхСоединениях") Тогда
			
			ВремТекст = ПолучитьИнформациюОбУстановленныхСоединениях(Результат);
			
			Если НЕ ПустаяСтрока(ВремТекст) Тогда
				
				Если НЕ ПустаяСтрока(ТекстБлока) Тогда
					
					ТекстБлока = ТекстБлока + Символы.ПС;
				КонецЕсли;
				
				ТекстБлока = ТекстБлока + " " + НСтр("ru = 'Информация об установленных соединениях с текущей ИБ:'");
				ТекстБлока = ТекстБлока + Символы.ПС;
				ТекстБлока = ТекстБлока + ВремТекст;
				ТекстБлока = ТекстБлока + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
		// Если какая-то информация есть, то формируем текст информационного раздела.
		Если НЕ ПустаяСтрока(ТекстБлока) Тогда
			
			Результат.Текст = Результат.Текст + СчетчикБлоков + НСтр("ru = '. ИНФОРМАЦИЯ О ПРОГРАММЕ'");
			Результат.Текст = Результат.Текст + Символы.ПС;
			Результат.Текст = Результат.Текст + ТекстБлока;
			СчетчикБлоков = СчетчикБлоков + 1;
		КонецЕсли;
	КонецЕсли;
	
	// 2. ТЕХНИЧЕСКИЕ СВЕДЕНИЯ
	Если СтруктураПараметров.Свойство("ИнформацияОЗащите")
		ИЛИ СтруктураПараметров.Свойство("ХарактеристикиКомпьютера")
		ИЛИ СтруктураПараметров.Свойство("ЗапущенныеПроцессы") Тогда
		
		ТекстБлока = "";
	
		// Получим информацию по всем подразделам.
		// Информация о защите
		Если СтруктураПараметров.Свойство("ИнформацияОЗащите")
			И СтруктураПараметров.ИнформацияОЗащите Тогда
			
			ТекстБлока = ПолучитьТекстСИнформациейОЗащите();
		КонецЕсли;
		
		// Характеристики компьютера
		Если СтруктураПараметров.Свойство("ХарактеристикиКомпьютера")
			И СтруктураПараметров.ХарактеристикиКомпьютера Тогда
			
			ТекстБлока = ТекстБлока + ПолучитьТекстСИнформациейОКомпьютере(СтруктураПараметров);
		КонецЕсли;
		
		// Запущенные процессы
		Если СтруктураПараметров.Свойство("ЗапущенныеПроцессы")
			И СтруктураПараметров.ЗапущенныеПроцессы Тогда
			
			ТекстБлока = ТекстБлока + ПолучитьТекстСИнформациейОЗапущенныхПроцессах();
		КонецЕсли;
		
		// Если какая-то информация есть, то формируем текст информационного раздела.
		Если НЕ ПустаяСтрока(ТекстБлока) Тогда
			
			Если НЕ ПустаяСтрока(Результат.Текст) Тогда
				
				Результат.Текст = Результат.Текст + Символы.ПС;
				Результат.Текст = Результат.Текст + Символы.ПС;
			КонецЕсли;
			
			Результат.Текст = Результат.Текст + СчетчикБлоков + НСтр("ru = '. ТЕХНИЧЕСКИЕ ХАРАКТЕРИСТИКИ СИСТЕМЫ'");
			Результат.Текст = Результат.Текст + Символы.ПС;
			Результат.Текст = Результат.Текст + ТекстБлока;
			СчетчикБлоков = СчетчикБлоков + 1;
		КонецЕсли;
	КонецЕсли;
	
	
	// 3. ДОПОЛНИТЕЛЬНЫЕ СВЕДЕНИЯ
	// Информация об текущем объекте.
	
	Если СтруктураПараметров.Свойство("ИнформацияОТекущемОбъекте")
		И СтруктураПараметров.ИнформацияОТекущемОбъекте <> Неопределено Тогда
		
		ПолныйПутьКФайлу = ПолучитьИнформациюОТекущемОбъекте(СтруктураПараметров.ИнформацияОТекущемОбъекте);
		
		Если НЕ ПустаяСтрока(ПолныйПутьКФайлу) Тогда
			
			Результат.СписокФайлов.Добавить(ПолныйПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
	
	// Выгрузка из журнала регистрации.
	Если СтруктураПараметров.Свойство("ИнформацияЖурналаРегистрации") Тогда
		
		Фильтр = СтруктураПараметров.ИнформацияЖурналаРегистрации;
		
		ПолныйПутьКФайлу = ПолучитьИнформациюИзЖурналаРегистрации(Фильтр);
		
		Если НЕ ПустаяСтрока(ПолныйПутьКФайлу) Тогда
			
			Результат.СписокФайлов.Добавить(ПолныйПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // СборИнформацииОСистеме()

// Функция получает необходимую информацию о программе.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Строка - информация о программе.
//
Функция ПолучитьОбщиеСведения()
	
	Текст = НСтр("ru = '*** Общие сведения:'") + " " + Символы.ПС;
	Текст = Текст + " " + НСтр("ru = '- Конфигурация:'") + " " + Метаданные.Имя + " (" + Метаданные.Синоним + ")";
	Текст = Текст + Символы.ПС;
	Текст = Текст + " " + НСтр("ru = '- Поставщик:'") + " " + Метаданные.Поставщик;
	Текст = Текст + Символы.ПС;
	Текст = Текст + " " + НСтр("ru = '- Версия:'") + " " + Метаданные.Версия;
	Текст = Текст + Символы.ПС;
	Текст = Текст + " " + НСтр("ru = '- Пользователь ИБ:'") + " " + ИмяПользователя();
	Текст = Текст + Символы.ПС;
	Текст = Текст +  " " + НСтр("ru = '- Полное имя пользователя ИБ:'") + " " + ПолноеИмяПользователя();
	Текст = Текст + Символы.ПС;
	Текст = Текст +  " " + НСтр("ru = '- Каталог временных файлов:'") + " " + КаталогВременныхФайлов();
	Текст = Текст + Символы.ПС;
	Текст = Текст +  " " + НСтр("ru = '- Код локализации:'") + " " + КодЛокализацииИнформационнойБазы();
	Текст = Текст + Символы.ПС;
	Текст = Текст +   " " + НСтр("ru = '- Строка соединения ИБ:'") + " " + СтрокаСоединенияИнформационнойБазы();
	
	Возврат Текст;
КонецФункции // ПолучитьОбщиеСведения()

// Получает информацию об установленных соединениях с текущей ИБ.
//
// Параметры:
//  Результат - Структура:
//  Структура:
//   Текст - Текст с информацией о системе.
//   СписокФайлов - Полные пути к файлам вложения.
//   СписокОшибок - Список возникших ошибок.
//
// Возвращаемое значение:
//  Строка - Результирующая информация
//
Функция ПолучитьИнформациюОбУстановленныхСоединениях(Результат)
	
	Текст = НСтр("ru = '*** Информация об установленных соединениях:'") + " " + Символы.ПС;
	
	// Проверим право на получение информации.
	Если ПравоДоступа("АктивныеПользователи", Метаданные) Тогда
		
		МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Иначе
		
		Результат.СписокОшибок = НСтр("ru = 'Недостаточно прав для получения информации об установленных соединениях с ИБ'");
		Возврат "";
	КонецЕсли;
	
	Сч = 1;
	Для каждого ТекСоединение Из МассивСоединений Цикл
		
		Если НЕ ПустаяСтрока(Текст) Тогда
			
			Текст = Текст + Символы.ПС;
		КонецЕсли;
		
		Текст = Текст + " " + НСтр("ru = '- Соединение'") + " " + Сч + " " 
				+ НСтр("ru = '(Имя пользователя:'") + " " + ТекСоединение.Пользователь.ПолноеИмя + "; ";
		Текст = Текст + НСтр("ru = 'Имя компьютера:'") + " " + ТекСоединение.ИмяКомпьютера + "; " ;
		Текст = Текст + НСтр("ru = 'Режим:'") + " " + ?(ТекСоединение.ИмяПриложения = "Designer",
				"Конфигуратор", "Предприятие") + ")";
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Текст;
КонецФункции // ПолучитьИнформациюОбУстановленныхСоединениях()

// Функция возвращает текст с информацией о файлах защиты и драйверов.
//
// Параметры:
//  СтруктураРезультат - "Структура" - Структура, в которой содержит необходимая информация.
//
// Возвращаемое значение:
//  Текст - Информация о защите
//
Функция ПолучитьТекстСИнформациейОЗащите()
	
	ИмяОбработки = ПолучитьИмяОбработкиПоИндексу(0);
	ПараметрыКлючаЗащиты = Новый Структура;
	ОписаниеОшибки = Неопределено;
	КодОшибки = Неопределено;
	
	ИнформацияОЗащитеПолучена = ЛицензированиеСервер.ПолучитьПараметрыКлючаЗащиты(
		ИмяОбработки,
		ПараметрыКлючаЗащиты,
		ОписаниеОшибки,
		КодОшибки
	);
	
	ИнформацияОЗащитеПострочно = Новый Массив;
	ИнформацияОЗащитеПострочно.Добавить(НСтр("ru = '*** Информация о защите:'"));
	
	Если ИнформацияОЗащитеПолучена Тогда
		
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Сервер лицензирования: %1'"),
				ПараметрыСеанса.АдресСервераЛицензирования
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Название ключа: %1'"),
				ПараметрыКлючаЗащиты.НазваниеКлюча
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Серийный номер: %1'"),
				ПараметрыКлючаЗащиты.СерийныйНомер
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Аппаратный номер: %1'"),
				ПараметрыКлючаЗащиты.АппаратныйНомер
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Дата окончания: %1'"),
				ПараметрыКлючаЗащиты.ДатаОкончания
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Тип ключа: %1'"),
				ПараметрыКлючаЗащиты.ТипКлюча
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Пин-код: %1'"),
				ПараметрыКлючаЗащиты.ПинКод
			)
		);
		ПодключенийЗаМесто = СтрокаКоличествоПодключений(
			ПараметрыКлючаЗащиты.ВсегоПользователейЗаМесто,
			ПараметрыКлючаЗащиты.СвободноПользователейЗаМесто
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Подключений за место:%1'"),
				ПодключенийЗаМесто
			)
		);
		ПодключенийЗаСессию = СтрокаКоличествоПодключений(
			ПараметрыКлючаЗащиты.ВсегоПользователейЗаСессию,
			ПараметрыКлючаЗащиты.СвободноПользователейЗаСессию
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Подключений за сессию: %1'"),
				ПодключенийЗаСессию
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Маска: %1'"),
				ПараметрыКлючаЗащиты.Маска
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Маска 2: %1'"),
				ПараметрыКлючаЗащиты.Счетчик2
			)
		);
		ИнформацияОЗащитеПострочно.Добавить(
			СтрШаблон(
				НСтр("ru = 'Версия компоненты: %1'"),
				ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку(ИмяОбработки).Компонента.Версия
			)
		);
		
	КонецЕсли;
	
	МестоХраненияКомпоненты = ЛицензированиеСервер.ПолучитьМестоХраненияКомпоненты();
	
	Если Найти(МестоХраненияКомпоненты, "ОбщийМакет") Тогда
		
		ИнформацияОЗащитеПострочно.Добавить(
			НСтр("ru = 'Источник компоненты: Внутреннее хранилище'")
		);
		
	Иначе
		
		ИнформацияОЗащитеПострочно.Добавить(
			НСтр("ru = 'Источник компоненты: Внешнее хранилище'")
		);
		
	КонецЕсли;
	
	ИнформацияОЗащитеПострочно.Добавить("");
	Возврат СтрСоединить(ИнформацияОЗащитеПострочно, Символы.ПС);
	
КонецФункции // ПолучитьТекстСИнформациейФайлахЗащитыИДрайверов()

// Функция возвращает текст с информацией о запущенных процессах.
//
// Параметры:
//  СтруктураРезультат - "Структура" - Структура, в которой содержит необходимая информация.
//
// Возвращаемое значение:
//  Текст - Информация о запущенных процессах
//
Функция ПолучитьТекстСИнформациейОЗапущенныхПроцессах()
	
	Текст = НСтр("ru = '*** Запущенные процессы:'") + Символы.ПС;
	COMObject = ПолучитьCOMОбъект("winmgmts:\\" + ИмяКомпьютера() + "\root\cimv2");
	WinProcesses = COMObject.ExecQuery("SELECT * FROM Win32_Process");
	
	Для каждого Process Из WinProcesses Цикл
		
		Текст = Текст +
			"=========================================" + Символы.ПС +
			"Caption: " + Process.Caption + Символы.ПС +
			"CommandLine: " + Process.CommandLine + Символы.ПС +
			"CreationDate: " + Process.CreationDate + Символы.ПС +
			"CSName: " + Process.CSName + Символы.ПС +
			"ExecutablePath: " + Process.ExecutablePath + Символы.ПС +
			"OSName: " + Process.OSName + Символы.ПС +
			"ParentProcessId: " + Process.ParentProcessId + Символы.ПС +
			"ProcessId: " + Process.ProcessId + Символы.ПС +
			"WindowsVersion: " + Process.WindowsVersion + Символы.ПС;
		User = "";
		Domain = "";
		Попытка
			КодОшибкиGetOwner = Process.GetOwner(User, Domain);
		Исключение
			ОписаниеОшибкиGetOwner = ОписаниеОшибки();
			КодОшибкиGetOwner = 2;
		КонецПопытки;
		Если КодОшибкиGetOwner <> 0 Тогда
			User = НСтр("ru = 'Недоступно'");
			Domain = НСтр("ru = 'Недоступно'");
		КонецЕсли;
		Если User = NULL И Domain = NULL Тогда
			
			Текст = Текст + "Owner: System" + Символы.ПС;
		Иначе
			
			Текст = Текст + "Owner: " + Domain + "\" + User + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Текст;
КонецФункции // ПолучитьТекстСИнформациейОЗапущенныхПроцессах()

// Функция возвращает текст с информацией о характеристиках компьютера.
//
// Параметры:
//  СтруктураРезультат - "Структура" - Структура, в которой содержит необходимая информация.
//
// Возвращаемое значение:
//  Текст - Информация о компьютере
//
Функция ПолучитьТекстСИнформациейОКомпьютере(СтруктураРезультат)
	
	ИтоговыйТекст = НСтр("ru = '*** Информация о ПК:'") + " " + Символы.ПС;
	ВремТекст = "";
	СисИнформация = Новый СистемнаяИнформация;
	
	// ПРОЦЕССОРЫ.
	ИтоговыйТекст = ИтоговыйТекст + НСтр("ru = 'Информация о процессоре:'") + " " + СисИнформация.Процессор + Символы.ПС;
	
	// ОПЕРАТИВНАЯ ПАМЯТЬ.
	ИтоговыйТекст = ИтоговыйТекст + НСтр("ru = 'Информация об оперативной памяти:'") + " " + СисИнформация.ОперативнаяПамять + Символы.ПС;
	
	// ОПЕРАЦИОННАЯ СИСТЕМА.
	ИтоговыйТекст = ИтоговыйТекст + НСтр("ru = 'Версия операционной системы:'") + " " + СисИнформация.ВерсияОС + Символы.ПС;

	Если СисИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		 ИЛИ СисИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда

		 COMObject = ПолучитьCOMОбъект("winmgmts:\\" + ИмяКомпьютера() + "\root\cimv2");
		 WinOS = COMObject.ExecQuery("SELECT OSArchitecture FROM Win32_OperatingSystem");
		
		 Для каждого OS Из WinOS Цикл
			ИтоговыйТекст = ИтоговыйТекст + НСтр("ru = 'Разрядность ОС:'") + " " + OS.OSArchitecture + Символы.ПС;
		 КонецЦикла;
		 
	ИначеЕсли СисИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		 ИЛИ СисИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда

		 ИтоговыйТекст = ИтоговыйТекст + НСтр("ru = 'Разрядность ОС: 32-разрядная'") + Символы.ПС;

	ИначеЕсли СисИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
		 ИЛИ СисИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда

		 ИтоговыйТекст = ИтоговыйТекст + НСтр("ru = 'Разрядность ОС: 64-разрядная'") + Символы.ПС;
		 
	КонецЕсли;
	
	// ИНАЯ ИНФОРМАЦИЯ.
	ИтоговыйТекст = ИтоговыйТекст + НСтр("ru = 'Версия приложения:'") + " " + СисИнформация.ВерсияПриложения + Символы.ПС
		+ НСтр("ru = 'Идентификатор клиента:'") + " " + СисИнформация.ИдентификаторКлиента + Символы.ПС
		+ НСтр("ru = 'Информация программы просмотра:'") + " " + СисИнформация.ИнформацияПрограммыПросмотра + Символы.ПС
		+ НСтр("ru = 'Тип платформы:'") + " " + СисИнформация.ТипПлатформы + Символы.ПС;
	
	Возврат ИтоговыйТекст;
КонецФункции // ПолучитьТекстСИнформациейОКомпьютере()

// Получает информацию о текущем объекте в виде табличного документа (внешний файл).
//
// Параметры:
//  ТекущийОбъект - "Произвольный объект" - Любой объект ИБ.
//
// Возвращаемое значение:
//   Строка - Полный путь к файлу с сформированным отчетом по объекту.
//
Функция ПолучитьИнформациюОТекущемОбъекте(ТекущийОбъект)
	
	Попытка
		
		ТаблДокумент = Новый ТабличныйДокумент;
		ВыгрузитьВТабличныйДокумент(ТекущийОбъект, ТаблДокумент, Ложь);
		ИмяФайла = КаталогВременныхФайлов() + "ИнформацияОбОбъекте.html";
		ТаблДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
		
		Возврат ИмяФайла;
	Исключение
		
		Возврат "";
	КонецПопытки;
КонецФункции // ПолучитьИнформациюОТекущемОбъекте()

// Получает выгрузку из журнала регистрации в виде xml файла.
//
// Параметры:
//  Фильтр - "Структура" - Фильтр, накладываемый на выгрузку журнала регистрации.
//
// Возвращаемое значение:
//  Строка - Полный путь к файлу xml, содержащему выгрузку из журнала регистрации
//
Функция ПолучитьИнформациюИзЖурналаРегистрации(Фильтр)
	
	ИмяВыходногоФайла = КаталогВременныхФайлов() + "ЖурналРегистрации.xml";
	
	// Подготовим фильтр.
	ИтоговыйФильтр = Новый Структура;
	
	Если Фильтр.Свойство("ДатаНачала")
		И ЗначениеЗаполнено(Фильтр.ДатаНачала) Тогда
		
		// Добавляем дату начала отбора
		ИтоговыйФильтр.Вставить("ДатаНачала", Фильтр.ДатаНачала);
	КонецЕсли;
	
	Если Фильтр.Свойство("ДатаОкончания")
		И ЗначениеЗаполнено(Фильтр.ДатаОкончания) Тогда
		
		// Добавляем дату окончания отбора
		ИтоговыйФильтр.Вставить("ДатаОкончания", Фильтр.ДатаОкончания);
	КонецЕсли;
	
	Если Фильтр.Свойство("Пользователи") Тогда
		
		// Создадим массив на основе списка значений имен пользователей
		МассивПользователей = Новый Массив;
		
		Для каждого ТекЭлементСписка Из Фильтр.Пользователи Цикл
			
			Если ТекЭлементСписка.Пометка Тогда
				
				МассивПользователей.Добавить(ТекЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		// Добавим имена пользователей в отбор
		ИтоговыйФильтр.Вставить("Пользователь", МассивПользователей);
	КонецЕсли;
	
	Если Фильтр.Свойство("Компьютеры")
		И Фильтр.Компьютеры.Количество() <> 0 Тогда
		
		// Создадим массив на основе списка значений имен компьютеров
		МассивКомпьютеров = Новый Массив;
		
		Для каждого ТекЭлементСписка Из Фильтр.Компьютеры Цикл
			
			МассивКомпьютеров.Добавить(ТекЭлементСписка.Значение);
		КонецЦикла;
		
		// Добавим имена компьтеров в отбор
		ИтоговыйФильтр.Вставить("Компьютер", МассивКомпьютеров);
	КонецЕсли;
	
	Если Фильтр.Свойство("Уровни") Тогда
		
		// Создадим массив на основе списка значений имен уровней журнала регистрации
		МассивУровней = Новый Массив;
		
		Для каждого ТекЭлементСписка Из Фильтр.Уровни Цикл
			
			Если ТекЭлементСписка.Пометка Тогда
				
				// Определим значение уровня журнала регистрации по его имени
				Если ТекЭлементСписка.Значение = "Информация" Тогда
					
					МассивУровней.Добавить(УровеньЖурналаРегистрации.Информация);
					Продолжить;
				КонецЕсли;
				
				Если ТекЭлементСписка.Значение = "Ошибка" Тогда
					
					МассивУровней.Добавить(УровеньЖурналаРегистрации.Ошибка);
					Продолжить;
				КонецЕсли;
				
				Если ТекЭлементСписка.Значение = "Предупреждение" Тогда
					
					МассивУровней.Добавить(УровеньЖурналаРегистрации.Предупреждение);
					Продолжить;
				КонецЕсли;
				
				Если ТекЭлементСписка.Значение = "Примечание" Тогда
					
					МассивУровней.Добавить(УровеньЖурналаРегистрации.Примечание);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавим значения уровней в отбор
		ИтоговыйФильтр.Вставить("Уровень", МассивУровней);
	КонецЕсли;
	
	Попытка
		
		ВыгрузитьЖурналРегистрации(ИмяВыходногоФайла, ИтоговыйФильтр);
		Возврат ИмяВыходногоФайла;
	Исключение
		
		Возврат "";
	КонецПопытки;
КонецФункции // ПолучитьИнформациюИзЖурналаРегистрации()

// Возвращает защищенную обработку лицензирования по ее порядковому номеру.
//
// Параметры:
//  Индекс - Число - Порядковый номер обработки
//
// Возвращаемое значение:
//  Строка - Имя (ключ) обрботки
Функция ПолучитьИмяОбработкиПоИндексу(Индекс)
	
	СписокРешений = ЛицензированиеПоддержка.СписокРешений();
	ТекИндекс = 0;
	
	Для каждого ЭлементСписка Из СписокРешений Цикл
		
		Если ТекИндекс = Индекс Тогда
			
			Возврат ЭлементСписка.Ключ;
		Иначе
			
			ТекИндекс = ТекИндекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции // ПолучитьИмяОбработкиПоИндексу()

// Возвращает описание количества подключений.
//
// Параметры:
//  Всего - Число - Возможное число подключений
//  Свободно - Число - Число доступных подключений
//
// Возвращаемое значение:
//  Строка - Информация о количестве подключений
Функция СтрокаКоличествоПодключений(Всего, Свободно)
	
	Строка = НСтр("ru = 'всего -'") + Символы.НПП + Строка(Всего) + ", " + НСтр("ru = 'занято -'") + Символы.НПП + Строка(Всего - Свободно) + ", " + НСтр("ru = 'свободно -'") + Символы.НПП + Строка(Свободно);
	
	Возврат Строка;
КонецФункции // СтрокаКоличествоПодключений()

// Процедура выгрузки в табличный документ.
//
// Параметр:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//
Процедура ВыгрузитьВТабличныйДокумент(ОбъектСсылка, ТабличныйДокумент = Неопределено, Показать = Истина)
	
	Если ТабличныйДокумент = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.НачатьАвтоГруппировкуСтрок();
	
	// Получим соответствующий объект метаданных.
	МетаданныеОбъекта = ОбъектСсылка.Метаданные();
	
	// ЗАГОЛОВОК
	Макет = ПолучитьМакет("Макет");
	
	Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ДляСправочников");
		ОбластьЗаголовок.Параметры.Код = Строка(ОбъектСсылка.Код);
		ОбластьЗаголовок.Параметры.Наименование = Строка(ОбъектСсылка.Наименование); 
	Иначе
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Объект = Строка(ОбъектСсылка);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок, 1);
	
	// РЕКВИЗИТЫ ОБЪЕКТА
	РеквизитыОбъекта = МетаданныеОбъекта.Реквизиты;
	КоличествоРеквизитов = РеквизитыОбъекта.Количество();
	
	Если КоличествоРеквизитов > 0 Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокРеквизитов");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок, 1);
		
		Область = Макет.ПолучитьОбласть("Шапка|ОтступСлева");
		ТабличныйДокумент.Вывести(Область, 2);
		
		Область = Макет.ПолучитьОбласть("Шапка|Реквизит");
		Область.Параметры.Значение = "Имя реквизита";

		ТабличныйДокумент.Присоединить(Область, 2);
		
		Область.Параметры.Значение = "Значение реквизита";
		ТабличныйДокумент.Присоединить(Область, 2);
		
		// Выводим значения реквизитов объекта
		ОбластьОтступСлева = Макет.ПолучитьОбласть("Строка|ОтступСлева");
		ОбластьСтрокаРеквизит = Макет.ПолучитьОбласть("Строка|Реквизит");
		Область = ОбластьСтрокаРеквизит.Область();
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		Для каждого Реквизит Из РеквизитыОбъекта Цикл
			
			ТабличныйДокумент.Вывести(ОбластьОтступСлева, 2);
			
			ОбластьСтрокаРеквизит.Параметры.Значение = Реквизит.Синоним;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит, 2);
			
			ОбластьСтрокаРеквизит.Параметры.Значение = ОбъектСсылка[Реквизит.Имя];
			ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит, 2);
		КонецЦикла;
	КонецЕсли;
	
	// ТАБЛИЧНЫЕ ЧАСТИ ОБЪЕКТА
	ТабличныеЧастиОбъекта = МетаданныеОбъекта.ТабличныеЧасти;
	КоличествоТабличныхЧастей = ТабличныеЧастиОбъекта.Количество();
	
	Если КоличествоТабличныхЧастей > 0 Тогда
		
		ОбластьЗаголовокТабЧасти = Макет.ПолучитьОбласть("ЗаголовокТабЧасть");
		ОбластьШапкаОтступСлева = Макет.ПолучитьОбласть("Шапка|ОтступСлева");
		ОбластьШапкаРеквизит = Макет.ПолучитьОбласть("Шапка|Реквизит");
		ОбластьСтрокаОтступСлева = Макет.ПолучитьОбласть("Строка|ОтступСлева");
		ОбластьСтрокаРеквизит = Макет.ПолучитьОбласть("Строка|Реквизит");
		ОбластьРазделительТабЧастей = Макет.ПолучитьОбласть("РазделительТабЧастей");
		
		Для каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
			
			ОбластьЗаголовокТабЧасти.Параметры.ИмяТабличнойЧасти = ТабличнаяЧасть.Синоним;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТабЧасти, 1);
			
			ТабличнаяЧастьОбъекта = ОбъектСсылка[ТабличнаяЧасть.Имя];
			РеквизитыТабЧасти = ТабличнаяЧасть.Реквизиты;
			
			ТабличныйДокумент.Вывести(ОбластьШапкаОтступСлева, 2);
			
			// Выводим шапку табличной части
			Для каждого Реквизит Из РеквизитыТабЧасти Цикл
				
				ОбластьШапкаРеквизит.Параметры.Значение = Реквизит.Синоним;
				ТабличныйДокумент.Присоединить(ОбластьШапкаРеквизит, 2);
			КонецЦикла;
			
			// Выводим строки табличной части.
			Для каждого ТекСтрокаТабличнойЧасти Из ТабличнаяЧастьОбъекта Цикл
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаОтступСлева, 2);
				
				Для каждого Реквизит Из РеквизитыТабЧасти Цикл
					
					ОбластьСтрокаРеквизит.Параметры.Значение = ТекСтрокаТабличнойЧасти[Реквизит.Имя];
					ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит, 2);
				КонецЦикла;
			КонецЦикла;
			
			// Пропуск между табличными частями.
			ТабличныйДокумент.Вывести(ОбластьРазделительТабЧастей);
		КонецЦикла;
	КонецЕсли;
	
	// ДВИЖЕНИЯ ДОКУМЕНТА
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		
		ОбластьЗаголовокНабораЗаписей = Макет.ПолучитьОбласть("ЗаголовокНаборЗаписей");
		ОбластьШапкаОтступСлева = Макет.ПолучитьОбласть("Шапка|ОтступСлева");
		ОбластьШапкаИзмерение = Макет.ПолучитьОбласть("ШапкаИзмерение|Реквизит");
		ОбластьШапкаРесурс = Макет.ПолучитьОбласть("ШапкаРесурс|Реквизит");
		ОбластьШапкаРеквизит = Макет.ПолучитьОбласть("ШапкаРеквизит|Реквизит");
		ОбластьСтрокаОтступСлева = Макет.ПолучитьОбласть("Строка|ОтступСлева");
		ОбластьСтрокаРеквизит = Макет.ПолучитьОбласть("Строка|Реквизит");
		ОбластьРазделительТабЧастей = Макет.ПолучитьОбласть("РазделительТабЧастей");
		
		ОбластьЯчеекРесурса = ОбластьСтрокаРеквизит.Область();
		
		// Получим объект.
		Попытка
			
			ОбъектДокумент = ОбъектСсылка.ПолучитьОбъект();
			
			// Проходимся по движения документа.
			Для каждого ТекНаборЗаписей Из ОбъектДокумент.Движения Цикл
				
				МетаданныеНаборЗаписей = ТекНаборЗаписей.Метаданные();
				ОбластьЗаголовокНабораЗаписей.Параметры.ИмяРегистра = МетаданныеНаборЗаписей.Синоним;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокНабораЗаписей, 1);
				ТабличныйДокумент.Вывести(ОбластьШапкаОтступСлева, 1);
				
				
				Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеНаборЗаписей)
					И МетаданныеНаборЗаписей.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
					
					ЕстьВидДвижения = Истина;
				Иначе
					
					ЕстьВидДвижения = Ложь;
				КонецЕсли;
				
				// Выводим доп. поля.
				Если ЕстьВидДвижения Тогда
					
					ОбластьШапкаИзмерение.Параметры.Значение = "Вид движения";
					ТабличныйДокумент.Присоединить(ОбластьШапкаИзмерение);
				КонецЕсли;
				
				ОбластьШапкаИзмерение.Параметры.Значение = "Активность";
				ТабличныйДокумент.Присоединить(ОбластьШапкаИзмерение);
				
				ОбластьШапкаИзмерение.Параметры.Значение = "Номер строки";
				ТабличныйДокумент.Присоединить(ОбластьШапкаИзмерение);
				
				ОбластьШапкаИзмерение.Параметры.Значение = "Период";
				ТабличныйДокумент.Присоединить(ОбластьШапкаИзмерение);
				
				Измерения = МетаданныеНаборЗаписей.Измерения;
				Ресурсы = МетаданныеНаборЗаписей.Ресурсы;
				Реквизиты = МетаданныеНаборЗаписей.Реквизиты;
				
				// Формируем шапку набора записей.
				Для каждого ТекИзмерение Из Измерения Цикл
					
					ОбластьШапкаИзмерение.Параметры.Значение = ТекИзмерение.Синоним;
					ТабличныйДокумент.Присоединить(ОбластьШапкаИзмерение);
				КонецЦикла;
				
				Для каждого ТекРесурс Из Ресурсы Цикл
					
					ОбластьШапкаРесурс.Параметры.Значение = ТекРесурс.Синоним;
					ТабличныйДокумент.Присоединить(ОбластьШапкаРесурс);
				КонецЦикла;
				
				Для каждого ТекРеквизит Из Реквизиты Цикл
					
					ОбластьШапкаРеквизит.Параметры.Значение = ТекРеквизит.Синоним;
					ТабличныйДокумент.Присоединить(ОбластьШапкаРеквизит);
				КонецЦикла;
				
				// Теперь проходимся по записям набора записей.
				ТекНаборЗаписей.Прочитать();
				
				Если ТекНаборЗаписей.Количество() = 0 Тогда
					
					Продолжить;
				КонецЕсли;
				
				Для каждого ТекЗапись Из ТекНаборЗаписей Цикл
					
					ТабличныйДокумент.Вывести(ОбластьСтрокаОтступСлева, 1);
					
					Если ЕстьВидДвижения Тогда
						
						ОбластьСтрокаРеквизит.Параметры.Значение = ТекЗапись["ВидДвижения"];
						ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит);
					КонецЕсли;
					
					ОбластьСтрокаРеквизит.Параметры.Значение = ТекЗапись["Активность"];
					ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит);
					ОбластьСтрокаРеквизит.Параметры.Значение = ТекЗапись["НомерСтроки"];
                    ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит);
					ОбластьСтрокаРеквизит.Параметры.Значение = ТекЗапись["Период"];
                    ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит);
					
					Для каждого ТекИзмерение Из Измерения Цикл
						
						ОбластьСтрокаРеквизит.Параметры.Значение = ТекЗапись[ТекИзмерение.Имя];
						ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит);
					КонецЦикла;
					
					ОбластьЯчеекРесурса.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					
					Для каждого ТекРесурс Из Ресурсы Цикл
						
						ОбластьСтрокаРеквизит.Параметры.Значение = ТекЗапись[ТекРесурс.Имя];
						ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит);
					КонецЦикла;
					
					ОбластьЯчеекРесурса.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					Для каждого ТекРеквизит Из Реквизиты Цикл
						
						ОбластьСтрокаРеквизит.Параметры.Значение = ТекЗапись[ТекРеквизит.Имя];
						ТабличныйДокумент.Присоединить(ОбластьСтрокаРеквизит);
					КонецЦикла;
				КонецЦикла;
				
				// Пропуск.
				ТабличныйДокумент.Вывести(ОбластьРазделительТабЧастей);
			КонецЦикла;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при работе с табличным документом'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;
	КонецЕсли;
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабличныйДокумент.ОтображатьГруппировки = Истина;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.Автомасштаб = Истина;
	
	Если Показать Тогда
		
		ТабличныйДокумент.Показать("Выгрузка в табличный документ: " + Строка(ОбъектСсылка) + 
						"(" + ОбъектСсылка.Метаданные().Имя + ")");
	КонецЕсли;
	
КонецПроцедуры // СформироватьЖурналРегистрации()

#КонецОбласти

#КонецЕсли

