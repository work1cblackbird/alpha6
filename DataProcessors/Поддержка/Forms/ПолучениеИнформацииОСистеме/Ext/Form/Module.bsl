///////////////////////////////////////////////////////////////////////////////
// Модуль формы ПолучениеИнформацииОСистеме обработки "Поддержка"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним список уровней важности событий
	СписокУровней.Добавить("Информация", "Информация");
	СписокУровней.Добавить("Ошибка", "Ошибка");
	СписокУровней.Добавить("Предупреждение", "Предупреждение");
	СписокУровней.Добавить("Примечание", "Примечание");
	
	// Заполним список компьютеров
	СписокКомпьютеров.Добавить(ИмяКомпьютера());
	
	// Настройки по умолчанию
	ОбщиеСведения = Истина;
	
	// Определим возможность получения информации об установленных соединениях с ИБ.
	Если ПравоДоступа("АктивныеПользователи", Метаданные) Тогда
		
		ИнформацияОбУстановленныхСоединениях = Истина;
	Иначе
		
		ИнформацияОбУстановленныхСоединениях = Ложь;
		Элементы.ИнформацияОбУстановленныхСоединениях.Доступность = Ложь;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Недостаточно прав для получения информации об установленных соединениях с ИБ'")
		);
	КонецЕсли;
		
	ИнформацияОЗащите = Истина;
	ХарактеристикиКомпьютера = Истина;
	ЗапущенныеПроцессы = Ложь;
	
	// Определим возможность получения списка пользователей ИБ.
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		
		// Получим пользователей ИБ.
		МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого ТекПользователь Из МассивПользователей Цикл
			
			СписокПользователей.Добавить(ТекПользователь.Имя, ТекПользователь.ПолноеИмя, Ложь);
		КонецЦикла;
	Иначе
		
		СписокПользователей.Добавить(ИмяПользователя(), ПолноеИмяПользователя(), Истина);
		
		Элементы.Пользователи.Доступность = Ложь;
		Элементы.Компьютеры.Доступность = Ложь;
	КонецЕсли;
	
	ИнформацияЖурналаРегистрации = Истина;
	
	// Заполним фильтр журнала регистрации.
	ДатаНачала = НачалоДня(ТекущаяДата());
	ДатаОкончания = ТекущаяДата();
	ЭлементТекущегоПользователя = СписокПользователей.НайтиПоЗначению(ИмяПользователя());
	
	Если ЭлементТекущегоПользователя <> Неопределено Тогда
		
		ЭлементТекущегоПользователя.Пометка = Истина;
	КонецЕсли;
	
	ЭлементСпискаУровней = СписокУровней.НайтиПоЗначению("Предупреждение");
	ЭлементСпискаУровней.Пометка = Истина;
	ЭлементСпискаУровней = СписокУровней.НайтиПоЗначению("Ошибка");
	ЭлементСпискаУровней.Пометка = Истина;
	
	// Если передан объект, то выведем его на форму.
	Если Параметры.ТекущийОбъект <> Неопределено Тогда
		
		ИнформацияОТекущемОбъекте = Истина;
		ТекущийОбъект = Параметры.ТекущийОбъект;
		Элементы.ТекущийОбъект.Заголовок = "" + ТекущийОбъект;
	Иначе
		
		ИнформацияОТекущемОбъекте = Ложь;
		Элементы.ИнформацияОТекущемОбъекте.Доступность = Ложь;
		Элементы.ТекущийОбъект.Доступность = Ложь;
		Элементы.ТекущийОбъект.Заголовок = НСтр("ru = '<Объект не определен>'");
	КонецЕсли;
	
	ОбновитьДоступность();
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при очистке данных поля "Пользователи".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура ПользователиОчистка(Элемент, СтандартнаяОбработка)
	
	СписокПользователей.ЗаполнитьПометки(Ложь);
КонецПроцедуры

// Обработчик события возникающего на клиенте при очистке данных поля "Компютеры".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура КомпьтерыОчистка(Элемент, СтандартнаяОбработка)
	
	СписокКомпьютеров.ЗаполнитьПометки(Ложь);
КонецПроцедуры

// Обработчик события возникающего на клиенте при очистке данных поля "Уровни".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// ВозвращаемоеЗначение:
//  НЕТ
&НаКлиенте
Процедура УровниОчистка(Элемент, СтандартнаяОбработка)
	
	СписокУровней.ЗаполнитьПометки(Ложь);
КонецПроцедуры

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора реквизита "Пользователи".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора - СписокЗначений - Список возможных значений для выбора, которые будут показаны.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура ПользователиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// Откроем диалог для отметки нужных элементов.
	Оповещение = Новый ОписаниеОповещения("ПослеОтметкиПользователей", ЭтотОбъект);
	СписокПользователей.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите пользователей информационной базы'"));
КонецПроцедуры

// Обработчик события возникающего на клиенте в момент закрытия формы выбора реквизита "Пользователи".
//
// Параметры:
//  Элементы - СписокЗначений - Результат выбора.
//  ДопПараметры - Структура - Дополнительные параметры процедуры.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура ПослеОтметкиПользователей(Элементы, ДопПараметры) Экспорт
	
	ФормированиеПредставленияСпискаПользователей();
КонецПроцедуры

// Обработчик события возникшего на клиенте в момент нажатия кнопки выбора реквизита "Компьютеры".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора - СписокЗначений - Список возможных значений для выбора, которые будут показаны.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура КомпьтерыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// Откроем диалог для отметки нужных элементов.
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияКомпьютеров", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокКомпьютеров", СписокКомпьютеров);
	
	// Добавить компьютеры в список значений
	ОткрытьФорму("Обработка.Поддержка.Форма.РедактированиеСпискаКомпьютеров", ПараметрыФормы, Элемент,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Обработчик события возникающего на клиенте в момент закрытия формы выбора реквизита "Компьютеры".
//
// Параметры:
//  Результат - СписокЗначений - Результат выбора.
//  ДопПараметры - Структура - Дополнительные параметры процедуры.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура ПослеРедактированияКомпьютеров(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СписокКомпьютеров.Очистить();
		
		СписокКомпьютеров = Результат.Скопировать();
		
		ФормированиеПредставленияСпискаКомпьютеров();
	КонецЕсли;
КонецПроцедуры

// Обработчик события возникшего на клиенте в момент нажатия кнопки выбора реквизита "Уровни".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора - СписокЗначений - Список возможных значений для выбора, которые будут показаны.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура УровниНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// Откроем диалог для отметки нужных элементов.
	Оповещение = Новый ОписаниеОповещения("ПослеОтметкиУровней", ЭтотОбъект);
	СписокУровней.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите уровни важности'"));
КонецПроцедуры

// Обработчик события возникающего на клиенте в момент закрытия формы выбора реквизита "Уровни".
//
// Параметры:
//  Элементы - СписокЗначений - Результат выбора.
//  ДопПараметры - Структура - Дополнительные параметры процедуры.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура ПослеОтметкиУровней(Элементы, ДопПараметры) Экспорт
	
	ФормированиеПредставленияСпискаУровней();
КонецПроцедуры

// Обработчик события возникающего на клиенте при измененеии реквизита "ИнформацияОТекущемОбъекте".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура ИнформацияОТекущемОбъектеПриИзменении(Элемент)
	
	ОбновитьДоступность();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении реквизита "ИнформацияЖурналаРегистрации".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
// Возвращаемое значение:
//  НЕТ
&НаКлиенте
Процедура ИнформацияЖурналаРегистрацииПриИзменении(Элемент)
	
	ОбновитьДоступность();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Продолжить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОсновноеДействиеПродолжить(Команда)
	
	// Проверим выбранные значения дат фильтра журнала регистрации.
	Если ИнформацияЖурналаРегистрации Тогда
		
		Если ДатаОкончания < ДатаНачала Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Дата окончания периода журнала регистрации меньше даты начала.'")
			);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Формируем структуру с выбранными разделами информации.
	СтруктураПараметров = Новый Структура;
	
	Если ЗапущенныеПроцессы Тогда
		
		СтруктураПараметров.Вставить("ЗапущенныеПроцессы", Истина);
	КонецЕсли;
	
	Если ИнформацияЖурналаРегистрации Тогда
		
		СтруктураИнформацииЖурналаРегистрации = Новый Структура;
		СтруктураИнформацииЖурналаРегистрации.Вставить("ДатаНачала", ДатаНачала);
		СтруктураИнформацииЖурналаРегистрации.Вставить("ДатаОкончания", ДатаОкончания);
		СтруктураИнформацииЖурналаРегистрации.Вставить("Пользователи", СписокПользователей);
		СтруктураИнформацииЖурналаРегистрации.Вставить("Компьютеры", СписокКомпьютеров);
		СтруктураИнформацииЖурналаРегистрации.Вставить("Уровни", СписокУровней);
		
		СтруктураПараметров.Вставить("ИнформацияЖурналаРегистрации", СтруктураИнформацииЖурналаРегистрации);
	КонецЕсли;
	
	Если ИнформацияОбУстановленныхСоединениях Тогда
		
		СтруктураПараметров.Вставить("ИнформацияОбУстановленныхСоединениях", Истина);
	КонецЕсли;
	
	Если ИнформацияОТекущемОбъекте Тогда
		
		СтруктураПараметров.Вставить("ИнформацияОТекущемОбъекте", ТекущийОбъект);
	КонецЕсли;
	
	Если ИнформацияОЗащите Тогда
		
		СтруктураПараметров.Вставить("ИнформацияОЗащите", Истина);
	КонецЕсли;
	
	Если ОбщиеСведения Тогда
		
		СтруктураПараметров.Вставить("ОбщиеСведения", Истина);
	КонецЕсли;
	
	Если ХарактеристикиКомпьютера Тогда
		
		СтруктураПараметров.Вставить("ХарактеристикиКомпьютера", Истина);
	КонецЕсли;
	
	РезультатСтруктура = СборИнформацииНаСервере(СтруктураПараметров);
	
	// Создать документ письма и заполнить его
	ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормаДокумента");
	
	ДанныеФормы = ФормаПисьма.Объект;
	Вложения = ФормаПисьма.Вложения;
	СписокПолучателей = ФормаПисьма.СписокПолучателей;
	
	ЗаполнитьДанныеФормы(ДанныеФормы, Вложения, РезультатСтруктура);
	
    УстановитьТекстПисьмаФорматированныйДокумент(ФормаПисьма.ТекстПисьмаФорматированныйДокумент, ДанныеФормы.ТекстHTML);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПисьма.Объект);
	КопироватьДанныеФормы(Вложения, ФормаПисьма.Вложения);
	
	СписокПолучателей.Очистить();
	
	Для каждого Получатель Из ДанныеФормы.ПолучателиПисьма Цикл
		
		НовыйВСпискеПолучателей = СписокПолучателей.Добавить();
		НовыйВСпискеПолучателей.ВариантОтправки = "Кому:";
		НовыйВСпискеПолучателей.Адрес = Получатель.Адрес;
		НовыйВСпискеПолучателей.Представление = Получатель.Представление;
		НовыйВСпискеПолучателей.Контакт = Получатель.Контакт;
	КонецЦикла;
	
	КопироватьДанныеФормы(СписокПолучателей, ФормаПисьма.СписокПолучателей);
	
	Закрыть();
	
	ФормаПисьма.ТекстПисьма = ДанныеФормы.Текст;
	
	ФормаПисьма.ОпределитьСпособРедактированияПисьма();
	
	ФормаПисьма.Открыть();
КонецПроцедуры // ОсновноеДействиеПродолжить()

&НаСервере
Процедура УстановитьТекстПисьмаФорматированныйДокумент(ТекстПисьмаФорматированныйДокумент, ТекстHTML)
	ВложенияФорматированныйДокумент = Новый Структура;
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTML, ВложенияФорматированныйДокумент);
КонецПроцедуры

// Обработчик события нажатия кнопки "УбратьВсеФлажки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура УбратьВсе(Команда)
	
	ОбщиеСведения = Ложь;
	ИнформацияОбУстановленныхСоединениях = Ложь;
	ИнформацияОЗащите = Ложь;
	ХарактеристикиКомпьютера = Ложь;
	ЗапущенныеПроцессы = Ложь;
	ИнформацияОТекущемОбъекте = Ложь;
	ИнформацияЖурналаРегистрации = Ложь;
	
	ОбновитьДоступность();
КонецПроцедуры // УбратьВсе()

// Обработчик события нажатия кнопки "УстановитьВсеФлажки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	ОбщиеСведения = Истина;
	ИнформацияОбУстановленныхСоединениях = Элементы.ИнформацияОбУстановленныхСоединениях.Доступность;
	ИнформацияОЗащите = Истина;
	ХарактеристикиКомпьютера = Истина;
	ЗапущенныеПроцессы = Истина;
	ИнформацияОТекущемОбъекте = Элементы.ИнформацияОТекущемОбъекте.Доступность;
	ИнформацияЖурналаРегистрации = Элементы.ИнформацияЖурналаРегистрации.Доступность;
	
	ОбновитьДоступность();
КонецПроцедуры // ВыбратьВсе()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Управление отображением элементов формы.
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
&НаСервере
Процедура ОбновитьДоступность()

	СистемнаяИнформация = Новый СистемнаяИнформация; 
	Если СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86
		 И СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
    	 ЗапущенныеПроцессы = Ложь;
		 Элементы.ЗапущенныеПроцессы.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ТекущийОбъект.Доступность  = ИнформацияОТекущемОбъекте;
	
	// Видимость настроек фильтра.
	Элементы.ДатаНачала.Доступность = ИнформацияЖурналаРегистрации;
	Элементы.ДатаОкончания.Доступность = ИнформацияЖурналаРегистрации;
	
	Элементы.Пользователи.Доступность = ИнформацияЖурналаРегистрации;
	Элементы.Компьютеры.Доступность = ИнформацияЖурналаРегистрации;
	Элементы.Уровни.Доступность = ИнформацияЖурналаРегистрации;
	
	// Формируем строковые представления коллекций.
	ФормированиеПредставленияСпискаПользователей();
	ФормированиеПредставленияСпискаКомпьютеров();
	ФормированиеПредставленияСпискаУровней();
	
КонецПроцедуры // ОбновитьДоступность()

// Формирует строчное представление списка пользователей.
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
&НаСервере
Процедура ФормированиеПредставленияСпискаПользователей()
	
	РезСтрока = "";
	
	Для Каждого ТекЭлемент Из СписокПользователей Цикл
		
		Если ТекЭлемент.Пометка Тогда
			
			РезСтрока = РезСтрока + ?(ПустаяСтрока(РезСтрока), "", ", ") + ТекЭлемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Пользователи = РезСтрока;
КонецПроцедуры // ФормированиеПредставленияСпискаПользователей()

// Формирует строчное представление списка компьютеров.
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
&НаСервере
Процедура ФормированиеПредставленияСпискаКомпьютеров()
	
	РезСтрока = "";
	
	Для Каждого ТекЭлемент Из СписокКомпьютеров Цикл
		
		РезСтрока = РезСтрока + ?(ПустаяСтрока(РезСтрока), "", ", ") + ТекЭлемент;
	КонецЦикла;
	
	Компьютеры = РезСтрока;
КонецПроцедуры // ФормированиеПредставленияСпискаКомпьютеров()

// Формирует строчное представление списка уровней.
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
&НаСервере
Процедура ФормированиеПредставленияСпискаУровней()
	
	РезСтрока = "";
	
	Для Каждого ТекЭлемент Из СписокУровней Цикл
		
		Если ТекЭлемент.Пометка Тогда
			
			РезСтрока = РезСтрока + ?(ПустаяСтрока(РезСтрока), "", ", ") + ТекЭлемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Уровни = РезСтрока;
КонецПроцедуры // ФормированиеПредставленияСпискаУровней()

// Функция собирает информацию о текущем компьютере, операционной системе и 1С платформе
//
// Параметры:
//  СтруктураПараметров - Структура - Определяет какую именно информацию необходимо собрать.
//
// Возвращаемое значение:
//  Структура:
//   Текст - Текст с информацией о системе.
//   СписокФайлов - Полные пути к файлам вложения.
//   СписокОшибок - Список возникших ошибок.
//
&НаСервере
Функция СборИнформацииНаСервере(СтруктураПараметров)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.Поддержка"));
	Возврат ОбработкаОбъект.СборИнформацииОСистеме(СтруктураПараметров);
КонецФункции // СборИнформацииНаСервере()

// Заполняет данные формы исходящего электронного письма.
//
// Параметры:
//  ДанныеФормы - ДанныеФормыСтруктура - Содержит реквизиты для заполнения.
//  Вложения - ДанныеФормыСтруктураСКоллекцией - Файлы вкладываемые в письмо.
//  Результат - Структура:
//   Текст - Текст с информацией о системе.
//   СписокФайлов - Полные пути к файлам вложения.
//   СписокОшибок - Список возникших ошибок.
//
// Возвращаемое значение:
//  ДанныеФормы.
//  Вложения.
//
&НаСервере
Процедура ЗаполнитьДанныеФормы(ДанныеФормы, Вложения, Результат)
	
	// Получим учетную запись, от которой будет отправлено письмо.
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь";
	МодульПользователи = ОбщегоНазначения.ОбщийМодуль("Пользователи");
	Запрос.УстановитьПараметр("Пользователь", МодульПользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		УчетнаяЗапись = Выборка.Ссылка;
	КонецЕсли;
	
	Текст = "/ЗДЕСЬ НЕОБХОДИМО ПОДРОБНО ОПИСАТЬ СУТЬ
	|ПРОБЛЕМЫ ИЛИ ПРЕДЛОЖЕНИЯ. ПИСЬМА БЕЗ ДЕТАЛЬНОГО ОПИСАНИЯ БУДУТ ИГНОРИРОВАНЫ/";
	// Оставляем место для текста пользователя.
	Текст = Текст + Символы.ПС + Символы.ПС + Символы.ПС + Символы.ПС + Символы.ПС;
	
	// Результом будет структура с ключам: "Текст", "СписокФайлов", "СписокОшибок".
	Если Результат <> Неопределено Тогда
		
		Текст = Текст + Результат.Текст;
		
		// Теперь прикрепим файлы.
		Если Результат.СписокФайлов.Количество() <> 0 Тогда
			
			// Прикрепляем файлы к письму
			Для каждого ВыбранныйФайл Из Результат.СписокФайлов Цикл
				
				НовоеВложение = Вложения.Добавить();
				НовоеВложение.Расположение = 2;
				НовоеВложение.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
				
				
				Файл                            = Новый Файл(ВыбранныйФайл);
				
				НовоеВложение.ИмяФайла = Файл.Имя;
				НовоеВложение.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);			
				НовоеВложение.Размер              = Файл.Размер();
				НовоеВложение.РазмерПредставление = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НовоеВложение.Размер);

			КонецЦикла;
		КонецЕсли;
		
		// Возможно при получении информации произошли ошибки.
		Для каждого ТекОшибка Из Результат.СписокОшибок Цикл
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = '" + ТекОшибка + "'"));
		КонецЦикла;
	Иначе
		
		Возврат; // Отказался пользователь.
	КонецЕсли;
	
	ДанныеФормы.УчетнаяЗапись = УчетнаяЗапись;
	
	НовыйПолучатель = ДанныеФормы.ПолучателиПисьма.Добавить();
	// Подставим в качестве получателя адрес техподдержки.
	МакетПараметров = ПолучитьОбщийМакет("а6ПараметрыЛицензирования");
	Адрес = МакетПараметров.ПолучитьОбласть("АдресЭлектроннойПочты|Значение").ТекущаяОбласть.Текст;
	НовыйПолучатель.Адрес = Адрес; // Адрес ТехПоддержки
	НовыйПолучатель.Представление = "ТехПоддержка - "+Адрес;
	НовыйПолучатель.Контакт = Неопределено;
	
	ДанныеФормы.СписокПолучателейПисьма = НовыйПолучатель.Представление + "; ";
	
	Если ДанныеФормы.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
		 ИЛИ ДанныеФормы.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
         ТекстПисьмаФорматированныйДокумент = Новый ФорматированныйДокумент;
		 ТекстПисьмаФорматированныйДокумент.Добавить(Текст);
		 ВложенияФорматированныйДокумент = Новый Структура;
		 ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(Текст, ВложенияФорматированныйДокумент);
		 ДанныеФормы.ТекстHTML = Текст;
		 ДанныеФормы.Текст = "";
	Иначе
		 ДанныеФормы.Текст = Результат.Текст;
		 ДанныеФормы.ТекстHTML = "";
	КонецЕсли;
КонецПроцедуры // ЗаполнитьДанныеФормы()

#КонецОбласти

