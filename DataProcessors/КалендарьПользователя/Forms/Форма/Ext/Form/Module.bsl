///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Календарь пользователя"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Объект.ПользовательКалендаря = Пользователи.ТекущийПользователь();
	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПользовательКалендаря, "Сотрудник, ПодразделениеКомпании");
	//Объект.ФильтрМенеджер = СтруктураДанных.Сотрудник;
	ОБъект.ФильтрПодразделение = СтруктураДанных.ПодразделениеКомпании;
	
	ЦветаВидовДней = Новый ФиксированноеСоответствие(ЦветаОформленияВидовДнейКалендаря());
	Объект.ДатаКалендаря = ТекущаяДатаСеанса();
	ОтображатьШкалуМинут = Истина;
	Объект.КвантВремени = 30*60;
	
	Объект.БазовыйГрафик = Объект.ПользовательКалендаря.ГрафикРаботы;
	Если ЗначениеЗаполнено(Объект.БазовыйГрафик) Тогда
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		ГрафикРаботы.Загрузить(Справочники.ГрафикиРаботы.ПолучитьГрафик(Объект.БазовыйГрафик,НачалоНедели(НачалоМесяца(Объект.ДатаКалендаря)),КонецНедели(КонецМесяца(Объект.ДатаКалендаря)),ВыходныеДни));
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Календарь пользователя:'") + " " + Объект.ПользовательКалендаря;
	
КонецПроцедуры //ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РежимОтображения = "День" ИЛИ РежимОтображения = "" Тогда
		ПланировщикДень(Неопределено);
	ИначеЕсли РежимОтображения = "Неделя" Тогда
		ПланировщикНеделя(Неопределено);
	ИначеЕсли РежимОтображения = "Месяц" Тогда
		ПланировщикМесяц(Неопределено);
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Положение = ?(РасположениеШкалыВремени = "",ПоложениеШкалыВремени.Лево, ПоложениеШкалыВремени[РасположениеШкалыВремени]);
	
	Элементы.ТолькоРабочиеЧасы.Пометка = ТолькоРабочиеЧасы;
	
	Если ИнтервалМинут<>0 Тогда
		Планировщик.ШкалаВремени.Элементы[1].Кратность = ИнтервалМинут;
	Иначе
		ОтображатьШкалуМинут = Ложь;
	КонецЕсли;
	
	Если НЕ РежимОтображения = "Месяц" Тогда
		Планировщик.ШкалаВремени.Элементы[1].Видимость = ОтображатьШкалуМинут;
		Если ТолькоРабочиеЧасы Тогда
			ОтобразитьТолькоРабочиеЧасы();
		Иначе
			ОтобразитьУказанныйИнтервалВремени();
		КонецЕсли;
	КонецЕсли;
	
	Если ВремяОтображенияПо = 0 Тогда
		ВремяОтображенияПо = 24;
	КонецЕсли;
	
	// Производим подключение обработчика события выполняемого с задержкой.
	Если НЕ АвтоОбновление = 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрСостояние) Тогда
		ФильтрАвтомобиль = Неопределено;
		Элементы.ФильтрАвтомобиль.Доступность = Ложь;
		Элементы.ДеревоСобытийСостояниеСобытия.Видимость = Истина;
		Элементы.ДеревоСобытийОбращениеККлиенту.Видимость = Истина;
	Иначе
		Элементы.ФильтрАвтомобиль.Доступность = Истина;
		Элементы.ДеревоСобытийСостояниеСобытия.Видимость = Ложь; 
		Элементы.ДеревоСобытийОбращениеККлиенту.Видимость = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ФильтрАвтомобиль) Тогда
		ФильтрСостояние = Неопределено;
		Элементы.ФильтрСостояние.Доступность = Ложь;
		Элементы.ДеревоСобытийАвтомобиль.Видимость = Истина;

	Иначе
		Элементы.ФильтрСостояние.Доступность = Истина;
		Элементы.ДеревоСобытийАвтомобиль.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//ОбновитьСобытияПланировщика();
	
	Планировщик.ШкалаВремени.Положение = ?(РасположениеШкалыВремени = "",
		ПоложениеШкалыВремени.Лево, ПоложениеШкалыВремени[РасположениеШкалыВремени]);
	
	Если ИнтервалМинут <> 0 Тогда
		Планировщик.ШкалаВремени.Элементы[1].Кратность = ИнтервалМинут;
	КонецЕсли;
	
	Элементы.ТолькоРабочиеЧасы.Пометка = ТолькоРабочиеЧасы;
	Если НЕ РежимОтображения = "Месяц" Тогда
		Планировщик.ШкалаВремени.Элементы[1].Видимость = ОтображатьШкалуМинут;
		Если ТолькоРабочиеЧасы Тогда
			ДатаНачала = Дата("00010102");
			ДатаОкончания = Дата("00010101");
			Если РежимОтображения = "День" Тогда
				
				ГрафикДня = ГрафикРаботы.НайтиСтроки(Новый Структура("Дата",Объект.ДатаКалендаря));
				Для Каждого Строка Из ГрафикДня Цикл
					
					Если Строка.НачалоРабочегоВремени = Строка.КонецРабочегоВремени Тогда
						Продолжить;
					КонецЕсли;
					
					Если Строка.НачалоРабочегоВремени < ДатаНачала Тогда
						ДатаНачала = Строка.НачалоРабочегоВремени;
					КонецЕсли;
					
					Если Строка.КонецРабочегоВремени > ДатаОкончания Тогда
						ДатаОкончания = Строка.КонецРабочегоВремени;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ (ДатаНачала = Дата("00010102") И ДатаОкончания = Дата("00010101")) Тогда
					Планировщик.ОтступСНачалаПереносаШкалыВремени = (ДатаНачала - '00010101')/3600;
					Планировщик.ОтступСКонцаПереносаШкалыВремени = ('00010102' - ДатаОкончания)/3600;
				КонецЕсли;
				
			ИначеЕсли РежимОтображения = "Неделя" Тогда
				
				Дата = НачалоНедели(Объект.ДатаКалендаря);
				Пока Дата <= КонецНедели(Объект.ДатаКалендаря) Цикл
					
					ГрафикДня = ГрафикРаботы.НайтиСтроки(Новый Структура("Дата",Дата));
					Для Каждого Строка Из ГрафикДня Цикл
						
						Если Строка.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Праздник") 
							ИЛИ Строка.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Выходной") Тогда
							
							Продолжить;
						КонецЕсли;
						
						Если Строка.НачалоРабочегоВремени < ДатаНачала Тогда
							ДатаНачала = Строка.НачалоРабочегоВремени;
						КонецЕсли;
						
						Если Строка.КонецРабочегоВремени > ДатаОкончания Тогда
							ДатаОкончания = Строка.КонецРабочегоВремени;
						КонецЕсли;
						
					КонецЦикла;
					Дата = Дата + 24*60*60;
					
				КонецЦикла;
				
				Если НЕ (ДатаНачала = Дата("00010102") И ДатаОкончания = Дата("00010101")) Тогда
					Планировщик.ОтступСНачалаПереносаШкалыВремени = (ДатаНачала - '00010101')/3600;
					Планировщик.ОтступСКонцаПереносаШкалыВремени = ('00010102' - ДатаОкончания)/3600;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ВремяОтображенияС = '00010101' И НЕ ВремяОтображенияПо = 0 Тогда
				Планировщик.ОтступСНачалаПереносаШкалыВремени = ВремяОтображенияС;
				Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - ВремяОтображенияПо;
			Иначе
				Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
				Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при Возникает при двойном щелчке мыши (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                     - Значение выбранной строки.
//  Поле                 - ПолеФормы    - Активное поле (колонка).
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения стандартной (системной)
//                                        обработки события.
//
&НаКлиенте
Процедура ДеревоСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Событие = Неопределено Тогда 
		Объект.ДатаКалендаря = Элемент.ТекущиеДанные.НачалоСобытияДата;
		ПланировщикДень(Неопределено);
	Иначе
		Если ТекущиеДанные.Событие = "Напоминание" Тогда
			СтруктураСобытия = Новый Структура();
			СтруктураСобытия.Вставить("Пользователь",ТекущиеДанные.Пользователь);
			СтруктураСобытия.Вставить("Автор",ТекущиеДанные.Автор);
			СтруктураСобытия.Вставить("ВремяСобытия",ТекущиеДанные.НачалоСобытияДата);
			СтруктураСобытия.Вставить("Источник",ТекущиеДанные.Объект);
			Ключ = ОткрытьНапоминание(СтруктураСобытия);
			ПараметрыФормы = Новый Структура("Ключ", Ключ); 
			ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаСозданияДокументов",ЭтотОбъект);
			ОткрытьФорму("РегистрСведений.НапоминанияПользователя.ФормаЗаписи", 
																				ПараметрыФормы,ЭтотОбъект,,,,ОбработчикПерехвата); 
		Иначе
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Событие); 
			ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаСозданияДокументов",ЭтотОбъект);
			ОткрытьФорму("Документ."+ТекущиеДанные.ВидДокумента+".ФормаОбъекта", 
																				ПараметрыФормы,ЭтотОбъект,,,,ОбработчикПерехвата); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ДеревоСобытийВыбор()

// Обработчик события возникающего на клиенте при активизации даты в календаре (указание даты мышью или перемещение на
// дату с помощью клавиатуры).
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КалендарьПриАктивизацииДаты(Элемент)
		
	Если Элементы.ФормаСписок.Пометка Тогда
		ОбновитьДеревоСобытий();
	Иначе            
		ПланировщикПриСменеТекущегоПериодаОтображенияНаСервере();
		Если РежимОтображения = "День" ИЛИ РежимОтображения = "Неделя" Тогда
			Если ТолькоРабочиеЧасы Тогда
				ОтобразитьТолькоРабочиеЧасы();
			Иначе
				ОтобразитьУказанныйИнтервалВремени();
			КонецЕсли;
		КонецЕсли;
		
		СформироватьЗаголовокПериода();
		
		ОбновитьПланировщикВФоне();
		Элементы.Календарь.Обновить();
	КонецЕсли;
	
КонецПроцедуры //КалендарьПриАктивизацииДаты()

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	Если Элемент = Элементы.ФильтрАвтомобиль Тогда
		Если ЗначениеЗаполнено(Объект.ФильтрАвтомобиль) Тогда
			ФильтрСостояние = Неопределено;
			Элементы.ФильтрСостояние.Доступность = Ложь;
			Элементы.ДеревоСобытийАвтомобиль.Видимость = Истина;
		Иначе
			Элементы.ФильтрСостояние.Доступность = Истина;
			Элементы.ДеревоСобытийАвтомобиль.Видимость = Ложь;
		КонецЕсли; 
	ИначеЕсли Элемент = Элементы.ФильтрСостояние Тогда
		Если ЗначениеЗаполнено(Объект.ФильтрСостояние) Тогда
			ФильтрАвтомобиль = Неопределено;
			Элементы.ФильтрАвтомобиль.Доступность = Ложь;
			Элементы.ДеревоСобытийСостояниеСобытия.Видимость = Истина;
			Элементы.ДеревоСобытийОбращениеККлиенту.Видимость = Истина;
		Иначе
			Элементы.ФильтрАвтомобиль.Доступность = Истина;
			Элементы.ДеревоСобытийСостояниеСобытия.Видимость = Ложь;
			Элементы.ДеревоСобытийОбращениеККлиенту.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли; 

	Если Элементы.ФормаСписок.Пометка Тогда
		ОбновитьДеревоСобытий();
		Элементы.ДеревоСобытий.Обновить();
	Иначе
		ОбновитьПланировщикВФоне();
	КонецЕсли;
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Интервал".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КвантВремениПриИзменении(Элемент)
	
	Планировщик.ШкалаВремени.Элементы[1].Кратность = ИнтервалМинут;
	
КонецПроцедуры //КвантВремениПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Базовый график".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаСервере
Процедура БазовыйГрафикПриИзмененииНаСервере()
	
	УдалитьРаскраскуФона(ЦветаСтиля.ВидДняПроизводственногоКалендаряВыходнойЦвет,Планировщик);
	УдалитьРаскраскуФона(ЦветаСтиля.ВидПроизводственногоКалендаряНерабочееВремя,Планировщик);
	
	ВидыДнейСоответствие = Новый Соответствие;
	Если ЗначениеЗаполнено(Объект.БазовыйГрафик) Тогда
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		ГрафикРаботы.Загрузить(Справочники.ГрафикиРаботы.ПолучитьГрафик(Объект.БазовыйГрафик,НачалоНедели(НачалоМесяца(Объект.ДатаКалендаря)),КонецНедели(КонецМесяца(Объект.ДатаКалендаря)), ВыходныеДни));
	Иначе
		ГрафикРаботы.Очистить();
	КонецЕсли;
	
	РаскраситьПоГрафику();
	
КонецПроцедуры //БазовыйГрафикПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при отображении в календаре очередного месяца реквизита "Дата календаря".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ОформлениеПериода - ОформлениеПериода - Содержит оформление периода.
//
&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		Если ЗначениеЗаполнено(Объект.БазовыйГрафик) И НЕ ВидыДней = Неопределено Тогда
			
			ЦветОформленияДня = ЦветаВидовДней.Получить(ВидыДней.Получить(СтрокаОформленияПериода.Дата));
			Если НЕ ЦветОформленияДня = Неопределено Тогда
				СтрокаОформленияПериода.ЦветФона = ЦветОформленияДня;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //КалендарьПриВыводеПериода()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ВыборМесяца".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВыборМесяцаПриИзменении(Элемент)
	
	ВыборМесяца.ДатаОкончания = КонецМесяца(ВыборМесяца.ДатаНачала);
	Объект.ДатаКалендаря = ВыборМесяца.ДатаНачала;
	КалендарьПриАктивизацииДаты(Неопределено);
		
КонецПроцедуры //ВыборМесяцаПриИзменении()

// Обработчик события возникающего на клиенте во время начала ожидания ввода текста.
//
// Параметры:
//  Элемент                  - ПолеФормы               - Элемент управления, в котором возникло данное событие.
//  Текст                    - Строка                  - Строка текста, введенная в поле ввода..
//  ДанныеВыбора             - СписокЗначений          - Содержит список значений, который будет использован при
//                                                       стандартной обработке события..
//  ПараметрыПолученияДанных - Структура; Неопределено - Содержит параметры поиска, которые будут переданы в метод ПолучитьДанныеВыбора.
//  СтандартнаяОбработка     - Булево                  - В данный параметр передается признак выполнения стандартной
//                                                       (системной) обработки события.
//
&НаКлиенте
Процедура ЗначениеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
КонецПроцедуры //ЗначениеПоискаАвтоПодбор()

// Обработчик события возникающего на клиенте при формировании значения по отредактированному тексту.
//
// Параметры:
//  Элемент                  - ПолеФормы               - Элемент управления, в котором возникло данное событие.
//  Текст                    - Строка                  - Строка текста, введенная в поле ввода.
//  ДанныеВыбора             - СписокЗначений          - Параметр заполняется списком значений для последующего выбора
//                                                       одного из них и размещения его в поле ввода.
//  ПараметрыПолученияДанных - Структура; Неопределено - Содержит параметры поиска, которые будут переданы в метод ПолучитьДанныеВыбора.
//  СтандартнаяОбработка     - Булево                  - В данный параметр передается признак выполнения стандартной
//                                                       (системной) обработки события.
//
&НаКлиенте
Процедура ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	ЗначениеПоиска = Текст;
	Обновить(Неопределено);
	Список(Неопределено);
	ОтображениеПериода = "";

КонецПроцедуры //ЗначениеПоискаОкончаниеВводаТекста()

#Область ОбработчикиСобытийПланировщика

// Обработчик события возникающего на клиенте при двойном щелчке левой кнопки мыши на элементе.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Откроем выбранный документ
	Если Элемент.ВыделенныеЭлементы.Количество()=1 Тогда
		
		Если Элемент.ВыделенныеЭлементы[0].Значение.ВидДокумента = "Напоминание" Тогда
			Ключ = ОткрытьНапоминание(Элемент.ВыделенныеЭлементы[0].Значение);
			ПараметрыФормы = Новый Структура("Ключ", Ключ); 
			ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаСозданияДокументов",ЭтотОбъект);
			ОткрытьФорму("РегистрСведений.НапоминанияПользователя.ФормаЗаписи", 
																				ПараметрыФормы,ЭтотОбъект,,,,ОбработчикПерехвата);
		Иначе
			ПараметрыФормы = Новый Структура("Ключ",  Элемент.ВыделенныеЭлементы[0].Значение.Событие); 
			ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаСозданияДокументов",ЭтотОбъект);
			ОткрытьФорму("Документ."+ Элемент.ВыделенныеЭлементы[0].Значение.ВидДокумента+".ФормаОбъекта", 
																				ПараметрыФормы,ЭтотОбъект,,,,ОбработчикПерехвата);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПланировщикВыбор()

// Обработчик события возникающего при смене периода отображения (при прокрутке с помощью колеса мыши или команд) в
// контексте сервера.
//
&НаСервере
Процедура ПланировщикПриСменеТекущегоПериодаОтображенияНаСервере()
	
	ЗагруженныйМесяц = Месяц(Объект.ДатаКалендаря);
	Если ЗначениеЗаполнено(Объект.БазовыйГрафик) Тогда
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		ГрафикРаботы.Загрузить(Справочники.ГрафикиРаботы.ПолучитьГрафик(Объект.БазовыйГрафик,НачалоНедели(НачалоМесяца(Объект.ДатаКалендаря)),КонецНедели(КонецМесяца(Объект.ДатаКалендаря)), ВыходныеДни));
		РаскраситьПоГрафику();
	КонецЕсли;
	
КонецПроцедуры //ПланировщикПриСменеТекущегоПериодаОтображения()

// Обработчик события возникающего на клиенте при смене периода отображения (при прокрутке с помощью колеса мыши или команд).
//
// Параметры:
//  Элемент                   - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ТекущиеПериодыОтображения - Массив       - Массив текущих периодов отображения. 
//  												Элементы массива имеют тип ПериодОтображенияПланировщика.
//  СтандартнаяОбработка      - Булево       - В данный параметр передается признак выполнения системной 
//  												обработки события.
//
&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Отобразим изменения даты на календаре.
	Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		Объект.ДатаКалендаря = ОбщегоНазначенияКлиент.ДатаСеанса();
		Увеличение = 0;
	ИначеЕсли Объект.ДатаКалендаря > ТекущиеПериодыОтображения[0].Начало И Объект.ДатаКалендаря < ТекущиеПериодыОтображения[0].Конец Тогда
		Возврат;
	ИначеЕсли Объект.ДатаКалендаря < ТекущиеПериодыОтображения[0].Конец Тогда
		Увеличение = 1;
	Иначе
		Увеличение = -1;
	КонецЕсли;
	
	Если РежимОтображения = "Месяц" Тогда
		Объект.ДатаКалендаря = ДобавитьМесяц(Объект.ДатаКалендаря,Увеличение);
	ИначеЕсли РежимОтображения = "Неделя" Тогда
		Объект.ДатаКалендаря = Объект.ДатаКалендаря + 7*(Увеличение * 86400);
	ИначеЕсли РежимОтображения = "День" Тогда
		Объект.ДатаКалендаря = Объект.ДатаКалендаря + (Увеличение * 86400);
	КонецЕсли;
	
	Если НЕ ЗагруженныйМесяц = Месяц(Объект.ДатаКалендаря) Тогда
		ПланировщикПриСменеТекущегоПериодаОтображенияНаСервере();
		ВыборМесяца.ДатаНачала = НачалоМесяца(Объект.ДатаКалендаря);
		ВыборМесяца.ДатаОкончания = КонецМесяца(Объект.ДатаКалендаря);
	КонецЕсли; 

	// Раскрасим дни не входящие в месяц.
	Если РежимОтображения = "Месяц" Тогда
		УдалитьРаскраскуФона(ОбщегоНазначенияКлиент.ЦветСтиля("ВидПроизводственногоКалендаряНерабочееВремя"),Планировщик);
		РаскраситьДниНеВходящиеВМесяц();
	Иначе
		Если ТолькоРабочиеЧасы Тогда
			ОтобразитьТолькоРабочиеЧасы();
		Иначе
			ОтобразитьУказанныйИнтервалВремени();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПланировщикВФоне();
	
	ВыделитьИнтервалДат();
		
КонецПроцедуры //ПланировщикПриСменеТекущегоПериодаОтображения()

// Обработчик события возникающего на клиенте перед отображением окна быстрого редактирования.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НовыйЭлемент         - Булево       - Признак указывает, что создается новый элемент, а не редактируется существующий.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Откроем выбранный документ.
	Если Элемент.ВыделенныеЭлементы.Количество()=1 Тогда
		
		Если Элемент.ВыделенныеЭлементы[0].Значение = Неопределено Тогда
			
			ОткрытьФормуВыбораСобытия();
			
		Иначе
			
			Если  Элемент.ВыделенныеЭлементы[0].Значение.ВидДокумента = "Напоминание" Тогда
				Ключ = ОткрытьНапоминание( Элемент.ВыделенныеЭлементы[0].Значение);
				ПараметрыФормы = Новый Структура("Ключ", Ключ);
				ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаСозданияДокументов",ЭтотОбъект);
				ОткрытьФорму("РегистрСведений.НапоминанияПользователя.ФормаЗаписи", ПараметрыФормы,ЭтотОбъект,,,,ОбработчикПерехвата);
			Иначе
				ПараметрыФормы = Новый Структура("Ключ",  Элемент.ВыделенныеЭлементы[0].Значение.Событие); 
				ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаСозданияДокументов",ЭтотОбъект);
				ОткрытьФорму("Документ."+ Элемент.ВыделенныеЭлементы[0].Значение.ВидДокумента+".ФормаОбъекта", ПараметрыФормы,ЭтотОбъект,,,,ОбработчикПерехвата);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПланировщикПередНачаломРедактирования()

// Обработчик события возникающего на клиенте при интерактивном удалении элемента.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Установка данного параметра в Истина приведет к отмене удаления элементов.
//
&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры //ПланировщикПередУдалением()

// Обработчик события возникающего на клиенте при окончании интерактивного редактировании элемента планировщика.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НовыйЭлемент         - Булево       - Признак указывает, что был создан новый элемент, а не редактировался существующий.
//  ОтменаРедактирования - Булево      - Установка данного параметра в Истина приведет к отмене изменения элемента планировщика.
//
&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	// Добавим событие
	Если НовыйЭлемент Тогда
		
		Если Элемент.ВыделенныеЭлементы.Количество()=1 Тогда
			
			ВыбранноеСобытие = Элемент.ВыделенныеЭлементы[0];
			Если ВыбранноеСобытие.Текст = "" Тогда
				ВыбранноеСобытие.Текст = "НовоеСобытие";
				ВыбранноеСобытие.Значение = СоздатьСобытие("НовоеСобытие",ВыбранноеСобытие.Начало,ВыбранноеСобытие.Конец,ОтменаРедактирования);
			Иначе
				ВыбранноеСобытие.Значение = СоздатьСобытие(ВыбранноеСобытие.Текст,ВыбранноеСобытие.Начало,ВыбранноеСобытие.Конец,ОтменаРедактирования);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Элемент.ВыделенныеЭлементы.Количество()=1 Тогда
			ВыбранноеСобытие = Элемент.ВыделенныеЭлементы[0];
			Если ВыбранноеСобытие.Значение.ВидДокумента = "Событие" Тогда
				ОбработатьПеремещениеДокумента(ВыбранноеСобытие.Значение.Событие,ВыбранноеСобытие.Начало,ВыбранноеСобытие.Конец);
			Иначе
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПланировщикПриОкончанииРедактирования()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "День".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикДень(Команда)
	
	Если НЕ Элементы.ФормаДень.Пометка Тогда
		Элементы.ФормаДень.Пометка = НЕ Элементы.ФормаДень.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.ФормаМесяц.Пометка = Ложь;
		Элементы.ФормаНеделя.Пометка = Ложь;
		Элементы.ФормаСписок.Пометка = Ложь;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаКалендарь;
	КонецЕсли;
	
	РежимОтображения = "День";
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	
	ОбновитьПланировщикВФоне();
	
КонецПроцедуры //ПланировщикДень()

// Обработчик события нажатия кнопки "Месяц".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикМесяц(Команда)
	
	Если НЕ Элементы.ФормаМесяц.Пометка Тогда
		Элементы.ФормаМесяц.Пометка = НЕ Элементы.ФормаМесяц.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.ФормаДень.Пометка = Ложь;
		Элементы.ФормаНеделя.Пометка = Ложь;
		Элементы.ФормаСписок.Пометка = Ложь;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаМесяца;
		ВыборМесяца.ДатаНачала = НачалоМесяца(Объект.ДатаКалендаря);
		ВыборМесяца.ДатаОкончания = КонецМесяца(Объект.ДатаКалендаря);
	КонецЕсли;
	
	РежимОтображения = "Месяц";
	Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	
	ОбновитьПланировщикВФоне();
		
КонецПроцедуры //ПланировщикМесяц()

// Обработчик события нажатия кнопки "Неделя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикНеделя(Команда)
	
	Если НЕ Элементы.ФормаНеделя.Пометка Тогда
		Элементы.ФормаНеделя.Пометка = НЕ Элементы.ФормаНеделя.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.ФормаМесяц.Пометка = Ложь;
		Элементы.ФормаДень.Пометка = Ложь;
		Элементы.ФормаСписок.Пометка = Ложь;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаКалендарь;
	КонецЕсли;
	
	РежимОтображения = "Неделя";
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	
	ОбновитьПланировщикВФоне();
		
КонецПроцедуры //ПланировщикНеделя()

// Обработчик события нажатия кнопки "Настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект",Объект);
	ПараметрыОткрытия.Вставить("РасположениеШкалыВремени",Строка(Планировщик.ШкалаВремени.Положение));
	ПараметрыОткрытия.Вставить("ОтображатьШкалуМинут",Планировщик.ШкалаВремени.Элементы[1].Видимость);
	ПараметрыОткрытия.Вставить("РасположениеШкалыВремени",Строка(Планировщик.ШкалаВремени.Положение));
	ПараметрыОткрытия.Вставить("АвтоОбновление",АвтоОбновление);
	ПараметрыОткрытия.Вставить("ВремяОтображенияПо",ВремяОтображенияПо);
	ПараметрыОткрытия.Вставить("ВремяОтображенияС",ВремяОтображенияС);
	ПараметрыОткрытия.Вставить("ЦветаСобытий",ЦветаСобытий);
	ПараметрыОткрытия.Вставить("ТолькоРабочиеЧасы",ТолькоРабочиеЧасы);
	ПараметрыОткрытия.Вставить("ИнтервалМинут",ИнтервалМинут);
	ПараметрыОткрытия.Вставить("ГрафикРаботы",Объект.БазовыйГрафик);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаНастройки",ЭтотОбъект);
	ОткрытьФорму("Обработка.КалендарьПользователя.Форма.ФормаНастроек",ПараметрыОткрытия,,,,,
					ОбработчикРезультата,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //Настройки()

// Обработчик события нажатия кнопки "Список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Список(Команда)
	
	Если НЕ Элементы.ФормаСписок.Пометка Тогда
		Элементы.ФормаСписок.Пометка = НЕ Элементы.ФормаСписок.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаСписок;
		Элементы.ФормаМесяц.Пометка = Ложь;
		Элементы.ФормаНеделя.Пометка = Ложь;
		Элементы.ФормаДень.Пометка = Ложь;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаМесяца;
		ВыборМесяца.ДатаНачала = НачалоМесяца(Объект.ДатаКалендаря);
		ВыборМесяца.ДатаОкончания = КонецМесяца(Объект.ДатаКалендаря);
	КонецЕсли;
	ОбновитьДеревоСобытий();
	РежимОтображения = "Месяц";
	СформироватьЗаголовокПериода();

КонецПроцедуры //Список() 

// Обработчик события нажатия кнопки "Только рабочие часы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ТолькоРабочиеЧасы(Команда)
	
	ТолькоРабочиеЧасы = НЕ ТолькоРабочиеЧасы;
	Элементы.ТолькоРабочиеЧасы.Пометка = ТолькоРабочиеЧасы;

	ДатаНачала = Дата("00010102");
	ДатаОкончания = Дата("00010101");
	
	Если ТолькоРабочиеЧасы Тогда
		ОтобразитьТолькоРабочиеЧасы();
	Иначе
		ОтобразитьУказанныйИнтервалВремени();
	КонецЕсли;
	
КонецПроцедуры //ТолькоРабочиеЧасы()

// Обработчик события нажатия кнопки "Обновить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьПланировщикВФоне();

	// Производим подключение обработчика события выполняемого с задержкой.
	Если НЕ АвтоОбновление = 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
	КонецЕсли;
	
КонецПроцедуры //Обновить()

// Обработчик события нажатия кнопки "Добавить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ДобавитьСобытие(Команда)
	
	ОткрытьФормуВыбораСобытия();
		
КонецПроцедуры //ДобавитьСобытие()

&НаКлиенте
Процедура ОткрытьФормуВыбораСобытия()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОповещениеВыборСобытия",ЭтотОбъект);
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РежимВыбора",Истина);
    ОткрытьФорму("Документ.Событие.Форма.ФормаДокумента",ПараметрыВыбора, , , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОповещениеВыборСобытия(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат)= тип("СправочникСсылка.ВидыСобытий")Тогда
		
	ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаСозданияДокументов",ЭтотОбъект);
	
	// Заполним документ по умолчанию
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ВидСобытия",Результат);

	Если ЗначениеЗаполнено(Объект.ФильтрКонтрагент) Тогда
		ПараметрыЗаполнения.Вставить("Контрагент",Объект.ФильтрКонтрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрМенеджер) Тогда
		ПараметрыЗаполнения.Вставить("Менеджер",Объект.ФильтрМенеджер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрАвтор) Тогда
		ПараметрыЗаполнения.Вставить("Автор",Объект.ФильтрАвтор);
	КонецЕсли;

	ПараметрыЗаполнения.Вставить("ХозОперация",ПредопределенноеЗначение("Справочник.ХозОперации.Событие"));
	ПараметрыЗаполнения.Вставить("Дата", ТекущаяДата());
	ПараметрыЗаполнения.Вставить("ДатаНачала",ТекущаяДата());
	ПараметрыЗаполнения.Вставить("ДатаОкончания",ТекущаяДата()+60*60*10);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения",ПараметрыЗаполнения);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта",ПараметрыОткрытия,,,,,ОбработчикПерехвата);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует заголовок надписи периода отображения, в зависимости от режима отображения.
//
&НаКлиенте
Процедура СформироватьЗаголовокПериода()
	
	Если РежимОтображения = "Месяц" Тогда
		Элементы.ОтображениеПериода.Заголовок = Формат(Объект.ДатаКалендаря,"ДФ='MMMM yyyy'");
	ИначеЕсли РежимОтображения = "Неделя" Тогда
		Элементы.ОтображениеПериода.Заголовок = "" + Формат(НачалоНедели(Объект.ДатаКалендаря),"ДФ='dd'") + " - " 
												+ Формат(КонецНедели(Объект.ДатаКалендаря),"ДЛФ=DD");
	ИначеЕсли РежимОтображения = "День" Тогда
		Элементы.ОтображениеПериода.Заголовок = Формат(Объект.ДатаКалендаря,"ДФ='ddd, dd MMMM yyyy'");
	КонецЕсли;
	
КонецПроцедуры //СформироватьЗаголовокПериода()

// Устанавливает специальный цвет фона для временных интервалов не входящих в отображаемый месяц.
//
&НаКлиенте
Процедура РаскраситьДниНеВходящиеВМесяц()
	
	Планировщик.ИнтервалыФона.Добавить(НачалоНедели(НачалоМесяца(Объект.ДатаКалендаря)),НачалоМесяца(Объект.ДатаКалендаря)-1);
	Планировщик.ИнтервалыФона.Добавить(КонецМесяца(Объект.ДатаКалендаря)+1,КонецНедели(КонецМесяца(Объект.ДатаКалендаря)));
	
	ДобавленныйИнтервал = Планировщик.ИнтервалыФона.Найти(Новый Цвет(0,0,0));
	Пока НЕ ДобавленныйИнтервал = Неопределено Цикл
		ДобавленныйИнтервал.Цвет = ОбщегоНазначенияКлиент.ЦветСтиля("ВидПроизводственногоКалендаряНерабочееВремя");
		ДобавленныйИнтервал = Планировщик.ИнтервалыФона.Найти(Новый Цвет(0,0,0));
	КонецЦикла;
	
КонецПроцедуры //РаскраситьДниНеВходящиеВМесяц()

// Удаляет установленные интервалы фона для временных интервалов, не входящих в отображаемый месяц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьРаскраскуФона(Цвет,Планировщик)
	
	УдаляемыйИнтервал = Планировщик.ИнтервалыФона.Найти(Цвет);
	Пока НЕ УдаляемыйИнтервал = Неопределено Цикл
		Планировщик.ИнтервалыФона.Удалить(Планировщик.ИнтервалыФона.Индекс(УдаляемыйИнтервал));
		УдаляемыйИнтервал = Планировщик.ИнтервалыФона.Найти(Цвет);
	КонецЦикла;
	
КонецПроцедуры //УдалитьРаскраскуДнейНеВходящихВМесяц()

// Функция определяет соответствие видов дня производственного календаря и цвета оформления
// этого дня в поле календаря.
//
// Возвращаемое значение
//	ЦветаОформления - соответствие видов дня и цветов оформления.
//
&НаСервере
Функция ЦветаОформленияВидовДнейКалендаря()
	
	ЦветаОформления = Новый Соответствие;
	
	ЦветаОформления.Вставить(Перечисления.ВидДня.Рабочий,         Новый Цвет(255,255,255));
	ЦветаОформления.Вставить(Перечисления.ВидДня.Выходной,        ЦветаСтиля.ВидДняПроизводственногоКалендаряВыходнойЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидДня.Предпраздничный, ЦветаСтиля.ВидДняПроизводственногоКалендаряПредпраздничныйЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидДня.Праздник,        ЦветаСтиля.ВидДняПроизводственногоКалендаряПраздникЦвет);
	
	Возврат ЦветаОформления;
	
КонецФункции //ЦветаОформленияВидовДнейКалендаря()

// Производит окрашивание фона в зависимости от вида дня в графике.
&НаСервере
Процедура РаскраситьПоГрафику()
	
	УдалитьРаскраскуФона(ЦветаСтиля.ВидДняПроизводственногоКалендаряВыходнойЦвет,Планировщик);
	УдалитьРаскраскуФона(ЦветаСтиля.ВидПроизводственногоКалендаряНерабочееВремя,Планировщик);
	УдалитьРаскраскуФона(Новый Цвет(255,255,255),Планировщик);
	
	НерабочееВремя = Новый ТаблицаЗначений;
	НерабочееВремя.Колонки.Добавить("Дата",                  Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	НерабочееВремя.Колонки.Добавить("НачалоРабочегоВремени", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НерабочееВремя.Колонки.Добавить("КонецРабочегоВремени",  Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	
	ВидыДнейСоответствие = Новый Соответствие;
	
	Для Каждого Строка Из ГрафикРаботы Цикл
		
		Если ВидыДнейСоответствие.Получить(Строка.Дата) = Неопределено Тогда
			
			ВидыДнейСоответствие.Вставить(Строка.Дата, Строка.ВидДня);
			
		КонецЕсли;
		
		// Полностью зальем фон для праздничных, выходных и предпраздничных дней.
		Если Строка.ВидДня = Перечисления.ВидДня.Выходной ИЛИ Строка.ВидДня = Перечисления.ВидДня.Праздник Тогда
			
			Планировщик.ИнтервалыФона.Добавить(НачалоДня(Строка.Дата),КонецДня(Строка.Дата));
			ДобавленныйИнтервал = Планировщик.ИнтервалыФона.Найти(Новый Цвет(0,0,0));
			
			Если Строка.ВидДня = Перечисления.ВидДня.Выходной Тогда
				ДобавленныйИнтервал.Цвет = ЦветаСтиля.ВидДняПроизводственногоКалендаряВыходнойЦвет;
			ИначеЕсли Строка.ВидДня = Перечисления.ВидДня.Праздник Тогда
				ДобавленныйИнтервал.Цвет = ЦветаСтиля.ВидДняПроизводственногоКалендаряПраздникЦвет;
			КонецЕсли;
			
		КонецЕсли;
		
		// Для рабочих и предпраздничных дней зальем фон нерабочими часами.
		Если (Строка.ВидДня = Перечисления.ВидДня.Рабочий ИЛИ Строка.ВидДня = Перечисления.ВидДня.Предпраздничный) 
			И НЕ РежимОтображения = "Месяц" Тогда
			
			Планировщик.ИнтервалыФона.Добавить(НачалоДня(Строка.Дата),КонецДня(Строка.Дата));
			ДобавленныйИнтервал = Планировщик.ИнтервалыФона.Найти(Новый Цвет(0,0,0));
			ДобавленныйИнтервал.Цвет = ЦветаСтиля.ВидПроизводственногоКалендаряНерабочееВремя;
			
		КонецЕсли;
		
		// Выделим рабочие часы в рабочем дне.
		Если ((Строка.ВидДня = Перечисления.ВидДня.Рабочий 
			ИЛИ Строка.ВидДня = Перечисления.ВидДня.Предпраздничный) 
			И НЕ РежимОтображения = "Месяц") 
			И (НЕ ЗначениеЗаполнено(Строка.ВидИнтервала) ИЛИ ЗначениеЗаполнено(Строка.ВидИнтервала) И Строка.ВидИнтервала.РабочийИнтервал) Тогда
			
			НачалоВремени = Строка.Дата + (Строка.НачалоРабочегоВремени - '00010101');
			КонецВремени = Строка.Дата + (Строка.КонецРабочегоВремени - '00010101');
			
			Если НачалоВремени = КонецВремени Тогда
				КонецВремени = КонецДня(НачалоВремени);
			КонецЕсли;
			
			Планировщик.ИнтервалыФона.Добавить(НачалоВремени,КонецВремени);
			ДобавленныйИнтервал = Планировщик.ИнтервалыФона.Найти(Новый Цвет(0,0,0));
			ДобавленныйИнтервал.Цвет = Новый Цвет(255,255,255);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним соответствия для раскраски календаря.
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейСоответствие);
	
КонецПроцедуры //РаскраситьПоГрафику()

// Производит выделения нужного интервала на календаре.
&НаКлиенте
Процедура ВыделитьИнтервалДат()
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	Элементы.Календарь.РежимВыделения = РежимВыделенияДаты.Одиночный;
	Элементы.Календарь.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры //ВыделитьИнтервалДат()

// Запускает обновление планировщика в фоне
&НаКлиенте
Процедура ОбновитьПланировщикВФоне()
	Если НЕ ЗначениеПоиска = "" Тогда
		ЗначениеПоиска = "";
	КонецЕсли;

	ДлительнаяОперация = ОбновитьСобытияПланировщика(); 
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПриЗавершенииОбновленияКалендаря", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);	
КонецПроцедуры

// Обновляет элементы планировщика в зависимости от выбранного интервала времени и установленных фильтров.
&НаСервере
Функция ОбновитьСобытияПланировщика()
	
	Данные = Новый Структура;
	Данные.Вставить("СписокОтображаемыхДокументов", Объект.СписокОтображаемыхДокументов);
	Данные.Вставить("ФильтрСостояние", Объект.ФильтрСостояние);
	Данные.Вставить("ФильтрАвтомобиль", Объект.ФильтрАвтомобиль);  
	Данные.Вставить("ФильтрАвтор", Объект.ФильтрАвтор);
	Данные.Вставить("ФильтрПодразделение", Объект.ФильтрПодразделение);
	Данные.Вставить("ФильтрМенеджер", Объект.ФильтрМенеджер);
	Данные.Вставить("ФильтрКонтрагент", Объект.ФильтрКонтрагент);
	Данные.Вставить("ФильтрСостояние", Объект.ФильтрСостояние);
	Данные.Вставить("ПользовательКалендаря", Объект.ПользовательКалендаря);
	Данные.Вставить("ДатаКалендаря", Объект.ДатаКалендаря);
	Данные.Вставить("РасписаниеСобытий", Объект.РасписаниеСобытий.Выгрузить(Новый Массив));
	Данные.Вставить("ЦветаСобытий", ЦветаСобытий.Выгрузить());
	
	Периодичность = ?(РежимОтображения="", "День", РежимОтображения);
	СтруктураПараметров = Новый Структура("ТекстДляПоиска ,Периодичность, Данные, Планировщик", ЗначениеПоиска, Периодичность, Данные, Планировщик);
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.КалендарьПользователя.ПолучитьТаблицуРасписаний", СтруктураПараметров, ПараметрыФоновогоЗадания);
	
КонецФункции //ОбновитьСобытияПланировщика()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы
// подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаНастройкиНаСервере()
	
	ОбновитьСобытияПланировщика();
	БазовыйГрафикПриИзмененииНаСервере();
	
КонецПроцедуры //ОбработкаРезультатаНастройкиНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаНастройки(РезультатОповещения,Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
		
		РасположениеШкалыВремени = РезультатОповещения.РасположениеШкалыВремени;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени[РасположениеШкалыВремени];
		
		Объект.СписокОтображаемыхДокументов.Очистить();
		ЦветаСобытий.Очистить();
		
		Для каждого Строка Из РезультатОповещения.СписокДокументов Цикл
			
			Если Строка.Просмотр Тогда
				Объект.СписокОтображаемыхДокументов.Добавить(Строка.ВидДокумента, Строка.ПредставлениеДокумента);
			КонецЕсли;
			
			НоваяСтрока = ЦветаСобытий.Добавить();
			НоваяСтрока.ВидДокумента = Строка.ВидДокумента;
			НоваяСтрока.Цвет = Строка.Цвет;
			
		КонецЦикла;
		
		Объект.БазовыйГрафик = РезультатОповещения.ГрафикРаботы;
		ВремяОтображенияС = РезультатОповещения.ВремяОтображенияС;
		ВремяОтображенияПо = РезультатОповещения.ВремяОтображенияПо;
		ТолькоРабочиеЧасы = РезультатОповещения.ТолькоРабочиеЧасы;
		Элементы.ТолькоРабочиеЧасы.Пометка = ТолькоРабочиеЧасы;
		АвтоОбновление = РезультатОповещения.АвтоОбновление;
		ОтображатьШкалуМинут = (РезультатОповещения.ИнтервалМинут <> 0);
		ИнтервалМинут = РезультатОповещения.ИнтервалМинут;
		Если ОтображатьШкалуМинут Тогда
			КвантВремениПриИзменении(Неопределено);
		КонецЕсли;
		
		Если НЕ РежимОтображения = "Месяц" Тогда
			Планировщик.ШкалаВремени.Элементы[1].Видимость = ОтображатьШкалуМинут;
			Если ТолькоРабочиеЧасы Тогда
				ОтобразитьТолькоРабочиеЧасы();
			Иначе
				Если НЕ ВремяОтображенияС = '00010101' И НЕ ВремяОтображенияПо = 0 Тогда
					Планировщик.ОтступСНачалаПереносаШкалыВремени = ВремяОтображенияС;
					Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - ВремяОтображенияПо;
				Иначе
					Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
					Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Не Элементы.ФормаСписок.Пометка Тогда
			БазовыйГрафикПриИзмененииНаСервере();
			ОбновитьПланировщикВФоне();
			Элементы.Календарь.Обновить();			
		КонецЕсли;
	
		Если НЕ АвтоОбновление = 0 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработкаРезультатаНастройки()

// Ограничивает диапазон времени шкалы планировщика.
//
&НаКлиенте
Процедура ОтобразитьУказанныйИнтервалВремени()
	
	Если НЕ ВремяОтображенияС = '00010101' И НЕ ВремяОтображенияПо = 0 Тогда
		Планировщик.ОтступСНачалаПереносаШкалыВремени = ВремяОтображенияС;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - ВремяОтображенияПо;
	Иначе
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	КонецЕсли;
	
КонецПроцедуры //ОтобразитьУказанныйИнтервалВремени()

// Отобразить рабочие часы согласно графику.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтобразитьТолькоРабочиеЧасы()
	
	ДатаНачала = Дата("00010102");
	ДатаОкончания = Дата("00010101");
	Если РежимОтображения = "День" Тогда
		
		ГрафикДня = ГрафикРаботы.НайтиСтроки(Новый Структура("Дата",Объект.ДатаКалендаря));
		Для Каждого Строка Из ГрафикДня Цикл
			
			Если Строка.НачалоРабочегоВремени = Строка.КонецРабочегоВремени Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.НачалоРабочегоВремени < ДатаНачала Тогда
				ДатаНачала = Строка.НачалоРабочегоВремени;
			КонецЕсли;
			
			Если Строка.КонецРабочегоВремени > ДатаОкончания Тогда
				ДатаОкончания = Строка.КонецРабочегоВремени;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ (ДатаНачала = Дата("00010102") И ДатаОкончания = Дата("00010101")) Тогда
			Планировщик.ОтступСНачалаПереносаШкалыВремени = (ДатаНачала - '00010101')/3600;
			Планировщик.ОтступСКонцаПереносаШкалыВремени = ('00010102' - ДатаОкончания)/3600;
		КонецЕсли;
		
	ИначеЕсли РежимОтображения = "Неделя" Тогда
		
		Дата = НачалоНедели(Объект.ДатаКалендаря);
		Пока Дата <= КонецНедели(Объект.ДатаКалендаря) Цикл
			
			ГрафикДня = ГрафикРаботы.НайтиСтроки(Новый Структура("Дата",Дата));
			Для Каждого Строка Из ГрафикДня Цикл
				
				Если Строка.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Праздник")
					ИЛИ Строка.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Выходной") Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если Строка.НачалоРабочегоВремени < ДатаНачала Тогда
					ДатаНачала = Строка.НачалоРабочегоВремени;
				КонецЕсли;
				
				Если Строка.КонецРабочегоВремени > ДатаОкончания Тогда
					ДатаОкончания = Строка.КонецРабочегоВремени;
				КонецЕсли;
				
			КонецЦикла;
			Дата = Дата + 24*60*60;
			
		КонецЦикла;
		
		Если НЕ (ДатаНачала = Дата("00010102") И ДатаОкончания = Дата("00010101")) Тогда
			Планировщик.ОтступСНачалаПереносаШкалыВремени = (ДатаНачала - '00010101')/3600;
			Планировщик.ОтступСКонцаПереносаШкалыВремени = ('00010102' - ДатаОкончания)/3600;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОтобразитьТолькоРабочиеЧасы()

// Изменяет интервальные реквизиты документа.
//
// Параметры:
//  Ссылка        - ДокументСсылка - Ссылка на изменяемый документ.
//  ДатаНачала    - Дата - Дата начала события.
//  ДатаОкончания - Дата - Дата окончания события.
//
&НаСервере
Процедура ОбработатьПеремещениеДокумента(Ссылка,ДатаНачала,ДатаОкончания)
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	ДокументОбъект.Дата = ДатаНачала;
	ДокументОбъект.ДатаОперации = ДатаНачала;
	ДокументОбъект.ДатаНачала = ДатаНачала;
	ДокументОбъект.ДатаОкончания = ДатаОкончания;
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось записать документ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + " " + СокрЛП(Ссылка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры //ОбработатьПеремещениеДокумента()

// Изменяет интервальные реквизиты документа.
//
// Параметры:
//  Ссылка        - ДокументСсылка - Ссылка на изменяемый документ.
//  ДатаНачала    - Дата - Дата начала события.
//  ДатаОкончания - Дата - Дата окончания события.
//
&НаСервере
Функция СоздатьСобытие(Тема,ДатаНачала,ДатаОкончания,ОтменаРедактирования)
	
	СтруктураСобытия = Новый Структура();
	
	НовыйДокументОбъект = Документы.Событие.СоздатьДокумент();
	НовыйДокументОбъект.Заполнить(Неопределено);
	НовыйДокументОбъект.ХозОперация = Справочники.ХозОперации.Событие;
	НовыйДокументОбъект.Дата = ДатаНачала;
	НовыйДокументОбъект.Тема = Тема;
	НовыйДокументОбъект.ДатаНачала = ДатаНачала;
	НовыйДокументОбъект.ДатаОкончания = ДатаОкончания;
	НовыйДокументОбъект.Состояние = Перечисления.СостоянияСобытий.Запланировано;
	Попытка
		НовыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СтруктураСобытия.Вставить("ВидДокумента","Событие");
		СтруктураСобытия.Вставить("Событие",НовыйДокументОбъект.Ссылка);
		ОбновитьСобытияПланировщика();
		Возврат СтруктураСобытия;
	Исключение
		ОтменаРедактирования = Истина;
		Возврат СтруктураСобытия;
	КонецПопытки;
	
КонецФункции //СоздатьСобытие()

// Обработчик события, возникающего при выполнении оповещения данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияИзменениеГрафикаНаСервере()
	
	Объект.БазовыйГрафик = Объект.ПользовательКалендаря.ГрафикРаботы;
	Если ЗначениеЗаполнено(Объект.БазовыйГрафик) Тогда
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		ГрафикРаботы.Загрузить(Справочники.ГрафикиРаботы.ПолучитьГрафик(Объект.БазовыйГрафик,НачалоНедели(НачалоМесяца(Объект.ДатаКалендаря)),КонецНедели(КонецМесяца(Объект.ДатаКалендаря)), ВыходныеДни));
	КонецЕсли;
	
КонецПроцедуры //ОбработкаРезультатаОповещенияИзменениеГрафикаНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияИзменениеГрафика(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		ОбработкаРезультатаОповещенияИзменениеГрафикаНаСервере();
		
		УдалитьРаскраскуФона(ОбщегоНазначенияКлиент.ЦветСтиля("ВидПроизводственногоКалендаряНерабочееВремя"),Планировщик);
		РаскраситьПоГрафику();
		Если ТолькоРабочиеЧасы Тогда
			ОтобразитьТолькоРабочиеЧасы();
		Иначе
			ОтобразитьУказанныйИнтервалВремени();
		КонецЕсли;
		Элементы.Календарь.Обновить();
	КонецЕсли;
	
КонецПроцедуры //ОбработкаРезультатаОповещенияИзменениеГрафика()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаСозданияДокументов(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ОбновитьДеревоСобытий();
	Иначе            
		ОбновитьПланировщикВФоне();
	КонецЕсли;
	
КонецПроцедуры //ОбработкаРезультатаСозданияДокументов()

// Обработчик изменяет отображения дерева.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_АвтоОбновление()
	
	Если Обновлено Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_АвтоОбновление");
		Обновлено = Ложь;
		
	КонецЕсли;
	
	// Обновим события
	Обновить(Неопределено);
		
	Если НЕ АвтоОбновление = 0 Тогда
		
		// Производим подключение обработчика события выполняемого с задержкой.
		ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
		
	КонецЕсли;
	
КонецПроцедуры //Подключаемый_АвтоОбновление()

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОбновленияКалендаря(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // Пользователь отменил задание.
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Планировщик = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	//УстановитьНастройкиУчетнойЗаписи(Настройки);
	
	Планировщик.ШкалаВремени.Положение = ?(РасположениеШкалыВремени = "",ПоложениеШкалыВремени.Лево, ПоложениеШкалыВремени[РасположениеШкалыВремени]);
	
	Элементы.ТолькоРабочиеЧасы.Пометка = ТолькоРабочиеЧасы;
	
	Если ИнтервалМинут<>0 Тогда
		Планировщик.ШкалаВремени.Элементы[1].Кратность = ИнтервалМинут;
	Иначе
		ОтображатьШкалуМинут = Ложь;
	КонецЕсли;

	Если РежимОтображения = "День" Тогда 
		ОбновитьПланировщик(Объект.ДатаКалендаря, КонецДня(Объект.ДатаКалендаря));
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = ОтображатьШкалуМинут;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, dd.MM'";
		
		УдалитьРаскраскуФона(ОбщегоНазначенияКлиент.ЦветСтиля("ВидПроизводственногоКалендаряНерабочееВремя"),Планировщик);
		РаскраситьПоГрафику();
		Если ТолькоРабочиеЧасы Тогда
			ОтобразитьТолькоРабочиеЧасы();
		Иначе
			ОтобразитьУказанныйИнтервалВремени();
		КонецЕсли;
		
		СформироватьЗаголовокПериода();
		Элементы.ТолькоРабочиеЧасы.Доступность = Истина;
	ИначеЕсли РежимОтображения = "Неделя" Тогда
		ОбновитьПланировщик(НачалоНедели(Объект.ДатаКалендаря), КонецНедели(Объект.ДатаКалендаря));
		
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = ОтображатьШкалуМинут;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, dd.MM'";
		
		УдалитьРаскраскуФона(ОбщегоНазначенияКлиент.ЦветСтиля("ВидПроизводственногоКалендаряНерабочееВремя"),Планировщик);
		РаскраситьПоГрафику();
		Если ТолькоРабочиеЧасы Тогда
			ОтобразитьТолькоРабочиеЧасы();
		Иначе
			ОтобразитьУказанныйИнтервалВремени();
		КонецЕсли;
		
		СформироватьЗаголовокПериода();
		Элементы.ТолькоРабочиеЧасы.Доступность = Истина; 
	ИначеЕсли РежимОтображения = "Месяц" Тогда
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		
		ОбновитьПланировщик(НачалоНедели(НачалоМесяца(Объект.ДатаКалендаря)), КонецНедели(КонецМесяца(Объект.ДатаКалендаря)));
		
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		
		РаскраситьПоГрафику();
		РаскраситьДниНеВходящиеВМесяц();
		
		СформироватьЗаголовокПериода();
		Элементы.ТолькоРабочиеЧасы.Доступность = Ложь;     
		
	КонецЕсли;
	
	Обновлено = Истина;
		
КонецПроцедуры

// Обработчик события возникающего при открытии напоминания контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Функция  ОткрытьНапоминание(Данные)
	
	Возврат РегистрыСведений.НапоминанияПользователя.СоздатьКлючЗаписи(Данные);
	
КонецФункции //ОткрытьНапоминание()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТолькоРабочиеЧасы");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РежимОтображения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "Месяц";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСобытийСобытие");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСобытийНачалоСобытия");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСобытийОкончаниеСобытия");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСобытийТема");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСобытий.Событие");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Видимость, отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСобытийДатаСобытия");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСобытий.Событие");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость",  Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Видимость
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСобытийТема");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСобытий.Событие");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Процедура производить обновление периода отображения для планировщика.
//
// Параметры:
//  ДатаНачала    - Дата - Дата начала для отображения.
//  ДатаОкончания - Дата - Дата окончания для отображения.
//
&НаКлиенте
Процедура ОбновитьПланировщик(ДатаНачала,ДатаОкончания)
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ДатаНачала, ДатаОкончания);

КонецПроцедуры //ОбновитьПланировщик()

&НаСервере
Функция ОбновитьДеревоСобытий()

	ДеревоСобытий.ТекстЗапроса = Обработки.КалендарьПользователя.ПолучитьТекстЗапросаРасписания(Объект, ЗначениеПоиска);
	
	ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Пользователь", Объект.ПользовательКалендаря); 
	ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоМесяца(Объект.ДатаКалендаря));
	ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецМесяца(Объект.ДатаКалендаря));
	
	Если ЗначениеЗаполнено(ЗначениеПоиска) Тогда
		ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Описание", "%" + ЗначениеПоиска + "%"); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрАвтор) Тогда
		ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Автор", Объект.ФильтрАвтор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрПодразделение) Тогда
		ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Подразделение", Объект.ФильтрПодразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПользовательКалендаря) Тогда       
		ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Менеджер", Объект.ПользовательКалендаря.Сотрудник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрКонтрагент) Тогда
		ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Контрагент", Объект.ФильтрКонтрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрСостояние) Тогда
		ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Состояние", Объект.ФильтрСостояние);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФильтрАвтомобиль) Тогда
		ДеревоСобытий.Параметры.УстановитьЗначениеПараметра("Автомобиль", Объект.ФильтрАвтомобиль);
	КонецЕсли;
		
КонецФункции //ОбновитьСобытияПланировщика()

#КонецОбласти

