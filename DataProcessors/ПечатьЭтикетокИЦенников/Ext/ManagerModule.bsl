#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует незаполненную структуру результатов.
//
// Возвращаемое значение:
//  Структура - струкутра результата.
//
Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаТоваров" , Неопределено);
	Структура.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

// Подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Параметры:
//  СтруктураНастроек - Структура - структура настроек печати.
//  СтруктураШаблона - Структура - структура шаблона.
//  Режим - Строка - режим.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, СтруктураШаблона = Неопределено, Режим = "") Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если СтруктураШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(СтруктураШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, СтруктураШаблона.Шаблон);
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		// Удаление некорректных отборов.
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
				Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
					СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные = Неопределено
		И СтруктураНастроек.Свойство("ТекстЗаменяемойТаблицы")
		И СтруктураНастроек.Свойство("ТекстТаблицыДляЗамены") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
										СтруктураНастроек.ТекстЗаменяемойТаблицы,
										СтруктураНастроек.ТекстТаблицыДляЗамены);
		
	Иначе
		
		Если СтруктураНастроек.Свойство("ТекстВременнойТаблицы") Тогда
			ТекстВременнойТаблицы = СтруктураНастроек.ТекстВременнойТаблицы;
		Иначе
			ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками, "&Таблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШтрихАвтопроверки""", "ИсходныеДанные.ШтрихАвтопроверки");
		
		Если ТаблицаИсходныеДанные.Колонки.Найти("Справка2") = Неопределено Тогда
			ТаблицаИсходныеДанные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);
		
	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция формирует незаполненную структуру результатов.
//
// Возвращаемое значение:
//  Результат - Структура - структура данных для печати.
//
Функция НовыйРезультатДанныеДляПечати() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТоваров" , Неопределено);
	Результат.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

// Настройки печати этикеток и ценников 
//
// Возвращаемое значение:
//  Результат - Структура - структура настроек печати.
//
Функция НовыеНастройкиПечати() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИсходныеДанные", Неопределено); // Таблица с произвольными данными.
	Результат.Вставить("ОбязательныеПоля", Новый Массив);
	Результат.Вставить("СоответствиеШаблоновИСтруктурыШаблонов" , Новый Соответствие);
	Результат.Вставить("ПараметрыДанных", Новый Структура);
	Результат.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	Результат.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Функция сворачивает таблицу значений по реквизиту, имя которого передается вторым параметром.
//
// Параметры:
//  ТаблицаРеквизитыДокументов - ТаблицаЗначений - Исходная таблица.
//  ИмяРеквизита               - Строка          - Реквизит, по которому свернуть таблицу.
// 
// Возвращаемое значение:
//  Таблица - Свернутая таблица по реквизиту.
//
Функция СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, ИмяРеквизита) Экспорт
	
	Таблица = ТаблицаРеквизитыДокументов.Скопировать();
	Таблица.Свернуть(ИмяРеквизита);
	Возврат Таблица;
	
КонецФункции

// Подготавливает данные, необходимые для печати ценников и этикеток.
// 
// Параметры:
// 	НастройкиПечати - Структура
// 	ОписаниеШаблона - Структура
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
Функция ПодготовитьДанныеДляПечати(НастройкиПечати, ОписаниеШаблона = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если ОписаниеШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = НастройкиПечати.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(ОписаниеШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, ОписаниеШаблона.Шаблон);
		ТаблицаИсходныеДанные = НастройкиПечати.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	Результат = НовыйРезультатДанныеДляПечати();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если НастройкиПечати.КомпоновщикНастроек <> Неопределено Тогда
		
		// Удаление некорректных отборов.
		Количество = НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			
			ЭлементОтбора = НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
		СкопироватьЭлементыОтбора(Компоновщик.Настройки.Отбор, НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из НастройкиПечати.ОбязательныеПоля Цикл
		ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из НастройкиПечати.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Для Каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
#Область ПечатьКодовМаркировки
	
	Если НастройкиПечати.Свойство("ПечатьКодовМаркировки") Тогда
		
		ТаблицаРезультата = Новый ТаблицаЗначений;
		ТаблицаРезультата.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"), "Порядок");
		ТаблицаРезультата.Колонки.Добавить("Номенклатура",
			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "Номенклатура");
		ТаблицаРезультата.Колонки.Добавить("Характеристика",
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"), "Номенклатура");
		ТаблицаРезультата.Колонки.Добавить("ХарактеристикиИспользуются",
			Новый ОписаниеТипов("Булево"), "ХарактеристикиИспользуются");
		ТаблицаРезультата.Колонки.Добавить("ЕдиницаИзмерения",
			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "ЕдиницаИзмерения");
		ТаблицаРезультата.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"), "Весовой");
		ТаблицаРезультата.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"), "Количество");
		ТаблицаРезультата.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"), "Штрихкод");
		ТаблицаРезультата.Колонки.Добавить("ДатаПоследнегоИзмененияЦены",
			Новый ОписаниеТипов("Дата"), "ДатаПоследнегоИзмененияЦены");
		ТаблицаРезультата.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число") , "ОстатокНаСкладе");
		ТаблицаРезультата.Колонки.Добавить("НоменклатураТипНоменклатурыШаблонЭтикетки",
			Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"), "НоменклатураТипНоменклатурыШаблонЭтикетки");
		ТаблицаРезультата.Колонки.Добавить("НоменклатураТипНоменклатурыШаблонЦенника",
			Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"), "НоменклатураТипНоменклатурыШаблонЦенника");
		ТаблицаРезультата.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"), "Выбрать");
		ТаблицаРезультата.Колонки.Добавить("НоменклатураНаименованиеПолное", Новый ОписаниеТипов("Строка"));
		
		
		Для Каждого Строка Из НастройкиПечати.ТаблицаКодовМаркировки Цикл
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Выбран = НЕ ЗначениеЗаполнено(Строка.ДатаПечати);
		КонецЦикла;
		Результат.ТаблицаТоваров = ТаблицаРезультата;
		
		Возврат Результат;
		
	КонецЕсли;
	
#КонецОбласти
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ПодготовитьЗапросДляИспользованияТаблицыИсходныеДанные(Запрос, ТаблицаИсходныеДанные);
	
	Результат.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(Знач МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	РежимПечати = "";
	Если ПараметрыПечати.Свойство("РежимПечати") Тогда
		РежимПечати = ПараметрыПечати.РежимПечати;
	КонецЕсли;
	
	ПечатьКодовМаркировки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати, "ЭтоПечатьКодовМаркировки", Ложь);
	
	НастройкиПечати = НовыеНастройкиПечати();
	НастройкиПечати.Вставить("ЭтоПечатьКодовМаркировки", ПечатьКодовМаркировки);
	
	СоответствиеШаблонов = Новый Соответствие;
	
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура");
	
	НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	
	ОбъектДляПечати = ПараметрыПечати.ДанныеПечати[0];
	
	ПечататьЭтикетки = Истина;
	ПечататьЦенники = Истина;
	
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
		
		ПечататьЦенники = КоллекцияПечатныхФорм[0].ИмяМакета = "Ценники";
		ПечататьЭтикетки = КоллекцияПечатныхФорм[0].ИмяМакета = "Этикетки";
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ОбъектДляПечати.ШаблоныЭтикетокИЦенников Цикл
	
		Если
			ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки)
			И ПечататьЭтикетки
			И СтрокаТЧ.ШаблонЭтикетки.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток
		Тогда
			
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
			
		КонецЕсли;
		
		Если
			ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника)
			И ПечататьЦенники
			И СтрокаТЧ.ШаблонЦенника.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток
		Тогда
			
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		
		НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Если
			СтруктураШаблона <> Неопределено
			И ТипЗнч(СтруктураШаблона) = Тип("Структура")
			И СтруктураШаблона.Свойство("ПараметрыШаблона")
		Тогда
			
			Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
				
				НастройкиПечати.ОбязательныеПоля.Добавить(Элемент.Ключ);
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ИсходныеДанные = Обработки
		.ПечатьЭтикетокИЦенников
		.Создать()
		.Товары
		.Выгрузить()
		.СкопироватьКолонки(КолонкиИсходныхДанных());
		
	Для Каждого ЭлементТоварногоСостава Из ОбъектДляПечати.ТоварыныйСостав Цикл
		
		ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), ЭлементТоварногоСостава);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Или ПараметрыПечати.Режим = "ПечатьЦенников" Тогда
			
			СтрокаТЧ.КоличествоЭтикеток = 0;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Или ПараметрыПечати.Режим = "ПечатьЭтикеток" Тогда
			
			СтрокаТЧ.КоличествоЦенников = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиПечати.ПараметрыДанных.Вставить("ТипЦен", ОбъектДляПечати.ТипЦен);
	НастройкиПечати.ПараметрыДанных.Вставить("Организация", ОбъектДляПечати.Организация);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", ОбъектДляПечати.ЦеныПоВидуЦены);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДату", ОбъектДляПечати.ЦеныНаДату);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДатуАкционные", ОбъектДляПечати.ЦеныНаДатуАкционные);
	НастройкиПечати.ПараметрыДанных.Вставить("ТипЦенАкционный", ОбъектДляПечати.ТипЦенАкционные);
	НастройкиПечати.ИсходныеДанные = ИсходныеДанные;
	
	// Вывод табличных документов в коллекцию.
	КоллекцияПечатныхФормВнутренняя = СформироватьПечатныеФормыЭтикетокИЦенников(НастройкиПечати, ПечататьЭтикетки, ПечататьЦенники);
	КоллекцияПечатныхФорм.Очистить();
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФормВнутренняя Цикл

		НоваяФорма = КоллекцияПечатныхФорм.Добавить();
		НоваяФорма.ИмяМакета = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.СинонимМакета = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.ИмяВРЕГ = ВРег(ПечатнаяФорма.ИмяМакета);
		НоваяФорма.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		НоваяФорма.Экземпляров = 1;

	КонецЦикла;

КонецПроцедуры

// Функция получения данных для принтера.
//
// Параметры:
//  Обработка - Массив - параметры печати.
//
// Возвращаемое значение:
//  Данные - ТаблицаЗначений - таблица печатных форм.
//
Функция ПолучитьДанныеДляПринтераЭтикеток(Обработка) Экспорт
	
	РежимПечати = "Ценники,Этикетки";
	
	Если Обработка.Режим = "ПечатьЦенников" Тогда
		РежимПечати = "Ценники";
	ИначеЕсли Обработка.Режим = "ПечатьЭтикеток" Тогда
		РежимПечати = "Этикетки";
	КонецЕсли;
		
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РежимПечати);
	
	Для Каждого Идентификатор Из ИменаМакетов Цикл
		
		ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		
		Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл 
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ВременнаяПечатнаяФорма);
			
			Если ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 1 Тогда
				ПечатнаяФорма.ИмяМакета = Идентификатор;
				ПечатнаяФорма.ИмяВРЕГ = ВРег(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СоответствиеШаблонов = Новый Соответствие;
	НастройкиПечати = НовыеНастройкиПечати();
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура");
	
	НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	ИспользоватьАссортимент = Ложь;
	
	Если ИспользоватьАссортимент Тогда
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка.Магазин, "ФорматМагазина");
		НастройкиПечати.ПараметрыДанных.Вставить("ФорматМагазина", ФорматМагазина);
	КонецЕсли;
	
	ТаблицаШаблонов = Обработка.Товары.Выгрузить(Новый Структура("Выбран", Истина), "ШаблонЭтикетки, ШаблонЦенника");
	
	ПечататьЭтикетки = Истина;
	ПечататьЦенники = Истина;
	
	Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И ПечататьЭтикетки И СтрокаТЧ.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И ПечататьЦенники И СтрокаТЧ.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		Если СтруктураШаблона <> Неопределено
			И ТипЗнч(СтруктураШаблона) = Тип("Структура")
			И СтруктураШаблона.Свойство("ПоляМакета") Тогда
			
			Для Каждого Элемент Из СтруктураШаблона.ПоляМакета Цикл
				НастройкиПечати.ОбязательныеПоля.Добавить(Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИсходныеДанные = Обработка.Товары.Выгрузить(
	Новый Структура("Выбран", Истина),
	КолонкиИсходныхДанных());
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			СтрокаТЧ.КоличествоЭтикеток = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
			СтрокаТЧ.КоличествоЦенников = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Обработка.Режим = "ПечатьЭтикеток" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЦенников");
	КонецЕсли;
	
	Если Обработка.Режим = "ПечатьЦенников" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЭтикеток");
	КонецЕсли;
	
	НастройкиПечати.ПараметрыДанных.Вставить("ТипЦен",     Обработка.ТипЦен);
	НастройкиПечати.ПараметрыДанных.Вставить("ТипЦенАкционный",     Обработка.ТипЦенАкционные);
	
	НастройкиПечати.ПараметрыДанных.Вставить("Склад", Обработка.СкладКомпании);
	НастройкиПечати.ПараметрыДанных.Вставить("Организация", Обработка.Организация);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", Обработка.ЦеныПоВидуЦены);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДату", Обработка.ЦеныНаДату);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДатуАкционный", Обработка.ЦеныНаДатуАкционные);

	НастройкиПечати.ИсходныеДанные = ИсходныеДанные;
	
	Данные = СформироватьПечатныеФормыЭтикетокИЦенников(НастройкиПечати, ПечататьЭтикетки, ПечататьЦенники);
	
	Возврат Данные;
	
КонецФункции

// Функция возвращаем имя параметра штрихкод.
//
// Возвращаемое значение:
//  Строка - "Штрихкод".
//
Функция ИмяПараметраШтрихкод() Экспорт
	
	Возврат "Штрихкод";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Колонки исходных данных
// 
// Возвращаемое значение:
// Строка  - имена колонок, перечисленные через запятую, которые необходимо выгрузить для печати этикеток
//
Функция КолонкиИсходныхДанных()
	
	Результат = Новый Массив;
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("КоличествоЭтикеток");
	Результат.Добавить("КоличествоЦенников");
	Результат.Добавить("ШаблонЭтикетки");
	Результат.Добавить("ШаблонЦенника");
	Результат.Добавить("Организация");
	Результат.Добавить("Штрихкод");
	Результат.Добавить("Цена");
	Результат.Добавить("СуммаНДС");
	Результат.Добавить("СтавкаНДС");
	Результат.Добавить("ПроизвольныйТекст1");
	Результат.Добавить("ПроизвольныйТекст2");
	Результат.Добавить("ПроизвольнаяДата");
	Результат.Добавить("НомерСтроки");
	
	Возврат СтрСоединить(Результат, ",");
	
КонецФункции

// Функция определяет существует ли реквизит у формы.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;

	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрТипЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраТипЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрТипЦены);
	Если ЗначениеПараметраТипЦены <> Неопределено Тогда
		
		ЗначениеПараметраТипЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраТипЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраТипЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

// Функция формирует табличный документ с ценниками и этикетками.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма с ценниками и этикетками.
//
Функция СформироватьПечатныеФормыЭтикетокИЦенников(НастройкиПечати, ПечататьЭтикетки, ПечататьЦенники)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	ЭтоПечатьКодовМаркировки = ПолучитьЗначениеПараметраСтруктуры(НастройкиПечати, "ЭтоПечатьКодовМаркировки", Ложь);
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		Если ПечататьЭтикетки Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Этикетка"+КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикетокДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
		
		Если ПечататьЦенники Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Ценник" + КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЦенниковДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЦенникаДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерКолонки = 0;
		НомерРяда = 0;
		
		ОписаниеШаблона = Новый Структура;
		ОписаниеШаблона.Вставить("Шаблон", ПечатнаяФорма.Шаблон);
		ОписаниеШаблона.Вставить("ИмяКолонкиШаблон", ПечатнаяФорма.ИмяКолонкиШаблон);
		ДанныеДляПечати = ПодготовитьДанныеДляПечати(НастройкиПечати, ОписаниеШаблона);
		
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для Каждого СтрокаТовары Из ДанныеДляПечати.ТаблицаТоваров Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0
				И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				ОписаниеШаблона = НастройкиПечати.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
					
					Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
						ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
					Иначе
						ПечатнаяФорма.ТабличныйДокумент = Новый Структура;
						ПечатнаяФорма.ТабличныйДокумент.Вставить("XML", ОписаниеШаблона.XMLОписаниеМакета);
						ПечатнаяФорма.ТабличныйДокумент.Вставить("Этикетки", Новый Массив);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОписаниеШаблона <> Неопределено 
					И ТипЗнч(ОписаниеШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					
					Область = ОписаниеШаблона.МакетЭтикетки.ПолучитьОбласть(ОписаниеШаблона.ИмяОбластиПечати);
					
					ПроверятьВывод = Ложь;
					
					Для ИндексСтроки = 1 По Область.ВысотаТаблицы Цикл
						
						Если Область.Область("R" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0")).АвтоВысотаСтроки Тогда
							ПроверятьВывод = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Применение настроек табличного документа.
					ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, ОписаниеШаблона.МакетЭтикетки, , "ОбластьПечати");
					
					// Установка параметров печати
					ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Этикетки_и_ценники" + ПечатнаяФорма.ИмяМакета;
					
					Для каждого ПараметрШаблона Из ОписаниеШаблона.ПараметрыШаблона Цикл
						Если ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
							НаименованиеКолонки = ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
							Если НаименованиеКолонки <> Неопределено Тогда
								// служебные поля
								Если НаименованиеКолонки = "ПроизвольнаяДата" Тогда
									Область.Параметры[ПараметрШаблона.Значение] = Формат(СтрокаТовары[НаименованиеКолонки],"ДФ=dd.MM.yyyy");
								Иначе
									Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Рисунок Из Область.Рисунки Цикл
						Если Лев(Рисунок.Имя,8) = ИмяПараметраШтрихкод() Тогда
							
							Если Лев(Рисунок.Имя,8) = ИмяПараметраШтрихкод() Тогда
								ЗначениеШтрихкода = СтрокаТовары[ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ИмяПараметраШтрихкод())];
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
								
								Если ЭтоПечатьКодовМаркировки Тогда
									ЗначениеШтрихкода = СтрЗаменить(ЗначениеШтрихкода, 
										ОбщегоНазначенияБПОКлиентСервер.ЭкранированныйСимволGS1(),
										ОбщегоНазначенияБПОКлиентСервер.РазделительGS1()
									);
									
									// РАРУС +
									ЗначениеШтрихкода = СтрокуВBase64(ЗначениеШтрихкода);
									// РАРУС -
								КонецЕсли;
								ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
								ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
								
								Если ОписаниеШаблона.ТипКода = 16 Тогда
									МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
									ПараметрыШтрихкода.Ширина = МинСторона;
									ПараметрыШтрихкода.Высота = МинСторона;
								КонецЕсли;
								
								Если ОписаниеШаблона.Свойство("УровеньКоррекцииQR") Тогда
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", ОписаниеШаблона.УровеньКоррекцииQR);
								Иначе
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
								КонецЕсли;
								
								ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
								ПараметрыШтрихкода.Вставить("ТипКода",				ОписаниеШаблона.ТипКода);
								
								Если ОписаниеШаблона.Свойство("ОтображатьТекст") Тогда
									ПараметрыШтрихкода.Вставить("ОтображатьТекст",		ОписаниеШаблона.ОтображатьТекст);
								Иначе
									ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);
								КонецЕсли;
								
								Если ОписаниеШаблона.Свойство("РазмерШрифта") Тогда
									ПараметрыШтрихкода.Вставить("РазмерШрифта",			ОписаниеШаблона.РазмерШрифта);
								КонецЕсли;
								
								Если ОписаниеШаблона.Свойство("УголПоворота") Тогда
									ПараметрыШтрихкода.Вставить("УголПоворота", ОписаниеШаблона.УголПоворота);
								КонецЕсли;
								
								Если ЭтоПечатьКодовМаркировки Тогда
									ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 1);
								Иначе
									ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0);
								КонецЕсли;
								
								Картинка = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода).Картинка;
								Если Картинка <> Неопределено Тогда
									Рисунок.Картинка = Картинка;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров.
						
						МассивОбластей = Новый Массив;
						МассивОбластей.Добавить(Область);
						
						НомерКолонки = НомерКолонки + 1;
						
						Если ПроверятьВывод Тогда
							
							Если НомерКолонки = 1 Тогда
								Если Не ВременныйТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
									ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
									НомерРяда = 0;
									ВременныйТабличныйДокумент.Очистить();
								КонецЕсли;
							Иначе
								Если Не ВременныйТабличныйДокумент.ПроверитьПрисоединение(МассивОбластей) Тогда
									ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
									НомерРяда    = 0;
									ВременныйТабличныйДокумент.Очистить();
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						Если НомерКолонки = 1 Тогда
							
							НомерРяда = НомерРяда + 1;
							
							ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							ВременныйТабличныйДокумент.Вывести(Область);
							
						Иначе
							
							ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
							ВременныйТабличныйДокумент.Присоединить(Область);
							
						КонецЕсли;
						
						Если НомерКолонки = ОписаниеШаблона.КоличествоПоГоризонтали И НомерРяда = ОписаниеШаблона.КоличествоПоВертикали Тогда
							
							НомерРяда    = 0;
							НомерКолонки = 0;
							
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							ВременныйТабличныйДокумент.Очистить();
							
						ИначеЕсли НомерКолонки = ОписаниеШаблона.КоличествоПоГоризонтали Тогда
							
							НомерКолонки = 0;
							
						КонецЕсли;
						
					КонецЦикла; // Цикл по количеству экземпляров.
					
				КонецЕсли;
				
				Если ОписаниеШаблона <> Неопределено 
					И ТипЗнч(ОписаниеШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					Поля = Новый Массив;
					Для Каждого ТекПоле Из ОписаниеШаблона.ПоляМакета Цикл			
						Если ТекПоле.ТипЗаполнения = "Parameter" Тогда							
							НовоеПоле = Новый Структура;
							НовоеПоле.Вставить("ИмяПоля", ТекПоле.Наименование);							
							Попытка
								Значение = СтрокаТовары[ТекПоле.Значение];
							Исключение
								Значение = "";
							КонецПопытки;
							Если Значение = "" Тогда
								Попытка
									ИмяКолонки = ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ТекПоле.Значение);
									Значение = СтрокаТовары[ИмяКолонки];
								Исключение
									Значение = "";
								КонецПопытки;
							КонецЕсли;
							Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда								
								Значение = Значение.Получить();								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;								
							ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
								
								Если Значение.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе") Тогда
									АдресХранилища = РаботаСФайлами.ДанныеФайла(Значение).СсылкаНаДвоичныеДанныеФайла;
									Значение = ПолучитьИзВременногоХранилища(АдресХранилища);
								КонецЕсли;
								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;
								
							КонецЕсли;							
							Если ЗначениеЗаполнено(Значение) Тогда
								НовоеПоле.Вставить("Значение", Значение);
							Иначе								
								Если ЗначениеЗаполнено(ТекПоле.ЗначениеПоУмолчанию) Тогда						
									НовоеПоле.Вставить("Значение", ТекПоле.ЗначениеПоУмолчанию);
								Иначе
									НовоеПоле.Вставить("Значение", "");
								КонецЕсли;								
							КонецЕсли;
							
							Поля.Добавить(НовоеПоле);
														
						КонецЕсли;
						
					КонецЦикла;
					НоваяЭтикетка = Новый Структура;
					НоваяЭтикетка.Вставить("Количество", СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество]);
					НоваяЭтикетка.Вставить("ЗначенияПолей", Поля);
					ПечатнаяФорма.ТабличныйДокумент.Этикетки.Добавить(НоваяЭтикетка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров.
		
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ПечатнаяФорма);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПечатнаяФорма Из МассивСтрокДляУдаления Цикл
		КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
	КонецЦикла;
	
	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов)
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		
		Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
		
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Заменяет текст вложенного запроса в скобках `(ВЫБРАТЬ...) КАК ИсходныеДанные` именем параметра "&Таблица" 
// 
// Параметры:
// 	Запрос - запрос, текст которого преобразуется
// 	ТаблицаИсходныеДанные - таблица с исходными данными
Процедура ПодготовитьЗапросДляИспользованияТаблицыИсходныеДанные(Запрос, ТаблицаИсходныеДанные)

	Если ТаблицаИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТаблицаИсходныеДанные.Колонки.Добавить("ПроизвольныйТекст1", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
		ТаблицаИсходныеДанные.Колонки.Добавить("ПроизвольныйТекст2", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
		ТаблицаИсходныеДанные.Колонки.Добавить("ПроизвольнаяДата", Новый ОписаниеТипов("Дата"));
		ТаблицаИсходныеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Исключение
	КонецПопытки;
	
	НачПозиция = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
	Если НачПозиция = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонПозиция = СтрНайти(Запрос.Текст, ") КАК ИсходныеДанные");
	Если КонПозиция = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон("%1&Таблица%2",
		Сред(Запрос.Текст, 1, НачПозиция - 1),
		Сред(Запрос.Текст, КонПозиция + 1));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """Цена""", "ИсходныеДанные.Цена");
	// kraviv
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """СтавкаНДС""", "ИсходныеДанные.СтавкаНДС");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """СуммаНДС""", "ИсходныеДанные.СуммаНДС");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ПроизвольныйТекст1""", "ИсходныеДанные.ПроизвольныйТекст1");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ПроизвольныйТекст2""", "ИсходныеДанные.ПроизвольныйТекст2");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ПроизвольнаяДата""", "ИсходныеДанные.ПроизвольнаяДата");

	//Запрос.Текст = СтрЗаменить(Запрос.Текст, """ЦенаДополнительно""", "ИсходныеДанные.ЦенаДополнительно");
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦены""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦены");
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦеныДополнительно""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦеныДополнительно");
	
	
	Если ТаблицаИсходныеДанные.Колонки.Найти("Штрихкод") = Неопределено Тогда
		ТаблицаИсходныеДанные.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);
	
КонецПроцедуры

// Функция возвращает пустую структуру настроек
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Структура - структура настроек.
Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные",                         Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоля",                       Новый Массив);
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов", Новый Соответствие);
	СтруктураНастроек.Вставить("ПараметрыДанных"    ,                    Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек",                    Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных",         Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

#Область ИнтеграцияПечатиЭтикетокИЦенников

Процедура СкопироватьЭлементыОтбора(ПриемникЗначения,
		ИсточникЗначения,
		ПроверятьДоступность = Ложь,
		ОчищатьПриемник = Истина)
	
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции.
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементыОтбора(ЭлементПриемник, ЭлементИсточник);
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//	Элементы - поля СКД
//	ПолноеИмя - полное имя поля СКД.
//	Кэш - Соответствие, Неопределено - (необязательное). кэш соответствия полных имен и полей СКД.
//
// Возвращаемое значение:
//	Поле - поле СКД
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено)
	
	Если Кэш <> Неопределено Тогда
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЕсли;
	
	МассивЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		ТекущееИмя = ТекущееИмя +"." + МассивЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено)
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает полное имя поля по частям.
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	МассивЧастей = Новый Массив;
	ИмяДляОбработки = ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = Найти(ИмяДляОбработки, "]");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
			КонецЕсли;
			
		Иначе
			
			Позиция = Найти(ИмяДляОбработки, ".");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//	Элементы - поля СКД
//	Имя - имя поля СКД
//	Кэш - Соответствие, Неопределено - (необязательное). кэш соответствия имен и полей СКД.
//
// Возвращаемое значение:
//	Поле - поле СКД
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено)
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// РАРУС +
Функция СтрокуВBase64(Строка)
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Строка);
	СтрокаBase64 = Base64Строка(ДвоичныеДанные);
	
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	
	Возврат СтрокаBase64;
	
КонецФункции
// РАРУС -

#КонецОбласти

#КонецЕсли
