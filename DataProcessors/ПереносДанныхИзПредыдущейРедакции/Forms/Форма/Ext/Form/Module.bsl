///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Перенос данных из предыдущей редакции"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Имя файла выгрузки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Отказываемся от стандартной обработки действия.
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Создаем объект диалога выбора файла
	ДиалогВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыборФайла.Заголовок               = НСтр("ru = 'Выберите каталог с файлами данных'");
	ДиалогВыборФайла.Каталог                 = Объект.КаталогСФайлами;
	ДиалогВыборФайла.ПредварительныйПросмотр = ЛОЖЬ;
	
	// Производим открытие диалога и обработку события выбора.
	ПараметрыОповещения = Новый Структура("ДиалогВыборФайла", ДиалогВыборФайла);
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ИмяФайлаВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыборФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыборФайла = ДополнительныеПараметры.ДиалогВыборФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогСФайлами = ДиалогВыборФайла.Каталог;
	КонецЕсли;

КонецПроцедуры //ИмяФайлаВыгрузкиНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Выполнить загрузку".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	Если НЕ ВыполнитьЗагрузкуНаСервере() Тогда
		Возврат
	КонецЕсли;
	
	Закрыть(Истина);
	
КонецПроцедуры //ВыполнитьЗагрузку()

// Обработчик события нажатия кнопки "Выполнить загрузку" в контексте сервера.
//
&НаСервере
Функция ВыполнитьЗагрузкуНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогСФайлами) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнено имя каталога с файлами'"));
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	// Заполним предопределенные доп реквизиты и сведения из макета.
	ТехнологическаяПлатформаВызовСервера.ОбновитьПредопределенныеДопРеквизитыИСвойства();
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.Робот;
	
	Чтение = Новый ЧтениеXML;
	
	МассивИменФайлов = Новый Массив();
	Для каждого Файл Из НайтиФайлы(Объект.КаталогСФайлами,"*.xml") Цикл
		МассивИменФайлов.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	Если МассивИменФайлов.Количество()=0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'По указанному пути не найдены файлы загрузки'"));
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	УправлениеПорядкомОбработкиФайлов(МассивИменФайлов);
	
	Для Каждого ИмяФайла Из МассивИменФайлов Цикл
		Чтение.ОткрытьФайл(ИмяФайла);
		Пока Чтение.Прочитать() Цикл
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Чтение.Имя = "Объекты" Тогда
					ПрочитатьОбъекты(Чтение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Обработаем изменения 
	ОбработатьИзменения();
	
	// Для текущего пользователя установим роль администратор системы.
	ПользователиИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ПользователиИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
	ПользователиИБ.Записать();
	
	Константы.НомерРелизаКонфигурации.Установить("");
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Загрузка данных завершена'"));
	
	Возврат ИСТИНА;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеПорядкомОбработкиФайлов(МассивИменФайлов)
	
	// Первыми должны загрузиться ПВХ Свойства объектов.
	Для Каждого Элемент Из МассивИменФайлов Цикл
		
		Если СтрНайти(Элемент, "ПланВидовХарактеристик_СвойстваОбъектов") <> 0 Тогда
			
			МассивИменФайлов.Удалить(МассивИменФайлов.Найти(Элемент));
			МассивИменФайлов.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Следом загрузим ПВХ назначение свойств.
	Для Каждого Элемент Из МассивИменФайлов Цикл
		
		Если СтрНайти(Элемент, "ПланВидовХарактеристик_НазначенияСвойствОбъектов") <> 0 Тогда
			
			МассивИменФайлов.Удалить(МассивИменФайлов.Найти(Элемент));
			МассивИменФайлов.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// После них загрузим из регистра значения свойств объектов.
	Для Каждого Элемент Из МассивИменФайлов Цикл
		
		Если СтрНайти(Элемент, "РегистрСведений_ЗначенияСвойствОбъектов") <> 0 Тогда
			
			МассивИменФайлов.Удалить(МассивИменФайлов.Найти(Элемент));
			МассивИменФайлов.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //УправлениеПорядкомОбработкиФайлов()

#Область ОбработчикиИзмененийВыполняемыйПриЗагрузкеДанныхИзФайлов

&НаСервере
Процедура ПрочитатьОбъекты(Чтение)
	
	Чтение.Прочитать();
	
	Пока НЕ (Чтение.ТипУзла=ТипУзлаXML.КонецЭлемента И Чтение.Имя="Объекты") Цикл
		ДанныеОбъекта = СериализаторXDTO.ПрочитатьXML(Чтение);
		
		Если ТипЗнч(ДанныеОбъекта) = Тип("Структура") Тогда
			
			Если ДанныеОбъекта.ВидОбъекта = "Константа" Тогда
				ОбработатьКонстанту(ДанныеОбъекта);
			ИначеЕсли ДанныеОбъекта.ВидОбъекта = "Подчиненный" Тогда
				ОбработатьПодчиненныйОбъект(ДанныеОбъекта);
			ИначеЕсли ДанныеОбъекта.ВидОбъекта = "Независимый" Тогда
				ОбработатьНезависимыйОбъект(ДанныеОбъекта);
			Иначе
				ОбработатьСсылочныйОбъект(ДанныеОбъекта);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПрочитатьОбъекты()

&НаСервере
Функция ЗаписатьОбъект(Объект, ИмяМенеджера = Неопределено)
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", ИСТИНА);
	Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", ИСТИНА);
	
	Если НЕ ИмяМенеджера = Неопределено И НЕ ЛЕВ(ИмяМенеджера, 10)="ПланОбмена" Тогда
		Объект.ОбменДанными.Загрузка = ИСТИНА;
	КонецЕсли;
	
	Попытка
		Объект.Записать();
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При записи объекта'")+ " " 
																+ Объект + " " + НСтр("ru = 'возникла ошибка:'") + " " + ПодробноеПредставлениеОшибки(Инфо));
	КонецПопытки;
	
КонецФункции // ЗаписатьОбъект()

&НаСервере
Процедура ОбработатьПодчиненныйОбъект(ДанныеОбъекта)
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеОбъекта.ИмяМенеджера);
	
	Если МенеджерРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	//@skip-check unknown-method-property
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	//@skip-check unknown-method-property
	НаборЗаписей.Отбор.Регистратор.Значение = ДанныеОбъекта.КлючТекущегоОбъекта;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = ЛОЖЬ;
	
	Записи = НаборЗаписей.Выгрузить();
	Для Каждого ЭлементДанных Из ДанныеОбъекта.НаборДанных Цикл 
		Строка = Записи.Найти(ЭлементДанных.НомерСтроки,"НомерСтроки");
		Если НЕ Строка = Неопределено Тогда
			ОбработатьОбъект(Строка, ЭлементДанных);
			Модифицированность = ИСТИНА;
		КонецЕсли;
	КонецЦикла;
	
	Если Модифицированность Тогда
		НаборЗаписей.Загрузить(Записи);
		ЗаписатьОбъект(НаборЗаписей, ДанныеОбъекта.ИмяМенеджера);
	КонецЕсли;
	
КонецПроцедуры //ОбработатьПодчиненныйОбъект()

&НаСервере
Процедура ОбработатьНезависимыйОбъект(ДанныеОбъекта)
	
	Если ДанныеОбъекта.ИмяМенеджера = "РегистрСведений.РасширениеПравДоступа" Тогда
		ОбработатьРасширениеПравДоступа(ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "РегистрСведений.ЗначенияСвойствОбъектов" Тогда
		
		ОбработатьСвойстваОбъекта(ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "РегистрСведений.УтверждениеДокументов" Тогда
		
		ОбработатьУтверждениеДокументов(ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "РегистрСведений.НакоплениеСумм" Тогда
		
		ОбработатьНакоплениеСумм(ДанныеОбъекта);
		
	Иначе
		
		МенеджерОбъектаПереноса = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеОбъекта.ИмяМенеджера);
		Если МенеджерОбъектаПереноса=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МенеджерЗаписи = МенеджерОбъектаПереноса.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеОбъекта.КлючТекущегоОбъекта);
		
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			ОбработатьОбъект(МенеджерЗаписи, ДанныеОбъекта);
		КонецЕсли;
		
		Если МенеджерЗаписи.Модифицированность() Тогда
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьНезависимыйОбъект()

&НаСервере
Процедура ОбработатьСсылочныйОбъект(ДанныеОбъекта)
	
	Если ДанныеОбъекта.ИмяМенеджера = "ПланВидовХарактеристик.СвойстваОбъектов" Тогда
		
		ОбработатьСвойстваОбъекта(ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "ПланВидовХарактеристик.НазначенияСвойствОбъектов" Тогда
		
		ОбработатьСвойстваОбъекта(ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "ПланВидовХарактеристик.ПраваИНастройки" Тогда
		
		ОбработатьИзменениеПрав(ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "Справочник.ЗначенияСвойств" Тогда
		
		ОбработатьСвойстваОбъекта(ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "Справочник.КлассификаторСтранМира" Тогда
		
		ОбработатьСтраныМира(Неопределено,ДанныеОбъекта);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "Справочник.ПодключаемоеОборудование" Тогда
		
		ОбработатьОборудование(Неопределено, ДанныеОбъекта);
		
	Иначе
		
		ОбъектПереноса = ДанныеОбъекта.КлючТекущегоОбъекта.ПолучитьОбъект();
		
		Если НЕ ОбъектПереноса = Неопределено Тогда
			
			ОбработатьОбъект(ОбъектПереноса, ДанныеОбъекта);
			
			Если ОбъектПереноса.Модифицированность() Тогда
				ЗаписатьОбъект(ОбъектПереноса, ДанныеОбъекта.ИмяМенеджера);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //ОбработатьСсылочныйОбъект()

&НаСервере
Процедура ОбработатьКонстанту(ДанныеОбъекта)
	
	Если ДанныеОбъекта.ИмяМенеджера = "Константа.СпособВеденияБаланса" Тогда
		НоваяСтрока = УчетныеПолитики.Добавить();
		НоваяСтрока.Период = ТекущаяДатаСеанса();
		НоваяСтрока.Значение = ДанныеОбъекта.УчетнаяПолитика.СпособВеденияБаланса;
		НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СпособВеденияБаланса;
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "Константа.СтратегияСписанияПартийТоваровПоДатам" Тогда
		ВыборкаОрганизаций = Справочники.Организации.Выбрать();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			НоваяСтрока = УчетныеПолитики.Добавить();
			НоваяСтрока.Период = ТекущаяДатаСеанса();
			НоваяСтрока.Значение = ДанныеОбъекта.УчетнаяПолитика.СтратегияСписанияПартийТоваровПоДатам;
			НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СтратегияСписанияПартийТоваровПоДатам;
			НоваяСтрока.Объект = ВыборкаОрганизаций.Ссылка;
		КонецЦикла;
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "Константа.СтратегияСписанияПартийТоваровПоСтатусам" Тогда
		ВыборкаОрганизаций = Справочники.Организации.Выбрать();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			НоваяСтрока = УчетныеПолитики.Добавить();
			НоваяСтрока.Объект = ВыборкаОрганизаций.Ссылка;
			НоваяСтрока.Период = ТекущаяДатаСеанса();
			НоваяСтрока.Значение = ДанныеОбъекта.УчетнаяПолитика.СтратегияСписанияПартийТоваровПоСтатусам;
			НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СтратегияСписанияПартийТоваровПоСтатусам;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры //ОбработатьКонстанту()

&НаСервере
Процедура ОбработатьРасширениеПравДоступа(ДанныеОбъекта)
	
	НаборЗаписей = РегистрыСведений.ПраваИНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПользовательПрофиль.Установить(ДанныеОбъекта.ОбщиеРеквизиты.Пользователь, ИСТИНА);
	НаборЗаписей.Отбор.ПравоНастройка     .Установить(ДанныеОбъекта.ОбщиеРеквизиты.Право, ИСТИНА);
	НаборЗаписей.Отбор.Объект             .Установить(ДанныеОбъекта.ОбщиеРеквизиты.Объект, ИСТИНА);
	
	МенеджерЗаписи = НаборЗаписей.Добавить();
	МенеджерЗаписи.ПользовательПрофиль = ДанныеОбъекта.ОбщиеРеквизиты.Пользователь;
	МенеджерЗаписи.ПравоНастройка = ДанныеОбъекта.ОбщиеРеквизиты.Право;
	МенеджерЗаписи.Объект = ДанныеОбъекта.ОбщиеРеквизиты.Объект;
	МенеджерЗаписи.Значение = ДанныеОбъекта.ОбщиеРеквизиты.Значение;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", ИСТИНА);
	НаборЗаписей.Записать();
	
КонецПроцедуры //ОбработатьРасширениеПравДоступа()

&НаСервере
Процедура ОбработатьОбъект(ОбъектПереноса, ДанныеОбъекта)
	
	ОбработатьРеквизитыОбъекта(ОбъектПереноса, ДанныеОбъекта);
	
	ОбработатьКонтактнуюИнформациюОбъекта(ОбъектПереноса, ДанныеОбъекта);
	
	ОбработатьСтраныМира(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьДействияНаЗначимыеСобытия(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьЗначимыеСобытия(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьРассылку(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьСобытия(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьДоговорыВзаиморасчетов(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьКонтактныеЛицаКонтрагентов(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьУчетнуюПолитику(ОбъектПереноса,ДанныеОбъекта);
	
	ОбработатьПланыОбмена(ОбъектПереноса, ДанныеОбъекта);
	
	ОбработатьОборудование(ОбъектПереноса, ДанныеОбъекта);
	
	ОбработатьКорректировкуЗаказаПокупателя(ОбъектПереноса, ДанныеОбъекта);
	
	ОбработатьПересортицуТоваров(ОбъектПереноса, ДанныеОбъекта);
	
	ОбработатьИзменениеЦен(ОбъектПереноса, ДанныеОбъекта);
	
	ОбработатьДополнительныеСвойстваОбъекта(ОбъектПереноса,ДанныеОбъекта);
	
КонецПроцедуры //ОбработатьОбъект()

&НаСервере
Процедура ОбработатьРеквизитыОбъекта(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("ОбщиеРеквизиты") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеОбъекта.ОбщиеРеквизиты Цикл
		Если НЕ ОбъектПереноса[Реквизит.Ключ] = Реквизит.Значение Тогда
			ОбъектПереноса[Реквизит.Ключ] = Реквизит.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОбработатьРеквизитыОбъекта()

&НаСервере
Процедура ОбработатьПланыОбмена(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("УдаленныеПодразделения") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПереноса.РежимПроведенияПоПартиям = ДанныеОбъекта.УдаленныеПодразделения.РежимПроведенияПоПартиям;
	ОбъектПереноса.Код = ДанныеОбъекта.УдаленныеПодразделения.Префикс;
	Для каждого Строка Из ДанныеОбъекта.УдаленныеПодразделения.СтруктураПодразделений Цикл
		НоваяСтрока = ОбъектПереноса.Подразделения.Добавить();
		НоваяСтрока.ПодразделениеКомпании = Строка;
	КонецЦикла;
	
КонецПроцедуры //ОбработатьПланыОбмена()

&НаСервере
Процедура ОбработатьСвойстваОбъекта(ДанныеОбъекта)
	
	СвойстваОбъекта = ДанныеОбъекта.СвойстваОбъектов;
	
	Если ДанныеОбъекта.ИмяМенеджера = "ПланВидовХарактеристик.СвойстваОбъектов" Тогда
		
		Если ЗначениеЗаполнено(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойстваОбъекта.Наименование)) Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектПереноса = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		ОбъектПереноса.ЭтоДополнительноеСведение = Истина;
		ОбъектПереноса.Наименование = СвойстваОбъекта.Наименование;
		ОбъектПереноса.Заголовок = СвойстваОбъекта.Наименование;
		
		МассивТипов = Новый Массив;
		Если НЕ Метаданные.НайтиПоПолномуИмени(СтрЗаменить(СвойстваОбъекта.Тип,"Ссылка.",".")) = Неопределено ИЛИ СвойстваОбъекта.Тип = "Булево" ИЛИ СвойстваОбъекта.Тип = "Дата" Тогда
			МассивТипов.Добавить(Тип(СвойстваОбъекта.Тип));
			ОбъектПереноса.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли СвойстваОбъекта.Тип = "Строка" Тогда
			КвалификаторСтроки = Новый КвалификаторыСтроки(1000);
			ОбъектПереноса.ТипЗначения = Новый ОписаниеТипов(СвойстваОбъекта.Тип,,,,КвалификаторСтроки);
		ИначеЕсли СвойстваОбъекта.Тип = "Число" Тогда
			КвалификаторЧисла =  Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой);
			ОбъектПереноса.ТипЗначения = Новый ОписаниеТипов(СвойстваОбъекта.Тип,,, КвалификаторЧисла);
		Иначе
			Возврат;
		КонецЕсли;
		ЗаписатьОбъект(ОбъектПереноса, ДанныеОбъекта.ИмяМенеджера);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "Справочник.ЗначенияСвойств" Тогда
		
		Если ЗначениеЗаполнено(Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(СвойстваОбъекта.Наименование)) Тогда
			Возврат;
		КонецЕсли;
		
		Владелец = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойстваОбъекта.Владелец);
		
		ОбъектПереноса = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		ОбъектПереноса.Наименование = СвойстваОбъекта.Наименование;
		ОбъектПереноса.Владелец = Владелец;
		ЗаписатьОбъект(ОбъектПереноса, ДанныеОбъекта.ИмяМенеджера);
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "ПланВидовХарактеристик.НазначенияСвойствОбъектов" Тогда
		
		Если СвойстваОбъекта.Родитель = "ДОКУМЕНТЫ" Тогда
			Принадлежность = "документа";
			НаименованиеОбъекта =  "Доп. свойства "+ Принадлежность+" """+ СвойстваОбъекта.Наименование +"""";
		ИначеЕсли СвойстваОбъекта.Родитель = "СПРАВОЧНИКИ" Тогда
			Принадлежность = "справочника";
			НаименованиеОбъекта =  "Доп. свойства "+ Принадлежность+" """+ СвойстваОбъекта.Наименование +"""";
		ИначеЕсли СвойстваОбъекта.Родитель = "ХАРАКТЕРИСТИКИ" Тогда
			
			Если НЕ ЗначениеЗаполнено(СвойстваОбъекта.Объект) Тогда
				Возврат;
			КонецЕсли;
			
			НаименованиеОбъекта = "" + СвойстваОбъекта.Объект + " " + НСтр("ru = '(для характеристик)'");
			
		КонецЕсли;
			
		СсылкаОбъектаПереноса = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию(НаименованиеОбъекта);
		
		Если НЕ ЗначениеЗаполнено(СсылкаОбъектаПереноса) Тогда
			ОбъектПереноса = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
			ОбъектПереноса.Наименование = НаименованиеОбъекта;
			Если СвойстваОбъекта.Родитель = "ХАРАКТЕРИСТИКИ" Тогда
				ОбъектПереноса.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры;
			КонецЕсли;
		Иначе
			ОбъектПереноса = СсылкаОбъектаПереноса.ПолучитьОбъект();
		КонецЕсли;
		
		Для Каждого ВидСвойств Из СвойстваОбъекта.ВидыСвойств Цикл
			
			ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ВидСвойств.Наименование);
			Если НЕ ЗначениеЗаполнено(ТекСвойство) Тогда
				МассивТипов = Новый Массив;
				Для каждого Строка Из ВидСвойств.Типы Цикл
					Если НЕ Метаданные.НайтиПоПолномуИмени(СтрЗаменить(Строка,"Ссылка.",".")) = Неопределено ИЛИ Строка = "Строка" ИЛИ Строка = "Число" ИЛИ Строка = "Булево" ИЛИ Строка = "Дата" Тогда
						МассивТипов.Добавить(Тип(Строка));
					КонецЕсли;
				КонецЦикла;
				
				Если МассивТипов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйЭлемент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
				НовыйЭлемент.Наименование = ВидСвойств.Наименование;
				НовыйЭлемент.Заголовок = ВидСвойств.Наименование;
				
				НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				ЗаписатьОбъект(НовыйЭлемент, ДанныеОбъекта.ИмяМенеджера);
				ТекСвойство = НовыйЭлемент.Ссылка;
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ТекСвойство) Тогда
				Если ТекСвойство.ЭтоДополнительноеСведение Тогда
					ТекСтрока = ОбъектПереноса.ДополнительныеСведения.Найти(ТекСвойство,"Свойство");
					Если ТекСтрока = Неопределено Тогда
						ТекСтрока = ОбъектПереноса.ДополнительныеСведения.Добавить();
					КонецЕсли;
				Иначе
					ТекСтрока = ОбъектПереноса.ДополнительныеРеквизиты.Найти(ТекСвойство,"Свойство");
					Если ТекСтрока = Неопределено Тогда
						ТекСтрока = ОбъектПереноса.ДополнительныеРеквизиты.Добавить();
					КонецЕсли;
				КонецЕсли;
				ТекСтрока.Свойство = ТекСвойство;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписатьОбъект(ОбъектПереноса, ДанныеОбъекта.ИмяМенеджера);
		
		Если СвойстваОбъекта.Родитель = "ХАРАКТЕРИСТИКИ" Тогда
			ТипНоменклатуры = СвойстваОбъекта.Объект.ПолучитьОбъект();
			ТипНоменклатуры.НаборСвойствХарактеристик = ОбъектПереноса.Ссылка;
			ЗаписатьОбъект(ТипНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли ДанныеОбъекта.ИмяМенеджера = "РегистрСведений.ЗначенияСвойствОбъектов" Тогда
		
		ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ДанныеОбъекта.СвойстваОбъектов.Свойство);
		
		Если ЗначениеЗаполнено(ТекСвойство) Тогда
			
			Значение = СвойстваОбъекта.Значение;
			Если ТекСвойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				ЗначенияСвойствОбъектов = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(СвойстваОбъекта.Значение);
				Если ЗначениеЗаполнено(ЗначенияСвойствОбъектов) Тогда
					Значение = ЗначенияСвойствОбъектов;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСвойство.ЭтоДополнительноеСведение Тогда
				
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект  .Установить(СвойстваОбъекта.Объект, ИСТИНА);
				НаборЗаписей.Отбор.Свойство.Установить(ТекСвойство, ИСТИНА);
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Объект   = СвойстваОбъекта.Объект;
				НоваяЗапись.Свойство = ТекСвойство;
				НоваяЗапись.Значение = Значение;
				
				Попытка
					Если ЗначениеЗаполнено(НоваяЗапись.Объект) И ЗначениеЗаполнено(НоваяЗапись.Свойство) Тогда
						НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", ИСТИНА);
						НаборЗаписей.Записать(ИСТИНА);
					КонецЕсли;
				Исключение
					Инфо = ИнформацияОбОшибке();
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось записать значение дополнительного свойства'") 
						+ " " + ТекСвойство + " " + "объекта" + " " + СвойстваОбъекта.Объект);
				КонецПопытки;
				
			ИначеЕсли НЕ ТипЗнч(СвойстваОбъекта.Объект) = Тип("Строка") Тогда
				
				ОбъектЗаписи = СвойстваОбъекта.Объект.ПолучитьОбъект();
				Если ОбъектЗаписи=Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				НайденныйРеквизит = ОбъектЗаписи.ДополнительныеРеквизиты.Найти(ТекСвойство,"Свойство");
				Если НайденныйРеквизит = Неопределено Тогда
					НоваяСтрока = ОбъектЗаписи.ДополнительныеРеквизиты.Добавить();
					НоваяСтрока.Свойство = ТекСвойство;
					НоваяСтрока.Значение = Значение;
				Иначе
					НайденныйРеквизит.Значение = Значение;
				КонецЕсли;
				ЗаписатьОбъект(ОбъектЗаписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьСвойстваОбъекта()

&НаСервере
Процедура ОбработатьИзменениеПрав(ДанныеОбъекта)
	
	Если ДанныеОбъекта.ИмяМенеджера = "ПланВидовХарактеристик.ПраваИНастройки" Тогда
		
		Если ДанныеОбъекта.Свойство("Префиксация") Тогда
			
			НоваяЗапись = ПрефиксацияОбъектов.Добавить();
			НоваяЗапись.Объект = ДанныеОбъекта.Префиксация.Наименование;
			НоваяЗапись.Шаблон = ДанныеОбъекта.Префиксация.Значение;
			НоваяЗапись.ПоУмолчанию = ДанныеОбъекта.Префиксация.ЗначениеПоУмолчанию;
			
		ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Свойство("ЗначениеПоПодразделениям") Тогда
			
			// Перенесем права Подразделения в реквизиты справочника Подразделения компании и в учетные политики.
			Для Каждого Строка Из ДанныеОбъекта.ЗначенияПрав.ЗначениеПоПодразделениям Цикл
				
				Если ДанныеОбъекта.ЗначенияПрав.Код = "42007" Тогда
					НоваяСтрока = УчетныеПолитики.Добавить();
					НоваяСтрока.Период =ТекущаяДатаСеанса();
					НоваяСтрока.Объект = Строка.Подразделение;
					НоваяСтрока.Значение = Строка.Значение;
					НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрыватьНераспределенныеЗаказыПокупателей;
					Продолжить;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "43014" Тогда
					НоваяСтрока = УчетныеПолитики.Добавить();
					НоваяСтрока.Период =ТекущаяДатаСеанса();
					НоваяСтрока.Объект = Строка.Подразделение;
					НоваяСтрока.Значение = Строка.Значение;
					НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрытиеЗаказовПоПодразделению;
					Продолжить;
				КонецЕсли;
				
				ПодразделениеОбъект = Строка.Подразделение.ПолучитьОбъект();
				Если ДанныеОбъекта.ЗначенияПрав.Код = "43009" Тогда
					ПодразделениеОбъект.ОсновнойИнкассатор = Строка.Значение;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "43010" Тогда
					ПодразделениеОбъект.ОсновнаяПлатежнаяСистема = Строка.Значение;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "43007" Тогда
					ПодразделениеОбъект.СрокПоставкиПокупателюПоУмолчанию = Строка.Значение;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "30403" Тогда
					ПодразделениеОбъект.ОсновнаяВалютаВзаиморасчетов  = Строка.Значение;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41487" Тогда
					ПодразделениеОбъект.АвтоматическоеШтрихкодированиеДокументов = Строка.Значение;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41108" Тогда
					ПодразделениеОбъект.ОсновнойПроект = Строка.Значение;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "30801" ИЛИ ДанныеОбъекта.ЗначенияПрав.Код = "30802" ИЛИ  ДанныеОбъекта.ЗначенияПрав.Код = "30803" 
					ИЛИ ДанныеОбъекта.ЗначенияПрав.Код = "30804" ИЛИ ДанныеОбъекта.ЗначенияПрав.Код = "30806" ИЛИ ДанныеОбъекта.ЗначенияПрав.Код = "30807" Тогда
					
					СтрокаАдреса = АдресКонтрагентаПоУмолчанию.НайтиСтроки(Новый Структура("Подразделение",Строка.Подразделение));
					Если СтрокаАдреса.Количество()=0 Тогда
						СтрокаАдреса = АдресКонтрагентаПоУмолчанию.Добавить();
						СтрокаАдреса.Подразделение = Строка.Подразделение;
						НовыйАдрес = СтрокаАдреса.Адрес.Добавить();
						НовыйАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					Иначе
						СтрокаАдреса = СтрокаАдреса[0];
					КонецЕсли;
					НовыйАдрес = СтрокаАдреса.Адрес[0];
					Если ДанныеОбъекта.ЗначенияПрав.Код = "30801" Тогда
						НовыйАдрес.Поле2 = Строка.Значение;
					ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "30802" Тогда
						НовыйАдрес.Поле3 = Строка.Значение;
					ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "30803" Тогда
						НовыйАдрес.Поле4 = Строка.Значение;
					ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "30804" Тогда
						НовыйАдрес.Поле5 = Строка.Значение;
					КонецЕсли;
					Продолжить;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				ЗаписатьОбъект(ПодразделениеОбъект);
				
			КонецЦикла;
			
		ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Свойство("ЗначениеПоОрганизациям") Тогда
			
			// Перенесем права Подразделения в реквизиты справочника Подразделения компании.
			Для Каждого Строка Из ДанныеОбъекта.ЗначенияПрав.ЗначениеПоОрганизациям Цикл
				ОрганизацияОбъект = Строка.Организация.ПолучитьОбъект();
				Если ДанныеОбъекта.ЗначенияПрав.Код = "41706" Тогда
					ОрганизацияОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
				ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "47101" Тогда
					ОрганизацияОбъект.СлужебнаяСтатьяДляРаспределения  = Строка.Значение;
				Иначе
					Продолжить;
				КонецЕсли;
				
				ЗаписатьОбъект(ОрганизацияОбъект);
				
			КонецЦикла;
			
		Иначе
			
			// Перенесем часть значений в учетный политики.
			Если ДанныеОбъекта.ЗначенияПрав.Код = "41309" Тогда
				
				НоваяСтрока = УчетныеПолитики.Добавить();
				НоваяСтрока.Период = ТекущаяДатаСеанса();
				НоваяСтрока.Значение = ДанныеОбъекта.ЗначенияПрав.Значение;
				НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.РежимСписанияСуммовыхРазниц;
				Возврат;
				
			КонецЕсли;
			
			// Перенесем права компании в константы.
			Константа = Неопределено;
			Если ДанныеОбъекта.ЗначенияПрав.Код = "99806" Тогда
				Константа = Константы.ВремяРазбораЖалобы.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "99805" Тогда
				Константа = Константы.ВремяРеакцииНаЖалобу.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41610" Тогда
				Константа = Константы.ИспользоватьАртикул.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41407" Тогда
				Константа = Константы.ИспользоватьИндикациюСуммыСписания.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41601" Тогда
				Константа = Константы.ИспользоватьБазовоеКоличество.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "10012" Тогда
				Константа = Константы.ИспользоватьЗначимыеСобытия.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41608" Тогда
				Константа = Константы.ИспользоватьИндикациюОстатковТовара.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41311" Тогда
				Константа = Константы.ИспользоватьУтверждениеДокументов.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41611" Тогда
				Константа = Константы.ИспользоватьХарактеристики.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41408" Тогда
				Константа = Константы.ФорматВыводаКоличества.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "41409" Тогда
				Константа = Константы.ФорматВыводаСуммы.СоздатьМенеджерЗначения();
			ИначеЕсли ДанныеОбъекта.ЗначенияПрав.Код = "43008" Тогда
				Константа = Константы.ЧекиПослеСвертки.СоздатьМенеджерЗначения();
			КонецЕсли;
		
			Если НЕ Константа = Неопределено Тогда
				Константа.Прочитать();
				Константа.Значение = ДанныеОбъекта.ЗначенияПрав.Значение;
				ЗаписатьОбъект(Константа);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьИзменениеПрав()

&НаСервере
Процедура ОбработатьНакоплениеСумм(ДанныеОбъекта)
	
	НайденныеСтроки = НакоплениеСумм.НайтиСтроки(Новый Структура("ПодразделениеКомпании",
														ДанныеОбъекта.НакоплениеСумм.ПодразделениеКомпании));
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = НакоплениеСумм.Добавить();
		НоваяСтрока.ПодразделениеКомпании = ДанныеОбъекта.НакоплениеСумм.ПодразделениеКомпании;
		НоваяСтрокаНакопления = НоваяСтрока.Накопления.Добавить();
	Иначе
		НоваяСтрокаНакопления = НайденныеСтроки[0].Накопления.Добавить();
	КонецЕсли;
	НоваяСтрокаНакопления.Контрагент = ДанныеОбъекта.НакоплениеСумм.Контрагент;
	НоваяСтрокаНакопления.Карточка = ДанныеОбъекта.НакоплениеСумм.Карточка;
	НоваяСтрокаНакопления.ПериодНакопления = ДанныеОбъекта.НакоплениеСумм.ПериодНакопления;
	НоваяСтрокаНакопления.Сумма = ДанныеОбъекта.НакоплениеСумм.Сумма;
	НоваяСтрокаНакопления.КоличествоЧеков = ДанныеОбъекта.НакоплениеСумм.КоличествоЧеков;
	НоваяСтрокаНакопления.КоличествоНоменклатуры = ДанныеОбъекта.НакоплениеСумм.КоличествоНоменклатуры;
	
КонецПроцедуры //ОбработатьНакоплениеСумм()

&НаСервере
Процедура ОбработатьДополнительныеСвойстваОбъекта(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("СвойстваОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ИмяМенеджера = "Справочник.ТипыСкидок" Тогда
		
		СсылкаОбъектаПереноса = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ДанныеОбъекта.СвойстваОбъектов.Свойство);
		ОбъектПереноса.ВидСвойства = СсылкаОбъектаПереноса;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьДополнительныеСвойстваОбъекта()

&НаСервере
Процедура ОбработатьУчетнуюПолитику(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("УчетнаяПолитика") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.УчетнаяПолитика.Свойство("ЗакрытиеЗаказовПоПодразделению") Тогда
		НоваяСтрока = УчетныеПолитики.Добавить();
		НоваяСтрока.Объект = ДанныеОбъекта.УчетнаяПолитика.ПодразделениеКомпании;
		НоваяСтрока.Период = ДанныеОбъекта.УчетнаяПолитика.Период;
		НоваяСтрока.Значение = ДанныеОбъекта.УчетнаяПолитика.ЗакрытиеЗаказовПоПодразделению;
		НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрытиеЗаказовПоПодразделению;
	КонецЕсли;
	
	Если ДанныеОбъекта.УчетнаяПолитика.Свойство("ЗакрыватьНераспределенныеЗаказыПокупателей") Тогда
		НоваяСтрока = УчетныеПолитики.Добавить();
		НоваяСтрока.Объект = ДанныеОбъекта.УчетнаяПолитика.ПодразделениеКомпании;
		НоваяСтрока.Период = ДанныеОбъекта.УчетнаяПолитика.Период;
		НоваяСтрока.Значение = ДанныеОбъекта.УчетнаяПолитика.ЗакрыватьНераспределенныеЗаказыПокупателей;
		НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрыватьНераспределенныеЗаказыПокупателей;
	КонецЕсли;
	
	Если ДанныеОбъекта.УчетнаяПолитика.Свойство("СтратегияСписанияПартийТоваровПоСтатусам") Тогда
		НоваяСтрока = УчетныеПолитики.Добавить();
		НоваяСтрока.Объект = ДанныеОбъекта.УчетнаяПолитика.Ссылка;
		НоваяСтрока.Период = ТекущаяДатаСеанса();
		НоваяСтрока.Значение = ДанныеОбъекта.УчетнаяПолитика.СтратегияСписанияПартийТоваровПоСтатусам;
		НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СтратегияСписанияПартийТоваровПоСтатусам;
	КонецЕсли;
	
	Если ДанныеОбъекта.УчетнаяПолитика.Свойство("СтратегияСписанияПартийТоваровПоДатам") Тогда
		НоваяСтрока = УчетныеПолитики.Добавить();
		НоваяСтрока.Объект = ДанныеОбъекта.УчетнаяПолитика.Ссылка;
		НоваяСтрока.Период = ТекущаяДатаСеанса();
		НоваяСтрока.Значение = ДанныеОбъекта.УчетнаяПолитика.СтратегияСписанияПартийТоваровПоДатам;
		НоваяСтрока.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.СтратегияСписанияПартийТоваровПоДатам;
	КонецЕсли;
	
КонецПроцедуры //ОбработатьУчетнуюПолитику()

&НаСервере
Процедура ОбработатьДействияНаЗначимыеСобытия(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("ДействияНаЗначимыеСобытия") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектПереноса, ДанныеОбъекта.ДействияНаЗначимыеСобытия,, "Ссылка,Владелец");
	ФорматТекстаИтог = ?(ДанныеОбъекта.ДействияНаЗначимыеСобытия.эпФорматТекста = "ПростойТекст", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст, "");
	ОбъектПереноса.эпФорматТекста = ?(ДанныеОбъекта.ДействияНаЗначимыеСобытия.эпФорматТекста = "HTML",
						Перечисления.ТипыТекстовЭлектронныхПисем.HTML, ФорматТекстаИтог);   
	ВажностьИтог = ?(ДанныеОбъекта.ДействияНаЗначимыеСобытия.Важность = "Низкая",
																		Перечисления.ВариантыВажностиВзаимодействия.Низкая,
																		Перечисления.ВариантыВажностиВзаимодействия.Обычная);					
	Если НЕ ЗначениеЗаполнено(ОбъектПереноса.ВажностьПроизвольныйКод) Тогда
		ОбъектПереноса.Важность = ?(ДанныеОбъекта.ДействияНаЗначимыеСобытия.Важность = "Высокая",
							Перечисления.ВариантыВажностиВзаимодействия.Высокая, ВажностьИтог);
	КонецЕсли;
	
	Если ОбъектПереноса.ВидДействия = Перечисления.ВидДействияНаЗначимоеСобытие.СоздатьНапоминание Тогда
		Если ЗначениеЗаполнено(ОбъектПереноса.ДатаНапоминанияПроизвольныйКод) Тогда
			ОбъектПереноса.СпособУстановкиВремениНапоминания = Перечисления.ВидыПравил.ПроизвольныйКод;
		Иначе
			ОбъектПереноса.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
			ОбъектПереноса.ВремяСобытия = ОбъектПереноса.ДатаНапоминания;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбъектПереноса.жрОбъектМетаданныхПроизвольныйКод) Тогда
		ОбъектПереноса.жрОбъектМетаданныхИмяОбъекта = НСтр("ru = '<Произвольное выражение>'");
	КонецЕсли;
	
	Событие = ДействияЗначимыеСобытия.НайтиСтроки(Новый Структура("Ссылка",ДанныеОбъекта.ДействияНаЗначимыеСобытия.Владелец));
	Если Событие.Количество()=0 Тогда
		НовоеСобытие = ДействияЗначимыеСобытия.Добавить();
		НовоеСобытие.Ссылка = ДанныеОбъекта.ДействияНаЗначимыеСобытия.Владелец;
	Иначе
		НовоеСобытие = Событие[0];
	КонецЕсли;
	
	Для каждого Строка Из ОбъектПереноса.ПолучателиПисьма Цикл
		Строка.КодГруппыАдреса = ДанныеОбъекта.ДействияНаЗначимыеСобытия.СтруктураПолучателей[Строка.НомерСтроки-1];
		Если ЗначениеЗаполнено(Строка.ПроизвольныйКод) Тогда
			Строка.АдресЭлектроннойПочты = Строка.ПроизвольныйКод;
		КонецЕсли;
	КонецЦикла;
	
	НовоеДействие = НовоеСобытие.Действия.Добавить();
	НовоеДействие.Действие = ДанныеОбъекта.ДействияНаЗначимыеСобытия.Ссылка;
	НовоеДействие.Порядок = ДанныеОбъекта.ДействияНаЗначимыеСобытия.Порядок;
	
КонецПроцедуры //ОбработатьДействияНаЗначимыеСобытия()

&НаСервере
Процедура ОбработатьРассылку(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("Рассылка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПереноса.ФорматТекста = ?(ДанныеОбъекта.Рассылка.ФорматТекста = "HTML", 
									Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
КонецПроцедуры //ОбработатьРассылку()

&НаСервере
Процедура ОбработатьЗначимыеСобытия(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("ЗначимыеСобытия") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПереноса.ПредставлениеИсточника = ДанныеОбъекта.ЗначимыеСобытия.Источник;
	
КонецПроцедуры //ОбработатьЗначимыеСобытия()

&НаСервере
Процедура ОбработатьСобытия(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("Событие") Тогда
		Возврат;
	КонецЕсли;
	ВажностьИтог = ?(ДанныеОбъекта.Событие.Важность = "Низкая",
			Перечисления.ВариантыВажностиВзаимодействия.Низкая,Перечисления.ВариантыВажностиВзаимодействия.Обычная);
	ОбъектПереноса.Важность = ?(ДанныеОбъекта.Событие.Важность = "Высокая",
			Перечисления.ВариантыВажностиВзаимодействия.Высокая, ВажностьИтог);
	//ОбъектПереноса.Отзыв = ?(ДанныеОбъекта.Событие.Отзыв = "Высокая",Перечисления.ВариантыВажностиВзаимодействия.Высокая, ?(ДанныеОбъекта.Событие.Отзыв = "Низкая",Перечисления.ВариантыВажностиВзаимодействия.Низкая,Перечисления.ВариантыВажностиВзаимодействия.Обычная));
	//ОбъектПереноса.ВходящееИсходящее = ?(ДанныеОбъекта.Событие.ВходящееИсходящее = "Исходящее",Перечисления.ВходящееИсходящееСобытие.Исходящее, Перечисления.ВходящееИсходящееСобытие.Входящее);
	//ОбъектПереноса.ФорматТекста = ?(ДанныеОбъекта.Событие.ФорматТекста = "HTML", Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
	Если ДанныеОбъекта.Событие.ВидСобытия = "ЛичнаяВстреча" Тогда 
		ВидСобытия = "Встреча";
	ИначеЕсли ДанныеОбъекта.Событие.ВидСобытия = "ТелефонныйЗвонок"
		И ДанныеОбъекта.Событие.ВходящееИсходящее = "Исходящее" Тогда
		ВидСобытия = "ИсходящийЗвонок";
	ИначеЕсли ДанныеОбъекта.Событие.ВидСобытия = "ТелефонныйЗвонок"
		И ДанныеОбъекта.Событие.ВходящееИсходящее = "Входящее" Тогда
		ВидСобытия = "ВходящийЗвонок";
	ИначеЕсли ДанныеОбъекта.Событие.ВидСобытия = "ЭлектронноеПисьмо" Тогда
		ВидСобытия = "ЭлектронноеОбращение";
	Иначе
		ВидСобытия = ДанныеОбъекта.Событие.ВидСобытия;
	КонецЕсли;
	
	ОбъектПереноса.ХозОперация = Справочники.ХозОперации.Событие;
	НовоеСобытие = ВидыСобытий.НайтиПоЗначению(ВидСобытия);
	Если НовоеСобытие = Неопределено Тогда
		НовоеСобытие = Справочники.ВидыСобытий.СоздатьЭлемент();
		НовоеСобытие.Наименование = ДанныеОбъекта.Событие.ВидСобытия;
		НовоеСобытие.Заполнить(Неопределено);
		ЗаписатьОбъект(НовоеСобытие);
	КонецЕсли;
	ОбъектПереноса.ВидСобытия = НовоеСобытие.Ссылка;
	
КонецПроцедуры //ОбработатьСобытия()

&НаСервере
Процедура ОбработатьДоговорыВзаиморасчетов(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("ДоговорыВзаиморасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПереноса.Основной = ДанныеОбъекта.ДоговорыВзаиморасчетов.Основной;
	
КонецПроцедуры //ОбработатьДоговорыВзаиморасчетов()

&НаСервере
Процедура ОбработатьКонтактныеЛицаКонтрагентов(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("КонтактныеЛицаКонтрагентов") ИЛИ (ДанныеОбъекта.Свойство("КонтактныеЛицаКонтрагентов") И ТипЗнч(ДанныеОбъекта.КонтактныеЛицаКонтрагентов.ВедущийКонтрагент) = Тип("Строка")) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗапись = КонтактныеЛица.Добавить();
	НоваяЗапись.Владелец = ДанныеОбъекта.КонтактныеЛицаКонтрагентов.ВедущийКонтрагент;
	НоваяЗапись.КонтактноеЛицо = ДанныеОбъекта.КонтактныеЛицаКонтрагентов.Ссылка;
	НоваяЗапись.Взаимоотношение = ДанныеОбъекта.КонтактныеЛицаКонтрагентов.ВидОтношений;
	
КонецПроцедуры //ОбработатьКонтактныеЛицаКонтрагентов()

&НаСервере
Процедура ОбработатьУтверждениеДокументов(ДанныеОбъекта)
	
	НоваяЗапись = УтверждениеДокументов.НайтиСтроки(Новый Структура("Документ, Объект", ДанныеОбъекта.УтверждениеДокументов.Документ,ДанныеОбъекта.УтверждениеДокументов.Объект));
	Если НоваяЗапись.Количество()=0 Тогда
		НоваяЗапись = УтверждениеДокументов.Добавить();
		НоваяЗапись.Объект = ДанныеОбъекта.УтверждениеДокументов.Объект;
		НоваяЗапись.Документ = ДанныеОбъекта.УтверждениеДокументов.Документ;
	Иначе
		НоваяЗапись = НоваяЗапись[0];
	КонецЕсли;
		
	Если ДанныеОбъекта.УтверждениеДокументов.СтатусДокумента = Перечисления.СтатусыДокументов.Согласован Тогда
		НоваяЗапись.Согласован = Истина;
	ИначеЕсли ДанныеОбъекта.УтверждениеДокументов.СтатусДокумента = Перечисления.СтатусыДокументов.Утвержден Тогда
		НоваяЗапись.Утвержден = Истина;
	КонецЕсли;
	
КонецПроцедуры //ОбработатьУтверждениеДокументов()

&НаСервере
Процедура ОбработатьСтраныМира(ОбъектПереноса,ДанныеОбъекта)
	
	Если ДанныеОбъекта.ИмяМенеджера = "Справочник.КлассификаторСтранМира" Тогда
		НоваяСтрока = КлассификаторСтранМира.Добавить();
		НоваяСтрока.КлючТекущегоОбъекта = ДанныеОбъекта.КлючТекущегоОбъекта;
		НоваяСтрока.НаименованиеПолное = ДанныеОбъекта.КлассификаторСтранМира.НаименованиеПолное;
		НоваяСтрока.Наименование = ДанныеОбъекта.КлассификаторСтранМира.Наименование;
		НоваяСтрока.Код = ДанныеОбъекта.КлассификаторСтранМира.Код;
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ИмяМенеджера = "ПланВидовХарактеристик.АналитическиеРазрезыПланирования" Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.СтраныМира"));
		ОбъектПереноса.ТипЗначения =  Новый ОписаниеТипов(Массив);
		
	КонецЕсли;
		
	Если НЕ ДанныеОбъекта.Свойство("СтраныМира") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.СтраныМира.Свойство("ПланФакт") Тогда
		Для каждого Строка Из ДанныеОбъекта.СтраныМира.ПланФакт Цикл
			НоваяСтрока = ОбъектыДляЗаменыСтраны.Добавить();
			НоваяСтрока.Ссылка = ДанныеОбъекта.КлючТекущегоОбъекта;
			НоваяСтрока.Страна = Строка.Значение;
			НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
			НоваяСтрока.ВидАналитикиПланирования = Строка.ВидАналитикиПланирования;
		КонецЦикла;
	ИначеЕсли ДанныеОбъекта.СтраныМира.Свойство("ТаможеннаяДекларацияИмпорт") Тогда
		Для каждого Строка Из ДанныеОбъекта.СтраныМира.ТаможеннаяДекларацияИмпорт Цикл
			НоваяСтрока = ОбъектыДляЗаменыСтраны.Добавить();
			НоваяСтрока.Ссылка = ДанныеОбъекта.КлючТекущегоОбъекта;
			НоваяСтрока.Страна = Строка.Значение;
			НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
			НоваяСтрока.ИмяТч = Строка.ИмяТч;
		КонецЦикла;
	Иначе
		НоваяСтрока = ОбъектыДляЗаменыСтраны.Добавить();
		НоваяСтрока.Ссылка = ДанныеОбъекта.КлючТекущегоОбъекта;
		НоваяСтрока.Страна = ДанныеОбъекта.СтраныМира.Страна;
	КонецЕсли;
	
КонецПроцедуры //ОбработатьСтраныМира()

&НаСервере
Процедура ОбработатьОборудование(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("Оборудование") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ИмяМенеджера = "Справочник.Оборудование" Тогда
		НоваяСтрока = ОборудованиеФР.Добавить();
		НоваяСтрока.КлючТекущегоОбъекта = ДанныеОбъекта.КлючТекущегоОбъекта;
		НоваяСтрока.Наименование = ДанныеОбъекта.Оборудование.Наименование;
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ОбъектыДляЗаменыОборудование.Добавить();
	НоваяСтрока.Ссылка = ДанныеОбъекта.КлючТекущегоОбъекта;
	НоваяСтрока.ФР = ДанныеОбъекта.Оборудование.ФР;
	
КонецПроцедуры //ОбработатьОборудование()

&НаСервере
Процедура ОбработатьКонтактнуюИнформациюОбъекта(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check unknown-method-property
	ОбъектПереноса.КонтактнаяИнформация.Очистить();
	
	Для Каждого ЭлементКонтактнойИнформации Из ДанныеОбъекта.КонтактнаяИнформация Цикл
		
		ВидКонтактнойИнформации = ПолучитьВидЭлементаКонтактнойИнформации(ЭлементКонтактнойИнформации, ОбъектПереноса);
		
		Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Невозможно установить вид контактной информации <"+ЭлементКонтактнойИнформации.Вид+"> для объекта <"+ОбъектПереноса+">.'"));
			Продолжить;
		КонецЕсли;
		
		//@skip-check unknown-method-property
		НоваяСтрока = ОбъектПереноса.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = ЭлементКонтактнойИнформации.Тип;
		НоваяСтрока.Вид = ВидКонтактнойИнформации;
		НоваяСтрока.Представление = ЭлементКонтактнойИнформации.Представление;
		
		Если НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Контекст = СформироватьКонтекст(ЭлементКонтактнойИнформации, ОбъектПереноса);
			ДанныеXDTO = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
			НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейЛокализация
				.КонтактнаяИнформацияXDTOВXML(ДанныеXDTO);
		Иначе
			НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ОбработатьКонтактнуюИнформациюОбъекта()

&НаСервере
Процедура ОбработатьКорректировкуЗаказаПокупателя(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("КорректировкаЗаказаПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПереноса.ХозОперация = Справочники.ХозОперации.КорректировкаЗаказаВнутреннее;
	ОбъектПереноса.ДокументОснование = ДанныеОбъекта.КорректировкаЗаказаПокупателя.ДокументОснование;
	
КонецПроцедуры //ОбработатьКорректировкуЗаказаПокупателя()

&НаСервере
Процедура ОбработатьПересортицуТоваров(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("ПересортицаТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПереноса.Товары.Очистить();
	
	Для каждого Строка Из ДанныеОбъекта.ПересортицаТоваров.Товары Цикл
		НоваяСтрока = ОбъектПереноса.Товары.Добавить();
		
		// Расход
		НоваяСтрока.Номенклатура = Строка.НоменклатураРасход;
		НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмеренияРасход;
		НоваяСтрока.Количество = Строка.КоличествоРасход;
		НоваяСтрока.Коэффициент = Строка.КоэффициентРасход;
		НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатурыРасход;
		НоваяСтрока.Цена = Строка.Цена;
		НоваяСтрока.Сумма = Строка.Сумма;
		НоваяСтрока.ЦенаРозничная = Строка.ЦенаРозничнаяРасход;
		НоваяСтрока.СуммаРозничная = Строка.СуммаРозничнаяРасход;
		НоваяСтрока.Партия = Строка.Партия;
		НоваяСтрока.ГТД = Строка.ГТДРасход;
		НоваяСтрока.Ячейка = Строка.ЯчейкаРасход;
		НоваяСтрока.ПонижениеСортности = Строка.ПонижениеСортности;
		
		НоваяСтрока.НоменклатураПриход = Строка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмеренияПриход = Строка.ЕдиницаИзмерения;
		НоваяСтрока.КоличествоПриход = Строка.Количество;
		НоваяСтрока.КоэффициентПриход = Строка.Коэффициент;
		НоваяСтрока.ХарактеристикаНоменклатурыПриход = Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЦенаРозничнаяПриход = Строка.ЦенаРозничная;
		НоваяСтрока.СуммаРозничнаяПриход = Строка.СуммаРозничная;
		НоваяСтрока.ГТДПриход = Строка.ГТД;
		НоваяСтрока.ЯчейкаПриход = Строка.Ячейка;
	КонецЦикла;
	
КонецПроцедуры //ОбработатьПересортицуТоваров()

&НаСервере
Процедура ОбработатьИзменениеЦен(ОбъектПереноса, ДанныеОбъекта)
	
	Если НЕ ДанныеОбъекта.Свойство("ИзменениеЦен") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ОбъектПереноса.ПараметрыРасчета.Добавить();
	
	НоваяСтрока.ТипЦен = ДанныеОбъекта.ИзменениеЦен.ТипЦен;
	НоваяСтрока.РасчетЦенОт = ДанныеОбъекта.ИзменениеЦен.РасчетЦенОт;
	НоваяСтрока.ПроцентНаценки = ДанныеОбъекта.ИзменениеЦен.ПроцентНаценки;
	НоваяСтрока.ОкруглятьДо = ДанныеОбъекта.ИзменениеЦен.ОкруглятьДо;
	НоваяСтрока.ПроцентНаценкиИзНоменклатуры = ДанныеОбъекта.ИзменениеЦен.ПроцентНаценкиИзНоменклатуры;
	
	Для Каждого СтрокаТовара Из ОбъектПереноса.Товары Цикл
		СтрокаТовара.ТипЦен = НоваяСтрока.ТипЦен;
	КонецЦикла;
	
КонецПроцедуры //ОбработатьПересортицуТоваров()

#КонецОбласти

#Область ОбработчикиИзмененийВыполняемыйПослеЗагрузкиДанныхИзФайлов

&НаСервере
Процедура ОбработатьИзменения()
	
	// Заменим ссылки на страны мира
	ОбработатьИзмененияСтраныМира();
	
	// Справочник Валюты заменен на БСП
	ОбработатьИзмененияВалют();
	
	// Заполним табличную часть Действия в значимых событиях
	Для Каждого Событие Из ДействияЗначимыеСобытия Цикл
		
		СобытиеОбъект = Событие.Ссылка.ПолучитьОбъект();
		Событие.Действия.Сортировать("Порядок возр");
		
		Для Каждого ДобавляемоеДействие Из Событие.Действия Цикл
			НовоеДействие = СобытиеОбъект.Действия.Добавить();
			НовоеДействие.Действие = ДобавляемоеДействие.Действие
		КонецЦикла;
		
		ЗаписатьОбъект(СобытиеОбъект);
		
	КонецЦикла;
	
	// Заполним шаблон адреса в подразделениях
	Для каждого Строка Из АдресКонтрагентаПоУмолчанию Цикл
		
		СтрокаОбъект = Строка.Подразделение.ПолучитьОбъект();
		Контекст = СформироватьКонтекст(Строка.Адрес[0], Неопределено);
		ДанныеXDTO = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
		СтрокаОбъект.ОсновнойАдрес = УправлениеКонтактнойИнформациейЛокализация
			.КонтактнаяИнформацияXDTOВXML(ДанныеXDTO);
		ЗаписатьОбъект(СтрокаОбъект);
		
	КонецЦикла;
	
	// Заменим ссылки на ФР
	ОбработатьИзмененияОборудования();
	
	ОбработатьНовыеРегистрыСведений();
	
	// Отобразим статусы документов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияДокументовСрезПоследних.Регистратор,
	               |	СостоянияДокументовСрезПоследних.СтатусДокумента
	               |ИЗ
	               |	РегистрСведений.СостоянияДокументов.СрезПоследних КАК СостоянияДокументовСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() И ЕстьРеквизит(Выборка.Регистратор,"СтатусУтверждения") Цикл
		ДокументыОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ДокументыОбъект.СтатусУтверждения = Выборка.СтатусДокумента;
		ЗаписатьОбъект(ДокументыОбъект);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СкладыКомпании.Ссылка
	               |ИЗ
	               |	Справочник.СкладыКомпании КАК СкладыКомпании
	               |ГДЕ
	               |	СкладыКомпании.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Ячеистый)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СкладОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СкладОбъект.СкладОбъект = Перечисления.ВидыСкладов.ОрдерныйЯчеистый;
		ЗаписатьОбъект(СкладОбъект);
	КонецЦикла;
	
	// Заполним новые ресурсы в регистрах
	ОбработатьНовыеРесурсыРегистровНакоплений();
	
КонецПроцедуры //ОбработатьИзменения()

&НаСервере
Процедура ОбработатьИзмененияСтраныМира()
	
	// Заменим ссылки на страны мира
	Для каждого Страна Из КлассификаторСтранМира Цикл
		
		СуществующаяСтрана = Справочники.СтраныМира.НайтиПоКоду(Страна.Код);
		Если ЗначениеЗаполнено(СуществующаяСтрана) Тогда
			Страна.НовыйКлюч = СуществующаяСтрана.Ссылка;
		Иначе
			НоваяСтрана = Справочники.СтраныМира.СоздатьЭлемент();
			НоваяСтрана.Код = Страна.Код;
			НоваяСтрана.НаименованиеПолное = Страна.НаименованиеПолное;
			НоваяСтрана.Наименование = Страна.Наименование;
			
			ЗаписатьОбъект(НоваяСтрана);
			Страна.НовыйКлюч =  НоваяСтрана.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ОбъектыДляЗаменыСтраны Цикл
		
		НоваяСсылка = КлассификаторСтранМира.НайтиСтроки(Новый Структура("КлючТекущегоОбъекта",Строка.Страна));
		Если НоваяСсылка.Количество()>0 Тогда
			СтрокаОбъект = Строка.Ссылка.ПолучитьОбъект();
			
			Если ЕстьРеквизит(СтрокаОбъект,"Страна") Тогда
				СтрокаОбъект.Страна = НоваяСсылка[0].НовыйКлюч;
			ИначеЕсли ЕстьРеквизит(СтрокаОбъект,"СтранаПроисхождения") Тогда
				СтрокаОбъект.СтранаПроисхождения = НоваяСсылка[0].НовыйКлюч;
			ИначеЕсли ЕстьРеквизит(СтрокаОбъект,,"Показатели") Тогда
				Если Строка.ВидАналитикиПланирования = "ВидАналитикиПланирования1" Тогда
					СтрокаОбъект.Показатели[Строка.НомерСтроки-1].ВидАналитикиПланирования1 = НоваяСсылка[0].НовыйКлюч;
				Иначе
					СтрокаОбъект.Показатели[Строка.НомерСтроки-1].ВидАналитикиПланирования2 = НоваяСсылка[0].НовыйКлюч;
				КонецЕсли;
			ИначеЕсли ЕстьРеквизит(СтрокаОбъект,,"Разделы") Тогда
				Если Строка.ИмяТч = "Разделы" Тогда
					СтрокаОбъект.Разделы[Строка.НомерСтроки-1].СтранаПроисхождения = НоваяСсылка[0].НовыйКлюч;
				Иначе
					СтрокаОбъект.Товары[Строка.НомерСтроки-1].СтранаПроисхождения = НоваяСсылка[0].НовыйКлюч;
				КонецЕсли;
			КонецЕсли;
				
			ЗаписатьОбъект(СтрокаОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОбработатьИзмененияСтраныМира()

&НаСервере
Процедура ОбработатьИзмененияОборудования()
	
	// Заменим ссылки на страны мира
	Для каждого Строка Из ОборудованиеФР Цикл
		
		Если ЗначениеЗаполнено(Справочники.ПодключаемоеОборудование.НайтиПоНаименованию(Строка.Наименование)) Тогда
			Продолжить;
		Иначе
			НовыйФР = Справочники.ПодключаемоеОборудование.СоздатьЭлемент();
			НовыйФР.Наименование = Строка.Наименование;
			НовыйФР.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ;
			
			ЗаписатьОбъект(НовыйФР);
			Строка.НовыйКлюч = НовыйФР.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ОбъектыДляЗаменыОборудование Цикл
		
		НоваяСсылка = ОборудованиеФР.НайтиСтроки(Новый Структура("КлючТекущегоОбъекта",Строка.ФР));
		Если НоваяСсылка.Количество()>0 Тогда
			СтрокаОбъект = Строка.Ссылка.ПолучитьОбъект();
			
			Если ЕстьРеквизит(СтрокаОбъект,"ФР") Тогда
				СтрокаОбъект.ФР = НоваяСсылка[0].НовыйКлюч;
			КонецЕсли;
				
			ЗаписатьОбъект(СтрокаОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОбработатьИзмененияОборудования()

&НаСервере
Процедура ОбработатьИзмененияВалют()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Валюты.Ссылка
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВалютыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВалютыОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
		ВалютыОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(ВалютыОбъект);
	КонецЦикла;
	
КонецПроцедуры //ОбработатьИзмененияВалют()

&НаСервере
Процедура ОбработатьНовыеРесурсыРегистровНакоплений()
	
	// Заполним новые ресурсы в регистрах
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// Партии товаров компании
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииТоваровКомпании.Период,
	               |	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	               |	ПартииТоваровКомпании.НомерСтроки,
	               |	ПартииТоваровКомпании.Активность,
	               |	ПартииТоваровКомпании.ВидДвижения,
	               |	ПартииТоваровКомпании.СкладКомпании,
	               |	ПартииТоваровКомпании.Номенклатура,
	               |	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
	               |	ПартииТоваровКомпании.СтатусПартии,
	               |	ПартииТоваровКомпании.Партия,
	               |	ПартииТоваровКомпании.Количество,
	               |	ПартииТоваровКомпании.Сумма,
	               |	ПартииТоваровКомпании.СуммаНДС,
	               |	ПартииТоваровКомпании.Сумма - ПартииТоваровКомпании.СуммаНДС КАК СуммаБезНДС,
	               |	ПартииТоваровКомпании.СуммаУпр,
	               |	ПартииТоваровКомпании.ХозОперация,
	               |	ПартииТоваровКомпании.СтавкаНДС,
	               |	ПартииТоваровКомпании.Проект,
	               |	ПартииТоваровКомпании.ДокументПродажи
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	               |ИТОГИ ПО
	               |	Регистратор";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		НаборПартииТоваровКомпании = РегистрыНакопления.ПартииТоваровКомпании.СоздатьНаборЗаписей();
		НаборПартииТоваровКомпании.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборПартииТоваровКомпании.Прочитать();
		ДетальнаяВыборка = Выборка.Выбрать();
		СтруктураПоиска = Новый Структура("НомерСтроки");
		Для Каждого Запись Из НаборПартииТоваровКомпании Цикл
			СтруктураПоиска.НомерСтроки = Запись.НомерСтроки;
			Пока ДетальнаяВыборка.НайтиСледующий(СтруктураПоиска) Цикл
				Запись.СуммаБезНДС = ДетальнаяВыборка.СуммаБезНДС;
				Запись.СуммаНДСУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДетальнаяВыборка.СуммаНДС,ВалютаРегл,ВалютаУпр,ДетальнаяВыборка.Период);
				Запись.СуммаБезНДСУпр = ДетальнаяВыборка.СуммаУпр - Запись.СуммаНДСУпр;
			КонецЦикла;
		КонецЦикла;
		ЗаписатьОбъект(НаборПартииТоваровКомпании);
	КонецЦикла;
	
	// Продажи
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Продажи.Период,
	               |	Продажи.Регистратор КАК Регистратор,
	               |	Продажи.НомерСтроки,
	               |	Продажи.Активность,
	               |	Продажи.ПодразделениеКомпании,
	               |	Продажи.Номенклатура,
	               |	Продажи.Поставщик,
	               |	Продажи.Покупатель,
	               |	Продажи.СтатусПартии,
	               |	Продажи.ХозОперация,
	               |	Продажи.ДоговорВзаиморасчетов,
	               |	Продажи.ХарактеристикаНоменклатуры,
	               |	Продажи.СкладКомпании КАК МестоРазмещения,
	               |	Продажи.СтавкаНДС,
	               |	Продажи.Партия,
	               |	Продажи.Проект,
	               |	Продажи.ГТД,
	               |	Продажи.ДокументПродажи,
	               |	Продажи.Количество,
	               |	Продажи.Сумма,
	               |	Продажи.СуммаНДС,
	               |	Продажи.ВыручкаБезНДС,
	               |	Продажи.СуммаСкидки,
	               |	Продажи.ВыручкаДоПримененияСкидки,
	               |	Продажи.ВыручкаДоПримененияСкидкиБезНДС,
	               |	Продажи.Себестоимость,
	               |	Продажи.СуммаНДСВходящий,
	               |	Продажи.СебестоимостьБезНДС,
	               |	Продажи.СуммаУпр,
	               |	Продажи.СуммаНДСУпр,
	               |	Продажи.ВыручкаБезНДСУпр,
	               |	Продажи.СуммаСкидкиУпр,
	               |	Продажи.ВыручкаДоПримененияСкидкиУпр,
	               |	Продажи.ВыручкаДоПримененияСкидкиБезНДСУпр,
	               |	Продажи.СебестоимостьУпр,
	               |	Продажи.СуммаНДСВходящийУпр,
	               |	Продажи.СебестоимостьБезНДСУпр
	               |ИЗ
	               |	РегистрНакопления.Продажи КАК Продажи
	               |ИТОГИ ПО
	               |	Регистратор";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		НаборПродажи = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
		НаборПродажи.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборПродажи.Прочитать();
		ДетальнаяВыборка = Выборка.Выбрать();
		СтруктураПоиска = Новый Структура("НомерСтроки");
		Для Каждого Запись Из НаборПродажи Цикл
			СтруктураПоиска.НомерСтроки =  Запись.НомерСтроки;
			Пока ДетальнаяВыборка.НайтиСледующий(СтруктураПоиска) Цикл
				Запись.ВыручкаБезНДС = ДетальнаяВыборка.Сумма - ДетальнаяВыборка.СуммаНДС;
				Запись.СуммаНДСУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДетальнаяВыборка.СуммаНДС,ВалютаРегл,ВалютаУпр,ДетальнаяВыборка.Период);
				Запись.ВыручкаБезНДСУпр = ДетальнаяВыборка.СуммаУпр - Запись.СуммаНДСУпр;
				Запись.СуммаНДСВходящийУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДетальнаяВыборка.СуммаНДСВходящий,ВалютаРегл,ВалютаУпр,ДетальнаяВыборка.Период);
				Запись.СебестоимостьБезНДСУпр = ДетальнаяВыборка.СебестоимостьУпр - Запись.СуммаНДСВходящийУпр;
				Запись.СебестоимостьБезНДС = ДетальнаяВыборка.Себестоимость - Запись.СуммаНДСВходящий;
				Запись.ВыручкаДоПримененияСкидки = ДетальнаяВыборка.Сумма + ДетальнаяВыборка.СуммаСкидки;
				Запись.ВыручкаДоПримененияСкидкиБезНДС = ДетальнаяВыборка.Сумма + ДетальнаяВыборка.СуммаСкидки - ДетальнаяВыборка.СуммаНДС;
				Запись.СуммаСкидкиУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДетальнаяВыборка.СуммаСкидки,ВалютаРегл,ВалютаУпр,ДетальнаяВыборка.Период);
				Запись.ВыручкаДоПримененияСкидкиУпр = ДетальнаяВыборка.СуммаУпр + Запись.СуммаСкидкиУпр;
				Запись.ВыручкаДоПримененияСкидкиБезНДСУпр = ДетальнаяВыборка.СуммаУпр + Запись.СуммаСкидкиУпр - Запись.СуммаНДСУпр;
			КонецЦикла;
		КонецЦикла;
		ЗаписатьОбъект(НаборПродажи);
	КонецЦикла;
	
	// Партии товаров отданные
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииТоваровОтданные.Период,
	               |	ПартииТоваровОтданные.Регистратор КАК Регистратор,
	               |	ПартииТоваровОтданные.НомерСтроки,
	               |	ПартииТоваровОтданные.Активность,
	               |	ПартииТоваровОтданные.ВидДвижения,
	               |	ПартииТоваровОтданные.Контрагент,
	               |	ПартииТоваровОтданные.Номенклатура,
	               |	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
	               |	ПартииТоваровОтданные.ДоговорВзаиморасчетов,
	               |	ПартииТоваровОтданные.ДокументПередачи,
	               |	ПартииТоваровОтданные.Партия,
	               |	ПартииТоваровОтданные.ГТД,
	               |	ПартииТоваровОтданные.Количество,
	               |	ПартииТоваровОтданные.Сумма,
	               |	ПартииТоваровОтданные.СуммаНДС,
	               |	ПартииТоваровОтданные.СуммаСебестоимостиРегл,
	               |	ПартииТоваровОтданные.СуммаСебестоимостиНДСРегл,
	               |	ПартииТоваровОтданные.СуммаСебестоимостиБезНДСРегл,
	               |	ПартииТоваровОтданные.СуммаУпр,
	               |	ПартииТоваровОтданные.СуммаНДСУпр,
	               |	ПартииТоваровОтданные.СуммаСебестоимостиУпр,
	               |	ПартииТоваровОтданные.СуммаСебестоимостиНДСУпр,
	               |	ПартииТоваровОтданные.СуммаСебестоимостиБезНДСУпр,
	               |	ПартииТоваровОтданные.ХозОперация,
	               |	ПартииТоваровОтданные.СуммаПродажи
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
	               |ИТОГИ ПО
	               |	Регистратор";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		НаборПартииТоваровОтданные = РегистрыНакопления.ПартииТоваровОтданные.СоздатьНаборЗаписей();
		НаборПартииТоваровОтданные.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборПартииТоваровОтданные.Прочитать();
		ДетальнаяВыборка = Выборка.Выбрать();
		СтруктураПоиска = Новый Структура("НомерСтроки");
		Для Каждого Запись Из НаборПартииТоваровОтданные Цикл
			СтруктураПоиска.НомерСтроки =  Запись.НомерСтроки;
			Пока ДетальнаяВыборка.НайтиСледующий(СтруктураПоиска) Цикл
				Запись.СуммаНДСУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДетальнаяВыборка.СуммаНДС,ВалютаРегл,ВалютаУпр,ДетальнаяВыборка.Период);
				
				// Вычислим СуммаСебестоимостиНДСРегл
				ЕстьСуммаНДС = ЕстьРеквизит(ДетальнаяВыборка.ДокументПередачи,"СуммаНДС","Товары");
				СуммаНДС = 0;
				ОбщееКоличество = 0;
				Если ЕстьСуммаНДС Тогда
					СтруктураПоискаТоваров = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
					Если ЕстьРеквизит(ДетальнаяВыборка.ДокументПередачи,"Партия","Товары") Тогда
						СтруктураПоискаТоваров.Вставить("Партия");
					КонецЕсли;
					Если ЕстьРеквизит(ДетальнаяВыборка.ДокументПередачи,"ГТД","Товары") Тогда
						СтруктураПоискаТоваров.Вставить("ГТД");
					КонецЕсли;
					Если ЕстьРеквизит(ДетальнаяВыборка.ДокументПередачи,"ДокументПередачи","Товары") Тогда
						СтруктураПоискаТоваров.Вставить("ДокументПродажи");
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтруктураПоискаТоваров,Запись);
					НайденныеТовары = ДетальнаяВыборка.ДокументПередачи.Товары.НайтиСтроки(СтруктураПоискаТоваров);
					Для Каждого Строка Из НайденныеТовары Цикл
						СуммаНДС = СуммаНДС + Строка.СуммаНДС;
						ОбщееКоличество = ОбщееКоличество + Строка.Количество;
					КонецЦикла;
				КонецЕсли;
				Запись.СуммаСебестоимостиНДСРегл = СуммаНДС * Запись.Количество/?(ОбщееКоличество=0,1,ОбщееКоличество);
				Запись.СуммаСебестоимостиБезНДСРегл = ДетальнаяВыборка.СуммаСебестоимостиРегл - Запись.СуммаСебестоимостиНДСРегл;
				Запись.СуммаСебестоимостиНДСУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(Запись.СуммаСебестоимостиНДСРегл,ВалютаРегл,ВалютаУпр,ДетальнаяВыборка.Период);
				Запись.СуммаСебестоимостиБезНДСУпр = ДетальнаяВыборка.СуммаСебестоимостиУпр - Запись.СуммаСебестоимостиНДСУпр;
			КонецЦикла;
		КонецЦикла;
		ЗаписатьОбъект(НаборПартииТоваровОтданные);
	КонецЦикла;
	
	// Реализованные товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализованныеТовары.Период,
	               |	РеализованныеТовары.Регистратор КАК Регистратор,
	               |	РеализованныеТовары.НомерСтроки,
	               |	РеализованныеТовары.Активность,
	               |	РеализованныеТовары.ВидДвижения,
	               |	РеализованныеТовары.Контрагент,
	               |	РеализованныеТовары.Номенклатура,
	               |	РеализованныеТовары.ДоговорВзаиморасчетов,
	               |	РеализованныеТовары.ХарактеристикаНоменклатуры,
	               |	РеализованныеТовары.ДокументПередачи,
	               |	РеализованныеТовары.ГТД,
	               |	РеализованныеТовары.Количество,
	               |	РеализованныеТовары.СуммаУпр,
	               |	РеализованныеТовары.СуммаНДСУпр,
	               |	РеализованныеТовары.СуммаБезНДСУпр,
	               |	РеализованныеТовары.СуммаРегл,
	               |	РеализованныеТовары.СуммаНДС,
	               |	РеализованныеТовары.СуммаБезНДС,
	               |	РеализованныеТовары.СуммаПродажи,
	               |	РеализованныеТовары.СуммаПродажиРегл,
	               |	РеализованныеТовары.ХозОперация,
	               |	РеализованныеТовары.Вознаграждение
	               |ИЗ
	               |	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
	               |ИТОГИ ПО
	               |	Регистратор";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		НаборРеализованныеТовары = РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей();
		НаборРеализованныеТовары.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборРеализованныеТовары.Прочитать();
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.Инвентаризация") Тогда
			
			// пройдемся по табличной части и сформируем таблицу значений
			Если Выборка.ХозОперация=Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
				ИмяРегистрПартий = "ПартииТоваровОтданные";
			Иначе
				ИмяРегистрПартий = "ПартииТоваровКомпании";
			КонецЕсли;
			
			ТекстЗапроса="
			|ВЫБРАТЬ
			|	ИнвентаризацияТовары.Номенклатура КАК Номенклатура,
			|	ИнвентаризацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ИнвентаризацияТовары.ДокументПередачи КАК ДокументПередачи,
			|	ИнвентаризацияТовары.Партия КАК Партия,
			|	ИнвентаризацияТовары.ГТД КАК ГТД,
			|	0 КАК СуммаНДС,";
			
			Если Выборка.ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|	ИнвентаризацияТовары.Сумма*(-1) КАК СуммаВсего,";
				Если ЗначениеЗаполнено(Выборка.Регистратор.СкладКомпании) И Выборка.Регистратор.СкладКомпании.Розничный Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	ИнвентаризацияТовары.СуммаРозничная*(-1) КАК СуммаРозничная,
					|	ИнвентаризацияТовары.ЦенаРозничная КАК ЦенаРозничная,";
				Иначе
					ТекстЗапроса=ТекстЗапроса+"
					|	0 КАК СуммаРозничная,
					|	0 КАК ЦенаРозничная,";
				КонецЕсли;	
			Иначе
				ТекстЗапроса=ТекстЗапроса+"
				|	ИнвентаризацияТовары.Сумма*(-1) КАК СуммаВсего,";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+"
			|	ИнвентаризацияТовары.Количество*(-1)*ИнвентаризацияТовары.Коэффициент КАК Количество
			|ИЗ
			|	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
			|ГДЕ
			|	  ИнвентаризацияТовары.Ссылка=&Ссылка
			|	И (
			|		ИнвентаризацияТовары.Количество*(-1)>0
			|	)
			|";
			
			Запрос=Новый Запрос();
			Запрос.УстановитьПараметр("Ссылка",Выборка.Регистратор.Ссылка);
			Запрос.УстановитьПараметр("ПустаяХарактеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустаяПартия",Неопределено);
			Запрос.Текст=ТекстЗапроса;
			РезультатЗапросаПоТоварамНедостачи = Запрос.Выполнить();
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			РезультатЗапросаПоПартиям = ДокументОбъект.Движения.ПартииТоваровКомпании;
			РезультатЗапросаПоПартиям.Прочитать();
			
			НаборРеализованныеТовары.Очистить();
			НаборРеализованныеТовары.ШапкаДокумента            = ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
			НаборРеализованныеТовары.Списание                  = Истина;
			НаборРеализованныеТовары.ДокументОбъект            = ДокументОбъект;
			НаборРеализованныеТовары.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамНедостачи;
			НаборРеализованныеТовары.РезультатЗапросаПоПартиям = РезультатЗапросаПоПартиям.Выгрузить();
			НаборРеализованныеТовары.Приход();
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВозвратОтПокупателя") Тогда
			
			// Если среди возвращенного товара есть комиссионный, то отсторнируем реализованные товары.
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			РезультатЗапросаПоПартиям = ДокументОбъект.Движения.ПартииТоваровКомпании;
			РезультатЗапросаПоПартиям.Прочитать();
			
			РезультатЗапросаПоГТД = ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
			РезультатЗапросаПоГТД.Прочитать();
			
			НаборРеализованныеТовары.Очистить();
			НаборРеализованныеТовары.ДокументОбъект            = ДокументОбъект;
			НаборРеализованныеТовары.Сторно                    = Истина;
			НаборРеализованныеТовары.ПоБазовомуКоличеству      = Истина;
			НаборРеализованныеТовары.ШапкаДокумента            = ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
			НаборРеализованныеТовары.РезультатЗапросаПоПартиям = РезультатЗапросаПоПартиям.Выгрузить();
			НаборРеализованныеТовары.РезультатЗапросаПоГТД     = РезультатЗапросаПоГТД.Выгрузить();
			НаборРеализованныеТовары.Приход();
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗакрытиеСмены") Тогда
			
			// спишем реализованные комиссионные товары
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			РезультатЗапросаПоПартиям = ДокументОбъект.Движения.ПартииТоваровКомпании;
			РезультатЗапросаПоПартиям.Прочитать();
			
			НаборРеализованныеТовары.Очистить();
			НаборРеализованныеТовары.ДокументОбъект            = ДокументОбъект;
			НаборРеализованныеТовары.ШапкаДокумента            = ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
			НаборРеализованныеТовары.РезультатЗапросаПоПартиям = РезультатЗапросаПоПартиям.Выгрузить();
			НаборРеализованныеТовары.ПоБазовомуКоличеству      = Ложь;
			НаборРеализованныеТовары.Приход();
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.Комплектация") Тогда
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			РезультатЗапросаПоПартиям = ДокументОбъект.Движения.ПартииТоваровКомпании;
			РезультатЗапросаПоПартиям.Прочитать();
			
			ТаблицаСписания=РезультатЗапросаПоПартиям.Выгрузить();
	
			// 2. спишем израсходованные комиссионные товары
			ТаблицаСписанияПринятые=ТаблицаСписания.Скопировать();
			СтрокаСписанияКупленный=ТаблицаСписанияПринятые.Найти(Перечисления.СтатусыПартий.ТоварКупленный,"СтатусПартии");
			Пока СтрокаСписанияКупленный<>Неопределено Цикл
				ТаблицаСписанияПринятые.Удалить(СтрокаСписанияКупленный);
				СтрокаСписанияКупленный=ТаблицаСписанияПринятые.Найти(Перечисления.СтатусыПартий.ТоварКупленный,"СтатусПартии");
			КонецЦикла;
			
			Если ТаблицаСписанияПринятые.Количество()>0 Тогда
				НаборРеализованныеТовары.ДокументОбъект=ДокументОбъект;
				НаборРеализованныеТовары.Списание=Истина;
				НаборРеализованныеТовары.РезультатЗапросаПоТоварам=ТаблицаСписанияПринятые;
				НаборРеализованныеТовары.РезультатЗапросаПоПартиям = ТаблицаСписания;
				НаборРеализованныеТовары.ШапкаДокумента=ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
				НаборРеализованныеТовары.Приход();
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОбслуживаниеАктива") Тогда
			
			// Зачитываем принятые на реализацию товары, которые были списаны
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			РезультатЗапросаПоПартиям = ДокументОбъект.Движения.ПартииТоваровКомпании;
			РезультатЗапросаПоПартиям.Прочитать();
			
			ЕстьПартии = ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", ДокументОбъект);
			ЕстьСуммаРозн = (ДокументОбъект.ОприходованныеЦенности.Итог("СуммаРозничная") + ДокументОбъект.Товары.Итог("СуммаРозничная")) > 0;
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ОбслуживаниеАктиваТовары.Номенклатура,
			|	ОбслуживаниеАктиваТовары.ХарактеристикаНоменклатуры,
			|	СУММА(ОбслуживаниеАктиваТовары.Количество*ОбслуживаниеАктиваТовары.Коэффициент) КАК Количество,
			|	СУММА(0) КАК Резерв";
			Если ЕстьПартии Тогда
				ТекстЗапроса = ТекстЗапроса + ", ОбслуживаниеАктиваТовары.Партия КАК Партия";
				ТекстЗапроса = ТекстЗапроса + ", ОбслуживаниеАктиваТовары.ГТД КАК ГТД";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ", СУММА(ОбслуживаниеАктиваТовары.СуммаРозничная) КАК СуммаРозничная, ОбслуживаниеАктиваТовары.ЦенаРозничная";
			ТекстЗапроса = ТекстЗапроса + "	ИЗ
			|	Документ.ОбслуживаниеАктива.Товары КАК ОбслуживаниеАктиваТовары
			|ГДЕ
			|	ОбслуживаниеАктиваТовары.Ссылка = &Ссылка
			|	И ОбслуживаниеАктиваТовары.Номенклатура.ВидНоменклатуры <> &Услуга
			|СГРУППИРОВАТЬ ПО Номенклатура, ХарактеристикаНоменклатуры, ЦенаРозничная"+"
			|	"+?(ЕстьПартии,", Партия, ГТД","")+"
			|";
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Ссылка",Выборка.Регистратор);
			Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
			Запрос.Текст = ТекстЗапроса;
			РезультатЗапросаПоТоварам = Запрос.Выполнить();
			
			НаборРеализованныеТовары.Очистить();
			НаборРеализованныеТовары.ДокументОбъект            = ДокументОбъект;
			НаборРеализованныеТовары.Списание                  = Истина;
			НаборРеализованныеТовары.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
			НаборРеализованныеТовары.РезультатЗапросаПоПартиям = РезультатЗапросаПоПартиям.Выгрузить();
			НаборРеализованныеТовары.ШапкаДокумента            = ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
			НаборРеализованныеТовары.Приход();
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			// Зачитываем принятые на реализацию товары, которые были списаны
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			НаборРеализованныеТовары.Очистить();
			НаборРеализованныеТовары.ДокументОбъект        = ДокументОбъект;
			НаборРеализованныеТовары.Контрагент            = ДокументОбъект.Контрагент;
			НаборРеализованныеТовары.ДоговорВзаиморасчетов = ДокументОбъект.ДоговорВзаиморасчетов;
			НаборРеализованныеТовары.ШапкаДокумента        = ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
			НаборРеализованныеТовары.Расход();
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
			
			// Зачитываем принятые на реализацию товары, которые были списаны
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			РезультатЗапросаПоПартиям = ДокументОбъект.Движения.ПартииТоваровКомпании;
			РезультатЗапросаПоПартиям.Прочитать();
			
			ТекстЗапроса="ВЫБРАТЬ
			|	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
			|	СписаниеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СписаниеТоваровТовары.ДокументПередачи КАК ДокументПередачи,
			|	СписаниеТоваровТовары.Партия КАК Партия,
			|	СписаниеТоваровТовары.ГТД КАК ГТД,
			|	СписаниеТоваровТовары.ЦенаРозничная КАК ЦенаРозничная,
			|	СписаниеТоваровТовары.Количество * СписаниеТоваровТовары.Коэффициент КАК Количество
			|ИЗ
			|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
			|ГДЕ
			|	СписаниеТоваровТовары.Ссылка = &Ссылка";
			
			Запрос=Новый Запрос();
			Запрос.УстановитьПараметр("Ссылка",Выборка.Регистратор);
			Запрос.Текст=ТекстЗапроса;
			РезультатЗапросаПоТоварам = Запрос.Выполнить();
			
			НаборРеализованныеТовары.Очистить();
			НаборРеализованныеТовары.ДокументОбъект=ДокументОбъект;
			НаборРеализованныеТовары.Списание=Истина;
			НаборРеализованныеТовары.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварам;
			НаборРеализованныеТовары.РезультатЗапросаПоПартиям = РезультатЗапросаПоПартиям.Выгрузить();
			НаборРеализованныеТовары.ШапкаДокумента=ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
			НаборРеализованныеТовары.Приход();
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.РеализацияТоваров") И НЕ (Выборка.ХозОперация=Справочники.ХозОперации.АктОбОказанииУслуг ИЛИ Выборка.ХозОперация=Справочники.ХозОперации.РеализацияАгентскихУслуг) Тогда
			
			// спишем реализованные комиссионные товары
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			РезультатЗапросаПоПартиям = ДокументОбъект.Движения.ПартииТоваровКомпании;
			РезультатЗапросаПоПартиям.Прочитать();
			
			НаборРеализованныеТовары.Очистить();
			НаборРеализованныеТовары.ДокументОбъект=ДокументОбъект;
			НаборРеализованныеТовары.Контрагент=ДокументОбъект.Контрагент;
			НаборРеализованныеТовары.ДоговорВзаиморасчетов=ДокументОбъект.ДоговорВзаиморасчетов;
			НаборРеализованныеТовары.РезультатЗапросаПоПартиям = РезультатЗапросаПоПартиям.Выгрузить();
			НаборРеализованныеТовары.ПоБазовомуКоличеству=Истина;
			НаборРеализованныеТовары.ШапкаДокумента=ДокументОбъект.ПолучитьШапкуДокумента(Выборка.Регистратор);
			НаборРеализованныеТовары.Приход();
			
		Иначе
			
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ПартииТоваровКомпании.СкладКомпании,
				|	ПартииТоваровКомпании.Номенклатура,
				|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
				|	ПартииТоваровКомпании.СтатусПартии,
				|	ПартииТоваровКомпании.Партия,
				|	ПартииТоваровКомпании.Количество,
				|	ПартииТоваровКомпании.Сумма,
				|	ПартииТоваровКомпании.СуммаНДС,
				|	ПартииТоваровКомпании.СуммаБезНДС,
				|	ПартииТоваровКомпании.СуммаУпр,
				|	ПартииТоваровКомпании.СуммаНДСУпр,
				|	ПартииТоваровКомпании.СуммаБезНДСУпр,
				|	ПартииТоваровКомпании.ХозОперация,
				|	ПартииТоваровКомпании.СтавкаНДС,
				|	ПартииТоваровКомпании.Проект
				|ИЗ
				|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
				|ГДЕ
				|	ПартииТоваровКомпании.Регистратор = &Регистратор
				|	И ПартииТоваровКомпании.Номенклатура В(&Номенклатура)
				|	И ПартииТоваровКомпании.СтатусПартии = &СтатусПартии
				|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения";
				
				Запрос.УстановитьПараметр("ВидДвижения"  , ВидДвиженияНакопления.Расход);
				Запрос.УстановитьПараметр("Номенклатура" , Выборка.Регистратор.Товары.ВыгрузитьКолонку("Номенклатура"));
				Запрос.УстановитьПараметр("Регистратор"  , Выборка.Регистратор);
				Запрос.УстановитьПараметр("СтатусПартии" , Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
				ТаблДвижений = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
			
			ДетальнаяВыборка = Выборка.Выбрать();
			СтруктураПоиска = Новый Структура("НомерСтроки");
			Для Каждого Запись Из НаборРеализованныеТовары Цикл
				СтруктураПоиска.НомерСтроки = Запись.НомерСтроки;
				
				Пока ДетальнаяВыборка.НайтиСледующий(СтруктураПоиска) Цикл
					
					Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВводОстатковТоваров") Тогда
				
						Если Выборка.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваровПринятыхИПроданных Тогда
							
							Если ЗначениеЗаполнено(Выборка.Регистратор.КурсВалютыУпр) Тогда
								КурсУпр = Выборка.Регистратор.КурсВалютыУпр;
							Иначе
								СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,Выборка.Регистратор.Дата);
								КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
							КонецЕсли;
							
							СтрокаТоваров = Выборка.Регистратор.Товары.Найти(Запись.НомерСтроки,"НомерСтроки");
							Запись.СуммаНДС = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаНДС, Выборка.Регистратор.ВалютаДокумента, Выборка.Регистратор.КурсДокумента, ВалютаРегл, Выборка.Регистратор.Дата), 2);
							Запись.СуммаНДСУпр = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаНДС, Выборка.Регистратор.ВалютаДокумента, Выборка.Регистратор.КурсДокумента, ВалютаУпр, КурсУпр), 2);
							Запись.СуммаБезНДС = ДетальнаяВыборка.СуммаРегл - Запись.СуммаНДС;
							Запись.СуммаБезНДСУпр = ДетальнаяВыборка.СуммаУпр - Запись.СуммаНДСУпр;
							
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
						
						ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
						РезультатГТДПартийТоваровКомпании = ДокументОбъект.Движения.ГТДПартийТоваровКомпании;
						РезультатГТДПартийТоваровКомпании.Прочитать();
						ТаблГТД = РезультатГТДПартийТоваровКомпании.Выгрузить();
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура",Запись.Номенклатура);
						СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры",Запись.ХарактеристикаНоменклатуры);
						СтруктураПоиска.Вставить("Партия",Запись.ДокументПередачи);
						
						МассиваНайденныхДвижений = ТаблДвижений.НайтиСтроки(СтруктураПоиска);
						НадоОприходовать = МассиваНайденныхДвижений[0].Количество;
						СуммаНДС = МассиваНайденныхДвижений[0].СуммаНДС;
						
						Запись.СуммаНДС = СуммаНДС/НадоОприходовать*Запись.Количество;
						Запись.СуммаНДСУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(Запись.СуммаНДС,ВалютаРегл,ВалютаУпр,ДетальнаяВыборка.Период);
						Запись.СуммаБезНДС = Запись.СуммаРегл - Запись.СуммаНДС;
						Запись.СуммаБезНДСУпр = Запись.СуммаУпр - Запись.СуммаНДСУпр;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаписатьОбъект(НаборРеализованныеТовары);
		
	КонецЦикла;
	
КонецПроцедуры //ОбработатьНовыеРесурсыРегистровНакоплений()

&НаСервере
Процедура ОбработатьНовыеРегистрыСведений()
	
	// Обработаем изменения по накопления сумм контрагентов.
	Для Каждого Строка Из НакоплениеСумм Цикл
		НовыйДокумент = Документы.ВводОстатковНакопительныхСумм.СоздатьДокумент();
		НовыйДокумент.ВалютаДокумента = Константы.ВалютаНакопительныхСумм.Получить();
		НовыйДокумент.КурсДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента,ТекущаяДатаСеанса());
		НовыйДокумент.Автор = Справочники.Пользователи.Робот;
		НовыйДокумент.Дата =ТекущаяДатаСеанса();
		НовыйДокумент.ПодразделениеКомпании = Строка.ПодразделениеКомпании;
		НовыйДокумент.Организация = Строка.ПодразделениеКомпании.Организация;
		НовыйДокумент.ХозОперация = Справочники.ХозОперации.ВводОстатковПоНакопительнымСуммам;
		НовыйДокумент.Проведен = Истина;
		Для Каждого СтрокаНакоплений Из Строка.Накопления Цикл
			НоваяСтрока = НовыйДокумент.Накопления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНакоплений);
		КонецЦикла;
		НовыйДокумент.СуммаДокумента = Строка.Накопления.Итог("Сумма");
		ЗаписатьОбъект(НовыйДокумент);
	КонецЦикла;
	
	// Проведем ввод остатков по накопительным суммам, чтобы появились записи в регистре.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВводОстатковНакопительныхСумм.Ссылка
	|ИЗ
	|	Документ.ВводОстатковНакопительныхСумм КАК ВводОстатковНакопительныхСумм
	|ГДЕ
	|	ВводОстатковНакопительныхСумм.Проведен = ИСТИНА";
	Выборка =  Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("Загрузка", ИСТИНА);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", ИСТИНА);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При записи объекта'" +" "+ДокументОбъект+ " "
																+ НСтр("ru = 'возникла ошибка:'") + " "+ПодробноеПредставлениеОшибки(Инфо)));
		КонецПопытки;
	КонецЦикла;
	
	УтверждениеДокументовТЗ = УтверждениеДокументов.Выгрузить();
	НастройкиУтвержденияДокументов = РегистрыСведений.НастройкиУтвержденияДокументов.СоздатьНаборЗаписей();
	НастройкиУтвержденияДокументов.Загрузить(УтверждениеДокументовТЗ);
	ЗаписатьОбъект(НастройкиУтвержденияДокументов);
	
	ИспользоватьУтверждениеДокументов = РегистрыСведений.ИспользоватьУтверждениеДокументов.СоздатьНаборЗаписей();
	УтверждениеДокументовТЗ.Свернуть("Документ");
	ИспользоватьУтверждениеДокументов.Загрузить(УтверждениеДокументовТЗ);
	ЗаписатьОбъект(ИспользоватьУтверждениеДокументов);
	
	ПрефиксацияОбъектовТЗ = ПрефиксацияОбъектов.Выгрузить();
	НаборПрефиксацияОбъектов = РегистрыСведений.ПрефиксацияОбъектов.СоздатьНаборЗаписей();
	НаборПрефиксацияОбъектов.Загрузить(ПрефиксацияОбъектовТЗ);
	ЗаписатьОбъект(НаборПрефиксацияОбъектов);
	
	УчетныеПолитикиТЗ = УчетныеПолитики.Выгрузить();
	УчетныеПолитикиТЗ.Сортировать("Параметр,Период");
	НаборУчетныеПолитики = РегистрыСведений.УчетныеПолитики.СоздатьНаборЗаписей();
	
	// Избавимся от дублей.
	Параметр = Неопределено;
	Значение = Неопределено;
	ОбъектУчетнойПолитики = Неопределено;
	Для Каждого Строка Из УчетныеПолитикиТЗ Цикл 
		Если Параметр = Строка.Параметр И Значение = Строка.Значение И ОбъектУчетнойПолитики = Строка.Объект ИЛИ НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
			Продолжить;
		Иначе
			НоваяЗапись = НаборУчетныеПолитики.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,Строка);
			Параметр = Строка.Параметр;
			Значение = Строка.Значение;
			ОбъектУчетнойПолитики = Строка.Объект;
		КонецЕсли;
	КонецЦикла;
	ЗаписатьОбъект(НаборУчетныеПолитики);
	
	КонтактныеЛицаТЗ = КонтактныеЛица.Выгрузить();
	НаборКонтактныеЛица = РегистрыСведений.КонтактныеЛица.СоздатьНаборЗаписей();
	НаборКонтактныеЛица.Загрузить(КонтактныеЛицаТЗ);
	ЗаписатьОбъект(НаборКонтактныеЛица);
	
КонецПроцедуры //ОбработатьНовыеРегистрыСведений()

#КонецОбласти

#Область ОбработчикиКонтактнойИнформации

&НаСервере
Функция ПолучитьВидЭлементаКонтактнойИнформации(ЭлементКонтактнойИнформации, ОбъектПереноса) 
	
	Если ЭлементКонтактнойИнформации.ПредопределенныйВидКонтактнойИнформации Тогда
		
		Возврат Справочники.ВидыКонтактнойИнформации[ЭлементКонтактнойИнформации.Вид];
		
	Иначе
		
		Возврат Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(ЭлементКонтактнойИнформации.Вид);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьКонтекст(ЭлементКонтактнойИнформации, ОбъектПереноса)
	
	СписокРеквизитов = "
		|ВидКонтактнойИнформации,
		|Страна, КодСтраны, СтранаРоссия, СкрыватьНеактуальныеАдреса,
		|Индекс, ПредставлениеАдреса, ПредставлениеИностранногоАдреса, Комментарий,
		|НаселенныйПункт, КодКлассификатораНаселенногоПункта, НаселенныйПунктДетально, НаселенныйПунктНайденТочно,
		|Улица, КодКлассификатораУлицы, УлицаНайденаТочно,
		|ТипДома, Дом, ДомНайденТочно, ТипСтроения, Строение, ТипПомещения, Помещение,
		|РазрешитьВводАдресаВСвободнойФорме, ПредставлениеАдресаИзменено, ДополнительныеЗдания, ДополнительныеПомещения,
		|";
		
	ПоляРегистраПустые = ПустыеПоляКонтактнойИнформации(ЭлементКонтактнойИнформации);
	Результат = Новый Структура(СписокРеквизитов);
	Результат.ВидКонтактнойИнформации = ПолучитьВидЭлементаКонтактнойИнформации(ЭлементКонтактнойИнформации, ОбъектПереноса);
	Страна = ОпределитьСтрану(ЭлементКонтактнойИнформации);
	Результат.Страна = Страна.Наименование;
	Результат.КодСтраны = Страна.Код;
	Результат.СтранаРоссия = Справочники.СтраныМира.Россия;
	Результат.СкрыватьНеактуальныеАдреса = Ложь;
	Результат.Индекс = ЭлементКонтактнойИнформации.Поле1;
	Результат.ПредставлениеАдреса = СформироватьПредставлениеАдреса(ЭлементКонтактнойИнформации);
	Результат.ПредставлениеИностранногоАдреса = ?(ПоляРегистраПустые И Результат.Страна<>Результат.СтранаРоссия.Наименование, СформироватьПредставлениеАдреса(ЭлементКонтактнойИнформации), "");
	Результат.Комментарий = ЭлементКонтактнойИнформации.Комментарий;
	Результат.НаселенныйПункт = СформироватьНаселенныйПункт(ЭлементКонтактнойИнформации);
	Результат.КодКлассификатораНаселенногоПункта = 0;
	Результат.НаселенныйПунктДетально = СформироватьНаселенныйПунктДетально(ЭлементКонтактнойИнформации);
	Результат.НаселенныйПунктНайденТочно = Ложь;
	Результат.Улица = ЭлементКонтактнойИнформации.Поле6;
	Результат.КодКлассификатораУлицы = 0;
	Результат.УлицаНайденаТочно = Ложь;
	Результат.ТипДома = ЭлементКонтактнойИнформации.ТипДома;
	Результат.Дом = ЭлементКонтактнойИнформации.Поле7;
	Результат.ДомНайденТочно = Истина;
	Результат.ТипСтроения = ЭлементКонтактнойИнформации.ТипКорпуса;
	Результат.Строение = ЭлементКонтактнойИнформации.Поле8;
	Результат.ТипПомещения = ЭлементКонтактнойИнформации.ТипКвартиры;
	Результат.Помещение = ЭлементКонтактнойИнформации.Поле9;
	Результат.РазрешитьВводАдресаВСвободнойФорме = ПоляРегистраПустые;
	Результат.ПредставлениеАдресаИзменено = ПоляРегистраПустые;
	ДополнительнаяТаблица = Новый ТаблицаЗначений;
	ДополнительнаяТаблица.Колонки.Добавить("Тип");
	ДополнительнаяТаблица.Колонки.Добавить("Значение");
	Результат.ДополнительныеЗдания = ДополнительнаяТаблица.Скопировать();
	Результат.ДополнительныеПомещения = ДополнительнаяТаблица.Скопировать();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОпределитьСтрану(ЭлементКонтактнойИнформации)
	
	Если ПустыеПоляКонтактнойИнформации(ЭлементКонтактнойИнформации) Тогда
		
		// Попробуем выдернуть из представления название страны, оно обычно первое.
		Возврат ПолучитьСтрануИзПреставления(ЭлементКонтактнойИнформации.Представление);
	Иначе
		// Значит это адрес в России
		Возврат Справочники.СтраныМира.Россия;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрануИзПреставления(Представление)
	
	Разделитель = ",";
	ПервыйРазделитель = СтрНайти(Представление, Разделитель);
	
	Если ПервыйРазделитель = 0 Тогда
		// У нас представление состоит из одной строки или пустое.
		// Может у нас представление состоит из одной страны?
		ПервыйРазделитель = СтрДлина(Представление)+1;
	КонецЕсли;
	
	НазваниеСтраны = СокрЛП(Лев(Представление,ПервыйРазделитель-1));
	Страна = Справочники.СтраныМира.НайтиПоНаименованию(НазваниеСтраны);
	Если Страна = Неопределено Тогда
		// Не нашли страны, значит считаем, что это Россия.
		Возврат Справочники.СтраныМира.Россия;
	Иначе
		Возврат Страна;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПустыеПоляКонтактнойИнформации(ЭлементКонтактнойИнформации)
	
	Возврат ЭлементКонтактнойИнформации.Поле1   = ""
			И ЭлементКонтактнойИнформации.Поле2 = ""
			И ЭлементКонтактнойИнформации.Поле3 = ""
			И ЭлементКонтактнойИнформации.Поле4 = ""
			И ЭлементКонтактнойИнформации.Поле5 = ""
			И ЭлементКонтактнойИнформации.Поле6 = ""
			И ЭлементКонтактнойИнформации.Поле7 = ""
			И ЭлементКонтактнойИнформации.Поле8 = ""
			И ЭлементКонтактнойИнформации.Поле9 = "" ;
	
КонецФункции

&НаСервере
Функция СформироватьНаселенныйПункт(ЭлементКонтактнойИнформации)
	
	Представление = "";
	
	Если НЕ ЭлементКонтактнойИнформации.Поле2 = "" Тогда
		Представление = ЭлементКонтактнойИнформации.Поле2 ;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле3= "" Тогда
		Представление = Представление + ", " + ЭлементКонтактнойИнформации.Поле3;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле4= "" Тогда
		Представление = Представление + ", " + ЭлементКонтактнойИнформации.Поле4 ;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле5 = "" Тогда
		Представление = Представление + ", " + ЭлементКонтактнойИнформации.Поле5;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция СформироватьНаселенныйПунктДетально(ЭлементКонтактнойИнформации)
	
	НаселенныйПунктДетально = Новый Структура;
	
	НаселенныйПунктДетально.Вставить("Город",СоздатьЭлементНаселенногоПункта(ЭлементКонтактнойИнформации.Поле4, "Город"));
	НаселенныйПунктДетально.Вставить("НаселенныйПункт",СоздатьЭлементНаселенногоПункта(ЭлементКонтактнойИнформации.Поле5, "НаселПункт"));
	НаселенныйПунктДетально.Вставить("Район",СоздатьЭлементНаселенногоПункта(ЭлементКонтактнойИнформации.Поле3,"СвРайМО/Район"));
	НаселенныйПунктДетально.Вставить("Регион",СоздатьЭлементНаселенногоПункта(ЭлементКонтактнойИнформации.Поле2,"СубъектРФ"));
	
	Возврат НаселенныйПунктДетально;
	
КонецФункции

&НаСервере
Функция СоздатьЭлементНаселенногоПункта(ЗначениеЗаполнения, ПутьXPath)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Значение", ЗначениеЗаполнения);
	Результат.Вставить("ПутьXPath", ПутьXPath);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеАдреса(ЭлементКонтактнойИнформации)
	
	Представление = "";
	
	Если НЕ ЭлементКонтактнойИнформации.Поле2 = "" Тогда
		Представление = ЭлементКонтактнойИнформации.Поле2;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле3= "" Тогда
		Представление = Представление +", " + ЭлементКонтактнойИнформации.Поле3;
	КонецЕсли;

	Если НЕ ЭлементКонтактнойИнформации.Поле4= "" Тогда
		Представление = Представление + ", " + ЭлементКонтактнойИнформации.Поле4;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле5= "" Тогда
		Представление = Представление + ", " + ЭлементКонтактнойИнформации.Поле5;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле6= "" Тогда
		Представление = Представление + ", " + ЭлементКонтактнойИнформации.Поле6;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле7= "" Тогда
		Представление = Представление +  ", " + НРег(ЭлементКонтактнойИнформации.ТипДома) + " "+ ЭлементКонтактнойИнформации.Поле7;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле8= "" Тогда
		Представление = Представление + ", " + НРег(ЭлементКонтактнойИнформации.ТипКорпуса) + " "+ ЭлементКонтактнойИнформации.Поле8;
	КонецЕсли;
	
	Если НЕ ЭлементКонтактнойИнформации.Поле9 = "" Тогда
		Представление = Представление + ", " + НРег(ЭлементКонтактнойИнформации.ТипКвартиры) + " "+ ЭлементКонтактнойИнформации.Поле9;
	КонецЕсли;
	
	Если Представление = "" Тогда
		Представление = ЭлементКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст)
	ПространствоИмен = УправлениеКонтактнойИнформациейЛокализация.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") );
	Результат.Комментарий = Контекст.Комментарий;
	
	Результат.Состав = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") );
	Адрес = Результат.Состав;
	
	Адрес.Страна = Строка(Контекст.Страна);
	Если ВРег(Контекст.Страна)<>ВРег(Контекст.СтранаРоссия.Наименование) Тогда
		Адрес.Состав = Контекст.ПредставлениеИностранногоАдреса;
		Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Адрес);
		Возврат Результат;
	КонецЕсли;
	
	Адрес.Состав = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") );
	АдресРФ = Адрес.Состав;
	
	// Населенный пункт
	Если Контекст.КодКлассификатораНаселенногоПункта>0 Тогда
		УправлениеКонтактнойИнформациейАльфаАвто.УстановитьНаселенныйПунктАдресаПоИдентификатору(
			АдресРФ, Контекст.КодКлассификатораНаселенногоПункта);
		// Добавляем возможно непустые данные
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			ЧастьПункта = КлючЗначение.Значение;
			ТекущееЗначение = УправлениеКонтактнойИнформациейАльфаАвто.ПолучитьXDTOРеквизитОбъекта(АдресРФ, ЧастьПункта.ПутьXPath);
			Если ПустаяСтрока(ТекущееЗначение) И (Не ПустаяСтрока(ЧастьПункта.Значение)) Тогда
				Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(АдресРФ, ЧастьПункта.ПутьXPath, ЧастьПункта.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		НетДетальныхДанных = Истина;
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			ЧастьПункта = КлючЗначение.Значение;
			Если Не ПустаяСтрока(ЧастьПункта.Значение) Тогда
				НетДетальныхДанных = Ложь;
			КонецЕсли;
			Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(АдресРФ, ЧастьПункта.ПутьXPath, ЧастьПункта.Значение);
		КонецЦикла;
		Если НетДетальныхДанных Тогда
			АдресРФ.НаселПункт = Контекст.НаселенныйПункт;
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.КодКлассификатораУлицы>0 Тогда
		УправлениеКонтактнойИнформациейАльфаАвто.УстановитьУлицуАдресаПоИдентификатору(АдресРФ, Контекст.КодКлассификатораУлицы);
	Иначе
		АдресРФ.Улица = Контекст.Улица;
	КонецЕсли;
	
	// Здания и помещения
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");
	Если ТипЗнч(Контекст.ДополнительныеЗдания)=ТипТаблицаЗначений Тогда
		ТаблицаЗданий = Контекст.ДополнительныеЗдания.Скопировать();
	Иначе
		ТаблицаЗданий = ДанныеФормыВЗначение(Контекст.ДополнительныеЗдания, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Дом) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипДома;
		СтрокаЗдания.Значение = Контекст.Дом;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Строение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипСтроения;
		СтрокаЗдания.Значение = Контекст.Строение;
	КонецЕсли;
	
	Если ТипЗнч(Контекст.ДополнительныеПомещения)=ТипТаблицаЗначений Тогда
		ТаблицаПомещений = Контекст.ДополнительныеПомещения.Скопировать();
	Иначе
		ТаблицаПомещений = ДанныеФормыВЗначение(Контекст.ДополнительныеПомещения, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Помещение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипПомещения;
		СтрокаЗдания.Значение = Контекст.Помещение;
	КонецЕсли;
	
	Обработки.РасширенныйВводКонтактнойИнформации.ЗданияИПомещенияАдреса(АдресРФ, 
		Новый Структура("Здания, Помещения", ТаблицаЗданий, ТаблицаПомещений));
	
	// Индекс
	Обработки.РасширенныйВводКонтактнойИнформации.ПочтовыйИндексАдреса(АдресРФ, Контекст.Индекс);
	
	// Представление и свободный ввод адреса
	РасчетноеПредставление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Адрес);
	ВведенноеПредставление = СокрЛП(Контекст.ПредставлениеАдреса);
	Если Контекст.РазрешитьВводАдресаВСвободнойФорме И Контекст.ПредставлениеАдресаИзменено Тогда
		Если ПредставленияАдресаОдинаковы(ВведенноеПредставление, РасчетноеПредставление) Тогда
			Результат.Представление = РасчетноеПредставление;
			АдресРФ.Сбросить("Адрес_по_документу");
		Иначе
			Результат.Представление    = ВведенноеПредставление;
			АдресРФ.Адрес_по_документу = ВведенноеПредставление;
		КонецЕсли;
	Иначе
		АдресРФ.Сбросить("Адрес_по_документу");
		Результат.Представление = РасчетноеПредставление;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Сравниваем два представления на эквивалентность
&НаСервереБезКонтекста
Функция ПредставленияАдресаОдинаковы(Знач Представление1, Знач Представление2, Знач ИгнорироватьЗнакНомера=Ложь)
	Возврат ХешПредставления(Представление1, ИгнорироватьЗнакНомера)=ХешПредставления(Представление2, ИгнорироватьЗнакНомера);
КонецФункции

&НаСервереБезКонтекста
Функция ХешПредставления(Знач Представление, Знач ИгнорироватьЗнакНомера=Ложь)
	Результат = СтрЗаменить(Представление, " ", "");
	Если ИгнорироватьЗнакНомера Тогда
		Результат = СтрЗаменить(Результат, "№", "");
	КонецЕсли;
	Возврат ВРег(Результат);
КонецФункции

#КонецОбласти

#КонецОбласти

