/////////////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль формы "Подбор связанных работ":
// - для отображения списка связанных работ пользователю с детализацией по характеристикам и аналогам;
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОформлениеМоделиИКомплектации();
	УстановитьОформлениеДерева();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "Документ") = Неопределено Тогда
		
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Непосредственное открытие для данного объекта запрещено.'");
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "НачальноеЗначениеВыбора") = Неопределено Тогда
		
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Не указаны источники для выбора связанных работ.'");
		
	КонецЕсли;
	
	ЗаполнитьИсточники(Параметры.НачальноеЗначениеВыбора);
	ЗаполнитьОтборы(Параметры);
	НастроитьЗаголовокФормы();
	Отказ = ОбновитьДанныеВФорме();
	НастроитьФорму();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Развернем дерево для просмотра всех связанных элементов с данным источником
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоСвязанныеРаботы");
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Отбор модель" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОтборМодельПриИзмененииНаСервере()
	
	ОбновитьДанныеВФорме();
	
КонецПроцедуры // ОтборМодельПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Отбор модель".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборМодельПриИзменении(Элемент)
	
	ОтборМодельПриИзмененииНаСервере();
	
	// Развернем дерево для просмотра всех связанных элементов с данным источником
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоСвязанныеРаботы");
	
КонецПроцедуры // ОтборМодельПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Отбор вариант комплектации" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОтборВариантКомплектацииПриИзмененииНаСервере()
	
	ОбновитьДанныеВФорме();
	
КонецПроцедуры // ОтборВариантКомплектацииПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Отбор вариант комплектации".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОтборВариантКомплектацииПриИзменении(Элемент)
	
	ОтборВариантКомплектацииПриИзмененииНаСервере();
	
	// Развернем дерево для просмотра всех связанных элементов с данным источником
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоСвязанныеРаботы");
	
КонецПроцедуры // ОтборВариантКомплектацииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязанныеРаботы

&НаКлиенте
Процедура ДеревоСвязанныеРаботыПриАктивизацииСтроки(Элемент)
	
	ОтборСтрок = Новый Структура("Источник,СвязаннаяРабота");
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	Элементы.МоделиИКомплектации.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязанныеРаботыДобавлятьВДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСвязанныеРаботы.ТекущиеДанные;
	
	Если ТекущиеДанные.ДобавлятьВДокумент
		И (ТекущиеДанные.Уровень = "Характеристика" ИЛИ ТекущиеДанные.Уровень = "Аналог") Тогда
		
		Группа = ТекущиеДанные.ПолучитьРодителя();
		СвязаннаяРабота = Группа.ПолучитьРодителя();
		Группа.ДобавлятьВДокумент = Истина;
		СвязаннаяРабота.ДобавлятьВДокумент = Истина;
		
	ИначеЕсли НЕ ТекущиеДанные.ДобавлятьВДокумент
		И ТекущиеДанные.Уровень = "СвязаннаяРабота"
		И НЕ ТекущиеДанные.ЭтоАвторабота Тогда
		
		Для Каждого ЭлементГруппы Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			ЭлементГруппы.ДобавлятьВДокумент = Ложь;
			
			Для Каждого Подчиненный Из ЭлементГруппы.ПолучитьЭлементы() Цикл
				
				Подчиненный.ДобавлятьВДокумент = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМоделиИКомплектации

&НаКлиенте
Процедура МоделиИКомплектацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеДерева = Элементы.ДеревоСвязанныеРаботы.ТекущиеДанные;
	
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		
		ДанныеВыбраннойСтроки = МоделиИКомплектации.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ТекущиеДанныеДерева.Количество <> ДанныеВыбраннойСтроки.Количество Тогда
			
			ТекущиеДанныеДерева.Количество = ДанныеВыбраннойСтроки.Количество;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработка установки/снятия всех флажков документов
//
&НаКлиенте
Процедура УстановкаВсехПометок(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиВДереве(
		ДеревоСвязанныеРаботы,
		Команда.Имя = "УстановитьВыборВсех",
		"ДобавлятьВДокумент");
	
	
КонецПроцедуры // УстановкаВсехПометок()

// Обработчик события возникающего на клиенте при нажатии кнопоки "Выбор"
//
&НаКлиенте
Процедура Выбор(Команда)
	
	Закрыть(ВыбранныеСвязанныеРаботы());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьИсточники(НачальноеЗначениеВыбора)
	
	Для Каждого Источник Из НачальноеЗначениеВыбора Цикл
		
		НовыйИсточник = Источники.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйИсточник, Источник);
		НовыйИсточник.КлючИсточника = Новый УникальныйИдентификатор;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИсточники()

&НаСервере
Процедура ЗаполнитьОтборы(ВходныеПараметры)
	
	// Отбор по типам номенклатуры
	ХозОперация = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация");
	
	Если ЗначениеЗаполнено(ХозОперация) Тогда
		
		ОтборТипыНоменклатуры = Новый ФиксированныйМассив(Справочники.ХозОперации.ПолучитьВидыНоменклатуры(ХозОперация));
		
	КонецЕсли;
	
	// Отборы по модели и варианту комплектации
	Автомобиль = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "Автомобиль");
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		
		ДанныеАвтомобиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, "Модель,ВариантКомплектации");
		ОтборМодель = ДанныеАвтомобиля.Модель;
		ОтборВариантКомплектации = ДанныеАвтомобиля.ВариантКомплектации;
		Возврат;
		
	КонецЕсли;
	
	Модель = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "Модель");
	Комплектация = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "ВариантКомплектации");
	
	Если ЗначениеЗаполнено(Модель) ИЛИ ЗначениеЗаполнено(Комплектация) Тогда
		
		ОтборМодель = Модель;
		ОтборВариантКомплектации = Комплектация;
		
		Если НЕ ЗначениеЗаполнено(Модель) Тогда
			
			ОтборМодель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Комплектация, "Владелец");
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗаголовокФормы()
	
	Если Источники.Количество() = 1 Тогда
		
		Заголовок = Заголовок + " для " + ПредставлениеИсточника(Источники[0].Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеИсточника(Источник)
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("СправочникСсылка.Автоработы") Тогда
		
		ПредставлениеТипа = НСтр("ru = 'автоработы'");
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПредставлениеТипа = НСтр("ru = 'номенклатуры'");
		
	ИначеЕсли  ТипИсточника = Тип("СправочникСсылка.ПричиныОбращений") Тогда
		
		ПредставлениеТипа = НСтр("ru = 'причины обращения'");
		
	ИначеЕсли  ТипИсточника = Тип("СправочникСсылка.ВидыРемонта") Тогда
		
		ПредставлениеТипа = НСтр("ru = 'вида ремонта'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеТипа) Тогда
		
		Возврат ПредставлениеТипа + " <" + Строка(Источник) + ">";
		
	КонецЕсли;
	
	Возврат Строка(Источник);
	
КонецФункции

&НаСервере
Функция ОбновитьДанныеВФорме()
	
	ДеревоСвязанныеРаботы.ПолучитьЭлементы().Очистить();
	МоделиИКомплектации.Очистить();
	
	Если Источники.Количество() = 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Результат = ДанныеСвязанных();
	
	Если НЕ Результат.Пустой Тогда
		
		ДанныеВДерево(Результат);
		
		Если Результат.Свойство("МоделиИКомплектации") Тогда
			
			МоделиИКомплектации.Загрузить(Результат.МоделиИКомплектации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат.Пустой;
	
КонецФункции


&НаСервере
Функция ДанныеСвязанных()

#Область ПодготовкаЗапроса
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	тзИсточники.Источник КАК Источник
	|ПОМЕСТИТЬ Источники
	|ИЗ
	|	&тзИсточники КАК тзИсточники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеРаботы.Авторабота КАК Авторабота,
	|	СвязанныеРаботы.СвязаннаяРабота КАК СвязаннаяРабота,
	|	СвязанныеРаботы.Модель КАК Модель,
	|	СвязанныеРаботы.ВариантКомплектации КАК Комплектация,
	|	СвязанныеРаботы.ВспомогательнаяАвторабота КАК ВспомогательнаяАвторабота,
	|	СвязанныеРаботы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СвязанныеРаботы.Модель = &Модель
	|				И СвязанныеРаботы.ВариантКомплектации = &ВариантКомплектации
	|			ТОГДА 0
	|		КОГДА СвязанныеРаботы.Модель = &Модель
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоретет
	|ПОМЕСТИТЬ СвязанныеРаботыСПриорететом
	|ИЗ
	|	РегистрСведений.СвязанныеРаботы КАК СвязанныеРаботы
	|ГДЕ
	|	СвязанныеРаботы.Авторабота В
	|			(ВЫБРАТЬ
	|				Источники.Источник КАК Источник
	|			ИЗ
	|				Источники КАК Источники)
	|	И (СвязанныеРаботы.Модель = &Модель
	|			ИЛИ СвязанныеРаботы.Модель = ЗНАЧЕНИЕ(Справочник.Модели.ПустаяСсылка))
	|	И (СвязанныеРаботы.ВариантКомплектации = &ВариантКомплектации
	|			ИЛИ СвязанныеРаботы.ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка))
	|	И ВЫБОР
	|			КОГДА СвязанныеРаботы.СвязаннаяРабота ССЫЛКА Справочник.Номенклатура
	|				ТОГДА ВЫРАЗИТЬ(СвязанныеРаботы.СвязаннаяРабота КАК Справочник.Номенклатура).ВидНоменклатуры В (&ОтборПоТипу)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТСвязаннаяНоменклатура.Номенклатура,
	|	ТСвязаннаяНоменклатура.СвязаннаяНоменклатура,
	|	ТСвязаннаяНоменклатура.Модель,
	|	ТСвязаннаяНоменклатура.ВариантКомплектации,
	|	ЛОЖЬ,
	|	ТСвязаннаяНоменклатура.Количество,
	|	ВЫБОР
	|		КОГДА ТСвязаннаяНоменклатура.Модель = &Модель
	|				И ТСвязаннаяНоменклатура.ВариантКомплектации = &ВариантКомплектации
	|			ТОГДА 0
	|		КОГДА ТСвязаннаяНоменклатура.Модель = &Модель
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.СвязаннаяНоменклатура КАК ТСвязаннаяНоменклатура
	|ГДЕ
	|	ТСвязаннаяНоменклатура.Номенклатура В
	|			(ВЫБРАТЬ
	|				Источники.Источник КАК Источник
	|			ИЗ
	|				Источники КАК Источники)
	|	И (ТСвязаннаяНоменклатура.Модель = &Модель
	|			ИЛИ ТСвязаннаяНоменклатура.Модель = ЗНАЧЕНИЕ(Справочник.Модели.ПустаяСсылка))
	|	И (ТСвязаннаяНоменклатура.ВариантКомплектации = &ВариантКомплектации
	|			ИЛИ ТСвязаннаяНоменклатура.ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка))
	|	И ТСвязаннаяНоменклатура.СвязаннаяНоменклатура.ВидНоменклатуры В(&ОтборПоТипу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СервисныеКампанииАвтоработы.Ссылка,
	|	СервисныеКампанииАвтоработы.Авторабота,
	|	СервисныеКампанииАвтоработы.Ссылка.Модель,
	|	СервисныеКампанииАвтоработы.Ссылка.ВариантКомплектации,
	|	СервисныеКампанииАвтоработы.ВспомогательнаяАвторабота,
	|	СервисныеКампанииАвтоработы.Количество,
	|	ВЫБОР
	|		КОГДА СервисныеКампанииАвтоработы.Ссылка.Модель = &Модель
	|				И СервисныеКампанииАвтоработы.Ссылка.ВариантКомплектации = &ВариантКомплектации
	|			ТОГДА 0
	|		КОГДА СервисныеКампанииАвтоработы.Ссылка.Модель = &Модель
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|ИЗ
	|	Справочник.СервисныеКампании.Автоработы КАК СервисныеКампанииАвтоработы
	|ГДЕ
	|	СервисныеКампанииАвтоработы.Ссылка В
	|			(ВЫБРАТЬ
	|				Источники.Источник КАК Источник
	|			ИЗ
	|				Источники КАК Источники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеРаботыСПриорететом.Авторабота КАК Авторабота,
	|	СвязанныеРаботыСПриорететом.СвязаннаяРабота КАК СвязаннаяРабота,
	|	МИНИМУМ(СвязанныеРаботыСПриорететом.Приоретет) КАК Приоретет
	|ПОМЕСТИТЬ СвязанныеРаботыСПриорететомСгруппированная
	|ИЗ
	|	СвязанныеРаботыСПриорететом КАК СвязанныеРаботыСПриорететом
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеРаботыСПриорететом.Авторабота,
	|	СвязанныеРаботыСПриорететом.СвязаннаяРабота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыРемонтаАвтоработы.Ссылка КАК Источник,
	|	ВидыРемонтаАвтоработы.Авторабота КАК СвязаннаяРабота,
	|	ВидыРемонтаАвтоработы.Авторабота.Артикул КАК Артикул,
	|	ВидыРемонтаАвтоработы.Авторабота.Наименование КАК Наименование,
	|	ВидыРемонтаАвтоработы.ВспомогательнаяАвторабота КАК ВспомогательнаяАвторабота,
	|	ВидыРемонтаАвтоработы.Авторабота.ВидИспользования = ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияАвторабот.ПланированиеИПроизводство) КАК ДоступностьРеквизитаВспомогательнойРаботы,
	|	ИСТИНА КАК ЭтоАвторабота,
	|	ВидыРемонтаАвтоработы.Количество КАК Количество
	|ПОМЕСТИТЬ СвязанныеРаботы
	|ИЗ
	|	Справочник.ВидыРемонта.Автоработы КАК ВидыРемонтаАвтоработы
	|ГДЕ
	|	ВидыРемонтаАвтоработы.Ссылка В
	|			(ВЫБРАТЬ
	|				Источники.Источник КАК Источник
	|			ИЗ
	|				Источники КАК Источники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязанныеРаботыСПриорететомСгруппированная.Авторабота,
	|	СвязанныеРаботыСПриорететомСгруппированная.СвязаннаяРабота,
	|	СвязанныеРаботыСПриорететомСгруппированная.СвязаннаяРабота.Артикул,
	|	СвязанныеРаботыСПриорететомСгруппированная.СвязаннаяРабота.Наименование,
	|	СвязанныеРаботыСПриорететом.ВспомогательнаяАвторабота,
	|	ВЫРАЗИТЬ(СвязанныеРаботыСПриорететомСгруппированная.СвязаннаяРабота КАК Справочник.Автоработы).ВидИспользования = ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияАвторабот.ПланированиеИПроизводство),
	|	СвязанныеРаботыСПриорететомСгруппированная.СвязаннаяРабота ССЫЛКА Справочник.Автоработы,
	|	СвязанныеРаботыСПриорететом.Количество
	|ИЗ
	|	СвязанныеРаботыСПриорететомСгруппированная КАК СвязанныеРаботыСПриорететомСгруппированная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвязанныеРаботыСПриорететом КАК СвязанныеРаботыСПриорететом
	|		ПО СвязанныеРаботыСПриорететомСгруппированная.Авторабота = СвязанныеРаботыСПриорететом.Авторабота
	|			И СвязанныеРаботыСПриорететомСгруппированная.СвязаннаяРабота = СвязанныеРаботыСПриорететом.СвязаннаяРабота
	|			И СвязанныеРаботыСПриорететомСгруппированная.Приоретет = СвязанныеРаботыСПриорететом.Приоретет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеРаботы.Источник КАК Источник,
	|	СвязанныеРаботы.СвязаннаяРабота КАК СвязаннаяРабота,
	|	СвязанныеРаботы.Артикул КАК Артикул,
	|	СвязанныеРаботы.Наименование КАК Наименование,
	|	СвязанныеРаботы.ВспомогательнаяАвторабота КАК ВспомогательнаяАвторабота,
	|	СвязанныеРаботы.ДоступностьРеквизитаВспомогательнойРаботы КАК ДоступностьРеквизитаВспомогательнойРаботы,
	|	СвязанныеРаботы.ЭтоАвторабота КАК ЭтоАвторабота,
	|	СвязанныеРаботы.Количество КАК Количество
	|ИЗ
	|	СвязанныеРаботы КАК СвязанныеРаботы
	|ИТОГИ ПО
	|	Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(СвязанныеРаботы.СвязаннаяРабота КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(СвязанныеРаботы.СвязаннаяРабота КАК Справочник.Номенклатура).ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(СвязанныеРаботы.СвязаннаяРабота КАК Справочник.Номенклатура).АртикулДляПоиска КАК АртикулДляПоиска,
	|	ВЫРАЗИТЬ(СвязанныеРаботы.СвязаннаяРабота КАК Справочник.Номенклатура).Производитель КАК Производитель
	|ПОМЕСТИТЬ НайденаяНоменклатура
	|ИЗ
	|	СвязанныеРаботы КАК СвязанныеРаботы
	|ГДЕ
	|	НЕ СвязанныеРаботы.ЭтоАвторабота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ ДоступныеХарактеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В
	|			(ВЫБРАТЬ
	|				НайденаяНоменклатура.Номенклатура КАК Номенклатура
	|			ИЗ
	|				НайденаяНоменклатура КАК НайденаяНоменклатура
	|			ГДЕ
	|				НайденаяНоменклатура.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик <> 3
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				НайденаяНоменклатура.ТипНоменклатуры
	|			ИЗ
	|				НайденаяНоменклатура КАК НайденаяНоменклатура
	|			ГДЕ
	|				НайденаяНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик <> 3)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденаяНоменклатура.Номенклатура КАК Владелец,
	|	ДоступныеХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	НайденаяНоменклатура КАК НайденаяНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеХарактеристики КАК ДоступныеХарактеристики
	|		ПО (НайденаяНоменклатура.Номенклатура = ДоступныеХарактеристики.Владелец
	|				ИЛИ НайденаяНоменклатура.ТипНоменклатуры = ДоступныеХарактеристики.Владелец)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристика)
	|ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденаяНоменклатура.Номенклатура КАК Номенклатура,
	|	ГруппыАналогов.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	НайденаяНоменклатура.АртикулДляПоиска КАК АртикулДляПоиска,
	|	НайденаяНоменклатура.Производитель КАК Производитель
	|ПОМЕСТИТЬ НоменклатураСГруппами
	|ИЗ
	|	НайденаяНоменклатура КАК НайденаяНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
	|		ПО НайденаяНоменклатура.АртикулДляПоиска = ГруппыАналогов.АртикулДляПоиска
	|			И НайденаяНоменклатура.Производитель = ГруппыАналогов.Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСГруппами.Номенклатура КАК Номенклатура,
	|	ГруппыАналогов.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ГруппыАналогов.Производитель КАК Производитель
	|ПОМЕСТИТЬ АналогиБезСсылок
	|ИЗ
	|	НоменклатураСГруппами КАК НоменклатураСГруппами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
	|		ПО НоменклатураСГруппами.ИдентификаторГруппы = ГруппыАналогов.ИдентификаторГруппы
	|			И (НЕ(НоменклатураСГруппами.АртикулДляПоиска = ГруппыАналогов.АртикулДляПоиска
	|					И НоменклатураСГруппами.Производитель = ГруппыАналогов.Производитель))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиБезСсылок.Номенклатура КАК Номенклатура,
	|	НоменклатураСпр.Ссылка КАК Аналог,
	|	НоменклатураСпр.Артикул КАК Артикул,
	|	НоменклатураСпр.Наименование КАК Наименование
	|ИЗ
	|	АналогиБезСсылок КАК АналогиБезСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО АналогиБезСсылок.АртикулДляПоиска = НоменклатураСпр.АртикулДляПоиска
	|			И АналогиБезСсылок.Производитель = НоменклатураСпр.Производитель
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Аналог)
	|ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеРаботыСПриорететом.Авторабота КАК Источник,
	|	СвязанныеРаботыСПриорететом.СвязаннаяРабота КАК СвязаннаяРабота,
	|	СвязанныеРаботыСПриорететом.Модель КАК Модель,
	|	СвязанныеРаботыСПриорететом.Комплектация КАК Комплектация,
	|	СвязанныеРаботыСПриорететом.Количество КАК Количество
	|ИЗ
	|	СвязанныеРаботыСПриорететом КАК СвязанныеРаботыСПриорететом");
	
	Запрос.УстановитьПараметр("тзИсточники", Источники.Выгрузить(, "Источник"));
	Запрос.УстановитьПараметр("Модель", ОтборМодель);
	Запрос.УстановитьПараметр("ВариантКомплектации", ОтборВариантКомплектации);
	Запрос.УстановитьПараметр("ОтборПоТипу", ОтборТипыНоменклатуры);
	
#КонецОбласти
	
	Результаты = Запрос.ВыполнитьПакет();
	Возврат РазобратьАналоги(
		Результаты[10],
		РазобратьХарактеристики(
			Результаты[7],
			РазобратьСвязанные(
				Результаты[4],
				Результаты[11]
			)
		)
	);
	
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьСвязанные(ДанныеЗапроса, МоделиИКомплектации)
	
	Если ДанныеЗапроса.Пустой() Тогда
		
		Возврат Новый Структура("Пустой", Истина);
		
	КонецЕсли;
	
	// сформируем данные по связанным работам
	Результат = Новый Структура("Пустой", Ложь);
	СвязанныеРаботыОписание = Новый Соответствие;
	ВыборкаИсточники = ДанныеЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИсточники.Следующий() Цикл
		
		НаборСвязанных = Новый Массив;
		Выборка = ВыборкаИсточники.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеСвязанного = Новый Структура("Источник,СвязаннаяРабота,Артикул,Наименование,ВспомогательнаяАвторабота,ДоступностьРеквизитаВспомогательнойРаботы,ЭтоАвторабота,Количество");
			ЗаполнитьЗначенияСвойств(ОписаниеСвязанного, Выборка);
			НаборСвязанных.Добавить(ОписаниеСвязанного);
			
		КонецЦикла;
		
		СвязанныеРаботыОписание.Вставить(ВыборкаИсточники.Источник, НаборСвязанных);
		
	КонецЦикла;
	
	Результат.Вставить("Связанные", СвязанныеРаботыОписание);
	
	Если НЕ МоделиИКомплектации.Пустой() Тогда
		
		Результат.Вставить("МоделиИКомплектации", МоделиИКомплектации.Выгрузить());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьХарактеристики(ДанныеЗапроса, Результат)
	
	Если Результат.Пустой ИЛИ ДанныеЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
		
	Характеристики = Новый Соответствие;
	ВыборкаВладельцы = ДанныеЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВладельцы.Следующий() Цикл
		
		Если ВыборкаВладельцы.Характеристика > 0 Тогда
			
			Выборка = ВыборкаВладельцы.Выбрать();
			ХарактеристикиПоВладельцу = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ХарактеристикиПоВладельцу.Добавить(Выборка.Характеристика);
				
			КонецЦикла;
			
			Характеристики.Вставить(ВыборкаВладельцы.Владелец, ХарактеристикиПоВладельцу);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Характеристики", Характеристики);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьАналоги(ДанныеЗапроса, Результат)
	
	Если Результат.Пустой ИЛИ ДанныеЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Аналоги = Новый Соответствие;
	ВыборкаНоменклатура = ДанныеЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Если ВыборкаНоменклатура.Аналог > 0 Тогда
			
			Выборка = ВыборкаНоменклатура.Выбрать();
			АналогиНоменклатуры = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ОписаниеАналога = Новый Структура("Аналог,Артикул,Наименование");
				ЗаполнитьЗначенияСвойств(ОписаниеАналога, Выборка);
				АналогиНоменклатуры.Добавить(ОписаниеАналога);
				
			КонецЦикла;
			
			Аналоги.Вставить(ВыборкаНоменклатура.Номенклатура, АналогиНоменклатуры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Аналоги", Аналоги);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДанныеВДерево(Данные)
	
	Если Источники.Количество() > 1 Тогда // будем отображать источники в дереве
		
		Для каждого Источник Из Источники Цикл
			
			РасположитьДанныеПоИсточникуВДереве(Источник.Источник, Данные, РасположитьИсточникВДереве(Источник, Данные));
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	РасположитьДанныеПоИсточникуВДереве(Источники[0].Источник, Данные, ДеревоСвязанныеРаботы.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Функция РасположитьИсточникВДереве(Источник, Данные)
	
	Если Данные.Связанные.Получить(Источник.Источник) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = ДеревоСвязанныеРаботы.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	НоваяСтрока.Уровень = "Источник";
	НоваяСтрока.Наименование = Строка(Источник.Источник);
	НоваяСтрока.Картинка = БиблиотекаКартинок.ПодчиненныеДокументы;
	Возврат НоваяСтрока.ПолучитьЭлементы();
	
КонецФункции

&НаСервере
Процедура РасположитьДанныеПоИсточникуВДереве(Источник, Данные, Контейнер)
	
	Состав = Данные.Связанные.Получить(Источник);
	
	Если Контейнер = Неопределено ИЛИ Состав = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Характеристики = ПолучитьЗначениеПараметраСтруктуры(Данные, "Характеристики");
	Аналоги = ПолучитьЗначениеПараметраСтруктуры(Данные, "Аналоги");
	
	Для Каждого Элемент Из Состав Цикл
		
		НоваяСтрока = Контейнер.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Уровень = "СвязаннаяРабота";
		
		// расположим характеристики и аналоги
		Если НЕ НоваяСтрока.ЭтоАвторабота Тогда
			
			Если ЗначениеЗаполнено(Характеристики) Тогда
				
				РасположитьХарактеристики(Характеристики.Получить(НоваяСтрока.СвязаннаяРабота), НоваяСтрока);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Аналоги) Тогда
				
				РасположитьАналоги(Аналоги.Получить(НоваяСтрока.СвязаннаяРабота), НоваяСтрока);
				
			КонецЕсли;
			
			НоваяСтрока.Картинка = БиблиотекаКартинок.ПрочиеПользовательскиеНастройки;
			
		Иначе
			
			НоваяСтрока.Картинка = БиблиотекаКартинок.Настройка;
			
		КонецЕсли;
		
		НоваяСтрока.ДобавлятьВДокумент = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасположитьХарактеристики(Характеристики, Контейнер)
	
	Если НЕ ЗначениеЗаполнено(Характеристики) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// добавим группу
	Группа = Контейнер.ПолучитьЭлементы().Добавить();
	Группа.Наименование = "ХАРАКТЕРИСТИКИ";
	Группа.Уровень = "ГруппаХарактеристик";
	Группа.Картинка = БиблиотекаКартинок.Папка;
	ЭлементыГруппы = Группа.ПолучитьЭлементы();
	
	Для Каждого Характеристика Из Характеристики Цикл
		
		НоваяСтрока = ЭлементыГруппы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Контейнер,, "Артикул,Наименование");
		НоваяСтрока.Характеристика = Характеристика;
		НоваяСтрока.Наименование = Строка(Характеристика);
		НоваяСтрока.Уровень = "Характеристика";
		НоваяСтрока.Картинка = БиблиотекаКартинок.Реквизит;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасположитьАналоги(Аналоги, Контейнер)
	
	Если НЕ ЗначениеЗаполнено(Аналоги) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Группа = Контейнер.ПолучитьЭлементы().Добавить();
	Группа.Наименование = "АНАЛОГИ";
	Группа.Уровень = "ГруппаАналогов";
	Группа.Картинка = БиблиотекаКартинок.Папка;
	ЭлементыГруппы = Группа.ПолучитьЭлементы();
	
	Для каждого Аналог Из Аналоги Цикл
		
		НоваяСтрока = ЭлементыГруппы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Контейнер);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Аналог);
		НоваяСтрока.Уровень = "Аналог";
		НоваяСтрока.Картинка = БиблиотекаКартинок.Реквизит;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "МоделиИКомплектации", "Видимость", МоделиИКомплектации.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеМоделиИКомплектации()
	
	// модель
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МоделиИКомплектации.Модель");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МоделиИКомплектацииМодель.Имя);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для любой модели>'"));
	
	// комплектация
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МоделиИКомплектации.Комплектация");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МоделиИКомплектацииКомплектация.Имя);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для любой комплектации>'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДерева()
	
	Уровни = Новый Структура;
	
	Уровни.Вставить("Источник", Новый Массив);
	Уровни.Источник.Добавить(Элементы.ДеревоСвязанныеРаботыДобавлятьВДокумент.Имя);
	Уровни.Источник.Добавить(Элементы.ДеревоСвязанныеРаботыАртикул.Имя);
	
	Уровни.Вставить("ГруппаХарактеристик", Новый Массив);
	Уровни.ГруппаХарактеристик.Добавить(Элементы.ДеревоСвязанныеРаботыДобавлятьВДокумент.Имя);
	Уровни.ГруппаХарактеристик.Добавить(Элементы.ДеревоСвязанныеРаботыАртикул.Имя);
	
	Уровни.Вставить("Характеристика", Новый Массив);
	Уровни.Характеристика.Добавить(Элементы.ДеревоСвязанныеРаботыАртикул.Имя);
	
	Уровни.Вставить("ГруппаАналогов", Новый Массив);
	Уровни.ГруппаАналогов.Добавить(Элементы.ДеревоСвязанныеРаботыДобавлятьВДокумент.Имя);
	Уровни.ГруппаАналогов.Добавить(Элементы.ДеревоСвязанныеРаботыАртикул.Имя);
	
	Для Каждого КлючЗначение Из Уровни Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСвязанныеРаботы.Уровень");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = КлючЗначение.Ключ;
		
		Для Каждого Поле Из КлючЗначение.Значение Цикл
			
			Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Поле);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыделятьЖирным = Новый СписокЗначений;
	ВыделятьЖирным.Добавить(
		?(ПолучитьЗначениеПараметраСтруктуры(Параметры, "НачальноеЗначениеВыбора", Новый Массив).Количество() > 1,
		"Источник",
		"СвязаннаяРабота"));
	ВыделятьЖирным.Добавить("ГруппаХарактеристик");
	ВыделятьЖирным.Добавить("ГруппаАналогов");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ГруппыСвязанныхРабот);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСвязанныеРаботы.Уровень");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение = ВыделятьЖирным;
	
	Элемент
		.Поля
		.Элементы
		.Добавить()
		.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСвязанныеРаботыАртикул.Имя);
	
	Элемент
		.Поля
		.Элементы
		.Добавить()
		.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСвязанныеРаботыНаименование.Имя);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСвязанныеРаботы.ДоступностьРеквизитаВспомогательнойРаботы");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент
		.Поля
		.Элементы
		.Добавить()
		.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСвязанныеРаботыВспомогательнаяАвторабота.Имя);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеСвязанныеРаботы()
	
	Выбранные = Новый Массив;
	
	Если Источники.Количество() = 1 Тогда
		
		ДанныеИсточника = ОписаниеИсточника(Источники[0]);
		СоставИсточника = СоставИсточника(ДеревоСвязанныеРаботы.ПолучитьЭлементы());
		
		Если СоставИсточника = Неопределено Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ДанныеИсточника.Вставить("Данные", СоставИсточника);
		Выбранные.Добавить(ДанныеИсточника);
		
		Возврат Выбранные;
		
	КонецЕсли;
	
	Для Каждого Источник Из ДеревоСвязанныеРаботы.ПолучитьЭлементы() Цикл
		
		НайденныеИсточники = Источники.НайтиСтроки(Новый Структура("Источник", Источник.Источник));
		ДанныеИсточника = ОписаниеИсточника(НайденныеИсточники[0]);
		СоставИсточника = СоставИсточника(Источник.ПолучитьЭлементы());
		
		Если СоставИсточника <> Неопределено Тогда
			
			ДанныеИсточника.Вставить("Данные", СоставИсточника);
			Выбранные.Добавить(ДанныеИсточника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(Выбранные.Количество() = 0, Неопределено, Выбранные);
	
КонецФункции

&НаКлиенте
Функция ОписаниеИсточника(Источник)
	
	ОписаниеИсточника = Новый Структура("Источник,КлючСтроки");
	ЗаполнитьЗначенияСвойств(ОписаниеИсточника, Источник);
	
	Если ЗначениеЗаполнено(Контейнер) Тогда
		
		ОписаниеИсточника.Вставить("Контейнер", Контейнер);
		
	КонецЕсли;
	
	Возврат ОписаниеИсточника;
	
КонецФункции

&НаКлиенте
Функция СоставИсточника(Коллекция)
	
	Выбранные = Новый Массив;
	
	Для Каждого Элемент Из Коллекция Цикл
		
		Если Элемент.ДобавлятьВДокумент Тогда
			
			Если Элемент.ЭтоАвторабота Тогда
				
				ОписаниеСвязанного = Новый Структура("СвязаннаяРабота,Количество,ВспомогательнаяАвторабота,ЭтоАвторабота");
				ЗаполнитьЗначенияСвойств(ОписаниеСвязанного, Элемент);
				Выбранные.Добавить(ОписаниеСвязанного);
				
			Иначе
				
				СоставНоменклатуры = Элемент.ПолучитьЭлементы();
				
				Если СоставНоменклатуры.Количество() > 0 Тогда
					
					ДанныеПоХарактеристикам = Новый Массив;
					ДанныеПоАналогам = Новый Массив;
					
					Для Каждого Группа Из СоставНоменклатуры Цикл
						
						Если Группа.ДобавлятьВДокумент Тогда
							
							Если Группа.Уровень = "ГруппаХарактеристик" Тогда
								
								Для Каждого Характеристика Из Группа.ПолучитьЭлементы() Цикл
									
									Если Характеристика.ДобавлятьВДокумент Тогда
										
										ОписаниеХарактеристики = Новый Структура(
											"СвязаннаяРабота,Характеристика,Количество,ВспомогательнаяАвторабота,ЭтоАвторабота");
										ЗаполнитьЗначенияСвойств(ОписаниеХарактеристики, Характеристика);
										ДанныеПоХарактеристикам.Добавить(ОписаниеХарактеристики);
										
									КонецЕсли;
									
								КонецЦикла;
								
							ИначеЕсли Группа.Уровень = "ГруппаАналогов" Тогда
								
								Для Каждого Аналог Из Группа.ПолучитьЭлементы() Цикл
									
									Если Аналог.ДобавлятьВДокумент Тогда
										ОписаниеАналога = Новый Структура("СвязаннаяРабота,Количество,ВспомогательнаяАвторабота,ЭтоАвторабота");
										ЗаполнитьЗначенияСвойств(ОписаниеАналога, Аналог);
										ОписаниеАналога.СвязаннаяРабота = Аналог.Аналог;
										ДанныеПоАналогам.Добавить(ОписаниеАналога);
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ДанныеПоХарактеристикам.Количество() = 0 И ДанныеПоАналогам.Количество() = 0 Тогда
						
						ОписаниеСвязанного = Новый Структура("СвязаннаяРабота,Количество,ВспомогательнаяАвторабота,ЭтоАвторабота");
						ЗаполнитьЗначенияСвойств(ОписаниеСвязанного, Элемент);
						Выбранные.Добавить(ОписаниеСвязанного);
						
					Иначе
						
						Если ДанныеПоХарактеристикам.Количество() > 0 Тогда
							
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Выбранные, ДанныеПоХарактеристикам);
							
						КонецЕсли;
						
						Если ДанныеПоАналогам.Количество() > 0 Тогда
							
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Выбранные, ДанныеПоАналогам);
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ОписаниеСвязанного = Новый Структура("СвязаннаяРабота,Количество,ВспомогательнаяАвторабота,ЭтоАвторабота");
					ЗаполнитьЗначенияСвойств(ОписаниеСвязанного, Элемент);
					Выбранные.Добавить(ОписаниеСвязанного);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(Выбранные.Количество() > 0, Выбранные, Неопределено);
	
КонецФункции

#КонецОбласти
