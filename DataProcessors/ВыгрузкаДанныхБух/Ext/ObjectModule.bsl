// Модуль обработки ВыгрузкаДанныхБух 2004 - 2005 (CheR, SirK 08.06.2005), 2007 PoAr, 2008 - 2009 OvcM.

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

#Область ОписаниеПеременных

Перем ОбщиеТипы Экспорт; // Типы общие для различных конфигураций
Перем СпецТипы Экспорт; // Типы из разных конфигураций
Перем ЕстьТаблицаСписанийАвтомобилей Экспорт; // Булево, признак наличия таблицы списаний автомобилей

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура инициации/выполнения запроса выгружаемых документов
Процедура Выгрузить(СтруктураРезультатаВыгрузки, спКонтрагенты, спПодразделения) Экспорт
	
	ЕстьОтборПоКонтрагенту = спКонтрагенты.Количество() > 0;
	ЕстьОтборПоПодразделению = спПодразделения.Количество() > 0;
	ТекстЗапроса		= "";
	ТекстЗапросаСпец	= "";
	ПервыйЗапросСпец	= Истина;
	ПервыйЗапрос		= Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ТекСтрока Из ВидыДокументов Цикл
		Если ТекСтрока.Пометка = Неопределено Тогда ТекСтрока.Пометка = Ложь КонецЕсли;
		Состав = Метаданные.ОбщиеРеквизиты.Организация.Состав.Найти(Метаданные.Документы[ТекСтрока.объект]);
		СоставРегУчет = Метаданные.ОбщиеРеквизиты.РегламентированныйУчет.Состав.Найти(Метаданные.Документы[ТекСтрока.объект]);
		СоставПодразделение = Метаданные.ОбщиеРеквизиты.ПодразделениеКомпании.Состав.Найти(Метаданные.Документы[ТекСтрока.объект]);
		Если (ТекСтрока.Пометка) И (спДокументовСпец.НайтиПоЗначению(ТекСтрока.Объект) <> Неопределено) Тогда 
			// Проверим на наличие реквизита Организация

			// объединим таблицы документов.
			Если Не(ПустаяСтрока(ТекстЗапросаСпец)) Тогда 
				ТекстЗапросаСпец = ТекстЗапросаСпец + "
				|ОБЪЕДИНИТЬ ВСЕ";
				ПервыйЗапросСпец	= Ложь;
			КонецЕсли;
			
			СтрУсловийСпец = "";
			Если ТекСтрока.ЕстьКонтрагент Тогда
				СтрУсловийСпец = ?(ЕстьОтборПоКонтрагенту, " ГДЕ
				|	Документ.Контрагент В (&спКонтрагент)", "");
			КонецЕсли;
			
			Если ТекСтрока.Объект <> "ЗаказНаряд" Тогда
				Если ЗначениеЗаполнено(НачалоПериода) Тогда
					СтрУсловийСпец = СтрУсловийСпец + ?(СтрУсловийСпец = "", "ГДЕ 
					|	", "
					|	И ") + "(Дата >= &НачалоПериода)";
				КонецЕсли;	
				Если ЗначениеЗаполнено(КонецПериода) Тогда
					СтрУсловийСпец = СтрУсловийСпец + ?(СтрУсловийСпец = "", "ГДЕ
					|	", "
					|	И ") + "(Дата <= &КонецПериода)";
				КонецЕсли;
			Иначе
				
				СтрУсловий = СтрУсловий + ?(СтрУсловий = "",  "ГДЕ
				|	", "
				|	И ") + " Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.закрыт)";
				
				Если ЗначениеЗаполнено(НачалоПериода) Тогда
					СтрУсловийСпец = СтрУсловийСпец + ?(СтрУсловийСпец = "", "ГДЕ
					|	", "
					|	И ") + "(ДатаЗакрытия >= &НачалоПериода)";
				КонецЕсли;	
				Если ЗначениеЗаполнено(КонецПериода) Тогда
					СтрУсловийСпец = СтрУсловийСпец + ?(СтрУсловийСпец = "", "ГДЕ
					|	", "
					|	И ") + "(ДатаЗакрытия <= &КонецПериода)";
				КонецЕсли;

			КонецЕсли;
		
			Если ЗначениеЗаполнено(ВыбОрганизация) Тогда
				Если Состав <> Неопределено И Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
					СтрУсловийСпец = СтрУсловийСпец + ?(СтрУсловийСпец = "", "ГДЕ
					|	", "
					|	И ") + "(Организация = &Организация)";
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьОтборПоПодразделению
				И СоставПодразделение <> Неопределено
				И СоставПодразделение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
				СтрУсловийСпец = СтрУсловийСпец + ?(СтрУсловийСпец = "", "ГДЕ
				|	", "
				|	И ") + "(ПодразделениеКомпании В (&спПодразделение))";
			КонецЕсли;
			
			ТекстЗапросаСпец = ТекстЗапросаСпец + "
			|ВЫБРАТЬ
			|	""" + ТекСтрока.Объект + """ "+?(ПервыйЗапросСпец, " КАК Вид","")+",
			|	Документ.Дата "+?(ПервыйЗапросСпец," КАК Дата","")+",
			|	Документ.Ссылка " + ?(ПервыйЗапросСпец, " КАК Ссылка", "")
			+ ?(Не ЗначениеЗаполнено(ВыбОрганизация) Или (Состав <> Неопределено И Состав.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать), ",
			|	""Организация""", ",
			|	Документ.Организация "+?(ПервыйЗапросСпец," КАК Организация","")) + "
			|ИЗ 
			|	Документ." + ТекСтрока.Объект + " КАК Документ 
			|" + СтрУсловийСпец;
			
			Продолжить;
		КонецЕсли;	
		
		Если Не ТекСтрока.Пометка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// объединим таблицы документов.
		Если Не(ПустаяСтрока(ТекстЗапроса)) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ";
			ПервыйЗапрос	= Ложь;
		КонецЕсли;
		
		СтрУсловий = "";
		Если ТекСтрока.ЕстьКонтрагент Тогда
			СтрУсловий = СтрУсловий + ?(ЕстьОтборПоКонтрагенту, " ГДЕ
			|	Документ.Контрагент В(&спКонтрагент)", "");
		КонецЕсли;
		
		Если ТекСтрока.Объект <> "ЗаказНаряд" Тогда
			Если ЗначениеЗаполнено(НачалоПериода) Тогда
				СтрУсловий = СтрУсловий + ?(СтрУсловий = "", " ГДЕ
				|	", "
				|	И ") + "(Дата >= &НачалоПериода)";
			КонецЕсли;	
			Если ЗначениеЗаполнено(КонецПериода) Тогда
				СтрУсловий = СтрУсловий + ?(СтрУсловий = "",  "ГДЕ
				|	", "
				|	И ") + "(Дата <= &КонецПериода)";
			КонецЕсли;
		Иначе
			
			СтрУсловий = СтрУсловий + ?(СтрУсловий = "",  "ГДЕ
			|	", "
			|	И ") + " Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.закрыт)";
                                                    
			Если ЗначениеЗаполнено(НачалоПериода) Тогда
				СтрУсловий = СтрУсловий + ?(СтрУсловий = "", " ГДЕ
				|	", "
				|	И ") + "(ДатаЗакрытия >= &НачалоПериода)";
			КонецЕсли;	
			Если ЗначениеЗаполнено(КонецПериода) Тогда
				СтрУсловий = СтрУсловий + ?(СтрУсловий = "",  "ГДЕ
				|	", "
				|	И ") + "(ДатаЗакрытия <= &КонецПериода)";
			КонецЕсли;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ВыбОрганизация) Тогда
			Если Состав <> Неопределено И Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
				СтрУсловий = СтрУсловий + ?(СтрУсловий = "", "ГДЕ
				|	", "
				|	И ") + "(Организация = &Организация)";
			КонецЕсли;
		КонецЕсли;
		Если ЕстьОтборПоПодразделению
			И СоставПодразделение <> Неопределено
			И СоставПодразделение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			СтрУсловий = СтрУсловий + ?(СтрУсловий = "", " ГДЕ
				|	Документ.ПодразделениеКомпании В(&спПодразделение)",
				" И Документ.ПодразделениеКомпании В(&спПодразделение)");
		КонецЕсли;
		
		// Сформируем строку с условием из документов без реквизита регламентированный учет.
		ДокументБезРегл	= спДокументовБезРегл.НайтиПоЗначению(ТекСтрока.Объект);
		
		УслИспользовать = ?(ДокументБезРегл=Неопределено И (СоставРегУчет <> Неопределено И СоставРегУчет.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать),"(Документ.РегламентированныйУчет = ИСТИНА)","");
		Если ТекСтрока.Объект = "ПлатежноеПоручение" ИЛИ ТекСтрока.Объект = "СчетОтПоставщикаЗаАвтомобили" ИЛИ ТекСтрока.Объект = "СчетОтПоставщика" Тогда
			УсловиеПроведен = "";
		ИначеЕсли УслИспользовать = "" Тогда
			УсловиеПроведен = " (Документ.Проведен)";
		Иначе
			УсловиеПроведен = " И (Документ.Проведен)";
		КонецЕсли;
		
		СтрУсловий = СтрУсловий + ?(ПустаяСтрока(СтрУсловий), "ГДЕ
		|	", "
		|	И ") + УслИспользовать + УсловиеПроведен;
		
		Если УправленческийУчет Тогда
			СтрУсловий = СтрЗаменить(СтрУсловий,"Документ.РегламентированныйУчет","Документ.УправленческийУчет");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""" + ТекСтрока.Объект + """ "+?(ПервыйЗапрос,"КАК Вид","")+",
		|	Документ.Дата "+?(ПервыйЗапрос," КАК Дата","")+",
		|	Документ.Ссылка " +?(ПервыйЗапрос," КАК Ссылка","") + ?(НЕ ЗначениеЗаполнено(ВыбОрганизация) ИЛИ (Состав <> Неопределено И Состав.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать), ",
		|	""Организация""", ",
		|	Документ.Организация " + ?(ПервыйЗапрос, " КАК Организация","")) + "
		|ИЗ
		|	Документ." + ТекСтрока.Объект + " КАК Документ
		|" + СтрУсловий;
		
	КонецЦикла;
	
	Если (ПустаяСтрока(ТекстЗапроса)) И (ОбъектыКВыгрузке.Количество() = 0) И (ПустаяСтрока(ТекстЗапросаСпец)) Тогда
		
		СтруктураРезультатаВыгрузки.Вставить("Предупреждение", НСтр("ru = 'Не выбрано ни одного вида документов.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		// Создаем запрос
		Запрос = Новый Запрос();
		
		// Параметры для отбора по дате.
		СтрУсловий = "";
		Если ЗначениеЗаполнено(НачалоПериода) Тогда
			Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
		КонецЕсли;	
		Если ЗначениеЗаполнено(КонецПериода) Тогда
			Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
		КонецЕсли;	
		Если ЗначениеЗаполнено(ВыбОрганизация) Тогда
			Запрос.УстановитьПараметр("Организация",  ВыбОрганизация);
		КонецЕсли;
		Если ЕстьОтборПоКонтрагенту Тогда
			Запрос.УстановитьПараметр("спКонтрагент", спКонтрагенты);
		КонецЕсли;	
		Если ЕстьОтборПоПодразделению Тогда
			Запрос.УстановитьПараметр("спПодразделение", спПодразделения);
		КонецЕсли;	
		
		// Упорядочим запрос по видам документов, датам и применим фильтр.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Документы.Вид КАК Вид,
		|	Документы.Дата КАК Дата,
		|	Документы.Ссылка КАК Ссылка"+?(НЕ ЗначениеЗаполнено(ВыбОрганизация),"",",
		|	Документы.Организация КАК Организация")+"
		|
		|ИЗ
		|(" + ТекстЗапроса + ") КАК Документы";	
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.Вид,
		|	Документы.Дата,
		|	Документы.Ссылка";
		Запрос.Текст = ТекстЗапроса;
		
		РезЗапроса = Запрос.Выполнить();
		
		Если (РезЗапроса.Пустой()) И (ПустаяСтрока(ТекстЗапросаСпец)) Тогда
			
			СтруктураРезультатаВыгрузки.Вставить("Предупреждение", НСтр("ru = 'Не обнаружено документов, подлежащих выгрузке.'"));
			Возврат;
			
		КонецЕсли;
		
		Выборка = РезЗапроса.Выбрать();
		
	КонецЕсли;	
	
	// Объекты, подлежащие выгрузке, накапливаем отдельно для справочников и документов.
	тзЭлементов.Очистить();
	тзДоков.Очистить();
	
	ИнициализироватьДеревоСсылок();
	
	// Справочники, для которых надо выгружать Контактную информацию.
	спСправочникиКонтИнф.Очистить();
	спСправочникиКонтИнф.Добавить(Тип("СправочникСсылка.Контрагенты"));
	спСправочникиКонтИнф.Добавить(Тип("СправочникСсылка.Организации"));
	Если Метаданные.Справочники.Найти("Пациенты")<>Неопределено Тогда
		спСправочникиКонтИнф.Добавить(Тип("СправочникСсылка.Пациенты"));
	КонецЕсли;
	
	// Список документов, справочников, которые не нужно выгружать.
	спНеВыгружать.Очистить();;
	Если Метаданные.Документы.Найти("Рецептура")<>Неопределено И Метаданные.Документы.Найти("ПланМеню")<>Неопределено Тогда
		спНеВыгружать.Добавить(Тип("ДокументСсылка.Рецептура"));
		спНеВыгружать.Добавить(Тип("ДокументСсылка.ПланМеню"));
	КонецЕсли;	
	
	// Справочники, для которых необходимо выгрузить дополнительные реквизиты.
	МассивТипов = Новый массив();
	МассивТипов.Добавить(Тип("Соответствие"));
	спСправочникиСпецРеквизиты.Очистить();
	
	СтрокаспСправочникиСпецРеквизиты 	 			= спСправочникиСпецРеквизиты.Добавить();
	СтрокаспСправочникиСпецРеквизиты.Тип 			= Тип("СправочникСсылка.Организации");
	СтрокаспСправочникиСпецРеквизиты.Реквизит 		= "ФизЛицо";
	СтрокаспСправочникиСпецРеквизиты.ТекстЗапроса	= "ВЫБРАТЬ
	|	СведенияКомпанииСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.СведенияКомпании.СрезПоследних КАК СведенияКомпанииСрезПоследних
	|ГДЕ
	|	СведенияКомпанииСрезПоследних.Организация = &Организация
	|	И СведенияКомпанииСрезПоследних.Объект = &Объект";
	СтрокаспСправочникиСпецРеквизиты.ПараметрыЗапроса = "ЗапросСпецРеквизиты.УстановитьПараметр(""Организация"", ЗнРекв);
	|ЗапросСпецРеквизиты.УстановитьПараметр(""Объект"", Перечисления.ВидыОбъектовСведений.Руководитель)";
	
	Свойство	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Счет кассы");
	// Для справочника КассыККМ выгружаем свойство счет кассы.
	СтрокаспСправочникиСпецРеквизиты 	 			= спСправочникиСпецРеквизиты.Добавить();
	СтрокаспСправочникиСпецРеквизиты.Тип 			= Тип("СправочникСсылка.КассыККМ");
	СтрокаспСправочникиСпецРеквизиты.Реквизит 		= "КоррСчет";
	СтрокаспСправочникиСпецРеквизиты.ТекстЗапроса	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСвойств.Значение КАК Значение
		|ИЗ
		|	Справочник.КассыККМ.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ПО ТаблицаСвойств.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
		|ГДЕ
		|	ТаблицаСвойств.Ссылка = &Объект
		|	И ТаблицаСвойств.Свойство = &Свойство";
	СтрокаспСправочникиСпецРеквизиты.ПараметрыЗапроса = "ЗапросСпецРеквизиты.УстановитьПараметр(""Объект"", ЗнРекв);
	|ЗапросСпецРеквизиты.УстановитьПараметр(""Свойство"", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Корр. счет""));";	
	
	// Для справочника КассыКомпании выгружаем свойство счет кассы.
	СтрокаспСправочникиСпецРеквизиты 	 			= спСправочникиСпецРеквизиты.Добавить();
	СтрокаспСправочникиСпецРеквизиты.Тип 			= Тип("СправочникСсылка.КассыКомпании");
	СтрокаспСправочникиСпецРеквизиты.Реквизит 		= "КоррСчет";
	СтрокаспСправочникиСпецРеквизиты.ТекстЗапроса	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСвойств.Значение КАК Значение
		|ИЗ
		|	Справочник.КассыКомпании.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ПО ТаблицаСвойств.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
		|ГДЕ
		|	ТаблицаСвойств.Ссылка = &Объект
		|	И ТаблицаСвойств.Свойство = &Свойство";
	СтрокаспСправочникиСпецРеквизиты.ПараметрыЗапроса = "ЗапросСпецРеквизиты.УстановитьПараметр(""Объект"", ЗнРекв);
	|ЗапросСпецРеквизиты.УстановитьПараметр(""Свойство"", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Корр. счет""));";
	
	Если Метаданные.Справочники.Найти("ВидыРемонта")<>Неопределено Тогда
		
		// Для справочника ВидыРемонта выгружаем свойство КомплектацияАвтомобиля
		// Признак того, что выгружаемый вид ремонта является комплектацией автомобиля.
		ЗапросВидовРемонта	= Новый Запрос();
		ЗапросВидовРемонта.Текст	= "ВЫБРАТЬ
		|	ВидыРемонта.Ссылка КАК Ссылка,
		|	ВидыРемонта.Наименование КАК наименование
		|ИЗ
		|	Справочник.ВидыРемонта КАК ВидыРемонта
		|ГДЕ
		|	ВидыРемонта.ТипРемонта = ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.КомплектацияАвтомобиля)";
		РезультатЗапросаПоВидамРемонта	= ЗапросВидовРемонта.Выполнить();
		
		Если НЕ РезультатЗапросаПоВидамРемонта.Пустой() Тогда
			СтрокаспСправочникиСпецРеквизиты 	 			= спСправочникиСпецРеквизиты.Добавить();
			СтрокаспСправочникиСпецРеквизиты.Тип 			= Тип("СправочникСсылка.ВидыРемонта");
			СтрокаспСправочникиСпецРеквизиты.Реквизит 		= "КомплектацияАвтомобиля";
			СтрокаспСправочникиСпецРеквизиты.Значение 		= Ложь;
			СтрокаспСправочникиСпецРеквизиты.ТекстЗапроса	= "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВидыРемонта.ТипРемонта = ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.КомплектацияАвтомобиля)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Значение
			|ИЗ
			|	Справочник.ВидыРемонта КАК ВидыРемонта
			|ГДЕ
			|	ВидыРемонта.Ссылка = &Объект";
			СтрокаспСправочникиСпецРеквизиты.ПараметрыЗапроса = "ЗапросСпецРеквизиты.УстановитьПараметр(""Объект"", ЗнРекв);";
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем список табличных частей документов для выгрузки                                      
	// Если при выгрузке документа идентификатор табличной части не входит в данный список,
	// то выгружаются все табличные части документа.
	// Если же в списке найден идентификатор документа, то выгружаются строки ТОЛЬКО указанной табличной части.
	// Примечание: таблица партионных движений выгружается всегда при наличии движений.
	спТаблицВыгрузки.Очистить();
	спТаблицВыгрузки.Добавить("ВыпускПродукции",        "ПартииТоваров");
	спТаблицВыгрузки.Добавить("ЗакрытиеСмены",          "ПартииТоваров");
	спТаблицВыгрузки.Добавить("Комплектация",           "ПартииТоваров");
	спТаблицВыгрузки.Добавить("ПеремещениеТоваров",     "ПартииТоваров");
	спТаблицВыгрузки.Добавить("ПоступлениеДопРасходов", "ПартииТоваров");
	спТаблицВыгрузки.Добавить("Разделка",               "ПартииТоваров");
	спТаблицВыгрузки.Добавить("Разукомплектация",       "ПартииТоваров");
	спТаблицВыгрузки.Добавить("СписаниеТоваров",        "ПартииТоваров");
	спТаблицВыгрузки.Добавить("СписаниеСпеций",         "ПартииТоваров");
	
	Если
		Метаданные.Документы.Найти("СписаниеАвтомобилей") <> Неопределено
		И Метаданные.Документы.Найти("ЗаказНаряд") <> Неопределено
	Тогда
		спТаблицВыгрузки.Добавить("СписаниеАвтомобилей",    "ПартииТоваров");
		спТаблицВыгрузки.Добавить("ЗаказНаряд",         	"ТоварыВПроизводстве");
	КонецЕсли;
	
	// Сформируем список документов, у которых к реквизитам табличной части при выгрузке нужно добавить ГТД
	// Это делается путем ввода нового или открытий существующего счета-фактуры. И тем самым выгружается копия 
	// табличной части только уже с ГТД. Не все так гладко, у некоторых документов не совпадают реквизиты ТЧ и СФ.
	// Приходится выкручиваться по ходу ...
	спТаблицВыгрузкиГТД.Очистить();
	Если УчетГТД Тогда
		спТаблицВыгрузкиГТД.Добавить("РеализацияТоваров");
		спТаблицВыгрузкиГТД.Добавить("ОтчетКомиссионера");
		спТаблицВыгрузкиГТД.Добавить("ВозвратПоставщику");
		Если Метаданные.Документы.Найти("ЗаказНаряд")<>Неопределено
			И Метаданные.Документы.Найти("РеализацияАвтомобилей")<>Неопределено
			И Метаданные.Документы.Найти("ОтчетКомиссионераЗаАвтомобили")<>Неопределено
			И Метаданные.Документы.Найти("ВозвратПоставщикуАвтомобилей")<>Неопределено Тогда
				спТаблицВыгрузкиГТД.Добавить("ЗаказНаряд");	
				спТаблицВыгрузкиГТД.Добавить("РеализацияАвтомобилей");
				спТаблицВыгрузкиГТД.Добавить("ОтчетКомиссионераЗаАвтомобили");
				спТаблицВыгрузкиГТД.Добавить("ВозвратПоставщикуАвтомобилей");
			КонецЕсли;
		спТаблицВыгрузкиГТД.Добавить("КорректировкаРеализации");
	КонецЕсли;	
	
	// Список документов, для которых нельзя ввести счет-фактуру,
	// но можно выгрузить номера ГТД, по которым будет проходить списание товаров в Бухгалтерии.
	спТаблицВыгрузкиГТДДоп.Очистить();
	
	Если УчетГТД Тогда
		спТаблицВыгрузкиГТДДоп.Добавить("СписаниеТоваров");
		спТаблицВыгрузкиГТДДоп.Добавить("Инвентаризация");
		спТаблицВыгрузкиГТДДоп.Добавить("ПересортицаТоваров");
	КонецЕсли;	
	
	// Список Формирования ТЗ до исправления и до корректировки
	спСТаблицаВыгрузкиГТДКорректировки = Новый СписокЗначений();
	Если УчетГТД Тогда
		спСТаблицаВыгрузкиГТДКорректировки.Добавить("КорректировкаРеализации");
	КонецЕсли;
	
	// Создадим и заполним таблицу регистров, которые нужно выгружать в добавок.
	// То есть если появляется необходимость в выгрузке еще какого-нибудь регистра, нужно добавить строчку к этой таблице.
	// Все должно само заработать.
	тзДвиженияКВыгрузке = Новый ТаблицаЗначений();
	тзДвиженияКВыгрузке.Колонки.Добавить("Наименование"); // Имя регистра 
	тзДвиженияКВыгрузке.Колонки.Добавить("ДобавлятьПоСсылкам"); // Нужно ли добавлять объекты по движениям регистра	
	тзДвиженияКВыгрузке.Колонки.Добавить("Конфигурация"); // Название конфигурации где это нужно делать.
	тзДвиженияКВыгрузке.Колонки.Добавить("НеВыгружать"); // Внутренняя переменная
	тзДвиженияКВыгрузке.Колонки.Добавить("РезультатЗапроса"); // Внутренняя переменная
	тзДвиженияКВыгрузке.Колонки.Добавить("ТекстЗапроса"); // Текст запроса к регистру
	тзДвиженияКВыгрузке.Колонки.Добавить("Документы"); // Список документов, для которых необходимо выгружать эти движения.
	
	Если Метаданные.РегистрыНакопления.Найти("Продажи")<>Неопределено Тогда
		НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
		НоваяСтрока.Наименование = "Продажи";
		сзДокументы = Новый СписокЗначений;
		сзДокументы.Добавить("АктРазногласий");
		НоваяСтрока.Документы = сзДокументы;
		НоваяСтрока.ДобавлятьПоСсылкам = Ложь;	
		НоваяСтрока.Конфигурация = "Авто";
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	Продажи.ПодразделениеКомпании,
		|	Продажи.Номенклатура,
		|	Продажи.Поставщик,
		|	Продажи.Покупатель,
		|	Продажи.СтатусПартии,
		|	Продажи.ХозОперация,
		|	Продажи.ДоговорВзаиморасчетов,
		|	Продажи.ХарактеристикаНоменклатуры,
		|	Продажи.СкладКомпании,
		|	Продажи.СтавкаНДС,
		|	Продажи.Партия,
		|	Продажи.Авторабота,
		|	Продажи.Проект,
		|	Продажи.Количество,
		|	Продажи.Сумма,
		|	Продажи.СуммаНДС,
		|	Продажи.СуммаСкидки,
		|	Продажи.СебестоимостьУпр,
		|	Продажи.Себестоимость,
		|	Продажи.СуммаНДСВходящий
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Регистратор = &Регистратор";
		
		НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
		НоваяСтрока.Наименование = "ТоварыВПроизводстве";
		сзДокументы = Новый СписокЗначений;
		сзДокументы.Добавить("ЗаказНаряд");
		НоваяСтрока.Документы = сзДокументы;
		НоваяСтрока.ДобавлятьПоСсылкам = Ложь;	
		НоваяСтрока.Конфигурация = "Авто";
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	ТоварыВПроизводстве.Номенклатура,
		|	ТоварыВПроизводстве.Количество,
		|	ТоварыВПроизводстве.Партия,
		|	ТоварыВПроизводстве.СтатусПартии,
		|	ТоварыВПроизводстве.Цех,		
		|	ТоварыВПроизводстве.Сумма,
		|	ТоварыВПроизводстве.СуммаНДС,
		|	ТоварыВПроизводстве.СтавкаНДС
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Регистратор = &Регистратор";
		
		НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
		НоваяСтрока.Наименование = "КомплектацияАвтомобилей";
		НоваяСтрока.ДобавлятьПоСсылкам = Истина;
		НоваяСтрока.Конфигурация = "Автосалон";
		НоваяСтрока.ТекстЗапроса ="ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.Количество,
		|	КомплектацияАвтомобилей.СкладКомпании,
		|	КомплектацияАвтомобилей.Сумма,
		|	КомплектацияАвтомобилей.СуммаНДС,
		|	КомплектацияАвтомобилей.СтавкаНДС,
		|	КомплектацияАвтомобилей.ХозОперация,
		|	КомплектацияАвтомобилей.Автомобиль
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Регистратор";
		
		НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
		НоваяСтрока.Наименование = "ОстаткиАвтомобилей";
		НоваяСтрока.ДобавлятьПоСсылкам = Ложь;
		НоваяСтрока.Конфигурация = "Автосалон";
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
		|	ОстаткиАвтомобилей.Количество КАК Количество,
		|	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании,
		|	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
		|	ОстаткиАвтомобилей.Сумма КАК Сумма,
		|	ОстаткиАвтомобилей.СуммаНДС КАК СуммаНДС,
		|	ОстаткиАвтомобилей.Партия КАК Партия,
		|	ОстаткиАвтомобилей.ВидДвижения КАК ВидДвижения
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &Регистратор";
		
		НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
		НоваяСтрока.Наименование = "РеализованныеАвтомобили";
		НоваяСтрока.ДобавлятьПоСсылкам = Истина;
		НоваяСтрока.Конфигурация = "Автосалон";
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	РеализованныеАвтомобили.Автомобиль,
		|	РеализованныеАвтомобили.Количество,
		|	РеализованныеАвтомобили.СуммаУпр,
		|	РеализованныеАвтомобили.ДокументПередачи
		|ИЗ
		|	РегистрНакопления.РеализованныеАвтомобили КАК РеализованныеАвтомобили
		|ГДЕ
		|	РеализованныеАвтомобили.Регистратор = &Регистратор";
		
		
		НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
		НоваяСтрока.Наименование = "ВзаиморасчетыКомпании";
		сзДокументы = Новый СписокЗначений;
		сзДокументы.Добавить("АктРазногласий");
		НоваяСтрока.Документы = сзДокументы;
		НоваяСтрока.ДобавлятьПоСсылкам = Ложь;	
		НоваяСтрока.Конфигурация = "Авто";
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	ВзаиморасчетыКомпании.Контрагент КАК Контрагент,
		|	ВзаиморасчетыКомпании.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ВзаиморасчетыКомпании.Сделка КАК Сделка,
		|	ВзаиморасчетыКомпании.Сумма КАК Сумма,
		|	ВзаиморасчетыКомпании.СуммаУпр КАК СуммаУпр,
		|	ВзаиморасчетыКомпании.СуммаБаз КАК СуммаБаз,
		|	ВзаиморасчетыКомпании.ХозОперация КАК ХозОперация,
		|	ВзаиморасчетыКомпании.ВидОперации КАК ВидОперации
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
		|ГДЕ
		|	ВзаиморасчетыКомпании.Регистратор = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСКонтрагентами.Контрагент,
		|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов,
		|	РасчетыСКонтрагентами.ДокументРасчетов,
		|	РасчетыСКонтрагентами.Сумма,
		|	РасчетыСКонтрагентами.СуммаУпр,
		|	РасчетыСКонтрагентами.СуммаБаз,
		|	РасчетыСКонтрагентами.ХозОперация,
		|	РасчетыСКонтрагентами.ВидОперации
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
		|ГДЕ
		|	РасчетыСКонтрагентами.Регистратор = &Регистратор";
		
	Иначе
		НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
		НоваяСтрока.Наименование = "Продажи";
		НоваяСтрока.Документы = ПолучитьДокументыАмбулатории();
		НоваяСтрока.ДобавлятьПоСсылкам = Ложь;	
		НоваяСтрока.Конфигурация = "Амбулатория";
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	Продажи.ПодразделениеКомпании,
		|	Продажи.Номенклатура,
		|	Продажи.Поставщик,
		|	Продажи.Покупатель,
		|	Продажи.СтатусПартии,
		|	Продажи.ХозОперация,
		|	Продажи.ДоговорВзаиморасчетов,
		|	Продажи.ХарактеристикаНоменклатуры,
		|	Продажи.СкладКомпании,
		|	Продажи.СтавкаНДС,
		|	Продажи.Партия,
		|	Продажи.Специалист,
		|	Продажи.Пациент,
		|	Продажи.Количество,
		|	Продажи.Сумма,
		|	Продажи.СуммаНДС,
		|	Продажи.СуммаСкидки,
		|	Продажи.СуммаУпр,
		|	Продажи.СебестоимостьУпр,
		|	Продажи.Себестоимость,
		|	Продажи.СуммаНДСВходящий
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Регистратор = &Регистратор";
	КонецЕсли;
	
	
	НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
	НоваяСтрока.Наименование = "РеализованныеТовары";
	сзДокументы = Новый СписокЗначений;
	сзДокументы.Добавить("ОтчетКомиссионера");
	сзДокументы.Добавить("РеализацияТоваров");
	сзДокументы.Добавить("ОтчетКомитенту");
	НоваяСтрока.Документы = сзДокументы;
	НоваяСтрока.ДобавлятьПоСсылкам = Истина;
	НоваяСтрока.Конфигурация = "";
	НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
	|	РеализованныеТовары.Номенклатура,
	|	РеализованныеТовары.Количество,
	|	РеализованныеТовары.СуммаУпр,
	|	РеализованныеТовары.ДокументПередачи
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
	|ГДЕ
	|	РеализованныеТовары.Регистратор = &Регистратор";
	
	
	НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
	НоваяСтрока.Наименование = "Цены";
	сзДокументы = Новый СписокЗначений;
	сзДокументы.Добавить("ПоступлениеТоваров");
	сзДокументы.Добавить("Инвентаризация");
	сзДокументы.Добавить("ПеремещениеТоваров");
	сзДокументы.Добавить("ВводОстатковТоваров");
	сзДокументы.Добавить("Комплектация");
	сзДокументы.Добавить("Разукомплектация");
	Если Метаданные.Документы.Найти("ИзвлечениеТоваровИзПроизводства")<>Неопределено Тогда
		сзДокументы.Добавить("ИзвлечениеТоваровИзПроизводства");
	КонецЕсли;
	сзДокументы.Добавить("ПересортицаТоваров");
	НоваяСтрока.Документы = сзДокументы;
	НоваяСтрока.ДобавлятьПоСсылкам = Истина;
	НоваяСтрока.Конфигурация = "";
	Если Метаданные.РегистрыСведений.Цены.Ресурсы.Найти("ЦенаСНДС")<>Неопределено И Метаданные.РегистрыСведений.Цены.Ресурсы.Найти("ЦенаБезНДС")<>Неопределено Тогда
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	ЦеныСрезПоследних.ТипЦен,
		|	ЦеныСрезПоследних.Номенклатура,
		|	ЦеныСрезПоследних.ЦенаСНДС,
		|	ЦеныСрезПоследних.ЦенаБезНДС
		|ИЗ
		|	РегистрСведений.Цены.СрезПоследних(, Регистратор = &Регистратор) КАК ЦеныСрезПоследних";
	Иначе
		НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ
		|	ЦеныСрезПоследних.ТипЦен,
		|	ЦеныСрезПоследних.Номенклатура,
		|	ЦеныСрезПоследних.Цена КАК ЦенаСНДС,
		|	ЦеныСрезПоследних.Цена КАК ЦенаБезНДС
		|ИЗ
		|	РегистрСведений.Цены.СрезПоследних(, Регистратор = &Регистратор) КАК ЦеныСрезПоследних";
	КонецЕсли;
	НоваяСтрока = тзДвиженияКВыгрузке.Добавить();
	НоваяСтрока.Наименование = "ПрочиеАктивыВЭксплуатации";
	сзДокументы = Новый СписокЗначений;
	сзДокументы.Добавить("СписаниеАктивов");
	НоваяСтрока.Документы = сзДокументы;
	НоваяСтрока.ДобавлятьПоСсылкам = Истина;
	НоваяСтрока.Конфигурация = "";
	НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеАктивовАктивы.ПрочийАктив,
	|	ПрочиеАктивыВЭксплуатации.Регистратор КАК Партия,
	|	ПрочиеАктивыВЭксплуатации.МОЛ
	|ИЗ
	|	Документ.СписаниеАктивов.Активы КАК СписаниеАктивовАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
	|		ПО СписаниеАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
	|ГДЕ
	|	СписаниеАктивовАктивы.Ссылка = &Регистратор
	|	И ПрочиеАктивыВЭксплуатации.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВводВЭксплуатацию)
	|	И ПрочиеАктивыВЭксплуатации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
	
	// Пройдемся по документам и накопим выгружаемые объекты.
	ЗначениеИндикатора = 1;
	
	// Для того, что бы валюте регламентированного учета дать максимальный уровень 1,
	// добавим ссылку на него сейчас, это необходимо для установки соответствия 810-му - 643-ей валюты.
	Если НЕ Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить().Пустая() Тогда
		ДобавитьПоСсылкам(Неопределено, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	КонецЕсли;
	
	// Перед выгрузкой основной массы документов необходимо выгрузить документы партий товаров отрицательных остатков.
	// Ссылки на них есть в шапке файла-выгрузки.
	// Перед этим необходимо проверить, заполнены ли соответствующие константы.
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Пока Выборка.Следующий() Цикл
			
			ДобавитьПоСсылкам(Выборка.Ссылка, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.Ссылка);
			
			ЗначениеИндикатора = ЗначениеИндикатора + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Выгрузка специальных документов (без признака регламентированного учета, не совершающих движения).
	Если НЕ ПустаяСтрока(ТекстЗапросаСпец)  Тогда
		Запрос = Новый Запрос();
		
		СтрУсловий = "";
		Если ЗначениеЗаполнено(НачалоПериода) Тогда
			Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
		КонецЕсли;	
		Если ЗначениеЗаполнено(КонецПериода) Тогда
			Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
		КонецЕсли;	
		Если ЗначениеЗаполнено(ВыбОрганизация) Тогда
			Запрос.УстановитьПараметр("Организация",  ВыбОрганизация);
		КонецЕсли;
		Если ЕстьОтборПоКонтрагенту Тогда
			Запрос.УстановитьПараметр("спКонтрагент", спКонтрагенты);
		КонецЕсли;	
		Если ЕстьОтборПоПодразделению Тогда
			Запрос.УстановитьПараметр("спПодразделение", спПодразделения);
		КонецЕсли;	
		
		// Упорядочим запрос по видам документов, датам и применим фильтр.
		ТекстЗапросаСпец = "
		|ВЫБРАТЬ 
		|	Документы.Вид КАК Вид,
		|	Документы.Дата КАК Дата,
		|	Документы.Ссылка КАК Ссылка
		|
		|ИЗ
		|(" + ТекстЗапросаСпец + ") КАК Документы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.Вид,
		|	Документы.Дата,
		|	Документы.Ссылка";
		
		Запрос.Текст = ТекстЗапросаСпец;
		
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда
			Выборка = РезЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ДобавитьПоСсылкам(Выборка.Ссылка, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.Ссылка);
				
				ЗначениеИндикатора = ЗначениеИндикатора + 1;
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ЕстьВидыСостояний = (Метаданные.Справочники.Найти("ВидыСостоянийЗаказНарядов")<>Неопределено);
	
	СписокСообщенийЗаказНарядов = Новый СписокЗначений; 
	Для Каждого Строка Из ОбъектыКВыгрузке Цикл
		
		ДобавитьПоСсылкам(Неопределено, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Строка.Объект);
		
		ЗначениеИндикатора = ЗначениеИндикатора + 1;
	КонецЦикла;
	СтруктураРезультатаВыгрузки.Вставить("Сообщить", СписокСообщенийЗаказНарядов);
	
	ЗначениеСчетчика     = 1;
	МаксЗначениеСчетчика = тзЭлементов.Количество() + тзДоков.Количество();
	
	// Формируем шапку файла-выгрузки
	ИмяФайла = "unload_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd_HHmmss") + ".xml";
	СтруктураРезультатаВыгрузки.Вставить("ИмяФайла", ИмяФайла);
	
	// Подготовим данные для выгрузки в первую строку(шапку) файла выгрузки.
	ДатаВыгрузки = СокрЛП(ТекущаяДатаСеанса());
	ПарамНачалоПериода = ?(НачалоПериода = Дата("00010101"), "", СокрЛП(Формат(НачалоПериода, "ДЛФ=D")));
	ПарамКонецПериода = ?(КонецПериода = Дата("00010101"), "", СокрЛП(Формат(КонецПериода, "ДЛФ=D")));
	ФлагРегламентированныйУчет = Строка(РегламентированныйУчет);
	Версия = "v8";
	СтратегияСписания = Строка(
		УчетныеПолитикиСервер.Значение(
			"СтратегияСписанияПартийТоваровПоДатам",
			Неопределено,
			?(ЗначениеЗаполнено(КонецПериода), КонецПериода, ТекущаяДатаСеанса())
		)
	);
	
	Если Константы.ПартияТоваровОтрицательныхОстатков.Получить() <> Документы.ПоступлениеТоваров.ПустаяСсылка() Тогда
		уиПартииОтрицательныхОстатков1 = Строка(Константы.ПартияТоваровОтрицательныхОстатков.Получить().УникальныйИдентификатор());
	Иначе
		уиПартииОтрицательныхОстатков1 = "";
	КонецЕсли;
	
	// В конфигурации "Управление Рестораном" есть дополнительная константа
	// "ПартияТоваровОтрицательныхОстатковДругихСкладов", ее необходимо Выгрузить.
	// В Альфа-Авто такой константы нет, и чтобы не нарушать порядок следования параметров будем писать пустую строку.
	Если Метаданные.Константы.Найти("ПартияТоваровОтрицательныхОстатковДругихСкладов")<>Неопределено Тогда
		//@skip-check unknown-method-property
		Если Константы.ПартияТоваровОтрицательныхОстатковДругихСкладов.Получить() <> Документы.ПоступлениеТоваров.ПустаяСсылка() Тогда
			уиПартииОтрицательныхОстатков2 = Строка(Константы.ПартияТоваровОтрицательныхОстатковДругихСкладов.Получить().УникальныйИдентификатор());
		Иначе
			уиПартииОтрицательныхОстатков2 = "";
		КонецЕсли;
	Иначе
		уиПартииОтрицательныхОстатков2 = "";
	КонецЕсли;
	
	ДокXML = Новый ЗаписьXML();
	ДокXML.ОткрытьФайл(ВыбКаталог + "\" + ИмяФайла, "UTF-8");
	ДокXML.ЗаписатьОбъявлениеXML();
	
	ДокXML.ЗаписатьНачалоЭлемента("БД");
	ДокXML.ЗаписатьАтрибут("Конфигурация",  Метаданные.Синоним);
	ДокXML.ЗаписатьАтрибут("ДатаВыгрузки",  ДатаВыгрузки);
	ДокXML.ЗаписатьАтрибут("НачалоПериода", ПарамНачалоПериода);
	ДокXML.ЗаписатьАтрибут("КонецПериода",  ПарамКонецПериода);
	ДокXML.ЗаписатьАтрибут("урРегламентированныйУчет", ФлагРегламентированныйУчет);
	ДокXML.ЗаписатьАтрибут("СтратегияСписанияПартийПоДатам", СтратегияСписания);
	ДокXML.ЗаписатьАтрибут("уиПартииОтрицательныхОстатков1", уиПартииОтрицательныхОстатков1);
	ДокXML.ЗаписатьАтрибут("уиПартииОтрицательныхОстатков2", уиПартииОтрицательныхОстатков2);
	ДокXML.ЗаписатьАтрибут("Версия",        Версия);
	ДокXML.ЗаписатьАтрибут("РежимВыгрузки", "Обычный");
	
	// Инициализируем дерево выгруженных объектов.
	Если ПоказатьВыгруженные Тогда
		ВыгруженныеОбъекты.Строки.Очистить();
		
		КореньСправочники = ВыгруженныеОбъекты.Строки.Добавить();
		КореньСправочники.Объект = "Справочники";
		
		КореньДокументы = ВыгруженныеОбъекты.Строки.Добавить();
		КореньДокументы.Объект = "Документы";
	КонецЕсли;
	
	// Выгрузим все цеха если есть документ Заказ-наряд.
	// Потому что для движений документов ссылки не выгружаются кроме партиеобразующего документа.
	Если тзДоков.НайтиСтроки(Новый Структура("Тип", "ЗаказНаряд")).Количество() > 0 Тогда
		Запрос= Новый  Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Цеха.Ссылка
		|ИЗ
		|	Справочник.Цеха КАК Цеха";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если тзЭлементов.Найти(Выборка.Ссылка,"Ссылка") = Неопределено Тогда
				ДобавитьПоСсылкам(Выборка.Ссылка, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Сначала выгрузим справочники
	ПредТип = "";
	тзЭлементов.Сортировать("Тип,Уровень,Ссылка");
	
	ПервыйСправочник = Истина;
	ПервыйДокумент = Истина;
	
	Для Каждого ТекСтрока Из тзЭлементов Цикл
		
		Если ТекСтрока.Тип <> ПредТип Тогда
			ПервыйОбъект = Истина;
			
			Если ПервыйСправочник Тогда ДокXML.ЗаписатьНачалоЭлемента("Ссылки"); КонецЕсли;
			
			
			Если ПредТип <> "" Тогда ДокXML.ЗаписатьКонецЭлемента(); КонецЕсли;
			
			ДокXML.ЗаписатьНачалоЭлемента(ТекСтрока.Ссылка.Метаданные().Имя);
		КонецЕсли;
		
		ВыгрузитьОбъект(ТекСтрока, ДокXML, КореньДокументы, КореньСправочники, ВыгруженныеОбъекты, тзДвиженияКВыгрузке, ПервыйОбъект);
		
		Если ПервыйОбъект Тогда ПервыйОбъект = Ложь; КонецЕсли;
		Если ПервыйСправочник Тогда ПервыйСправочник = Ложь; КонецЕсли;
		
		ПредТип = ТекСтрока.Тип;
		
		ЗначениеСчетчика = ЗначениеСчетчика + 1;
	КонецЦикла;	
	
	Если ПредТип <> "" Тогда ДокXML.ЗаписатьКонецЭлемента(); КонецЕсли;
	
	ДокXML.ЗаписатьКонецЭлемента();
	
	
	// Теперь можно выгрузить документы.
	ПредТип = "";
	
	Если Константы.ПартияТоваровОтрицательныхОстатков.Получить() <> Документы.ПоступлениеТоваров.ПустаяСсылка() Тогда
		НайденныеСтроки = тзДоков.НайтиСтроки(Новый Структура("Ссылка", Константы.ПартияТоваровОтрицательныхОстатков.Получить()));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПОО = НайденныеСтроки[0];
			СтрокаПОО.Уровень = 1;
		КонецЕсли;	
	КонецЕсли;	
	Если Метаданные.Константы.Найти("ПартияТоваровОтрицательныхОстатковДругихСкладов")<>Неопределено Тогда
		//@skip-check unknown-method-property
		Если Константы.ПартияТоваровОтрицательныхОстатковДругихСкладов.Получить() <> Документы.ПоступлениеТоваров.ПустаяСсылка() Тогда
			СтрокаПООДС = тзДоков.Найти(Константы.ПартияТоваровОтрицательныхОстатковДругихСкладов.Получить(), "Ссылка");
			Если СтрокаПООДС <> Неопределено Тогда
				СтрокаПООДС.Уровень = 1;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	тзДоков.Сортировать("Уровень,Тип,Ссылка");
	
	Если тзДоков.Количество()>0 Тогда
		ДокXML.ЗаписатьНачалоЭлемента("Документы");
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тзДоков Цикл
		
		Если ТекСтрока.Тип <> ПредТип Тогда 
			ПервыйОбъект = Истина;
			Если НЕ ПервыйДокумент Тогда
				ДокXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			ДокXML.ЗаписатьНачалоЭлемента(ТекСтрока.Ссылка.Метаданные().Имя);
		КонецЕсли;
		
		ВыгрузитьОбъект(ТекСтрока, ДокXML, КореньДокументы, КореньСправочники, ВыгруженныеОбъекты, тзДвиженияКВыгрузке, ПервыйОбъект);
		Если ПервыйОбъект Тогда ПервыйОбъект = Ложь; КонецЕсли;
		Если ПервыйДокумент Тогда ПервыйДокумент = Ложь; КонецЕсли;
		
		ПредТип = ТекСтрока.Тип;
		
		ЗначениеСчетчика = ЗначениеСчетчика + 1;
	КонецЦикла;	
	
	Если ПредТип <> "" Тогда ДокXML.ЗаписатьКонецЭлемента(); КонецЕсли;
	ДокXML.ЗаписатьКонецЭлемента();
	
	// Завершим работу с файлом-выгрузки.
	Если тзДоков.Количество()>0 Тогда
		ДокXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	ДокXML.Закрыть();
	
	// Очистим большие ненужные данные.
	тзЭлементов.Очистить();
	тзДоков.Очистить();
	спСправочникиКонтИнф.Очистить();
	спНеВыгружать.Очистить();;
	спСправочникиСпецРеквизиты.Очистить();
	спТаблицВыгрузки.Очистить();
	спТаблицВыгрузкиГТД.Очистить();
	спТаблицВыгрузкиГТДДоп.Очистить();
	спСТаблицаВыгрузкиГТДКорректировки.Очистить();
	
	СтруктураРезультатаВыгрузки.Вставить("Успешно", Истина);
	
КонецПроцедуры	//	Выгрузить()

// Процедура инициации/выполнения запроса выгружаемых документов.
Процедура ВыгрузитьСправочники(СтруктураРезультатаВыгрузки) Экспорт
	
	тзДвиженияКВыгрузке = Новый ТаблицаЗначений();
	тзДвиженияКВыгрузке.Колонки.Добавить("Наименование"); //Имя регистра 
	тзДвиженияКВыгрузке.Колонки.Добавить("ДобавлятьПоСсылкам"); //Нужно ли добавлять объекты по движениям регистра	
	тзДвиженияКВыгрузке.Колонки.Добавить("Конфигурация"); //Название конфигурации где это нужно делать.
	тзДвиженияКВыгрузке.Колонки.Добавить("НеВыгружать"); //Внутренняя переменная
	тзДвиженияКВыгрузке.Колонки.Добавить("РезультатЗапроса"); //Внутренняя переменная
	тзДвиженияКВыгрузке.Колонки.Добавить("ТекстЗапроса"); //Текст запроса к регистру
	тзДвиженияКВыгрузке.Колонки.Добавить("Документы"); //Список документов, для которых необходимо выгружать эти движения.
	
	ВыбраныБанки = Ложь;
	ВыбраныБанковскиеСчета = Ложь;
	ВыбранаВалюта = Ложь;
	ВыбраныКонтрагенты = Ложь;
	ВыбраныДоговоры = Ложь;
	
	ТекстЗапроса = "";
	Для Каждого ТекСтрока Из ВидыСправочников Цикл
		Если ТекСтрока.Пометка = Неопределено Тогда ТекСтрока.Пометка = Ложь КонецЕсли;
		Если НЕ ТекСтрока.Пометка Тогда Продолжить; КонецЕсли;
		
		Если ТекСтрока.Объект = "КлассификаторБанков" Тогда 
			ВыбраныБанки = истина;
		ИначеЕсли ТекСтрока.Объект = "БанковскиеСчета" Тогда
			ВыбраныБанковскиеСчета = Истина;
		ИначеЕсли ТекСтрока.Объект = "Валюты" Тогда
			ВыбранаВалюта = Истина;
		ИначеЕсли ТекСтрока.Объект = "Контрагенты" Тогда
			ВыбраныКонтрагенты = Истина;
		ИначеЕсли ТекСтрока.Объект = "ДоговорыВзаиморасчетов" 
			ИЛИ ТекСтрока.Объект = "Сотрудники"
			Или ТекСтрока.Объект = "Патенты" Тогда
			ВыбраныДоговоры = Истина;
			Если ОрганизацияСпр.Пустая() Тогда
				СтруктураРезультатаВыгрузки.Вставить("Предупреждение", НСтр("ru = 'Не выбрана Организация для'") + " " 
													+ ?(ТекСтрока.Объект = "ДоговорыВзаиморасчетов", НСтр("ru = 'договоров взаиморасчетов'"),"сотрудников") + ".");
				Возврат;
			КонецЕсли;	
		КонецЕсли;		
		
		// Объединим таблицы 
		Если Не(ПустаяСтрока(ТекстЗапроса)) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ "+ ТекСтрока.Объект + ".Ссылка 
		|ИЗ Справочник." + ТекСтрока.Объект + " КАК "+ТекСтрока.Объект;
		
		Если ТекСтрока.Объект = "ДоговорыВзаиморасчетов" ИЛИ ТекСтрока.Объект = "Сотрудники" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ "+ ТекСтрока.Объект + ".Организация = &Организация ";
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" И ОрганизацияСпр.Пустая() Тогда
		
		СтруктураРезультатаВыгрузки.Вставить("Предупреждение", НСтр("ru = 'Не выбрано ни одного вида справочников.'"));
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСправочникиПоСсылкам И ВыбраныБанковскиеСчета И (НЕ ВыбранаВалюта ИЛИ НЕ ВыбраныБанки) Тогда
		СтруктураРезультатаВыгрузки.Вставить("Предупреждение", 
												НСтр("ru = 'Банковские счета можно выгружать только вместе с банками и валютой.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыгружатьСправочникиПоСсылкам И ВыбраныДоговоры И (НЕ ВыбранаВалюта ИЛИ НЕ ВыбраныКонтрагенты) Тогда
		СтруктураРезультатаВыгрузки.Вставить("Предупреждение", 
												НСтр("ru = 'Договоры взаиморасчетов можно выгружать только вместе с контрагентами и валютой.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если ТекстЗапроса <> "" Тогда
		
		Запрос.УстановитьПараметр("Организация", ОрганизацияСпр);
		РезЗапроса = Запрос.Выполнить();
		
		Если РезЗапроса.Пустой() Тогда
			
			СтруктураРезультатаВыгрузки.Вставить("Предупреждение", НСтр("ru = 'Не справочников подлежащих выгрузке.'"));
			Возврат;
			
		КонецЕсли;
		
		Выборка = РезЗапроса.Выбрать();
		
	КонецЕсли;	
	
	// Справочники, для которых надо выгружать Контактную информацию.
	спСправочникиКонтИнф.Очистить();
	спСправочникиКонтИнф.Добавить(Тип("СправочникСсылка.Контрагенты"));
	спСправочникиКонтИнф.Добавить(Тип("СправочникСсылка.Организации"));
	
	// Объекты, подлежащие выгрузке, накапливаем отдельно для справочников и документов.
	тзЭлементов.Очистить();
	ИнициализироватьДеревоСсылок();
	
	ЗначениеИндикатора = 1;	
	
	спНеВыгружать.Очистить();
	Если Метаданные.Документы.Найти("Рецептура")<>Неопределено И Метаданные.Документы.Найти("ПланМеню")<>Неопределено Тогда
		спНеВыгружать.Добавить(Тип("ДокументСсылка.Рецептура"));
		спНеВыгружать.Добавить(Тип("ДокументСсылка.ПланМеню"));
	КонецЕсли;
	
	// Справочники, для которых необходимо выгрузить дополнительные реквизиты.
	спСправочникиСпецРеквизиты.Очистить();
	
	Если НЕ ВыгружатьСправочникиПоСсылкам Тогда
		Если НЕ ОрганизацияСпр.Пустая() Тогда
			ТекСтрока = тзЭлементов.Добавить();
			// +evstta
			ТекСтрока.Тип = ОрганизацияСпр.Метаданные().Имя;
			// -evstta
			ТекСтрока.Уровень = 1;
			ТекСтрока.Ссылка  = ОрганизацияСпр.Ссылка;
		КонецЕсли;	
		
		Пока ТекстЗапроса <> "" И Выборка.Следующий() Цикл
			ТекСтрока = тзЭлементов.Добавить();
			// +evstta
			ТекСтрока.Тип     = Выборка.Ссылка.Метаданные().Имя;
			// -evstta
			ТекСтрока.Уровень = 1;
			ТекСтрока.Ссылка  = Выборка.Ссылка;
		КонецЦикла;
	Иначе
		Если НЕ ОрганизацияСпр.Пустая() Тогда
			ДобавитьПоСсылкам(Неопределено, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ОрганизацияСпр);
		КонецЕсли;	
		
		Пока ТекстЗапроса <> "" И Выборка.Следующий() Цикл
			
			ДобавитьПоСсылкам(Неопределено, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.Ссылка);
			ЗначениеИндикатора = ЗначениеИндикатора + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	// Бесполезные приготовления для выгрузки документов нужны, чтобы механизм выгрузки чувствовал себя как надо.
	тзДоков.Очистить();
	
	спТаблицВыгрузки.Очистить();;
	
	// Если список пуст, то для всех.
	
	ЗначениеСчетчика     = 1;
	МаксЗначениеСчетчика = тзЭлементов.Количество() + тзДоков.Количество();
	
	// Формируем шапку файла-выгрузки
	ИмяФайла = "unload_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd_HHmmss") + ".xml";
	
	// Подготовим данные для выгрузки в первую строку(шапку) файла выгрузки.
	ДатаВыгрузки = СокрЛП(ТекущаяДатаСеанса());
	ПарамНачалоПериода = ?(НачалоПериода = Дата("00010101"), "", СокрЛП(Формат(НачалоПериода, "ДЛФ=D")));
	ПарамКонецПериода = ?(КонецПериода = Дата("00010101"), "", СокрЛП(Формат(КонецПериода, "ДЛФ=D")));
	ФлагРегламентированныйУчет = Строка(РегламентированныйУчет);
	Версия = "v8";
	СтратегияСписания = Строка(
		УчетныеПолитикиСервер.Значение(
			"СтратегияСписанияПартийТоваровПоДатам",
			?(ЗначениеЗаполнено(КонецПериода), КонецПериода, ТекущаяДатаСеанса()),
			Неопределено
		)
	);
	Если Константы.ПартияТоваровОтрицательныхОстатков.Получить() <> Документы.ПоступлениеТоваров.ПустаяСсылка() Тогда
		уиПартииОтрицательныхОстатков1 = Строка(Константы.ПартияТоваровОтрицательныхОстатков.Получить().УникальныйИдентификатор());
	Иначе
		уиПартииОтрицательныхОстатков1 = "";
	КонецЕсли;
	
	// В конфигурации "Управление Рестораном" есть дополнительная константа 
	// "ПартияТоваровОтрицательныхОстатковДругихСкладов", ее необходимо выгрузить.
	// В Альфа-Авто такой константы нет, и чтобы не нарушать порядок следования параметров будем писать пустую строку.
	Если Метаданные.Константы.Найти("ПартияТоваровОтрицательныхОстатковДругихСкладов")<>Неопределено Тогда
		//@skip-check unknown-method-property
		Если Константы.ПартияТоваровОтрицательныхОстатковДругихСкладов.Получить() <> Документы.ПоступлениеТоваров.ПустаяСсылка() Тогда
			уиПартииОтрицательныхОстатков2 = Строка(Константы.ПартияТоваровОтрицательныхОстатковДругихСкладов.Получить().УникальныйИдентификатор());
		Иначе
			уиПартииОтрицательныхОстатков2 = "";
		КонецЕсли;
	Иначе
		уиПартииОтрицательныхОстатков2 = "";
	КонецЕсли;
	
	Если ВыгружатьСправочникиДляНахожденияСоответствий Тогда
		РежимВыгрузки = "Справочники_длясоответствия";
	Иначе
		РежимВыгрузки = "Справочники";
	КонецЕсли;	
	
	КаталогФайлаВыгрузки = ПолучитьЗначениеПараметраСтруктуры(
		СтруктураРезультатаВыгрузки,
		"КаталогФайлаВыгрузки",
		ВыбКаталог);
	ДокXML = Новый ЗаписьXML();
	ДокXML.ОткрытьФайл(КаталогФайлаВыгрузки + "/" + ИмяФайла, "UTF-8");
	ДокXML.ЗаписатьОбъявлениеXML();
	
	ДокXML.ЗаписатьНачалоЭлемента("БД");
	ДокXML.ЗаписатьАтрибут("Конфигурация",  Метаданные.Синоним);
	ДокXML.ЗаписатьАтрибут("ДатаВыгрузки",  ДатаВыгрузки);
	ДокXML.ЗаписатьАтрибут("НачалоПериода", ПарамНачалоПериода);
	ДокXML.ЗаписатьАтрибут("КонецПериода",  ПарамКонецПериода);
	ДокXML.ЗаписатьАтрибут("урРегламентированныйУчет", ФлагРегламентированныйУчет);
	ДокXML.ЗаписатьАтрибут("СтратегияСписанияПартийПоДатам", СтратегияСписания);
	ДокXML.ЗаписатьАтрибут("уиПартииОтрицательныхОстатков1", уиПартииОтрицательныхОстатков1);
	ДокXML.ЗаписатьАтрибут("уиПартииОтрицательныхОстатков2", уиПартииОтрицательныхОстатков2);
	ДокXML.ЗаписатьАтрибут("РежимВыгрузки",  РежимВыгрузки);
	ДокXML.ЗаписатьАтрибут("Версия",        Версия);		
	
	// Инициализируем дерево выгруженных объектов.
	Если ПоказатьВыгруженные Тогда
		ВыгруженныеОбъекты.Строки.Очистить();
		КореньСправочники = ВыгруженныеОбъекты.Строки.Добавить();
		КореньСправочники.Объект = "Справочники";			
	КонецЕсли;
	
	// Сначала выгрузим справочники.
	ПредТип = "";
	тзЭлементов.Сортировать("Тип,Уровень,Ссылка");
	
	ПервыйСправочник = Истина;
	ПервыйДокумент = Истина;
	
	Для Каждого ТекСтрока Из тзЭлементов Цикл
		
		Если ТекСтрока.Тип <> ПредТип Тогда
			ПервыйОбъект = Истина;
			
			Если ПервыйСправочник Тогда ДокXML.ЗаписатьНачалоЭлемента("Ссылки"); КонецЕсли;
			
			
			Если ПредТип <> "" Тогда ДокXML.ЗаписатьКонецЭлемента(); КонецЕсли;
			
			ДокXML.ЗаписатьНачалоЭлемента(ТекСтрока.Ссылка.Метаданные().Имя);
		КонецЕсли;
		
		ВыгрузитьОбъект(ТекСтрока, ДокXML, КореньСправочники, КореньСправочники, ВыгруженныеОбъекты, тзДвиженияКВыгрузке, ПервыйОбъект);
		
		Если ПервыйОбъект Тогда ПервыйОбъект = Ложь; КонецЕсли;
		Если ПервыйСправочник Тогда ПервыйСправочник = Ложь; КонецЕсли;
		
		ПредТип = ТекСтрока.Тип;
		
		ЗначениеСчетчика = ЗначениеСчетчика + 1;
	КонецЦикла;	
	
	Если ПредТип <> "" Тогда ДокXML.ЗаписатьКонецЭлемента(); КонецЕсли;
	
	ДокXML.ЗаписатьКонецЭлемента();
	
	// Завершим работу с файлом-выгрузки.
	ДокXML.ЗаписатьКонецЭлемента();
	ДокXML.Закрыть();
	
	СтруктураРезультатаВыгрузки.Вставить("Успешно", Истина);
	
КонецПроцедуры	//	Выгрузить()

// Процедура поиска данных ссылочного типа в обрабатываемом объекте
Процедура ДобавитьПоСсылкам(Владелец, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Знач ЗнРекв, Знач Уровень = 1)
	
	// Проверим, может хватит "углубляться" по ссылкам?
	МаксУровень = 99;
	Если Уровень > МаксУровень Тогда 
		Возврат; 
	КонецЕсли;
	
	// Работаем только со справочниками и документами ПолучитьИмяПредопределенного.
	ТекТипЗн = ТипЗнч(ЗнРекв);
	Если ЗнРекв = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	Если (НЕ Справочники.ТипВсеСсылки().СодержитТип(ТекТипЗн)) И (НЕ Документы.ТипВсеСсылки().СодержитТип(ТекТипЗн)) Тогда 
		Возврат; 
	КонецЕсли;
	Если ЗнРекв.Пустая() Тогда 
		Возврат; 
	КонецЕсли;
	Если спНеВыгружать.НайтиПоЗначению(ТекТипЗн) <> Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	// Отсечем элементы/документы другой организации
	Если НЕ ВыбОрганизация.Пустая() Тогда
		Попытка
			Если ЗнРекв.Организация <> ВыбОрганизация И  Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗнРекв)) Тогда
				Возврат;
			КонецЕсли;
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка проверки организации'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;
	КонецЕсли;
	
	// Добавим сам объект для которого ищем ссылки в таблицу выгружаемых объектов.
	Если Документы.ТипВсеСсылки().СодержитТип(ТекТипЗн) Тогда
		// Если у документа нет реквизита РегламентированныйУчет, то мы его не выгружаем.
		Если НЕ ЕстьРеквизит(ЗнРекв,"РегламентированныйУчет") И спДокументовБезРегл.НайтиПоЗначению(ЗнРекв.Метаданные().Имя) = Неопределено
			И спДокументовСпец.НайтиПоЗначению(ЗнРекв.Метаданные().Имя) = Неопределено Тогда 
			Возврат; 
		КонецЕсли; 
		Если ТекТипЗн = Тип("ДокументСсылка.СчетФактураПолученный") И ТипЗнч(ЗнРекв.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")  Тогда
			Возврат;
		КонецЕсли;
		МассивНайденныхСтрок = тзДоков.НайтиСтроки(Новый Структура("Ссылка",ЗнРекв));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда 
		ТекСтрока = МассивНайденныхСтрок[0];	
			Если ТекСтрока.Уровень > Уровень Тогда ТекСтрока.Уровень = Уровень; КонецЕсли;
			Возврат; 
		КонецЕсли;
		ТекСтрока = тзДоков.Добавить();
		Если ПоказыватьДеревоСсылок Тогда
			// Работа с деревом ссылок
			СтрокаРодитель = ДеревоСсылок.Строки.Найти(Владелец, "Ссылка", Истина);
			Если СтрокаРодитель = Неопределено Тогда
				НовСтрокаДерева = ДеревоСсылок.Строки.Добавить();
				НовСтрокаДерева.Ссылка = ЗнРекв;
				НовСтрокаДерева.ТипЗначения = ЗнРекв.Метаданные().ПолноеИмя();
			ИначеЕсли Владелец <> ЗнРекв Тогда
				НовСтрокаДерева = СтрокаРодитель.Строки.Добавить();
				НовСтрокаДерева.Ссылка = ЗнРекв;
				НовСтрокаДерева.ТипЗначения = ЗнРекв.Метаданные().ПолноеИмя();
			КонецЕсли;
		КонецЕсли;
	Иначе
		МассивСтрок = тзЭлементов.НайтиСтроки(Новый Структура("Ссылка", ЗнРекв)); 
		Если МассивСтрок.Количество() > 0 Тогда
			ТекСтрока = МассивСтрок[0];
			Если ТекСтрока.Уровень > Уровень И ЗнРекв.ЭтоГруппа Тогда ТекСтрока.Уровень = Уровень; КонецЕсли;
			
			Возврат;
		КонецЕсли;
		ТекСтрока = тзЭлементов.Добавить();
		Если ПоказыватьДеревоСсылок Тогда
			// Работа с деревом ссылок
			СтрокаРодитель = ДеревоСсылок.Строки.Найти(Владелец, "Ссылка", Истина);
			Если СтрокаРодитель = Неопределено Тогда
				НовСтрокаДерева = ДеревоСсылок.Строки.Добавить();
				НовСтрокаДерева.Ссылка = ЗнРекв;
				НовСтрокаДерева.ТипЗначения = ЗнРекв.Метаданные().ПолноеИмя();
			ИначеЕсли Владелец <> ЗнРекв Тогда
				НовСтрокаДерева = СтрокаРодитель.Строки.Добавить();
				НовСтрокаДерева.Ссылка = ЗнРекв;
				НовСтрокаДерева.ТипЗначения = ЗнРекв.Метаданные().ПолноеИмя();
			КонецЕсли;
		КонецЕсли;

		// Для справочников, обязательно сначала выгрузим владельца и родителя
		Если ЗнРекв.Владелец <> Неопределено Тогда
			Если НЕ ЗнРекв.Владелец.Пустая() Тогда
				ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ЗнРекв.Владелец, Уровень-1);
			КонецЕсли;
		КонецЕсли;
		Если ЗнРекв.Родитель <> Неопределено Тогда
			Если НЕ ЗнРекв.Родитель.Пустая() Тогда
				ДобавитьПоСсылкам(ЗнРекв,  СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ЗнРекв.Родитель, Уровень-1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// +evstta
	// Из-за единиц измерения
	ТекСтрока.Тип     = ЗнРекв.Метаданные().Имя;
	// -evstta
	ТекСтрока.Уровень = Уровень;
	ТекСтрока.Ссылка  = ЗнРекв;
	
	Уровень = Уровень + 1;
	
	// Пройдемся по реквизитам объекта
	Для Каждого Рекв Из ЗнРекв.Метаданные().Реквизиты Цикл 
		//Если  Не Рекв.Имя = "СчетФактура" Тогда
			ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ЗнРекв[Рекв.Имя], Уровень); 
		//КонецЕсли;
	КонецЦикла;
	
	// Общие реквизиты объекта
	Для Каждого ОбщРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Состав = ОбщРеквизит.Состав.Найти(Метаданные.НайтиПоТипу(ТекТипЗн));
		Если Состав = Неопределено Тогда
			Продолжить;// Нету реквизита в объекте
		КонецЕсли;
		Если Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ЗнРекв[ОбщРеквизит.Имя], Уровень);
		КонецЕсли;
	КонецЦикла;

	
	// Выгрузим виды контактной информации
	Если спСправочникиКонтИнф.НайтиПоЗначению(ТекТипЗн) <> Неопределено  Тогда
		
		ТекстЗапросаКонтИнф =  "ВЫБРАТЬ
		|	КонтактнаяИнформация.Вид КАК ВидИнф
		|ИЗ
		|	"+ЗнРекв.Метаданные().ПолноеИмя()+".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &ТекОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидИнф" ;
		
		ЗапросКонтИнф = Новый Запрос();
		ЗапросКонтИнф.УстановитьПараметр("ТекОбъект", ЗнРекв);
		ЗапросКонтИнф.Текст = ТекстЗапросаКонтИнф;
		РезЗапросаКонтИнф  	= ЗапросКонтИнф.Выполнить(); 
		ВыборкаКонтИнф = РезЗапросаКонтИнф.Выбрать();
		Пока ВыборкаКонтИнф.Следующий() Цикл
			ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ВыборкаКонтИнф.ВидИнф, -1);
		КонецЦикла;
	КонецЕсли;
	
	// Выгрузим дополнительные реквизиты для справочников
	МассивСтрок = спСправочникиСпецРеквизиты.НайтиСтроки(Новый Структура("Тип", ТекТипЗн)); 
	Если МассивСтрок.Количество() > 0 Тогда
		НайденнаяСтрока = МассивСтрок[0];
		ЗапросСпецРеквизиты = Новый запрос();
		ЗапросСпецРеквизиты.Текст = НайденнаяСтрока.ТекстЗапроса;
		Попытка
			Выполнить(НайденнаяСтрока.ПараметрыЗапроса);
			ВыборкаСпецРеквизитов = ЗапросСпецРеквизиты.Выполнить().Выбрать();
			Пока ВыборкаСпецРеквизитов.Следующий() Цикл
				Элемент = ВыборкаСпецРеквизитов.Значение;
				Если ЗначениеЗаполнено(Элемент) Тогда 
					НайденнаяСтрока.Объекты.Вставить(ЗнРекв.Наименование, Элемент);
					ДобавитьПоСсылкам(ЗнРекв,  СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ВыборкаСпецРеквизитов.Значение, 1);
				КонецЕсли;
			КонецЦикла;
		Исключение
			СтруктураРезультатаВыгрузки.Вставить("Сообщить", ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЕсли;
	
	
	// Переберем табличные части и движения по партиям товаров
	// причем из аналитики партионного движения нас интересует только номенклатура и склад.
	Если Документы.ТипВсеСсылки().СодержитТип(ТекТипЗн) Тогда
		// Переберем табличную часть
		ИмяТаблицыВыгрузки = Неопределено;
		ЗнСпискаТаблиц = спТаблицВыгрузки.НайтиПоЗначению(ЗнРекв.Метаданные().Имя);
		Если ЗнСпискаТаблиц <> Неопределено Тогда
			Если ЗнСпискаТаблиц.Представление <> "ПартииТоваров" И СтрокаВыгрузитьДвижения(ЗнСпискаТаблиц.Представление,ЗнРекв.Метаданные().Имя, тзДвиженияКВыгрузке) = Неопределено Тогда
				ИмяТаблицыВыгрузки = ЗнСпискаТаблиц.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяТаблицыВыгрузки = Неопределено Тогда
			Для Каждого ТекТабл Из ЗнРекв.Метаданные().ТабличныеЧасти Цикл
				Для Каждого СтрокаТабл Из ЗнРекв[ТекТабл.Имя] Цикл
					Для Каждого Рекв Из ТекТабл.Реквизиты Цикл
						Если Рекв.Имя = "Партия" И СтрокаТабл[Рекв.Имя] <> Неопределено
							И ЗначениеЗаполнено(ДатаВводаОстатковВБухгалтерии)
							И СтрокаТабл[Рекв.Имя].Дата < ДатаВводаОстатковВБухгалтерии Тогда
							// Партии не подлежат выгрузке по ссылке
							Продолжить;
						КонецЕсли;
						ДобавитьПоСсылкам(ЗнРекв,  СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, СтрокаТабл[Рекв.Имя], Уровень);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			ТекТабл = ЗнРекв.Метаданные().ТабличныеЧасти[ИмяТаблицыВыгрузки];
			Если ТекТабл <> Неопределено Тогда
				Для Каждого СтрокаТабл Из ЗнРекв[ТекТабл.Имя] Цикл
					Для Каждого Рекв Из ТекТабл.Реквизиты Цикл
						Если Рекв.Имя = "Партия" И СтрокаТабл[Рекв.Имя] <> Неопределено
							И ЗначениеЗаполнено(ДатаВводаОстатковВБухгалтерии)
							И СтрокаТабл[Рекв.Имя].Дата < ДатаВводаОстатковВБухгалтерии Тогда
							// Партии не подлежат выгрузке по ссылке
							Продолжить;
						КонецЕсли;
						ДобавитьПоСсылкам(ЗнРекв,  СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, СтрокаТабл[Рекв.Имя], Уровень);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Здесь делается запрос к движениям для того, чтобы добавить по ссылка номенклатуры, так как не вся
		// номенклатур участвующая в движениях может оказаться в табличной части и значит не вся будет добавлена.
		// А здесь ее и добавляем. И с ХозОперациями тоже самое.
		Для Каждого ТекДвижение	Из ЗнРекв.Метаданные().Движения Цикл
			Если СтрНайти(ТекДвижение.Имя, "ПартииТоваров") > 0 Тогда
				ТекстЗапроса = "ВЫБРАТЬ
				|ПартииТоваровОтданные.Номенклатура КАК Номенклатура,
				|ПартииТоваровОтданные.ХозОперация КАК ХозОперация,
				|ПартииТоваровОтданные.Партия КАК Партия
				|ИЗ
				|РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
				|ГДЕ
				|ПартииТоваровОтданные.Регистратор = &ТекОбъект
				|УПОРЯДОЧИТЬ ПО
				|Номенклатура";
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("ТекОбъект", ЗнРекв);
				Запрос.Текст = ТекстЗапроса;
				
				РезЗапросаПартииТоваров  = Запрос.Выполнить();
				НеВыгружатьПартииТоваров = РезЗапросаПартииТоваров.Пустой();
				
				Если НеВыгружатьПартииТоваров Тогда
					ТекстЗапроса = "ВЫБРАТЬ
					|ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
					|ПартииТоваровКомпании.ХозОперация КАК ХозОперация,
					|ПартииТоваровКомпании.Партия КАК Партия
					|ИЗ
					|РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
					|ГДЕ
					|ПартииТоваровКомпании.Регистратор = &ТекОбъект
					|УПОРЯДОЧИТЬ ПО
					|Номенклатура";
					
					Запрос = Новый Запрос();
					Запрос.УстановитьПараметр("ТекОбъект", ЗнРекв);
					Запрос.Текст = ТекстЗапроса;
					
					РезЗапросаПартииТоваров  = Запрос.Выполнить();
					НеВыгружатьПартииТоваров = РезЗапросаПартииТоваров.Пустой();
				КонецЕсли;
				
				ВыборкаПартииТоваров = РезЗапросаПартииТоваров.Выбрать();
				
				Пока ВыборкаПартииТоваров.Следующий() Цикл
					ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ВыборкаПартииТоваров.Номенклатура, Уровень);
					ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ВыборкаПартииТоваров.ХозОперация, Уровень);
					Если ВыгружатьДокументыПоДвижениямПартий И ВыборкаПартииТоваров.Партия<>Неопределено И ВыборкаПартииТоваров.Партия.Дата >= ДатаВводаОстатковВБухгалтерии Тогда
						ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ВыборкаПартииТоваров.Партия, Уровень);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// А здесь из нашего списка движений добавляем.
			Строка = СтрокаВыгрузитьДвижения(ТекДвижение.Имя,ЗнРекв.Метаданные().Имя, тзДвиженияКВыгрузке);
			Если Строка <> Неопределено И Строка.ДобавлятьПоСсылкам Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Регистратор",ЗнРекв);
				Запрос.Текст = Строка.ТекстЗапроса;
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Колонки = РезультатЗапроса.Колонки;
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						Если Колонки.Найти("Номенклатура") <> Неопределено Тогда
							ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.Номенклатура, Уровень);
						КонецЕсли;
						Если Колонки.Найти("Автомобиль") <> Неопределено Тогда
							ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.Автомобиль, Уровень);
						КонецЕсли;
						Если Колонки.Найти("ХозОперация") <> Неопределено Тогда 
							ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.ХозОперация, Уровень);
						КонецЕсли;
						Если Колонки.Найти("ДокументПередачи") <> Неопределено Тогда
							ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.ДокументПередачи, Уровень);
						КонецЕсли;
						Если Колонки.Найти("ГТД") <> Неопределено Тогда
							ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, Выборка.ГТД, Уровень);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// А здесь сформируем или возьмем существующий СФ и по нему пройдемся на тот случай, если ГТД мы не выгружали еще.
		ЗагружатьИзСчетФактуры = Ложь;
		Если НЕ (ТипЗнч(ЗнРекв) = Тип("ДокументСсылка.ВозвратПоставщику") И ЗнРекв.ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия) Тогда
			Если спТаблицВыгрузкиГТД.НайтиПоЗначению(ЗнРекв.Метаданные().Имя) <> Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СчетФактураВыданный.Ссылка КАК СчетФактура
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
				|	И СчетФактураВыданный.ДокументОснование = &ДокументОснование";
				Запрос.УстановитьПараметр("ДокументОснование",ЗнРекв);
				РезультатЗапроса = Запрос.Выполнить();
				СчетФактураНеВведен = РезультатЗапроса.Пустой();
				Если СчетФактураНеВведен Тогда				
					СчетФактура = Документы.СчетФактураВыданный;
				КонецЕсли;
				
				Если СчетФактураНеВведен Тогда
					СчетФактура = СчетФактура.СоздатьДокумент();
					СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
					СчетФактура.Заполнить(ЗнРекв);					
					ЗагружатьИзСчетФактуры = Истина;
				Иначе
					Выборка =РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					СчетФактура = Выборка.СчетФактура;
				КонецЕсли;				
				ТекТабл = СчетФактура.Товары;
				ЗагружатьИзСчетФактуры = Истина;
			КонецЕсли;   
			Если ЗагружатьИзСчетФактуры Тогда
				Для каждого ТекСтрока Из ТекТабл Цикл
					Если НЕ ТекСтрока.ГТД.Пустая() Тогда ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ТекСтрока.ГТД, Уровень); КонецЕсли;
				КонецЦикла;		
			КонецЕсли;					
		КонецЕсли;	
		
		Если ЗнРекв <> Неопределено Тогда
			Если спТаблицВыгрузкиГТДДоп.НайтиПоЗначению(ЗнРекв.Метаданные().Имя) <> Неопределено Тогда
				ТекТабл = СформироватьТЧ_С_ГТД(ЗнРекв);
				Для каждого ТекСтрока Из ТекТабл Цикл
					Если НЕ ТекСтрока.ГТД.Пустая() Тогда ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ТекСтрока.ГТД, Уровень); КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если спСТаблицаВыгрузкиГТДКорректировки.НайтиПоЗначению(ЗнРекв.Метаданные().Имя) <> Неопределено Тогда
				ТекТабл = СформироватьТЧ_С_ГТД_Корректировка(ЗнРекв, Истина);
				Для каждого ТекСтрока из ТекТабл Цикл
					Если НЕ ТекСтрока.ГТД.Пустая() Тогда ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ТекСтрока.ГТД, Уровень); КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если спСТаблицаВыгрузкиГТДКорректировки.НайтиПоЗначению(ЗнРекв.Метаданные().Имя) <> Неопределено Тогда
				ТекТабл = СформироватьТЧ_С_ГТД_Корректировка(ЗнРекв, Ложь);
				Для каждого ТекСтрока из ТекТабл Цикл
					Если НЕ ТекСтрока.ГТД.Пустая() Тогда ДобавитьПоСсылкам(ЗнРекв, СтруктураРезультатаВыгрузки, тзДвиженияКВыгрузке, ТекСтрока.ГТД, Уровень); КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры	//	ДобавитьПоСсылкам()

// Выгружает структуру реквизитов или значения реквизитов
Процедура ВыгрузитьРеквизиты(НаборРеквизитов, Ссылка, ДокXML, ЭтоСтруктура = Ложь, ДополнительныйРеквизит = Неопределено)
	
	Если ДополнительныйРеквизит <> Неопределено Тогда 
		Если ТипЗнч(ДополнительныйРеквизит)=Тип("Структура") И ДополнительныйРеквизит.Имя="ВидПлатежа" Тогда
			СтрокаЗначенийРеквизитов	= Новый Структура();
			РеквизитыТаблица				= Новый ТаблицаЗначений();
			РеквизитыТаблица.Колонки.Добавить("Имя");
			РеквизитыТаблица.Колонки.Добавить("Синоним");
			РеквизитыТаблица.Колонки.Добавить("Комментарий");
			РеквизитыТаблица.Колонки.Добавить("Тип");
			
			Для Каждого СтрокаРеквизита Из НаборРеквизитов Цикл
				СтрокаДанных			= РеквизитыТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаРеквизита);
				Если НЕ ЭтоСтруктура Тогда
					СтрокаЗначенийРеквизитов.Вставить(СтрокаРеквизита.Имя, Ссылка[СтрокаРеквизита.Имя]);
				КонецЕсли;
			КонецЦикла;
			СтрокаДанных				= РеквизитыТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ДополнительныйРеквизит);
			
			Если НЕ ЭтоСтруктура Тогда
				Если ТипЗнч(Ссылка.ПлатежноеПоручениеОснование)=Тип("ДокументСсылка.ПлатежноеПоручение")
					И ЗначениеЗаполнено(Ссылка.ПлатежноеПоручениеОснование) Тогда
					СтрокаЗначенийРеквизитов.Вставить("ВидПлатежа", Ссылка.ПлатежноеПоручениеОснование.ВидПлатежа);
				Иначе
					СтрокаЗначенийРеквизитов.Вставить("ВидПлатежа", "");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЭтоСтруктура Тогда
				Ссылка			= СтрокаЗначенийРеквизитов;
			КонецЕсли;
			ТаблицаРеквизитов	= РеквизитыТаблица;
		Иначе
			СчетФактура					= Документы.СчетФактураВыданный;		
			РеквизитыСФ					= СчетФактура.СоздатьДокумент().Метаданные().ТабличныеЧасти.Товары.Реквизиты;		
			РеквизитыТаблица			= Новый ТаблицаЗначений;
			РеквизитыТаблица.Колонки.Добавить("Имя");
			РеквизитыТаблица.Колонки.Добавить("Комментарий");
			РеквизитыТаблица.Колонки.Добавить("Синоним");
			РеквизитыТаблица.Колонки.Добавить("Тип");								
			
			Для каждого Рекв Из РеквизитыСФ Цикл 
				НоваяСтрока				= РеквизитыТаблица.Добавить();				
				НоваяСтрока.Имя			= Рекв.Имя;
				НоваяСтрока.Комментарий	= Рекв.Комментарий;
				НоваяСтрока.Синоним		= Рекв.Синоним;
				НоваяСтрока.Тип			= Рекв.Тип;
			КонецЦикла;				
			НоваяСтрока					= РеквизитыТаблица.Добавить();				
			НоваяСтрока.Имя				= ДополнительныйРеквизит.Имя;
			НоваяСтрока.Комментарий		= ДополнительныйРеквизит.Комментарий;
			НоваяСтрока.Синоним			= ДополнительныйРеквизит.Синоним;
			НоваяСтрока.Тип				= ДополнительныйРеквизит.Тип;
			ТаблицаРеквизитов			= РеквизитыТаблица;
		КонецЕсли;
	Иначе
		ТаблицаРеквизитов = НаборРеквизитов;
	КонецЕсли;		
	
	НайденныеМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Если НайденныеМетаданные <> Неопределено Тогда
		// Общие реквизиты объекта
		Для Каждого Рекв Из Метаданные.ОбщиеРеквизиты Цикл
			
			Состав = Рекв.Состав.Найти(НайденныеМетаданные);
			Если Состав = Неопределено Тогда
				Продолжить;// Нету реквизита в объекте
			КонецЕсли;
			Если Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
				СтрТипов      = "";
				Квалификаторы = Рекв.Тип;
				ТипыРеквизита = Квалификаторы.Типы();
				СоставнойТип  = Ложь;
				ПервыйТип     = Истина;
				
				Для Каждого Тип Из ТипыРеквизита Цикл
					Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда ТипСтр = "Справочник";
					ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда ТипСтр = "Документ";
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда ТипСтр = "Перечисление";
					Иначе ТипСтр = Строка(Тип);
					КонецЕсли;
					
					Если СтрНайти(СтрТипов, ТипСтр) = 0 Тогда
						СтрТипов = СтрТипов + ?(СтрТипов = "", "" , ";") + ТипСтр;
					КонецЕсли;
					
					Если НЕ ПервыйТип Тогда
						СоставнойТип = Истина;
					КонецЕсли;
					
					Если ПервыйТип Тогда ПервыйТип = Ложь; КонецЕсли;
				КонецЦикла;
				
				// Если ссылка на объект пуста, то выгрузим структуру реквизитов
				Если ЭтоСтруктура Тогда
					Длина    = Квалификаторы.КвалификаторыСтроки.Длина;
					Точность = 0;
					Если Длина = 0 Тогда
						Длина    = Квалификаторы.КвалификаторыЧисла.Разрядность;
						Точность = Квалификаторы.КвалификаторыЧисла.РазрядностьДробнойЧасти;
					КонецЕсли;
					
					СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null, ", ""), ", Null", "");
					СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null; ", ""), "; Null", "");
					СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null,",  ""), ",Null",  "");
					СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null;",  ""), ";Null",  "");
					
					// Запишем структуру реквизита в файл-выгрузки
					ДокXML.ЗаписатьНачалоЭлемента("Реквизит");
					ДокXML.ЗаписатьАтрибут("Наименование", Рекв.Имя);
					ДокXML.ЗаписатьАтрибут("Тип",          СтрТипов);
					ДокXML.ЗаписатьАтрибут("Длина",        СокрЛП(Длина));
					ДокXML.ЗаписатьАтрибут("Точность",     СокрЛП(Точность));
					ДокXML.ЗаписатьАтрибут("СоставнойТип", СокрЛП(СоставнойТип));
					ДокXML.ЗаписатьКонецЭлемента();
					
				Иначе
					
					СтрокаВыписки = Ложь;
					Попытка 
						Если Строка(Ссылка) = "ДокументТабличнаяЧастьСтрока.Выписка.Состав" И Рекв.Имя = "ПлатежноеПоручениеОснование" Тогда
							СтрокаВыписки = Истина;
						КонецЕсли;
					Исключение 
						СтрокаВыписки = Ложь;
					КонецПопытки;
					
					// Если выгружаем реквизиты из табличной части выписки, то вместо платежных поручений выгружаем представление,
					// чтобы потом можно было достать из него номер и дату.
					// А попытка исключение для того, что иногда передаются ВыборкаРезультатаЗапроса, а ее не определишь.
					Если СтрокаВыписки Тогда
						ЗначениеРеквизита = Строка(Ссылка[Рекв.Имя]);
						
					ИначеЕсли Рекв.Имя="Партия" И Ссылка[Рекв.Имя] <> Неопределено И ЗначениеЗаполнено(ДатаВводаОстатковВБухгалтерии) И Ссылка[Рекв.Имя].Дата < ДатаВводаОстатковВБухгалтерии Тогда
						// Партии не подлежат выгрузке по ссылке
						ЗначениеРеквизита	= Неопределено;
						
					Иначе					
						// Здесь смотрится а не является ли документ по ссылке не регламентированного учета или может
						// у него вообще нет этого реквизита. Если так, то он и не выгружается.
						// Для УР такого не было, поэтому так и оставил.
						// Потом может будет необходимость здесь разделить на управленческий и на регламентированный учет.
						ЗначениеРеквизита = Неопределено;
						Если (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка[Рекв.Имя]))) Тогда
							Если (Ссылка[Рекв.Имя] <> Неопределено)
								И ((Ссылка[Рекв.Имя].Метаданные().Реквизиты.Найти("РегламентированныйУчет")<>Неопределено ИЛИ Рекв.Имя="ПлатежноеПоручениеОснование" ИЛИ (Рекв.Имя="Партия" И Ссылка[Рекв.Имя].Метаданные().Имя="ПересортицаТоваров")
								ИЛИ спДокументовБезРегл.НайтиПоЗначению(Ссылка[Рекв.Имя].Метаданные().Имя) <> Неопределено ИЛИ спДокументовСпец.НайтиПоЗначению(Ссылка[Рекв.Имя].Метаданные().Имя) <> Неопределено)) Тогда
								ЗначениеРеквизита=Ссылка[Рекв.Имя];
							КонецЕсли;					
						Иначе
							ЗначениеРеквизита = Ссылка[Рекв.Имя];
						КонецЕсли; 
					КонецЕсли;
					
					// Запишем значение реквизита в файл-выгрузки
					ДокXML.ЗаписатьАтрибут(Рекв.Имя, СокрЛП(ПредставлениеРеквизита(ЗначениеРеквизита, СоставнойТип)));
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// В связи с переходом на общие реквизиты возникла необходимость проверять регламентированный учет таким образом:
	// Если это выборка из результата запроса.
	
	ТекущиеМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Если ТекущиеМетаданные<>Неопределено Тогда
		ТекущиеМетаданные = ТекущиеМетаданные.Родитель();
		Если ТекущиеМетаданные.Родитель()<>Неопределено Тогда
			// Если это не корень
			Состав = Метаданные.ОбщиеРеквизиты.РегламентированныйУчет.Состав.Найти(ТекущиеМетаданные);
		Иначе
			Состав = Неопределено;
		КонецЕсли;
	Иначе
		Состав = Неопределено;
	КонецЕсли;
	Для Каждого Рекв Из ТаблицаРеквизитов Цикл
		СтрТипов      = "";
		Квалификаторы = ?((ТипЗнч(Рекв) <> Тип("КолонкаРезультатаЗапроса")) И (ТипЗнч(Рекв) <> Тип("КолонкаТаблицыЗначений")), Рекв.Тип, Рекв.ТипЗначения);
		ТипыРеквизита = Квалификаторы.Типы();
		СоставнойТип  = Ложь;
		ПервыйТип     = Истина;
		
		Для Каждого Тип Из ТипыРеквизита Цикл
			Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда ТипСтр = "Справочник";
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда ТипСтр = "Документ";
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда ТипСтр = "Перечисление";
			Иначе ТипСтр = Строка(Тип);
			КонецЕсли;
			
			Если СтрНайти(СтрТипов, ТипСтр) = 0 Тогда
				СтрТипов = СтрТипов + ?(СтрТипов = "", "" , ";") + ТипСтр;
			КонецЕсли;
			
			Если ТипЗнч(Рекв) <> Тип("КолонкаРезультатаЗапроса") И НЕ ПервыйТип Тогда
				СоставнойТип = Истина;
			КонецЕсли;
			
			Если ПервыйТип Тогда ПервыйТип = Ложь; КонецЕсли;
		КонецЦикла;
		
		// Если ссылка на объект пуста, то выгрузим структуру реквизитов
		Если ЭтоСтруктура Тогда
			Длина    = Квалификаторы.КвалификаторыСтроки.Длина;
			Точность = 0;
			Если Длина = 0 Тогда
				Длина    = Квалификаторы.КвалификаторыЧисла.Разрядность;
				Точность = Квалификаторы.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КонецЕсли;
			
			СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null, ", ""), ", Null", "");
			СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null; ", ""), "; Null", "");
			СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null,",  ""), ",Null",  "");
			СтрТипов = СтрЗаменить(СтрЗаменить(СтрТипов, "Null;",  ""), ";Null",  "");
			
			// Запишем структуру реквизита в файл-выгрузки
			ДокXML.ЗаписатьНачалоЭлемента("Реквизит");
			ДокXML.ЗаписатьАтрибут("Наименование", Рекв.Имя);
			ДокXML.ЗаписатьАтрибут("Тип",          СтрТипов);
			ДокXML.ЗаписатьАтрибут("Длина",        СокрЛП(Длина));
			ДокXML.ЗаписатьАтрибут("Точность",     СокрЛП(Точность));
			ДокXML.ЗаписатьАтрибут("СоставнойТип", СокрЛП(СоставнойТип));
			ДокXML.ЗаписатьКонецЭлемента();
			
		Иначе
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка[Рекв.Имя])) И ТипЗнч(Ссылка[Рекв.Имя])<>Тип("Неопределено") Тогда
				// В связи с переходом на общие реквизиты возникла необходимость проверять регламентированный учет таким образом.
				Состав = Метаданные.ОбщиеРеквизиты.РегламентированныйУчет.Состав.Найти(Метаданные.НайтиПоТипу(ТипЗнч(Ссылка[Рекв.Имя])));
			Иначе
				Состав = Неопределено;
			КонецЕсли;
			
			СтрокаВыписки = Ложь;
			Попытка
				Если Строка(Ссылка) = "ДокументТабличнаяЧастьСтрока.Выписка.Состав" И Рекв.Имя = "ПлатежноеПоручениеОснование" Тогда
					СтрокаВыписки = Истина;
				КонецЕсли;
			Исключение 
				СтрокаВыписки = Ложь;
			КонецПопытки;
			
			// Если выгружаем реквизиты из табличной части выписки, то вместо платежных поручений выгружаем представление,
			// чтобы потом можно было достать из него номер и дату.
			// А попытка исключение для того, что иногда передаются ВыборкаРезультатаЗапроса, а ее не определишь.
			Если СтрокаВыписки Тогда
				ЗначениеРеквизита = Строка(Ссылка[Рекв.Имя]);
				
			ИначеЕсли Рекв.Имя="Партия" И Ссылка[Рекв.Имя] <> Неопределено И ЗначениеЗаполнено(ДатаВводаОстатковВБухгалтерии) И Ссылка[Рекв.Имя].Дата < ДатаВводаОстатковВБухгалтерии Тогда
				// Партии не подлежат выгрузке по ссылке
				ЗначениеРеквизита	= Неопределено;
				
			Иначе
				// Здесь смотрится а не является ли документ по ссылке не регламентированного учета или может
				// у него вообще нет этого реквизита. Если так, то он и не выгружается.
				// Для УР такого не было, поэтому так и оставил.
				// Потом может будет необходимость здесь разделить на управленческий и на регламентированный учет.
				ЗначениеРеквизита = Неопределено;
				Если (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка[Рекв.Имя]))) Тогда
					Если (Ссылка[Рекв.Имя] <> Неопределено)
						И (((Состав <> Неопределено
							И Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать)
							ИЛИ Рекв.Имя="ПлатежноеПоручениеОснование"
							ИЛИ (Рекв.Имя="Партия" И Ссылка[Рекв.Имя].Метаданные().Имя="ПересортицаТоваров")
							ИЛИ спДокументовБезРегл.НайтиПоЗначению(Ссылка[Рекв.Имя].Метаданные().Имя) <> Неопределено
							ИЛИ спДокументовСпец.НайтиПоЗначению(Ссылка[Рекв.Имя].Метаданные().Имя) <> Неопределено)) Тогда
						ЗначениеРеквизита=Ссылка[Рекв.Имя];
					КонецЕсли;
				Иначе
					ЗначениеРеквизита = Ссылка[Рекв.Имя];
				КонецЕсли;
			КонецЕсли;
			
			// Запишем значение реквизита в файл-выгрузки
			ДокXML.ЗаписатьАтрибут(Рекв.Имя, СокрЛП(ПредставлениеРеквизита(ЗначениеРеквизита, СоставнойТип)));
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	//	ВыгрузитьРеквизиты()

// Функция аналог системной от 1с ПолучитьПолноеИмяПредопределенногоЗначения так как системная паадет на некоторых значениях
Функция _ПолучитьПолноеИмяПредопределенногоЗначения(Ссылка)
	Возврат ""+Ссылка.Метаданные().ПолноеИмя()+"."+Ссылка.ИмяПредопределенныхДанных;
КонецФункции

// Выгружает объект в файл-выгрузки и добавляет "связанные" значения реквизитов
Процедура ВыгрузитьОбъект(ТекСтрокаОбъекта, ДокXML, КореньДокументы, КореньСправочники, ДеревоВыгруженныхОбъектов, тзДвиженияКВыгрузке, ПервыйОбъект = Ложь)
	
	Ссылка   = ТекСтрокаОбъекта.Ссылка;
	ТекТипЗн = ТипЗнч(Ссылка);
	ИмяДокумента = Ссылка.Метаданные().Имя;
	
	// Попытаемся получить движения по регистрам "Партии товаров"
	// по выгружаемому объекту.
	НеВыгружатьПартииТоваров = Истина;
	Для Каждого Строка Из тзДвиженияКВыгрузке Цикл
		Строка.НеВыгружать = Истина;
	КонецЦикла;	
	
	ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТекТипЗн);
	
	// Естественно только для документов ...
	Если ЭтоДокумент Тогда
		СкладМПЗ = "";
		Если ЕстьРеквизит(Ссылка, "СкладКомпании") Тогда
			СкладМПЗ = Ссылка.СкладКомпании;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПартииТоваровКомпании.СкладКомпании КАК СкладКомпании,
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпании.ВидДвижения КАК ВидДвижения,
		|	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,				
		|	ПартииТоваровКомпании.ХозОперация КАК ХозОперация,
		|	ПартииТоваровКомпании.Партия КАК Партия,
		|	ПартииТоваровКомпании.Количество КАК Количество,
		|	ПартииТоваровКомпании.Сумма КАК Сумма,
		|	ПартииТоваровКомпании.СуммаНДС КАК СуммаНДС,
		|	ПартииТоваровКомпании.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Регистратор = &ТекОбъект
		|				
		|УПОРЯДОЧИТЬ ПО
		|	СкладКомпании,
		|	Номенклатура,
		|   СтатусПартии,
		|	ВидДвижения";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
		Запрос.Текст = ТекстЗапроса;
		
		РезЗапросаПартииТоваров  = Запрос.Выполнить();
		НеВыгружатьПартииТоваров = РезЗапросаПартииТоваров.Пустой();
		
		Если НеВыгружатьПартииТоваров Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&СкладМПЗ КАК СкладКомпании,
			|	ПартииТоваровОтданные.Номенклатура КАК Номенклатура,
			|	ПартииТоваровОтданные.ВидДвижения КАК ВидДвижения,
			|	&Статус КАК СтатусПартии,								
			|	ПартииТоваровОтданные.ХозОперация КАК ХозОперация,
			|	ПартииТоваровОтданные.Партия КАК Партия,
			|	ПартииТоваровОтданные.Количество КАК Количество,
			|	ПартииТоваровОтданные.Сумма КАК Сумма,
			|	ПартииТоваровОтданные.СуммаУпр КАК СуммаУпр,
			|	ПартииТоваровОтданные.СуммаНДС КАК СуммаНДС
			|ИЗ
			|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
			|ГДЕ
			|	ПартииТоваровОтданные.Регистратор = &ТекОбъект
			|
			|УПОРЯДОЧИТЬ ПО
			|	СкладКомпании,
			|	Номенклатура,
			|	СтатусПартии,
			|	ВидДвижения";			
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПартий.ТоварКупленный);
			Запрос.УстановитьПараметр("СкладМПЗ", СкладМПЗ);
			Запрос.Текст = ТекстЗапроса;
			
			РезЗапросаПартииТоваров  = Запрос.Выполнить();
			НеВыгружатьПартииТоваров = РезЗапросаПартииТоваров.Пустой();
		КонецЕсли;
		
		Если НЕ НеВыгружатьПартииТоваров Тогда
			ВыборкаПартииТоваров = РезЗапросаПартииТоваров.Выбрать();
		КонецЕсли;
		
		Для Каждого Строка Из тзДвиженияКВыгрузке Цикл
			СтрокаДвижения = СтрокаВыгрузитьДвижения(Строка.Наименование,ИмяДокумента,тзДвиженияКВыгрузке,ИмяКонфигурации);
			Если СтрокаДвижения = Неопределено Тогда Продолжить; КонецЕсли;
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Регистратор",Ссылка);
			Запрос.Текст            = Строка.ТекстЗапроса;
			РезЗапроса              = Запрос.Выполнить();
			Строка.НеВыгружать      = РезЗапроса.Пустой();
			Строка.РезультатЗапроса = РезЗапроса;
		КонецЦикла;		
	КонецЕсли;
	
	// Выгрузим контактную информацию если необходимо,
	// "представление" вида информации необходимо для загрузки в версию Бухгалтерии 4.5.
	ВыгружатьКонтИнф = Ложь;
	ЕстьКонтИнф = ?(спСправочникиКонтИнф.НайтиПоЗначению(ТекТипЗн)<>Неопределено, Истина,Ложь);
	Если ЕстьКонтИнф Тогда 
		
		МассивКИ = Новый Массив;
		МассивКИ.Добавить(Ссылка);
		
		СписокТипИнф = Новый СписокЗначений();
		СписокТипИнф.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		СписокТипИнф.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивКИ, СписокТипИнф,,ТекущаяДатаСеанса());
		
		// Инициализируем структуру контактной информации
		ВыборкаКонтИнф = Новый ТаблицаЗначений;
		ВыборкаКонтИнф.Колонки.Добавить("ТипИнф",        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
		ВыборкаКонтИнф.Колонки.Добавить("ВидИнф",        Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
		ВыборкаКонтИнф.Колонки.Добавить("СтрокаВид",     Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Индекс",        Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Регион",        Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Район",         Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Город",         Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("НасПункт",      Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Улица",         Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Дом",           Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Корпус",        Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("Квартира",      Новый ОписаниеТипов("Строка"));
		ВыборкаКонтИнф.Колонки.Добавить("КодСтр",        Новый ОписаниеТипов("Строка"));
		
		ВыгружатьКонтИнф = (КонтактнаяИнформацияОбъекта.Количество() > 0);
		
		Если ВыгружатьКонтИнф Тогда
			
			Для Каждого ТекущаяКИОбъекта Из КонтактнаяИнформацияОбъекта Цикл
				
				ПустоеЗначениеПолей = (ТекущаяКИОбъекта.ЗначенияПолей = "" И ТекущаяКИОбъекта.Значение = "");
				
				СтруктураКонтактнойИнформации = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(
					?(ЗначениеЗаполнено(ТекущаяКИОбъекта.Значение), ТекущаяКИОбъекта.Значение, ТекущаяКИОбъекта.ЗначенияПолей));
				
				Если НЕ ПустоеЗначениеПолей
					И СтруктураКонтактнойИнформации.Свойство("КодСтраны")
					И СтрСравнить(СтруктураКонтактнойИнформации.КодСтраны, Справочники.СтраныМира.Россия.Код) = 0
					И ЗначениеЗаполнено(СтруктураКонтактнойИнформации.КодРегиона) Тогда
					АдресРФ = Истина;
				Иначе
					АдресРФ = Ложь;
				КонецЕсли;

				
				НоваяСтрока = ВыборкаКонтИнф.Добавить();
				НоваяСтрока.ТипИнф = ТекущаяКИОбъекта.Тип;
				НоваяСтрока.ВидИнф = ТекущаяКИОбъекта.Вид;
				НоваяСтрока.СтрокаВид = ТекущаяКИОбъекта.Вид.Наименование;
				НоваяСтрока.Представление = ТекущаяКИОбъекта.Представление;
				
				Если НЕ ПустоеЗначениеПолей И ТекущаяКИОбъекта.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					НоваяСтрока.Индекс   = ПолучитьЗначениеПараметраСтруктуры(СтруктураКонтактнойИнформации, "КодСтраны", "");
					НоваяСтрока.Регион   = ПолучитьЗначениеПараметраСтруктуры(СтруктураКонтактнойИнформации, "КодГорода", "");
					НоваяСтрока.Район    = ПолучитьЗначениеПараметраСтруктуры(СтруктураКонтактнойИнформации, "НомерТелефона", "");
					НоваяСтрока.Город    = ПолучитьЗначениеПараметраСтруктуры(СтруктураКонтактнойИнформации, "Добавочный", "");
					НоваяСтрока.НасПункт = ТекущаяКИОбъекта.Представление;
				ИначеЕсли НЕ ПустоеЗначениеПолей И НЕ АдресРФ И СтруктураКонтактнойИнформации.Свойство("КодСтраны") Тогда
					НоваяСтрока.КодСтр   = СтруктураКонтактнойИнформации.КодСтраны;
					НоваяСтрока.НасПункт = ТекущаяКИОбъекта.Представление;;
				ИначеЕсли НЕ ПустоеЗначениеПолей И АдресРФ Тогда
					НоваяСтрока.НасПункт = СтруктураКонтактнойИнформации.НаселенныйПункт;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураКонтактнойИнформации);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим таблицу списаний автомобилей для "Реализации автомобилей"
	Если ИмяДокумента="РеализацияАвтомобилей" Тогда	
		ТаблицаСписанийАвтомобилей		= ПолучитьСписанияАвтомобилей(Ссылка);
		ЕстьТаблицаСписанийАвтомобилей	= ТаблицаСписанийАвтомобилей.Количество()>0;
	Иначе
		ЕстьТаблицаСписанийАвтомобилей	= Ложь;
	КонецЕсли;
	
	// Для первого объекта (т.е. если объекты данного вида еще не выгружались)
	// добавим системную информацию и структуру реквизитов.
	Если ПервыйОбъект Тогда
		ДокXML.ЗаписатьНачалоЭлемента("Структура");
		Если Справочники.ТипВсеСсылки().СодержитТип(ТекТипЗн) Тогда
			// Попытаемся получить идентификаторы владельцев.
			ИдентификаторыВладельцев = "";
			Для Каждого Владелец Из Ссылка.Метаданные().Владельцы Цикл
				ИдентификаторыВладельцев = ИдентификаторыВладельцев + ?(ИдентификаторыВладельцев = "", "", ";") + Владелец.Имя;
			КонецЦикла;
			
			ДокXML.ЗаписатьАтрибут("ДлинаКода",         СокрЛП(Ссылка.Метаданные().ДлинаКода));
			ДокXML.ЗаписатьАтрибут("ДлинаНаименования", СокрЛП(Ссылка.Метаданные().ДлинаНаименования));
			ДокXML.ЗаписатьАтрибут("КоличествоУровней", СокрЛП(Ссылка.Метаданные().КоличествоУровней));
			ДокXML.ЗаписатьАтрибут("Владельцы",         ИдентификаторыВладельцев);
			
		Иначе
			ДокXML.ЗаписатьАтрибут("ДлинаНомера", СокрЛП(Ссылка.Метаданные().ДлинаНомера));
		КонецЕсли;
		
		ВыгрузитьРеквизиты(Ссылка.Метаданные().Реквизиты, Ссылка, ДокXML, Истина);
		
		МассивСтрок = спСправочникиСпецРеквизиты.НайтиСтроки(Новый Структура("Тип", ТекТипЗн)); 
		
		Если МассивСтрок.Количество() > 0 Тогда
			НайденнаяСтрока = МассивСтрок[0];
			
			Если НайденнаяСтрока.Объекты.Количество() > 0 Тогда
				НаборРеквизитов = Новый ТаблицаЗначений();
				НаборРеквизитов.Колонки.Добавить("Имя");
				НаборРеквизитов.Колонки.Добавить("Тип");
				НаборРеквизитов.Колонки.Добавить(НайденнаяСтрока.Реквизит);
				СтрокаДанных = НаборРеквизитов.Добавить();
				СтрокаДанных.Имя = НайденнаяСтрока.Реквизит;
				МассивТипов = Новый Массив();
				МассивТипов.Добавить(ТипЗнч(НайденнаяСтрока.Значение));
				СтрокаДанных.Тип = Новый ОписаниеТипов(МассивТипов);
				ВыгрузитьРеквизиты(НаборРеквизитов, Ссылка, ДокXML, Истина);
			КонецЕсли;
		КонецЕсли;
		
		ИмяТаблицыВыгрузки = Неопределено;
		ЗнСпискаТаблиц = спТаблицВыгрузки.НайтиПоЗначению(Ссылка.Метаданные().Имя);
		Если ЗнСпискаТаблиц <> Неопределено Тогда
			Если ЗнСпискаТаблиц.Представление <> "ПартииТоваров" И СтрокаВыгрузитьДвижения(ЗнСпискаТаблиц.Представление,ИмяДокумента, тзДвиженияКВыгрузке) =Неопределено Тогда
				ИмяТаблицыВыгрузки = ЗнСпискаТаблиц.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяТаблицыВыгрузки = Неопределено Тогда
			Для Каждого ТекТабл Из Ссылка.Метаданные().ТабличныеЧасти Цикл
				ДокXML.ЗаписатьНачалоЭлемента("Таблица");
				ДокXML.ЗаписатьАтрибут("Наименование", ТекТабл.Имя);
				Если ТекТипЗн=Тип("ДокументСсылка.Выписка") И ТекТабл.Имя="Состав" Тогда
					ДополнительныйРеквизитВидПлатежа = Новый Структура("Имя,Тип,Синоним,Комментарий");
					ДополнительныйРеквизитВидПлатежа.Имя         = "ВидПлатежа";
					ДополнительныйРеквизитВидПлатежа.Тип         = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));
					ДополнительныйРеквизитВидПлатежа.Синоним     = НСтр("ru = 'Вид платежа'");
					ДополнительныйРеквизитВидПлатежа.Комментарий = "";
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, Ссылка[ТекТабл.Имя], ДокXML, Истина, ДополнительныйРеквизитВидПлатежа);
				Иначе
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, Ссылка[ТекТабл.Имя], ДокXML, Истина);
				КонецЕсли;
				ДокXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
		Иначе
			ТекТабл = Ссылка.Метаданные().ТабличныеЧасти[ИмяТаблицыВыгрузки];
			Если ТекТабл <> Неопределено Тогда
				ДокXML.ЗаписатьНачалоЭлемента("Таблица");
				ДокXML.ЗаписатьАтрибут("Наименование", ТекТабл.Имя);
				Если ТекТипЗн=Тип("ДокументСсылка.Выписка") И ТекТабл.Имя="Состав" Тогда
					ДополнительныйРеквизитВидПлатежа = Новый Структура("Имя,Тип,Синоним,Комментарий");
					ДополнительныйРеквизитВидПлатежа.Имя         = "ВидПлатежа";
					ДополнительныйРеквизитВидПлатежа.Тип         = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));
					ДополнительныйРеквизитВидПлатежа.Синоним     = НСтр("ru = 'Вид платежа'");
					ДополнительныйРеквизитВидПлатежа.Комментарий = "";
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, Ссылка[ТекТабл.Имя], ДокXML, Истина, ДополнительныйРеквизитВидПлатежа);
				Иначе
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, Ссылка[ТекТабл.Имя], ДокXML, Истина);
				КонецЕсли;
				ДокXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьКонтИнф Тогда
			ДокXML.ЗаписатьНачалоЭлемента("Таблица");
			ДокXML.ЗаписатьАтрибут("Наименование", "КонтактнаяИнформация");
			ВыгрузитьРеквизиты(ВыборкаКонтИнф.Колонки, ВыборкаКонтИнф, ДокXML, Истина);
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;	
		
		Если ЭтоДокумент Тогда
			Для Каждого ТекДвижение	Из Ссылка.Метаданные().Движения Цикл
				Если СтрНайти(ТекДвижение.Имя, "ПартииТоваров") > 0 Тогда
					ДокXML.ЗаписатьНачалоЭлемента("Таблица");
					ДокXML.ЗаписатьАтрибут("Наименование", "ПартииТоваров");
					ВыгрузитьРеквизиты(РезЗапросаПартииТоваров.Колонки, ВыборкаПартииТоваров, ДокXML, Истина);
					ДокXML.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				Строка = СтрокаВыгрузитьДвижения(ТекДвижение.Имя,ИмяДокумента,тзДвиженияКВыгрузке);
				Если Строка <> Неопределено Тогда
					ДокXML.ЗаписатьНачалоЭлемента("Таблица");
					ДокXML.ЗаписатьАтрибут("Наименование", Строка.Наименование);
					Если Строка.РезультатЗапроса <> Неопределено Тогда
						ВыгрузитьРеквизиты(Строка.РезультатЗапроса.Колонки, Строка.РезультатЗапроса.Выбрать(), ДокXML, Истина);
					КонецЕсли;
					ДокXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ (ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратПоставщику") И Ссылка.ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия) Тогда
				// Здесь выгрузим структуру табличной части СФ.
				Если спТаблицВыгрузкиГТД.НайтиПоЗначению(Ссылка.Метаданные().Имя) <> Неопределено Тогда
					СчетФактура = Документы.СчетФактураВыданный;
					РеквизитыСФ = СчетФактура.СоздатьДокумент().Метаданные().ТабличныеЧасти.Товары.Реквизиты;
					Если Ссылка.Метаданные().Имя = "ОтчетКомиссионера" Тогда
						ДополнительныйРеквизит = Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Вознаграждение;
					ИначеЕсли Ссылка.Метаданные().Имя = "ЗаказНаряд" И Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("Источник")<> Неопределено Тогда
						ДополнительныйРеквизит = Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Источник;
					КонецЕсли;
					ДокXML.ЗаписатьНачалоЭлемента("Таблица");
					ДокXML.ЗаписатьАтрибут("Наименование", "СФ");
					ВыгрузитьРеквизиты(РеквизитыСФ, "", ДокXML, Истина, ДополнительныйРеквизит);
					ДокXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
			
			
			Если спТаблицВыгрузкиГТДДоп.НайтиПоЗначению(Ссылка.Метаданные().Имя) <> Неопределено Тогда
				ТекТабл = СформироватьТЧ_С_ГТД(Ссылка);		
				РеквизитыСФ = ТекТабл.Колонки;		
				ДокXML.ЗаписатьНачалоЭлемента("Таблица");
				ДокXML.ЗаписатьАтрибут("Наименование", "СФ");
				ВыгрузитьРеквизиты(РеквизитыСФ, "", ДокXML, Истина);
				ДокXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Если спСТаблицаВыгрузкиГТДКорректировки.НайтиПоЗначению(Ссылка.Метаданные().Имя) <> Неопределено Тогда
				
				ТекТабл =  СформироватьТЧ_С_ГТД_Корректировка(Ссылка, Истина);		
				РеквизитыСФ = ТекТабл.Колонки;		
				ДокXML.ЗаписатьНачалоЭлемента("Таблица");
				ДокXML.ЗаписатьАтрибут("Наименование", "СФДоКорректировки");
				ВыгрузитьРеквизиты(РеквизитыСФ, "", ДокXML, Истина);
				ДокXML.ЗаписатьКонецЭлемента();
				
				ТекТабл =  СформироватьТЧ_С_ГТД_Корректировка(Ссылка, Ложь);		
				РеквизитыСФ = ТекТабл.Колонки;		
				ДокXML.ЗаписатьНачалоЭлемента("Таблица");
				ДокXML.ЗаписатьАтрибут("Наименование", "СФДоИсправления");
				ВыгрузитьРеквизиты(РеквизитыСФ, "", ДокXML, Истина);
				ДокXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			Если ЕстьТаблицаСписанийАвтомобилей Тогда
				ДокXML.ЗаписатьНачалоЭлемента("Таблица");
				ДокXML.ЗаписатьАтрибут("Наименование", "СуммыСписанийАвтомобилей");
				ВыгрузитьРеквизиты(ТаблицаСписанийАвтомобилей.Колонки, ТаблицаСписанийАвтомобилей, ДокXML, Истина);
				ДокXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
		
		ДокXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	// Теперь системная информация самого объекта.
	ДокXML.ЗаписатьНачалоЭлемента("Объект");
	ДокXML.ЗаписатьАтрибут("_1С_ИдентификаторБД", СокрЛП(Ссылка.УникальныйИдентификатор()));
	ДокXML.ЗаписатьАтрибут("_1С_Уровень",         СокрЛП(ТекСтрокаОбъекта.Уровень));
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ДокXML.ЗаписатьАтрибут("_1С_Владелец",     ?(Ссылка.Владелец = Неопределено, "", СокрЛП(Ссылка.Владелец.УникальныйИдентификатор())));
		Попытка
			ДокXML.ЗаписатьАтрибут("_1С_Родитель",     ?(Ссылка.Родитель.Пустая(), "", СокрЛП(Ссылка.Родитель.УникальныйИдентификатор())));
		Исключение
			ДокXML.ЗаписатьАтрибут("_1С_Родитель",     "");
		КонецПопытки; 
		ДокXML.ЗаписатьАтрибут("_1С_ЭтоГруппа",    СокрЛП(Ссылка.ЭтоГруппа));
		ДокXML.ЗаписатьАтрибут("_1С_Код",          СокрЛП(Ссылка.Код));
		ДокXML.ЗаписатьАтрибут("_1С_Наименование", СокрЛП(Ссылка.Наименование));
		ДокXML.ЗаписатьАтрибут("_1С_НаименованиеПредопределённого", ?(Ссылка.Предопределенный,_ПолучитьПолноеИмяПредопределенногоЗначения(Ссылка),""));
	Иначе
		ДокXML.ЗаписатьАтрибут("_1С_Номер",    	СокрЛП(Ссылка.Номер));
		ДокXML.ЗаписатьАтрибут("_1С_Дата",     	СокрЛП(Ссылка.Дата));
		ДокXML.ЗаписатьАтрибут("_1С_Проведен", 	СокрЛП(Ссылка.Проведен));
	КонецЕсли;
	
	// Ну и выгрузим значения реквизитов.
	ВыгрузитьРеквизиты(Ссылка.Метаданные().Реквизиты, Ссылка, ДокXML);
	МассивСтрок = спСправочникиСпецРеквизиты.НайтиСтроки(Новый Структура("Тип", ТекТипЗн)); 
	Если МассивСтрок.Количество() > 0 Тогда
		НайденнаяСтрока = МассивСтрок[0];			;
		ДопОбъекты 			= НайденнаяСтрока.Объекты;
		ОбъектДляВыгрузки 	= ДопОбъекты.Получить(Ссылка.Наименование);
		Если (ДопОбъекты.Количество() > 0) И (ОбъектДляВыгрузки <> Неопределено) Тогда
			НаборРеквизитов	= Новый ТаблицаЗначений();
			НаборРеквизитов.Колонки.Добавить("Имя");
			НаборРеквизитов.Колонки.Добавить("Тип");
			НаборРеквизитов.Колонки.Добавить(НайденнаяСтрока.Реквизит);
			СтрокаДанных	= НаборРеквизитов.Добавить();
			СтрокаДанных.Имя= НайденнаяСтрока.Реквизит;
			МассивТипов		= Новый Массив();
			МассивТипов.Добавить(ТипЗнч(ОбъектДляВыгрузки));
			СтрокаДанных.Тип= Новый ОписаниеТипов(МассивТипов);
			СтрокаДанных[НайденнаяСтрока.Реквизит] = ОбъектДляВыгрузки;
			ВыгрузитьРеквизиты(НаборРеквизитов, СтрокаДанных, ДокXML);
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицыВыгрузки	= Неопределено;
	ЗнСпискаТаблиц		= спТаблицВыгрузки.НайтиПоЗначению(Ссылка.Метаданные().Имя);
	Если ЗнСпискаТаблиц <> Неопределено Тогда
		Если ЗнСпискаТаблиц.Представление <> "ПартииТоваров" И СтрокаВыгрузитьДвижения(ЗнСпискаТаблиц.Представление,ИмяДокумента,тзДвиженияКВыгрузке) = Неопределено Тогда
			ИмяТаблицыВыгрузки	= ЗнСпискаТаблиц.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицыВыгрузки = Неопределено Тогда
		Для Каждого ТекТабл Из Ссылка.Метаданные().ТабличныеЧасти Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Таблица");
			ДокXML.ЗаписатьАтрибут("Наименование", ТекТабл.Имя);
			
			Для Каждого ТекСтрока Из Ссылка[ТекТабл.Имя] Цикл
				ДокXML.ЗаписатьНачалоЭлемента("Строка");
				
				ОбщееОписание = "    {""Таблица." + ТекТабл.Имя + """";
				// Для выписки необходимо выгрузить "Вид платежа" платежного документа основания.
				Если ТекТипЗн=Тип("ДокументСсылка.Выписка") И ТекТабл.Имя="Состав" Тогда
					ДополнительныйРеквизитВидПлатежа = Новый Структура("Имя,Тип,Синоним,Комментарий");
					ДополнительныйРеквизитВидПлатежа.Имя         = "ВидПлатежа";
					ДополнительныйРеквизитВидПлатежа.Тип         = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));
					ДополнительныйРеквизитВидПлатежа.Синоним     = НСтр("ru = 'Вид платежа'");
					ДополнительныйРеквизитВидПлатежа.Комментарий = "";
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, ТекСтрока, ДокXML, , ДополнительныйРеквизитВидПлатежа);
				Иначе
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, ТекСтрока, ДокXML);
				КонецЕсли;
				
				ДокXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			ДокXML.ЗаписатьКонецЭлемента()
		КонецЦикла;
		
	Иначе
		ТекТабл = Ссылка.Метаданные().ТабличныеЧасти[ИмяТаблицыВыгрузки];
		Если ТекТабл <> Неопределено Тогда
			ДокXML.ЗаписатьНачалоЭлемента("Таблица");
			ДокXML.ЗаписатьАтрибут("Наименование", ТекТабл.Имя);
			
			Для Каждого ТекСтрока Из Ссылка[ТекТабл.Имя] Цикл
				ДокXML.ЗаписатьНачалоЭлемента("Строка");
				
				ОбщееОписание = "    {""Таблица." + ТекТабл.Имя + """";
				// Для выписки необходимо выгрузить "Вид платежа" платежного документа основания.
				Если ТекТипЗн=Тип("ДокументСсылка.Выписка") И ТекТабл.Имя="Состав" Тогда
					ДополнительныйРеквизитВидПлатежа = Новый Структура("Имя,Тип,Синоним,Комментарий");
					ДополнительныйРеквизитВидПлатежа.Имя         = "ВидПлатежа";
					ДополнительныйРеквизитВидПлатежа.Тип         = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));
					ДополнительныйРеквизитВидПлатежа.Синоним     = НСтр("ru = 'Вид платежа'");
					ДополнительныйРеквизитВидПлатежа.Комментарий = "";
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, ТекСтрока, ДокXML, , ДополнительныйРеквизитВидПлатежа);
				Иначе
					ВыгрузитьРеквизиты(ТекТабл.Реквизиты, ТекСтрока, ДокXML);
				КонецЕсли;
				
				ДокXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НеВыгружатьПартииТоваров Тогда
		ДокXML.ЗаписатьНачалоЭлемента("Таблица");
		ДокXML.ЗаписатьАтрибут("Наименование", "ПартииТоваров");
		
		Пока ВыборкаПартииТоваров.Следующий() Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Строка");
			
			ОбщееОписание = "    {""Таблица.ПартииТоваров""";
			ВыгрузитьРеквизиты(РезЗапросаПартииТоваров.Колонки, ВыборкаПартииТоваров, ДокXML);
			
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;	
		
		ДокXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;
	
	Если ВыгружатьКонтИнф Тогда
		ДокXML.ЗаписатьНачалоЭлемента("Таблица");
		ДокXML.ЗаписатьАтрибут("Наименование", "КонтактнаяИнформация");
		
		Для Каждого ВидКонтактнойИнформации Из ВыборкаКонтИнф Цикл
			
			ДокXML.ЗаписатьНачалоЭлемента("Строка"); 
			
			ОбщееОписание = "    {""Таблица.КонтактнаяИнформация""";
			ВыгрузитьРеквизиты(ВыборкаКонтИнф.Колонки, ВидКонтактнойИнформации, ДокXML);
			
			ДокXML.ЗаписатьКонецЭлемента(); 
		КонецЦикла;	
		
		ДокXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;	
	
	
	// Здесь нужно выгрузить все наши движения, которые мы насобирали и именно в той последовательности, в 
	// которой мы записывали структурную информацию.
	
	Если ЭтоДокумент Тогда
		Для Каждого ТекДвижение	Из Ссылка.Метаданные().Движения Цикл
			Строка = СтрокаВыгрузитьДвижения(ТекДвижение.Имя,ИмяДокумента,тзДвиженияКВыгрузке);
			Если Строка <> Неопределено И НЕ Строка.НеВыгружать Тогда
				ДокXML.ЗаписатьНачалоЭлемента("Таблица");
				ДокXML.ЗаписатьАтрибут("Наименование", Строка.Наименование);
				
				Выборка = Строка.РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ДокXML.ЗаписатьНачалоЭлемента("Строка"); 
					
					ОбщееОписание = "    {""Таблица."+Строка.Наименование+"""";
					ВыгрузитьРеквизиты(Строка.РезультатЗапроса.Колонки, Выборка, ДокXML);
					
					ДокXML.ЗаписатьКонецЭлемента();
				КонецЦикла;	
				
				ДокXML.ЗаписатьКонецЭлемента(); 
			КонецЕсли;
		КонецЦикла;
		
		Если спСТаблицаВыгрузкиГТДКорректировки.НайтиПоЗначению(Ссылка.Метаданные().Имя) <> Неопределено Тогда
			ТекТабл = СформироватьТЧ_С_ГТД_Корректировка(Ссылка, Истина);		
			РеквизитыСФ = ТекТабл.Колонки;		
			ОбщееОписание = "  {""Таблица.СФДоКорректировки""}";
			ВыгрузитьРеквизиты(РеквизитыСФ, "", ДокXML, Истина);
			
			ТекТабл = СформироватьТЧ_С_ГТД_Корректировка(Ссылка, Ложь);		
			РеквизитыСФ = ТекТабл.Колонки;		
			ОбщееОписание = "  {""Таблица.СФДоИсправления""}";
			ВыгрузитьРеквизиты(РеквизитыСФ, "", ДокXML, Истина);
		КонецЕсли;
		
	КонецЕсли;		
	
	// Выгрузим в нужных документах табличную часть счета фактуры.
	Если ЭтоДокумент И спТаблицВыгрузкиГТД.НайтиПоЗначению(Ссылка.Метаданные().Имя) <> Неопределено И НЕ (ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратПоставщику") И Ссылка.ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураВыданный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
		|	И СчетФактураВыданный.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		СчетФактураНеВведен = РезультатЗапроса.Пустой();
		Если СчетФактураНеВведен Тогда
			СчетФактура = Документы.СчетФактураВыданный;
		КонецЕсли;
		
		Если СчетФактураНеВведен Тогда
			СчетФактура = СчетФактура.СоздатьДокумент();
			СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
			Основание = Ссылка;
			СчетФактура.Заполнить(Основание);
			ЗагружатьИзСчетФактуры = Истина;
		Иначе
			Выборка =РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СчетФактура = Выборка.СчетФактура;
		КонецЕсли;
		
		ТекТаблСФ = СчетФактура.Товары;
		РеквизитыСФ = СчетФактура.Метаданные().ТабличныеЧасти.Товары.Реквизиты;
		ЗагружатьИзСчетФактуры = Истина;
		
		ДокXML.ЗаписатьНачалоЭлемента("Таблица");
		ДокXML.ЗаписатьАтрибут("Наименование", "СФ");
		
		Для Каждого ТекСтрока Из ТекТаблСФ Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Строка");
			ОбщееОписание = "    {""Таблица.СФ""";
			
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				// Подменим строку. - для Отчета комиссионеру добавим вознаграждение.
				// Проблема в том, что если несколько строк в сф соотв одной строке в тч документа,
				// то и вознаграждение должно уменьшится, пока этого не делаю.
				
				мСтрока = Новый Соответствие;
				Для каждого рекв Из РеквизитыСФ Цикл
					мСтрока.Вставить(рекв.Имя,ТекСтрока[рекв.Имя]);
				КонецЦикла;
				ИскомаяСтрокаОК = Ссылка["Товары"].Найти(ТекСтрока.Номенклатура,"Номенклатура");
				Если ИскомаяСтрокаОК <> Неопределено Тогда
					мСтрока.Вставить("Вознаграждение",ИскомаяСтрокаОК.Вознаграждение);
				КонецЕсли;
				// Это истина в конце нужна потому что РеквизитыСФ сейчас соответствие. А там все проверяется
				// на табличные части, документы и т.д. Не красиво, но работает.
				ВыгрузитьРеквизиты(РеквизитыСФ, мСтрока, ДокXML, , Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Вознаграждение);
			ИначеЕсли	Ссылка.Метаданные().Имя = "ЗаказНаряд" И Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("Источник")<>Неопределено Тогда
				мСтрока = Новый Соответствие;
				Для каждого рекв Из РеквизитыСФ Цикл
					мСтрока.Вставить(рекв.Имя,ТекСтрока[рекв.Имя]);
				КонецЦикла;
				ИскомаяСтрокаЗН = Ссылка["Товары"].Найти(ТекСтрока.Номенклатура,"Номенклатура");
				Если ИскомаяСтрокаЗН <> Неопределено Тогда
					мСтрока.Вставить("Источник",ИскомаяСтрокаЗН.Источник);
				КонецЕсли;
				ВыгрузитьРеквизиты(РеквизитыСФ, мСтрока, ДокXML, , Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Источник);
			Иначе
				ВыгрузитьРеквизиты(РеквизитыСФ, ТекСтрока, ДокXML);
			КонецЕсли;	
			
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ДокXML.ЗаписатьКонецЭлемента();
	КонецЕсли;			
	
	
	// Обработаем документы, для которых нет возможности открыть счет-фактуру, 
	// но которые могут списать товары с ГТД при переносе.
	Если (ЭтоДокумент) И (спТаблицВыгрузкиГТДДоп.НайтиПоЗначению(Ссылка.Метаданные().Имя) <> Неопределено) Тогда
		
		ТекТаблСФ = СформироватьТЧ_С_ГТД(Ссылка);
		РеквизитыСФ = ТекТаблСФ.Колонки;
		
		ЗагружатьИзСчетФактуры = Истина;
		
		ДокXML.ЗаписатьНачалоЭлемента("Таблица");
		ДокXML.ЗаписатьАтрибут("Наименование", "СФ");
		
		Для Каждого ТекСтрока Из ТекТаблСФ Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Строка");
			ОбщееОписание = "    {""Таблица.СФ""";
			
			ВыгрузитьРеквизиты(РеквизитыСФ, ТекСтрока, ДокXML);
			
			ДокXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ДокXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;
	
	Если (ЭтоДокумент) И (спСТаблицаВыгрузкиГТДКорректировки.НайтиПоЗначению(Ссылка.Метаданные().Имя) <> Неопределено) Тогда
		
		ТекТаблСФ = СформироватьТЧ_С_ГТД_Корректировка(Ссылка, Истина);	
		РеквизитыСФ = ТекТаблСФ.Колонки;				
		
		ЗагружатьИзСчетФактуры = Истина;				
		
		ДокXML.ЗаписатьНачалоЭлемента("Таблица");
		ДокXML.ЗаписатьАтрибут("Наименование", "СФДоКорректировки");
		
		Для Каждого ТекСтрока Из ТекТаблСФ Цикл				
			ДокXML.ЗаписатьНачалоЭлемента("Строка");
			ОбщееОписание = "    {""Таблица.СФДоКорректировки""";
			
			ВыгрузитьРеквизиты(РеквизитыСФ, ТекСтрока, ДокXML);
		    			
			ДокXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;				
				
		ДокXML.ЗаписатьКонецЭлемента();
		
		ТекТаблСФ = СформироватьТЧ_С_ГТД_Корректировка(Ссылка, Ложь);				
		РеквизитыСФ = ТекТаблСФ.Колонки;				
		
		ЗагружатьИзСчетФактуры = Истина;				
		
		ДокXML.ЗаписатьНачалоЭлемента("Таблица");
		ДокXML.ЗаписатьАтрибут("Наименование", "СФДоИсправления");
		
		Для Каждого ТекСтрока Из ТекТаблСФ Цикл				
			ДокXML.ЗаписатьНачалоЭлемента("Строка");
			ОбщееОписание = "    {""Таблица.СФДоИсправления""";
			
			ВыгрузитьРеквизиты(РеквизитыСФ, ТекСтрока, ДокXML);
			
			ДокXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;				
				
		ДокXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ЭтоДокумент И ЕстьТаблицаСписанийАвтомобилей Тогда
		ДокXML.ЗаписатьНачалоЭлемента("Таблица");
		ДокXML.ЗаписатьАтрибут("Наименование", "СуммыСписанийАвтомобилей");
		
		Для Каждого ТекСтрока Из ТаблицаСписанийАвтомобилей Цикл
			
			ДокXML.ЗаписатьНачалоЭлемента("Строка"); 
			
			ОбщееОписание = "    {""Таблица.СуммыСписанийАвтомобилей""";
			ВыгрузитьРеквизиты(ТаблицаСписанийАвтомобилей.Колонки, ТекСтрока, ДокXML);
			
			ДокXML.ЗаписатьКонецЭлемента(); 
		КонецЦикла;	
		
		ДокXML.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	ДокXML.ЗаписатьКонецЭлемента();
	
	// Обновим информацию о выгруженных объектах.
	Если ПоказатьВыгруженные Тогда
		
		КореньТипа = ДеревоВыгруженныхОбъектов.Строки.Найти(?(ЭтоДокумент, "Документы", "Справочники"), "Объект");
		КореньТипа.Количество = КореньТипа.Количество + 1;
		
		КореньВидаСтр = СтрЗаменить(ТекТипЗн, ?(ЭтоДокумент, НСтр("ru = 'Документ ссылка:'") + " ", НСтр("ru = 'Справочник ссылка:'") + " "), "");
		КореньВида = КореньТипа.Строки.Найти(КореньВидаСтр, "Объект");
		
		Если КореньВида = Неопределено Тогда
			КореньВида = КореньТипа.Строки.Добавить();
			КореньВида.Объект = КореньВидаСтр;
		КонецЕсли;
		КореньВида.Количество = КореньВида.Количество + 1;
		
		СтрокаОбъекта = КореньВида.Строки.Добавить();
		СтрокаОбъекта.Объект = Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры	//	ВыгрузитьОбъект()

// Функция возвращает Таблицу списания номенклатуры с номерами ГТД,
// с учетом партий, по которым происходят движения документа-основания.
Функция СформироватьТЧ_С_ГТД(Основание)
	
	Запрос = Новый Запрос();
	ИмяПартионногоРегистра 		= "ПартииТоваровКомпании";
	ДокументОснованиеМетаданные = Основание.Метаданные();
	ИмяДокументаОснования 		= ДокументОснованиеМетаданные.Имя;
	ЗнакДвиженияПоПартиям 		= ?(ИмяДокументаОснования = "Инвентаризация","-","");
	РеквизитНоменклатура ="Номенклатура";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	               |	ПартииТоваровКомпании.Партия КАК Партия,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ПоступлениеТоваров
	               |			ТОГДА ПоступлениеТоваровТовары.ГТД
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ВводОстатковТоваров
	               |			ТОГДА ВводОстатковТоваровТовары.ГТД
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.Инвентаризация
	               |			ТОГДА ИнвентаризацияТовары.ГТД
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ПеремещениеТоваров
	               |			ТОГДА ПеремещениеТоваровТовары.ГТД
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ПересортицаТоваров
	               |			ТОГДА ПересортицаТоваровТовары.ГТД
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК ГТД,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ПоступлениеТоваров
	               |			ТОГДА ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ВводОстатковТоваров
	               |			ТОГДА ВводОстатковТоваровТовары.Количество * ВводОстатковТоваровТовары.Коэффициент
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.Инвентаризация
	               |			ТОГДА ИнвентаризацияТовары.Количество * ИнвентаризацияТовары.Коэффициент
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ПеремещениеТоваров
	               |			ТОГДА ПеремещениеТоваровТовары.Количество * ПеремещениеТоваровТовары.Коэффициент
	               |		КОГДА ПартииТоваровКомпании.Партия ССЫЛКА Документ.ПересортицаТоваров
	               |			ТОГДА ПересортицаТоваровТовары.Количество * ПересортицаТоваровТовары.Коэффициент
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоСГТД,
	               |	ПартииТоваровКомпании.Количество КАК Количество
	               |ПОМЕСТИТЬ ПартииТоваровСГТД
	               |ИЗ
	               |	РегистрНакопления."+ИмяПартионногоРегистра+" КАК ПартииТоваровКомпании
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	               |		ПО ПартииТоваровКомпании.Партия = ПоступлениеТоваровТовары.Ссылка
	               |			И ПартииТоваровКомпании.Номенклатура = ПоступлениеТоваровТовары.Номенклатура
	               |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковТоваров.Товары КАК ВводОстатковТоваровТовары
	               |		ПО ПартииТоваровКомпании.Партия = ВводОстатковТоваровТовары.Ссылка
	               |			И ПартииТоваровКомпании.Номенклатура = ВводОстатковТоваровТовары.Номенклатура
	               |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ВводОстатковТоваровТовары.ХарактеристикаНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
	               |		ПО ПартииТоваровКомпании.Партия = ИнвентаризацияТовары.Ссылка
	               |			И ПартииТоваровКомпании.Номенклатура = ИнвентаризацияТовары.Номенклатура
	               |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ИнвентаризацияТовары.ХарактеристикаНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |		ПО ПартииТоваровКомпании.Партия = ПеремещениеТоваровТовары.Ссылка
	               |			И ПартииТоваровКомпании.Номенклатура = ПеремещениеТоваровТовары.Номенклатура
	               |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	               |		ПО ПартииТоваровКомпании.Партия = ПересортицаТоваровТовары.Ссылка
	               |			И ПартииТоваровКомпании.Номенклатура = ПересортицаТоваровТовары.Номенклатура
	               |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ПересортицаТоваровТовары.ХарактеристикаНоменклатуры
	               |ГДЕ
	               |	ПартииТоваровКомпании.Регистратор = &ДокументОснование
	               |	И ПартииТоваровКомпании.ВидДвижения = &ВидДвиженияПоПартиям
	               |	И ПартииТоваровКомпании.Количество > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабличнаяЧастьТоварыИсходная." + РеквизитНоменклатура + " КАК Номенклатура,
	               |	СУММА(ТабличнаяЧастьТоварыИсходная.Количество) КАК Количество,
	               |	ТабличнаяЧастьТоварыИсходная.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТабличнаяЧастьТоварыИсходная.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмеренияПартии,
	               |	ТабличнаяЧастьТоварыИсходная.Коэффициент КАК Коэффициент,
	               |	ТабличнаяЧастьТоварыИсходная.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК КоэффициентПартии,
	               |	ТабличнаяЧастьТоварыИсходная.Ссылка КАК Ссылка,
	               |	МИНИМУМ(ТабличнаяЧастьТоварыИсходная.НомерСтроки) КАК НомерСтрокиДокумента
	               |ПОМЕСТИТЬ ТабличнаяЧастьТовары
	               |ИЗ
	               |	Документ." + ИмяДокументаОснования + ".Товары КАК ТабличнаяЧастьТоварыИсходная
	               |ГДЕ
	               |	ТабличнаяЧастьТоварыИсходная.Ссылка = &ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабличнаяЧастьТоварыИсходная." + РеквизитНоменклатура + ",
	               |	ТабличнаяЧастьТоварыИсходная.ЕдиницаИзмерения,
	               |	ТабличнаяЧастьТоварыИсходная.Номенклатура.ОсновнаяЕдиницаИзмерения,
	               |	ТабличнаяЧастьТоварыИсходная.Коэффициент,
	               |	ТабличнаяЧастьТоварыИсходная.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент,
	               |	ТабличнаяЧастьТоварыИсходная.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабличнаяЧастьТовары.Номенклатура КАК Номенклатура,
	               |	" + ЗнакДвиженияПоПартиям + "ТабличнаяЧастьТовары.Количество КАК Количество,
	               |	ТабличнаяЧастьТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТабличнаяЧастьТовары.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмеренияПартии,
	               |	ТабличнаяЧастьТовары.Коэффициент КАК Коэффициент,
	               |	ТабличнаяЧастьТовары.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК КоэффициентПартии,
	               |	ТабличнаяЧастьТовары.Ссылка КАК Ссылка,
	               |	ТабличнаяЧастьТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	               |	ПартииТоваровСГТД.Партия КАК Партия,
	               |	ПартииТоваровСГТД.ГТД КАК ГТД,
	               |	ЕСТЬNULL(ПартииТоваровСГТД.Количество, 0) КАК КоличествоПартии,
	               |	ЕСТЬNULL(ПартииТоваровСГТД.КоличествоСГТД, 0) КАК КоличествоСГТД
	               |ИЗ
	               |	ТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПартииТоваровСГТД КАК ПартииТоваровСГТД
	               |		ПО ТабличнаяЧастьТовары.Номенклатура = ПартииТоваровСГТД.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТабличнаяЧастьТовары.НомерСтрокиДокумента";
	
	ЗнакДвиженияПоПартиям 		= "";
	ИмяПартионногоРегистра 		= "ПартииТоваровКомпании";
	ДокументОснованиеМетаданные = Основание.Метаданные();
	ИмяДокументаОснования 		= ДокументОснованиеМетаданные.Имя;
	Запрос.УстановитьПараметр("ВидДвиженияПоПартиям",ВидДвиженияНакопления.Расход);	
	Запрос.УстановитьПараметр("ЗнакДвиженияПоПартиям", ЗнакДвиженияПоПартиям);	
	Запрос.УстановитьПараметр("ИмяПартионногоРегистра", ИмяПартионногоРегистра);
	
	Запрос.УстановитьПараметр("ДокументОснование",Основание);
	Выборка = Запрос.Выполнить().Выгрузить();
	МассивТиповН = Новый Массив;
	МассивТиповН.Добавить(Тип("СправочникСсылка.Номенклатура"));
	МассивТиповГТД = Новый Массив;
	МассивТиповГТД.Добавить(Тип("СправочникСсылка.ГТД"));
	ЧисловойТип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 3));
	Товары = Новый ТаблицаЗначений();
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов(МассивТиповН));
	Товары.Колонки.Добавить("Количество", ЧисловойТип);
	Товары.Колонки.Добавить("Коэффициент",ЧисловойТип);
	Товары.Колонки.Добавить("Сумма", ЧисловойТип);
	Товары.Колонки.Добавить("ГТД", Новый ОписаниеТипов(МассивТиповГТД));
	ТекНомерСтроки = 0;
	СтрокаТоваров=Неопределено;
	ОсталосьКоличествоПоТекНоменклатура = 0;
	ОсталосьСуммаВсегоПоТекНоменклатура = 0;
	ОсталосьСуммаНДСПоТекНоменклатура = 0;
	Для каждого СтрокаВыборки Из Выборка Цикл
		Если СтрокаВыборки.НомерСтрокиДокумента <> ТекНомерСтроки Тогда
			Если СтрокаТоваров<>Неопределено И ОсталосьКоличествоПоТекНоменклатура<>0 Тогда
				СтрокаТоваров.Количество=СтрокаТоваров.Количество+ОсталосьКоличествоПоТекНоменклатура;
			КонецЕсли; 
			СтрокаТоваровСуммаВсего=0; СтрокаТоваровСуммаНДС=0;
			ТекНомерСтроки = СтрокаВыборки.НомерСтрокиДокумента;
			СтрокаТоваров=Неопределено;
			ОсталосьКоличествоПоТекНоменклатура = СтрокаВыборки.Количество*СтрокаВыборки.Коэффициент;
			БазовоеКоличество = СтрокаВыборки.Количество*СтрокаВыборки.Коэффициент;
		КонецЕсли;
		Если ОсталосьКоличествоПоТекНоменклатура <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаВыборки.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
			КоличествоВДокумент = ОсталосьКоличествоПоТекНоменклатура;
		Иначе
			Если СтрокаВыборки.КоличествоПартии<=0 Тогда
				Продолжить;
			КонецЕсли; 
			Если СтрокаВыборки.ГТД<>NULL И СтрокаВыборки.КоличествоСГТД<=0 Тогда
				Продолжить;
			КонецЕсли; 
			Если СтрокаВыборки.ГТД=NULL Тогда
				КоличествоВДокумент = МИН(СтрокаВыборки.КоличествоПартии,ОсталосьКоличествоПоТекНоменклатура);
			Иначе
				КоличествоВДокумент = МИН(СтрокаВыборки.КоличествоПартии,СтрокаВыборки.КоличествоСГТД,ОсталосьКоличествоПоТекНоменклатура);
			КонецЕсли; 
		КонецЕсли;
		СтрокиПартии=Выборка.НайтиСтроки(Новый Структура("Номенклатура,Партия",СтрокаВыборки.Номенклатура,СтрокаВыборки.Партия));
		Для каждого СтрокаПартии Из СтрокиПартии Цикл
			СтрокаПартии.КоличествоПартии=СтрокаПартии.КоличествоПартии-КоличествоВДокумент;
			Если СтрокаВыборки.ГТД=СтрокаПартии.ГТД Тогда
				СтрокаПартии.КоличествоСГТД=СтрокаПартии.КоличествоСГТД-КоличествоВДокумент;
			КонецЕсли; 
		КонецЦикла;
		ОсталосьКоличествоПоТекНоменклатура = ОсталосьКоличествоПоТекНоменклатура - КоличествоВДокумент;
		НайденныеСтроки=Товары.НайтиСтроки(Новый Структура("Номенклатура,ГТД",СтрокаВыборки.Номенклатура,СтрокаВыборки.ЕдиницаИзмерения,?(СтрокаВыборки.ГТД=NULL,Справочники.ГТД.ПустаяСсылка(),СтрокаВыборки.ГТД)));
		Если НайденныеСтроки.Количество()=0 Тогда
			СтрокаТоваров=Товары.Добавить();
		Иначе
			СтрокаТоваров=НайденныеСтроки[0];
		КонецЕсли;
		СтрокаТоваров.Номенклатура=СтрокаВыборки.Номенклатура;
		СтрокаТоваров.Количество=СтрокаТоваров.Количество+КоличествоВДокумент/СтрокаВыборки.Коэффициент;
		СтрокаТоваров.ГТД=?(СтрокаВыборки.ГТД=NULL,Справочники.ГТД.ПустаяСсылка(),СтрокаВыборки.ГТД);
	КонецЦикла;
	Если СтрокаТоваров<>Неопределено Тогда
		СтрокаТоваров.Количество=СтрокаТоваров.Количество+ОсталосьКоличествоПоТекНоменклатура;
	КонецЕсли; 
	Возврат Товары;
КонецФункции //СформироватьТЧ_С_ГТД	

Функция СформироватьТЧ_С_ГТД_Корректировка(Основание, ДоКорректировки)
	
	Если ДоКорректировки Тогда
		
		ДокОснование = Основание.ДокументОснование;
		Пока Истина Цикл
			Если ТипЗнч(ДокОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ДокументОснование = ДокОснование;
				Прервать;
			КонецЕсли;
			ДокОснование = ДокОснование.ДокументОснование;
		КонецЦикла;
		
	Иначе
		ДокументОснование = Основание.ДокументОснование;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ И
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	СчетФактураНеВведен = РезультатЗапроса.Пустой();
	Если СчетФактураНеВведен Тогда				
		СчетФактура = Документы.СчетФактураВыданный;
	КонецЕсли;												
	
	Если СчетФактураНеВведен Тогда
		СчетФактура = СчетФактура.СоздатьДокумент();
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		СчетФактура.Заполнить(ДокументОснование);
	Иначе
		Выборка =РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СчетФактура = Выборка.СчетФактура;
	КонецЕсли;				
	Возврат СчетФактура.Товары.Выгрузить();
	
КонецФункции

// Функция возвращает строку из таблицы тзДвиженияКВыгрузке, если находит в ней переданные имена регистра и документа.
Функция СтрокаВыгрузитьДвижения(ИмяРегистра, ИмяДокумента, тзДвиженияКВыгрузке,ИмяКонфигурации = "")
	НайденныеСтроки = тзДвиженияКВыгрузке.НайтиСтроки(Новый Структура("Наименование", ИмяРегистра));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
		спДокументы = Строка.Документы;
		Если НЕ (спДокументы = Неопределено ИЛИ спДокументы.Количество() = 0) И спДокументы.НайтиПоЗначению(ИмяДокумента) = Неопределено Тогда
			Строка = Неопределено;
		Иначе
			Если ИмяКонфигурации <> "" И СтрНайти(Метаданные.Имя,Строка.Конфигурация) = 0 Тогда
				Строка = Неопределено;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Возврат Строка;
КонецФункции

// Возвращает строку - внутреннее представление переданного значения
Функция ПредставлениеРеквизита(Знач ЗнРекв, УказыватьТип=Ложь) 
	
	// Работаем только с ссылочными типами
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗнРекв))
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗнРекв))
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗнРекв)) Тогда
		
		// Для пустых значений
		Если ЗнРекв = Неопределено Тогда ЗнРекв = "";
		ИначеЕсли ЗнРекв.Пустая() Тогда ЗнРекв = "";
			
			// Для перечислений	вернем полное имя + значение перечисления
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗнРекв)) Тогда
			МД = ЗнРекв.Метаданные();
			ЗнРекв = МД.ПолноеИмя() + "." + МД.ЗначенияПеречисления[Перечисления[МД.Имя].Индекс(ЗнРекв)].Имя;
			
		Иначе // Для остальных типов - уникальный идентификатор
			
			СтрТипа = "";
			Если УказыватьТип Тогда
				Тип = ТипЗнч(ЗнРекв);
				Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда СтрТипа = "Перечисление." + ЗнРекв.Метаданные().Имя + ".";
				КонецЕсли;
			КонецЕсли;
			
			ЗнРекв = СтрТипа + ЗнРекв.УникальныйИдентификатор();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗнРекв) = Тип("Число") Тогда
		ЗнРекв = Формат(ЗнРекв, "ЧГ=0;ЧРД='.';ЧН=");
		
	Иначе // ну и для всех остальных вернем текст, лишенный "мешающих" символов
		ЗнРекв = СокрЛП(СтрЗаменить(ЗнРекв, Символы.ПС, "‡"));
		ЗнРекв = СокрЛП(СтрЗаменить(ЗнРекв, Символы.ВК, "±"));
		ЗнРекв = СокрЛП(СтрЗаменить(ЗнРекв, """", "¤"));
		ЗнРекв = СокрЛП(СтрЗаменить(ЗнРекв, ",", "†"));
		
	КонецЕсли;
	
	Возврат ЗнРекв;
	
КонецФункции	//	ПредставлениеРеквизита()

// Функция получает список документов для выгрузки из конфигурации "Амбулатория"
Функция ПолучитьДокументыАмбулатории()
	
	сзДокументы = Новый СписокЗначений;
	сзДокументы.Добавить("Вакцинация");
	сзДокументы.Добавить("МедицинскийОсмотр");
	сзДокументы.Добавить("ПриемСпециалиста");
	сзДокументы.Добавить("ПроцедурноОперационнаяКарта");
	сзДокументы.Добавить("ДиагностическиеИсследования");
	сзДокументы.Добавить("ТалонАмбулаторногоПациента");
	сзДокументы.Добавить("ОбращениеГоспитализация");
	сзДокументы.Добавить("ВыбытиеИзСтационара");
	сзДокументы.Добавить("ЗачетОказанныхУслуг");
	Возврат сзДокументы;
	
КонецФункции //ПолучитьДокументыАмбулатории() 

// Функция возвращает таблицу стоимостей списания автомобилей.
Функция ПолучитьСписанияАвтомобилей(РеализацияАвтомобилей)
	
	Если РеализацияАвтомобилей=Неопределено Тогда
		ТаблицаСписаний	= Новый ТаблицаЗначений();
		Возврат ТаблицаСписаний;	
	КонецЕсли;
	
	Запрос			= Новый Запрос();
	Запрос.Текст	= "ВЫБРАТЬ
    	  |	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
    	  |	ЕСТЬNULL(ПродажиАвтомобилей.Себестоимость, 0) - ЕСТЬNULL(ПродажиАвтомобилей.СуммаНДСВходящий, 0) КАК Себестоимость,
    	  |	ЕСТЬNULL(ПродажиАвтомобилей.СуммаНДС, 0) КАК СуммаНДС,
    	  |	ЕСТЬNULL(ПродажиАвтомобилей.СуммаНДСВходящий, 0) КАК СуммаНДСВходящий
    	  |ПОМЕСТИТЬ ПродажиАвтомобилей
    	  |ИЗ
    	  |	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
    	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиАвтомобилей КАК ПродажиАвтомобилей
    	  |		ПО РеализацияАвтомобилейАвтомобили.Ссылка = ПродажиАвтомобилей.Регистратор
    	  |			И РеализацияАвтомобилейАвтомобили.Автомобиль = ПродажиАвтомобилей.Автомобиль
    	  |ГДЕ
    	  |	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
    	  |;
    	  |
    	  |////////////////////////////////////////////////////////////////////////////////
    	  |ВЫБРАТЬ
    	  |	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
    	  |	СУММА(ЕСТЬNULL(Продажи.Себестоимость, 0) - ЕСТЬNULL(Продажи.СуммаНДСВходящий, 0)) КАК Себестоимость,
    	  |	СУММА(ЕСТЬNULL(Продажи.СуммаНДС, 0)) КАК СуммаНДС,
    	  |	СУММА(ЕСТЬNULL(Продажи.СуммаНДСВходящий, 0)) КАК СуммаНДСВходящий
    	  |ПОМЕСТИТЬ ПродажиКомплектацииАвтомобилей
    	  |ИЗ
    	  |	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
    	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи КАК Продажи
    	  |		ПО РеализацияАвтомобилейАвтомобили.Автомобиль = Продажи.Автомобиль
    	  |			И РеализацияАвтомобилейАвтомобили.Ссылка = Продажи.Регистратор
    	  |ГДЕ
    	  |	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
    	  |
    	  |СГРУППИРОВАТЬ ПО
    	  |	РеализацияАвтомобилейАвтомобили.Автомобиль
    	  |;
    	  |
    	  |////////////////////////////////////////////////////////////////////////////////
    	  |ВЫБРАТЬ
    	  |	ПродажиАвтомобилей.Автомобиль КАК Автомобиль,
    	  |	ПродажиАвтомобилей.Себестоимость + ЕСТЬNULL(ПродажиКомплектацииАвтомобилей.Себестоимость, 0) КАК Себестоимость,
    	  |	ПродажиАвтомобилей.СуммаНДС + ЕСТЬNULL(ПродажиКомплектацииАвтомобилей.СуммаНДС, 0) КАК СуммаНДС,
    	  |	ПродажиАвтомобилей.СуммаНДСВходящий + ЕСТЬNULL(ПродажиКомплектацииАвтомобилей.СуммаНДСВходящий, 0) КАК СуммаНДСВходящий
    	  |ИЗ
    	  |	ПродажиАвтомобилей КАК ПродажиАвтомобилей
    	  |		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиКомплектацииАвтомобилей КАК ПродажиКомплектацииАвтомобилей
    	  |		ПО ПродажиАвтомобилей.Автомобиль = ПродажиКомплектацииАвтомобилей.Автомобиль";   
	
	Запрос.УстановитьПараметр("Ссылка", РеализацияАвтомобилей);
	
	Попытка
		ТаблицаСписаний	= Запрос.Выполнить().Выгрузить();
	Исключение
		ТаблицаСписаний	= Новый ТаблицаЗначений();
	КонецПопытки;
	
	Возврат ТаблицаСписаний;
КонецФункции

// Процедура осуществляет инициализацию таблицы видов справочников.
Процедура ИнициализироватьВидыСправочников() Экспорт
	
	Если ТипЗнч(ВидыСправочников)=Тип("ТаблицаЗначений") И ВидыСправочников.Колонки.Количество()>0 Тогда
		ВидыСправочников.Колонки.Очистить();
	КонецЕсли;
	
	// Инициализируем таблицу значений видов справочников.
	ВидыСправочников.Колонки.Добавить("Пометка");
	ВидыСправочников.Колонки.Добавить("Представление");
	ВидыСправочников.Колонки.Добавить("Объект");
	
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "Контрагенты";
	ТекСтрока.Представление = "Контрагенты";
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "ДоговорыВзаиморасчетов";
	ТекСтрока.Представление = НСтр("ru = 'Договоры взаиморасчетов'");
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "КлассификаторБанков";
	ТекСтрока.Представление = "Банки";
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "БанковскиеСчета";
	ТекСтрока.Представление = НСтр("ru = 'Банковские счета'");
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "Валюты";
	ТекСтрока.Представление = "Валюты";
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "СтатьиДДС";
	ТекСтрока.Представление = НСтр("ru = 'Статьи ДДС'");	
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "Номенклатура";
	ТекСтрока.Представление = "Номенклатура";
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "Сотрудники";
	ТекСтрока.Представление = "Сотрудники";	 
	ТекСтрока = ВидыСправочников.Добавить();
	ТекСтрока.Пометка       = Истина;
	ТекСтрока.Объект        = "Патенты";
	ТекСтрока.Представление = "Патенты";
	
КонецПроцедуры	//ИнициализироватьВидыСправочников

// Процедура осуществляет инициализацию таблицы видов документов.
Процедура ИнициализироватьВидыДокументов() Экспорт
	
	Если ТипЗнч(ВидыДокументов)=Тип("ТаблицаЗначений") И ВидыДокументов.Колонки.Количество()>0 Тогда
		ВидыДокументов.Колонки.Очистить();
	КонецЕсли;
	
	// Инициализируем таблицу значений видов документов
	ВидыДокументов.Колонки.Добавить("Пометка");
	ВидыДокументов.Колонки.Добавить("Представление");
	ВидыДокументов.Колонки.Добавить("Объект");
	ВидыДокументов.Колонки.Добавить("ЕстьКонтрагент");
	ВидыДокументов.Колонки.Добавить("СписокХозОпераций");
	
	СписокНевыгружаемыхДокументов = Новый СписокЗначений;
	// Содержимое ПВХ ТипыСмешанныхДокументов
	СписокНевыгружаемыхДокументов.Добавить("Рецептура");
	СписокНевыгружаемыхДокументов.Добавить("SMS");
	СписокНевыгружаемыхДокументов.Добавить("ЗакрытиеНакопительныхСумм");
	СписокНевыгружаемыхДокументов.Добавить("ЗакрытиеПериода");
	СписокНевыгружаемыхДокументов.Добавить("НазначениеСкидокСтроки");
	СписокНевыгружаемыхДокументов.Добавить("НазначениеСкидокШапки");
	СписокНевыгружаемыхДокументов.Добавить("Событие");
	СписокНевыгружаемыхДокументов.Добавить("ЭлектронноеПисьмоВходящее");
	СписокНевыгружаемыхДокументов.Добавить("ЭлектронноеПисьмоИсходящее");
	// Содержимое ПВХ ТипыУправленческихДокументов
	СписокНевыгружаемыхДокументов.Добавить("БюджетДДС");
	СписокНевыгружаемыхДокументов.Добавить("БюджетДоходовИРасходов");
	СписокНевыгружаемыхДокументов.Добавить("БюджетЗакупок");
	СписокНевыгружаемыхДокументов.Добавить("БюджетПродаж");
	СписокНевыгружаемыхДокументов.Добавить("БюджетПроизводства");
	СписокНевыгружаемыхДокументов.Добавить("ЗаказБанкета");
	СписокНевыгружаемыхДокументов.Добавить("ЗаказВнутренний");
	СписокНевыгружаемыхДокументов.Добавить("ЗаказПокупателя");
	СписокНевыгружаемыхДокументов.Добавить("ЗаказПоставщику");
	СписокНевыгружаемыхДокументов.Добавить("ЗаявкаНаРасходДС");
	СписокНевыгружаемыхДокументов.Добавить("КорректировкаЗаказаПокупателя");
	СписокНевыгружаемыхДокументов.Добавить("КорректировкаЗаказаПоставщику");
	СписокНевыгружаемыхДокументов.Добавить("ПланМеню");
	СписокНевыгружаемыхДокументов.Добавить("ПланПоступленияДС");
	//
	// Заполним виды выгружаемых документов
	Для Каждого ТекОбъект Из Метаданные["Документы"] Цикл
		Состав = Метаданные.ОбщиеРеквизиты.РегламентированныйУчет.Состав.Найти(ТекОбъект);
		Если СписокНевыгружаемыхДокументов.НайтиПоЗначению(ТекОбъект.Имя)<>Неопределено Тогда
			Продолжить;
		ИначеЕсли (Состав = Неопределено ИЛИ Состав.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать)
			И (спДокументовБезРегл.НайтиПоЗначению(ТекОбъект.Имя) = Неопределено)
			И (спДокументовСпец.НайтиПоЗначению(ТекОбъект.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока				= ВидыДокументов.Добавить();
		ТекСтрока.Пометка       = Истина;
		ТекСтрока.Объект        = ТекОбъект.Имя;
		ТекСтрока.Представление = ТекОбъект.Представление();
		ТекСтрока.ЕстьКонтрагент = ?(ТекОбъект.Реквизиты.Найти("Контрагент") = Неопределено, Ложь, Истина);
		// Получить хозоперации
		ЕстьХО = ?(ТекОбъект.Реквизиты.Найти("ХозОперация") = Неопределено, Ложь, Истина);
		ЕстьХО = Ложь;
		Если ЕстьХО Тогда
			СписокХО = Справочники.ХозОперации.ПолучитьВозможныеХозОперации(Документы[ТекОбъект.Имя].ПустаяСсылка());
			СписокХозяйственныхОпераций = Новый СписокЗначений;
			Для Каждого ТекХО Из СписокХО Цикл
				СписокХозяйственныхОпераций.Добавить(Справочники.ХозОперации[ТекХО.Значение]);
			КонецЦикла;
			СписокХозяйственныхОпераций.ЗаполнитьПометки(Истина);
			ТекСтрока.СписокХозОпераций = СписокХозяйственныхОпераций;
		Иначе
			ТекСтрока.СписокХозОпераций = Новый СписокЗначений;
		КонецЕсли;
	КонецЦикла;
	
	ВидыДокументов.Сортировать("Представление");
	
КонецПроцедуры	//ИнициализироватьВидыДокументов

Процедура ИнициализироватьДеревоСсылок()
	
	Если НЕ ПоказыватьДеревоСсылок Тогда 
		Возврат;
	КонецЕсли;
	
	ДеревоСсылок = Новый ДеревоЗначений;
	ДеревоСсылок.Колонки.Добавить("Ссылка");
	ДеревоСсылок.Колонки.Добавить("ТипЗначения",, НСтр("ru = 'Тип ссылки'"));
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

спДокументовБезРегл = Новый СписокЗначений();
спДокументовБезРегл.Добавить("ИзменениеЦен");
спДокументовБезРегл.Добавить("Инкассация");
спДокументовБезРегл.Добавить("ПересортицаТоваров");
спДокументовБезРегл.Добавить("ПеремещениеДенежныхСредств");

// Список специальных документов (без признака регламентированного учета, не совершающих движения).
спДокументовСпец = Новый СписокЗначений();
спДокументовСпец.Добавить("СчетНаОплату");
спДокументовСпец.Добавить("СчетНаОплатуЗаАвтомобили");

// Заполним список документов, у которых обязательно выгружать документ-основание.
спДокументыСОснованием = Новый СписокЗначений();
спДокументыСОснованием.Добавить("ВозвратОтПокупателя");
спДокументыСОснованием.Добавить("ВозвратПоставщику");
спДокументыСОснованием.Добавить("ПоступлениеДопРасходов");
спДокументыСОснованием.Добавить("ВозвратОтПокупателяАвтомобилей");
спДокументыСОснованием.Добавить("ВозвратПоставщикуАвтомобилей");
спДокументыСОснованием.Добавить("СчетФактураВыданный");
спДокументыСОснованием.Добавить("СчетФактураПолученный");

ИмяКонфигурации = Метаданные.Имя;

// Описание общих типов для выгрузки объектов:
// делаем так, чтобы выгружать можно было только те объекты, для которых существует перегрузка.
// Документы
ОбщиеТипыСтрокой = Новый Массив();
ОбщиеТипыСтрокой.Добавить("АвансовыйОтчет");
ОбщиеТипыСтрокой.Добавить("ВводОстатковВзаиморасчетов");
ОбщиеТипыСтрокой.Добавить("Взаимозачет");
ОбщиеТипыСтрокой.Добавить("ВводОстатковТоваров");
ОбщиеТипыСтрокой.Добавить("ВводОстатковПрочихАктивов");
ОбщиеТипыСтрокой.Добавить("ВводВЭксплуатацию");
ОбщиеТипыСтрокой.Добавить("ВозвратОтПокупателя");
ОбщиеТипыСтрокой.Добавить("ВозвратПоставщику");
ОбщиеТипыСтрокой.Добавить("Выписка");
ОбщиеТипыСтрокой.Добавить("ЗакрытиеСмены");
ОбщиеТипыСтрокой.Добавить("ИзменениеЦен");
ОбщиеТипыСтрокой.Добавить("Инкассация");
ОбщиеТипыСтрокой.Добавить("Инвентаризация");
ОбщиеТипыСтрокой.Добавить("Комплектация");
ОбщиеТипыСтрокой.Добавить("КорректировкаДолга");
ОбщиеТипыСтрокой.Добавить("ОтчетКомиссионера");
ОбщиеТипыСтрокой.Добавить("ОтчетКомитенту");
ОбщиеТипыСтрокой.Добавить("ПеремещениеТоваров");
ОбщиеТипыСтрокой.Добавить("Переоценка");
ОбщиеТипыСтрокой.Добавить("ПересортицаТоваров");
ОбщиеТипыСтрокой.Добавить("ПлатежноеПоручение");
ОбщиеТипыСтрокой.Добавить("ПоступлениеДопРасходов");
ОбщиеТипыСтрокой.Добавить("ПоступлениеТоваров");
ОбщиеТипыСтрокой.Добавить("ПриходныйКассовыйОрдер");
ОбщиеТипыСтрокой.Добавить("ПеремещениеАктивов");
ОбщиеТипыСтрокой.Добавить("Разукомплектация");
ОбщиеТипыСтрокой.Добавить("РасходныйКассовыйОрдер");
ОбщиеТипыСтрокой.Добавить("РеализацияТоваров");
ОбщиеТипыСтрокой.Добавить("РеализацияАктивов");
ОбщиеТипыСтрокой.Добавить("СписаниеТоваров");
ОбщиеТипыСтрокой.Добавить("СписаниеАктивов");
ОбщиеТипыСтрокой.Добавить("СчетОтПоставщика");
ОбщиеТипыСтрокой.Добавить("СчетОтПоставщикаЗаАвтомобили");
ОбщиеТипыСтрокой.Добавить("СчетФактураВыданный");
ОбщиеТипыСтрокой.Добавить("СчетФактураПолученный");
ОбщиеТипыСтрокой.Добавить("СчетНаОплату");
ОбщиеТипыСтрокой.Добавить("УведомлениеОбОстаткахПрослеживаемыхТоваров");
ОбщиеТипыСтрокой.Добавить("УведомлениеОПеремещенииПрослеживаемыхТоваров");
ОбщиеТипыСтрокой.Добавить("УведомлениеОВвозеПрослеживаемыхТоваров");
ОбщиеТипыСтрокой.Добавить("ЧекНаОплату");
ОбщиеТипыСтрокой.Добавить("Чек");

// Справочники
ОбщиеТипыСтрокой.Добавить("ТипыНоменклатуры");
ОбщиеТипыСтрокой.Добавить("Номенклатура");
ОбщиеТипыСтрокой.Добавить("КлассификаторЕдиницИзмерения");
ОбщиеТипыСтрокой.Добавить("СтраныМира");
ОбщиеТипыСтрокой.Добавить("ГТД");
ОбщиеТипыСтрокой.Добавить("Контрагенты");
ОбщиеТипыСтрокой.Добавить("ДоговорыВзаиморасчетов");
ОбщиеТипыСтрокой.Добавить("Валюты");
ОбщиеТипыСтрокой.Добавить("СкладыКомпании");
ОбщиеТипыСтрокой.Добавить("Пользователи");
ОбщиеТипыСтрокой.Добавить("Сотрудники");
ОбщиеТипыСтрокой.Добавить("ТипыЦен");
ОбщиеТипыСтрокой.Добавить("БанковскиеСчета");
ОбщиеТипыСтрокой.Добавить("КлассификаторБанков");
ОбщиеТипыСтрокой.Добавить("СтатьиДДС");
ОбщиеТипыСтрокой.Добавить("ПодразделенияКомпании");
ОбщиеТипыСтрокой.Добавить("СтатьиДоходовИРасходов");
ОбщиеТипыСтрокой.Добавить("Организации");
ОбщиеТипыСтрокой.Добавить("ПрочиеАктивы");

СпецТипыСтрокой = Новый Массив();

// Справочники
СпецТипыСтрокой.Добавить("ЦенныеБумаги");
СпецТипыСтрокой.Добавить("Цеха");
СпецТипыСтрокой.Добавить("Модели");
СпецТипыСтрокой.Добавить("Пациенты");

// Документы
СпецТипыСтрокой.Добавить("АктПриемаПередачиЦенныхБумаг");
СпецТипыСтрокой.Добавить("АктРазногласий");
СпецТипыСтрокой.Добавить("ВводОстатковТоваровВПроизводстве");
СпецТипыСтрокой.Добавить("ЗаказНаряд");
СпецТипыСтрокой.Добавить("ПеремещениеДенежныхСредств");
СпецТипыСтрокой.Добавить("ИзвлечениеТоваровИзПроизводства");
СпецТипыСтрокой.Добавить("ПеремещениеТоваровВПроизводство");
СпецТипыСтрокой.Добавить("НачислениеЗарплаты");
СпецТипыСтрокой.Добавить("ВыплатаЗарплаты");
СпецТипыСтрокой.Добавить("ПеремещениеНезавершенногоПроизводства");
СпецТипыСтрокой.Добавить("ВводВЭксплуатациюАвтомобилей");
СпецТипыСтрокой.Добавить("ВводОстатковАвтомобилей");
СпецТипыСтрокой.Добавить("ВозвратОтПокупателяАвтомобилей");
СпецТипыСтрокой.Добавить("ВозвратПоставщикуАвтомобилей");
СпецТипыСтрокой.Добавить("ИнвентаризацияАвтомобилей");
СпецТипыСтрокой.Добавить("ОтчетКомиссионераЗаАвтомобили");
СпецТипыСтрокой.Добавить("ОтчетКомитентуЗаАвтомобили");
СпецТипыСтрокой.Добавить("ПеремещениеАвтомобилей");
СпецТипыСтрокой.Добавить("ПереоценкаАвтомобилей");		
СпецТипыСтрокой.Добавить("ПоступлениеАвтомобилей");
СпецТипыСтрокой.Добавить("РеализацияАвтомобилей");
СпецТипыСтрокой.Добавить("СписаниеАвтомобилей");		
СпецТипыСтрокой.Добавить("СчетНаОплатуЗаАвтомобили");
СпецТипыСтрокой.Добавить("ТалонАмбулаторногоПациента");
СпецТипыСтрокой.Добавить("ВыбытиеИзСтационара");
СпецТипыСтрокой.Добавить("Вакцинация");
СпецТипыСтрокой.Добавить("ДиагностическиеИсследования");
СпецТипыСтрокой.Добавить("ПроцедурноОперационнаяКарта");
СпецТипыСтрокой.Добавить("ПриемСпециалиста");
СпецТипыСтрокой.Добавить("ЗачетОказанныхУслуг");
СпецТипыСтрокой.Добавить("МедицинскийОсмотр");
СпецТипыСтрокой.Добавить("ОбращениеГоспитализация");

ОбщиеТипы = Новый Массив;
СпецТипы = Новый Массив;
// Преобразуем строки в типы
Для К = 0 По Метаданные.Справочники.Количество() - 1 Цикл
	Справочник = Метаданные.Справочники.Получить(К);
	Если ОбщиеТипыСтрокой.Найти(Справочник.Имя)<>Неопределено Тогда
		ОбщиеТипы.Добавить(Тип("СправочникСсылка."+Справочник.Имя));
	КонецЕсли;
	Если СпецТипыСтрокой.Найти(Справочник.Имя)<>Неопределено Тогда
		СпецТипы.Добавить(Тип("СправочникСсылка."+Справочник.Имя));
	КонецЕсли;
КонецЦикла;
Для К = 0 По Метаданные.Документы.Количество() - 1 Цикл
	Документ = Метаданные.Документы.Получить(К);
	Если ОбщиеТипыСтрокой.Найти(Документ.Имя)<>Неопределено Тогда
		ОбщиеТипы.Добавить(Тип("ДокументСсылка."+Документ.Имя));
	КонецЕсли;
	Если СпецТипыСтрокой.Найти(Документ.Имя)<>Неопределено Тогда
		СпецТипы.Добавить(Тип("ДокументСсылка."+Документ.Имя));
	КонецЕсли;
КонецЦикла;

ВыгружатьСправочникиПоСсылкам = Истина;
ЕстьТаблицаСписанийАвтомобилей = Ложь;

МассивТипов = Новый массив();
МассивТипов.Добавить(Тип("Соответствие"));

спСправочникиСпецРеквизиты.Колонки.Добавить("Тип");
спСправочникиСпецРеквизиты.Колонки.Добавить("Реквизит");
спСправочникиСпецРеквизиты.Колонки.Добавить("ТекстЗапроса");
спСправочникиСпецРеквизиты.Колонки.Добавить("ПараметрыЗапроса");
спСправочникиСпецРеквизиты.Колонки.Добавить("Значение");
спСправочникиСпецРеквизиты.Колонки.Добавить("Объекты", Новый ОписаниеТипов(МассивТипов));

#КонецОбласти

#КонецЕсли