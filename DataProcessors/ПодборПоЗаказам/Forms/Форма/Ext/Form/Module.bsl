
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеПоУмолчанию();
	ИнициализироватьКомпоновщикНастроекКомпоновкиДанных(Параметры);
	ЗаполнитьПараметрыПодбора(Параметры);
	ЗаполнитьОтборыПодбора(Параметры);
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "РаспределениеЗаказа") <> Неопределено Тогда
		
		Для Каждого ЭлементМассива Из Параметры.РаспределениеЗаказа Цикл
			
			ЗаполнитьЗначенияСвойств(ЗаказаноВДокументе.Добавить(), ЭлементМассива);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ДатаСписка.Доступность = Объект.ИспользоватьДатуСписка;
	НастроитьВидимостьКолонокФормы();
	ПодготовитьКомпоновщикНастроекКомпоновкиДанных();
	ПолучитьТаблицуЗаказов();
	УстановкаДополнительныхПолейДереваЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВладелецФормы = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Обработка не предназначена для самостоятельного вызова'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОбъектФормы = Неопределено;
	ПолучитьОсновнойОбъектФормы(ВладелецФормы, ОбъектФормы);
	
	Если ОбъектФормы <> Неопределено Тогда
		
		Объект.ДатаСписка = ОбъектФормы.Дата;
		
	КонецЕсли;
	
	Если НЕ Элементы.ФильтрСтрокПоКлючевойКолонке.Доступность Тогда
		
		ФильтрСтрокПоКлючевойКолонке(Неопределено);
		
	КонецЕсли;
	
	НастроитьИнтерфейс();
	СформироватьДеревоЗаказов();
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПодобранныеТовары");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимИерархииПриИзменении(Элемент)
	
	НастроитьИнтерфейс();
	СформироватьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКомпоновкиДанныхНастройкиОтборПриИзменении(Элемент)
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ДеревоЗаказов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		
		СтандартнаяОбработка = Ложь;
		ДобавитьВыбранныеТоварыВПодбор(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяСтрока)
		);
	
	ИначеЕсли
		ДанныеСтроки.ВладелецХарактеристики = Неопределено
		ИЛИ НЕ ДанныеСтроки.ХарактеристикаНоменклатуры.Пустая()
	Тогда
		
		ДобавитьНоменклатуру(
			ДанныеСтроки.Номенклатура,
			ДанныеСтроки.ХарактеристикаНоменклатуры,
			ДанныеСтроки[Объект.ИмяКолонкиКоличество] - ДанныеСтроки.ЗаказаноВДокументе,
			ДанныеСтроки.Заказ,
			ДанныеСтроки.СкладКомпании,
			ДанныеСтроки.ЗаказПоставщика
		);
		
	Иначе
		
		Элементы.ГруппаНоменклатураЗаказа.Видимость         = Ложь;
		Элементы.ГруппаХарактеристикиНоменклатуры.Видимость = Истина;
		
		ХарактеристикиНоменклатуры.Параметры.УстановитьЗначениеПараметра(
			"ВладелецХарактеристики",
			ДанныеСтроки.ВладелецХарактеристики
		);
		
		ВыбраннаяНоменклатура    = ДанныеСтроки.Номенклатура;
		ВыбранноеКоличество      = ДанныеСтроки[Объект.ИмяКолонкиКоличество] - ДанныеСтроки.ЗаказаноВДокументе;
		ВыбранныйЗаказ           = ДанныеСтроки.Заказ;
		ВыбранныйСкладКомпании   = ДанныеСтроки.СкладКомпании;
		ВыбранныйЗаказПоставщика = ДанныеСтроки.ЗаказПоставщика;
		
		ТекущийЭлемент        = Элементы.ХарактеристикиНоменклатуры;
		
	КонецЕсли;
		
	ЗаполнитьКолонкуЗаказаноВДокументе();
	СформироватьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ХарактеристикиНоменклатуры.ДанныеСтроки(ВыбраннаяСтрока);
	Характеристика = ?(ДанныеСтроки = Неопределено, Неопределено, ДанныеСтроки.Характеристика);
	
	Если НЕ ВыбраннаяНоменклатура.Пустая() Тогда
		ДобавитьНоменклатуру(ВыбраннаяНоменклатура,
			Характеристика,
			ВыбранноеКоличество,
			ВыбранныйЗаказ,
			ВыбранныйСкладКомпании,
			ВыбранныйЗаказПоставщика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеТоварыПослеУдаления(Элемент)
	
	УстановитьВидимостьКолонкиХарактеристика();
	ЗаполнитьКолонкуЗаказаноВДокументе();
	СформироватьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДатуСпискаПриИзменении(Элемент)
	
	Элементы.ДатаСписка.Доступность = Объект.ИспользоватьДатуСписка;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетЗаказанногоПриИзменении(Элемент)
	
	Элементы.ДеревоЗаказовЗаказаноВДокументе.Видимость = УчетЗаказанного;
	
	Объект.ПодобранныеТовары.Очистить();
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеТоварыКоличествоПриИзменении(Элемент)
	
	ЗаполнитьКолонкуЗаказаноВДокументе();
	СформироватьДеревоЗаказов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ОбновитьНаСервере()
	
	ПодготовитьКомпоновщикНастроекКомпоновкиДанных();
	
	ПолучитьТаблицуЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	СформироватьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВДокумент(Команда)
	
	Закрыть(УпаковатьРезультатВХранилище(ВладелецФормы.УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКВыборуТовара(Команда)
	
	Элементы.ГруппаНоменклатураЗаказа.Видимость         = Истина;
	Элементы.ГруппаХарактеристикиНоменклатуры.Видимость = Ложь;
	
	ХарактеристикиНоменклатуры.Параметры.УстановитьЗначениеПараметра("ВладелецХарактеристики", Неопределено);
	
	ВыбраннаяНоменклатура    = Неопределено;
	ВыбранноеКоличество      = 0;
	ВыбранныйЗаказ           = Неопределено;
	ВыбранныйСкладКомпании   = Неопределено;
	ВыбранныйЗаказПоставщика = Неопределено;
	
	ТекущийЭлемент        = Элементы.ДеревоЗаказов;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтрокПоКлючевойКолонке(Команда)
	
	Объект.ОтображатьВсеСтроки = НЕ Объект.ОтображатьВсеСтроки;
	Элементы.ФильтрСтрокПоКлючевойКолонке.Пометка = Объект.ОтображатьВсеСтроки;
	СформироватьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеПозиции(Команда)

	Если Элементы.ДеревоЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьВыбранныеТоварыВПодбор(Элементы.ДеревоЗаказов.ВыделенныеСтроки);
	ЗаполнитьКолонкуЗаказаноВДокументе();
	СформироватьДеревоЗаказов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекКомпоновкиДанных(Контекст)
	
	ПутьКСхемеКомпоновки = ПолучитьЗначениеПараметраСтруктуры(Контекст, "ПутьКСхемеКомпоновкиДанных", "СКД_ПоУмолчанию");
	СхемаКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанных(ПутьКСхемеКомпоновки);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСхемуКомпоновкиДанных(ПутьКСхемеКомпоновки)
	Перем Менеджер, ИмяОбъекта, ИмяМакета;
	
	Если НЕ ЭтоАдресВременногоХранилища(ПутьКСхемеКомпоновки) Тогда
		Если СтрНайти(ПутьКСхемеКомпоновки, ".") > 0 Тогда
			Менеджер = Документы;
			РазделеннаяСтрока = СтрРазделить(ПутьКСхемеКомпоновки, ".");
			
			ИмяОбъекта = РазделеннаяСтрока[0];
			ИмяМакета  = РазделеннаяСтрока[1];
		Иначе
			Менеджер = Обработки;
			
			ИмяОбъекта = "ПодборПоЗаказам";
			ИмяМакета  = ПутьКСхемеКомпоновки;
		КонецЕсли;
		
		Если ИмяОбъекта = "ОбщийМакет" Тогда
			Макет = ПолучитьОбщийМакет(ИмяМакета);
		Иначе
			Макет = Менеджер[ИмяОбъекта].ПолучитьМакет(ИмяМакета);
		КонецЕсли;
		
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор);
	Иначе
		АдресСхемыКомпоновкиДанных = ПутьКСхемеКомпоновки;
		Макет = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПодбора(Контекст)
	
	Объект.ИспользоватьЗаказыПокупателей = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ИспользоватьЗаказыПокупателей",
		Истина
	);
	Объект.ИспользоватьЗаказыВнутренние = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ИспользоватьЗаказыВнутренние",
		Истина
	);
	Объект.ВыводитьТолькоОстаткиПоЗаказам = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ВыводитьТолькоОстаткиПоЗаказам",
		Ложь
	);
	Объект.Заказ = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"Заказ",
		Неопределено
	);
	Объект.ИмяКолонкиКоличество = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ИмяКолонкиКоличество",
		"Заказано"
	);
	Объект.ДатаСписка = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"Дата",
		Неопределено
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборыПодбора(Контекст)
	
	Если Не Параметры.Свойство("Отбор") Тогда
			
		Возврат;
			
	КонецЕсли;
	
	Для Каждого Отбор Из Параметры.Отбор Цикл
		
		ОтборВидСравнения = Неопределено;
		ОтборЗначение = Отбор.Значение;
				
		Если ТипЗнч(Отбор.Значение) = Тип("Структура")
			И Отбор.Значение.Свойство("ВидСравнения") Тогда
			ОтборВидСравнения = Отбор.Значение.ВидСравнения;
			ОтборЗначение = Отбор.Значение.Значение;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор,
			Отбор.Ключ,
			ОтборЗначение,
			ОтборВидСравнения,
			,
			Истина
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПараметрДоступен(ПараметрыДанных, ИмяПараметра)
	
	Возврат
		(ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(ИмяПараметра)) <> Неопределено);
	
КонецФункции

&НаСервере
Процедура ПодготовитьКомпоновщикНастроекКомпоновкиДанных()
	
	// Установим параметры компоновщика настроек.
	ПараметрыДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных;
	
	Если ПараметрДоступен(ПараметрыДанных, "ИспользоватьЗаказыВнутренние") Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("ИспользоватьЗаказыВнутренние", Объект.ИспользоватьЗаказыВнутренние);
	КонецЕсли;
	Если ПараметрДоступен(ПараметрыДанных, "ИспользоватьЗаказыПокупателей") Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("ИспользоватьЗаказыПокупателей", Объект.ИспользоватьЗаказыПокупателей);
	КонецЕсли;
	Если ПараметрДоступен(ПараметрыДанных, "ВыводитьТолькоОстаткиПоЗаказам") Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьТолькоОстаткиПоЗаказам", Объект.ВыводитьТолькоОстаткиПоЗаказам);
	КонецЕсли;
	
	Если ПараметрДоступен(ПараметрыДанных, "МоментВремени") Тогда
		Если Объект.ИспользоватьДатуСписка Тогда
			ПараметрыДанных.УстановитьЗначениеПараметра("МоментВремени", Объект.ДатаСписка);
		Иначе
			ПараметрыДанных.УстановитьЗначениеПараметра("МоментВремени", КонецГода(ТекущаяДатаСеанса()));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрДоступен(ПараметрыДанных, "Заказ") Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("Заказ", Объект.Заказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуЗаказов()
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
		ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных),
		КомпоновщикНастроекКомпоновкиДанных.Настройки,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	Объект.СписокЗаказанныхТоваров.Загрузить(ТаблицаРезультат);
	ЗаполнитьКолонкуЗаказаноВДокументе();
	
	ТаблицаРезультат = Неопределено;
	
	// заполним владельца характеристик
	Для Каждого ЗаказанныйТовар Из Объект.СписокЗаказанныхТоваров Цикл
		ИспользованиеХарактеристик = ЗаказанныйТовар.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик;
		Если ИспользованиеХарактеристик = 2 Тогда
			ЗаказанныйТовар.ВладелецХарактеристики = ЗаказанныйТовар.Номенклатура;
		ИначеЕсли ИспользованиеХарактеристик = 1 Тогда
			ЗаказанныйТовар.ВладелецХарактеристики = ЗаказанныйТовар.Номенклатура.ТипНоменклатуры;
		Иначе
			ЗаказанныйТовар.ВладелецХарактеристики = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуЗаказаноВДокументе()
	
	Если ЗаказаноВДокументе = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокТоваров = Объект.СписокЗаказанныхТоваров;
	
	Для Каждого Строка Из СписокТоваров Цикл
		
		Строка.ЗаказаноВДокументе = КоличествоЗаказаноВДокументе(Строка) + КоличествоПодобраноВДокумент(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КоличествоЗаказаноВДокументе(Знач ЗаказанныйТовар)
	
	УсловиеПоиска = Новый Структура("Номенклатура,ЗаказПокупателя", ЗаказанныйТовар.Номенклатура, ЗаказанныйТовар.Заказ);
	СтрокиВДокументе = ЗаказаноВДокументе.НайтиСтроки(УсловиеПоиска);
	
	Если СтрокиВДокументе.Количество() > 0 Тогда
		
		Возврат СтрокиВДокументе[0].Количество;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция КоличествоПодобраноВДокумент(Знач ЗаказанныйТовар)
	
	УсловиеПоиска = Новый Структура("Номенклатура,Заказ", ЗаказанныйТовар.Номенклатура, ЗаказанныйТовар.Заказ);
		
	Если ЗначениеЗаполнено(ЗаказанныйТовар.ХарактеристикаНоменклатуры) Тогда
	
		УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", ЗаказанныйТовар.ХарактеристикаНоменклатуры);
	
	КонецЕсли;
	
	СтрокиВПодобрано = Объект.ПодобранныеТовары.НайтиСтроки(УсловиеПоиска);
	
	Если СтрокиВПодобрано.Количество() > 0 Тогда
		
		Возврат СтрокиВПодобрано[0].Количество;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ПроверитьКоличествоПоСериям(Строка)
	
	// Получим количество товара в базовых единицах
	КоличествоБазовое = Строка.Количество*Строка.Коэффициент;
	
	// Проверим и сообщим пользователю, если что-то не так
	Если КоличествоБазовое > 1 И Строка.Номенклатура.ТипНоменклатуры.УникальностьСерийногоНомера Тогда
		Строка.Количество       = 1;
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения;
		Строка.Коэффициент      = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Номенклатура ""%1"" учитывается по уникальным серийным номерам. Количество не может превышать 1 базовую единицу.'"),
			Строка.Номенклатура
		);
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Корзина",Объект.ПодобранныеТовары.Индекс(Строка) + 1, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКТабличнойЧасти, "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонкиХарактеристика()
	
	ЕстьХарактеристика = Ложь;
	
	Для Каждого Строка Из Объект.ПодобранныеТовары Цикл
		
		Если НЕ Строка.ХарактеристикаНоменклатуры.Пустая() Тогда
			
			ЕстьХарактеристика = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ПодобранныеТоварыХарактеристикаНоменклатуры.Видимость = ЕстьХарактеристика;
	
КонецПроцедуры

&НаСервере
Функция УпаковатьРезультатВХранилище(ИдентификаторФормы)

	Возврат ПоместитьВоВременноеХранилище(Объект.ПодобранныеТовары.Выгрузить(), ИдентификаторФормы);
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьКолонокФормы()
	
	ПроверяемыеКолонки = Новый Массив;
	ПроверяемыеКолонки.Добавить("СкладКомпании");
	ПроверяемыеКолонки.Добавить("Резерв");
	ПроверяемыеКолонки.Добавить("Остаток");
	ПроверяемыеКолонки.Добавить("Заказано");
	ПроверяемыеКолонки.Добавить("Распределено");
	ПроверяемыеКолонки.Добавить("ЗаказПоставщика");
	ПроверяемыеКолонки.Добавить("Контрагент");
	
	ДоступныеГруппировки = КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляГруппировок.Элементы;
	
	Для Каждого Колонка Из ПроверяемыеКолонки Цикл
		
		ВидимостьКолонки = (ДоступныеГруппировки.Найти(Колонка) <> Неопределено);
		Элементы["ДеревоЗаказов" + Колонка].Видимость = ВидимостьКолонки;
		
		Если Элементы.Найти("ПодобранныеТовары" + Колонка) <> Неопределено Тогда
			
			Элементы["ПодобранныеТовары" + Колонка].Видимость = ВидимостьКолонки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкиКоличества = Новый Массив;
	КолонкиКоличества.Добавить("Резерв");
	КолонкиКоличества.Добавить("Остаток");
	КолонкиКоличества.Добавить("Заказано");
	КолонкиКоличества.Добавить("Распределено");
	КоличествоВидимыхКолонокКоличества = 0;
	
	Для Каждого Колонка Из КолонкиКоличества Цикл
		
		Если Элементы["ДеревоЗаказов" + Колонка].Видимость Тогда
			
			КоличествоВидимыхКолонокКоличества = КоличествоВидимыхКолонокКоличества + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДобавлениеТоваров

&НаСервере
Процедура ДобавитьНоменклатуру(Номенклатура,
                               Знач ХарактеристикаНоменклатуры,
                               Количество,
                               Заказ,
                               СкладКомпании,
                               ЗаказПоставщика)
	
	Если ХарактеристикаНоменклатуры = Неопределено Тогда
								   
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
	Условие = Новый Структура();
	Условие.Вставить("Номенклатура"              , Номенклатура);
	Условие.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Условие.Вставить("ЕдиницаИзмерения"          , Номенклатура.ОсновнаяЕдиницаИзмерения);
	
	Если ЗначениеЗаполнено(СкладКомпании) Тогда
		
		Условие.Вставить("СкладКомпании", СкладКомпании);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказПоставщика) Тогда
		
		Условие.Вставить("ЗаказПоставщика", ЗаказПоставщика);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		
		Условие.Вставить("Заказ", Заказ);
		
	КонецЕсли;
	
	ПодходящиеСтроки = Объект.ПодобранныеТовары.НайтиСтроки(Условие);
	
	Коэффициент = Условие.ЕдиницаИзмерения.Коэффициент;
	
	Если ПодходящиеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.ПодобранныеТовары.Добавить();
		НоваяСтрока.Номенклатура               = Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество                 = Количество / ?(Коэффициент = 0, 1, Коэффициент);
		НоваяСтрока.ЕдиницаИзмерения           = Условие.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Коэффициент;
		НоваяСтрока.Заказ                      = Заказ;
		
		Если Условие.Свойство("СкладКомпании") Тогда
			
			НоваяСтрока.СкладКомпании = СкладКомпании;
			
		КонецЕсли;
		
		Если Условие.Свойство("ЗаказПоставщика") Тогда
			
			НоваяСтрока.ЗаказПоставщика = ЗаказПоставщика;
			
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока = ПодходящиеСтроки[0];
		НоваяСтрока.Количество = НоваяСтрока.Количество + Количество / ?(Коэффициент = 0, 1, Коэффициент);
		
	КонецЕсли;
	
	ПроверитьКоличествоПоСериям(НоваяСтрока);
	УстановитьВидимостьКолонкиХарактеристика();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныеТоварыВПодбор(Знач ВыделенныеСтроки)
	
	ВыделенныеСтроки = ИдентификаторыСтрокВДанные(ВыделенныеСтроки);
	ВсеЛистья = ЛистьяДереваЗаказовПоВыделеннымСтрокам(ВыделенныеСтроки);
	
	Для Каждого Лист Из ВсеЛистья Цикл
		
		Если
			Лист.ВладелецХарактеристики = Неопределено
			ИЛИ НЕ Лист.ХарактеристикаНоменклатуры.Пустая()
			Тогда
			
			ДобавитьНоменклатуру(
			Лист.Номенклатура,
			Лист.ХарактеристикаНоменклатуры,
			Лист[Объект.ИмяКолонкиКоличество] - Лист.ЗаказаноВДокументе,
			Лист.Заказ,
			Лист.СкладКомпании,
			Лист.ЗаказПоставщика
			);
			
		Иначе
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось добавить товар %1 в группе. Для него требуется выбор характеристики'")
			);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ИдентификаторыСтрокВДанные(ВыделенныеСтроки)
	
	Результат = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Результат.Добавить(ДеревоЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЛистьяДереваЗаказовПоВыделеннымСтрокам(ВыделенныеСтроки)
	
	ВсеЛистья = Новый Массив();
	ОбработанныеИдентификаторы = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если ВыделеннаяСтрока.ЭтоГруппа Тогда
			
			Если ОбработанныеИдентификаторы.Найти(ВыделеннаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
				
				Для Каждого Ребенок Из ВыделеннаяСтрока.ПолучитьЭлементы() Цикл
					
					Если ОбработанныеИдентификаторы.Найти(Ребенок.ПолучитьИдентификатор()) = Неопределено Тогда
						
						ВсеЛистья.Добавить(Ребенок);
						ОбработанныеИдентификаторы.Добавить(Ребенок.ПолучитьИдентификатор());
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			Если ОбработанныеИдентификаторы.Найти(ВыделеннаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
				
				ВсеЛистья.Добавить(ВыделеннаяСтрока);
				ОбработанныеИдентификаторы.Добавить(ВыделеннаяСтрока.ПолучитьИдентификатор());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсеЛистья;
	
КонецФункции

#КонецОбласти

#Область РаботаСИнтерфейсом

&НаКлиенте
Процедура СформироватьДеревоЗаказов()
	
	ЭлементыДерева = ДеревоЗаказов.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если Объект.РежимИерархии = 0 Тогда
		
		Для Каждого Строка Из Объект.СписокЗаказанныхТоваров Цикл
			
			Если Объект.ОтображатьВсеСтроки ИЛИ (Строка[Объект.ИмяКолонкиКоличество] - Строка.ЗаказаноВДокументе) > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ЭлементыДерева.Добавить(), Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		КолонкаГруппировки = ?(Объект.РежимИерархии = 1, "Номенклатура", "Заказ");
		СверткаГруппировки = Новый Массив;
		
		Для Каждого Строка Из Объект.СписокЗаказанныхТоваров Цикл
			
			Если
				(Объект.ОтображатьВсеСтроки ИЛИ (Строка[Объект.ИмяКолонкиКоличество] - Строка.ЗаказаноВДокументе) > 0)
				И СверткаГруппировки.Найти(Строка[КолонкаГруппировки]) = Неопределено
			Тогда
				
				СверткаГруппировки.Добавить(Строка[КолонкаГруппировки]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементГруппировки Из СверткаГруппировки Цикл
			
			Корень = ЭлементыДерева.Добавить();
			Корень.КолонкаГруппировки = ЭлементГруппировки;
			
			Если Объект.РежимИерархии = 1 Тогда
				
				Корень.Номенклатура = ЭлементГруппировки;
				
			КонецЕсли;
			
			Корень.ЭтоГруппа = Истина;
			ЭлементыКорня    = Корень.ПолучитьЭлементы();
			Условие = Новый Структура(КолонкаГруппировки, ЭлементГруппировки);
			ПодчиненныеСтроки = Объект.СписокЗаказанныхТоваров.НайтиСтроки(Условие);
			
			Для Каждого Строка Из ПодчиненныеСтроки Цикл
				
				Если
					Объект.ОтображатьВсеСтроки
					ИЛИ (Строка[Объект.ИмяКолонкиКоличество] - Строка.ЗаказаноВДокументе) > 0
				Тогда
					
					НоваяСтрока = ЭлементыКорня.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.КолонкаГруппировки = ЭлементГруппировки;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Объект.РежимИерархии = 2 И ПодчиненныеСтроки.Количество() > 0 Тогда
				
				Корень.ДокументОснованиеЗаказа = НоваяСтрока.ДокументОснованиеЗаказа;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Элементы.ДеревоЗаказов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	УстановкаДополнительныхПолейДереваЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтерфейс()
	
	Элементы.ДеревоЗаказовГруппаОсновныхКолонок.Группировка =
		?(Объект.РежимИерархии = 0, ГруппировкаКолонок.Горизонтальная, ГруппировкаКолонок.ВЯчейке);
	
	Элементы.ДеревоЗаказовКолонкаГруппировки.Видимость = (Объект.РежимИерархии <> 0);
	Элементы.ДеревоЗаказовКолонкаГруппировки.Заголовок = ?(Объект.РежимИерархии = 1, "Номенклатура", "Заказ");
	
	Элементы.ДеревоЗаказовЗаказ.Видимость        = (Объект.РежимИерархии <> 2);
	Элементы.ДеревоЗаказовНоменклатура.Видимость = (Объект.РежимИерархии <> 1);
	
	ЕстьХарактеристика = Ложь;
	Для Каждого Строка Из Объект.СписокЗаказанныхТоваров Цикл
		Если НЕ Строка.ХарактеристикаНоменклатуры.Пустая() Тогда
			ЕстьХарактеристика = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДеревоЗаказовХарактеристикаНоменклатуры.Видимость = ЕстьХарактеристика;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаДополнительныхПолейДереваЗаказа()
	
	Если Объект.РежимИерархии = 1 Тогда
		Элементы.Переместить(Элементы.ДеревоЗаказовНоменклатураАртикул,       Элементы.ДеревоЗаказовГруппаОсновныхКолонок, Элементы.ДеревоЗаказовКолонкаГруппировки);
		Элементы.Переместить(Элементы.ДеревоЗаказовНоменклатураПроизводитель, Элементы.ДеревоЗаказовГруппаОсновныхКолонок, Элементы.ДеревоЗаказовКолонкаГруппировки);
	Иначе
		Элементы.Переместить(Элементы.ДеревоЗаказовНоменклатураАртикул,       Элементы.ДеревоЗаказовГруппаОсновныхКолонок, Элементы.ДеревоЗаказовНоменклатура);
		Элементы.Переместить(Элементы.ДеревоЗаказовНоменклатураПроизводитель, Элементы.ДеревоЗаказовГруппаОсновныхКолонок, Элементы.ДеревоЗаказовНоменклатура);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры // УстановкаДополнительныхПолейДереваЗаказа()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Удалим ранее установленное условное оформление
	УстановитьУсловноеОформлениеПоУмолчанию();
	
	// Установим новое условное оформление строк
	Для Каждого ТекущаяСтрока Из ДеревоЗаказов.ПолучитьЭлементы() Цикл
		
		Если Объект.РежимИерархии = 1 Тогда
			Для Каждого ТекущаяСтрокаЗаказа Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				УстановитьУсловноеОформлениеДляЗаказа(ТекущаяСтрокаЗаказа.Заказ, "Заказ", ТекущаяСтрокаЗаказа.ДокументОснованиеЗаказа);
			КонецЦикла;
		Иначе
			Если Объект.РежимИерархии = 0 Тогда
				СтрокаЗаказа = ТекущаяСтрока.Заказ;
				ИмяПоляОформления = "Заказ";
			Иначе
				СтрокаЗаказа = ТекущаяСтрока.КолонкаГруппировки;
				ИмяПоляОформления = "КолонкаГруппировки";
			КонецЕсли;
			
			УстановитьУсловноеОформлениеДляЗаказа(СтрокаЗаказа, ИмяПоляОформления, ТекущаяСтрока.ДокументОснованиеЗаказа);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
Процедура УстановитьУсловноеОформлениеДляЗаказа(СтрокаЗаказа, ИмяПоляОформления, ДокументОснование)
	
	// Оформление поля заказа
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗаказов"+ИмяПоляОформления);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗаказов."+ИмяПоляОформления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СтрокаЗаказа;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", СтрШаблон("%1 (%2)", СтрокаЗаказа, ДокументОснование));
	
КонецПроцедуры // УстановитьУсловноеОформлениеДляЗаказа()

&НаСервере
Процедура УстановитьУсловноеОформлениеПоУмолчанию()
	
	УсловноеОформление.Элементы.Очистить();
	
	ХарактеристикиНоменклатуры.УсловноеОформление.Элементы.Очистить();
	// Шрифт, текст
	ЭлементУсловногоОформления = ХарактеристикиНоменклатуры.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Характеристика");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Характеристика");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,,Истина));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '[ПРОПУСТИТЬ ВЫБОР ХАРАКТЕРИСТИКИ]'"));
	
	// Отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовКолонкаГруппировки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовНоменклатура.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовЗаказ.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовНоменклатураАртикул.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовНоменклатураПроизводитель.Имя);
	
	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РежимИерархии");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РежимИерархии");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	// Отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовНоменклатураАртикул.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовНоменклатураПроизводитель.Имя);
	
	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РежимИерархии");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РежимИерархии");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
