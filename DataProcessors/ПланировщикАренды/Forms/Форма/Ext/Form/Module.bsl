///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Планировщик аренды"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.КвантВремени = 30 * 60;
	
	Объект.ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "РежимПодбора", Ложь) Тогда
		РежимПодбора = Истина;
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		Объект.ДатаКалендаря = НачалоДня(Параметры.АрендаДатаНачала);
		Для Каждого Автомобиль Из Параметры.МассивАвтомобилей Цикл
			НоваяСтрока = ИсключитьАвтомобили.Добавить();
			НоваяСтрока.Автомобиль = Автомобиль;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("МассивАвтомобилей_Показать") Тогда
		Для Каждого Автомобиль Из Параметры.МассивАвтомобилей_Показать Цикл
			НоваяСтрока = ПоказатьАвтомобили.Добавить();
			НоваяСтрока.Автомобиль = Автомобиль;
		КонецЦикла;
		Объект.ПодразделениеКомпании = Неопределено;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидАренды") Тогда
		Объект.ВидАренды = Параметры.ВидАренды;
	КонецЕсли;
	
	Если Объект.ДатаКалендаря = '00010101' Тогда
		Объект.ДатаКалендаря = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьПараметрыПоУмолчанию();
	
	ЕстьПодсистемаCRM = ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаCRM");
	ЕстьПодсистемаАрендаАвтомобилей = ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАрендаАвтомобилей");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьПериод();
	
	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	
	Если РежимОтображения = "День" Тогда
		ОтобразитьУказанныйИнтервалВремени();
	КонецЕсли;
	
	// Производим подключение обработчика события выполняемого с задержкой.
	Если НЕ АвтоОбновление = 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
	КонецЕсли;
	
	КартинкаВводНаОсновании = БиблиотекаКартинок.ВводНаОсновании;
	
	Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьДоговорНаОснованииЗаявки.Картинка = КартинкаВводНаОсновании;
	Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьИзменениеДоговораАренды.Картинка  = КартинкаВводНаОсновании;
	Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьАктОбОказанииУслуг.Картинка       = КартинкаВводНаОсновании;
	Элементы.ПланировщикКонтекстноеМенюПланировщик_ПомощникВводаДокументовАренды.Картинка   = КартинкаВводНаОсновании;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек формы.
//
// Параметры:
//  Настройки - Соответствие - Значения сохраненных реквизитов и настроек формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДанныеПланировщика();
	
	Если РежимОтображения = "День" Тогда
		Если НЕ ВремяОтображенияС = '00010101' И НЕ ВремяОтображенияПо = 0 Тогда
			Планировщик.ОтступСНачалаПереносаШкалыВремени = ВремяОтображенияС;
			Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - ВремяОтображенияПо;
		Иначе
			Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
			Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на сервере при активизации даты в календаре (указание даты мышью или перемещение на
// дату с помощью клавиатуры).
//
&НаСервере
Процедура КалендарьПриАктивизацииДатыНаСервере()
	
	ОбновитьДанныеПланировщика();
	ПланировщикПриСменеТекущегоПериодаОтображенияНаСервере();
	
КонецПроцедуры // КалендарьПриАктивизацииДатыНаСервере()

// Обработчик события возникающего на клиенте при активизации даты в календаре (указание даты мышью или перемещение на
// дату с помощью клавиатуры).
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КалендарьПриАктивизацииДаты(Элемент)
	
	Если РежимОтображения = "Месяц" Тогда
		ОбновитьПланировщик(НачалоМесяца(Объект.ДатаКалендаря), КонецМесяца(Объект.ДатаКалендаря));
	ИначеЕсли РежимОтображения = "Квартал" Тогда
		ОбновитьПланировщик(НачалоКвартала(Объект.ДатаКалендаря), КонецКвартала(Объект.ДатаКалендаря));
	ИначеЕсли РежимОтображения = "Год" Тогда
		ОбновитьПланировщик(НачалоГода(Объект.ДатаКалендаря), КонецГода(Объект.ДатаКалендаря));
	ИначеЕсли РежимОтображения = "Неделя" Тогда
		ОбновитьПланировщик(НачалоНедели(Объект.ДатаКалендаря), КонецНедели(Объект.ДатаКалендаря));
	ИначеЕсли РежимОтображения = "День" Тогда
		ОбновитьПланировщик(Объект.ДатаКалендаря, КонецДня(Объект.ДатаКалендаря));
	КонецЕсли;
	
	Если НЕ ЗагруженныйМесяц = Месяц(Объект.ДатаКалендаря) Тогда
		КалендарьПриАктивизацииДатыНаСервере();
	КонецЕсли;
	
	Если РежимОтображения = "День" Тогда
		ОтобразитьУказанныйИнтервалВремени();
	КонецЕсли;
	
	СформироватьЗаголовокФормы();
	Элементы.Календарь.Обновить();
	
КонецПроцедуры // КалендарьПриАктивизацииДаты()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ВыборМесяца".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ВыборМесяцаПриИзменении(Элемент)
	
	Объект.ДатаКалендаря = ВыборМесяца.ДатаНачала;
	КалендарьПриАктивизацииДаты(Неопределено);
	
КонецПроцедуры // ВыборМесяцаПриИзменении()

#Область ОбработчикиСобытийПланировщика

// Обработчик события возникающего на клиенте при двойном щелчке левой кнопки мыши на элементе.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Откроем выбранный документ
	Если Элемент.ВыделенныеЭлементы.Количество() = 1 Тогда
		Документ = Элемент.ВыделенныеЭлементы[0].Значение;
		Если ЗначениеЗаполнено(Документ) Тогда
			ОткрытьФорму(
				"Документ." + ИмяМетаданныхПоТипу(Документ) + ".ФормаОбъекта",
				Новый Структура("ТолькоПросмотр,Ключ", ?(ТипЗнч(Документ) = Тип("ДокументСсылка.ТестДрайв"), Ложь, Истина), Документ),
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаСозданияДокументов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПланировщикВыбор()

// Обработчик события возникающего при смене периода отображения (при прокрутке с помощью колеса мыши или команд) в
// контексте сервера.
//
&НаСервере
Процедура ПланировщикПриСменеТекущегоПериодаОтображенияНаСервере()
	
	ЗагруженныйМесяц = Месяц(Объект.ДатаКалендаря);
	
КонецПроцедуры // ПланировщикПриСменеТекущегоПериодаОтображения()

// Обработчик события возникающего на клиенте при смене периода отображения 
// (при прокрутке с помощью колеса мыши или команд).
//
// Параметры:
//  Элемент                   - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ТекущиеПериодыОтображения - Массив       - Массив текущих периодов отображения. 
//  												Элементы массива имеют тип ПериодОтображенияПланировщика.
//  СтандартнаяОбработка      - Булево       - В данный параметр передается признак выполнения системной 
//  												обработки события.
//
&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьЗаголовокФормы();
	
КонецПроцедуры // ПланировщикПриСменеТекущегоПериодаОтображения()

// Обработчик события возникающего на клиенте перед отображением окна быстрого редактирования.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НовыйЭлемент         - Булево       - Признак указывает, что создается новый элемент,
//  									  а не редактируется существующий.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПланировщикПередНачаломРедактирования()

// Обработчик события возникающего на клиенте при интерактивном удалении элемента.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Установка данного параметра в Истина приведет к отмене удаления элементов.
//
&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // ПланировщикПередУдалением()

// Обработчик события возникающего на клиенте при окончании интерактивного редактировании элемента планировщика.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НовыйЭлемент         - Булево       - Признак указывает, что был создан новый элемент,
//  										а не редактировался существующий.
//  ОтменаРедактирования - Булево      - Установка данного параметра в Истина приведет к отмене изменения
//  										элемента планировщика.
//
&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	// Добавим событие
	Если Не НовыйЭлемент Тогда
		
		Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда
			ОтменаРедактирования = Истина;
		Иначе                    
			ЭлементПланировщика = Элемент.ВыделенныеЭлементы[0]; 
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДатаНачала", ЭлементПланировщика.Начало);  
			ПараметрыДокумента.Вставить("ДатаОкончания", ЭлементПланировщика.Конец);
			ПараметрыДокумента.Вставить("Документ", ЭлементПланировщика.Значение);
			ПараметрыДокумента.Вставить("Автомобиль", ЭлементПланировщика.ЗначенияИзмерений.Получить("Автомобиль")); 	
			
			Если ПараметрыДокумента.Документ = Объект.Документ Тогда
				ОтменаРедактирования = Истина;;
			ИначеЕсли ТипЗнч(ПараметрыДокумента.Документ) = Тип("ДокументСсылка.ЗаявкаНаАренду")
				ИЛИ ТипЗнч(ПараметрыДокумента.Документ) = Тип("ДокументСсылка.ДоговорАренды") 
				ИЛИ ТипЗнч(ПараметрыДокумента.Документ) = Тип("ДокументСсылка.ТестДрайв") Тогда  
				
				ИзменитьДокументПриПеретаскивании(ПараметрыДокумента);           
			Иначе
				ОтменаРедактирования = Истина;	
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьДанныеПланировщика();
		
	КонецЕсли;
	
КонецПроцедуры // ПланировщикПриОкончанииРедактирования()

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент)
	
	НастроитьКонтекстноеМенюПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Начало", Начало);  
	ДополнительныеПараметры.Вставить("Конец", Конец);
	ДополнительныеПараметры.Вставить("Автомобиль", Значения.Получить("Автомобиль"));
	
	РезультатПроверки = ПроверитьВозможностьИспользоватьПланировщик(Объект.Документ, Истина);
	
	Если РезультатПроверки <> Неопределено Тогда
		Подключаемый_ПланировщикПередСозданием(РезультатПроверки, ДополнительныеПараметры);
	Иначе
		
		ВыборВариантов = Новый СписокЗначений;
		ВыборВариантов.Добавить(1, НСтр("ru = 'Заявка на аренду'"));
		ВыборВариантов.Добавить(2, НСтр("ru = 'Тест-драйв'"));
		ВыборВариантов.Добавить(0, НСтр("ru = 'Отмена'")); 
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("Подключаемый_ПланировщикПередСозданием", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru = 'Выберите документ для создания'"),
			ВыборВариантов
		);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланировщикПередСозданием(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВопроса) Или РезультатВопроса = 0 Тогда
		Возврат;
	КонецЕсли;
					
	Начало = НачалоЧаса(ДополнительныеПараметры.Начало);
	Конец  = КонецЧаса(ДополнительныеПараметры.Конец) + 1;
	
	Если Конец - Начало <= 3600 Тогда
		Возврат;
	КонецЕсли;
	
	Автомобиль = ДополнительныеПараметры.Автомобиль;
	
	Если РежимПодбора Тогда 
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Автомобиль", Автомобиль);
		ПараметрыДокумента.Вставить("ДатаНачала", Начало);
		ПараметрыДокумента.Вставить("ДатаОкончания", Конец);
		Закрыть(ПараметрыДокумента);
	Иначе
		// определим, можно ли создать заявку тут
		Для Каждого НайденныйЦвет Из Планировщик.ИнтервалыФона Цикл
			Если НайденныйЦвет.ЗначенияИзмерений.Получить("Автомобиль") = Автомобиль
				И НайденныйЦвет.Цвет = WebЦвета.СветлоСерый
				И ((Начало > НайденныйЦвет.Начало И Начало < НайденныйЦвет.Конец)
				ИЛИ (Конец > НайденныйЦвет.Начало И Конец < НайденныйЦвет.Конец)
				ИЛИ (Конец > НайденныйЦвет.Конец И Начало < НайденныйЦвет.Начало)) Тогда
					Сообщение = СтрШаблон(НСтр("ru = 'Автомобиль %1 недоступен%2%3'"),
						Автомобиль,
						?(НайденныйЦвет.Начало > Дата('00010102'),
							" с "  + Формат(НайденныйЦвет.Начало, НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''")), ""),
						?(НайденныйЦвет.Конец  < Дата('39991231'),
							" по " + Формат(НайденныйЦвет.Конец,  НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''")), ""));
					ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
					Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ДатаНачала",    Начало);
		ПараметрыДокумента.Вставить("ДатаОкончания", Конец);
		ПараметрыДокумента.Вставить("Автомобиль",    Автомобиль);
		
		Если НЕ Объект.ВидАренды.Пустая() Тогда
			ПараметрыДокумента.Вставить("ВидАренды", Объект.ВидАренды);
		КонецЕсли;
		
		Если РезультатВопроса = 1 Тогда
			
			ОткрытьФорму("Документ.ЗаявкаНаАренду.ФормаОбъекта", Новый Структура("Основание", ПараметрыДокумента),
				ЭтотОбъект,
				,
				,
				,
				Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаСозданияДокументов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);   
			
		ИначеЕсли РезультатВопроса = 2 Тогда	
			
			ОткрытьФорму("Документ.ТестДрайв.ФормаОбъекта", Новый Структура("Основание", ПараметрыДокумента),
				ЭтотОбъект
				,
				,
				,
				,
				Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаСозданияДокументов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_Отборы

&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАрендыПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантКомплектацииПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДвигателяПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКузоваПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКПППриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПриводаПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСалонаПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДокументов

// Обработчик события возникающего на клиенте при Возникает при двойном щелчке мыши
// (нажатии клавиши Enter) в ячейке таблицы.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                     - Значение выбранной строки.
//  Поле                 - ПолеФормы    - Активное поле (колонка).
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения стандартной (системной)
//                                        обработки события.
//
&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Автомобиль) Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Автомобиль);
		ОбработчикПерехвата = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаСозданияДокументов", ЭтотОбъект);
		ОткрытьФорму("Справочник.Автомобили.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикПерехвата);
	Иначе
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(1, НСтр("ru = 'Открыть документ для просмотра'"),,      БиблиотекаКартинок.ПредвПросмотр);
		СписокВыбора.Добавить(2, НСтр("ru = 'Открыть документ для редактирования'"),, БиблиотекаКартинок.Изменить);
		СписокВыбора.Добавить(3, НСтр("ru = 'Отобразить в планировщике'"),,           БиблиотекаКартинок.Событие);
		ПоказатьВыборИзСписка(
			Новый ОписаниеОповещения("Подключаемый_ВыборИзСписка", ЭтотОбъект, ТекущиеДанные),
			СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	
	// подключим обработчик ожидания
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоДокументовПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "День".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикДень(Команда)
	
	Если НЕ Элементы.ФормаДень.Пометка Тогда
		СнятьПометкиКнопок();
		Элементы.ФормаДень.Пометка = НЕ Элементы.ФормаДень.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаКалендарь;
	КонецЕсли;
	
	РежимОтображения = "День";
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	
	ОбновитьПланировщик(Объект.ДатаКалендаря, КонецДня(Объект.ДатаКалендаря));
	
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
	
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, dd.MM'";
	
	ОтобразитьУказанныйИнтервалВремени();
	
	СформироватьЗаголовокФормы();
	
	Элементы.ФормаДень.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ПланировщикДень()

// Обработчик события нажатия кнопки "Неделя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикНеделя(Команда)
	
	Если НЕ Элементы.ФормаНеделя.Пометка Тогда
		СнятьПометкиКнопок();
		Элементы.ФормаНеделя.Пометка = НЕ Элементы.ФормаНеделя.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаКалендарь;
	КонецЕсли;
	
	РежимОтображения = "Неделя";
	Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 8 * 24;
	
	ОбновитьПланировщик(НачалоНедели(Объект.ДатаКалендаря), КонецНедели(Объект.ДатаКалендаря));
	
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
	
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, dd.MM'";
	
	СформироватьЗаголовокФормы();
	
	Элементы.ФормаНеделя.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ПланировщикНеделя()

// Обработчик события нажатия кнопки "Месяц".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикМесяц(Команда)
	
	Если НЕ Элементы.ФормаМесяц.Пометка Тогда
		СнятьПометкиКнопок();
		Элементы.ФормаМесяц.Пометка = НЕ Элементы.ФормаМесяц.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаМесяца;
	КонецЕсли;
	ВыборМесяца.ДатаНачала    = НачалоМесяца(Объект.ДатаКалендаря);
	ВыборМесяца.ДатаОкончания = КонецМесяца(Объект.ДатаКалендаря);
	
	РежимОтображения = "Месяц";
	Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
	Планировщик.КратностьПериодическогоВарианта = День(КонецМесяца(Объект.ДатаКалендаря)) + 1;
	
	ОбновитьПланировщик(НачалоМесяца(Объект.ДатаКалендаря), КонецМесяца(Объект.ДатаКалендаря));
	
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
	
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
	
	СформироватьЗаголовокФормы();
	
	Элементы.ФормаМесяц.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ПланировщикМесяц()

// Обработчик события нажатия кнопки "Квартал".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикКвартал(Команда)
	
	Если НЕ Элементы.ФормаКвартал.Пометка Тогда
		СнятьПометкиКнопок();
		Элементы.ФормаКвартал.Пометка = НЕ Элементы.ФормаКвартал.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаМесяца;
	КонецЕсли;
	ВыборМесяца.ДатаНачала    = НачалоКвартала(Объект.ДатаКалендаря);
	ВыборМесяца.ДатаОкончания = КонецКвартала(Объект.ДатаКалендаря);
	
	РежимОтображения = "Квартал";
	Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
	Планировщик.КратностьПериодическогоВарианта = 92;
	
	ОбновитьПланировщик(НачалоКвартала(Объект.ДатаКалендаря), КонецКвартала(Объект.ДатаКалендаря));
	
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
	
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
	
	СформироватьЗаголовокФормы();
	
	Элементы.ФормаКвартал.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ПланировщикКвартал()

// Обработчик события нажатия кнопки "Год".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПланировщикГод(Команда)
	
	Если НЕ Элементы.ФормаГод.Пометка Тогда
		СнятьПометкиКнопок();
		Элементы.ФормаГод.Пометка = НЕ Элементы.ФормаГод.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаМесяца;
	КонецЕсли;
	ВыборМесяца.ДатаНачала    = НачалоГода(Объект.ДатаКалендаря);
	ВыборМесяца.ДатаОкончания = КонецГода(Объект.ДатаКалендаря);
	
	РежимОтображения = "Год";
	Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
	Планировщик.КратностьПериодическогоВарианта = 12;
	
	ОбновитьПланировщик(НачалоГода(Объект.ДатаКалендаря), КонецГода(Объект.ДатаКалендаря));
	
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
	
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
	
	СформироватьЗаголовокФормы();
	
	Элементы.ФормаГод.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ПланировщикГод()

// Обработчик события нажатия кнопки "Настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект",                              Объект);
	ПараметрыОткрытия.Вставить("АвтоОбновление",                      АвтоОбновление);
	ПараметрыОткрытия.Вставить("ВремяОтображенияПо",                  ВремяОтображенияПо);
	ПараметрыОткрытия.Вставить("ВремяОтображенияС",                   ВремяОтображенияС);
	ПараметрыОткрытия.Вставить("ЦветаСобытий",                        ЦветаСобытий);
	ПараметрыОткрытия.Вставить("ТолькоРабочиеЧасы",                   ТолькоРабочиеЧасы);
	ПараметрыОткрытия.Вставить("ШиринаСтрокиИзмерения",               ШиринаСтрокиИзмерения);
	ПараметрыОткрытия.Вставить("ШаблонПредставленияИнтервалаОбъекта", ШаблонПредставленияИнтервалаОбъекта);
	ПараметрыОткрытия.Вставить("ШаблонПредставленияАвтомобиля",       ШаблонПредставленияАвтомобиля);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаНастройки", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПланировщикАренды.Форма.ФормаНастроек",
		ПараметрыОткрытия,
		,
		,
		,
		,
		ОбработчикРезультата,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Настройки()

// Обработчик события нажатия кнопки "Список".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Список(Команда)
	
	Если НЕ Элементы.ФормаСписок.Пометка Тогда
		Элементы.ФормаСписок.Пометка = НЕ Элементы.ФормаСписок.Пометка;
		Элементы.СтраницыОтображение.ТекущаяСтраница = Элементы.СтраницаСписок;
		Элементы.ФормаГод.Пометка = Ложь;
		Элементы.ФормаКвартал.Пометка = Ложь;
		Элементы.ФормаМесяц.Пометка = Ложь;
		Элементы.ФормаНеделя.Пометка = Ложь;
		Элементы.ФормаДень.Пометка = Ложь;
		Элементы.СтраницыКалендарь.ТекущаяСтраница = Элементы.ГруппаМесяца;
		ВыборМесяца.ДатаНачала = НачалоМесяца(Объект.ДатаКалендаря);
		ВыборМесяца.ДатаОкончания = КонецМесяца(Объект.ДатаКалендаря);
		
		РежимОтображения = "Месяц";
		СформироватьЗаголовокФормы();
		
		Элементы.ФормаСписок.КнопкаПоУмолчанию  = Истина;
		Элементы.ГлобальныеКоманды.Видимость    = Истина;
		
	Иначе
		Элементы.ФормаСписок.Пометка = НЕ Элементы.ФормаСписок.Пометка;
		ПланировщикМесяц(Неопределено);
	КонецЕсли;
		
КонецПроцедуры // Список()

// Обработчик события нажатия кнопки "Обновить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ВыделитьФонИнтервала = Неопределено;
	
	ОбновитьДанныеПланировщика();
	
	// Развернем используемые уровни.
	Обновлено = Истина;
	
	// Производим подключение обработчика события выполняемого с задержкой.
	Если НЕ АвтоОбновление = 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
	КонецЕсли;
	
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоДокументов", Ложь);
	
КонецПроцедуры // Обновить()

// Обработчик события нажатия кнопки "Скрыть отборы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СкрытьОтборы(Команда)
	
	Элементы.СкрытьОтборы.Пометка            = НЕ Элементы.СкрытьОтборы.Пометка;
	Элементы.ГруппаФильтры.Видимость         = Элементы.СкрытьОтборы.Пометка;
	Элементы.ОсновныеДанныеЛево.Объединенная = НЕ Элементы.СкрытьОтборы.Пометка;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Сегодня".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПерейтиСегодня(Команда)
	
	Объект.ДатаКалендаря = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ОтобразитьПериод();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Период назад".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПерейтиНазад(Команда)

	Если РежимОтображения = "День" Тогда
		Объект.ДатаКалендаря = НачалоДня(Объект.ДатаКалендаря - 1);
	ИначеЕсли РежимОтображения = "Неделя" ИЛИ РежимОтображения = "" Тогда
		Объект.ДатаКалендаря = НачалоНедели(Объект.ДатаКалендаря - 1);
	ИначеЕсли РежимОтображения = "Месяц" Тогда
		Объект.ДатаКалендаря = ДобавитьМесяц(Объект.ДатаКалендаря, -1);
	ИначеЕсли РежимОтображения = "Квартал" Тогда
		Объект.ДатаКалендаря = ДобавитьМесяц(Объект.ДатаКалендаря, -3);
	ИначеЕсли РежимОтображения = "Год" Тогда
		Объект.ДатаКалендаря = ДобавитьМесяц(Объект.ДатаКалендаря, -12);
	КонецЕсли;
	
	ОтобразитьПериод();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Период вперед".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПерейтиВперед(Команда)

	Если РежимОтображения = "День" Тогда
		Объект.ДатаКалендаря = КонецДня(Объект.ДатаКалендаря) + 1;
	ИначеЕсли РежимОтображения = "Неделя" ИЛИ РежимОтображения = ""  Тогда
		Объект.ДатаКалендаря = КонецНедели(Объект.ДатаКалендаря) + 1;
	ИначеЕсли РежимОтображения = "Месяц" Тогда
		Объект.ДатаКалендаря = ДобавитьМесяц(Объект.ДатаКалендаря, 1);
	ИначеЕсли РежимОтображения = "Квартал" Тогда
		Объект.ДатаКалендаря = ДобавитьМесяц(Объект.ДатаКалендаря, 3);
	ИначеЕсли РежимОтображения = "Год" Тогда
		Объект.ДатаКалендаря = ДобавитьМесяц(Объект.ДатаКалендаря, 12);
	КонецЕсли;
	
	ОтобразитьПериод();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Подчиненные документы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодчиненныеДокументы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для выбранной строки невозможно выполнить данную процедуру'")
		);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ",     ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Документ", ТекущиеДанные.Документ);
	ОткрытьФорму("Обработка.ПодчиненныеДокументы.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Редактировать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Планировщик_Редактировать(Команда)
	
	// Откроем выбранный документ
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		Документ = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		Если ЗначениеЗаполнено(Документ) Тогда
			ОткрытьФорму(
				"Документ." + ИмяМетаданныхПоТипу(Документ) + ".ФормаОбъекта",
				Новый Структура("Ключ", Документ),
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаСозданияДокументов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Выдать автомобиль".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Планировщик_ВыдатьАвтомобиль(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		Документ   = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		Автомобиль = Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Автомобиль");
		ПараметрыДействия = Новый Структура;
		Планировщик_ВыдатьАвтомобильНаСервере(Автомобиль, Документ, ПараметрыДействия);
		Если ПараметрыДействия.Свойство("ПараметрыФормы") Тогда
			ОткрытьФорму(
				"Документ.ДефектовочнаяВедомость.ФормаОбъекта",
				ПараметрыДействия.ПараметрыФормы,
				ЭтотОбъект,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Принять автомобиль".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Планировщик_ПринятьАвтомобиль(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		Документ   = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		Автомобиль = Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Автомобиль");
		ПараметрыДействия = Новый Структура;
		Планировщик_ПринятьАвтомобильНаСервере(Автомобиль, Документ, ПараметрыДействия);
		Если ПараметрыДействия.Свойство("ПараметрыФормы") Тогда
			ОткрытьФорму(
				"Документ.ДефектовочнаяВедомость.ФормаОбъекта",
				ПараметрыДействия.ПараметрыФормы,
				ЭтотОбъект,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Создать договор на основании заявки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Планировщик_СоздатьДоговорНаОснованииЗаявки(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		ОткрытьФорму(
			"Документ.ДоговорАренды.ФормаОбъекта",
			Новый Структура("Основание", Элементы.Планировщик.ВыделенныеЭлементы[0].Значение),
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Создать изменение договора аренды".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Планировщик_СоздатьИзменениеДоговораАренды(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		ОткрытьФорму(
			"Документ.ИзменениеДоговораАренды.ФормаОбъекта",
			Новый Структура("Основание", Элементы.Планировщик.ВыделенныеЭлементы[0].Значение),
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Создать акт об оказании услуг".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Планировщик_СоздатьАктОбОказанииУслуг(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		ОткрытьФорму(
			"Документ.РеализацияТоваров.ФормаОбъекта",
			Новый Структура("Основание", Элементы.Планировщик.ВыделенныеЭлементы[0].Значение),
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Ввести документы аренды (помощник)".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Планировщик_ПомощникВводаДокументовАренды(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Элементы.Планировщик.ВыделенныеЭлементы[0].Значение);
		ПараметрыФормы.Вставить("Акт");
		ПараметрыФормы.Вставить("Счет");
		ПараметрыФормы.Вставить("СчетДепозита");
		
		ОткрытьФорму(
			"Обработка.ПомощникВводаДокументовАренды.Форма",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаляет установленные интервалы фона для временных интервалов, не входящих в отображаемый месяц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьРаскраскуФона(Цвет, Планировщик)
	
	УдаляемыйИнтервал = Планировщик.ИнтервалыФона.Найти(Цвет);
	Пока НЕ УдаляемыйИнтервал = Неопределено Цикл
		Планировщик.ИнтервалыФона.Удалить(Планировщик.ИнтервалыФона.Индекс(УдаляемыйИнтервал));
		УдаляемыйИнтервал = Планировщик.ИнтервалыФона.Найти(Цвет);
	КонецЦикла;
	
КонецПроцедуры // УдалитьРаскраскуДнейНеВходящихВМесяц()

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	
	ОткрытьФорму(
		"Документ." + СтрЗаменить(Команда.Имя, "ВвестиНаОсновании", "") + ".ФормаОбъекта",
		Новый Структура("Основание", Элементы.ДеревоДокументов.ТекущиеДанные.Документ),
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Подключаемый_ОбработкаКомандыФормы()

&НаКлиенте
Процедура Подключаемый_ВыборИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = 1 ИЛИ ВыбранныйЭлемент.Значение = 2 Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ДополнительныеПараметры.Документ);
		Если ВыбранныйЭлемент.Значение = 1 Тогда
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Документ) Тогда
			ОткрытьФорму(
				"Документ." + ИмяМетаданныхПоТипу(ДополнительныеПараметры.Документ) + ".ФормаОбъекта",
				ПараметрыОткрытия,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаСозданияДокументов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	ИначеЕсли ВыбранныйЭлемент.Значение = 3 Тогда
		Объект.ДатаКалендаря = ДополнительныеПараметры.ДатаНачала;
		ВыделитьФонИнтервала = ДополнительныеПараметры.Документ;
		
		ДатаОкончания = ДополнительныеПараметры.ДатаОкончания;
		ДатаНачала    = ДополнительныеПараметры.ДатаНачала;
		
		Если НачалоДня(ДатаОкончания) = НачалоДня(ДатаНачала) Тогда
			ПланировщикДень(Неопределено);
		ИначеЕсли НачалоНедели(ДатаОкончания) = НачалоНедели(ДатаНачала) Тогда
			ПланировщикНеделя(Неопределено);
		ИначеЕсли НачалоМесяца(ДатаОкончания) = НачалоМесяца(ДатаНачала) Тогда
			ПланировщикМесяц(Неопределено);
		ИначеЕсли НачалоКвартала(ДатаОкончания) = НачалоКвартала(ДатаНачала) Тогда
			ПланировщикКвартал(Неопределено);
		Иначе
			ПланировщикГод(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДеревоСобытийВыбор()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаНастройки(РезультатОповещения, Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
		
		ВремяОтображенияС                   = РезультатОповещения.ВремяОтображенияС;
		ВремяОтображенияПо                  = РезультатОповещения.ВремяОтображенияПо;
		ТолькоРабочиеЧасы                   = РезультатОповещения.ТолькоРабочиеЧасы;
		АвтоОбновление                      = РезультатОповещения.АвтоОбновление;
		ШиринаСтрокиИзмерения               = РезультатОповещения.ШиринаСтрокиИзмерения;
		ШаблонПредставленияИнтервалаОбъекта = РезультатОповещения.ШаблонПредставленияИнтервалаОбъекта;
		ШаблонПредставленияАвтомобиля       = РезультатОповещения.ШаблонПредставленияАвтомобиля;
		
		Если РежимОтображения = "День" Тогда
			ОтобразитьУказанныйИнтервалВремени();
		КонецЕсли;
		
		ОбработкаРезультатаНастройкиНаСервере();
		Элементы.Календарь.Обновить();
		
		Если НЕ АвтоОбновление = 0 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаНастройки()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаСозданияДокументов(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьДанныеПланировщика();
	
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоДокументов", Ложь);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаСозданияДокументов()

// Обработчик изменяет отображения дерева.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_АвтоОбновление()
	
	Если Обновлено Тогда
		ОтключитьОбработчикОжидания("Подключаемый_АвтоОбновление");
		Обновлено = Ложь;
	КонецЕсли;
	
	// Обновим события
	Обновить(Неопределено);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Автообновление'"),,
		СтрШаблон(НСтр("ru = 'Выполнено в %1'"), Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=ЧЧ:мм")),
		БиблиотекаКартинок.Успешно32,
		СтатусОповещенияПользователя.Информация);
	
	Если НЕ АвтоОбновление = 0 Тогда
		// Производим подключение обработчика события выполняемого с задержкой.
		ПодключитьОбработчикОжидания("Подключаемый_АвтоОбновление", АвтоОбновление, Истина);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_АвтоОбновление()

&НаКлиенте
Процедура Подключаемый_ДеревоДокументовПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанные.Документ;
	Если ТекущийДокумент = ТекущиеДанные Тогда
		Возврат;
	КонецЕсли;
	ТекущийДокумент = ТекущиеДанные;
	ВводНаОсновании = Элементы.ГлобальныеКоманды.ПодчиненныеЭлементы.ФормаСоздатьНаОсновании;
	Если ЗначениеЗаполнено(ТекущиеДанные) Тогда
		СформироватьПодменюВводНаОсновании(ТекущиеДанные);
		Элементы.ПодчиненныеДокументы.Видимость = Истина;
		ВводНаОсновании.Видимость = Истина;
	Иначе
		Элементы.ПодчиненныеДокументы.Видимость = Ложь;
		ВводНаОсновании.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииКлиент

// Формирует заголовок формы, в зависимости от режима отображения.
//
&НаКлиенте
Процедура СформироватьЗаголовокФормы()
	
	ПредставлениеПериода = "";
	
	Если РежимОтображения = "Месяц" Тогда
		ПредставлениеПериода = Формат(Объект.ДатаКалендаря, НСтр("ru = 'ДФ=''ММММ гггг'''"));
	ИначеЕсли РежимОтображения = "Квартал" Тогда
		ПредставлениеПериода = Формат(Объект.ДатаКалендаря, НСтр("ru = 'ДФ=''к ""квартал"" гггг'''"));
	ИначеЕсли РежимОтображения = "Год" Тогда
		ПредставлениеПериода = Формат(Объект.ДатаКалендаря, НСтр("ru = 'ДФ=''гггг'''"));
	ИначеЕсли РежимОтображения = "Неделя" Тогда
		ПредставлениеПериода = Формат(НачалоНедели(Объект.ДатаКалендаря), НСтр("ru = 'ДФ=''дд ММММ гггг'''"))
			+ НСтр("ru = ' - '") + Формат(КонецНедели(Объект.ДатаКалендаря), НСтр("ru = 'ДФ=''дд ММММ гггг'''"));
	ИначеЕсли РежимОтображения = "День" Тогда
		ПредставлениеПериода = Формат(Объект.ДатаКалендаря, НСтр("ru = 'ДФ=''ddd, dd MMMM yyyy'''"));
	КонецЕсли;
	
	РезультатПроверки = ПроверитьВозможностьИспользоватьПланировщик(Объект.Документ);
	
	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		
		Если РезультатПроверки = 1 Тогда
			ЭтотОбъект.Заголовок = НСтр("ru = 'Планировщик аренды'");	
		Иначе
			ЭтотОбъект.Заголовок = НСтр("ru = 'Планировщик тест-драйва'");	
		КонецЕсли;
		
	Иначе
		ЭтотОбъект.Заголовок = НСтр("ru = 'Планировщик аренды и тест-драйва'");		
	КонецЕсли;	
	
	ЭтотОбъект.Заголовок = СтрШаблон(НСтр("ru = '%1 [%2]'"), ЭтотОбъект.Заголовок, ПредставлениеПериода);
	
КонецПроцедуры // СформироватьЗаголовокФормы()

&НаКлиенте
Процедура ОтобразитьПериод()
	
	Если РежимОтображения = "День" Тогда
		ПланировщикДень(Неопределено);
	ИначеЕсли РежимОтображения = "Неделя" ИЛИ РежимОтображения = ""  Тогда
		ПланировщикНеделя(Неопределено);
	ИначеЕсли РежимОтображения = "Месяц" Тогда
		ПланировщикМесяц(Неопределено);
	ИначеЕсли РежимОтображения = "Квартал" Тогда
		ПланировщикКвартал(Неопределено);
	ИначеЕсли РежимОтображения = "Год" Тогда
		ПланировщикГод(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиКнопок()
	
	Элементы.ФормаДень.   Пометка = Ложь;
	Элементы.ФормаНеделя. Пометка = Ложь;
	Элементы.ФормаМесяц.  Пометка = Ложь;
	Элементы.ФормаКвартал.Пометка = Ложь;
	Элементы.ФормаГод.    Пометка = Ложь;
	Элементы.ФормаСписок. Пометка = Ложь;
	
КонецПроцедуры

// Настройка шкалы времени планировщика в зависимости от режима
//
&НаКлиенте
Процедура ПодготовитьШкалуВремениПланировщика()
	
	ОбщегоНазначенияАвтосалонКлиентСервер.СброситьНастройкиШкал(Планировщик);
	
	ЛинияОсновная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияДополнительная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
	
	ВыводитьДополнительнуюШкалу = Истина;
	
	Если РежимОтображения = "День" Тогда // День
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Планировщик, ТипЕдиницыШкалыВремени.Час,, "ДФ=HH:mm", ЛинияДополнительная, Ложь);
		Если ВыводитьДополнительнуюШкалу Тогда
			ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
				Планировщик, ТипЕдиницыШкалыВремени.Минута, 30, "ДФ=mm", ЛинияДополнительная, Истина);
		КонецЕсли;
		Планировщик.АвтоМинимальнаяВысотаСтроки = Ложь;
		Планировщик.МинимальнаяШиринаКолонки    = 2;
		
	ИначеЕсли РежимОтображения = "Неделя" ИЛИ РежимОтображения = "" Тогда // Неделя
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Планировщик, ТипЕдиницыШкалыВремени.День,, "ДФ='dd.MM dddd'", ЛинияОсновная, Ложь);
		Если ВыводитьДополнительнуюШкалу Тогда
			ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
				Планировщик, ТипЕдиницыШкалыВремени.Час, 6, "ДФ=HH", ЛинияДополнительная, Истина);
		КонецЕсли;
		Планировщик.АвтоМинимальнаяВысотаСтроки = Ложь;
		Планировщик.МинимальнаяШиринаКолонки    = 2;
		
	ИначеЕсли РежимОтображения = "Месяц" Тогда // Месяц
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Планировщик, ТипЕдиницыШкалыВремени.День,, "ДФ='dd ddd'", ЛинияДополнительная, Ложь);
		Планировщик.АвтоМинимальнаяВысотаСтроки = Ложь;
		Планировщик.МинимальнаяШиринаКолонки    = 3;
		
	ИначеЕсли РежимОтображения = "Квартал" Тогда // Квартал
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Планировщик, ТипЕдиницыШкалыВремени.Месяц,, "ДФ=ММММ", ЛинияДополнительная, Ложь);
		Если ВыводитьДополнительнуюШкалу Тогда
			ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
				Планировщик, ТипЕдиницыШкалыВремени.День,, "ДФ='dd ddd'", ЛинияДополнительная, Истина);
		КонецЕсли;
		Планировщик.АвтоМинимальнаяВысотаСтроки = Ложь;
		Планировщик.МинимальнаяШиринаКолонки    = 3;
		
	ИначеЕсли РежимОтображения = "Год" Тогда // Год
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
			Планировщик, ТипЕдиницыШкалыВремени.Квартал,, "ДФ='к ""квартал""'", ЛинияОсновная, Ложь);
		Если ВыводитьДополнительнуюШкалу Тогда
			ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(
				Планировщик, ТипЕдиницыШкалыВремени.Месяц,, "ДФ=ММММ", ЛинияДополнительная, Истина);
		КонецЕсли;
		Планировщик.АвтоМинимальнаяВысотаСтроки = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияАвтосалонКлиентСервер.СтартоваяНастройкаПланировщика(
		Планировщик,
		ОтображениеВремениЭлементовПланировщика.НеОтображать);
	
	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	
КонецПроцедуры

// Ограничивает диапазон времени шкалы планировщика.
//
&НаКлиенте
Процедура ОтобразитьУказанныйИнтервалВремени()
	
	Если НЕ ВремяОтображенияС = '00010101' И НЕ ВремяОтображенияПо = 0 Тогда
		Планировщик.ОтступСНачалаПереносаШкалыВремени = ВремяОтображенияС;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - ВремяОтображенияПо;
	Иначе
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьУказанныйИнтервалВремени()

// Процедура производить обновление периода отображения для планировщика.
//
// Параметры:
//  ДатаНачала    - Дата - Дата начала для отображения.
//  ДатаОкончания - Дата - Дата окончания для отображения.
//
&НаКлиенте
Процедура ОбновитьПланировщик(ДатаНачала, ДатаОкончания)
	
	Объект.ДатаНачала         = ДатаНачала;
	Объект.ДатаОкончания      = ДатаОкончания;
	
	ВыборМесяца.ДатаНачала    = ДатаНачала;
	ВыборМесяца.ДатаОкончания = ДатаОкончания;
	
	ПодготовитьШкалуВремениПланировщика();
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ДатаНачала, ДатаОкончания);
	
	ОбновитьДанныеПланировщика();
	
	Элементы.ГлобальныеКоманды.ПодчиненныеЭлементы.ФормаСоздатьНаОсновании.Видимость = Ложь;
	Элементы.ПодчиненныеДокументы.Видимость = Ложь;
	
КонецПроцедуры // ОбновитьПланировщик()

&НаКлиенте
Процедура НастроитьКонтекстноеМенюПланировщика()
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 1 Тогда
		Документ = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаАренду") Тогда
			Элементы.ПланировщикКонтекстноеМенюПланировщик_Редактировать.Видимость                   = Истина;
			Элементы.ПланировщикКонтекстноеМенюГруппаВыдатьПринять.Видимость                         = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьДоговорНаОснованииЗаявки.Видимость = Истина;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьИзменениеДоговораАренды.Видимость  = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьАктОбОказанииУслуг.Видимость       = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_ПомощникВводаДокументовАренды.Видимость   = Ложь;
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ДоговорАренды") Тогда
			Элементы.ПланировщикКонтекстноеМенюПланировщик_Редактировать.Видимость                   = Истина;
			Элементы.ПланировщикКонтекстноеМенюГруппаВыдатьПринять.Видимость                         = Истина;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьДоговорНаОснованииЗаявки.Видимость = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьИзменениеДоговораАренды.Видимость  = Истина;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьАктОбОказанииУслуг.Видимость       = Истина;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_ПомощникВводаДокументовАренды.Видимость   = Истина;
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			Элементы.ПланировщикКонтекстноеМенюПланировщик_Редактировать.Видимость                   = Истина;
			Элементы.ПланировщикКонтекстноеМенюГруппаВыдатьПринять.Видимость                         = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьДоговорНаОснованииЗаявки.Видимость = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьИзменениеДоговораАренды.Видимость  = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьАктОбОказанииУслуг.Видимость       = Ложь;
			Элементы.ПланировщикКонтекстноеМенюПланировщик_ПомощникВводаДокументовАренды.Видимость   = Ложь;
		КонецЕсли;
	Иначе
		// скрыть все кнопки в контекстном меню
		Элементы.ПланировщикКонтекстноеМенюПланировщик_Редактировать.Видимость                   = Ложь;
		Элементы.ПланировщикКонтекстноеМенюГруппаВыдатьПринять.Видимость                         = Ложь;
		Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьДоговорНаОснованииЗаявки.Видимость = Ложь;
		Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьИзменениеДоговораАренды.Видимость  = Ложь;
		Элементы.ПланировщикКонтекстноеМенюПланировщик_СоздатьАктОбОказанииУслуг.Видимость       = Ложь;
		Элементы.ПланировщикКонтекстноеМенюПланировщик_ПомощникВводаДокументовАренды.Видимость   = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСервер

&НаСервере
Процедура ЗаполнитьПараметрыПоУмолчанию()
	
	Если ШиринаСтрокиИзмерения = 0 Тогда
		ШиринаСтрокиИзмерения = 30;
	КонецЕсли;
	
	Если ПустаяСтрока(ШаблонПредставленияИнтервалаОбъекта) Тогда
		ШаблонПредставленияИнтервалаОбъекта = 
			НСтр("ru = '{{.Документ.ХозОперация}} {{.Документ.Номер}} от {{.Документ.Дата}}
			|Контрагент: {{.Документ.Контрагент}}
			|Телефон: {{.Документ.ПредставлениеТелефона}}
			|Заказчик: {{.Документ.Заказчик}}
			|Вид: {{.Документ.ВидРемонтаИлиАренды}}'");
	КонецЕсли;
	
	Если ПустаяСтрока(ШаблонПредставленияАвтомобиля) Тогда
		ШаблонПредставленияАвтомобиля = 
			НСтр("ru = 'Модель: {{.Автомобиль.Модель}}
			|Г/н: {{.ГосНомер}}
			|Цвет: {{.Автомобиль.Цвет}}'");
	КонецЕсли;
	
	Если ВремяОтображенияПо = 0 Тогда
		ВремяОтображенияПо = 24;
	КонецЕсли;
	
	ДобавитьЦветаСобытий();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЦветаСобытий()
	
	ЦветаСобытий.Очистить();
	
	СтрокаЦвета = ЦветаСобытий.Добавить();
	СтрокаЦвета.Цвет = WebЦвета.Оранжевый;
	СтрокаЦвета.ВидДокумента = "ЗаявкаНаРемонт";
	СтрокаЦвета.Описание = НСтр("ru='Заявка на ремонт'");
	
	СтрокаЦвета = ЦветаСобытий.Добавить();
	СтрокаЦвета.Цвет = WebЦвета.Красный;
	СтрокаЦвета.ВидДокумента = "ЗаказНаряд";
	СтрокаЦвета.Описание = НСтр("ru='Заказ-наряд'");
	
	СтрокаЦвета = ЦветаСобытий.Добавить();
	СтрокаЦвета.Цвет = WebЦвета.СветлоЗеленый;
	СтрокаЦвета.ВидДокумента = "ЗаявкаНаАренду";
	СтрокаЦвета.Описание = НСтр("ru='Заявка на аренду'");
	
	СтрокаЦвета = ЦветаСобытий.Добавить();
	СтрокаЦвета.Цвет = WebЦвета.ТемноЗеленый;
	СтрокаЦвета.ВидДокумента = "ДоговорАренды";
	СтрокаЦвета.Описание = НСтр("ru='Договор аренды'");
	
	СтрокаЦвета = ЦветаСобытий.Добавить();
	СтрокаЦвета.Цвет = WebЦвета.Желтый;
	СтрокаЦвета.ВидДокумента = "ТестДрайв";
	СтрокаЦвета.Описание = НСтр("ru='Тест-драйв'");
	
КонецПроцедуры

&НаСервере
Процедура ОбрезатьПоШиринеИзмерения()
	
	Если ШиринаСтрокиИзмерения < 6 Тогда
		Возврат;
	КонецЕсли;
	
	ИзмерениеАвтомобиль = Планировщик.Измерения.Найти("Автомобиль");
	
	Для Каждого Измерение Из ИзмерениеАвтомобиль.Элементы Цикл
		Измерение.Текст = АрендаАвтомобилей.ВставитьПереносСтрокиПоЗаданнойШирине(Измерение.Текст, ШиринаСтрокиИзмерения);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет элементы планировщика в зависимости от выбранного интервала времени и установленных фильтров.
//
&НаСервере
Процедура ОбновитьДанныеПланировщика(НужноОбновить = Истина)
	
	Если НужноОбновить Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВидАренды",                       Объект.ВидАренды);
		ДопПараметры.Вставить("Марка",                           Объект.Марка);
		ДопПараметры.Вставить("Модель",                          Объект.Модель);
		ДопПараметры.Вставить("ВариантКомплектации",             Объект.ВариантКомплектации);
		ДопПараметры.Вставить("ТипДвигателя",                    Объект.ТипДвигателя);
		ДопПараметры.Вставить("ТипКузова",                       Объект.ТипКузова);
		ДопПараметры.Вставить("ТипКПП",                          Объект.ТипКПП);
		ДопПараметры.Вставить("ТипПривода",                      Объект.ТипПривода);
		ДопПараметры.Вставить("ТипСалона",                       Объект.ТипСалона);
		ДопПараметры.Вставить("Цвет",                            Объект.Цвет);
		ДопПараметры.Вставить("Документ",                        Объект.Документ);
		ДопПараметры.Вставить("ЕстьПодсистемаCRM",               ЕстьПодсистемаCRM);
		ДопПараметры.Вставить("ЕстьПодсистемаАрендаАвтомобилей", ЕстьПодсистемаАрендаАвтомобилей);
		
		Объект.Автомобили.Загрузить(АрендаАвтомобилей.ТаблицаАвтомобилейПериода(
										Объект.ПодразделениеКомпании,
										Объект.ДатаНачала,
										Объект.ДатаОкончания,
										ДопПараметры));
		
		ИзмерениеАвтомобиль = Планировщик.Измерения.Найти("Автомобиль");
		Если ИзмерениеАвтомобиль = Неопределено Тогда
			ИзмерениеАвтомобиль = ОбщегоНазначенияАвтосалонКлиентСервер.
									ДобавитьИзмерениеПланировщика(Планировщик.Измерения, "Автомобиль");
		Иначе
			ИзмерениеАвтомобиль.Элементы.Очистить();
		КонецЕсли;
		
		МассивАвтомобилей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			Объект.Автомобили.Выгрузить().ВыгрузитьКолонку("Автомобиль"));
		
		Если ИсключитьАвтомобили.Количество() Тогда
			МассивАвтомобилей = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				МассивАвтомобилей,
				ИсключитьАвтомобили.Выгрузить().ВыгрузитьКолонку("Автомобиль"));
		КонецЕсли;
		
		Если ПоказатьАвтомобили.Количество() Тогда
			Для Счет = -(МассивАвтомобилей.Количество() - 1) По 0 Цикл
				Если НЕ ПоказатьАвтомобили.НайтиСтроки(Новый Структура("Автомобиль", МассивАвтомобилей[ -Счет])).Количество() Тогда
					МассивАвтомобилей.Удалить(-Счет);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Выведем список автомобилей.
		Выборка = ПолучитьИнформациюПоАвтомобилям();
		Для Каждого Автомобиль Из МассивАвтомобилей Цикл
			НовоеИзмерение = ИзмерениеАвтомобиль.Элементы.Добавить(Автомобиль);
			НовоеИзмерение.Текст = ЗаполнитьШаблон(
				РазобратьДанныеАвтомобилейДляПредставления(Автомобиль, Выборка),
				ШаблонПредставленияАвтомобиля);
		КонецЦикла;
		
		Планировщик.Элементы.Очистить();
		
		ИнтервалыАренды = АрендаАвтомобилей.ТаблицаИнтерваловАренды(МассивАвтомобилей,
			Объект.ДатаНачала,
			Объект.ДатаОкончания);
		ОбъединитьИнтервалыАренды(ИнтервалыАренды);
		
		ИнформацияПоДокументам = ПолучитьИнформациюПоДокументам(ИнтервалыАренды.ВыгрузитьКолонку("Документ"));
		
		Для Каждого ИнтервалАренды Из ИнтервалыАренды Цикл
			
			Элемент = Планировщик.Элементы.Добавить(ИнтервалАренды.ДатаНачала, ИнтервалАренды.ДатаОкончания);
			Элемент.Значение = ИнтервалАренды.Документ;
			Соответствие = Новый Соответствие;
			Соответствие.Вставить("Автомобиль", ИнтервалАренды.Автомобиль);
			Элемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(Соответствие);
			Элемент.Текст = ЗаполнитьШаблон(
				РазобратьДанныеДокументовДляПредставления(ИнтервалАренды.Документ, ИнформацияПоДокументам),
				ШаблонПредставленияИнтервалаОбъекта);
			
			// Добавим картинку
			Если ИнтервалАренды.ВидДокумента = "ЗаявкаНаРемонт" ИЛИ ИнтервалАренды.ВидДокумента = "ЗаказНаряд" Тогда
				Элемент.Картинка = БиблиотекаКартинок.Настройка;
			Иначе
				Элемент.Картинка = БиблиотекаКартинок.АвтомобильВыбор;
			КонецЕсли;
			
			// Раскрасим события по цвету
			Если Элемент.Значение = ВыделитьФонИнтервала Тогда
				Элемент.Шрифт     = Новый Шрифт(, , Истина);
				Элемент.ЦветРамки = WebЦвета.Синий;
				Элемент.ЦветФона  = WebЦвета.НасыщенноНебесноГолубой;
			Иначе
				СтрокиЦвета = ЦветаСобытий.НайтиСтроки(Новый Структура("ВидДокумента", ИнтервалАренды.ВидДокумента));
				Если СтрокиЦвета.Количество() Тогда
					Элемент.ЦветФона = СтрокиЦвета[0].Цвет;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ИнтервалыАренды.Индексы.Добавить("Автомобиль");
		
		Для Каждого Автомобиль Из МассивАвтомобилей Цикл
			
			СтрокаАвтомобилей = ДеревоДокументов.ПолучитьЭлементы().Добавить();
			СтрокаАвтомобилей.Автомобиль = Автомобиль;
			
			Для Каждого ДанныеДокумента Из ИнтервалыАренды.НайтиСтроки(Новый Структура("Автомобиль", Автомобиль)) Цикл
				
				СтрокаДокумента = СтрокаАвтомобилей.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ДанныеДокумента,, "Автомобиль");
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполним интервалы отсутствия автомобиля
	ЗаполнитьИнтервалыОтсутствияАвтомобилей(МассивАвтомобилей);
	
	Если Объект.АрендаДатаНачала <> '00010101' Тогда
		ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(Объект.АрендаДатаНачала, Объект.АрендаДатаОкончания);
		ИнтервалФона.Цвет = WebЦвета.АкварельноСиний;
	КонецЕсли;
	
	ОбрезатьПоШиринеИзмерения();
	
	УдалитьРаскраскуФона(WebЦвета.СветлоСерый, Планировщик);
	Измерение = Планировщик.Измерения.Найти("Автомобиль");
	ЭлементИзмерение = Измерение.Элементы;
	Для Каждого СтрокаОтсутствий Из ИнтервалыОтсутствия Цикл
		Элемент = ЭлементИзмерение.Найти(СтрокаОтсутствий.Автомобиль);
		Если Элемент <> Неопределено Тогда
			ЗначенияИзмерений = Новый Соответствие;
			ЗначенияИзмерений.Вставить(Измерение.Значение, Элемент.Значение);
			Интервал = Планировщик.ИнтервалыФона.Добавить(СтрокаОтсутствий.НачалоОтсутствия,
				СтрокаОтсутствий.ОкончаниеОтсутствия);
			Интервал.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначенияИзмерений);
			Интервал.Цвет = WebЦвета.СветлоСерый;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбъединитьИнтервалыАренды(ИнтервалыАренды)
	
	Если НЕ ИнтервалыАренды.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалыАренды.Сортировать("ДатаНачала ВОЗР");
	Счет = 0;
	Пока Счет < ИнтервалыАренды.Количество() Цикл
		Строка = ИнтервалыАренды[Счет];
		Если Строка.ВидДокумента = "ДоговорАренды" Тогда
			Строки = ИнтервалыАренды.НайтиСтроки(Новый Структура("Документ", Строка.Документ));
			Для Каждого НайденнаяСтрока Из Строки Цикл
				Если НайденнаяСтрока.ДатаНачала = Строка.ДатаНачала Тогда
					Продолжить;
				КонецЕсли;
				Если (НайденнаяСтрока.ДатаНачала = НачалоМесяца(НайденнаяСтрока.ДатаНачала)
					И Строка.ДатаОкончания + 1 = НайденнаяСтрока.ДатаНачала)
					ИЛИ НайденнаяСтрока.ДатаНачала = Строка.ДатаОкончания Тогда
						Строка.ДатаОкончания = НайденнаяСтрока.ДатаОкончания;
						ИнтервалыАренды.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Счет = Счет + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюПоАвтомобилям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Автомобили.Ссылка КАК Ссылка,
		|	Автомобили.Наименование КАК Наименование,
		|	Автомобили.VIN КАК VIN,
		|	Автомобили.ГодВыпуска КАК ГодВыпуска,
		|	Автомобили.Модель КАК Модель,
		|	Автомобили.ВариантКомплектации КАК ВариантКомплектации,
		|	Автомобили.Цвет КАК Цвет,
		|	Автомобили.ТипКузова КАК ТипКузова,
		|	Автомобили.ТипДвигателя КАК ТипДвигателя,
		|	Автомобили.ТипКПП КАК ТипКПП,
		|	Автомобили.ТипСалона КАК ТипСалона,
		|	Автомобили.НомерГаражный КАК НомерГаражный,
		|	Автомобили.ДатаНачалаГарантии КАК ДатаНачалаГарантии,
		|	Автомобили.ДатаОкончанияГарантии КАК ДатаОкончанияГарантии,
		|	Автомобили.ОригинальныйVIN КАК ОригинальныйVIN,
		|	Автомобили.ДатаРегистрации КАК ДатаРегистрации,
		|	Автомобили.Марка КАК Марка,
		|	Автомобили.МодельДвигателя КАК МодельДвигателя,
		|	ЕСТЬNULL(АвтомобилиСрезПоследних_ГосНомер.Значение, """") КАК ГосНомер,
		|	ЕСТЬNULL(АвтомобилиСрезПоследних_Пробег.Значение, """") КАК Пробег
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(&Период, ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)) КАК АвтомобилиСрезПоследних_ГосНомер
		|		ПО Автомобили.Ссылка = АвтомобилиСрезПоследних_ГосНомер.Автомобиль
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(&Период, ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Пробег)) КАК АвтомобилиСрезПоследних_Пробег
		|		ПО Автомобили.Ссылка = АвтомобилиСрезПоследних_Пробег.Автомобиль
		|ГДЕ
		|	Автомобили.Ссылка В(&Ссылка)";
	Запрос.УстановитьПараметр("Ссылка", Объект.Автомобили.Выгрузить().ВыгрузитьКолонку("Автомобиль"));
	Запрос.УстановитьПараметр("Период", Объект.ДатаКалендаря);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюПоДокументам(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Ссылка КАК Ссылка,
		|	ЗаявкаНаРемонт.Номер КАК Номер,
		|	ЗаявкаНаРемонт.Дата КАК Дата,
		|	ЗаявкаНаРемонт.ХозОперация КАК ХозОперация,
		|	ЗаявкаНаРемонт.ДатаНачала КАК ДатаНачала,
		|	ЗаявкаНаРемонт.ДатаОкончания КАК ДатаОкончания,
		|	ЗаявкаНаРемонт.Комментарий КАК Комментарий,
		|	ЗаявкаНаРемонт.Заказчик КАК Заказчик,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаРемонт.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЗаявкаНаРемонт.Заказчик
		|		ИНАЧЕ ЗаявкаНаРемонт.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаРемонт.ПредставлениеТелефона = """"
		|			ТОГДА """"
		|		ИНАЧЕ ЗаявкаНаРемонт.ПредставлениеТелефона
		|	КОНЕЦ КАК ПредставлениеТелефона,
		|	ЗаявкаНаРемонт.ВидРемонта КАК ВидРемонтаИлиАренды
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаряд.Ссылка,
		|	ЗаказНаряд.Номер,
		|	ЗаказНаряд.Дата,
		|	ЗаказНаряд.ХозОперация,
		|	ЗаказНаряд.ДатаНачала,
		|	ЗаказНаряд.ДатаОкончания,
		|	ЗаказНаряд.Комментарий,
		|	ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик,
		|	ВЫБОР
		|		КОГДА ЗаказНаряд.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик
		|		ИНАЧЕ ЗаказНаряд.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЗаказНаряд.СводныйРемонтныйЗаказ.ПредставлениеТелефона = """"
		|			ТОГДА """"
		|		ИНАЧЕ ЗаказНаряд.СводныйРемонтныйЗаказ.ПредставлениеТелефона
		|	КОНЕЦ,
		|	ЗаказНаряд.ВидРемонта
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаАренду.Ссылка,
		|	ЗаявкаНаАренду.Номер,
		|	ЗаявкаНаАренду.Дата,
		|	ЗаявкаНаАренду.ХозОперация,
		|	ЗаявкаНаАренду.ДатаНачала,
		|	ЗаявкаНаАренду.ДатаОкончания,
		|	ЗаявкаНаАренду.Комментарий,
		|	ЗаявкаНаАренду.Заказчик,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаАренду.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЗаявкаНаАренду.Заказчик
		|		ИНАЧЕ ЗаявкаНаАренду.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаАренду.ПредставлениеТелефона = """"
		|			ТОГДА """"
		|		ИНАЧЕ ЗаявкаНаАренду.ПредставлениеТелефона
		|	КОНЕЦ,
		|	ЗаявкаНаАренду.ВидАренды
		|ИЗ
		|	Документ.ЗаявкаНаАренду КАК ЗаявкаНаАренду
		|ГДЕ
		|	ЗаявкаНаАренду.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорАренды.Ссылка,
		|	ДоговорАренды.Номер,
		|	ДоговорАренды.Дата,
		|	ДоговорАренды.ХозОперация,
		|	ДоговорАренды.ДатаНачала,
		|	ДоговорАренды.ДатаОкончания,
		|	ДоговорАренды.Комментарий,
		|	ДоговорАренды.Заказчик,
		|	ВЫБОР
		|		КОГДА ДоговорАренды.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДоговорАренды.Заказчик
		|		ИНАЧЕ ДоговорАренды.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДоговорАренды.ДокументОснование.ПредставлениеТелефона = """"
		|			ТОГДА """"
		|		ИНАЧЕ ДоговорАренды.ДокументОснование.ПредставлениеТелефона
		|	КОНЕЦ,
		|	ДоговорАренды.ВидАренды
		|ИЗ
		|	Документ.ДоговорАренды КАК ДоговорАренды
		|ГДЕ
		|	ДоговорАренды.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТестДрайв.Ссылка,
		|	ТестДрайв.Номер,
		|	ТестДрайв.Дата,
		|	ТестДрайв.ХозОперация,
		|	ТестДрайв.ДатаНачала,
		|	ТестДрайв.ДатаОкончания,
		|	ТестДрайв.Комментарий,
		|	ТестДрайв.Контрагент,
		|	ТестДрайв.Контрагент,
		|	ВЫБОР
		|		КОГДА ТестДрайв.ДокументОснование.ПредставлениеТелефона = """"
		|			ТОГДА """"
		|		ИНАЧЕ ТестДрайв.ДокументОснование.ПредставлениеТелефона
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Справочник.ВидыАренды.ПустаяСсылка)
		|ИЗ
		|	Документ.ТестДрайв КАК ТестДрайв
		|ГДЕ
		|	ТестДрайв.Ссылка В(&Ссылка)"; 
	
	Запрос.УстановитьПараметр("Ссылка", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Функция РазобратьДанныеДокументовДляПредставления(Документ, Знач Выборка)
	
	Выборка.Сбросить();
	Выборка.НайтиСледующий(Новый Структура("Ссылка", Документ));
	
	ДанныеДокумента = Новый Соответствие;
	
	ДанныеДокумента.Вставить("Документ.Номер",                 Выборка.Номер);
	ДанныеДокумента.Вставить("Документ.ХозОперация",           Выборка.ХозОперация);
	ДанныеДокумента.Вставить("Документ.Дата",                  Выборка.Дата);
	ДанныеДокумента.Вставить("ДатаНачала",                     Выборка.ДатаНачала);
	ДанныеДокумента.Вставить("ДатаОкончания",                  Выборка.ДатаОкончания);
	ДанныеДокумента.Вставить("Документ.ВидРемонтаИлиАренды",   Выборка.ВидРемонтаИлиАренды);
	ДанныеДокумента.Вставить("Документ.Комментарий",           Выборка.Комментарий);
	ДанныеДокумента.Вставить("Документ.Заказчик",              Выборка.Заказчик);
	ДанныеДокумента.Вставить("Документ.Контрагент",            Выборка.Контрагент);
	ДанныеДокумента.Вставить("Документ.ПредставлениеТелефона", Выборка.ПредставлениеТелефона);
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервере
Функция РазобратьДанныеАвтомобилейДляПредставления(Автомобиль, Знач Выборка)
	
	Выборка.Сбросить();
	Выборка.НайтиСледующий(Новый Структура("Ссылка", Автомобиль));
	
	ДанныеДокумента = Новый Соответствие;
	
	ДанныеДокумента.Вставить("Автомобиль.Наименование",          Выборка.Наименование);
	ДанныеДокумента.Вставить("Автомобиль.VIN",                   Выборка.VIN);
	ДанныеДокумента.Вставить("Автомобиль.ГодВыпуска",            Выборка.ГодВыпуска);
	ДанныеДокумента.Вставить("Автомобиль.Модель",                Выборка.Модель);
	ДанныеДокумента.Вставить("Автомобиль.ВариантКомплектации",   Выборка.ВариантКомплектации);
	ДанныеДокумента.Вставить("Автомобиль.Цвет",                  Выборка.Цвет);
	ДанныеДокумента.Вставить("Автомобиль.ТипКузова",             Выборка.ТипКузова);
	ДанныеДокумента.Вставить("Автомобиль.ТипДвигателя",          Выборка.ТипДвигателя);
	ДанныеДокумента.Вставить("Автомобиль.ТипКПП",                Выборка.ТипКПП);
	ДанныеДокумента.Вставить("Автомобиль.ТипСалона",             Выборка.ТипСалона);
	ДанныеДокумента.Вставить("Автомобиль.НомерГаражный",         Выборка.НомерГаражный);
	ДанныеДокумента.Вставить("Автомобиль.ДатаНачалаГарантии",    Выборка.ДатаНачалаГарантии);
	ДанныеДокумента.Вставить("Автомобиль.ДатаОкончанияГарантии", Выборка.ДатаОкончанияГарантии);
	ДанныеДокумента.Вставить("Автомобиль.ОригинальныйVIN",       Выборка.ОригинальныйVIN);
	ДанныеДокумента.Вставить("Автомобиль.ДатаРегистрации",       Выборка.ДатаРегистрации);
	ДанныеДокумента.Вставить("Автомобиль.Марка",                 Выборка.Марка);
	ДанныеДокумента.Вставить("Автомобиль.МодельДвигателя",       Выборка.МодельДвигателя);
	ДанныеДокумента.Вставить("ГосНомер",                         Выборка.ГосНомер);
	ДанныеДокумента.Вставить("Пробег",                           Выборка.Пробег);
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьШаблон(Данные, Знач Шаблон)
	
	Для Каждого Поле Из Данные Цикл
		Маркер = стрШаблон("{{.%1}}", Поле.Ключ);
		Если стрНайти(Шаблон, Маркер) > 0 Тогда
			Значение = Поле.Значение;
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				Значение = "";
			КонецЕсли;
			Если СтрНайти(Поле.Ключ, "Год") Тогда
				Значение = Формат(Значение, НСтр("ru = 'ДФ=''yyyy'''"));
			ИначеЕсли Поле.Ключ = "Документ.Дата" ИЛИ (ТипЗнч(Значение) = Тип("Дата") И Значение = НачалоДня(Значение)) Тогда
				Значение = Формат(Значение, НСтр("ru = 'ДФ=dd.MM.yyyy'"));
			ИначеЕсли СтрНайти(Поле.Ключ, "Дата") Тогда
				Значение = Формат(Значение, НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''"));
			КонецЕсли;
			Шаблон = стрЗаменить(Шаблон, Маркер, Строка(Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнтервалыОтсутствияАвтомобилей(МассивАвтомобилей)
	
	КолонкаАвтомобиль = Объект.Автомобили.Выгрузить().ВыгрузитьКолонку("Автомобиль");
	ИнтервалыОтсутствия.Загрузить(АрендаАвтомобилей.ТаблицаИнтерваловОтсутствияАвтомобилей(КолонкаАвтомобиль));
	
КонецПроцедуры // ЗаполнитьИнтервалыОтсутствияАвтомобилей()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы
// подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаНастройкиНаСервере()
	
	ОбновитьДанныеПланировщика();
	
КонецПроцедуры // ОбработкаРезультатаНастройкиНаСервере()

&НаСервере
Процедура СформироватьПодменюВводНаОсновании(Документ)
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	ВводНаОсновании     = Элементы.ГлобальныеКоманды.ПодчиненныеЭлементы.ФормаСоздатьНаОсновании;
	
	// Спрячем все элементы ввода, созданные ранее
	Для Каждого ЭлементВводаНаОсновании Из ВводНаОсновании.ПодчиненныеЭлементы Цикл
		ЭлементВводаНаОсновании.Видимость = Ложь;
	КонецЦикла;
	
	// ПодменюВводНаОсновании
	Для Каждого Метаданное Из Метаданные.Документы Цикл
		Если НЕ ПравоДоступа("Чтение", Метаданное) Тогда
			Продолжить;
		КонецЕсли;
		Если Метаданное.ВводитсяНаОсновании.Содержит(МетаданныеДокумента) Тогда
			ИмяОперации = "ВвестиНаОсновании" + Метаданное.Имя;
			Если Команды.Найти(ИмяОперации) <> Неопределено Тогда
				ВводНаОсновании.ПодчиненныеЭлементы.Найти(ИмяОперации).Видимость = Истина;
				Продолжить;
			КонецЕсли;
			КомандаОперации = Команды.Добавить(ИмяОперации);
			КомандаОперации.Заголовок = Метаданное.Синоним;
			КомандаОперации.Действие = "Подключаемый_ОбработкаКомандыФормы";
			КомандаОперации.ИзменяетСохраняемыеДанные = Ложь;
			КнопкаОперации = Элементы.Добавить(ИмяОперации, Тип("КнопкаФормы"), ВводНаОсновании);
			КнопкаОперации.ИмяКоманды = ИмяОперации;
			КнопкаОперации.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ВводНаОсновании.Картинка    = БиблиотекаКартинок.ВводНаОсновании;
	ВводНаОсновании.Отображение = ОтображениеКнопки.Картинка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Планировщик_ПринятьАвтомобильНаСервере(Автомобиль, Документ, ПараметрыДействия)
	
	Если ДанныеСостоянийАвтомобилей(Автомобиль, Документ) = Перечисления.АрендаСостоянияАвтомобилей.ВыданКлиенту Тогда
		АрендаАвтомобилей.ПринятьАвтомобиль(Документ, Автомобиль, ПараметрыДействия);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Принять можно только выданный клиенту автомобиль.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Планировщик_ВыдатьАвтомобильНаСервере(Автомобиль, Документ, ПараметрыДействия)
	
	Если ДанныеСостоянийАвтомобилей(Автомобиль, Документ) = Перечисления.АрендаСостоянияАвтомобилей.НаСтоянке Тогда
		АрендаАвтомобилей.ВыдатьАвтомобиль(Документ, Автомобиль, ПараметрыДействия);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выдать можно только находящийся на стоянке автомобиль.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМетаданныхПоТипу(Документ)
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Документ)).Имя;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеСостоянийАвтомобилей(Автомобиль, Документ)
	
	Автомобили = Новый Массив;
	Автомобили.Добавить(Автомобиль);
	
	Возврат РегистрыСведений.
			АрендаСостоянияАвтомобилей.ДанныеСостоянийАвтомобилей(Документ, Автомобили).Получить(Автомобиль);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьИспользоватьПланировщик(Документ, ПередСозданием = Ложь)
	
	РезультатПроверки = Неопределено; //Аренда и тест-драйв       
	НеобходимоОтменитьСоздание = Ложь;
	
	Если НЕ ЕстьПодсистемаCRM И НЕ ЕстьПодсистемаАрендаАвтомобилей Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для работы с данным объектом необходим ключ защиты с поддержкой одного из модулей ""Учет взаимоотношений с клиентами"", ""Аренда автомобилей"".'")
		);
		НеобходимоОтменитьСоздание = Истина;		
	ИначеЕсли Документ <> Неопределено Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ТестДрайв") Тогда
			
			Если ЕстьПодсистемаCRM Тогда
				РезультатПроверки = 2; //Только тест-драйв	
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Для работы с данным объектом необходим ключ защиты с поддержкой модуля ""Учет взаимоотношений с клиентами"".'")
				);
				НеобходимоОтменитьСоздание = Истина;
			КонецЕсли;
			
		ИначеЕсли ЕстьПодсистемаАрендаАвтомобилей Тогда
			РезультатПроверки = 1; //Только Аренда	
		Иначе	
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для работы с данным объектом необходим ключ защиты с поддержкой модуля ""Аренда автомобилей"".'")
			);
			НеобходимоОтменитьСоздание = Истина;	
		КонецЕсли;  
		
	ИначеЕсли ЕстьПодсистемаCRM И НЕ ЕстьПодсистемаАрендаАвтомобилей Тогда
		РезультатПроверки = 2; //Только тест-драйв
	ИначеЕсли НЕ ЕстьПодсистемаCRM И ЕстьПодсистемаАрендаАвтомобилей Тогда
		РезультатПроверки = 1; //Только Аренда 	
	КонецЕсли;
	
	Если ПередСозданием И НеобходимоОтменитьСоздание Тогда
		РезультатПроверки = 0; //Отмена
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции	

&НаСервере
Процедура ИзменитьДокументПриПеретаскивании(ПараметрыДокумента)
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ." + ПараметрыДокумента.Документ.Метаданные().Имя);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыДокумента.Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НайденныйОбъект = ПараметрыДокумента.Документ.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НайденныйОбъект, ПараметрыДокумента);
		
		Если ТипЗнч(ПараметрыДокумента.Документ) <> Тип("ДокументСсылка.ТестДрайв") Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Автомобиль", ПараметрыДокумента.Автомобиль);
			
			НайденныеСтроки = НайденныйОбъект.Автомобили.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = НайденныйОбъект.Автомобили.Добавить();
				НоваяСтрока.Автомобиль = ПараметрыДокумента.Автомобиль;
				Документы.ДоговорАренды.АвтомобилиАвтомобильПриИзменении(НайденныйОбъект, НоваяСтрока);
				
			КонецЕсли;	   
			
		КонецЕсли;
		
		НайденныйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = СтрШаблон(НСтр("ru = '%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПараметрыДокумента.Документ.Метаданные().Имя);
		ИнформацияОшибки = НСтр("ru = 'Не удалось изменить документ '") + ПараметрыДокумента.Документ + НСтр("ru = ' по причине ""'") + ОписаниеОшибки() + """.";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ПараметрыДокумента.Документ.Метаданные().Имя,
		ПараметрыДокумента.Документ, ИнформацияОшибки);
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
