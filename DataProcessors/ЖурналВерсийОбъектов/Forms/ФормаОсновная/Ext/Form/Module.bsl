///////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции, необходимые для функционирования формы журнала версий
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
	ПриИзмененииОтбора();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Объект.УровеньРаскрытияГруппировок = 0;
	Если Параметры.Свойство("Ссылка") Тогда
		Объект.УровеньРаскрытияГруппировок = 1;
		Объект.Объект = Параметры.Ссылка;
	КонецЕсли;
	
	// заблокируем возможность изменения версии 
	Элементы.ФормаВосстановитьВерсию.Доступность     = ПравоДоступа("АдминистрированиеДанных", Метаданные);
	Элементы.ФормаВыгрузитьВоВнешнююБазу.Доступность = Константы.ХранитьИсториюВоВнешнейБД.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоИзмененийПередРазворачиванием(Элемент, Строка, Отказ)
	
	Ветка = ДеревоИзменений.НайтиПоИдентификатору(Строка);
	ОбъектВXML = Ветка.ОбъектВXML;
	
	Если Ветка.ПолучитьЭлементы().Количество() = 1 Тогда
		Потомок = Ветка.ПолучитьЭлементы()[0];
		
		Если Потомок.Объект = НСтр("ru = '<чтение данных>...'") И НЕ ЗначениеЗаполнено(Потомок.СтароеЗначение) 
			И НЕ ЗначениеЗаполнено(Потомок.НовоеЗначение) Тогда
			
			КодВозврата = ДостроитьВеткуНаСервереБезКонтекста(Ветка.Период, Ветка.Объект, ОбъектВXML);
			
			Если КодВозврата = Неопределено Тогда
				Ветка.ПолучитьЭлементы().Очистить();
			ИначеЕсли КодВозврата = 0 Тогда
				Потомок.Объект = НСтр("ru = '<Первая версия объекта>'");
			Иначе
				Ветка.ПолучитьЭлементы().Очистить();
				
				ВеткаТЧ = Неопределено;
				ТекТЧ = "";
				ВеткаСтрокаТЧ = Неопределено;
				ТекСтрокаТЧ = 0;
				Счетчик = КодВозврата.Реквизит.Количество() - 1;
				
				Для Сч = 0 По Счетчик Цикл
					
					ТекСтрока = Новый Структура;
					ТекСтрока.Вставить("ИмяТЧ",           КодВозврата.ИмяТЧ[Сч]);
					ТекСтрока.Вставить("Реквизит",        КодВозврата.Реквизит[Сч]);
					ТекСтрока.Вставить("НомерСтроки",     КодВозврата.НомерСтроки[Сч]);
					ТекСтрока.Вставить("НомерМетаданные", КодВозврата.НомерМетаданные[Сч]);
					ТекСтрока.Вставить("СтароеЗначение",  КодВозврата.СтароеЗначение[Сч]);
					ТекСтрока.Вставить("НовоеЗначение",   КодВозврата.НовоеЗначение[Сч]);
					
					Если ТекСтрока.ИмяТЧ = "Реквизиты" Тогда
						
						НоваяСтрока = Ветка.ПолучитьЭлементы().Добавить();
						НоваяСтрока.Объект = ТекСтрока.Реквизит;
						НоваяСтрока.СтароеЗначение = ТекСтрока.СтароеЗначение;
						НоваяСтрока.НовоеЗначение  = ТекСтрока.НовоеЗначение;
						НоваяСтрока.НомерМакета = 7; // Реквизит
						Продолжить;
						
					КонецЕсли;
					
					Если ТекТЧ <> ТекСтрока.ИмяТЧ Тогда
						ТекСтрокаТЧ = 0;
						НоваяСтрока = Ветка.ПолучитьЭлементы().Добавить();
						
						ТекТЧ = ТекСтрока.ИмяТЧ;
						ВеткаТЧ = НоваяСтрока;
						
						НоваяСтрока.Объект = Сред(ТекТЧ, 4);
						НоваяСтрока.НомерМакета = 6; // Табличная часть
						
					КонецЕсли;
					
					Если ТекСтрокаТЧ <> ТекСтрока.НомерСтроки Тогда
						
						ТекСтрокаТЧ = ТекСтрока.НомерСтроки;
						ВеткаСтрокаТЧ = ВеткаТЧ.ПолучитьЭлементы().Добавить();
						ВеткаСтрокаТЧ.Объект = "Строка №" + СокрЛП(ТекСтрокаТЧ);
						ВеткаСтрокаТЧ.НомерМакета = 8; // Строка ТЧ
						
					КонецЕсли;
					
					НоваяСтрока = ВеткаСтрокаТЧ.ПолучитьЭлементы().Добавить();
					НоваяСтрока.Объект = ТекСтрока.Реквизит;
					НоваяСтрока.СтароеЗначение = ТекСтрока.СтароеЗначение;
					НоваяСтрока.НовоеЗначение  = ТекСтрока.НовоеЗначение;
					НоваяСтрока.НомерМакета = 7; // Реквизит
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	Если Объект.Объект = Неопределено ИЛИ Объект.Объект.Пустая() Тогда
		Объект.УровеньРаскрытияГруппировок = 0;
	Иначе
		Объект.УровеньРаскрытияГруппировок = 1;
	КонецЕсли;
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура КомпьютерПриИзменении(Элемент)
	Если Объект.Объект = Неопределено ИЛИ Объект.Объект.Пустая() Тогда
		Объект.УровеньРаскрытияГруппировок = 0;
	Иначе
		Объект.УровеньРаскрытияГруппировок = 1;
	КонецЕсли;
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ПериодВариантПриИзменении(Элемент)
	Если Объект.Объект = Неопределено ИЛИ Объект.Объект.Пустая() Тогда
		Объект.УровеньРаскрытияГруппировок = 0;
	Иначе
		Объект.УровеньРаскрытияГруппировок = 1;
	КонецЕсли;
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	Если Объект.Объект = Неопределено ИЛИ Объект.Объект.Пустая() Тогда
		Объект.УровеньРаскрытияГруппировок = 0;
	Иначе
		Объект.УровеньРаскрытияГруппировок = 1;
	КонецЕсли;
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	Если Объект.Объект = Неопределено ИЛИ Объект.Объект.Пустая() Тогда
		Объект.УровеньРаскрытияГруппировок = 0;
	Иначе
		Объект.УровеньРаскрытияГруппировок = 1;
	КонецЕсли;
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИзмененийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ДеревоИзменений.ТекущиеДанные;
	
	Если Поле.Имя = "ДеревоИзмененийНовоеЗначение" ИЛИ Поле.Имя = "ДеревоИзмененийСтароеЗначение" 
			ИЛИ Поле.Имя = "ДеревоИзмененийПользователь" Тогда
		ПолеИмяИтог = ?(Поле.Имя = "ДеревоИзмененийСтароеЗначение", ТекСтрока.СтароеЗначение, ТекСтрока.НовоеЗначение);	
		ТекЗначение = ?(Поле.Имя = "ДеревоИзмененийПользователь", ТекСтрока.Пользователь, ПолеИмяИтог);
		
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
			ПоказатьЗначение(, ТекЗначение);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СсылкаНаОбъект = Неопределено;
	ДатаВерсии = Неопределено;
	МестоположениеВерсии = Неопределено;
	ДатаПредыдущейВерсии = Неопределено;
	ТекВетка = ТекСтрока;
	Пока ТекВетка <> Неопределено Цикл
		Если ЭтоСсылка(ТипЗнч(ТекВетка.Объект)) Тогда
			СсылкаНаОбъект = ТекВетка.Объект;
			ДатаВерсии = ТекВетка.Период;
			МестоположениеВерсии = ТекВетка.Местоположение;
			ДатаПредыдущейВерсии = ТекВетка.ДатаПредыдущейВерсии;
			Прервать;
		КонецЕсли;
		ТекВетка = ТекВетка.ПолучитьРодителя();
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияОбъекта",        ДатаВерсии);
	ПараметрыФормы.Вставить("ТолькоПросмотр",       Истина);
	ПараметрыФормы.Вставить("МестоположениеВерсии", МестоположениеВерсии);
	ПараметрыФормы.Вставить("ДатаПредыдущейВерсии", ДатаПредыдущейВерсии);
	
	УправлениеДиалогомКлиент.ОткрытьФормуОбъекта(СсылкаНаОбъект, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВоВнешнююБазу(Команда)
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыгрузитьВоВнешнююБазу");
		
	// Формируем текст вопроса
	ТекстВопроса = НСтр("ru = 'История изменений будет выгружена во внешнюю БД. Продолжить?'");
		
	// Получаем подтверждение операции от пользователя
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если ДополнительныеПараметры = "ВыгрузитьВоВнешнююБазу" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			РегистрацияИзмененийОбъектовЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура РегистрацияИзмененийОбъектовЗавершение()
	
	ВерсионированиеОбъектовПлатформа.РегистрацияИзмененийОбъектов();
	
КонецПроцедуры // РегистрацияИзмененийОбъектовЗавершение

&НаКлиенте
Процедура ПриИзмененииОтбора()
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	Если Объект.Объект = Неопределено ИЛИ Объект.Объект.Пустая() Тогда
		Объект.УровеньРаскрытияГруппировок = 0;
	Иначе
		Объект.УровеньРаскрытияГруппировок = 1;
	КонецЕсли;
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
	ПриИзмененииОтбора();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	Если Объект.Объект = Неопределено ИЛИ Объект.Объект.Пустая() Тогда
		Объект.УровеньРаскрытияГруппировок = 0;
	Иначе
		Объект.УровеньРаскрытияГруппировок = 1;
	КонецЕсли;
	ПостроитьДеревоИзмененийНаСервере();
	РазвернутьДеревоДоЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВерсию(Команда)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ДеревоИзменений.ТекущиеДанные;
	
	СсылкаНаОбъект       = Неопределено;
	ДатаВерсии           = Неопределено;
	МестоположениеВерсии = Неопределено;
	ДатаПредыдущейВерсии = Неопределено;
	ТекВетка = ТекСтрока;
	
	Пока ТекВетка <> Неопределено Цикл
		Если ЭтоСсылка(ТипЗнч(ТекВетка.Объект)) Тогда
			СсылкаНаОбъект       = ТекВетка.Объект;
			ДатаВерсии           = ТекВетка.Период;
			МестоположениеВерсии = ТекВетка.Местоположение;
			ДатаПредыдущейВерсии = ТекВетка.ДатаПредыдущейВерсии;
			Прервать;
		КонецЕсли;
		ТекВетка = ТекВетка.ПолучитьРодителя();
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияОбъекта",        ДатаВерсии);
	ПараметрыФормы.Вставить("ТолькоПросмотр",       Истина);
	ПараметрыФормы.Вставить("МестоположениеВерсии", МестоположениеВерсии);
	ПараметрыФормы.Вставить("ДатаПредыдущейВерсии", ДатаПредыдущейВерсии);
	
	УправлениеДиалогомКлиент.ОткрытьФормуОбъекта(СсылкаНаОбъект, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВерсию(Команда)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ДеревоИзменений.ТекущиеДанные;
	
	СсылкаНаОбъект = Неопределено;
	ДатаВерсии     = Неопределено;
	МестоположениеВерсии = Неопределено;
	ДатаПредыдущейВерсии = Неопределено;
	ТекВетка       = ТекСтрока;
	Пока ТекВетка <> Неопределено Цикл
		Если ЭтоСсылка(ТипЗнч(ТекВетка.Объект)) Тогда
			СсылкаНаОбъект = ТекВетка.Объект;
			ДатаВерсии = ТекВетка.Период;
			МестоположениеВерсии = ТекВетка.Местоположение;
			ДатаПредыдущейВерсии = ТекВетка.ДатаПредыдущейВерсии;
			Прервать;
		КонецЕсли;
		ТекВетка = ТекВетка.ПолучитьРодителя();
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияОбъекта",        ДатаВерсии);
	ПараметрыФормы.Вставить("ТолькоПросмотр",       Ложь);
	ПараметрыФормы.Вставить("МестоположениеВерсии", МестоположениеВерсии);
	ПараметрыФормы.Вставить("ДатаПредыдущейВерсии", ДатаПредыдущейВерсии);
	
	УправлениеДиалогомКлиент.ОткрытьФормуОбъекта(СсылкаНаОбъект, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВерсии(Команда)
	ВыделенныеСтроки = Элементы.ДеревоИзменений.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для сравнения выберите две версии объекта.'"));
		Возврат;
	КонецЕсли;
	
	// определим объекты для сравнения
	
	ПерваяСтрока = ДеревоИзменений.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	ВтораяСтрока = ДеревоИзменений.НайтиПоИдентификатору(ВыделенныеСтроки[ВыделенныеСтроки.ВГраница()]);
	
	Если ПерваяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВтораяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока ПерваяСтрока.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
		ПерваяСтрока = ПерваяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Пока ВтораяСтрока.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
		ВтораяСтрока = ВтораяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Если ПерваяСтрока.Объект <> ВтораяСтрока.Объект Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сравнивать версии можно только для одного и того же объекта.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект1",      ПерваяСтрока.ОбъектВXML);
	ПараметрыФормы.Вставить("Объект2",      ВтораяСтрока.ОбъектВXML);
	ПараметрыФормы.Вставить("Объект",       ВтораяСтрока.Объект);
	ПараметрыФормы.Вставить("Дата1",        ПерваяСтрока.Период);
	ПараметрыФормы.Вставить("Дата2",        ВтораяСтрока.Период);
	ПараметрыФормы.Вставить("Пользователь", ВтораяСтрока.Пользователь);
	ПараметрыФормы.Вставить("Компьютер",    ВтораяСтрока.Компьютер);
	ПараметрыФормы.Вставить("Событие",      ВтораяСтрока.Событие);
	
	ОткрытьФорму("Обработка.ЖурналВерсийОбъектов.Форма.ФормаСравненияВерсий", 
				 ПараметрыФормы, 
				 ЭтотОбъект, 
				 Новый УникальныйИдентификатор(), , , , 
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет фона
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоИзмененийОбъект");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоИзмененийПользователь");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоИзмененийКомпьютер");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоИзменений.НомерМакета");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(235,235,235));
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоИзмененийСтароеЗначение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоИзменений.СтароеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '<значение не найдено>'");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоИзмененийНовоеЗначение");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоИзменений.НовоеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '<значение не найдено>'");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
КонецПроцедуры

// Процедура выполняет построение дерева изменения объектов.
//
// Входные параметры:
//    НЕТ.
//
// Возвращаемое значение:
//    НЕТ.
//
&НаСервере
Процедура ПостроитьДеревоИзмененийНаСервере()
	// Очистка
	ДеревоИзменений.ПолучитьЭлементы().Очистить();
	
	ВеткаСправочники = ДеревоИзменений;
	ВеткаДокументы   = ДеревоИзменений;
	ВеткаПВХ         = ДеревоИзменений;
	
	Запрос = Новый Запрос();
	
	// Получение информации из внешнего источника.
	ТекДатаНачала    = Неопределено;
	ТекДатаОкончания = Неопределено;
	ТекОбъект        = Неопределено;
	ТекПользователь  = Неопределено;
	ТекКомпьютер     = Неопределено;
	
	// Отборы
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		ТекОбъект = Объект.Объект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		ТекПользователь = Объект.Пользователь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Компьютер) Тогда
		ТекКомпьютер = Объект.Компьютер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Период.ДатаНачала) И ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		ТекДатаНачала = Объект.Период.ДатаНачала;
		ТекДатаОкончания = КонецДня(Объект.Период.ДатаОкончания);
	Иначе
		Если ЗначениеЗаполнено(Объект.Период.ДатаНачала) Тогда
			ТекДатаНачала = Объект.Период.ДатаНачала;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
			ТекДатаОкончания = КонецДня(Объект.Период.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	// Запретим строить дерево если не сделаны отборы.
	Если  ТекДатаНачала    = Неопределено
		И ТекДатаОкончания = Неопределено
		И ТекОбъект        = Неопределено
		И ТекПользователь  = Неопределено
		И ТекКомпьютер     = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Таблица из внешней базы
	ВнешняяТаблица = ВерсионированиеОбъектовПлатформа.ПолучитьТаблицуИзВнешнейБазы(ТекОбъект, ТекДатаОкончания, ТекДатаНачала, ТекПользователь, ТекКомпьютер);
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапросТекст = "ВЫБРАТЬ
	               |	  ВерсииОбъектов.Объект
	               |	, ВерсииОбъектов.Период
	               |	, ВерсииОбъектов.Пользователь
	               |	, ВерсииОбъектов.Компьютер
	               |	, ВерсииОбъектов.Событие
				   |    , ВерсииОбъектов.ОбъектВXML
				   |    , ""ВнешняяБД"" КАК Местоположение
	               |ПОМЕСТИТЬ
	               |	ВнешняяТаблица
	               |ИЗ
	               |	&ВерсииОбъектов КАК ВерсииОбъектов;
				   |////////////////////////////////////////
				   |";
	Запрос.УстановитьПараметр("ВерсииОбъектов", ВнешняяТаблица);
	
	// Получение информации об измененных объектах из ИБ.
	
	// Отборы
	СтрокаОтборов = "";
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		СтрокаОтборов = СтрокаОтборов + " И ВерсииОбъектов.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект", Объект.Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		СтрокаОтборов = СтрокаОтборов + " И ВерсииОбъектов.АвторВерсии = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Компьютер) Тогда
		СтрокаОтборов = СтрокаОтборов + " И ВерсииОбъектов.Компьютер = &Компьютер";
		Запрос.УстановитьПараметр("Компьютер", Объект.Компьютер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Период.ДатаНачала) И ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		СтрокаОтборов = СтрокаОтборов + " И ВерсииОбъектов.ДатаВерсии МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаНачала", Объект.Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Период.ДатаОкончания));
	Иначе
		Если ЗначениеЗаполнено(Объект.Период.ДатаНачала) Тогда
			СтрокаОтборов = СтрокаОтборов + " И ВерсииОбъектов.ДатаВерсии >= &ДатаНачала";
			Запрос.УстановитьПараметр("ДатаНачала", Объект.Период.ДатаНачала);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
			СтрокаОтборов = СтрокаОтборов + " И ВерсииОбъектов.ДатаВерсии <= &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Период.ДатаОкончания));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
		СтрокаОтборов = "ГДЕ" + Сред(СтрокаОтборов, 3);
	КонецЕсли;
	
	ЗапросТекст = ЗапросТекст + "ВЫБРАТЬ
	                            |	ВерсииОбъектов.Объект КАК Объект,
	                            |	ВерсииОбъектов.ДатаВерсии КАК Период,
	                            |	ВерсииОбъектов.АвторВерсии КАК Пользователь,
	                            |	ВерсииОбъектов.Компьютер КАК Компьютер,
	                            |	ВерсииОбъектов.Событие КАК Событие,
	                            |	"""" КАК ОбъектВXML,
	                            |	ВерсииОбъектов.ВерсияОбъекта КАК ОбъектСжатый,
	                            |	""Регистр"" КАК Местоположение
	                            |ИЗ
	                            |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
							    |" + СтрокаОтборов + "
	 							|
								|ОБЪЕДИНИТЬ ВСЕ
	                            |
	                            |ВЫБРАТЬ
	                            |	ВнешняяТаблица.Объект,
	                            |	ВнешняяТаблица.Период,
	                            |	ВнешняяТаблица.Пользователь,
	                            |	ВнешняяТаблица.Компьютер,
	                            |	ВнешняяТаблица.Событие,
	                            |	ВнешняяТаблица.ОбъектВXML,
	                            |	"""",
	                            |	ВнешняяТаблица.Местоположение
	                            |ИЗ
	                            |	ВнешняяТаблица КАК ВнешняяТаблица
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Объект, Период";
				   
	Запрос.Текст = ЗапросТекст;
	
	ТаблицаИзмененийРегистр = Запрос.Выполнить().Выгрузить();
	
	ТаблицаИзмененийРегистр.Колонки.Добавить("Менеджеры", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаИзмененийРегистр.Колонки.Добавить("Менеджер",  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	Для Каждого ТекСтрока Из ТаблицаИзмененийРегистр Цикл
		Если НЕ ТекСтрока.Объект = Неопределено Тогда
			ТекМетаДанные = ТекСтрока.Объект.Метаданные();
			Если Метаданные.Справочники.Содержит(ТекМетаДанные) Тогда
				ТекСтрока.Менеджеры = "СПРАВОЧНИК";
			ИначеЕсли Метаданные.Документы.Содержит(ТекМетаДанные) Тогда
				ТекСтрока.Менеджеры = "ДОКУМЕНТ";
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ТекМетаДанные) Тогда
				ТекСтрока.Менеджеры = "ПЛАНВИДОВХАРАКТЕРИСТИК";
			Иначе
				ТекСтрока.Менеджеры = "СПРАВОЧНИК"; // Непонятно что. Предположим, что справочник
			КонецЕсли;
			ТекСтрока.Менеджер  = Строка(ТекМетаДанные);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИзмененийРегистр.Сортировать("Менеджеры УБЫВ, Менеджер, Объект, Период");
	
	ВеткаМенеджеры = Неопределено;
	ВеткаМенеджер  = Неопределено;
	ТекМенеджер    = Неопределено;
	ТекОбъект	   = ?(ТаблицаИзмененийРегистр.количество() = 0, Неопределено, ТаблицаИзмененийРегистр[0].Объект);
	ДатаПредыдущейВерсии = Дата(1, 1, 1, 0, 0, 0);
	НомерМакета    = 0;
	Для Каждого ТекСтрока Из ТаблицаИзмененийРегистр Цикл
		Если ТекСтрока.Менеджер <> ТекМенеджер Тогда
			Если ТекСтрока.Менеджеры = "СПРАВОЧНИК" Тогда
				ВеткаМенеджеры = ВеткаСправочники;
				НомерМакета = 1;
			ИначеЕсли ТекСтрока.Менеджеры = "ДОКУМЕНТ" Тогда
				ВеткаМенеджеры = ВеткаДокументы;
				НомерМакета = 2;
			ИначеЕсли ТекСтрока.Менеджеры = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
				ВеткаМенеджеры = ВеткаПВХ;
				НомерМакета = 3;
			Иначе
				ВеткаМенеджеры = ВеткаСправочники; // Непонятно что. Считаем, что справочник
				НомерМакета = 1;
			КонецЕсли;
			
			ВеткаМенеджер             = ВеткаМенеджеры.ПолучитьЭлементы().Добавить();
			ТекМенеджер               = ТекСтрока.Менеджер;
			ВеткаМенеджер.Объект      = ТекМенеджер;
			ВеткаМенеджер.НомерМакета = НомерМакета;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекСтрока.ОбъектСжатый) Тогда
			// Отобразим данные регистра
			ОбъектВАрхиве = ТекСтрока.ОбъектСжатый.Получить();
			Если НЕ ОбъектВАрхиве = Неопределено Тогда
				ТекСтрока.ОбъектВXML = ВерсионированиеОбъектовПлатформа.ПолучитьXMLВерсию(ОбъектВАрхиве);
			Иначе
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		НоваяВетка = ВеткаМенеджер.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяВетка, ТекСтрока);

		// Заполнение даты предыдущей Версии.
		Если ДатаПредыдущейВерсии = Дата(1, 1, 1, 0, 0, 0) Тогда 
			НоваяВетка.ДатаПредыдущейВерсии = НоваяВетка.Период;
		Иначе
			НоваяВетка.ДатаПредыдущейВерсии = ДатаПредыдущейВерсии;
		КонецЕсли;
		Если ТекОбъект = НоваяВетка.Объект Тогда
			ДатаПредыдущейВерсии = НоваяВетка.Период;
		Иначе
			ДатаПредыдущейВерсии = Дата(1, 1, 1, 0, 0, 0);
		КонецЕсли;
		ТекОбъект = НоваяВетка.Объект;
		
		Если НомерМакета = 2 Тогда
			НоваяВетка.НомерМакета = 5; // Документ
		Иначе
			НоваяВетка.НомерМакета = 4; // Справочник / ПВХ
		КонецЕсли;
		НоваяНоваяВетка = НоваяВетка.ПолучитьЭлементы().Добавить();
		НоваяНоваяВетка.Объект = НСтр("ru = '<чтение данных>...'");
		НоваяНоваяВетка.НомерМакета = 0;
	КонецЦикла;
	
КонецПроцедуры

// Процедура разворачивает первый и второй уровень дерева изменений
//
// Входные параметры:
//    НЕТ
//
// Возвращаемое значение:
//    НЕТ
//
&НаКлиенте
Процедура РазвернутьДеревоДоЭлементов()
	МассивГруппДляРазворачивания = Новый Массив();
	// Строки верхнего уровня
	Для Каждого СтрокаМенеджеры Из ДеревоИзменений.ПолучитьЭлементы() Цикл
		МассивГруппДляРазворачивания.Добавить(СтрокаМенеджеры);
	КонецЦикла;
	
	РазвернутоУровней = 0;
	ИндексЭлемента = 0;
	
	Пока РазвернутоУровней < Объект.УровеньРаскрытияГруппировок Цикл
		
		РазворачиватьДоИндекса = МассивГруппДляРазворачивания.Количество();
		
		Пока ИндексЭлемента < РазворачиватьДоИндекса Цикл
			ТекЭлемент = МассивГруппДляРазворачивания[ИндексЭлемента];
			Элементы.ДеревоИзменений.Развернуть(ТекЭлемент.ПолучитьИдентификатор(), Ложь);
			Для Каждого ПодчиненныйУзел Из ТекЭлемент.ПолучитьЭлементы() Цикл
				МассивГруппДляРазворачивания.Добавить(ПодчиненныйУзел);
			КонецЦикла;
			ИндексЭлемента = ИндексЭлемента + 1;
		КонецЦикла;
		
		РазвернутоУровней = РазвернутоУровней + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура достраивает элементы дерева журнала версий, необходимое при разворачивании ветки с объектом.
//
&НаСервереБезКонтекста
Функция ДостроитьВеткуНаСервереБезКонтекста(ВеткаПериод, ВеткаОбъект, ОбъектВXML)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	ВнешняяТаблица = ВерсионированиеОбъектовПлатформа.ПолучитьТаблицуИзВнешнейБазы(ВеткаОбъект, ВеткаПериод);
	ЗапросТекст = "ВЫБРАТЬ
	              |	ВерсииОбъектов.Период КАК Период,
	              |	ВерсииОбъектов.ОбъектВXML КАК ОбъектВXML
	              |ПОМЕСТИТЬ ВтВнешняяТаблица
	              |ИЗ
	              |	&ВерсииОбъектов КАК ВерсииОбъектов
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВерсииОбъектов.ОбъектВXML КАК ОбъектВXML,
	              |	NULL КАК ВерсияОбъекта,
	              |	&Объект КАК Объект,
	              |	ВерсииОбъектов.Период КАК ДатаВерсии,
	              |	""ВнешняяБД"" КАК Местоположение
	              |ПОМЕСТИТЬ ВтВерсии
	              |ИЗ
	              |	ВтВнешняяТаблица КАК ВерсииОбъектов
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	"""",
	              |	ВерсииОбъектов.ВерсияОбъекта,
	              |	ВерсииОбъектов.Объект,
	              |	ВерсииОбъектов.ДатаВерсии,
	              |	""Регистр""
	              |ИЗ
	              |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	              |ГДЕ
	              |	ВерсииОбъектов.Объект = &Объект
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВтВерсии.ВерсияОбъекта КАК ВерсияОбъекта,
	              |	ВтВерсии.ОбъектВXML КАК ОбъектВXML,
	              |	ВтВерсии.Местоположение КАК Местоположение
	              |ИЗ
	              |	ВтВерсии КАК ВтВерсии
	              |ГДЕ
	              |	ВтВерсии.Объект = &Объект
	              |	И ВтВерсии.ДатаВерсии = &ДатаВерсии";
	Запрос.УстановитьПараметр("ВерсииОбъектов", ВнешняяТаблица);
	Запрос.УстановитьПараметр("ДатаВерсии", ВеткаПериод);
	Запрос.УстановитьПараметр("Объект",     ВеткаОбъект);
	Запрос.Текст = ЗапросТекст;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	Если НЕ Выборка.Количество() = 0 ИЛИ ЗначениеЗаполнено(ОбъектВXML) Тогда
		Если ЗначениеЗаполнено(ОбъектВXML) Тогда
			СтрокаXML1 = ОбъектВXML;
		ИначеЕсли Выборка.Следующий() Тогда
			Если Выборка.Местоположение = "ВнешняяБД" Тогда 
				СтрокаXML1 = Выборка.ОбъектВXML;
			Иначе
				ОбъектВАрхиве = Выборка.ВерсияОбъекта.Получить();
				СтрокаXML1 = Неопределено;
				Если НЕ ОбъектВАрхиве = Неопределено Тогда
					СтрокаXML1 = ВерсионированиеОбъектовПлатформа.ПолучитьXMLВерсию(ОбъектВАрхиве);
				КонецЕсли;
				Если СтрокаXML1 = Неопределено И НЕ ОбъектВАрхиве = Неопределено
					И ТипЗнч(ОбъектВАрхиве) = Тип("Структура") Тогда
					ДвоичныеДанные = ОбъектВАрхиве.Объект;
					СтрокаXML1 = Новый ЧтениеFastInfoSet;
					СтрокаXML1.УстановитьДвоичныеДанные(ДвоичныеДанные);
				КонецЕсли;
				Если СтрокаXML1 = Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Версия повреждена или выбрана текущая версия объекта.'"));
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаXML2 = ВерсионированиеОбъектовПлатформа.ПреобразоватьОбъектВXML(ВеткаОбъект);
		
		Таблица = ВерсионированиеОбъектовПлатформа.ОпределитьРазличиеВерсийОбъекта(СтрокаXML1, СтрокаXML2, ВеткаОбъект);
		
		Таблица.Сортировать("ИмяТЧ, НомерСтроки, НомерМетаданные");
		
		// переведем таблицу в структуру массивов для передачи на клиент
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Результат = Новый Структура;
			Результат.Вставить("ИмяТЧ",           Таблица.ВыгрузитьКолонку("ИмяТЧ"));
			Результат.Вставить("Реквизит",        Таблица.ВыгрузитьКолонку("Реквизит"));
			Результат.Вставить("НомерСтроки",     Таблица.ВыгрузитьКолонку("НомерСтроки"));
			Результат.Вставить("НомерМетаданные", Таблица.ВыгрузитьКолонку("НомерМетаданные"));
			Результат.Вставить("СтароеЗначение",  Таблица.ВыгрузитьКолонку("СтароеЗначение"));
			Результат.Вставить("НовоеЗначение",   Таблица.ВыгрузитьКолонку("НовоеЗначение"));
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает результат проверки того, что переданный тип является ссылочным типом данных;
// для типа "Неопределено" возвращается Ложь.
//
// Входные параметры:
//    Тип - Тип, проверяемый тип
//
// Возвращаемое значение:
//    Булево - результат проверки.
//
&НаСервере
Функция ЭтоСсылка(ПроверяемыйТип)
	Возврат ОбщегоНазначения.ЭтоСсылка(ПроверяемыйТип);
КонецФункции

#КонецОбласти

