///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы обработки "Закрытие смены"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Произведем кэширование значений прав
	РазрешитьПроводитьИнкассацию = ПраваИНастройкиПользователя.Значение("РазрешитьПроводитьИнкассацию");
	
	// Определим дату на которую необходимо выполнить закрытие смены
	Объект.Дата = ПолучитьОперативнуюОтметкуВремени();
	
	// Заполним основные таблицы
	Если ЗначениеЗаполнено(Параметры.КассаККМ) Тогда
		
		НоваяСтрока = Объект.КассыККМ.Добавить();
		НоваяСтрока.Использовать = 1;
		НоваяСтрока.КассаККМ     = Параметры.КассаККМ;
		
		Если ЗначениеЗаполнено(Параметры.ФискальныйРегистратор) Тогда
			НоваяСтрока = Объект.Оборудование.Добавить();
			НоваяСтрока.Использовать = 1;
			НоваяСтрока.Оборудование = Параметры.ФискальныйРегистратор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЭквайринговыйТерминал) Тогда
			НоваяСтрока = Объект.Оборудование.Добавить();
			НоваяСтрока.Использовать = 1;
			НоваяСтрока.Оборудование = Параметры.ЭквайринговыйТерминал;
		КонецЕсли;
		
		Элементы.СтраницаКассыККМ    .Видимость = ЛОЖЬ;
		Элементы.СтраницаОборудование.Видимость = ЛОЖЬ;
		
		// Произведем анализ состояния чеков текущей смены
		ПроверитьЧекиНаСервере();
		
		// Установим признак необходимости выполнить закрытие формы после успешного завершения обработки.
		ЗакрыватьПриВыборе = ИСТИНА;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Чек.КассаККМ КАК КассаККМ,
		|	Чек.ФР КАК ФР,
		|	Чек.Проведен КАК Проведен,
		|	НЕ Чек.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Пробит
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.Чек КАК Чек
		|ГДЕ
		|	НЕ Чек.Архивный
		|	И Чек.Дата <= &Дата
		|	И НЕ Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекОтложенный)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекНаОплату.КассаККМ,
		|	ЧекНаОплату.ФР,
		|	ЧекНаОплату.Проведен,
		|	НЕ ЧекНаОплату.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|ИЗ
		|	Документ.ЧекНаОплату КАК ЧекНаОплату
		|ГДЕ
		|	ЧекНаОплату.Дата <= &Дата
		|	И НЕ ЧекНаОплату.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныйКассовыйОрдер.КассаККМ,
		|	ПриходныйКассовыйОрдер.ФР,
		|	ПриходныйКассовыйОрдер.Проведен,
		|	НЕ ПриходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Дата <= &Дата
		|	И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
		|	И ПриходныйКассовыйОрдер.ДляПробитияНаФР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйКассовыйОрдер.КассаККМ,
		|	РасходныйКассовыйОрдер.ФР,
		|	РасходныйКассовыйОрдер.Проведен,
		|	НЕ РасходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Дата <= &Дата
		|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	И РасходныйКассовыйОрдер.ДляПробитияНаФР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документы.КассаККМ КАК КассаККМ
		|ПОМЕСТИТЬ КассыСЧеками
		|ИЗ
		|	Документы КАК Документы
		|ГДЕ
		|	Документы.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НЕ КассыСЧеками.КассаККМ ЕСТЬ NULL КАК Использовать,
		|	КассыККМ.Ссылка КАК КассаККМ
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ КассыСЧеками КАК КассыСЧеками
		|		ПО КассыККМ.Ссылка = КассыСЧеками.КассаККМ
		|
		|УПОРЯДОЧИТЬ ПО
		|	КассаККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Документы.ФР КАК ФР
		|ИЗ
		|	Документы КАК Документы
		|ГДЕ
		|	Документы.Пробит";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		// Заполним список касс ККМ
		Объект.КассыККМ.Загрузить(РезультатыЗапросов[2].Выгрузить());
		
		// Получим перечень ФР с пробитыми чеками
		ПробитыеЧеки = РезультатыЗапросов[3].Выгрузить().ВыгрузитьКолонку("ФР");
		
		МассивТиповПО = Новый Массив;
		МассивТиповПО.Добавить("ФискальныйРегистратор");
		МассивТиповПО.Добавить("ККТ");
		
		// Добавляем в список оборудования подключенные к текущему рабочему месту устройства.
		МассивДанныхФР = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(МассивТиповПО);
		
		Для Каждого ДанныеФР Из МассивДанныхФР Цикл
			НоваяСтрока = Объект.Оборудование.Добавить();
			НоваяСтрока.Использовать    = ?(ПробитыеЧеки.Найти(ДанныеФР.Ссылка)=Неопределено, 0, 1);
			НоваяСтрока.Оборудование    = ДанныеФР.Ссылка;
			НоваяСтрока.РабочееМесто    = ДанныеФР.РабочееМесто;
			НоваяСтрока.ТипОборудования = ДанныеФР.ТипОборудования;
		КонецЦикла;
		
		МассивДанныхЭТ = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭквайринговыйТерминал");
		
		Для Каждого ДанныеФР Из МассивДанныхЭТ Цикл
			НоваяСтрока = Объект.Оборудование.Добавить();
			НоваяСтрока.Использовать    = 1;
			НоваяСтрока.Оборудование    = ДанныеФР.Ссылка;
			НоваяСтрока.РабочееМесто    = ДанныеФР.РабочееМесто;
			НоваяСтрока.ТипОборудования = ДанныеФР.ТипОборудования;
		КонецЦикла;
		
		Элементы.СтраницаКассыККМ    .Видимость = ИСТИНА;
		Элементы.СтраницаОборудование.Видимость = ИСТИНА;
		
		ЗакрыватьПриВыборе = ЛОЖЬ;
		
	КонецЕсли;
	
	ТекущийКассир = МенеджерОборудованияКлиентСервер.ТекущийКассирДляФискальныхОпераций();
	Кассир = ТекущийКассир.Кассир;
	КассирИНН = ТекущийКассир.КассирИНН;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Произведем настройку параметров отображения кнопок командной панели списков
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "КассыККМ");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Оборудование");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "НепробитыеДокументы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "НепроведенныеДокументы");
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КассыККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "Использовать") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Покажем текущий объект
	ПоказатьЗначение(, Элемент.ТекущиеДанные.КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "Использовать") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Покажем текущий объект
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура НепробитыеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "Использовать") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле=Элементы.НепробитыеДокументыФР Тогда
		Возврат;
	КонецЕсли;
	
	// Покажем документ пользователю
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры // НепробитыеДокументыВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ПроверитьЧекиНаСервере()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.ФР
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	Документы.Пробит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.КассаККМ КАК КассаККМ,
	|	Документы.Документ,
	|	Документы.ФР КАК ФР,
	|	Документы.Пробит,
	|	Документы.Проведен,
	|	Документы.ЭтоВозврат,
	|	Документы.СуммаДокумента
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	(НЕ Документы.Проведен
	|			ИЛИ НЕ Документы.Пробит)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассаККМ,
	|	ФР";
	
	Запрос = Документы.ЗакрытиеСмены.ПолучитьЗапросПоИтогамСмены(Объект, ТекстЗапроса);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Получим перечень ФР с пробитыми чеками
	ПробитыеЧеки = РезультатыЗапросов[2].Выгрузить().ВыгрузитьКолонку("ФР");
	
	Для Каждого СтрокаТаблицыОборудования Из Объект.Оборудование.НайтиСтроки(Новый Структура("ТипОборудования",
																			 ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ"))) Цикл
		СтрокаТаблицыОборудования.Использовать = ?(ПробитыеЧеки.Найти(СтрокаТаблицыОборудования.Оборудование)=Неопределено, 0, 1);
	КонецЦикла;
	
	// Перед заполнением таблиц, произведем их очистку
	Объект.НепробитыеДокументы.Очистить();
	Объект.НепроведенныеДокументы.Очистить();
	
	// Заполним таблицы проблемных чеков
	Выборка = РезультатыЗапросов[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Проведен И НЕ Выборка.Пробит Тогда
			НоваяСтрока = Объект.НепробитыеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		Если Выборка.Пробит И НЕ Выборка.Проведен Тогда
			НоваяСтрока = Объект.НепроведенныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СтраницаНепробитыеДокументы   .Доступность = ИСТИНА;
	Элементы.СтраницаНепроведенныеДокументы.Доступность = ИСТИНА;
	
КонецПроцедуры // ПроверитьЧекиНаСервере()

&НаКлиенте
Процедура ПроверитьЧеки(Команда)
	
	Модифицированность = ЛОЖЬ;
	
	ПроверитьЧекиНаСервере();
	
КонецПроцедуры // ПроверитьЧеки()

// Обработчик события возникающего на клиенте при выполнении команды "Провести документы на сервере".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура ПровестиДокументыНаСервере()
	
	// Подготовим коллекцию строк, которые необходимо будет исключить из таблицы
	ИсключаемыеСтроки = Новый Массив;
	
	// Обходим все отмеченные строки
	Для Каждого СтрокаТаблицыДокументов Из Объект.НепроведенныеДокументы.НайтиСтроки(Новый Структура("Использовать", ИСТИНА)) Цикл
		
		// Пропустим те документы, которые на текущий момент оказались проведенными
		Если СтрокаТаблицыДокументов.Документ.Проведен Тогда
			ИсключаемыеСтроки.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			// Получаем объект документа
			ДокументОбъект = СтрокаТаблицыДокументов.Документ.ПолучитьОбъект();
			
			// Снимаем пометку на удаление
			Если ДокументОбъект.ПометкаУдаления Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			// Выполняем проведение документа
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
		Исключение
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"НепроведенныеДокументы",
				СтрокаТаблицыДокументов.НомерСтроки,
				"Документ"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='При проведении %1 возникла ошибка: %2'"),
					СтрокаТаблицыДокументов.Документ,
					ОписаниеОшибки()
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
			);
			Продолжить;
		КонецПопытки;
		
		// Если добрались, сюда, значит текущая строка успешно обработана
		ИсключаемыеСтроки.Добавить(СтрокаТаблицыДокументов);
		
	КонецЦикла;
	
	// Исключим из коллекции обработанные строки
	Для каждого СтрокаТаблицыДокументов Из ИсключаемыеСтроки Цикл
		Объект.НепроведенныеДокументы.Удалить(СтрокаТаблицыДокументов);
	КонецЦикла;
	
КонецПроцедуры // ПровестиДокументыНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Провести документы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПровестиДокументы(Команда)
	
	ПровестиДокументыНаСервере();
	
КонецПроцедуры // ПровестиДокументы()

&НаСервере
Процедура АннулироватьЧекиНаСервере()
	
	// Подготовим коллекцию строк, которые необходимо будет исключить из таблицы
	ИсключаемыеСтроки = Новый Массив;
	
	// Обходим отмеченные документы
	Для каждого СтрокаТаблицыДокументов Из Объект.НепробитыеДокументы.НайтиСтроки(Новый Структура("Использовать", ИСТИНА)) Цикл
		
		Попытка
			
			// Получаем объект документа
			ДокументОбъект = СтрокаТаблицыДокументов.Документ.ПолучитьОбъект();
			
			// Установим пометку на удаление
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
		Исключение
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"НепроведенныеДокументы",
				СтрокаТаблицыДокументов.НомерСтроки,
				"Документ"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='При аннулировании чека %1 возникла ошибка: %2'"),
					СтрокаТаблицыДокументов.Документ,
					ОписаниеОшибки()
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
			);
			Продолжить;
		КонецПопытки;
		
		// Если добрались, сюда, значит текущая строка успешно обработана
		ИсключаемыеСтроки.Добавить(СтрокаТаблицыДокументов);
		
	КонецЦикла;
	
	// Исключим из коллекции обработанные строки
	Для каждого СтрокаТаблицыДокументов Из ИсключаемыеСтроки Цикл
		Объект.НепробитыеДокументы.Удалить(СтрокаТаблицыДокументов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЧеки(Команда)
	
	АннулироватьЧекиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеИзменениеФлажка(Команда)
	
	Модифицированность = ЛОЖЬ;
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя="СтраницаКассыККМ" Тогда
		Таблица = Объект.КассыККМ;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя="СтраницаОборудование" Тогда
		Таблица = Объект.Оборудование;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя="СтраницаНепробитыеДокументы" Тогда
		Таблица = Объект.НепробитыеДокументы;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя="СтраницаНепроведенныеДокументы" Тогда
		Таблица = Объект.НепроведенныеДокументы;
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ГрупповоеИзменениеПоляФлажка(Таблица, "Использовать", Команда);
	
КонецПроцедуры // ИспользованиеИзменениеФлажка()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьДублиПоПатентам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЗакрытиеСмены.ДатаПоследнегоДокумента) КАК ДатаПоследнегоДокумента,
	|	ЗакрытиеСмены.КассаККМ КАК КассаККМ
	|ПОМЕСТИТЬ КассыККМ
	|ИЗ
	|	Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|ГДЕ
	|	ЗакрытиеСмены.Проведен
	|	И ЗакрытиеСмены.ДатаПоследнегоДокумента < &Дата
	|	И ЗакрытиеСмены.КассаККМ В(&КассыККМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытиеСмены.КассаККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Чек.КассаККМ КАК КассаККМ,
	|	Чек.ФР КАК ФР,
	|	Чек.Ссылка КАК Документ,
	|	Чек.Дата КАК Дата,
	|	Чек.Проведен КАК Проведен,
	|	Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат) КАК ЭтоВозврат,
	|	ИСТИНА КАК ЭтоПродажа,
	|	ИСТИНА КАК ЕстьОплаты,
	|	НЕ Чек.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Пробит,
	|	1 КАК КоличествоЧеков,
	|	Чек.СуммаДокумента КАК СуммаДокумента,
	|	Чек.Контрагент КАК Контрагент,
	|	Чек.Карточка КАК Карточка,
	|	Чек.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|			ТОГДА 0
	|		ИНАЧЕ Чек.СуммаДокумента
	|	КОНЕЦ КАК СуммаПродаж,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|			ТОГДА Чек.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозвратов,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ Чек.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчтен,
	|	Чек.Карточка.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	Чек.КоличествоКНачислению КАК КоличествоКНачислению,
	|	Чек.КоличествоКСписанию КАК КоличествоКСписанию,
	|	Чек.НомерЧека КАК НомерФискальногоЧека,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|				И Чек.ДокументОснование ССЫЛКА Документ.Чек
	|			ТОГДА НАЧАЛОПЕРИОДА(Чек.ДокументОснование.Дата, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРеализации,
	|	Чек.Патент КАК Патент
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.Чек КАК Чек
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО Чек.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ Чек.ПометкаУдаления
	|	И Чек.Дата < &Дата
	|	И Чек.КассаККМ В(&КассыККМ)
	|	И НЕ Чек.Архивный
	|	И НЕ Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекОтложенный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекНаОплату.КассаККМ,
	|	ЧекНаОплату.ФР,
	|	ЧекНаОплату.Ссылка,
	|	ЧекНаОплату.Дата,
	|	ЧекНаОплату.Проведен,
	|	ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	|		ИЛИ ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуПокупки),
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	НЕ ЧекНаОплату.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	1,
	|	ЧекНаОплату.СуммаДокумента,
	|	ЧекНаОплату.Контрагент,
	|	ЧекНаОплату.Карточка,
	|	ЧекНаОплату.СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	|			ТОГДА 0
	|		ИНАЧЕ ЧекНаОплату.СуммаДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	|			ТОГДА ЧекНаОплату.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ ЧекНаОплату.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	0,
	|	0,
	|	ЧекНаОплату.НомерЧека,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ЧекНаОплату.Патент
	|ИЗ
	|	Документ.ЧекНаОплату КАК ЧекНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ЧекНаОплату.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ЧекНаОплату.ПометкаУдаления
	|	И ЧекНаОплату.Дата < &Дата
	|	И ЧекНаОплату.КассаККМ В(&КассыККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.КассаККМ,
	|	ПриходныйКассовыйОрдер.ФР,
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.Дата,
	|	ПриходныйКассовыйОрдер.Проведен,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕ ПриходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	1,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Контрагент,
	|	NULL,
	|	NULL,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	0,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ ПриходныйКассовыйОрдер.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	0,
	|	0,
	|	ПриходныйКассовыйОрдер.НомерЧека,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ПриходныйКассовыйОрдер.Патент
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ПриходныйКассовыйОрдер.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
	|	И ПриходныйКассовыйОрдер.Дата < &Дата
	|	И ПриходныйКассовыйОрдер.КассаККМ В(&КассыККМ)
	|	И ПриходныйКассовыйОрдер.ДляПробитияНаФР
	|	И НЕ ПриходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.КассаККМ,
	|	РасходныйКассовыйОрдер.ФР,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Проведен,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕ РасходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	1,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	NULL,
	|	NULL,
	|	0,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ РасходныйКассовыйОрдер.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	0,
	|	0,
	|	РасходныйКассовыйОрдер.НомерЧека,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	РасходныйКассовыйОрдер.Патент
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.КассаККМ = КассыККМ.КассаККМ)
	|ГДЕ
	|	НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.Дата < &Дата
	|	И РасходныйКассовыйОрдер.КассаККМ В(&КассыККМ)
	|	И РасходныйКассовыйОрдер.ДляПробитияНаФР
	|	И НЕ РасходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекиККМ.КассаККМ КАК КассаККМ,
	|	ЧекиККМ.Документ КАК Документ,
	|	ЧекиККМ.ЭтоВозврат КАК ЭтоВозврат,
	|	ЧекиККМ.Контрагент КАК Контрагент,
	|	ЧекиККМ.Карточка КАК Карточка,
	|	ЧекиККМ.СкидкаНаценка КАК СкидкаНаценка,
	|	ЧекТовары.Номенклатура КАК Номенклатура,
	|	ЧекТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЧекТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекТовары.Коэффициент КАК Коэффициент,
	|	ЧекТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	|	ЧекТовары.МестоРазмещения КАК МестоРазмещения,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Количество
	|	КОНЕЦ КАК КоличествоПродано,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВозврат,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаСкидки
	|	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаСкидкиСтроки
	|	КОНЕЦ КАК СуммаСкидкиСтроки,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаВсего
	|	КОНЕЦ КАК СуммаВсего,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Количество
	|	КОНЕЦ * ЧекТовары.Коэффициент КАК КоличествоНоменклатуры,
	|	ЧекиККМ.КоличествоЧеков КАК КоличествоЧеков,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаСкидки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСкидкиВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаСкидкиСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСкидкиСтрокиВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаВсего
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВсегоВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЧекТовары.Коэффициент КАК КоличествоНоменклатурыВозврата,
	|	ЧекиККМ.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
	|	ЧекТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	|	ЧекиККМ.Патент КАК Патент
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документы.КассаККМ КАК КассаККМ,
	|		Документы.ФР КАК ФР,
	|		Документы.Документ КАК Документ,
	|		Документы.Патент КАК Патент,
	|		Документы.Дата КАК Дата,
	|		Документы.Проведен КАК Проведен,
	|		Документы.ЭтоВозврат КАК ЭтоВозврат,
	|		Документы.ЭтоПродажа КАК ЭтоПродажа,
	|		Документы.Пробит КАК Пробит,
	|		Документы.КоличествоЧеков КАК КоличествоЧеков,
	|		Документы.СуммаПродаж КАК СуммаПродаж,
	|		Документы.СуммаДокумента КАК СуммаДокумента,
	|		Документы.Контрагент КАК Контрагент,
	|		Документы.Карточка КАК Карточка,
	|		Документы.СкидкаНаценка КАК СкидкаНаценка,
	|		Документы.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|		Документы.ДатаРеализации КАК ДатаРеализации
	|	ИЗ
	|		Документы КАК Документы
	|	ГДЕ
	|		Документы.Проведен
	|		И Документы.ЭтоПродажа) КАК ЧекиККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.Товары КАК ЧекТовары
	|		ПО (ЧекиККМ.Документ = ЧекТовары.Ссылка)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Патент)
	|ПО
	|	Номенклатура";
	
	МассивКасс = Новый Массив;
	Для каждого Стр Из Объект.КассыККМ Цикл
		Если Стр.Использовать Тогда
			МассивКасс.Добавить(Стр.КассаККМ);
		КонецЕсли;
	КонецЦикла;		
	Запрос.УстановитьПараметр("КассыККМ", МассивКасс);
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		Запрос.УстановитьПараметр("Дата", ПолучитьОперативнуюОтметкуВремени()); 
	Иначе
		Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	КонецЕсли;
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ЕстьОшибки = Ложь;
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Если ВыборкаНоменклатура.Патент > 1 Тогда
			ЕстьОшибки = Истина;	
			Выборка = ВыборкаНоменклатура.Выбрать();
			ВывестиСообщение(НСтр("ru = 'По номенклатуре %1, артикул %2, есть чеки, пробитые по разным патентам:'"),,,,, ВыборкаНоменклатура.Номенклатура, ВыборкаНоменклатура.Номенклатура.Артикул);
			Пока Выборка.Следующий() Цикл
				ВывестиСообщение(Нстр("ru = '    Чек: %1, патент: %2'"),,,,, Выборка.Документ, Выборка.Патент);	
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	Возврат ЕстьОшибки;
КонецФункции 
// Выполняет закрытие смены торговой точки
&НаКлиенте
Процедура ВыполнитьЗакрытиеСмены(Команда)
	
	Модифицированность = ЛОЖЬ;
	
	// Проверим возможность выполнения закрытия смены
	Если НЕ ПроверитьВозможностьЗакрытияСмены() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьДублиПоПатентам() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьЗакрытиеСменыЗавершение", ЭтотОбъект), "Есть товар, одновременно проданный по разным патентам. Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	// Выполнение свертки чеков ...
	ВыполнитьЗакрытиеСменыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеСменыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда		
		Возврат; 
	КонецЕСли;
	
	ВыполнитьЗакрытиеСменыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеСменыФрагмент()
	
	Перем ЕстьОшибкиСвертки, Отказ, СообщенияСверткиЧеков;
	
	СообщенияСверткиЧеков = Новый Массив;
	ЕстьОшибкиСвертки = Ложь;
	Отказ = НЕ ВыполнитьСверткуЧеков(СообщенияСверткиЧеков, ЕстьОшибкиСвертки);
	
	// Выполнение закрытия смены фискальных регистраторов ...
	Если НЕ Отказ Тогда
		Отказ = НЕ ВыполнитьЗакрытиеСменыФискальныхРегистраторов();
	КонецЕсли;
	
	// Выполнение закрытия смены авторизаторов ...
	Если НЕ Отказ Тогда
		Отказ = НЕ ВыполнитьЗакрытиеСменыАвторизаторов();
	КонецЕсли;
	
	// Выполнение регламентных операций ...
	Если НЕ Отказ Тогда
		Отказ = НЕ ВыполнитьРегламентныеОперации();
	КонецЕсли;
	
	// Если все операции выполнены успешно, то закрываем форму
	Если НЕ Отказ И НЕ ЕстьОшибкиСвертки Тогда
		Закрыть(ИСТИНА);
	КонецЕсли;
	
	ВыводРезультатаСветкиЧеков(СообщенияСверткиЧеков);

КонецПроцедуры // ВыполнитьЗакрытиеСмены()

&НаСервере
Процедура ПроверитьВозможностьИнкассации(Отказ)
	
	Для каждого СтрокаТаблицыКассККМ Из Объект.КассыККМ.НайтиСтроки(Новый Структура("Использовать", 1)) Цикл
		
		ПодразделениеКомпании    = СтрокаТаблицыКассККМ.КассаККМ.ПодразделениеКомпании;
		ОсновнойИнкассатор       = ПодразделениеКомпании.ОсновнойИнкассатор;
		ОсновнаяПлатежнаяСистема = ПодразделениеКомпании.ОсновнаяПлатежнаяСистема;
		
		Если НЕ ЗначениеЗаполнено(ОсновнойИнкассатор) Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КассыККМ",
				СтрокаТаблицыКассККМ.НомерСтроки,
				"КассаККМ"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='В параметрах подразделения %1 кассы ККМ %2 не задан Инкассатор'"),
					ПодразделениеКомпании, 
					СтрокаТаблицыКассККМ.КассаККМ
				),
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ
			);
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОсновнаяПлатежнаяСистема) Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КассыККМ",
				СтрокаТаблицыКассККМ.НомерСтроки,
				"КассаККМ"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='В параметрах подразделения %1 кассы ККМ %2 не задана Платежная система'"),
					ПодразделениеКомпании, 
					СтрокаТаблицыКассККМ.КассаККМ
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
			);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьВозможностьИнкассации()

&НаКлиенте
Функция ПроверитьВозможностьЗакрытияСмены()
	
	Отказ = ЛОЖЬ;
	
	// Проверим, что там отметил пользователь
	Если Объект.КассыККМ.НайтиСтроки(Новый Структура("Использовать", 1)).Количество()=0 И Объект.Оборудование.НайтиСтроки(Новый Структура("Использовать", 1)).Количество()=0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана касса ККМ или оборудование, на которых выполняется закрытие смены.'"),
			,
			"КассаККМ",
			,
			Отказ
		);
	КонецЕсли;
	
	// Проверим нужно ли выполнять инкассацию
	ПроверитьВозможностьИнкассации(Отказ);
	
	// Возвращаем результат завершения операции
	Возврат (НЕ Отказ);
	
КонецФункции // ПроверитьВозможностьЗакрытияСмены()

&НаСервере
Функция ТекстЗапросаПатентов()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЗакрытиеСмены.ДатаПоследнегоДокумента) КАК ДатаПоследнегоДокумента,
	|	ЗакрытиеСмены.КассаККМ КАК КассаККМ
	|ПОМЕСТИТЬ КассыККМ
	|ИЗ
	|	Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|ГДЕ
	|	ЗакрытиеСмены.Проведен
	|	И ЗакрытиеСмены.ДатаПоследнегоДокумента < &Дата
	|	И ЗакрытиеСмены.КассаККМ В(&КассыККМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытиеСмены.КассаККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Чек.Патент КАК Патент,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ Чек.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчтен
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.Чек КАК Чек
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО Чек.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ Чек.ПометкаУдаления
	|	И Чек.Дата < &Дата
	|	И Чек.КассаККМ В(&КассыККМ)
	|	И НЕ Чек.Архивный
	|	И НЕ Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекОтложенный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекНаОплату.Патент,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ ЧекНаОплату.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчтен
	|ИЗ
	|	Документ.ЧекНаОплату КАК ЧекНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ЧекНаОплату.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ЧекНаОплату.ПометкаУдаления
	|	И ЧекНаОплату.Дата < &Дата
	|	И ЧекНаОплату.КассаККМ В(&КассыККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Патент,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ ПриходныйКассовыйОрдер.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчтен
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ПриходныйКассовыйОрдер.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
	|	И ПриходныйКассовыйОрдер.Дата < &Дата
	|	И ПриходныйКассовыйОрдер.КассаККМ В(&КассыККМ)
	|	И ПриходныйКассовыйОрдер.ДляПробитияНаФР
	|	И НЕ ПриходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Патент,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ РасходныйКассовыйОрдер.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчтен
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.КассаККМ = КассыККМ.КассаККМ)
	|ГДЕ
	|	НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.Дата < &Дата
	|	И РасходныйКассовыйОрдер.КассаККМ В(&КассыККМ)
	|	И РасходныйКассовыйОрдер.ДляПробитияНаФР
	|	И НЕ РасходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.Патент КАК Патент
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	Документы.НеУчтен";
	
	Возврат ТекстЗапроса;
	
КонецФункции 
 
	
&НаСервере
Функция ВыполнитьСверткуЧеков(СообщенияСверткиЧеков = Неопределено, ЕстьОшибкиСвертки = Ложь)
	
	Если СообщенияСверткиЧеков = Неопределено Тогда
		СообщенияСверткиЧеков = Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаСверткиЧеков();  
	
	ЗапросПатенты = Новый Запрос;
	ЗапросПатенты.Текст = ТекстЗапросаПатентов();
	
	// Обработаем каждое оборудование в отдельности
	Для Каждого СтрокаТабличнойЧасти Из Объект.КассыККМ.НайтиСтроки(Новый Структура("Использовать", 1)) Цикл
		
		СписокСообщений = Новый Массив;
		
		// Каждое закрытие смены будем производить в отдельной транзакции
		
		ЗапросПатенты.УстановитьПараметр("КассыККМ", СтрокаТабличнойЧасти.КассаККМ);
		Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			ЗапросПатенты.УстановитьПараметр("Дата", ПолучитьОперативнуюОтметкуВремени()); 
		Иначе
			ЗапросПатенты.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
		КонецЕсли; 
		ВыборкаПатенты = ЗапросПатенты.Выполнить().Выбрать();
		Пока ВыборкаПатенты.Следующий() Цикл
		
			НачатьТранзакцию();	
			
			// Заблокируем сворачиваемые документы по текущей кассе ККМ
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.Чек");
			ЭлементБлокировки.УстановитьЗначение("КассаККМ", СтрокаТабличнойЧасти.КассаККМ);
			ЭлементБлокировки.УстановитьЗначение("Архивный", ЛОЖЬ);
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекНаОплату");
			ЭлементБлокировки.УстановитьЗначение("КассаККМ", СтрокаТабличнойЧасти.КассаККМ);
			Блокировка.Заблокировать();
			
			// Выполним запрос и получим пакет результатов
			Запрос = Документы.ЗакрытиеСмены.ПолучитьЗапросПоИтогамСмены(Объект, ТекстЗапроса, 
					СтрокаТабличнойЧасти.КассаККМ, ВыборкаПатенты.Патент);
			РезультатыПакета = Запрос.ВыполнитьПакет();
			
			// Проверим, имеется хотя бы один документ в результирующей выборке
			Выборка = РезультатыПакета[3].Выбрать();
			Если НЕ Выборка.Следующий() Тогда
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КассыККМ",
				СтрокаТабличнойЧасти.НомерСтроки,
				"КассаККМ"
				);
				ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
				НСтр("ru = 'При закрытии смены на кассе %1 не обнаружено проведенных документов.'"),
				СтрокаТабличнойЧасти.КассаККМ
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
				);
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			// Создаем объект документа и производим его заполнение
			ЗакрытиеСмены = Документы.ЗакрытиеСмены.СоздатьДокумент();
			ЗакрытиеСмены.ХозОперация             = Справочники.ХозОперации.ЗакрытиеСмены;
			ЗакрытиеСмены.Дата                    = Объект.Дата;
			ЗакрытиеСмены.КассаККМ                = СтрокаТабличнойЧасти.КассаККМ;
			ЗакрытиеСмены.ДатаПоследнегоДокумента = Выборка.Дата;
			ЗакрытиеСмены.Заполнить(Неопределено);
			
			ЗакрытиеСмены.Патент = ВыборкаПатенты.Патент;
			
			// Заполним сведения о товарах и об оплатах
			Документы.ЗакрытиеСмены.ЗаполнитьТабличныеЧастиДокумента(ЗакрытиеСмены, РезультатыПакета);
			
			// Произведем свертку чеков информационной базы
			Если НЕ ВыполнитьАрхивациюЧеков(РезультатыПакета[11].Выбрать(), СписокСообщений) Тогда
				ОтменитьТранзакцию();
				ЕстьОшибкиСвертки = Истина;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияСверткиЧеков, СписокСообщений, Истина);
				СписокСообщений = Новый Массив;
				Продолжить;
			КонецЕсли;
			
			ВыборкаДокументов = РезультатыПакета[15].Выбрать();
			
			Пока ВыборкаДокументов.Следующий() Цикл
				СписокСообщений.Добавить(
				СтрШаблон(НСтр("ru = 'Оплата по документу %1 учтена при закрытии смены'"), ВыборкаДокументов.Документ)
				);
			КонецЦикла;
			
			Попытка
				ЗакрытиеСмены.Записать(РежимЗаписиДокумента.Проведение);
				СписокСообщений.Добавить(СтрШаблон(
				НСтр("ru = 'Сформирован документ %1 по кассе %2.'"),
				ЗакрытиеСмены.Ссылка,
				СтрокаТабличнойЧасти.КассаККМ)
				);
			Исключение
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КассыККМ",
				СтрокаТабличнойЧасти.НомерСтроки,
				"КассаККМ"
				);
				ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
				НСтр("ru = 'При проведении документа закрытия смены на кассе %1 возникли ошибки. Операция отменена.'"),
				СтрокаТабличнойЧасти.КассаККМ
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
				);
				
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
			
			// Формируем денежные документы
			Если НЕ ВыполнитьСозданиеДокументовИнкассации(ЗакрытиеСмены, СтрокаТабличнойЧасти.НомерСтроки, СписокСообщений) Тогда
				
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
		// Обработка текущей кассы успешно завершена
		СтрокаТабличнойЧасти.Использовать = 0;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияСверткиЧеков, СписокСообщений);
		
	КонецЦикла;
	
	// Возвращаем признак успешного завершения операции
	Возврат Истина;
	
КонецФункции // ВыполнитьСверткуЧеков()

&НаСервере
Функция ВыполнитьСозданиеДокументовИнкассации(ЗакрытиеСмены, НомерСтроки, СписокСообщений)
	
	Если НЕ РазрешитьПроводитьИнкассацию Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим остатки по кассе ККМ
	ОстаткаПоКассеККМ = Документы.Инкассация.ПолучитьОстатокПоКассеККМ(ЗакрытиеСмены.КассаККМ, ЗакрытиеСмены.Дата);
	
	// Создаем документ Инкассация
	Инкассация = Документы.Инкассация.СоздатьДокумент();
	Инкассация.ХозОперация           = Справочники.ХозОперации.ИзъятиеИзКассыККМ;
	Инкассация.Дата                  = ЗакрытиеСмены.Дата+1;
	Инкассация.КассаККМ              = ЗакрытиеСмены.КассаККМ;
	Инкассация.Организация           = ЗакрытиеСмены.Организация;
	Инкассация.ПодразделениеКомпании = ЗакрытиеСмены.ПодразделениеКомпании;
	
	Инкассация.Заполнить(ЗакрытиеСмены.Ссылка);
	Инкассация.ДокументОснование = ЗакрытиеСмены.Ссылка;
	
	Инкассация.Оплаты.Очистить();
	
	// Запишем сумму инкассации в документ
	Для каждого СтрокаОстаткиККМ Из ОстаткаПоКассеККМ Цикл
		Если СтрокаОстаткиККМ.Сумма <> 0 ИЛИ СтрокаОстаткиККМ.СуммаВозврат <> 0 Тогда
			НоваяСтрока = Инкассация.Оплаты.Добавить();
			НоваяСтрока.ТипОплаты    = СтрокаОстаткиККМ.ТипОплаты;
			НоваяСтрока.Сумма        = СтрокаОстаткиККМ.Сумма;
			НоваяСтрока.СуммаВозврат = СтрокаОстаткиККМ.СуммаВозврат;
		КонецЕсли;
	КонецЦикла;
	
	// Проведем документ инкассации
	Попытка
		Инкассация.Записать(РежимЗаписиДокумента.Проведение);
		
		СписокСообщений.Добавить(СтрШаблон(
			НСтр("ru = 'Сформирован документ %1 по кассе %2.'"),
			Инкассация.Ссылка,
			Инкассация.КассаККМ)
		);
		
	Исключение
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КассыККМ",
				НомерСтроки,
				"КассаККМ"
			);
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'При проведении документа инкассации на кассе %1 возникли ошибки. Операция отменена.'"),
				ЗакрытиеСмены.КассаККМ
			),
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);

		ПричинаОшибки(Инкассация);
		Возврат Ложь;
	КонецПопытки;
	
	// Проверим нужно ли создать ПКО
		Если ПраваИНастройкиПользователя.Значение("СоздаватьПКОПриЗакрытииКассовойСмены") Тогда
				
		// Создаем документ ПКО
		ПриходныйКассовыйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		ПриходныйКассовыйОрдер.ХозОперация = Справочники.ХозОперации.ПриходныйКассовыйОрдер;
		ПриходныйКассовыйОрдер.Дата        = Инкассация.Дата + 1;
		ПриходныйКассовыйОрдер.СтатьяДДС   = Справочники.СтатьиДДС.РозничнаяВыручка;
		ПриходныйКассовыйОрдер.Заполнить(Инкассация.Ссылка);
		
		Если ПриходныйКассовыйОрдер.СуммаДокумента <> 0 Тогда
			
		// Попробуем провести документ ПКО
		Попытка
			ПриходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Проведение);
			СписокСообщений.Добавить(СтрШаблон(
				НСтр("ru = 'Сформирован документ %1.'"),
				ПриходныйКассовыйОрдер.Ссылка)
			);
		Исключение
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КассыККМ",
				НомерСтроки,
				"КассаККМ"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'При проведении документа ПКО на кассе %1 возникли ошибки. Операция отменена.'"),
					ЗакрытиеСмены.КассаККМ
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
			);

			ПричинаОшибки(ПриходныйКассовыйОрдер);
			Возврат Ложь;
		КонецПопытки;
		КонецЕсли;

		КонецЕсли;

		
	// Проверим нужно ли создать БВ
	Если ПраваИНастройкиПользователя.Значение("СоздаватьБВПриЗакрытииКассовойСмены") Тогда
		
		// Создаем документ БВ
		БанковскаяВыписка = Документы.Выписка.СоздатьДокумент();
		БанковскаяВыписка.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		БанковскаяВыписка.Дата        = Инкассация.Дата + 1;
		БанковскаяВыписка.СтатьяДДС   = Справочники.СтатьиДДС.РозничнаяВыручка;
		БанковскаяВыписка.Заполнить(Инкассация.Ссылка);
		
		Если БанковскаяВыписка.СуммаДокументаПриход <> 0
			ИЛИ БанковскаяВыписка.СуммаДокументаРасход <> 0 Тогда
		Попытка
			БанковскаяВыписка.Записать(РежимЗаписиДокумента.Проведение);
				СписокСообщений.Добавить(СтрШаблон(
				НСтр("ru = 'Сформирован документ %1.'"),
				БанковскаяВыписка.Ссылка)
				);
		Исключение
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КассыККМ",
				НомерСтроки,
				"КассаККМ"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'При проведении документа Выписка на кассе %1 возникли ошибки. Операция отменена.'"),
					ЗакрытиеСмены.КассаККМ
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
			);
	
			ПричинаОшибки(БанковскаяВыписка);
			Возврат Ложь;
		КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	

	
	// Возвращаем признак успешного завершения операции
	Возврат Истина;
	
КонецФункции // ВыполнитьСозданиеДокументовИнкассации()

&НаСервере
Функция ВыполнитьАрхивациюЧеков(ВыборкаПоЧекам, СписокСообщений)
	
	// Получим право на удаление чеков после свертки 
	УстановитьПривилегированныйРежим(Истина);
	ЧекиПослеСвертки = Константы.ЧекиПослеСвертки.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаПоЧекам.Следующий() Цикл
		
		ДокументОбъект = ВыборкаПоЧекам.Документ.ПолучитьОбъект();
		
		Если ЧекиПослеСвертки = Перечисления.ВариантыОтветов.Спрашивать Тогда
			Попытка
				ДокументОбъект.Архивный = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				СписокСообщений.Добавить(СтрШаблон(НСтр("ru = 'Выполнена архивация %1'"), ВыборкаПоЧекам.Документ));
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'При архивации %1 возникла ошибка. Операция отменена.'"),
						ВыборкаПоЧекам.Документ
					)
				);
				ПричинаОшибки(ДокументОбъект);
				Возврат Ложь;
			КонецПопытки;
		ИначеЕсли ЧекиПослеСвертки = Перечисления.ВариантыОтветов.Да Тогда
			Попытка
				ПредставлениеДокумента = Строка(ВыборкаПоЧекам.Документ);
				УстановитьПривилегированныйРежим(Истина);
				ДокументОбъект.Удалить();
				УстановитьПривилегированныйРежим(Ложь);
				СписокСообщений.Добавить(СтрШаблон(НСтр("ru = 'Выполнено удаление %1'"), ПредставлениеДокумента));
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'При удалении %1 возникла ошибка. Операция отменена.'"),
						ВыборкаПоЧекам.Документ
					)
				);

				ПричинаОшибки(ДокументОбъект);
				Возврат Ложь;
			КонецПопытки;
		ИначеЕсли ЧекиПослеСвертки = Перечисления.ВариантыОтветов.Нет Тогда
			Попытка
				ДокументОбъект.Архивный        = Истина;
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаУдаленияПриНаличииПодчиненных", Ложь);
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СписокСообщений.Добавить(СтрШаблон(НСтр("ru = 'Установлена пометка удаления %1'"), ВыборкаПоЧекам.Документ));
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'При установки пометки удаления %1 возникла ошибка. Операция отменена.'"),
						ВыборкаПоЧекам.Документ
					)
				);

				ПричинаОшибки(ДокументОбъект);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвращаем признак успешного завершения операции
	Возврат Истина;
	
КонецФункции // ВыполнитьАрхивациюЧеков()

&НаКлиенте
Функция ВыполнитьЗакрытиеСменыФискальныхРегистраторов()
	
	// Обработаем каждое оборудование в отдельности
	Для Каждого СтрокаТаблицыОборудования Из Объект.Оборудование.НайтиСтроки(Новый Структура("Использовать", 1)) Цикл
		ТипОборудования = СтрокаТаблицыОборудования.ТипОборудования;
		Если
			НЕ (ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ")
			ИЛИ ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"))
		Тогда
			Продолжить;
		КонецЕсли;
		
		Доступность = Ложь;
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ПараметрыОперации.Кассир = Кассир;
		ПараметрыОперации.КассирИНН = КассирИНН;
		
		ПараметрыДанных = Новый Структура;
		ПараметрыДанных.Вставить("Оборудование",СтрокаТаблицыОборудования.Оборудование);
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект,ПараметрыДанных);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			ОповещениеПриЗавершении,
			УникальныйИдентификатор,
			СтрокаТаблицыОборудования.Оборудование,
			ПараметрыОперации
		);
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ВыполнитьЗакрытиеСменыФискальныхРегистраторов()

&НаКлиенте
Процедура ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция успешно завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗакрытиеСменыАвторизаторов()
	
	Отказ = ЛОЖЬ;
	
	// Обработаем каждое оборудование в отдельности
	Для каждого СтрокаТаблицыОборудования Из Объект.Оборудование.НайтиСтроки(Новый Структура("Использовать,ТипОборудования", 1, ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"))) Цикл
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, СтрокаТаблицыОборудования.Оборудование);
		
	КонецЦикла;
	
	// Возвращаем признак успешного завершения операции
	Возврат (НЕ Отказ);
	
КонецФункции // ВыполнитьЗакрытиеСменыАвторизаторов()

&НаКлиенте
Процедура ЭТ_ВыполнитьОперациюЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ЭТНомерСсылкиОперации = ?(РезультатВыполнения.Свойство("СсылочныйНомер"), РезультатВыполнения.СсылочныйНомер, "");
		ЭТНомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		ЭТНомерЧека = ?(РезультатВыполнения.Свойство("НомерЧекаЭТ"), РезультатВыполнения.НомерЧекаЭТ, "");
		ЭТКодАвторизации = ?(РезультатВыполнения.Свойство("КодАвторизации"), РезультатВыполнения.КодАвторизации, "");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры // ЭТ_ВыполнитьОперациюЗавершени()

&НаКлиенте
Функция ВыполнитьРегламентныеОперации()
	
	// Зарезервировано
	
	// Возвращаем признак успешного завершения операции
	Возврат ИСТИНА;
	
КонецФункции // ВыполнитьРегламентныеОперации()

&НаСервере
Функция ЗапросТоваровЧеков()
	
	Возврат 	"ВЫБРАТЬ
	|	ЧекиККМ.КассаККМ КАК КассаККМ,
	|	ЧекиККМ.Документ КАК Документ,
	|	ЧекиККМ.ЭтоВозврат КАК ЭтоВозврат,
	|	ЧекиККМ.Контрагент КАК Контрагент,
	|	ЧекиККМ.Карточка КАК Карточка,
	|	ЧекиККМ.СкидкаНаценка КАК СкидкаНаценка,
	|	ЧекТовары.Номенклатура КАК Номенклатура,
	|	ЧекТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЧекТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекТовары.Коэффициент КАК Коэффициент,
	|	ЧекТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	|	ЧекТовары.МестоРазмещения КАК МестоРазмещения,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Количество
	|	КОНЕЦ КАК КоличествоПродано,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВозврат,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаСкидки
	|	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаСкидкиСтроки
	|	КОНЕЦ КАК СуммаСкидкиСтроки,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаВсего
	|	КОНЕЦ КАК СуммаВсего,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Количество
	|	КОНЕЦ * ЧекТовары.Коэффициент КАК КоличествоНоменклатуры,
	|	ЧекиККМ.КоличествоЧеков КАК КоличествоЧеков,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаСкидки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСкидкиВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаСкидкиСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСкидкиСтрокиВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаВсего
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВсегоВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЧекТовары.Коэффициент КАК КоличествоНоменклатурыВозврата,
	|	ЧекиККМ.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
	|	ЧекТовары.ИдентификаторТовара КАК ИдентификаторТовара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документы.КассаККМ КАК КассаККМ,
	|		Документы.ФР КАК ФР,
	|		Документы.Документ КАК Документ,
	|		Документы.Дата КАК Дата,
	|		Документы.Проведен КАК Проведен,
	|		Документы.ЭтоВозврат КАК ЭтоВозврат,
	|		Документы.ЭтоПродажа КАК ЭтоПродажа,
	|		Документы.Пробит КАК Пробит,
	|		Документы.КоличествоЧеков КАК КоличествоЧеков,
	|		Документы.СуммаПродаж КАК СуммаПродаж,
	|		Документы.СуммаДокумента КАК СуммаДокумента,
	|		Документы.Контрагент КАК Контрагент,
	|		Документы.Карточка КАК Карточка,
	|		Документы.СкидкаНаценка КАК СкидкаНаценка,
	|		Документы.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|		Документы.ДатаРеализации КАК ДатаРеализации
	|	ИЗ
	|		Документы КАК Документы
	|	ГДЕ
	|		Документы.Проведен
	|		И Документы.ЭтоПродажа) КАК ЧекиККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.Товары КАК ЧекТовары
	|		ПО ЧекиККМ.Документ = ЧекТовары.Ссылка";
	
КонецФункции

&НаСервере
Функция ЗапросОплатыЧеков()
	
	Возврат "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Документы.Дата КАК Дата
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	Документы.Проведен
	|	И Документы.НеУчтен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.ТипОплаты ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.ТипОплаты
	|		КОГДА НЕ ЧекНаОплатуОплаты.ТипОплаты ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.ТипОплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|	КОНЕЦ КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.ТипПлатежнойКарты ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.ТипПлатежнойКарты
	|		КОГДА НЕ ЧекНаОплатуОплаты.ТипПлатежнойКарты ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.ТипПлатежнойКарты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТипыПлатежныхКарт.ПустаяСсылка)
	|	КОНЕЦ КАК ТипПлатежнойКарты,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.Карточка ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.Карточка
	|		КОГДА НЕ ЧекНаОплатуОплаты.Карточка ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.Карточка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Карточки.ПустаяСсылка)
	|	КОНЕЦ КАК Карточка,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.Контрагент ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.Контрагент
	|		КОГДА НЕ ЧекНаОплатуОплаты.Контрагент ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.ДоговорВзаиморасчетов ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.ДоговорВзаиморасчетов
	|		КОГДА НЕ ЧекНаОплатуОплаты.ДоговорВзаиморасчетов ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.ДоговорВзаиморасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК ДоговорВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоПродажа
	|			ТОГДА Документы.КоличествоЧеков
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧеков,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоВозврат
	|				ИЛИ НЕ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекОплаты.Сумма, 0) - ЕСТЬNULL(ЧекОплаты.Сдача, 0)
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА НЕ Документы.ЭтоВозврат
	|				ИЛИ НЕ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекОплаты.Сумма, 0) - ЕСТЬNULL(ЧекОплаты.Сдача, 0)
	|	КОНЕЦ КАК СуммаВозврат,
	|	ВЫБОР
	|		КОГДА НЕ Документы.ЭтоПродажа
	|			ТОГДА Документы.КоличествоЧеков
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧековОплата,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоВозврат
	|				ИЛИ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекНаОплатуОплаты.Сумма, Документы.СуммаДокумента) - ЕСТЬNULL(ЧекНаОплатуОплаты.Сдача, 0)
	|	КОНЕЦ КАК СуммаОплата,
	|	ВЫБОР
	|		КОГДА НЕ Документы.ЭтоВозврат
	|				ИЛИ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекНаОплатуОплаты.Сумма, Документы.СуммаДокумента) - ЕСТЬNULL(ЧекНаОплатуОплаты.Сдача, 0)
	|	КОНЕЦ КАК СуммаВозвратОплата,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоВозврат
	|			ТОГДА Документы.КоличествоЧеков
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧековВозврат
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	Документы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Чек.Оплаты КАК ЧекОплаты
	|		ПО Документы.Документ = ЧекОплаты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
	|		ПО Документы.Документ = ЧекНаОплатуОплаты.Ссылка
	|ГДЕ
	|	Документы.Проведен
	|	И Документы.НеУчтен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.МестоРазмещения КАК МестоРазмещения,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(0) КАК КоличествоПродано,
	|	СУММА(0) КАК КоличествоВозврат,
	|	СУММА(Товары.КоличествоПродано) КАК Количество,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Товары.СуммаСкидки + Товары.СуммаСкидкиСтроки) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(Товары.КоличествоЧеков) КАК КоличествоЧеков
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.КоличествоПродано <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.Коэффициент,
	|	Товары.МестоРазмещения,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестоРазмещения,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.КассаККМ КАК Касса,
	|	Оплаты.ТипОплаты КАК ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты КАК ТипПлатежнойКарты,
	|	Оплаты.Карточка КАК Карточка,
	|	Оплаты.Контрагент КАК Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СУММА(Оплаты.КоличествоЧеков) КАК КоличествоЧеков,
	|	СУММА(Оплаты.Сумма) КАК Сумма,
	|	СУММА(0) КАК СуммаВозврат,
	|	СУММА(Оплаты.КоличествоЧековОплата) КАК КоличествоЧековОплата,
	|	СУММА(Оплаты.СуммаОплата) КАК СуммаОплата,
	|	СУММА(0) КАК СуммаВозвратОплата
	|ИЗ
	|	Оплаты КАК Оплаты
	|ГДЕ
	|	НЕ(Оплаты.Сумма = 0
	|				И Оплаты.СуммаОплата = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.КассаККМ,
	|	Оплаты.ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты,
	|	Оплаты.Карточка,
	|	Оплаты.Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Оплаты.КассаККМ,
	|	ТипОплаты,
	|	ТипПлатежнойКарты,
	|	Карточка,
	|	Контрагент,
	|	ДоговорВзаиморасчетов";
	
КонецФункции

&НаСервере
Функция ЗапросСкидкиПоЧекам()
	
	Возврат "
	|ВЫБРАТЬ
	|	Скидки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(Скидки.Сумма) КАК Сумма,
	|	СУММА(Скидки.СуммаСкидки) КАК СуммаСкидки,
	|	СУММА(Скидки.СуммаВсего) КАК СуммаВсего,
	|	Скидки.Карточка КАК Карточка,
	|	СУММА(Скидки.КоличествоЧеков) КАК КоличествоЧеков
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.СкидкаНаценка КАК СкидкаНаценка,
	|		Товары.Сумма - Товары.СуммаВозврата КАК Сумма,
	|		Товары.СуммаСкидки - Товары.СуммаСкидкиВозврата КАК СуммаСкидки,
	|		Товары.СуммаВсего - Товары.СуммаВозврата КАК СуммаВсего,
	|		Товары.Карточка КАК Карточка,
	|		Товары.КоличествоЧеков КАК КоличествоЧеков
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		НЕ Товары.СкидкаНаценка = ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СкидкаНаТовар,
	|		Товары.Сумма - Товары.СуммаВозврата,
	|		Товары.СуммаСкидкиСтроки - Товары.СуммаСкидкиСтрокиВозврата,
	|		Товары.СуммаВсего - Товары.СуммаВсегоВозврата,
	|		Товары.Карточка,
	|		Товары.КоличествоЧеков
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		НЕ Товары.СкидкаНаТовар = ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)) КАК Скидки
	|
	|СГРУППИРОВАТЬ ПО
	|	Скидки.СкидкаНаценка,
	|	Скидки.Карточка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкаНаценка";
	
КонецФункции

&НаСервере
Функция ЗапросКарточкиДопРеквизитыЧеков()
	
	Возврат "
	|ВЫБРАТЬ
	|	Товары.Контрагент КАК Контрагент,
	|	Товары.Карточка КАК Карточка,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаСкидки + Товары.СуммаСкидкиСтроки - Товары.СуммаСкидкиВозврата - Товары.СуммаСкидкиСтрокиВозврата) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсего - Товары.СуммаВсегоВозврата) КАК СуммаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА Товары.ЭтоВозврат
	|				ТОГДА -Товары.КоличествоЧеков
	|			ИНАЧЕ Товары.КоличествоЧеков
	|		КОНЕЦ) КАК КоличествоЧеков,
	|	СУММА(Товары.КоличествоНоменклатуры) КАК КоличествоНоменклатуры
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Контрагент,
	|	Товары.Карточка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Карточка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КассаККМ КАК КассаККМ,
	|	ЧекДополнительныеРеквизиты.Значение КАК Свойство,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаСкидки + Товары.СуммаСкидкиСтроки) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(Товары.КоличествоЧеков) КАК КоличествоЧеков
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.ДополнительныеРеквизиты КАК ЧекДополнительныеРеквизиты
	|		ПО Товары.Документ = ЧекДополнительныеРеквизиты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.КассаККМ,
	|	ЧекДополнительныеРеквизиты.Значение
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассаККМ,
	|	Свойство";
	
КонецФункции

&НаСервере
Функция ОкончаниеЗапросаПоЧекам()
	
	Возврат "
	|ВЫБРАТЬ
	|	ДокументЧек.БонуснаяКарта КАК БонуснаяКарта,
	|	ДокументЧек.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	ДокументЧек.КоличествоКНачислению КАК КоличествоНачисленныхБонусов,
	|	ДокументЧек.КоличествоКСписанию КАК КоличествоСписанныхБонусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документы.Карточка КАК БонуснаяКарта,
	|		Документы.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|		СУММА(Документы.КоличествоКНачислению) КАК КоличествоКНачислению,
	|		СУММА(Документы.КоличествоКСписанию) КАК КоличествоКСписанию
	|	ИЗ
	|		Документы КАК Документы
	|	ГДЕ
	|		Документы.Документ ССЫЛКА Документ.Чек
	|		И Документы.Карточка <> ЗНАЧЕНИЕ(Справочник.Карточки.ПустаяСсылка)
	|		И (Документы.КоличествоКНачислению <> 0
	|				ИЛИ Документы.КоличествоКСписанию <> 0)
	|		И Документы.Проведен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документы.Карточка,
	|		Документы.БонуснаяПрограмма) КАК ДокументЧек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	Документы.ЭтоПродажа
	|	И Документы.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.МестоРазмещения КАК МестоРазмещения,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.КоличествоВозврат) КАК Количество,
	|	СУММА(Товары.СуммаВозврата) КАК Сумма,
	|	СУММА(Товары.СуммаНДСВозврата) КАК СуммаНДС,
	|	СУММА(Товары.СуммаСкидкиВозврата + Товары.СуммаСкидкиСтрокиВозврата) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсегоВозврата) КАК СуммаВсего,
	|	СУММА(Товары.КоличествоЧеков) КАК КоличествоЧеков,
	|	Товары.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|	Товары.ДатаРеализации КАК ДатаРеализации
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.КоличествоВозврат <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.Коэффициент,
	|	Товары.МестоРазмещения,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СтавкаНДС,
	|	Товары.НомерФискальногоЧека,
	|	Товары.ДатаРеализации
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестоРазмещения,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.КассаККМ КАК Касса,
	|	Оплаты.ТипОплаты КАК ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты КАК ТипПлатежнойКарты,
	|	Оплаты.Карточка КАК Карточка,
	|	Оплаты.Контрагент КАК Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СУММА(Оплаты.КоличествоЧековВозврат) КАК КоличествоЧеков,
	|	СУММА(Оплаты.СуммаВозврат) КАК Сумма,
	|	СУММА(Оплаты.КоличествоЧековОплата) КАК КоличествоЧековОплата,
	|	СУММА(Оплаты.СуммаВозвратОплата) КАК СуммаОплата
	|ИЗ
	|	Оплаты КАК Оплаты
	|ГДЕ
	|	НЕ(Оплаты.СуммаВозврат = 0
	|				И Оплаты.СуммаВозвратОплата = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.КассаККМ,
	|	Оплаты.ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты,
	|	Оплаты.Карточка,
	|	Оплаты.Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Оплаты.КассаККМ,
	|	ТипОплаты,
	|	ТипПлатежнойКарты,
	|	Карточка,
	|	Контрагент,
	|	ДоговорВзаиморасчетов
	|;
	|	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Документ КАК Документ,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.МестоРазмещения КАК МестоРазмещения,
	|	ЧекКодыМаркировки.КодМаркировки,
	|	Товары.ЭтоВозврат КАК ЭтоВозврат,
	|	Товары.ДатаРеализации КАК ДатаРеализации
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.КодыМаркировки КАК ЧекКодыМаркировки
	|		ПО Товары.Документ = ЧекКодыМаркировки.Ссылка
	|			И Товары.ИдентификаторТовара = ЧекКодыМаркировки.ИдентификаторТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	НЕ Документы.ЭтоПродажа
	|	И Документы.НеУчтен
	|	И Документы.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Оплаты";
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСверткиЧеков()
	
	Разделитель = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	МассивТекстаЗапроса = Новый Массив;
	МассивТекстаЗапроса.Добавить(ЗапросТоваровЧеков());
	МассивТекстаЗапроса.Добавить(ЗапросОплатыЧеков());
	МассивТекстаЗапроса.Добавить(ЗапросСкидкиПоЧекам());
	МассивТекстаЗапроса.Добавить(ЗапросКарточкиДопРеквизитыЧеков());
	МассивТекстаЗапроса.Добавить(ОкончаниеЗапросаПоЧекам());
	
	Возврат СтрСоединить(МассивТекстаЗапроса, Разделитель);
	
КонецФункции

&НаКлиенте
Процедура ВыводРезультатаСветкиЧеков(РезультатСообщений)
	
	Для Каждого ТекущееСообщение Из РезультатСообщений Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекущееСообщение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

