///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Графики работы"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриСозданииНаСервере(ЭтотОбъект, Параметры, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Установим заголовок
	Заголовок = "Шаг 2: Создание графика ресурсов";
	// Установим наименование ресурса
	Элементы.РесурсыРесурс.Заголовок = Параметры.ВидРесурса;
	
	Элементы.ФормаРучноеЗаполнение.Пометка = НЕ Объект.Фиксированный;
	
	ПериодичностьСтарая =Объект.Периодичность;
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	// Дальнейшие операции выполняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСписокРесурсов(Параметры.ТаблицаРесурсов);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриОткрытии(ЭтотОбъект, Отказ) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// пометка дней недели для графиков с указываемой датой начала
	Для каждого Строки Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Строки);
	КонецЦикла;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
	// Произведем настройку параметров отображения кнопок командной панели списка График работ календарный.
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ГрафикРаботКалендарный");
	
	// Произведем настройку параметров отображения кнопок командной панели списка Смещение.
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Смещение");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  ЗавершениеРаботы     - Булево - Признак закрытия формы в процессе завершения работы приложения.
//  ТекстПредупреждения  - Булево - Сообщение пользователю не завершенной работе в данном окне.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события возникающего на клиенте при закрытии формы.
//
// Параметры:
//  ЗавершениеРаботы - Булево - Признак закрытия формы в процессе завершения работы приложения.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СтандартнаяОбработка = Ложь;
	// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы) Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы в контексте сервера.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
		
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  ИсточникВыбора    - Произвольный - Форма, в которой осуществлен выбор.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ГрафикиРаботы") Тогда
		ЗаполнитьОбъектНаОсновании(ВыбранноеЗначение);	
	КонецЕсли;
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	Если ВыбранноеЗначение = "ОбновитьГрафик" Тогда
		Элементы.ГрафикРаботКалендарный.Обновить();
	КонецЕсли;
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Объект, ЭтотОбъект.Окно, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	// Обработаем событие в контексте сервера
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  ИмяСобытия        - Строка    - Имя, идентифицирующее событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия=Неопределено)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Если оповещение сводиться к выбору значения, то переходим в обработчик другого события.
	Если ПараметрыДействия.Свойство("ВыбранноеЗначение") Тогда
		ОбработкаВыбораНаСервере(ПараметрыДействия.ВыбранноеЗначение, ПараметрыДействия);
		Возврат;
	КонецЕсли;
		
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаОповещенияНаСервере()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	//// Производим подготовку параметров события для обработки в контексте сервера
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыДействия) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаОповещенияНаСервере(ИмяСобытия, ПараметрыДействия);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект - Объект, который будет прочитан.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ГрафикРаботКалендарный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.График.Значение = Объект.Ссылка;
	НаборЗаписей.Отбор.График.Использование = Истина;
	НаборЗаписей.Прочитать();
	ЭтотОбъект.ГрафикРаботКалендарный.Загрузить(НаборЗаписей.Выгрузить());
	
	Для каждого Строка Из ГрафикРаботКалендарный Цикл
		Строка.День = ДеньГода(Строка.Дата);
	КонецЦикла;
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
		
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ГрафикИзменен Тогда
		
		ТаблицаЗаписейФормы = ЭтотОбъект.ГрафикРаботКалендарный.Выгрузить();
		
		ТаблицаЗаписейФормы.Колонки.Удалить("ИсходныйНомерСтроки");
		ТаблицаЗаписейФормы.ЗаполнитьЗначения(ТекущийОбъект.Ссылка, "График");
		
		Отказ = РегистрыСведений.ГрафикРаботКалендарный.ЗаписатьГрафикРаботКалендарный(ТекущийОбъект.Ссылка, ТаблицаЗаписейФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
		
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

// Обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//// Вызываем общий обработчик события
	//Если НЕ УправлениеДиалогомСправочникаКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// пометка дней недели для графиков с указываемой датой начала
	Для каждого Строки Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Строки);
	КонецЦикла;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
КонецПроцедуры // ПослеЗаписи()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении начале выбора реквизита "Наименование" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НаименованиеНачалоВыбораНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Объект.Наименование = Справочники.ГрафикиРаботы.СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия);
	
КонецПроцедуры // НаименованиеНачалоВыбораНаСервере()

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "Наименование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьНаименование",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,"Сформировать новое наименование?",РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	НаименованиеНачалоВыбораНаСервере();
	
КонецПроцедуры // НаименованиеНачалоВыбора()

// Обработчик события возникающего при изменении данных реквизита "Периодичность" в контексте сервера.
//
&НаСервере
Процедура ПериодичностьПриИзмененииНаСервере()
	
	Если Объект.УчетПраздников И НЕ (Объект.Периодичность = Перечисления.Периодичность.Декада ИЛИ Объект.Периодичность = Перечисления.Периодичность.Произвольный) Тогда
		Объект.УчетПраздников = Ложь;
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры //ПериодичностьПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Периодичность".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Объект.Смещение.Количество() = 0 Тогда
		ОбработкаРезультатаОповещенияПерезаполнитьСмещение(КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПерезаполнитьСмещение",ЭтотОбъект,"ПериодичностьПриИзменении");
	ПоказатьВопрос(ОписаниеОповещения,"График будет заменен. Продолжить?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры //ПериодичностьПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Производственный календарь" в контексте сервера.
//
&НаСервере
Процедура ПроизводственныйКалендарьПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры //ПроизводственныйКалендарьПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Производственный календарь".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПроизводственныйКалендарьПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ПроизводственныйКалендарьПриИзмененииНаСервере();
	
КонецПроцедуры //ПроизводственныйКалендарьПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Дата начала".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Для Каждого Строка Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Строка);
	КонецЦикла;
	
КонецПроцедуры //ДатаНачалаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСмещение

// Обработчик события возникающего при изменении данных реквизита "Смена" в контексте сервера.
//
&НаСервере
Процедура СмещениеСменаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.СменаПоУмолчаниюПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры //СмещениеСменаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Смена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеСменаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	СмещениеСменаПриИзмененииНаСервере();
	
КонецПроцедуры //СмещениеСменаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Начало рабочего времени" в контексте сервера.
//
&НаСервере
Процедура СмещениеНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //СмещениеНачалоРабочегоВремениПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Начало рабочего времени".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеНачалоРабочегоВремениПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	СмещениеНачалоРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры //СмещениеНачалоРабочегоВремениПриИзменении()

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора
// или клавиши F4 при начале выбора реквизита "Начало рабочего времени".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак
// 											выполнения стандартной (системной) обработки события.
//
&НаКлиенте
Процедура СмещениеНачалоРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры // СмещениеНачалоРабочегоВремениНачалоВыбора()

// Обработчик события возникающего при изменении данных реквизита "Конец рабочего времени" в контексте сервера.
//
&НаСервере
Процедура СмещениеКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //СмещениеКонецРабочегоВремениПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Конец рабочего времени".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеКонецРабочегоВремениПриИзменении(Элемент)
	
	// Вызываем обработчик события
	СмещениеКонецРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры //СмещениеКонецРабочегоВремениПриИзменении()

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора
// или клавиши F4 при начале выбора реквизита "Конец рабочего времени".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения
// 											стандартной (системной) обработки события.
//
&НаКлиенте
Процедура СмещениеКонецРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры // СмещениеКонецРабочегоВремениНачалоВыбора()

// Обработчик события возникающего при изменении данных реквизита "Продолжительность" в контексте сервера.
//
&НаСервере
Процедура СмещениеПродолжительностьПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //СмещениеПродолжительностьПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Продолжительность".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеПродолжительностьПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("РасчетПродолжительности",Истина);
	
	// Вызываем обработчик события
	СмещениеПродолжительностьПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры //СмещениеПродолжительностьПриИзменении()

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора
// или клавиши F4 при начале выбора реквизита "Продолжительность".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения
// 											стандартной (системной) обработки события.
//
&НаКлиенте
Процедура СмещениеПродолжительностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры // СмещениеПродолжительностьНачалоВыбора()

// Обработчик события возникающего при изменении данных реквизита "Рабочий" в контексте сервера.
//
&НаСервере
Процедура СмещениеРабочийПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.СмещениеРабочийПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //СмещениеРабочийПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Рабочий".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеРабочийПриИзменении(Элемент)
	
	// Вызываем обработчик события
	СмещениеРабочийПриИзмененииНаСервере();
	
КонецПроцедуры //СмещениеРабочийПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Рабочий".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока - Булево - Признак редактирования новой строки.
//  Копирование - Булево - Определяет режим копирования.
//
&НаКлиенте
Процедура СмещениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		// Установим вид дня
		Элемент.ТекущиеДанные.Рабочий = Истина;
		ЗаполнитьПредставлениеДня(Элемент.ТекущиеДанные);
		Элементы.Смещение.ТекущийЭлемент = Элементы.СмещениеСмена;
		
	КонецЕсли;

КонецПроцедуры //СмещениеПриНачалеРедактирования()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Рабочий".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока - Булево - Признак редактирования новой строки.
//  ОтменаРедактирования - Булево -Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура СмещениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
КонецПроцедуры //СмещениеПриОкончанииРедактирования()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки.
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево       - Признак отказа от создания формы.
//  Копирование - Булево       - Определяет режим копирования.
//  Родитель    - Ссылка       - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево       - Признак добавления группы.
//  Параметр    - Произвольный - Параметр команды, выполняемой при добавлении строки в таблицу.
//
&НаКлиенте
Процедура СмещениеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры //СмещениеПередНачаломДобавления()

// Обработчик события возникающего на клиенте перед удалением строки или группы строк.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура СмещениеПередУдалением(Элемент, Отказ)
	
	Если НЕ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры //СмещениеПередУдалением()

// Обработчик события возникающего на клиенте перед началом интерактивного изменения строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура СмещениеПриИзменении(Элемент)
	
	Для Каждого Стока Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Стока);
	КонецЦикла;
	
КонецПроцедуры //СмещениеПриИзменении()

// Обработчик события возникающего на клиенте после удаления строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеПослеУдаления(Элемент)
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
КонецПроцедуры //СмещениеПослеУдаления()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафиРаботКалендарный

// Обработчик события возникающего при изменении данных реквизита "Смена" в контексте сервера.
//
&НаСервере
Процедура ГрафикРаботКалендарныйСменаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные =  ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.СменаПоУмолчаниюПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //ГрафикРаботКалендарныйПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Смена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйСменаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ГрафикРаботКалендарныйСменаПриИзмененииНаСервере();
	
КонецПроцедуры //ГрафикРаботКалендарныйСменаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Начало рабочего времени" в контексте сервера.
//
&НаСервере
Процедура ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Начало рабочего времени".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры //ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзменении()

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора
// или клавиши F4 при начале выбора реквизита "Начало рабочего времени".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения
// 											стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйНачалоРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры // ГрафикРаботКалендарныйНачалоРабочегоВремениНачалоВыбора()

// Обработчик события возникающего при изменении данных реквизита "Конец рабочего времени" в контексте сервера.
//
&НаСервере
Процедура ГрафикРаботКалендарныйКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //ГрафикРаботКалендарныйКонецРабочегоВремениПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Конец рабочего времени".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйКонецРабочегоВремениПриИзменении(Элемент)
	
	// Вызываем обработчик события
	ГрафикРаботКалендарныйКонецРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры //ГрафикРаботКалендарныйКонецРабочегоВремениПриИзменении()

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора
// или клавиши F4 при начале выбора реквизита "Конец рабочего времени".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения
// 											стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйКонецРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры // ГрафикРаботКалендарныйКонецРабочегоВремениНачалоВыбора()

// Обработчик события возникающего при изменении данных реквизита "Продолжительность" в контексте сервера.
//
&НаСервере
Процедура ГрафикРаботКалендарныйПродолжительностьПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры //ГрафикРаботКалендарныйПродолжительностьПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Продолжительность".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйПродолжительностьПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("РасчетПродолжительности",Истина);
	
	// Вызываем обработчик события
	ГрафикРаботКалендарныйПродолжительностьПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры //ГрафикРаботКалендарныйПродолжительностьПриИзменении()

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора
// или клавиши F4 при начале выбора реквизита "Продолжительность".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения
// 											стандартной (системной) обработки события.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйПродолжительностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры // ГрафикРаботКалендарныйПродолжительностьНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ВидДня".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйВидДняПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикРаботКалендарный.ТекущиеДанные;
	Если ТекущиеДанные.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Праздник") ИЛИ ТекущиеДанные.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Выходной") Тогда
		ТекущиеДанные.Смена = ПредопределенноеЗначение("Справочник.ГрафикиРаботы.ПустаяСсылка");
		ТекущиеДанные.НачалоРабочегоВремени = '00010101';
		ТекущиеДанные.КонецРабочегоВремени = '00010101';
		ТекущиеДанные.Продолжительность = '00010101';
		ТекущиеДанные.ВидИнтервала = ПредопределенноеЗначение("Справочник.ВидыИнтервалов.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры //ГрафикРаботКалендарныйВидДняПриИзменении()

// Обработчик события возникающего на клиенте перед началом интерактивного изменения строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйПриИзменении(Элемент)
	
	ГрафикИзменен = Истина;
	
КонецПроцедуры // ГрафикРаботКалендарныйПриИзменении()

// Обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево       - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево       - Истина, если произошла отмена редактирования.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьПодвал(ГрафикРаботКалендарный,ПродолжительностьРучногоГрафика);
	ГрафикИзменен = Истина;
	
КонецПроцедуры //ГрафикРаботКалендарныйПриОкончанииРедактирования()

// Обработчик события возникающего на клиенте после удаления строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйПослеУдаления(Элемент)
	
	ОбновитьПодвал(ГрафикРаботКалендарный,ПродолжительностьРучногоГрафика);
	ГрафикИзменен = Истина;
	
КонецПроцедуры //ГрафикРаботКалендарныйПослеУдаления()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Дата".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйДатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикРаботКалендарный.ТекущиеДанные;
	ТекущиеДанные.День = ДеньГода(ТекущиеДанные.Дата);
	
КонецПроцедуры //ГрафикРаботКалендарныйДатаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Рабочий".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока - Булево - Признак редактирования новой строки.
//  Копирование - Булево - Определяет режим копирования.
//
&НаКлиенте
Процедура ГрафикРаботКалендарныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		ПрошлаяСтрока = ГрафикРаботКалендарный.НайтиПоИдентификатору(Элемент.ТекущаяСтрока-1); 
		Если НЕ ПрошлаяСтрока = Неопределено Тогда
			Элемент.ТекущиеДанные.Дата = ПрошлаяСтрока.Дата + 24*60*60;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ГрафикРаботКалендарныйПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при нажатии на кнопку "Заполнить по смене" в табличной части "Графики работ".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаГрафикиРаботЗаполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана периодичность графика'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияЗаписиГрафикаРабот", ЭтотОбъект, "ЗаполнитьГрафикиРабот");
		ПоказатьВопрос(ОбработчикПерехвата, НСтр("ru = 'Перед заполнением графика необходимо записать элемент. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьЗаполнениеГрафиковРабот();
	
КонецПроцедуры // КомандаГрафикиРаботЗаполнитьПоСмене()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Очистить" в табличной части "Графики работ".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаГрафикиРаботОчистить(Команда)
	
	Если ГрафикРаботКалендарный.Количество()>0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный", ЭтотОбъект, "Очистить");
		
		ПоказатьВопрос(ОбработчикПерехвата,"Очистить график работы?",РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаГрафикиРаботОчистить()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Перезаполнить по смене" в табличной части "Графики работ".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаГрафикиРаботВытеснитьГрафиком(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана периодичность графика'"));
		Возврат;
	КонецЕсли;
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный", ЭтотОбъект, "Вытеснить");
	
	// Формируем структуру параметров открытия дополнительной формы объекта
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Вытеснить",Истина);
	ПараметрыФормы.Вставить("ГрафикРаботы",Объект.Ссылка);
	
	// Произведем открытие формы
	ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.Заполнение",ПараметрыФормы, ЭтотОбъект,,,,ОбработчикПерехвата,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // КомандаГрафикиРаботПерезаполнитьПоСмене()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Очистить" в табличной части "Смещение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаСмещениеОчистить(Команда)
	
	Если Объект.Смещение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияКомандыСмещение", ЭтотОбъект, "КомандаСмещениеОчистить");
	
	// Формируем текст вопроса
	ТекстВопроса = НСтр("ru = 'Очистить таблицу смещения?'");
	
	// Получаем подтверждение операции от пользователя
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // КомандаСмещениеОчистить()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Перезаполнить"
// в табличной части "Графики работ календарный".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаПерезаполнить(Команда)
	
	Если Объект.Смещение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияКомандыСмещение", ЭтотОбъект, "КомандаПерезаполнить");
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.ЗаполнениеВременныхИнтервалов",ПараметрыФормы,,,,,ОбработчикПерехвата,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события возникающего на сервера при нажатии на кнопку "Ручное заполнение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура РучноеЗаполнениеНаСервере()
	
	Элементы.ФормаРучноеЗаполнение.Пометка = НЕ Элементы.ФормаРучноеЗаполнение.Пометка;
	Объект.Фиксированный = НЕ Элементы.ФормаРучноеЗаполнение.Пометка;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры //РучноеЗаполнениеНаСервере()

// Обработчик события возникающего на клиенте при нажатии на кнопку "Ручное заполнение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура РучноеЗаполнение(Команда)
	
	// Обработаем в контексте сервера
	РучноеЗаполнениеНаСервере();
	
	Если (Объект.Фиксированный И ГрафикРаботКалендарный.Количество()>0) ИЛИ ГрафикРаботКалендарный.Количество()>0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный", ЭтотОбъект, "Очистить");
		
		ПоказатьВопрос(ОбработчикПерехвата,"Очистить график работы?",РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры //РучноеЗаполнение()

&НаКлиенте
Процедура Применить(Команда)
	Если ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Оповестить("ЗавершениеЗаполненияГрафикаРаботыРесурса",ЭтаФорма.Объект,ЭтаФорма);
		//ПриЗаписиНаСервере(Ложь,Объект,Новый Структура);	
		Закрыть();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Периодичность не заполнена.'"),,"Периодичность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВестиНаОсновании(Команда)
	
	Форма = ОткрытьФорму("Справочник.ГрафикиРаботы.ФормаВыбора",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОбъектНаОсновании(Основание)
	
	ГрафикРаботКалендарный.Очистить();
	
	ОбъектОснование = Основание.ПолучитьОбъект();
	//ЗначениеВРеквизитФормы(ОбъектОснование,"Объект");
	ОбъектГрафик = РеквизитФормыВЗначение("Объект");
	// Заполним на основании
	ЗаполнитьЗначенияСвойств(ОбъектГрафик,ОбъектОснование,,"Ссылка,Родитель,Владелец");
	ОбъектГрафик.Смещение.Загрузить(ОбъектОснование.Смещение.Выгрузить());
	
	ЗначениеВРеквизитФормы(ОбъектГрафик,"Объект");
	// Прочитаем из РС записи ручного календаря
	НаборЗаписей = РегистрыСведений.ГрафикРаботКалендарный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Найти("График").Установить(ОбъектОснование.Ссылка);
	НаборЗаписей.Прочитать();
	
	ГрафикРаботКалендарный.Загрузить(НаборЗаписей.Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРесурсов(ТаблицаРесурсов)
	
	Ресурсы.ЗагрузитьЗначения(ТаблицаРесурсов);
	
КонецПроцедуры

// Обработчик результата оповещения команд заполнить и очистить смещение.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияКомандыСмещение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "КомандаПерезаполнить" Тогда
		
		Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
			
			// Заполнение таблицы
			ПерезаполнениеТаблицыСмещения(РезультатОповещения);
			ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "КомандаСмещениеОчистить" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Смещение.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияКомандыСмещение()

// Обработчик результата оповещения команд заполнить и очистить смещение.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "Вытеснить" Тогда
		
		Если РезультатОповещения = Неопределено Тогда
			Возврат;
		Иначе
			
			// Заполнение таблицы
			ВытеснитьГрафикРаботКалендарныйНаСервере(РезультатОповещения);
			ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);;
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "Заполнить" Тогда
		
		Если РезультатОповещения = Неопределено Тогда
			Возврат;
		Иначе
			
			ЗаполнитьГрафикРаботКалендарныйНаСервере(РезультатОповещения);
			ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "Очистить" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ГрафикРаботКалендарный.Очистить();
			ОбновитьПодвал(ГрафикРаботКалендарный,ПродолжительностьРучногоГрафика);
			Модифицированность = Истина;
			ГрафикИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияКомандыСмещение()

// Обработчик события возникающего на сервере при нажатии кнопки "Заполнить".
//
&НаСервере
Процедура ЗаполнитьГрафикРаботКалендарныйНаСервере(РезультатОповещения)
	
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В графике не указана периодичность'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Смещение.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен шаблон заполнения графика'"));
		Возврат;
	КонецЕсли;
	
	ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     РезультатОповещения.СубботаВыходной);
		ВыходныеДни.Вставить("Воскресенье", РезультатОповещения.ВоскресеньеВыходной);
	НовыйГрафик = Справочники.ГрафикиРаботы.ПолучитьГрафик(Объект.Ссылка,РезультатОповещения.Период.ДатаНачала,РезультатОповещения.Период.ДатаОкончания, ВыходныеДни,,,Истина);
	
	ЗаменяемыеСтроки = Новый Массив;
	Для каждого Строка Из ГрафикРаботКалендарный Цикл
		Если Строка.Дата <= РезультатОповещения.Период.ДатаОкончания И Строка.Дата >= РезультатОповещения.Период.ДатаНачала Тогда
			ЗаменяемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Удалим строки даты которых вошли в диапазон перезаполнения
	Для каждого Строка Из ЗаменяемыеСтроки Цикл
		ГрафикРаботКалендарный.Удалить(Строка);
	КонецЦикла;
	
	Для каждого Строка Из НовыйГрафик Цикл
		НоваяСтроки = ГрафикРаботКалендарный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтроки,Строка);
		НоваяСтроки.День = ДеньГода(НоваяСтроки.Дата);
	КонецЦикла;
	
	ГрафикРаботКалендарный.Сортировать("Дата");
	Модифицированность = Истина;
	ГрафикИзменен = Истина;
	
КонецПроцедуры // ЗаполнитьГрафикРаботКалендарныйНаСервере()

// Обработчик события возникающего на сервере при нажатии кнопки "Заполнить".
//
&НаСервере
Процедура ВытеснитьГрафикРаботКалендарныйНаСервере(РезультатОповещения)
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения.ГрафикРаботыОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не выбран график для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	ЗаменяемыеСтроки = Новый Массив;
	Если ТипЗнч(РезультатОповещения.ГрафикРаботыОснование) = Тип("СправочникСсылка.ПроизводственныеКалендари") Тогда
		
		Если Объект.Смещение.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнены основные параметры графика.'"));
			Возврат;
		КонецЕсли;
		
		ДанныеПроизводственногоКалендаря = Справочники.ГрафикиРаботы.ДанныеПроизводственногоКалендаря(РезультатОповещения.ГрафикРаботыОснование, РезультатОповещения.Период.ДатаНачала,РезультатОповещения.Период.ДатаОкончания);
		ДниПереноса = Новый Массив;
		
		ТекДата = РезультатОповещения.Период.ДатаНачала;
		Пока ТекДата <= РезультатОповещения.Период.ДатаОкончания Цикл
			
			// если нужно пересечение с графиком-основанием, то учитываем и его
			СтрокиОснования = ДанныеПроизводственногоКалендаря.НайтиСтроки(Новый Структура("Дата", ТекДата));
			Если СтрокиОснования.Количество() > 0 Тогда
				Если СтрокиОснования[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник ИЛИ СтрокиОснования[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					
					// Определим какие строки нужно вытеснить
					СтрокиЗамены = ГрафикРаботКалендарный.НайтиСтроки(Новый Структура("Дата",СтрокиОснования[0].Дата));
					Для каждого СтрокаЗамены Из СтрокиЗамены Цикл
						ЗаменяемыеСтроки.Добавить(СтрокаЗамены);
					КонецЦикла;
					
					// Если установлено отдельное расписание предпраздничного дня установим его
					Если СтрокиОснования[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
						
						НоваяСтроки = ГрафикРаботКалендарный.Добавить();
						НоваяСтроки.Дата = СтрокиОснования[0].Дата;
						НоваяСтроки.Смена = Справочники.Смены.ПустаяСсылка();
						НоваяСтроки.ВидДня = Перечисления.ВидДня.Праздник;
						
					Иначе
						
						// расчет максимального смещения - максимальный номер строки в ТЧ Смещение шаблона
						НачальноеСмещение = (ТекДата - Объект.ДатаНачала);
						Если Объект.Периодичность = Перечисления.Периодичность.Произвольный Тогда
							ТаблицаСмещения = Объект.Смещение.Выгрузить();
							ТаблицаСмещения.Сортировать("НомерСтроки Убыв");
							МаксимальноеСмещение = ТаблицаСмещения[0].НомерСтроки +1;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Неделя Тогда
							МаксимальноеСмещение = 7;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Декада Тогда
							МаксимальноеСмещение = 10;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Год Тогда
							НачальноеСмещение = ТекДата - НачалоГода(ТекДата);
							МаксимальноеСмещение = 366;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Квартал Тогда
							НачальноеСмещение = ТекДата - НачалоКвартала(ТекДата);
							МаксимальноеСмещение = 92;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Месяц Тогда
							НачальноеСмещение = ТекДата - НачалоМесяца(ТекДата);
							МаксимальноеСмещение = 31;
						КонецЕсли;
						
						КоличествоДней = НачальноеСмещение/(60*60*24);
						НачальноеСмещение = КоличествоДней - МаксимальноеСмещение * Цел(КоличествоДней/МаксимальноеСмещение);
						Если НачальноеСмещение < 0 Тогда
							НачальноеСмещение = МаксимальноеСмещение + НачальноеСмещение;
						КонецЕсли;
						
						ТекущееСмещение = НачальноеСмещение+1;
						СтрокаГрафика = Объект.Смещение.НайтиСтроки(Новый Структура("НомерСтроки",ТекущееСмещение));
						Если СтрокаГрафика.Количество()=0 Тогда
							Продолжить;
						КонецЕсли;
						
						// Если установлено отдельное расписание предпраздничного дня установим его
						Если ЗначениеЗаполнено(СтрокаГрафика[0].Смена) Тогда
							
							// Заполняем ТЗ по интервалам смены
							// Если задано расписание предпраздничного дня, учтем его.
							Если СтрокаГрафика[0].Смена.ИнтервалыПредпраздничногоДня.Количество()>0 Тогда
								ТаблицаИнтервалов = СтрокаГрафика[0].Смена.ИнтервалыПредпраздничногоДня;
							Иначе
								ТаблицаИнтервалов = СтрокаГрафика[0].Смена.Интервалы
							КонецЕсли;
							
							Для Каждого ИнтервалСмены Из ТаблицаИнтервалов Цикл
								НоваяСтроки = ГрафикРаботКалендарный.Добавить();
								НоваяСтроки.Дата = СтрокиОснования[0].Дата;
								НоваяСтроки.ВидДня = Перечисления.ВидДня.Предпраздничный;
								НоваяСтроки.НачалоРабочегоВремени = ИнтервалСмены.НачалоРабочегоВремени;
								НоваяСтроки.КонецРабочегоВремени = ИнтервалСмены.КонецРабочегоВремени;
								НоваяСтроки.Продолжительность = ИнтервалСмены.Продолжительность;
								НоваяСтроки.Смена = СтрокаГрафика[0].Смена;
								НоваяСтроки.ВидИнтервала = ИнтервалСмены.ВидИнтервала;
							КонецЦикла;
							
						Иначе
							
							НоваяСтроки = ГрафикРаботКалендарный.Добавить();
							НоваяСтроки.Дата = СтрокиОснования[0].Дата;
							НоваяСтроки.НачалоРабочегоВремени = СтрокаГрафика[0].НачалоРабочегоВремени;
							НоваяСтроки.КонецРабочегоВремени = СтрокаГрафика[0].КонецРабочегоВремени;
							НоваяСтроки.Продолжительность = СтрокаГрафика[0].Продолжительность;
							НоваяСтроки.Смена = Справочники.Смены.ПустаяСсылка();
							НоваяСтроки.ВидДня = Перечисления.ВидДня.Предпраздничный;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НоваяСтроки.День = ДеньГода(НоваяСтроки.Дата);
					
				КонецЕсли;
			КонецЕсли;
			
			ТекДата = ТекДата + 24*3600;
		КонецЦикла;
		
		// Удалим строки даты которых вошли в диапазон перезаполнения
		Для каждого Строка Из ЗаменяемыеСтроки Цикл
			ГрафикРаботКалендарный.Удалить(Строка);
		КонецЦикла;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(РезультатОповещения.ГрафикРаботыОснование.Периодичность) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='График <%1>: не указана периодичность'"),РезультатОповещения.ГрафикРаботыОснование
				)
			);
			Возврат;
		КонецЕсли;
		
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		НовыйГрафик = Справочники.ГрафикиРаботы.ПолучитьГрафик(РезультатОповещения.ГрафикРаботыОснование,РезультатОповещения.Период.ДатаНачала,РезультатОповещения.Период.ДатаОкончания, ВыходныеДни, ,,Истина);
		ТекДата = РезультатОповещения.Период.ДатаНачала;
		
		Для каждого Строка Из НовыйГрафик Цикл
			
			Если НЕ РезультатОповещения.ЗамещатьТолькоПраздники ИЛИ Строка.ВидДня = Перечисления.ВидДня.Праздник ИЛИ Строка.ВидДня = Перечисления.ВидДня.Предпраздничный Тогда
				
				// Заменять будем только один раз. А в полученном графике на одну дату может быть несколько строк.
				Если Строка.Дата > ТекДата Тогда
					
					// Определим какие строки нужно вытеснить
					СтрокиЗамены = ГрафикРаботКалендарный.НайтиСтроки(Новый Структура("Дата",Строка.Дата));
					Для каждого СтрокаЗамены Из СтрокиЗамены Цикл
						ЗаменяемыеСтроки.Добавить(СтрокаЗамены);
					КонецЦикла;
					ТекДата = Строка.Дата;
					
				КонецЕсли;
				
				НоваяСтроки = ГрафикРаботКалендарный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтроки,Строка);
				НоваяСтроки.День = ДеньГода(НоваяСтроки.Дата);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим строки даты которых вошли в диапазон перезаполнения
		Для каждого Строка Из ЗаменяемыеСтроки Цикл
			ГрафикРаботКалендарный.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	ГрафикРаботКалендарный.Сортировать("Дата,НачалоРабочегоВремени");
	Модифицированность = Истина;
	ГрафикИзменен = Истина;
	
КонецПроцедуры // ЗаполнитьГрафикРаботКалендарныйНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьНаименование(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСформироватьНаименование()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПерезаполнитьСмещение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		ПериодичностьПриИзмененииНаСервере();
		
		// Заполнение таблицы
		ЗаполнениеТаблицыСмещения();
		
		ПериодичностьСтарая =Объект.Периодичность;
		
	Иначе
		Объект.Периодичность = ПериодичностьСтарая;
	КонецЕсли;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
КонецПроцедуры //ОбработкаРезультатаОповещенияПерезаполнитьСмещение()

// Процедура заполняет список выбора для поля ввода времени
//
// Параметры:
//	Список								- СписокЗначений	- Список выбора элемента формы
//	ВремяНачало							- Дата				- Время с которого формируется список
//	ДобавлятьПредставлениеДлительности	- Булево			- Признак добавления в список представления длительности.
//
&НаКлиенте
Процедура ЗаполнитьСписокВыбораВремени(Список, ВремяНачало = Неопределено, ДобавлятьПредставлениеДлительности = Ложь)
	
	Список.Очистить();
	ПустаяДата = Дата("00010101");
	ДобавлятьДлительность = (ДобавлятьПредставлениеДлительности И ТипЗнч(ВремяНачало) = Тип("Дата"));
	
	Если ДобавлятьДлительность Тогда
		// Если ВремяНачало содержит так же и дату
		ЗначениеВремяНачало = ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	Иначе
		ЗначениеВремяНачало = Неопределено
	КонецЕсли;
	
	ТекВремя = ?(ЗначениеВремяНачало = Неопределено, ПустаяДата, ЗначениеВремяНачало + 60 * 60);
	
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		
		Если ДобавлятьДлительность Тогда
			ПредставлениеПериодаВремени = ПолучитьПредставлениеПериодаВремени(ЗначениеВремяНачало, ТекВремя);
			Если ЗначениеЗаполнено(ПредставлениеПериодаВремени) Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (" + ПредставлениеПериодаВремени + ")";
			КонецЕсли;
		КонецЕсли;
		
		Список.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 60 * 60;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбораВремени()

// Функция возвращает представление периода времени (1,5 часа, 6 часов, 30 минут, ...).
//
// Параметры:
//  ВремяНачало    - Дата - Время начала
//  ВремяОкончание - Дата - Время окончания.
//
// Возвращаемое значение:
//  Строка - Представление времени.
//
&НаКлиенте
Функция ПолучитьПредставлениеПериодаВремени(ВремяНачало, ВремяОкончание)
	
	ПустаяДата = Дата("00010101");
	// На случай если время содержит так же и дату
	ЗначениеВремяНачало		= ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	ЗначениеВремяОкончание	= ПустаяДата + (ВремяОкончание - НачалоДня(ВремяОкончание));
	ВремяНачалоВМинутах		= Цел((ЗначениеВремяНачало - НачалоДня(ЗначениеВремяНачало)) / 60);
	ВремяОкончанияВМинутах	= Цел((ЗначениеВремяОкончание - НачалоДня(ЗначениеВремяОкончание)) / 60);
	РазницаВМинутах = ВремяОкончанияВМинутах - ВремяНачалоВМинутах;
	Если РазницаВМинутах <= 0 Тогда
		Возврат "";
	КонецЕсли;
	// 1 минута
	// 2 - 4 минуты
	// 5 и далее - минут
	// 1 час
	// 2 - 4 часа
	// 5 часов
	// 5,5 часов
	Если РазницаВМинутах < 60 Тогда
		ВремяСтрокой = Формат(РазницаВМинутах, "ЧДЦ=0; ЧН=0; ЧГ=");
		Если РазницаВМинутах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'минута'");
		ИначеЕсли РазницаВМинутах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'минуты'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'минут'");
		КонецЕсли;
	Иначе
		РазницаВЧасах = РазницаВМинутах / 60;
		Если РазницаВЧасах = Цел(РазницаВМинутах / 60) Тогда
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=0; ЧРД=,; ЧН=0; ЧГ=");
		Иначе
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=1; ЧРД=,; ЧН=0; ЧГ=");
		КонецЕсли;
		Если РазницаВЧасах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'час'");
		ИначеЕсли РазницаВЧасах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'часа'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	Возврат ВремяСтрокой + " " + ПредставлениеВремя;
	
КонецФункции // ПолучитьПредставлениеПериодаВремени()

// Процедура заполняет представление дня в строке.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеДня(ТекущиеДанные)
	
	// пометка дней недели для графиков с указываемой датой начала
	ТекстЯчейкиДень = "";
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		ТекущиеДанные.ПредставлениеДня = ТекстЯчейкиДень + Формат(НачалоНедели(Объект.ДатаНачала) + ((ТекущиеДанные.НомерСтроки-1)*24*3600), "ДФ=ддд; ДП=Пн");
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") ИЛИ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		ТекущиеДанные.ПредставлениеДня = ТекстЯчейкиДень + Формат(Объект.ДатаНачала + ((ТекущиеДанные.НомерСтроки-1)*24*60*60),"ДФ=дд.ММ;");
	Иначе
		ТекущиеДанные.ПредставлениеДня = ТекстЯчейкиДень + ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПредставлениеДня()

// Процедура заполняет таблицы смещения
&НаКлиенте
Процедура ЗаполнениеТаблицыСмещения()
	
	Смена = ПредопределенноеЗначение("Справочник.Смены.ОсновнаяСменаКомпании");
	НачалоРабочегоВремени = "00010101090000";
	КонецРабочегоВремени = "00010101180000";
	Продолжительность = "00010101080000";
	
	Если Объект.Периодичность.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указана периодичность'"));
		Возврат;
	КонецЕсли;
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='При периодичности по циклам шаблон графика заполняется вручную'"));
		Объект.Смещение.Очистить();
	Возврат;
	КонецЕсли;
	Если (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") ИЛИ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) И Объект.ДатаНачала = '00010101' Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указана дата начала'"));
		Возврат;
	КонецЕсли;
	
	Объект.Смещение.Очистить();
	
	// Определение максимального смещения
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		КоличествоСмещений = 6;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		КоличествоСмещений = 9;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		КоличествоСмещений = 30;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		КоличествоСмещений = 91;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		КоличествоСмещений = 365;
	КонецЕсли;
	
	Для ПеременнаяСмещения = 0 По КоличествоСмещений Цикл
		СтрокаСмещение = Объект.Смещение.Добавить();
		СтрокаСмещение.Смена = Смена;
		СтрокаСмещение.НачалоРабочегоВремени = НачалоРабочегоВремени;
		СтрокаСмещение.КонецРабочегоВремени = КонецРабочегоВремени;
		СтрокаСмещение.Продолжительность = Продолжительность;
		Если (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") И ПеременнаяСмещения = 5) 
			ИЛИ (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") И ПеременнаяСмещения = 6) Тогда
			СтрокаСмещение.УдалитьВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Выходной");
			СтрокаСмещение.Рабочий = Ложь;
			СтрокаСмещение.Смена = ПредопределенноеЗначение("Справочник.Смены.ПустаяСсылка");
			СтрокаСмещение.НачалоРабочегоВремени = 0;
			СтрокаСмещение.КонецРабочегоВремени  = 0;
			СтрокаСмещение.Продолжительность = 0;
		Иначе
			СтрокаСмещение.УдалитьВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Рабочий");
			СтрокаСмещение.Рабочий = Истина;
			СтрокаСмещение.УдалитьБанковский = Истина;
		КонецЕсли;
		
		//исключения
		//квартал
		Если (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) И (ПеременнаяСмещения = 29 ИЛИ ПеременнаяСмещения = 30 ИЛИ ПеременнаяСмещения = 58 ИЛИ ПеременнаяСмещения = 59
			ИЛИ ПеременнаяСмещения = 60 ИЛИ ПеременнаяСмещения = 61 ИЛИ ПеременнаяСмещения = 89 ИЛИ ПеременнаяСмещения = 90 ИЛИ ПеременнаяСмещения = 91) Тогда
			СтрокаСмещение.Исключение = Истина;
		КонецЕсли;
		//месяц
		Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") И ПеременнаяСмещения >= 28 Тогда
			СтрокаСмещение.Исключение = Истина;
		КонецЕсли;
		//год
		Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") И ПеременнаяСмещения = 59 Тогда
			СтрокаСмещение.Исключение = Истина;
		КонецЕсли;
		
		// пометка дней недели для графиков с указываемой датой начала
		ЗаполнитьПредставлениеДня(СтрокаСмещение);
		
		// Пометка исключительных дней
		Если СтрокаСмещение.Исключение Тогда
			ТекстЯчейкиДень = "! " + ТекстЯчейкиДень;
			СтрокаСмещение.ПредставлениеДня = "! " + СтрокаСмещение.ПредставлениеДня;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнениеТаблицыСмещения()

// Перезаполнение таблицы смещения
&НаКлиенте
Процедура ПерезаполнениеТаблицыСмещения(ПараметрыПоУмолчанию)
	
	Для Каждого СтрокаСмещение Из Объект.Смещение Цикл
		Если СтрокаСмещение.Рабочий Тогда
			СтрокаСмещение.Смена = ?(ПараметрыПоУмолчанию.Свойство("Смена"),ПараметрыПоУмолчанию.Смена,ПредопределенноеЗначение("Справочник.Смены.ОсновнаяСменаКомпании"));
			СтрокаСмещение.НачалоРабочегоВремени = ?(ПараметрыПоУмолчанию.Свойство("НачалоРабочегоВремени"),ПараметрыПоУмолчанию.НачалоРабочегоВремени,("00010101090000"));
			СтрокаСмещение.КонецРабочегоВремени = ?(ПараметрыПоУмолчанию.Свойство("КонецРабочегоВремени"),ПараметрыПоУмолчанию.КонецРабочегоВремени,("00010101180000"));
			СтрокаСмещение.Продолжительность = ?(ПараметрыПоУмолчанию.Свойство("Продолжительность"),ПараметрыПоУмолчанию.Продолжительность,("00010101080000"));
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры //ПерезаполнениеТаблицыСмещения()

// Процедура обновляет текст подвала.
&НаКлиенте
Процедура ОбновитьПодвал(Таблица, Продолжительность)
	
	КоличествоСекунд = 0;
	Для Каждого Строка Из Таблица Цикл
		КоличествоСекунд = КоличествоСекунд + (Строка.Продолжительность - '00010101');
	КонецЦикла;
	КоличествоЧасов = Окр(КоличествоСекунд/3600, 1);
	
	Продолжительность = "" + КоличествоЧасов + " ч";
	
	РабочиеДни = Объект.Смещение.НайтиСтроки(Новый Структура("Рабочий",Истина));
	Элементы.СмещениеРабочий.ТекстПодвала = "" + РабочиеДни.Количество() + " рабочих";
	
КонецПроцедуры // ОбновитьПодвалСмещения()

// Обработчик результата оповещения команд заполнить и записи графика работ
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияЗаписиГрафикаРабот(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если НЕ Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
			Если ДополнительныеПараметры = "ЗаполнитьГрафикиРабот" Тогда
				ОткрытьЗаполнениеГрафиковРабот();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияЗаписиГрафикаРабот()

// Процедура для открытия формы установки параметров заполнения ТЧ ГрафикРаботКалендарный.
//
&НаКлиенте
Процедура ОткрытьЗаполнениеГрафиковРабот()
	
	ОбработчикПерехвата = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный", ЭтотОбъект, "Заполнить");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ГрафикРаботы",Объект.Ссылка);
	ПараметрыФормы.Вставить("Заполнить",Истина);
	
	// Произведем открытие формы
	ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.Заполнение",ПараметрыФормы, ЭтотОбъект,,,,ОбработчикПерехвата,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьЗаполнениеГрафиковРабот()

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
// объекта.
//
&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	//УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ВидимостьДатыНачала = ЗначениеЗаполнено(Объект.Периодичность);
	ВидимостьДатыНачала = ВидимостьДатыНачала И (Объект.Периодичность = Перечисления.Периодичность.Декада ИЛИ Объект.Периодичность = Перечисления.Периодичность.Произвольный);
	Элементы.ДатаНачала.ТолькоПросмотр = НЕ ВидимостьДатыНачала;
	
	Элементы.УчетПраздников.ТолькоПросмотр = НЕ (ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) И (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") ИЛИ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада"))) ;
	Элементы.ДетальноеРедактирование.Видимость = НЕ Объект.Фиксированный;
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Производит настройку блокировки элементов формы.
//
&НаСервере
Процедура БлокироватьЭлементыФормы()
	
	// Составим список элементов для блокировки
	СписокРеквизитов = Новый СписокЗначений();
	
	// Заблокируем элементы формы
	УправлениеДиалогомСервер.БлокироватьЭлементыФормы(ЭтотОбъект,СписокРеквизитов);
	
КонецПроцедуры // БлокироватьЭлементыФормы()

// Обработчик события возникающего при оповещении данной формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	// Вызываем общий обработчик события
	Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
		
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

#КонецОбласти

#КонецОбласти

