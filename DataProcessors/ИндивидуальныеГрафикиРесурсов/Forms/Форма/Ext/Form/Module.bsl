///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "ИндивидуальныеГрафикиРесурсов"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьСписокВидовРесурсов();
	ЗаполнитьСписокРесурсов();
	УправлениеДиалогом();
	
	Заголовок = "Шаг 1: Выберите ресурсы для изменения графика работы";

КонецПроцедуры

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия	 - Строка	 	 - Имя, идентифицирующее событие.
//  Параметр	 - Произвольный	 - Параметр сообщения.
//  Источник	 - Произвольный	 - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обнулим счетчики 
	КоличествоИзмененныхГрафиков= 0;
	КоличествоНовыхГрафиков = 0;
	КоличествоОшибок = 0;
	
	// Проверим имя события
	Если ИмяСобытия = "ЗавершениеЗаполненияГрафикаРаботыРесурса" Тогда
		
		ГрафикИзменен = Источник.ГрафикИзменен;
		// Сформируем структуру календарного графика
		СтрокиГрафикаКалендарного = Новый Структура;
		// Если есть необходимость записать график
		Если ГрафикИзменен Тогда
			СтрокиГрафикаКалендарного.Вставить("ТЧ",Источник.ГрафикРаботКалендарный);
		КонецЕсли;
		
		// Проверим вид ресурса
		Если ВидРесурса <> "Автомобили тест-драйва" Тогда
			СоздатьНаборЗаписейСправочникаГрафикаРесурсовЦехаСотрудники(
				Параметр,
				СтрокиГрафикаКалендарного,
				ГрафикИзменен,
				КоличествоИзмененныхГрафиков,
				КоличествоНовыхГрафиков,
				КоличествоОшибок
			);
		Иначе
			СоздатьНаборЗаписейСправочникаГрафикаРесурсовАвтомобили(
				Параметр,
				СтрокиГрафикаКалендарного,
				ГрафикИзменен,
				КоличествоИзмененныхГрафиков,
				КоличествоНовыхГрафиков,
				КоличествоОшибок
			);
		КонецЕсли;
		
		// Сформируем текст сообщения о результате создания/изменения графиков
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Создано графиков: %1Изменено графиков: %2Ошибок: %3'"),
			КоличествоНовыхГрафиков + Символы.ПС,
			КоличествоИзмененныхГрафиков + Символы.ПС,
			КоличествоОшибок
		);
		
		// Выведем сообщение	
		ПоказатьОповещениеПользователя(, , ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	ПодразделениеКомпанииПриИзмененииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПодразделениеКомпанииПриИзмененииНаСервере()
	
	ЗаполнитьСписокРесурсов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦехПриИзменении(Элемент)
	
	ЦехПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЦехПриИзмененииНаСервере()
	
	ЗаполнитьСписокРесурсов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРесурсаПриИзменении(Элемент)
	ЗаполнитьСписокРесурсов();
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура ИерархияПриИзменении(Элемент)
	ЗаполнитьСписокРесурсов();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьСписокРесурсов();
	Если ЗначениеЗаполнено(Организация) Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Организация);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПодразделениеКомпании.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	ЗаполнитьСписокРесурсов();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Если ПроверкаВыбранныхЗначений() Тогда
		// Получим  форму графиков ресурсов
		ОткрытьФормуГрафиковРесурсов();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран ни один ресурс.'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команда "ВыделитьВсе"
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда формы
//
&НаКлиенте
Процедура ВыделитьВсе(Команда)
	Для Каждого Элемент Из Список Цикл
		Элемент.Использование = Истина;	
	КонецЦикла;
КонецПроцедуры

// Обработчик команда "СнятьВсе"
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда формы
//
&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого Элемент Из Список Цикл
		Элемент.Использование = Ложь;	
	КонецЦикла;
КонецПроцедуры

// Обработчик команда "УдалитьВсе"
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда формы
//
&НаКлиенте
Процедура УдалитьВсе(Команда)
	Список.Очистить();
	УправлениеДиалогом();
КонецПроцедуры

// Обработчик команда "Обновить"
//
// Параметры:
//  Команда	 - КомандаФормы	 - Команда формы
//
&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьСписокРесурсов();
	УправлениеДиалогом();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Получить список сотрудников
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результат выгрузки запроса со списком сотрудников
//
&НаСервере
Функция ПолучитьСписокСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ресурс,
	|	Сотрудники.ГрафикРаботы,
	|	Сотрудники.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Сотрудники.Цех КАК Цех
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ЭтоГруппа = ЛОЖЬ";
	// В зависимости от выбора пользователя, сформируем текст запроса с условиями
	Если ЗначениеЗаполнено(ПодразделениеКомпании) И ЗначениеЗаполнено(Цех) Тогда
		Если Не Иерархия Тогда
			Запрос.Текст = Запрос.Текст + "
			| И
			|	Сотрудники.ПодразделениеКомпании = &ПодразделениеКомпании
			|	И Сотрудники.Цех = &Цех";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| И
			|	(Сотрудники.ПодразделениеКомпании = &ПодразделениеКомпании ИЛИ
			|	Сотрудники.ПодразделениеКомпании.Родитель =  &ПодразделениеКомпании) И
			|	(Сотрудники.Цех = &Цех ИЛИ
			|	Сотрудники.Цех.Родитель = &Цех)";
		КонецЕсли;
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Цех", Цех);	
	ИначеЕсли ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		Если Не Иерархия Тогда
			Запрос.Текст = Запрос.Текст + "
			| И
			|	Сотрудники.ПодразделениеКомпании = &ПодразделениеКомпании";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| И
			|	(Сотрудники.ПодразделениеКомпании = &ПодразделениеКомпании ИЛИ
			|	Сотрудники.ПодразделениеКомпании.Родитель =  &ПодразделениеКомпании)";	
		КонецЕсли;
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	ИначеЕсли ЗначениеЗаполнено(Цех) Тогда
		Если Не Иерархия Тогда
			Запрос.Текст = Запрос.Текст + "
			| И
			|	Сотрудники.Цех = &Цех";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| И
			|	(Сотрудники.Цех = &Цех ИЛИ
			|	Сотрудники.Цех.Родитель = &Цех)";
		КонецЕсли;
		Запрос.УстановитьПараметр("Цех", Цех);		
	КонецЕсли;
	// Дополнительный отбор по подразделению и организации	
	Если Не ЗначениеЗаполнено(ПодразделениеКомпании) И Не ЗначениеЗаполнено(Цех) Тогда 
		Запрос.Текст = Запрос.Текст + "
		| И
		|	(&ФлагДолжности ИЛИ Сотрудники.Должность = &Должность )И(&ФлагОрганизации ИЛИ Сотрудники.Организация = &Организация)";	
	Иначе
		Запрос.Текст = Запрос.Текст + "
		| И (&ФлагДолжности ИЛИ Сотрудники.Должность = &Должность )И(&ФлагОрганизации ИЛИ Сотрудники.Организация = &Организация)";	
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",?(ЗначениеЗаполнено(Организация),Организация,Неопределено));
	Запрос.УстановитьПараметр("Должность",?(ЗначениеЗаполнено(Должность),Должность,Неопределено));
	Запрос.УстановитьПараметр("ФлагДолжности",?(ЗначениеЗаполнено(Должность),Ложь,Истина));
	Запрос.УстановитьПараметр("ФлагОрганизации",?(ЗначениеЗаполнено(Организация),Ложь,Истина));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция - Получить список цехов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результат выгрузки запроса со списком цехов
//
&НаСервере
Функция ПолучитьСписокЦехов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Цеха.Ссылка КАК Ресурс,
	|	Цеха.ГрафикРаботы,
	|	Цеха.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Цеха.Ссылка КАК Цех
	|ИЗ
	|	Справочник.Цеха КАК Цеха";
	// В зависимости от выбора пользователя, сформируем текст запроса с условиями
	Если ЗначениеЗаполнено(ПодразделениеКомпании) И ЗначениеЗаполнено(Цех) Тогда
		Если Не Иерархия Тогда
			Запрос.Текст = Запрос.Текст + "
			| ГДЕ
			|	Цеха.ПодразделениеКомпании = &ПодразделениеКомпании
			|	И Цеха.Ссылка = &Цех";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| ГДЕ
			|	(Цеха.ПодразделениеКомпании = &ПодразделениеКомпании ИЛИ
			|	Цеха.ПодразделениеКомпании.Родитель =  &ПодразделениеКомпании) И
			|	(Цеха.Ссылка = &Цех ИЛИ
			|	Цеха.Ссылка.Родитель = &Цех)";	
		КонецЕсли;
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Цех", Цех);	
	ИначеЕсли ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		Если Не Иерархия Тогда
			Запрос.Текст = Запрос.Текст + "
			| ГДЕ
			|	Цеха.ПодразделениеКомпании = &ПодразделениеКомпании";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| ГДЕ
			|	(Цеха.ПодразделениеКомпании = &ПодразделениеКомпании ИЛИ
			|	Цеха.ПодразделениеКомпании.Родитель =  &ПодразделениеКомпании)";	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	ИначеЕсли ЗначениеЗаполнено(Цех) Тогда
		Если Не Иерархия Тогда
			Запрос.Текст = Запрос.Текст + "
			| ГДЕ
			|	Цеха.Ссылка = &Цех";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| ГДЕ
			|	(Цеха.Ссылка = &Цех ИЛИ
			|	Цеха.Ссылка.Родитель = &Цех)";			
		КонецЕсли;
		Запрос.УстановитьПараметр("Цех", Цех);		
	КонецЕсли;		
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция - Получить список автомобилей
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результат выгрузки запроса со списком автомобилей
//
&НаСервере
Функция ПолучитьСписокАвтомобилей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеАктивыВЭксплуатацииОстатки.Автомобиль КАК Ресурс,
	|	ПрочиеАктивыВЭксплуатацииОстатки.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	АвтомобилиДополнительныеРеквизиты.Значение КАК ГрафикРаботы
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(&Период,";
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		Если Не Иерархия Тогда		
			Запрос.Текст = Запрос.Текст + "
			|	 ПодразделениеКомпании = &ПодразделениеКомпании";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	 (ПодразделениеКомпании = &ПодразделениеКомпании ИЛИ ПодразделениеКомпании.Родитель = &ПодразделениеКомпании)";			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " ) КАК ПрочиеАктивыВЭксплуатацииОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Автомобили.ДополнительныеРеквизиты КАК АвтомобилиДополнительныеРеквизиты
	|		ПО ПрочиеАктивыВЭксплуатацииОстатки.Автомобиль = АвтомобилиДополнительныеРеквизиты.Ссылка
	|ГДЕ
	|	АвтомобилиДополнительныеРеквизиты.Свойство = &Свойство";
		
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ГрафикРаботы);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура - Сформировать список видов ресурсов
// Формирует список выбора ресурсов
//
&НаКлиенте
Процедура СформироватьСписокВидовРесурсов()
	Элементы.ВидРесурса.СписокВыбора.Добавить("Автомобили тест-драйва");
	Элементы.ВидРесурса.СписокВыбора.Добавить("Цеха");
	Элементы.ВидРесурса.СписокВыбора.Добавить("Сотрудники");	
	ВидРесурса = "Автомобили тест-драйва";
КонецПроцедуры

// Процедура - Заполнить список ресурсов
// Заполняет таблицу значений данными запроса
//
&НаСервере
Процедура ЗаполнитьСписокРесурсов()
	Если ВидРесурса = "Сотрудники" Тогда    
		Список.Загрузить(ПолучитьСписокСотрудников());		
	ИначеЕсли ВидРесурса = "Цеха" Тогда
		Список.Загрузить(ПолучитьСписокЦехов());	
	ИначеЕсли ВидРесурса = "Автомобили тест-драйва" Тогда
		Список.Загрузить(ПолучитьСписокАвтомобилей());
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыФормыРедактирования(ПараметрыФормы)
	ТаблицаРесурсов = Новый Массив;
	
	//Массив = Новый Массив;
	//Массив.Добавить(Тип("СправочникСсылка.Цеха"));
	//Массив.Добавить(Тип("СправочникСсылка.Сотрудники"));
	//Массив.Добавить(Тип("СправочникСсылка.ПрочиеАктивы"));

	//ТаблицаРесурсов.Колонки.Добавить("Ресурс",Новый ОписаниеТипов(Массив));
	Для Каждого Ресурс Из Список Цикл
		Если Ресурс.Использование Тогда
			ТаблицаРесурсов.Добавить(Ресурс.Ресурс); 
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("ТаблицаРесурсов",ТаблицаРесурсов);
	
КонецПроцедуры

// Процедура - Записать календарный график
//  Пишет в регистр сведений записи календарного графика.
//
// Параметры:
//  ТекущийОбъект	 - СправочникСсылка.ГрафикиРаботы	 - График работы для которого создается календарь
//  Источник		 - ДанныеФормыСтруктураСКоллекцией	 - График работы календарный.
//
&НаСервере
Процедура ЗаписатьКалендарныйГрафик(ТекущийОбъект, Источник)
	
	// Получим таблицу значений
	ТаблицаЗаписейФормы = Источник.Выгрузить();
	ТаблицаЗаписейФормы.Колонки.Удалить("ИсходныйНомерСтроки");
	ТаблицаЗаписейФормы.ЗаполнитьЗначения(ТекущийОбъект.Ссылка, "График");
	
	// Получим записи РС
	РегистрыСведений.ГрафикРаботКалендарный.ЗаписатьГрафикРаботКалендарный(ТекущийОбъект.Ссылка, ТаблицаЗаписейФормы);
	
КонецПроцедуры

// Функция - Проверка выбранных значений
//  Проверяет выбрано ли хоть одно значение в таблице
// 
// Возвращаемое значение:
//  Булево - Признак того, что дальнейшие действия возможны.
//
&НаКлиенте
Функция ПроверкаВыбранныхЗначений()
	Для Каждого Ресурс Из Список Цикл
		Если Ресурс.Использование Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Функция - Сформировать строку наименования
//  Формируем начало заголовка графика ресурсов
// 
// Возвращаемое значение:
//  Строка - Начало наименования графика ресурсов.
//
&НаСервере
Функция СформироватьСтрокуНаименования()
	
	Если ВидРесурса = "Автомобили тест-драйва" Тогда
		Возврат "График работы автомобиля ";	
	ИначеЕсли ВидРесурса = "Цеха" Тогда
		Возврат "График работы цеха ";
	ИначеЕсли ВидРесурса = "Сотрудники" Тогда
		Возврат "График работы сотрудника ";
	Иначе
		Возврат "График работы для ";
	КонецЕсли;
	
КонецФункции

// Процедура - Создать набор записей справочника графика ресурсов автомобили
//  Создает графики для каждого из ресурсов цеха/сотрудники.
//
// Параметры:
//  ОбъектРесурса			 - ДанныеФормыСтруктура	 - Не записан объект графика ресурсов
//  Источник				 - Структура			 - Содержит в себе таблицу с календарными графиками, заполненными вручную
//  ГрафикИзменен			 - Булево				 - Признак того, что необходимо записывать календарные графики в регистр сведений
//  КоличествоИзмененныхГрафиков	 - Число				 - Количество измененных графиков
//  КоличествоНовыхГрафиков		 - Число				 - Количество созданных графиков
//  КоличествоОшибок				 - Число				 - Количество ошибок в процессе создания.
//
&НаСервере
Процедура СоздатьНаборЗаписейСправочникаГрафикаРесурсовЦехаСотрудники(ОбъектРесурса, Источник, ГрафикИзменен,
		КоличествоИзмененныхГрафиков, КоличествоНовыхГрафиков, КоличествоОшибок)
	
	// Получим объект графика работы
	Набор = ДанныеФормыВЗначение(ОбъектРесурса,Тип("СправочникОбъект.ГрафикиРаботы"));
	// Сформируем наименование
	СтрокаНаименования = СформироватьСтрокуНаименования();
	// Пройдемся по ресурсам
	Для Каждого Ресурс Из Список Цикл
		// Для ресурсов которые выбраны
		Если Ресурс.Использование Тогда
			// Если графика у ресурса, нет то создадим новый
			Если Ресурс.ГрафикРаботы = Справочники.ГрафикиРаботы.ПустаяСсылка()
				И Не ЗначениеЗаполнено(Ресурс.Ресурс.ГрафикРаботы) Тогда
				// Копируем объект
				КопияОбъекта = Набор.Скопировать();
				// Зададим наименование
				КопияОбъекта.Наименование = СтрокаНаименования+Ресурс.Ресурс.Наименование;
				КопияОбъекта.УстановитьНовыйКод("Ц_");
				// Дальше все в попытке
				Попытка
					// Запишем новый график  
					КопияОбъекта.ОбменДанными.Загрузка = Истина;
					КопияОбъекта.Записать();
					КопияОбъекта.ОбменДанными.Загрузка = Ложь;
					КоличествоНовыхГрафиков = КоличествоНовыхГрафиков + 1;
					
					// Запишем календарный график
					Если ГрафикИзменен Тогда
						ЗаписатьКалендарныйГрафик(КопияОбъекта, Источник.ТЧ);
					КонецЕсли;
					
					// Получим объект ресурса, для того чтобы применить к нему вновь созданный график
					РесурсОбъект = Ресурс.Ресурс.ПолучитьОбъект();
					РесурсОбъект.ГрафикРаботы = КопияОбъекта.Ссылка;
					// Запишем ресурс
					РесурсОбъект.Записать();
					Ресурс.ГрафикРаботы = КопияОбъекта.Ссылка;
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецПопытки;
			// Если график у ресурса есть, то изменим его
			Иначе
				// Получим график работы ресурса 
				Если Ресурс.ГрафикРаботы <> Справочники.ГрафикиРаботы.ПустаяСсылка() Тогда
					ГрафикРаботыОбъект = Ресурс.ГрафикРаботы.ПолучитьОбъект();
				Иначе					
					ГрафикРаботыОбъект = Ресурс.Ресурс.ГрафикРаботы.ПолучитьОбъект();
				КонецЕсли;

				// Заполним значения
				ЗаполнитьЗначенияСвойств(ГрафикРаботыОбъект,Набор,,"Наименование,Родитель,Владелец,Код");
				ГрафикРаботыОбъект.Смещение.Загрузить(Набор.Смещение.Выгрузить());
				
				// Запишем календарный график
				Если ГрафикИзменен Тогда
					ЗаписатьКалендарныйГрафик(ГрафикРаботыОбъект, Источник.ТЧ);
				КонецЕсли;
				
				// Дальше все в попытке
				Попытка
					// Запишем объект
					ГрафикРаботыОбъект.ОбменДанными.Загрузка = Истина;
					ГрафикРаботыОбъект.Записать();
					ГрафикРаботыОбъект.ОбменДанными.Загрузка = Ложь;
					КоличествоИзмененныхГрафиков = КоличествоИзмененныхГрафиков + 1;
					Ресурс.ГрафикРаботы =  ГрафикРаботыОбъект.Ссылка;
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Создать набор записей справочника графика ресурсов автомобили
//  Создает графики для каждого из ресурсов автомобили.
//
// Параметры:
//  ОбъектРесурса - ДанныеФормыСтруктура - Не записан объект графика ресурсов
//  Источник - Структура - Содержит в себе таблицу с календарными графиками, заполненными в ручную
//  ГрафикИзменен - Булево - Признак того, что необходимо записывать календарные графики в регистр сведений
//  КоличествоИзмененныхГрафиков - Число - Количество измененных графиков
//  КоличествоНовыхГрафиков - Число - Количество созданных графиков
//  КоличествоОшибок - Число - Количество ошибок в процессе создания.
//
&НаСервере
Процедура СоздатьНаборЗаписейСправочникаГрафикаРесурсовАвтомобили(ОбъектРесурса, Источник, ГрафикИзменен,
		КоличествоИзмененныхГрафиков, КоличествоНовыхГрафиков, КоличествоОшибок)
	
	// Получим объект графика работы
	Набор = ДанныеФормыВЗначение(ОбъектРесурса,Тип("СправочникОбъект.ГрафикиРаботы"));
	
	// Сформируем наименование
	СтрокаНаименования = СформироватьСтрокуНаименования();
	
	// Пройдемся по ресурсам
	Для Каждого Ресурс Из Список Цикл
		// Для ресурсов которые выбраны
		Если Ресурс.Использование Тогда
			// Найдем в доп реквизитах реквизит графика работы
			Для Каждого Реквизит Из Ресурс.Ресурс.ДополнительныеРеквизиты Цикл
				Если Реквизит.Свойство = "График работы" Тогда
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			// Если графика у ресурса, нет то создадим новый
			Если Ресурс.ГрафикРаботы = Справочники.ГрафикиРаботы.ПустаяСсылка() И Реквизит = Неопределено Тогда
				// Копируем объект
				КопияОбъекта = Набор.Скопировать();
				КопияОбъекта.УстановитьНовыйКод("Ц_");
				// Зададим наименование
				КопияОбъекта.Наименование = СтрокаНаименования+Ресурс.Ресурс.Наименование;
				// Дальше все в попытке
				Попытка
					// Запишем новый график
					КопияОбъекта.ОбменДанными.Загрузка = Истина;
					КопияОбъекта.Записать();
					КопияОбъекта.ОбменДанными.Загрузка = Ложь;
					КоличествоНовыхГрафиков = КоличествоНовыхГрафиков + 1;
					
					// Запишем календарный график 
					Если ГрафикИзменен Тогда
						ЗаписатьКалендарныйГрафик(КопияОбъекта, Источник.ТЧ);
					КонецЕсли;
					
					// Получим объект ресурса, для того чтобы применить к нему вновь созданный график
					РесурсОбъект = Ресурс.Ресурс.ПолучитьОбъект();
					// Т.к. для автомобиля, графики лежат в доп реквизитах, то сформируем новый реквизит
					ДопРеквизиты = РесурсОбъект.ДополнительныеРеквизиты;
					Реквизит = ДопРеквизиты.Добавить();
					Реквизит.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ГрафикРаботы;
					Реквизит.Значение = КопияОбъекта.Ссылка;
					// Запишем ресурс
					РесурсОбъект.Записать();
					Ресурс.ГрафикРаботы = КопияОбъекта.Ссылка;
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецПопытки;
				// Если график у ресурса есть, то изменим его
			Иначе						
				// Получим график работы ресурса 
				Если Ресурс.ГрафикРаботы <> Справочники.ГрафикиРаботы.ПустаяСсылка() Тогда
					ГрафикРаботыАвто = Ресурс.ГрафикРаботы.ПолучитьОбъект();
				Иначе
					ГрафикРаботыАвто = Реквизит.Значение.ПолучитьОбъект();
				КонецЕсли;
				
				// Заполним значения
				ЗаполнитьЗначенияСвойств(ГрафикРаботыАвто, Набор, , "Наименование,Родитель,Владелец,Код");
				ГрафикРаботыАвто.Смещение.Загрузить(Набор.Смещение.Выгрузить());
				
				// Запишем календарный график 
				Если ГрафикИзменен Тогда
					ЗаписатьКалендарныйГрафик(ГрафикРаботыАвто, Источник.ТЧ);
				КонецЕсли;
				
				// Дальше все в попытке
				Попытка
					// Запишем объект
					ГрафикРаботыАвто.ОбменДанными.Загрузка = Истина;
					ГрафикРаботыАвто.Записать();
					ГрафикРаботыАвто.ОбменДанными.Загрузка = Ложь;
					КоличествоИзмененныхГрафиков = КоличествоИзмененныхГрафиков + 1;
					Ресурс.ГрафикРаботы = ГрафикРаботыАвто.Ссылка; 
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Функция - Открыть форму графиков ресурсов
//
&НаКлиенте
Процедура ОткрытьФормуГрафиковРесурсов()
	
	ПараметрыФормы = Новый Структура;
	ПолучитьПараметрыФормыРедактирования(ПараметрыФормы);
	ПараметрыФормы.Вставить("ВидРесурса",ВидРесурса);
	Форма = ОткрытьФорму("Обработка.ИндивидуальныеГрафикиРесурсов.Форма.ФормаРедактированияГрафика",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Производит настройку параметров отображения элементов управления диалога в зависимости от значений реквизитов
//  объекта.
//
&НаКлиенте
Процедура УправлениеДиалогом()
	
	// Установим доступность отбора по цехам
	// т.к. автомобиль для тест-драйва не будет кататься по цеху.
	Если ВидРесурса = "Автомобили тест-драйва" Тогда
		Элементы.Список.ПодчиненныеЭлементы.Ресурс.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Автомобили");
		Элементы.Цех.Доступность = Ложь;
	Иначе
		Элементы.Цех.Доступность = Истина;
	КонецЕсли;
	
	// Видимость дополнительного отбора
	Если ВидРесурса = "Сотрудники" Тогда
		Элементы.Список.ПодчиненныеЭлементы.Ресурс.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Элементы.ГруппаОтбораДополнительная.Видимость = Истина;
		Элементы.Организация.Видимость = Истина;
	Иначе
		Элементы.Организация.Видимость = Ложь;
		Элементы.ГруппаОтбораДополнительная.Видимость = Ложь;		
	КонецЕсли;
	
	// Управление командами в зависимости от количества элементов в таблице значений "Список"
	Если Список.Количество() = 0 Тогда
		Элементы.СписокКоманднаяПанель.ПодчиненныеЭлементы.ГруппаВыделения.Доступность = Ложь;
		Элементы.СписокКоманднаяПанель.ПодчиненныеЭлементы.СписокУдалитьВсе.Доступность = Ложь;
	Иначе
		Элементы.СписокКоманднаяПанель.ПодчиненныеЭлементы.ГруппаВыделения.Доступность = Истина;
		Элементы.СписокКоманднаяПанель.ПодчиненныеЭлементы.СписокУдалитьВсе.Доступность = Истина;		
	КонецЕсли;
	
	Если ВидРесурса = "Цеха" Тогда
		Элементы.Список.ПодчиненныеЭлементы.Ресурс.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Цеха");
	КонецЕсли;
	
	// Установим заголовок ресурса в списке 
	Элементы.Список.ПодчиненныеЭлементы.Ресурс.Заголовок = ВидРесурса;
КонецПроцедуры

#КонецОбласти

