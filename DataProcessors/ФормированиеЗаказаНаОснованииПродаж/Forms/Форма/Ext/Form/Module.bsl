///////////////////////////////////////////////////////////////////////////////
// Модуль формы обработки "Формирование заказа на основании продаж"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отбор") Тогда
		
		Если Параметры.Отбор.Свойство("СрокПоставки") Тогда
			
			Если НЕ ЗначениеЗаполнено(Параметры.Отбор.СрокПоставки) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан срок поставки.'"),,,,Отказ);
			Иначе
				СрокПоставки = Параметры.Отбор.СрокПоставки;
				Объект.ДатаТекущегоЗаказа = НачалоДня(СрокПоставки);
				Объект.ДатаСледующегоЗаказа = НачалоДня(ДобавитьМесяц(СрокПоставки,1));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("Дата") Тогда
			
			Если НЕ ЗначениеЗаполнено(Параметры.Отбор.Дата) Тогда
				Дата = ТекущаяДатаСеанса();
			Иначе
				Дата = Параметры.Отбор.Дата;
			КонецЕсли;
			
			Объект.ДатаФормированияЗаказа = КонецДня(Дата);
			Период.ДатаНачала = НачалоМесяца(Дата);
			Период.ДатаОкончания = КонецДня(Дата);
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("Контрагент") Тогда
			
			Если НЕ ЗначениеЗаполнено(Параметры.Отбор.СрокПоставки) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан Контрагент.'"),,,,Отказ);
			Иначе
				Объект.Контрагент = Параметры.Отбор.Контрагент;
			КонецЕсли;
			
		КонецЕсли;
			
		Объект.УчитыватьОтсутствиеНаСкладе = Истина;
		
	КонецЕсли;
	
	Объект.ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
	Объект.Подразделение = ПараметрыСеанса.ПодразделениеКомпании;
	Объект.Режим_Округления = "НеОкруглять";
	
	Элементы.ФормаВыбрать.Доступность = Ложь;
	
	НастроитьПолеОтбора();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

// Обработчик события возникающего на клиенте при изменении реквизита "Количество".
//
// Параметры:
//  Элемент - Переключатель - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущееДанные = Элементы.Товары.ТекущиеДанные;
	ТекущееДанные.Использование = Истина;
	
КонецПроцедуры //ТоварыКоличествоПриИзменении()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "Выбрать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Выбрать(Команда)
	
	Товары = Новый Массив;
	Для Каждого СтрокаРекомендуем Из Объект.Товары Цикл
		Если СтрокаРекомендуем.Использование Тогда
			НоваяСтрока = Новый Структура("Номенклатура, Количество", СтрокаРекомендуем.Номенклатура, СтрокаРекомендуем.Количество);
			Товары.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Закрыть(Товары);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры //Выбрать()

// Обработчик события возникающего на клиенте при выполнении команды "Выбрать" в контексте сервера.
//
&НаСервере
Процедура АнализНаСервере()
	
	Объект.ДатаНачалаАнализа = Период.ДатаНачала;
	Объект.ДатаКонцаАнализа = Период.ДатаОкончания;
	
	Обработки.ФормированиеЗаказаНаОснованииПродаж.СформироватьРезультат(Объект,Отбор);
	Если Объект.Товары.Количество()>0 Тогда
		Элементы.ФормаВыбрать.Доступность = Истина;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	
КонецПроцедуры // АнализНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Анализ".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Анализ(Команда)
	
	// Обработаем в контексте сервера
	АнализНаСервере()
	
КонецПроцедуры //Анализ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляем дополнительные отборы
&НаСервере
Процедура НастроитьПолеОтбора()
	
	// заполним быстрые отборы
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "СкладКомпании";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.СкладыКомпании.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Склад";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеКомпании";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Подразделение";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Организация";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.Организации.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Организация";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Номенклатура";
	НовыйОтбор.ВидСравнения   = ВидСравнения.ВИерархии;
	НовыйОтбор.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Номенклатура";
	
КонецПроцедуры // НастроитьПолеОтбора()

// Обработчик начала выбора поля "Вид сравнение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ВидСравнения.Равно,              Строка(ВидСравнения.Равно));
	СписокВыбора.Добавить(ВидСравнения.НеРавно,            Строка(ВидСравнения.НеРавно));
	СписокВыбора.Добавить(ВидСравнения.ВСписке,            Строка(ВидСравнения.ВСписке));
	СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии,  Строка(ВидСравнения.ВСпискеПоИерархии));
	СписокВыбора.Добавить(ВидСравнения.ВИерархии,          Строка(ВидСравнения.ВИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСписке,          Строка(ВидСравнения.НеВСписке));
	СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии,Строка(ВидСравнения.НеВСпискеПоИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВИерархии,        Строка(ВидСравнения.НеВИерархии));
	
КонецПроцедуры // ОтборВидСравненияНачалоВыбора()

// Обработчик события возникающего на клиенте при изменении реквизита "Вид сравнения".
//
// Параметры:
//  Элемент - Переключатель - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений") И ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке
		 И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
		Значение = ТекущиеДанные.ПравоеЗначение[0].Значение;
		ТекущиеДанные.ПравоеЗначение.Очистить();
		ОтборПравоеЗначениеНачалоВыбора(Элементы.ОтборПравоеЗначение, Значение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВидСравненияПриИзменении()

// Функция определения того, что отбор выполняется по списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	Результат = Ложь;
	Если ВидСравненияОтбора = ВидСравнения.ВСписке
		ИЛИ ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии
		ИЛИ ВидСравненияОтбора = ВидСравнения.НеВСписке
		ИЛИ ВидСравненияОтбора= ВидСравнения.НеВСпискеПоИерархии Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОтборПоСписку()

// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры //ОповещениеВыбораЗначенияОтбора()

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
			
		СписокВыбора =  ТекущиеДанные.ПравоеЗначение;
		
		Если ТекущиеДанные.ЛевоеЗначение = "СкладКомпании" Тогда
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Организация" Тогда
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       Новый ОписаниеТипов("СправочникСсылка.Организации"));
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Номенклатура" Тогда
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ПодразделениеКомпании" Тогда
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		КонецЕсли;
			
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВИерархии
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		Если ТекущиеДанные.ЛевоеЗначение = "СкладКомпании" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Организация" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
			Если ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Номенклатура" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ПодразделениеКомпании" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		КонецЕсли;
		
		Если ДанныеВыбора <> Неопределено Тогда
			ТекущиеДанные.ПравоеЗначение = ДанныеВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПравоеЗначениеНачалоВыбора()

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборПравоеЗначениеНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	ИначеЕсли Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВидСравненияНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

#КонецОбласти
