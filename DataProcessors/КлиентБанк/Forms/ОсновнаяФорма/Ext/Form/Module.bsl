
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьСписокОрганизацияБанкСчет();
	УстановитьДополнительныеПараметры();
	
	// Проверяем требуется выполнять прочие операции.
	Если ПраваИНастройкиПользователя.Значение("КонтролироватьСоответствиеОрганизацииПодразделения") Тогда
		
		Если Не Элементы.Найти("ДокументыКИмпортуПодразделение") = Неопределено Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
				Элементы.ДокументыКИмпортуПодразделение.ПараметрыВыбора,
				"Отбор.Организация",
				Объект.Организация
			);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтбор(Элементы.ДокументыКИмпортуДокумент.ПараметрыВыбора, "Отбор.ХозОперация");
	УстановитьВидимостьПараметровЗагрузки();
	
	Элементы.ВидИсточникаДанных.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	
	РасставитьСвязиПараметровВыбораПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = "Windows";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресФайлаВыписки) Тогда
		ПодключитьОбработчикОжидания("ПрочитатьДанныеИзФайлаПриОткрытии", 0.1, Истина);
	КонецЕсли;
	
	УстановитьВидимостьИсточникаВыписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанБанковскийСчет" И Источник = ЭтотОбъект Тогда
		Элементы.ДокументыКИмпорту.ТекущиеДанные.СчетКонтрагента = Параметр;
		Типы = Новый Массив;
		Типы.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
		ОписаниеТипов = Новый ОписаниеТипов(Типы);
		Элементы.ДокументыКИмпорту.ТекущийЭлемент.ОграничениеТипа = ОписаниеТипов;
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодВыгрузкиКлиентБанкПриИзменении(Элемент)
	
	Если ПериодВыгрузки.ДатаНачала > ПериодВыгрузки.ДатаОкончания Тогда
		ПоказатьПредупреждение(, НСтр("ru='Дата начала периода не должна быть больше даты окончания периода.'"));
		Возврат;
	КонецЕсли;
	
	ДокументыНаЭкспортОбновить();
	ВыгружатьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПриИзменении(Элемент)
	
	Сумма      = 0;
	Количество = 0;
	
	Для Каждого Строка Из Объект.ПлатежныеДокументы Цикл
		
		Если Строка.Выгружать Тогда
			
			Сумма      = Сумма + Строка.СуммаДокумента;
			Количество = Количество + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Выгружать.ТекстПодвала = Формат(Количество, "ЧЦ=10");
	Элементы.СуммаДокумента.ТекстПодвала = Формат(Сумма, "ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыпискиБанка", ВыпискиБанка);
		ПараметрыФормы.Вставить("НачалоПериода", ПериодЗагрузки.ДатаНачала);
		ПараметрыФормы.Вставить("КонецПериода", ПериодЗагрузки.ДатаОкончания);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСпискаВыписок", ПараметрыФормы);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура("СообщениеОбмена", ВыпискиБанка[0].Значение);
		ОбменСБанкамиКлиент.ОткрытьФормуПросмотраЭлектронногоДокумента(ВыпискиБанка[0].Значение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКИмпорту

&НаКлиенте
Процедура ДокументыКИмпортуДокументПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	ТекущиеДанные.Подразделение = ДокументыКИмпортуДокументПриИзмененииНаСервере(ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
Если Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), 
			Элемент.ТекущиеДанные.ОписаниеОшибок);
		
		Сообщение.Сообщить();
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
		
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), 
			Элемент.ТекущиеДанные.НазначениеПлатежа));
		
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда 
		
		Если (Поле.Имя = "ДокументыКИмпортуНомерСтроки"
			ИЛИ Поле.Имя = "ДокументыКИмпортуНомерДок"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДатаДок"
			ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаПоступило"
			ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаСписано"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДатаПроведения")
			ИЛИ (Поле.Имя = "ДокументыКИмпортуКонтрагент" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент)) 
			ИЛИ (Поле.Имя = "ДокументыКИмпортуСчетКонтрагента" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетКонтрагента)) 
			ИЛИ (Поле.Имя = "ДокументыКИмпортуСтатьяДДС" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДДС))
			ИЛИ (Поле.Имя = "ДокументыКИмпортуСтатьяДоходовИлиРасходов" 
				И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДоходовИлиРасходов))
			ИЛИ (Поле.Имя = "ДокументыКИмпортуПодразделение" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Подразделение)) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДокументыКИмпортуДокументПриИзмененииНаСервере(ТекДанные)
	Возврат ТекДанные.ПодразделениеКомпании;
КонецФункции

&НаКлиенте
Процедура ДокументыКИмпортуСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаКонтрагента = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаКонтрагента.СчетКонтрагента) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура; 
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("НомерСчета", СтрокаКонтрагента.СчетКонтрагента);
		ПараметрыЗаполнения.Вставить("Владелец", СтрокаКонтрагента.Контрагент);
		ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуКонтрагентПриИзменениинаСервере()
	
	Строка = ДокументыКИмпорту.НайтиПоИдентификатору(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.КонтрагентЗаполнен = ЗначениеЗаполнено(Строка.Контрагент)
		И ТипЗнч(Строка.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	Строка.ЭтоВнутреннееПеремещение = ЗначениеЗаполнено(Строка.Контрагент)
		И ТипЗнч(Строка.Контрагент) = Тип("СправочникСсылка.Организации");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентПриИзменении(Элемент)
	
	ДокументыКИмпортуКонтрагентПриИзменениинаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ОписаниеТипов = Новый ОписаниеТипов(Типы);
	
	Элемент.ОграничениеТипа = ОписаниеТипов;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Поступление = ТекущиеДанные.СуммаПоступило > 0;
	
	Если ТипЗнч(Элементы.ДокументыКИмпорту.ТекущиеДанные.Контрагент) = Тип("Строка") Тогда
		Элементы.ДокументыКИмпорту.ТекущиеДанные.ПометитьКонтрагентСчет = Истина;
	Иначе 
		Элементы.ДокументыКИмпорту.ТекущиеДанные.ПометитьКонтрагентСчет = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСтавкаНДСПриИзменении(Элемент)
	
	ДокументыКИмпортуСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуСтавкаНДСПриИзмененииНаСервере()
	
	Строка = ДокументыКИмпорту.НайтиПоИдентификатору(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.СуммаНДС = Окр((Строка.СуммаДокумента * Строка.СтавкаНДС.Ставка) / (100 + Строка.СтавкаНДС.Ставка), 2);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыНаЭкспорт

&НаКлиенте
Процедура ДокументыНаЭкспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "Выгружать" Тогда
		
		Элемент.ТекущиеДанные.Выгружать = НЕ (Элемент.ТекущиеДанные.Выгружать);
		
	ИначеЕсли Поле.Имя = "ОписаниеОшибок" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст 
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.ОписаниеОшибок);
		
		Сообщение.Сообщить();
		
	ИначеЕсли Поле.Имя = "НазначениеПлатежа" Тогда
		
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), 
		Элемент.ТекущиеДанные.НазначениеПлатежа));
		
	Иначе
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущийЭлемент.Имя = "Выгружать" Тогда
		
		Отказ = Истина;
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные) Тогда
			ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаКонтрагентов

&НаКлиенте
Процедура ТаблицаКонтрагентовФлажокПриИзменении(Элемент)
	ИДТекущейСтроки = Элементы.ТаблицаКонтрагентов.ТекущаяСтрока;
	Если ИДТекущейСтроки <> Неопределено Тогда		
		ЭлементКоллекции = ТаблицаКонтрагентов.НайтиПоИдентификатору(ИДТекущейСтроки);
		УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Флажок);
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель.Флажок = ?(УстановленоДляВсех(ЭлементКоллекции), ЭлементКоллекции.Флажок, 2);
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовОтметитьВсе(Команда)
	КоллекцияЭлементовДерева = ТаблицаКонтрагентов.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		Строка.Флажок = 1;
		ЭлементыСтроки = Строка.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ЭлементыСтроки Цикл
			ПодчиненнаяСтрока.Флажок = 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовСнятьОтметкуСоВсех(Команда)
	КоллекцияЭлементовДерева = ТаблицаКонтрагентов.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		Строка.Флажок = 0;
		ЭлементыСтроки = Строка.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ЭлементыСтроки Цикл
			ПодчиненнаяСтрока.Флажок = 0;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьФайлВыгрузки(Команда)
	
	ВыбратьФайлДанных("ФайлВыгрузки", "ВыбратьФайлВыгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗагрузки(Команда)
	
	ВыбратьФайлДанных("ФайлЗагрузки", "ВыбратьФайлЗагрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Ложь;
	
	Если Объект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		Если ВыгрузитьДокументыНаЭкспортНаКлиенте() Тогда
			
			ТекстПредупреждения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Данные успешно выгружены в файл %1'"), ФайлВыгрузки);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Истина;
			
		Иначе
			
			ТекстПредупреждения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось записать данные в файл. 
					|Возможно, отсутствует каталог %1'"), 
					ФайлВыгрузки);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru='Список документов для выгрузки пуст.
			|Проверьте правильность указанных параметров выгрузки.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуОтметитьВсе(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСнятьОтметкуСоВсех(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Ложь;
	КонецЦикла;
	           	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ДокументыКИмпорту.Количество() > 0 Тогда
		ЗагрузитьДокументыКИмпорту();
	Иначе
		
		ТекстПредупреждения = НСтр("ru='Список документов для загрузки пуст.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаЭкспорт(Команда)
	
	ЗаполнитьДокументыНаЭкспорт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьФлажки(Истина);
	   
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьДанныеИзФайла(Команда)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УстановитьЕслиНеПодключено", Истина);
	ДопПараметры.Вставить("Команда","ПрочитатьДанныеИзФайла");
	НачатьПодключениеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДопПараметры)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	УстановитьФлажки(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	СоздатьНовыхКонтрагентов();
	ПрочитатьДанныеИзФайла(Ложь, "СоздатьКонтрагентов");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОВыгрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	
	ПолучитьОтчетОВыгрузке(ПолеОтчета);
	
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать(НСтр("ru='Отчет о выгруженных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОЗагрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	
	ПолучитьОтчетОЗагрузке(ПолеОтчета);
	
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать(НСтр("ru='Отчет о загруженных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыписки(Команда)
	
	ЗапроситьЭлектроннуюВыпискуБанка();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКИмпортуЗагружать");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКонтрагентовФлажок");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКонтрагентов.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКИмпортуКонтрагент");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКИмпортуСчетКонтрагента");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ПометитьКонтрагентСчет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКИмпортуДоговорВзаиморасчетов");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.КонтрагентЗаполнен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКИмпортуДоговорВзаиморасчетов");
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ДоговорВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ЭтоВнутреннееПеремещение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Если ПраваИНастройкиПользователя.Значение("АвтоматическоеСозданиеОсновногоДоговора", "Выписка") Тогда
		ТекстНезаполненного = НСтр("ru = '<Будет создан автоматически>'");
	Иначе
		ТекстНезаполненного = НСтр("ru = '<Не найден>'");
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНезаполненного);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКИмпортуДоговорВзаиморасчетов");
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ДоговорВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ЭтоВнутреннееПеремещение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ТекстНезаполненного = НСтр("ru = '<Не используется>'");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНезаполненного);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОрганизацияБанкСчет()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Владелец КАК Организация,
	|	БанковскиеСчета.Банк КАК Банк,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПрограмм.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	СписокОрганизаций = ТаблицаПрограмм.Выгрузить(, "Организация");
	СписокОрганизаций.Свернуть("Организация");
	СписокОрганизаций = СписокОрганизаций.ВыгрузитьКолонку("Организация");
	
	СписокВыбора = Элементы.ОрганизацияЗагрузки.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.ЗагрузитьЗначения(СписокОрганизаций);
	
	СписокВыбора = Элементы.ОрганизацияВыгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.ЗагрузитьЗначения(СписокОрганизаций);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораБанкаЗагрузки()
	
	СписокВыбора = Элементы.БанкЗагрузки.СписокВыбора;
	СписокВыбора.Очистить(); 
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияЗагрузки = Объект.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияЗагрузки) Тогда
		СписокБанков = РеквизитФормыВЗначение("ТаблицаПрограмм");
		СписокБанков = СписокБанков.Скопировать(Новый Структура("Организация", ОрганизацияЗагрузки));
		СписокБанков.Свернуть("Банк");
		СписокВыбора.ЗагрузитьЗначения(СписокБанков.ВыгрузитьКолонку("Банк"));
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 1 Тогда
		БанкЗагрузки = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораСчетаЗагрузки()
	
	СписокВыбора = Элементы.БанковскийСчетЗагрузки.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Параметры.Свойство("БанковскийСчет") 
		И ЗначениеЗаполнено(Параметры.БанковскийСчет) Тогда
		БанковскийСчетЗагрузки = Параметры.БанковскийСчет;
		БанковскийСчетЗагрузкиПриИзмененииНаСервере();
		БанкЗагрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетЗагрузки, "Банк");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияЗагрузки) И ЗначениеЗаполнено(БанкЗагрузки) Тогда
		СписокСчетов = РеквизитФормыВЗначение("ТаблицаПрограмм");
		СписокСчетов = СписокСчетов.Скопировать(Новый Структура("Организация, Банк", ОрганизацияЗагрузки, БанкЗагрузки));
		СписокСчетов.Свернуть("БанковскийСчет");
		СписокСчетов = СписокСчетов.ВыгрузитьКолонку("БанковскийСчет");
		Для Каждого БанковскийСчет Из СписокСчетов Цикл
			СписокВыбора.Добавить(БанковскийСчет, БанковскийСчет.НомерСчета);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораБанкаВыгрузки()
	
	СписокВыбора = Элементы.БанкВыгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ОрганизацияВыгрузки) Тогда
		СписокБанков = РеквизитФормыВЗначение("ТаблицаПрограмм");
		СписокБанков = СписокБанков.Скопировать(Новый Структура("Организация", ОрганизацияВыгрузки));
		СписокБанков.Свернуть("Банк");
		СписокВыбора.ЗагрузитьЗначения(СписокБанков.ВыгрузитьКолонку("Банк"));
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 1 Тогда
		БанкВыгрузки = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораСчетаВыгрузки()
	
	СписокВыбора = Элементы.БанковскийСчетВыгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(ОрганизацияВыгрузки) И ЗначениеЗаполнено(БанкВыгрузки) Тогда
		СписокСчетов = РеквизитФормыВЗначение("ТаблицаПрограмм");
		СписокСчетов = СписокСчетов.Скопировать(Новый Структура("Организация, Банк", ОрганизацияВыгрузки, БанкВыгрузки));
		СписокСчетов.Свернуть("БанковскийСчет");
		СписокСчетов = СписокСчетов.ВыгрузитьКолонку("БанковскийСчет");
		Для Каждого БанковскийСчет Из СписокСчетов Цикл
			СписокВыбора.Добавить(БанковскийСчет, БанковскийСчет.НомерСчета);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 1 Тогда
		БанковскийСчетВыгрузки = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ПустаяСтрока(Кодировка) Тогда
		Кодировка = "Windows";
	КонецЕсли;
	
	НастроитьСписокВыбораБанкаЗагрузки();
	НастроитьСписокВыбораБанкаВыгрузки();
	НастроитьСписокВыбораСчетаЗагрузки();
	НастроитьСписокВыбораСчетаВыгрузки();
	БанковскийСчетЗагрузкиПриИзмененииНаСервере();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		ВидИсточникаДанных = 0;
	ИначеЕсли ВидИсточникаДанных = 1 И НЕ ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		ПолучитьНастройкиЗагрузкиВыписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыгрузки(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(ФайлВыгрузки, НСтр("ru='Файл выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗагрузки(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(ФайлЗагрузки, НСтр("ru='Файл загрузки'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыНаЭкспорт(Документы = Неопределено)
	
	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.Текст = 
	"ВЫБРАТЬ
	|	&ПлатежноеПоручение КАК ВидДокумента,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.КодУИН КАК Код,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = &Перемещение
	|			ТОГДА ПлатежноеПоручение.Организация
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК НомерСчетаОрганизации,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК НомерСчетаКонтрагента,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	|	СтатусыЗагрузкиВыгрузкиОбъектов.ВидСтатуса КАК ВидСтатуса,
	|	СтатусыЗагрузкиВыгрузкиОбъектов.Статус КАК Статус,
	|	СтатусыЗагрузкиВыгрузкиОбъектов.ИсточникПриемник КАК ИсточникПриемник,
	|	ВЫБОР
	|		КОГДА СтатусыЗагрузкиВыгрузкиОбъектов.Статус ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКТМО КАК КодОКАТО,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = &Перемещение
	|			ТОГДА ПлатежноеПоручение.Организация.ИНН
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлатежноеПоручение.Контрагент.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ОбособленноеПодразделение)
	|					ТОГДА ПлатежноеПоручение.Контрагент.ГоловнойКонтрагент.ИНН
	|				ИНАЧЕ ПлатежноеПоручение.Контрагент.ИНН
	|			КОНЕЦ
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ПлатежноеПоручение.КПППлательщика КАК КПППлательщика,
	|	ПлатежноеПоручение.КПППолучателя КАК КПППолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ИННПолучателя = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ПлатежноеПоручение.ИННПолучателя
	|	КОНЕЦ КАК ИННПолучателя,
	|	ПлатежноеПоручение.СчетОрганизации.Банк КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ИННПлательщика <> """"
	|			ТОГДА ПлатежноеПоручение.ИННПлательщика
	|		ИНАЧЕ ПлатежноеПоручение.Организация.ИНН
	|	КОНЕЦ КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.ХозОперация КАК ХозяйственнаяОперация,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентКоррСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияКоррСчет,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ПлатежноеПоручение.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежноеПоручение.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК ОрганизацияНаим,
	|	ПлатежноеПоручение.ПеречислениеНалога КАК ПеречислениеВБюджет,
	|	ПлатежноеПоручение.СтатусСоставителя КАК СтатусСоставителя,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода,
	|	ПлатежноеПоручение.ПоказательНомера КАК ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательДаты КАК ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательТипа КАК ПоказательТипа,
	|	ПлатежноеПоручение.КодВидаДохода КАК КодВидаДохода
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗагрузкиВыгрузкиОбъектов КАК СтатусыЗагрузкиВыгрузкиОбъектов
	|		ПО ПлатежноеПоручение.Ссылка = СтатусыЗагрузкиВыгрузкиОбъектов.Объект
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.СчетОрганизации = &БанковскийСчет
	|	И ПлатежноеПоручение.СуммаДокумента <> 0";
	
	КонецПериода = ПериодВыгрузки.ДатаОкончания;
	Если ПериодВыгрузки.ДатаОкончания = Дата("00010101") Тогда
		КонецПериода = Дата("29990101");
	КонецЕсли;
	
	ЗапросПоДокументам.УстановитьПараметр("ПлатежноеПоручение", "Платежное поручение");
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало", НачалоДня(ПериодВыгрузки.ДатаНачала));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонецПериода));
	ЗапросПоДокументам.УстановитьПараметр("Организация", ОрганизацияВыгрузки);
	ЗапросПоДокументам.УстановитьПараметр("БанковскийСчет", БанковскийСчетВыгрузки); 
	ЗапросПоДокументам.УстановитьПараметр("Перемещение", Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации);
	
	Объект.ПлатежныеДокументы.Очистить();
	Объект.ПлатежныеДокументы.Загрузить(ЗапросПоДокументам.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДанных(Режим, ТочкаВхода)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Режим", Режим);
	ДопПараметры.Вставить("ТочкаВхода", ТочкаВхода);
	ДопПараметры.Вставить("УстановитьЕслиНеПодключено", Истина); 
	ДопПараметры.Вставить("Команда","ВыбратьФайлДанных");
	
	ПодключениеРасширенияРаботыСФайлами(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Режим, ТочкаВхода)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр = НСтр("ru='Текстовый файл (*.txt)|*.txt'");
	Если Режим = "ФайлВыгрузки" Тогда
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Выберите файл для выгрузки данных в клиента банка'");
	ИначеЕсли Режим = "ФайлЗагрузки" Тогда
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Выберите файл для загрузки данных в клиента банка'");
	КонецЕсли;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "txt";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	Если Режим = "ФайлВыгрузки" Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = ФайлВыгрузки;
	ИначеЕсли Режим = "ФайлЗагрузки" Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = ФайлЗагрузки;
	КонецЕсли;
	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ПараметрыОповещения = Новый Структура("Диалог, Режим, ТочкаВхода", ДиалогВыбораФайла, Режим, ТочкаВхода);
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлДанныхЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДанныхЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Режим = ДополнительныеПараметры.Режим;
	ДиалогВыбораФайла = ДополнительныеПараметры.Диалог;
	ТочкаВхода = ДополнительныеПараметры.ТочкаВхода;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если Режим = "ФайлВыгрузки" Тогда
		ФайлВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	ИначеЕсли Режим = "ФайлЗагрузки" Тогда
		ФайлЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
	Если ТочкаВхода = "ВыбратьФайлЗагрузки" Тогда
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТаблицыДокументов(Документы)
	
	Обработки.КлиентБанк.ПроверитьЗаполнениеТаблицыДокументов(
		?(Документы = "ДокументыНаЭкспорт", Объект.ПлатежныеДокументы, ДокументыКИмпорту)
	);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаЭкспортОбновитьСервер()
	
	ПроверитьЗаполнениеТаблицыДокументов("ДокументыНаЭкспорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортОбновить()
	
	Объект.ПлатежныеДокументы.Очистить();
	
	ДокументыНаЭкспортОбновитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Флаг)
	
	Количество = 0;
	Сумма      = 0;
	
	Для Каждого СтрокаДокумента Из Объект.ПлатежныеДокументы Цикл
		
		СтрокаДокумента.Выгружать = Флаг;
		
		Если СтрокаДокумента.Выгружать Тогда
			
			Количество = Количество + 1;
			Сумма      = Сумма + СтрокаДокумента.СуммаДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
			
	Элементы.Выгружать.ТекстПодвала = Формат(Количество, "ЧЦ=10");
	Элементы.СуммаДокумента.ТекстПодвала = Формат(Сумма, "ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьДокументыНаЭкспортНаКлиенте()
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ПотокВыгрузки, УникальныйИдентификатор);
	
	ВыгрузитьДокументыНаЭкспорт(АдресВременногоХранилища);
	
	ПотокВыгрузки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Попытка
		
		Если Кодировка = "DOS" Тогда
			ПотокВыгрузки.Записать(ФайлВыгрузки, Нстр("ru = 'cp866'; en = 'cp437'"));
		Иначе
			ПотокВыгрузки.Записать(ФайлВыгрузки, Нстр("ru = 'windows-1251'; en = 'windows-1252'"));
		КонецЕсли;
		
		// Отметим те документы, которые успешно выгрузились.
		Для Каждого СтрокаСекции Из Объект.ПлатежныеДокументы Цикл
			
			Если СтрокаСекции.Готовность = -2 Тогда
				СтрокаСекции.Готовность = -1;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат 1;
		
	Исключение
		
		Возврат 0;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьДокументыНаЭкспорт(АдресВременногоХранилища)
	
	Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = "Windows";
	КонецЕсли;
	
	ПараметрыНастроек = Новый Структура;
	ПараметрыНастроек.Вставить("Кодировка", Кодировка);
	ПараметрыНастроек.Вставить("НачПериода", ПериодВыгрузки.ДатаНачала);
	ПараметрыНастроек.Вставить("КонПериода", ПериодВыгрузки.ДатаОкончания);
	Обработки.КлиентБанк.Выгрузить(
		Объект.ПлатежныеДокументы,
		ПараметрыНастроек,
		ФайлВыгрузки,
		АдресВременногоХранилища,
		ВыгружатьКПП
	);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтчетОВыгрузке(ПолеОтчета)
	
	Обработки.КлиентБанк.ПечатьОтчетаОВыгруженныхПлатежныхДокументах(
		ПолеОтчета,
		Объект.ПлатежныеДокументы,
		ОрганизацияВыгрузки,
		ПериодВыгрузки.ДатаНачала,
		ПериодВыгрузки.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтчетОЗагрузке(ПолеОтчета)
	
	Обработки.КлиентБанк.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(
		ПолеОтчета,
		ДокументыКИмпорту,
		ОрганизацияЗагрузки,
		Импорт_РасчетныеСчета,
		Импорт_Заголовок);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументыКИмпорту()
	
	// Проверка заполнения реквизитов таблицы документов к импорту.
	ЕстьОшибкиЗаполнения = Ложь;
	Для Каждого СтрокаТаблицы Из ДокументыКИмпорту Цикл
		Если СтрокаТаблицы.Загружать И ТипЗнч(СтрокаТаблицы.Контрагент) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Контрагент не %1'"), Сред(СтрокаТаблицы.Контрагент, 4))
			);
			ЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОшибкиЗаполнения Тогда
		Обработки.КлиентБанк.Загрузить(
			ДокументыКИмпорту,
			Импорт_Заголовок,
			ОрганизацияЗагрузки,
			Импорт_РасчетныеСчета,
			ПроводитьДокументы
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыхКонтрагентов()
	
	КонтрагентыВыписки = РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений"));
	
	Для Каждого Элемент Из КонтрагентыВыписки.Строки Цикл
		
		Если Элемент.Флажок > 0 Тогда
			Обработки.КлиентБанк.СоздатьКонтрагента(Элемент, ВалютыСчетов);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(КонтрагентыВыписки, "ТаблицаКонтрагентов");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьОповещениеПользователя(ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ОповещениеПользователя" Тогда
		ПараметрыФормы = Новый Структура; 
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("НомерСчета", ДополнительныеПараметры.НомерСчета);
		ПараметрыЗаполнения.Вставить("Владелец", ДополнительныеПараметры.Организация);
		ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайлами(ДопПараметры) Экспорт
	НачатьПодключениеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДопПараметры)
	);
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда 
		Если ДопПараметры.Команда = "ВыбратьФайлДанных"  Тогда
			ВыбратьФайл(ДопПараметры.Режим, ДопПараметры.ТочкаВхода);
		Иначе
			КомандаПрочитатьДанныеИзФайлаЗавершение();
		КонецЕсли;
	ИначеЕсли ДопПараметры.УстановитьЕслиНеПодключено Тогда
		ДопПараметры.УстановитьЕслиНеПодключено = Ложь;
		НачатьУстановкуРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайлами",ЭтотОбъект, ДопПараметры));
	Иначе           
		ВызватьИсключение "Не удалось подключить расширение работы с файлами!";
	КонецЕсли;    
	
 КонецПроцедуры
	
&НаКлиенте
Процедура КомандаПрочитатьДанныеИзФайлаЗавершение()
	
	Если НЕ АвтоматическоеОпределениеПриЗагрузке И НЕ ЗначениеЗаполнено(ОрганизацияЗагрузки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные параметры. Загрузка прервана.'"));
		Возврат;
	КонецЕсли;
	
	Если ВидИсточникаДанных = 1 Тогда
		Если ПрямойОбменСБанками Тогда
			ЗапроситьЭлектроннуюВыпискуБанка();
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для данной оргазации нет настроек для обмена с банком.'"));
		КонецЕсли;
	Иначе
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайла(ВыводитьСообщения = Истина, ТочкаВхода = "")
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТочкаВхода", ТочкаВхода);
	ПараметрыОповещения.Вставить("ВыводитьСообщения", ВыводитьСообщения);
		
	Если ПрямойОбменСБанками И ВидИсточникаДанных = 1 Тогда
		ДанныеФайла = ДанныеФайлаВыписок(Новый ОписаниеПередаваемогоФайла(, АдресФайлаВыписки));
		Каталог = КаталогВременныхФайлов();  
		ИмяПромежуточногоФайла = Строка(Новый УникальныйИдентификатор) + ".txt";
		ИмяФайла = Каталог + ИмяПромежуточногоФайла; 
		ДанныеФайла.Записать(ИмяФайла);
		ПроверяемыйФайл = Новый Файл(ИмяФайла);
		ПараметрыОповещения.Вставить("ИмяФайла", ИмяФайла);
	Иначе
		ПроверяемыйФайл = Новый Файл(ФайлЗагрузки);
		ПараметрыОповещения.Вставить("ИмяФайла", ФайлЗагрузки);
	КонецЕсли;
		
	ПроверяемыйФайл.НачатьПроверкуСуществования(
	Новый ОписаниеОповещения("РезультатПроверкиСуществования", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПроверкиСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Файл не выбран.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	ПотокЧтения = Новый ТекстовыйДокумент();
	
	ДополнительныеПараметры.Вставить("ПотокЧтения", ПотокЧтения);
	
	Если Кодировка = "DOS" Тогда
		КодировкаФайла = Нстр("ru = 'cp866'; en = 'cp437'");
	ИначеЕсли Кодировка = "UTF8" Тогда
		КодировкаФайла = Нстр("ru = 'utf-8'; en = 'utf-8'");
	Иначе
		КодировкаФайла = Нстр("ru = 'windows-1251'; en = 'windows-1252'");
	КонецЕсли;    
	
	Оповещение = Новый ОписаниеОповещения("РезультатЧтенияФайла",
		ЭтотОбъект, ДополнительныеПараметры, "ОшибкаЧтенияФайла", ЭтотОбъект);
	
	ПотокЧтения.НачатьЧтение(Оповещение, ДополнительныеПараметры.ИмяФайла, КодировкаФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатЧтенияФайла(ДополнительныеПараметры) Экспорт
	
	ПотокЧтения = ДополнительныеПараметры.ПотокЧтения;
	
	ТочкаВхода = ДополнительныеПараметры.ТочкаВхода;
	ВыводитьСообщения = ДополнительныеПараметры.ВыводитьСообщения;
	
	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Файл загрузки не содержит данных.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если НЕ СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) = "1CClientBankExchange" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Указанный файл не является файлом обмена, или неверно указана кодировка.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	ФайлПрочитан = Ложь;
	Для НомерСтроки = 1 По ПотокЧтения.КоличествоСтрок() Цикл
		Если ВРЕГ(Лев(СокрЛП(ПотокЧтения.ПолучитьСтроку(НомерСтроки)), 13)) = "ВЕРСИЯФОРМАТА" Тогда
			ФайлПрочитан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ФайлПрочитан Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Неверно указана кодировка файла обмена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Импорт_ТекстДляРазбора = ПотокЧтения.ПолучитьТекст();
	РезультатОперации = ПрочитатьДанныеИзФайлаСервер(Импорт_ТекстДляРазбора, ВыводитьСообщения);
	
	Если НЕ РезультатОперации = Неопределено Тогда
		// Чтобы дважды не выводить сообщение об одном счете.
		УжеВыведенныеСчета = Новый Массив;
		Для Каждого Результат Из РезультатОперации Цикл
			Если ЗначениеЗаполнено(Результат.ТекстСообщения)
				И УжеВыведенныеСчета.Найти(Результат.НомерСчета) = Неопределено Тогда
				
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создать счет'") + " " + Результат.НомерСчета,
					Новый ОписаниеОповещения("Подключаемый_ПоказатьОповещениеПользователя",
						ЭтотОбъект,
						Новый Структура("Событие,НомерСчета,Организация", "ОповещениеПользователя", Результат.НомерСчета,
																									Результат.Организация)),
					Результат.ТекстСообщения,
					БиблиотекаКартинок.Предупреждение32,
					СтатусОповещенияПользователя.Важное);
				УжеВыведенныеСчета.Добавить(Результат.НомерСчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПослеЗаполненияДокументыКИмпорту(ВыводитьСообщения);
	
	Если ТочкаВхода = "СоздатьКонтрагентов" Тогда
		Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаЧтенияФайла(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='Файл не прочитан.'");
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияДокументыКИмпорту(ВыводитьСообщения)
	
	Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
	
	Элементы.ДокументыКИмпортуЗагружать.ТекстПодвала = ДокументыКИмпорту.Количество();
	Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала
		= Формат(ДокументыКИмпорту.Итог("СуммаПоступило"), "ЧЦ=12; ЧДЦ=2");
	Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала
		= Формат(ДокументыКИмпорту.Итог("СуммаСписано"), "ЧЦ=12; ЧДЦ=2");
	
	ДокументыКИмпортуОтметитьВсе(Неопределено);
	
	Если ВыводитьСообщения Тогда
		ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту");
		Элементы.ДокументыКИмпортуЗагрузить.Доступность = Истина;
		Элементы.ДокументыКИмпортуСформироватьОтчетОЗагрузке.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьДанныеИзФайлаСервер(Импорт_ТекстДляРазбора, ВыводитьСообщения)
	
	ПараметрыЗагрузки = Новый Структура;
	Если АвтоматическоеОпределениеПриЗагрузке Тогда
		ПараметрыЗагрузки.Вставить("Организация", Неопределено);
		ПараметрыЗагрузки.Вставить("Банк", Неопределено);
		ПараметрыЗагрузки.Вставить("БанковскийСчет", Неопределено);
	Иначе
		ПараметрыЗагрузки.Вставить("Организация", ОрганизацияЗагрузки);
		ПараметрыЗагрузки.Вставить("Банк", БанкЗагрузки);
		ПараметрыЗагрузки.Вставить("БанковскийСчет", БанковскийСчетЗагрузки);
	КонецЕсли;
	
	СтруктураРазбора = ЭлектронныеДокументыВнутренний.СтруктураРазбораВыпискиБанка(Импорт_ТекстДляРазбора);
	РезультатОперации = ЗаполнитьДокументыНаИмпорт(СтруктураРазбора, ПараметрыЗагрузки);
	
	Если АвтоматическоеОпределениеПриЗагрузке Тогда
		
		ОрганизацияЗагрузки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "Организация", Неопределено);
		НастроитьСписокВыбораБанкаЗагрузки();
		
		Если ЗначениеЗаполнено(ОрганизацияЗагрузки) Тогда
			БанковскийСчетЗагрузки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыЗагрузки,
				"БанковскийСчет",
				Неопределено
			);
			Если ЗначениеЗаполнено(БанковскийСчетЗагрузки) Тогда
				БанкЗагрузки = БанковскийСчетЗагрузки.Банк;
				НастроитьСписокВыбораСчетаЗагрузки();
			КонецЕсли;
		Иначе
			БанкЗагрузки = Неопределено;
			НастроитьСписокВыбораСчетаЗагрузки();
			БанковскийСчетЗагрузки = Неопределено;
		КонецЕсли;
		
		БанковскийСчетЗагрузкиПриИзмененииНаСервере();
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыНаИмпорт(СтруктураРазбора, ПараметрыЗагрузки)
	
	ВозвращаемыеДанные = Новый Структура;
	ВозвращаемыеДанные.Вставить("Импорт_Заголовок", Импорт_Заголовок);
	ВозвращаемыеДанные.Вставить("Импорт_РасчетныеСчета", Импорт_РасчетныеСчета);
	ВозвращаемыеДанные.Вставить("ДокументыКИмпорту", ДокументыКИмпорту);
	ВозвращаемыеДанные.Вставить(
		"ТаблицаКонтрагентов",
		РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений")));
	ВозвращаемыеДанные.Вставить("СоответствиеВалютыСчета", ВалютыСчетов);
	
	РезультатОперации = Обработки.КлиентБанк.ЗаполнитьДокументыНаИмпорт(
		СтруктураРазбора,
		ПараметрыЗагрузки,
		Элементы.ДокументыКИмпорту,
		ВозвращаемыеДанные);
	
	Импорт_Заголовок = ВозвращаемыеДанные.Импорт_Заголовок;
	ЗначениеВРеквизитФормы(ВозвращаемыеДанные.ТаблицаКонтрагентов, "ТаблицаКонтрагентов");
	
	Возврат РезультатОперации;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(ПутьКФайлу, Заголовок)
	
	ФайлНаДиске = Новый Файл(ПутьКФайлу);
	
	ПараметрыОповещения = Новый Структура("ИмяФайла", ПутьКФайлу);
	ФайлНаДиске.НачатьПроверкуСуществования(
		Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПродолжение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не найден файл.'"));
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		КодировкаФайла = Нстр("ru = 'cp866'; en = 'cp437'");
	ИначеЕсли Кодировка = "UTF8" Тогда
		КодировкаФайла = Нстр("ru = 'utf-8'; en = 'utf-8'");
    Иначе
		КодировкаФайла = Нстр("ru = 'windows-1251'; en = 'windows-1252'");
	КонецЕсли;
	
	Текст.НачатьЧтение(
		Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраЗавершение", ЭтотОбъект, Новый Структура("Текст", Текст)),
		ДополнительныеПараметры.ИмяФайла, КодировкаФайла
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраЗавершение(Результат) Экспорт
	
	Текст = Результат.Текст;
	
	Текст.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлДанных("ФайлЗагрузки", "ФайлЗагрузкиНачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Функция УстановленоДляВсех(ЭлементКоллекции)
	СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент.Флажок <> ЭлементКоллекции.Флажок Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)
	Строки = ЭлементКоллекции.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Строка.Флажок = ЗначениеПометки;
		УстановкаФлажков(Строка, Строка.Флажок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(ПараметрыВыбора, ИмяПараметра)
	
	ЗначениеПараметра = Справочники.ХозОперации.СтрокаБанковскойВыписки;
	НовыйПараметрВыбора = Новый ПараметрВыбора(ИмяПараметра, ЗначениеПараметра);
	
	
	НоваяКоллекцияПараметров = Новый Массив;
	
	ИмяПараметра = НовыйПараметрВыбора.Имя;
	НоваяКоллекцияПараметров.Добавить(НовыйПараметрВыбора);
	
	
	Элементы.ДокументыКИмпортуДокумент.ПараметрыВыбора = Новый ФиксированныйМассив(НоваяКоллекцияПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеОпределениеПриЗагрузкеПриИзменении(Элемент)
	УстановитьВидимостьПараметровЗагрузки();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПараметровЗагрузки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОрганизацияЗагрузки",
		"Доступность",
		НЕ АвтоматическоеОпределениеПриЗагрузке
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"БанкСчетЗагрузки",
		"Доступность",
		НЕ АвтоматическоеОпределениеПриЗагрузке
	);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияЗагрузкиПриИзмененииНаСервере()
	
	БанкЗагрузки = Неопределено;
	БанковскийСчетЗагрузки = Неопределено;
	НастроитьСписокВыбораБанкаЗагрузки();
	НастроитьСписокВыбораСчетаЗагрузки();
	
	ПолучитьНастройкиЗагрузкиВыписок(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияЗагрузкиПриИзменении(Элемент)
	
	ОрганизацияЗагрузкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура БанкЗагрузкиПриИзмененииНаСервере()
	
	НастроитьСписокВыбораСчетаЗагрузки();
	ПолучитьНастройкиЗагрузкиВыписок(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкЗагрузкиПриИзменении(Элемент)
	
	БанкЗагрузкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетЗагрузкиПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(БанковскийСчетЗагрузки) Тогда
		ПодразделениеЗагрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетЗагрузки, "ПодразделениеКомпании");
	Иначе
		ПодразделениеЗагрузки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетЗагрузкиПриИзменении(Элемент)
	
	БанковскийСчетЗагрузкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияВыгрузкиПриИзмененииНаСервере()
	
	БанкВыгрузки = Неопределено;
	БанковскийСчетВыгрузки = Неопределено;
	НастроитьСписокВыбораБанкаВыгрузки();
	НастроитьСписокВыбораСчетаВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияВыгрузкиПриИзменении(Элемент)
	ОрганизацияВыгрузкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура БанкВыгрузкиПриИзмененииНаСервере()
	
	НастроитьСписокВыбораСчетаВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкВыгрузкиПриИзменении(Элемент)
	
	БанкВыгрузкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДополнительныеПараметры()
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	// Установим начальное отображение страницы формы
	Если Параметры.Свойство("РежимПоУмолчанию") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[Параметры.РежимПоУмолчанию];
	КонецЕсли;
	
	ВыпискиБанка.Очистить();
	
	// Разбор выписки при открытии КлиентБанка из формы электронного документа
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка")
		И ЗначениеЗаполнено(Параметры.ЭлектроннаяВыпискаБанка)
		И ТипЗнч(Параметры.ЭлектроннаяВыпискаБанка) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		ОрганизацияЗагрузки = Параметры.Организация;
		СообщениеБанка = Параметры.ЭлектроннаяВыпискаБанка;
		ВыпискиБанка.Добавить(СообщениеБанка);
		ПериодЗагрузки.ДатаНачала = СообщениеБанка.ДатаНачала;
		ПериодЗагрузки.ДатаОкончания = ?(ЗначениеЗаполнено(СообщениеБанка.ДатаОкончания),
			СообщениеБанка.ДатаОкончания, СообщениеБанка.ДатаНачала);
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(ПериодЗагрузки.ДатаНачала, ПериодЗагрузки.ДатаОкончания);
		АдресФайлаВыписки = Параметры.АдресФайлаВыписки; 
		ВидИсточникаДанных = 1;
	КонецЕсли;
	
	СоглашениеПрямогоОбменаСБанками = ПолучитьЗначениеПараметраСтруктуры(
		Параметры,
		"СоглашениеПрямогоОбменаСБанками",
		Неопределено);
	ПолучитьНастройкиЗагрузкиВыписок(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода)
	
	ШаблонСтроки = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
КонецФункции // СсылкаНаЭлектронныеВыписки()

&НаСервереБезКонтекста
Функция ДанныеФайлаВыписок(ОписаниеФайла)
	
	Возврат ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
	
КонецФункции

&НаСервере
Процедура ПолучитьНастройкиЗагрузкиВыписок(ПолучитьСоглашениеПрямогоОбмена = Истина, ОчищатьВыписки = Ложь)
	
	Если ПолучитьСоглашениеПрямогоОбмена Тогда
		СоглашениеПрямогоОбменаСБанками = ОбменСБанками.НастройкаОбмена(
			ОрганизацияЗагрузки,
			БанкЗагрузки,
			Истина);
	КонецЕсли;
	
	ПрямойОбменСБанками = ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками);
	Элементы.ПараметрыОбмена.Доступность = ПрямойОбменСБанками;
	Элементы.ПредупреждениеНеУстановкиОбмена.Видимость = НЕ ПрямойОбменСБанками;
	
	Если ОчищатьВыписки Тогда
		ЭлектроннаяВыпискаБанка = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанка()
	
	Если НЕ ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчетЗагрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не выбран банковский счет'")
			,, "БанковскийСчетЗагрузки");
		Возврат;
	КонецЕсли;
	
	// Проверим период
	Если НЕ ЗначениеЗаполнено(ПериодЗагрузки.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата начала периода'")
			,, "ПериодЗагрузки");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодЗагрузки.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата окончания периода'")
			,, "ПериодЗагрузки");
		Возврат;
	КонецЕсли;
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ПериодЗагрузки.ДатаОкончания > КонецДня(ТекущаяДатаСеанса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания периода не может быть больше текущей даты'")
			,, "ПериодЗагрузки");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьЭлектроннуюВыпискуБанкаЗавершение", ЭтотОбъект);
	ОбменСБанкамиКлиент.ПолучитьВыписку(
		Оповещение,
		БанковскийСчетЗагрузки,
		ПериодЗагрузки.ДатаНачала,
		ПериодЗагрузки.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не (ЗначениеЗаполнено(Результат) И Результат.Успех = Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ВыпискиБанка.Очистить();
	Если Результат.Выписки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыпискиБанка.ЗагрузитьЗначения(Результат.Выписки);
	
	АдресФайлаВыписки = ОбменСБанкамиАльфаАвтоВызовСервера.ДанныеВыпискиБанкаВТекстовомФормате(Результат.Выписки);
	ПрочитатьДанныеИзФайла();
	ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(ПериодЗагрузки.ДатаНачала, ПериодЗагрузки.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИсточникаДанныхПриИзменении(Элемент)
	
	УстановитьВидимостьИсточникаВыписок();
	
	Если ВидИсточникаДанных = 1 Тогда
		ПолучитьНастройкиЗагрузкиВыписок(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИсточникаВыписок()
	
	ПоказыватьПрямойОбмен = (ВидИсточникаДанных = 1);
	Элементы.ФайлКодировка.Видимость = НЕ ПоказыватьПрямойОбмен;
	Элементы.ПрямойОбменСБанком.Видимость = ПоказыватьПрямойОбмен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайлаПриОткрытии()
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

&НаСервере
Процедура РасставитьСвязиПараметровВыбораПоОрганизации()
	
	КонтрольКорректностиДоговораИСкладаДокумента = ПраваИНастройкиПользователя.Значение(
		"КонтрольКорректностиДоговораИСкладаДокумента", "Выписка"
	);
	Если КонтрольКорректностиДоговораИСкладаДокумента = Перечисления.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизации Тогда
		
		УправлениеДиалогомСервер.ОбновитьФиксированныйМассивПараметровВыбора(
			Элементы.ДокументыКИмпортуДоговорВзаиморасчетов.СвязиПараметровВыбора,
			Новый СвязьПараметраВыбора("Отбор.Организация", "ОрганизацияЗагрузки", РежимИзмененияСвязанногоЗначения.НеИзменять)
		);
		
	ИначеЕсли КонтрольКорректностиДоговораИСкладаДокумента = Перечисления.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизацииИИерархииПодразделению Тогда
		
		Подразделения = РегистрыСведений.СтруктураИерархииПодразделений.ПолучитьРодителейПодразделения(ПодразделениеЗагрузки)
			.ВыгрузитьКолонку("Группа");
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ДокументыКИмпортуДоговорВзаиморасчетов.ПараметрыВыбора,
			"Отбор.ПодразделениеКомпании",
			Новый ФиксированныйМассив(Подразделения)
		);
		
	ИначеЕсли КонтрольКорректностиДоговораИСкладаДокумента = Перечисления.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизацииИПодразделению Тогда
		
		УправлениеДиалогомСервер.ОбновитьФиксированныйМассивПараметровВыбора(
			Элементы.ДокументыКИмпортуДоговорВзаиморасчетов.СвязиПараметровВыбора,
			Новый СвязьПараметраВыбора("Отбор.ПодразделениеКомпании", "ПодразделениеЗагрузки", РежимИзмененияСвязанногоЗначения.НеИзменять)
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
