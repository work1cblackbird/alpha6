
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет заполнение таблицы с документами.
//
// Параметры:
//   Объект		- Объект						  - обработка ОбменСБанком.
//   Документ	- ТабличнаяЧасть, ТаблицаЗначений - таблица с данными документов.
//   Отказ		- Булево						  - флаг наличия проблемы в текущем сеансе работы обработки.
Процедура ПроверитьЗаполнениеТаблицыДокументов(Документ, Отказ = Ложь) Экспорт
	
	Для НомСтр = 0 По Документ.Количество() - 1 Цикл
		
		Если Документ[НомСтр].Готовность > 0 Тогда
			
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Документ[НомСтр].ОписаниеОшибок);
			
			Если Документ[НомСтр].Свойство("Выгружать") Тогда
				Поле = "Объект.ПлатежныеДокументы[" + НомСтр + "].Выгружать";
			Иначе
				Поле = "ДокументыКИмпорту[" + НомСтр + "].Загружать";
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(Стр, , Поле, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
                                                                                                  
// Процедура выгружает данные в файл.
//
// Параметры:
//   ПлатежныеДокументы			- ТабличнаяЧасть				  - таблица с данными документов.
//   Параметры					- Структура						  - структура, содержащая:
//   	* Кодировка				- Строка						  - информация о кодировке файла выгрузки.
//   	* Программа				- Строка						  - информация о программе банка, для которой формируется файл.
//   	* НачПериода			- Дата							  - начало обрабатываемого периода.
//   	* КонПериода			- Дата							  - конец обрабатываемого периода.
//   ФайлВыгрузки				- Строка						  - информация о пути к файлу выгрузки.
//   Организация				- СправочникСсылка.Организации	  - информация об организации выгрузки.
//   АдресВременногоХранилища	- Строка						  - адрес, указывающий на значение во временном хранилище.
//   ВыгружатьКПП				- Булево						  - флаг:выгружать КПП плательщика и получателя для всех документов.
Процедура Выгрузить(ПлатежныеДокументы, 
					Параметры, 
					ФайлВыгрузки,
					АдресВременногоХранилища, 
					ВыгружатьКПП) Экспорт
	
	ПотокВыгрузки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
	// Формируем заголовок.
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	
	ДатаСравнения = '20140101'; 
	Если ОбменСБанкамиКлиентСервер.ВступилиВСилуИзменения353ФЗ(ТекущаяДатаСеанса()) Тогда
		ВерсияФормата = "1.03";
	ИначеЕсли ТекущаяДатаСеанса() >= ДатаСравнения Тогда
		ВерсияФормата = "1.02";
	Иначе
		ВерсияФормата = "1.01";
	КонецЕсли;
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ВерсияФормата);
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + Параметры.Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=");
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ТекущаяДатаСеанса(), "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДатаСеанса(), "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(Параметры.НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(Параметры.КонПериода, "ДЛФ=Д"));

	ПереченьРасчСчетов = ПлатежныеДокументы.Выгрузить(, "ОрганизацияРасчСчет");
	
	ПереченьРасчСчетов.Свернуть("ОрганизацияРасчСчет");
	
	Для СчетчикСтрок = 0 По ПереченьРасчСчетов.Количество() - 1 Цикл
		ПотокВыгрузки.ДобавитьСтроку("РасчСчет="      + СокрЛП(ПереченьРасчСчетов[СчетчикСтрок].ОрганизацияРасчСчет));
	КонецЦикла;	
		
	ИмяДокумента = НСтр("ru = 'Платежное поручение'");
	ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
	
	// Выводим отмеченные секции документов.
	Для Каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		
		Если НЕ СтрокаСекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ВыгружатьКПП, ВерсияФормата);
		
		Буфер = СтрЗаменить(Буфер, Символы.НПП, " ");
		
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
		СтрокаСекции.Готовность = -2;
		
	КонецЦикла;
	
	// Записываем на диск.
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ПоместитьВоВременноеХранилище(ПотокВыгрузки, АдресВременногоХранилища);
	
КонецПроцедуры

// Процедура заполняет таблицу документов для импорта.
//
// Параметры:
//  ДеревоРазбора - ДеревоЗначений - Данные выписки.
//  Организация - СправочникСсылка.Организации - Организация загрузки.
//  НастройкаЗаполнения - ТаблицаЗначений - таблица со значениями по умолчанию для документов.
//  ТаблицаФормы - ТаблицаФормы - Элемент формы, связанный с таблицей, содержащей данные документов.
//  Возвращаемые данные - Структура - Структура с реквизитами формы.
//
Функция ЗаполнитьДокументыНаИмпорт(
	СтруктураРазбора,
	ПараметрыЗагрузки, // Организация,
	ТаблицаФормы,
	ВозвращаемыеДанные,
	РежимЗагрузкиИзСообщения = Ложь) Экспорт
	
	Перем ПроверкаПройдена, БанковскийСчетОрганизации, Организация;
	
	РезультатОперации = Новый Массив;

	ПроверкаПройдена = Ложь;
	
	ВозвращаемыеДанные.Импорт_Заголовок = Новый Структура;
	ВозвращаемыеДанные.Импорт_РасчетныеСчета.Очистить();
	ВозвращаемыеДанные.ДокументыКИмпорту.Очистить();
	ВозвращаемыеДанные.ТаблицаКонтрагентов.Строки.Очистить();
	
	ДеревоРазбора = ПолучитьЗначениеПараметраСтруктуры(СтруктураРазбора, "ДеревоРазбора", Неопределено);
	НомерСчета = ПолучитьЗначениеПараметраСтруктуры(СтруктураРазбора, "НомерСчета", Неопределено);
	
	Если ДеревоРазбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОрганизацияИзПараметров = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗагрузки, "Организация", Неопределено);
	СчетИзПараметров = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗагрузки, "БанковскийСчет", Неопределено);
	
	Если ТипЗнч(ВозвращаемыеДанные.ДокументыКИмпорту) = Тип("ТаблицаЗначений") Тогда
		НаборКолонокДокументыКИмпорту = ВозвращаемыеДанные.ДокументыКИмпорту.Скопировать().Колонки;
	Иначе
		НаборКолонокДокументыКИмпорту = ВозвращаемыеДанные.ДокументыКИмпорту.Выгрузить().Колонки;
	КонецЕсли;
	
	// удалим служебные колонки
	Если НаборКолонокДокументыКИмпорту.Найти("КонтрагентЗаполнен") <> Неопределено Тогда
		НаборКолонокДокументыКИмпорту.Удалить(
			НаборКолонокДокументыКИмпорту.Индекс(НаборКолонокДокументыКИмпорту.Найти("КонтрагентЗаполнен"))
		);
	КонецЕсли;
	
	Если НаборКолонокДокументыКИмпорту.Найти("ЭтоВнутреннееПеремещение") <> Неопределено Тогда
		НаборКолонокДокументыКИмпорту.Удалить(
			НаборКолонокДокументыКИмпорту.Индекс(НаборКолонокДокументыКИмпорту.Найти("ЭтоВнутреннееПеремещение"))
		);
	КонецЕсли;
	
	Если НаборКолонокДокументыКИмпорту.Найти("ПлатежноеПоручениеОснование") <> Неопределено Тогда
		НаборКолонокДокументыКИмпорту.Удалить(
			НаборКолонокДокументыКИмпорту.Индекс(НаборКолонокДокументыКИмпорту.Найти("ПлатежноеПоручениеОснование"))
		);
	КонецЕсли;
	
	Для Каждого ОбъектКРазбору Из ДеревоРазбора.Строки Цикл
		Если ОбъектКРазбору.ТипОбъекта = "БанковскийСчет" Тогда
			Для Каждого БанковскийСчет Из ОбъектКРазбору.Строки Цикл
				НоваяСтрокаДокументов = ВозвращаемыеДанные.Импорт_РасчетныеСчета.Добавить();
				Для Каждого СтрокаРеквизита Из БанковскийСчет.Строки Цикл
					НоваяСтрокаДокументов[СтрокаРеквизита.Реквизит] = СтрокаРеквизита.ЗначениеРеквизита;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого ВыпискаБанка Из ОбъектКРазбору.Строки Цикл
				Для Каждого СтрокаВыписки Из ВыпискаБанка.Строки Цикл
					Если СтрокаВыписки.Реквизит = "СтрокаТЧ" И СтрокаВыписки.Строки.Количество() > 0 Тогда
						НоваяСтрокаДокументов = ВозвращаемыеДанные.ДокументыКИмпорту.Добавить();
						Для Каждого СтрокаРеквизита Из СтрокаВыписки.Строки Цикл
							Если СтрокаРеквизита.Реквизит = "СекцияДокумент" Тогда
								НоваяСтрокаДокументов.Операция = СтрокаРеквизита.ЗначениеРеквизита;
							КонецЕсли;
							Если НаборКолонокДокументыКИмпорту.Найти(СтрокаРеквизита.Реквизит) <> Неопределено Тогда
								НоваяСтрокаДокументов[СтрокаРеквизита.Реквизит] = СтрокаРеквизита.ЗначениеРеквизита;
							КонецЕсли;
						КонецЦикла;
						
						// Заполним НДС из назначения платежа
						СтруктураНДС = ВыделитьНДСИзНазначенияПлатежа(
							НоваяСтрокаДокументов.НазначениеПлатежа,
							НоваяСтрокаДокументов.Сумма
						);
						
						Если ЗначениеЗаполнено(СтруктураНДС.СтавкаНДС) Тогда
							НоваяСтрокаДокументов.СтавкаНДС = СтруктураНДС.СтавкаНДС;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтруктураНДС.СуммаНДС) Тогда
							НоваяСтрокаДокументов.СуммаНДС = СтруктураНДС.СуммаНДС;
						КонецЕсли;
						
						// Проверим на соответствие ИНН владельца банковского счета и строки выписки.
						Если НЕ ПроверкаПройдена Тогда
							
							ТекстСообщения = "";
							АвтоматическоеОпределение = НЕ ЗначениеЗаполнено(ОрганизацияИзПараметров)
								И НЕ ЗначениеЗаполнено(СчетИзПараметров);
							ДанныеИзВыписки = ПолучитьБанковскийСчетИОрганизациюИзВыписки(
								НоваяСтрокаДокументов,
								НомерСчета,
								АвтоматическоеОпределение
							);
							ТекстСообщения = ДанныеИзВыписки.ТекстОшибки;
							
							Если ПустаяСтрока(ТекстСообщения) Тогда
								Если ДанныеИзВыписки.БанковскиеСчета.Количество() = 1 Тогда
									ДанныеБанковскогоСчета = ДанныеИзВыписки.БанковскиеСчета[0];
									Если НЕ АвтоматическоеОпределение
										И (ДанныеБанковскогоСчета.Организация <> ОрганизацияИзПараметров
											ИЛИ НЕ ПустаяСтрока(СчетИзПараметров.НомерСчета) И НомерСчета <> СчетИзПараметров.НомерСчета) Тогда
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонТекстаОшибкиВФайле(),
											НомерСчета,
											ДанныеИзВыписки.ИННОрганизации
										);
									Иначе
										БанковскийСчетОрганизации = ДанныеБанковскогоСчета.БанковскийСчет;
										Организация = ДанныеБанковскогоСчета.Организация;
									КонецЕсли;
								Иначе
									// найдем то, что соответствует отбору
									ПараметрыОтбора = Новый Структура;
									ПараметрыОтбора.Вставить("Организация", ОрганизацияИзПараметров);
									Если ЗначениеЗаполнено(СчетИзПараметров) Тогда
										ПараметрыОтбора.Вставить("БанковскийСчет", СчетИзПараметров);
									КонецЕсли;
									НайденныеБанковскиеСчета = ДанныеИзВыписки.БанковскиеСчета.НайтиСтроки(ПараметрыОтбора);
									Если НайденныеБанковскиеСчета.Количество() = 0 Тогда
										// данные из параметров не соответствуют данным из выписки
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонТекстаОшибкиВПрограмме(),
											НомерСчета,
											ДанныеИзВыписки.ИННОрганизации
										);
									ИначеЕсли НайденныеБанковскиеСчета.Количество() = 1 Тогда
										БанковскийСчетОрганизации = НайденныеБанковскиеСчета[0].БанковскийСчет;
										Организация = НайденныеБанковскиеСчета[0].Организация;
									Иначе
										// найдено несколько
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонТекстаОшибкиНесколькоОрганизаций(),
											НомерСчета,
											ДанныеИзВыписки.ИННОрганизации
											);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
								ВозвращаемыеДанные.Импорт_РасчетныеСчета.Очистить();
								ВозвращаемыеДанные.ДокументыКИмпорту.Очистить();
								ВозвращаемыеДанные.ТаблицаКонтрагентов.Строки.Очистить();
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
								
								Возврат РезультатОперации;
								
							КонецЕсли;
							
							ПроверкаПройдена = Истина;
						КонецЕсли;
						
					ИначеЕсли СтрокаВыписки.Строки.Количество() = 0 Тогда
						ВозвращаемыеДанные.Импорт_Заголовок.Вставить(СтрокаВыписки.Реквизит, СтрокаВыписки.ЗначениеРеквизита);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НомерСтроки = 0;
	
	// Формируем объектные структуры данных.
	Для Каждого СтрокаДокумента Из ВозвращаемыеДанные.ДокументыКИмпорту Цикл
		
		БанковскийСчет = "";
		
		РезультатОперации.Добавить(
			РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, БанковскийСчетОрганизации, Организация, РежимЗагрузкиИзСообщения)
		);
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;
		
		// Для каждого реквизита (= колонка) надо проверить на пустое значение.
		Если ТаблицаФормы <> Неопределено Тогда
			Для Каждого КолонкаИмпорта Из НаборКолонокДокументыКИмпорту Цикл
				ПроверитьНаПустоеЗначениеИмпорта(
					СтрокаДокумента,
					КолонкаИмпорта.Имя,
					ТаблицаФормы.ПодчиненныеЭлементы["ДокументыКИмпорту" + КолонкаИмпорта.Имя].Заголовок);
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
			// Добавляем реквизиты в табличную часть для дальнейшего использования.
			
			СтрокаДокумента.ПометитьКонтрагентСчет = Истина;
			СписокНенайденных(
				СтрокаДокумента,
				БанковскийСчетОрганизации,
				ВозвращаемыеДанные.ТаблицаКонтрагентов,
				ВозвращаемыеДанные.СоответствиеВалютыСчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗагрузки.Организация = Организация;
	ПараметрыЗагрузки.БанковскийСчет = БанковскийСчетОрганизации;
	
	Возврат РезультатОперации;
	
КонецФункции

// Процедура загружает платежные документы в информационную базу.
//
// Параметры:
//   ДокументыКИмпорту			  - ТаблицаЗначений				 - таблица с данными документов.
//   Импорт_Заголовок			  - Строка						 - данные для заполнения заголовка файла импорта.
//	 Организация				  - СправочникСсылка.Организации - информация об организации загрузки.
//   Импорт_РасчетныеСчета		  - ТаблицаЗначений				 - информация о расчетных счетах контрагентов.
//   НастройкаЗаполнения		  - ТаблицаЗначений				 - таблица со значениями по умолчанию для документов.
//
Процедура Загрузить(ДокументыКИмпорту,
		Импорт_Заголовок,
		Организация,
		Импорт_РасчетныеСчета,
		ПроводитьДокументы,
		РежимЗагрузкиИзСообщения = Ложь) Экспорт
		
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	СписокБанковскихСчетов = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр(
			"ru='В заголовке файла загрузки неверно указана дата начала интервала. Файл не может быть загружен.'"
		);
		
		Сообщение.Сообщить();
				
		Возврат;
		
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В заголовке файла импорта неверно указана дата окончания интервала.'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	// Загружаем отмеченные секции документов.
	Для Каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загружать Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если СписокБанковскихСчетов.НайтиПоЗначению(СтрокаСекции.СчетОрганизации) = Неопределено Тогда
					СписокБанковскихСчетов.Добавить(СтрокаСекции.СчетОрганизации);
				КонецЕсли;			
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					
					// В ИБ не найден документ, необходимо создать новый.
					
					ОбъектДокумента = Документы.Выписка.СоздатьДокумент();
					ОбъектДокумента.ВхДокДата  = СтрокаСекции.ДатаДок;
					ОбъектДокумента.ВхДокНомер = СтрокаСекции.НомерДок;
					
				Иначе
					
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					
				КонецЕсли;
				
				ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
				
				// Заполняем все реквизиты документа.
				СтрокаСекции.ВидДокумента = "ПлатежноеПоручение";
				ОбъектДокумента = ЗаполнитьРеквизитыДокументаВыписка(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, РежимЗагрузкиИзСообщения);
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, ПроводитьДокументы, РежимЗагрузкиИзСообщения);
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
						
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
						СтрокаСекции.НомерДок = ОбъектДокумента["Номер"];
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Платежный документ ""%1"" №%2 от %3 не может быть загружен:%4%5.'"), 
					СтрокаСекции.Операция,
					СтрокаСекции.Номер,
					СтрокаСекции.Дата,
					Символы.ПС,
					РезультатПроверки
				);
				Сообщение.Сообщить();
				
			КонецЕсли;
	
		КонецЕсли;

	КонецЦикла;
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	
	Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='Загрузка платежных документов в информационную базу завершена.'");
	Сообщение.Сообщить();
	
КонецПроцедуры

// Загружает платежные документы в информационную базу, которые получены из сообщений с баноком.
//
// Параметры:
//  РазобранныеВыписки	 - Структура - Полученные выписки из сообщения обмена с банком.
//
Процедура ЗагрузкаБанковскойВыпискиИзСообщенияОбмена(РазобранныеВыписки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗагрузки = ПараметрыЗагрузки();
	
	РаспознанныеДанныеИзБанка = НастройкиДляЗагрузкиВыписок();
	
	РезультатОперации = ЗаполнитьДокументыНаИмпорт(
		РазобранныеВыписки,
		ПараметрыЗагрузки,
		Неопределено,
		РаспознанныеДанныеИзБанка,
		Истина);
	
	Если РезультатОперации <> Неопределено Тогда
		
		// Чтобы дважды не выводить сообщение об одном счете.
		УжеВыведенныеСчета = Новый Массив;
		Для Каждого Результат Из РезультатОперации Цикл
			
			Если ЗначениеЗаполнено(Результат.ТекстСообщения)
				И УжеВыведенныеСчета.Найти(Результат.НомерСчета) = Неопределено Тогда
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Автоматическая загрузка банковских выписок'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Документы.Выписка,
					ПолучитьЗначениеПараметраСтруктуры(РазобранныеВыписки, "СообщениеОбмена", Неопределено),
					Результат.ТекстСообщения);
				УжеВыведенныеСчета.Добавить(Результат.НомерСчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РаспознанныеДанныеИзБанка.ДокументыКИмпорту.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыеКонтрагенты = Новый Соответствие;
	НовыеСчета = Новый Соответствие;
	
	// Создадим контрагентов
	Если РаспознанныеДанныеИзБанка.ТаблицаКонтрагентов.Строки.Количество() > 0 Тогда
		
		Для Каждого КонтрагентВыписки Из РаспознанныеДанныеИзБанка.ТаблицаКонтрагентов.Строки Цикл
			
			КонтрагентСчет = СоздатьКонтрагента(КонтрагентВыписки, РаспознанныеДанныеИзБанка.СоответствиеВалютыСчета, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(НовыеКонтрагенты, КонтрагентСчет.Контрагенты);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(НовыеСчета, КонтрагентСчет.БанковскиеСчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполним счет и контрагента в документах
	Для Каждого СтрокаВыписки Из РаспознанныеДанныеИзБанка.ДокументыКИмпорту Цикл
		
		СтрокаВыписки.Загружать = Истина;
		
		Если ТипЗнч(СтрокаВыписки.Контрагент) = Тип("Строка") Тогда
			Контрагент = НовыеКонтрагенты.Получить(СтрокаВыписки.НомерСтроки);
			Если Контрагент <> Неопределено Тогда
				СтрокаВыписки.Контрагент = Контрагент;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаВыписки.СчетКонтрагента) = Тип("Строка") Тогда
			Счет = НовыеСчета.Получить(СтрокаВыписки.НомерСтроки);
			Если Счет <> Неопределено Тогда
				СтрокаВыписки.СчетКонтрагента = Счет;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Загрузим выписки
	Загрузить(
		РаспознанныеДанныеИзБанка.ДокументыКИмпорту,
		РаспознанныеДанныеИзБанка.Импорт_Заголовок,
		ПараметрыЗагрузки.Организация,
		РаспознанныеДанныеИзБанка.Импорт_РасчетныеСчета,
		Истина,
		Истина
	);
	
КонецПроцедуры

Функция ЗаполнитьРеквизитыДокументаВыписка (ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, РежимЗагрузкиИзСообщения)
	ВыпискаОбъект = ОбъектДокумента;
	
	// Заполним шапку документа
	ВыпискаОбъект.ХозОперация  = Справочники.ХозОперации.СтрокаБанковскойВыписки;
	ВыпискаОбъект.Дата         = СтрокаСекции.ДатаПроведения;
	ВыпискаОбъект.ДатаОперации = СтрокаСекции.ДатаПроведения;
	ВыпискаОбъект.ДатаСоздания = СтрокаСекции.ДатаПроведения;
	
	ВыпискаОбъект.БанковскийСчет = СтрокаСекции.СчетОрганизации;
	ВыпискаОбъект.ВалютаДокумента = ВыпискаОбъект.БанковскийСчет.ВалютаДенежныхСредств;
	Если ЗначениеЗаполнено(ВыпискаОбъект.БанковскийСчет.ПодразделениеКомпании) Тогда
		ВыпискаОбъект.ПодразделениеКомпании = ВыпискаОбъект.БанковскийСчет.ПодразделениеКомпании;
	Иначе
		ВыпискаОбъект.ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	КонецЕсли;
	ВыпискаОбъект.Организация = ВыпискаОбъект.БанковскийСчет.Владелец;
	
	ВыпискаОбъект.Заполнить(Неопределено);
	
	Если СтрокаСекции.ВидДвижения = Перечисления.ВидыДвижений.Расход Тогда
		ВыпискаОбъект.СуммаДокументаРасход = СтрокаСекции.СуммаСписано;
	ИначеЕсли СтрокаСекции.ВидДвижения = Перечисления.ВидыДвижений.Приход Тогда
		ВыпискаОбъект.СуммаДокументаПриход = СтрокаСекции.СуммаПоступило;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСекции.СтавкаНДС) Тогда
		ВыпискаОбъект.СтавкаНДС = СтрокаСекции.СтавкаНДС;
	Иначе
		ВыпискаОбъект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Документы.Выписка.СтавкаНДСПриИзменении(ВыпискаОбъект);
	ВыпискаОбъект.СуммаНДС = СтрокаСекции.СуммаНДС;
	
	ВыпискаОбъект.СтатьяДДС = СтрокаСекции.СтатьяДДС;
	ВыпискаОбъект.Контрагент = СтрокаСекции.Контрагент;
	ВыпискаОбъект.НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа;
	
	ВыпискаОбъект.ВидОперации = СтрокаСекции.ВидОперации;
	Документы.Выписка.ВидОперацииПриИзменении(ВыпискаОбъект);
	
	Если ВыпискаОбъект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации
		ИЛИ ВыпискаОбъект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации Тогда
		ВыпискаОбъект.БанковскийСчетКонтрагента = СтрокаСекции.СчетКонтрагента;
	КонецЕсли;
	
	ВыпискаОбъект.ПлатежноеПоручениеОснование = СтрокаСекции.ПлатежноеПоручениеОснование;
	ВыпискаОбъект.ДоговорВзаиморасчетов = СтрокаСекции.ДоговорВзаиморасчетов;
	
	Если Не ЗначениеЗаполнено(ВыпискаОбъект.ДоговорВзаиморасчетов)
		И Не Документы.Выписка.ПроверитьВидОперацииПеремещение(ВыпискаОбъект.ВидОперации) Тогда
		ЗаполнитьДоговорВзаиморасчетов(СтрокаСекции, ВыпискаОбъект.БанковскийСчет, Ложь, ВыпискаОбъект, РежимЗагрузкиИзСообщения);
		ВыпискаОбъект.ДоговорВзаиморасчетов = СтрокаСекции.ДоговорВзаиморасчетов;
	КонецЕсли;
	
	ВыпискаОбъект.СтатьяДДС = СтрокаСекции.СтатьяДДС;
	Если Не ЗначениеЗаполнено(ВыпискаОбъект.СтатьяДДС) И ЗначениеЗаполнено(ВыпискаОбъект.ДоговорВзаиморасчетов)
		И ЗначениеЗаполнено(ВыпискаОбъект.ДоговорВзаиморасчетов.СтатьяДДС) Тогда
		ВыпискаОбъект.СтатьяДДС = ВыпискаОбъект.ДоговорВзаиморасчетов.СтатьяДДС;
	КонецЕсли;
	
	// Если перезаписываем документ, очистим в нем ТЧ "Состав"
	Если ЗначениеЗаполнено(ВыпискаОбъект.Ссылка) Тогда
		ВыпискаОбъект.Состав.Очистить();
	КонецЕсли;
	
	НоваяСтрока = ВыпискаОбъект.Состав.Добавить();
	
	НоваяСтрока.Контрагент	= СтрокаСекции.Контрагент;
	НоваяСтрока.ДоговорВзаиморасчетов = ВыпискаОбъект.ДоговорВзаиморасчетов;
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеЗаполнятьСуммуДолга", Истина);
	Документы.Выписка.СоставДоговорВзаиморасчетовПриИзменении(ВыпискаОбъект, НоваяСтрока, ПараметрыДействия);
	НоваяСтрока.СтатьяДДС = ВыпискаОбъект.СтатьяДДС;
	НоваяСтрока.СтавкаНДС = ВыпискаОбъект.СтавкаНДС;
	
	Если СтрокаСекции.ВидДвижения = Перечисления.ВидыДвижений.Расход Тогда
		НоваяСтрока.СуммаРасход	= СтрокаСекции.СуммаСписано;
	ИначеЕсли СтрокаСекции.ВидДвижения = Перечисления.ВидыДвижений.Приход Тогда
		НоваяСтрока.СуммаПриход	= СтрокаСекции.СуммаПоступило;
	КонецЕсли;
	// Заполним остальные реквизиты строки
	НоваяСтрока.НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа;
	НоваяСтрока.КодВидаДохода     = СтрокаСекции.КодВидаДохода;
	
	НоваяСтрока.СуммаНДС = ВыпискаОбъект.СуммаНДС;
	
	Возврат ВыпискаОбъект;
КонецФункции

Функция НайтиПлатежноеПоручение(Выписка, ДанныеПлатежногоПоручения, СтрокаСекции)
	
	Если НЕ (СтрокаСекции.ВидДвижения = Перечисления.ВидыДвижений.Расход И СтрокаСекции.ВидОплаты = "01") Тогда 
		Возврат ДанныеПлатежногоПоручения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка КАК Ссылка,
		|	ПлатежноеПоручение.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ПлатежноеПоручение.Контрагент КАК Контрагент,
		|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
		|	ПлатежноеПоручение.Номер КАК Номер,
		|	ПлатежноеПоручение.Дата КАК Дата,
		|	ПлатежноеПоручение.СтатьяДДС КАК СтатьяДДС
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.Контрагент = &Контрагент
		|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации
		|	И ПлатежноеПоручение.Дата <= &ПериодДокументаКонец
		|	И ПлатежноеПоручение.Дата >= &ПериодДокументаНачало
		|	И ПлатежноеПоручение.Номер ПОДОБНО ""%"" + &Номер
		|	И ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	ПериодДокументаКонец = КонецДня(Выписка.ВхДокДата);
	ПериодДокументаНачало = НачалоДня(ПериодДокументаКонец - 86400*10); // платежное поручение действительно 10 дней  после составления
	Запрос.УстановитьПараметр("ПериодДокументаКонец", ПериодДокументаКонец);  
	Запрос.УстановитьПараметр("ПериодДокументаНачало", ПериодДокументаНачало); 
	Запрос.УстановитьПараметр("Контрагент", Выписка.Контрагент);
	Запрос.УстановитьПараметр("Номер", Выписка.ВхДокНомер);
	Запрос.УстановитьПараметр("СуммаДокумента", СтрокаСекции.СуммаСписано);
	Запрос.УстановитьПараметр("СчетОрганизации", Выписка.БанковскийСчет); 
	
	Если Выписка.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации Тогда 
		Запрос.Текст =СтрЗаменить(Запрос.Текст, "ПлатежноеПоручение.Контрагент = &Контрагент И", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НомерПП = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Выборка.Номер);
		НомерВходящий = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Выписка.ВхДокНомер);
		
		Если НомерПП = НомерВходящий Тогда 
			ДанныеПлатежногоПоручения.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			ДанныеПлатежногоПоручения.СтатьяДДС = Выборка.СтатьяДДС;
			ДанныеПлатежногоПоручения.ПлатежноеПоручение = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеПлатежногоПоручения;
КонецФункции 

// Функция создает контрагента.
//
// Параметры:
//   СтрокаКонтрагент  - элемент дерева значений - данные о контрагенте.
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ВалютаСчетов = Неопределено, РежимЗагрузкиИзСообщения = Ложь) Экспорт
	
	СообщатьОСозданномКонтрагенте 	  = Ложь;
	СообщатьОСозданномБанковскомСчете = Ложь;
	ЭтоКонтрагентНеразобранныхПлатежей = Ложь;
	НомерСтрокиКонтрагент = "";
	НомерСтрокиБанковскийСчет = "";
	
	// Эти элементы есть у всех справочников.
	Если Не ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Контрагенты")
		И Не ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Организации") Тогда
		
		Если РежимЗагрузкиИзСообщения И СтрДлина(СтрокаКонтрагент.Строки[1].Значение) < 10 Тогда
			
			НовыйЭлемент = Константы.КонтрагентНеразобранныхПлатежей.Получить();
			Если Не ЗначениеЗаполнено(НовыйЭлемент) Тогда
				УстановитьПривилегированныйРежим(Истина);
				НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
				НовыйЭлемент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Прочее;
				НовыйЭлемент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
				НовыйЭлемент.Наименование = НСтр("ru = 'Для неидентифицированных платежей'");
				НовыйЭлемент.НаименованиеПолное = НовыйЭлемент.Наименование;
				НовыйЭлемент.Комментарий = НСтр("ru = 'Создан автоматически при загрузке банковских выписок через Директ-банк'");
				НовыйЭлемент.УстановитьНовыйКод();
				НовыйЭлемент.ОбменДанными.Загрузка = Истина;
				Попытка
					НовыйЭлемент.Записать();
				Исключение
					// добавить запись в ЖР
					ВызватьИсключение НСтр("ru = 'Не удалось создать элемент справочника ""Контрагенты"".
						|Заполните ""Контрагент для неидентифицированных плательщиков"" в настройках параметров учета'");
				КонецПопытки;
				Контрагент = НовыйЭлемент.Ссылка;
				Константы.КонтрагентНеразобранныхПлатежей.Установить(НовыйЭлемент.Ссылка);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			ЭтоКонтрагентНеразобранныхПлатежей = Истина;
		Иначе
			
			НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
			
			ПолноеНаименование = УдалитьРазделитель(СтрокаКонтрагент.Представление);
			СтруктураНаименования = Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(ПолноеНаименование);
			ИННКПП = СтрокаКонтрагент.Строки;
			НовыйЭлемент.ИНН = ИННКПП[1].Значение;
			
			НовыйЭлемент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Прочее;
			
			ДлинаИННИП = 12;
			Если СтрДлина(НовыйЭлемент.ИНН) = ДлинаИННИП Тогда
				
				НовыйЭлемент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
				НовыйЭлемент.Наименование = СтруктураНаименования.Наименование;
				Если НЕ ПустаяСтрока(СтруктураНаименования.Фамилия) Тогда
					НовыйЭлемент.Фамилия = СтруктураНаименования.Фамилия;
					НовыйЭлемент.Имя = СтруктураНаименования.Имя;
					НовыйЭлемент.Отчество = СтруктураНаименования.Отчество;
				Иначе
					СтруктураФИО = ПолучитьФИОИзКраткогоНаименования(СтруктураНаименования.Наименование);
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураФИО);
				КонецЕсли;
				НовыйЭлемент.НаименованиеПолное = СтруктураНаименования.Наименование;
				НовыйЭлемент.КПП = "";
				
			Иначе
				НовыйЭлемент.КПП = ИННКПП[2].Значение;
				НовыйЭлемент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
				НовыйЭлемент.Наименование = СтруктураНаименования.Наименование;
				НовыйЭлемент.НаименованиеПолное = ПолноеНаименование;
			КонецЕсли;
			
			Если РежимЗагрузкиИзСообщения Тогда
				
				Если Не ЗначениеЗаполнено(НовыйЭлемент.Код) Тогда
					НовыйЭлемент.УстановитьНовыйКод();
				КонецЕсли;
				
				НовыйЭлемент.ОбменДанными.Загрузка = Истина;
				
			КонецЕсли;
			
			НовыйЭлемент.Записать();
			
			СообщатьОСозданномКонтрагенте = Истина;
			
		КонецЕсли;
		
	Иначе
		
		НовыйЭлемент = СтрокаКонтрагент.Реквизит;
		
	КонецЕсли;
	
	НомерСтрокиКонтрагент = СтрокаКонтрагент.НомСтроки;
	
	Если СообщатьОСозданномКонтрагенте Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Контрагент (%1) создан.'"),
			СтрокаКонтрагент.Представление
		);
				
		Сообщение.Сообщить();
		
		ПредставлениеКонтрагента = "" + Символы.Таб + "- ";
		
	Иначе
		
		Если ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Контрагенты") Тогда 
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Контрагенту(%1)'"),
				СтрокаКонтрагент.Представление
			);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Организации") Тогда 
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Организации(%1)'"),
				СтрокаКонтрагент.Представление
			);
		КонецЕсли;
		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	НовыеСчета = Новый Массив;
	
	Для Каждого Строка Из СтрокаКонтрагент.Строки Цикл
		
		СообщатьОСозданномБанковскомСчете = Ложь;
		
		Если Строка.Представление = "Р/счет" И (Строка.Флажок > 0 Или РежимЗагрузкиИзСообщения) Тогда
			
			Попытка
				
				НомерСчета = Строка.Значение;
				ВалютаСчета = Неопределено;
				Если ВалютаСчетов <> Неопределено Тогда
					НайденнаяВалюта = ВалютаСчетов.НайтиСтроки(Новый Структура("НомерСчета", НомерСчета));
					Если НайденнаяВалюта.Количество() > 0 Тогда
						ВалютаСчета = НайденнаяВалюта[0].Валюта;
					КонецЕсли;
				КонецЕсли;
				
				Если ВалютаСчета = Неопределено Тогда
					ВалютаСчета = ПолучитьВалютуПоНомеруСчета(НомерСчета);
				КонецЕсли;
				
				НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				
				НовыйСчет.НомерСчета            = НомерСчета;
				НовыйСчет.Владелец              = НовыйЭлемент.Ссылка;
				НовыйСчет.ВалютаДенежныхСредств = ?(ЗначениеЗаполнено(ВалютаСчета), 
													ВалютаСчета, ВалютаРегламентированногоУчета);
				                               				
				РССчет = Строка.Строки;
				
				Если НЕ НайтиЭлементДерева(РССчет, "Представление", НСтр("ru = 'РЦ банка'")) = Неопределено Тогда
					
					// Банк контрагента.
					Если НЕ ПустаяСтрока(РССчет[0].Значение) Тогда
						
						НовыйБанк = НайтиБанк(РССчет[0].Значение, РССчет[1].Значение, "", РССчет[2].Значение);
						
						Если НЕ НовыйБанк = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
											
							НовыйСчет.Банк = НовыйБанк.Ссылка;
							
						КонецЕсли;
						
					КонецЕсли;
					
					// РЦ банка контрагента.
					Если НЕ ПустаяСтрока(РССчет[3].Значение) Тогда
						
						НовыйБанкКорр = НайтиБанк(РССчет[3].Значение, РССчет[4].Значение, РССчет[5].Значение, РССчет[6].Значение);
						
						Если НЕ НовыйБанкКорр = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
							
							Если НовыйСчет.Банк =  Справочники.КлассификаторБанков.ПустаяСсылка() Тогда 
								 НовыйСчет.Банк =  НовыйБанкКорр.Ссылка; 
							Иначе
								 НовыйСчет.БанкДляРасчетов = НовыйБанкКорр.Ссылка;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					// Банк контрагента.
					НовыйБанк = НайтиБанк(РССчет[0].Значение, РССчет[1].Значение, РССчет[2].Значение, РССчет[3].Значение);
					
					Если НовыйБанк = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
						
						НовыйБанк = Справочники.КлассификаторБанков.СоздатьЭлемент();
						
						НовыйБанк.Наименование = РССчет[0].Значение;
						НовыйБанк.Город        = РССчет[1].Значение;
						Если НЕ ПустаяСтрока(РССчет[2].Значение)
							И (СтрДлина(РССчет[2].Значение) > 9
							ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(РССчет[2].Значение)) Тогда
							НовыйБанк.СВИФТБИК = РССчет[2].Значение;
							НовыйБанк.МеждународноеНаименование = НовыйБанк.Наименование;
						Иначе
							НовыйБанк.Код = РССчет[2].Значение;
						КонецЕсли;
						НовыйБанк.КоррСчет     = РССчет[3].Значение;
						
						Если РежимЗагрузкиИзСообщения Тогда
							
							НовыйБанк.ОбменДанными.Загрузка = Истина;
							
						КонецЕсли;
						
						НовыйБанк.Записать();
						
						НовыйСчет.Банк = НовыйБанк.Ссылка;
						
					Иначе
						
						НовыйСчет.Банк = НовыйБанк.Ссылка;
						
					КонецЕсли;
					
				КонецЕсли;
				
				НовыйСчет.Наименование = Справочники.БанковскиеСчета.СформироватьНаименованиеПоУмолчанию(НовыйСчет);
				НовыйСчет.ВидСчета = "Расчетный";
				
				Если РежимЗагрузкиИзСообщения Тогда
					
					НовыйСчет.ОбменДанными.Загрузка = Истина;
					
					Если Не ЗначениеЗаполнено(НовыйСчет.Код) Тогда
						НовыйСчет.УстановитьНовыйКод();
					КонецЕсли;
					
					Если ЭтоКонтрагентНеразобранныхПлатежей Тогда
						НовыйСчет.Комментарий = СтрШаблон(
							НСтр("ru = 'Создан автоматически при загрузке из Директ-банка.
								|Данные о владельце из выписки: Контрагент ""%1"", ИНН ""%2""'"),
							СтрокаКонтрагент.Представление,
							СтрокаКонтрагент.Строки[1].Значение
						);
					КонецЕсли;
					
				КонецЕсли;
				
				НовыйСчет.Записать();
				
				Если РежимЗагрузкиИзСообщения Тогда
					НовыеСчета.Добавить(Новый Структура("НомераСтрок, БанковскийСчет", Строка.НомСтроки, НовыйСчет.Ссылка));
				КонецЕсли;
				
				СообщатьОСозданномБанковскомСчете = Истина;
				
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='Не удалось создать банковский счет контрагента.'");
				
				Сообщение.Сообщить();
				
			КонецПопытки;
			
		КонецЕсли;
			
		Если СообщатьОСозданномБанковскомСчете Тогда
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст 
					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 добавлен банковский счет (%2).'"), 
																				ПредставлениеКонтрагента, 
																				НомерСчета);
						
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РежимЗагрузкиИзСообщения Тогда
		Контрагенты = Новый Соответствие;
		БанковскиеСчета = Новый Соответствие;
		Для Каждого НомерСтроки Из СтрРазделить(НомерСтрокиКонтрагент, ",", Ложь) Цикл
			Контрагенты.Вставить(Число(НомерСтроки), НовыйЭлемент.Ссылка);
		КонецЦикла;
		Для Каждого Счет Из НовыеСчета Цикл
			Для Каждого НомерСтроки Из СтрРазделить(Счет.НомераСтрок, ",", Ложь) Цикл
				БанковскиеСчета.Вставить(Число(НомерСтроки), Счет.БанковскийСчет);
			КонецЦикла;
		КонецЦикла;
		Возврат Новый Структура("Контрагенты, БанковскиеСчета", Контрагенты, БанковскиеСчета)
	КонецЕсли;
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

// Процедура формирует отчет о выгруженных в текущем сеансе работы платежных документах.
//
// Параметры:
//	 ПолеОтчета	 - ТабличныйДокумент			- отчет.
//   Источник	 - ТабличнаяЧасть			 	- таблица с данными документов.
//   Организация - СправочникСсылка.Организации - информация об организации выгрузки.
//   НачПериода  - Дата							- начало обрабатываемого периода.
//   КонПериода	 - Дата							- конец обрабатываемого периода.														  
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, 
														Источник, 
														Организация, 
														НачПериода, 
														КонПериода) Экспорт
		
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета = НСтр("ru='Отчет о выгруженных документах'");
	
	ОбрБанковскийСчет = "";
	
	Индекс      = 0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		БанковскийСчет = СтрокаИсточника.Документ.СчетОрганизации;
		
		Если ОбрБанковскийСчет <>  БанковскийСчет Тогда
			
			Если ЗначениеЗаполнено(ОбрБанковскийСчет) Тогда
				Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
				Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
	
				ПолеОтчета.Вывести(Подвал);
                			
				Индекс      = 0;
				ИтогоСуммаП = 0;
				ИтогоСуммаР = 0;
			КонецЕсли;	
			
			ОбрБанковскийСчет = БанковскийСчет;
			
			НаимВалюты = БанковскийСчет.ВалютаДенежныхСредств.Наименование;
			НаимВалюты = ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, НСтр("ru='не указана'"));
			НачалоОтчетногоПериода = Формат(НачПериода, "ДЛФ=D");
			КонецОтчетногоПериода = Формат(КонПериода, "ДЛФ=D");
			
			Шапка.Параметры.ОписаниеПериода	=
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по счету %1 (валюта: %2) с %3 по %4'"),
							СокрЛП(БанковскийСчет.НомерСчета),
							НаимВалюты,
			                НачалоОтчетногоПериода,
			                КонецОтчетногоПериода);
			ПолеОтчета.Вывести(Шапка);
            			
		КонецЕсли;	
		
		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Параметры.Плательщик = СтрокаИсточника.ОрганизацияНаим;
		
		НаимВалюты = СтрокаИсточника.Документ.СчетОрганизации.ВалютаДенежныхСредств.Наименование;
		НаимВалюты = ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, НСтр("ru='не указана'"));
                                                                                                             		
		Строка.Параметры.ПлательщикСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (валюта:%2'"),
		                                             СтрокаИсточника.ОрганизацияРасчСчет,
													 НаимВалюты);
		
		Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
				
		Если ЗначениеЗаполнено(СтрокаИсточника.Документ.СчетКонтрагента) Тогда
			НаимВалюты = СтрокаИсточника.Документ.СчетКонтрагента.ВалютаДенежныхСредств.Наименование;
			НаимВалюты = ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, НСтр("ru='не указана'"));
		Иначе
			НаимВалюты = "";
		КонецЕсли;
				
		Строка.Параметры.ПолучательСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (валюта:%2'"),
		                                             СтрокаИсточника.КонтрагентРасчСчет,
													 НаимВалюты);
        		
		Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
		ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		
		Строка.Параметры.Документ = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку 		 = Ложь;
	ПолеОтчета.ТолькоПросмотр 		 = Истина;
	
КонецПроцедуры

// Процедура формирует отчет о загруженных в текущем сеансе данных.
//
// Параметры:
//	 ПолеОтчета			   - ТабличныйДокумент			  - информация об организации загрузки.
//   Источник			   - ТабличнаяЧасть			 	  - таблица с данными документов.
//   Организация		   - СправочникСсылка.Организации - информация об организации загрузки.
//   Импорт_РасчетныеСчета - ТаблицаЗначений			  - информация о расчетных счетах контрагентов.
//   Импорт_Заголовок	   - Строка						  - данные для заполнения заголовка файла импорта.
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, 
														Источник, 
														Организация, 
														Импорт_РасчетныеСчета, 
														Импорт_Заголовок) Экспорт
		
	ИмеетсяСекцияРасчСчет = Ложь;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		
		Если НЕ ПустаяСтрока(СтрокаСчета.ДатаНачала) Тогда
			
			Индекс                = 0;
			ИтогоСуммаП           = 0;
			ИтогоСуммаР           = 0;
			ИмеетсяСекцияРасчСчет = Истина;
			
			НаимВалюты = ПоискБанковскогоСчета(СтрокаСчета.РасчСчет).ВалютаДенежныхСредств.Наименование;
			НаимВалюты = ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, НСтр("ru='не указана'"));
			
			Шапка.Параметры.ИмяОтчета 		= НСтр("ru='Отчет о загруженных документах'");
			Шапка.Параметры.ОписаниеПериода	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по счету %1 (валюта:%2 ) с %3 по %4'"),
		                                             СтрокаСчета.РасчСчет,
													 НаимВалюты,
													 СтрокаСчета.ДатаНачала,
													 СтрокаСчета.ДатаКонца);
            		
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			ДатаНачала = ПолучитьДатуИзСтроки(ДатаНачала, СтрокаСчета.ДатаНачала);
						
			Если ЗначениеЗаполнено(СтрокаСчета.ДатаКонца) Тогда
				ДатаКонца = ПолучитьДатуИзСтроки(ДатаКонца, СтрокаСчета.ДатаКонца);
			Иначе
				ДатаКонца = '21000101';
			КонецЕсли;
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если (СтрокаИсточника.ПлательщикРасчСчет <> СтрокаСчета.РасчСчет) 
					И (СтрокаИсточника.ПолучательРасчСчет <> СтрокаСчета.РасчСчет) Тогда
   		    		Продолжить;
				КонецЕсли;
                				
				Если ТипЗнч(СтрокаИсточника.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					НаимВалюты = СтрокаИсточника.СчетКонтрагента.ВалютаДенежныхСредств.Наименование;
					НаимВалюты = ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, НСтр("ru='не указана'"));
				Иначе
					НаимВалюты = "";
				КонецЕсли;
				
				Если СтрокаИсточника.СуммаПоступило > 0 
				   И СтрокаИсточника.Поступило >= ДатаНачала И СтрокаИсточника.Поступило <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент      
							= ?(ПустаяСтрока(СтрокаИсточника.Плательщик1), СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (валюта:%2 )'"),
		                                             СтрокаИсточника.ПлательщикСчет,
													 НаимВалюты);
 					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0 
					И СтрокаИсточника.Списано >= ДатаНачала И СтрокаИсточника.Списано <= ДатаКонца Тогда

					Строка.Параметры.Контрагент      
							= ?(ПустаяСтрока(СтрокаИсточника.Получатель1), СтрокаИсточника.Получатель, СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (валюта:%2 )'"),
		                                             СтрокаИсточника.ПолучательСчет,
													 НаимВалюты);
		       		Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;	
	
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер             = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				Док = СтрокаИсточника.Документ;
				
				Если ЗначениеЗаполнено(Док) Тогда
					
					Строка.Параметры.Документ     = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
					
					Если ТипЗнч(Док) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
					 ИЛИ ТипЗнч(Док) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
						Строка.Параметры.ТипДокумента = СтрокаИсточника.СтатьяДДС; 
						
					Иначе
						Строка.Параметры.ТипДокумента = Док.ТипПлатежногоДокумента;
					КонецЕсли;
					
				Иначе
					
					Строка.Параметры.Документ     = НСтр("ru='НЕ ЗАГРУЖЕН'");
					Строка.Параметры.ТипДокумента = СтрокаИсточника.Операция;
					
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
						
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остаток на начало %1 :'"),
		                                             СтрокаСчета.ДатаНачала);
            Остатки.Параметры.Текст2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остаток на конец %1 :'"),
		                                             СтрокаСчета.ДатаКонца);
 			
			Если НЕ ПустаяСтрока(СтрокаСчета.НачальныйОстаток) 
					И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.НачальныйОстаток, ".", ""), "-", ""), ",", "")) Тогда
				Остатки.Параметры.Сумма1 = Формат(Число(СтрокаСчета.НачальныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма1 = СтрокаСчета.НачальныйОстаток;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаСчета.КонечныйОстаток) 
					И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.КонечныйОстаток, ".", ""), "-", ""), ",", "")) Тогда
				Остатки.Параметры.Сумма2 = Формат(Число(СтрокаСчета.КонечныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма2 = СтрокаСчета.КонечныйОстаток;
			КонецЕсли;
			
			ПолеОтчета.Вывести(Остатки);
			
		КонецЕсли;

	КонецЦикла;

	Если НЕ ИмеетсяСекцияРасчСчет Тогда
		
		Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
			
			Индекс      = 0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			
			НаимВалюты = ПоискБанковскогоСчета(СтрокаСчета.РасчСчет).ВалютаДенежныхСредств.Наименование;
			
			Шапка.Параметры.ИмяОтчета 		= НСтр("ru='Отчет о загруженных документах'");
			Шапка.Параметры.ОписаниеПериода	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по счету %1 (валюта:%2 ) с %3 по %4'"),
		                                             СтрокаСчета.РасчСчет,
													 НаимВалюты,
													 Импорт_Заголовок.ДатаНачала,
													 Импорт_Заголовок.ДатаКонца);

			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;                    
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если (СтрокаИсточника.ПлательщикРасчСчет <> СтрокаСчета.РасчСчет) 
					И (СтрокаИсточника.ПолучательРасчСчет <> СтрокаСчета.РасчСчет) Тогда
   		    		Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(СтрокаИсточника.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда		
					НаимВалюты = СтрокаИсточника.СчетКонтрагента.ВалютаДенежныхСредств.Наименование;
					НаимВалюты = ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, НСтр("ru='не указана'"));
				Иначе
					НаимВалюты = "";
				КонецЕсли;
								
				Если СтрокаИсточника.СуммаПоступило > 0 Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1), 
															СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет 			  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (валюта:%2 )'"),
		                                             		СтрокаИсточника.ПлательщикСчет,
															НаимВалюты);
					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0  Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Получатель1),
															СтрокаИсточника.Получатель,СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет			  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (валюта:%2 )'"),
		                                             		СтрокаИсточника.ПолучательСчет,
													 		НаимВалюты);
 					Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
												
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				Док = СтрокаИсточника.Документ;
				
				Если ЗначениеЗаполнено(Док) Тогда
					
					Строка.Параметры.Документ     = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
					
					Если ТипЗнч(Док) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
					 ИЛИ ТипЗнч(Док) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
						Строка.Параметры.ТипДокумента = СтрокаИсточника.СтатьяДДС; 
						
					Иначе
						Строка.Параметры.ТипДокумента = Док.ХозОперация;
					КонецЕсли;
					
				Иначе
					
					Строка.Параметры.Документ     = НСтр("ru='НЕ ЗАГРУЖЕН'");
					Строка.Параметры.ТипДокумента = СтрокаИсточника.Операция;
					
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
						
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остаток на начало %1 :'"),
		                                             Импорт_Заголовок.ДатаНачала);
            Остатки.Параметры.Текст2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остаток на конец %1 :'"),
		                                             Импорт_Заголовок.ДатаКонца);
 			Остатки.Параметры.Сумма1 = "";
			Остатки.Параметры.Сумма2 = "";
			ПолеОтчета.Вывести(Остатки);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
		
КонецПроцедуры

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		
		Буфер = НоваяСтрока;
		
	Иначе
		
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Возврат Формат(Значение, "ДЛФ=D");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат Значение.Наименование;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСекциюДокумент(СтруктураДокумента, ВыгружатьКПП, ВерсияФормата)
	
	Буфер    = "";
	Реквизит = "";
	СтруктураДляЗаписи = СформироватьСтруктуруЭкспорта(ВерсияФормата);
	ЗаполнитьЗначениеЭкспорта(СтруктураДляЗаписи, СтруктураДокумента, ВыгружатьКПП);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для Каждого ВыгружаемыйРеквизит Из СтруктураДляЗаписи Цикл
		
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
				
		Если НЕ ПустаяСтрока(Значение) Тогда
			Если  ВыгружаемыйРеквизит.Ключ = "ПоказательТипа" Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "="); 
			Иначе
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта(ВерсияФормата)

	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить( "Выгружать",             ""); // "_"
	СтруктураЭкспорта.Вставить( "Готовность",            ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить( "НомерДок",              ""); // "№ Документа"
	СтруктураЭкспорта.Вставить( "Номер",                 ""); // "Номер"
	СтруктураЭкспорта.Вставить( "Дата",                  ""); // "Дата"
	СтруктураЭкспорта.Вставить( "Операция",              ""); // "Операция"
	СтруктураЭкспорта.Вставить( "СчетОрганизации",       ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить( "Сумма",                 ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить( "Контрагент",            ""); // "Контрагент"
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", ""); // "Эл. Р/с контрагента"
	
	СтруктураЭкспорта.Вставить( "КвитанцияДата",         ""); // "Дата форм. квитанции"
	СтруктураЭкспорта.Вставить( "КвитанцияВремя",        ""); // "Время форм. квитанции"
	СтруктураЭкспорта.Вставить( "КвитанцияСодержание",   ""); // "Содержание квитанции"
	
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик",            ""); // "Плательщик"
	СтруктураЭкспорта.Вставить( "ПлательщикИНН",         ""); // "ИНН плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик1",           ""); // "Наименование плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик2",           ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик3",           ""); // "Банк плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик4",           ""); // "Город банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикРасчСчет",    ""); // "Корсчет банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикБанк1",       ""); // "РЦ банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикБанк2",       ""); // "Город РЦ банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикБИК",         ""); // "БИК РЦ банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикКорсчет",     ""); // "Корсчет РЦ банка плат."
	
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить( "Получатель",            ""); // "Получатель"
	СтруктураЭкспорта.Вставить( "ПолучательИНН",         ""); // "ИНН получателя"
	СтруктураЭкспорта.Вставить( "Получатель1",           ""); // "Наименование получателя"
	СтруктураЭкспорта.Вставить( "Получатель2",           ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить( "Получатель3",           ""); // "Банк получателя"
	СтруктураЭкспорта.Вставить( "Получатель4",           ""); // "Город банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательРасчСчет",    ""); // "Корсчет банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательБанк1",       ""); // "РЦ банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательБанк2",       ""); // "Город РЦ банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательБИК",         ""); // "БИК РЦ банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательКорсчет",     ""); // "Корсчет РЦ банка пол."
	
	СтруктураЭкспорта.Вставить( "ВидПлатежа",            ""); // "Вид платежа"
	СтруктураЭкспорта.Вставить( "ВидОплаты",             ""); // "Вид оплаты"
	
	Если ВерсияФормата = "1.02" Или ВерсияФормата = "1.03" Тогда
		СтруктураЭкспорта.Вставить( "Код",               ""); // "Уникальный идентификатор платежа"
	КонецЕсли;
	
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     ""); // "Статус составителя"
	СтруктураЭкспорта.Вставить( "ПлательщикКПП",         ""); // "КПП плательщика"
	СтруктураЭкспорта.Вставить( "ПолучательКПП",         ""); // "КПП получателя"
	СтруктураЭкспорта.Вставить( "ПоказательКБК",         ""); // "Показатель КБК"
	СтруктураЭкспорта.Вставить( "ОКАТО",                 ""); // "ОКАТО"
	СтруктураЭкспорта.Вставить( "ПоказательОснования",   ""); // "Пок. основания"
	СтруктураЭкспорта.Вставить( "ПоказательПериода",     ""); // "Пок. нал. периода"
	СтруктураЭкспорта.Вставить( "ПоказательНомера",      ""); // "Пок. номера док."
	СтруктураЭкспорта.Вставить( "ПоказательДаты",        ""); // "Пок. даты док."
	СтруктураЭкспорта.Вставить( "ПоказательТипа",        ""); // "Пок. типа платежа"
	
	СтруктураЭкспорта.Вставить( "СрокПлатежа",           ""); // "Срок действия аккредитива"
	СтруктураЭкспорта.Вставить( "Очередность",           ""); // "Очередность платежа"
	
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     ""); // "Назначение платежа"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа1",    ""); // "Назначение платежа, стр. 1"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа2",    ""); // "Назначение платежа, стр. 2"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа3",    ""); // "Назначение платежа, стр. 3"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа4",    ""); // "Назначение платежа, стр. 4"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа5",    ""); // "Назначение платежа, стр. 5"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа6",    ""); // "Назначение платежа, стр. 6"
	
	СтруктураЭкспорта.Вставить( "СрокАкцепта",           ""); // "Срок акцепта"
	СтруктураЭкспорта.Вставить( "ВидАккредитива",        ""); // "Вид аккредитива"
	СтруктураЭкспорта.Вставить( "УсловиеОплаты1",        ""); // "Условие оплаты, стр. 1"
	СтруктураЭкспорта.Вставить( "УсловиеОплаты2",        ""); // "Условие оплаты, стр. 2"
	СтруктураЭкспорта.Вставить( "УсловиеОплаты3",        ""); // "Условие оплаты, стр. 3"
	СтруктураЭкспорта.Вставить( "ПлатежПоПредст",        ""); // "Платеж по представлению"
	СтруктураЭкспорта.Вставить( "ДополнУсловия",         ""); // "Дополнительные условия"
	СтруктураЭкспорта.Вставить( "НомерСчетаПоставщика",  ""); // "№ счета поставщика"
	СтруктураЭкспорта.Вставить( "ДатаОтсылкиДок",        ""); // "Дата отсылки документов"
	
	СтруктураЭкспорта.Вставить( "Документ",              ""); // "Источник"
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        ""); // "Замечания"
	СтруктураЭкспорта.Вставить( "ТипДокумента",          ""); // "Тип пл. документа"
	
	// Код вида дохода (наз. пл.) указывается при переводе денежных средств физическим лицам,
	// для классификации ограничений, которые могут быть наложены по исполнительномуо листу.
	СтруктураЭкспорта.Вставить("КодНазПлатежа",          ""); // "поле 20 - Наз. пл."
	
	Возврат СтруктураЭкспорта;
	
КонецФункции

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, ВыгружатьКПП)
	
	Плательщик = "Организация";
	Получатель = "Контрагент";
		
	СтрокаЭкспорта.Номер =	ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
		ВыборкаДляЭкспорта.Номер,
		Истина, // УдалитьПрефиксИнформационнойБазы
		Истина); // УдалитьПользовательскийПрефикс
	СтрокаЭкспорта.Дата           =	Формат(ВыборкаДляЭкспорта.Дата, "ДЛФ=Д");
	СтрокаЭкспорта.Сумма          =	Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет =	ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	СтрокаЭкспорта.ПолучательСчет =	ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	СтрокаЭкспорта.ВидПлатежа 	  =	ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);

	// ВидОплаты
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "01";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Аккредитив" Тогда
		СтрокаЭкспорта.ВидОплаты =  "08";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "ИнкассовоеПоручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "06";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "ПлатежноеТребование" Тогда
		СтрокаЭкспорта.ВидОплаты =  "02";
		
	Иначе
		СтрокаЭкспорта.ВидОплаты = "00";
		
	КонецЕсли;
		
	// Код - идентификатор платежа
	//
	СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.Код;
	Если Не ЗначениеЗаполнено(СтрокаЭкспорта.Код) Тогда
		СтрокаЭкспорта.Код = "0";
	КонецЕсли;
	
	// Плательщик1
	//
	СтрокаЭкспорта.Плательщик1 = ВыборкаДляЭкспорта[Плательщик + "Наим"];
	
	// Плательщик, ПлательщикИНН
	//
	СтрокаЭкспорта.ПлательщикИНН = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	СтрокаЭкспорта.Плательщик = "ИНН " + ВыборкаДляЭкспорта[Плательщик + "ИНН"] + " " + СтрокаЭкспорта.Плательщик1; 
	
	// ПлательщикРасчСчет, 
	// ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
	// Плательщик2, Плательщик3, Плательщик4.
	//
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2 		  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.Плательщик3 		  = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4 		  = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик 		  = СтрокаЭкспорта.Плательщик 
											+ " р/с " + СтрокаЭкспорта.Плательщик2 + " в " 
											+ СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
	КонецЕсли;
	
	// Получатель1
	//
	Контрагент = ВыборкаДляЭкспорта[Получатель];
	СтрокаЭкспорта.Получатель1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "НаименованиеПолное");
	
	// Получатель, ПолучательИНН
	//
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	СтрокаЭкспорта.ПолучательИНН = Значение;
	СтрокаЭкспорта.Получатель    = "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель1;
	
	// ПолучательРасчСчет, 
	// ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, 
	// Получатель2, Получатель3, Получатель4.
	//
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2 		  = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.Получатель3 		  = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4 		  = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель 		  = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " 
													+ СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
	КонецЕсли;
	
	// СтатусСоставителя, 
	// ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, 
	// ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа.
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
				
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если ПустаяСтрока(СтрокаЭкспорта.СтатусСоставителя) Тогда
			СтрокаЭкспорта.СтатусСоставителя = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		СтрокаЭкспорта.ОКАТО         = ВыборкаДляЭкспорта.КодОКАТО;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) 
				ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если ВыборкаДляЭкспорта.ПоказательДаты = "01.01.0001" Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = Формат(ВыборкаДляЭкспорта.ПоказательДаты,"ДЛФ=Д");
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
			СтрокаЭкспорта.ПоказательТипа = "0";
		Иначе
			СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
		КонецЕсли;
		
	ИначеЕсли ВыгружатьКПП Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
	КонецЕсли;
			
	// Очередность
	СтрокаЭкспорта.Очередность = ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
	// КодНазПлатежа
	Если ОбменСБанкамиКлиентСервер.ДействуетУказаниеБанкаРоссии5286У(ВыборкаДляЭкспорта.Дата) Тогда
		СтрокаЭкспорта.КодНазПлатежа = ВыборкаДляЭкспорта.КодВидаДохода;
	КонецЕсли;
	
	// НазначениеПлатежа, 
	// НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, 
	// НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6.
	//
	СтрокаЭкспорта.НазначениеПлатежа 
			= СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, " "), 
													Символы.ВК, " "), Символы.ПФ, " ");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЭлементДерева(ЭлементыДерева, ИмяКолонки, ИскомоеЗначение)
	
	Для Ном = 0 По ЭлементыДерева.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДерева.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если ЭлементДерева.Строки.Количество() > 0 Тогда
			
			РезультатПоиска = НайтиЭлементДерева(ЭлементДерева.Строки, ИмяКолонки, ИскомоеЗначение);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, БанковскийСчет, Организация, РежимЗагрузкиИзСообщения = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Вернем счет для оповещения пользователя
	РезультатОперации = Новый Структура("ТекстСообщения,НомерСчета,Организация");
	
	// 1) Определим вид платежа - входящий или исходящий.
	ИмяОперации = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е");
	ПлатежноеПоручение = ИмяОперации = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = ИмяОперации = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	ПлатежныйОрдер = ИмяОперации = "ПЛАТЕЖНЫЙОРДЕР";
	БанковскийОрдер = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "БАНКОВСКИЙОРДЕР";
	МемориальныйОрдер = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "МЕМОРИАЛЬНЫЙОРДЕР";
	ИнкассовоеПоручение = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ИНКАССОВОЕПОРУЧЕНИЕ";
		
	ВременноДата = Дата("00010101");
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
		ДатаСписано = ПолучитьДатуИзСтроки(ВременноДата, СтрокаДокумента.ДатаСписано);
	Иначе
		ДатаСписано = Дата("00010101");
	КонецЕсли;
	
	Исходящий = (СокрЛП(СтрокаДокумента.ПлательщикИНН) = СокрЛП(Организация.ИНН));

	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда 
		Если БанковскийСчет.НомерСчета = СтрокаДокумента.ПлательщикРасчСчет ИЛИ 
			 БанковскийСчет.НомерСчета = СтрокаДокумента.ПлательщикСчет Тогда 
			 
			Исходящий = Истина;
			
		ИначеЕсли БанковскийСчет.НомерСчета = СтрокаДокумента.ПолучательРасчСчет ИЛИ 
			БанковскийСчет.НомерСчета = СтрокаДокумента.ПлательщикСчет  Тогда 
			
			Исходящий = Ложь;   
			
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.ВидДвижения = ?(Исходящий, Перечисления.ВидыДвижений.Расход, Перечисления.ВидыДвижений.Приход);
	
	ИмяДокумента = НСтр("ru = 'Банковская выписка'");
	
	// 2) Определим вид документа в программе.
	Если ПлатежноеПоручение Тогда
		ВидДокумента = "ПлатежноеПоручение";
	ИначеЕсли ПлатежноеТребование Тогда
		ВидДокумента = "ПлатежноеТребование";
	ИначеЕсли ПлатежныйОрдер Тогда
		ВидДокумента = "ПлатежныйОрдер";
	ИначеЕсли БанковскийОрдер Тогда
		ВидДокумента = "БанковскийОрдер";
	ИначеЕсли МемориальныйОрдер Тогда
		ВидДокумента = "МемориальныйОрдер";
	ИначеЕсли ИнкассовоеПоручение Тогда
		ВидДокумента = "ИнкассовоеПоручение";
	КонецЕсли;
		
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	
	Если ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтрокаДокумента.Подразделение = БанковскийСчет.ПодразделениеКомпании;
	КонецЕсли;
	
	// 5) Определяем банковский счет организации.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	// 6) Определяем банковский счет контрагента.
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		
		ЗапросПоискаСчета = Новый Запрос;

		Если Исходящий Тогда
						
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
			
		Иначе
			
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("НеЗаполненИНН", СтрДлина(ИННКонтрагента) < 10);
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		ЗапросПоискаСчета.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Владелец КАК Владелец,
		|	МАКСИМУМ(БанковскиеСчета.Ссылка) КАК Ссылка,
		|	БанковскиеСчета.НомерСчета КАК НомерСчета,
		|	БанковскиеСчета.Владелец.Наименование КАК ВладелецНаименование
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	(БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента ИЛИ &НеЗаполненИНН)
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты
		|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.НомерСчета,
		|	БанковскиеСчета.Владелец.Наименование";

		ЭтоВнутренниеПереводы = Ложь;
		Если Организация.ИНН = ИННКонтрагента Тогда
			ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст, "Справочник.Контрагенты", "Справочник.Организации");
			ЭтоВнутренниеПереводы = Истина;
			Контрагент = Организация;
		КонецЕсли;
		
		СтрокаДокумента.ЭтоВнутреннееПеремещение = ЭтоВнутренниеПереводы;
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		СчетНайден = Ложь;
		
		Если ВыборкаПоиска.Количество() > 1 Тогда
			
			ДобавитьЗамечание(
				СтрокаДокумента,
				1,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В информационной базе найдено несколько (%1) одинаковых банковских счетов.'"), 
					ВыборкаПоиска.Количество())
			);
			
			Если РежимЗагрузкиИзСообщения Тогда 
				ЗаписьЖурналаРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В информационной базе найдено несколько (%1) одинаковых банковских счетов (""%2"").'"), 
						ВыборкаПоиска.Количество(), СчетКонтрагента),
					УровеньЖурналаРегистрации.Предупреждение
				);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоиска.Количество() > 1 Тогда
			
			Пока ВыборкаПоиска.Следующий() Цикл
				
				СтруктураНаименования = Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(
					УдалитьРазделитель(ИмяКонтрагента));
				
				Если ВыборкаПоиска.ВладелецНаименование = СтруктураНаименования.Наименование ИЛИ ЭтоВнутренниеПереводы Тогда
					СчетНайден = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			СчетНайден = ВыборкаПоиска.Следующий();
		КонецЕсли;
		
		Если СчетНайден Тогда
			
			СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
			Контрагент = ВыборкаПоиска.Владелец;
			
		Иначе
			
			ДобавитьЗамечание(СтрокаДокумента, 2, 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не найден счет контрагента (%1).'"), СчетКонтрагента));
			СтрокаДокумента.СчетКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='%1'"),СчетКонтрагента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка на корректность БИКа плательщика/получателя.
	Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
		
		Длина = СтрДлина(СтрокаДокумента.ПлательщикБИК);
		
		Если (Длина = 9 И Лев(СтрокаДокумента.ПлательщикБИК, 2) <> "04")
		 ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПлательщикБИК, 1) <> "4")
		 ИЛИ (Длина < 8) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Некорректный БИК (%1) плательщика.'"), 
								СтрокаДокумента.ПлательщикБИК));
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПлательщикБИК = "0" + СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
		
		Длина = СтрДлина(СтрокаДокумента.ПолучательБИК);
		
		Если (Длина = 9 И Лев(СтрокаДокумента.ПолучательБИК, 2) <> "04")
		 ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПолучательБИК, 1) <> "4")
		 ИЛИ (Длина < 8) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Некорректный БИК (%1) получателя.'"), 
								СтрокаДокумента.ПолучательБИК));
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПолучательБИК = "0" + СтрокаДокумента.ПолучательБИК;
		КонецЕсли;
		
	КонецЕсли;
		
	// 7) Определим контрагента.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			
		ИначеЕсли СтрДлина(ИННКонтрагента) > 9 Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			
			ЗапросПоискаКонтрагента = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка,
			|	Контрагенты.ИНН,
			|	Контрагенты.Наименование,
			|	Контрагенты.КПП
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &КонтрагентИНН"
			);
			
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
			
			Для Каждого СтрокаВыборки Из ВыборкаПоиска Цикл
				СтрокаВыборки.ИНН = СокрЛП(СтрокаВыборки.ИНН);
			КонецЦикла;
			
			// Ищем контрагента по ИНН, если указан КПП, то и по нему.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
			Если Не ПустаяСтрока(КППКонтрагента)Тогда
				ПараметрыОтбора.Вставить("КПП", КППКонтрагента);
			КонецЕсли;
			НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			
			// Если не нашли по ИНН и по КПП, то попробуем поискать только по ИНН.
			Если НайденныеКонтрагенты.Количество() = 0
			   И НЕ ПустаяСтрока(КППКонтрагента) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
				НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 0 Тогда
				
				СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;
				
				Если НайденныеКонтрагенты.Количество() > 1 Тогда
					ДобавитьЗамечание(
						СтрокаДокумента,
						2, 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В информационной базе найдено несколько (%1) контрагентов с одинаковым ИНН.'"), 
							НайденныеКонтрагенты.Количество())
					);
					Если РежимЗагрузкиИзСообщения Тогда 
						ЗаписьЖурналаРегистрации(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В информационной базе найдено несколько (%1) контрагентов с одинаковым ИНН (""%2"").'"), 
								ВыборкаПоиска.Количество(),
								ИННКонтрагента),
						УровеньЖурналаРегистрации.Предупреждение
						);
					КонецЕсли;
				КонецЕсли;
			
			ИначеЕсли НайденныеКонтрагенты.Количество() = 0 Тогда
				
				Если ВыборкаПоиска.Количество() > 1 Тогда
					ДобавитьЗамечание(СтрокаДокумента, 2, 
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='В информационной базе найдено несколько (%1) физических лиц с одинаковым ИНН.'"), 
										НайденныеКонтрагенты.Количество()));
				ИначеЕсли ВыборкаПоиска.Количество() = 0 Тогда
					ДобавитьЗамечание(СтрокаДокумента, 2, 
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Не найден контрагент или физическое лицо (%1, ИНН %2).'"), ИмяКонтрагента, ИННКонтрагента));
					СтрокаДокумента.Контрагент 
						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не найден (%1, ИНН %2)'"), ИмяКонтрагента, ИННКонтрагента);
				КонецЕсли;
					
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НаименованиеКонтрагента", СокрЛП(ИмяКонтрагента));
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка,
			|	Контрагенты.ИНН,
			|	Контрагенты.Наименование,
			|	Контрагенты.КПП
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Наименование ПОДОБНО &НаименованиеКонтрагента";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				СтрокаДокумента.Контрагент = Выборка.Ссылка;
				
				Если Выборка.Количество() > 2 Тогда 
					ДобавитьЗамечание(
						СтрокаДокумента,
						2,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В информационной базе найдено несколько (%1) контрагентов с одинаковым наименованием.'"),
							НайденныеКонтрагенты.Количество())
					);
				КонецЕсли;
			Иначе
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не указан ИНН контрагента.'"));
				СтрокаДокумента.Контрагент
					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не найден (%1, не указан ИНН)'"), ИмяКонтрагента);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.КонтрагентЗаполнен = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЭтоВнутренниеПереводы Тогда 
		Если Исходящий Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации;
		Иначе
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации;
		КонецЕсли;
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтатьиДДС.Ссылка КАК СтатьяДДС
			|ИЗ
			|	Справочник.СтатьиДДС КАК СтатьиДДС
			|ГДЕ
			|	СтатьиДДС.Операция = &Операция";
			
		Запрос.УстановитьПараметр("Операция", СтрокаДокумента.ВидОперации);
			
		РезультатЗапроса = Запрос.Выполнить();
			
		Если Не РезультатЗапроса.Пустой() Тогда 
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СтрокаДокумента.СтатьяДДС = Выборка.СтатьяДДС
		КонецЕсли;
				
		 
	// 3) Определяем вид операции документа.
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
			
		Если СтрокаДокумента.ВидОплаты = "03" Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДДС.ВыдачаПодОтчет;
				
		ИначеЕсли СтрокаДокумента.ВидОплаты = "04" Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДДС.ПеремещениеДС;
				
		ИначеЕсли СтрокаДокумента.ВидОплаты = "13" Тогда
			Если Исходящий Тогда
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
			Иначе
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДДС.РозничнаяВыручка;
			КонецЕсли;
				
		Иначе
			Если Исходящий Тогда
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
			Иначе
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	
	// 4) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа.
	ВсеРеквизитыПоискаЕсть = Ложь;
	ДокументНайден         = Ложь;
	ДатаДок                = Дата("00010101");
	
	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);

	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтрокаДокумента.ДатаДок = Результат;
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаДокумента.Номер)
			ИЛИ НЕ СтрокаДокумента.ВидДокумента = "ПлатежноеПоручение" Тогда
			
			НомерДляПоискаДок = СтрокаДокумента.Номер;
			ВсеРеквизитыПоискаЕсть = Истина;
			
		Иначе
			
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Указан неправильный номер документа(%1).'"),
				СтрокаДокумента.Номер);
			
			ДобавитьЗамечание(СтрокаДокумента, 4, Стр);
			ВсеРеквизитыПоискаЕсть = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	
	Если ВсеРеквизитыПоискаЕсть Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Выписка.Ссылка КАК Ссылка,
		|	Выписка.Проведен КАК Проведен,
		|	Выписка.Организация КАК Организация,
		|	Выписка.Дата КАК Дата,
		|	Выписка.Номер КАК Номер,
		|	Выписка.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	Выписка.БанковскийСчет.Владелец.ИНН КАК ИНН,
		|	Выписка.БанковскийСчет.Владелец.КПП КАК КПП,
		|	Выписка.БанковскийСчет.НомерСчета КАК БанковскийСчетНомерСчета,
		|	Выписка.СтатьяДДС КАК СтатьяДДС,
		|	ВЫБОР
		|		КОГДА Выписка.СуммаДокумента = &СуммаДокумента
		|				И Выписка.Проведен
		|			ТОГДА 0
		|		КОГДА Выписка.СуммаДокумента = &СуммаДокумента
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Вес
		|ИЗ
		|	Документ.Выписка КАК Выписка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Выписка.ВхДокДата, ДЕНЬ) = &ДатаДок
		|	И Выписка.Организация = &Организация
		|	И Выписка.ХозОперация = &ХозОперация
		|	И Выписка.БанковскийСчет = &БанковскийСчет
		|	И Выписка.ПометкаУдаления = ЛОЖЬ
		|	И Выписка.ВхДокНомер = &НомерДокумента
		|	И Выписка.Контрагент = &Контрагент
		|	И ВЫБОР
		|		КОГДА Выписка.СуммаДокумента = &СуммаДокумента
		|				И Выписка.Проведен
		|			ТОГДА 0
		|		КОГДА Выписка.СуммаДокумента = &СуммаДокумента
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ < 2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вес";
		
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		ЗапросПоискаДокумента.УстановитьПараметр("ХозОперация", Справочники.ХозОперации.СтрокаБанковскойВыписки);
		Если Не ЭтоВнутренниеПереводы Тогда
			ЗапросПоискаДокумента.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Выписка.Контрагент = &Контрагент", "");
		КонецЕсли;
		ЗапросПоискаДокумента.Текст = ТекстЗапроса;
		ЗапросПоискаДокумента.УстановитьПараметр("НомерДокумента", СтрокаДокумента.Номер);
		СуммаДокументаДляЗапроса = ?(СтрокаДокумента.Сумма < 0, - СтрокаДокумента.Сумма, СтрокаДокумента.Сумма);
		СуммаДокументаДляЗапроса = ?(Исходящий, - СуммаДокументаДляЗапроса, СуммаДокументаДляЗапроса);
		ЗапросПоискаДокумента.УстановитьПараметр("СуммаДокумента", СуммаДокументаДляЗапроса);
		
		РезультатЗапроса = ЗапросПоискаДокумента.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Результат = РезультатЗапроса.Выбрать();
			СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
			ИННДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательИНН, СтрокаДокумента.ПлательщикИНН);
			ПроверятьИНН = ЗначениеЗаполнено(ИННДляПоискаДок);
			КППДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательКПП, СтрокаДокумента.ПлательщикКПП);
			ПроверятьКПП = (ЗначениеЗаполнено(КППДляПоискаДок) И КППДляПоискаДок <> "0");
			КоличествоДок = 0;
			Пока Результат.Следующий() Цикл
				ВидПлатежногоДокумента = ВРег(СокрЛП(СтрокаДокумента.ВидДокумента));
				Если ВидПлатежногоДокумента = "МЕМОРИАЛЬНЫЙОРДЕР" Тогда
					ВидПлатежногоДокумента = "БАНКОВСКИЙОРДЕР"; 
				КонецЕсли;
				
				Если КоличествоДок = 0 Тогда
					СтрокаДокумента.Документ = Результат.Ссылка;
					СтрокаДокумента.СтатьяДДС = Результат.СтатьяДДС;
					СтрокаДокумента.Проведен = Результат.Проведен;
					СтрокаДокумента.НомерДок = Результат.Номер;
					СтрокаДокумента.ДатаДок  = Результат.Дата;
					СтрокаДокумента.ДоговорВзаиморасчетов = Результат.ДоговорВзаиморасчетов
				КонецЕсли;
				КоличествоДок = КоличествоДок + 1;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// 11) Определим сумму.
	СтрокаДокумента.СуммаДокумента = ?(СтрокаДокумента.Сумма < 0,-СтрокаДокумента.Сумма, СтрокаДокумента.Сумма);
	Если Исходящий Тогда
		СтрокаДокумента.СуммаСписано = СтрокаДокумента.СуммаДокумента;
	Иначе
		СтрокаДокумента.СуммаПоступило = СтрокаДокумента.СуммаДокумента;
	КонецЕсли;
	
	// 12) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) Тогда
		
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = Дата("00010101");
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
		
	Иначе
		
		СтрокаДокумента.Списано = Дата("00010101");
		
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) Тогда
		
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = Дата("00010101");
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
		
	Иначе
		
		СтрокаДокумента.Поступило = Дата("00010101");
		
	КонецЕсли;
	
	// 13) Определим очередность платежа
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	// Код вида дохода
	СтрокаДокумента.КодВидаДохода = СтрокаДокумента.КодНазПлатежа;
	
	// 14) определим договор взаиморасчетов
	
	Если Не ЭтоВнутренниеПереводы И Не ЗначениеЗаполнено(СтрокаДокумента.ДоговорВзаиморасчетов) Тогда
		ЗаполнитьДоговорВзаиморасчетов(СтрокаДокумента, БанковскийСчет);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПолучательСчет");
	
	// По наличию статуса составителя определяется, что платеж налоговый.
	ИмпортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
		"Номер,Дата,Сумма,ПлательщикСчет,ПолучательСчет,"
		+ "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
		+ "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручениеБюджет);
	
	Если ПустаяСтрока(ПредставлениеСвойства) Тогда
		ПредставлениеСвойства = ИмяСвойства;
	КонецЕсли;	
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
						
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнен реквизит ""%1"".'"), ПредставлениеСвойства);
						
			ДобавитьЗамечание(СтрокаИмпорта, 3, Стр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если ТипДокумента < 3
	 ИЛИ ТипДокумента = 11
	 ИЛИ ТипДокумента = 12 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Процедура СписокНеНайденных(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов, СоответствиеВалютыСчета)
	
	Если БанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
		
	ТипКонтрагента
		= ?(СокрЛП(СтрокаДокумента.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета), "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
	
	Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
	ПредставлениеКонтрагента = СтрокаДокумента[ТипКонтрагента + Окончание];
	
	Если СтрДлина(СтрокаДокумента[ТипКонтрагента + "ИНН"]) < 10 Тогда
		НайденнаяЗаписьОКонтрагенте
			= НайтиЭлементДерева(ТаблицаКонтрагентов.Строки, "Представление", ПредставлениеКонтрагента);
	Иначе
		НайденнаяЗаписьОКонтрагенте
			= НайтиЭлементДерева(ТаблицаКонтрагентов.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + "ИНН"]);
	КонецЕсли;
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.Строки.Добавить();
		
		НовыйКонтрагент.Представление = ПредставлениеКонтрагента;
		
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.ТолькоПросмотр = Истина;
		ДобавитьОписаниеНовогоРеквизита("Наименование", Окончание, ТипКонтрагента, НовыйКонтрагент.Строки,СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН", "ИНН", ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП", "КПП", ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;
		
	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
			
	КонецЕсли;
	
	НовыйКонтрагент.НомСтроки     = НовыйКонтрагент.НомСтроки + "," + СтрокаДокумента.НомерСтроки;
	
	НайденныеСтроки = НайтиЭлементДерева(НовыйКонтрагент.Строки, "Значение", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
			
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита(
			"Р/счет", 
			"СЧЕТ", 
			ТипКонтрагента, 
			НовыйКонтрагент.Строки,
			СтрокаДокумента
		);
		РеквизитыНовогоКонтрагента.НомСтроки = РеквизитыНовогоКонтрагента.НомСтроки + "," + СтрокаДокумента.НомерСтроки;
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			
			ДобавитьОписаниеНовогоРеквизита(
				"Банк",
				"БАНК1",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Город банка'"),
				"БАНК2",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Код банка'"),
				"БИК",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Кор. счет банка'"),
				"КОРСЧЕТ",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
		Иначе
			
			ДобавитьОписаниеНовогоРеквизита("Банк", "3", ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Город банка'"),
				"4",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Кор. счет банка'"),
				"РАСЧСЧЕТ",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'РЦ банка'"),
				"БАНК1",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Местонахождение РЦ банка'"),
				"БАНК2",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Код РЦ банка'"),
				"БИК",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			ДобавитьОписаниеНовогоРеквизита(
				НСтр("ru = 'Кор. счет РЦ банка'"),
				"КОРСЧЕТ",
				ТипКонтрагента,
				РеквизитыНовогоКонтрагента.Строки,
				СтрокаДокумента
			);
			
		КонецЕсли;
		
		НоваяСтрокаСчета = СоответствиеВалютыСчета.Добавить();
		НоваяСтрокаСчета.НомерСчета = РеквизитыНовогоКонтрагента.Значение;
		НоваяСтрокаСчета.Валюта = ВалютаСчета;
		
	Иначе
		НайденныеСтроки.НомСтроки = НайденныеСтроки.НомСтроки + "," + СтрокаДокумента.НомерСтроки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияРазделителя = СтрНайти(Буфер, ".");
	
	Если ПозицияРазделителя = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой'");
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияРазделителя - 1);
	Буфер = Сред(Буфер, ПозицияРазделителя + 1);
	
	ПозицияРазделителя = СтрНайти(Буфер, ".");
	
	Если ПозицияРазделителя = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой'");
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияРазделителя - 1);
	Буфер = Сред(Буфер, ПозицияРазделителя + 1);
	
	ПозицияРазделителя = СтрНайти(Буфер, " ");
	
	Если ПозицияРазделителя <> 0 Тогда
		ГодДаты = Лев(Буфер, ПозицияРазделителя - 1);
	Иначе
		ГодДаты = Буфер;
	КонецЕсли;
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		
		Возврат НСтр("ru='Не удалось преобразовать строку в дату'");
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ПоискБанковскогоСчета(Номер)
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	БанковскиеСчета.Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.НомерСчета = &Номер";
				   
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
    	
	Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выгрузить();
        Возврат Выборка[0].Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
    		
КонецФункции

Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)

	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
		
	РеквизитыНовогоКонтрагента.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
												Представление);
 	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
    Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции

Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru='помечен на удаление'"), НСтр("ru='отменена пометка на удаление'"));
		
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1:%2.'"), 
							ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
						
		Сообщение.Сообщить();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1: не %2. Произошли ошибки при записи.'"), 
				ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
								
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьНазваниеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.Выписка") Тогда
		
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='документ ""Строка банковской выписки"" № %1 от %2'"),
			СокрЛП(Объект.Номер),
			Объект.Дата
		);
		
	Иначе
		
		НазваниеОбъекта = НСтр("ru='объект'");
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, 
		СтрокаСекции, 
		ЭтоНовыйДокумент, 
		ПроводитьДокумент = Истина,
		РежимЗагрузкиСообщения = Ложь)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Проводить = Ложь;
	
	Если ПроводитьДокумент Тогда
		Проводить = Истина;
	КонецЕсли;
	
	
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	
	Если ОбъектМодифицирован Тогда
		
		Попытка
			
			Если РежимЗагрузкиСообщения Тогда
				
				ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
				
				Если Не ЗначениеЗаполнено(ОбъектДляЗаписи.Номер) Тогда
					ОбъектДляЗаписи.УстановитьНовыйНомер();
				КонецЕсли;
				
				ИтогиОперации = Документы.Выписка.РассчитатьИтогиОперации(ОбъектДляЗаписи);
				ЗаполнитьЗначенияСвойств(ОбъектДляЗаписи, ИтогиОперации);
				
			КонецЕсли;
			
			Если ОбъектПроведен И Не РежимЗагрузкиСообщения Тогда
				
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				
				Если НЕ Проводить Тогда
					
					НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляЗаписи);
					
					Если Лев(НазваниеОбъекта, 8) = "документ" Тогда
						НазваниеОбъекта = "документа " + Сред(НазваниеОбъекта, 9);
					КонецЕсли;	
					
					Сообщение = Новый СообщениеПользователю;
				
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 %2'"),
						НСтр("ru='Отменено проведение'") + " ",
						НазваниеОбъекта
					);
					
					Сообщение.Сообщить();
					
				КонецЕсли;
				
			Иначе
				
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
			Если ЭтоНовыйДокумент Тогда
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1%2.'"), 
					?(ЭтоНовыйДокумент, НСтр("ru='Создан'") + " ", НСтр("ru='Перезаписан'")),
					ПолучитьНазваниеОбъекта(ОбъектДляЗаписи)
				);
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		Исключение
			
			НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляЗаписи);
			
			// Запись события в журнал регистрации для системного администратора.
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись документа'",ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, ,
				ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст 
				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1%2. Произошли ошибки при записи.'"), 
					ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), 
					?(ЭтоНовыйДокумент, НСтр("ru='Не создан'"), НСтр("ru='не записан'")));
						
			
			Если РежимЗагрузкиСообщения Тогда 
				ВызватьИсключение Сообщение.Текст;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляЗаписи);

	Если Проводить И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
		
		Если РежимЗагрузкиСообщения Тогда
			
			ОбъектДляЗаписи.ОбменДанными.Загрузка = Ложь;
			
		КонецЕсли;
		
		Если ОбъектДляЗаписи.ПроверитьЗаполнение() Тогда
			
			Попытка
				
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
				
				Если НЕ ОбъектПроведен Тогда
					
					Сообщение = Новый СообщениеПользователю;
					
					Сообщение.Текст 
						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2'"), 
						?(ОбъектПроведен, НСтр("ru='Перепроведен'") + " ", НСтр("ru='Проведен'") + " "),
						НазваниеОбъекта);
					
					Сообщение.Сообщить();
					
				КонецЕсли;
				
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 не проведен. Произошли ошибки при проведении.'"), 
					ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)
				);
					
				Если РежимЗагрузкиСообщения Тогда
					ВызватьИсключение Сообщение.Текст;
				Иначе
					Сообщение.Сообщить();
				КонецЕсли;
				
			КонецПопытки;
		
		Иначе
			
			ТестСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 не проведен. Произошли ошибки при проведении.'"), 
				ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)
			);
			
			Если РежимЗагрузкиСообщения Тогда
				
				// Запись события в журнал регистрации для системного администратора.
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Проведение банковской выписки'",ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.Выписка,
					ОбъектДляЗаписи.Ссылка,
					ТестСообщения
				);
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТестСообщения;
				Сообщение.Сообщить();
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиБанк(НаимБанка, ГородБанка, БИК, КоррСчет)
	
	НайденныйБанк = Справочники.КлассификаторБанков.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(БИК) Тогда
		Если СтрДлина(БИК) < 10 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК) Тогда
			НайденныйБанк = Справочники.КлассификаторБанков.НайтиПоКоду(БИК);
		Иначе
			НайденныйБанк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("СВИФТБИК", БИК);
		КонецЕсли;
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.КлассификаторБанков.ПустаяСсылка()
		И НЕ ПустаяСтрока(КоррСчет) Тогда
		НайденныйБанк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;
			
	Возврат НайденныйБанк;

КонецФункции

// Функция получает валюту, соответствующую номеру банковского счета.
// 6-8 разряды номера банковского счета соответствуют коду валюты.
// Для рублей используется код 810.
//
// Параметры:
//	НомерСчета - Число - Номер банковского счета.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - Валюта банковского счета.
//
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции // ПолучитьВалютуПоНомеруСчета()

Функция ПолучитьБанковскийСчетИОрганизациюИзВыписки(СтрокаДокумента, НомерСчета, ОпределятьАвтоматически)
	
	Перем ИННОрганизации, Результат, БанковскиеСчета;
	
	Результат = Новый Структура("БанковскиеСчета, ТекстОшибки, ИННОрганизации");
	ОтборИННОрганизации = Истина;
	Если СтрокаДокумента.ПлательщикСчет = НомерСчета Тогда
		ИННОрганизации = СокрЛП(СтрокаДокумента.ПлательщикИНН); 
		Если Не ЗначениеЗаполнено(ИННОрганизации) Тогда
			ОтборИННОрганизации = Ложь;
		КонецЕсли;

	ИначеЕсли СтрокаДокумента.ПолучательСчет = НомерСчета Тогда
		ИННОрганизации = СокрЛП(СтрокаДокумента.ПолучательИНН);
		Если Не ЗначениеЗаполнено(ИННОрганизации) Тогда
			ОтборИННОрганизации = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ИННОрганизации = ИННОрганизации;
	
	БанковскиеСчета = БанковскиеСчетаПоДаннымВыписки(НомерСчета, ИННОрганизации, ОтборИННОрганизации);
	
	// Нет информации в программе по указанному номеру счета
	Если БанковскиеСчета.Количество() = 0 Тогда
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаОшибкиВПрограмме(),
			НомерСчета,
			ИННОрганизации
		);
		Возврат Результат;
	КонецЕсли;
	
	// Нашли дубль пары ИНН и р/с
	Если ОпределятьАвтоматически И БанковскиеСчета.Количество() > 1 Тогда
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаОшибкиНесколькоОрганизаций(),
			НомерСчета,
			ИННОрганизации
		);
		Возврат Результат;
	КонецЕсли;
	
	Результат.БанковскиеСчета = БанковскиеСчета;
	
	Возврат Результат;
	
КонецФункции

Функция БанковскиеСчетаПоДаннымВыписки(НомерСчета, ИННОрганизации, ОтборИННОрганизации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчета.Банк КАК Банк,
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО БанковскиеСчета.Владелец = Организации.Ссылка
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации"; 
	
	Если ОтборИННОрганизации Тогда 
		Запрос.УстановитьПараметр("ИНН", ИННОрганизации);
		Запрос.Текст = Запрос.Текст + " И Организации.ИНН = &ИНН";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ШаблонТекстаОшибкиВПрограмме()
	
	Возврат НСтр("ru = 'В программе нет информации о Банковском счете № %1, принадлежащем Организации с ИНН %2.
		|Загрузка прервана.
		|Проверьте в программе наличие Организации с ИНН = %2 и Банковского счета №%1, принадлежащего данной организации.'");
	
КонецФункции

Функция ШаблонТекстаОшибкиВФайле()
	
	Возврат НСтр("ru = 'Файл не содержит информации о Банковском счете № %1, принадлежащем Организации с ИНН %2.
		|Загрузка прервана.
		|Проверьте корректность параметров загрузки.'");
	
КонецФункции

Функция ШаблонТекстаОшибкиНесколькоОрганизаций()
	
	Возврат НСтр("ru = 'В программе найдено более одного Банковского счета № %1, принадлежащего Организации с ИНН %2.
		|Загрузка прервана.
		|Укажите в параметрах загрузки необходимые Организацию и Банковский счет.'");
	
КонецФункции

#Область ВыделениеНДСИзНазначенияПлатежа

Функция ВыделитьНДСИзНазначенияПлатежа(ИсходноеНазначениеПлатежа, СуммаПлатежа)
	
	Перем СтавкаНДС, ЗначениеСтавкиНДС, ЗначениеСуммыНДС;
	
	Результат = Новый Структура("СтавкаНДС, СуммаНДС", Справочники.СтавкиНДС.БезНДС, 0);
	
	НазначениеПлатежа = ПривестиНазначениеПлатежа(ИсходноеНазначениеПлатежа);
	
	СпецСимволыЧисла = ":(%),.-= ";
	ИнформацияОНДС = НайтиИнформациюОНДС(НазначениеПлатежа, ЗначениеСтавкиНДС, СпецСимволыЧисла);
	
	Если ЗначениеСтавкиНДС = "БезНДС" Тогда
		СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		ЗначениеСуммыНДС = 0;
	ИначеЕсли ИнформацияОНДС = Неопределено Тогда
		ЗначениеСтавкиНДС = Неопределено;
	Иначе
		ЗначениеСтавкиНДС = Неопределено;
		РезультатПоиска = ВыделитьИскомыйТекст(ИнформацияОНДС, "%");
		Если РезультатПоиска <> Неопределено Тогда
			ИнформацияОПроцентеНДС = РезультатПоиска.ТекстДо;
			ИнформацияОСумме = РезультатПоиска.ТекстПосле;
		Иначе
			ИнформацияОПроцентеНДС = "";
			ИнформацияОСумме = ИнформацияОНДС;
		КонецЕсли;
		
		ЧисловоеЗначениеСтавкиНДС = СтрокаВЧисло(ИнформацияОПроцентеНДС, СпецСимволыЧисла);
		ЗначениеСуммыНДС = СтрокаВЧисло(ИнформацияОСумме, СпецСимволыЧисла);
		
		Если ЗначениеСуммыНДС <> Неопределено Тогда
			СуммаБезНДС = СуммаПлатежа - ЗначениеСуммыНДС;
			Если СуммаБезНДС > 0 Тогда
				РасчетноеЗначениеСтавкиНДС = Окр(100 * ЗначениеСуммыНДС / СуммаБезНДС, 0);
				Если ЧисловоеЗначениеСтавкиНДС = Неопределено Или РасчетноеЗначениеСтавкиНДС = ЧисловоеЗначениеСтавкиНДС Тогда
					ПроцентНДС = XMLСтрока(РасчетноеЗначениеСтавкиНДС);
					СтавкаНДС = СтавкаНДС(ПроцентНДС);
					Если СтавкаНДС = Неопределено Тогда
						// Расчетная ставка не найдена, подставим в документа пустую ставку и сумму НДС.
						// Если оставить Неопределено, то в документ подставится ставка "по умолчанию".
						СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
					КонецЕсли;
				Иначе
					СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЧисловоеЗначениеСтавкиНДС <> Неопределено И СтавкаНДС = Неопределено Тогда
			ПроцентНДС = XMLСтрока(ЧисловоеЗначениеСтавкиНДС);
			СтавкаНДС = СтавкаНДС(ПроцентНДС);
			ЗначениеСуммыНДС = СуммаНДС(СтавкаНДС, СуммаПлатежа);
		КонецЕсли;
	КонецЕсли;
	
	Если СтавкаНДС <> Неопределено Тогда
		Результат.СтавкаНДС = СтавкаНДС;
	КонецЕсли;
	
	Если ЗначениеСуммыНДС <> Неопределено Тогда
		Результат.Вставить("СуммаНДС", ЗначениеСуммыНДС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйШаблоныТекстаНДС()
	
	Шаблоны = Новый ТаблицаЗначений;
	Шаблоны.Колонки.Добавить("ТекстШаблона", Новый ОписаниеТипов("Строка"));
	Шаблоны.Колонки.Добавить("ЕстьНДС", Новый ОписаниеТипов("Булево"));
	// Шаблоны "Без НДС".
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'БЕЗ НАЛОГА'"); // "Без налога (НДС)"
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'БЕЗ НДС'");
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НЕТ НДС'");
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС НЕТ'");
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС НЕ ОБЛ'"); // "НДС не облагается"
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС НЕОБЛ'"); // "НДС не облагается" (могут быть некорректные сокращения).
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС НЕ УПЛ'"); // "НДС не уплачивается"
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС НЕ ВЗИМ'"); // "НДС не взимается"
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС НЕ ПРЕД'"); // "НДС не предусмотрен"
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НЕ ОБЛАГАЕТСЯ'"); // // "Не облагается НДС"
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НЕ ВЗИМАЕТСЯ'"); // "Не взимается НДС"
	
	// Шаблоны, с выделенным НДС.
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС В ТОМ ЧИСЛЕ'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС В Т.Ч.'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС В Т Ч'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС В ТЧ'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'В ТОМ ЧИСЛЕ НДС'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'В Т.Ч. НДС'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'В Т Ч НДС'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'В ТЧ НДС'");
	НоваяСтрока.ЕстьНДС = Истина;
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.ТекстШаблона = НСтр("ru = 'НДС'");
	НоваяСтрока.ЕстьНДС = Истина;
	
	Возврат Шаблоны;
	
КонецФункции

Функция НайтиИнформациюОНДС(ТекстНазначениеПлатежа, ЗначениеСтавкиНДС, СпецСимволыЧисла)
	
	Перем ИнформацияОНДС;
	
	ДопустимыеСимволыЧисла = "0123456789" + СпецСимволыЧисла;
	НаборШаблонов = НовыйШаблоныТекстаНДС();
	
	Пока Не ПустаяСтрока(ТекстНазначениеПлатежа) Цикл
		РезультатПоиска = ПоискШаблонаВТекстеНазначения(ТекстНазначениеПлатежа, НаборШаблонов);
		Если РезультатПоиска = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ТекстНазначениеПлатежаПосле = СокрЛ(РезультатПоиска.ТекстПосле);
		ТекстНазначениеПлатежа = ТекстНазначениеПлатежаПосле;
		
		Шаблон = НаборШаблонов.Найти(РезультатПоиска.ИскомыйТекст, "ТекстШаблона");
		Если Не Шаблон.ЕстьНДС Тогда
			ЗначениеСтавкиНДС = "БезНДС";
			Прервать;
		ИначеЕсли ИнформацияОНДС <> Неопределено Тогда
			// В тексте назначения нашли несколько ставок НДС,
			// либо в одной из найденных подстрок есть паттерны похожие на НДС, но таковыми не являющиеся.
			// Такие ситуации не обслуживаем.
			ЗначениеСтавкиНДС = Неопределено;
			ИнформацияОНДС    = Неопределено;
			Прервать;
		КонецЕсли;
		
		Если Шаблон.ЕстьНДС И Не ПустаяСтрока(ТекстНазначениеПлатежаПосле) Тогда
			КонечнаяПозицияЧисла = 0;
			Для Индекс = 1 По СтрДлина(ТекстНазначениеПлатежаПосле) Цикл
				Символ = Сред(ТекстНазначениеПлатежаПосле, Индекс, 1);
				Если ДопустимыйСимвол(Символ, ДопустимыеСимволыЧисла) Тогда
					КонечнаяПозицияЧисла = Индекс;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если КонечнаяПозицияЧисла > 0 Тогда
				ИнформацияОНДС = Лев(ТекстНазначениеПлатежаПосле, КонечнаяПозицияЧисла);
				ТекстНазначениеПлатежа = СокрЛ(Сред(ТекстНазначениеПлатежаПосле, КонечнаяПозицияЧисла + 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнформацияОНДС;
	
КонецФункции

Функция ПривестиНазначениеПлатежа(ИсходноеНазначениеПлатежа)
	
	ЗаменяемыеСимволы = "()"
		+ Символы.НПП
		+ Символы.ПС
		+ Символы.ВК
		+ Символы.ПФ
		+ Символы.Таб
		+ Символы.ВТаб;
	
	НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		ЗаменяемыеСимволы, ИсходноеНазначениеПлатежа,
		СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", СтрДлина(ЗаменяемыеСимволы)));
	
	Пока СтрНайти(НазначениеПлатежа, "  ") > 0 Цикл
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "  ", " ");
	КонецЦикла;

	НазначениеПлатежа = СокрЛП(НазначениеПлатежа);
	
	Если СтрЗаканчиваетсяНа(НазначениеПлатежа, ".") Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(НазначениеПлатежа);
	КонецЕсли;
	
	Возврат ВРег(СокрП(НазначениеПлатежа));
	
КонецФункции

Функция СтавкаНДС(ЗначениеСтавкиНДС)
	
	Если Не ЗначениеЗаполнено(ЗначениеСтавкиНДС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ЧисловоеЗначениеСтавки = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеСтавкиНДС);
	
	РасчетныеСтавки = Новый Массив;
	РасчетныеСтавки.Добавить(Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная);
	РасчетныеСтавки.Добавить(Справочники.СтавкиНДС.РасчетнаяСтавкаНДС10);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетныеСтавки", РасчетныеСтавки);
	Запрос.УстановитьПараметр("СтавкаНДС", ЧисловоеЗначениеСтавки);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНДС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = &СтавкаНДС
	|	И НЕ СтавкиНДС.Ссылка В (&РасчетныеСтавки)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	
КонецФункции

Функция СуммаНДС(СтавкаНДС, СуммаДокумента)
	
	Если СтавкаНДС = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Окр((СуммаДокумента * СтавкаНДС.Ставка) / (100 + СтавкаНДС.Ставка), 2);
	
КонецФункции

Функция СтрокаВЧисло(ТекстСЧислом, ДопустимыеСимволыЧисла)
	
	Если ПустаяСтрока(ТекстСЧислом) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = СтрЗаменить(ТекстСЧислом, " ", "");
	
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволыЧисла) Цикл
		Символ = Сред(ДопустимыеСимволыЧисла, Индекс, 1);
		Текст = СтрЗаменить(Текст, Символ, ".");
	КонецЦикла;
	
	Пока СтрНайти(Текст, "  ") > 0 Цикл
		Текст = СтрЗаменить(Текст, "  ", " ");
	КонецЦикла;
	
	Пока СтрНачинаетсяС(Текст, ".") Цикл
		Текст = Сред(Текст, 2);
	КонецЦикла;
	
	Пока СтрЗаканчиваетсяНа(Текст, ".") Цикл
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Текст);
	КонецЦикла;
	
	Если СтрЧислоВхождений(Текст, ".") > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияТочки = СтрНайти(Текст, ".");
	Точность = ?(ПозицияТочки = 0, 0, СтрДлина(Текст) - ПозицияТочки);
	ФорматнаяСтрока = "ЧДЦ=" + Точность + "; ЧН=0; ЧРД=.; ЧГ=0";
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ЧисловоеЗначениеСтавки = ОписаниеТипаЧисло.ПривестиЗначение(Текст);
	
	Если Формат(ЧисловоеЗначениеСтавки, ФорматнаяСтрока) = Текст Тогда
		Возврат ЧисловоеЗначениеСтавки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВыделитьИскомыйТекст(ОбрабатываемыйТекст, ИскомыйТекст)
	
	ПозицияНачала = СтрНайти(НРег(ОбрабатываемыйТекст), НРег(ИскомыйТекст));
	Если ПозицияНачала = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстДо = СокрЛ(Лев(ОбрабатываемыйТекст, ПозицияНачала - 1));
	ТекстПосле = СокрЛП(Сред(ОбрабатываемыйТекст, ПозицияНачала + СтрДлина(ИскомыйТекст)));
	
	Возврат Новый Структура("ТекстДо, ИскомыйТекст, ТекстПосле, Позиция",
		ТекстДо, ИскомыйТекст, ТекстПосле, ПозицияНачала - 1);
	
КонецФункции

Функция ПоискШаблонаВТекстеНазначения(Текст, Шаблоны)
	Перем Результат;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДопустимыеСимволы = "0123456789" + ".,;:$№#@&_-–+*^=?!'/|\""%()[]{}<> «»“”";
	Для Каждого Шаблон Из Шаблоны Цикл
		РезультатПоиска = ВыделитьИскомыйТекст(Текст, Шаблон.ТекстШаблона);
		Если РезультатПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СимволДо = СокрЛП(Прав(РезультатПоиска.ТекстДо, 1));
		Если Шаблон.ЕстьНДС Тогда
			СимволПосле = СокрЛП(Лев(РезультатПоиска.ТекстПосле, 1));
		Иначе
			РезультатПоиска.ТекстПосле = "";
			СимволПосле = "";
		КонецЕсли;
		
		Если Не ПустаяСтрока(СимволДо) И Не ДопустимыйСимвол(СимволДо, ДопустимыеСимволы)
			Или Не ПустаяСтрока(СимволПосле) И Не ДопустимыйСимвол(СимволПосле, ДопустимыеСимволы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат = Неопределено Или Результат.Позиция > РезультатПоиска.Позиция Тогда
			Результат = ОбщегоНазначения.СкопироватьРекурсивно(РезультатПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДопустимыйСимвол(Символ, ДопустимыеСимволы)
	
	Если СтрДлина(Символ) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрНайти(ДопустимыеСимволы, Символ) > 0;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзСообщенияСБанком

Функция НастройкиДляЗагрузкиВыписок()
	
	Настройки = Новый Структура();
	Настройки.Вставить("Импорт_Заголовок", "");
	Настройки.Вставить("Импорт_РасчетныеСчета", РасчетныеСчетаЗагруженныхВыписок());
	Настройки.Вставить("ДокументыКИмпорту", ДокументыКИмпорту());
	Настройки.Вставить("ТаблицаКонтрагентов", КонтрагентыВыписок());
	Настройки.Вставить("СоответствиеВалютыСчета", ВалютыСчетов());
	
	Возврат Настройки;
	
КонецФункции

Функция РасчетныеСчетаЗагруженныхВыписок()
	
	ФорматСуммы = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	РасчетныеСчета = Новый ТаблицаЗначений();
	РасчетныеСчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("ДатаКонца", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("РасчСчет", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("НачальныйОстаток", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("ВсегоПоступило", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("ВсегоСписано", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("КонечныйОстаток", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("Начало", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("Конец", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("РасчетныйСчет", Новый ОписаниеТипов("Строка"));
	РасчетныеСчета.Колонки.Добавить("НачальнаяСумма", ФорматСуммы);
	РасчетныеСчета.Колонки.Добавить("Поступило", ФорматСуммы);
	РасчетныеСчета.Колонки.Добавить("Списано", ФорматСуммы);
	РасчетныеСчета.Колонки.Добавить("КонечнаяСумма", ФорматСуммы);
	
	Возврат РасчетныеСчета;
	
КонецФункции

Функция ДокументыКИмпорту()
	
	ФорматСуммы = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	ТипыКонтрагента = Новый Массив;
	ТипыКонтрагента.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипыКонтрагента.Добавить(Тип("Строка"));
	ТипыКонтрагента.Добавить(Тип("СправочникСсылка.Организации"));
	
	ТипыСчетов = Новый Массив;
	ТипыКонтрагента.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	ТипыКонтрагента.Добавить(Тип("Строка"));
	
	ДокументыКИмпорту = Новый ТаблицаЗначений();
	ДокументыКИмпорту.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ДокументыКИмпорту.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	ДокументыКИмпорту.Колонки.Добавить("Готовность", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0)));
	ДокументыКИмпорту.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0)));
	ДокументыКИмпорту.Колонки.Добавить("НомерДок", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Дата"));
	ДокументыКИмпорту.Колонки.Добавить("Дата", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Операция", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ДокументыКИмпорту.Колонки.Добавить("СуммаДокумента", ФорматСуммы);
	ДокументыКИмпорту.Колонки.Добавить("СуммаСписано", ФорматСуммы);
	ДокументыКИмпорту.Колонки.Добавить("СуммаПоступило", ФорматСуммы);
	ДокументыКИмпорту.Колонки.Добавить("Сумма", ФорматСуммы);
	ДокументыКИмпорту.Колонки.Добавить("Контрагент", Новый ОписаниеТипов(ТипыКонтрагента));
	ДокументыКИмпорту.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов(ТипыСчетов));
	ДокументыКИмпорту.Колонки.Добавить("КвитанцияДата", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("КвитанцияВремя", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("КвитанцияСодержание", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Списано", Новый ОписаниеТипов("Дата"));
	ДокументыКИмпорту.Колонки.Добавить("ДатаСписано", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Дата"));
	ДокументыКИмпорту.Колонки.Добавить("ДатаПоступило", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ДатаПроведения", Новый ОписаниеТипов("Дата"));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикСчет", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(26)));
	ДокументыКИмпорту.Колонки.Добавить("Плательщик", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикИНН", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(12)));
	ДокументыКИмпорту.Колонки.Добавить("Плательщик1", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Плательщик2", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(20)));
	ДокументыКИмпорту.Колонки.Добавить("Плательщик3", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Плательщик4", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикРасчСчет", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(26)));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикБанк1", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикБанк2", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикБИК", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(11)));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикКорсчет", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(26)));
	ДокументыКИмпорту.Колонки.Добавить("ПолучательСчет", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(26)));
	ДокументыКИмпорту.Колонки.Добавить("Получатель", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПолучательИНН", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(12)));
	ДокументыКИмпорту.Колонки.Добавить("Получатель1", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Получатель2", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(20)));
	ДокументыКИмпорту.Колонки.Добавить("Получатель3", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Получатель4", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить(
		"ПолучательРасчСчет",
		Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(26)));
	ДокументыКИмпорту.Колонки.Добавить("ПолучательБанк1", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПолучательБанк2", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПолучательБИК", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(11)));
	ДокументыКИмпорту.Колонки.Добавить("ПолучательКорсчет", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(26)));
	ДокументыКИмпорту.Колонки.Добавить("ВидПлатежа", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(2)));
	ДокументыКИмпорту.Колонки.Добавить("СтатусСоставителя", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(2)));
	ДокументыКИмпорту.Колонки.Добавить("ПлательщикКПП", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(9)));
	ДокументыКИмпорту.Колонки.Добавить("ПолучательКПП", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(9)));
	ДокументыКИмпорту.Колонки.Добавить("ПоказательКБК", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(20)));
	ДокументыКИмпорту.Колонки.Добавить("ОКАТО", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(11)));
	ДокументыКИмпорту.Колонки.Добавить(
		"ПоказательОснования",
		Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(2)));
	ДокументыКИмпорту.Колонки.Добавить("РасчСчет", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить(
		"ПоказательПериода",
		Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(10)));
	ДокументыКИмпорту.Колонки.Добавить("ПоказательНомера", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(18)));
	ДокументыКИмпорту.Колонки.Добавить("ПоказательДатыДок", Новый ОписаниеТипов("Дата"));
	ДокументыКИмпорту.Колонки.Добавить("ПоказательДаты", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПоказательТипа", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(2)));
	ДокументыКИмпорту.Колонки.Добавить("СрокПлатежаДок", Новый ОписаниеТипов("Дата"));
	ДокументыКИмпорту.Колонки.Добавить("СрокПлатежа", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Очередность", Новый ОписаниеТипов("Строка", ,,Новый КвалификаторыСтроки(2)));
	ДокументыКИмпорту.Колонки.Добавить("ОчередностьПлатежа", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыСтроки(1)));
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа1", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа2", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа3", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа4", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа5", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа6", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("СрокАкцептаДок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0)));
	ДокументыКИмпорту.Колонки.Добавить("СрокАкцепта", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ВидАккредитива", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("УсловиеОплаты1", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("УсловиеОплаты2", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("УсловиеОплаты3", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ПлатежПоПредст", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ДополнУсловия", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("НомерСчетаПоставщика", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ДатаОтсылки", Новый ОписаниеТипов("Дата"));
	ДокументыКИмпорту.Колонки.Добавить("ДатаОтсылкиДок", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.Выписка"));
	ДокументыКИмпорту.Колонки.Добавить("ПлатежныйОрдер", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("СекцияДокумент", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("СтатьяДДС", Новый ОписаниеТипов("СправочникСсылка.СтатьиДДС"));
	ДокументыКИмпорту.Колонки.Добавить("ОписаниеОшибок", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0)));
	ДокументыКИмпорту.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("ИмяДокумента", Новый ОписаниеТипов("Строка"));
	ДокументыКИмпорту.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ДокументыКИмпорту.Колонки.Добавить("ТипПлатежногоДокумента", Новый ОписаниеТипов("ОписаниеТипов"));
	ДокументыКИмпорту.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(25)));
	ДокументыКИмпорту.Колонки.Добавить("ВидДвижения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвижений"));
	ДокументыКИмпорту.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	ДокументыКИмпорту.Колонки.Добавить("ПометитьКонтрагентСчет", Новый ОписаниеТипов("Булево"));
	ДокументыКИмпорту.Колонки.Добавить("КодНазПлатежа", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(1)));
	ДокументыКИмпорту.Колонки.Добавить("КодВидаДохода", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(1)));
	ДокументыКИмпорту.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ДокументыКИмпорту.Колонки.Добавить("СуммаНДС", ФорматСуммы); 
	ДокументыКИмпорту.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийДвиженияДенежныхСредств"));
	ДокументыКИмпорту.Колонки.Добавить("Касса", Новый ОписаниеТипов("СправочникСсылка.КассыКомпании"));
	
	
	ТипыПлатежноеПоручениеОснование = Новый Массив;
	ТипыПлатежноеПоручениеОснование.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ТипыПлатежноеПоручениеОснование.Добавить(Тип("Строка"));
	
	ДокументыКИмпорту.Колонки.Добавить("ДоговорВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.ДоговорыВзаиморасчетов"));
	ДокументыКИмпорту.Колонки.Добавить("КонтрагентЗаполнен", Новый ОписаниеТипов("Булево"));
	ДокументыКИмпорту.Колонки.Добавить("ЭтоВнутреннееПеремещение", Новый ОписаниеТипов("Булево"));
	ДокументыКИмпорту.Колонки.Добавить("ПлатежноеПоручениеОснование", Новый ОписаниеТипов(ТипыПлатежноеПоручениеОснование));
	
	Возврат ДокументыКИмпорту;
	
КонецФункции

Функция КонтрагентыВыписок()
	
	Строка255 = Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(255));
	
	ТипыКонтрагента = Новый Массив();
	ТипыКонтрагента.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипыКонтрагента.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыКонтрагента.Добавить(Тип("Строка"));
	
	КонтрагентыВыписки = Новый ДеревоЗначений();
	КонтрагентыВыписки.Колонки.Добавить("Представление", Строка255);
	КонтрагентыВыписки.Колонки.Добавить("Значение", Строка255);
	КонтрагентыВыписки.Колонки.Добавить("Реквизит", Новый ОписаниеТипов(ТипыКонтрагента));
	КонтрагентыВыписки.Колонки.Добавить("НомСтроки", Строка255);
	КонтрагентыВыписки.Колонки.Добавить("Флажок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0)));
	КонтрагентыВыписки.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	
	Возврат КонтрагентыВыписки;
	
КонецФункции

Функция ВалютыСчетов()
	
	Валюты = Новый ТаблицаЗначений();
	Валюты.Колонки.Добавить("НомерСчета", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(50)));
	Валюты.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Возврат Валюты;
	
КонецФункции

Функция ПараметрыЗагрузки()
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("Организация", Неопределено);
	ПараметрыЗагрузки.Вставить("Банк", Неопределено);
	ПараметрыЗагрузки.Вставить("БанковскийСчет", Неопределено);
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

#КонецОбласти

Функция УдалитьРазделитель(Наименование)
	
	Разделитель = "//";
	ПозицияРазделителя = СтрНайти(Наименование, Разделитель);
	Если ПозицияРазделителя > 0 Тогда
		Наименование = СокрП(Сред(Наименование, 1, ПозицияРазделителя - 1));
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Функция ПолучитьФИОИзКраткогоНаименования(Знач КраткоеНаименование)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	КраткоеНаименование = " " + КраткоеНаименование + " ";
	НачалоОПФ = 0;
	ДлинаНаименования = СтрДлина(КраткоеНаименование);
	НашлиОПФ = Ложь;
	
	Пока НачалоОПФ <= ДлинаНаименования Цикл
		
		НачалоОПФ = СтрНайти(КраткоеНаименование, "ИП", , ?(НачалоОПФ = 0, 1, НачалоОПФ + 3));
		
		Если НачалоОПФ = 0 Тогда
			НашлиОПФ = Истина;
			Прервать;
		КонецЕсли;
		
		ПозицияСимволаДо = НачалоОПФ - 1;
		СимволДО = Сред(КраткоеНаименование, ПозицияСимволаДо, 1);
		ПозицияСимволаПосле = НачалоОПФ + 2;
		СимволПосле = Сред(КраткоеНаименование, ПозицияСимволаПосле, 1);
		
		Если (НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(СимволДО) ИЛИ ПустаяСтрока(СимволДо))
			И (НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(СимволПосле) ИЛИ ПустаяСтрока(СимволПосле)) Тогда
			
			// найдем первую букву слева и справа
			Пока НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(СимволДО) И ПозицияСимволаДо > 1 Цикл
				ПозицияСимволаДо = ПозицияСимволаДо - 1;
				СимволДО = Сред(КраткоеНаименование, ПозицияСимволаДо, 1);
			КонецЦикла;
			
			Пока НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(СимволПосле)
				И ПозицияСимволаПосле < ДлинаНаименования Цикл
				
				ПозицияСимволаПосле = ПозицияСимволаПосле + 1;
				СимволПосле = Сред(КраткоеНаименование, ПозицияСимволаПосле, 1);
				
			КонецЦикла;
			
			КраткоеНаименование = Лев(КраткоеНаименование, ПозицияСимволаДо)
				+ Сред(КраткоеНаименование, ПозицияСимволаПосле, ДлинаНаименования - ПозицияСимволаПосле);
			
			КраткоеНаименование = СокрЛП(КраткоеНаименование);
			НашлиОПФ = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НашлиОПФ Тогда
		
		Если ФизическиеЛицаКлиентСервер.ФИОНаписаноВерно(КраткоеНаименование) Тогда
			ЗаполнитьЗначенияСвойств(Результат, ФизическиеЛицаКлиентСервер.ЧастиИмени(КраткоеНаименование));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочиеВидыДоговоров()
	
	ПрочиеВидыДоговоров = Новый Массив;
	
	Для Каждого Вид Из Перечисления.ВидыДоговоров Цикл
		Если Вид <> Перечисления.ВидыДоговоров.Покупка И Вид <> Перечисления.ВидыДоговоров.Продажа Тогда
			ПрочиеВидыДоговоров.Добавить(Вид);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрочиеВидыДоговоров; 
	
КонецФункции

Процедура ЗаполнитьДоговорВзаиморасчетов(СтрокаДокумента,
		БанковскийСчет,
		НеСоздаватьДоговор = Истина,
		Объект = Неопределено,
		РежимЗагрузкиИзСообщения = Ложь)
	
	Если Объект = Неопределено Тогда
		Объект = Документы.Выписка.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеПлатежногоПоручения = Новый Структура();
	ДанныеПлатежногоПоручения.Вставить("ДоговорВзаиморасчетов", Неопределено);
	ДанныеПлатежногоПоручения.Вставить("СтатьяДДС", Неопределено);
	ДанныеПлатежногоПоручения.Вставить("ПлатежноеПоручение", Неопределено);
	
	ДанныеВыписки = Новый Структура("ВидОперации, Контрагент, ВхДокДата, ВхДокНомер, БанковскийСчет");
	ДанныеВыписки.ВидОперации = СтрокаДокумента.ВидОперации;
	ДанныеВыписки.Контрагент = СтрокаДокумента.Контрагент;
	ДанныеВыписки.ВхДокДата = СтрокаДокумента.ДатаДок;
	ДанныеВыписки.ВхДокНомер = СтрокаДокумента.НомерДок;
	ДанныеВыписки.БанковскийСчет = БанковскийСчет;
	
	Если Не ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		ДанныеПлатежногоПоручения = НайтиПлатежноеПоручение(ДанныеВыписки, ДанныеПлатежногоПоручения, СтрокаДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПлатежногоПоручения.ПлатежноеПоручение) Тогда
		
		СтрокаДокумента.ПлатежноеПоручениеОснование = ДанныеПлатежногоПоручения.ПлатежноеПоручение;
		СтрокаДокумента.ДоговорВзаиморасчетов = ДанныеПлатежногоПоручения.ДоговорВзаиморасчетов;
		СтрокаДокумента.СтатьяДДС = ДанныеПлатежногоПоручения.СтатьяДДС;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		ДоступныеВидыДоговоров = Новый Массив;
		
		Если СтрокаДокумента.ВидДвижения = Перечисления.ВидыДвижений.Расход Тогда
			
			ВидДоговора = Перечисления.ВидыДоговоров.Покупка;
			ДоступныеВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.Покупка);
			
		ИначеЕсли СтрокаДокумента.ВидДвижения = Перечисления.ВидыДвижений.Приход Тогда
			
			ВидДоговора = Перечисления.ВидыДоговоров.Продажа;
			ДоступныеВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.Продажа);
			
		КонецЕсли;
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ДоступныеВидыДоговоров", ДоступныеВидыДоговоров);
		ПараметрыДействия.Вставить("НеСоздаватьДоговор", НеСоздаватьДоговор);
		ПараметрыДействия.Вставить("ВалютаВзаиморасчетов", БанковскийСчет.ВалютаДенежныхСредств);
		ПараметрыДействия.Вставить("Организация", БанковскийСчет.Владелец);
		ПараметрыДействия.Вставить("ПодразделениеКомпании", БанковскийСчет.ПодразделениеКомпании);
		
		Если РежимЗагрузкиИзСообщения Тогда
			ПараметрыДействия.Вставить("ОбменДаннымиЗагрузка", Истина);
		КонецЕсли;
		
		СтрокаДокумента.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
			СтрокаДокумента.Контрагент,
			ВидДоговора,
			Объект,
			ПараметрыДействия
		);
		
		// Если не нашли договор продажи/покупки, повторим поиск с другими видами
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДоговорВзаиморасчетов) 
			И НЕ ПраваИНастройкиПользователя.Значение("АвтоматическоеСозданиеОсновногоДоговора", "Выписка") Тогда
			ПараметрыДействия.ДоступныеВидыДоговоров = ПрочиеВидыДоговоров();
			СтрокаДокумента.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
				СтрокаДокумента.Контрагент,
				Перечисления.ВидыДоговоров.ПустаяСсылка(),
				Объект,
				ПараметрыДействия
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли