
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ПодразделениеКомпанииТекущегоПользователя = ПараметрыСеанса.ПодразделениеКомпании;
	
	// заполним права пользователя
	ЗапрашиватьНовоеРабМесто = ПраваИНастройкиПользователя.Значение(
		ПланыВидовХарактеристик.ПраваИНастройки.УРВ_ЗапрашиватьРабочееМесто);
	
	// установим режим пароля для поля авторизации
	Элементы.КодАвторизации.РежимПароля = ПраваИНастройкиПользователя.Значение(
		ПланыВидовХарактеристик.ПраваИНастройки.УРВ_СкрыватьКодПриАвторизации);
	
	АктуальныеГрафикиРабот();
	
	ОбновитьСтраницуБлокировки();
	
	УправлениеДиалогомАльфаАвтоСервер.СформироватьУсловноеОформление(
		ЭтотОбъект,
		Справочники.ВидыСостоянийЗаказНарядов,
		"ЗаказНарядСостояние",
		,
		,
		ПодобранныеПакеты
	);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДлительнаяОперация(Ложь);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВводДоступен() И Источник = "ПодключаемоеОборудование" Тогда
		
		Штрихкод = ШтрихкодированиеКлиент.ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр);
		ПараметрыДействия = Новый Структура;
		ШтрихкодированиеКлиент.ОбработатьПолныйШтрихкод(Штрихкод, ПараметрыДействия);
		Штрихкод = ПараметрыДействия.Штрихкод;
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаБлокировки Тогда
			
			КодАвторизации = Штрихкод;
			Авторизация();
			Возврат;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШтрихКод) Тогда
			
			ОтборПакетов = ШтрихКод;
			ОтборПакетовПриИзменении(Элементы.ОтборПакетов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Закрытие формы возможно только со страицы блокировки
	// с других страниц происходит переход на страницу блокировки.
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаБлокировки Тогда
		Отказ = Истина;
		
		Выход(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодАвторизацииПриИзменении(Элемент)
	
	Авторизация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеПакетыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодобранныеПакетыПриАктивизацииСтрокиОтложенное", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыСотрудникаДатаПриИзменении(Элемент)
	
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("НачалоПериода" , НачалоДня(ПланыСотрудникаДата));
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("КонецПериода"  , КонецДня(ПланыСотрудникаДата));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПакетовПриИзменении(Элемент)
	
	Использование = Истина;
	
	Если НЕ ПустаяСтрока(ОтборПакетов) И СтрДлина(ОтборПакетов) < 4 Тогда
		
		Использование = Ложь;
		ПоказатьПредупреждение(,НСтр("ru = 'Для поиска необходимо ввести минимум 4 символа.'"));
		
	КонецЕсли;
	
	ГруппаКорень = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ПодобранныеПакеты.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, "ГруппаКорень",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаКорень, "Номер", ОтборПакетов, ВидСравненияКомпоновкиДанных.Содержит,, Использование);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаКорень, "ШтрихКод", ОтборПакетов, ВидСравненияКомпоновкиДанных.Содержит,, Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаКорень, "ГосНомер", ОтборПакетов, ВидСравненияКомпоновкиДанных.Содержит,, Использование);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаКорень, "VIN", ОтборПакетов, ВидСравненияКомпоновкиДанных.Содержит,, Использование);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодобранныеПакетыПриАктивизацииСтрокиОтложенное", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыСотрудникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.АвтоработыПометка.Видимость И Поле.Имя = "АвтоработыАвторабота" Тогда
		Элемент.ТекущиеДанные.Пометка = НЕ Элемент.ТекущиеДанные.Пометка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьАвторизацию(Команда)
	
	Авторизация();
	
КонецПроцедуры

&НаКлиенте
Процедура Выход(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаБлокировки;
	КодАвторизации = "";  
	
	ОтборПакетов = "";
	ОтборПакетовПриИзменении(Неопределено);
	
	ОбновитьСтраницуБлокировки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	Если Объект.ТекущееСостояние = ПредопределенноеЗначение("Справочник.ВидыОтметокВремени.Работа")
		ИЛИ Объект.ТекущееСостояние = ПредопределенноеЗначение("Справочник.ВидыОтметокВремени.РаботаПоУдаленномуПакету") Тогда
		
		Результат = ЗакрытьПакетРаботНаСервере(Объект.ТекущийПакет, Объект.АвторизованныйСотрудник);
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(Результат, "Успех", Истина) Тогда
			ПоказатьПредупреждение(, ПолучитьЗначениеПараметраСтруктуры(Результат, "ОписаниеОшибки", "Ошибка."));
		КонецЕсли;
		
	ИначеЕсли Элементы.ПодобранныеПакеты.ТекущиеДанные <> Неопределено Тогда
		ВыбранныйПакетРабот = Элементы.ПодобранныеПакеты.ТекущиеДанные.ПакетРабот;
		Если РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(ВыбранныйПакетРабот) И
			Автоработы.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
			
			ПоказатьПредупреждение(,
				НСтр("ru = 'Не выбраны автоработы для формирования пакета работ.'"));
			
			Возврат;
		КонецЕсли;
			
		Если РаботыПоПакетуДоступны(Элементы.ПодобранныеПакеты.ТекущиеДанные.ЗаказНаряд) Тогда
			Если ЗапрашиватьНовоеРабМесто Тогда // получим рабочее место
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПакетРабот"              , ВыбранныйПакетРабот);
				ДополнительныеПараметры.Вставить("АвторизованныйСотрудник" , Объект.АвторизованныйСотрудник);
				ДополнительныеПараметры.Вставить("ЗаказНаряд"              , Элементы.ПодобранныеПакеты.ТекущиеДанные.ЗаказНаряд);
				ДополнительныеПараметры.Вставить("Событие"                 , "ВыборРабочегоМеста");
				
				ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
				
				ОткрытьФорму(ПолныйПутьКФорме("ФормаВыбораРабочегоМеста"), Новый Структура("АвторизованныйСотрудник,ТекущийЗаказНаряд", Объект.АвторизованныйСотрудник, Элементы.ПодобранныеПакеты.ТекущиеДанные.ЗаказНаряд),
					ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Иначе // начинаем работу по пакету
				Результат = НачатьРаботыПоПакетуНаСервере(ВыбранныйПакетРабот,
					Объект.АвторизованныйСотрудник,
					Элементы.ПодобранныеПакеты.ТекущиеДанные.ЗаказНаряд);
				
				Если НЕ ПолучитьЗначениеПараметраСтруктуры(Результат, "Успех", Истина) Тогда
					ПоказатьПредупреждение(, ПолучитьЗначениеПараметраСтруктуры(Результат, "ОписаниеОшибки", "Ошибка."));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПодобранныеПакеты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПерерыв(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПакетРабот"              , Объект.ТекущийПакет);
	ДополнительныеПараметры.Вставить("АвторизованныйСотрудник" , Объект.АвторизованныйСотрудник);
	ДополнительныеПараметры.Вставить("ЗаказНаряд"              , Объект.ТекущийЗаказНаряд);
	ДополнительныеПараметры.Вставить("Событие"                 , "ВыборОтметкиВремени");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ПолныйПутьКФорме("ФормаВыбораОтметкиВремени"),, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗакончитьРабочийДень(Команда)
	
	Если Объект.РабочийДеньНачат Тогда
		ЗакончитьРабочийДеньНаСервере();
	Иначе
		НачатьРабочийДеньНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатистикаСотрудника(Команда)
	
	Если Элементы.ГруппаВнутренниеСтраницы.ТекущаяСтраница = Элементы.СтраницаСтатистики Тогда
		Элементы.ГруппаВнутренниеСтраницы.ТекущаяСтраница = Элементы.СтраницаОтметокВремени;
	ИначеЕсли Элементы.ГруппаВнутренниеСтраницы.ТекущаяСтраница = Элементы.СтраницаОтметокВремени Тогда
		ОбновитьСтатистикуПоисполнителю();
		Элементы.ГруппаВнутренниеСтраницы.ТекущаяСтраница = Элементы.СтраницаСтатистики;
	КонецЕсли;
	
	ОбновитьЗаголовкиКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура МинусДень(Команда)
	
	ПланыСотрудникаДата = НачалоДня((НачалоДня(ПланыСотрудникаДата) - 1));
	
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("НачалоПериода" , НачалоДня(ПланыСотрудникаДата));
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("КонецПериода"  , КонецДня(ПланыСотрудникаДата));
	
КонецПроцедуры

&НаКлиенте
Процедура ПлюсДень(Команда)
	
	ПланыСотрудникаДата = КонецДня(ПланыСотрудникаДата) + 1;
	
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("НачалоПериода" , НачалоДня(ПланыСотрудникаДата));
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("КонецПериода"  , КонецДня(ПланыСотрудникаДата));
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовФормыВводаКода(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВводКодаВручную");
	ОткрытьФорму("ОбщаяФорма.ЭкраннаяЦифроваяКлавиатура",, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовФормыВводаКодаЗН(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВводКодаВручнуюЗН");
	
	ПараметрыФормы = Новый Структура("ОтображатьКод, ДоступностьОтображенияКода", Истина, Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ЭкраннаяЦифроваяКлавиатура", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеАвтоработы(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Истина, Автоработы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеАвтоработы(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиПометки(Ложь, Автоработы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодобранныеПакеты(Команда)
	
	Элементы.ПодобранныеПакеты.Обновить();
	ПодключитьОбработчикОжидания("Подключаемый_ПодобранныеПакетыПриАктивизацииСтрокиОтложенное", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСостояниеСотрудника(ЗаказНаряд, Цех, Исполнитель, ПакетРабот, Состояние, автомобиль)
	
	Объект.ТекущийЗаказНаряд = ЗаказНаряд;
	Объект.ТекущееСостояние  = Состояние;
	Объект.Автомобиль        = ?(ЗначениеЗаполнено(Автомобиль), Автомобиль, Объект.ТекущийЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль);
	Объект.ГосНомер          = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
	
	Объект.РабочийДеньНачат = ЗначениеЗаполнено(Состояние) И Состояние <> Справочники.ВидыОтметокВремени.НерабочееВремя;
	Объект.ТекущийПакет     = ПакетРабот;
	
	Заголовок = Объект.АвторизованныйСотрудник;
	
	ПредставлениеТекущегоЗаказНаряда = ?(НЕ Объект.ТекущийЗаказНаряд.Пустая(),
			СтрШаблон("№%1 от %2", Объект.ТекущийЗаказНаряд.Номер, Формат(Объект.ТекущийЗаказНаряд.Дата, "ДЛФ=D")),"");
			
	ПредставлениеТекущегоАвтомобиля  = ?(НЕ Объект.Автомобиль.Пустая(),
			СтрШаблон("%1/%2/%3", Объект.Автомобиль.Модель, Объект.Автомобиль.Цвет, Объект.ГосНомер), "");
	
КонецПроцедуры

&НаСервере
Функция АвторизацияНаСервере()
	
	данныеКарты = ЗащищенныеФункцииАльфаАвтоУРВСервер.ПреобразоватьШК(КодАвторизации);
	
	Если ТипЗнч(ПолучитьЗначениеПараметраСтруктуры(данныеКарты, "Объект", Неопределено)) = Тип("СправочникСсылка.Сотрудники") Тогда
		сотрудник = ПолучитьЗначениеПараметраСтруктуры(данныеКарты, "Объект", Неопределено);
		Если ПолучитьЗначениеПараметраСтруктуры(данныеКарты, "УдалениеОбъект", Истина) ИЛИ сотрудник.ПометкаУдаления ИЛИ сотрудник.ФлагУволен Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.АвторизованныйСотрудник <> сотрудник Тогда
		Объект.АвторизованныйСотрудник = сотрудник;
		Объект.ПодразделениеКомпанииСотрудника = сотрудник.ПодразделениеКомпании;
		
		СтартовоеЗаполнение();
	Иначе
		Заголовок = Объект.АвторизованныйСотрудник;
	КонецЕсли;
	
	ОбновитьЗаголовкиКнопок();
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаказНаряда(заказНаряд)
	
	запрос = Новый Запрос;
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаряд.Ссылка,
	|	ЗаказНаряд.Состояние,
	|	ЗаказНаряд.ПометкаУдаления
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Ссылка = &Ссылка";
	запрос.УстановитьПараметр("Ссылка", заказНаряд);
	
	результатЗапроса = запрос.Выполнить();
	
	Если результатЗапроса.Пустой() Тогда
		Возврат Новый Структура("Ссылка,Состояние,ПометкаУдаления,Закрыт,Выполнен",
								Документы.ЗаказНаряд.ПустаяСсылка(),
								Неопределено,
								Ложь,
								Ложь,
								Ложь);
	Иначе
		выборка = результатЗапроса.Выбрать(); выборка.Следующий();
		Возврат Новый Структура("Ссылка,Состояние,ПометкаУдаления,Закрыт,Выполнен",
								выборка.Ссылка,
								выборка.Состояние,
								выборка.ПометкаУдаления,
								выборка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт,
								выборка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Авторизация()
	
	Если НЕ АвторизацияНаСервере() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Введенный код не верен!
			|Повторите попытку.'"));
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.РабочиеСтраницы;
		ЭтотОбъект.ТекущийЭлемент = Элементы.ОтборПакетов;
		ДлительнаяОперация(Ложь);
		
		УстановитьОтборыДинамическихСписков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыДинамическихСписков()
	
	ПодобранныеПакеты.Параметры.УстановитьЗначениеПараметра("ПодразделениеКомпании", Объект.ПодразделениеКомпанииСотрудника);
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("Исполнитель"   , Объект.АвторизованныйСотрудник);
	
	ПланыСотрудникаДата = ТекущаяДата();
	
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("НачалоПериода" , НачалоДня(ПланыСотрудникаДата));
	ПланыСотрудника.Параметры.УстановитьЗначениеПараметра("КонецПериода"  , КонецДня(ПланыСотрудникаДата));
	
КонецПроцедуры

&НаКлиенте
Функция РаботыПоПакетуДоступны(заказНаряд)
	
	данныеЗаказНаряда = ПолучитьДанныеЗаказНаряда(заказНаряд);
	текстОшибки = "";
	
	Если данныеЗаказНаряда.Ссылка.Пустая() Тогда
		текстОшибки = НСтр("ru = 'Нельзя начать работу так как не указан заказ-наряд.'");
	ИначеЕсли данныеЗаказНаряда.ПометкаУдаления Тогда
		текстОшибки = НСтр("ru = 'Нельзя начать работу так как заказ-наряд помечен на удаление.'");
	ИначеЕсли данныеЗаказНаряда.Закрыт Тогда
		текстОшибки = НСтр("ru = 'Нельзя начать работу так как заказ-наряд находится в состоянии ""Закрыт"".'");
	ИначеЕсли данныеЗаказНаряда.Выполнен Тогда
		текстОшибки = НСтр("ru = 'Нельзя начать работу так как заказ-наряд находится в состоянии ""Выполнен"".'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(текстОшибки) Тогда
		ПоказатьПредупреждение(, текстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", Неопределено) = "ВыборРабочегоМеста" Тогда
		Результат = НачатьРаботыПоПакетуНаСервере(
						ДополнительныеПараметры.ПакетРабот,
						ДополнительныеПараметры.АвторизованныйСотрудник,
						ДополнительныеПараметры.ЗаказНаряд,
						РезультатОповещения);
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(Результат, "Успех", Истина) Тогда
			ПоказатьПредупреждение(, ПолучитьЗначениеПараметраСтруктуры(Результат, "ОписаниеОшибки", "Ошибка."));
		КонецЕсли;
		
		Элементы.ПодобранныеПакеты.Обновить();
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", Неопределено) = "ВыборОтметкиВремени" Тогда
		
		НачатьПерерывПоПакетуНаСервере(РезультатОповещения, ДополнительныеПараметры.ПакетРабот, ДополнительныеПараметры.АвторизованныйСотрудник, ДополнительныеПараметры.ЗаказНаряд);
		
		Элементы.ПодобранныеПакеты.Обновить();
		
	ИначеЕсли ДополнительныеПараметры = "ВводКодаВручную" И НЕ ПустаяСтрока(РезультатОповещения) Тогда
		
		КодАвторизации = РезультатОповещения;
		Авторизация();
		
	ИначеЕсли ДополнительныеПараметры = "ВводКодаВручнуюЗН" И НЕ ПустаяСтрока(РезультатОповещения) Тогда
		
		ОтборПакетов = РезультатОповещения;
		ОтборПакетовПриИзменении(Элементы.ОтборПакетов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолныйПутьКФорме(имяФормыОбработки)
	
	Возврат Лев(ИмяФормы, СтрНайти(ЭтотОбъект.ИмяФормы, ".Форма", НаправлениеПоиска.СКонца)) + имяФормыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбновитьПоказателиСтраницыБлокировки()
	 Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПараметрыСеанса.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("НачалоПериода"        , НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонецПериода"         , КонецДня(ТекущаяДатаСеанса()));
	Запрос.Текст =
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПланированиеРабот.Документ КАК ЗаявкаНаРемонт
	|ПОМЕСТИТЬ ЗаписаноНаСегодня
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ ССЫЛКА Документ.ЗаявкаНаРемонт
	|	И ВЫРАЗИТЬ(ПланированиеРабот.Документ КАК Документ.ЗаявкаНаРемонт).ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)
	|	И (ПланированиеРабот.Начало <= &НачалоПериода
	|				И ПланированиеРабот.Конец >= &НачалоПериода
	|			ИЛИ &НачалоПериода <= ПланированиеРабот.Начало
	|				И ПланированиеРабот.Конец <= &КонецПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ПланированиеРабот.Документ КАК Документ.ЗаказНаряд).СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ ПриехалоПоЗаписи
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ ССЫЛКА Документ.ЗаказНаряд
	|	И ВЫРАЗИТЬ(ПланированиеРабот.Документ КАК Документ.ЗаказНаряд).ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)
	|	И (ПланированиеРабот.Начало <= &НачалоПериода
	|				И ПланированиеРабот.Конец >= &НачалоПериода
	|			ИЛИ &НачалоПериода <= ПланированиеРабот.Начало
	|				И ПланированиеРабот.Конец <= &КонецПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПланированиеРабот.Документ КАК Ссылка
	|ПОМЕСТИТЬ АктуальныеЗаказНаряды
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ ССЫЛКА Документ.ЗаказНаряд
	|	И ВЫРАЗИТЬ(ПланированиеРабот.Документ КАК Документ.ЗаказНаряд).ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)
	|	И (ПланированиеРабот.Начало <= &НачалоПериода
	|				И ПланированиеРабот.Конец >= &НачалоПериода
	|			ИЛИ &НачалоПериода <= ПланированиеРабот.Начало
	|				И ПланированиеРабот.Начало <= &КонецПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФактическоеВремя.ЗаказНаряд,
	|	ФактическоеВремя.ПакетРабот,
	|	ФактическоеВремя.Состояние
	|ПОМЕСТИТЬ ОтметкиПоЗаказНарядам
	|ИЗ
	|	РегистрСведений.ФактическоеВремя КАК ФактическоеВремя
	|ГДЕ
	|	ФактическоеВремя.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.НеРабочееВремя)
	|	И ФактическоеВремя.Продолжительность = 0
	|	И ФактическоеВремя.ЗаказНаряд В
	|			(ВЫБРАТЬ
	|				АктуальныеЗаказНаряды.Ссылка
	|			ИЗ
	|				АктуальныеЗаказНаряды КАК АктуальныеЗаказНаряды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоставПакетовРабот.ЗаказНаряд,
	|	СоставПакетовРабот.ПакетРабот
	|ПОМЕСТИТЬ ПакетыАктуальныхЗН
	|ИЗ
	|	РегистрСведений.СоставПакетовРабот КАК СоставПакетовРабот
	|ГДЕ
	|	СоставПакетовРабот.ЗаказНаряд В
	|			(ВЫБРАТЬ
	|				АктуальныеЗаказНаряды.Ссылка
	|			ИЗ
	|				АктуальныеЗаказНаряды КАК АктуальныеЗаказНаряды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтметкиПоЗаказНарядам.Состояние ЕСТЬ NULL 
	|				ТОГДА 3
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ОтметкиПоЗаказНарядам.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)
	|						ТОГДА 1
	|					ИНАЧЕ 2
	|				КОНЕЦ
	|		КОНЕЦ) КАК Состояние,
	|	ПакетыАктуальныхЗН.ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль
	|ИЗ
	|	ПакетыАктуальныхЗН КАК ПакетыАктуальныхЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтметкиПоЗаказНарядам КАК ОтметкиПоЗаказНарядам
	|		ПО ПакетыАктуальныхЗН.ЗаказНаряд = ОтметкиПоЗаказНарядам.ЗаказНаряд
	|			И ПакетыАктуальныхЗН.ПакетРабот = ОтметкиПоЗаказНарядам.ПакетРабот
	|
	|СГРУППИРОВАТЬ ПО
	|	ПакетыАктуальныхЗН.ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеЗаказНаряды.Ссылка.СводныйРемонтныйЗаказ.Автомобиль,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА АктуальныеЗаказНаряды.Ссылка.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Выполнен)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьВыполненные
	|ИЗ
	|	АктуальныеЗаказНаряды КАК АктуальныеЗаказНаряды
	|ГДЕ
	|	(АктуальныеЗаказНаряды.Ссылка.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Выполнен)
	|			ИЛИ АктуальныеЗаказНаряды.Ссылка.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт))
	|
	|СГРУППИРОВАТЬ ПО
	|	АктуальныеЗаказНаряды.Ссылка.СводныйРемонтныйЗаказ.Автомобиль";
	
	РезультатПоПакетам = Запрос.ВыполнитьПакет();
	
	ПоказательЗаписано = РезультатПоПакетам[0].Выгрузить()[0].Количество + РезультатПоПакетам[1].Выгрузить()[0].Количество;
	ПоказательПриехалоПоЗаписи = РезультатПоПакетам[1].Выгрузить()[0].Количество;
	
	Отметки = РезультатПоПакетам[5].Выгрузить();
	ПоказательОжидаютВыполнения = Отметки.НайтиСтроки(Новый Структура("Состояние", 3)).Количество();
	ПоказательВРаботе = Отметки.НайтиСтроки(Новый Структура("Состояние", 1)).Количество();
	ПоказательВПростое = Отметки.НайтиСтроки(Новый Структура("Состояние", 2)).Количество();
	
	Выполненные = РезультатПоПакетам[6].Выгрузить();
	ПоказательВыполнено = Выполненные.НайтиСтроки(Новый Структура("ЕстьВыполненные", Истина)).Количество();
	ПоказательВыдано = Выполненные.НайтиСтроки(Новый Структура("ЕстьВыполненные", Ложь)).Количество();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическоеВремяСрезПоследних.Исполнитель КАК Исполнитель,
	|	ФактическоеВремяСрезПоследних.Состояние КАК Состояние,
	|	ФактическоеВремяСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ АктивныеИсполнители
	|ИЗ
	|	РегистрСведений.ФактическоеВремя.СрезПоследних(
	|			,
	|			Исполнитель.Исполнитель = ИСТИНА
	|				И Исполнитель.ПодразделениеКомпании В ИЕРАРХИИ (&ПодразделениеКомпании)
	|				И Исполнитель.ФлагУволен = ЛОЖЬ) КАК ФактическоеВремяСрезПоследних
	|ГДЕ
	|	ФактическоеВремяСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.НерабочееВремя)
	|	И ФактическоеВремяСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Сотрудники.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Сотрудники.Цех.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА Сотрудники.ПодразделениеКомпании.ГрафикРаботы
	|					ИНАЧЕ Сотрудники.Цех.ГрафикРаботы
	|				КОНЕЦ
	|		ИНАЧЕ Сотрудники.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы
	|ПОМЕСТИТЬ РаботающиеСегодня
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФлагУволен = ЛОЖЬ
	|	И Сотрудники.ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)
	|	И Сотрудники.Исполнитель = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботающиеСегодня.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА АктивныеИсполнители.Состояние ЕСТЬ NULL
	|			ТОГДА 3
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АктивныеИсполнители.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус,
	|	АктивныеИсполнители.Состояние КАК Состояние,
	|	АктивныеИсполнители.Период КАК Период,
	|	РаботающиеСегодня.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	РаботающиеСегодня КАК РаботающиеСегодня
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктивныеИсполнители КАК АктивныеИсполнители
	|		ПО РаботающиеСегодня.Сотрудник = АктивныеИсполнители.Исполнитель
	|ГДЕ
	|	РаботающиеСегодня.ГрафикРаботы В(&АктуальныеГрафики)";
	
	Запрос.УстановитьПараметр("НачалоДня"             , НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонецДня"              , КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПодразделениеКомпании" , ПараметрыСеанса.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("АктуальныеГрафики"     , СегодняРаботают);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоРаботающих = 0;
	
	СвободныеСотрудники.Очистить();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = 1 Тогда
			КоличествоРаботающих = КоличествоРаботающих + 1;
			
			НоваяСтрока = СвободныеСотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ОписаниеСостояния = СтрШаблон("работает с %1", Формат(Выборка.Период, "ДФ=H:mm"));
		ИначеЕсли Выборка.Статус = 2 Тогда
			НоваяСтрока = СвободныеСотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ОписаниеСостояния = СтрШаблон("%1 с %2", НРег(Выборка.Состояние), Формат(Выборка.Период, "ДФ=H:mm"));
		Иначе
			НоваяСтрока = СвободныеСотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ОписаниеСостояния = "опаздывает";
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДекорацияЗагрузкаСотрудниковПроцент.Заголовок = ПолучитьТекстВиджета(
		КоличествоРаботающих,
		Выборка.Количество(),
		"Занято сотрудников"
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРабочихМест()
	
	СвободныеЦеха.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цеха.Ссылка
	|ПОМЕСТИТЬ АктивныеСегодняЦеха
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ГДЕ
	|	Цеха.ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)
	|	И Цеха.ГрафикРаботы В(&АктуальныеГрафикиРаботы)
	|	И Цеха.ИспользуетсяВУРВ = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическоеВремяСрезПоследних.Цех,
	|	ФактическоеВремяСрезПоследних.Состояние
	|ПОМЕСТИТЬ ОтметкиПоЦехам
	|ИЗ
	|	РегистрСведений.ФактическоеВремя.СрезПоследних(
	|			,
	|			Цех В
	|				(ВЫБРАТЬ
	|					АктивныеСегодняЦеха.Ссылка
	|				ИЗ
	|					АктивныеСегодняЦеха КАК АктивныеСегодняЦеха)) КАК ФактическоеВремяСрезПоследних
	|ГДЕ
	|	//ФактическоеВремяСрезПоследних.Период МЕЖДУ &НачалоДня И &КонецДня И
	|	ФактическоеВремяСрезПоследних.Продолжительность = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивныеСегодняЦеха.Ссылка КАК РабочееМесто,
	|	ЕСТЬNULL(ОтметкиПоЦехам.Состояние, ""свободен"") КАК Описание,
	|	ВЫБОР
	|		КОГДА ОтметкиПоЦехам.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Работает
	|ИЗ
	|	АктивныеСегодняЦеха КАК АктивныеСегодняЦеха
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтметкиПоЦехам КАК ОтметкиПоЦехам
	|		ПО АктивныеСегодняЦеха.Ссылка = ОтметкиПоЦехам.Цех
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочееМесто";
	Запрос.УстановитьПараметр("ПодразделениеКомпании"   , ПараметрыСеанса.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("АктуальныеГрафикиРаботы" , СегодняРаботают);
	Запрос.УстановитьПараметр("НачалоДня"               , НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонецДня"                , КонецДня(ТекущаяДатаСеанса()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоРаботающих = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Работает Тогда
			КоличествоРаботающих = КоличествоРаботающих + 1;
		КонецЕсли;
		
		НоваяСтрока = СвободныеЦеха.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Описание = НРег(НоваяСтрока.Описание);
	КонецЦикла;
	
	Элементы.ДекорацияЗагрузкаЦеховПроцент.Заголовок = ПолучитьТекстВиджета(
		КоличествоРаботающих,
		Выборка.Количество(),
		"Занято рабочих мест"
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистикуПоисполнителю()
	
	Элементы.ДекорацияВТекущемМесяцеПоЗаказНарядам.Заголовок         = СтрШаблон("За %1  по заказ-нарядам:", НРег(Формат(ТекущаяДатаСеанса(),"ДФ=ММММ")));
	Элементы.ДекорацияВТекущемМесяцеПоУчетуРабочегоВремени.Заголовок = СтрШаблон("За %1  по данным УРВ:", НРег(Формат(ТекущаяДатаСеанса(),"ДФ=ММММ")));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", Объект.АвторизованныйСотрудник);
	Запрос.УстановитьПараметр("НачПериод"  , НачалоМесяца(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонПериод"  , КонецМесяца(ТекущаяДатаСеанса()));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ФактическоеВремя.Продолжительность) КАК Продолжительность
	|ИЗ
	|	РегистрСведений.ФактическоеВремя КАК ФактическоеВремя
	|ГДЕ
	|	ФактическоеВремя.Исполнитель = &Исполнитель
	|	И ФактическоеВремя.Период МЕЖДУ &НачПериод И &КонПериод
	|	И ФактическоеВремя.Продолжительность <> 0
	|	И ФактическоеВремя.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВыработкаСотрудников.КоличествоНормочасов)  КАК Продолжительность
	|ИЗ
	|	РегистрНакопления.ВыработкаСотрудников КАК ВыработкаСотрудников
	|ГДЕ
	|	ВыработкаСотрудников.Период МЕЖДУ &НачПериод И &КонПериод
	|	И ВыработкаСотрудников.Сотрудник = &Исполнитель";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Если Выборка.Следующий() И Выборка.Продолжительность <> null Тогда
		Значение = Выборка.Продолжительность/3600;
	Иначе
		Значение = 0;
	КонецЕсли;
	
	Элементы.ДекорацияВТекущемМесяцеПоУчетуРабочегоВремениЗначение.Заголовок = СтрШаблон("%1 часов.",Формат(Значение,"ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=3,0"));
	
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() И Выборка.Продолжительность <> null Тогда
		Значение = Выборка.Продолжительность;
	Иначе
		Значение = 0;
	КонецЕсли;
	
	Элементы.ДекорацияВТекущемМесяцеПоЗаказНарядамЗначение.Заголовок = СтрШаблон("%1 часов.",Формат(Значение,"ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=3,0"));
	
	
КонецПроцедуры

&НаСервере
Процедура ПодобранныеПакетыПриАктивизацииСтрокиОтложенноеНаСервере(ПакетРабот, ЗаказНаряд)
	
	Автоработы.Загрузить(РаботаСПакетамиРабот.АвтоработыПакета(ПакетРабот, ЗаказНаряд));
	
	ВидимостьФлагов = РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(ПакетРабот);
	Элементы.АвтоработыАвторабота.ГиперссылкаЯчейки = ВидимостьФлагов;
	Элементы.АвтоработыПометка.Видимость = ВидимостьФлагов;
	Элементы.АвтоработыВыбратьВсеАвтоработы.Видимость  = ВидимостьФлагов;
	Элементы.АвтоработыОтменитьВсеАвтоработы.Видимость = ВидимостьФлагов;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодобранныеПакетыПриАктивизацииСтрокиОтложенное()
	
	ТекущиеДанные = Элементы.ПодобранныеПакеты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекСтрока = Элементы.ПодобранныеПакеты.ТекущаяСтрока;
		ДлительнаяОперация(Истина);
		ПодобранныеПакетыПриАктивизацииСтрокиОтложенноеНаСервере(ТекущиеДанные.ПакетРабот, ТекущиеДанные.ЗаказНаряд);
		ДлительнаяОперация(Ложь);
		
		ТекущиеДанныеВРаботе = ТекущиеДанные.ВРаботе;
		ОбновитьЗаголовкиКнопок();
		Элементы.ПодобранныеПакеты.ТекущаяСтрока = ТекСтрока;
	Иначе
		Автоработы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстВиджета(Количество, КоличествоВсего, Заголовок)
	
	ЦветТекста         = ЦветаСтиля.ЦветНейтральногоТекстаВиджета;
	ЦветПредупреждения = ЦветаСтиля.ЦветОтрицательногоТекстаВиджета;
	ЦветОдобрения      = ЦветаСтиля.ЦветПоложительногоТекстаВиджета;
	
	ЭлементыСтроки = Новый Массив;
	
	// Добавим заголовок
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(Заголовок, Новый Шрифт(, 15), ЦветТекста));
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(" ", Новый Шрифт(, 15), ЦветТекста));
	
	// добавим первое число
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(Количество), Новый Шрифт(, 20, Истина), ЦветТекста));
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(" из ", Новый Шрифт(, 15), ЦветТекста));
	
	// добавим второе число
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(КоличествоВсего), Новый Шрифт(, 20, Истина), ЦветТекста));
	ЭлементыСтроки.Добавить(Символы.ПС);
	
	Процент = ?(КоличествоВсего <> 0, Окр((Количество/КоличествоВсего)*100, 0), 0);
	
	Если Процент < 60 Тогда
		ЦветПроцента = ЦветПредупреждения;
	ИначеЕсли Процент >= 90 Тогда
		ЦветПроцента = ЦветОдобрения;
	Иначе
		ЦветПроцента = ЦветТекста;
	КонецЕсли;
	
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(Процент), Новый Шрифт(, 46, Истина), ЦветПроцента));
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока("%", Новый Шрифт(, 42, Истина), ЦветТекста));
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыСтроки);
	
КонецФункции

&НаСервере
Функция ПоПокетуРаботаютДругиеИсполнители(Пакет, ТекущийИсполнитель, ДругиеИсполнители = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФактическоеВремяСрезПоследних.Исполнитель,
		|	ФактическоеВремяСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.ФактическоеВремя.СрезПоследних(
		|			,
		|			Исполнитель <> &ТекущийИсполнитель
		|				И ПакетРабот = &ПакетРабот) КАК ФактическоеВремяСрезПоследних
		|ГДЕ
		|	ФактическоеВремяСрезПоследних.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)
		|	И ФактическоеВремяСрезПоследних.Продолжительность = 0"
	);
	Запрос.УстановитьПараметр("ПакетРабот"         , Пакет);
	Запрос.УстановитьПараметр("ТекущийИсполнитель" , ТекущийИсполнитель);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ДругиеИсполнители = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель");
	Возврат Истина;
	
КонецФункции

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_УПРАВЛЕНИЯ_ИНТЕРФЕЙСОМ

&НаСервере
Процедура ОбновитьЗаголовкиКнопок()
	
	ЭтоРабочаяСтраница = (Элементы.ГруппаВнутренниеСтраницы.ТекущаяСтраница = Элементы.СтраницаОтметокВремени);
	Элементы.НачатьРаботу.Видимость               = ЭтоРабочаяСтраница;
	Элементы.НачатьПерерыв.Видимость              = ЭтоРабочаяСтраница;
	Элементы.НачатьЗакончитьРабочийДень.Видимость = ЭтоРабочаяСтраница;
	
	Если ЭтоРабочаяСтраница Тогда // обновим картинки и подсказки
		Если Объект.ТекущееСостояние = Справочники.ВидыОтметокВремени.Работа
			ИЛИ Объект.ТекущееСостояние = Справочники.ВидыОтметокВремени.РаботаПоУдаленномуПакету Тогда
			
			КартинкаКнопкиРабота  = БиблиотекаКартинок.ЗакрытьРаботы;
			ЗаголовокКнопкиРабота = "Закрыть пакет работ";
		Иначе
			
			КартинкаКнопкиРабота = БиблиотекаКартинок.НачатьРаботу;
			ЗаголовокКнопкиРабота = "Начать работы по пакету";
			
		КонецЕсли;
		
		Если Объект.ТекущееСостояние = Справочники.ВидыОтметокВремени.НерабочееВремя Тогда
			
			КартинкаКнопкиДень  = БиблиотекаКартинок.НачатьРабочийДень;
			ЗаголовокКнопкиДень = "Начать рабочий день";
			
		Иначе
			
			КартинкаКнопкиДень = БиблиотекаКартинок.ЗакончитьРабочийДень;
			ЗаголовокКнопкиДень = "Закончить рабочий день";
			
		КонецЕсли;
		
		Элементы.НачатьРаботу.Картинка  = КартинкаКнопкиРабота;
		Элементы.НачатьРаботу.Заголовок = ЗаголовокКнопкиРабота;
		Элементы.НачатьРаботуРасширеннаяПодсказка.Заголовок = ЗаголовокКнопкиРабота;
		
		Элементы.НачатьЗакончитьРабочийДень.Картинка  = КартинкаКнопкиДень;
		Элементы.НачатьЗакончитьРабочийДень.Заголовок = ЗаголовокКнопкиДень;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуБлокировки()
	
	// заполним показатели
	ОбновитьПоказателиСтраницыБлокировки();
	
	// заполним сотрудников
	ОбновитьСписокСотрудников();
	
	// заполним рабочие места
	ОбновитьСписокРабочихМест();
	
	// заполним выполнение плана
	Элементы.ДекорацияВыполнениеПланаПроцент.Заголовок = ПолучитьТекстВиджета(
		ПоказательВыдано, ПоказательЗаписано, "По плану выполнено"
	);
	
	Заголовок = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительнаяОперация(Активность)
	
	Элементы.ДлительныеОперации.ТекущаяСтраница =
		?(Активность, Элементы.ДлительнаяОперация, Элементы.СтраницаАвтоработы);
	
КонецПроцедуры

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_СТАРТА_ФОРМЫ

&НаСервере
Процедура СтартовоеЗаполнение()
	ПоследнийИнтервал = РегистрыСведений.ФактическоеВремя.
		ПоследнийИнтервалИсполнителя(Объект.АвторизованныйСотрудник, Истина);
	
	ОбновитьСостояниеСотрудника(
		последнийИнтервал.ЗаказНаряд,
		последнийИнтервал.Цех,
		последнийИнтервал.Исполнитель,
		последнийИнтервал.ПакетРабот,
		последнийИнтервал.Состояние,
		последнийИнтервал.Автомобиль
	);
КонецПроцедуры

&НаСервере
Процедура АктуальныеГрафикиРабот()
	СегодняРаботаютМассив = Новый Массив;
	
	// создадим отбор
	ВидыИнтервалов = Новый Массив;
	ВыборкаИнтервалов = Справочники.ВидыИнтервалов.Выбрать();
	Пока ВыборкаИнтервалов.Следующий() Цикл
		Если ВыборкаИнтервалов.ЭтоГруппа=Ложь Тогда
			Если ВыборкаИнтервалов.РабочийИнтервал Тогда
				ВидыИнтервалов.Добавить(ВыборкаИнтервалов.Ссылка);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	ВидыДней = Новый Массив;
	ВидыДней.Добавить(Перечисления.ВидДня.Рабочий);
	ВидыДней.Добавить(Перечисления.ВидДня.Предпраздничный);
	
	ВыборкаГрафиков = Справочники.ГрафикиРаботы.Выбрать();
	
	ВыходныеДни = Новый Структура;
	ВыходныеДни.Вставить("Суббота",     Ложь);
	ВыходныеДни.Вставить("Воскресенье", Ложь);
		
	Пока ВыборкаГрафиков.Следующий() Цикл
		ТаблицаГрафика = Справочники.ГрафикиРаботы.ПолучитьГрафик(
			ВыборкаГрафиков.Ссылка,
			НачалоДня(ТекущаяДатаСеанса()),
			КонецДня(ТекущаяДатаСеанса()),
			ВыходныеДни,
			ВидыИнтервалов,
			ВидыДней);
		
		Если ТаблицаГрафика.Количество() > 0 Тогда
			СегодняРаботаютМассив.Добавить(ВыборкаГрафиков.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	СегодняРаботают = Новый ФиксированныйМассив(СегодняРаботаютМассив);
КонецПроцедуры

#КонецОбласти

#Область РАБОТА_С_ПАКЕТАМИ_РАБОТ

&НаСервере
Функция НачатьРаботыПоПакетуНаСервере(Знач ПакетРабот, Исполнитель, ЗаказНаряд, Знач РабочееМесто = Неопределено)
	
	Если РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(ПакетРабот) Тогда
		ВыбранныеАвтоработы = Автоработы.Выгрузить(Автоработы.НайтиСтроки(Новый Структура("Пометка", Истина)));
		
		ПакетРабот =РаботаСПакетамиРабот.СформироватьПакетРаботИзАвторабот(
			ЗаказНаряд, ВыбранныеАвтоработы.ВыгрузитьКолонку("ИдентификаторРаботы"), Исполнитель
		);
	КонецЕсли;
	
	Если РабочееМесто = Неопределено Тогда // попытаемся найти рабочее место в планах
		РабочееМесто = ЗащищенныеФункцииАльфаАвтоУРВСервер.ЗапланированныйПост(ЗаказНаряд, ПакетРабот, Исполнитель);
		
		Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
			Возврат Новый Структура(
				"Успех,ОписаниеОшибки", Ложь, НСтр("ru = 'Не удалось подобрать рабочее место из данных планирования.'")
			);
		КонецЕсли;
	КонецЕсли;
	
	// закрываем старый интервал по данному сотруднику
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ЗакрытьСтарыйИнтервал(Исполнитель);
	
	// начанем новый интервал
	ЗащищенныеФункцииАльфаАвтоУРВСервер.НачатьНовыйИнтервал(
		Справочники.ВидыОтметокВремени.Работа,
		Исполнитель,
		ЗаказНаряд,
		ПакетРабот,
		РабочееМесто
	);
	
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ОбновитьИнформациюОПакете(ПакетРабот,,, Истина);
	
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ИзменитьСтатусПакетаРабот(ПакетРабот,
		Справочники.ВидыСостоянийПакетовРабот.ВРаботе);
	
	ОбновитьСостояниеСотрудника(
		ЗаказНаряд,
		РабочееМесто,
		Исполнитель,
		ПакетРабот,
		Справочники.ВидыОтметокВремени.Работа,
		ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль
	);
	
	ОбновитьЗаголовкиКнопок();
	
КонецФункции

&НаСервере
Функция ЗакрытьПакетРаботНаСервере(Знач ПакетРабот, Исполнитель)
	
	ДругиеИсполнители = Неопределено;
	
	Если ПоПокетуРаботаютДругиеИсполнители(ПакетРабот, Исполнитель, ДругиеИсполнители) Тогда
		
		ТекстСообщения = НСтр(
			"ru = 'Начните перерыв.
			|По пакету сейчас работают и другие сотрудники:
			|%1.
			|
			|Закрыть пакет сможет только последний заверщающий работу сотрудник.'"
		);
		
		Возврат Новый Структура(
			"Успех,ОписаниеОшибки",
			Ложь,
			СтрШаблон(ТекстСообщения, СтрСоединить(ДругиеИсполнители, ", "))
		);
		
	КонецЕсли;
	
	// закрываем старый интервал по данному сотруднику
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ЗакрытьСтарыйИнтервал(Исполнитель);
	
	// начанем новый интервал
	ЗащищенныеФункцииАльфаАвтоУРВСервер.НачатьНовыйИнтервал(Справочники.ВидыОтметокВремени.Простой,
													Исполнитель,
													Неопределено,
													Неопределено,
													Неопределено);
	
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ИзменитьСтатусПакетаРабот(ПакетРабот, Справочники.ВидыСостоянийПакетовРабот.Закрыт);
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ОбновитьИнформациюОПакете(ПакетРабот,,, Истина);
	
	ОбновитьСостояниеСотрудника(Неопределено, Неопределено, Исполнитель, "", Справочники.ВидыОтметокВремени.Простой, Неопределено);
	ОбновитьЗаголовкиКнопок();
	
КонецФункции

&НаСервере
Функция НачатьПерерывПоПакетуНаСервере(Состояние, ПакетРабот, Исполнитель, ЗаказНаряд)
	
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ЗакрытьСтарыйИнтервал(Исполнитель);
	ЗащищенныеФункцииАльфаАвтоУРВСервер.НачатьНовыйИнтервал(Состояние, Исполнитель, ЗаказНаряд, ПакетРабот, Неопределено);
	Если НЕ ПустаяСтрока(ПакетРабот) Тогда
		Если НЕ ПоПокетуРаботаютДругиеИсполнители(ПакетРабот, Исполнитель) Тогда
			ЗащищенныеФункцииАльфаАвтоУРВСервер.ИзменитьСтатусПакетаРабот(ПакетРабот, Справочники.ВидыСостоянийПакетовРабот.Ожидает);
		КонецЕсли;
		
		ЗащищенныеФункцииАльфаАвтоУРВСервер.ОбновитьИнформациюОПакете(ПакетРабот,,, Истина);
	КонецЕсли;
	
	ОбновитьСостояниеСотрудника(Неопределено, Неопределено, Исполнитель, ПакетРабот, Состояние, Неопределено);
	ОбновитьЗаголовкиКнопок();
	
КонецФункции

&НаСервере
Процедура НачатьРабочийДеньНаСервере()
	
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ЗакрытьСтарыйИнтервал(Объект.АвторизованныйСотрудник);
	
	// начанем новый интервал
	ЗащищенныеФункцииАльфаАвтоУРВСервер.НачатьНовыйИнтервал(Справочники.ВидыОтметокВремени.Простой,
													Объект.АвторизованныйСотрудник,
													Неопределено,
													Неопределено,
													Неопределено);
	
	ОбновитьСостояниеСотрудника(Неопределено, Неопределено, Объект.АвторизованныйСотрудник, Неопределено, Справочники.ВидыОтметокВремени.Простой, Неопределено);
	ОбновитьЗаголовкиКнопок();
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьРабочийДеньНаСервере()
	
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ЗакрытьСтарыйИнтервал(Объект.АвторизованныйСотрудник);
	
	// начанем новый интервал
	ЗащищенныеФункцииАльфаАвтоУРВСервер.НачатьНовыйИнтервал(
		Справочники.ВидыОтметокВремени.НерабочееВремя,
		Объект.АвторизованныйСотрудник,
		Неопределено,
		Неопределено,
		Неопределено
	);
	
	Если ЗначениеЗаполнено(Объект.ТекущийПакет) Тогда
		
		ЗащищенныеФункцииАльфаАвтоУРВСервер.ОбновитьИнформациюОПакете(Объект.ТекущийПакет,,, Истина);
		ЗащищенныеФункцииАльфаАвтоУРВСервер.ИзменитьСтатусПакетаРабот(Объект.ТекущийПакет,
			Справочники.ВидыСостоянийПакетовРабот.Ожидает);
		
	КонецЕсли;
	
	ОбновитьСостояниеСотрудника(
		Неопределено,
		Неопределено,
		Объект.АвторизованныйСотрудник,
		Неопределено,
		Справочники.ВидыОтметокВремени.НерабочееВремя,
		Неопределено
	);
	ОбновитьЗаголовкиКнопок();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

