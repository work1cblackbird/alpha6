Перем СоединениеHTTP;
Перем ЗаголовкиЗапроса;
Перем МетодыСервиса;
Перем HTTPЗапрос;

#Область ПрограммныйИнтерфейс

// Инициализировать http соединение
//
// Параметры:
//  Сервер               - Строка - Путь к серверу
//  Ресурс               - Строка - Путь на сервере
//  ЗащищенноеСоединение - Булево - Признак защищенного соединения
//
Процедура Инициализировать(Сервер, Ресурс, ЗащищенноеСоединение = Ложь) Экспорт
	
	Перем ЗащищенноеСоединениеOpenSSL;
	
	Если ЗащищенноеСоединение Тогда
		
		ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
		
	КонецЕсли;
	
	АдресСервера = Сервер;
	АдресРесурса = Ресурс;
	СоединениеHTTP = Новый HTTPСоединение(Сервер,,,,, 600, ЗащищенноеСоединениеOpenSSL);
	
КонецПроцедуры

// Добавляет заголовок http запроса
//
// Параметры:
//  Имя      - Строка - Ключ заголовка
//  Значение - Строка - Значение заголовка
//
Процедура УстановитьЗаголовок(Имя, Значение) Экспорт
	
	ЗаголовкиЗапроса.Вставить(Имя, Значение);
	
КонецПроцедуры

// Зачищает структуру заголовков http запроса
//
Процедура ОчиститьЗаголовки() Экспорт
	
	ЗаголовкиЗапроса = Новый Соответствие;
	
КонецПроцедуры

// Установить стандартные заголовки
//
Процедура УстановитьЗаголовкиПоУмолчанию() Экспорт
	
	ОчиститьЗаголовки();
	
	ЗаголовкиЗапроса.Вставить("Accept-Encoding","deflate");
	ЗаголовкиЗапроса.Вставить("Content-Type","application/soap+xml; charset=utf-8");
	ЗаголовкиЗапроса.Вставить("SOAPAction","""""");
	
КонецПроцедуры

// Формирование запроса и его выполнение.
//
// Параметры:
//  ИмяМетода - Строка    - Имя метода формирования запроса.
//  Параметры - Структура - Дополнительные параметры.
//  ПолезнаяНагрузка - Строка - Текст прикрепления файла.
//
// Возвращаемое значение:
//  Булево - Истина, если выполнен запрос.
//
Функция ВыполнитьЗапрос(ИмяМетода, Параметры, ПолезнаяНагрузка = Неопределено) Экспорт
	
	ОтветСервера = ""; ОтветСервераОбъект = Неопределено;
	
	ПодготовитьТекстЗапросаЗапрос(ИмяМетода, Параметры, ПолезнаяНагрузка);
	
	ПодготовитьHTTPЗапрос();
	
	Попытка
		HTTPОтвет = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		СообщениеОбОшибке = "";
		Причина = ИнформацияОбОшибке().Причина;
		Если Не Причина = Неопределено Тогда
			СообщениеОбОшибке = Причина.Описание;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
	ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветСервера);
	
	ОтветСервераОбъект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьТекстЗапросаЗапрос(ИмяМетода, Параметры, ПолезнаяНагрузка = Неопределено)
	
	Запись = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8",,Истина,Истина);
	Запись.УстановитьСтроку(ПараметрыЗаписиXML);
	
	Запись.ЗаписатьНачалоЭлемента("soapenv:Envelope");
	Запись.ЗаписатьСоответствиеПространстваИмен("soapenv", "http://schemas.xmlsoap.org/soap/envelope/");
	Запись.ЗаписатьСоответствиеПространстваИмен("ser"    , "http://serviceinterface_v1.b2b.audatex.com");
	
	// Создание заголовка SOAP конверта.
	Запись.ЗаписатьНачалоЭлемента("soapenv:Header");
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("soapenv:Body");
	
	Запись.ЗаписатьНачалоЭлемента(СтрШаблон("ser:%1", МетодыСервиса.Получить(ИмяМетода)));
	
	Для Каждого Параметр Из Параметры Цикл
		Запись.ЗаписатьНачалоЭлемента("ser:parameter");
		
		Запись.ЗаписатьНачалоЭлемента("ser:name");
		Запись.ЗаписатьТекст(Параметр.Ключ);
		Запись.ЗаписатьКонецЭлемента();
		
		Запись.ЗаписатьНачалоЭлемента("ser:value");
		Запись.ЗаписатьТекст(Параметр.Значение);
		Запись.ЗаписатьКонецЭлемента();
		
		// parameter
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Если ПолезнаяНагрузка <> Неопределено Тогда
		Запись.ЗаписатьНачалоЭлемента("ser:payload");
		Запись.ЗаписатьТекст(ПолезнаяНагрузка);
		Запись.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// метод
	Запись.ЗаписатьКонецЭлемента();
	// body
	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();
	
	ТекстЗапроса = Запись.Закрыть();
	
КонецПроцедуры

Процедура ПодготовитьHTTPЗапрос()
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Авто);
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	
	Для Каждого Заголовок Из ЗаголовкиЗапроса Цикл
		HTTPЗапрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

ЗаголовкиЗапроса = Новый Соответствие;
МетодыСервиса    = Новый Соответствие;
МетодыСервиса.Вставить("ping"        , "pingRequest");
МетодыСервиса.Вставить("getTaskList" , "getTaskListRequest");
МетодыСервиса.Вставить("getTask"     , "getTaskRequest");
МетодыСервиса.Вставить("closeTask"   , "closeTaskRequest");
МетодыСервиса.Вставить("transferTask", "transferTaskRequest");
МетодыСервиса.Вставить("createTask"  , "createTaskRequest");

МетодыСервиса.Вставить("addAttachmentsToTask", "addAttachmentsToTaskRequest");
