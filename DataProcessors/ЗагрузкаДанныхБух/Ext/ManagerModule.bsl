#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОтчет(ТабДок, Параметры) Экспорт
	
	МакетОтчет     = ПолучитьМакет("ОтчетЗагрузки");
	
	ОбластьЗаголовок = МакетОтчет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ВремяНачала     = Параметры.НачалоРаботы;
	ОбластьЗаголовок.Параметры.ВремяЗавершения = Параметры.окончаниеРаботы;
	ОбластьЗаголовок.Параметры.СтрокаЗагрузки  = Параметры.СтрокаЗагрузки;
	ОбластьШапкаТаблицы  = МакетОтчет.ПолучитьОбласть("ШапкаТаблицы");
	
	ОбластьНоваяСтрокаТаблицы = МакетОтчет.ПолучитьОбласть("СтрокаОбъекты|Отступ");
	ОбластьСтрокаТаблицыКод   = МакетОтчет.ПолучитьОбласть("СтрокаОбъекты|Код");
	ОбластьСтрокаТаблицы      = МакетОтчет.ПолучитьОбласть("СтрокаОбъекты|Информация");
	
	ОбластьНоваяСтрокаТаблицыСообщения = МакетОтчет.ПолучитьОбласть("СтрокаИнформация|Отступ");
	ОбластьСтрокаТаблицыСообщенияКод   = МакетОтчет.ПолучитьОбласть("СтрокаИнформация|Код");
	ОбластьСтрокаТаблицыСообщения      = МакетОтчет.ПолучитьОбласть("СтрокаИнформация|Информация");
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	Если Параметры.ТаблицаОтчета.Количество() > 0 Тогда
		Если Параметры.ВыводитьПолныйОтчетОЗагрузке Тогда
			ОбластьШапкаТаблицы.Параметры.ШапкаТаблицы = НСтр("ru = 'Сообщения загрузки'");
		Иначе
			ОбластьШапкаТаблицы.Параметры.ШапкаТаблицы = НСтр("ru = 'В ходе загрузки возникли исключения.'");
		КонецЕсли;		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
	КонецЕсли;	
	
	ЦветФона = Новый Цвет(255, 241, 216);
	Розовый = Истина;
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОтчета Цикл
		Если Розовый Тогда
			ЦветФона = Новый Цвет(255,255,255);
			Розовый = Ложь;
		Иначе
			ЦветФона = Новый Цвет(255, 241, 216);
			Розовый = Истина;
		КонецЕсли;			
		Если Параметры.ВыводитьПолныйОтчетОЗагрузке Тогда
			Код = Число(СтрокаТаблицы.Код);
			Если Код > 0 И Код < 100 Тогда
				ЦветТекста = WebЦвета.Черный;
			ИначеЕсли Код > 100 И Код < 200 Тогда
				ЦветТекста = Новый Цвет (100,0,0);
			ИначеЕсли Код > 200 И Код < 300 Тогда
				ЦветТекста = WebЦвета.Синий;
			ИначеЕсли Код > 300 Тогда
				ЦветТекста = WebЦвета.Красный;
			КонецЕсли;		
			ОбластьСтрокаТаблицы.Область().ЦветТекста = ЦветТекста;
			ОбластьСтрокаТаблицыСообщения.Область().ЦветТекста = ЦветТекста;			
			Если Код = 1 ИЛИ Код = 3 Тогда
				ОбластьСтрокаТаблицыСообщенияКод.Область().ЦветФона = WebЦвета.Зеленый;
			ИначеЕсли Код = 2 Тогда
				ОбластьСтрокаТаблицыСообщенияКод.Область().ЦветФона = WebЦвета.БледноКрасноФиолетовый;
			Иначе
				ОбластьСтрокаТаблицыСообщенияКод.Область().ЦветФона = WebЦвета.Белый;
			КонецЕсли;			
		Иначе
			ОбластьСтрокаТаблицы.Область().ЦветФона = ЦветФона;
			ОбластьСтрокаТаблицыСообщения.Область().ЦветФона = ЦветФона;			
		КонецЕсли;
		
		ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
		ОбластьСтрокаТаблицыКод.Параметры.Заполнить(СтрокаТаблицы);
		Сообщение = СтрокаТаблицы.Сообщение;		
		Если СтрокаТаблицы.ДопИнформация <> Неопределено И СтрокаТаблицы.ДопИнформация <> "" Тогда
			Сообщение = Сообщение + Символы.ПС + НСтр("ru = 'Доп информация:'") + " "+СтрокаТаблицы.ДопИнформация;
		КонецЕсли;		
		ОбластьСтрокаТаблицыСообщения.Параметры.Сообщение = Сообщение;
		ОбластьСтрокаТаблицы.Параметры.ПриемникДокумент = СтрокаТаблицы.ОбъектПриемник; 
		ТабДок.Вывести(ОбластьНоваяСтрокаТаблицы);
		ТабДок.Присоединить(ОбластьСтрокаТаблицыКод);
		ТабДок.Присоединить(ОбластьСтрокаТаблицы);
		ТабДок.Вывести(ОбластьНоваяСтрокаТаблицыСообщения);
		ТабДок.Присоединить(ОбластьСтрокаТаблицыСообщенияКод);
		ТабДок.Присоединить(ОбластьСтрокаТаблицыСообщения);
	КонецЦикла;
	
КонецПроцедуры

// Убирает из строки разделители и нечитаемые символы.
// :
//	Стр - строка для разбора
//	ЭтоОбъект - флаг того, что переменная не строкового типа, а объектного.
//
// Возвращает разобранную строку.
//
Функция РазобратьСтроку(Знач Стр, ЭтоОбъект = Ложь) Экспорт
	
	Стр = СокрЛП(Стр);
	
	Если ЭтоОбъект Тогда
		ЗнВозврата = СписокИзСтрокиСРазделителями(Стр);
		
	Иначе	
		ЗнВозврата = Новый СписокЗначений();
		Для к = 1 По СтрЧислоВхождений(Стр, "{") Цикл
			Поз = СтрНайти(Стр, "}");
			СтрОбработки = Лев(Стр, Поз - 1);
			
			ЗначенияСписка = СписокИзСтрокиСРазделителями(УбратьСимволы(СтрОбработки, "{}"""));
			ЗнВозврата.Добавить(ЗначенияСписка);
			
			Стр = Сред(Стр, Поз + 1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗнВозврата;
	
КонецФункции	//	РазобратьСтроку()

// Процедура удаляет из строки <Стр> символы,
// встретившиеся в переменной <УдаляемыеСимволы>.
Функция УбратьСимволы(Знач Стр, УдаляемыеСимволы)
	
	Для к = 1 По СтрДлина(УдаляемыеСимволы) Цикл
		Стр = СтрЗаменить(Стр, Сред(УдаляемыеСимволы, к, 1), "");
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции // УбратьСимволы()

// Функция возвращает список значений, полученный из строки с разделителями.
Функция СписокИзСтрокиСРазделителями(Знач Стр)
	
	ЗнВозврата = Новый СписокЗначений();
	Если СтрЧислоВхождений(Стр, ",") = 0 Тогда
		ЗнВозврата.Добавить(Стр);
		
	Иначе
		
		Стр = СтрЗаменить(Стр, "¤,¤", "¤_¤");
		
		Для к = 1 По СтрЧислоВхождений(Стр, ",") Цикл
			Поз = СтрНайти(Стр, ",");
			ЗнВозврата.Добавить(СтрЗаменить(Лев(Стр, Поз - 1), """", ""));
			
			Стр = Сред(Стр, Поз + 1);
		КонецЦикла;	
		
		ЗнВозврата.Добавить(СтрЗаменить(Стр, """", ""));
	КонецЕсли;
	
	Возврат ЗнВозврата;
	
КонецФункции	//	СписокИзСтрокиСРазделителями()

// Функция возвращает строку, в которой спецсимволы,
// заменены на используемые в ИБ-источнике символы.
//
// ====================================+
//         Порядок замены              |
//   спецсимвол  |    символ замены    |
// ==============+=====================|
//       ¤       |   двойная кавычка   |
// --------------+---------------------|
//       †       |      запятая        |
// --------------+---------------------|
//       ‡       |  разделитель строк  |
// ====================================+.
Функция ОчиститьСпецСимволы(Стр) Экспорт
	
	Если ТипЗнч(Стр) = Тип("Число") Тогда Возврат Стр; КонецЕсли;
	
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Стр, "¤", """"), "†", ","), "‡", Символы.ПС),"±",Символы.ВК);
	
КонецФункции	//	ОчиститьСпецСимволы()

// Функция проверяет dbf файл таблицы соответствия на корректность индексов,
// полей и принадлежности к данной информационной базе
// Возвращает: Ложь - Таблица соответствия некорректна
//           Истина - Все ОК.
Функция ПроверитьТаблицуСоответствия(
		ФайлыТС,
		СписокСообщений,
		БылоСозданиеНовогоПоля,
		Обработка,
		Параметры = Неопределено,
		ДанныеТС = Неопределено,
		УдалитьВременныйФайл = Истина) Экспорт
	ДобавитьПоле = Ложь;
	
	Если Обработка.ЗагрузкаБезФайлаТС Тогда
		// В данном режиме это не требуется
		Возврат Истина;
	КонецЕсли;
	
	// Определим существование таблицы соответствия и при необходимости создадим ее.
	ИмяФайлаВрем = "";
	ИмяФайлаИндексовВрем = "";
	ФайлТС = ФайлыТС[0];
	ИмяФайлаИндексовТС = ФайлыТС[1];
	ПолучитьФайлыТС(ФайлТС, ИмяФайлаИндексовТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
	
	БД_ТС = Новый XBase;
	ФайлБД_ТС = Новый Файл(ИмяФайлаВрем);
	ФайлИндексовБД_ТС = Новый Файл(ИмяФайлаИндексовВрем);
	Если ФайлБД_ТС.Существует() Тогда
		Если НЕ БД_ТС.Открыта() Тогда			
			
			БД_ТС.индексы.Добавить("IndSource", "TRIM(ID_Source)", Истина);
			БД_ТС.индексы.Добавить("IndReceive", "TRIM(ID_Receive)", Ложь);
			
			БД_ТС.ОткрытьФайл(ИмяФайлаВрем,, Ложь);
			Если НЕ БД_ТС.СоздатьИндексныйФайл(ИмяФайлаИндексовВрем) Тогда
				НовоеСообщение = СписокСообщений.Добавить();
				НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! Не удачная попытка создания индексного файла таблицы соответствия:'" 
														+ " " + ИмяФайлаИндексовТС);
				НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
				ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;		
		
	Иначе
		БД_ТС.поля.Добавить("ID_Source",  "S", 50); //УИД Рарус
		БД_ТС.поля.Добавить("ID_Receive", "S", 50); //УИД Бухгалтерия
		БД_ТС.поля.Добавить("Manager",    "S", 100);//Менеджер Бухгалтерия
		БД_ТС.поля.Добавить("DateAct",    "D", 8);
		БД_ТС.поля.Добавить("File",       "S", 20);
		БД_ТС.поля.Добавить("Update",  	  "N", 2);
		БД_ТС.поля.Добавить("Direct",  	  "N", 2); //1 - Рарус -> Бухгалтерия, 2 - Бухгалтерия -> Рарус
		БД_ТС.поля.Добавить("ManagerRar",  	  "S", 100);  //Менеджер Рарус				
		
		Попытка
			БД_ТС.СоздатьФайл(ИмяФайлаВрем, ИмяФайлаИндексовВрем);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = СтрШаблон(
				НСтр("ru = 'ВНИМАНИЕ! Нет возможности открыть файл таблицы соответствия: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецПопытки;	
		
		БД_ТС.индексы.Добавить("IndSource", "ID_Source", Истина);
		БД_ТС.индексы.Добавить("IndReceive", "ID_Receive", Ложь);					
		Попытка
			БД_ТС.СоздатьИндексныйФайл(ИмяФайлаИндексовВрем);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = СтрШаблон(
				НСтр("ru = 'Внимание! Нет возможности создать индексный файл: %1 %2Возможно нет доступа к текущей папке.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				Символы.ПС);
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ БД_ТС.Открыта() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! Нет возможности открыть файл таблицы соответствия:'" + " " + ФайлТС);
		НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
		ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
		Возврат Ложь;
	Иначе
		// Проверим, подходит ли нам выбранный файл
		ТекПоле = БД_ТС.поля.Найти("ID_Source");
		Если ТекПоле = Неопределено Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'") + Символы.НПП + ФайлТС + Символы.ПС + НСтр("ru = 'не обнаружено поле <ID_Source>'");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		ИначеЕсли ТекПоле.Тип <> "S" ИЛИ ТекПоле.Длина <> 50 Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " "
												+ ФайлТС+"|тип или длина поля <ID_Source>, не соответствует требованиям");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецЕсли;
		
		ТекПоле = БД_ТС.поля.Найти("ID_Receive");
		Если ТекПоле = Неопределено Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " "+ ФайлТС
												+"|не обнаружено поле <ID_Receive>");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		ИначеЕсли ТекПоле.Тип <> "S" ИЛИ ТекПоле.Длина <> 50 Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " "+ ФайлТС
												+"|тип или длина поля <ID_Receive>, не соответствует требованиям");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецЕсли;
		
		ТекПоле = БД_ТС.поля.Найти("Manager");
		Если ТекПоле = Неопределено Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС
													+"|не обнаружено поле <Manager>");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		ИначеЕсли ТекПоле.Тип <> "S" ИЛИ ТекПоле.Длина <> 100 Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС
												+"|тип или длина поля <Manager>, не соответствует требованиям");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецЕсли;
		
		ТекПоле = БД_ТС.поля.Найти("DateAct");
		Если ТекПоле = Неопределено Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС
												+"|не обнаружено поле <DateAct>");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		ИначеЕсли ТекПоле.Тип <> "D" Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС
												+"|тип поля <DateAct>, не соответствует требованиям");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецЕсли;
		
		ТекПоле = БД_ТС.поля.Найти("File");
		Если ТекПоле = Неопределено Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС
												+"|не обнаружено поле <File>");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		ИначеЕсли ТекПоле.Тип <> "S" ИЛИ ТекПоле.Длина <> 20 Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС 
												+"|тип или длина поля <File>, не соответствует требованиям");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецЕсли;
		
		ТекПоле = БД_ТС.Поля.Найти("Update");
		Если ТекПоле = Неопределено Тогда
			ДобавитьПоле = Истина;
		КонецЕсли;					
		ТекПоле = БД_ТС.Поля.Найти("Direct");
		Если ТекПоле = Неопределено Тогда
			ДобавитьПоле = Истина;
		КонецЕсли;			
		ТекПоле = БД_ТС.Поля.Найти("ManagerRar");
		Если ТекПоле = Неопределено Тогда
			ДобавитьПоле = Истина;
		КонецЕсли;						
		
		Если Не ДобавитьПоле Тогда			
			ТекИндекс = БД_ТС.индексы.Найти("IndSource");
			Если ТекИндекс = Неопределено Тогда
				НовоеСообщение = СписокСообщений.Добавить();
				НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС
													+"|не обнаружен индекс <IndSource>");
				НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
				ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
				Возврат Ложь;
			ИначеЕсли (ТекИндекс.Выражение <> "TRIM(ID_Source)" И ТекИндекс.Выражение <> "ID_Source") ИЛИ НЕ ТекИндекс.Уникальность Тогда
				НовоеСообщение = СписокСообщений.Добавить();
				НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! В таблице соответствия:'" + " " + ФайлТС
													+"|свойства индекса <IndSource>, не соответствуют требованиям");
				НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
				ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	
	БД_ТС.Кодировка     = КодировкаXBase.ANSI;
	БД_ТС.ТекущийИндекс = БД_ТС.индексы.Найти("IndSource");
	
	// Проверяем на соответствие идентификатору конфигурации.
	ИдентификаторКонфигурации = ЗначениеВСтрокуВнутр(Метаданные);
	ИдентификаторКонфигурации = СокрЛП(УбратьСимволы(ИдентификаторКонфигурации, "{}#"","));
	
	Если БД_ТС.Найти("GUID_ReceiveRar", "=") Тогда
		Если СокрЛП(БД_ТС.ID_Receive) <> ИдентификаторКонфигурации Тогда
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = НСтр("ru = 'ВНИМАНИЕ! GUID текущей конфигурации не соответствует GUID-у конфигурации, используемому в таблице соответствия в качестве конфигурации приемника ТОР Раруса.'");
			НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
			ЗавершитьВременныеФайлы(ФайлТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		БД_ТС.Добавить();
		БД_ТС.ID_Source  = "GUID_ReceiveRar";
		БД_ТС.ID_Receive = ИдентификаторКонфигурации;
		БД_ТС.DateAct    = ТекущаяДатаСеанса();
		БД_ТС.Записать();
	КонецЕсли;	
	
	БД_ТС.ТекущийИндекс = БД_ТС.индексы.Найти("IndReceive");
	ПолеОбновления = БД_ТС.Поля.Найти("Update");
	Если ПолеОбновления = Неопределено Тогда
		Обработка.ЕстьПолеUpdate = Ложь;
	Иначе
		Обработка.ЕстьПолеUpdate = Истина;
	КонецЕсли;
	ПолеНаправления = БД_ТС.поля.Найти("Direct");
	Если ПолеНаправления = Неопределено Тогда
		Обработка.ЕстьПолеDirect = Ложь;
	Иначе
		Обработка.ЕстьПолеDirect = Истина;
	КонецЕсли;
	
	Если ДобавитьПоле Тогда
		ДобавитьКТаблицеСоответствийНовоеПоле(ФайлТС,СписокСообщений, Параметры);	
	КонецЕсли;		
	
	ЗавершитьВременныеФайлы(
		ФайлТС,
		ИмяФайлаВрем,
		ИмяФайлаИндексовВрем,
		Истина,
		БД_ТС, УдалитьВременныйФайл);
	
	Если ДанныеТС = Неопределено Тогда
		ДанныеТС = Новый Структура;
	КонецЕсли;
	
	ДанныеТС.Вставить("БД_ТС", БД_ТС);
	ДанныеТС.Вставить("ФайлТС", ИмяФайлаВрем);
	ДанныеТС.Вставить("ФайлИндексовТС", ИмяФайлаИндексовВрем);
	
	Возврат Истина;
	
КонецФункции	//	ПроверитьТаблицуСоответствия();

Процедура ПолучитьФайлыТС(ФайлТС, ИмяФайлаИндексовТС, ИмяФайлаВрем, ИмяФайлаИндексовВрем)
	
	// Определим существование таблицы соответствия и при необходимости создадим ее.
	Если ПустаяСтрока(ИмяФайлаИндексовТС) Тогда
		ИмяФайлаИндексовТС = СтрЗаменить(ФайлТС, ".dbf", ".cdx");
		Если ФайлТС = ИмяФайлаИндексовТС Тогда
			ИмяФайлаИндексовТС = СтрЗаменить(ФайлТС, ".DBF", ".CDX");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаВрем = ФайлТС;
	ИмяФайлаИндексовВрем = ИмяФайлаИндексовТС;
	
	// создадим новый файл для хранения ТС
	Если ЭтоАдресВременногоХранилища(ФайлТС) ИЛИ ПустаяСтрока(ФайлТС) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
		ИмяФайлаБезПути = ИмяВременногоФайла;
		Пока СтрНайти(ИмяФайлаБезПути, "\") <> 0 Цикл
			ИмяФайлаБезПути = Прав(ИмяФайлаБезПути, СтрДлина(ИмяФайлаБезПути) - СтрНайти(ИмяФайлаБезПути, "\"));
		КонецЦикла;
		Путь = СтрЗаменить(ИмяВременногоФайла, ИмяФайлаБезПути, "");
		БезРасширения = 4;
		ИмяФайлаСокр = Лев(ИмяФайлаБезПути, СтрДлина(ИмяФайлаБезПути) - БезРасширения);
		ДоступнаяДлинаИмени = 8;
		Если СтрДлина(ИмяФайлаСокр) > ДоступнаяДлинаИмени Тогда
			ИмяФайлаСокр = Лев(ИмяФайлаСокр, 8);
		КонецЕсли;
		ИмяФайлаВрем = Путь + ИмяФайлаСокр + ".dbf";
		
		Если НЕ ПустаяСтрока(ФайлТС) Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТС);
			ДвоичныеДанныеФайла.Записать(ИмяФайлаВрем);
		КонецЕсли;
		
		ИмяФайлаИндексовВрем = СтрЗаменить(ИмяФайлаВрем, ".dbf", ".cdx");
		
		Если ЗначениеЗаполнено(ИмяФайлаИндексовТС) Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ИмяФайлаИндексовТС);
			ДвоичныеДанныеФайла.Записать(ИмяФайлаИндексовВрем);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьВременныеФайлы(
		ФайлТС,
		ИмяФайлаВрем,
		ИмяФайлаИндексовВрем,
		ОбновитьФайл = Ложь,
		БД_ТС = Неопределено,
		УдалитьФайлы = Истина)
	
	// Очистим только если в качестве файла указан адрес временного хранилища.
	Если НЕ ЭтоАдресВременногоХранилища(ФайлТС) Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем временный файл
	Если УдалитьФайлы Тогда
		УдалитьВременныеФайлы(ИмяФайлаВрем);
		УдалитьВременныеФайлы(ИмяФайлаИндексовВрем);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныеФайлы(ИмяФайла) Экспорт
	
	// Удаляем временный файл
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось удалить временный файл.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Добавляет к таблице соответствий новые поля путем создания 
// новой дбф базы данных и копирования туда всей информации.
Процедура ДобавитьКТаблицеСоответствийНовоеПоле(СтарыйФайлТС, СписокСообщений, Параметры)
	
	Если Параметры.Обработка.БылоСозданиеНовогоПоля Тогда 
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Ошибка добавления нового поля.'");
		НовоеСообщение.Поле = "Объект.ИмяФайлаТС";
		Возврат;
	КонецЕсли;
	Параметры.Обработка.БылоСозданиеНовогоПоля = Истина;
	ФайлТС = Лев(СтарыйФайлТС,СтрДлина(СтарыйФайлТС)-4)+"_New.dbf";		
	
	УдалитьФайлы(ФайлТС);
	
	НоваяТС = Новый XBase;
	ФайлНовойТС = Новый Файл(ФайлТС);
	
	НоваяТС.поля.Добавить("ID_Source",  "S", 50);     // УИД Рарус
	НоваяТС.поля.Добавить("ID_Receive", "S", 50);     // УИД Бухгалтерия
	НоваяТС.поля.Добавить("Manager",    "S", 100);    // Менеджер Бухгалтерия
	НоваяТС.поля.Добавить("DateAct",    "D", 8);
	НоваяТС.поля.Добавить("File",       "S", 20);
	НоваяТС.поля.Добавить("Update",  	  "N", 2);		
	НоваяТС.поля.Добавить("Direct",  	  "N", 2);
	НоваяТС.поля.Добавить("ManagerRar",  	  "S", 100);  //Менеджер Рарус
	
	НоваяТС.СоздатьФайл(ФайлТС);
	
	Параметры.БД_ТС.Первая();
	ТекЗапись = 1;
	КоличествоЗаписей = Параметры.БД_ТС.КоличествоЗаписей();	
	
	Пока ТекЗапись <= КоличествоЗаписей Цикл
		
		Параметры.БД_ТС.Перейти(ТекЗапись);
		ТекЗапись = ТекЗапись + 1;
		
		НоваяТС.Добавить();
		НоваяТС.ID_Source  = Параметры.БД_ТС.ID_Source;
		НоваяТС.ID_Receive = Параметры.БД_ТС.ID_Receive;
		НоваяТС.Manager    = Параметры.БД_ТС.Manager;
		НоваяТС.DateAct    = Параметры.БД_ТС.DateAct;
		НоваяТС.File       = Параметры.БД_ТС.File;		
		Если Параметры.Обработка.ЕстьПолеUpdate Тогда
			НоваяТС.Update = Параметры.БД_ТС.Update;
		Иначе			
			// Если поле Update есть, но значение не задано, задаем его равным 1 - по умолчанию.
			НоваяТС.Update = 1;;
		КонецЕсли;		
		Если Параметры.Обработка.ЕстьПолеDirect Тогда
			НоваяТС.Direct     = Параметры.БД_ТС.Direct;
			НоваяТС.ManagerRar = Параметры.БД_ТС.ManagerRar;
		Иначе			
			// Если поле Update есть, но значение не задано, задаем его равным 1 - по умолчанию.
			НоваяТС.Direct = 1;        //1 - Рарус -> Бухгалтерия, 2 - Бухгалтерия -> Рарус
			НоваяТС.ManagerRar = "";
		КонецЕсли;		
		НоваяТС.Записать();
		
		Параметры.БД_ТС.Следующая();
	КонецЦикла;  	
	
	Параметры.БД_ТС.ЗакрытьФайл();
	НоваяТС.ЗакрытьФайл();
	
	КопироватьФайл(СтарыйФайлТС,СтарыйФайлТС+"old");
	УдалитьФайлы(СтарыйФайлТС);
	
	ИмяФайлаИндексовТС = СтрЗаменить(СтарыйФайлТС, ".dbf", ".cdx");	
	Если ИмяФайлаИндексовТС = СтарыйФайлТС Тогда
		ИмяФайлаИндексовТС = СтрЗаменить(СтарыйФайлТС, ".DBF", ".CDX");	
	КонецЕсли;	
	КопироватьФайл(ИмяФайлаИндексовТС,ИмяФайлаИндексовТС+"old");
	УдалитьФайлы(ИмяФайлаИндексовТС);
	
	НоваяТС.ЗакрытьФайл();
	КопироватьФайл(ФайлТС,СтарыйФайлТС);
	УдалитьФайлы(ФайлТС);
	
	ПроверитьТаблицуСоответствия(СтарыйФайлТС, СписокСообщений, Параметры.Обработка.БылоСозданиеНовогоПоля, Параметры.Обработка, Параметры);
	
КонецПроцедуры

Функция XBaseПоАдресуФайла(ФайлТС, ЭтоКлиент)
	
	// Определим существование таблицы соответствия и при необходимости создадим ее.	
	ИмяФайлаИндексовТС = СтрЗаменить(ФайлТС, ".dbf", ".cdx");
	
	Если ФайлТС = ИмяФайлаИндексовТС Тогда
		ИмяФайлаИндексовТС = СтрЗаменить(ФайлТС, ".DBF", ".CDX");
	КонецЕсли;
	
	Возврат Новый XBase(ФайлТС, ИмяФайлаИндексовТС, Ложь);
	
КонецФункции

Функция НеОбновлятьОбъект(Параметры, ИдентификаторОбъекта= "")
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		Возврат Параметры.Обработка.НеОбновлятьСуществующие;
	КонецЕсли;
	
	Если Параметры.Обработка.ЕстьПолеDirect Тогда
		НаправлениеСоответствия = Параметры.БД_ТС.Direct;
		// Если есть соответствие направление Рарус -> Бухгалтерия, то смотрим состояние галочки.
		Если НаправлениеСоответствия = 1 Тогда 
			Если Параметры.Обработка.НеОбновлятьРарусБухгалтерия Тогда 
				Возврат Истина; 
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;	
	Если Не Параметры.Обработка.ЕстьПолеUpdate Тогда Возврат Параметры.Обработка.НеОбновлятьСуществующие; КонецЕсли;
	Если ИдентификаторОбъекта <> "" Тогда
		СпособОбновления = ПолучитьСпособОбновления(ИдентификаторОбъекта, Параметры);
	Иначе
		СпособОбновления = Параметры.БД_ТС.Update;	
	КонецЕсли;	
	Если СпособОбновления = 1 Тогда //по умолчанию
		Возврат Параметры.Обработка.НеОбновлятьСуществующие; 
	ИначеЕсли СпособОбновления = 2 Тогда //не обновлять
		Возврат Истина;
	ИначеЕсли СпособОбновления = 3 Тогда //обновлять
		Возврат Ложь;
	Иначе
		Возврат Параметры.Обработка.НеОбновлятьСуществующие;
	КонецЕсли;
	
КонецФункции // НеОбновлятьОбъект()

Функция НеОбновлятьДокумент(ТекОбъект, Параметры)
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		Возврат Параметры.Обработка.НеОбновлятьСуществующие;
	КонецЕсли;
	
	Если Параметры.Обработка.ЕстьПолеDirect Тогда
		НаправлениеСоответствия = Параметры.БД_ТС.Direct;
		// Если есть соответствие направления Рарус -> Бухгалтерия, то смотрим состояние галочки.
		Если НаправлениеСоответствия = 1 Тогда //2 - это направление Бухгалтерия -> Рарус
			Если Параметры.Обработка.НеОбновлятьРарусБухгалтерияДокументы Тогда 
				ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета,"218",ПолучитьПредставление(Параметры.ВидОбъекта, Параметры),ТекОбъект,
											НСтр("ru = 'Загрузка документа произведена не будет.'"));
				ТекОбъект = "";
				Возврат Истина; 
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	Возврат Параметры.Обработка.НеОбновлятьСуществующие;
	
КонецФункции // НеОбновлятьДокумент()	

////////////////////////////////////////////////////////////////////////////////
// УТИЛИТЫ

// Возвращает значение перечисления СтавкиНДС по идентификатору элемента справочника-источника.
Функция ПолучитьСтавкуНДСПоИдентификатору(СтавкаНДС)
	
	Если СтавкаНДС = "Перечисление.СтавкиНДС.НДС20" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
	ИначеЕсли СтавкаНДС = "Перечисление.СтавкиНДС.НДС20_120" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная;
	ИначеЕсли СтавкаНДС = "Перечисление.СтавкиНДС.НДС10" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДС10;
	ИначеЕсли СтавкаНДС = "Перечисление.СтавкиНДС.НДС10_110" Тогда
		Возврат Справочники.СтавкиНДС.РасчетнаяСтавкаНДС10;
	ИначеЕсли СтавкаНДС = "Перечисление.СтавкиНДС.НДС18" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
	ИначеЕсли СтавкаНДС = "Перечисление.СтавкиНДС.НДС18_118" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная;
	ИначеЕсли СтавкаНДС = "Перечисление.СтавкиНДС.НДС0" Тогда
		Возврат Справочники.СтавкиНДС.БезНДС;
	ИначеЕсли СтавкаНДС = "Перечисление.СтавкиНДС.БезНДС" Тогда
		Возврат Справочники.СтавкиНДС.БезНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	//	ПолучитьСтавкуНДСПоИдентификатору()

// Возвращает значение перечисления СтавкиНДС по идентификатору номенклатуры.
Функция СтавкаНДСНоменклатурыПоИдентификатору(СтавкаНДС)
	
	Если СтавкаНДС = "Перечисление.ВидыСтавокНДС.Общая" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
	ИначеЕсли СтавкаНДС = "Перечисление.ВидыСтавокНДС.ОбщаяРасчетная" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная;
	ИначеЕсли СтавкаНДС = "Перечисление.ВидыСтавокНДС.Пониженная" Тогда
		Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДС10;
	ИначеЕсли СтавкаНДС = "Перечисление.ВидыСтавокНДС.ПониженнаяРасчетная" Тогда
		Возврат Справочники.СтавкиНДС.РасчетнаяСтавкаНДС10;
	ИначеЕсли СтавкаНДС = "Перечисление.ВидыСтавокНДС.Нулевая"
		ИЛИ СтавкаНДС = "Перечисление.ВидыСтавокНДС.БезНДС" Тогда
		Возврат Справочники.СтавкиНДС.БезНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	//	СтавкаНДСНоменклатурыПоИдентификатору()

Функция ПолучитьСчет(Счет)
	
	Если Счет <> Неопределено И Счет <> "" Тогда
		РеглСчет = ПланыСчетов.Регламентированный.НайтиПоКоду(Счет);
	КонецЕсли;	
	Возврат РеглСчет;
	
КонецФункции // ПолучитьСчет()

Функция НайтиСправочникПоНаименованию(Наименование,Менеджер,ЭтоГруппа, Родитель = Неопределено)
	Если Родитель = Неопределено Тогда
		Родитель = Справочники[Менеджер].ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	"+Менеджер+".Ссылка
	|ИЗ
	|	Справочник."+Менеджер+" КАК "+Менеджер+"
	|ГДЕ
	|	"+Менеджер+".ЭтоГруппа = &ЭтоГруппа
	|	И "+Менеджер+".Родитель = &Родитель
	|	И "+Менеджер+".Наименование = &Наименование";
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Справочники[Менеджер].ПустаяСсылка();
	КонецЕсли;
КонецФункции

// Функция возвращает способ обновления - значения дополнительного поля Update в таблицы соответствия.
// Если такого поля нет - возвращает 0. (1 - по умолчанию, 2 - не обновлять, 3 - обновлять).
Функция ПолучитьСпособОбновления(ИдентификаторОбъекта, Параметры)
	
	Если НЕ Параметры.Обработка.ЕстьПолеUpdate Тогда
		Возврат 0;
	КонецЕсли;	
	Если НЕ БД_ТСНайти(ИдентификаторОбъекта, "=", Параметры.БД_ТС) Тогда Возврат 0; КонецЕсли;
	СпособОбновления = Параметры.БД_ТС.Update;	           
	Возврат СпособОбновления;
	
КонецФункции

// Процедура помечает на удаление объекты, которые есть в соответствии, но уже не нужны.
// Эти документы были созданы на основе строк табличной части документа-источника.
// Параметры:
//	ИдентификаторОбъекта - Строка - идентификатор документа-источника;
//	КоличествоДокументов - Число  - количество документов созданных в этот раз;
//	ДокМенеджер - ДокументМенеджер.ПриходныйКассовыйОрдер, ДокументМенеджер.РасходныйКассовыйОрдер - ;
//	Параметры - Структура - .
//
Процедура ПометитьНаУдалениеДокументыСоответствия(ИдентификаторОбъекта,КоличествоДокументов, ДокМенеджер, Параметры)
	Если КоличествоДокументов > 1 Тогда
		ИдентификаторСтроки = ИдентификаторОбъекта;
		
		НайденОбъект = (Параметры.Обработка.ЗагрузкаБезФайлаТС
			И НайтиОбъектПриемника(ДокМенеджер, ИдентификаторСтроки) <> Неопределено)
			ИЛИ (НЕ Параметры.Обработка.ЗагрузкаБезФайлаТС И БД_ТСНайти(ИдентификаторСтроки, "=", Параметры.БД_ТС));
		
		Если НайденОбъект Тогда
			ТекОбъектДляУдаления = ДокМенеджер.ПустаяСсылка();
			Если ПолучитьОбъектПриемник(
					ДокМенеджер,
					ИдентификаторСтроки,
					ТекОбъектДляУдаления,
					Параметры.БД_ТС,
					Параметры.Обработка.ЭтоКлиент,,
					Параметры.Обработка.ЗагрузкаБезФайлаТС) Тогда
				// Отменим проведение, если документ был проведен ранее
				//@skip-check reading-attribute-from-database
				// В функции ПолучитьОбъектПриемник происходит подмена на объект
				Если ТекОбъектДляУдаления.Проведен Тогда
					//@skip-check unknown-method-property
					// В функции ПолучитьОбъектПриемник происходит подмена на объект
					ТекОбъектДляУдаления.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
				//@skip-check property-not-writable
				//@skip-check reading-attribute-from-database
				// В функции ПолучитьОбъектПриемник происходит подмена на объект
				ТекОбъектДляУдаления.ПометкаУдаления = Истина;
				//@skip-check unknown-method-property
				ТекОбъектДляУдаления.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Начало = ?(КоличествоДокументов = 1, 0, КоличествоДокументов);
	Для к = Начало По 50 Цикл
		ИдентификаторСтроки = ИдентификаторОбъекта + "-" + к;
		Если (НЕ Параметры.Обработка.ЗагрузкаБезФайлаТС
			И НЕ БД_ТСНайти(ИдентификаторСтроки, "=", Параметры.БД_ТС))
			ИЛИ (Параметры.Обработка.ЗагрузкаБезФайлаТС
			И НайтиОбъектПриемника(ДокМенеджер, ИдентификаторСтроки) = Неопределено) Тогда
			Прервать;
		КонецЕсли;
		
		ТекОбъектДляУдаления = ДокМенеджер.ПустаяСсылка();	
		Если ПолучитьОбъектПриемник(ДокМенеджер, ИдентификаторСтроки, ТекОбъектДляУдаления, Параметры.БД_ТС,
										Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС) Тогда
			// Отменим проведение, если документ был проведен ранее.
			//@skip-check reading-attribute-from-database
			// В функции ПолучитьОбъектПриемник происходит подмена на объект
			Если ТекОбъектДляУдаления.Проведен Тогда
				//@skip-check unknown-method-property
				ТекОбъектДляУдаления.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			//@skip-check property-not-writable
			//@skip-check reading-attribute-from-database
			ТекОбъектДляУдаления.ПометкаУдаления = Истина;
			//@skip-check unknown-method-property
			ТекОбъектДляУдаления.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ/УСТАНОВКИ РЕКВИЗИТОВ

// Производит поиск
Функция БД_ТСНайти(ИдентификаторОбъекта, РежимСравнения, БД_ТС)
	БД_ТС.ТекущийИндекс = БД_ТС.индексы.Найти("IndReceive");
	Возврат БД_ТС.Найти(ИдентификаторОбъекта, РежимСравнения);	
КонецФункции

// Функция возвращает объект-приемник по объекту-источнику.
Функция ПолучитьОбъектПриемник(
		Менеджер,
		ИдентификаторОбъекта,
		ОбъектПриемник,
		Знач БД_ТС,
		ЭтоКлиент,
		ТолькоСсылка = Ложь,
		ЗагрузкаБезФайлаТС = Ложь,
		ИдентификаторПриемник = "") Экспорт
	
	Если ЗагрузкаБезФайлаТС Тогда
		
		Если НЕ ПустаяСтрока(ИдентификаторПриемник) Тогда
			ОбъектПриемник = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ИдентификаторПриемник)));
			ОбъектПриемник = ОбъектПриемник.ПолучитьОбъект();
			
			Если ОбъектПриемник <> Неопределено Тогда
				Если ТолькоСсылка Тогда
					ОбъектПриемник = ОбъектПриемник.Ссылка;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИдентификаторОбъекта) Тогда
			ОбъектПриемник = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ИдентификаторОбъекта)));
			ОбъектПриемник = ОбъектПриемник.ПолучитьОбъект();
			
			Если ОбъектПриемник <> Неопределено Тогда
				Если ТолькоСсылка Тогда
					ОбъектПриемник = ОбъектПриемник.Ссылка;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ТипЗнч(БД_ТС) = Тип("XBase") Тогда
		БД_ТС = XBaseПоАдресуФайла(БД_ТС, ЭтоКлиент);
	КонецЕсли;
	
	Если НЕ БД_ТСНайти(ИдентификаторОбъекта, "=", БД_ТС) Тогда Возврат Ложь; КонецЕсли;
	Если ПустаяСтрока(БД_ТС.ID_Source) Тогда Возврат Ложь; КонецЕсли;
	
	Попытка УИД = Новый УникальныйИдентификатор(СокрЛП(БД_ТС.ID_Source));
	Исключение Возврат Ложь; КонецПопытки;	
	
	ОбъектПриемник = Менеджер.ПолучитьСсылку(УИД);
	Если ОбъектПриемник = Неопределено Тогда Возврат Ложь; КонецЕсли;
	
	Попытка Если ОбъектПриемник.Пустая() Тогда Возврат Ложь; КонецЕсли;
	Исключение Возврат Ложь; КонецПопытки;
	
	Если НЕ ТолькоСсылка Тогда
		
		ОбъектПриемник = ОбъектПриемник.ПолучитьОбъект();
	КонецЕсли;
	Возврат ?(ОбъектПриемник<>Неопределено,Истина,Ложь);	
КонецФункции  // ПолучитьСоответствие

// Процедура загружает данные из файла во временные объекты,
// содержащие структуру базы источника и загружаемые объекты.
Функция ОбновитьДанныеВыгрузки(
		Обработка,
		АдресФайлаТС,
		СписокСообщений,
		ФайлЗагрузки,
		КореньДокументы,
		КореньСправочники,
		ПрекратитьЗагрузку) Экспорт
	
	БД_ТС = XBaseПоАдресуФайла(АдресФайлаТС, Обработка.ЭтоКлиент);
	
	// ВремБДОбъектов - данные выгрузки (элементы справочников), индексированные.
	ВремБДОбъектов = Новый XBase;
	ВремБДОбъектов.Кодировка = КодировкаXBase.ANSI;
	ВремБДОбъектов.Поля.Добавить("Level",    "S", 1,   0);
	ВремБДОбъектов.Поля.Добавить("Type",     "S", 150, 0);
	ВремБДОбъектов.Поля.Добавить("ID",       "S", 36,  0);
	ВремБДОбъектов.Поля.Добавить("IDReceiver", "S", 36, 0);
	ВремБДОбъектов.Поля.Добавить("LineNum",  "N", 10,  0);
	ВремБДОбъектов.Поля.Добавить("ByPassed", "N", 2,   0);
	ВремБДОбъектов.Индексы.Добавить("IndID",    "TRIM(ID)",   Ложь);
	ВремБДОбъектов.Индексы.Добавить("IndLevel", "Level+Type", Ложь);
	
	ИмяФайлаВремБДОбъектов = КаталогВременныхФайлов() + "TempRef";
	Обработка.ИмяФайлаВремБДОбъектов = ИмяФайлаВремБДОбъектов;
	
	// ВремБДДоков - данные выгрузки (документы), индексированные.
	ВремБДДоков = Новый XBase;
	ВремБДДоков.Кодировка = КодировкаXBase.ANSI;
	ВремБДДоков.Поля.Добавить("Status",   "S", 1,   0);
	ВремБДДоков.Поля.Добавить("Time",     "S", 14,  0);
	ВремБДДоков.Поля.Добавить("Type",     "S", 150, 0);
	ВремБДДоков.Поля.Добавить("ID",       "S", 36,  0);
	ВремБДДоков.Поля.Добавить("IDReceiver", "S", 36,  0);
	ВремБДДоков.Поля.Добавить("LineNum",  "N", 10,  0);
	ВремБДДоков.Поля.Добавить("ByPassed", "N", 1,   0);
	ВремБДДоков.Индексы.Добавить("IndID",   "TRIM(ID)",  Ложь);
	ВремБДДоков.Индексы.Добавить("IndTime", "Time+Type", Ложь);
	
	ИмяФайлаВремБДДоков = КаталогВременныхФайлов() + "TempDoc";
	Обработка.ИмяФайлаВремБДДоков = ИмяФайлаВремБДДоков;
	
	// ВремБДТаблиц - номера строк файла выгрузки табличных частей объектов.
	ВремБДТаблиц = Новый XBase;
	ВремБДТаблиц.Кодировка = КодировкаXBase.ANSI;
	ВремБДТаблиц.Поля.Добавить("ID",      "S", 36,  0);      
	ВремБДТаблиц.Поля.Добавить("TabName", "S", 150, 0);      
	ВремБДТаблиц.Поля.Добавить("LineNum", "N", 10,  0);
	ВремБДТаблиц.Индексы.Добавить("IndTabName", "TRIM(ID)+TRIM(TabName)", Ложь);
	
	ИмяФайлаВремБДТаблиц = КаталогВременныхФайлов() + "TempTab";
	Обработка.ИмяФайлаВремБДТаблиц = ИмяФайлаВремБДТаблиц;
	
	// На всякий случай удалим временные файлы, если они еще остались.
	УдалитьФайлы(ИмяФайлаВремБДОбъектов + ".dbf");
	УдалитьФайлы(ИмяФайлаВремБДОбъектов + ".cdx");
	УдалитьФайлы(ИмяФайлаВремБДДоков    + ".dbf");
	УдалитьФайлы(ИмяФайлаВремБДДоков    + ".cdx");
	УдалитьФайлы(ИмяФайлаВремБДТаблиц   + ".dbf");
	УдалитьФайлы(ИмяФайлаВремБДТаблиц   + ".cdx");
	
	ВремБДОбъектов.СоздатьФайл(ИмяФайлаВремБДОбъектов, ИмяФайлаВремБДОбъектов); 
	ВремБДДоков.СоздатьФайл(ИмяФайлаВремБДДоков,       ИмяФайлаВремБДДоков+".cdx"); 
	ВремБДТаблиц.СоздатьФайл(ИмяФайлаВремБДТаблиц,     ИмяФайлаВремБДТаблиц); 
	
	ТаблицаОтчета = Новый ТаблицаЗначений;
	ТаблицаОтчета.Колонки.Добавить("ОбъектИсточник");
	ТаблицаОтчета.Колонки.Добавить("ОбъектПриемник");
	ТаблицаОтчета.Колонки.Добавить("Код");
	ТаблицаОтчета.Колонки.Добавить("Сообщение");
	ТаблицаОтчета.Колонки.Добавить("ДопИнформация");
	ТаблицаОтчета.Колонки.Добавить("Проведен");
	
	// Проверим, вдруг не смогли открыть dbf-ы?.
	Если НЕ ВремБДОбъектов.Открыта() ИЛИ НЕ ВремБДДоков.Открыта() ИЛИ НЕ ВремБДТаблиц.Открыта() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Нет возможности открыть временные таблицы.'");
		НовоеСообщение.Поле      = "Объект.ИмяФайлаТС";
		Возврат Новый Структура("ТаблицаОтчета, СписокСообщений", ТаблицаОтчета, СписокСообщений);
	КонецЕсли;	
	
	// Установим текущие индексы.
	ВремБДОбъектов.ТекущийИндекс = ВремБДОбъектов.индексы.Найти("IndLevel");
	ВремБДДоков.ТекущийИндекс    = ВремБДДоков.индексы.INDTIME;//ВремБДДоков.индексы.Найти("IndTime");
	ВремБДТаблиц.ТекущийИндекс   = ВремБДТаблиц.индексы.Найти("IndTabName");
	
	// тзМД - структура метаданных базы-источника.
	тзМД = Новый ТаблицаЗначений;
	тзМД.Колонки.Добавить("Метаданные"); // идентификатор объекта
	тзМД.Колонки.Добавить("Основные");   // основные характеристики объекта
	тзМД.Колонки.Добавить("Реквизиты");  // описание реквизитов элементов или шапки документов
	тзМД.Колонки.Добавить("Таблица");    // описание реквизитов табличной части документа
	
	тзОбъектов = Новый ТаблицаЗначений();
	тзОбъектов.Колонки.Добавить("Идентификатор");
	тзОбъектов.Колонки.Добавить("ИдентификаторОбъекта");
	тзОбъектов.Колонки.Добавить("Реквизиты");
	тзОбъектов.Колонки.Добавить("Строки");
	
	ТаблицаВосстановленныхСсылок	= Новый ТаблицаЗначений();
	ТаблицаВосстановленныхСсылок.Колонки.Добавить("СтароеЗначение");
	ТаблицаВосстановленныхСсылок.Колонки.Добавить("НовоеЗначение");
	
	ПромежуточнаяТаблицаОтчета = Новый ТаблицаЗначений;
	ПромежуточнаяТаблицаОтчета.Колонки.Добавить("ОбъектИсточник");
	ПромежуточнаяТаблицаОтчета.Колонки.Добавить("ОбъектПриемник");
	ПромежуточнаяТаблицаОтчета.Колонки.Добавить("Код");
	ПромежуточнаяТаблицаОтчета.Колонки.Добавить("Сообщение");
	ПромежуточнаяТаблицаОтчета.Колонки.Добавить("ДопИнформация");
	
	СоответствиеМенеджеров = ПолучитьСоответствиеМенеджеров();
	
	ОбъектОткрыт        = Ложь;
	ЭтоРеквизитыТаблицы = Ложь;
	ЭтоСтруктураОбъекта = Ложь;
	НаименованиеТаблицы = "";
	
	Пока ФайлЗагрузки.Прочитать() Цикл
		Если Строка(ФайлЗагрузки.ТипУзла) = "Конец элемента" Тогда
			Если ФайлЗагрузки.Имя = "Объект" Тогда
				ОбъектОткрыт         = Ложь;
				ЭтоРеквизитыТаблицы  = Ложь;
				ИдентификаторОбъекта = "";
				
			ИначеЕсли ФайлЗагрузки.Имя = "Структура" Тогда
				ЭтоСтруктураОбъекта = Ложь;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ФайлЗагрузки.Имя = "Справочники" ИЛИ ФайлЗагрузки.Имя = "Ссылки" Тогда
			ТипОбъекта = "Справочник";
			
			Продолжить;
			
		ИначеЕсли ФайлЗагрузки.Имя = "Документы" Тогда
			ТипОбъекта = "Документ";
			
			Продолжить;
		КонецЕсли;
		
		Если ФайлЗагрузки.КоличествоАтрибутов() = 0 И НЕ ЭтоСтруктураОбъекта И НЕ ОбъектОткрыт Тогда
			ВидОбъекта = ФайлЗагрузки.Имя;
			ЭтоРеквизитыТаблицы = Ложь;
			
			Продолжить;
		КонецЕсли;
		
		Если ФайлЗагрузки.Имя = "Таблица" И ФайлЗагрузки.КоличествоАтрибутов() = 1 Тогда
			НаименованиеТаблицы = "Таблица";
			Попытка
				НаименованиеТаблицы = ФайлЗагрузки.ПолучитьАтрибут("Наименование");
				ЭтоРеквизитыТаблицы = Истина;
			Исключение
				ЭтоРеквизитыТаблицы = Ложь;
			КонецПопытки;
			
			Продолжить;
		КонецЕсли;
		
		Если ФайлЗагрузки.Имя = "Структура" Тогда
			ЭтоСтруктураОбъекта = Истина;
			
			// Зальем структуру метаданных.
			СтрокаМД = тзМД.Добавить();
			СтрокаМД.Метаданные = ТипОбъекта + "." + ВидОбъекта;
			
			Системные = Новый Соответствие();
			Системные.Вставить("Идентификатор", СтрокаМД.Метаданные);
			Пока ФайлЗагрузки.ПрочитатьАтрибут() Цикл
				Системные.Вставить(ФайлЗагрузки.Имя, ФайлЗагрузки.Значение);
			КонецЦикла;
			
			СтрокаМД.Основные = Системные;
			
		ИначеЕсли ФайлЗагрузки.Имя = "Реквизит" Тогда
			// Описание реквизитов объекта базы-источника.
			СтрокаМД = тзМД.Найти(ТипОбъекта + "." + ВидОбъекта, "Метаданные");
			
			СтруктураРеквизита = Новый Соответствие();
			
			СтруктураРеквизитов = СтрокаМД[?(ЭтоРеквизитыТаблицы, "Таблица", "Реквизиты")];
			Если ТипЗнч(СтруктураРеквизитов) <> ТипЗнч(СтруктураРеквизита) Тогда
				СтруктураРеквизитов = Новый Соответствие();
			КонецЕсли;
			
			Пока ФайлЗагрузки.ПрочитатьАтрибут() Цикл
				СтруктураРеквизита.Вставить(?(ФайлЗагрузки.Имя = "Наименование", "Идентификатор", ФайлЗагрузки.Имя), 
																													ФайлЗагрузки.Значение);
			КонецЦикла;
			
			Если ЭтоРеквизитыТаблицы Тогда
				Если СтруктураРеквизитов.Получить(НаименованиеТаблицы) = Неопределено Тогда
					СтруктураРеквизитов.Вставить(НаименованиеТаблицы, Новый Соответствие());
				КонецЕсли;
				
				СтруктураРеквизитов[НаименованиеТаблицы].Вставить(ФайлЗагрузки.ПолучитьАтрибут("Наименование"), СтруктураРеквизита);
				СтрокаМД["Таблица"] = СтруктураРеквизитов;
				
			Иначе	
				СтруктураРеквизитов.Вставить(ФайлЗагрузки.ПолучитьАтрибут("Наименование"), СтруктураРеквизита);
				СтрокаМД["Реквизиты"] = СтруктураРеквизитов;
			КонецЕсли;
			
		ИначеЕсли ФайлЗагрузки.Имя = "Объект" Тогда
			ОбъектОткрыт = Истина;
			
			ЗначенияРеквизитов = Новый Соответствие();
			Пока ФайлЗагрузки.ПрочитатьАтрибут() Цикл
				ЗначенияРеквизитов.Вставить(ФайлЗагрузки.Имя, ФайлЗагрузки.Значение);
			КонецЦикла;
			
			СтрокаОбъекта = тзОбъектов.Добавить();
			СтрокаОбъекта.Идентификатор = ФайлЗагрузки.ПолучитьАтрибут("_1С_ИдентификаторБД");
			СтрокаОбъекта.ИдентификаторОбъекта = ФайлЗагрузки.ПолучитьАтрибут("_1С_ИдентификаторПриемника");
			СтрокаОбъекта.Реквизиты     = ЗначенияРеквизитов;
			
			// "Зальем" новый элемент-документ.
			Если ТипОбъекта = "Справочник" Тогда // Блок для справочника
				// Вводим новую строку в dbf файл.
				ВремБДОбъектов.Добавить();
				ВремБДОбъектов.Level = ФайлЗагрузки.ПолучитьАтрибут("_1С_Уровень"); // Уровень
				ВремБДОбъектов.Type  = ТипОбъекта + "." + ВидОбъекта;               // Тип объекта
				ВремБДОбъектов.ID    = СтрокаОбъекта.Идентификатор;                 // ИД объекта
				ВремБДОбъектов.IDReceiver = СтрокаОбъекта.ИдентификаторОбъекта;     // ИД объекта ИБ
				ВремБДОбъектов.Записать();
			Иначе // Блок для документа
				
				ДатаДокумента = ФайлЗагрузки.ПолучитьАтрибут("_1С_Дата");
				Если ПустаяСтрока(УбратьСимволы(ДатаДокумента, ".: ")) Тогда
					ДатаДокумента = Дата('00000000');
					
				ИначеЕсли НЕ Обработка.ФайлВыгрузкиИзV8 Тогда
					ДатаДокумента = СтрЗаменить(ДатаДокумента, ".", "");
					ДатаДокумента = ?(Число(Прав(ДатаДокумента, 2)) < 6, "20", "19") + Прав(ДатаДокумента, 2) + Сред(ДатаДокумента, 3, 2) + Лев(ДатаДокумента, 2);
					ДатаДокумента = ДатаДокумента + СтрЗаменить(ФайлЗагрузки.ПолучитьАтрибут("_1С_Время"), ":", "");
					
				Иначе
					ДатаСтрокой = Лев(ДатаДокумента, СтрНайти(ДатаДокумента, " ") - 1);
					Если СтрДлина(ДатаСтрокой) = 8 Тогда
						ГодСтрокой = Прав(ДатаСтрокой, 2);
						Если Число(ГодСтрокой) < 10 Тогда
							ГодСтрокой = "20" + ГодСтрокой;
						Иначе ГодСтрокой = "19" + ГодСтрокой;
						КонецЕсли;
						ДатаДокумента = Лев(ДатаДокумента, 6) + ГодСтрокой + Сред(ДатаДокумента, 9);
					КонецЕсли;
				КонецЕсли;
				
				ДатаДокумента = Формат(Дата(ДатаДокумента), "ДФ=yyyyMMddHHmmss");
				
				// Вводим новую строку в dbf файл.
				ВремБДДоков.Добавить();
				ВремБДДоков.Time = ДатаДокумента;                 // Дата и время документа
				ВремБДДоков.Type = ТипОбъекта + "." + ВидОбъекта; // Тип объекта
				ВремБДДоков.ID   = СтрокаОбъекта.Идентификатор;   // ИД объекта
				ВремБДДоков.IDReceiver = СтрокаОбъекта.ИдентификаторОбъекта; // ИД объекта ИБ
				Если ФайлЗагрузки.ПолучитьАтрибут("_1С_Уровень") = "1" Тогда  
					ВремБДДоков.Status = "1";
				Иначе
					ВремБДДоков.Status = "2";
				КонецЕсли;
				ВремБДДоков.Записать();
			КонецЕсли;
			
		ИначеЕсли ФайлЗагрузки.Имя = "Строка" Тогда
			ЗначенияРеквизитовСтроки = Новый Соответствие();
			Пока ФайлЗагрузки.ПрочитатьАтрибут() Цикл
				ЗначенияРеквизитовСтроки.Вставить(ФайлЗагрузки.Имя, ФайлЗагрузки.Значение);
			КонецЦикла;
			
			ЗначенияСтрок = СтрокаОбъекта.Строки;
			Если ТипЗнч(ЗначенияСтрок) <> Тип("Соответствие") Тогда
				ЗначенияСтрок = Новый Соответствие();
			КонецЕсли;
			Если ЗначенияСтрок.Получить(НаименованиеТаблицы) = Неопределено Тогда
				ЗначенияСтрок.Вставить(НаименованиеТаблицы, Новый СписокЗначений());
			КонецЕсли;
			
			ЗначенияСтрок[НаименованиеТаблицы].Добавить(ЗначенияРеквизитовСтроки);
			СтрокаОбъекта.Строки = ЗначенияСтрок;
		КонецЕсли;
	КонецЦикла;
	
	НомерЗаписиОбъекта	= 1;
	Параметры = Новый Структура();
	Параметры.Вставить("КореньДокументы",               КореньДокументы);
	Параметры.Вставить("КореньСправочники",             КореньСправочники);
	Параметры.Вставить("ВремБДДоков",                   ВремБДДоков);
	Параметры.Вставить("ВремБДОбъектов",                ВремБДОбъектов);
	Параметры.Вставить("ВремБДТаблиц",                  ВремБДТаблиц);
	Параметры.Вставить("ТаблицаВосстановленныхСсылок",  ТаблицаВосстановленныхСсылок);
	Параметры.Вставить("тзОбъектов",                    тзОбъектов);
	Параметры.Вставить("тзМД",                          тзМД);
	Параметры.Вставить("ПромежуточнаяТаблицаОтчета",    ПромежуточнаяТаблицаОтчета);
	Параметры.Вставить("СоответствиеМенеджеров",        СоответствиеМенеджеров);
	Параметры.Вставить("ПредТипОбъекта",                Неопределено);
	Параметры.Вставить("ДобавленаИнформацияОЗагрузке",  Ложь);
	Параметры.Вставить("НачатаЗагрузкаВыписки",         Ложь);
	Параметры.Вставить("ВидОбъекта",                    ВидОбъекта);
	Параметры.Вставить("ФайлЗагрузки",                  ФайлЗагрузки);
	Параметры.Вставить("СписокСообщений",               СписокСообщений);
	Параметры.Вставить("Обработка",                     Обработка);
	Параметры.Вставить("БД_ТС",                         БД_ТС);
		
	// Цикл на два временных файла со справочниками и документами.
	Для к = 1 По 2 Цикл СчСтрок = 1;
		Если ПрекратитьЗагрузку Тогда Прервать; КонецЕсли;
		
		// Переберем записи временной таблицы загрузки.
		Если к = 1 Тогда 
			// -ВремБДОбъектов.Первая();
			ВремБДОбъектов.Перейти(1);
		Иначе
			ВремБДДоков.Первая();
		КонецЕсли;
		
		ВКонце = ?(к = 1, НомерЗаписиОбъекта > ВремБДОбъектов.КоличествоЗаписей(), ВремБДДоков.ВКонце());
		Пока ВКонце = Ложь Цикл
			Если ПрекратитьЗагрузку Тогда Прервать; КонецЕсли;
			
			Если ВидОбъекта = "УведомлениеОбОстаткахПрослеживаемыхТоваров" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекЗапись = ?(к = 1, ВремБДОбъектов.НомерЗаписи(), ВремБДДоков.НомерЗаписи());
			
			// Если документы
			// Если в приоритетной очереди что-то есть то загружаем это
			// ИначеЕсли если уровень > 1, тогда продолжить.
			
			// Флаг перемещения записи в конец таблицы, в случае не полного соответствия процедуре загрузки.
			Параметры.Вставить("ПереместитьЗапись", Ложь);
			ПредставлениеОбъекта = "";
			
			Если к = 2 Тогда
				ПромежуточнаяТаблицаОтчета.Очистить();
			КонецЕсли;			
			
			ОбъектБД = ОбработатьСтроку(?(к = 1, ВремБДОбъектов, ВремБДДоков), ПредставлениеОбъекта, Параметры); // Обработаем строку 			
			
			// Если в процессе загрузки объекта произошло перепозиционирование,
			// то вернемся на обрабатываемую запись.
			НомерЗаписи = ?(к = 1, ВремБДОбъектов.НомерЗаписи(), ВремБДДоков.НомерЗаписи());
			Если ТекЗапись <> НомерЗаписи Тогда 
				Если к = 1 Тогда
					ВремБДОбъектов.Перейти(ТекЗапись); 
				Иначе
					ВремБДДоков.Перейти(ТекЗапись); 
				КонецЕсли;				
			КонецЕсли;
			
			Если ОбъектБД = Неопределено Тогда
				// Загрузка строки не удалась, проверим надо ли перемещать запись, для загрузки позже.
				Если Параметры.ПереместитьЗапись Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru='ПЕРЕМЕЩЕНИЕ ЗАПИСИ'"));
					// Перемещаем запись для возврата к ней потом, когда будут загружены "ключевые" объекты данной строки.
					Если к = 1 Тогда 
						Если ВремБДОбъектов.ByPassed < 10 Тогда
							ВремБДОбъектов.Скопировать();
							Если к = 1 Тогда
								ВремБДОбъектов.Level = Число(ВремБДОбъектов.Level) + 1;
								
							Иначе 
								ВремБДОбъектов1 = ?(ВремБДОбъектов.ByPassed = 1, "99999999999998", "99999999999999");	
								ВремБДОбъектов.Time = ?(ВремБДОбъектов.ByPassed = 0, "99999999999997", ВремБДОбъектов1);
							КонецЕсли;
							ВремБДОбъектов.ByPassed = ВремБДОбъектов.ByPassed + 1;
							ВремБДОбъектов.Записать();
							
							// Возвращаемся к позиции обрабатываемой записи.
							ВремБДОбъектов.Перейти(ТекЗапись);
							ВремБДОбъектов.Удалить();
							
						Иначе
							НовыйСообщение = СписокСообщений.Добавить();
							НовыйСообщение.Сообщение = НСтр("ru = 'Внимание! Нет возможности загрузить объект:'") + " " 
															+ ВремБДОбъектов.Type + "." + ВремБДОбъектов.ID + " - " + ПредставлениеОбъекта;
							ДополнительныеПараметры = Новый Структура;
							ДополнительныеПараметры.Вставить("Код",            "301");
							ДополнительныеПараметры.Вставить("ОбъектИсточник", ВремБДОбъектов.Type+"."+ВремБДОбъектов.ID+" - "+ПредставлениеОбъекта);
							ДополнительныеПараметры.Вставить("Сообщение",      НСтр("ru = 'Нет возможности загрузить объект'"));
							ДобавитьВТаблицуОтчета(ПромежуточнаяТаблицаОтчета, ТаблицаОтчета, ДополнительныеПараметры);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли НЕ ПустаяСтрока(ПредставлениеОбъекта) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru='НЕУДАЧНАЯ ЗАГРУЗКА ОБЪЕКТА: %1'"),ПредставлениеОбъекта)
					);
				КонецЕсли;
				
			Иначе // Посчитаем кол-во загруженных объектов
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='ОБЪЕКТ ЗАГРУЖЕН'"));
				// Если выводить полный отчет, то добавляем сообщение о загрузке.
				Если к = 2 И Обработка.ВыводитьПолныйОтчетОЗагрузке Тогда
					ДобавитьИнформациюОЗагрузке(ОбъектБД, Параметры);
				КонецЕсли;
				
				Параметры.Обработка.ЗагруженоСпр = Параметры.Обработка.ЗагруженоСпр + ?(к = 1, 1, 0);
				Параметры.Обработка.ЗагруженоДок = Параметры.Обработка.ЗагруженоДок + ?(к = 2, 1, 0);
			КонецЕсли;
			
			Если к = 2 Тогда
				// Если были ошибки, которые добавлены во временную таблицу, здесь они перенесутся в таблицу отчета.
				ДобавитьВТаблицуОтчета(ПромежуточнаяТаблицаОтчета, ТаблицаОтчета);
			КонецЕсли;
			
			КонецОбъектов = Ложь;
			Если к = 1 Тогда
				НомерЗаписиОбъекта = НомерЗаписиОбъекта + 1;
				Если НомерЗаписиОбъекта > ВремБДОбъектов.КоличествоЗаписей() Тогда
					КонецОбъектов = истина;
				Иначе
					ВремБДОбъектов.Перейти(НомерЗаписиОбъекта);
				КонецЕсли;
				// -ВремБДОбъектов.Следующая();
			Иначе
				ВремБДДоков.Следующая();
			КонецЕсли;	
			
			СчСтрок = СчСтрок + 1;
			
			ВКонце = ?(к = 1, КонецОбъектов, ВремБДДоков.ВКонце());
		КонецЦикла;
	КонецЦикла;
	
	ВремБДОбъектов.ЗакрытьФайл();
	ВремБДДоков.ЗакрытьФайл();
	ВремБДТаблиц.ЗакрытьФайл();
	
	Попытка 
		тзОбъектов.Очистить();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка очистки ""тзОбъектов""'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Результат = Новый Структура();
	Результат.Вставить("ТаблицаОтчета",              ТаблицаОтчета);
	Результат.Вставить("СписокСообщений",            СписокСообщений);
	Результат.Вставить("ПромежуточнаяТаблицаОтчета", ПромежуточнаяТаблицаОтчета);
	Результат.Вставить("ПрекратитьЗагрузку",         ПрекратитьЗагрузку);
	Результат.Вставить("Параметры",                  Параметры);
	
	Возврат Результат;
	
КонецФункции  // ОбновитьДанныеВыгрузки

// Получение имен менеджеров соответвия БП и АА
//
Функция ПолучитьСоответствиеМенеджеров()
	
	СоответствиеМенеджеров = Новый Соответствие;
	СоответствиеМенеджеров.Вставить("АвансовыйОтчет",				"АвансовыйОтчет");
	СоответствиеМенеджеров.Вставить("ВводНачальныхОстатков",		"ВводОстатковТоваров");
	СоответствиеМенеджеров.Вставить("ВозвратТоваровОтПокупателя",	"ВозвратОтПокупателя");
	СоответствиеМенеджеров.Вставить("ВозвратТоваровПоставщику",		"ВозвратПоставщику");
	СоответствиеМенеджеров.Вставить("ПеремещениеТоваров",			"ПеремещениеТоваров");
	СоответствиеМенеджеров.Вставить("ПлатежноеПоручениеВходящее",	"Выписка");
	СоответствиеМенеджеров.Вставить("ПлатежноеПоручениеИсходящее",	"Выписка");
	СоответствиеМенеджеров.Вставить("ПоступлениеТоваровУслуг",		"ПоступлениеТоваров");
	СоответствиеМенеджеров.Вставить("ПриходныйКассовыйОрдер",		"ПриходныйКассовыйОрдер");
	СоответствиеМенеджеров.Вставить("РасходныйКассовыйОрдер",		"РасходныйКассовыйОрдер");
	СоответствиеМенеджеров.Вставить("РеализацияТоваровУслуг",		"АвансовыйОтчет");
	СоответствиеМенеджеров.Вставить("АвансовыйОтчет",				"РеализацияТоваров");
	СоответствиеМенеджеров.Вставить("СписаниеТоваров",				"СписаниеТоваров");
	СоответствиеМенеджеров.Вставить("КлассификаторСтранМира",		"СтраныМира"); //evstta: изменилось наименование справочника
	СоответствиеМенеджеров.Вставить("Валюты",						"Валюты");
	СоответствиеМенеджеров.Вставить("Организации",					"Организации");
	СоответствиеМенеджеров.Вставить("ПодразделенияКомпании",		"ПодразделенияКомпании");
	СоответствиеМенеджеров.Вставить("Пользователи",					"Пользователи");
	СоответствиеМенеджеров.Вставить("Контрагенты",					"Контрагенты");
	СоответствиеМенеджеров.Вставить("ДоговорыКонтрагентов",			"ДоговорыВзаиморасчетов");
	СоответствиеМенеджеров.Вставить("БанковскиеСчета",				"БанковскиеСчета");
	СоответствиеМенеджеров.Вставить("ТипыЦенНоменклатуры",			"ТипыЦен");
	СоответствиеМенеджеров.Вставить("СтатьиДДС",					"СтатьиДДС");
	СоответствиеМенеджеров.Вставить("ТипыНоменклатуры",				"ТипыНоменклатуры");
	СоответствиеМенеджеров.Вставить("КлассификаторЕдиницИзмерения",	"КлассификаторЕдиницИзмерения");
	СоответствиеМенеджеров.Вставить("КлассификаторСтранМира",		"КлассификаторСтранМира");
	СоответствиеМенеджеров.Вставить("НомераГТД",					"ГТД");
	СоответствиеМенеджеров.Вставить("ДоговорКонтрагента",			"ДоговорыВзаиморасчетов");
	СоответствиеМенеджеров.Вставить("СтатьиДвиженияДенежныхСредств",	"СтатьиДДС");
	СоответствиеМенеджеров.Вставить("Номенклатура",					"Номенклатура");
	СоответствиеМенеджеров.Вставить("Банки",						"КлассификаторБанков");
	СоответствиеМенеджеров.Вставить("КлассификаторБанков",			"КлассификаторБанков");
	СоответствиеМенеджеров.Вставить("ВидыКонтактнойИнформации",		"ВидыКонтактнойИнформации");
	СоответствиеМенеджеров.Вставить("Патенты",						"Патенты");
	
	Возврат СоответствиеМенеджеров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ/УСТАНОВКИ РЕКВИЗИТОВ

// Функция возвращает значение реквизита по имени.
//
// :
//   ИмяРекв - имя получаемого реквизита
//   ТипОбъекта - тип + вид объекта, для которого необходимо получить значение реквизита
//   Объект - идентификатор объекта, по которому необходимо получить значение реквизита.
Функция ПолучитьЗначениеРеквизита(ИмяРекв, Параметры, ТипОбъекта="", Объект="")
	
	Если Параметры.Свойство("ТекРеквизиты") Тогда
		ЗначенияРекв = Параметры.ТекРеквизиты;
		Если НЕ ПустаяСтрока(ТипОбъекта) Тогда
			Если Объект = "" Тогда Возврат Неопределено; КонецЕсли;
			СтрокаФайла = Истина;
			ПолученныйОбъект = ПолучитьОбъект(Объект, Параметры, ТипОбъекта, СтрокаФайла);
			
			Если НЕ ПустаяСтрока(СтрокаФайла) Тогда // и ПолученныйОбъект <> Неопределено Тогда
				Если Параметры.Обработка.XMLФорматВыгрузки Тогда
					ЗначенияРекв = ПолучитьСписокРеквизитов(Объект, Параметры, ПолучитьСтруктуру(ТипОбъекта, Параметры.тзМД));
				Иначе	
					ЗначенияРекв = ПолучитьСписокРеквизитов(СтрокаФайла, Параметры, ПолучитьСтруктуру(ТипОбъекта, Параметры.тзМД));
				КонецЕсли;
				
			Иначе Возврат Неопределено;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат ЗначенияРекв[ИмяРекв];
	КонецЕсли;
	
КонецФункции  // ПолучитьЗначениеРеквизита

// Процедура осуществляет запись объекта в таблицу соответствия.
Процедура УстановитьСоответствиеДляВыписки(ИдПП, ИдВып, ОбъектБД, Параметры)
	Перем НовыйНомерСтроки;
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		// Нет смысла соответствие формировать
		Возврат;
	КонецЕсли;
	
	Если ОбъектБД = неопределено ИЛИ ОбъектБД.Ссылка.Пустая() Тогда Возврат; КонецЕсли;
	НоваяСтрока = Ложь;	
	Если НЕ ЗначениеЗаполнено(ИдВып) Тогда Возврат; КонецЕсли;
	ИдентификаторОбъекта = ИдПП;
	УИД = ИдВып;	
	// Поищем в таблице	
	Если НЕ БД_ТСНайти(ИдентификаторОбъекта, "=", Параметры.БД_ТС) Тогда
		// Если соответствия еще нет, то установим его.
		Если НЕ ПроверитьНаУникальность(УИД, НовыйНомерСтроки, Параметры) Тогда 
			Возврат;
		КонецЕсли;	
		Если НовыйНомерСтроки = "" Тогда
			Параметры.БД_ТС.Добавить();
			Параметры.БД_ТС.ID_Receive = ИдентификаторОбъекта;
			НоваяСтрока = Истина;
		Иначе
			Параметры.БД_ТС.Перейти(НовыйНомерСтроки);
			Параметры.БД_ТС.ID_Receive = ИдентификаторОбъекта;
		КонецЕсли;		
	Иначе
		Если НЕ ПроверитьНаУникальность(Параметры.БД_ТС.ID_Source,НовыйНомерСтроки,Параметры,Параметры.БД_ТС.НомерЗаписи()) Тогда 
			Возврат;
		КонецЕсли;
		// Если у нас есть соответствие.
	КонецЕсли;
	
	// Представление объекта во внутреннем формате.
	Параметры.БД_ТС.ID_Source = УИД;
	Параметры.БД_ТС.ManagerRar    = "Выписка";
	Параметры.БД_ТС.Direct = 2;
	
	// Если поле Update есть, но значение не задано, задаем его равным 1 - по умолчанию.
	Если Параметры.Обработка.ЕстьПолеUpdate Тогда
		Если НоваяСтрока ИЛИ Параметры.БД_ТС.Update = 0 Тогда
			Параметры.БД_ТС.Update = 1;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.БД_ТС.Записать();
	
КонецПроцедуры

// Процедура устанавливает реквизит.
Процедура УстановитьРеквизит(ТекОбъект, ИмяРекв, ЗначениеРекв)
	
	Попытка
		ТекОбъект[ИмяРекв] = ЗначениеРекв;
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецПроцедуры

// Функция возвращает объект БД, если он был уже загружен,
// если такой объект еще не был обработан, вернет Неопределено.
Функция ПолучитьОбъект(ИдентификаторОбъекта, Параметры, ТипОбъекта="", СтрокаФайла=Ложь)
	
	Если ТипЗнч(ИдентификаторОбъекта)<>Тип("Строка") Тогда
		// Это значит в этот параметр передали не идентификатор объекта, а сам объект
		// (такое случается при свертке ТЧ).
		Возврат ИдентификаторОбъекта;
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат Неопределено; КонецЕсли;
	
	Если СтрДлина(ИдентификаторОбъекта) > 36 Тогда
		ТипОбъекта = Лев(ИдентификаторОбъекта, СтрДлина(ИдентификаторОбъекта) - 36);
	КонецЕсли;
	
	Если СтрокаФайла Тогда
		тзПоиска       = ?(СтрНайти(ТипОбъекта, "Справочник") = 1, Параметры.ВремБДОбъектов, Параметры.ВремБДДоков);
		БылНомерЗаписи = тзПоиска.НомерЗаписи();
		
		тзПоиска.ТекущийИндекс = тзПоиска.Индексы.Найти("IndID");
		Если тзПоиска.Найти(ИдентификаторОбъекта, "=") Тогда
			ТипОбъекта = СокрЛП(тзПоиска.Type);
			СтрокаФайла = ?(Параметры.Обработка.XMLФорматВыгрузки, ТипОбъекта, тзПоиска.LineNum);
		КонецЕсли;
		
		тзПоиска.ТекущийИндекс = тзПоиска.Индексы.Найти(?(СтрНайти(ТипОбъекта, "Справочник") = 1, "IndLevel", "IndTime"));
		Если БылНомерЗаписи > 0 Тогда тзПоиска.Перейти(БылНомерЗаписи); КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		
		УИД = Новый УникальныйИдентификатор(ИдентификаторОбъекта);
		
		Если Найти(ТипОбъекта, "Справочник") = 1 Тогда
			ИмяСправочника = СтрЗаменить(ТипОбъекта, "Справочник.", "");
			ИмяМенеджера = Параметры.СоответствиеМенеджеров[ИмяСправочника];
			Менеджер = Справочники[ИмяМенеджера];
		Иначе
			ИмяДокумента = СтрЗаменить(ТипОбъекта, "Документ.", "");
			ИмяМенеджера = Параметры.СоответствиеМенеджеров[ИмяДокумента];
			Менеджер = Документы[ИмяМенеджера];
		КонецЕсли;
		
		ОбъектСсылка = Менеджер.ПолучитьСсылку(УИД);
		
		Если ОбъектСсылка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			Если ОбъектСсылка.Пустая() Тогда
				Возврат Неопределено;
			КонецЕсли;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		// Проверим на "битую" ссылку
		Попытка
			Если ОбъектСсылка.ПолучитьОбъект() = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат ОбъектСсылка;
	
	ИначеЕсли БД_ТСНайти(ИдентификаторОбъекта, "=", Параметры.БД_ТС) Тогда
		ИмяМенеджера = СокрЛП(Параметры.БД_ТС.ManagerRar);
		Если ПустаяСтрока(ИмяМенеджера) Тогда
			ИмяМенеджера = СокрЛП(Параметры.БД_ТС.Manager);
			Если НЕ ПустаяСтрока(ИмяМенеджера) Тогда
				ИмяМенеджера = Параметры.СоответствиеМенеджеров[ИмяМенеджера];
				Если ИмяМенеджера = Неопределено Тогда ИмяМенеджера = ""; КонецЕсли;
			КонецЕсли;
		КонецЕсли;				
		Если НЕ ПустаяСтрока(ИмяМенеджера) Тогда
			Попытка УИД = Новый УникальныйИдентификатор(СокрЛП(Параметры.БД_ТС.ID_Source));
			Исключение Возврат Неопределено; КонецПопытки;
			
			Если СтрНайти(ТипОбъекта, "Справочник") = 1 Тогда
				// evstta: из-за различий в наименованиях справочников в ТП3
				Если Параметры.СоответствиеМенеджеров[ИмяМенеджера] = Неопределено Тогда
					Менеджер = Справочники[ИмяМенеджера];
				Иначе
					Менеджер = Справочники[Параметры.СоответствиеМенеджеров[ИмяМенеджера]];
				КонецЕсли;
				
			Иначе
				Если Параметры.СоответствиеМенеджеров[ИмяМенеджера] = Неопределено Тогда
					Менеджер = Документы[ИмяМенеджера];
				Иначе
					Менеджер = Документы[Параметры.СоответствиеМенеджеров[ИмяМенеджера]];
				КонецЕсли;
			КонецЕсли;
			
			ОбъектСсылка = Менеджер.ПолучитьСсылку(УИД);
			Если ОбъектСсылка = Неопределено Тогда Возврат Неопределено; КонецЕсли;
			
			Попытка Если ОбъектСсылка.Пустая() Тогда Возврат Неопределено; КонецЕсли;
			Исключение Возврат Неопределено; КонецПопытки;
			
			// Проверим на "битую" ссылку.
			Попытка Если ОбъектСсылка.ПолучитьОбъект() = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
		Исключение Возврат Неопределено; КонецПопытки;
		
		Возврат ОбъектСсылка;
	КонецЕсли;
КонецЕсли;

Возврат Неопределено;

КонецФункции  // ПолучитьОбъект

// Функция возвращает соответствие для выписки.
Функция ПолучитьСоответствиеДляВыписки(
		ИдентификаторОбъекта,
		ОбъектПриемник,
		Параметры,
		ИдентификаторВыписки = 0,
		ИзмененныйИдентификатор = 0,
		ИдентификаторПриемника = "")
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		
		НайденоВП = Найти(ИдентификаторПриемника,"-ВП");
		НайденоИП = Найти(ИдентификаторПриемника,"-ИП");
		
		Если НайденоВП > 0 Тогда
			Идентификатор = Лев(ИдентификаторПриемника, НайденоВП - 1);
		ИначеЕсли НайденоИП > 0 Тогда
			Идентификатор = Лев(ИдентификаторПриемника, НайденоИП - 1);
		Иначе
			// Такого быть не должно
			Идентификатор = ИдентификаторПриемника;
		КонецЕсли;
		ИдентификаторВыписки = Идентификатор;
		
		ДокументПриемник = НайтиОбъектПриемника(Документы.Выписка, ИдентификаторОбъекта, Идентификатор);
		Если ДокументПриемник = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОбъектПриемник = ДокументПриемник.ПолучитьОбъект();
		
		Возврат ?(ОбъектПриемник<>Неопределено,Истина,Ложь);
		
	ИначеЕсли НЕ БД_ТСНайти(ИдентификаторОбъекта, "=", Параметры.БД_ТС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.БД_ТС.ID_Source) Тогда Возврат Ложь; КонецЕсли;
	ИзмененныйИдентификатор = СокрЛП(Параметры.БД_ТС.ID_Source);
	НайденоВП = СтрНайти(ИзмененныйИдентификатор,"-ВП");
	НайденоИП = СтрНайти(ИзмененныйИдентификатор,"-ИП");
	Если НайденоВП > 0 Тогда
		Идентификатор = Лев(ИзмененныйИдентификатор,НайденоВП-1);
	ИначеЕсли НайденоИП > 0 Тогда
		Идентификатор = Лев(ИзмененныйИдентификатор,НайденоИП-1);
	Иначе
		// Такого быть не должно
		Идентификатор = ИзмененныйИдентификатор;
	КонецЕсли;
	ИдентификаторВыписки = Идентификатор;
	
	Попытка 
		УИД = Новый УникальныйИдентификатор(СокрЛП(Идентификатор));
	Исключение 
		Возврат Ложь; 
	КонецПопытки;	
	
	Менеджер = Документы.Выписка;
	ОбъектПриемник = Менеджер.ПолучитьСсылку(УИД);
	Если ОбъектПриемник = Неопределено Тогда Возврат Ложь; КонецЕсли;
	
	Попытка 
		Если ОбъектПриемник.Пустая() Тогда 
			Возврат Ложь; 
		КонецЕсли;
	Исключение 
		Возврат Ложь; 
	КонецПопытки;
	
	ОбъектПриемник = ОбъектПриемник.ПолучитьОбъект();
	Возврат ?(ОбъектПриемник <> Неопределено, Истина, Ложь);	
КонецФункции  // ПолучитьСоответствие

// Приводит значение к нужному типу
// Параметры:
//	ТекЗначение - переменная для приведения
//	НужныйТип - тип приведения
// Возвращает Истина или Ложь в зависимости от успеха приведения.
Функция ПривестиКТипу(ТекЗначение, НужныйТип, Обработка)

ЗнВозврата = ТекЗначение;

Если НужныйТип = "Число" Тогда
	Попытка 
		ЗнВозврата = Число(ТекЗначение);
	Исключение 
		ЗнВозврата = 0; 
	КонецПопытки;
	
ИначеЕсли НужныйТип = "Строка" Тогда
	ЗнВозврата = ОчиститьСпецСимволы(ТекЗначение);
	
ИначеЕсли НужныйТип = "Дата" Тогда
	Если ПустаяСтрока(СтрЗаменить(СтрЗаменить(ТекЗначение, ".", ""), """", "")) Тогда
		ЗнВозврата = Дата('00000000');
		
	ИначеЕсли Обработка.ФайлВыгрузкиИзV8 Тогда
		ЗнВозврата = Дата(ТекЗначение);
		
	Иначе
		ЗнВозврата = СтрЗаменить(ЗнВозврата, ".", "");
		ЗнВозврата = ?(Число(Прав(ЗнВозврата, 2)) < 6, "20", "19") + Прав(ЗнВозврата, 2) + Сред(ЗнВозврата, 3, 2) 
						+ Лев(ЗнВозврата, 2);
		ЗнВозврата = Дата(ЗнВозврата + "000000");
	КонецЕсли;
	
ИначеЕсли НужныйТип = "Булево" Тогда
	Если НРег(ТекЗначение) = "истина" 
		ИЛИ НРег(ТекЗначение) = "да" 
		ИЛИ НРег(ТекЗначение) = "ложь" 
		ИЛИ НРег(ТекЗначение) = "нет" Тогда
		
		ЗнВозврата = ?(НРег(ТекЗначение) = "истина" ИЛИ НРег(ТекЗначение) = "да", Истина, Ложь);
		
	Иначе
		Попытка ЗнВозврата = Число(ТекЗначение);
		Исключение ЗнВозврата = 0; КонецПопытки;
		
		Если ЗнВозврата = 1 Тогда 
			ЗнВозврата = Истина;
		Иначе 
			ЗнВозврата = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецЕсли;

Возврат ЗнВозврата;

КонецФункции	//	ПривестиКТипу()

// Функция возвращает приведенное к требуемому типу <НужныйТип>,
// строковое значение <ТекЗначение>.
Функция ПреобразоватьЗначение(ТекЗначение, НужныйТип, Периодический, Параметры)

	ЗнВозврата = ТекЗначение;
	
	Если Периодический Тогда
		Периодика = Новый Соответствие();
		
		Если Параметры.Обработка.XMLФорматВыгрузки Тогда
			Если ТипЗнч(ТекЗначение) = Тип("Соответствие") Тогда
				Для Каждого ТекЗн Из ТекЗначение Цикл
					Периодика.Вставить(ТекЗн.Ключ, ПривестиКТипу(ТекЗн.Значение, НужныйТип, Параметры.Обработка));
				КонецЦикла;
			КонецЕсли;
			
		Иначе	
			
			спПериодика = СписокИзСтрокиСРазделителями(СтрЗаменить(СтрЗаменить(ТекЗначение, "¤", """"), "_", ","));
			Для r = 0 По спПериодика.Количество() - 1 Цикл
				ЗнСписка = СтрЗаменить(спПериодика.Получить(r).Значение, """", "");
				
				Поз = СтрНайти(ЗнСписка, "|");
				Если Поз > 0 Тогда
					Периодика.Вставить(ПривестиКТипу(Сред(ЗнСписка, Поз + 1), "Дата", Параметры.Обработка), 
											ПривестиКТипу(Лев(ЗнСписка, Поз - 1), НужныйТип, Параметры.Обработка));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗнВозврата = Периодика;
		
	Иначе
		ЗнВозврата = ПривестиКТипу(ТекЗначение, НужныйТип, Параметры.Обработка);
	КонецЕсли;
	
	Возврат ЗнВозврата;

КонецФункции	//	ПреобразоватьЗначение()

// Функция возвращает структуру реквизитов
// объекта метаданных базы источника.
Функция ПолучитьСтруктуру(ТипОбъекта, тзМД)

	СтруктураОбъекта = Новый ТаблицаЗначений();
	СтруктураОбъекта.Колонки.Добавить("Идентификатор");
	СтруктураОбъекта.Колонки.Добавить("Значение");
	
	// Найдем по идентификатору объекта строку с реквизитами.
	СтрокаМД = тзМД.Найти(ТипОбъекта, "Метаданные");
	Если СтрокаМД  = Неопределено Тогда 
		Возврат СтруктураОбъекта; 
	КонецЕсли;
	
	ТекСтрока = СтруктураОбъекта.Добавить();
	ТекСтрока.Идентификатор = "Системные";
	ТекСтрока.Значение      = СтрокаМД.Основные;
	
	Попытка
		// Пройдемся по реквизитам.
		Для Каждого ТекРекв Из СтрокаМД.Реквизиты Цикл
			ТекСтрока = СтруктураОбъекта.Добавить();
			Попытка 
				ТекСтрока.Идентификатор = ТекРекв.Идентификатор;
			Исключение 
				ТекСтрока.Идентификатор = ТекРекв.Ключ;
			КонецПопытки;
			
			ТекСтрока.Значение = ТекРекв.Значение;
		КонецЦикла;
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка в реквизитах'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Попытка
		// Пройдемся по реквизитам табличной части.
		Для Каждого ТекРекв Из СтрокаМД.Таблица Цикл
			ТекСтрока = СтруктураОбъекта.Добавить();
			ТекСтрока.Идентификатор = ТекРекв.Ключ;
			ТекСтрока.Значение      = ТекРекв.Значение;
		КонецЦикла;
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка в реквизитах ТЧ'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Возврат СтруктураОбъекта;

КонецФункции  // ПолучитьСтруктуру()

// Возвращает список реквизитов.
//
Функция ПолучитьСписокРеквизитов(ТипИлиПозиция, Параметры, СтруктураОбъекта=Неопределено, НаименованиеТаблицы="")
	
	Если СтруктураОбъекта = Неопределено Тогда СтруктураОбъекта = Параметры.ТекСтруктура; КонецЕсли;
	
	ТипВидОбъекта = СтруктураОбъекта[0].Значение["Идентификатор"];
	
	ЗначенияРеквизитов = Новый Соответствие();
	Если Параметры.Обработка.XMLФорматВыгрузки Тогда
		СтрокаОбъекта = Параметры.тзОбъектов.Найти(ТипИлиПозиция, "Идентификатор");
		Если СтрокаОбъекта = Неопределено Тогда
			ЗначенияРекв = Новый Соответствие();
		Иначе ЗначенияРекв = СтрокаОбъекта.Реквизиты;
		КонецЕсли;
		
		Для Каждого ТекРекв Из ЗначенияРекв Цикл
			Если ТекРекв.Ключ = "_1С_Уровень" Тогда
				ЗначенияРеквизитов.Вставить(ТекРекв.Ключ, ПривестиКТипу(ТекРекв.Значение, "Число", Параметры.Обработка));
				
			ИначеЕсли ТекРекв.Ключ = "_1С_ЭтоГруппа" ИЛИ ТекРекв.Ключ = "_1С_Проведен" Тогда
				
				ЗначенияРеквизитов.Вставить(ТекРекв.Ключ, ПривестиКТипу(ТекРекв.Значение, "Булево", Параметры.Обработка));
				
			ИначеЕсли ТекРекв.Ключ = "_1С_ИдентификаторБД"
				ИЛИ ТекРекв.Ключ = "_1С_Владелец"
				ИЛИ ТекРекв.Ключ = "_1С_Родитель"
				ИЛИ ТекРекв.Ключ = "_1С_Код"
				ИЛИ ТекРекв.Ключ = "_1С_Номер"
				ИЛИ ТекРекв.Ключ = "_1С_Время"
				ИЛИ ТекРекв.Ключ = "_1С_ИдентификаторПриемника"
				ИЛИ ТекРекв.Ключ = "_1С_НаименованиеПредопределённого"
				ИЛИ ТекРекв.Ключ = "_1С_Статус"Тогда
				
				ЗначенияРеквизитов.Вставить(ТекРекв.Ключ, ТекРекв.Значение);
				
			ИначеЕсли ТекРекв.Ключ = "_1С_Наименование" Тогда
				ЗначенияРеквизитов.Вставить(ТекРекв.Ключ, ОчиститьСпецСимволы(ТекРекв.Значение));
				
				
			ИначеЕсли ТекРекв.Ключ = "_1С_Дата" Тогда
				ЗначенияРеквизитов.Вставить(ТекРекв.Ключ, ПривестиКТипу(ТекРекв.Значение, "Дата", Параметры.Обработка));
				
			Иначе
				
				ОписаниеРекв = СтруктураОбъекта.Найти(ТекРекв.Ключ, "Идентификатор").Значение;
				
				// Проверим, является ли реквизит периодическим?
				Если СтрНайти(ТипВидОбъекта, "Справочник.") > 0 И НЕ Параметры.Обработка.ФайлВыгрузкиИзV8 Тогда
					Периодический = ПривестиКТипу(ОписаниеРекв["Периодический"], "Булево", Параметры.Обработка);
				Иначе Периодический = Ложь;
				КонецЕсли;
				
				ЗначенияРеквизитов.Вставить(ТекРекв.Ключ, ПреобразоватьЗначение(ТекРекв.Значение, ОписаниеРекв["Тип"], 
													Периодический, Параметры));
			КонецЕсли;
		КонецЦикла;
		
		Возврат ЗначенияРеквизитов;
		
	Иначе
		СтрРекв = СокрЛП(Параметры.ФайлЗагрузки.ПолучитьСтроку(ТипИлиПозиция));
		ЗначенияРекв = РазобратьСтроку(УбратьСимволы(СтрРекв, "{}"), Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеТаблицы) Тогда
		СчРекв = 1;
		
		Для в = 0 По ЗначенияРекв.Количество() - 1 Цикл
			ЗначениеРекв = ЗначенияРекв.Получить(в);
			
			Если СтрНайти(ТипВидОбъекта, "Справочник.") > 0 Тогда
				Если      в = 0 Тогда ЗначенияРеквизитов.Вставить("_1С_Уровень",         ПривестиКТипу(ЗначениеРекв.Значение, 
																		"Число", Параметры.Обработка));
				ИначеЕсли в = 1 Тогда ЗначенияРеквизитов.Вставить("_1С_ИдентификаторБД", ЗначениеРекв.Значение);
				ИначеЕсли в = 2 Тогда ЗначенияРеквизитов.Вставить("_1С_Владелец",        ЗначениеРекв.Значение);
				ИначеЕсли в = 3 Тогда ЗначенияРеквизитов.Вставить("_1С_Родитель",        ЗначениеРекв.Значение);
				ИначеЕсли в = 4 Тогда ЗначенияРеквизитов.Вставить("_1С_ЭтоГруппа",       ПривестиКТипу(ЗначениеРекв.Значение, 
																		"Булево", Параметры.Обработка));
				ИначеЕсли в = 5 Тогда ЗначенияРеквизитов.Вставить("_1С_Код",             ЗначениеРекв.Значение);
				ИначеЕсли в = 6 Тогда ЗначенияРеквизитов.Вставить("_1С_Наименование",    ОчиститьСпецСимволы(ЗначениеРекв.Значение));
				Иначе
					
					ТекРекв = СтруктураОбъекта[СчРекв].Значение;
					
					// Проверим, является ли реквизит периодическим?
					Периодический = ?(НЕ Параметры.Обработка.ФайлВыгрузкиИзV8, ПривестиКТипу(ТекРекв["Периодический"], 
																									"Булево", Параметры.Обработка), Ложь);
					
					ЗначенияРеквизитов.Вставить(ТекРекв["Идентификатор"], ПреобразоватьЗначение(ЗначениеРекв.Значение, ТекРекв["Тип"], 
																		Периодический, Параметры));
					
					СчРекв = СчРекв + 1;
				КонецЕсли;
				
			Иначе
				Если      в = 0 Тогда ЗначенияРеквизитов.Вставить("_1С_Уровень",         ПривестиКТипу(ЗначениеРекв.Значение, 
																						 "Число", Параметры.Обработка));
				ИначеЕсли в = 1 Тогда ЗначенияРеквизитов.Вставить("_1С_ИдентификаторБД", ЗначениеРекв.Значение);
				ИначеЕсли в = 2 Тогда ЗначенияРеквизитов.Вставить("_1С_Номер",           ЗначениеРекв.Значение);
				ИначеЕсли в = 3 Тогда ЗначенияРеквизитов.Вставить("_1С_Дата",            ПривестиКТипу(ЗначениеРекв.Значение, 
																						 "Дата", Параметры.Обработка));
				ИначеЕсли в = 4 
					И НЕ  Параметры.Обработка.ФайлВыгрузкиИзV8 Тогда ЗначенияРеквизитов.Вставить("_1С_Время", ЗначениеРекв.Значение);
				ИначеЕсли (в = 5 И НЕ Параметры.Обработка.ФайлВыгрузкиИзV8) 
					ИЛИ (в = 4 И Параметры.Обработка.ФайлВыгрузкиИзV8) Тогда 
					
					ЗначенияРеквизитов.Вставить("_1С_Проведен", ПривестиКТипу(ЗначениеРекв.Значение, "Булево", Параметры.Обработка));
				Иначе
					
					ТекРекв = СтруктураОбъекта[СчРекв].Значение;
					
					ЗначенияРеквизитов.Вставить(ТекРекв["Идентификатор"], ПривестиКТипу(ЗначениеРекв.Значение, ТекРекв["Тип"], 
														Параметры.Обработка));
					
					СчРекв = СчРекв + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ОписаниеТаблицы = СтруктураОбъекта.Найти(НаименованиеТаблицы);
		Если ОписаниеТаблицы <> Неопределено Тогда
			Для в = 1 По ЗначенияРекв.Количество() - 1 Цикл
				ЗначениеРекв = ЗначенияРекв.Получить(в);
				
				ТекРекв = ОписаниеТаблицы.Значение[в - 1].Значение;
				
				ЗначенияРеквизитов.Вставить(ТекРекв["Идентификатор"], ПривестиКТипу(ЗначениеРекв.Значение, ТекРекв["Тип"], 
													Параметры.Обработка));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции  // ПолучитьСписокРеквизитов

// Возвращает табличную часть.
//
Функция ПолучитьТабличнуюЧасть(ИдентификаторОбъекта, Параметры, НаименованиеТаблицы = "", СтруктураОбъекта=Неопределено)
	
	Если НаименованиеТаблицы = "" Тогда НаименованиеТаблицы = "Таблица"; КонецЕсли;
	Если СтруктураОбъекта = Неопределено Тогда СтруктураОбъекта = Параметры.ТекСтруктура; КонецЕсли;
	
	ЗначенияТЧ = Новый СписокЗначений();
	
	Если Параметры.Обработка.XMLФорматВыгрузки Тогда
		СтрокаОбъекта = Параметры.тзОбъектов.Найти(ИдентификаторОбъекта, "Идентификатор");
		Если СтрокаОбъекта = Неопределено Тогда
			ЗначенияСтрок = Новый СписокЗначений();
		Иначе ЗначенияСтрок = СтрокаОбъекта.Строки;
		КонецЕсли;
		
		Если ТипЗнч(ЗначенияСтрок) <> Тип("Соответствие") Тогда
			ЗначенияСтрок = Новый Соответствие();
		КонецЕсли;	
		
		ТекТаблица = ЗначенияСтрок.Получить(НаименованиеТаблицы);
		Если ТекТаблица = Неопределено Тогда Возврат ЗначенияТЧ; КонецЕсли;
		
		Для ккк = 0 По ТекТаблица.Количество() - 1 Цикл
			РеквизитыСтроки = ТекТаблица.Получить(ккк).Значение;
			
			ТекСтрокаРекв = Новый Соответствие();
			Для Каждого ТекСтрока Из РеквизитыСтроки Цикл
				ОписаниеРеквизитов = СтруктураОбъекта.Найти(НаименованиеТаблицы, "Идентификатор").Значение;
				
				ОписаниеРеквизита = ОписаниеРеквизитов.Получить(ТекСтрока.Ключ);
				Если ОписаниеРеквизита = Неопределено Тогда Продолжить; КонецЕсли;
				
				ТекСтрокаРекв.Вставить(ТекСтрока.Ключ, ПривестиКТипу(ТекСтрока.Значение, ОписаниеРеквизита["Тип"], 
												Параметры.Обработка));
			КонецЦикла;
			
			ЗначенияТЧ.Добавить(ТекСтрокаРекв);
		КонецЦикла;
		
	Иначе
		
		Если Параметры.ВремБДТаблиц.Найти(ИдентификаторОбъекта + НаименованиеТаблицы, "=") Тогда
			НомерСтрокиФайла = Параметры.ВремБДТаблиц.LineNum;
			Для ккк = НомерСтрокиФайла По Параметры.ФайлЗагрузки.КоличествоСтрок() Цикл
				Стр = Параметры.ФайлЗагрузки.ПолучитьСтроку(ккк);
				Если ПустаяСтрока(Стр) ИЛИ НЕ ПустаяСтрока(Лев(Стр, 4)) Тогда Прервать; КонецЕсли;
				Если Параметры.Обработка.ФайлВыгрузкиИзV8 Тогда
					Если СтрНайти(Стр, "{""Таблица." + НаименованиеТаблицы + """,""") = 0 Тогда Прервать; КонецЕсли;
				КонецЕсли;
				
				ЗначенияСтроки = ПолучитьСписокРеквизитов(ккк, Параметры, СтруктураОбъекта, НаименованиеТаблицы);
				ЗначенияТЧ.Добавить(ЗначенияСтроки);
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ЗначенияТЧ;
	
КонецФункции  // ПолучитьТабличнуюЧасть

// Функция возвращает текст сообщения найденного по коду из макета "СообщенияЗагрузки".
Функция ПолучитьСообщениеПоКоду(Код)
	МакетСообщения = ПолучитьМакет("СообщенияЗагрузки");
	
	Сообщение = МакетСообщения.Область("Код_" + Код + "|Сообщение").Текст;
	Возврат Сообщение;
	
КонецФункции

Функция НайтиОбъектПриемника(ДокМенеджер, ИдентификаторОбъекта, ИдентификаторОбъектаПриемника = "") Экспорт
	
	Если НЕ ПустаяСтрока(ИдентификаторОбъектаПриемника) Тогда
		ОбъектПриемник = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ИдентификаторОбъектаПриемника)));
		Если ОбъектПриемник <> Неопределено И СтрНайти(Строка(ОбъектПриемник), НСтр("ru = '<Объект не найден>'")) = 0 Тогда
			Возврат ОбъектПриемник;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдентификаторОбъекта) Тогда
		ОбъектПриемник = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ИдентификаторОбъекта)));
		Если ОбъектПриемник <> Неопределено И СтрНайти(Строка(ОбъектПриемник), НСтр("ru = '<Объект не найден>'")) = 0 Тогда
			Возврат ОбъектПриемник;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает соответствие.
Процедура УстановитьСоответствие(ИдентификаторОбъекта, ОбъектБД, Параметры)
	// Процедура осуществляет запись объекта в таблицу соответствия.
	Перем НовыйНомерСтроки;
	НоваяСтрока = Ложь;
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		// Нет смысла соответствие формировать
		Возврат;
	КонецЕсли;
	
	Если ОбъектБД.Ссылка.Пустая() Тогда Возврат; КонецЕсли;
	УИД = ОбъектБД.Ссылка.УникальныйИдентификатор();
	// Поищем в таблице	
	Если НЕ БД_ТСНайти(ИдентификаторОбъекта, "=", Параметры.БД_ТС) Тогда
		// Если соответствия еще нет, то установим его.
		Если НЕ ПроверитьНаУникальность(УИД, НовыйНомерСтроки, Параметры) Тогда 
			ОбъектБД = Неопределено;
			Возврат;
		КонецЕсли;	
		Если НовыйНомерСтроки = "" Тогда
			Параметры.БД_ТС.Добавить();
			Параметры.БД_ТС.ID_Receive = ИдентификаторОбъекта;
			НоваяСтрока = Истина;
		Иначе
			Параметры.БД_ТС.Перейти(НовыйНомерСтроки);
			Параметры.БД_ТС.ID_Receive = ИдентификаторОбъекта;
		КонецЕсли;
	Иначе
		Если НЕ ПроверитьНаУникальность(Параметры.БД_ТС.ID_Source, НовыйНомерСтроки, Параметры, Параметры.БД_ТС.НомерЗаписи()) Тогда
			ОбъектБД = Неопределено;
			Возврат;
		КонецЕсли;
		// Если у нас есть соответствие.
	КонецЕсли;
	
	// Представление объекта во внутреннем формате.
	Параметры.БД_ТС.ID_Source  = УИД;
	Параметры.БД_ТС.Manager	   = Параметры.ВидОбъекта;
	Параметры.БД_ТС.ManagerRar = ОбъектБД.Ссылка.Метаданные().Имя;
	Параметры.БД_ТС.Direct     = 2;
	
	// Если поле Update есть, но значение не задано, задаем его равным 1 - по умолчанию.
	Если Параметры.Обработка.ЕстьПолеUpdate Тогда
		Если НоваяСтрока ИЛИ Параметры.БД_ТС.Update = 0 Тогда
			Параметры.БД_ТС.Update = 1;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.БД_ТС.Записать();
КонецПроцедуры  // УстановитьСоответствие

Процедура ДобавитьИнформациюОЗагрузке(ОбъектБД, Параметры, ДобавленаИнформацияОЗагрузке="")
	
	Если ОбъектБД.Проведен Тогда 
		Код = "001" 
	Иначе 
		Код = "002"; 
	КонецЕсли;
	ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета,Код,"Документ."+ПолучитьПредставление(Параметры.ВидОбъекта,Параметры),ОбъектБД);
	
	Если ДобавленаИнформацияОЗагрузке = Истина Тогда 
		Параметры.Вставить("ДобавленаИнформацияОЗагрузке", Истина); 
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИнформациюОЗагрузке()

// Процедура загрузки документа <Выписка>.
Процедура ЗагрузитьВыписку(Параметры, тзВыписка) Экспорт

Если Параметры.Свойство("НачатаЗагрузкаВыписки") Тогда
	Если НЕ Параметры.НачатаЗагрузкаВыписки ИЛИ тзВыписка.Количество() = 0 Тогда Возврат КонецЕсли;
	
	// Состояние("Загрузка документа Выписка");
	Максимум	= тзВыписка.Количество();
	ДокМенеджер	= Документы.Выписка;
	ТекОбъект	= ДокМенеджер.ПустаяСсылка();
	
	// Сюда будут заноситься идентификаторы платежных поручений 
	// и идентификаторы выписок так, как они будут представлены в таблице соответствий.
	тзЗагруженныхСоответствий = Новый ТаблицаЗначений;
	тзЗагруженныхСоответствий.Колонки.Добавить("ИдПП");
	тзЗагруженныхСоответствий.Колонки.Добавить("ИдААА");
	тзЗагруженныхСоответствий.Колонки.Добавить("ВидОбъекта");
	тзЗагруженныхСоответствий.Колонки.Добавить("ИдВыпИзм");
	тзЗагруженныхСоответствий.Колонки.Добавить("Входящее");
	тзЗагруженныхСоответствий.Колонки.Добавить("Номер");
	тзЗагруженныхСоответствий.Колонки.Добавить("Дата");
	тзЗагруженныхСоответствий.Колонки.Добавить("ИсточникКО");
	
	тзНеОбновляемыхОбъектов = Новый ТаблицаЗначений;
	тзНеОбновляемыхОбъектов.Колонки.Добавить("ИдПП");
	тзНеОбновляемыхОбъектов.Колонки.Добавить("ИдААА");
	тзНеОбновляемыхОбъектов.Колонки.Добавить("ВидОбъекта");
	тзНеОбновляемыхОбъектов.Колонки.Добавить("ИдВып");
	тзНеОбновляемыхОбъектов.Колонки.Добавить("Входящее");
	тзНеОбновляемыхОбъектов.Колонки.Добавить("Номер");
	тзНеОбновляемыхОбъектов.Колонки.Добавить("Дата");
	
	тзВыписка.Сортировать("ПолученоСоответствие убыв, ИдентификаторВыписки, Организация,Ответственный,БанковскийСчет,ВалютаДокумента,КурсДокумента,Дата Возр,ИдентификаторОбъекта");
	
	// Нужно найти первое ПП, которое можно обновить.
	ЗагружатьДокумент = Ложь;
	Для Каждого СтрокаТаблицы Из тзВыписка Цикл
		Если СтрокаТаблицы.НеОбновлятьДокумент = Ложь Тогда
			ЗагружатьДокумент = Истина;
			Прервать;
		Иначе
			НоваяСтрока				= тзНеОбновляемыхОбъектов.Добавить();
			НоваяСтрока.ИдПП		= СтрокаТаблицы.ИдентификаторОбъекта;
			НоваяСтрока.ИдААА		= СтрокаТаблицы.ИдентификаторПриемник;
			НоваяСтрока.ВидОбъекта	= СтрокаТаблицы.ВидОбъекта;
			НоваяСтрока.ИдВып		= СтрокаТаблицы.ИдентификаторВыписки;
			НоваяСтрока.Входящее	= СтрокаТаблицы.Входящее;
			НоваяСтрока.Номер		= СтрокаТаблицы.Номер;
			НоваяСтрока.Дата		= СтрокаТаблицы.Дата;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗагружатьДокумент Тогда 
		ЗапИдентификаторВыписки		= СтрокаТаблицы.ИдентификаторВыписки;		
		ЗапДата						= НачалоДня(СтрокаТаблицы.Дата);
		запИдентификаторОбъекта		= СтрокаТаблицы.ИдентификаторОбъекта;
		запОрганизация				= СтрокаТаблицы.Организация;
		запАвтор					= СтрокаТаблицы.Ответственный;
		запКонтрагент				= СтрокаТаблицы.Контрагент;
		запБанковскийСчет			= СтрокаТаблицы.БанковскийСчет;
		запВалютаДокумента			= СтрокаТаблицы.ВалютаДокумента;
		запКурсДокумента			= СтрокаТаблицы.КурсДокумента;  
		
		Входящее					= СтрокаТаблицы.Входящее;
		НомерВходящегоПоручения		= 1;	
		НомерИсходящегоПоручения	= 1;		
		
		запИдентификаторОбъекта		= СтрокаТаблицы.ИдентификаторОбъекта;
		запИдентификаторПриемник	= СтрокаТаблицы.ИдентификаторПриемник;
		
		// Вводим новый документ выписки.
		Параметры.Вставить("ЭтоНовыйОбъект", Истина);
		Если СтрокаТаблицы.ПолученоСоответствие 
			И ПолучитьСоответствиеДляВыписки(
				СтрокаТаблицы.ИдентификаторОбъекта,
				ТекОбъект,
				Параметры,,,
				СтрокаТаблицы.ИдентификаторПриемник) Тогда
			
			Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Иначе
			ТекОбъект = ДокМенеджер.СоздатьДокумент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, СтрокаТаблицы.ИдентификаторОбъекта);
		КонецЕсли;
		ЗагрузитьШапкуДляВыписки(ТекОбъект,СтрокаТаблицы, Параметры);
		
		НоваяСтрока				= тзЗагруженныхСоответствий.Добавить();      
		НоваяСтрока.ИдПП		= запИдентификаторОбъекта;
		НоваяСтрока.ИдААА		= СтрокаТаблицы.ИдентификаторПриемник;
		НоваяСтрока.ВидОбъекта	= СтрокаТаблицы.ВидОбъекта;
		НоваяСтрока.Дата		= СтрокаТаблицы.Дата;
		НоваяСтрока.Номер		= СтрокаТаблицы.Номер;
		Если Параметры.ЭтоНовыйОбъект Тогда 
			НоваяСтрока.ИдВыпИзм = 0;
		Иначе
			НоваяСтрока.ИдВыпИзм = СтрокаТаблицы.ИдентификаторИзмененный;
		КонецЕсли;
		НоваяСтрока.Входящее = Входящее;
		НоваяСтрока.ИсточникКО = СтрокаТаблицы.ИсточникКО;
		Счетчик = 0;
		
		Для Каждого СтрокаТаблицы Из тзВыписка Цикл
			
			Счетчик				= Счетчик + 1;
			ПроцентВыполнения	= Цел(100 * Счетчик / Максимум);
			
			Если СтрокаТаблицы.НеОбновлятьДокумент Тогда Продолжить; КонецЕсли;
			
			Параметры.Обработка.ЗагруженоДок	= Параметры.Обработка.ЗагруженоДок + 1;
			
			Если Параметры.Обработка.флЗагрузкаИзБП2=0 Тогда
				СформироватьНовуюВыписку	= (запДата <> НачалоДня(СтрокаТаблицы.Дата))
				ИЛИ (запАвтор <> СтрокаТаблицы.Ответственный)
				ИЛИ (запБанковскийСчет <> СтрокаТаблицы.БанковскийСчет)
				ИЛИ (запВалютаДокумента <> СтрокаТаблицы.ВалютаДокумента)
				ИЛИ (запКурсДокумента <> СтрокаТаблицы.КурсДокумента)
				ИЛИ (запИдентификаторВыписки <> СтрокаТаблицы.ИдентификаторВыписки);
			Иначе
				СформироватьНовуюВыписку	= (запИдентификаторОбъекта <> СтрокаТаблицы.ИдентификаторОбъекта)
					И НЕ (ТипЗнч(запИдентификаторВыписки) = Тип("Строка") И ТипЗнч(СтрокаТаблицы.ИдентификаторВыписки) = Тип("Строка")
					И запИдентификаторВыписки = СтрокаТаблицы.ИдентификаторВыписки);
			КонецЕсли;
			
			// Если сменились реквизиты, так что нужно менять выписку.
			Если СформироватьНовуюВыписку Тогда
				
				ТекОбъект.СуммаДокументаПриход = ТекОбъект.Состав.Итог("СуммаПриход");
				ТекОбъект.СуммаДокументаРасход = ТекОбъект.Состав.Итог("СуммаРасход");
				ТекОбъект.СуммаУслуг = ТекОбъект.Состав.Итог("СуммаУслуг"); 
				ТекОбъект.СуммаНДС = ТекОбъект.Состав.Итог("СуммаНДС");
				
				Попытка
					// Сохраняем документ выписки
					ЗакрытьДокумент(ТекОбъект, Параметры);
					
					// Вводим соответствия для всех платежных поручений, которые вошли в выписку.
					Для Каждого СтрокаСоответствияПП Из тзЗагруженныхСоответствий Цикл
						Если СтрокаСоответствияПП.ИдВыпИзм <> 0 Тогда
							УстановитьСоответствиеДляВыписки(СтрокаСоответствияПП.ИдПП, СтрокаСоответствияПП.ИдВыпИзм, ТекОбъект, Параметры);
						Иначе
							СоответствиеДляВыписки = НайтиПервыйСвободныйНомерДляСоответствия(ТекОбъект, НомерВходящегоПоручения, НомерИсходящегоПоручения ,СтрокаСоответствияПП.Входящее, Параметры);
							УстановитьСоответствиеДляВыписки(СтрокаСоответствияПП.ИдПП, СоответствиеДляВыписки, ТекОбъект, Параметры); 
						КонецЕсли;
						ДействияПоЗакрытиюДокументаВыписки(ТекОбъект, СтрокаСоответствияПП, Параметры, СтрокаСоответствияПП);
					КонецЦикла;
					НомерВходящегоПоручения = 1;
					НомерИсходящегоПоручения = 1;
					// Очищаем таблицу загруженных соответствий.
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					НовыйСообщение = Параметры.СписокСообщений.Добавить();
					НовыйСообщение.Сообщение = "Внимание! " + ?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось:'") 
												+ " " + Параметры.ВидОбъекта, НСтр("ru = 'Обновление не удалось:'") + " " + ТекОбъект) + "
					|	" + ОписаниеОшибки;
					ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета,"301",Параметры.ВидОбъекта,?(Параметры.ЭтоНовыйОбъект, "", ТекОбъект),
												?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось'"),
																			НСтр("ru ='Обновление не удалось'")),
												ОписаниеОшибки);
				КонецПопытки;
				
				тзЗагруженныхСоответствий.Очистить();
				
				запИдентификаторВыписки		= СтрокаТаблицы.ИдентификаторВыписки;
				ЗапДата						= НачалоДня(СтрокаТаблицы.Дата);
				запОрганизация				= СтрокаТаблицы.Организация;
				запАвтор					= СтрокаТаблицы.Ответственный;
				запКонтрагент				= СтрокаТаблицы.Контрагент;
				запБанковскийСчет			= СтрокаТаблицы.БанковскийСчет;
				запВалютаДокумента			= СтрокаТаблицы.ВалютаДокумента;
				запКурсДокумента			= СтрокаТаблицы.КурсДокумента;
				
				// Вводим новый документ выписки.
				Параметры.Вставить("ЭтоНовыйОбъект", Истина);
				Если СтрокаТаблицы.ПолученоСоответствие 
					И ПолучитьСоответствиеДляВыписки(
						СтрокаТаблицы.ИдентификаторОбъекта,
						ТекОбъект,
						Параметры,,,
						СтрокаТаблицы.ИдентификаторПриемник) Тогда
					
					Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
				Иначе
					ТекОбъект = ДокМенеджер.СоздатьДокумент();
					УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, СтрокаТаблицы.ИдентификаторОбъекта);
				КонецЕсли;			
				ЗагрузитьШапкуДляВыписки(ТекОбъект,СтрокаТаблицы, Параметры);
			КонецЕсли;
			
			// Если произошла смена платежного поручения, добавим ид платежного поручения в таблицу.
			Если (запИдентификаторОбъекта <> СтрокаТаблицы.ИдентификаторОбъекта) Тогда
				
				НоваяСтрока				= тзЗагруженныхСоответствий.Добавить();
				НоваяСтрока.ИдПП		= СтрокаТаблицы.ИдентификаторОбъекта;
				НоваяСтрока.ИдААА		= СтрокаТаблицы.ИдентификаторПриемник;
				НоваяСтрока.ВидОбъекта	= СтрокаТаблицы.ВидОбъекта;
				НоваяСтрока.Дата		= СтрокаТаблицы.Дата;
				НоваяСтрока.Номер		= СтрокаТаблицы.Номер;
				Если Параметры.ЭтоНовыйОбъект Тогда 
					НоваяСтрока.ИдВыпИзм = 0;
				Иначе
					НоваяСтрока.ИдВыпИзм = СтрокаТаблицы.ИдентификаторИзмененный;
				КонецЕсли;
				НоваяСтрока.Входящее = Входящее;
				НоваяСтрока.ИсточникКО = СтрокаТаблицы.ИсточникКО;
				
				запИдентификаторОбъекта = СтрокаТаблицы.ИдентификаторОбъекта;
				запИдентификаторПриемник = СтрокаТаблицы.ИдентификаторПриемник;
			КонецЕсли;	
			Входящее = СтрокаТаблицы.Входящее;
			
			
			// Грузим строки выписки.
			ТекСтрока = ТекОбъект.Состав.Добавить();
			ВыпискаСтатьяДДС = ПолучитьОбъект(СтрокаТаблицы["СтатьяДДС"], Параметры, "Справочник.СтатьиДДС");
			Если ВыпискаСтатьяДДС = Неопределено ИЛИ ВыпискаСтатьяДДС.Пустая() Тогда
				СтатьяДДС = Параметры.Обработка.ВыбСтатьяДДС;
			Иначе
				СтатьяДДС = ВыпискаСтатьяДДС;
			КонецЕсли;	
			УстановитьРеквизит(ТекСтрока, "СтатьяДДС",  СтатьяДДС);
			ВидОперации = СтрокаТаблицы["ВидОперации"];		
			
			Если СтрНайти(ВидОперации, "ПереводНаДругойСчет") > 0 Тогда
				Контрагент = Параметры.Обработка.ВыбКонтрагентПереводСредств;
			Иначе	
				Контрагент = ПолучитьОбъект(СтрокаТаблицы["Контрагент"],Параметры, "Справочник.Контрагенты"); 
			КонецЕсли;	
			
			УстановитьРеквизит(ТекСтрока, "Контрагент",  Контрагент);
			
			ВидОперацииПоступлениеТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, "ПрочееПоступление",
										"ПрочееПоступлениеБезналичныхДенежныхСредств");	 
			ВидОперацииСписаниеТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, "ПрочееСписание",
											"ПрочееСписаниеБезналичныхДенежныхСредств");
			ВидОперацииПодотчетномуТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, "ПеречислениеПодотчетномуЛицу",
												"ПеречислениеДенежныхСредствПодотчетнику");	
			Если СтрНайти(ВидОперации, ВидОперацииПоступлениеТекст) > 0 Тогда 
				
				ДоговорВзаиморасчетов = 
						ПолучитьДоговорДляПодстановки(ВидОперацииПоступлениеТекст, Контрагент, Параметры, СтрокаТаблицы);
			ИначеЕсли СтрНайти(ВидОперации, ВидОперацииСписаниеТекст) > 0 Тогда
				
				ДоговорВзаиморасчетов = 
						ПолучитьДоговорДляПодстановки(ВидОперацииСписаниеТекст, Контрагент, Параметры, СтрокаТаблицы);
			ИначеЕсли СтрНайти(ВидОперации, "ПеречислениеЗП") > 0 Тогда
				ДоговорВзаиморасчетов = ПолучитьДоговорДляПодстановки("ПеречислениеЗП", Контрагент, Параметры, СтрокаТаблицы);
			ИначеЕсли СтрНайти(ВидОперации, "ПереводНаДругойСчет") > 0 Тогда
				ДоговорВзаиморасчетов = ПолучитьДоговорДляПодстановки("ПереводНаДругойСчет", Контрагент, Параметры, СтрокаТаблицы);
			ИначеЕсли СтрНайти(ВидОперации, "ПеречислениеНалога") > 0 Тогда	
				ДоговорВзаиморасчетов = ПолучитьДоговорДляПодстановки("ПеречислениеНалога", Контрагент, Параметры, СтрокаТаблицы);
			ИначеЕсли СтрНайти(ВидОперации, ВидОперацииПодотчетномуТекст) > 0 Тогда
				
				ДоговорВзаиморасчетов = 
						ПолучитьДоговорДляПодстановки(ВидОперацииПодотчетномуТекст, Контрагент, Параметры, СтрокаТаблицы);
			Иначе		
				ДоговорВзаиморасчетов = ПолучитьОбъект(СтрокаТаблицы["ДоговорКонтрагента"], Параметры, "Справочник.ДоговорКонтрагента");
			КонецЕсли;			
			Попытка
				Если ДоговорВзаиморасчетов = Неопределено ИЛИ ДоговорВзаиморасчетов.Пустая() Тогда
					ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, "302", ПолучитьПредставлениеВыписки(СтрокаТаблицы, Параметры.Обработка),,
												НСтр("ru = 'Не заполнен договор взаиморасчетов'"));
				КонецЕсли;	
			Исключение
				ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, "302", ПолучитьПредставлениеВыписки(СтрокаТаблицы, Параметры.Обработка),,
											НСтр("ru = 'Не заполнен договор взаиморасчетов'"));
			КонецПопытки;	
			УстановитьРеквизит(ТекСтрока, "ДоговорВзаиморасчетов",  ДоговорВзаиморасчетов);
			Если ЗначениеЗаполнено(ДоговорВзаиморасчетов)
				И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
				УстановитьРеквизит(ТекСтрока, "СпособЗачетаАвансов",  СтрокаТаблицы["СпособЗачетаАвансов"]);
			КонецЕсли;
			
			УстановитьРеквизит(ТекСтрока, "СуммаПриход",				СтрокаТаблицы["СуммаПриход"]);
			УстановитьРеквизит(ТекСтрока, "СуммаРасход",				СтрокаТаблицы["СуммаРасход"]);
			УстановитьРеквизит(ТекСтрока, "КурсВалютыВзаиморасчетов",	СтрокаТаблицы["КурсВалютыВзаиморасчетов"]);
			УстановитьРеквизит(ТекСтрока, "НазначениеПлатежа",			СтрокаТаблицы["НазначениеПлатежа"]);
			УстановитьРеквизит(ТекСтрока, "КоррСчет",					ПолучитьСчет(СтрокаТаблицы["КоррСчет"]));	
			УстановитьРеквизит(ТекСтрока, "СтавкаНДС",					СтрокаТаблицы["СтавкаНДС"]);
			УстановитьРеквизит(ТекСтрока, "СуммаНДС",					СтрокаТаблицы["СуммаНДС"]);
			
			ПлатежноеПоручениеОснование	= " " + "№" + " " + СтрокаТаблицы["ВхДокНомер"] + " " + "от" + " " 
											+ Формат(СтрокаТаблицы["ВхДокДата"], "ДЛФ=D");
			УстановитьРеквизит(ТекСтрока, "ПлатежноеПоручениеОснование", ПлатежноеПоручениеОснование);
			
			Сделка = СтрокаТаблицы["Сделка"];
			СделкаПриемник = СтрокаТаблицы["СделкаПриемник"];
			ТипыРеквизита = ТекОбъект.Метаданные().ТабличныеЧасти.Состав.Реквизиты.Сделка.Тип;
			Сделка = ПолучитьДокументСделка(Сделка, ТипыРеквизита, ТекОбъект, Параметры, СделкаПриемник);
			УстановитьРеквизит(ТекСтрока, "Сделка", Сделка);
			
			УстановитьРеквизит(ТекОбъект, "ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
			УстановитьРеквизит(ТекОбъект, "СтатьяДДС",  СтатьяДДС); 
			ТекОбъект.СуммаДокументаПриход = ТекОбъект.Состав.Итог("СуммаПриход");
			ТекОбъект.СуммаДокументаРасход = ТекОбъект.Состав.Итог("СуммаРасход");
			ТекОбъект.СуммаУслуг = ТекОбъект.Состав.Итог("СуммаУслуг");
			ТекОбъект.СуммаНДС = ТекОбъект.Состав.Итог("СуммаНДС");
			ЗакрытьДокумент(ТекОбъект, Параметры);
			
		КонецЦикла;
		
		ТекОбъект.СуммаДокументаПриход = ТекОбъект.Состав.Итог("СуммаПриход");
		ТекОбъект.СуммаДокументаРасход = ТекОбъект.Состав.Итог("СуммаРасход");
		ТекОбъект.СуммаУслуг = ТекОбъект.Состав.Итог("СуммаУслуг");
		ТекОбъект.СуммаНДС = ТекОбъект.Состав.Итог("СуммаНДС");
		
		Попытка
			// Сохраняем документ выписки
			ЗакрытьДокумент(ТекОбъект, Параметры);
			
			// Вводим соответствия для всех платежных поручений, которые вошли в выписку.
			Для каждого СтрокаСоответствияПП Из тзЗагруженныхСоответствий Цикл
				Если СтрокаСоответствияПП.ИдВыпИзм <> 0 Тогда
					УстановитьСоответствиеДляВыписки(СтрокаСоответствияПП.ИдПП, СтрокаСоответствияПП.ИдВыпИзм,ТекОбъект, Параметры);
				Иначе
					СоответствиеДляВыписки = НайтиПервыйСвободныйНомерДляСоответствия(
						ТекОбъект,
						НомерВходящегоПоручения,
						НомерИсходящегоПоручения,
						СтрокаСоответствияПП.Входящее,
						Параметры);
					УстановитьСоответствиеДляВыписки(СтрокаСоответствияПП.ИдПП, СоответствиеДляВыписки,ТекОбъект, Параметры);
				КонецЕсли;				
				ДействияПоЗакрытиюДокументаВыписки(ТекОбъект, СтрокаСоответствияПП, Параметры, СтрокаСоответствияПП);
			КонецЦикла;			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			НовыйСообщение = Параметры.СписокСообщений.Добавить();
			НовыйСообщение.Сообщение = "Внимание." + " " + ?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось:'")
										+ " " + Параметры.ВидОбъекта, НСтр("ru = 'Обновление не удалось :'") + " " + ТекОбъект) + "
										|	" + ОписаниеОшибки;					 
			ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета,"301",Параметры.ВидОбъекта,?(Параметры.ЭтоНовыйОбъект, "",ТекОбъект),
										?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось'"),
										НСтр("ru = 'Обновление не удалось'")), ОписаниеОшибки);
		КонецПопытки;
		// Удаляем из таблицы соответствий строчки - мусор.
		тзЗагруженныхСоответствий.Очистить();
	КонецЕсли;
	
	// Выведем информацию о загрузке для не обновляемых документов.
	Если тзНеОбновляемыхОбъектов.Количество() > 0 Тогда
		тзНеОбновляемыхОбъектов.Сортировать("ИдВып");
		ДокМенеджер = Документы.Выписка;
		Для Каждого строкаДокумент Из тзНеОбновляемыхОбъектов Цикл
			ТекОбъект = ДокМенеджер.ПустаяСсылка();
			ПолучитьСоответствиеДляВыписки(строкаДокумент.ИдПП, ТекОбъект, Параметры,,, строкаДокумент.ИдААА);
			ВидДокументаВходящееТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, 
											"ПоступлениеНаРасчетныйСчет", "ПлатежноеПоручениеВходящее");
			ВидДокументаИсходящееТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, 
											"СписаниеСРасчетногоСчета", "ПлатежноеПоручениеИсходящее"); 	
			ВидДокумента = ?(строкаДокумент.Входящее, ВидДокументаВходящееТекст, ВидДокументаИсходящееТекст);
			ДобавитьИнформациюОЗагрузкеВыписки(ТекОбъект, строкаДокумент, Параметры);
			ДобавитьДокументВДеревоВыводаДляВыписки(строкаДокумент, Параметры, ВидДокумента, ТекОбъект, Ложь);
		КонецЦикла;	
	КонецЕсли;	
КонецЕсли;

КонецПроцедуры // ЗагрузитьВыписку() 

Функция ПолучитьДокументСделка(Сделка, ТипыРеквизита, ТекОбъект, Параметры, СделкаПриемник = "")
	
	Если Сделка = Неопределено ИЛИ Сделка = "" Тогда Возврат Неопределено; КонецЕсли;
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС И ЗначениеЗаполнено(СделкаПриемник) Тогда
		УИД = Новый УникальныйИдентификатор(СокрЛП(СделкаПриемник));
		Сделка = ПолучитьСделкуПоИдентификатору(ТипыРеквизита, УИД);
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("Строка") Тогда
		Сделка = ПолучитьОбъект(Сделка, "Документы.");
	КонецЕсли;
	
	Сделка = ПолучитьОбъект(Сделка, Параметры, "Документы.");
	Если Сделка = Неопределено Тогда 
		ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, "216", ПолучитьПредставление(Параметры.ВидОбъекта, Параметры), ТекОбъект, " " 
		+ НСтр("ru = 'Реквизит: ""Сделка"". Подставлена пустая ссылка.'"));
	ИначеЕсли НЕ ТипыРеквизита.СодержитТип(ТипЗнч(Сделка)) Тогда
		ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, "203", ПолучитьПредставление(Параметры.ВидОбъекта, Параметры), ТекОбъект, " " 
		+ НСтр("ru = 'Реквизит: ""Сделка"". Подставлена пустая ссылка.'"));
		Сделка = Неопределено;
	КонецЕсли;	
	Возврат Сделка;

КонецФункции // ПолучитьДокументСделка()

Функция ПолучитьСделкуПоИдентификатору(ТипыСделок, ИдентификаторСделки)
	
	Для Каждого ТекущийТипСделки Из ТипыСделок.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТипСделки);
		Сделка = Вычислить("Документы."+ОбъектМетаданных.Имя+".ПолучитьСсылку(ИдентификаторСделки)");
		Если Сделка <> Неопределено И СтрНайти(Строка(Сделка), НСтр("ru = '<Объект не найден>'")) = 0 Тогда
			Возврат Сделка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСделкуПоИдентификатору()

Процедура ДобавитьИнформациюОЗагрузкеВыписки(ОбъектБД,СтрокаСоответствияПП, Параметры, ДобавленаИнформацияОЗагрузке = "")
	
	Если ОбъектБД.Проведен Тогда 
		Код = "001" 
	Иначе 
		Код = "002"; 
	КонецЕсли;
	ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, Код, 
			"Документ." + ПолучитьПредставлениеВыписки(СтрокаСоответствияПП, Параметры.Обработка), ОбъектБД);
	
	Если ДобавленаИнформацияОЗагрузке = Истина Тогда 
		Параметры.Вставить("ДобавленаИнформацияОЗагрузке", Истина); 
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеВыписки(СтрокаСоответствияПП, Обработка)
	
	ВидДокументаВходящееТекст = ?(Обработка.флЗагрузкаИзБП2 > 0, 
			"ПоступлениеНаРасчетныйСчет", "ПлатежноеПоручениеВходящее"); 
	ВидДокументаИсходящееТекст = ?(Обработка.флЗагрузкаИзБП2 > 0, 
			"СписаниеСРасчетногоСчета", "ПлатежноеПоручениеИсходящее");
	ВидДокумента = ?(СтрокаСоответствияПП.Входящее, ВидДокументаВходящееТекст, ВидДокументаИсходящееТекст);	
	ПредставлениеОбъекта = ВидДокумента + " " + "№" + " " + СтрокаСоответствияПП.Номер + " (" 
							+ СтрокаСоответствияПП.Дата + ")";
	Возврат ПредставлениеОбъекта;
	
КонецФункции // ПолучитьПредставлениеВыписки()

Функция ПолучитьДоговорДляПодстановки(Цель, Контрагент, Параметры, ЗначенияСтроки = "")
	
	ТекОбъект = Справочники.ДоговорыВзаиморасчетов.НайтиПоНаименованию("Договор_" + Цель, Истина,, Контрагент);
	Если ТекОбъект.Пустая() Тогда
		ТекОбъект = Справочники.ДоговорыВзаиморасчетов.СоздатьЭлемент();
		Если ЗначенияСтроки = "" Тогда
			ВалютаВзаиморасчетов = ПолучитьОбъект(ПолучитьЗначениеРеквизита("ВалютаДокумента",Параметры), Параметры, "Справочник.Валюты");
			ТекОрганизация = ПолучитьОбъект(ПолучитьЗначениеРеквизита("Организация",Параметры), Параметры, "Справочник.Организации");
		Иначе			
			ВалютаВзаиморасчетов = ПолучитьОбъект(ЗначенияСтроки["ВалютаДокумента"], Параметры, "Справочник.Валюты");
			ТекОрганизация = ПолучитьОбъект(ЗначенияСтроки["Организация"], Параметры, "Справочник.Организации");
		КонецЕсли;	
		ТекОбъект.Владелец = Контрагент;
		УстановитьРеквизит(ТекОбъект, "Организация", ТекОрганизация);
		Если Параметры.Обработка.флЗагрузкаИзБП2 = 0 Тогда
			ВедениеВзаиморасчетов = ПолучитьЗначениеРеквизита("ВедениеВзаиморасчетов", Параметры);
		КонецЕсли;
		УстановитьРеквизит(ТекОбъект, "ВалютаВзаиморасчетов",	ВалютаВзаиморасчетов);
		// Установим вид договора и тип цен.
		УстановитьРеквизит(ТекОбъект, "ВидДоговора", Перечисления.ВидыДоговоров.Прочее);	
		УстановитьРеквизит(ТекОбъект, "Наименование",      	"Договор_" + Цель);
		УстановитьРеквизит(ТекОбъект, "НаименованиеПолное",	"Договор_" + Цель);
		УстановитьРеквизит(ТекОбъект, "Комментарий",    	
									   НСтр("ru = 'Создан для загрузки платежного поручения с видом операции'") + " " + Цель);
		УстановитьРеквизит(ТекОбъект, "Подразделение",		Параметры.Обработка.ВыбПодразделение);
		УстановитьРеквизит(ТекОбъект, "ДатаНачала", 		Параметры.Обработка.ВыбДатаНачалаДляДоговоров);
		УстановитьРеквизит(ТекОбъект, "СпособЗачетаАвансов",	ТекОрганизация.СпособЗачетаАвансов);
		УстановитьРеквизит(ТекОбъект, "СпособВеденияВзаиморасчетов",
			ПраваИНастройкиПользователя.Значение("ОсновнойСпособВеденияВзаиморасчетов"));
		УстановитьРеквизит(ТекОбъект, "ПроцентПредоплаты", -1);
		ЗакрытьСправочник(ТекОбъект);		
	КонецЕсли;	
	Возврат ТекОбъект.Ссылка;
	
КонецФункции // ПолучитьДоговорДляПодстановки()	

// Процедура выполняет формирование данных для вывода в Отчет о загрузке.
Процедура ДействияПоЗакрытиюДокументаВыписки(ОбъектБД, СтрокаСоответствияПП, Параметры, Строка_тзВыписки = Неопределено)
	
	Если ОбъектБД <> Неопределено И ОбъектБД.Ссылка.Пустая() Тогда ОбъектБД = Неопределено; КонецЕсли;	
	ВидДокументаВходящееТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0,
			"ПоступлениеНаРасчетныйСчет", "ПлатежноеПоручениеВходящее");
	ВидДокументаИсходящееТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0,
			"СписаниеСРасчетногоСчета", "ПлатежноеПоручениеИсходящее");
	ВидДокумента = ?(СтрокаСоответствияПП.Входящее, ВидДокументаВходящееТекст, ВидДокументаИсходящееТекст);
	Если ОбъектБД = Неопределено Тогда
		ПредставлениеОбъекта = "№ " + СтрокаСоответствияПП.Номер + " (" + СтрокаСоответствияПП.Дата + ")";
		НовыйСообщение = Параметры.СписокСообщений.Добавить();
		НовыйСообщение.Сообщение = НСтр("ru = 'Внимание! Нет возможности загрузить объект:'") + " "
		+ ПолучитьПредставлениеВыписки(СтрокаСоответствияПП, Параметры.Обработка) + " - " + ПредставлениеОбъекта;
		ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, "301", ПолучитьПредставлениеВыписки(СтрокаСоответствияПП, Параметры.Обработка),,
		НСтр("ru = 'Нет возможности загрузить объект'"));
	Иначе
		Если Строка_тзВыписки <> Неопределено И Строка_тзВыписки.ИсточникКО <> Неопределено Тогда
			ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, ?(ОбъектБД.Проведен, "001", "002"), "Документ.РасходныйКассовыйОрдер №" + " " 
												+ Строка_тзВыписки.ИсточникКО.Номер + " (" + Строка_тзВыписки.ИсточникКО.Дата 
												+ ")", ОбъектБД);
			ДобавитьДокументВДеревоВывода(Параметры, "РасходныйКассовыйОрдер", ОбъектБД, Ложь);
		Иначе
			ДобавитьИнформациюОЗагрузкеВыписки(ОбъектБД, СтрокаСоответствияПП, Параметры);
			ДобавитьДокументВДеревоВыводаДляВыписки(СтрокаСоответствияПП, Параметры, ВидДокумента, ОбъектБД, Ложь);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры // ДействияПоЗакрытиюДокументаВыписки() 

Процедура ДобавитьДокументВДеревоВыводаДляВыписки(СтрокаТаблицы, Параметры, ВидДокумента = "", ТекОбъект = Неопределено, ДобавленаИнформация = Истина)
	
	Если ПустаяСтрока(ВидДокумента) ИЛИ ТекОбъект = Неопределено Тогда Возврат; КонецЕсли;
	Если Параметры.Обработка.ПоказатьЗагруженные Тогда
		ДобавленаИнформацияОбОбъекте = ДобавленаИнформация;
		
		КореньВида = Параметры.КореньДокументы.Строки.Найти(ВидДокумента, "ОбъектИсточник");
		Если КореньВида = Неопределено Тогда
			КореньВида = Параметры.КореньДокументы.Строки.Добавить();
			КореньВида.ОбъектИсточник = ВидДокумента;
		КонецЕсли;
		КореньВида.Количество = КореньВида.Количество + 1;
		ПредставлениеОбъекта = " " + "№" + " " + СтрокаТаблицы.Номер + " (" + СтрокаТаблицы.Дата + ")";
		КореньОбъекта = КореньВида.Строки.Добавить();
		КореньОбъекта.ОбъектИсточник = ПредставлениеОбъекта;
		КореньОбъекта.ТипОбъекта     = ТипЗнч(ТекОбъект.Ссылка);
		КореньОбъекта.ОбъектПриемник = ТекОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьДокументВДеревоВыводаДляВыписки() 

// Процедура добавляет сообщение об ошибке в промежуточную таблицу отчета. В эту таблицу добавляются сообщения
// во время загрузки документов. Теперь эта загрузка может быть рекурсивной. Потом в процедуре КнопкаВыполнитьНажатие
// (самая верхняя процедура) вызывается ДобавитьВТаблицуОтчета. Там записи из временной таблицы переносятся
// в таблицу значений, по которой будет строится отчет.
Процедура ДобавитьСообщениеОЗагрузке(ПромежуточнаяТаблицаОтчета, Код,ОбъектИсточник,ОбъектПриемник = "",Сообщение = "",ДопИнформация = "")
	
	Если Код <> "" Тогда
		СообщениеЗагрузки = ПолучитьСообщениеПоКоду(Код);
	КонецЕсли;
	НоваяСтрока = ПромежуточнаяТаблицаОтчета.Добавить();
	НоваяСтрока.Код = Код;
	НоваяСтрока.ОбъектИсточник = ОбъектИсточник;
	НоваяСтрока.ОбъектПриемник = ОбъектПриемник;
	НоваяСтрока.Сообщение = Сообщение + ?(Сообщение = "", "", " ") + СообщениеЗагрузки;
	НоваяСтрока.ДопИнформация = ДопИнформация;	
	
КонецПроцедуры

Процедура ДобавитьДокументВДеревоВывода(Параметры, ВидДокумента = "", ТекОбъект = Неопределено, ДобавленаИнформация = Истина)
	
	Если ПустаяСтрока(ВидДокумента) ИЛИ ТекОбъект = Неопределено Тогда 
		Возврат; 
	КонецЕсли;	
	Если Параметры.Обработка.ПоказатьЗагруженные Тогда			
		ДобавленаИнформацияОбОбъекте = ДобавленаИнформация;
		
		КореньВида = Параметры.КореньДокументы.Строки.Найти(ВидДокумента, "ОбъектИсточник");
		Если КореньВида = Неопределено Тогда
			КореньВида = Параметры.КореньДокументы.Строки.Добавить();
			КореньВида.ОбъектИсточник = ВидДокумента;
		КонецЕсли;
		КореньВида.Количество = КореньВида.Количество + 1;			
		ПредставлениеОбъекта = " " + "№" + " " + ПолучитьЗначениеРеквизита("_1С_Номер",Параметры) 
								+ " (" + ПолучитьЗначениеРеквизита("_1С_Дата",Параметры) + ")";
		КореньОбъекта = КореньВида.Строки.Добавить();
		КореньОбъекта.ОбъектИсточник = ПредставлениеОбъекта;
		КореньОбъекта.ТипОбъекта     = ТипЗнч(ТекОбъект.Ссылка);
		КореньОбъекта.ОбъектПриемник = ТекОбъект.Ссылка;			
	КонецЕсли;
	
КонецПроцедуры // ДобавитьДокументВДеревоВывода()

Функция ПолучитьПредставление(ВидОбъекта, Параметры)
	
	ПредставлениеОбъекта = ВидОбъекта + " " + "№" + " " + ПолучитьЗначениеРеквизита("_1С_Номер",Параметры) + " (" 
								+ ПолучитьЗначениеРеквизита("_1С_Дата",Параметры) + ")";
	Возврат ПредставлениеОбъекта;
	
КонецФункции // ПолучитьПредставление() 

Функция ПолучитьПредставлениеСправочника(ВидОбъекта, Параметры)
	
	ПредставлениеОбъекта = ВидОбъекта + " " + "№" + " " + ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры) + " (" 
								+ ПолучитьЗначениеРеквизита("_1С_Код",Параметры) + ")";
	Возврат ПредставлениеОбъекта;
	
КонецФункции // ПолучитьПредставлениеСправочника()

Процедура ДобавитьВТаблицуОтчета(ПромежуточнаяТаблицаОтчета, ТаблицаОтчета, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Код") Тогда
		ДополнительныеПараметры.Вставить("Код", "");
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("ОбъектИсточник") Тогда
		ДополнительныеПараметры.Вставить("ОбъектИсточник", "");
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("ОбъектПриемник") Тогда
		ДополнительныеПараметры.Вставить("ОбъектПриемник", "");
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Сообщение") Тогда
		ДополнительныеПараметры.Вставить("Сообщение", "");
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("ДопИнформация") Тогда
		ДополнительныеПараметры.Вставить("ДопИнформация", "");
	КонецЕсли;
	Если ДополнительныеПараметры.Код = ""
		И ДополнительныеПараметры.ОбъектИсточник=""
		И ДополнительныеПараметры.ОбъектПриемник=""
		И ДополнительныеПараметры.Сообщение="" 
		И ДополнительныеПараметры.ДопИнформация="" Тогда
		
		Для Каждого Строка Из ПромежуточнаяТаблицаОтчета Цикл
			СтрокаОтчета = ТаблицаОтчета.Добавить();
			СтрокаОтчета.Код = Строка.Код;
			СтрокаОтчета.ОбъектИсточник = Строка.ОбъектИсточник;
			ОбъектПриемник = Строка.ОбъектПриемник;
			Если ОбъектПриемник <> Неопределено Тогда
				Попытка
					Если НЕ ОбъектПриемник.Ссылка.Пустая() Тогда
						Представление = ОбъектПриемник.Ссылка;
					Иначе
						Представление = Строка(ОбъектПриемник);
					КонецЕсли;
				Исключение
					Представление = "";
				КонецПопытки;
			Иначе
				Представление = "Неопределено";
			КонецЕсли;		
			СтрокаОтчета.ОбъектПриемник = Представление;
			СтрокаОтчета.Сообщение = Строка.Сообщение;
			СтрокаОтчета.ДопИнформация = Строка.ДопИнформация;
		КонецЦикла;
		ПромежуточнаяТаблицаОтчета.Очистить();
	Иначе
		СтрокаОтчета = ТаблицаОтчета.Добавить();
		СтрокаОтчета.Код = ДополнительныеПараметры.Код;
		СтрокаОтчета.ОбъектИсточник = ДополнительныеПараметры.ОбъектИсточник;
		СтрокаОтчета.ОбъектПриемник = ДополнительныеПараметры.ОбъектПриемник;
		СтрокаОтчета.Сообщение = ДополнительныеПараметры.Сообщение;
		СтрокаОтчета.ДопИнформация = ДополнительныеПараметры.ДопИнформация;
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьВТаблицуОтчета()

// Функция обработки текущей строки	временной таблицы
// возвращает либо ссылку на объект ИБ, либо пусто,
// если нет возможности корректно выполнить процедуру загрузки.
Функция ОбработатьСтроку(СтрокаБД, ПредставлениеОбъекта, Параметры)
	
	// Получим идентификатор и тип объекта.
	Идентификатор = СокрЛП(СтрокаБД.ID);
	ИдентификаторПриемник = СокрЛП(СтрокаБД.IDRECEIVER);
	ТипОбъекта    = СокрЛП(СтрокаБД.Type);
	ЭтоДокумент   = ?(СтрНайти(ТипОбъекта, "Документ.") = 1, Истина, Ложь);
	
	// Проверим существование процедуры загрузки объекта данного типа и вида
	// если таковой нет, то и лишние действия делать не будем.
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Ложь);
	Попытка
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(Параметры);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("Обработки.ЗагрузкаДанныхБух.Загрузить" + СтрЗаменить(ТипОбъекта, ".", "_"), ПараметрыВыполнения);
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка загрузки данных'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Если НЕ Параметры.ЕстьПроцедураЗагрузки Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='НЕ ПОДЛЕЖИТ ЗАГРУЗКЕ: %1'"), ТипОбъекта)
		);
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru='Обработаем строку: %1.%2'"), ТипОбъекта, Идентификатор)
	);
		
	Если ТипОбъекта <> Параметры.ПредТипОбъекта Тогда
		// Структуру будем получать только если тип объекта поменялся.
		Параметры.Вставить("ТекСтруктура", ПолучитьСтруктуру(ТипОбъекта, Параметры.тзМД));
		
		Параметры.Вставить("ПредТипОбъекта", ТипОбъекта);
	КонецЕсли;
	
	// Получим список реквизитов.
	Параметры.Вставить("ТекРеквизиты", ПолучитьСписокРеквизитов(?(Параметры.Обработка.XMLФорматВыгрузки, Идентификатор,
																		СтрокаБД.LineNum), Параметры));
	
	// Загрузим объект в ИБ.
	ОбъектБД       = Неопределено;
	Параметры.Вставить("ЭтоНовыйОбъект", Истина);
	ДобавленаИнформацияОбОбъекте = Ложь;
	ДатаЗапретаИзмененияДанных=Неопределено;//Сеанса.ГраницыЗапретаИзмененияДанных.Получить();
	Если ЭтоДокумент Тогда // Загрузим документ
		ПредставлениеОбъекта = " " + "№" + " " + ПолучитьЗначениеРеквизита("_1С_Номер",Параметры) + " (" 
								+ ПолучитьЗначениеРеквизита("_1С_Дата",Параметры) + ")";
		Попытка
			ОбъектБД = ЗагрузитьДокумент(ТипОбъекта, Идентификатор, ИдентификаторПриемник, Параметры);   // Загрузим документ
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			НовыйСообщение = Параметры.СписокСообщений.Добавить();
			НовыйСообщение.Сообщение = ("Внимание." + " " + ?(Параметры.ЭтоНовыйОбъект, НСтр("ru ='Импортирование не удалось:'")
										+ " " + ТипОбъекта, НСтр("ru = 'Обновление не удалось :'") + " " + ОбъектБД) + "
										|	" + ОписаниеОшибки);					 
			ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета,"301",ТипОбъекта,?(Параметры.ЭтоНовыйОбъект, "",ОбъектБД),
			?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось'"), НСтр("ru = 'Обновление не удалось'"))
			,ОписаниеОшибки);
		КонецПопытки;
	Иначе
		
		Код          = ПолучитьЗначениеРеквизита("_1С_Код",Параметры);
		Наименование = ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры);
		ПредставлениеОбъекта = Наименование + ?(ПустаяСтрока(Наименование), Код, " (" + Код + ")");
		
		Попытка
			ОбъектБД = ЗагрузитьСправочник(ТипОбъекта, Идентификатор, ИдентификаторПриемник, Параметры); // Загрузим элемент справочника
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			НовыйСообщение = Параметры.СписокСообщений.Добавить();
			НовыйСообщение.Сообщение = ("Внимание." + " " + ?(Параметры.ЭтоНовыйОбъект, НСтр("ru ='Импортирование не удалось :'") 
										+ " " + ТипОбъекта, НСтр("ru = 'Обновление не удалось :'") + " " + ОбъектБД) + "
										|	" + ОписаниеОшибки());
			ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, "301", ТипОбъекта,?(Параметры.ЭтоНовыйОбъект, "", ОбъектБД),?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось'"), НСтр("ru = 'Обновление не удалось'")),ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
	// Проверим, удачно ли прошла загрузка.
	Если ОбъектБД <> Неопределено Тогда
		// Установим в таблице соответствия внутреннее представление объекта.
		УстановитьСоответствие(Идентификатор, ОбъектБД, Параметры);
		
		Если Параметры.Обработка.ПоказатьЗагруженные И НЕ ДобавленаИнформацияОбОбъекте И ОбъектБД <> Неопределено Тогда
			КореньОбъекта = ?(ЭтоДокумент, Параметры.КореньДокументы, Параметры.КореньСправочники);
			
			Параметры.Вставить("ВидОбъекта", Сред(Параметры.ПредТипОбъекта, СтрНайти(Параметры.ПредТипОбъекта, ".") + 1));
			КореньВида = КореньОбъекта.Строки.Найти(Параметры.ВидОбъекта, "ОбъектИсточник");
			Если КореньВида = Неопределено Тогда
				КореньВида = КореньОбъекта.Строки.Добавить();
				КореньВида.ОбъектИсточник = Параметры.ВидОбъекта;
			КонецЕсли;
			КореньВида.Количество = КореньВида.Количество + 1;
			
			ТекСтрока = КореньВида.Строки.Добавить();
			ТекСтрока.ОбъектИсточник = ПредставлениеОбъекта;
			ТекСтрока.ТипОбъекта     = ТипЗнч(ОбъектБД.Ссылка);
			ТекСтрока.ОбъектПриемник = ОбъектБД;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеОбъекта = ТипОбъекта + "." + Идентификатор + ": " + ПредставлениеОбъекта;
	
	// Вернем объект
	Возврат ОбъектБД;
	
КонецФункции  // ОбработатьСтроку

Процедура УстановитьИдентификаторОбъекту(
		Параметры,
		ТекОбъект,
		СпрМенеджер,
		ИдентификаторОбъекта,
		ИдентификаторПриемник = "")
	
	Если НЕ Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		Возврат;
	КонецЕсли;
	
	НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторОбъекта);
	НоваяСсылка = СпрМенеджер.ПолучитьСсылку(НовыйУникальныйИдентификатор);
	ТекОбъект.УстановитьСсылкуНового(НоваяСсылка);
	
	Если НЕ ПустаяСтрока(ИдентификаторПриемник) Тогда
		СтрокаСсылки				= Параметры.ТаблицаВосстановленныхСсылок.Добавить();
		СтрокаСсылки.СтароеЗначение	= СокрЛП(ИдентификаторПриемник);
		СтрокаСсылки.НовоеЗначение	= ИдентификаторОбъекта;
	КонецЕсли;
	
КонецПроцедуры // УстановитьИдентификаторОбъекту()

Процедура УстановкаСоответствияСсылокОбъекта(Параметры, ТекОбъект, ИдентификаторОбъекта, ПродолжитьЗапись = Истина)
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		СтрокаСсылки				= Параметры.ТаблицаВосстановленныхСсылок.Добавить();
		СтрокаСсылки.СтароеЗначение	= СокрЛП(ИдентификаторОбъекта);
		СтрокаСсылки.НовоеЗначение	= СокрЛП(Строка(ТекОбъект.Ссылка.УникальныйИдентификатор()));
	ИначеЕсли ПродолжитьЗапись Тогда
		Если НЕ БД_ТСНайти(ИдентификаторОбъекта, "=", Параметры.БД_ТС) Тогда
			ТекущийИндекс		= Параметры.БД_ТС.ТекущийИндекс;
			Параметры.БД_ТС.ТекущийИндекс = Параметры.БД_ТС.Индексы.Найти("IndSource");
			Если Параметры.БД_ТС.Найти(ТекОбъект.Ссылка.УникальныйИдентификатор(),"=") Тогда
				
				СтрокаСсылки				= Параметры.ТаблицаВосстановленныхСсылок.Добавить();
				СтрокаСсылки.СтароеЗначение	= СокрЛП(Параметры.БД_ТС.ID_Receive);
				СтрокаСсылки.НовоеЗначение	= СокрЛП(ИдентификаторОбъекта);							
				
				Параметры.БД_ТС.ID_Receive	= ИдентификаторОбъекта;
				Параметры.БД_ТС.ManagerRar    = ТекОбъект.Ссылка.Метаданные().Имя;
				Параметры.БД_ТС.Direct		= 2;
				Если Параметры.БД_ТС.Update = 0 Тогда
					Параметры.БД_ТС.Update = 1;
				КонецЕсли;								
				Параметры.БД_ТС.Записать();							
				
				Параметры.БД_ТС.ТекущийИндекс	= ТекущийИндекс;
			КонецЕсли;		
		КонецЕсли;										
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИдентификаторВладельца(Параметры, ИмяРеквизита = "_1С_Владелец")
	
	ИдентификаторВладельца = ПолучитьЗначениеРеквизита(ИмяРеквизита, Параметры);
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		НайденнаяСтрока = Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторВладельца, "СтароеЗначение");
		Если НайденнаяСтрока <> Неопределено Тогда
			ИдентификаторВладельца	= НайденнаяСтрока.НовоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторВладельца;
	
КонецФункции // ПолучитьИдентификаторВладельца()

Процедура ДобавитьСтрокуВТаблицуВосстановленияСсылок(Параметры, ТекОбъект, ИдентификаторОбъекта, ИдентификаторПриемник)
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		СтрокаСсылки				= Параметры.ТаблицаВосстановленныхСсылок.Добавить();
		СтрокаСсылки.СтароеЗначение	= ?(ПустаяСтрока(ИдентификаторПриемник),
				СокрЛП(ИдентификаторОбъекта), СокрЛП(ИдентификаторПриемник));
		СтрокаСсылки.НовоеЗначение	= СокрЛП(Строка(ТекОбъект.Ссылка.УникальныйИдентификатор()));
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуВосстановленияСсылок()

Функция ЭтоЮридическоеЛицо(ТекОбъект, Параметры)
	
	ЮрФизЛицо = ПолучитьЗначениеРеквизита("ЮрФизЛицо", Параметры);
	Если ЮрФизЛицо = Неопределено Тогда
		ЮрФизЛицо = ПолучитьЗначениеРеквизита("ЮридическоеФизическоеЛицо", Параметры);
	КонецЕсли;
	Если СтрНайти(ЮрФизЛицо, "ЮрЛицо") > 0 ИЛИ СтрНайти(ЮрФизЛицо, "ЮридическоеЛицо") > 0 Тогда
		УстановитьРеквизит(ТекОбъект, "ФормаСобственности", Перечисления.ФормыСобственности.ЮридическоеЛицо);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЭтоЮридическоеЛицо()

Процедура ЗагрузитьКонтактнуюИнформацию(ТекОбъект, ИдентификаторОбъекта, Параметры)
	
	// Установим Контактную информацию
	ТекОбъект.КонтактнаяИнформация.Очистить();
	
	ТЗКонтактнаяИнформация = ПолучитьТабличнуюЧасть(ИдентификаторОбъекта, Параметры, "КонтактнаяИнформация");
	
	Для Каждого ТекущаяСтрока Из ТЗКонтактнаяИнформация Цикл
		
		// Получим вид контактной информации
		ВидКИ = ТекущаяСтрока.Значение.Получить("Вид");
		ЗначениеВидаКИ = ПолучитьОбъект(ВидКИ, Параметры, "Справочник.ВидыКонтактнойИнформации");
		
		Если ЗначениеВидаКИ = Неопределено Тогда
			НайденнаяСтрока = Параметры.ТаблицаВосстановленныхСсылок.Найти(ВидКИ, "СтароеЗначение");
			Если НайденнаяСтрока <> Неопределено Тогда
				ВидКИ	= НайденнаяСтрока.НовоеЗначение;
				ЗначениеВидаКИ = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(ВидКИ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеВидаКИ = Неопределено Тогда
			// Не получен вид КИ.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТекОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Вид = ЗначениеВидаКИ;
		НоваяСтрока.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеВидаКИ, "Тип");
		НоваяСтрока.Представление = ТекущаяСтрока.Значение.Получить("Представление");
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
		НоваяСтрока.Страна = ТекущаяСтрока.Значение.Получить("Страна");
		НоваяСтрока.Регион = ТекущаяСтрока.Значение.Получить("Регион");
		НоваяСтрока.Город = ТекущаяСтрока.Значение.Получить("Город");
		НоваяСтрока.АдресЭП = ТекущаяСтрока.Значение.Получить("АдресЭП");
		НоваяСтрока.ДоменноеИмяСервера = ТекущаяСтрока.Значение.Получить("ДоменноеИмяСервера");
		НоваяСтрока.НомерТелефона = ТекущаяСтрока.Значение.Получить("НомерТелефона");
		НоваяСтрока.НомерТелефонаБезКодов = ТекущаяСтрока.Значение.Получить("НомерТелефонаБезКодов");
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьКонтактнуюИнформацию()

Функция СпособЗачетаОплатыДокумента(СпособПогашенияЗадолженности)
	
	Если СпособПогашенияЗадолженности = "Перечисление.СпособыПогашенияЗадолженности.ПоДокументу" Тогда
		Возврат Перечисления.СпособыЗачетаАвансов.ПоДокументу;
	ИначеЕсли СпособПогашенияЗадолженности = "Перечисление.СпособыПогашенияЗадолженности.НеПогашать" Тогда
		Возврат Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;
	
	Возврат Перечисления.СпособыЗачетаАвансов.Автоматически;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДОКУМЕНТОВ

Процедура НачатьЗагрузкуВыписки(ТипОбъекта, Параметры, тзВыписка)
	
	Если Параметры.Обработка.флЗагрузкаИзБП2>0 Тогда
		ЭтоПлатежноеПоручение	= СтрНайти(ТипОбъекта,"ПоступлениеНаРасчетныйСчет")>0 ИЛИ СтрНайти(ТипОбъекта,"СписаниеСРасчетногоСчета")>0;
	Иначе
		ЭтоПлатежноеПоручение	= СтрНайти(ТипОбъекта,"ПлатежноеПоручение")>0;
	КонецЕсли;	
	
	Если НЕ Параметры.НачатаЗагрузкаВыписки И ЭтоПлатежноеПоручение Тогда
		Параметры.Вставить("НачатаЗагрузкаВыписки", Истина);
		
		тзВыписка.Колонки.Добавить("ИдентификаторОбъекта");
		тзВыписка.Колонки.Добавить("ИдентификаторПриемник");
		тзВыписка.Колонки.Добавить("ИдентификаторВыписки");
		тзВыписка.Колонки.Добавить("ИдентификаторИзмененный");
		тзВыписка.Колонки.Добавить("ПолученоСоответствие");
		тзВыписка.Колонки.Добавить("Входящее");
		тзВыписка.Колонки.Добавить("Номер");
		тзВыписка.Колонки.Добавить("Дата");
		тзВыписка.Колонки.Добавить("ИсточникКО");
		тзвыписка.Колонки.Добавить("ВидОбъекта");
		//-------------------------------------------
		тзВыписка.Колонки.Добавить("Организация");
		тзВыписка.Колонки.Добавить("Ответственный");
		тзВыписка.Колонки.Добавить("Контрагент");
		тзВыписка.Колонки.Добавить("БанковскийСчет");
		тзВыписка.Колонки.Добавить("ВалютаДокумента");
		тзВыписка.Колонки.Добавить("КурсДокумента");
		тзВыписка.Колонки.Добавить("КурсВалютыУпр");
		тзВыписка.Колонки.Добавить("ПодразделениеОрганизации");			
		//------------------------------------------
		тзВыписка.Колонки.Добавить("ВхДокНомер");
		тзВыписка.Колонки.Добавить("ВхДокДата");
		тзВыписка.Колонки.Добавить("СтатьяДДС");
		тзВыписка.Колонки.Добавить("ДоговорКонтрагента");
		тзВыписка.Колонки.Добавить("СуммаПриход");
		тзВыписка.Колонки.Добавить("СуммаРасход");
		тзВыписка.Колонки.Добавить("КурсВалютыВзаиморасчетов");
		тзВыписка.Колонки.Добавить("КратностьВзаиморасчетов");
		тзВыписка.Колонки.Добавить("НазначениеПлатежа");
		тзВыписка.Колонки.Добавить("КоррСчет");		
		тзВыписка.Колонки.Добавить("Сделка");
		тзВыписка.Колонки.Добавить("СделкаПриемник");
		тзВыписка.Колонки.Добавить("СуммаНДС");
		//-------------------------------------------------	
		тзВыписка.Колонки.Добавить("ВидОперации");	
		тзВыписка.Колонки.Добавить("НеОбновлятьДокумент");
		тзВыписка.Колонки.Добавить("СтавкаНДС");
		тзВыписка.Колонки.Добавить("СпособЗачетаАвансов");
		
	КонецЕсли;	
	
КонецПроцедуры

// Функция создает строку для соответствия документа выписки, такую которой нет в обрабатываемой таблицы выписки.
Функция НайтиПервыйСвободныйНомерДляСоответствия(ОбъектБД, НомерВходящегоПоручения, НомерИсходящегоПоручения ,Входящее, Параметры)
	
	Если ОбъектБД = Неопределено ИЛИ ОбъектБД.Ссылка.Пустая() Тогда Возврат 0; КонецЕсли;
	ИдентификаторОбъектаВыписка = ОбъектБД.Ссылка.УникальныйИдентификатор();		
	
	ИдентификаторПП = СокрЛП(ИдентификаторОбъектаВыписка)+"-"+?(Входящее,"ВП","ИП")+Строка(?(Входящее,НомерВходящегоПоручения,НомерИсходящегоПоручения));
	Если Входящее Тогда 
		НомерВходящегоПоручения = НомерИсходящегоПоручения + 1;
	Иначе
		НомерИсходящегоПоручения = НомерИсходящегоПоручения + 1;
	КонецЕсли;
	БД_ТС = ?(ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("БД_ТС"), Параметры.БД_ТС, Неопределено);
	Уникальность = УникальныйИдСорс(ИдентификаторПП, БД_ТС, Параметры);
		
	Пока Параметры.тзВыписка.Найти(ИдентификаторПП, "ИдентификаторИзмененный") <> Неопределено ИЛИ НЕ Уникальность Цикл
		ИдентификаторПП = СокрЛП(ИдентификаторОбъектаВыписка)+"-"+?(Входящее,"ВП","ИП")
		+Строка(?(Входящее,НомерВходящегоПоручения,НомерИсходящегоПоручения));
		Если Входящее Тогда 
			НомерВходящегоПоручения = НомерВходящегоПоручения + 1;
		Иначе
			НомерИсходящегоПоручения = НомерИсходящегоПоручения + 1;
		КонецЕсли;
		Уникальность = УникальныйИдСорс(ИдентификаторПП, БД_ТС, Параметры);
	КонецЦикла;		
	Возврат ИдентификаторПП;
КонецФункции	

// Процедура перенаправления загрузки объекта в специализированную процедуру.
Функция ЗагрузитьДокумент(ТипВидОбъекта, ИдентификаторОбъекта, ИдентификаторПриемник, Параметры)	
	
	ТекОбъект = "";
	ВидОбъекта = Сред(ТипВидОбъекта, СтрНайти(ТипВидОбъекта, ".") + 1);
	Параметры.Вставить("ВидОбъекта", ВидОбъекта);
	
	Попытка
		Если Не Параметры.Свойство("тзВыписка")
			ИЛИ Параметры.тзВыписка.Количество() = 0 Тогда
			тзВыписка = Новый ТаблицаЗначений;
			НачатьЗагрузкуВыписки(ТипВидОбъекта, Параметры, тзВыписка);
			Параметры.Вставить("тзВыписка", тзВыписка);
		КонецЕсли;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(Параметры);
		ПараметрыВыполнения.Добавить(ТекОбъект);
		ПараметрыВыполнения.Добавить(ИдентификаторОбъекта);
		ПараметрыВыполнения.Добавить(ИдентификаторПриемник);
		ПараметрыВыполнения.Добавить(ТипВидОбъекта);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("Обработки.ЗагрузкаДанныхБух.Загрузить" + СтрЗаменить(ТипВидОбъекта, ".", "_"), ПараметрыВыполнения);
		
		// Получим текущий объект
		ТекОбъект = ПараметрыВыполнения[1];
		
	Исключение 
		ОписаниеОшибки	= ОписаниеОшибки();
		ДатаДокумента	= ПолучитьЗначениеРеквизита("_1С_Дата",Параметры);
		НомерДокумента	= ПолучитьЗначениеРеквизита("_1С_Номер",Параметры);
		НовыйСообщение = Параметры.СписокСообщений.Добавить();
		НовыйСообщение.Сообщение = ("Внимание." + " " + НСтр("ru = 'Импортирование не удалось :'") + " " 
									+ Параметры.ВидОбъекта + " " + "номер" + " " + НомерДокумента + " " + "от" + " " + ДатаДокумента 
									+ Символы.ПС + ОписаниеОшибки);
		ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета, "301",ПолучитьПредставление(Параметры.ВидОбъекта, Параметры),
		?(ТекОбъект<>Неопределено И ТекОбъект<>"",ТекОбъект.Ссылка,""),
		?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось'"), НСтр("ru = 'Обновление не удалось'")),
		ОписаниеОшибки)
	КонецПопытки;
	
	Попытка Возврат ?(ТекОбъект.Ссылка.Пустая(), Неопределено, ТекОбъект.Ссылка);
	Исключение Возврат Неопределено; КонецПопытки;
	
КонецФункции  // ЗагрузитьДокумент()

// Функция приводит длину номера документа к соответствующей разрядности.
//
// Параметры:
//	Номер 		- Тип строка - номер документа
//	Разрядность - Тип число - разрядность номера в конфигурации.
// Возвращаемое значение:
//	Результат	- Приведенный к правильной разрядности номер.
//
Функция ПривестиНомерДокумента(Номер,Разрядность)
	
	Если СтрДлина(Номер) = Разрядность Тогда
		Возврат Номер;
	КонецЕсли;
	
	СтрДоп = "0";
	
	Если СтрДлина(Номер) > Разрядность Тогда
		
		КоличествоДопСимволов			= СтрДлина(Номер)-Разрядность;
		КоличествоУдалили				= 1;
		Пока КоличествоУдалили<=КоличествоДопСимволов Цикл
			ПозицияСимвола	= СтрНайти(Номер, СтрДоп);
			Если ПозицияСимвола > 0 Тогда
				ЛеваяЧастьНомера	= Лев(Номер, ПозицияСимвола - 1);
				ПраваяЧастьНомера	= Сред(Номер, ПозицияСимвола + 1);
				Номер				= ЛеваяЧастьНомера + ПраваяЧастьНомера;
			КонецЕсли;
			КоличествоУдалили	= КоличествоУдалили + 1;
		КонецЦикла;
		
		Возврат Номер;
		
	Иначе		
		
		ВременнаяСтрокаЦифрНомера		= "";
		ВременнаяСтрокаПрефиксацииНомера = "";
		КоличествоДопСимволов			= Разрядность - СтрДлина(Номер);
		ПозицияСимвола					= СтрДлина(Номер);
		Пока ПозицияСимвола >= 1 Цикл
			Символ				= Сред(Номер, ПозицияСимвола,1);
			Если СтрНайти("0123456789", Символ) <> 0 Тогда
				ПозицияСимвола	= ПозицияСимвола - 1;
			Иначе	 
				ВременнаяСтрокаЦифрНомера		= Прав(Номер, СтрДлина(Номер) - ПозицияСимвола);
				ВременнаяСтрокаПрефиксацииНомера = Лев(Номер, ПозицияСимвола);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		КоличествоДобавили						= 1;
		Пока КоличествоДобавили<=КоличествоДопСимволов Цикл
			Если Не ЗначениеЗаполнено(ВременнаяСтрокаЦифрНомера) И Не ЗначениеЗаполнено(ВременнаяСтрокаПрефиксацииНомера) Тогда
				Номер						= СтрДоп + Номер;
			Иначе	
				ВременнаяСтрокаЦифрНомера	= СтрДоп + ВременнаяСтрокаЦифрНомера;
			КонецЕсли;
			КоличествоДобавили				= КоличествоДобавили + 1;
		КонецЦикла;
		Если ЗначениеЗаполнено(ВременнаяСтрокаЦифрНомера) И ЗначениеЗаполнено(ВременнаяСтрокаПрефиксацииНомера) Тогда
			Номер						= ВременнаяСтрокаПрефиксацииНомера + ВременнаяСтрокаЦифрНомера;
		КонецЕсли;
		
		Возврат Номер;
	КонецЕсли;
	
КонецФункции

// Процедура записи элемента справочника.
Процедура ЗакрытьСправочник(ТекОбъект)
	
	Попытка
		Если ТекОбъект.ЭтоНовый() Тогда
			Если ПустаяСтрока(ТекОбъект.Код) Тогда
				ТекОбъект.УстановитьНовыйКод();
			КонецЕсли;
		КонецЕсли;
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки нового кода'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		ТекОбъект.ОбменДанными.Загрузка = Истина;
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка перевода ОбменДанными.Загрузка в Истина'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		ТекОбъект.Записать();
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи объекта'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		ТекОбъект.ОбменДанными.Загрузка = Ложь;
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка перевода ОбменДанными.Загрузка в Ложь'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры  // ЗакрытьСправочник

// Процедура загрузки "общих" реквизитов документа
// Возвращает: Истина - шапка успешно загружена, Ложь - сбой или ошибка.
Процедура ЗагрузитьШапку(ТекОбъект, Параметры, ЗначенияСтроки=Неопределено)
	
	// Уберем пометку удаления, если она есть.
	Если ТекОбъект.ПометкаУдаления Тогда
		ТекОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;	
	
	// Отменим проведение, если документ был проведен ранее.
	Если ТекОбъект.Проведен Тогда
		ТекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
	
	Если Параметры.ЭтоНовыйОбъект Тогда 
		ТекОбъект.Дата	= ПолучитьЗначениеРеквизита("_1С_Дата",Параметры);		
		
		НомерДокумента	= ПолучитьЗначениеРеквизита("_1С_Номер",Параметры);
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			РазрядностьНомераДокумента	= ТекОбъект.Метаданные().ДлинаНомера;
			Если РазрядностьНомераДокумента>0 Тогда
				УстановитьРеквизит(ТекОбъект, "Номер",		ПривестиНомерДокумента(НомерДокумента, РазрядностьНомераДокумента));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьЗначениеРеквизита("Организация",Параметры);
	
	// Заполним "общие" реквизиты документа.
	Если ЕстьРеквизит(ТекОбъект,"ВалютаДокумента") Тогда
		Попытка
			ВалютаДокумента = ПолучитьОбъект(ПолучитьЗначениеРеквизита("ВалютаДокумента",Параметры), Параметры, "Справочник.Валюты");
			УстановитьРеквизит(ТекОбъект, "ВалютаДокумента", ВалютаДокумента);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения валюты документа'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;
	КонецЕсли;
	
	Если ЕстьРеквизит(ТекОбъект,"Организация") Тогда
		Попытка
			ОрганизацияДокумента = ПолучитьОбъект(ПолучитьЗначениеРеквизита("Организация",Параметры), Параметры, "Справочник.Организации");
			УстановитьРеквизит(ТекОбъект, "Организация", ОрганизацияДокумента);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения организации'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если Параметры.Обработка.ВидУчета = "Рег" Тогда 
		Если ЕстьРеквизит(ТекОбъект,"УправленческийУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "УправленческийУчет", Ложь);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения вида учета'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
		Если ЕстьРеквизит(ТекОбъект,"РегламентированныйУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "РегламентированныйУчет", Истина);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения вида учета'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
	Иначе		
		Если ЕстьРеквизит(ТекОбъект,"РегламентированныйУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "РегламентированныйУчет", Ложь);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения вида учета'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;			
		Если ЕстьРеквизит(ТекОбъект,"УправленческийУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "УправленческийУчет", Истина);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения вида учета'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЕстьРеквизит(ТекОбъект,"ПодразделениеКомпании") Тогда
		Если Параметры.Обработка.флЗагрузкаИзБП2 = 1 Тогда
			Попытка
				ПодразделениеОрганизации	= ПолучитьОбъект(ПолучитьЗначениеРеквизита("ПодразделениеОрганизации",Параметры), Параметры, "Справочник.ПодразделенияКомпании");
				Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
					ПодразделениеОрганизации	= Параметры.Обработка.ВыбПодразделение;
				КонецЕсли;
				УстановитьРеквизит(ТекОбъект, "ПодразделениеКомпании",	ПодразделениеОрганизации);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка в реквизите ПодразделениеКомпании'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			Попытка
				УстановитьРеквизит(ТекОбъект, "ПодразделениеКомпании",	Параметры.Обработка.ВыбПодразделение);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка в реквизите ПодразделениеКомпании'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЕстьРеквизит(ТекОбъект,"КассаКомпании") Тогда
		Попытка
			УстановитьРеквизит(ТекОбъект, "КассаКомпании", Параметры.Обработка.ВыбКасса);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка в реквизите КассаКомпании'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;		
	
	Если ЕстьРеквизит(ТекОбъект,"Автор") Тогда
		Попытка
			Ответственный = ПолучитьОбъект(ПолучитьЗначениеРеквизита("Ответственный", Параметры), Параметры, "Справочник.Пользователи");
			Если Ответственный = Неопределено Тогда
				Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;	
			УстановитьРеквизит(ТекОбъект, "Автор", Ответственный);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка в реквизите Автор'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	НеЗагружатьДоговор = Ложь;
	ВидОперации = ПолучитьЗначениеРеквизита("ВидОперации", Параметры);
	ВидОперацииВыручкаТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, ".РозничнаяВыручка", 
																	".ПриходДенежныхСредствРозничнаяВыручка");
	ВидОперацииПриходТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, "Перечисление.ВидыОперацийПКО.ПрочийПриход",
																	"Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствПрочее");
	ВидОперацииРасходТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, "Перечисление.ВидыОперацийРКО.ПрочийРасход",
							"Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее");  
	ВидОперацииНаличныеТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, ".ПолучениеНаличныхВБанке",
							".ПолучениеНаличныхДенежныхСредствВБанке"); 
	ВидОперацииИнкассацияТекст = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, ".Инкассация", 
																".ИнкассацияДенежныхСредств");
	ВидОперацииВыдачаПЛ = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, ".ВыдачаПодотчетномуЛицу", 
																".ВыдачаДенежныхСредствПодотчетнику");	
	ВидОперацииВозвратОтПЛ = ?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, ".ВозвратОтПодотчетногоЛица", 
																".ВозвратДенежныхСредствПодотчетником"); 
	Если ВидОперации = "Перечисление.ВидыОперацийПКО" + ВидОперацииВыручкаТекст Тогда
		Контрагент = Параметры.Обработка.ВыбКонтрагентПриемРозничнойВыручки;
		УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
	ИначеЕсли ВидОперации = ВидОперацииПриходТекст Тогда
		// Попытаемся получить Контрагента из документа.
		Контрагент = ПолучитьОбъект(ПолучитьЗначениеРеквизита("СубконтоКт1",Параметры), Параметры, "Справочник.Контрагенты");
		Если Контрагент <> Неопределено И НЕ Контрагент.Пустая() И ТипЗНЧ(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			// На тип надо проверять, если выбран счет, у которого другие виды субконто,
			// и при этом для данного "субконто - объекта" есть соответствие,
			// но не контрагент (и соответственно договор).
			УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
		Иначе //Если его там нет, тогда берем с формы
			Контрагент = Параметры.Обработка.ВыбКонтрагентПрочее;
			УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
		КонецЕсли;	
		
		ДоговорВзаиморасчетов = ПолучитьОбъект(ПолучитьЗначениеРеквизита("СубконтоКт2",Параметры), Параметры, "Справочник.ДоговорыКонтрагентов");
		Если ДоговорВзаиморасчетов <> Неопределено 
			И НЕ ДоговорВзаиморасчетов.Пустая() 
			И ТипЗНЧ(ДоговорВзаиморасчетов) = Тип("СправочникСсылка.ДоговорыВзаиморасчетов") Тогда
			
			УстановитьРеквизит(ТекОбъект, "ДоговорВзаиморасчетов",	ДоговорВзаиморасчетов);
		Иначе
			ДоговорВзаиморасчетов = ПолучитьДоговорДляПодстановки(?(Параметры.Обработка.флЗагрузкаИзБП2 > 0, "ПрочийПриход",
																		"ПриходДенежныхСредствПрочее"), Контрагент, Параметры);
			УстановитьРеквизит(ТекОбъект, "ДоговорВзаиморасчетов",	ДоговорВзаиморасчетов);
		КонецЕсли;	
		НеЗагружатьДоговор = Истина;
	ИначеЕсли ВидОперации = ВидОперацииРасходТекст Тогда	
		
		Контрагент = ПолучитьОбъект(ПолучитьЗначениеРеквизита("СубконтоДт1", Параметры), Параметры, "Справочник.Контрагенты");
		Если Контрагент <> Неопределено И НЕ Контрагент.Пустая() И ТипЗНЧ(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
		Иначе
			Контрагент = Параметры.Обработка.ВыбКонтрагентПрочее;
			УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
		КонецЕсли;	
		
		ДоговорВзаиморасчетов = ПолучитьОбъект(ПолучитьЗначениеРеквизита("СубконтоДт2", Параметры), Параметры, "Справочник.ДоговорыКонтрагентов");
		Если ДоговорВзаиморасчетов <> Неопределено 
			И НЕ ДоговорВзаиморасчетов.Пустая() 
			И ТипЗНЧ(ДоговорВзаиморасчетов) = Тип("СправочникСсылка.ДоговорыВзаиморасчетов")Тогда
			УстановитьРеквизит(ТекОбъект, "ДоговорВзаиморасчетов",	ДоговорВзаиморасчетов);
		Иначе
			ДоговорВзаиморасчетов = ПолучитьДоговорДляПодстановки(?(Параметры.Обработка.флЗагрузкаИзБП2 > 0,"ПрочийРасход",
										"РасходДенежныхСредствПрочее"),Контрагент, Параметры);
			УстановитьРеквизит(ТекОбъект, "ДоговорВзаиморасчетов",	ДоговорВзаиморасчетов);
		КонецЕсли;	
		НеЗагружатьДоговор = Истина;
	ИначеЕсли ВидОперации = "Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк" 
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийПКО" + ВидОперацииНаличныеТекст Тогда	
		Контрагент = Параметры.Обработка.ВыбКонтрагентВзносНаличнымиВБанк;
		УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
	ИначеЕсли СтрНайти(ВидОперации, "Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлаты") > 0 
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийРКО.ВыплатаДепонентов" Тогда
		
		Контрагент = Параметры.Обработка.ВыбКонтрагентВыплатаЗаработнойПлаты;
		УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
	ИначеЕсли ВидОперации = "Перечисление.ВидыОперацийРКО" + ВидОперацииИнкассацияТекст Тогда	
		
		Контрагент = Параметры.Обработка.ВыбКонтрагентИнкассацияДенежныхСредств;
		УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);		
	ИначеЕсли ВидОперации = "Перечисление.ВидыОперацийРКО" + ВидОперацииВыдачаПЛ 
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийПКО" + ВидОперацииВозвратОтПЛ Тогда		
		Контрагент = Неопределено;
		Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ПолучитьЗначениеРеквизита("ПринятоОт",Параметры),Истина);
		Если Сотрудник <> Справочники.Сотрудники.ПустаяСсылка() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Сотрудник = &Сотрудник";
			Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если Контрагент = Неопределено Тогда
			Контрагент = Параметры.Обработка.ВыбКонтрагентВыдачаДенежныхСредствПодотчетнику;
		КонецЕсли;
		УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
	Иначе
		Если ЕстьРеквизит(ТекОбъект,"Контрагент") Тогда
			Попытка
				Контрагент = ПолучитьОбъект(ПолучитьЗначениеРеквизита("Контрагент",Параметры), Параметры, "Справочник.Контрагенты");
				Если (ТипЗНЧ(Контрагент) <> Тип("СправочникСсылка.Контрагенты")) 
					ИЛИ (Контрагент = Неопределено) 
					ИЛИ (Контрагент.Пустая()) Тогда
					
					УстановитьРеквизит(ТекОбъект, "Контрагент",	Параметры.Обработка.ВыбКонтрагентПрочее);
				Иначе	
					УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
				КонецЕсли;
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита Контрагент'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
	
	Если НЕ НеЗагружатьДоговор 
		И Контрагент <> Неопределено 
		И (ВидОперации = "Перечисление.ВидыОперацийПКО" + ВидОперацииВыручкаТекст  
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийПКО" + ВидОперацииВозвратОтПЛ 
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк" 
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийПКО" + ВидОперацииНаличныеТекст 
		ИЛИ СтрНайти(ВидОперации, "Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлаты") > 0 
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийРКО.ВыплатаДепонентов"
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийРКО" + ВидОперацииИнкассацияТекст  
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийРКО" + ВидОперацииВыдачаПЛ  
		ИЛИ ВидОперации = "Перечисление.ВидыОперацийРКО" + ВидОперацииВозвратОтПЛ) Тогда
		
		Если ВидОперации = "Перечисление.ВидыОперацийРКО" + ВидОперацииВозвратОтПЛ Тогда
			
			ВидОперации = "Перечисление.ВидыОперацийРКО" + ВидОперацииВозвратОтПЛ; 
			
		КонецЕсли;
		
		Цель = Прав(ВидОперации, СтрДлина(ВидОперации) - СтрНайти(ВидОперации, "."));
		Цель = Прав(Цель, СтрДлина(Цель) - СтрНайти(Цель, "."));
		ДоговорВзаиморасчетов = ПолучитьДоговорДляПодстановки(Цель, Контрагент, Параметры);
		УстановитьРеквизит(ТекОбъект, "ДоговорВзаиморасчетов",	ДоговорВзаиморасчетов);
		НеЗагружатьДоговор = Истина;
	КонецЕсли;	
	
	Если ЕстьРеквизит(ТекОбъект, "Комментарий") Тогда
		Попытка
			Комментарий = "Импортирован" + " " + ТекущаяДатаСеанса() + ". Источник:" + " " + Параметры.ВидОбъекта 
							+ " " + "№" + " " +СокрЛП(ПолучитьЗначениеРеквизита("_1С_Номер", Параметры)) 
							+ " " + "от" + " " + СокрЛП(ПолучитьЗначениеРеквизита("_1С_Дата", Параметры)) + "";
			УстановитьРеквизит(ТекОбъект, "Комментарий", Комментарий);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита Комментарий'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;	
	КонецЕсли;	
	
	// Если нет в шапке
	Если ЕстьРеквизит(ТекОбъект,"КурсДокумента") Тогда
		Попытка
			КурсДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекОбъект.Дата);
			КурсДокумента = КурсДокумента.Курс / ?(КурсДокумента.Кратность = 0, 1, КурсДокумента.Кратность);
			УстановитьРеквизит(ТекОбъект, "КурсДокумента", ?(КурсДокумента = 0, 1, КурсДокумента));			
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита КурсДокумента'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;	
	
	// Если нет значения строки
	Если НЕ НеЗагружатьДоговор И ЕстьРеквизит(ТекОбъект,"ДоговорВзаиморасчетов") Тогда
		Попытка
			Если ЗначенияСтроки <> Неопределено И ЗначенияСтроки["ДоговорКонтрагента"] <> Неопределено Тогда
				ДоговорВзаиморасчетов = ПолучитьОбъект(ЗначенияСтроки["ДоговорКонтрагента"], Параметры, "Справочник.ДоговорыКонтрагентов");
			Иначе
				ДоговорВзаиморасчетов = ПолучитьОбъект(ПолучитьЗначениеРеквизита("ДоговорКонтрагента", Параметры), Параметры, "Справочник.ДоговорыКонтрагентов");
			КонецЕсли;
			УстановитьРеквизит(ТекОбъект, "ДоговорВзаиморасчетов",	ДоговорВзаиморасчетов);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита ДоговорВзаиморасчетов'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли; 
	
    // Если нет в шапке
	Если ЕстьРеквизит(ТекОбъект,"Патент") Тогда
		Попытка
			Патент = ПолучитьОбъект(ПолучитьЗначениеРеквизита("Патент",Параметры),Параметры, "Справочник.Патенты");
			УстановитьРеквизит(ТекОбъект, "Патент", Патент);			
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита Патент'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;	

	
	// Очищение табличных частей документа.
	Для Каждого ТекТабл Из ТекОбъект.Метаданные().ТабличныеЧасти Цикл
		ТекОбъект[ТекТабл.Имя].Очистить();
	КонецЦикла;	
	
КонецПроцедуры	//	ЗагрузитьШапку

Процедура ЗагрузитьШапкуДляВыписки(ТекОбъект, ЗначенияСтроки, Параметры)
	
	// Уберем пометку удаления, если она есть
	Если ТекОбъект.ПометкаУдаления Тогда
		ТекОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;	
	
	// Отменим проведение, если документ был проведен ранее.
	Если ТекОбъект.Проведен Тогда
		ТекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
	
	Если Параметры.ЭтоНовыйОбъект Тогда
		ТекОбъект.Дата	= ЗначенияСтроки.Дата;
		
		НомерДокумента	= ЗначенияСтроки["Номер"];
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			РазрядностьНомераДокумента	= ТекОбъект.Метаданные().ДлинаНомера;
			Если РазрядностьНомераДокумента > 0 Тогда
				УстановитьРеквизит(ТекОбъект, "Номер",		ПривестиНомерДокумента(НомерДокумента, РазрядностьНомераДокумента));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним "общие" реквизиты документа.
	Если ЕстьРеквизит(ТекОбъект,"ВалютаДокумента") Тогда
		Попытка
			ВалютаДокумента = ПолучитьОбъект(ЗначенияСтроки["ВалютаДокумента"], Параметры, "Справочник.Валюты");
			УстановитьРеквизит(ТекОбъект, "ВалютаДокумента", ВалютаДокумента);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита ВалютаДокумента'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		БанковскийСчет = ПолучитьОбъект(ЗначенияСтроки["БанковскийСчет"], Параметры, "Справочник.БанковскиеСчета");
		УстановитьРеквизит(ТекОбъект, "БанковскийСчет", БанковскийСчет);
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита БанковскийСчет'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
	УстановитьРеквизит(ТекОбъект,"ХозОперация",Справочники.ХозОперации.СтрокаБанковскойВыписки);
	
	Если ЕстьРеквизит(ТекОбъект,"Организация") Тогда
		Попытка
			ОрганизацияДокумента = ПолучитьОбъект(ЗначенияСтроки["Организация"], Параметры, "Справочник.Организации");
			УстановитьРеквизит(ТекОбъект, "Организация", ОрганизацияДокумента);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита Организация'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если ЕстьРеквизит(ТекОбъект, "ПодразделениеКомпании") Тогда
		Если Параметры.Обработка.флЗагрузкаИзБП2 = 1 Тогда
			Попытка				
				ПодразделениеОрганизации	= ПолучитьОбъект(ЗначенияСтроки["ПодразделениеОрганизации"], Параметры, "Справочник.ПодразделенияКомпании");
				
				Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
					ПодразделениеОрганизации	= Параметры.Обработка.ВыбПодразделение;
				КонецЕсли;
				УстановитьРеквизит(ТекОбъект, "ПодразделениеКомпании",	ПодразделениеОрганизации);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита ПодразделениеКомпании'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			Попытка
				УстановитьРеквизит(ТекОбъект, "ПодразделениеКомпании",	Параметры.Обработка.ВыбПодразделение);
			Исключение 	
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита ПодразделениеКомпании'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
	Если Параметры.Обработка.ВидУчета = "Рег" Тогда 
		Если ЕстьРеквизит(ТекОбъект,"УправленческийУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "УправленческийУчет", Ложь);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита УправленческийУчет'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
		Если ЕстьРеквизит(ТекОбъект,"РегламентированныйУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "РегламентированныйУчет", Истина);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита РегламентированныйУчет'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
	Иначе		
		Если ЕстьРеквизит(ТекОбъект,"РегламентированныйУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "РегламентированныйУчет", Ложь);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита РегламентированныйУчет'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;			
		Если ЕстьРеквизит(ТекОбъект,"УправленческийУчет") Тогда
			Попытка
				УстановитьРеквизит(ТекОбъект, "УправленческийУчет", Истина);
			Исключение  
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита УправленческийУчет'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;		
	
	Если ЕстьРеквизит(ТекОбъект,"Автор") Тогда
		Попытка
			Ответственный = ПолучитьОбъект(ЗначенияСтроки["Ответственный"], Параметры, "Справочник.Пользователи");
			Если Ответственный = Неопределено Тогда
				Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;	
			УстановитьРеквизит(ТекОбъект, "Автор", Ответственный);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита Автор'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		КонецПопытки;
	КонецЕсли;
	Если ЕстьРеквизит(ТекОбъект,"Контрагент") Тогда
		Попытка
			Контрагент = ПолучитьОбъект(ЗначенияСтроки["Контрагент"], Параметры, "Справочник.Контрагенты");
			УстановитьРеквизит(ТекОбъект, "Контрагент",	Контрагент);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита Контрагент'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		КонецПопытки;
	КонецЕсли;
	
	Если ЕстьРеквизит(ТекОбъект, "СтавкаНДС") Тогда
		Попытка
			СтавкаНДС = ПолучитьОбъект(ЗначенияСтроки["СтавкаНДС"], Параметры, "Справочник.СтавкиНДС");
			УстановитьРеквизит(ТекОбъект, "СтавкаНДС", СтавкаНДС);
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
	Если ЕстьРеквизит(ТекОбъект, "НазначениеПлатежа") Тогда
		Попытка
			НазначениеПлатежа = ЗначенияСтроки["НазначениеПлатежа"];
			УстановитьРеквизит(ТекОбъект, "НазначениеПлатежа",	НазначениеПлатежа);
		Исключение КонецПопытки;
	КонецЕсли;
	
	Если ЕстьРеквизит(ТекОбъект,"Комментарий") Тогда
		Попытка
			Комментарий = "Импортирован " + ТекущаяДатаСеанса() + ". " + НСтр("ru = 'Источник:'") + " " 
			+ НСтр("ru = 'Банковские платежные документы'") + " " + "от" + " " + СокрЛП(ЗначенияСтроки.Дата) + "";
			УстановитьРеквизит(ТекОбъект, "Комментарий", Комментарий);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита Комментарий'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		КонецПопытки;	
	КонецЕсли;
	
	Если ЕстьРеквизит(ТекОбъект,"КурсДокумента") Тогда
		Попытка
			КурсДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекОбъект.Дата);
			КурсДокумента = КурсДокумента.Курс / ?(КурсДокумента.Кратность = 0,1,КурсДокумента.Кратность);
			УстановитьРеквизит(ТекОбъект, "КурсДокумента", ?(КурсДокумента = 0, 1, КурсДокумента));			
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизита КурсДокумента'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;				
	
	// Очищение табличных частей документа
	Для Каждого ТекТабл Из ТекОбъект.Метаданные().ТабличныеЧасти Цикл
		ТекОбъект[ТекТабл.Имя].Очистить();
	КонецЦикла;
	
КонецПроцедуры

// Процедура записи и проведения документа.
Процедура ЗакрытьДокумент(ТекОбъект, Параметры, Режим = "")
	
	// Запишем и, если необходимо, проведем документ.
	Если НЕ Параметры.Обработка.ПроводитьДокументы Тогда
		Режим							= РежимЗаписиДокумента.Запись;
		ТекОбъект.ОбменДанными.Загрузка	= Истина;
	Иначе
		Режим = ?(ПолучитьЗначениеРеквизита("_1С_Проведен",Параметры) = Истина, РежимЗаписиДокумента.Проведение, 
					РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	// Сначала запишем документ
	ЗаписалиДокумент = Ложь;
	Попытка
		ТекОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗаписалиДокумент = Истина;
	Исключение
		// Записать не получилось, проверим не из за номера ли это.
		ТекНомерДокумента = ТекОбъект.Номер;
		ТекОбъект.УстановитьНовыйНомер();
		Попытка
			ТекОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаписалиДокумент = Истина;
		Исключение
			// Записать не получилось, номер не причем.
			ОписаниеОшибки=ОписаниеОшибки();
			ТекОбъект.Номер = ТекНомерДокумента;
			НовыйСообщение = Параметры.СписокСообщений.Добавить();
			НовыйСообщение.Сообщение = ("" + ОписаниеОшибки);
			ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета,"311",ПолучитьПредставление(Параметры.ВидОбъекта, Параметры),ТекОбъект,ОписаниеОшибки);
		КонецПопытки
	КонецПопытки;
	
	Если ЗаписалиДокумент 
		И Режим = РежимЗаписиДокумента.Проведение 
		И Параметры.Обработка.ПроводитьДокументы Тогда // ЗакрытиеДокументов <> "НеПроводить" Тогда
		
		Если Строка(ТекОбъект.Метаданные().Проведение) = "Разрешить" Тогда
			Попытка 
				ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение  
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка проведения документа'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // ЗакрытьДокумент

// Функция вызывается в том случае, если соответствие не получено, но объект найден поиском по реквизитам.
// Проверяется, а не существует ли уже соответствие с найденным объектом, но не с ссылкой загружаемого объекта.
Функция ВозможноУстановлениеСоответствия(ОбъектБД, Параметры)
	
	Если ОбъектБД.Ссылка.Пустая() Тогда 
		Возврат Ложь; 
	КонецЕсли;
	УИД = ОбъектБД.Ссылка.УникальныйИдентификатор();
	Результат = ПроверитьНаУникальность(УИД,,Параметры,,Истина);
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет на уникальность поле "ID_Source". Если допустить запись неуникального значения, то упадет индекс.
// В этом случае может возникнуть невозможность добавления новых строк в таблицу соответствия.
// Функция вызывается из процедур устанавливающих соответствие.
Функция ПроверитьНаУникальность(ID_Source, НовыйНомерСтроки, Параметры, НомерТекЗаписи = "",Проверка = Ложь)
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		Возврат Истина;
	КонецЕсли;
	
	НовыйНомерСтроки = "";
	ТекущийИндекс = Параметры.БД_ТС.ТекущийИндекс;
	Параметры.БД_ТС.ТекущийИндекс = Параметры.БД_ТС.индексы.Найти("IndSource");
	Если НомерТекЗаписи = "" Тогда
		Если Параметры.БД_ТС.Найти(ID_Source,"=") Тогда
			Попытка
				ПерезаписатьСоответствие = Ложь;
				ИмяМенеджера = СокрЛП(Параметры.БД_ТС.ManagerRar);
				Если ПустаяСтрока(ИмяМенеджера) Тогда
					ИмяМенеджера = СокрЛП(Параметры.БД_ТС.Manager);
					Если ИмяМенеджера = "ДоговорыКонтрагентов" Тогда
						ИмяМенеджера = "ДоговорыВзаиморасчетов"
					КонецЕсли;
				КонецЕсли;	
				Если НЕ ПустаяСтрока(ИмяМенеджера) Тогда
					Попытка УИД = Новый УникальныйИдентификатор(СокрЛП(Параметры.БД_ТС.ID_Source));
					Исключение ПерезаписатьСоответствие = Истина; КонецПопытки;
					
					Если СтрНайти(Параметры.ПредТипОбъекта, "Справочник") = 1 Тогда
						Менеджер = Справочники[ИмяМенеджера];
					Иначе Менеджер = Документы[ИмяМенеджера];
					КонецЕсли;
					
					ОбъектСсылка = Менеджер.ПолучитьСсылку(УИД);
					Если ОбъектСсылка = Неопределено Тогда ПерезаписатьСоответствие = Истина; КонецЕсли;
					
					Попытка Если ОбъектСсылка.Пустая() Тогда ПерезаписатьСоответствие = Истина; КонецЕсли;
					Исключение ПерезаписатьСоответствие = Истина; КонецПопытки;
					
					// Проверим на "битую" ссылку.
					Попытка 
						Если ОбъектСсылка.ПолучитьОбъект() = Неопределено Тогда
							ПерезаписатьСоответствие = Истина;
						КонецЕсли;
					Исключение ПерезаписатьСоответствие = Истина; КонецПопытки;
				Иначе
					ПерезаписатьСоответствие = Истина;
				КонецЕсли;
			Исключение 
				ПерезаписатьСоответствие = Истина;
			КонецПопытки;
			
			// Если в результате ПерезаписатьСоответствие = Истина, значит в таблицу соответствия записана
			// битая ссылка раруса, ее можно перезаписать.
			Если НЕ ПерезаписатьСоответствие Тогда
				Если НЕ Проверка  Тогда
					НовыйСообщение = Параметры.СписокСообщений.Добавить();
					НовыйСообщение.Сообщение = (НСтр("ru = 'Попытка записи в таблицу соответствия неуникального элемента'") + " <" 
					+ ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры) 
					+ ">, " + НСтр("ru = 'запись соответствия не произведена.'"));
				КонецЕсли;	
				Возврат Ложь;
			Иначе
				НовыйНомерСтроки = Параметры.БД_ТС.НомерЗаписи();
				Возврат Истина;
			КонецЕсли;	
		Иначе
			Возврат Истина;
		КонецЕсли;	
	Иначе
		Если Параметры.БД_ТС.Найти(ID_Source,"=") Тогда 
			Если Параметры.БД_ТС.НомерЗаписи() <> НомерТекЗаписи Тогда 
				НовыйСообщение = Параметры.СписокСообщений.Добавить();
				НовыйСообщение.Сообщение = (НСтр("ru = 'Попытка записи в таблицу соответствия неуникального элемента'")+ " <" 
				+ ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры) 
				+ ">, " +НСтр("ru = 'запись соответствия не произведена.'"));
				Возврат Ложь;
			Иначе
				Параметры.БД_ТС.Перейти(НомерТекЗаписи);	
			КонецЕсли;
		Иначе
			Параметры.БД_ТС.Перейти(НомерТекЗаписи);	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

// Функция проверяет на уникальность поле "ID_Source". 
// Вызывается из процедур ищущих свободный номер.
Функция УникальныйИдСорс(ID_Source, БД_ТС, Параметры)
	
	Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
		Возврат Истина;
	КонецЕсли;
	
	БД_ТС.ТекущийИндекс = БД_ТС.индексы.Найти("IndSource");
	
	Если БД_ТС.Найти(ID_Source,"=") Тогда		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ СПРАВОЧНИКОВ

// Процедура загрузки справочника <Контрагенты> в справочник <Контрагенты>.

Процедура ЗагрузитьСправочник_Контрагенты(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "Контрагенты";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер		= Справочники.Контрагенты;
	ТекОбъект		= СпрМенеджер.ПустаяСсылка();
	
	НайденнаяСтрока	= Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторОбъекта, "СтароеЗначение");
	Если НайденнаяСтрока<>Неопределено Тогда
		ИдентификаторОбъекта	= НайденнаяСтрока.НовоеЗначение;
	КонецЕсли;	
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		
		ИдентификаторРодителя = ПолучитьЗначениеРеквизита("_1С_Родитель",Параметры);
		НайденнаяСтрока	= Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторРодителя, "СтароеЗначение");
		Если НайденнаяСтрока<>Неопределено Тогда
			ИдентификаторРодителя	= НайденнаяСтрока.НовоеЗначение;
		КонецЕсли;		
		Если НЕ ПустаяСтрока(ИдентификаторРодителя) Тогда
			РодительОбъекта = ПолучитьОбъект(ИдентификаторРодителя, Параметры, "Справочник.Контрагенты");
			Если РодительОбъекта = Неопределено Тогда
				Параметры.Вставить("ПереместитьЗапись", Истина);
				Параметры.Вставить("ПереместитьЗапись",  ?(Параметры.Обработка.НеСоздаватьНовыхКонтрагентов, Ложь, Истина));
				Возврат;
			КонецЕсли;
			
			ПоискПоИННиКПП = Ложь;
			ПоискПоИНН = Ложь;	
			ПоискПоНаименованию = Ложь;
			
			ИННКонтрагента = ПолучитьЗначениеРеквизита("ИНН",Параметры);
			КППКонтрагента = ПолучитьЗначениеРеквизита("КПП",Параметры);
			
			Если НЕ ЗначениеЗаполнено(ИННКонтрагента) Тогда
				ПоискПоНаименованию = Истина;
			ИначеЕсли ЗначениеЗаполнено(КППКонтрагента) Тогда
				ПоискПоИННиКПП = Истина;
			Иначе
				ПоискПоИНН = Истина;
			КонецЕсли;	
			Если ПоискПоИННиКПП Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН
				|	И Контрагенты.КПП = &КПП";
				Запрос.УстановитьПараметр("ИНН",ИННКонтрагента);
				Запрос.УстановитьПараметр("КПП",КППКонтрагента);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ТекОбъект = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если ПоискПоИНН Тогда
				ТекОбъект = СпрМенеджер.НайтиПоРеквизиту("ИНН",ИННКонтрагента);
			КонецЕсли;
			Если ПоискПоНаименованию Тогда
				ТекОбъект = НайтиСправочникПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры),"Контрагенты",
														  ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа",Параметры),РодительОбъекта);
			КонецЕсли;			
			
			Если ТекОбъект.Пустая() Тогда
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа",Параметры) Тогда
					ТекОбъект = СпрМенеджер.СоздатьГруппу();
				Иначе 
					ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				КонецЕсли;
				
				Если НЕ Параметры.Обработка.НеСоздаватьНовыхКонтрагентов Тогда 
					Попытка 
						ТекОбъект.Родитель = РодительОбъекта;
					Исключение 
						НовыйСообщение = Параметры.СписокСообщений.Добавить();
						НовыйСообщение.Сообщение = (НСтр("ru = 'Ошибка при установке родителя'") + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
				// Установим УИД из БП для нового объекта
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
				
			Иначе
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа",Параметры) <> ТекОбъект.ЭтоГруппа Тогда
					Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа",Параметры) Тогда
						ТекОбъект = СпрМенеджер.СоздатьГруппу();
					Иначе 
						ТекОбъект = СпрМенеджер.СоздатьЭлемент();
					КонецЕсли;
					
					// Установим УИД из БП для нового объекта
					УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
					
				Иначе
					ТекОбъект = ТекОбъект.ПолучитьОбъект();
					
					// Определим битый идентификатор объекта приемника по идентификатору источника.
					// Несоответствие удалим.
					УстановкаСоответствияСсылокОбъекта(Параметры, ТекОбъект, ИдентификаторОбъекта);
					
				КонецЕсли;
			КонецЕсли;
		Иначе			
			
			ПоискПоИННиКПП = Ложь;
			ПоискПоИНН = Ложь;	
			ПоискПоНаименованию = Ложь;
			
			ИННКонтрагента = ПолучитьЗначениеРеквизита("ИНН", Параметры);
			КППКонтрагента = ПолучитьЗначениеРеквизита("КПП", Параметры);
			
			Если НЕ ЗначениеЗаполнено(ИННКонтрагента) Тогда
				ПоискПоНаименованию = Истина;
			ИначеЕсли ЗначениеЗаполнено(КППКонтрагента) Тогда
				ПоискПоИННиКПП = Истина;
			Иначе
				ПоискПоИНН = Истина;
			КонецЕсли;	
			Если ПоискПоИННиКПП Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН
				|	И Контрагенты.КПП = &КПП";
				Запрос.УстановитьПараметр("ИНН",ИННКонтрагента);
				Запрос.УстановитьПараметр("КПП",КППКонтрагента);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ТекОбъект = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если ПоискПоИНН Тогда
				ТекОбъект = СпрМенеджер.НайтиПоРеквизиту("ИНН",ИННКонтрагента);
			КонецЕсли;
			Если ПоискПоНаименованию Тогда
				ТекОбъект = НайтиСправочникПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры),"Контрагенты",
														  ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа",Параметры),РодительОбъекта);
			КонецЕсли;				
			
			Если ТекОбъект.Пустая() Тогда
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
					ТекОбъект = СпрМенеджер.СоздатьГруппу();
				Иначе 
					ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				КонецЕсли;
				// Установим УИД из БП для нового объекта
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
			Иначе
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) <> ТекОбъект.ЭтоГруппа Тогда
					Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
						ТекОбъект = СпрМенеджер.СоздатьГруппу();
					Иначе 
						ТекОбъект = СпрМенеджер.СоздатьЭлемент();
					КонецЕсли;
					// Установим УИД из БП для нового объекта
					УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
				Иначе
					ТекОбъект = ТекОбъект.ПолучитьОбъект();
					
					// Определим битый идентификатор объекта приемника по идентификатору источника.
					// Несоответствие удалим.
					УстановкаСоответствияСсылокОбъекта(Параметры, ТекОбъект, ИдентификаторОбъекта);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	Если ТекОбъект.Ссылка.Пустая() И Параметры.Обработка.НеСоздаватьНовыхКонтрагентов Тогда 
		НовыйСообщение = Параметры.СписокСообщений.Добавить();
		НовыйСообщение.Сообщение = (НСтр("ru = 'Нет соответствия у контрагента'") + " " 
		+ ПолучитьПредставлениеСправочника(Параметры.ВидОбъекта, Параметры) + ", " 
		+ НСтр("ru = 'контрагент не загружен.'"));		
		Возврат;
	КонецЕсли;	
	
	// ****************************
	УстановитьРеквизит(ТекОбъект, "Наименование",       	ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры));
	УстановитьРеквизит(ТекОбъект, "Комментарий",			ПолучитьЗначениеРеквизита("Комментарий",Параметры));
	
	Если НЕ ТекОбъект.ЭтоГруппа Тогда
		УстановитьРеквизит(ТекОбъект, "НаименованиеПолное",	ПолучитьЗначениеРеквизита("НаименованиеПолное",Параметры));
		УстановитьРеквизит(ТекОбъект, "ИНН",       			ПолучитьЗначениеРеквизита("ИНН",Параметры));
		УстановитьРеквизит(ТекОбъект, "КодПоОКПО",       	ПолучитьЗначениеРеквизита("КодПоОКПО",Параметры));
		УстановитьРеквизит(ТекОбъект, "КПП",       			ПолучитьЗначениеРеквизита("КПП",Параметры));
		
		Если НЕ ЭтоЮридическоеЛицо(ТекОбъект, Параметры) Тогда
			УстановитьРеквизит(ТекОбъект, "ФормаСобственности",Перечисления.ФормыСобственности.ЧастноеЛицо);
			Если ТекОбъект.Ссылка.Метаданные().Реквизиты.Найти("Фамилия")<>Неопределено Тогда
				Если СтрНайти(ТекОбъект.Наименование," ")>0 Тогда
					УстановитьРеквизит(ТекОбъект, "Фамилия", Лев(ТекОбъект.Наименование,СтрНайти(ТекОбъект.Наименование," ")-1));
				Иначе
					УстановитьРеквизит(ТекОбъект, "Фамилия", СокрЛП(ТекОбъект.Наименование));
				КонецЕсли;
			КонецЕсли;
			Если ТекОбъект.Ссылка.Метаданные().Реквизиты.Найти("СогласиеНаОбработкуПерсональныхДанных")<>Неопределено Тогда
				УстановитьРеквизит(ТекОбъект, "СогласиеНаОбработкуПерсональныхДанных", Перечисления.ВариантыОтветов.Спрашивать);
			КонецЕсли;
		КонецЕсли;	
		
		ИдентификаторРодителя = ПолучитьЗначениеРеквизита("_1С_Родитель",Параметры);
		ПредИдентификаторРодителя = ПолучитьЗначениеРеквизита("_1С_Родитель",Параметры);
		Пока НЕ ПустаяСтрока(ИдентификаторРодителя) Цикл			
			ПредИдентификаторРодителя = ИдентификаторРодителя;
			ИдентификаторРодителя = ПолучитьЗначениеРеквизита("_1С_Родитель",Параметры,"Справочник.Контрагенты",ИдентификаторРодителя);
		КонецЦикла;	
		
		Если НЕ ПустаяСтрока(ПредИдентификаторРодителя) Тогда
			НаименованиеРодителя = ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры,"Справочник.Контрагенты",ПредИдентификаторРодителя);
			
			Если СтрНайти(НРег(НаименованиеРодителя),"поставщик") Тогда
				ВидКонтрагента = Перечисления.ВидыКонтрагентов.Поставщик;
			ИначеЕсли СтрНайти(НРег(НаименованиеРодителя),"покупател") Тогда 
				ВидКонтрагента = Перечисления.ВидыКонтрагентов.Покупатель;
			Иначе
				ВидКонтрагента = Перечисления.ВидыКонтрагентов.Прочее;
			КонецЕсли;
		Иначе
			ВидКонтрагента = Перечисления.ВидыКонтрагентов.Прочее;
		КонецЕсли;	
		
		УстановитьРеквизит(ТекОбъект, "ВидКонтрагента", ВидКонтрагента);
		
		ЗагрузитьКонтактнуюИнформацию(ТекОбъект, ИдентификаторОбъекта, Параметры);
		
	КонецЕсли;
	
	// Закончим работу со справочником.
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_Контрагенты

// Процедура загрузки справочника <ДоговорыВзаиморасчетов> в справочник <ДоговорыКонтрагентов>.
Процедура ЗагрузитьСправочник_ДоговорыКонтрагентов(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "ДоговорыВзаиморасчетов";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда 
		Возврат; 
	КонецЕсли;
	
	// Попробуем получить владельца.
	ИдентификаторВладельца = ПолучитьИдентификаторВладельца(Параметры);
	Владелец				= ПолучитьОбъект(ИдентификаторВладельца, Параметры, "Справочник.Контрагенты");
	Если Владелец = Неопределено ИЛИ Владелец.Пустая() Тогда
		Параметры.Вставить("ПереместитьЗапись", Истина);
		Возврат;
	КонецЕсли;
	
	// Попробуем получить валюту.
	ВалютаВзаиморасчетов	= ПолучитьОбъект(ПолучитьЗначениеРеквизита("ВалютаВзаиморасчетов", Параметры), 
																				Параметры, "Справочник.Валюты");
	Если ВалютаВзаиморасчетов = Неопределено ИЛИ ВалютаВзаиморасчетов.Пустая() Тогда
		Параметры.Вставить("ПереместитьЗапись", Истина);
		Возврат;
	КонецЕсли;
	
	ТекОрганизация = ПолучитьОбъект(ПолучитьЗначениеРеквизита("Организация",Параметры), 
															Параметры, "Справочник.Организации");
	Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда
		Параметры.Вставить("ПереместитьЗапись", Истина);
		Возврат;
	КонецЕсли;
	
	СпрМенеджер		= Справочники.ДоговорыВзаиморасчетов;
	ТекОбъект		= СпрМенеджер.ПустаяСсылка();
	
	НайденнаяСтрока	= Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторОбъекта, "СтароеЗначение");
	Если НайденнаяСтрока<>Неопределено Тогда
		ИдентификаторОбъекта	= НайденнаяСтрока.НовоеЗначение;
	КонецЕсли;	
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(
			СпрМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		
		ТекОбъект = СпрМенеджер.НайтиПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры), 
																							Истина,, Владелец);
		Если ТекОбъект.Пустая() Тогда
			ТекОбъект = СпрМенеджер.СоздатьЭлемент();
			// Установим УИД из БП для нового объекта
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		Иначе
			ТекОбъект = ТекОбъект.ПолучитьОбъект();
			
			// Определим битый идентификатор объекта приемника по идентификатору источника.
			// Несоответствие удалим.
			УстановкаСоответствияСсылокОбъекта(Параметры, ТекОбъект, ИдентификаторОбъекта);
			
			Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
			Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
		КонецЕсли;   
		
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	// Установим значения реквизитов.
	ТекОбъект.Владелец = Владелец;
	УстановитьРеквизит(ТекОбъект, "Организация",			ТекОрганизация);
	
	Если Параметры.Обработка.флЗагрузкаИзБП2 > 0 Тогда
		УстановитьРеквизит(ТекОбъект, "СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически);
	Иначе
		ВедениеВзаиморасчетов = ПолучитьЗначениеРеквизита("ВедениеВзаиморасчетов", Параметры);
		УстановитьРеквизит(ТекОбъект, "СпособЗачетаАвансов",		
							?(ВедениеВзаиморасчетов = "Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом",
								Перечисления.СпособыЗачетаАвансов.Автоматически,
								Перечисления.СпособыЗачетаАвансов.НеЗачитывать));
	КонецЕсли;	
	УстановитьРеквизит(ТекОбъект, "ВалютаВзаиморасчетов", 	ВалютаВзаиморасчетов);
	
	// Установим вид договора и тип цен.
	ТипЦен  = "";
	ВидДоговора = ПолучитьЗначениеРеквизита("ВидДоговора", Параметры);
	Если СтрНайти(ВидДоговора, ".СПоставщиком") > 0 Тогда
		ТипЦен = ПолучитьЗначениеРеквизита("ТипЦен", Параметры);
		ВидДоговора = Перечисления.ВидыДоговоров.Покупка;
		
	ИначеЕсли СтрНайти(ВидДоговора, ".СПокупателем") > 0 Тогда
		ТипЦен = ПолучитьЗначениеРеквизита("ТипЦен", Параметры);
		ВидДоговора = Перечисления.ВидыДоговоров.Продажа;
		
	ИначеЕсли СтрНайти(ВидДоговора, ".СКомиссионером") > 0 
		ИЛИ СтрНайти(ВидДоговора, ".СКомитентом") > 0 Тогда
		
		Если Метаданные.Перечисления.ВидыДоговоров.ЗначенияПеречисления.Найти("Комиссия") = Неопределено Тогда
			Если СтрНайти(ВидДоговора, ".СКомиссионером") > 0 Тогда
				ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером;
			Иначе
				ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
	КонецЕсли;
	УстановитьРеквизит(ТекОбъект, "ВидДоговора", ВидДоговора);
	
	Если НЕ ПустаяСтрока(ТипЦен) Тогда
		УстановитьРеквизит(ТекОбъект, "ТипЦен", ПолучитьОбъект(ТипЦен, Параметры, "Справочник.ТипыЦенНоменклатуры"));
	КонецЕсли;		
	
	УстановитьРеквизит(ТекОбъект, "Наименование",       				ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
	УстановитьРеквизит(ТекОбъект, "НаименованиеПолное",					ТекОбъект.Наименование);
	УстановитьРеквизит(ТекОбъект, "Комментарий",       					ПолучитьЗначениеРеквизита("Комментарий", Параметры));
	УстановитьРеквизит(ТекОбъект, "ПроцентКомиссионногоВознаграждения",	
								  ПолучитьЗначениеРеквизита("ПроцентКомиссионногоВознаграждения", Параметры));
	
	Если Параметры.ЭтоНовыйОбъект Тогда
		УстановитьРеквизит(ТекОбъект, "ПодразделениеКомпании", 			Параметры.Обработка.ВыбПодразделение);
		УстановитьРеквизит(ТекОбъект, "ДатаНачала", 					Параметры.Обработка.ВыбДатаНачалаДляДоговоров);
		УстановитьРеквизит(ТекОбъект, "НомерДоговора", 					ПолучитьЗначениеРеквизита("_1С_Код", Параметры));
		УстановитьРеквизит(ТекОбъект, "ТипДоговора",					Перечисления.ТипыДоговоров.Договор);
		УстановитьРеквизит(ТекОбъект, "СпособЗачетаАвансов",			ТекОрганизация.СпособЗачетаАвансов);
		УстановитьРеквизит(ТекОбъект, "СпособВеденияВзаиморасчетов",	ПраваИНастройкиПользователя.Значение("ОсновнойСпособВеденияВзаиморасчетов"));
	КонецЕсли;
	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_ДоговорыВзаиморасчетов

// Процедура загрузки справочника <Валюты> в справочник <Валюты> .
Процедура ЗагрузитьСправочник_Валюты(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "Валюты";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер = Справочники.Валюты;
	ТекОбъект = СпрМенеджер.ПустаяСсылка();
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(
			СпрМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		// Справочник особенный, нужно проверять соответствие также и по коду из ОКВ.	
		ТекОбъектСсылка = СпрМенеджер.НайтиПоКоду(ПолучитьЗначениеРеквизита("_1С_Код",Параметры));
		Если НЕ ТекОбъектСсылка.Ссылка.Пустая() Тогда		                         
			Если НЕ ВозможноУстановлениеСоответствия(ТекОбъектСсылка, Параметры) Тогда
				НовыйСообщение = Параметры.СписокСообщений.Добавить();
				НовыйСообщение.Сообщение = (НСтр("ru = 'Не возможно установить новое соответствие валюты'")+ " " +ТекОбъектСсылка
				+ "." + НСтр("ru = 'Будет создан новый элемент справочника.'"));
				ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
			Иначе
				ТекОбъект = ТекОбъектСсылка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			ТекОбъект = СпрМенеджер.СоздатьЭлемент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;		
	КонецЕсли;
	
	// Установим значения реквизитов.
	УстановитьРеквизит(ТекОбъект, "Код",		        ПолучитьЗначениеРеквизита("_1С_Код",Параметры));
	УстановитьРеквизит(ТекОбъект, "Наименование",		ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры));
	УстановитьРеквизит(ТекОбъект, "НаименованиеПолное", ПолучитьЗначениеРеквизита("ПолнНаименование",Параметры));	
	// Закончим работу со справочником.
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_Валюты

// Процедура загрузки справочника <Пользователи> в справочник <Пользователи>.
Процедура ЗагрузитьСправочник_Пользователи(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "Пользователи";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер				= Справочники.Пользователи;
	ТекОбъект				= СпрМенеджер.ПустаяСсылка();
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		ТекОбъект			= СпрМенеджер.СоздатьЭлемент();
		УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
	Иначе	
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	// Установим значения реквизитов
	УстановитьРеквизит(ТекОбъект, "Наименование", ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры));	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);	
КонецПроцедуры  // ЗагрузитьСправочник_Пользователи

// Процедура загрузки справочника <ТипыЦенНоменклатуры> в справочник <ТипыЦен>.
Процедура ЗагрузитьСправочник_ТипыЦенНоменклатуры(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "ТипыЦен";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер				= Справочники.ТипыЦен;
	ТекОбъект				= СпрМенеджер.ПустаяСсылка();
	
	// Вводим новый элемент только если еще такой не загружали.
	Если ПолучитьОбъектПриемник(
			СпрМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект, Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	Иначе
		ТекОбъект = СпрМенеджер.СоздатьЭлемент();
		// Установим УИД из БП для нового объекта
		УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
	КонецЕсли;
	
	// Установим значения реквизитов.
	УстановитьРеквизит(ТекОбъект, "Наименование",	          ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры));
	УстановитьРеквизит(ТекОбъект, "ВалютаЦены",		          
						ПолучитьОбъект(ПолучитьЗначениеРеквизита("ВалютаЦены",Параметры), Параметры, "Справочник.Валюты"));
	УстановитьРеквизит(ТекОбъект, "ЦенаВключаетНДС",          ПолучитьЗначениеРеквизита("ЦенаВключаетНДС",Параметры));
	УстановитьРеквизит(ТекОбъект, "ОкруглятьВБольшуюСторону", ПолучитьЗначениеРеквизита("ОкруглятьВБольшуюСторону",Параметры));
	УстановитьРеквизит(ТекОбъект, "Комментарий",			  ПолучитьЗначениеРеквизита("Комментарий",Параметры));
	УстановитьРеквизит(ТекОбъект, "АлгоритмПолученияЦены",	  Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре);
	УстановитьРеквизит(ТекОбъект, "Закупка",  				  Истина);
	УстановитьРеквизит(ТекОбъект, "Продажа",  				  Истина);
	УстановитьРеквизит(ТекОбъект, "Точность",  				  2);
	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_ТипыЦен

// Процедура загрузки справочника <БанковскиеСчета> в справочник <БанковскиеСчета>.
Процедура ЗагрузитьСправочник_БанковскиеСчета(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "БанковскиеСчета";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер				= Справочники.БанковскиеСчета;
	ТекОбъект				= СпрМенеджер.ПустаяСсылка();
	
	Банк					= Неопределено;
	ИдентификаторБанка		= ПолучитьЗначениеРеквизита("Банк",Параметры);
	НайденнаяСтрока			= Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторБанка, "СтароеЗначение");
	Если НайденнаяСтрока<>Неопределено Тогда
		ИдентификаторБанка	= НайденнаяСтрока.НовоеЗначение;
	КонецЕсли;	
	Если НЕ ПустаяСтрока(ИдентификаторБанка) Тогда
		Банк				= ПолучитьОбъект(ИдентификаторБанка, Параметры, "Справочник.КлассификаторБанков");
		Если Банк = Неопределено Тогда
			// Возможно банк еще не был загружен
			// установим флаг перемещения записи в конец временной таблицы.
			Параметры.Вставить("ПереместитьЗапись", Истина);
			ТекОбъект = Неопределено;
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	БанкДляРасчетов				= Неопределено;
	ИдентификаторБанкаРасчетов	= ПолучитьЗначениеРеквизита("БанкДляРасчетов",Параметры);
	НайденнаяСтрока				= Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторБанкаРасчетов, "СтароеЗначение");
	Если НайденнаяСтрока<>Неопределено Тогда
		ИдентификаторБанкаРасчетов	= НайденнаяСтрока.НовоеЗначение;
	КонецЕсли;	
	Если НЕ ПустаяСтрока(ИдентификаторБанкаРасчетов) Тогда
		БанкДляРасчетов = ПолучитьОбъект(ИдентификаторБанкаРасчетов, Параметры, "Справочник.КлассификаторБанков");
		Если БанкДляРасчетов = Неопределено Тогда
			// Возможно банк еще не был загружен
			// установим флаг перемещения записи в конец временной таблицы.
			Параметры.Вставить("ПереместитьЗапись", Истина);
			ТекОбъект = Неопределено;
			Возврат;
		КонецЕсли;		
	КонецЕсли;	
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		
		// Произведем поиск по номеру счета, банку.
		НомерСчета			= Лев (ПолучитьЗначениеРеквизита("НомерСчета",Параметры), 20);
		БИКБанка			= ПолучитьЗначениеРеквизита("_1С_Код",Параметры,"Справочник.Банки", ИдентификаторБанка);
		
		ПоискПоНомеруСчета	= НЕ ПустаяСтрока(НомерСчета);
		ПоискПоБанку		= ЗначениеЗаполнено(БИКБанка);		
		
		Если ПоискПоНомеруСчета Тогда
			ЗапросПоиска	= Новый Запрос();
			ЗапросПоиска.УстановитьПараметр("БИКБанка",		БИКБанка);
			ЗапросПоиска.УстановитьПараметр("НомерСчета",	НомерСчета);
			ЗапросПоиска.Текст	= "ВЫБРАТЬ
			|	БанковскиеСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.НомерСчета = &НомерСчета"+?(ПоискПоБанку,"
			|	И БанковскиеСчета.Банк.Код = &БИКБанка","");
			ВыборкаСчета	= ЗапросПоиска.Выполнить().Выбрать();
			Если ВыборкаСчета.Следующий() Тогда
				ТекСсылка	= ВыборкаСчета.Ссылка;
				ТекОбъект	= ТекСсылка.ПолучитьОбъект();
			Иначе
				ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				УстановкаСоответствияСсылокОбъекта(Параметры, ТекОбъект, ИдентификаторОбъекта);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Параметры.ЭтоНовыйОбъект = Ложь;
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	// Установим владельца элемента
	ТекОрганизация		= ПолучитьОбъект(ПолучитьЗначениеРеквизита("_1С_Владелец",Параметры), Параметры, "Справочник.Организации");
	ТекКонтрагент		= ПолучитьОбъект(ПолучитьЗначениеРеквизита("_1С_Владелец",Параметры), Параметры, "Справочник.Контрагенты");
	Если НЕ ЗначениеЗаполнено(ТекОрганизация) И НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
		Параметры.Вставить("ПереместитьЗапись", Истина);
		Возврат;
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда
			Владелец = ТекКонтрагент;
		Иначе
			Владелец = ТекОрганизация;
		КонецЕсли;
	КонецЕсли;	
	
	ТекОбъект.Владелец = Владелец;	
	
	УстановитьРеквизит(ТекОбъект, "Банк", Банк);	
	Если БанкДляРасчетов <> Неопределено Тогда
		УстановитьРеквизит(ТекОбъект, "БанкДляРасчетов", БанкДляРасчетов);
	КонецЕсли;	
	
	// Установим значения реквизитов
	УстановитьРеквизит(ТекОбъект, "Наименование",          ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры));
	УстановитьРеквизит(ТекОбъект, "НомерСчета",       	   ПолучитьЗначениеРеквизита("НомерСчета",Параметры));
	УстановитьРеквизит(ТекОбъект, "ВидСчета",       	   ПолучитьЗначениеРеквизита("ВидСчета",  Параметры));
	УстановитьРеквизит(ТекОбъект, "ВалютаДенежныхСредств", 
						ПолучитьОбъект(ПолучитьЗначениеРеквизита("ВалютаДенежныхСредств",Параметры), Параметры, "Справочник.Валюты"));
	УстановитьРеквизит(ТекОбъект, "НомерИДатаРазрешения",  ПолучитьЗначениеРеквизита("НомерИДатаРазрешения",Параметры));
	УстановитьРеквизит(ТекОбъект, "ДатаОткрытия",     	   ПолучитьЗначениеРеквизита("ДатаОткрытия",  Параметры));
	УстановитьРеквизит(ТекОбъект, "ДатаЗакрытия",     	   ПолучитьЗначениеРеквизита("ДатаЗакрытия",  Параметры));
	УстановитьРеквизит(ТекОбъект, "МесяцПрописью",     	   ПолучитьЗначениеРеквизита("МесяцПрописью", Параметры));
	УстановитьРеквизит(ТекОбъект, "СуммаБезКопеек",        ПолучитьЗначениеРеквизита("СуммаБезКопеек",Параметры));
	УстановитьРеквизит(ТекОбъект, "Подразделение",         Параметры.Обработка.ВыбПодразделение);
	
	Если НЕ ЗначениеЗаполнено(ТекОбъект.ВалютаДенежныхСредств) Тогда
		УстановитьРеквизит(ТекОбъект, "ВалютаДенежныхСредств",	Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());	
	КонецЕсли;	
	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);
	
	
	// Если Банковский счет является основным банковским счетом контрагента или организации, то нужно это установить.
	ВладелецИдентификатор = ПолучитьЗначениеРеквизита("_1С_Владелец",Параметры);
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда 		
		ОсновнойБанковскийСчет = ПолучитьЗначениеРеквизита("ОсновнойБанковскийСчет", Параметры, "Справочник.Организации",
																									ВладелецИдентификатор);
		Если НЕ ПустаяСтрока(ОсновнойБанковскийСчет) 
			И (ИдентификаторОбъекта = ОсновнойБанковскийСчет) 
			И НЕ НеОбновлятьОбъект(Параметры,ВладелецИдентификатор) Тогда
			ОрганизацияВладелец = Владелец.ПолучитьОбъект();
			УстановитьРеквизит(ОрганизацияВладелец, "ОсновнойБанковскийСчет", ТекОбъект.Ссылка);
			ОрганизацияВладелец.Записать();
		КонецЕсли;		
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОсновнойБанковскийСчет = ПолучитьЗначениеРеквизита("ОсновнойБанковскийСчет",Параметры, "Справочник.Контрагенты",ВладелецИдентификатор);
		Если НЕ ПустаяСтрока(ОсновнойБанковскийСчет) И (ИдентификаторОбъекта = ОсновнойБанковскийСчет) 
			И НЕ НеОбновлятьОбъект(Параметры, ВладелецИдентификатор) Тогда
			КонтрагентВладелец = Владелец.ПолучитьОбъект();
			УстановитьРеквизит(КонтрагентВладелец, "ОсновнойБанковскийСчет", ТекОбъект.Ссылка);
			КонтрагентВладелец.Записать();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры  // ЗагрузитьСправочник_БанковскиеСчета

// Процедура загрузки справочника <Банки> в справочник <Банки>.
Процедура ЗагрузитьСправочник_Банки(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "Банки";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер		= Справочники.КлассификаторБанков;
	ТекОбъект		= СпрМенеджер.ПустаяСсылка();
	
	КодБанка		= ПолучитьЗначениеРеквизита("_1С_Код", Параметры);
	
	ИдентификаторРодителя	= ПолучитьЗначениеРеквизита("_1С_Родитель", Параметры);
	Если НЕ ПустаяСтрока(ИдентификаторРодителя) Тогда
		НайденнаяСтрока	= Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторРодителя, "СтароеЗначение");
		Если НайденнаяСтрока<>Неопределено Тогда
			ИдентификаторРодителя	= НайденнаяСтрока.НовоеЗначение;	
		КонецЕсли;		
		РодительОбъекта			= ПолучитьОбъект(ИдентификаторРодителя, Параметры, "Справочник.КлассификаторБанков");
		Если РодительОбъекта = Неопределено Тогда
			Параметры.Вставить("ПереместитьЗапись", Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	НайденнаяСтрока	= Параметры.ТаблицаВосстановленныхСсылок.Найти(ИдентификаторОбъекта, "СтароеЗначение");
	Если НайденнаяСтрока<>Неопределено Тогда
		ИдентификаторОбъекта	= НайденнаяСтрока.НовоеЗначение;
	КонецЕсли;	
	
	// ******************************
	// Вводим новый элемент только если еще такой не загружали
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС, 
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		
		// **************************
		// Справочник особенный, нужно проверять соответствие также и по коду БИК		
		ТекОбъект = Справочники.КлассификаторБанков.НайтиПоКоду(КодБанка);
		Если ТекОбъект.Пустая() Тогда
			Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
				ТекОбъект = СпрМенеджер.СоздатьГруппу();
			Иначе
				ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
			КонецЕсли;
		Иначе
			ТекОбъект = ТекОбъект.ПолучитьОбъект();
			
			// Определим битый идентификатор объекта приемника по идентификатору источника.
			// Несоответствие удалим.
			УстановкаСоответствияСсылокОбъекта(Параметры, ТекОбъект, ИдентификаторОбъекта);
			
		КонецЕсли;
		// **************************
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		УстановкаСоответствияСсылокОбъекта(Параметры, ТекОбъект, ИдентификаторОбъекта, Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;		
	КонецЕсли;
	
	Попытка 
		ТекОбъект.Родитель = РодительОбъекта;
	Исключение 
		НовыйСообщение = Параметры.СписокСообщений.Добавить();
		НовыйСообщение.Сообщение = НСтр("ru = 'Ошибка при установке родителя'") + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	// Установим значения реквизитов.
	УстановитьРеквизит(ТекОбъект, "Код",          КодБанка);
	УстановитьРеквизит(ТекОбъект, "Наименование", ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры));
	УстановитьРеквизит(ТекОбъект, "КоррСчет",     ПолучитьЗначениеРеквизита("КоррСчет",Параметры));
	УстановитьРеквизит(ТекОбъект, "Город",        ПолучитьЗначениеРеквизита("Город",Параметры));
	УстановитьРеквизит(ТекОбъект, "Адрес",        ПолучитьЗначениеРеквизита("Адрес",Параметры));
	УстановитьРеквизит(ТекОбъект, "Телефоны",     ПолучитьЗначениеРеквизита("Телефоны",Параметры));
	
	// Закончим работу со справочником.
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_Банки

// Процедура загрузки справочника <СтатьиДДС> в справочник <СтатьиДвиженияДенежныхСредств>.
Процедура ЗагрузитьСправочник_СтатьиДвиженияДенежныхСредств(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "СтатьиДДС";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда 
		Возврат; 
	КонецЕсли;
	
	СпрМенеджер				= Справочники.СтатьиДДС;
	ТекОбъект				= СпрМенеджер.ПустаяСсылка();	
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(
			СпрМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		ИдентификаторРодителя = ПолучитьЗначениеРеквизита("_1С_Родитель",Параметры);
		Если НЕ ПустаяСтрока(ИдентификаторРодителя) Тогда
			РодительОбъекта = ПолучитьОбъект(ИдентификаторРодителя, Параметры, "Справочник.СтатьиДДС");
			Если РодительОбъекта = Неопределено Тогда
				Параметры.Вставить("ПереместитьЗапись", Истина);
				Возврат;
			КонецЕсли;
			
			ТекОбъект = СпрМенеджер.НайтиПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры),Истина,
																											РодительОбъекта);
			Если ТекОбъект.Пустая() Тогда
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа",Параметры) Тогда
					ТекОбъект = СпрМенеджер.СоздатьГруппу();
				Иначе 
					ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				КонецЕсли;
				
				Попытка 
					ТекОбъект.Родитель = РодительОбъекта;
				Исключение 
					НовыйСообщение = Параметры.СписокСообщений.Добавить();
					НовыйСообщение.Сообщение = НСтр("ru = 'Ошибка при установке родителя'") + Символы.ПС + ОписаниеОшибки();
				КонецПопытки;
				
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
				
			Иначе
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) <> ТекОбъект.ЭтоГруппа Тогда
					Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
						ТекОбъект = СпрМенеджер.СоздатьГруппу();
					Иначе 
						ТекОбъект = СпрМенеджер.СоздатьЭлемент();
					КонецЕсли;
				Иначе
					ТекОбъект = ТекОбъект.ПолучитьОбъект();
				КонецЕсли;
				
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
				
			КонецЕсли;
		Иначе
			ТекОбъект = СпрМенеджер.НайтиПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры),Истина);
			Если ТекОбъект.Пустая() Тогда
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
					ТекОбъект = СпрМенеджер.СоздатьГруппу();
				Иначе 
					ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				КонецЕсли;
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
			Иначе
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) <> ТекОбъект.ЭтоГруппа Тогда
					Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
						ТекОбъект = СпрМенеджер.СоздатьГруппу();
					Иначе 
						ТекОбъект = СпрМенеджер.СоздатьЭлемент();
					КонецЕсли;
				Иначе
					ТекОбъект = ТекОбъект.ПолучитьОбъект();
				КонецЕсли;
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта, Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	// Установим значения реквизитов
	УстановитьРеквизит(ТекОбъект, "Наименование", ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
	ВидДвижения = ПолучитьЗначениеРеквизита("ВидДвиженияДенежныхСредств", Параметры);
	Если СтрНайти(ВидДвижения, ".СредстваПолученныеОтПокупателейИЗаказчиков") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПрочиеПоступленияПоТекущейДеятельности") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ВыручкаОтПродажиОбъектовОсновныхСредств") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ВыручкаОтПродажиЦенныхБумагИИныхФинансовыхВложений") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПолученныеДивиденды") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПолученныеПроценты") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПрочиеПоступленияПоИнвестиционнойДеятельности") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ЗаймыПредоставленныеДругимОрганизациям") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПрочиеПоступленияПоФинансовойДеятельности") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПоступлениеПлатежейПоФинансовойАренде") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ВыручкаОтПродажиНематериальныхАктивов") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ВыручкаОтПродажиДоходныхВложений") > 0 Тогда
		
		ВидДвижения = Перечисления.ВидыДвижений.Приход;
		
	ИначеЕсли СтрНайти(ВидДвижения, ".ОплатаОборотныхАктивов") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ОплатаТруда") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ВыплатаДивидендовПроцентов") > 0
		ИЛИ СтрНайти(ВидДвижения, ".РасчетыПоНалогамИСборам") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПрочиеРасходыПоТекущейДеятельности") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПриобретениеДочернихОрганизаций") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПриобретениеОбъектовОсновныхСредств") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПриобретениеЦенныхБумагИИныхФинансовыхВложений") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПрочиеРасходыПоИнвестиционнойДеятельности") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПогашениеЗаймовИКредитов") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПогашениеОбязательствПоФинансовойАренде") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПрочиеРасходыПоФинансовойДеятельности") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ОплатаНИОКР") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ВыплатаПроцентовВСвязиСоСтроительством") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ПриобретениеПрочихАктивовИнвестиционное") > 0
		ИЛИ СтрНайти(ВидДвижения, ".ОплатаПоПенсионнымПланам") > 0 Тогда
		
		ВидДвижения = Перечисления.ВидыДвижений.Расход;
		
	Иначе
		
		ВидДвижения = Перечисления.ВидыДвижений.Прочее;
		
	КонецЕсли;
	
	УстановитьРеквизит(ТекОбъект, "ВидДвижения", ВидДвижения);
	
	// Закончим работу со справочником.
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_СтатьиДДС

// Процедура загрузки справочника <Организации>.
Процедура ЗагрузитьСправочник_Организации(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "Организации";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер = Справочники.Организации;
	ТекОбъект = СпрМенеджер.ПустаяСсылка();	
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
																	Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		
		// Организуем поиск по наименованию.
		ИННОрганизации = ПолучитьЗначениеРеквизита("ИНН", Параметры);
		Если НЕ ЗначениеЗаполнено(ИННОрганизации) Тогда
			ТекОбъект = СпрМенеджер.НайтиПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры),Истина);
		Иначе
			Попытка
				ТекОбъект = СпрМенеджер.НайтиПоРеквизиту("ИНН", ИННОрганизации);			
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если ПустаяСтрока(Инфо.Причина) Тогда
					ОписаниеОшибки = Инфо.Описание;
				Иначе
					ОписаниеОшибки = Инфо.Причина.Описание;
				КонецЕсли;
				НовыйСообщение = Параметры.СписокСообщений.Добавить();
				НовыйСообщение.Сообщение = "Внимание." + " " + НСтр("ru = 'Импортирование не удалось :'") + " " 
				+ Параметры.ВидОбъекта + ОписаниеОшибки;
				ДобавитьСообщениеОЗагрузке(Параметры.ПромежуточнаяТаблицаОтчета,"301", ПолучитьПредставление(Параметры.ВидОбъекта, Параметры), 
				?(ТекОбъект<>Неопределено И ТекОбъект <> "", ТекОбъект.Ссылка, ""),
				?(Параметры.ЭтоНовыйОбъект, НСтр("ru = 'Импортирование не удалось'"), НСтр("ru = 'Обновление не удалось'")),
				ОписаниеОшибки);
			КонецПопытки;	
			
			Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда
				ТекОбъект = СпрМенеджер.НайтиПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры),Истина);
			КонецЕсли;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекОбъект) Тогда
			ТекОбъект = ТекОбъект.ПолучитьОбъект();
		Иначе
			ТекОбъект = СпрМенеджер.СоздатьЭлемент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		КонецЕсли;
		
		Если Параметры.Обработка.НеСоздаватьНовыхКонтрагентов И ТекОбъект.Ссылка.Пустая() Тогда 
			НовыйСообщение = Параметры.СписокСообщений.Добавить();
			НовыйСообщение.Сообщение = НСтр("ru = 'Нет соответствия у организации'") + " " 
			+ ПолучитьПредставлениеСправочника(ИмяМенеджераОбъекта, Параметры)
			+ НСтр("ru = 'Загрузка остановлена'");
			ПрекратитьЗагрузку = Истина;
			Возврат;
		КонецЕсли;			
	Иначе		
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	// Установим значения реквизитов.
	Если НЕ ЭтоЮридическоеЛицо(ТекОбъект, Параметры) Тогда
		УстановитьРеквизит(ТекОбъект, "ФормаСобственности", Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	КонецЕсли;	
	УстановитьРеквизит(ТекОбъект, "Наименование", ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
	УстановитьРеквизит(ТекОбъект, "НаименованиеПолное", ПолучитьЗначениеРеквизита("НаименованиеПолное", Параметры));
	УстановитьРеквизит(ТекОбъект, "ДатаРегистрации", ПолучитьЗначениеРеквизита("ДатаРегистрации", Параметры));
	УстановитьРеквизит(ТекОбъект, "ИНН", ПолучитьЗначениеРеквизита("ИНН", Параметры));
	УстановитьРеквизит(ТекОбъект, "КПП", ПолучитьЗначениеРеквизита("КПП", Параметры));
	УстановитьРеквизит(ТекОбъект, "КодОКОПФ", ПолучитьЗначениеРеквизита("КодПоКОПФ", Параметры));
	УстановитьРеквизит(ТекОбъект, "КодОКФС", ПолучитьЗначениеРеквизита("КодПоКФС",   Параметры));
	УстановитьРеквизит(ТекОбъект, "КодОКВЭД", ПолучитьЗначениеРеквизита("КодПоОКВЭД", Параметры));
	УстановитьРеквизит(ТекОбъект, "КодОКОНХ", ПолучитьЗначениеРеквизита("КодПоОКОНХ", Параметры));
	УстановитьРеквизит(ТекОбъект, "КодПоОКПО", ПолучитьЗначениеРеквизита("КодПоОКПО", Параметры));
	УстановитьРеквизит(ТекОбъект, "КодИМНС", ПолучитьЗначениеРеквизита("КодИМНС", Параметры));
	УстановитьРеквизит(ТекОбъект, "Префикс", ПолучитьЗначениеРеквизита("Префикс", Параметры));	
	
	// Закончим работу со справочником.
	ЗакрытьСправочник(ТекОбъект);	
	
КонецПроцедуры  // ЗагрузитьСправочник_Организации

// Процедура загрузки справочника <ПодразделенияОрганизаций>.
Процедура ЗагрузитьСправочник_ПодразделенияОрганизаций(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "ПодразделенияКомпании";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер				= Справочники.ПодразделенияКомпании;
	ТекОбъект				= СпрМенеджер.ПустаяСсылка();	
	
	// Вводим новый элемент только если еще такой не загружали
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		
		// Произведем поиск по наименованию и КПП
		// evstta: Изменилось наименование справочника Подразделений.
		ЗапросПоПодразделению	= Новый Запрос();
		ЗапросПоПодразделению.Текст	= "ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Наименование = &Наименование
		|	И ПодразделенияОрганизаций.КПП = &КПП";
		ЗапросПоПодразделению.УстановитьПараметр("Наименование",	ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
		ЗапросПоПодразделению.УстановитьПараметр("КПП",				ПолучитьЗначениеРеквизита("КПП", Параметры));
		ВыборкаПодразделения	= ЗапросПоПодразделению.Выполнить().Выбрать();
		
		Если ВыборкаПодразделения.Следующий() Тогда
			ТекОбъект	= ВыборкаПодразделения.Ссылка.ПолучитьОбъект();
		Иначе		
			ТекОбъект	= СпрМенеджер.СоздатьЭлемент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		КонецЕсли;
	Иначе	
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;		
	КонецЕсли;	
	
	// Установим значения реквизитов.	
	УстановитьРеквизит(ТекОбъект, "Наименование",		ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
	УстановитьРеквизит(ТекОбъект, "Префикс",			ПолучитьЗначениеРеквизита("Префикс", Параметры));
	УстановитьРеквизит(ТекОбъект, "КПП",				ПолучитьЗначениеРеквизита("КПП", Параметры));
	ТекущаяОрганизация		= ПолучитьОбъект(ПолучитьЗначениеРеквизита("_1С_Владелец", Параметры), Параметры, "Справочник.Организации");
	Если Параметры.ЭтоНовыйОбъект Тогда
		УстановитьРеквизит(ТекОбъект, "Организация",		ТекущаяОрганизация);
		УстановитьРеквизит(ТекОбъект, "Балансовое",			ПолучитьЗначениеРеквизита("ОбособленноеПодразделение", Параметры));
		УстановитьРеквизит(ТекОбъект, "УдалитьРежимПроведенияПоПартиям",		
															Перечисления.РежимыПроведенияПартий.ПервичнымиДокументамиДопроведение);
	КонецЕсли;
	
	// Закончим работу со справочником.
	ЗакрытьСправочник(ТекОбъект);	
	
КонецПроцедуры  // ЗагрузитьСправочник_ПодразделенияОрганизаций

// Процедура загрузки справочника <НоменклатурныеГруппы> в справочник <ТипыНоменклатуры>.
Процедура ЗагрузитьСправочник_НоменклатурныеГруппы(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "ТипыНоменклатуры";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер = Справочники.ТипыНоменклатуры;
	ТекОбъект = СпрМенеджер.ПустаяСсылка();
	
	Если ПолучитьОбъектПриемник(
			СпрМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	Иначе
		ТекОбъект = СпрМенеджер.НайтиПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры),Истина);
		Если ЗначениеЗаполнено(ТекОбъект) Тогда
			Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
			Если Параметры.Обработка.НеОбновлятьСуществующие Тогда 
				Возврат;
			Иначе
				ТекОбъект = ТекОбъект.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			ТекОбъект = СпрМенеджер.СоздатьЭлемент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	// Установим значения реквизитов
	УстановитьРеквизит(ТекОбъект, "Наименование", ПолучитьЗначениеРеквизита("_1С_Наименование",Параметры));
	
	// Обновляем вид номенклатуры, только если это новый объект, старый не затираем - 
	// т.к. для наших видов нет соответствующих в Бухгалтерии.
	Если Параметры.ЭтоНовыйОбъект Тогда
		Если СтрНайти(НРег(ТекОбъект.Наименование), "услуг") > 0 Тогда
			УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Услуга);
		ИначеЕсли СтрНайти(НРег(ТекОбъект.Наименование), "комплект") > 0 Тогда
			УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Комплект);
		ИначеЕсли СтрНайти(НРег(ТекОбъект.Наименование), "набор") > 0 Тогда
			УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Набор);
		ИначеЕсли СтрНайти(НРег(ТекОбъект.Наименование), "тара") > 0 Тогда
			УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Тара);
		Иначе		
			Если Параметры.Обработка.кУР Тогда
				УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Товар);
			ИначеЕсли СтрНайти(НРег(Метаданные.Имя),"автосервис") > 0 Тогда
				Если СтрНайти(НРег(ТекОбъект.Наименование), "шины") > 0 Тогда
					УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Шины);
				ИначеЕсли СтрНайти(НРег(ТекОбъект.Наименование), "диски") > 0 Тогда
					
					УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Диски);
				ИначеЕсли СтрНайти(НРег(ТекОбъект.Наименование), "номерн") > 0 
					ИЛИ СтрНайти(НРег(ТекОбъект.Наименование), "агрегат") > 0 Тогда
					
					УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.НомерныеАгрегаты);	
				ИначеЕсли СтрНайти(НРег(ТекОбъект.Наименование), "опци") > 0 
					И СтрНайти(НРег(Метаданные.Имя),"автосалон") > 0 Тогда
					
					УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Опции);
				ИначеЕсли СтрНайти(НРег(ТекОбъект.Наименование), "автомобил") > 0 
					И СтрНайти(НРег(Метаданные.Имя),"автосалон") > 0 Тогда
					
					УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Автомобили);
				Иначе
					УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Товар);
				КонецЕсли;
			Иначе	
				УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Товар);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьРеквизит(ТекОбъект, "Весовой", Ложь);
	УстановитьРеквизит(ТекОбъект, "ИспользованиеХарактеристик", 	3);	 	// Не вести учет по характеристикам
	УстановитьРеквизит(ТекОбъект, "ИспользованиеЕдиницИзмерения", 	2);		// Единицы подчинены позициям номенклатуры
	УстановитьРеквизит(ТекОбъект, "ИспользованиеШтрихКодов", 		1);		// Штрих-коды формируются для номенклатуры
	УстановитьРеквизит(ТекОбъект, "ОграничениеДанныхХарактеристик",	Перечисления.ОграниченияДанныхХарактеристики.Все);				// Без ограничений характеристик (хоть они пока и не используются)
	УстановитьРеквизит(ТекОбъект, "АвтоСписаниеХарактеристик", 		Перечисления.РежимыАвтоСписанияХарактеристик.РучноеСписание);	// Без автоматического списания характеристик (хоть они пока и не используются)
	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_ТипыНоменклатуры

// Процедура загрузки справочника <Номенклатура> в справочник <Номенклатура>. 
Процедура ЗагрузитьСправочник_Номенклатура(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "Номенклатура";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	ИдентификаторТипа    = ПолучитьЗначениеРеквизита("НоменклатурнаяГруппа", Параметры);
	Если НЕ ПустаяСтрока(ИдентификаторТипа) Тогда
		ТипНоменклатуры = ПолучитьОбъект(ИдентификаторТипа, Параметры, "Справочник.ТипыНоменклатуры");
		Если ТипНоменклатуры = Неопределено ИЛИ ТипНоменклатуры.Пустая() Тогда
			Параметры.Вставить("ПереместитьЗапись", Истина);
			Возврат;
		КонецЕсли;
	Иначе
		ТипНоменклатуры = Справочники.ТипыНоменклатуры.Штучный;
	КонецЕсли;
	
	СпрМенеджер = Справочники.Номенклатура;
	ТекОбъект = СпрМенеджер.ПустаяСсылка();
	
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		ИдентификаторРодителя = ПолучитьИдентификаторВладельца(Параметры, "_1С_Родитель");
		Если НЕ ПустаяСтрока(ИдентификаторРодителя) Тогда
			РодительОбъекта = ПолучитьОбъект(ИдентификаторРодителя, Параметры, "Справочник.Номенклатура");
			Если РодительОбъекта = Неопределено Тогда
				Параметры.Вставить("ПереместитьЗапись", Истина);
				Возврат;
			КонецЕсли;
			
			ТекОбъект = НайтиСправочникПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры),"Номенклатура", 
			ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры),РодительОбъекта);
			
			Если ТекОбъект = Неопределено ИЛИ ТекОбъект.Пустая() Тогда
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
					ТекОбъект = СпрМенеджер.СоздатьГруппу();
				Иначе 
					ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				КонецЕсли;
				
				Попытка 
					ТекОбъект.Родитель = РодительОбъекта;
				Исключение 
					НовыйСообщение = Параметры.СписокСообщений.Добавить();
					НовыйСообщение.Сообщение = НСтр("ru = 'Ошибка при установке родителя'") + Символы.ПС + ОписаниеОшибки();
				КонецПопытки;
				
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта, ИдентификаторПриемник);
				
			Иначе
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) <> ТекОбъект.ЭтоГруппа Тогда
					Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
						ТекОбъект = СпрМенеджер.СоздатьГруппу();
					Иначе 
						ТекОбъект = СпрМенеджер.СоздатьЭлемент();
					КонецЕсли;
					УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта, ИдентификаторПриемник);
				Иначе
					Если Параметры.Обработка.НеОбновлятьСуществующие Тогда 
						Возврат;
					Иначе
						ТекОбъект = ТекОбъект.ПолучитьОбъект();
						
						ДобавитьСтрокуВТаблицуВосстановленияСсылок(Параметры, ТекОбъект, ИдентификаторОбъекта, ИдентификаторПриемник);
						
						Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекОбъект = НайтиСправочникПоНаименованию(ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры),"Номенклатура",
														ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры));
			Если ТекОбъект.Пустая() Тогда
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
					ТекОбъект = СпрМенеджер.СоздатьГруппу();
				Иначе 
					ТекОбъект = СпрМенеджер.СоздатьЭлемент();
				КонецЕсли;
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта, ИдентификаторПриемник);
			Иначе
				Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) <> ТекОбъект.ЭтоГруппа Тогда
					Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
						ТекОбъект = СпрМенеджер.СоздатьГруппу();
					Иначе 
						ТекОбъект = СпрМенеджер.СоздатьЭлемент();
					КонецЕсли;
					УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта, ИдентификаторПриемник);
				Иначе
					Если Параметры.Обработка.НеОбновлятьСуществующие Тогда 
						Возврат;
					Иначе
						ТекОбъект = ТекОбъект.ПолучитьОбъект();
						
						ДобавитьСтрокуВТаблицуВосстановленияСсылок(Параметры, ТекОбъект, ИдентификаторОбъекта, ИдентификаторПриемник);
						
						Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		ДобавитьСтрокуВТаблицуВосстановленияСсылок(Параметры, ТекОбъект, ИдентификаторОбъекта, ИдентификаторПриемник);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС = ПолучитьСтавкуНДСПоИдентификатору(ПолучитьЗначениеРеквизита("СтавкаНДС", Параметры));
	
	Если СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда
		СтавкаНДС = СтавкаНДСНоменклатурыПоИдентификатору(ПолучитьЗначениеРеквизита("ВидСтавкиНДС", Параметры));
	КонецЕсли;
	
	// Установим значения реквизитов.
	УстановитьРеквизит(ТекОбъект, "Наименование",       	ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
	УстановитьРеквизит(ТекОбъект, "СтавкаНДС",				СтавкаНДС);	
	УстановитьРеквизит(ТекОбъект, "ВалютаУчета", 			Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	УстановитьРеквизит(ТекОбъект, "Артикул", 				ПолучитьЗначениеРеквизита("Артикул", Параметры));
	
	// Обновляем вид номенклатуры и тип номенклатуры, только если это новый объект, старый не затираем - 
	// т.к. для наших видов нет соответствующих в Бухгалтерии.
	Если Параметры.ЭтоНовыйОбъект Тогда
		Если НЕ ТипНоменклатуры.ВидНоменклатуры.Пустая() Тогда
			ВидНоменклатуры = ТипНоменклатуры.ВидНоменклатуры;
		Иначе	
			ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
		КонецЕсли;	
		ЭтоУслуга = ПолучитьЗначениеРеквизита("Услуга", Параметры);
		УстановитьРеквизит(ТекОбъект, "ВидНоменклатуры",	?(ЭтоУслуга, Перечисления.ВидыНоменклатуры.Услуга, ВидНоменклатуры));
		УстановитьРеквизит(ТекОбъект, "ТипНоменклатуры",	?(ЭтоУслуга, Справочники.ТипыНоменклатуры.Услуга, ТипНоменклатуры));
		Если ЭтоУслуга Тогда
			УстановитьРеквизит(ТекОбъект, "СпособРаспределенияДопРасходов", Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы);
			УстановитьРеквизит(ТекОбъект, "СтатьяДопРасходов", Справочники.СтатьиДоходовИРасходов.Себестоимость);
		КонецЕсли;	
	КонецЕсли;
	
	
	Если НЕ ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
		УстановитьРеквизит(ТекОбъект, "НаименованиеПолное",			ПолучитьЗначениеРеквизита("НаименованиеПолное", Параметры));
		УстановитьРеквизит(ТекОбъект, "БазоваяЕдиницаИзмерения",
								ПолучитьОбъект(ПолучитьЗначениеРеквизита("БазоваяЕдиницаИзмерения", Параметры), Параметры, "Справочник.КлассификаторЕдиницИзмерения"));
		УстановитьРеквизит(ТекОбъект, "Комментарий",				ПолучитьЗначениеРеквизита("Комментарий", Параметры));
		УстановитьРеквизит(ТекОбъект, "СтранаПроисхождения",		ПолучитьОбъект(ПолучитьЗначениеРеквизита("СтранаПроисхождения", Параметры), Параметры, "Справочник.СтраныМира"));
		УстановитьРеквизит(ТекОбъект, "ГТД",						ПолучитьОбъект(ПолучитьЗначениеРеквизита("НомерГТД", Параметры), Параметры, "Справочник.НомераГТД"));
	КонецЕсли;	
	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);
	
	Если Параметры.ЭтоНовыйОбъект И НЕ ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
		ЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдИзм.Владелец = ТекОбъект.Ссылка;
		ЕдИзм.Заполнить(Неопределено);
		
		// Заполняем данные единицы если только они заполнены.
		Если НЕ ЕдИзм.ЕдиницаПоКлассификатору.Пустая() Тогда
			ЕдИзм.УстановитьНовыйКод();
			ЕдИзм.Записать();
			ТекОбъект = ТекОбъект.Ссылка.ПолучитьОбъект();
			УстановитьРеквизит(ТекОбъект, "ОсновнаяЕдиницаИзмерения",	 	ЕдИзм.Ссылка);
			Если Параметры.Обработка.кУР Тогда 
				УстановитьРеквизит(ТекОбъект, "РецептурнаяЕдиницаИзмерения",ЕдИзм.Ссылка);
			КонецЕсли;	
			// Закончим работу со справочником.
			ЗакрытьСправочник(ТекОбъект);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры  // ЗагрузитьСправочник_Номенклатура

// Процедура загрузки справочника <КлассификаторЕдиницИзмерения> в справочник <КлассификаторЕдиницИзмерения>.
Процедура ЗагрузитьСправочник_КлассификаторЕдиницИзмерения(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "КлассификаторЕдиницИзмерения";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер = Справочники.КлассификаторЕдиницИзмерения;
	ТекОбъект = СпрМенеджер.ПустаяСсылка();
	
	КодОКЕИ   = ПолучитьЗначениеРеквизита("_1С_Код", Параметры);
	// Вводим новый элемент только если еще такой не загружали
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС, 
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		// Справочник особенный, нужно проверять соответствие также и по коду из ОКЕИ.		
		ТекОбъект = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодОКЕИ);
		Если ТекОбъект.Пустая() Тогда
			ТекОбъект = СпрМенеджер.СоздатьЭлемент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		Иначе
			Если Параметры.Обработка.НеОбновлятьСуществующие Тогда 
				Возврат;
			Иначе	
				ТекОбъект = ТекОбъект.ПолучитьОбъект();
			КонецЕсли;	
		КонецЕсли;		
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;		
	КонецЕсли;
	
	// Установим значения реквизитов.
	УстановитьРеквизит(ТекОбъект, "Код",       	        КодОКЕИ);
	УстановитьРеквизит(ТекОбъект, "Наименование",       ПолучитьЗначениеРеквизита("_1С_Наименование",  Параметры));
	УстановитьРеквизит(ТекОбъект, "НаименованиеПолное", ПолучитьЗначениеРеквизита("НаименованиеПолное", Параметры));	
	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_КлассификаторЕдиницИзмерения

// Процедура загрузки справочника <КлассификаторСтранМира> в справочник <КлассификаторСтранМира>.
Процедура ЗагрузитьСправочник_КлассификаторСтранМира(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	
КонецПроцедуры  // ЗагрузитьСправочник_КлассификаторСтранМира

// Процедура загрузки справочника <НомераГТД> в справочник <ГТД>. 
Процедура ЗагрузитьСправочник_НомераГТД(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "ГТД";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	СпрМенеджер = Справочники.ГТД;
	ТекОбъект = СпрМенеджер.ПустаяСсылка();
	
	// Вводим новый элемент только если еще такой не загружали.
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС, 
										Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда

		КодСправочника = ПолучитьЗначениеРеквизита("_1С_Код", Параметры);
		ТекОбъект = СпрМенеджер.НайтиПоКоду(КодСправочника);
		Если ТекОбъект.Пустая() Тогда
			ТекОбъект = СпрМенеджер.СоздатьЭлемент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		Иначе
			Если Параметры.Обработка.НеОбновлятьСуществующие Тогда 
				Возврат;
			Иначе			
				ТекОбъект = ТекОбъект.ПолучитьОбъект();
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	// Установим значения реквизитов	
	УстановитьРеквизит(ТекОбъект, "Наименование", ПолучитьЗначениеРеквизита("_1С_Код", Параметры));
	
	// Закончим работу со справочником
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_ГТД

// Процедура загрузки справочника <СотрудникиОрганизаций> в справочник <Сотрудники>.
Процедура ЗагрузитьСправочник_Сотрудники(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	Зарезервировано = Истина;
КонецПроцедуры //ЗагрузитьСправочник_Сотрудники

// Процедура загрузки справочника <Виды контактной информации> в справочник <Виды контактной информации>
//
Процедура ЗагрузитьСправочник_ВидыКонтактнойИнформации(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	// Установим соответствие вида КИ и объекта в ИБ
	// новых элементов добавлять не будем
	
	// Не рассматриваем группы
	Если ПолучитьЗначениеРеквизита("_1С_ЭтоГруппа", Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекОбъект = Неопределено;
	
	ИмяЭлемента = ПолучитьЗначениеРеквизита("_1С_НаименованиеПредопределённого", Параметры);
	
	// Установим соответствие только для предопределенных видов КИ
	Если НЕ ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Справочник.ВидыКонтактнойИнформации.", "");
	ВидКИ = Неопределено;
	Попытка
		ВидКИ = Справочники.ВидыКонтактнойИнформации[ИмяЭлемента];
	Исключение
		Возврат;
	КонецПопытки;
	
	
	НоваяСтрока = Параметры.ТаблицаВосстановленныхСсылок.Добавить();
	НоваяСтрока.СтароеЗначение = ?(ПустаяСтрока(ИдентификаторПриемник), ИдентификаторОбъекта, ИдентификаторПриемник);
	НоваяСтрока.НовоеЗначение = ВидКИ.УникальныйИдентификатор();
	
КонецПроцедуры //ЗагрузитьСправочник_ВидыКонтактнойИнформации

// Процедура загрузки справочника <Патенты> в справочник <Патенты>.
Процедура ЗагрузитьСправочник_Патенты(
		Параметры,
		ТекОбъект="",
		ИдентификаторОбъекта="",
		ИдентификаторПриемник="") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта		= "Патенты";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда 
		Возврат; 
	КонецЕсли;
	
	СпрМенеджер				= Справочники.Патенты;
	ТекОбъект				= СпрМенеджер.ПустаяСсылка();	
	
 	// Вводим новый элемент только если еще такой не загружали
	Если НЕ ПолучитьОбъектПриемник(СпрМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
									Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		
		// Произведем поиск по наименованию 
		ЗапросПоПатентам	= Новый Запрос();
		ЗапросПоПатентам.Текст	= "ВЫБРАТЬ
       	  |	Патенты.Ссылка КАК Ссылка
       	  |ИЗ
       	  |	Справочник.Патенты КАК Патенты
       	  |ГДЕ
       	  |	Патенты.Наименование = &Наименование";
		ЗапросПоПатентам.УстановитьПараметр("Наименование",	ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
	
		ВыборкаПатента	= ЗапросПоПатентам.Выполнить().Выбрать();
		
		Если ВыборкаПатента.Следующий() Тогда
			ТекОбъект	= ВыборкаПатента.Ссылка.ПолучитьОбъект();
		Иначе		
			ТекОбъект	= СпрМенеджер.СоздатьЭлемент();
			УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, СпрМенеджер, ИдентификаторОбъекта);
		КонецЕсли;
	Иначе	
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьОбъект(Параметры) Тогда Возврат; КонецЕсли;		
	КонецЕсли;	
	
	// Установим значения реквизитов.	
	УстановитьРеквизит(ТекОбъект, "Наименование",		ПолучитьЗначениеРеквизита("_1С_Наименование", Параметры));
	УстановитьРеквизит(ТекОбъект, "ДатаНачала",			ПолучитьЗначениеРеквизита("ДатаНачала", Параметры));
	УстановитьРеквизит(ТекОбъект, "ДатаОкончания",		ПолучитьЗначениеРеквизита("ДатаОкончания", Параметры)); 
	УстановитьРеквизит(ТекОбъект, "НомерПатента",		ПолучитьЗначениеРеквизита("НомерПатента", Параметры)); 
	УстановитьРеквизит(ТекОбъект, "ДатаВыдачи",			ПолучитьЗначениеРеквизита("ДатаВыдачи", Параметры));
	УстановитьРеквизит(ТекОбъект, "КБК",				ПолучитьЗначениеРеквизита("КБК", Параметры)); 
	УстановитьРеквизит(ТекОбъект, "КодПоОКТМО",			ПолучитьЗначениеРеквизита("КодПоОКТМО", Параметры));
	УстановитьРеквизит(ТекОбъект, "ПотенциальноВозможныйГодовойДоход",ПолучитьЗначениеРеквизита("ПотенциальноВозможныйГодовойДоход", Параметры)); 
	
	ТекущаяОрганизация		= ПолучитьОбъект(ПолучитьЗначениеРеквизита("_1С_Владелец", Параметры), Параметры, "Справочник.Организации");
	Если Параметры.ЭтоНовыйОбъект Тогда
		УстановитьРеквизит(ТекОбъект, "Владелец",		ТекущаяОрганизация);
	КонецЕсли;
	
	// Закончим работу со справочником.
	ЗакрытьСправочник(ТекОбъект);
	
КонецПроцедуры  // ЗагрузитьСправочник_Патенты

// Функция выполняет загрузку справочника.
Функция ЗагрузитьСправочник(ТипВидОбъекта, ИдентификаторОбъекта, ИдентификаторПриемник, Параметры)
	
	ТекОбъект = Неопределено;
	ВидОбъекта = Сред(ТипВидОбъекта, СтрНайти(ТипВидОбъекта, ".") + 1);
	
	Попытка
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(Параметры);
		ПараметрыВыполнения.Добавить(ТекОбъект);
		ПараметрыВыполнения.Добавить(ИдентификаторОбъекта);
		ПараметрыВыполнения.Добавить(ИдентификаторПриемник);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("Обработки.ЗагрузкаДанныхБух.Загрузить" + СтрЗаменить(ТипВидОбъекта, ".", "_"), ПараметрыВыполнения);
		
		// Получим текущий объект
		ТекОбъект = ПараметрыВыполнения[1];
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		НовыйСообщение = Параметры.СписокСообщений.Добавить();
		НовыйСообщение.Сообщение = ОписаниеОшибки;
	КонецПопытки;
	
	// Попытаемся понять удачно ли произошла загрузка
	// Вернем пусто, если после загрузки мы так и не спозиционировались на элемент справочника
	// Вернемся к этому справочнику в конце загрузки, когда будут загружены "связанные" объекты.
	Попытка 
		Возврат ?(ТекОбъект.Ссылка.Пустая(), Неопределено, ТекОбъект.Ссылка);
	Исключение 
		Возврат Неопределено; 
	КонецПопытки;
	
КонецФункции // ЗагрузитьСправочник()

// Процедура формирует данный для загрузки документа <Выписка>.
Процедура ЗаполнитьСтрокиВыписки(
		ИдентификаторОбъекта,
		ИдентификаторПриемник,
		Входящее,
		ИдентификаторВыписки,
		ИдентификаторИзмененный,
		ЭтоНовыйОбъект,
		НеОбновлять,
		Параметры,
		ТипВидОбъекта)
	
	ТекТабличнаяЧасть	= ПолучитьТабличнуюЧасть(ИдентификаторОбъекта, Параметры, "РасшифровкаПлатежа");
	ВидОперации			= ПолучитьЗначениеРеквизита("ВидОперации", Параметры);
	тзВыписка           = Параметры.тзВыписка;
	
	Если СтрНайти(ВидОперации,"ПеречислениеЗП") > 0 Тогда 
		НоваяСтрока							= тзВыписка.Добавить();	
		НоваяСтрока.Входящее				= Входящее;
		НоваяСтрока.ИдентификаторОбъекта	= ИдентификаторОбъекта;
		НоваяСтрока.ИдентификаторПриемник	= ИдентификаторПриемник;
		НоваяСтрока.ВидОбъекта				= ТипВидОбъекта;
		НоваяСтрока.ИдентификаторВыписки	= ИдентификаторВыписки;
		НоваяСтрока.ИдентификаторИзмененный	= ИдентификаторИзмененный;
		НоваяСтрока.ПолученоСоответствие	= НЕ ЭтоНовыйОбъект;
		
		НомерДокумента	= ПолучитьЗначениеРеквизита("_1С_Номер", Параметры);
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			РазрядностьНомераДокумента	= Документы.Выписка.СоздатьДокумент().Метаданные().ДлинаНомера;
			Если РазрядностьНомераДокумента>0 Тогда
				УстановитьРеквизит(НоваяСтрока, "Номер",		ПривестиНомерДокумента(НомерДокумента, РазрядностьНомераДокумента));
			КонецЕсли;
		КонецЕсли;		
		
		НоваяСтрока.Дата					= ПолучитьЗначениеРеквизита("_1С_Дата", Параметры);
		НоваяСтрока.ВхДокНомер	= ПолучитьЗначениеРеквизита("ВхДокНомер", Параметры);
		НоваяСтрока.ВхДокДата	= ПолучитьЗначениеРеквизита("ВхДокДата", Параметры);
		
		ОрганизацияДокумента				= ПолучитьЗначениеРеквизита("Организация", Параметры);
		НоваяСтрока.Организация				= ОрганизацияДокумента;		
		Ответственный						= ПолучитьЗначениеРеквизита("Ответственный", Параметры);
		НоваяСтрока.Ответственный			= Ответственный;	
		НоваяСтрока.Контрагент				= ПолучитьЗначениеРеквизита("Контрагент", Параметры);
		НоваяСтрока.БанковскийСчет			= ПолучитьЗначениеРеквизита("СчетОрганизации", Параметры);
		НоваяСтрока.ВалютаДокумента			= ПолучитьЗначениеРеквизита("ВалютаДокумента", Параметры);
		НоваяСтрока.НазначениеПлатежа		= ПолучитьЗначениеРеквизита("НазначениеПлатежа", Параметры);	
		НоваяСтрока.ВидОперации				= ПолучитьЗначениеРеквизита("ВидОперации", Параметры);	
		НоваяСтрока.СуммаРасход				= ПолучитьЗначениеРеквизита("СуммаДокумента", Параметры);
		НоваяСтрока.СтатьяДДС				= ПолучитьЗначениеРеквизита("СтатьяДвиженияДенежныхСредств", Параметры);
		НоваяСтрока.КурсВалютыВзаиморасчетов= 1;		
		НоваяСтрока.НеОбновлятьДокумент		= НеОбновлять;
		НоваяСтрока.СпособЗачетаАвансов =
			СпособЗачетаОплатыДокумента(ПолучитьЗначениеРеквизита("СпособПогашенияЗадолженности", Параметры));
		
		Если Параметры.Обработка.флЗагрузкаИзБП2=1 Тогда
			НоваяСтрока.ПодразделениеОрганизации	= ПолучитьЗначениеРеквизита("ПодразделениеОрганизации", Параметры);	
		Иначе
			НоваяСтрока.ПодразделениеОрганизации	= Параметры.Обработка.ВыбПодразделение;
		КонецЕсли;		
		
	Иначе	
		Для к = 0 По ТекТабличнаяЧасть.Количество() - 1 Цикл
			НоваяСтрока							= тзВыписка.Добавить();	
			НоваяСтрока.Входящее				= Входящее;
			НоваяСтрока.ИдентификаторОбъекта	= ИдентификаторОбъекта;
			НоваяСтрока.ИдентификаторПриемник	= ИдентификаторПриемник;
			НоваяСтрока.ВидОбъекта				= ТипВидОбъекта;
			НоваяСтрока.ИдентификаторВыписки	= ИдентификаторВыписки;
			НоваяСтрока.ИдентификаторИзмененный = ИдентификаторИзмененный;
			НоваяСтрока.ПолученоСоответствие	= НЕ ЭтоНовыйОбъект;
			
			НомерДокумента	= ПолучитьЗначениеРеквизита("_1С_Номер", Параметры);
			Если ЗначениеЗаполнено(НомерДокумента) Тогда
				РазрядностьНомераДокумента	= Документы.Выписка.СоздатьДокумент().Метаданные().ДлинаНомера;
				Если РазрядностьНомераДокумента>0 Тогда
					УстановитьРеквизит(НоваяСтрока, "Номер",		ПривестиНомерДокумента(НомерДокумента, РазрядностьНомераДокумента));
				КонецЕсли;
			КонецЕсли;			
			
			НоваяСтрока.Дата					= ПолучитьЗначениеРеквизита("_1С_Дата", Параметры);
			НоваяСтрока.ВхДокНомер	= ПолучитьЗначениеРеквизита("ВхДокНомер", Параметры);
			НоваяСтрока.ВхДокДата	= ПолучитьЗначениеРеквизита("ВхДокДата", Параметры);			
			
			ОрганизацияДокумента				= ПолучитьЗначениеРеквизита("Организация", Параметры);
			НоваяСтрока.Организация				= ОрганизацияДокумента;			
			Ответственный						= ПолучитьЗначениеРеквизита("Ответственный", Параметры);
			НоваяСтрока.Ответственный			= Ответственный;	
			НоваяСтрока.Контрагент				= ПолучитьЗначениеРеквизита("Контрагент", Параметры);
			НоваяСтрока.БанковскийСчет			= ПолучитьЗначениеРеквизита("СчетОрганизации", Параметры);
			НоваяСтрока.ВалютаДокумента			= ПолучитьЗначениеРеквизита("ВалютаДокумента", Параметры);
			НоваяСтрока.НазначениеПлатежа		= ПолучитьЗначениеРеквизита("НазначениеПлатежа", Параметры);	
			НоваяСтрока.ВидОперации				= ПолучитьЗначениеРеквизита("ВидОперации", Параметры);
			НоваяСтрока.СпособЗачетаАвансов =
				СпособЗачетаОплатыДокумента(ПолучитьЗначениеРеквизита("СпособПогашенияЗадолженности", Параметры));
			
			Если Параметры.Обработка.флЗагрузкаИзБП2=1 Тогда
				НоваяСтрока.ПодразделениеОрганизации	= ПолучитьЗначениеРеквизита("ПодразделениеОрганизации", Параметры);	
			Иначе
				НоваяСтрока.ПодразделениеОрганизации	= Параметры.Обработка.ВыбПодразделение;
			КонецЕсли;	
			
			ЗначенияСтроки						= ТекТабличнаяЧасть.Получить(к).Значение;
			НоваяСтрока.ДоговорКонтрагента		= ЗначенияСтроки["ДоговорКонтрагента"];
			Если Входящее Тогда
				НоваяСтрока.СуммаПриход			= ЗначенияСтроки["СуммаПлатежа"];
			Иначе
				НоваяСтрока.СуммаРасход			= ЗначенияСтроки["СуммаПлатежа"];
			КонецЕсли;		
			НоваяСтрока.СтатьяДДС				= ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"];
			
			Кратность							= ЗначенияСтроки["КратностьВзаиморасчетов"];
			Если Кратность = 0 Тогда Кратность = 1; КонецЕсли;
			КурсВзаиморасчетов					= ЗначенияСтроки["КурсВзаиморасчетов"];
			КурсВзаиморасчетов					= КурсВзаиморасчетов / Кратность;
			НоваяСтрока.КурсВалютыВзаиморасчетов= ?(КурсВзаиморасчетов = 0, 1, КурсВзаиморасчетов);		
			НоваяСтрока.КоррСчет				= ЗначенияСтроки["СчетУчетаРасчетовСКонтрагентом"];							
			НоваяСтрока.Сделка					= ЗначенияСтроки["Сделка"];
			Если ЗначенияСтроки.Получить("СделкаПриемник") = Неопределено Тогда
				НоваяСтрока.СделкаПриемник		= "";
			Иначе
				НоваяСтрока.СделкаПриемник			= ЗначенияСтроки["СделкаПриемник"];
			КонецЕсли;
			НоваяСтрока.НеОбновлятьДокумент		= НеОбновлять;
			НоваяСтрока.СтавкаНДС				= ПолучитьСтавкуНДСПоИдентификатору(ЗначенияСтроки["СтавкаНДС"]);
			НоваяСтрока.СуммаНДС				= ЗначенияСтроки["СуммаНДС"];
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтрокиВыписки()	

// Процедура обработки загрузки документа <ПлатежноеПоручениеВходящее>.
Процедура ЗагрузитьДокумент_ПлатежноеПоручениеВходящее(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	ДокМенеджер		= Документы.Выписка;
	ТекОбъект		= ДокМенеджер.ПустаяСсылка();
	
	ИдентификаторВыписки	= 0;
	ИдентификаторИзмененный	= 0;	
	НеОбновлять				= Ложь;
	
	Если ПолучитьСоответствиеДляВыписки(
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры,
			ИдентификаторВыписки,
			ИдентификаторИзмененный,
			ИдентификаторПриемник) Тогда
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		НеОбновлять			= НеОбновлятьДокумент(ТекОбъект, Параметры);
	КонецЕсли;			
	
	ЗаполнитьСтрокиВыписки(
		ИдентификаторОбъекта,
		ИдентификаторПриемник,
		Истина,
		ИдентификаторВыписки,
		ИдентификаторИзмененный,
		Параметры.ЭтоНовыйОбъект,
		НеОбновлять,
		Параметры,
		ТипВидОбъекта);
	ТекОбъект				= "";
	
КонецПроцедуры // ЗагрузитьДокумент_ПлатежноеПоручениеВходящее()

// Процедура обработки загрузки документа <ПоступлениеНаРасчетныйСчет>.
Процедура ЗагрузитьДокумент_ПоступлениеНаРасчетныйСчет(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	ЗагрузитьДокумент_ПлатежноеПоручениеВходящее(
		Параметры,
		ТекОбъект,
		ИдентификаторОбъекта,
		ИдентификаторПриемник,
		ТипВидОбъекта);	
	
КонецПроцедуры

// Процедура обработки загрузки документа <ПлатежноеПоручениеИсходящее>.
Процедура ЗагрузитьДокумент_ПлатежноеПоручениеИсходящее(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	ДокМенеджер	= Документы.Выписка;
	ТекОбъект	= ДокМенеджер.ПустаяСсылка();
	
	ИдентификаторВыписки	= 0;
	ИдентификаторИзмененный	= 0;
	НеОбновлять				= Ложь;

	Если ПолучитьСоответствиеДляВыписки(
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры,
			ИдентификаторВыписки,
			ИдентификаторИзмененный,
			ИдентификаторПриемник) Тогда
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		НеОбновлять		= НеОбновлятьДокумент(ТекОбъект, Параметры);
	КонецЕсли;			
	
	ЗаполнитьСтрокиВыписки(
		ИдентификаторОбъекта,
		ИдентификаторПриемник,
		Ложь,
		ИдентификаторВыписки,
		ИдентификаторИзмененный,
		Параметры.ЭтоНовыйОбъект,
		НеОбновлять,
		Параметры,
		ТипВидОбъекта);
	
	ТекОбъект = "";
	
КонецПроцедуры // ЗагрузитьДокумент_ПлатежноеПоручениеИсходящее() 

// Процедура обработки загрузки документа <СписаниеСРасчетногоСчета>.
Процедура ЗагрузитьДокумент_СписаниеСРасчетногоСчета(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	ЗагрузитьДокумент_ПлатежноеПоручениеИсходящее(
		Параметры,
		ТекОбъект,
		ИдентификаторОбъекта,
		ИдентификаторПриемник,
		ТипВидОбъекта);
	
КонецПроцедуры

// Процедура загрузки документов вида <ПриходныйКассовыйОрдер> в <ПриходныйКассовыйОрдер>.
Процедура ЗагрузитьДокумент_ПриходныйКассовыйОрдер(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "ПриходныйКассовыйОрдер";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	ДокМенеджер = Документы.ПриходныйКассовыйОрдер;
	ТекОбъект = ДокМенеджер.ПустаяСсылка();
	
	Если НЕ ПолучитьОбъектПриемник(ДокМенеджер, ИдентификаторОбъекта, ТекОбъект, Параметры.БД_ТС,
										Параметры.Обработка.ЭтоКлиент,, Параметры.Обработка.ЗагрузкаБезФайлаТС, ИдентификаторПриемник) Тогда
		ТекОбъект = ДокМенеджер.СоздатьДокумент();
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ТекОбъект);
		УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, ИдентификаторОбъекта);
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьДокумент(ТекОбъект, Параметры) Тогда Возврат КонецЕсли;
	КонецЕсли;		
	
	ЗагрузкаБезФайлаТС = Параметры.Обработка.ЗагрузкаБезФайлаТС;
	
	ТекТабличнаяЧасть = ПолучитьТабличнуюЧасть(ИдентификаторОбъекта, Параметры, "РасшифровкаПлатежа");
	КоличествоДокументов = ТекТабличнаяЧасть.Количество();
	Если КоличествоДокументов = 1 Тогда 		
		ЗначенияСтроки = ТекТабличнаяЧасть.Получить(0).Значение;
		Если Не ЗначениеЗаполнено(ТекОбъект.Ссылка) Тогда
			ИдентификаторДокумента = ИдентификаторОбъекта + "-0";
			ТекОбъект = ДокМенеджер.ПустаяСсылка();	
			Параметры.Вставить("ЭтоНовыйОбъект", Истина);
			// Получим ИД для проверки
			ИдентификаторПриемникЗначение = ЗначенияСтроки.Получить("_1С_ИдентификаторПриемник");
			Если ИдентификаторПриемникЗначение = Неопределено ИЛИ ИдентификаторПриемникЗначение = "" Тогда
				ИдентификаторИзБП = ИдентификаторОбъекта;
			Иначе
				ИдентификаторИзБП = ЗначенияСтроки["_1С_ИдентификаторПриемник"];
			КонецЕсли;
			
			Если НЕ (ПолучитьОбъектПриемник(
				ДокМенеджер,
				ИдентификаторДокумента,
				ТекОбъект,
				Параметры.БД_ТС,
				Параметры.Обработка.ЭтоКлиент,,
				ЗагрузкаБезФайлаТС)
				ИЛИ ЗагрузкаБезФайлаТС
				И ПолучитьОбъектПриемник(
				ДокМенеджер,
				ИдентификаторИзБП,
				ТекОбъект,
				Параметры.БД_ТС,
				Параметры.Обработка.ЭтоКлиент,,
				ЗагрузкаБезФайлаТС)) Тогда
				ТекОбъект = ДокМенеджер.СоздатьДокумент();
				ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ТекОбъект);
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, ИдентификаторИзБП);
			Иначе
				Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
				Если НеОбновлятьДокумент(ТекОбъект, Параметры) Тогда Возврат; КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗагрузитьШапку(ТекОбъект, Параметры, ЗначенияСтроки);
		
		Кратность = ЗначенияСтроки["КратностьВзаиморасчетов"];
		Если Кратность = 0 Тогда Кратность = 1; КонецЕсли;
		Курс = ЗначенияСтроки["КурсВзаиморасчетов"] / Кратность;
		УстановитьРеквизит(ТекОбъект, "КурсВалютыВзаиморасчетов",	   Курс);
		УстановитьРеквизит(ТекОбъект, "ХозОперация",				   Справочники.ХозОперации.ПриходныйКассовыйОрдер);
		УстановитьРеквизит(ТекОбъект, "ПринятоОт",	                   ПолучитьЗначениеРеквизита("ПринятоОТ", Параметры));
		УстановитьРеквизит(ТекОбъект, "Основание",	                   ПолучитьЗначениеРеквизита("Основание", Параметры));
		УстановитьРеквизит(ТекОбъект, "Приложение",	                   ПолучитьЗначениеРеквизита("Приложение", Параметры));
		СтатьяДДСид = ПолучитьЗначениеРеквизита("СтатьяДвиженияДенежныхСредств", Параметры);
		СтатьяДДСид = ?(НЕ ЗначениеЗаполнено(СтатьяДДСид), ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"], СтатьяДДСид);
		СтатьяДДС = ПолучитьОбъект(СтатьяДДСид,Параметры,"Справочник.СтатьиДДС");
		Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
			СтатьяДДС = Параметры.Обработка.ВыбСтатьяДДС;
		КонецЕсли;	
		УстановитьРеквизит(ТекОбъект, "СтатьяДДС", СтатьяДДС);
		СтавкаНДС = ПолучитьЗначениеРеквизита("СтавкаНДС", Параметры);
		СтавкаНДС = ?(НЕ ЗначениеЗаполнено(СтавкаНДС),	ЗначенияСтроки["СтавкаНДС"], СтавкаНДС); 
		УстановитьРеквизит(ТекОбъект, "СтавкаНДС",		ПолучитьСтавкуНДСПоИдентификатору(СтавкаНДС));
		УстановитьРеквизит(ТекОбъект, "СуммаДокумента",	?(ЗначениеЗаполнено(ЗначенияСтроки["СуммаПлатежа"]), 
								ЗначенияСтроки["СуммаПлатежа"], ПолучитьЗначениеРеквизита("СуммаДокумента", Параметры)));		
		Сделка = ЗначенияСтроки["Сделка"];
		Если ЗначенияСтроки.Получить("СделкаПриемник") = Неопределено Тогда
			СделкаПриемник = "";
		Иначе
			СделкаПриемник = ЗначенияСтроки["СделкаПриемник"];
		КонецЕсли;
		ТипыРеквизита = ТекОбъект.Метаданные().Реквизиты.ДокументОснование.Тип;
		Сделка = ПолучитьДокументСделка(Сделка,ТипыРеквизита,ТекОбъект, Параметры, СделкаПриемник);
		УстановитьРеквизит(ТекОбъект, "ДокументОснование", Сделка);
		
		Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ТекОбъект.ВерсияОбъекта)
			И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ТекОбъект.ДоговорВзаиморасчетов) Тогда
			ТекОбъект.Состав.Очистить();
			НоваяСтрока = ТекОбъект.Состав.Добавить();
			УстановитьРеквизит(НоваяСтрока, "ДокументРасчетов", Сделка);
			УстановитьРеквизит(НоваяСтрока, "Сумма", ТекОбъект.СуммаДокумента);
			УстановитьРеквизит(НоваяСтрока, "СтавкаНДС", ТекОбъект.СтавкаНДС);
			УстановитьРеквизит(НоваяСтрока, "СуммаНДС", ТекОбъект.СуммаНДС);
			УстановитьРеквизит(
				НоваяСтрока,
				"СпособЗачетаОплаты",
				СпособЗачетаОплатыДокумента(ЗначенияСтроки["СпособПогашенияЗадолженности"]));
		Иначе
			УстановитьРеквизит(ТекОбъект, "Сделка", Сделка);
		КонецЕсли;
		
		ЗакрытьДокумент(ТекОбъект, Параметры);
		
		УстановитьСоответствие(ИдентификаторОбъекта, ТекОбъект, Параметры);
		ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
		ДобавитьДокументВДеревоВывода(Параметры, НСтр("ru = 'Приходный кассовый ордер'"), ТекОбъект, Ложь);
		ТекОбъект = "";
		
	ИначеЕсли ЗначениеЗаполнено(ТекОбъект.Ссылка) И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ТекОбъект.ВерсияОбъекта)
			И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ТекОбъект.ДоговорВзаиморасчетов) Тогда
		
		УстановитьРеквизит(ТекОбъект, "ХозОперация",				   Справочники.ХозОперации.ПриходныйКассовыйОрдер);
		УстановитьРеквизит(ТекОбъект, "ПринятоОт",	                   ПолучитьЗначениеРеквизита("ПринятоОТ",  Параметры));
		УстановитьРеквизит(ТекОбъект, "Основание",	                   ПолучитьЗначениеРеквизита("Основание",  Параметры));
		УстановитьРеквизит(ТекОбъект, "Приложение",	                   ПолучитьЗначениеРеквизита("Приложение", Параметры));	
		ТекОбъект.Состав.Очистить();
		Для к = 0 По КоличествоДокументов - 1 Цикл
			ЗначенияСтроки = ТекТабличнаяЧасть.Получить(к).Значение;
			
			Если к = 0 Тогда
				ЗагрузитьШапку(ТекОбъект, Параметры, ЗначенияСтроки);
				Кратность = ЗначенияСтроки["КратностьВзаиморасчетов"];
				Если Кратность = 0 Тогда
					Кратность = 1;
				КонецЕсли;
				Курс = ЗначенияСтроки["КурсВзаиморасчетов"] / Кратность;
				УстановитьРеквизит(ТекОбъект, "КурсВалютыВзаиморасчетов",	   Курс);
				СтатьяДДС = ПолучитьОбъект(ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"], Параметры, "Справочник.СтатьиДвиженияДенежныхСредств");
				Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
					СтатьяДДС = Параметры.Обработка.ВыбСтатьяДДС;
				КонецЕсли;	
				УстановитьРеквизит(ТекОбъект, "СтатьяДДС",		СтатьяДДС);
				УстановитьРеквизит(ТекОбъект, "СтавкаНДС",		ПолучитьСтавкуНДСПоИдентификатору(ЗначенияСтроки["СтавкаНДС"]));
			КонецЕсли;
			
			НоваяСтрока = ТекОбъект.Состав.Добавить();
			Сделка = ЗначенияСтроки["Сделка"];
			Если ЗначенияСтроки.Получить("СделкаПриемник") = Неопределено Тогда
				СделкаПриемник = "";
			Иначе
				СделкаПриемник = ЗначенияСтроки["СделкаПриемник"];
			КонецЕсли;
			
			ТипыРеквизита = ТекОбъект.Метаданные().Реквизиты.ДокументОснование.Тип;
			Сделка = ПолучитьДокументСделка(Сделка,ТипыРеквизита,ТекОбъект, Параметры, СделкаПриемник);
			УстановитьРеквизит(ТекОбъект, "ДокументОснование", Сделка);
			УстановитьРеквизит(НоваяСтрока, "ДокументРасчетов", Сделка);
			УстановитьРеквизит(НоваяСтрока, "Сумма", ТекОбъект.СуммаДокумента);
			УстановитьРеквизит(НоваяСтрока, "СтавкаНДС", ТекОбъект.СтавкаНДС);
			УстановитьРеквизит(НоваяСтрока, "СуммаНДС", ТекОбъект.СуммаНДС);
			УстановитьРеквизит(
				НоваяСтрока,
				"СпособЗачетаОплаты",
				СпособЗачетаОплатыДокумента(ЗначенияСтроки["СпособПогашенияЗадолженности"]));
		КонецЦикла;
		УстановитьРеквизит(ТекОбъект, "СуммаДокумента", ТекОбъект.Состав.Итог("Сумма"));
		УстановитьРеквизит(ТекОбъект, "СуммаНДС", ТекОбъект.Состав.Итог("СуммаНДС"));
		ЗакрытьДокумент(ТекОбъект, Параметры);
		УстановитьСоответствие(ИдентификаторДокумента, ТекОбъект, Параметры);
		ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
		ДобавитьДокументВДеревоВывода(Параметры, НСтр("ru = 'Приходный кассовый ордер'"), ТекОбъект, Ложь);
		ТекОбъект = "";
	Иначе
		
		Для к = 0 По КоличествоДокументов - 1 Цикл
			ЗначенияСтроки = ТекТабличнаяЧасть.Получить(к).Значение;
			ИдентификаторДокумента = ИдентификаторОбъекта + "-"+Строка(к);
			ТекОбъект = ДокМенеджер.ПустаяСсылка();	
			Параметры.Вставить("ЭтоНовыйОбъект", Истина);
			// Получим ИД для проверки
			ИдентификаторПриемникЗначение = ЗначенияСтроки.Получить("_1С_ИдентификаторПриемник");
			Если ИдентификаторПриемникЗначение = Неопределено ИЛИ ИдентификаторПриемникЗначение = "" Тогда
				ИдентификаторИзБП = ИдентификаторОбъекта;
			Иначе
				ИдентификаторИзБП = ЗначенияСтроки["_1С_ИдентификаторПриемник"];
			КонецЕсли;
			
			Если НЕ (ПолучитьОбъектПриемник(
					ДокМенеджер,
					ИдентификаторДокумента,
					ТекОбъект,
					Параметры.БД_ТС,
					Параметры.Обработка.ЭтоКлиент,,
					ЗагрузкаБезФайлаТС)
				ИЛИ ЗагрузкаБезФайлаТС
				И ПолучитьОбъектПриемник(
					ДокМенеджер,
					ИдентификаторИзБП,
					ТекОбъект,
					Параметры.БД_ТС,
					Параметры.Обработка.ЭтоКлиент,,
					ЗагрузкаБезФайлаТС)) Тогда
				ТекОбъект = ДокМенеджер.СоздатьДокумент();
				ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ТекОбъект);
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, ИдентификаторИзБП);
			Иначе
				Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
				Если НеОбновлятьДокумент(ТекОбъект, Параметры) Тогда 
					ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
					ДобавитьДокументВДеревоВывода(Параметры,НСтр("ru = 'Приходный кассовый ордер'"), ТекОбъект,Ложь);
					ТекОбъект = "";
					Продолжить; 
				КонецЕсли;
			КонецЕсли;		
			ЗагрузитьШапку(ТекОбъект, Параметры, ЗначенияСтроки);
			
			Кратность = ЗначенияСтроки["КратностьВзаиморасчетов"];
			Если Кратность = 0 Тогда Кратность = 1; КонецЕсли;
			Курс = ЗначенияСтроки["КурсВзаиморасчетов"] / Кратность;
			УстановитьРеквизит(ТекОбъект, "КурсВалютыВзаиморасчетов",	   Курс);
			УстановитьРеквизит(ТекОбъект, "ХозОперация",				   Справочники.ХозОперации.ПриходныйКассовыйОрдер);
			УстановитьРеквизит(ТекОбъект, "ПринятоОт",	                   ПолучитьЗначениеРеквизита("ПринятоОТ",  Параметры));
			УстановитьРеквизит(ТекОбъект, "Основание",	                   ПолучитьЗначениеРеквизита("Основание",  Параметры));
			УстановитьРеквизит(ТекОбъект, "Приложение",	                   ПолучитьЗначениеРеквизита("Приложение", Параметры));	
			СтатьяДДС = ПолучитьОбъект(ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"], Параметры, "Справочник.СтатьиДвиженияДенежныхСредств");
			Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
				СтатьяДДС = Параметры.Обработка.ВыбСтатьяДДС;
			КонецЕсли;	
			УстановитьРеквизит(ТекОбъект, "СтатьяДДС",		СтатьяДДС);
			УстановитьРеквизит(ТекОбъект, "СтавкаНДС",		ПолучитьСтавкуНДСПоИдентификатору(ЗначенияСтроки["СтавкаНДС"]));
			УстановитьРеквизит(ТекОбъект, "СуммаДокумента",	ЗначенияСтроки["СуммаПлатежа"]);
			Сделка = ЗначенияСтроки["Сделка"];
			Если ЗначенияСтроки.Получить("СделкаПриемник") = Неопределено Тогда
				СделкаПриемник = "";
			Иначе
				СделкаПриемник = ЗначенияСтроки["СделкаПриемник"];
			КонецЕсли;
			
			ТипыРеквизита = ТекОбъект.Метаданные().Реквизиты.ДокументОснование.Тип;
			Сделка = ПолучитьДокументСделка(Сделка,ТипыРеквизита,ТекОбъект, Параметры, СделкаПриемник);
			УстановитьРеквизит(ТекОбъект, "ДокументОснование", Сделка);
			Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ТекОбъект.ВерсияОбъекта)
				И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ТекОбъект.ДоговорВзаиморасчетов) Тогда
				ТекОбъект.Состав.Очистить();
				НоваяСтрока = ТекОбъект.Состав.Добавить();
				УстановитьРеквизит(НоваяСтрока, "ДокументРасчетов", Сделка);
				УстановитьРеквизит(НоваяСтрока, "Сумма", ТекОбъект.СуммаДокумента);
				УстановитьРеквизит(НоваяСтрока, "СтавкаНДС", ТекОбъект.СтавкаНДС);
				УстановитьРеквизит(НоваяСтрока, "СуммаНДС", ТекОбъект.СуммаНДС);
				УстановитьРеквизит(
					НоваяСтрока,
					"СпособЗачетаОплаты",
					СпособЗачетаОплатыДокумента(ЗначенияСтроки["СпособПогашенияЗадолженности"]));
			Иначе
				УстановитьРеквизит(ТекОбъект, "Сделка", Сделка);
			КонецЕсли;
			
			ЗакрытьДокумент(ТекОбъект, Параметры);
			УстановитьСоответствие(ИдентификаторДокумента, ТекОбъект, Параметры);
			ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
			ДобавитьДокументВДеревоВывода(Параметры, НСтр("ru = 'Приходный кассовый ордер'"), ТекОбъект, Ложь);
		КонецЦикла;			
		ТекОбъект = "";
	КонецЕсли;
	
	// Пометим на удаление ПКО, которые есть в соответствии, но которые уже не нужны.
	ПометитьНаУдалениеДокументыСоответствия(ИдентификаторОбъекта,КоличествоДокументов,ДокМенеджер, Параметры);
	
КонецПроцедуры  // ЗагрузитьДокумент_ПриходныйКассовыйОрдер

// Процедура загрузки документов вида <РасходныйКассовыйОрдер> в <РасходныйКассовыйОрдер>.
Процедура ЗагрузитьДокумент_РасходныйКассовыйОрдер(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "РасходныйКассовыйОрдер";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	ДокМенеджер = Документы.РасходныйКассовыйОрдер;
	ТекОбъект = ДокМенеджер.ПустаяСсылка();
	
	Если НЕ ПолучитьОбъектПриемник(
			ДокМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		ТекОбъект = ДокМенеджер.СоздатьДокумент();
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ТекОбъект);
		УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, ИдентификаторОбъекта);
	Иначе
		Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
		Если НеОбновлятьДокумент(ТекОбъект, Параметры) Тогда Возврат КонецЕсли;
	КонецЕсли;		
	
	ВидОперации = ПолучитьЗначениеРеквизита("ВидОперации", Параметры);	
	ТекТабличнаяЧасть = ПолучитьТабличнуюЧасть(ИдентификаторОбъекта, Параметры, "РасшифровкаПлатежа");
	
	ЗагрузкаБезФайлаТС = Параметры.Обработка.ЗагрузкаБезФайлаТС;
	
	КоличествоДокументов = ТекТабличнаяЧасть.Количество();
	Если КоличествоДокументов = 1 ИЛИ СтрНайти(ВидОперации,"Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлаты")>0 Тогда 
		ЗначенияСтроки = ТекТабличнаяЧасть.Получить(0).Значение;
		Если Не ЗначениеЗаполнено(ТекОбъект.Ссылка) Тогда
			ИдентификаторДокумента = ИдентификаторОбъекта + "-0";
			ТекОбъект = ДокМенеджер.ПустаяСсылка();	
			Параметры.Вставить("ЭтоНовыйОбъект", Истина);
			// Получим ИД для проверки
			ИдентификаторПриемникЗначение = ЗначенияСтроки.Получить("_1С_ИдентификаторПриемник");
			Если ИдентификаторПриемникЗначение = Неопределено ИЛИ ИдентификаторПриемникЗначение = "" Тогда
				ИдентификаторИзБП = ИдентификаторОбъекта;
			Иначе
				ИдентификаторИзБП = ЗначенияСтроки["_1С_ИдентификаторПриемник"];
			КонецЕсли;
			
			Если НЕ (ПолучитьОбъектПриемник(
					ДокМенеджер,
					ИдентификаторДокумента,
					ТекОбъект,
					Параметры.БД_ТС,
					Параметры.Обработка.ЭтоКлиент,,
					ЗагрузкаБезФайлаТС)
				ИЛИ ЗагрузкаБезФайлаТС
				И ПолучитьОбъектПриемник(
					ДокМенеджер,
					ИдентификаторИзБП,
					ТекОбъект,
					Параметры.БД_ТС,
					Параметры.Обработка.ЭтоКлиент,,
					ЗагрузкаБезФайлаТС)) Тогда
				ТекОбъект = ДокМенеджер.СоздатьДокумент();
				ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ТекОбъект);
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, ИдентификаторИзБП);
			Иначе
				Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
				Если НеОбновлятьДокумент(ТекОбъект, Параметры) Тогда Возврат; КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		ЗагрузитьШапку(ТекОбъект, Параметры, ЗначенияСтроки);
		
		Кратность = ЗначенияСтроки["КратностьВзаиморасчетов"];
		Если Кратность = 0 Тогда Кратность = 1; КонецЕсли;
		Курс = ЗначенияСтроки["КурсВзаиморасчетов"] / Кратность;
		УстановитьРеквизит(ТекОбъект, "КурсВалютыВзаиморасчетов",	Курс);
		УстановитьРеквизит(ТекОбъект, "ХозОперация",				Справочники.ХозОперации.РасходныйКассовыйОрдер);
		УстановитьРеквизит(ТекОбъект, "ПринятоОт",	              	ПолучитьЗначениеРеквизита("ПринятоОТ", Параметры));
		УстановитьРеквизит(ТекОбъект, "Основание",	              	ПолучитьЗначениеРеквизита("Основание", Параметры));
		УстановитьРеквизит(ТекОбъект, "Приложение",	              	ПолучитьЗначениеРеквизита("Приложение",Параметры));
		УстановитьРеквизит(ТекОбъект, "Выдать",	 					ПолучитьЗначениеРеквизита("Выдать",    Параметры));
		СтатьяДДСид = ПолучитьЗначениеРеквизита("СтатьяДвиженияДенежныхСредств", Параметры);
		СтатьяДДСид = ?(НЕ ЗначениеЗаполнено(СтатьяДДСид), ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"], СтатьяДДСид);
		СтатьяДДС = ПолучитьОбъект(СтатьяДДСид, Параметры, "Справочник.СтатьиДДС");
		Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
			СтатьяДДС = Параметры.Обработка.ВыбСтатьяДДС;
		КонецЕсли;	
		УстановитьРеквизит(ТекОбъект, "СтатьяДДС", 		СтатьяДДС);
		СтавкаНДС = ПолучитьЗначениеРеквизита("СтавкаНДС", Параметры);
		СтавкаНДС = ?(НЕ ЗначениеЗаполнено(СтавкаНДС),	ЗначенияСтроки["СтавкаНДС"], СтавкаНДС); 
		УстановитьРеквизит(ТекОбъект, "СтавкаНДС",		ПолучитьСтавкуНДСПоИдентификатору(СтавкаНДС));
		Если ВидОперации = "Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям"
			ИЛИ ВидОперации = "Перечисление.ВидыОперацийРКО.ВыплатаДепонентов" Тогда
			УстановитьРеквизит(ТекОбъект, "СуммаДокумента",	ПолучитьЗначениеРеквизита("СуммаДокумента", Параметры));	
		Иначе	
			УстановитьРеквизит(ТекОбъект, "СуммаДокумента",	ЗначенияСтроки["СуммаПлатежа"]);
		КонецЕсли;	
		Сделка = ЗначенияСтроки["Сделка"];
		Если ЗначенияСтроки.Получить("СделкаПриемник") = Неопределено Тогда
			СделкаПриемник = "";
		Иначе
			СделкаПриемник = ЗначенияСтроки["СделкаПриемник"];
		КонецЕсли;
		ТипыРеквизита = ТекОбъект.Метаданные().Реквизиты.ДокументОснование.Тип;
		Сделка = ПолучитьДокументСделка(Сделка,ТипыРеквизита,ТекОбъект, Параметры, СделкаПриемник);
		УстановитьРеквизит(ТекОбъект, "ДокументОснование", Сделка);
		Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ТекОбъект.ВерсияОбъекта)
			И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ТекОбъект.ДоговорВзаиморасчетов) Тогда
			ТекОбъект.Состав.Очистить();
			НоваяСтрока = ТекОбъект.Состав.Добавить();
			УстановитьРеквизит(НоваяСтрока, "ДокументРасчетов", Сделка);
			УстановитьРеквизит(НоваяСтрока, "Сумма", ТекОбъект.СуммаДокумента);
			УстановитьРеквизит(НоваяСтрока, "СтавкаНДС", ТекОбъект.СтавкаНДС);
			УстановитьРеквизит(НоваяСтрока, "СуммаНДС", ТекОбъект.СуммаНДС);
			УстановитьРеквизит(
				НоваяСтрока,
				"СпособЗачетаОплаты",
				СпособЗачетаОплатыДокумента(ЗначенияСтроки["СпособПогашенияЗадолженности"]));
		Иначе
			УстановитьРеквизит(ТекОбъект, "Сделка", Сделка);
		КонецЕсли;
		ЗакрытьДокумент(ТекОбъект, Параметры);
		
		УстановитьСоответствие(ИдентификаторОбъекта, ТекОбъект, Параметры);
		ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
		ДобавитьДокументВДеревоВывода(Параметры, НСтр("ru = 'Расходный кассовый ордер'"), ТекОбъект, Ложь);
		ТекОбъект = "";
	ИначеЕсли ЗначениеЗаполнено(ТекОбъект.Ссылка) И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ТекОбъект.ВерсияОбъекта)
			И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ТекОбъект.ДоговорВзаиморасчетов) Тогда
		
		УстановитьРеквизит(ТекОбъект, "ХозОперация",				   Справочники.ХозОперации.ПриходныйКассовыйОрдер);
		УстановитьРеквизит(ТекОбъект, "ПринятоОт",	                   ПолучитьЗначениеРеквизита("ПринятоОТ",  Параметры));
		УстановитьРеквизит(ТекОбъект, "Основание",	                   ПолучитьЗначениеРеквизита("Основание",  Параметры));
		УстановитьРеквизит(ТекОбъект, "Приложение",	                   ПолучитьЗначениеРеквизита("Приложение", Параметры));	
		ТекОбъект.Состав.Очистить();
		Для к = 0 По КоличествоДокументов - 1 Цикл
			ЗначенияСтроки = ТекТабличнаяЧасть.Получить(к).Значение;
			
			Если к = 0 Тогда
				ЗагрузитьШапку(ТекОбъект, Параметры, ЗначенияСтроки);
				Кратность = ЗначенияСтроки["КратностьВзаиморасчетов"];
				Если Кратность = 0 Тогда
					Кратность = 1;
				КонецЕсли;
				Курс = ЗначенияСтроки["КурсВзаиморасчетов"] / Кратность;
				УстановитьРеквизит(ТекОбъект, "КурсВалютыВзаиморасчетов",	   Курс);
				СтатьяДДС = ПолучитьОбъект(ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"], Параметры, "Справочник.СтатьиДвиженияДенежныхСредств");
				Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
					СтатьяДДС = Параметры.Обработка.ВыбСтатьяДДС;
				КонецЕсли;	
				УстановитьРеквизит(ТекОбъект, "СтатьяДДС",		СтатьяДДС);
				УстановитьРеквизит(ТекОбъект, "СтавкаНДС",		ПолучитьСтавкуНДСПоИдентификатору(ЗначенияСтроки["СтавкаНДС"]));
			КонецЕсли;
			
			НоваяСтрока = ТекОбъект.Состав.Добавить();
			Сделка = ЗначенияСтроки["Сделка"];
			Если ЗначенияСтроки.Получить("СделкаПриемник") = Неопределено Тогда
				СделкаПриемник = "";
			Иначе
				СделкаПриемник = ЗначенияСтроки["СделкаПриемник"];
			КонецЕсли;
			
			ТипыРеквизита = ТекОбъект.Метаданные().Реквизиты.ДокументОснование.Тип;
			Сделка = ПолучитьДокументСделка(Сделка,ТипыРеквизита,ТекОбъект, Параметры, СделкаПриемник);
			УстановитьРеквизит(ТекОбъект, "ДокументОснование", Сделка);
			УстановитьРеквизит(НоваяСтрока, "ДокументРасчетов", Сделка);
			УстановитьРеквизит(НоваяСтрока, "Сумма", ТекОбъект.СуммаДокумента);
			УстановитьРеквизит(НоваяСтрока, "СтавкаНДС", ТекОбъект.СтавкаНДС);
			УстановитьРеквизит(НоваяСтрока, "СуммаНДС", ТекОбъект.СуммаНДС);
			УстановитьРеквизит(
				НоваяСтрока,
				"СпособЗачетаОплаты",
				СпособЗачетаОплатыДокумента(ЗначенияСтроки["СпособПогашенияЗадолженности"]));
		КонецЦикла;
		УстановитьРеквизит(ТекОбъект, "СуммаДокумента", ТекОбъект.Состав.Итог("Сумма"));
		УстановитьРеквизит(ТекОбъект, "СуммаНДС", ТекОбъект.Состав.Итог("СуммаНДС"));
		ЗакрытьДокумент(ТекОбъект, Параметры);
		УстановитьСоответствие(ИдентификаторДокумента, ТекОбъект, Параметры);
		ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
		ДобавитьДокументВДеревоВывода(Параметры, НСтр("ru = 'Приходный кассовый ордер'"), ТекОбъект, Ложь);
		ТекОбъект = "";
	Иначе
		Для к = 0 По КоличествоДокументов - 1 Цикл
			ЗначенияСтроки = ТекТабличнаяЧасть.Получить(к).Значение;
			ИдентификаторДокумента = ИдентификаторОбъекта + "-"+Строка(к);
			ТекОбъект = ДокМенеджер.ПустаяСсылка();	
			Параметры.Вставить("ЭтоНовыйОбъект", Истина);
			// Получим ИД для проверки
			ИдентификаторПриемникЗначение = ЗначенияСтроки.Получить("_1С_ИдентификаторПриемник");
			Если ИдентификаторПриемникЗначение = Неопределено ИЛИ ИдентификаторПриемникЗначение = "" Тогда
				ИдентификаторИзБП = ИдентификаторОбъекта;
			Иначе
				ИдентификаторИзБП = ЗначенияСтроки["_1С_ИдентификаторПриемник"];
			КонецЕсли;
			
			Если НЕ (ПолучитьОбъектПриемник(
					ДокМенеджер,
					ИдентификаторДокумента,
					ТекОбъект,
					Параметры.БД_ТС,
					Параметры.Обработка.ЭтоКлиент,,
					ЗагрузкаБезФайлаТС)
				ИЛИ ЗагрузкаБезФайлаТС
				И ПолучитьОбъектПриемник(
					ДокМенеджер,
					ИдентификаторИзБП,
					ТекОбъект,
					Параметры.БД_ТС,
					Параметры.Обработка.ЭтоКлиент,,
					ЗагрузкаБезФайлаТС)) Тогда
				ТекОбъект = ДокМенеджер.СоздатьДокумент();
				ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ТекОбъект);
				УстановитьИдентификаторОбъекту(Параметры, ТекОбъект, ДокМенеджер, ИдентификаторИзБП);
			Иначе
				Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
				Если НеОбновлятьДокумент(ТекОбъект, Параметры) Тогда 
					ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
					ДобавитьДокументВДеревоВывода(Параметры, НСтр("ru = 'Расходный кассовый ордер'"), ТекОбъект, Ложь);
					ТекОбъект = "";
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЗагрузитьШапку(ТекОбъект, Параметры, ЗначенияСтроки);
			
			Кратность = ЗначенияСтроки["КратностьВзаиморасчетов"];
			Если Кратность = 0 Тогда Кратность = 1; КонецЕсли;
			Курс = ЗначенияСтроки["КурсВзаиморасчетов"] / Кратность;
			УстановитьРеквизит(ТекОбъект, "КурсВалютыВзаиморасчетов",	Курс);
			УстановитьРеквизит(ТекОбъект, "ХозОперация",				Справочники.ХозОперации.РасходныйКассовыйОрдер);
			УстановитьРеквизит(ТекОбъект, "ПринятоОт",	               	ПолучитьЗначениеРеквизита("ПринятоОТ", Параметры));
			УстановитьРеквизит(ТекОбъект, "Основание",	               	ПолучитьЗначениеРеквизита("Основание", Параметры));
			УстановитьРеквизит(ТекОбъект, "Приложение",	               	ПолучитьЗначениеРеквизита("Приложение", Параметры));
			СтатьяДДС = ПолучитьОбъект(ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"], Параметры, "Справочник.СтатьиДвиженияДенежныхСредств");
			Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
				СтатьяДДС = Параметры.Обработка.ВыбСтатьяДДС;
			КонецЕсли;	
			УстановитьРеквизит(ТекОбъект, "СтатьяДДС", 		СтатьяДДС);
			УстановитьРеквизит(ТекОбъект, "СтавкаНДС",		ПолучитьСтавкуНДСПоИдентификатору(ЗначенияСтроки["СтавкаНДС"]));
			УстановитьРеквизит(ТекОбъект, "СуммаДокумента",	ЗначенияСтроки["СуммаПлатежа"]);
			Сделка = ЗначенияСтроки["Сделка"];
			
			Если ЗначенияСтроки.Получить("СделкаПриемник") = Неопределено Тогда
				СделкаПриемник = "";
			Иначе
				СделкаПриемник = ЗначенияСтроки["СделкаПриемник"];
			КонецЕсли;
		
			ТипыРеквизита = ТекОбъект.Метаданные().Реквизиты.ДокументОснование.Тип;
			Сделка = ПолучитьДокументСделка(Сделка,ТипыРеквизита,ТекОбъект, Параметры, СделкаПриемник);
			УстановитьРеквизит(ТекОбъект, "ДокументОснование", Сделка);
			Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ТекОбъект.ВерсияОбъекта)
				И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ТекОбъект.ДоговорВзаиморасчетов) Тогда
				ТекОбъект.Состав.Очистить();
				НоваяСтрока = ТекОбъект.Состав.Добавить();
				УстановитьРеквизит(НоваяСтрока, "ДокументРасчетов", Сделка);
				УстановитьРеквизит(НоваяСтрока, "Сумма", ТекОбъект.СуммаДокумента);
				УстановитьРеквизит(НоваяСтрока, "СтавкаНДС", ТекОбъект.СтавкаНДС);
				УстановитьРеквизит(НоваяСтрока, "СуммаНДС", ТекОбъект.СуммаНДС);
				УстановитьРеквизит(
					НоваяСтрока,
					"СпособЗачетаОплаты",
					СпособЗачетаОплатыДокумента(ЗначенияСтроки["СпособПогашенияЗадолженности"]));
			Иначе
				УстановитьРеквизит(ТекОбъект, "Сделка", Сделка);
			КонецЕсли;
			
			ЗакрытьДокумент(ТекОбъект, Параметры);
			УстановитьСоответствие(ИдентификаторДокумента, ТекОбъект, Параметры);
			ДобавитьИнформациюОЗагрузке(ТекОбъект, Параметры);
			ДобавитьДокументВДеревоВывода(Параметры, НСтр("ru = 'Расходный кассовый ордер'"), ТекОбъект, Ложь);
		КонецЦикла;			
		ТекОбъект = "";
	КонецЕсли;
	
	// Пометим на удаление ПКО, которые есть в соответствии, но которые уже не нужны.
	ПометитьНаУдалениеДокументыСоответствия(ИдентификаторОбъекта,КоличествоДокументов,ДокМенеджер, Параметры);
	
	// Необходимо загрузить Выписку для отражения поступления ден.средств на счет
	Если ВидОперации = "Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк" Тогда
		
		ДокМенеджерВП = Документы.Выписка;
		ТекОбъектВП = ДокМенеджерВП.ПустаяСсылка();
		
		ИдентификаторВыписки = 0;
		ИдентификаторИзмененный = 0;	
		НеОбновлять = Ложь;
		
		ИдентификаторОбъектаРКО	= ПолучитьЗначениеРеквизита("_1С_ИдентификаторБД", Параметры);
		ИдентификаторОбъектаВП 	= ИдентификаторОбъектаРКО + "-ВП1";
		Если ПолучитьСоответствиеДляВыписки(
				ИдентификаторОбъектаВП,
				ТекОбъектВП,
				Параметры,
				ИдентификаторВыписки,
				ИдентификаторИзмененный,
				ИдентификаторПриемник) Тогда
			Параметры.Вставить("ЭтоНовыйОбъект", Ложь);
			НеОбновлять = НеОбновлятьДокумент(ТекОбъектВП, Параметры);
		КонецЕсли;			
		
		ТекТабличнаяЧасть = ПолучитьТабличнуюЧасть(ИдентификаторОбъектаРКО, Параметры, "РасшифровкаПлатежа");
		Для к = 0 По ТекТабличнаяЧасть.Количество() - 1 Цикл
			тзВыписка = Параметры.тзВыписка;
			НоваяСтрока							= тзВыписка.Добавить();	
			НоваяСтрока.Входящее				= Истина;
			НоваяСтрока.ИдентификаторОбъекта	= ИдентификаторОбъектаВП;
			НоваяСтрока.ИдентификаторПриемник	= ИдентификаторПриемник;
			НоваяСтрока.ВидОбъекта				= ТипВидОбъекта;
			НоваяСтрока.ИдентификаторВыписки	= ИдентификаторВыписки;
			НоваяСтрока.ИдентификаторИзмененный	= ИдентификаторИзмененный;
			НоваяСтрока.ПолученоСоответствие	= НЕ Параметры.ЭтоНовыйОбъект;
			
			НомерДокумента	= ПолучитьЗначениеРеквизита("_1С_Номер", Параметры);
			Если ЗначениеЗаполнено(НомерДокумента) Тогда
				РазрядностьНомераДокумента	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент().Метаданные().ДлинаНомера;
				Если РазрядностьНомераДокумента>0 Тогда
					УстановитьРеквизит(НоваяСтрока, "Номер",		ПривестиНомерДокумента(НомерДокумента, РазрядностьНомераДокумента));
				КонецЕсли;
			КонецЕсли;				
			
			НоваяСтрока.Дата					= ПолучитьЗначениеРеквизита("_1С_Дата", Параметры);
			
			НоваяСтрока.ВхДокНомер	= НоваяСтрока.Номер;
			НоваяСтрока.ВхДокДата	= НоваяСтрока.Дата;				
			
			ОрганизацияДокумента				= ПолучитьЗначениеРеквизита("Организация", Параметры);
			НоваяСтрока.Организация				= ОрганизацияДокумента;
			Ответственный						= ПолучитьЗначениеРеквизита("Ответственный", Параметры);
			НоваяСтрока.Ответственный			= Ответственный;	
			НоваяСтрока.Контрагент				= ТекОбъект.Контрагент;
			НоваяСтрока.БанковскийСчет			= ПолучитьЗначениеРеквизита("СчетОрганизации", Параметры);
			НоваяСтрока.ВалютаДокумента			= ПолучитьЗначениеРеквизита("ВалютаДокумента", Параметры);
			НоваяСтрока.ВидОперации				= "Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк";	
			
			ЗначенияСтроки = ТекТабличнаяЧасть.Получить(к).Значение;
			НоваяСтрока.ДоговорКонтрагента = ТекОбъект.ДоговорВзаиморасчетов;
			НоваяСтрока.СуммаПриход = ЗначенияСтроки["СуммаПлатежа"];
			НоваяСтрока.СтатьяДДС = ЗначенияСтроки["СтатьяДвиженияДенежныхСредств"];
			
			Кратность = ЗначенияСтроки["КратностьВзаиморасчетов"];
			Если Кратность = 0 Тогда Кратность = 1; КонецЕсли;
			КурсВзаиморасчетов = ЗначенияСтроки["КурсВзаиморасчетов"];
			КурсВзаиморасчетов = КурсВзаиморасчетов / Кратность;
			НоваяСтрока.КурсВалютыВзаиморасчетов = ?(КурсВзаиморасчетов = 0, 1, КурсВзаиморасчетов);
			НоваяСтрока.КоррСчет = ЗначенияСтроки["СчетУчетаРасчетовСКонтрагентом"];
			НоваяСтрока.Сделка = ИдентификаторОбъекта;
			НоваяСтрока.СделкаПриемник = ИдентификаторОбъекта;
			НоваяСтрока.НеОбновлятьДокумент = НеОбновлять;
			НоваяСтрока.ИсточникКО = ТекОбъект.Ссылка;
			НоваяСтрока.СтавкаНДС  = ТекОбъект.СтавкаНДС;
			НоваяСтрока.СуммаНДС   = ЗначенияСтроки["СуммаНДС"];
			НоваяСтрока.СпособЗачетаАвансов  = СпособЗачетаОплатыДокумента(ЗначенияСтроки["СпособПогашенияЗадолженности"]);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры  // ЗагрузитьДокумент_РасходныйКассовыйОрдер

// Процедура загрузки данных из документа вида <УведомлениеОбОстаткахПрослеживаемыхТоваров>. 
Процедура ЗагрузитьДокумент_УведомлениеОбОстаткахПрослеживаемыхТоваров(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
		
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "УведомлениеОбОстаткахПрослеживаемыхТоваров";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда Возврат; КонецЕсли;
	
	ДокМенеджер = Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров;
	ТекОбъект = ДокМенеджер.ПустаяСсылка();
	
	Если НЕ ПолучитьОбъектПриемник(
			ДокМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры.БД_ТС,                                                                         
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		Возврат;
	Иначе                                                                                
		ИД_РНПТ = ПолучитьЗначениеРеквизита("РНПТ", Параметры);
		
		Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
			Спр = "Справочник.НомераГТД";
		Иначе
			Спр = "Справочник.ГТД";
		КонецЕсли;
		
		Ссылка_РНПТ = ПолучитьОбъект(ИД_РНПТ, Параметры, Спр);
		
		Объект_РНПТ = Ссылка_РНПТ.ПолучитьОбъект();
		Объект_РНПТ.РНПТ = Истина;
		Объект_РНПТ.ОбменДанными.Загрузка = Истина;
		Объект_РНПТ.Записать();
		
		ДокОбъект = ТекОбъект.Ссылка.ПолучитьОбъект();
		ДокОбъект.РНПТ = Ссылка_РНПТ;
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать();
		
		Возврат;
		
	КонецЕсли;			
	
КонецПроцедуры  // ЗагрузитьДокумент_УведомлениеОбОстаткахПрослеживаемыхТоваров

// Процедура Обновления документов вида <УведомлениеОВвозеПрослеживаемыхТоваров>
Процедура ЗагрузитьДокумент_УведомлениеОВвозеПрослеживаемыхТоваров(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "УведомлениеОВвозеПрослеживаемыхТоваров";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ДокМенеджер = Документы.УведомлениеОВвозеПрослеживаемыхТоваров;
	ТекОбъект = ДокМенеджер.ПустаяСсылка();
	
	Если НЕ ПолучитьОбъектПриемник(
			ДокМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		Возврат;
	Иначе
		ИД_РНПТ = ПолучитьЗначениеРеквизита("РНПТ", Параметры);
		Если Параметры.Обработка.ЗагрузкаБезФайлаТС Тогда
			Спр = "Справочник.НомераГТД";
		Иначе
			Спр = "Справочник.ГТД";
		КонецЕсли;
		
		Ссылка_РНПТ = ПолучитьОбъект(ИД_РНПТ, Параметры, Спр);
		
		Если ЗначениеЗаполнено(Ссылка_РНПТ) Тогда
			Объект_РНПТ = Ссылка_РНПТ.ПолучитьОбъект();
			Объект_РНПТ.РНПТ = Истина;
			Если НЕ ЗначениеЗаполнено(Объект_РНПТ.Страна) Тогда
				Объект_РНПТ.Страна = ТекОбъект.СтранаПроисхождения;
			КонецЕсли;
			Объект_РНПТ.ОбменДанными.Загрузка = Истина;
			Объект_РНПТ.Записать();
			
			ДокОбъект = ТекОбъект.Ссылка.ПолучитьОбъект();
			ДокОбъект.РНПТ = Ссылка_РНПТ;
			Объект_РНПТ.ОбменДанными.Загрузка = Истина;
			ДокОбъект.Записать();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;		
		
КонецПроцедуры

// Процедура Обновления документов вида <УведомлениеОПеремещенииПрослеживаемыхТоваров>
Процедура ЗагрузитьДокумент_УведомлениеОПеремещенииПрослеживаемыхТоваров(
		Параметры,
		ТекОбъект = "",
		ИдентификаторОбъекта = "",
		ИдентификаторПриемник = "",
		ТипВидОбъекта = "") Экспорт
	
	Параметры.Вставить("ЕстьПроцедураЗагрузки", Истина);
	ИмяМенеджераОбъекта = "УведомлениеОПеремещенииПрослеживаемыхТоваров";
	Если ПустаяСтрока(ТекОбъект) И ПустаяСтрока(ИдентификаторОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ДокМенеджер = Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров;
	ТекОбъект = ДокМенеджер.ПустаяСсылка();
	
	Если НЕ ПолучитьОбъектПриемник(
			ДокМенеджер,
			ИдентификаторОбъекта,
			ТекОбъект,
			Параметры.БД_ТС,
			Параметры.Обработка.ЭтоКлиент,,
			Параметры.Обработка.ЗагрузкаБезФайлаТС,
			ИдентификаторПриемник) Тогда
		Возврат;
	Иначе
		
		СостояниеДокумента = ПолучитьЗначениеРеквизита("_1С_Статус", Параметры);
		
		Если СостояниеДокумента = "Сдано"
			И ТекОбъект.Состояние <> Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.Отправлен Тогда
			
			ДокОбъект = ТекОбъект.Ссылка.ПолучитьОбъект();
			ДокОбъект.Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.Отправлен;
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ДокОбъект.Записать();
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли