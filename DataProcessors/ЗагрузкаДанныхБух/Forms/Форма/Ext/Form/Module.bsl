#Область ОписаниеПеременных

Перем ФайлЗагрузки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредыдущееИмяФайла = Объект.ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ИмяФайлаТС = Неопределено Или ПустаяСтрока(Объект.ИмяФайлаТС)
		И НЕ Объект.ЗагрузкаБезФайлаТС Тогда
		Элементы.ГруппаПанельПараметров.ТекущаяСтраница = Элементы.ТаблицаСоответствия;
		
		ПоказатьПредупреждение(,НСтр("ru = 'Перед началом загрузки, необходимо создать файл
		|для хранения таблицы соответствия объектов
		|базы - источника, объектам базы - приемника.
		|
		|Если файл таблицы соответствия существует,
		|то необходимо указать путь к данному файлу
		|или указать без использования файла таблицы соответствия.'"),,НСтр("ru = 'ВНИМАНИЕ.'"));
		
		Элементы.кнПереиндексировать.Доступность = Ложь;
		Объект.ЗагрузкаБезФайлаТС = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыводитьОтчетОЗагрузкеПриИзменении(Элемент)
	
	Объект.ВыводитьКраткийОтчетОЗагрузке = Не Объект.ВыводитьПолныйОтчетОЗагрузке;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОтчетПриИзменении(Элемент)
	
	Объект.ВыводитьКраткийОтчетОЗагрузке = ВыводитьОтчет;
	Объект.ВыводитьПолныйОтчетОЗагрузке =  ВыводитьОтчет;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОбновлятьРарусБухгалтерияПриИзменении(Элемент)
	
	Если Объект.НеОбновлятьРарусБухгалтерия = Ложь
		И НЕ Объект.ЗагрузкаБезФайлаТС Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Внимание!
		|При сбросе флажка ""Не обновлять объекты с соответствием ТОР Раруса -> Бухгалтерия"" элементы справочников, имеющие соответствие основного направления обмена (Рарус -> Бухгалтерия), будут обновляться.
		|РЕКОМЕНДУЕТСЯ УСТАНАВЛИВАТЬ ФЛАЖОК.'"),, "Объект.НеОбновлятьРарусБухгалтерия");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = НСтр("ru = 'Выберите файл выгрузки'") + " ...";
	ДиалогВыбора.ПолноеИмяФайла = ?(ПустаяСтрока(Объект.ИмяФайла), ПредыдущееИмяФайла, Объект.ИмяФайла);
	ДиалогВыбора.Фильтр = "Файл выгрузки в формате XML (*.xml)|download*.xml|Текстовый файл выгрузки (*.txt)|download*.txt";
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	
	Если НЕ ПустаяСтрока(ДиалогВыбора.ПолноеИмяФайла) Тогда
		ТекФайл = Новый Файл(ДиалогВыбора.ПолноеИмяФайла);
		ДиалогВыбора.Каталог = ТекФайл.Путь;
		Если ТекФайл.Расширение = ".xml" Тогда
			ДиалогВыбора.Фильтр = "Файл выгрузки в формате XML (*.xml)|download*.xml|Текстовый файл выгрузки (*.txt)|download*.txt";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ДиалогВыбора", ДиалогВыбора);
	ДиалогВыбора.Показать(Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораПродолжение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Если Объект.ЭтоКлиент Тогда
			АдресФайла = Неопределено;
			НачатьПомещениеФайла(
				Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				АдресФайла,
				ДиалогВыбора.ПолноеИмяФайла,
				Ложь);
			Возврат;
		КонецЕсли;
		ИмяФайлаНачалоВыбораФрагмент(АдресФайла, ДиалогВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось передать файл загрузки на сервер.'"),, "Объект.ИмяФайла",,Истина);
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНачалоВыбораФрагмент(Адрес, ДиалогВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораФрагмент(Знач АдресФайла, Знач ДиалогВыбора)
	
	Если ПроверитьФайлЗагрузки(ДиалогВыбора.ПолноеИмяФайла) Тогда
		Объект.ИмяФайла = ДиалогВыбора.ПолноеИмяФайла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяТаблицаСоответствий(Результат, Адрес, ВремяИмяФайлаТС, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Объект.ИмяФайлаТС         = ВремяИмяФайлаТС;
		Объект.ИмяФайлаИндексовТС = СтрЗаменить(НРег(Объект.ИмяФайлаТС), ".dbf", ".cdx");
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось передать файл таблицы соответствий на сервер.'"),, "Объект.ИмяФайлаТС",,Истина);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяТаблицаСоответствийФрагмент(
	Знач АдресФайла,
	Знач ВремяИмяФайлаТС,
	Знач ВремяИмяФайлаИндексаТС,
	НоваяТаблица = Ложь)
	
	ПоказатьОповещениеПользователя("Ждите.",,НСтр("ru = 'Выполняется проверка таблицы соответствий'") + "...",
									БиблиотекаКартинок.ДлительнаяОперация48);

	Если Объект.ЭтоКлиент И НЕ НоваяТаблица Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
		ДополнительныеПараметры.Вставить("ИмяФайлаТС", ВремяИмяФайлаТС);
		ДополнительныеПараметры.Вставить("ИмяФайла", "");
		ДополнительныеПараметры.Вставить("ИмяФайлаИндексовТС", ВремяИмяФайлаИндексаТС);
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"НоваяТаблицаСоответствийФрагментПродолжитьКлиент",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПередатьФайлыЗагрузкиНаСервер(ДополнительныеПараметры, ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	СозданиеТСНаКлиенте = Объект.ЭтоКлиент И НоваяТаблица;
	
	СтруктураПроверки = Новый Структура();
	Если ПроверитьТаблицуСоответствияНаСервере(
		ВремяИмяФайлаТС,
		ВремяИмяФайлаИндексаТС,
		СтруктураПроверки,,,
		СозданиеТСНаКлиенте) Тогда
		Если СозданиеТСНаКлиенте И СтруктураПроверки.Свойство("ФайлТС") Тогда
			ПолучитьФайл(СтруктураПроверки.ФайлТС, ВремяИмяФайлаТС, Ложь);
			Если СтруктураПроверки.Свойство("ФайлИндексовТС") Тогда
				ПолучитьФайл(СтруктураПроверки.ФайлИндексовТС, ВремяИмяФайлаИндексаТС, Ложь);
			КонецЕсли;
			Объект.ИмяФайлаТС = ВремяИмяФайлаТС;
			Объект.ИмяФайлаИндексовТС = ВремяИмяФайлаИндексаТС;
		ИначеЕсли НоваяТаблица Тогда
			Объект.ИмяФайлаТС = СтруктураПроверки.ФайлТС;
			Объект.ИмяФайлаИндексовТС = СтруктураПроверки.ФайлИндексовТС;
		КонецЕсли;
		Элементы.ГруппаПанельПараметров.ТекущаяСтраница = Элементы.Параметры;
		Элементы.кнПереиндексировать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяТаблицаСоответствийФрагментПродолжитьКлиент(
	ПомещенныеФайлы,
	ДополнительныеПараметры) Экспорт
	
	// Не удалось перенести файлы
	Если ПомещенныеФайлы = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Неизвестная ошибка при передаче файлов на сервер.'"));
		Возврат;
	КонецЕсли;
	
	ИмяФайлаТС = "";
	ИмяФайлаИндексаТС = "";
	
	Для Каждого ТекущийФайл Из ПомещенныеФайлы Цикл
		
		Если ТекущийФайл.ПолноеИмя = Объект.ИмяФайлаТС Тогда
			ИмяФайлаТС = ТекущийФайл.Хранение;
		ИначеЕсли ТекущийФайл.ПолноеИмя = Объект.ИмяФайлаИндексовТС Тогда
			ИмяФайлаИндексаТС = ТекущийФайл.Хранение;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверитьТаблицуСоответствияНаСервере(ИмяФайлаТС, ИмяФайлаИндексаТС, Новый Структура) Тогда
		Элементы.ГруппаПанельПараметров.ТекущаяСтраница = Элементы.Параметры;
		Элементы.кнПереиндексировать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // НоваяТаблицаСоответствийФрагментПродолжитьКлиент()

&НаКлиенте
Процедура ИмяФайлаТСПриИзменении(Элемент)
	Если Объект.ИмяФайлаТС = "" Тогда
		Объект.ИмяФайлаИндексовТС = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураПроверки = Новый Структура();
	
	Если НЕ ПустаяСтрока(Объект.ИмяФайлаТС) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, СтруктураПроверки);
		ПоказатьВопрос(Оповещение,НСтр("ru = 'Не рекомендуется изменять имя файла таблицы соответствия т.к. это может привести к потере соответствия объектов информационных баз источника и приемника.
		|Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("ru = 'ВНИМАНИЕ.'"));
	Иначе
		ОткрытьДиалогВыбораФайлаТС(СтруктураПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, СтруктураПроверки) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ОткрытьДиалогВыбораФайлаТС(СтруктураПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВыбораФайлаТС(СтруктураПроверки)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.ПолноеИмяФайла = Объект.ИмяФайлаТС;
	ДиалогВыбора.Фильтр = "Файл таблицы соответствия (*.dbf)|*.dbf";
	
	ПараметрыОповещения = Новый Структура("ДиалогВыбора", ДиалогВыбора);
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ОткрытьДиалогВыбораФайлаТСЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВыбораФайлаТСЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Элементы.кнПереиндексировать.Доступность = Ложь;
		
		ВремяИмяФайлаТС = ДиалогВыбора.ПолноеИмяФайла;
		АдресФайла      = "";
		
		Если Объект.ЭтоКлиент Тогда
			НачатьПомещениеФайла(
				Новый ОписаниеОповещения("НоваяТаблицаСоответствий", ЭтотОбъект),
				АдресФайла, 
				ВремяИмяФайлаТС,
				Ложь);
		Иначе
			
			Объект.ИмяФайлаТС         = ВремяИмяФайлаТС;
			Объект.ИмяФайлаИндексовТС = СтрЗаменить(НРег(Объект.ИмяФайлаТС), ".dbf", ".cdx");
			
			НоваяТаблицаСоответствийФрагмент(АдресФайла, ВремяИмяФайлаТС, Объект.ИмяФайлаИндексовТС); 
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(Объект.ИмяФайла) Тогда Возврат; КонецЕсли;
	
	ЗапуститьПриложение(Объект.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПанельПараметровПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекКнопка = Элементы.кнВыполнить;
	
	Если ТекущаяСтраница <> Элементы.ПроводитьДокументы И ПустаяСтрока(Объект.ИмяФайлаТС)
		И НЕ Объект.ЗагрузкаБезФайлаТС Тогда
		Элементы.ГруппаПанельПараметров.ТекущаяСтраница = Элементы.ТаблицаСоответствия;
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан путь к таблице соответствия.'"),,НСтр("ru = 'ВНИМАНИЕ.'"));
	Иначе
		ТекКнопка.Доступность = ?(ТекущаяСтраница = 1, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура-обработчик изменения клиент-серверного режима обработки
&НаКлиенте
Процедура НаКлиенте(Команда)
	Если НЕ Объект.ЭтоКлиент Тогда
		Объект.ЭтоКлиент = Истина;
		ИзменитьРежимОбработки(Объект.ЭтоКлиент);
	КонецЕсли;
КонецПроцедуры

// Процедура-обработчик изменения клиент-серверного режима обработки.
&НаКлиенте
Процедура НаСервере(Команда)
	Если Объект.ЭтоКлиент Тогда
		Объект.ЭтоКлиент = Ложь;
		ИзменитьРежимОбработки(Объект.ЭтоКлиент);
	КонецЕсли;
КонецПроцедуры

// Процедура создает новую таблицу соответствий.
&НаКлиенте
Процедура кнНовая(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.ПолноеИмяФайла = Объект.ИмяФайлаТС;
	
	ПараметрыОповещения = Новый Структура("ДиалогВыбора", ДиалогВыбора);
	ДиалогВыбора.Показать(Новый ОписаниеОповещения("кнНоваяЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура кнНоваяЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Оповещение = Новый ОписаниеОповещения("УдалитьФайлыНачало",ЭтотОбъект, Новый Структура("ДиалогВыбора", ДиалогВыбора));
		НачатьПоискФайлов(Оповещение, ДиалогВыбора.Каталог + "\ts.dbf");
		Возврат;
		
	КонецЕсли;
	
	ВывестиСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыНачало(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		УдалитьФайлы(ДиалогВыбора.Каталог + "\ts.dbf");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалитьФайлыПродолжение",ЭтотОбъект, ДополнительныеПараметры);
	НачатьПоискФайлов(Оповещение, ДиалогВыбора.Каталог + "\ts.cdx");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыПродолжение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если НайденныеФайлы.Количество()> 0 Тогда
		УдалитьФайлы(ДиалогВыбора.Каталог + "\ts.cdx");
	КонецЕсли;
	
	АдресФайла = Неопределено;
	
	ВремяИмяФайлаТС = ДиалогВыбора.Каталог + "\ts.dbf";
	ВремяИмяФайлаИндексовТС = ДиалогВыбора.Каталог + "\ts.cdx";
	
	НоваяТаблицаСоответствийФрагмент(АдресФайла, ВремяИмяФайлаТС, ВремяИмяФайлаИндексовТС, Истина);
	
	Если Объект.ЭтоКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПанельПараметров.ТекущаяСтраница = Элементы.Параметры;
	
	ВывестиСообщения();
	
КонецПроцедуры

// Процедура переиндексирования указанной таблицы соответствий.
&НаКлиенте
Процедура кнПереиндексировать(Команда)
	
	СтруктураПроверки = Новый Структура();
	
	ПоказатьОповещениеПользователя("Ждите",, НСтр("ru = 'Идет переиндексация файла таблицы соответствия'") + "...",
										БиблиотекаКартинок.ДлительнаяОперация48);
	
	Если Объект.ЭтоКлиент Тогда
		ОбработкаОповещения = Новый ОписаниеОповещения("ПродолжитьПереиндексировать", ЭтотОбъект, СтруктураПроверки);
		ПередатьФайлыЗагрузкиНаСервер(Объект, ОбработкаОповещения);
		Возврат;
	КонецЕсли;
	
	ПереиндексироватьНаСервере(Объект.ИмяФайлаТС, СтруктураПроверки);
	
	ВывестиСообщения();
	
КонецПроцедуры 

&НаКлиенте
Процедура кнВыполнить(Команда)
	
	СтруктураПроверки = Новый Структура();
	
	ПоказатьОповещениеПользователя("Ждите.",,НСтр("ru = 'Идет проверка формата файла'") + " ...", 
										БиблиотекаКартинок.ДлительнаяОперация48);
	
	Если НЕ ПроверитьФайлЗагрузки(Объект.ИмяФайла) Тогда 
		ВывестиСообщения();
		Возврат;
	КонецЕсли;
	
	// Надо передать файлы на сервер для проверки таблицы соответствия.
	Если Объект.ЭтоКлиент Тогда
		ОбработкаОповещения = Новый ОписаниеОповещения("ЗавершениеЗагрузкиФайловНаСервер", ЭтотОбъект, СтруктураПроверки);
		ПередатьФайлыЗагрузкиНаСервер(Объект, ОбработкаОповещения);
		Возврат;
	КонецЕсли;
	
	// Далее работает только с серверным вариантом
	ПродолжитьВыполнениеЗагрузкиДанных(Объект.ИмяФайлаТС, Объект.ИмяФайлаИндексовТС, Объект.ИмяФайла, СтруктураПроверки);
	
КонецПроцедуры

&НаСервере
Процедура кнВыполнитьНаСервере(АдресФайлаТС, ИмяФайла, СтруктураИсходныхПутей)
	
	ПрекратитьЗагрузку = Ложь;
	ТаблицаОтчета.Очистить();
	
	Если ВыполнениеНевозможно(АдресФайлаТС) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ДобавленаИнформацияОЗагрузке");
	
	НачалоРаботы = ТекущаяДатаСеанса();
	Объект.ЗагруженоСпр = 0; Объект.ЗагруженоДок = 0;
	
	ФайлЗагрузки = Новый ЧтениеXML();
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		СтрокаТекста = СтрокаИзДвоичныхДанных(ИмяФайла);
		ФайлЗагрузки.УстановитьСтроку(СтрокаТекста);
	Иначе
		ФайлЗагрузки.ОткрытьФайл(ИмяФайла);
	КонецЕсли;
	
	ДеревоВыгруженныхОбъектов = РеквизитФормыВЗначение("ОбработанныеОбъекты");
	
	Если Объект.ПоказатьЗагруженные Тогда
		ДеревоВыгруженныхОбъектов.Колонки.Очистить();
		ДеревоВыгруженныхОбъектов.Строки.Очистить();
		
		ЧисловойТип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 3));
		
		ДеревоВыгруженныхОбъектов.Колонки.Добавить("ОбъектИсточник");
		ДеревоВыгруженныхОбъектов.Колонки.Добавить("Количество", ЧисловойТип);
		ДеревоВыгруженныхОбъектов.Колонки.Добавить("ТипОбъекта");
		ДеревоВыгруженныхОбъектов.Колонки.Добавить("ОбъектПриемник");
		
		КореньСправочники = ДеревоВыгруженныхОбъектов.Строки.Добавить();
		КореньСправочники.ОбъектИсточник = "Справочники";
		
		КореньДокументы = ДеревоВыгруженныхОбъектов.Строки.Добавить();
		КореньДокументы.ОбъектИсточник = "Документы";
	КонецЕсли;
	
	Результат = Обработки.ЗагрузкаДанныхБух.ОбновитьДанныеВыгрузки(
		Объект,
		АдресФайлаТС,
		СписокСообщений,
		ФайлЗагрузки,
		КореньДокументы,
		КореньСправочники,
		ПрекратитьЗагрузку);
	
	Если НЕ Результат.ПрекратитьЗагрузку Тогда
		ПараметрыРезультата = ОбщегоНазначения.СкопироватьРекурсивно(Результат.Параметры);
		ПараметрыРезультата.Вставить("КореньДокументы", КореньДокументы);
		ПараметрыРезультата.Вставить("КореньСправочники", КореньСправочники);
		ПараметрыРезультата.Вставить("КореньДокументы", КореньДокументы);
		Если Результат.Параметры.Свойство("тзВыписка") Тогда
			Обработки.ЗагрузкаДанныхБух.ЗагрузитьВыписку(ПараметрыРезультата, Результат.Параметры.тзВыписка);
		КонецЕсли;
	КонецЕсли;   // Загрузим выписки
	
	Обработки.ЗагрузкаДанныхБух.ДобавитьВТаблицуОтчета(Результат.ПромежуточнаяТаблицаОтчета, Результат.ТаблицаОтчета);
	
	ЗначениеВДанныеФормы(ДеревоВыгруженныхОбъектов, ОбработанныеОбъекты);
	
	ОкончаниеРаботы = ТекущаяДатаСеанса();
	Если Объект.ЗагруженоСпр + Объект.ЗагруженоДок > 0 Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		СтрокаЗагрузки = "  " +  НСтр("ru = 'Начало работы'") + " - " + НачалоРаботы +", " + НСтр("ru = 'окончание работы'") + " - " + ОкончаниеРаботы + "
		|  " + НСтр("ru = 'Всего обработано объектов:'") + " " + (Объект.ЗагруженоСпр + Объект.ЗагруженоДок) + " (" +НСтр("ru = 'из них: элементов справочников'") + " - " + Объект.ЗагруженоСпр + " , " + НСтр("ru = 'документов'") + " - " + Объект.ЗагруженоДок + ")";
		НовоеСообщение.Поле = "";
		НовоеСообщение.Сообщение = СтрокаЗагрузки; 
	КонецЕсли;
	ТаблицаСообщений = СписокСообщений.Выгрузить();
	ТаблицаСообщений.Свернуть("Сообщение, Поле");
	СписокСообщений.Загрузить(ТаблицаСообщений);
	ТаблицаОтчета.Загрузить(Результат.ТаблицаОтчета);
	
	// Почистим временные файлы
	Если СтруктураИсходныхПутей.Свойство("ИмяФайлаТС")
		И ЭтоАдресВременногоХранилища(СтруктураИсходныхПутей.ИмяФайлаТС) Тогда
		
		Результат.Параметры.БД_ТС.Записать();
		Результат.Параметры.БД_ТС.ЗакрытьФайл();
		
		ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АдресФайлаТС), СтруктураИсходныхПутей.ИмяФайлаТС);
		
		Если СтруктураИсходныхПутей.Свойство("ИмяФайлаИндексаТС") Тогда
			АдресФайлаИндексовТС = СтрЗаменить(АдресФайлаТС, ".dbf", ".cdx");
			ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АдресФайлаИндексовТС), СтруктураИсходныхПутей.ИмяФайлаИндексаТС);
			Обработки.ЗагрузкаДанныхБух.УдалитьВременныеФайлы(АдресФайлаИндексовТС);
		КонецЕсли;
		
		Обработки.ЗагрузкаДанныхБух.УдалитьВременныеФайлы(АдресФайлаТС);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция РазобратьСтрокуНаСервере(Строка)
	
	Возврат Обработки.ЗагрузкаДанныхБух.РазобратьСтроку(Строка);
	
КонецФункции

&НаСервере
Функция ОчиститьСпецСимволыНаСервере(Значение)
	
	Обработки.ЗагрузкаДанныхБух.ОчиститьСпецСимволы(Значение);
	
КонецФункции

// Функция выполняет проверку заполнения основных реквизитов
&НаСервере
Функция ПроверитьЗаполнениеРеквизитов()
	
	Отказ = Ложь;
	Если Объект.ВыбПодразделение.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнено подразделение компании для подстановки.'");
		НовоеСообщение.Поле      = "Объект.ВыбПодразделение";
		Отказ = Истина;
	КонецЕсли;
	Если Объект.ВыбКасса.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнена касса для подстановки.'");
		НовоеСообщение.Поле      = "Объект.ВыбКасса";
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВыбДатаНачалаДляДоговоров) Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнено значение даты начала для подстановки в загружаемые договора.'");
		НовоеСообщение.Поле      = "Объект.ВыбДатаНачалаДляДоговоров";
		Отказ = Истина;
	КонецЕсли;
	Если Объект.ВыбКонтрагентПриемРозничнойВыручки.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен контрагент ""Прием розничной выручки"".'");
		НовоеСообщение.Поле      = "Объект.ВыбКонтрагентПриемРозничнойВыручки";
		Отказ = Истина;
	КонецЕсли;
	Если Объект.ВыбКонтрагентВыдачаДенежныхСредствПодотчетнику.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен контрагент ""выдача ден. средств подотчетнику"".'");
		НовоеСообщение.Поле      = "Объект.ВыбКонтрагентВыдачаДенежныхСредствПодотчетнику";
		Отказ = Истина;
	КонецЕсли;
	Если Объект.ВыбКонтрагентВзносНаличнымиВБанк.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен контрагент ""взнос наличными в банк"".'");
		НовоеСообщение.Поле      = "Объект.ВыбКонтрагентВзносНаличнымиВБанк";
		Отказ = истина;
	КонецЕсли;
	Если Объект.ВыбКонтрагентВыплатаЗаработнойПлаты.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен контрагент ""выплата заработной платы"".'");
		НовоеСообщение.Поле      = "Объект.ВыбКонтрагентВыплатаЗаработнойПлаты";
		Отказ = Истина;
	КонецЕсли;
	Если Объект.ВыбКонтрагентИнкассацияДенежныхСредств.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен контрагент ""инкассация денежных средств"".'");
		НовоеСообщение.Поле      = "Объект.ВыбКонтрагентИнкассацияДенежныхСредств";
		Отказ = истина;
	КонецЕсли;	
	Если Объект.ВыбСтатьяДДС.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен реквизит ""Статья ДДС"".'");
		НовоеСообщение.Поле      = "Объект.ВыбСтатьяДДС";
		Отказ = Истина;
	КонецЕсли;
	Если Объект.ВыбКонтрагентПрочее.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен контрагент ""Прочее движение денежных средств"".'");
		НовоеСообщение.Поле      = "Объект.ВыбКонтрагентПрочее";
		Отказ = Истина;
	КонецЕсли;	
	Если Объект.ВыбКонтрагентПереводСредств.Пустая() Тогда
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'Не заполнен контрагент ""Перевод средств между счетами"".'");
		НовоеСообщение.Поле      = "Объект.ВыбКонтрагентПереводСредств";
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ПроверитьЗаполнениеРеквизитов()

// Процедура выводит накопленные сообщения пользователи и очищает список сообщений
&НаКлиенте
Процедура ВывестиСообщения()
	
	Если СписокСообщений.Количество() > 0 Тогда
		
		Для Каждого СтрокаСообщения Из СписокСообщений Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения.Сообщение,, СтрокаСообщения.Поле);		
		КонецЦикла;
		
		СписокСообщений.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимОбработки(РежимРаботы)
	ГруппаРежима = КоманднаяПанель.ПодчиненныеЭлементы.РежимОбработки.ПодчиненныеЭлементы;
	ГруппаРежима.ФормаНаКлиенте.Пометка = РежимРаботы;
	ГруппаРежима.ФормаНаСервере.Пометка = Не РежимРаботы;
	
	КоманднаяПанель.ПодчиненныеЭлементы.РежимОбработки.Заголовок = 
	?(РежимРаботы, НСтр("ru = 'Режим работы (на клиенте)'"), НСтр("ru = 'Режим работы (на сервере)'"));
КонецПроцедуры

// Процедура устанавливает надписи в зависимости от режима работы обработки и управляет видимостью элементов.
&НаКлиенте
Процедура УстановитьВидимость()
	
	ИзменитьРежимОбработки(Объект.ЭтоКлиент);
	Элементы.ВыводитьОтчетОЗагрузке.Видимость = ВыводитьОтчет;
	
КонецПроцедуры

&НаСервере
Функция ВыполнениеНевозможно(АдресФайлаТС)
	
	ЕстьОшибкиВЗаполнении = Ложь;
	ТекОбъект = Справочники.Организации.ПустаяСсылка();
	
	Если НЕ ПолучитьОбъектПриемник(
			Справочники.Организации,
			ВыбОрганизацияИсточник,
			ТекОбъект,
			АдресФайлаТС) Тогда
		
		НовоеСообщение = СписокСообщений.Добавить();
		СообщениеКлиенту = Новый Массив;
		СообщениеКлиенту.Добавить(НСтр("ru = 'Нет соответствия у организации выгрузки, сначала нужно провести обмен'"));
		СообщениеКлиенту.Добавить(НСтр("ru = 'ТОР Раруса -> Бухгалтерия для установки соответствия организаций.'"));
		НовоеСообщение.Сообщение = СтрСоединить(СообщениеКлиенту, " ");
		НовоеСообщение.Поле = "";
		ЕстьОшибкиВЗаполнении = Истина;
		
	КонецЕсли;
	
	Если ТекОбъект <> Неопределено
		И НЕ ТекОбъект.Ссылка.Пустая()
		И НЕ Объект.ВыбПодразделение.Пустая()
		И Объект.ВыбПодразделение.Организация <> ТекОбъект.Ссылка
	Тогда
		
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = СтрШаблон(
			НСтр("ru = 'Выбранное подразделение не является подразделением организации %1'"),
			ТекОбъект
		);
		НовоеСообщение.Поле = "";
		ЕстьОшибкиВЗаполнении = Истина;
		
	КонецЕсли;	
	
	Если Объект.кУР И ПустаяСтрока(Объект.ВидУчета) Тогда
		
		НовоеСообщение = СписокСообщений.Добавить();
		НовоеСообщение.Сообщение = НСтр("ru = 'При выгрузке не был указан вид учета. Загрузка невозможна.'");
		НовоеСообщение.Поле = "";
		ЕстьОшибкиВЗаполнении = Истина;
		
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеРеквизитов() Тогда
		
		ЕстьОшибкиВЗаполнении = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибкиВЗаполнении;
	
КонецФункции

// Возвращает текстовое содержимое из файла, помещенного во временное хранилище
// по адресу, переданному в качестве значения параметра АдресДвоичныхДанных.
//
// Параметры:
//  АдресДвоичныхДанных - строка, адрес во временном хранилище, по которому были
//    помещены двоичные данные файла,
//
// Возвращаемое значение: строка.
//
&НаСервере
Функция СтрокаИзДвоичныхДанных(Знач АдресДвоичныхДанных)
	
	// Получим временный файл
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
	
	Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КЛИЕНТ-СЕРВЕРНОЙ ПЕРЕДАЧИ	

&НаКлиенте
Процедура ПродолжитьПереиндексировать(ПомещенныеФайлы, СтруктураПроверки) Экспорт
	
	// Не удалось перенести файлы
	Если ПомещенныеФайлы = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Неизвестная ошибка при передаче файлов на сервер.'"));
		Возврат;
	КонецЕсли;
	
	ИмяФайлаТС = "";
	
	Для Каждого ТекущийФайл Из ПомещенныеФайлы Цикл
		
		Если ТекущийФайл.ПолноеИмя = Объект.ИмяФайлаТС Тогда
			ИмяФайлаТС = ТекущийФайл.Хранение;
		КонецЕсли;
		
	КонецЦикла;
	
	ПереиндексироватьНаСервере(ИмяФайлаТС, СтруктураПроверки);
	
	Если СтруктураПроверки.Свойство("ФайлИндексовТС") Тогда
		ПолучитьФайл(СтруктураПроверки.ФайлИндексовТС, Объект.ИмяФайлаИндексовТС, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереиндексироватьНаСервере(ИмяФайлаТС, СтруктураПроверки)
	
	Если ПроверитьТаблицуСоответствияНаСервере(ИмяФайлаТС, "", СтруктураПроверки, Истина) Тогда
		Попытка СтруктураПроверки.БД_ТС.Переиндексировать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СписокСообщений.Очистить();
			НовоеСообщение = СписокСообщений.Добавить();
			НовоеСообщение.Сообщение = СтрШаблон(
				НСтр("ru = 'ВНИМАНИЕ! Не удалось переиндексировать таблицу соответствия: %1 %2 %3'"),
				Символы.НПП,
				ИмяФайлаТС,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			НовоеСообщение.Поле      = "Объект.ИмяФайлаТС";
		КонецПопытки;
	КонецЕсли;
	
	Если Объект.ЭтоКлиент Тогда
		СтруктураПроверки.БД_ТС.Записать();
		СтруктураПроверки.БД_ТС.ЗакрытьФайл();
		
		ФайлТС = СтруктураПроверки.ФайлТС;
		
		СтруктураПроверки.ФайлТС = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПроверки.ФайлТС));
		
		Если СтруктураПроверки.Свойство("ФайлИндексовТС") Тогда
			АдресФайлаИндексовТС = СтрЗаменить(ФайлТС, ".dbf", ".cdx");
			СтруктураПроверки.ФайлИндексовТС = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АдресФайлаИндексовТС));
			Обработки.ЗагрузкаДанныхБух.УдалитьВременныеФайлы(АдресФайлаИндексовТС);
		КонецЕсли;
		
		Обработки.ЗагрузкаДанныхБух.УдалитьВременныеФайлы(ФайлТС);
		
	КонецЕсли;
	
	СтруктураПроверки.Удалить("БД_ТС");
	
КонецПроцедуры

// Процедура переноса файлов с клиента на сервер
//
&НаКлиенте
Процедура ПередатьФайлыЗагрузкиНаСервер(ДанныеФайла, ОбработкаОповещения)
	
	ПомещаемыеФайлы = Новый Массив;
	
	ДобавитьФайлДляПеремещения(ПомещаемыеФайлы, ДанныеФайла.ИмяФайла);
	ДобавитьФайлДляПеремещения(ПомещаемыеФайлы, ДанныеФайла.ИмяФайлаТС);
	ДобавитьФайлДляПеремещения(ПомещаемыеФайлы, ДанныеФайла.ИмяФайлаИндексовТС);
	
	НачатьПомещениеФайлов(
		ОбработкаОповещения,
		ПомещаемыеФайлы,
		Ложь,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлДляПеремещения(ПомещаемыеФайлы, ИмяФайла)
	
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗагрузкиФайловНаСервер(ПомещенныеФайлы, СтруктураПроверки) Экспорт
	
	// Не удалось перенести файлы
	Если ПомещенныеФайлы = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Неизвестная ошибка при передаче файлов на сервер.'"));
		Возврат;
	КонецЕсли;
	
	ИмяФайлаТС = "";
	ИмяФайлаИндексаТС = "";
	ИмяФайла = "";
	
	Для Каждого ТекущийФайл Из ПомещенныеФайлы Цикл
		
		Если ТекущийФайл.ПолноеИмя = Объект.ИмяФайлаТС Тогда
			ИмяФайлаТС = ТекущийФайл.Хранение;
		ИначеЕсли ТекущийФайл.ПолноеИмя = Объект.ИмяФайлаИндексовТС Тогда
			ИмяФайлаИндексаТС = ТекущийФайл.Хранение;
		ИначеЕсли ТекущийФайл.ПолноеИмя = Объект.ИмяФайла Тогда
			ИмяФайла = ТекущийФайл.Хранение;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураИсходныхПутей = Новый Структура();
	СтруктураИсходныхПутей.Вставить("ИмяФайлаТС", ИмяФайлаТС);
	СтруктураИсходныхПутей.Вставить("ИмяФайлаИндексаТС", ИмяФайлаИндексаТС);
	СтруктураИсходныхПутей.Вставить("ИмяФайла", ИмяФайла);
	
	ПродолжитьВыполнениеЗагрузкиДанных(ИмяФайлаТС, ИмяФайлаИндексаТС, ИмяФайла, СтруктураПроверки, СтруктураИсходныхПутей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеЗагрузкиДанных(
	ИмяФайлаТС,
	ИмяФайлаИндексаТС,
	ИмяФайла,
	СтруктураПроверки,
	СтруктураИсходныхПутей = Неопределено)
	
	Если СтруктураИсходныхПутей = Неопределено Тогда
		СтруктураИсходныхПутей = Новый Структура;
	КонецЕсли;
	
	Если НЕ ТипЗнч(СтруктураПроверки) = Тип("Структура") Тогда
		СтруктураПроверки = Новый Структура();
	КонецЕсли;
	СтруктураПроверки.Вставить("НеУдалятьВременныйФайл");
	
	Если НЕ ПроверитьТаблицуСоответствияНаСервере(ИмяФайлаТС, ИмяФайлаИндексаТС, СтруктураПроверки, Ложь, Истина) Тогда 
		ВывестиСообщения();
		Возврат; 
	КонецЕсли;
	
	ВывестиСообщения();
	
	ПоказатьОповещениеПользователя("Ждите.",, НСтр("ru = 'Идет просмотр файла выгрузки'") + " ....", 
									БиблиотекаКартинок.ДлительнаяОперация48);
	
	ИмяФайлаТаблицы = ПолучитьЗначениеПараметраСтруктуры(СтруктураПроверки, "ФайлТС", ИмяФайлаТС);
	
	кнВыполнитьНаСервере(ИмяФайлаТаблицы, ИмяФайла, СтруктураИсходныхПутей);
	
	Если Объект.ЭтоКлиент И НЕ Объект.ЗагрузкаБезФайлаТС Тогда
		ПолучитьФайл(СтруктураИсходныхПутей.ИмяФайлаТС, Объект.ИмяФайлаТС, Ложь);
		ПолучитьФайл(СтруктураИсходныхПутей.ИмяФайлаИндексаТС, Объект.ИмяФайлаИндексовТС, Ложь);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(,,НСтр("ru = 'Обработка завершена'"), БиблиотекаКартинок.Успешно);
	
	ВывестиСообщения();
	
	Если Объект.ПоказатьЗагруженные Тогда
		ОткрытьФорму("Обработка.ЗагрузкаДанныхБух.Форма.ЗагруженныеОбъекты", Новый Структура("ОбработанныеОбъекты", ОбработанныеОбъекты),ЭтотОбъект);
	КонецЕсли;	
	
	Если Объект.ВыводитьПолныйОтчетОЗагрузке ИЛИ Объект.ВыводитьКраткийОтчетОЗагрузке Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("НачалоРаботы",                 НачалоРаботы);
		ПараметрыФормы.Вставить("ОкончаниеРаботы",              ОкончаниеРаботы);
		ПараметрыФормы.Вставить("ТаблицаОтчета",                ТаблицаОтчета);
		ПараметрыФормы.Вставить("СтрокаЗагрузки",               СтрокаЗагрузки);
		ПараметрыФормы.Вставить("ВыводитьПолныйОтчетОЗагрузке", Объект.ВыводитьПолныйОтчетОЗагрузке);
		ПараметрыФормы.Вставить("ИмяФайла",                     ?(Объект.ЭтоКлиент, Объект.ИмяФайла, ИмяФайла));
		ОткрытьФорму("Обработка.ЗагрузкаДанныхБух.Форма.ОтчетЗагрузки", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ТАБЛИЦЕЙ СООТВЕТСТВИЯ

&наСервере
Функция ПолучитьОбъектПриемник(Менеджер, ВыбОрганизацияИсточник, ТекОбъект, АдресФайлаТС)
	
	Результат = Обработки.ЗагрузкаДанныхБух.ПолучитьОбъектПриемник(
		Менеджер,
		ВыбОрганизацияИсточник,
		ТекОбъект,
		АдресФайлаТС,
		Объект.ЭтоКлиент,,
		Объект.ЗагрузкаБезФайлаТС,
		ВыбОрганизацияПриемник);
	
	Возврат Результат;
	
КонецФункции

// Проверяет файл на возможность чтения и сообщает об ошибках
// Параметры:
//	ИмяФайлаПроверки - имя файла проверки.
//
// Возвращает Истина если все в порядке, иначе Ложь.
//
&НаКлиенте
Функция ПроверитьФайлЗагрузки(ИмяФайлаПроверки)
	
	#Если ВебКлиент Тогда
		ВызватьИсключение Нстр("ru = 'Операция не поддерживается в веб-клиенте.'");		
	#КонецЕсли
	
	ПоказатьОповещениеПользователя("Ждите",, НСтр("ru = 'Идет проверка формата файла'") + " ...",БиблиотекаКартинок.ДлительнаяОперация48);
	
	Если ПустаяСтрока(ИмяФайлаПроверки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указано имя файла загрузки'"),, "Объект.ИмяФайла",,Истина);
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторИБИсточника   = "";
	Объект.XMLФорматВыгрузки = Ложь;
	Объект.ФайлВыгрузкиИзV8  = Истина;	
	ЗаголовокВыгрузки = "";
	Объект.ВидУчета = "";
	
	ФайлЗагрузки = Новый Файл(ИмяФайлаПроверки);
	Если НРег(ФайлЗагрузки.Расширение) = ".xml" Тогда
		Объект.XMLФорматВыгрузки = Истина;
		
		Попытка
			//@skip-check type-not-defined
			ФайлЗагрузки = Новый ЧтениеXML();
			ФайлЗагрузки.ОткрытьФайл(ИмяФайлаПроверки);
			
			ФайлЗагрузки.Прочитать();			
			
			НачалоПериодаВыгрузки = ФайлЗагрузки.ПолучитьАтрибут("НачалоПериода");
			КонецПериодаВыгрузки  = ФайлЗагрузки.ПолучитьАтрибут("КонецПериода");
			Если ПустаяСтрока(НачалоПериодаВыгрузки) И ПустаяСтрока(КонецПериодаВыгрузки) Тогда
				ТекстПериодаВыгрузки  = НСтр("ru = 'за все существующие периоды'");
				
			ИначеЕсли ПустаяСтрока(НачалоПериодаВыгрузки) Тогда
				ТекстПериодаВыгрузки  = НСтр("ru = 'с начала ведения учета по'") + " " + КонецПериодаВыгрузки;
				
			ИначеЕсли ПустаяСтрока(КонецПериодаВыгрузки) Тогда
				ТекстПериодаВыгрузки  = "с" + " " + НачалоПериодаВыгрузки;
				
			Иначе
				ТекстПериодаВыгрузки  = "с" + " " + НачалоПериодаВыгрузки + " " + "по" + " " + КонецПериодаВыгрузки;
				
			КонецЕсли;
			
			ИдентификаторИБИсточника = ФайлЗагрузки.ПолучитьАтрибут("Конфигурация");
			Если СтрНайти(ВРег(ИдентификаторИБИсточника), "КОРП") > 0 Тогда
				Объект.флЗагрузкаИзБП2 = 1;
			ИначеЕсли СтрНайти(ВРег(ИдентификаторИБИсточника),"РЕДАКЦИЯ 2.0") > 0
				ИЛИ СтрНайти(ВРег(ИдентификаторИБИсточника),"РЕДАКЦИЯ 3.0") > 0 Тогда
				Объект.флЗагрузкаИзБП2 = 2;
			Иначе
				Объект.флЗагрузкаИзБП2 = 0;
			КонецЕсли;
			
			СтрокаОписанияКонфигурации = НСтр("ru = 'Конфигурация:'") + " <" + ИдентификаторИБИсточника + ">," 
										+ НСтр("ru = 'файл создан:'") + " " + ФайлЗагрузки.ПолучитьАтрибут("ДатаВыгрузки") 
										+ ?(Объект.ФайлВыгрузкиИзV8, "", " " + ФайлЗагрузки.ПолучитьАтрибут("ВремяВыгрузки"))+ ". " 
										+ НСтр("ru = 'Период выгрузки:'") + " <" + ТекстПериодаВыгрузки + ">";
			
			Если Объект.флЗагрузкаИзБП2 > 0 Тогда
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПлатежноеПоручениеВходящее") <> Неопределено Тогда
					Объект.СоответствиеМенеджеров.Удалить(Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПлатежноеПоручениеВходящее"));
				КонецЕсли;
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПлатежноеПоручениеИсходящее") <> Неопределено Тогда
					Объект.СоответствиеМенеджеров.Удалить(Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПлатежноеПоручениеИсходящее"));
				КонецЕсли;
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПоступлениеНаРасчетныйСчет") = Неопределено Тогда
					Объект.СоответствиеМенеджеров.Добавить("ПоступлениеНаРасчетныйСчет",	"Выписка");
				КонецЕсли;
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("СписаниеСРасчетногоСчета") = Неопределено Тогда
					Объект.СоответствиеМенеджеров.Добавить("СписаниеСРасчетногоСчета",	"Выписка");
				КонецЕсли;
				
			Иначе
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПоступлениеНаРасчетныйСчет") <> Неопределено Тогда
					Объект.СоответствиеМенеджеров.Удалить(Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПоступлениеНаРасчетныйСчет"));
				КонецЕсли;
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("СписаниеСРасчетногоСчета") <> Неопределено Тогда
					Объект.СоответствиеМенеджеров.Удалить(Объект.СоответствиеМенеджеров.НайтиПоЗначению("СписаниеСРасчетногоСчета"));
				КонецЕсли;
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПлатежноеПоручениеВходящее") <> Неопределено Тогда
					Объект.СоответствиеМенеджеров.Удалить(Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПлатежноеПоручениеВходящее"));
				КонецЕсли;
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("ПлатежноеПоручениеВходящее") = Неопределено Тогда
					Объект.СоответствиеМенеджеров.Добавить("ПлатежноеПоручениеВходящее",	"Выписка");
				КонецЕсли;
				
				Если Объект.СоответствиеМенеджеров.НайтиПоЗначению("СписаниеСРасчетногоСчета") = Неопределено Тогда
					Объект.СоответствиеМенеджеров.Добавить("СписаниеСРасчетногоСчета",	"Выписка");
				КонецЕсли;
				
			КонецЕсли;			
			
			ВыбОрганизацияИсточник = ФайлЗагрузки.ПолучитьАтрибут("Организация");
			ВыбОрганизацияПриемник = ФайлЗагрузки.ПолучитьАтрибут("ОрганизацияПриемника");
			Если ВыбОрганизацияПриемник = Неопределено Тогда
				ВыбОрганизацияПриемник = "";
			КонецЕсли;
			
			ЗаголовокВыгрузки      = ФайлЗагрузки.ПолучитьАтрибут("Заголовок");
			Объект.ВидУчета        = ФайлЗагрузки.ПолучитьАтрибут("ВидУчета");
			
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось прочитать данные из файла: %1
					|Ошибка: %2'"),
					ИмяФайлаПроверки, 
					ОписаниеОшибки()
				),
				,
				"Объект.ИмяФайла",
				,
				Истина
			); 
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли НРег(ФайлЗагрузки.Расширение) = ".txt" Тогда
		Попытка
			ФайлЗагрузки = Новый ТекстовыйДокумент();
			ФайлЗагрузки.Прочитать(ИмяФайлаПроверки);
			
			ЗначенияСтроки = РазобратьСтрокуНаСервере(ФайлЗагрузки.ПолучитьСтроку(1));
			ЗаголовокФайла = ЗначенияСтроки.Получить(0).Значение;
			
			
			Объект.ФайлВыгрузкиИзV8 = Истина;			
			
			НачалоПериодаВыгрузки = ЗаголовокФайла.Получить(1).Значение;
			КонецПериодаВыгрузки  = ЗаголовокФайла.Получить(2).Значение;
			
			
			Если ПустаяСтрока(СтрЗаменить(НачалоПериодаВыгрузки, ".", "")) И ПустаяСтрока(СтрЗаменить(КонецПериодаВыгрузки, ".", "")) Тогда
				ТекстПериодаВыгрузки  = НСтр("ru = 'за все существующие периоды'");
				
			ИначеЕсли ПустаяСтрока(СтрЗаменить(НачалоПериодаВыгрузки, ".", "")) Тогда
				ТекстПериодаВыгрузки  = НСтр("ru = 'с начала ведения учета по'") + " " + КонецПериодаВыгрузки;
				
			ИначеЕсли ПустаяСтрока(СтрЗаменить(КонецПериодаВыгрузки, ".", "")) Тогда
				ТекстПериодаВыгрузки  = "с" + " " + НачалоПериодаВыгрузки;
				
			Иначе
				ТекстПериодаВыгрузки  = "с" + " " + НачалоПериодаВыгрузки + " " + "по" + " " + КонецПериодаВыгрузки;
				
			КонецЕсли;
			
			ИдентификаторИБИсточника = ОчиститьСпецСимволыНаСервере(ЗаголовокФайла.Получить(0).Значение);
			
			СтрокаОписанияКонфигурации = НСтр("ru = 'Конфигурация:'") + " <" + ИдентификаторИБИсточника + " >, " + НСтр("ru = 'файл создан:'") + " " 
										+ ЗаголовокФайла.Получить(1).Значение 
										+ ". " + НСтр("ru = 'Период выгрузки:'") + " <" + ТекстПериодаВыгрузки + ">";
			
			ЗаголовокВыгрузки = ЗаголовокФайла.Получить(4).Значение;
			ВыбОрганизацияИсточник = ЗаголовокФайла.Получить(5).Значение;
			Объект.ВидУчета = ЗаголовокФайла.Получить(6).Значение;
			
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось прочитать данные из файла: %1
					|Ошибка: %2'"),
					ИмяФайлаПроверки, 
					ОписаниеОшибки()
				),
				,
				"Объект.ИмяФайла",
				,
				Истина
			); 

			Возврат Ложь;
		КонецПопытки;	
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не известное расширение файла.'"),, "Объект.ИмяФайла",,Истина);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗаголовокВыгрузки <> "ВыгрузкаИзБухгалтерии" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Неверный файл выгрузки.'"), , "Объект.ИмяФайла",,Истина);
		Возврат Ложь;
	КонецЕсли;		
	
	Если ВыбОрганизацияИсточник = "" ИЛИ ВыбОрганизацияИсточник = Неопределено
		И (ВыбОрганизацияПриемник = "" ИЛИ ВыбОрганизацияПриемник = Неопределено) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана организация выгрузки.'"), , "Объект.ИмяФайла",,Истина);
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	//	ПроверитьФайлЗагрузки()

&НаСервере
Функция ПроверитьТаблицуСоответствияНаСервере(
	ИмяФайлаТС,
	ИмяФайлаИндексаТС,
	СтруктураПроверки,
	ЭтоПереиндексировать = Ложь,
	ЗагрузкаДанных = Ложь,
	СозданиеНовойТС = Ложь)
	
	ФайлыТС = Новый Массив;
	ФайлыТС.Добавить(ИмяФайлаТС);
	ФайлыТС.Добавить(ИмяФайлаИндексаТС);
	
	Результат = Обработки.ЗагрузкаДанныхБух.ПроверитьТаблицуСоответствия(
		ФайлыТС,
		СписокСообщений,
		Объект.БылоСозданиеНовогоПоля,
		Объект,,
		?(ЭтоПереиндексировать ИЛИ ЗагрузкаДанных ИЛИ СозданиеНовойТС, СтруктураПроверки, Неопределено),
		НЕ СтруктураПроверки.Свойство("НеУдалятьВременныйФайл"));
		
	Если СозданиеНовойТС Тогда
		
		СтруктураПроверки.БД_ТС.Записать();
		СтруктураПроверки.БД_ТС.ЗакрытьФайл();
		
		ФайлТС = СтруктураПроверки.ФайлТС;
		
		СтруктураПроверки.ФайлТС = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПроверки.ФайлТС));
		
		Если СтруктураПроверки.Свойство("ФайлИндексовТС") Тогда
			АдресФайлаИндексовТС = СтрЗаменить(ФайлТС, ".dbf", ".cdx");
			СтруктураПроверки.ФайлИндексовТС = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АдресФайлаИндексовТС));
			Обработки.ЗагрузкаДанныхБух.УдалитьВременныеФайлы(АдресФайлаИндексовТС);
		КонецЕсли;
		
		Обработки.ЗагрузкаДанныхБух.УдалитьВременныеФайлы(ФайлТС);
		
	КонецЕсли;
	
	Если (ЗагрузкаДанных ИЛИ СозданиеНовойТС) И СтруктураПроверки.Свойство("БД_ТС") Тогда
		СтруктураПроверки.Удалить("БД_ТС");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


