// Модуль менеджера обработки "Подбор рекомендаций"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура НачальноеЗаполнениеРекомендацийПоАвтомобилю(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РекомендацииПоАвтомобилю.Период КАК Период,
	|	РекомендацииПоАвтомобилю.Автомобиль КАК Автомобиль,
	|	РекомендацииПоАвтомобилю.Рекомендация КАК Рекомендация,
	|	РекомендацииПоАвтомобилю.Количество КАК Количество,
	|	РекомендацииПоАвтомобилю.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт,
	|	РекомендацииПоАвтомобилю.ЗаказНаряд КАК ЗаказНаряд,
	|	РекомендацииПоАвтомобилю.ПричинаОтказа КАК ПричинаОтказа,
	|	РекомендацииПоАвтомобилю.ДатаВыполнения КАК ДатаВыполнения,
	|	РекомендацииПоАвтомобилю.Автор КАК Автор,
	|	РекомендацииПоАвтомобилю.Исполнитель КАК Исполнитель,
	|	РекомендацииПоАвтомобилю.Выполнена КАК Выполнена,
	|	РекомендацииПоАвтомобилю.ДатаАктуальности КАК ДатаАктуальности,
	|	РекомендацииПоАвтомобилю.Коэффициент КАК Коэффициент,
	|	РекомендацииПоАвтомобилю.ДатаЗаписи КАК ДатаЗаписи,
	|	ВЫБОР
	|		КОГДА РекомендацииПоАвтомобилю.Выполнена = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (РекомендацииПоАвтомобилю.ЗаявкаНаРемонт <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРемонт.ПустаяСсылка)
	|						ИЛИ РекомендацииПоАвтомобилю.ЗаказНаряд <> ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка))
	|						И РекомендацииПоАвтомобилю.Выполнена = ЛОЖЬ
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА РекомендацииПоАвтомобилю.ЗаявкаНаРемонт = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРемонт.ПустаяСсылка)
	|								И РекомендацииПоАвтомобилю.ЗаказНаряд = ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка)
	|								И РекомендацииПоАвтомобилю.ДатаАктуальности > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								И РекомендацииПоАвтомобилю.ДатаАктуальности <= &ТекущаяДата
	|							ТОГДА 3
	|						ИНАЧЕ ВЫБОР
	|								КОГДА РекомендацииПоАвтомобилю.ПричинаОтказа <> ЗНАЧЕНИЕ(Справочник.ПричиныОтказаОтОбслуживания.ПустаяСсылка)
	|									ТОГДА 4
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ПорядокПриоритетов,
	|	РекомендацииПоАвтомобилю.Комментарий КАК Комментарий,
	|	РекомендацииПоАвтомобилю.УдалитьКомментарий КАК УдалитьКомментарий
	|ИЗ
	|	РегистрСведений.РекомендацииПоАвтомобилю КАК РекомендацииПоАвтомобилю
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Автомобиль,
	|	Рекомендация,
	|	ПорядокПриоритетов
	|ИТОГИ ПО
	|	Период,
	|	Автомобиль,
	|	Рекомендация";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПериод.Следующий() Цикл
		// Вставить обработку выборки ВыборкаПериод
		
		ВыборкаАвтомобиль = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАвтомобиль.Следующий() Цикл
			// Вставить обработку выборки ВыборкаАвтомобиль
			
			ПорядковыйНомерАвтомобилей = 1;
			
			ВыборкаРекомендация = ВыборкаАвтомобиль.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаРекомендация.Следующий() Цикл
				// Вставить обработку выборки ВыборкаРекомендация
				
				ПорядковыйНомерДетальнойЗаписи = 1;
				
				ВыборкаДетальныеЗаписи = ВыборкаРекомендация.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ПорядковыйНомерДетальнойЗаписи > 1 Тогда
						Прервать;
					КонецЕсли;
					
					НаборЗаписей = РегистрыСведений.РекомендацииПоАвтомобилю.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
					НаборЗаписей.Отбор.Автомобиль.Установить(ВыборкаДетальныеЗаписи.Автомобиль);
					НаборЗаписей.Отбор.Рекомендация.Установить(ВыборкаДетальныеЗаписи.Рекомендация);
					НаборЗаписей.Записать();
					
					НаборЗаписей = РегистрыСведений.РекомендацииПоАвтомобилю.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
					НаборЗаписей.Отбор.Автомобиль.Установить(ВыборкаДетальныеЗаписи.Автомобиль);
					НаборЗаписей.Отбор.Рекомендация.Установить(ВыборкаДетальныеЗаписи.Рекомендация);
					
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
					
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаЗаписи) Тогда
						Запись.ДатаЗаписи = Запись.Период + ПорядковыйНомерАвтомобилей;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.УдалитьКомментарий) Тогда
						Запись.Комментарий = ВыборкаДетальныеЗаписи.УдалитьКомментарий;
						Запись.УдалитьКомментарий = "";
					КонецЕсли;
					
					НаборЗаписей.Записать();
					
					ПорядковыйНомерДетальнойЗаписи = ПорядковыйНомерДетальнойЗаписи + 1;
					ПорядковыйНомерАвтомобилей = ПорядковыйНомерАвтомобилей + 1;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.РекомендацииПоАвтомобилю.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рекомендация.Установить(Неопределено);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаявкаНаРемонтПриИзменении(СтрокаРекомендации) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРекомендации.ЗаявкаНаРемонт) Тогда
		СтрокаРекомендации.ПричинаОтказа = Неопределено;
		СтрокаРекомендации.Период = СтрокаРекомендации.ЗаявкаНаРемонт.Дата;
	КонецЕсли;
	
	ЗаказНарядПриИзменении(СтрокаРекомендации);
	
КонецПроцедуры

Процедура ЗаказНарядПриИзменении(СтрокаРекомендации) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРекомендации.ЗаказНаряд) Тогда
		СтрокаРекомендации.ПричинаОтказа = Неопределено;
		СтрокаРекомендации.Период = СтрокаРекомендации.ЗаказНаряд.Дата;
		Если СтрокаРекомендации.ЗаказНаряд.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
			ИЛИ СтрокаРекомендации.ЗаказНаряд.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			СтрокаРекомендации.ДатаВыполнения = СтрокаРекомендации.ЗаказНаряд.ДатаОкончания;
			СтрокаРекомендации.Выполнена = Истина;
			СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Завершено;
		Иначе
			СтрокаРекомендации.ДатаВыполнения = Неопределено;
			СтрокаРекомендации.Выполнена = Ложь;
			СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Выполняется;
		КонецЕсли; 
	Иначе
		СтрокаРекомендации.ДатаВыполнения = Неопределено;
		СтрокаРекомендации.Исполнитель = Неопределено;
		СтрокаРекомендации.Выполнена = Ложь;
		Если ЗначениеЗаполнено(СтрокаРекомендации.ПричинаОтказа) Тогда
			СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Отменено;
		ИначеЕсли ЗначениеЗаполнено(СтрокаРекомендации.ЗаявкаНаРемонт) Тогда
			СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Выполняется;
		Иначе
			СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Запланировано;
		КонецЕсли; 
	КонецЕсли;
	СтрокаРекомендации.ЗаказНарядТекущий = Ложь;
	
КонецПроцедуры

Процедура ПричинаОтказаПриИзменении(СтрокаРекомендации) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРекомендации.ПричинаОтказа) Тогда
		СтрокаРекомендации.ЗаявкаНаРемонт = Неопределено;
		СтрокаРекомендации.ЗаказНаряд = Неопределено;
		СтрокаРекомендации.ДатаВыполнения = ТекущаяДатаСеанса();
		СтрокаРекомендации.Исполнитель = Пользователи.АвторизованныйПользователь();
		СтрокаРекомендации.Выполнена = Ложь;
		СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Отменено;
	Иначе
		ЗаказНарядПриИзменении(СтрокаРекомендации);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьСтрокуРекомендации(Объект, СтрокаРекомендации, РаботаИзПодбора = Ложь, НоваяСтрока = Ложь) Экспорт
	
	Если Объект.Автомобиль.Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указан автомобиль для рекомендации. Запись рекомендации отменена.'")
		);
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Если НЕ ЗначениеЗаполнено(СтрокаРекомендации.Период) Тогда
		СтрокаРекомендации.Период = ТекущаяДатаСеанса();
	КонецЕсли; 
	Если СтрокаРекомендации.Количество = 0 Тогда
		СтрокаРекомендации.Количество = 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРекомендации.ЗаявкаНаРемонт) Тогда
		ЗаявкаНаРемонтПриИзменении(СтрокаРекомендации);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРекомендации.ЗаказНаряд) Тогда
		ЗаказНарядПриИзменении(СтрокаРекомендации);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРекомендации.ПричинаОтказа) Тогда
		ПричинаОтказаПриИзменении(СтрокаРекомендации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаРекомендации.ДатаЗаписи) Тогда
		ДатаЗаписи = СтрокаРекомендации.ДатаЗаписи;
	Иначе
		ДатаЗаписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не НоваяСтрока Тогда
		
		Если СтрокаРекомендации.ПериодЗаписи <> СтрокаРекомендации.Период
			ИЛИ СтрокаРекомендации.РекомендацияЗаписи <> СтрокаРекомендации.Рекомендация Тогда
			
			НаборЗаписей = РегистрыСведений.РекомендацииПоАвтомобилю.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(СтрокаРекомендации.ПериодЗаписи);
			НаборЗаписей.Отбор.Автомобиль.Установить(Объект.Автомобиль);
			НаборЗаписей.Отбор.Рекомендация.Установить(СтрокаРекомендации.РекомендацияЗаписи);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				ДатаЗаписи = НаборЗаписей[0].ДатаЗаписи;
				
				НаборЗаписей.Удалить(НаборЗаписей[0]);
				НаборЗаписей.Записать();
				
				Если НЕ РаботаИзПодбора Тогда
					
					ВывестиСообщение(НСтр("ru = 'При изменении рекомендации найдена идентичная запись,
						|по ключевым полям <Дата = %1>, <Автомобиль = %2>, <Рекомендация = %3>
						|старая запись
						|с ключемыми полям <Дата = %4>, <Автомобиль = %5>, <Рекомендация = %6>
						|удалена.'"),,,,,
						СтрокаРекомендации.Период, Объект.Автомобиль, СтрокаРекомендации.Рекомендация,
						СтрокаРекомендации.ПериодЗаписи, Объект.Автомобиль, СтрокаРекомендации.РекомендацияЗаписи
					);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РекомендацииПоАвтомобилю.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтрокаРекомендации.Период);
	НаборЗаписей.Отбор.Автомобиль.Установить(Объект.Автомобиль);
	НаборЗаписей.Отбор.Рекомендация.Установить(СтрокаРекомендации.Рекомендация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		
		Если НЕ РаботаИзПодбора ИЛИ НоваяСтрока Тогда
			
			Если ЗначениеЗаполнено(Запись.ЗаказНаряд) И НЕ ЗначениеЗаполнено(СтрокаРекомендации.ЗаказНаряд) Тогда
				//
			ИначеЕсли ЗначениеЗаполнено(Запись.ЗаявкаНаРемонт) И НЕ ЗначениеЗаполнено(СтрокаРекомендации.ЗаявкаНаРемонт) Тогда
				//
			Иначе
				ВывестиСообщение(НСтр("ru = 'При добавлении рекомендации найдена идентичная запись,
					|по ключевым полям <Дата = %1>, <Автомобиль = %2>, <Рекомендация = %3>
					|старая запись замена на новую.'"),,,,, СтрокаРекомендации.Период, Объект.Автомобиль, СтрокаРекомендации.Рекомендация
				);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Запись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	Запись.Период = СтрокаРекомендации.Период;
	Запись.Автомобиль = Объект.Автомобиль;
	Запись.Рекомендация = СтрокаРекомендации.Рекомендация;
	Запись.Количество = СтрокаРекомендации.Количество;
	Запись.ЗаявкаНаРемонт = СтрокаРекомендации.ЗаявкаНаРемонт;
	Запись.ЗаказНаряд = СтрокаРекомендации.ЗаказНаряд;
	Запись.ПричинаОтказа = СтрокаРекомендации.ПричинаОтказа;
	Запись.ДатаВыполнения = СтрокаРекомендации.ДатаВыполнения;
	Запись.Автор = СтрокаРекомендации.Автор;
	Запись.Исполнитель = СтрокаРекомендации.Исполнитель;
	Запись.Выполнена = СтрокаРекомендации.Выполнена;
	Запись.ДатаАктуальности = СтрокаРекомендации.ДатаАктуальности;
	Если ТипЗнч(СтрокаРекомендации.Рекомендация) = Тип("СправочникСсылка.Номенклатура") Тогда
		Запись.ЕдиницаИзмерения = СтрокаРекомендации.ЕдиницаИзмерения;
	КонецЕсли;
	Запись.Коэффициент = СтрокаРекомендации.Коэффициент;
	Запись.ДатаЗаписи = ДатаЗаписи;
	Запись.Комментарий = СтрокаРекомендации.Комментарий;
	
	Попытка
		НаборЗаписей.Записать();
		СтрокаРекомендации.ПериодЗаписи = СтрокаРекомендации.Период;
		СтрокаРекомендации.РекомендацияЗаписи = СтрокаРекомендации.Рекомендация;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Ошибка при записи рекомендации по автомобилю: %1'"), ОписаниеОшибки())
		);
		Оповещение = Ложь;
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Процедура ЗаписатьРекомендации(Объект) Экспорт
	
	Результат = Истина;
	Для каждого СтрокаРекомендации Из Объект.Рекомендации Цикл
		Результат = ЗаписатьСтрокуРекомендации(Объект, СтрокаРекомендации, Истина);
	КонецЦикла; 
	Если Результат Тогда
		Объект.Модифицированность = Ложь;
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверитьВыполнениеРекомендаций(Объект, ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		СтрокиРекомендаций = Объект.Рекомендации.НайтиСтроки(Новый Структура("ЗаявкаНаРемонт", ДокументСсылка));
		ИмяДокумента="ЗаявкаНаРемонт";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		СтрокиРекомендаций = Объект.Рекомендации.НайтиСтроки(Новый Структура("ЗаказНаряд", ДокументСсылка));
		ИмяДокумента = "ЗаказНаряд";
	Иначе
		Возврат;
	КонецЕсли;
	Если СтрокиРекомендаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументРаботы.Авторабота КАК Рекомендация,
		|	СУММА(ДокументРаботы.Количество) КАК Количество
		|ИЗ
		|	Документ." + ИмяДокумента + ".Автоработы КАК ДокументРаботы
		|ГДЕ
		|	ДокументРаботы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументРаботы.Авторабота
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	СУММА(ДокументТовары.Количество * ДокументТовары.Коэффициент)
		|ИЗ
		|	Документ." + ИмяДокумента + ".Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РекомендацииДокумента=Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРекомендации Из СтрокиРекомендаций Цикл
		СтрокаРекомендацииДокумента = РекомендацииДокумента.Найти(СтрокаРекомендации.Рекомендация, "Рекомендация");
		Если СтрокаРекомендацииДокумента = Неопределено
			ИЛИ СтрокаРекомендацииДокумента.Количество < СтрокаРекомендации.Количество Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
				СтрокаРекомендации.ЗаявкаНаРемонт = Неопределено;
				ЗаявкаНаРемонтПриИзменении(СтрокаРекомендации);
				ЗаписатьСтрокуРекомендации(Объект, СтрокаРекомендации, Истина);
			ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				СтрокаРекомендации.ЗаказНаряд = Неопределено;
				ЗаказНарядПриИзменении(СтрокаРекомендации);
				ЗаписатьСтрокуРекомендации(Объект, СтрокаРекомендации, Истина);
			КонецЕсли;
		Иначе
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				ЗаявкаНаРемонтПриИзменении(СтрокаРекомендации);
				ЗаписатьСтрокуРекомендации(Объект, СтрокаРекомендации, Истина);
			КонецЕсли;
			СтрокаРекомендацииДокумента.Количество = СтрокаРекомендацииДокумента.Количество - СтрокаРекомендации.Количество;
			Если СтрокаРекомендацииДокумента.Количество = 0 Тогда
				РекомендацииДокумента.Удалить(СтрокаРекомендацииДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРекомендациюВДокумент(ОбъектДокумента, ФормаДокумента, СтруктураРекомендации, НоваяСтрокаАвторабот = Ложь) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектДокумента.Ссылка);
	
	РедактированиеРаботЗаказНаряда   = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда");
	РедактированиеДеталейЗаказНаряда = ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда");
	
	Рекомендация = СтруктураРекомендации.Рекомендация;
	Количество   = СтруктураРекомендации.Количество;
	Коэффициент  = СтруктураРекомендации.Коэффициент;
	ЕдИзмерения  = СтруктураРекомендации.ЕдиницаИзмерения;
	
	Если ТипЗнч(Рекомендация) = Тип("СправочникСсылка.Автоработы") И РедактированиеРаботЗаказНаряда Тогда
		ПараметрыПодбора = Новый Структура();
		ПараметрыПодбора.Вставить("Авторабота", Рекомендация);
		
		Если ЗначениеЗаполнено(СтруктураРекомендации.ИдентификаторПричиныОбращения) Тогда
			ПараметрыПодбора.Вставить("ИдентификаторПричиныОбращения", СтруктураРекомендации.ИдентификаторПричиныОбращения);
		КонецЕсли;
		СтрокаРабот = ОбъектДокумента.Автоработы.НайтиСтроки(ПараметрыПодбора);
		Если СтрокаРабот.Количество() = 0 Тогда
			СтрокаРабот                     = ОбъектДокумента.Автоработы.Добавить();
			СтрокаРабот.Авторабота          = Рекомендация;
			СтрокаРабот.Количество          = Количество;
		
			СтрокаРабот.ИдентификаторРаботы = Новый УникальныйИдентификатор;
			
			Если ЗначениеЗаполнено(СтруктураРекомендации.ИдентификаторПричиныОбращения) Тогда
				СтрокаРабот.ИдентификаторПричиныОбращения = СтруктураРекомендации.ИдентификаторПричиныОбращения;
			КонецЕсли;
			МенеджерДокумента.АвтоработыАвтоработаПриИзменении(ОбъектДокумента, СтрокаРабот);
			СтрокаРабот.Коэффициент 		= ?(Коэффициент = 0, 1, Коэффициент);
			МенеджерДокумента.АвтоработыКоэффициентПриИзменении(ОбъектДокумента, СтрокаРабот);

			НоваяСтрокаАвторабот = Истина;
		Иначе
			СтрокаРабот[0].Количество = СтрокаРабот[0].Количество + Количество;
			МенеджерДокумента.АвтоработыКоличествоПриИзменении(ОбъектДокумента, СтрокаРабот[0]);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Рекомендация) = Тип("СправочникСсылка.Номенклатура") И РедактированиеДеталейЗаказНаряда Тогда
		ПараметрыПодбора = Новый Структура();
		ПараметрыПодбора.Вставить("Номенклатура", Рекомендация);
		Если ЗначениеЗаполнено(СтруктураРекомендации.ИдентификаторПричиныОбращения) Тогда
			ПараметрыПодбора.Вставить("ИдентификаторПричиныОбращения", СтруктураРекомендации.ИдентификаторПричиныОбращения);
		КонецЕсли;
		СтрокаТоваров = ОбъектДокумента.Товары.НайтиСтроки(ПараметрыПодбора);
		Если СтрокаТоваров.Количество() = 0 Тогда
			СтрокаТоваров = ОбъектДокумента.Товары.Добавить();
			СтрокаТоваров.Номенклатура = Рекомендация;
			СтрокаТоваров.Количество = Количество;
			
			Если ЗначениеЗаполнено(СтруктураРекомендации.ИдентификаторПричиныОбращения) Тогда
				СтрокаТоваров.ИдентификаторПричиныОбращения = СтруктураРекомендации.ИдентификаторПричиныОбращения;
			КонецЕсли;
			МенеджерДокумента.ТоварыНоменклатураПриИзменении(ОбъектДокумента, СтрокаТоваров);
			УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ФормаДокумента, СтрокаТоваров);
			
			СтрокаТоваров.ЕдиницаИзмерения = ЕдИзмерения;
			МенеджерДокумента.ТоварыЕдиницаИзмеренияПриИзменении(ОбъектДокумента, СтрокаТоваров);
		//	СтрокаТоваров.Коэффициент = Коэффициент;
		Иначе
			СтрокаТоваров[0].Количество = СтрокаТоваров[0].Количество
				+ Количество / ?(СтрокаТоваров[0].Коэффициент = 0, 1, СтрокаТоваров[0].Коэффициент);
			МенеджерДокумента.ТоварыКоличествоПриИзменении(ОбъектДокумента, СтрокаТоваров[0]);
		КонецЕсли;
		ДокументОбъект = ОбъектДокумента.Ссылка;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Получить остатки номенклатуры
// Номенклатура - СправочникСсылка на номенклатуру
// ХарактеристикаНоменклатуры - СправочникСсылка на ХарактеристикаНоменклатуры
// Возвращаемое значение Число - остаток номенклатуры.
Процедура ПолучитьОстаткиНоменклатурыНаСкладах(Объект, Знач СкладКомпании, Строка = Неопределено) Экспорт
	
	// Будем считать что остаток нулевой
	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	МассивНоменклатуры = Новый Массив;
	
	Если Строка = Неопределено Тогда
		Для Каждого ТекущаяСтрока Из Объект.Рекомендации Цикл
			Если ТипЗнч(ТекущаяСтрока.Рекомендация) = Тип("СправочникСсылка.Номенклатура") Тогда
				МассивНоменклатуры.Добавить(ТекущаяСтрока.Рекомендация);
				ТекущаяСтрока.ОстатокНаСкладе = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(Строка.Рекомендация) = Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Строка.Рекомендация);
			Строка.ОстатокНаСкладе = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток-ОстаткиТоваровКомпанииОстатки.РезервОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(," + ?(ЗначениеЗаполнено(СкладКомпании), "СкладКомпании=&СкладКомпании И ", "") + " Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ОстаткиТоваровКомпанииОстатки
	|";
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("Номенклатура",  МассивНоменклатуры);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекущаяСтрока Из ТаблицаОстатков Цикл
		НайденныеСтроки = Объект.Рекомендации.НайтиСтроки(Новый Структура("Рекомендация", ТекущаяСтрока.Номенклатура));
		Для Каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
			СтрокаНоменклатуры.ОстатокНаСкладе = ТекущаяСтрока.Остаток;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область Печать

// Обработчик печати
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Рекомендации") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Рекомендации",
			"Рекомендации",
			ПечатьРекомендаций(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует данные в табличном документе.
//
Функция ПечатьРекомендаций (МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ОбъектПечати                = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати, "Объект");
	ВыводитьРаботы              = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати, "ВыводитьРаботы", Истина);
	ВыводитьЗапчасти            = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати, "ВыводитьЗапчасти", Истина);
	СписокСостояний             = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати, "СписокСостояний");
	
	// Создадим табличные документы
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Рекомендации");
	ВыводитьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах");
	КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
	ИмяРеквизитаКода=КолонкаКода.Имя;
	
	НомерСтраницы = 1;
	
	ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(ОбъектПечати);
	ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Неопределено);
	
	ДатаПечатная = ТекущаяДатаСеанса();
	
	ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// зададим параметры макета
	ТабличныйДокумент.ПолеСверху = 10; // поле равно высоте колонтитулов
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	
	ОбластьУслугиРекомендацииШапка = Макет.ПолучитьОбласть("УслугиРекомендацииШапка");
	ОбластьУслугиРекомендацииСтрока= Макет.ПолучитьОбласть("УслугиРекомендацииСтрока");
	ОбластьУслугиРекомендацииПодвал= Макет.ПолучитьОбласть("УслугиРекомендацииПодвал");
	
	ОбластьДеталиРекомендацииШапка = Макет.ПолучитьОбласть("ДеталиРекомендацииШапка");
	ОбластьДеталиРекомендацииСтрока= Макет.ПолучитьОбласть("ДеталиРекомендацииСтрока");
	ОбластьДеталиРекомендацииПодвал= Макет.ПолучитьОбласть("ДеталиРекомендацииПодвал");
	
	ОбластьКомментарийРекомендацииШапка  = Макет.ПолучитьОбласть("КомментарийРекомендацииШапка");
	ОбластьКомментарийРекомендацииСтрока = Макет.ПолучитьОбласть("КомментарийРекомендацииСтрока");
	ОбластьКомментарийРекомендацииПодвал = Макет.ПолучитьОбласть("КомментарийРекомендацииПодвал");
	
	Если НЕ ВыводитьКод Тогда
			
		// Рекомендации услуг
		ВремОбластьУслугиРекомендацииШапка = ОбластьУслугиРекомендацииШапка.Область(2, 4, 2, 4).Текст;
		ОбластьУслугиРекомендацииШапка.Область(2, 3, 2, 7).Объединить();
		ОбластьУслугиРекомендацииШапка.Область(3, 3, 3, 7).Объединить();
		ОбластьУслугиРекомендацииШапка.Область(2, 3, 2, 4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьУслугиРекомендацииШапка.Область(2, 3, 2, 3).Текст = ВремОбластьУслугиРекомендацииШапка;

		ОбластьУслугиРекомендацииСтрока.Область(1, 3, 1, 8).Объединить();
		ОбластьУслугиРекомендацииСтрока.Область(1, 3, 1, 7).Параметр = ВремОбластьУслугиРекомендацииШапка;
		ОбластьУслугиРекомендацииСтрока.Область(1, 3, 1, 7).ПараметрРасшифровки = "Номенклатура";
		
		Ном = 3;
		Для Сч = 3 По 14 Цикл
			Если НЕ ЗначениеЗаполнено(ОбластьУслугиРекомендацииШапка.Область(3, Сч + 1, 3, Сч + 1).Текст) Тогда
				Продолжить;
			КонецЕсли;
			ОбластьУслугиРекомендацииШапка.Область(3, Сч + 1, 3, Сч + 1).Текст = Ном;
			Ном = Ном + 1;
		КонецЦикла;
		
		// Рекомендации деталей
		ВремОбластьДеталиРекомендацииШапка = ОбластьДеталиРекомендацииШапка.Область(2, 4, 2, 4).Текст;
		ОбластьДеталиРекомендацииШапка.Область(2, 3, 2, 7).Объединить();
		ОбластьДеталиРекомендацииШапка.Область(3, 3, 3, 7).Объединить();
		ОбластьДеталиРекомендацииШапка.Область(2, 3, 2, 4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьДеталиРекомендацииШапка.Область(2, 3, 2, 3).Текст = ВремОбластьДеталиРекомендацииШапка;

		ОбластьДеталиРекомендацииСтрока.Область(1,3,1,8).Объединить();
		ОбластьДеталиРекомендацииСтрока.Область(1,3,1,7).Параметр=ВремОбластьДеталиРекомендацииШапка;
		ОбластьДеталиРекомендацииСтрока.Область(1,3,1,7).ПараметрРасшифровки="Номенклатура";
		
		Ном = 3;
		Для Сч = 3 По 14 Цикл
			Если НЕ ЗначениеЗаполнено(ОбластьДеталиРекомендацииШапка.Область(3, Сч + 1, 3, Сч + 1).Текст) Тогда
				Продолжить;
			КонецЕсли;
			ОбластьДеталиРекомендацииШапка.Область(3, Сч + 1, 3, Сч + 1).Текст = Ном;
			Ном = Ном + 1;
		КонецЦикла;
		
	КонецЕсли;
	// Вывод шапки документа
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Организация = ПараметрыСеанса.Организация;
	ОбластьМакета.Параметры.ФирмаПолноеНаименование =
		УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ПараметрыСеанса.Организация);
	ОбластьМакета.Параметры.ФирмаАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ПараметрыСеанса.Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса()
	);
	ОбластьМакета.Параметры.ФирмаТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ПараметрыСеанса.Организация,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса()
	);
	
	Заголовок = СтрШаблон(НСтр("ru = 'Рекомендации по автомобилю от %1'"), Формат(ДатаПечатная, "ДЛФ=D"));
	
	Если СписокСостояний <> Неопределено И СписокСостояний.Количество() = 1 Тогда
		
		Если СписокСостояний[0].Значение = Перечисления.СостоянияСобытий.Запланировано Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Рекомендации по автомобилю, актуальные на %1'"), Формат(ДатаПечатная, "ДЛФ=D"));
		ИначеЕсли СписокСостояний[0].Значение = Перечисления.СостоянияСобытий.Выполняется Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Выполняющиеся на %1 рекомендации по автомобилю'"), Формат(ДатаПечатная, "ДЛФ=D"));
		ИначеЕсли СписокСостояний[0].Значение = Перечисления.СостоянияСобытий.Завершено Тогда
			Заголовок = НСтр("ru = 'Выполненные рекомендации по автомобилю'");
		ИначеЕсли СписокСостояний[0].Значение = Перечисления.СостоянияСобытий.Отменено Тогда
			Заголовок = НСтр("ru = 'Отклоненные рекомендации по автомобилю'");
		КонецЕсли;
		
	КонецЕсли; 
		
	ОбластьМакета.Параметры.Заголовок = Заголовок;
	Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
		ОбъектПечати.Автомобиль,
		Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
		ДатаПечатная
	);
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ОбластьМакета.Параметры.Владелец = Владелец;
		ОбластьМакета.Параметры.ВладелецПолноеНаименование =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Владелец);
		ОбластьМакета.Параметры.ВладелецАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Владелец,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса()
		);
		ОбластьМакета.Параметры.ВладелецТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Владелец,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса()
		);
	Иначе
		ОбластьМакета.Параметры.ВладелецПолноеНаименование = НСтр("ru = 'Нет данных'");
	КонецЕсли;
	
	ОбластьМакета.Параметры.Автомобиль = ОбъектПечати.Автомобиль;
	ОбластьМакета.Параметры.АвтомобильКод = ОбъектПечати.Автомобиль.VIN;
	ОбластьМакета.Параметры.АвтомобильМодель = ОбъектПечати.Автомобиль.Модель;
	ОбластьМакета.Параметры.АвтомобильГодВыпуска =
		Формат(ОбъектПечати.Автомобиль.ГодВыпуска, ФорматПредставленияГодаВыпускаАвтомобиля);
	
	ОбластьМакета.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
		ОбъектПечати.Автомобиль,
		Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,
		ДатаПечатная
	);
	Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
		ОбъектПечати.Автомобиль,
		Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
		ДатаПечатная
	);
	ОбластьМакета.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СуммаЗапчастей = 0;
	СуммаРабот = 0;
	
	ЕстьРаботы                    = Ложь;
	ЕстьДетали                    = Ложь;
	
	Для Каждого СтрокаРекомендации Из ОбъектПечати.Рекомендации Цикл
		
		Если СписокСостояний <> Неопределено
			И СписокСостояний.НайтиПоЗначению(СтрокаРекомендации.Состояние) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаРекомендации.Рекомендация) = Тип("СправочникСсылка.Автоработы")
			И ЗначениеЗаполнено(СтрокаРекомендации.Рекомендация)
			И НЕ ЕстьРаботы Тогда
			
			ЕстьРаботы = Истина;
			
		ИначеЕсли ТипЗнч(СтрокаРекомендации.Рекомендация) = Тип("СправочникСсылка.Номенклатура")
			И ЗначениеЗаполнено(СтрокаРекомендации.Рекомендация) Тогда
			
			ЕстьДетали = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыводитьРаботы И ЕстьРаботы Тогда
		
		КоличествоРабот = 0;
		Сч = 0;
		
		ТекстЗаголовка = НСтр("ru = 'Рекомендованные работы'");
		
		ТекОбластьШапка = ОбластьУслугиРекомендацииШапка;
		ТекОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		Если ВыводитьКод Тогда
			ТекОбластьШапка.Параметры.ИмяКолонкиКодов = КолонкаКода.Синоним;
		КонецЕсли;
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент,
			ТекОбластьШапка,
			, ,
			НомерСтраницы,
			,
			Неопределено
		);
		
		МассивОбластей = Новый Массив();
		МассивОбластей.Добавить(ТекОбластьШапка);
		
		Для Каждого СтрокаРекомендации Из ОбъектПечати.Рекомендации  Цикл
			
			Если ТипЗнч(СтрокаРекомендации.Рекомендация) = Тип("СправочникСсылка.Автоработы")
				И ЗначениеЗаполнено(СтрокаРекомендации.Рекомендация) Тогда
				
				Если СписокСостояний <> Неопределено 
					И СписокСостояний.НайтиПоЗначению(СтрокаРекомендации.Состояние) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Сч = Сч + 1;
				
				ТекОбласть = ОбластьУслугиРекомендацииСтрока;
				ЗаполнитьЗначенияСвойств(ТекОбласть.Параметры, СтрокаРекомендации);
				Если ВыводитьКод Тогда
					ТекОбласть.Параметры.Код =
						УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаРекомендации.Рекомендация);
				КонецЕсли;
				
				ТекОбласть.Параметры.Наименование =
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРекомендации.Рекомендация);
				Если СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Отменено Тогда
					ТекОбласть.Параметры.Наименование = ТекОбласть.Параметры.Наименование + СтрШаблон(
						"(%1 %2)",
						УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРекомендации.ПричинаОтказа),
						?(ЗначениеЗаполнено(СтрокаРекомендации.ДатаВыполнения), Формат(СтрокаРекомендации.ДатаВыполнения, "ДЛФ=D"), "")
					);
				КонецЕсли;
				
				ЦенаРаботы = ЦенообразованиеСервер.ПолучитьЦенуАвтоработы(
					ОбъектПечати.ТипЦенАвторабот,
					СтрокаРекомендации.Рекомендация,
					ОбъектПечати.Автомобиль.Модель,
					ОбъектПечати.Контрагент,
					ОбъектПечати.ДоговорВзаиморасчетов,
					ОбъектПечати.Цех,
					ОбъектПечати.ВидРемонта,
					ДатаПечатная,
					ВалютаПечатногоДокумента,
					1
				);
				ТекОбласть.Параметры.Нормочас = ЦенаРаботы.Нормочас;
				
				ТекОбласть.Параметры.НомСтр = Сч;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
					ТабличныйДокумент, ТекОбласть, ТекОбластьШапка, , НомерСтраницы, , Неопределено, МассивОбластей);
				
				СуммаРабот = СуммаРабот + СтрокаРекомендации.Сумма;
				КоличествоРабот = КоличествоРабот + СтрокаРекомендации.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекОбластьПодвал = ОбластьУслугиРекомендацииПодвал;
		ТекОбластьПодвал.Параметры.Количество = КоличествоРабот;
		ТекОбластьПодвал.Параметры.Сумма = Формат(СуммаРабот, ФорматВыводаСуммы);
		ТекОбластьПодвал.Параметры.ЧислоПрописью =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаРабот, ВалютаПечатногоДокумента);
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент, ТекОбластьПодвал, , , НомерСтраницы, , Неопределено);
		
	КонецЕсли;
	
	Если ВыводитьЗапчасти И ЕстьДетали Тогда
		
		КоличествоЗапчастей = 0;
		Сч = 0;
		
		ТекОбластьШапка = ОбластьДеталиРекомендацииШапка;
		ТекОбластьШапка.Параметры.ТекстЗаголовка = НСтр("ru = 'Рекомендованные детали'");
		Если ВыводитьКод Тогда
			ТекОбластьШапка.Параметры.ИмяКолонкиКодов = КолонкаКода.Синоним;
		КонецЕсли;
		
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент, ТекОбластьШапка, , , НомерСтраницы, , Неопределено);
		
		МассивОбластей = Новый Массив();
		МассивОбластей.Добавить(ТекОбластьШапка);
		
		Для Каждого СтрокаРекомендации Из ОбъектПечати.Рекомендации  Цикл
			
			Если ТипЗнч(СтрокаРекомендации.Рекомендация) = Тип("СправочникСсылка.Номенклатура")
				И ЗначениеЗаполнено(СтрокаРекомендации.Рекомендация) Тогда
				
				Если СписокСостояний <> Неопределено
					И СписокСостояний.НайтиПоЗначению(СтрокаРекомендации.Состояние) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Сч = Сч + 1;
				
				ТекОбласть = ОбластьДеталиРекомендацииСтрока;
				ЗаполнитьЗначенияСвойств(ТекОбласть.Параметры, СтрокаРекомендации);
				Если ВыводитьКод Тогда
					ТекОбласть.Параметры.Код =
						УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаРекомендации.Рекомендация);
				КонецЕсли;
				
				Если СтрокаРекомендации.Состояние = Перечисления.СостоянияСобытий.Отменено Тогда
					ПричинаОтказа = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРекомендации.ПричинаОтказа);
					ДатаВыполнения = ?(ЗначениеЗаполнено(СтрокаРекомендации.ДатаВыполнения),
						Формат(СтрокаРекомендации.ДатаВыполнения, "ДЛФ=D"), "");
					ТекОбласть.Параметры.Наименование = СтрШаблон(
						"%1 (%2 %3)",
						УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРекомендации.Рекомендация),
						ПричинаОтказа,
						ДатаВыполнения
					);
				Иначе
					ТекОбласть.Параметры.Наименование =
						УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРекомендации.Рекомендация);
				КонецЕсли;
				
				ТекОбласть.Параметры.НомСтр = Сч;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
					ТабличныйДокумент, ТекОбласть,ТекОбластьШапка, , НомерСтраницы, , Неопределено, МассивОбластей);
				
				СуммаЗапчастей = СуммаЗапчастей + СтрокаРекомендации.Сумма;
				КоличествоЗапчастей = КоличествоЗапчастей + СтрокаРекомендации.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекОбластьПодвал = ОбластьДеталиРекомендацииПодвал;
		ТекОбластьПодвал.Параметры.Количество = КоличествоЗапчастей;
		ТекОбластьПодвал.Параметры.Сумма = Формат(СуммаЗапчастей, ФорматВыводаСуммы);
 		ТекОбластьПодвал.Параметры.ЧислоПрописью =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЗапчастей, ВалютаПечатногоДокумента);
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент,
			ТекОбластьПодвал,
			, ,
			НомерСтраницы,
			,
			Неопределено
		);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНачало");
	
	ОбластьМакета.Параметры.Сумма = Формат(СуммаРабот + СуммаЗапчастей, ФорматВыводаСуммы);
	ОбластьМакета.Параметры.ЧислоПрописью =
		РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаРабот + СуммаЗапчастей, ВалютаПечатногоДокумента);
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь.Сотрудник) Тогда
		ОбластьМакета.Параметры.МастерПолноеНаименование = "/"
			+ ТекущийПользователь.Сотрудник.Наименование
			+ "/";
	Иначе
		ОбластьМакета.Параметры.МастерПолноеНаименование = "/________________________/";
	КонецЕсли;
	
	НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
		ТабличныйДокумент,
		ОбластьМакета,
		, , 
		НомерСтраницы,
		,
		Неопределено
	);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли