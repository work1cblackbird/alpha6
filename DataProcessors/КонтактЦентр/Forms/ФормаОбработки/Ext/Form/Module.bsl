
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущийСотрудник = ТекущийПользователь.Сотрудник;
	Элементы.СвязатьСТекущимПользователем.Видимость = НЕ ТекущийСотрудник.Пустая();	
	
	ИспользоватьПочтовыйКлиент = ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент");
	ЗаполнитьДоступныеВидыВходящегоТрафика(ИспользоватьПочтовыйКлиент);
	
	Если ИспользоватьПочтовыйКлиент Тогда
		ЗаполнитьУчетнуюЗаписьОтправкиПисем();
	КонецЕсли;
		
	СоздатьПустоеСобытие();
	
	Если ЗначениеЗаполнено(Параметры.ИнформацияОЗвонке) Тогда
		
		ЗаполнитьПоИнформацииОЗвонке(Параметры.ИнформацияОЗвонке);
		
	КонецЕсли;
	
	ЗаполнитьПараметрыПоУмолчанию();
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	                              	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ТребуетсяВопросПередПерезаполением());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПередачаЗвонкаВКонтактЦентр" И Источник = "СофтФон" Тогда
		
		ОбработкаОповещенияПередачаЗвонкаВКонтактЦентр(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	// Производим сохранение параметров отображения
	Настройки.Вставить("ВидимостьСкриптаРазговора", ВидимостьСкриптаРазговора);
	Настройки.Вставить("ПодразделениеКомпании",     ?(ЗначениеЗаполнено(ПодразделениеКомпании), ПодразделениеКомпании, ПоследнееПодразделениеКомпании));
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Покажем скрипт разговора если ранее была сохранена ее настройка отображения
	Если Настройки.Получить("ВидимостьСкриптаРазговора") = Неопределено
		 ИЛИ Настройки.Получить("ВидимостьСкриптаРазговора") Тогда
		ВидимостьСкриптаРазговора                            = Истина;
		Элементы.УстановитьВидимостьСкриптаРазговоров.Пометка = Истина;
		Элементы.ГруппаСкриптРазговора.Видимость             = Истина;
	КонецЕсли;
	
	ПодразделениеКомпании = Настройки.Получить("ПодразделениеКомпании");
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	КонецЕсли;
	ПодразделениеКомпанииПриИзмененииНаСервере();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ИнформацияОКлиенте = "";
	
	// Заполним КИ контрагента
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Телефон = УправлениеКонтактнойИнформациейАльфаАвто.ТелефонДляМаски(Контрагент);
		АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.
				КонтактнаяИнформацияОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ТекущаяДатаСеанса());
		
		СформироватьИнформациюОКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
	СоздатьПустоеСобытие();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРедактирования = УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НовыеПараметрыРедактирования();
	ПараметрыРедактирования.ПутьКДанным = "Телефон";
	УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НачатьРедактированиеКонтактнойИнформации(
		ЭтотОбъект,
		Элемент.ТекстРедактирования,
		ПараметрыРедактирования
	);
	
КонецПроцедуры

&НаСервере
Процедура ВидВходящегоТрафикаПриИзмененииНаСервере()
	
	// Получим таблицу статусов событий по виду события
	СформироватьТаблицуСтатусыВходящегоКонтакта();
	
	УдалитьСтарыеПоляАнкеты();
	ФормированиеНовогоКонтакта(Ложь);
	ФормированиеНовогоПисьма(Ложь);
	
	СписокВыбора = Элементы.СтатусВходящегоЗвонка.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ВидВходящегоТрафика = Справочники.ВидыСобытий.ЭлектронноеОбращение Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЭлектронныеПисьма;
		СписокВыбора = Элементы.СтатусВходящегоПисьма.СписокВыбора;
		СписокВыбора.Очистить();
		// Сначала заполним статусы без выбора менеджера
		НайденныеСтроки = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("ВыборМенеджера", Ложь));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(ТекущаяСтрока.Статус);
		КонецЦикла;
		
		// Заполним статусы, которые используются при выборе менеджера
		НайденныеСтроки = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("ВыборМенеджера", Истина));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(ТекущаяСтрока.Статус);
		КонецЦикла;
		
		ОтборПоРассмотренным = 0;
		СформироватьОтборПоРассмотренным();
		Элементы.УстановитьВидимостьСкриптаРазговоров.Доступность = Ложь;
		Возврат;
	ИначеЕсли ВидВходящегоТрафика = Справочники.ВидыСобытий.ВходящийЗвонок Тогда
		// Заполним статусы без выбора менеджера
		НайденныеСтроки = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("ВыборМенеджера", Ложь));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(ТекущаяСтрока.Статус);
		КонецЦикла;
		
		// Заполним статусы, которые используются при выборе менеджера
		СписокВыбораСтатус = Элементы.СписокПерезвоновСтатус.СписокВыбора;
		СписокВыбораСтатус.Очистить();
		НайденныеСтроки = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("ВыборМенеджера", Истина));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СписокВыбораСтатус.Добавить(ТекущаяСтрока.Статус);
		КонецЦикла;
		
		Элементы.ГруппаСтатусПереадресации.Видимость = Истина;
		Элементы.Менеджер.Видимость = Ложь;
		Элементы.СписокПерезвонов.Видимость = Истина;
		Элементы.НадписьОтступМенеджер.Видимость = Ложь;
		Элементы.Менеджер.Видимость = Ложь;
		Элементы.Переместить(Элементы.Телефон, Элементы.ГруппаДанныеКлиента, Элементы.ГруппаПредставлениеКлиента);
		
		Элементы.МаркетинговаяПрограмма.Видимость = Ложь;
		Элементы.ГруппаСкриптРазговора.Видимость = ВидимостьСкриптаРазговора;
		Элементы.УстановитьВидимостьСкриптаРазговоров.Доступность = Истина;
	ИначеЕсли ВидВходящегоТрафика = Справочники.ВидыСобытий.Встреча Тогда
		// Сначала заполним статусы без выбора менеджера
		НайденныеСтроки = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("ВыборМенеджера", Ложь));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(ТекущаяСтрока.Статус);
		КонецЦикла;
		
		// Заполним статусы, которые используются при выборе менеджера
		НайденныеСтроки = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("ВыборМенеджера", Истина));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			Если ТекущаяСтрока.Статус = Справочники.СтатусыСобытий.ПереданМенеджеру Тогда
				СписокВыбора.Добавить(ТекущаяСтрока.Статус, "Передан");
			Иначе
				СписокВыбора.Добавить(ТекущаяСтрока.Статус);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ГруппаСтатусПереадресации.Видимость = Истина;
		Элементы.Менеджер.Видимость = Истина;
		Элементы.СписокПерезвонов.Видимость = Ложь;
		Элементы.НадписьОтступМенеджер.Видимость = Ложь;
		Элементы.Переместить(Элементы.Телефон, Элементы.ГруппаДанныеКлиента, Элементы.АдресЭлектроннойПочты);
		
		Элементы.МаркетинговаяПрограмма.Видимость = Ложь;
		Элементы.ГруппаСкриптРазговора.Видимость = ВидимостьСкриптаРазговора;
		Элементы.УстановитьВидимостьСкриптаРазговоров.Доступность = Истина;
	ИначеЕсли ВидВходящегоТрафика = Справочники.ВидыСобытий.Прочее Тогда
		Элементы.ГруппаСтатусПереадресации.Видимость = Ложь;
		Элементы.ГруппаТелоАнкеты.Видимость = Ложь;
		Элементы.Переместить(Элементы.Телефон, Элементы.ГруппаДанныеКлиента, Элементы.АдресЭлектроннойПочты);
		Элементы.Менеджер.Видимость = Истина;
		Элементы.НадписьОтступМенеджер.Видимость = Истина;
		Элементы.МаркетинговаяПрограмма.Видимость = Истина;
		Элементы.ГруппаСкриптРазговора.Видимость = Ложь;
		Элементы.УстановитьВидимостьСкриптаРазговоров.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВходящегоКонтакта;
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		ПодразделениеКомпанииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ВидВходящегоТрафикаПриИзмененииНаСервере()

&НаКлиенте
Процедура СписокПерезвоновСтатусПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПерезвонов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отменим отметрки об уведмлении
	Для Каждого ТекущаяСтрока Из СписокПерезвонов Цикл
		ТекущаяСтрока.Уведомлять = Ложь;
	КонецЦикла;
	
	СтатусСоединен = ПредопределенноеЗначение("Справочник.СтатусыСобытий.Соединен");
	
	Если ТекущиеДанные.Статус = СтатусСоединен Тогда
		
		// Очистим статусы ранее описанные
		Для Каждого ТекущаяСтрока Из СписокПерезвонов Цикл
			Если ТекущаяСтрока.Статус = СтатусСоединен Тогда
				ТекущаяСтрока.Статус = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.Статус = СтатусСоединен;
		Менеджер = ТекущиеДанные.Менеджер;
		
		Элементы.СписокПерезвоновСтатус.ТолькоПросмотр     = Истина;
		Элементы.СписокПерезвоновУведомлять.ТолькоПросмотр = Истина;
		Элементы.ПодразделениеКомпании.ТолькоПросмотр      = Истина;
		
	Иначе
		
		// Установим для текущей измененной уведомлять
		Если СписокПерезвонов.НайтиСтроки(Новый Структура("Статус", СтатусСоединен)).Количество() = 0 Тогда
			ТекущиеДанные.Уведомлять = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписокПерезвоновСтатусПриИзменении()

&НаКлиенте
Процедура ВидВходящегоТрафикаПриИзменении(Элемент)
	
	ВидВходящегоТрафикаПриИзмененииНаСервере();
	
КонецПроцедуры // ВидВходящегоТрафикаПриИзменении()

&НаСервере
Процедура ПодразделениеКомпанииПриИзмененииНаСервере()
	
	СписокСотрудников.Очистить();
	ДокументОпрос = Неопределено;
	ОчиститьПоляАнкеты();
	СкриптРазговора.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(""));
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		
		НачалоПериода = ТекущаяДатаСеанса();
		ОкончаниеПериода = КонецДня(НачалоПериода);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПодразделенияКомпании.Ссылка,
		               |	ПодразделенияКомпании.ГрафикРаботы КАК ГрафикРаботыПодразделения
		               |ПОМЕСТИТЬ СписокПодразделений
		               |ИЗ
		               |	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		               |ГДЕ
		               |	ПодразделенияКомпании.Ссылка В ИЕРАРХИИ(&ПодразделенияКомпании)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Сотрудники.Ссылка КАК Сотрудник,
		               |	Сотрудники.Должность,
		               |	Сотрудники.ГрафикРаботы,
		               |	СписокПодразделений.ГрафикРаботыПодразделения
		               |ПОМЕСТИТЬ СписокСотрудников
		               |ИЗ
		               |	СписокПодразделений КАК СписокПодразделений
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		               |		ПО (СписокПодразделений.Ссылка = Сотрудники.ПодразделениеКомпании
		               |				И Сотрудники.ФлагУволен = ЛОЖЬ
		               |				И Сотрудники.ПометкаУдаления = ЛОЖЬ)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СписокСотрудников.Сотрудник КАК Менеджер,
		               |	СписокСотрудников.Должность,
		               |	СотрудникиКонтактнаяИнформация.НомерТелефона КАК Телефон,
		               |	СписокСотрудников.ГрафикРаботы,
		               |	СписокСотрудников.ГрафикРаботыПодразделения
		               |ИЗ
		               |	СписокСотрудников КАК СписокСотрудников
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
		               |		ПО СписокСотрудников.Сотрудник = СотрудникиКонтактнаяИнформация.Ссылка
		               |			И (СотрудникиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))";
		Запрос.УстановитьПараметр("ПодразделенияКомпании", ПодразделениеКомпании);
		
		ТаблицаСотрудниковПодразделений = Запрос.Выполнить().Выгрузить();
		
		СтруктураПоиска = Новый Структура("Менеджер");
		
		// Сначала заполним с основными телефонами
		Для Каждого ТекущаяСтрока Из ТаблицаСотрудниковПодразделений Цикл
			
			СтруктураПоиска.Менеджер = ТекущаяСтрока.Менеджер;
			Если СписокСотрудников.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверим на рабочий день сотрудника по подразделению
			Если ЗначениеЗаполнено(ТекущаяСтрока.ГрафикРаботыПодразделения) Тогда
				ВыходныеДни = Новый Структура;
				ВыходныеДни.Вставить("Суббота",     Ложь);
				ВыходныеДни.Вставить("Воскресенье", Ложь);
				ТекущийГрафикРаботы = Справочники.ГрафикиРаботы.ПолучитьГрафик(ТекущаяСтрока.ГрафикРаботыПодразделения, НачалоПериода, ОкончаниеПериода, ВыходныеДни);
				Если ТекущийГрафикРаботы.Количество() > 0 Тогда
					Если ТекущийГрафикРаботы[0].ВидИнтервала <> Справочники.ВидыИнтервалов.Работа Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Получим график сотрудника, если он есть
			Если ЗначениеЗаполнено(ТекущаяСтрока.ГрафикРаботы) Тогда
				ВыходныеДни = Новый Структура;
				ВыходныеДни.Вставить("Суббота",     Ложь);
				ВыходныеДни.Вставить("Воскресенье", Ложь);
				ТекущийГрафикРаботы = Справочники.ГрафикиРаботы.ПолучитьГрафик(ТекущаяСтрока.ГрафикРаботы, НачалоПериода, ОкончаниеПериода, ВыходныеДни);
				Если ТекущийГрафикРаботы.Количество() > 0 Тогда
					Если ТекущийГрафикРаботы[0].ВидИнтервала <> Справочники.ВидыИнтервалов.Работа Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = СписокСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
		КонецЦикла;
		
		СписокСотрудников.Сортировать("Менеджер");
		
		// Сформируем значения опросов для телефонного
		Если ВидВходящегоТрафика = Справочники.ВидыСобытий.ВходящийЗвонок Тогда
			ДокументОпрос = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОпросКоллЦентр, ПодразделениеКомпании);
			СкриптРазговораПодразделения = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СкриптРазговораКоллЦентра, ПодразделениеКомпании);
		ИначеЕсли ВидВходящегоТрафика = Справочники.ВидыСобытий.Встреча Тогда
			ДокументОпрос = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОпросРесепшен,   ПодразделениеКомпании);
			СкриптРазговораПодразделения = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СкриптРазговораВизитовКлиентов, ПодразделениеКомпании);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СкриптРазговораПодразделения) Тогда
			СкриптРазговора = СкриптРазговораПодразделения.Содержание.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПоляАнкеты();
	
КонецПроцедуры // ПодразделениеКомпанииПриИзмененииНаСервере()

&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	ПодразделениеКомпанииПриИзмененииНаСервере();
	
	// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
	ЭтотОбъект.СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

&НаКлиенте
Процедура СписокСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийМенеджер = ДайМенеджераИзТекущейСтроки();
	УстановитьТекущегоМенеджера(ТекущийМенеджер);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПерезвоновУведомлятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПерезвонов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ТекущиеДанные.Уведомлять Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = Элементы.СписокПерезвонов.ТекущаяСтрока;
	
	Для Каждого ТекущаяСтрока Из СписокПерезвонов Цикл
		Если ТекущаяСтрока.ПолучитьИдентификатор() = НомерСтроки Тогда
			ТекущаяСтрока.Уведомлять = Истина;
			Менеджер = ТекущиеДанные.Менеджер;
		Иначе
			ТекущаяСтрока.Уведомлять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СписокСотрудниковВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Поиск контрагента".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПоискКонтрагента(Команда)
	
	// Телефон хранится без доп символов, уберем их для поиска
	НомерТелефона = "";
	СтрокаПоиска = "0123456789";
	
	Для Позиция = 1 По СтрДлина(Телефон) Цикл
		
		Символ = Сред(Телефон, Позиция, 1);
		Результат = СтрНайти(СтрокаПоиска, Символ);
		
		Если Результат = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерТелефона = НомерТелефона + Символ;
		
	КонецЦикла;
	
	Если СтрДлина(Клиент) < 5 И СтрДлина(Клиент) <> 0 Тогда
		
		ПоказатьПредупреждение(
			,
			Нстр("ru = 'Для поиска контрагента по наименованию необходимо ввести минимум 5 символов.'")
		);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если СтрДлина(Клиент) >= 5 Тогда
		
		ПараметрыФормы.Вставить("ОтборПоНаименованию", Клиент);
		
	ИначеЕсли ЗначениеЗаполнено(НомерТелефона) Тогда
		
		ПараметрыФормы.Вставить("ОтборНомерТелефона", НомерТелефона);
		
	ИначеЕсли ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		
		ПараметрыФормы.Вставить("ОтборEmail", АдресЭлектроннойПочты);
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Контрагенты.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("Подключаемый_ВыборКонтагента", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКонтрагентаПоЭлПочте(Команда)
	
	Если Не ЗначениеЗаполнено(ОтправительПисьма) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не указан адрес электронной почты отправителя.'"),
			ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ОтборEmail", ОтправительПисьма);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ВыборКонтагента", ЭтотОбъект);
	
	ФормаВыбора = ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Завершить контакт".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Завершить(Команда)
	
	Результат = ЗавершитьКонтакт(РежимЗаписиДокумента.Проведение);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ВыводОповещения = Новый Структура;
		ВыводОповещения.Вставить("Использование", Истина);
		ВыводОповещения.Вставить("Заголовок",     НСтр("ru = 'Создан документ событие:'"));
		ВыводОповещения.Вставить("Ссылка",        ПолучитьНавигационнуюСсылку(Результат));
		ВыводОповещения.Вставить("Текст",         Строка(Результат));
		ВыводОповещения.Вставить("Картинка",      БиблиотекаКартинок.Информация32);
		
		УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(
			ЭтотОбъект,
			Новый Структура("ВыводОповещения", ВыводОповещения)
		);
		
		Элементы.Обработать.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Завершить обработку письма".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ЗавершитьПисьмо(Команда)
	
	Событие = СформироватьСобытиеПисьма(РежимЗаписиДокумента.Проведение);
	
	РазвернутьДеревоПапок();
	
	Если Событие <> Неопределено Тогда
		СоздатьПустоеСобытие();
		Элементы.ОбработатьПисьмо.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьПисьмо()

&НаКлиенте
Процедура ОбработатьПисьмо(Команда)
	
	Событие = СформироватьСобытиеПисьма(РежимЗаписиДокумента.Запись);
	КомандаОбработать(Событие);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Завершить обработку письма".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВидимостьСкриптаРазговоров(Команда)
	
	ВидимостьСкриптаРазговора                           = НЕ ВидимостьСкриптаРазговора;
	Элементы.УстановитьВидимостьСкриптаРазговоров.Пометка = ВидимостьСкриптаРазговора;
	Элементы.ГруппаСкриптРазговора.Видимость             = ВидимостьСкриптаРазговора;
	
	// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
	ЭтотОбъект.СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры // ВидимотьСкриптаРазговоров()

// Процедура установки отбора по письмам, кторые не были еще рассмотрены
//
&НаСервере
Процедура СформироватьОтборПоРассмотренным()
	
	СписокЭлектронныхПисем.Отбор.Элементы.Очистить();
	
	Если ОтборСпискаРассмотрены = 0 Тогда
		
		ЭлементОтбора = СписокЭлектронныхПисем.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(
										Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Рассмотрено");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяПапка) Тогда
		
		ПапкиПриАктивизацииСтрокиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтборПоРассмотренным()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ОтборСпискаРассмотрены".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ОтборСпискаРассмотреныПриИзменении(Элемент)
	
	СформироватьОтборПоРассмотренным();
	
КонецПроцедуры // ОтборСпискаРассмотреныПриИзменении()

// Обработчик события нажатия кнопки "Очистить список сотрудников".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОчиститьСписокСотрудников(Команда)
	
	СписокПерезвонов.Очистить();
	Менеджер = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтатусВходящегоЗвонка",
		"ТолькоПросмотр",
		Ложь
	);
	
КонецПроцедуры // ОчиститьСписокСотрудников()

&НаКлиенте
Процедура Обработать(Команда)
	
	Событие = СформироватьСобытие(РежимЗаписиДокумента.Запись);
	КомандаОбработать(Событие);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСТекущимПользователем(Команда)
	
	УстановитьТекущегоМенеджера(ТекущийСотрудник, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработкаОповещенияПередачаЗвонкаВКонтактЦентр(ИнформацияОЗвонке)
	
	ФормированиеНовогоКонтакта();
	СоздатьПустоеСобытие();
	ЗаполнитьПоИнформацииОЗвонке(ИнформацияОЗвонке);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВидыВходящегоТрафика(ИспользоватьПочтовыйКлиент)
	
	Администратор = ПравоДоступа("Администрирование", Метаданные);
	СписокВыбора = Элементы.ВидВходящегоТрафика.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Администратор ИЛИ ПраваИНастройкиПользователя.Значение("РазрешитьФиксироватьЗвонкиКоллЦентра") Тогда
		
		СписокВыбора.Добавить(Справочники.ВидыСобытий.ВходящийЗвонок, "Колл-центр");
		
	КонецЕсли;
	
	Если Администратор ИЛИ ПраваИНастройкиПользователя.Значение("РазрешитьФиксироватьВизитыКлиентов") Тогда
		
		СписокВыбора.Добавить(Справочники.ВидыСобытий.Встреча, НСтр("ru = 'Визиты клиентов'"));
		
	КонецЕсли;
	
	Если
		(Администратор ИЛИ ПраваИНастройкиПользователя.Значение("РазрешитьФиксироватьВходящиеЭлектронныеПисьма"))
		И ИспользоватьПочтовыйКлиент
	Тогда
		
		МассивУчетныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(Пользователи.ТекущийПользователь());
		СписокУчетныхЗаписей.ЗагрузитьЗначения(МассивУчетныхЗаписей);
		ЗаполнитьДеревоПапок();
		
		// Если нет доступных учетных записей, то нет смысла выводить страницу.
		Если Папки.ПолучитьЭлементы().Количество() > 0 Тогда
			
			СписокВыбора.Добавить(Справочники.ВидыСобытий.ЭлектронноеОбращение, "Входящая почта");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Администратор ИЛИ ПраваИНастройкиПользователя.Значение("РазрешитьФиксироватьПрочиеОбращения") Тогда
		
		СписокВыбора.Добавить(Справочники.ВидыСобытий.Прочее, НСтр("ru = 'Прочие обращения'"));
		
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru='У данного пользователя нет прав на использование ""Контакт-центра"".'");
		
	КонецЕсли;
	
	Элементы.ВидВходящегоТрафика.Видимость = СписокВыбора.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетнуюЗаписьОтправкиПисем()
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки = ИСТИНА"
	);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		УчетнаЗаписьОтправкаПисем = РезультатЗапроса.Выгрузить()[0].Ссылка;
		
	КонецЕсли;
	
	Элементы.ПоЭлектроннойПочте.ТолькоПросмотр = НЕ ЗначениеЗаполнено(УчетнаЗаписьОтправкаПисем);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоИнформацииОЗвонке(ИнформацияОЗвонке)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИнформацияОЗвонке);
	
	Если ЗначениеЗаполнено(ВидВходящегоТрафика) Тогда
		
		ВидВходящегоТрафикаПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СформироватьИнформациюОКлиенте();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(ВидВходящегоТрафика) Тогда
		
		ВидВходящегоТрафика = Элементы.ВидВходящегоТрафика.СписокВыбора[0].Значение;
		ВидВходящегоТрафикаПриИзмененииНаСервере();
		
	КонецЕсли;
	
	ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	ПодразделениеКомпанииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбработать(Событие)
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Клиент",
		?(ЗначениеЗаполнено(Контрагент), Контрагент, Клиент));
	ПараметрыФормы.Вставить("НомерТелефона", Телефон);
	ПараметрыФормы.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	ПараметрыФормы.Вставить("ДокументОснование", Событие);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ДобавлятьНовогоКонтрагента", Истина);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаВыбораДокумента",
		ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ПоискКлиентовИДокументов.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаСервере
Процедура СоздатьПустоеСобытие()
	
	НовыйДокумент = Документы.Событие.СоздатьДокумент();
	НовыйДокумент.Заполнить(Неопределено);
	
	ЗначениеВРеквизитФормы(НовыйДокумент, "ДокументСобытие");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораДокумента(РезультатПодбора, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораДокументаНаСервере(РезультатПодбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДокументаНаСервере(РезультатПодбора)
	
	НайденныйДокумент = ПолучитьЗначениеПараметраСтруктуры(РезультатПодбора, "Документ", Неопределено);
	
	Если НЕ НайденныйДокумент = Неопределено Тогда
		СвязанныйДокумент = НайденныйДокумент;
	Иначе
		Возврат;
	КонецЕсли;
	
	Событие = РеквизитФормыВЗначение("ДокументСобытие");
	ОснованиеСобытия = Событие.ДокументОснование;
	
	Если ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ТелефонныйЗвонок")
			ИЛИ ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			ИЛИ ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйДокумент, "ВзаимодействиеОснование");
	Иначе
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйДокумент, "ДокументОснование");
	КонецЕсли;
	
	Если ОснованиеДокумента = Событие.Ссылка Тогда
		Событие.ДокументРезультат = СвязанныйДокумент;
	Иначе
		Событие.ДокументОснование = СвязанныйДокумент;
	КонецЕсли;  
	
	Если Событие.ДокументОснование <> ОснованиеСобытия И (
		ТипЗнч(ОснованиеСобытия) = Тип("ДокументСсылка.ТелефонныйЗвонок"))  Тогда 
		
		ОснованиеОбъект = ОснованиеСобытия.ПолучитьОбъект();
		Попытка
			ОснованиеОбъект.ВзаимодействиеОснование = Событие.Ссылка; 
			ОснованиеОбъект.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Событие.ВидСобытия = Справочники.ВидыСобытий.ЭлектронноеОбращение Тогда
		Элементы.ОбработатьПисьмо.Доступность = Ложь;
	КонецЕсли;
	
	ВыбранныйКонтрагент = ПолучитьЗначениеПараметраСтруктуры(РезультатПодбора, "Клиент", Неопределено);
	
	Если (НЕ ЗначениеЗаполнено(ВыбранныйКонтрагент)
		ИЛИ НЕ ТипЗнч(ВыбранныйКонтрагент) = Тип("СправочникСсылка.Контрагенты"))
		И ЗначениеЗаполнено(НайденныйДокумент)
		И ЕстьРеквизит(НайденныйДокумент, "Контрагент") Тогда
		ВыбранныйКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныйДокумент, "Контрагент");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ВыбранныйКонтрагент)
		И ТипЗнч(ВыбранныйКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Контрагент = ВыбранныйКонтрагент;
		КонтрагентПриИзмененииНаСервере();
		Событие.Контрагент = ВыбранныйКонтрагент;
		Документы.Событие.КонтрагентПриИзменении(Событие);
	КонецЕсли;
	
	Попытка
		Событие.Записать(РежимЗаписиДокумента.Проведение);
		ФормированиеНовогоКонтакта(, Истина);
		ТекущийТелефонныйЗвонок = Неопределено;
		СоздатьПустоеСобытие();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не удалось зафиксировать входящий контакт.'"));
	КонецПопытки;
	
КонецПроцедуры

// Процедура подготовки к заполнению нового контакта
//
&НаСервере
Процедура ФормированиеНовогоКонтакта(ОчищатьВсеПоля = Истина, ЗавершениеКонтакта = Ложь)
	
	Если ОчищатьВсеПоля Тогда
		Клиент = "";
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Телефон = "";
		АдресЭлектроннойПочты = "";
		
		СтатусВходящегоКонтакта = Неопределено;
		
		МаркетинговаяПрограмма = Неопределено;
		ПервичныйКонтакт        = Ложь;
		ИсточникИнформации     = Неопределено;
		
		РезультатКонтакта.Удалить();
		ЦельКонтакта.Удалить();
		ИнформацияОКлиенте = "";
		СписокПерезвонов.Очистить();
		
		Если НЕ ЗавершениеКонтакта Тогда
			Менеджер = Неопределено;
			ПодразделениеКомпании = Неопределено;
			СписокСотрудников.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СтатусВходящегоЗвонка.ТолькоПросмотр      = Ложь;
	Элементы.СписокПерезвоновСтатус.ТолькоПросмотр     = Ложь;
	Элементы.СписокПерезвоновУведомлять.ТолькоПросмотр = Ложь;
	Элементы.ПодразделениеКомпании.ТолькоПросмотр      = Ложь;
	
	// Отправка уведомлений
	ПоЭлектроннойПочте      = Ложь;
	СформироватьНапоминание = Ложь;
	ДатаКонтакта           = ТекущаяДатаСеанса();
	
	СкриптРазговора.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(""));
	
	ОчиститьПоляАнкеты();
	
	ДокументАнкета = Неопределено;   
	
КонецПроцедуры

// Процедура для удаления элементов с формы, которые были прорисованы для анкеты
//
&НаСервере
Процедура ОчиститьПоляАнкеты()
	
	// Очистить поля анкеты
	Для Каждого ТекущийЭлементАнкеты Из Элементы.ГруппаТелоАнкеты.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекущийЭлементАнкеты) <> Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторВопроса = СтрЗаменить(ТекущийЭлементАнкеты.Имя, "_Группа", "");
		Если ЕстьРеквизит(ЭтотОбъект, ИдентификаторВопроса) Тогда
			ЭтотОбъект[ИдентификаторВопроса] = Неопределено;
		КонецЕсли;
		// Пройдемся по ответам
		НомерОтвета = 1;
		ШаблонИмениОтвета = "%1_Ответ_%2";
		КомментарийОтвета = "%1_Комментарий_%2";
		ИмяТекущегоОтвета = СтрШаблон(ШаблонИмениОтвета, ИдентификаторВопроса, Формат(НомерОтвета, "ЧГ="));
		Пока ЕстьРеквизит(ЭтотОбъект, ИмяТекущегоОтвета) Цикл
			ЭтотОбъект[ИмяТекущегоОтвета] = Неопределено;
			ИмяТекущегоКомментарияОтвета = СтрШаблон(КомментарийОтвета, ИдентификаторВопроса, Формат(НомерОтвета, "ЧГ="));;
			Если ЕстьРеквизит(ЭтотОбъект, ИмяТекущегоКомментарияОтвета) Тогда
				ЭтотОбъект[ИмяТекущегоКомментарияОтвета] = Неопределено;
			КонецЕсли;
			НомерОтвета = НомерОтвета + 1;
			ИмяТекущегоОтвета = СтрШаблон(ШаблонИмениОтвета, ИдентификаторВопроса, Формат(НомерОтвета, "ЧГ="));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьПоляАнкеты()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ВыборКонтагента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(РезультатОповещения) Тогда
		
		Контрагент = РезультатОповещения;
		КонтрагентПриИзменении(Элементы.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ВыборКонтагента()

// Процедура создания и отправки электронного письма
//
&НаСервере
Процедура ОтправитьЭлектронноеПисьмо(МенеджерУведомления, Событие)
	
	Если НЕ ПоЭлектроннойПочте Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(МенеджерУведомления) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПодразделенияКомпании;
		ТекущийШаблонСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерУведомления, "ШаблонСообщения");
	Иначе
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
		ТекущийШаблонСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерУведомления.ПодразделениеКомпании, "ШаблонСообщения");
	КонецЕсли;
	
	АдресаПолучателей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(МенеджерУведомления, ВидКИ, ТекущаяДатаСеанса());
	
	ПроверкаАдресовЭлектроннойПочты = Истина;
	
	Если НЕ ЗначениеЗаполнено(АдресаПолучателей) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для отправки электронного письма не указан адрес получателя.'")
		);
		ПроверкаАдресовЭлектроннойПочты = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверкаАдресовЭлектроннойПочты Тогда
		Возврат;
	КонецЕсли;
	
	// создадим документ
	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	НовоеЭлектронноеПисьмо.Заполнить(Неопределено);
	НовоеЭлектронноеПисьмо.УстановитьНовыйНомер();
	НовоеЭлектронноеПисьмо.ОбменДанными.Загрузка    = Истина;
	НовоеЭлектронноеПисьмо.ХозОперация              = Справочники.ХозОперации.ЭлектронноеПисьмоИсходящее;
	НовоеЭлектронноеПисьмо.УчетнаяЗапись            = УчетнаЗаписьОтправкаПисем;
	НовоеЭлектронноеПисьмо.ОтправительПредставление = УчетнаЗаписьОтправкаПисем.АдресЭлектроннойПочты;
	НовоеЭлектронноеПисьмо.ТипТекста                = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	НовоеЭлектронноеПисьмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовоеЭлектронноеПисьмо.СтатусПисьма             = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	НовоеЭлектронноеПисьмо.Дата                     = ТекущаяДатаСеанса();
	
	МассивПолучателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресаПолучателей, ";");
	
	Для Каждого ТекущийАдрес Из МассивПолучателей Цикл
		Получатель = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
		Получатель.Адрес          = ТекущийАдрес;
		Получатель.Контакт        = ТекущийАдрес;
		Получатель.Представление  = ТекущийАдрес;
	КонецЦикла;
		
	СоответствиеПараметровШаблона = ПолучитьСоответствиеПараметровДляШаблоновСообщений();
	СоответствиеПараметровШаблона.Вставить("Событие", Событие);
	
	ВставляемыеЗначения = Новый Соответствие;
	ВставляемыеЗначения.Вставить(Обработки.КонтактЦентр.ИмяПредметаШаблонаСообщения(), СоответствиеПараметровШаблона);
	
	ШаблонСообщения = ШаблоныСообщений.ПараметрыШаблона(ТекущийШаблонСообщения);
	
	НовоеЭлектронноеПисьмо.Тема = ШаблоныСообщений.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(ШаблонСообщения.Тема,
		ВставляемыеЗначения);
		
	СписокАдресатов = ВзаимодействияКлиентСервер.
		ПолучитьПредставлениеСпискаАдресатов(НовоеЭлектронноеПисьмо.ПолучателиПисьма, Ложь);
	НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = СписокАдресатов;
	
	НовоеЭлектронноеПисьмо.Текст = ШаблоныСообщений.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(ШаблонСообщения.Текст,
		ВставляемыеЗначения);
	
	Попытка
		НовоеЭлектронноеПисьмо.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось сформировать исходящее электронное письмо.'")
		);
	КонецПопытки;
	
КонецПроцедуры // ОтправитьЭлектронноеПисьмо()

// Функция получения пользователя сотрудника
//
&НаСервере
Функция ПолучитьПользователяСотрудника(СотрудникПоиска)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Пользователи.Ссылка КАК Пользователь
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Сотрудник = &Сотрудник
	               |	И Пользователи.ПометкаУдаления = ЛОЖЬ
	               |	И Пользователи.Недействителен = ЛОЖЬ";
	Запрос.УстановитьПараметр("Сотрудник", СотрудникПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПользователяСотрудника()

// Процедура создания и отправки напоминания пользователю
//
&НаСервере
Процедура ОтправитьНапоминаниеСотруднику(МенеджерУведомления, Событие)
	
	Если НЕ СформироватьНапоминание Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МенеджерУведомления) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран менеджер. Напоминание не сформировано.'"));
		Возврат;
		
	КонецЕсли;
	
	ПользовательМенеджера = ПолучитьПользователяСотрудника(МенеджерУведомления);
	
	Если НЕ ЗначениеЗаполнено(ПользовательМенеджера) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для данного менеджера не заведен пользователь. Напоминание не сформировано.'")
		);
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Событие);
	НаборЗаписей.Очистить();
	
	ЧастиСообщения = Новый Массив();
	ЧастиСообщения.Добавить(
		СтрШаблон(
			НСтр("ru = 'Необходимо связаться с клиентом %1'"),
			?(ЗначениеЗаполнено(Контрагент), Контрагент, Клиент)
		)
	);
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		
		ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Телефон: %1'"), Телефон));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		
		ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru = 'E-mail: %1'"), АдресЭлектроннойПочты));
		
	КонецЕсли;
	
	ЧастиСообщения.Добавить(
		СтрШаблон(
			НСтр("ru = 'Дата контакта: %1 %2'"),
			Формат(ДатаКонтакта, "ДЛФ=D"),
			Формат(ДатаКонтакта, "ДФ=ЧЧ:мм")
		)
	);
	
	НоваяЗапись                                   = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь                      = ПользовательМенеджера;
	НоваяЗапись.Автор                             = Пользователи.ТекущийПользователь();
	НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
	НоваяЗапись.ВремяСобытия                      = ТекущаяДатаСеанса();
	НоваяЗапись.СрокНапоминания                   = ДатаКонтакта;
	НоваяЗапись.Описание                          = СтрСоединить(ЧастиСообщения, Символы.ПС);
	НоваяЗапись.ПредставлениеИсточника            = НСтр("ru = 'Контакт-центр'");
	НоваяЗапись.Источник                          = Событие;
	НоваяЗапись.Расписание                        = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
	НоваяЗапись.Активность                        = Истина;
	НоваяЗапись.ДатаСоздания                      = ТекущаяДатаСеанса();
	НоваяЗапись.ИнтервалВремениНапоминания        = 0;
	
	Попытка
		
		НаборЗаписей.Записать(Истина);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При создании напоминания возникла ошибка.'"));
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура проверки заполнения полей для того чтобы зафиксировать входящий контакт
//
&НаСервере
Процедура ПроверкаЗаполненияРеквизитов(Отказ)
	
	// Обязательные поля к заполнению по типу входящего трафика
	Если ВидВходящегоТрафика = Справочники.ВидыСобытий.Встреча Тогда
		Если НЕ ЗначениеЗаполнено(Клиент) И НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не укзан клиент.'"),, "Клиент",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Статус входящего трафика
	Если ВидВходящегоТрафика = Справочники.ВидыСобытий.Прочее Тогда
		Если НЕ ЗначениеЗаполнено(ПодразделениеКомпании) И НЕ ЗначениеЗаполнено(Менеджер) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Необходимо выбрать подразделение или менеджера'"),
				,
				,,
				Отказ
			);
		КонецЕсли;
	Иначе
		ВыбранныйСтатус = Неопределено;
		Если ВидВходящегоТрафика = Справочники.ВидыСобытий.ВходящийЗвонок И СписокПерезвонов.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из СписокПерезвонов Цикл
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Статус) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Не для всех выбранных менеджеров установлен статус.'"),
						,
						,,
						Отказ
					);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ВыбранныйСтатус = СписокПерезвонов[СписокПерезвонов.Количество() - 1].Статус;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтатусВходящегоКонтакта) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнен статус входящего контакта.'"),
					,
					"СтатусВходящегоЗвонка",
					,
					Отказ
				);
			Иначе
				ВыбранныйСтатус = СтатусВходящегоКонтакта;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим соответствие статуса и выбора сотрудника
		Если НЕ ВыбранныйСтатус = Неопределено Тогда
			СтрокаСтатуса = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("Статус", ВыбранныйСтатус));
			Если СтрокаСтатуса.Количество() > 0 И СтрокаСтатуса[0].ВыборМенеджера И НЕ ЗначениеЗаполнено(Менеджер) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран менеджер.'"),,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаЗаполненияРеквизитов()

// Функция получения признака заврешения события
//
&НаСервере
Функция ПолучитьСтатусЗавершенияСобытия()
	
	МассивВидовЗавершения = Новый Массив();
	МассивВидовЗавершения.Добавить(Справочники.СтатусыСобытий.Ошибочный);
	МассивВидовЗавершения.Добавить(Справочники.СтатусыСобытий.НеТребуетОбработки);
	МассивВидовЗавершения.Добавить(Справочники.СтатусыСобытий.Ушел);
	
	Возврат НЕ МассивВидовЗавершения.Найти(СтатусВходящегоКонтакта) = Неопределено;
	
КонецФункции // ПолучитьСтатусЗавершенияСобытия()

&НаСервере
Функция ЗаписатьСостоянияСобытия(Событие, ВыборМенеджера)
	
	Отказ = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СтатусыСобытия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Установить(Событие.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(СтатусВходящегоКонтакта) И ВидВходящегоТрафика = Справочники.ВидыСобытий.ВходящийЗвонок Тогда
		Для Каждого ТекущаяСтрока Из СписокПерезвонов Цикл
			НоваяЗапись            = НаборЗаписей.Добавить();
			НоваяЗапись.Период     = ТекущаяСтрока.Период;
			НоваяЗапись.Событие    = Событие.Ссылка;
			НоваяЗапись.Статус     = ТекущаяСтрока.Статус;
			НоваяЗапись.Менеджер   = ТекущаяСтрока.Менеджер;
			НоваяЗапись.ВидСобытия = ВидВходящегоТрафика;
			НоваяЗапись.Автор      = ТекущийПользователь;
		КонецЦикла;
	Иначе
		НоваяЗапись            = НаборЗаписей.Добавить();
		НоваяЗапись.Период     = ТекущаяДатаСеанса();
		НоваяЗапись.Событие    = Событие.Ссылка;
		НоваяЗапись.Статус     = СтатусВходящегоКонтакта;
		НоваяЗапись.Менеджер   = ?(ВыборМенеджера, Менеджер, Неопределено);
		НоваяЗапись.ВидСобытия = ВидВходящегоТрафика;
		НоваяЗапись.Автор      = ТекущийПользователь;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = 'При записи статуса входящего контакта возникла ошибка.'"),
			,
			,,
			Отказ
		);
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции // ЗаписатьСостоянияСобытия()

// Процедура фиксирования результата входящего контакта
//
&НаСервере
Функция ЗафиксироватьВзаимодействие(РежимЗаписи, Предмет = Неопределено)
	
	Событие = РеквизитФормыВЗначение("ДокументСобытие");
	
	Событие.ВидСобытия        = ВидВходящегоТрафика;
	Событие.Результат         = РезультатКонтакта.ПолучитьТекст();
		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Событие.Контрагент = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		Событие.ОбращениеККлиенту = Клиент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) И НЕ ЗначениеЗаполнено(Клиент) Тогда
		Событие.Контрагент = Справочники.Контрагенты.НеОпределен;
	КонецЕсли;
	
	// Заполним дополнительно
	Если ВидВходящегоТрафика = Справочники.ВидыСобытий.ЭлектронноеОбращение Тогда
		
		Событие.ХозОперация           = Справочники.ХозОперации.Событие;
		Событие.ВидСобытия            = Справочники.ВидыСобытий.ЭлектронноеОбращение;
		Событие.Тема                  = Предмет.Тема;
		Событие.Цель                  = Предмет.Текст;
		Событие.АдресЭлектроннойПочты = ОтправительПисьма;
		
		Событие.ДокументОснование = Предмет;
		
	Иначе
		
		Событие.ПервичныйКонтакт = ПервичныйКонтакт;
		Событие.Цель			 = ЦельКонтакта.ПолучитьТекст();

		// Заполним анкету
		Если НЕ Предмет = Неопределено Тогда
			Событие.Анкета = Предмет;
		КонецЕсли;
		
		// Сформируем ХО и тему
		Событие.ХозОперация = Справочники.ХозОперации.Событие;
		Если ВидВходящегоТрафика = Справочники.ВидыСобытий.ВходящийЗвонок Тогда 
			Событие.ВидСобытия = Справочники.ВидыСобытий.ВходящийЗвонок;
			Событие.Тема = НСтр("ru = 'Телефонный звонок'"); 
			Если ЗначениеЗаполнено(ТекущийТелефонныйЗвонок) Тогда
				Событие.ДокументОснование =	ТекущийТелефонныйЗвонок;
			КонецЕсли;
		ИначеЕсли ВидВходящегоТрафика = Справочники.ВидыСобытий.Встреча Тогда
			Событие.ВидСобытия = Справочники.ВидыСобытий.Встреча;
			Событие.Тема = НСтр("ru = 'Визит клиента'");
		ИначеЕсли ВидВходящегоТрафика = Справочники.ВидыСобытий.Прочее Тогда
			Событие.ВидСобытия = Справочники.ВидыСобытий.Прочее;
			Событие.Тема = НСтр("ru = 'Прочее'");
			Событие.МаркетинговаяПрограмма = МаркетинговаяПрограмма;
		КонецЕсли;
		
		// Телефон и адрес эл. почты
		Событие.ПредставлениеТелефона = Телефон;
		Событие.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
		
		Событие.ИсточникИнформации = ИсточникИнформации;
		
	КонецЕсли;
	
	// Получим настройку завершения события по подразделению
	ЗавершатьСобытие = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗавершатьСобытиеПриСоздании,
		ПодразделениеКомпании,
		Ложь);
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) И НЕ ПолучитьСтатусЗавершенияСобытия() Тогда
		Событие.Состояние = ?(ЗавершатьСобытие,
			Перечисления.СостоянияСобытий.Завершено,
			Перечисления.СостоянияСобытий.Запланировано);
			
		Событие.ПодразделениеКомпании = ПодразделениеКомпании;
		Документы.Событие.ПодразделениеКомпанииПриИзменении(Событие);
		Событие.Менеджер = Менеджер;
	Иначе
		Событие.Состояние = Перечисления.СостоянияСобытий.Завершено;
		СобытиеЗавершено = Истина;
	КонецЕсли;
	
	// Зафиксируем подразделение для сохранения.
	ПоследнееПодразделениеКомпании = ПодразделениеКомпании;
	
	Попытка
		Событие.Записать(РежимЗаписи);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не удалось зафиксировать входящий контакт.'"));
		Возврат Неопределено;
	КонецПопытки;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Определим стоит ли указывать менеджера
		НайденныеСтроки  = СтатусыВходящегоКонтакта.НайтиСтроки(Новый Структура("Статус", СтатусВходящегоКонтакта));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВыборМенеджера = НайденныеСтроки[0].ВыборМенеджера;
		Иначе
			ВыборМенеджера = Истина;
		КонецЕсли;
			
		// Сохраним статус события и перезвонов
		Если ЗначениеЗаполнено(Событие.Ссылка)
			И ЗаписатьСостоянияСобытия(Событие, ВыборМенеджера) Тогда
				
			Попытка
				
				Событие.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Возврат Неопределено;
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка при отмене проведения'"),
       			УровеньЖурналаРегистрации.Ошибка,
					,
					,
       			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				
			КонецПопытки;
				
		КонецЕсли;
	
	КонецЕсли;
	
	СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Событие.Ссылка);
	СтруктураРеквизитов.Рассмотрено = Истина;
	РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(Событие.Ссылка, СтруктураРеквизитов);
	
	ЗначениеВРеквизитФормы(Событие, "ДокументСобытие");
	
	Возврат ДокументСобытие.Ссылка;
	
КонецФункции // ЗафиксироватьВзаимодействвие()

// Процедура проверки и регистрации записи входяхего контакта
//
&НаСервере
Функция ЗавершитьКонтакт(РежимЗаписи)
	
	Событие = СформироватьСобытие(РежимЗаписи);
	
	// Формируем уведомления
	Если ЗначениеЗаполнено(Событие) Тогда
		
		Если НЕ СобытиеЗавершено Тогда
			МенеджерУведомления = Неопределено;
			
			Если ВидВходящегоТрафика = Справочники.ВидыСобытий.ВходящийЗвонок Тогда
				НайденныеСтроки = СписокПерезвонов.НайтиСтроки(Новый Структура("Уведомлять", Истина));
				Если НайденныеСтроки.Количество() > 0 Тогда
					МенеджерУведомления = НайденныеСтроки[0].Менеджер;
				КонецЕсли;
			Иначе
				МенеджерУведомления = Менеджер;
			КонецЕсли;
			
			Если НЕ МенеджерУведомления = Неопределено ИЛИ ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
				ОтправитьЭлектронноеПисьмо(?(МенеджерУведомления = Неопределено, ПодразделениеКомпании, МенеджерУведомления), Событие);
			КонецЕсли;
				
			Если НЕ МенеджерУведомления = Неопределено Тогда
				ОтправитьНапоминаниеСотруднику(МенеджерУведомления, Событие);
			КонецЕсли;
		КонецЕсли;
		
		УдалитьСтарыеПоляАнкеты();
		ФормированиеНовогоКонтакта(, Истина);
		СоздатьПустоеСобытие();
		ТекущийТелефонныйЗвонок = Неопределено;
		
		Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
			ПодразделениеКомпанииПриИзмененииНаСервере();
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДокументАнкета) Тогда
		
		// Отменим проведение анкеты если не создано событие
		Попытка
			
			ДокументОбъектАнкеты = ДокументАнкета.ПолучитьОбъект();
			ДокументОбъектАнкеты.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при отмене проведения'"),
       		УровеньЖурналаРегистрации.Ошибка,
				,
				,
       		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции // ЗавершитьКонтакт()

&НаСервере
Функция СформироватьСобытие(РежимЗаписи)
	
	Отказ = Ложь;
	
	ПроверкаЗаполненияРеквизитов(Отказ);
	
	// Запись входящего контакта
	Если НЕ Отказ Тогда
		
		СформированаАнкета = СформироватьАнкету();
		
		// Не удалось сформировать анкету
		Если НЕ СформированаАнкета Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СобытиеЗавершено = Ложь;
		Событие = ЗафиксироватьВзаимодействие(
			РежимЗаписи,
			?(ЗначениеЗаполнено(ДокументАнкета), ДокументАнкета, Неопределено));
		
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции

// Процедура формирования списка статусов входящего контакта по выбранному виду входящего трафика
//
&НаСервере
Процедура СформироватьТаблицуСтатусыВходящегоКонтакта()
	
	СтатусыВходящегоКонтакта.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтатусыСобытийТипыСобытий.Ссылка КАК Статус,
	               |	СтатусыСобытийТипыСобытий.ВыборМенеджера КАК ВыборМенеджера
	               |ИЗ
	               |	Справочник.СтатусыСобытий.ТипыСобытий КАК СтатусыСобытийТипыСобытий
	               |ГДЕ
	               |	СтатусыСобытийТипыСобытий.ВидСобытия = &ВидСобытия";
	Запрос.УстановитьПараметр("ВидСобытия", ВидВходящегоТрафика);
	
	СтатусыВходящегоКонтакта.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // СформироватьТаблицуСтатусыВходящегоКонтакта()

&НаСервере
Функция ПолучитьПерсональныеДанные()
	
	ПерсональныеДанные = "
		|<table style=""font: 10px;"">
		|	<tr>
		|		<td>%1</td>
		|	</tr>
		|	<tr>
		|		<td>%2</td>
		|	</tr>
		|	<tr>
		|		<td>%3</td>
		|	</tr>
		|	<tr>
		|		<td>%4</td>
		|	</tr>
		|</table>";
	
	Если Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
		Наименование = НСтр("ru = 'ФИО: %Имя%'");
	Иначе
		Наименование = НСтр("ru = 'Наименование: %Имя%'");
	КонецЕсли;
	
	Наименование = СтрЗаменить(Наименование, "%Имя%", Контрагент.Наименование);
	
	СтрокаДатаРождения = Неопределено;
	
	Если ЗначениеЗаполнено(Контрагент.ДатаРождения) Тогда
		
		КоличествоСекундВГоду = 31536000;
		Возраст = (ТекущаяДатаСеанса() - Контрагент.ДатаРождения) / КоличествоСекундВГоду;
		Возраст = Цел(Возраст);
		
		ИсходнаяСтрока = НСтр("ru = ';%1 год;;%1 года;%1 лет;'");
		ВозрастПредставление = СтрокаСЧислом(ИсходнаяСтрока, Возраст, ВидЧисловогоЗначения.Количественное);
		
		СтрокаДатаРождения = НСтр("ru = 'Дата рождения: %Дата%, %ВозрастПредставление%.'");
		СтрокаДатаРождения = СтрЗаменить(СтрокаДатаРождения, "%Дата%", Формат(Контрагент.ДатаРождения, "ДЛФ=ДД"));
		СтрокаДатаРождения = СтрЗаменить(СтрокаДатаРождения, "%ВозрастПредставление%", ВозрастПредставление);
		
	КонецЕсли;
	
	СтрокаТелефон = "";
	НомерТелефона = УправлениеКонтактнойИнформациейАльфаАвто.ТелефонДляМаски(Контрагент);
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		
		СтрокаТелефон = НСтр("ru = 'Контактный телефон: %Номер%'");
		СтрокаТелефон = СтрЗаменить(СтрокаТелефон, "%Номер%", НомерТелефона);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Заметки.ТекстСодержания КАК Содержание
		|ИЗ
		|	Справочник.Заметки КАК Заметки
		|ГДЕ
		|	Заметки.Предмет = &Предмет
		|	И НЕ Заметки.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заметки.Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("Предмет", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		СтрокаЗаметка = "";
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		СтрокаЗаметка = НСтр("ru = 'Последняя заметка: %Содержание%
		| </br><a href =""ОткрытьВсеЗаметки"">Показать все заметки</a>'");
		
		СтрокаЗаметка = СтрЗаменить(СтрокаЗаметка, "%Содержание%", ВыборкаДетальныеЗаписи.Содержание);
		
	КонецЕсли;
	
	ПерсональныеДанные = СтрШаблон(ПерсональныеДанные, Наименование, СтрокаДатаРождения, СтрокаТелефон, СтрокаЗаметка);
	
	Возврат ПерсональныеДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьПоследниеКонтакты()
	
	СписокКонтактов = "";
	
	ПоследниеКонтакты = "
		|<table style=""font: 10px;"">
		|	<tr>
		|		<td>%1</td>
		|	</tr>
		|	<tr>
		|		<td>%2</td>
		|	</tr>
		|</table>";
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Событие.Тема КАК Тема,
		|	Событие.Менеджер КАК Менеджер,
		|	Событие.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.Контрагент = &Контрагент
		|	И НЕ Событие.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ДатаНачалаСобытия = Формат(Выборка.ДатаНачала, "ДЛФ=D");
		
		СписокКонтактов = СписокКонтактов 
			+ ?(ЗначениеЗаполнено(ДатаНачалаСобытия), ДатаНачалаСобытия + ", ", " ") 
			+ ?(ЗначениеЗаполнено(Выборка.Менеджер), Выборка.Менеджер.Наименование + ", ", " ") 
			+ Выборка.Тема + "</br><a href = ""ВсеКонтакты"">Показать все контакты</a>";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Кураторы.Куратор КАК Куратор
		|ИЗ
		|	РегистрСведений.Кураторы КАК Кураторы
		|ГДЕ
		|	Кураторы.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		КураторКлиента = "";
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КураторКлиента = НСтр("ru = 'Куратор клиента: %Куратор%.'");
		КураторКлиента = СтрЗаменить(КураторКлиента, "%Куратор%", Выборка.Куратор);
	КонецЕсли;
	
	Если СписокКонтактов = "" Тогда
		СписокКонтактов = НСтр("ru = 'Нет данных.'");
	КонецЕсли;
	
	ПоследниеКонтакты = СтрШаблон(ПоследниеКонтакты, СписокКонтактов, КураторКлиента);
	
	Возврат ПоследниеКонтакты;
	
КонецФункции

&НаСервере
Функция ПолучитьАвтомобилиКлиента()
	
	СтрокаАвтомобили = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
		|	АвтомобилиСрезПоследних.Автомобиль.Марка КАК АвтомобильМарка,
		|	АвтомобилиСрезПоследних.Автомобиль.Модель КАК АвтомобильМодель,
		|	ВЫБОР
		|		КОГДА АвтомобилиСрезПоследних.Автомобиль.ГодВыпуска = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА """"
		|		ИНАЧЕ АвтомобилиСрезПоследних.Автомобиль.ГодВыпуска
		|	КОНЕЦ КАК АвтомобильГодВыпуска,
		|	ВЫБОР
		|		КОГДА ВыполнениеСервисныхКампаний.СервиснаяКампания ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьСервиснаяКампания
		|ИЗ
		|	РегистрСведений.Автомобили.СрезПоследних(&Дата, ВидЗначения = &ВидЗначения) КАК АвтомобилиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеСервисныхКампаний КАК ВыполнениеСервисныхКампаний
		|		ПО АвтомобилиСрезПоследних.Автомобиль.VIN = ВыполнениеСервисныхКампаний.VIN
		|ГДЕ
		|	АвтомобилиСрезПоследних.Значение = &Значение";
	
	Запрос.УстановитьПараметр("ВидЗначения", Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);
	Запрос.УстановитьПараметр("Значение", Контрагент);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтрокаАвтомобили = НСтр("ru = 'Нет данных.'");
		Возврат СтрокаАвтомобили;
	КонецЕсли;
	
	ГосНомер = Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НомерАвто = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Выборка.Автомобиль, ГосНомер);
		ГодВыпускаАвто = Формат(
			Выборка.АвтомобильГодВыпуска,
			АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Неопределено)
		);
			
		СтрокаАвтомобили = СтрокаАвтомобили 
			+ ?(ЗначениеЗаполнено(Выборка.АвтомобильМарка), Выборка.АвтомобильМарка.Наименование + ", ", " ")
			+ ?(ЗначениеЗаполнено(Выборка.АвтомобильМодель), Выборка.АвтомобильМодель.Наименование + ", ", " ") 
			+ ?(ЗначениеЗаполнено(ГодВыпускаАвто), ГодВыпускаАвто + ", ", " ") 
			+ ?(ЗначениеЗаполнено(НомерАвто), НомерАвто + ", ", " ") 
			+ ?(Выборка.ЕстьСервиснаяКампания, НСтр("ru = 'есть СК'"), НСтр("ru = 'нет СК'")) + "</br>";
			
	КонецЦикла;
	
	Возврат СтрокаАвтомобили;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюПоОбслуживанию()
	
	Обслуживание = "
	|<table>
	|	<tr>
	|		<td>%1</td>
	|	</tr>
	|	<tr>
	|		<td>%2</td>
	|	</tr>
	|</table>";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявкаНаРемонт.ДатаНачала КАК ДатаНачала,
		|	ЗаявкаНаРемонт.ВидРемонта КАК ВидРемонта,
		|	ЗаявкаНаРемонт.Менеджер КАК Менеджер
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	НЕ ЗаявкаНаРемонт.ПометкаУдаления
		|	И ЗаявкаНаРемонт.Проведен = ИСТИНА
		|	И ЗаявкаНаРемонт.Заказчик = &Контрагент
		|	И РАЗНОСТЬДАТ(ЗаявкаНаРемонт.ДатаНачала, &ДатаСеанса, ДЕНЬ) < 3
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала ВОЗР";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ЗаказНаряд = НСтр("ru = 'Нет действующей записи.'");
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаказНаряд = СтрШаблон(
			НСтр("ru = 'Записан на %1, %2, менеджер: %3.'"),
			Формат(Выборка.ДатаНачала, НСтр("ru = 'ДФ=""дд.ММ.гггг ЧЧ:мм""'")),
			Выборка.ВидРемонта,
			Выборка.Менеджер
		);
		
	КонецЕсли;
	
	СписокАвтомобилей = ПолучитьАвтомобилиСНеВыполненнымиРекомендациями();
	
	Если СписокАвтомобилей = Неопределено Тогда
		
		Рекомендации = НСтр("ru = 'Нет невыполненных рекомендаций.'");
		
	Иначе
		
		Рекомендации = НСтр("ru = '<a href = ""ОткрытьСписокРекомендаций"">Есть невыполненные рекомендации.</a>'");
		
	КонецЕсли;
	
	Обслуживание = СтрШаблон(Обслуживание, ЗаказНаряд, Рекомендации);
	
	Возврат Обслуживание;
	
КонецФункции

&НаСервере
Функция ПолучитьАвтомобилиСНеВыполненнымиРекомендациями()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль
		|ИЗ
		|	РегистрСведений.Автомобили.СрезПоследних(&НаМомент, ВидЗначения = &ВидЗначения) КАК АвтомобилиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РекомендацииПоАвтомобилю КАК РекомендацииПоАвтомобилю
		|		ПО АвтомобилиСрезПоследних.Автомобиль = РекомендацииПоАвтомобилю.Автомобиль
		|ГДЕ
		|	АвтомобилиСрезПоследних.Значение = &Значение
		|	И НЕ РекомендацииПоАвтомобилю.Выполнена";
	
	Запрос.УстановитьПараметр("ВидЗначения", Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);
	Запрос.УстановитьПараметр("Значение", Контрагент);
	Запрос.УстановитьПараметр("НаМомент", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Автомобиль");

КонецФункции

&НаСервере
Функция ПолучитьЗаказыКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЖурналСостоянийСрезПоследних.Объект КАК Объект,
	               |	ЖурналСостоянийСрезПоследних.Состояние КАК Состояние
	               |ПОМЕСТИТЬ ЖурналСостоянийТаблица
	               |ИЗ
	               |	РегистрСведений.ЖурналСостояний.СрезПоследних(
	               |			&Дата,
	               |			ТИПЗНАЧЕНИЯ(Объект) = ТИП(Документ.ЗаказПокупателя)
	               |				И Объект.Контрагент = &Контрагент) КАК ЖурналСостоянийСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаказыПокупателейОстатки.Заказ.Дата КАК ЗаказДата,
	               |	ЗаказыПокупателейОстатки.Заказ.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказыПокупателейОстатки.Заказ.ВалютаДокумента КАК ВалютаДокумента,
	               |	ЗаказыПокупателейОстатки.Заказ.Менеджер КАК Менеджер,
	               |	ЖурналСостоянийСрезПоследних.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, Контрагент = &Контрагент) КАК ЗаказыПокупателейОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналСостоянийТаблица КАК ЖурналСостоянийСрезПоследних
	               |		ПО ЗаказыПокупателейОстатки.Заказ = ЖурналСостоянийСрезПоследних.Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказДата";
	
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ЗаказКлиента = НСтр("ru = 'Нет неотгруженных заказов.'");
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаказКлиента = НСтр("ru = 'Заказ от %Дата% на сумму %Сумма% %Валюта%, %Состояние%, менеджер %Менеджер%.'");
		ЗаказКлиента = СтрЗаменить(ЗаказКлиента, "%Дата%", Формат(Выборка.ЗаказДата, "ДЛФ=Д"));
		ЗаказКлиента = СтрЗаменить(ЗаказКлиента, "%Сумма%", Выборка.СуммаДокумента);
		ЗаказКлиента = СтрЗаменить(ЗаказКлиента, "%Валюта%", Выборка.ВалютаДокумента);
		ЗаказКлиента = СтрЗаменить(ЗаказКлиента, "%Состояние%", Выборка.Состояние);
		ЗаказКлиента = СтрЗаменить(ЗаказКлиента, "%Менеджер%", Выборка.Менеджер);
		
	КонецЕсли;
	
	Возврат ЗаказКлиента;
	
КонецФункции

&НаСервере
Процедура СформироватьИнформациюОКлиенте()
	
	ШаблонИнформации = "
		|	<html>
		|		<head>
		|			<style>
		|				body {
		|					font-family: Arial, sans-serif;
		|					font-size: 10px;
		|				}
		|			</style>
		|		</head>
		|		<body>
		|			<table>
		|				<tr>
		|					<td colspan = ""2""><strong>Персональные данные: </strong></td>
		|				</tr>
		|				<tr>
		|					<td ></td>
		|					<td>%1</td>
		|				</tr>
		|				<tr>
		|					<td colspan = ""2""><strong>Последние контакты: </strong></td>
		|				</tr>
		|				<tr>
		|					<td ></td>
		|					<td>%2</td>
		|				</tr>
		|				<tr>
		|					<td colspan = ""2""><strong>Автомобили клиента: </strong></td>
		|				</tr>
		|				<tr>
		|					<td ></td>
		|					<td>%3</td>
		|				</tr>
		|				<tr>
		|					<td colspan = ""2""><strong>Обслуживание и ремонт: </strong></td>
		|				</tr>
		|				<tr>
		|					<td ></td>
		|					<td>%4</td>
		|				</tr>
		|				<tr>
		|					<td colspan = ""2""><strong>Заказы запчастей и аксессуаров: </strong></td>
		|				</tr>
		|				<tr>
		|					<td ></td>
		|					<td>%5</td>
		|				</tr>
		|			</table>
		|		</body>
		|	</html>";
	
	ПерсональныеДанные = ПолучитьПерсональныеДанные();
	ПоследниеКонтакты  = ПолучитьПоследниеКонтакты();
	АвтомобилиКлиента  = ПолучитьАвтомобилиКлиента();
	Обслуживание       = ПолучитьИнформациюПоОбслуживанию();
	Заказы             = ПолучитьЗаказыКлиента();
	
	ИнформацияОКлиенте = СтрШаблон(
		ШаблонИнформации,
		ПерсональныеДанные,
		ПоследниеКонтакты,
		АвтомобилиКлиента,
		Обслуживание,
		Заказы);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВопросПередПерезаполением()
	
	Возврат НЕ ПустаяСтрока(Телефон)
		ИЛИ НЕ ПустаяСтрока(Клиент)
		ИЛИ ЗначениеЗаполнено(Контрагент)
		ИЛИ СписокПерезвонов.Количество() > 0;
		
КонецФункции

#Область Анкета

// Процедура удаления полей анкеты
//
&НаСервере
Процедура УдалитьСтарыеПоляАнкеты()
	
	МассивУдаляемыхЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Элементы.ГруппаТелоАнкеты.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(ТекЭлемент);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивУдаляемыхЭлементов Цикл
		Если ТекЭлемент = Элементы.НадписьВступление Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.Удалить(ТекЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования опроса для анкеты
//
&НаСервере
Процедура СформироватьПоляАнкеты()
	
	УдалитьСтарыеПоляАнкеты();
	
	// 1. Получить документ Опрос - по колл-центру или визитам клиентов из подразделения оператора
	ШаблонАнкеты = ДокументОпрос.ШаблонАнкеты;
	
	// 2. Сформировать на форме поля ввода анкеты по опросу
	Если НЕ ШаблонАнкеты.Пустая() Тогда
		Анкетирование.ЗаполнитьДеревоРазделов(ЭтотОбъект,ДеревоРазделов);
	КонецЕсли;
	
	// определение выбранного раздела
	ТекущиеДанныеДеревоРазделов = ДеревоРазделов.НайтиПоИдентификатору(0);
	Если ТекущиеДанныеДеревоРазделов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерТекущегоРаздела = 0;
	Анкетирование.ПостроениеФормыЗаполненияПоРазделу(ЭтотОбъект,ТекущиеДанныеДеревоРазделов);
	
	Анкетирование.СформироватьТаблицуПодчиненияВопросов(ЭтотОбъект);
	
	Элементы.ГруппаТелоАнкеты.Видимость = Истина;
	
КонецПроцедуры // СформироватьПоляАнкеты

// Преобразовывает данные в форме заполнения ответы в данные табличной части 
//
&НаСервере
Процедура ПреобразоватьРезультатыЗаполненияРазделаВТабличнуюЧасть(ДокументАнкета)
	
	ТекущийРаздел = ДеревоРазделов.НайтиПоИдентификатору(0);
	Если ТекущийРаздел <> Неопределено Тогда
		 Если ТекущийРаздел.ТипСтроки = "Раздел" Тогда
			ДокументАнкета.РедактируемыйРаздел = ТекущийРаздел.Ссылка;
		Иначе
			ДокументАнкета.РедактируемыйРаздел = ТекущийРаздел.ТипСтроки;
		 КонецЕсли;
	КонецЕсли;
	
	ПредыдущийРазделБезВопросов = (ТаблицаВопросовРаздела.Количество() = 0);
	
	Для каждого СтрокаТаблицы Из ТаблицаВопросовРаздела Цикл
		
		// Удаление из табличной части предыдущей информации
		НайденныеСтроки = ДокументАнкета.Состав.НайтиСтроки(Новый Структура("Вопрос",СтрокаТаблицы.ВопросШаблона));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ДокументАнкета.Состав.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.РодительВопрос) Тогда
			НайденныеСтроки = ТаблицаВопросовРаздела.НайтиСтроки(Новый Структура("ВопросШаблона",СтрокаТаблицы.РодительВопрос));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаРодитель = НайденныеСтроки[0];
				Если (НЕ ЭтотОбъект[АнкетированиеКлиентСервер.ИмяВопроса(СтрокаРодитель.КлючСтроки)] = Истина) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Табличный Тогда
			ЗаполнитьТаблицуОтветовТабличныйВопрос(ДокументАнкета, СтрокаТаблицы);
		ИначеЕсли СтрокаТаблицы.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Комплексный Тогда
			ЗаполнитьОтветыКомплексныйВопрос(ДокументАнкета, СтрокаТаблицы);
		Иначе
			ЗаполнитьОтветПростойВопрос(ДокументАнкета, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Анализирует тип табличного вопроса и вызывает соответствующую процедуру для 
// получения ответов, данных респондентом на табличный вопрос
//
// Параметры
// СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты
//
&НаСервере
Процедура ЗаполнитьТаблицуОтветовТабличныйВопрос(ДокументАнкета, СтрокаДерева)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ИмяВопроса(СтрокаДерева.КлючСтроки);
	ИмяТаблицы = ИмяВопроса + "_Таблица";
	Таблица = РеквизитФормыВЗначение(ИмяТаблицы);
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.Составной Тогда
		
		ЗаполнитьОтветыТабличныйВопросСоставной(ДокументАнкета, СтрокаДерева,Таблица);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВСтроках Тогда
		
		ЗаполнитьОтветыТабличныйВопросОтветыВСтроках(ДокументАнкета, СтрокаДерева,Таблица);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВКолонках Тогда
		
		ЗаполнитьОтветыТабличныйВопросОтветыВКолонках(ДокументАнкета, СтрокаДерева,Таблица);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВСтрокахИКолонках Тогда
		
		ЗаполнитьОтветыТабличныйВопросОтветыВСтрокахИКолонках(ДокументАнкета, СтрокаДерева,Таблица);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает ответы, данные респондентом на составной табличный вопрос и аккумулирует их в общей
//  таблице ответов.
//
//Параметры
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросСоставной(ДокументАнкета, СтрокаДерева,Таблица)
	
	Для ИндексКолонки = 0 По СтрокаДерева.СоставТабличногоВопроса.Количество()-1 Цикл
		
		Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
			
			Ответ = Таблица[ИндексСтроки][ИндексКолонки];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				НоваяСтрока = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.СоставТабличногоВопроса[ИндексКолонки].ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на табличный вопрос с предопределенными ответами в строках и 
// аккумулирует их в общей таблице ответов.
//
// Параметры
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросОтветыВСтроках(ДокументАнкета, СтрокаДерева,Таблица)
	
	ВопросПерваяКолонка = СтрокаДерева.СоставТабличногоВопроса[0].ЭлементарныйВопрос;
	ИмяКолонкиБезНомера = АнкетированиеКлиентСервер.ИмяВопроса(СтрокаДерева.КлючСтроки) + "_Таблица_Колонка_";
	
	Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
		
		ЕстьХотяБыОдинОтветУказанныйРеспондентом = ЛОЖЬ;
		
		Для ИндексКолонки = 1 По СтрокаДерева.СоставТабличногоВопроса.Количество()-1 Цикл
		
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + Строка(ИндексКолонки+1)];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				ЕстьХотяБыОдинОтветУказанныйРеспондентом = Истина;
				
				НоваяСтрока                    = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.СоставТабличногоВопроса[ИндексКолонки].ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексСтроки + 1;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ЕстьХотяБыОдинОтветУказанныйРеспондентом Тогда
			
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + "1"];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				НоваяСтрока = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросПерваяКолонка;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексСтроки + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на табличный вопрос с предопределенными ответами в строках и колонках и 
// аккумулирует их в общей таблице ответов.
//
// Параметры
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросОтветыВСтрокахИКолонках(ДокументАнкета,СтрокаДерева,Таблица)
	
	ВопросДляСтрок   = СтрокаДерева.СоставТабличногоВопроса[0].ЭлементарныйВопрос;
	ВопросДляКолонок = СтрокаДерева.СоставТабличногоВопроса[1].ЭлементарныйВопрос;
	ВопросДляЯчеек   = СтрокаДерева.СоставТабличногоВопроса[2].ЭлементарныйВопрос;
	
	ОтветыСтроки  = СтрокаДерева.ПредопределенныеОтветы.НайтиСтроки(Новый Структура("ЭлементарныйВопрос",ВопросДляСтрок));
	ОтветыКолонки = СтрокаДерева.ПредопределенныеОтветы.НайтиСтроки(Новый Структура("ЭлементарныйВопрос",ВопросДляКолонок));
	
	ИмяКолонкиБезНомера = АнкетированиеКлиентСервер.ИмяВопроса(СтрокаДерева.КлючСтроки) + "_Таблица_Колонка_";
	
	Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
		Для ИндексКолонки = 1 По Таблица.Колонки.Количество() - 1 Цикл
			
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + Строка(ИндексКолонки+1)];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				НомерЯчейки = ИндексКолонки + ИндексСтроки * (Таблица.Колонки.Количество() - 1);
				
				НоваяСтрока = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросДляСтрок;
				НоваяСтрока.Ответ              = ОтветыСтроки[ИндексСтроки].Ответ;
				НоваяСтрока.НомерЯчейки        = НомерЯчейки;
				
				НоваяСтрока = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросДляКолонок;
				НоваяСтрока.Ответ              = ОтветыКолонки[ИндексКолонки - 1].Ответ;
				НоваяСтрока.НомерЯчейки        = НомерЯчейки;
				
				НоваяСтрока = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросДляЯчеек;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = НомерЯчейки;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на табличный вопрос с предопределенными ответами в колонках и 
// аккумулирует их в общей таблице ответов.
//
// Параметры
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросОтветыВКолонках(ДокументАнкета,СтрокаДерева,Таблица)
	
	ВопросДляКолонок = СтрокаДерева.СоставТабличногоВопроса[0].ЭлементарныйВопрос;
	ИмяКолонкиБезНомера = АнкетированиеКлиентСервер.ИмяВопроса(СтрокаДерева.КлючСтроки) + "_Таблица_Колонка_";
	
	Для ИндексКолонки = 1 По Таблица.Колонки.Количество() - 1 Цикл
		
		ЕстьХотяБыОдинОтветУказанныйРеспондентом = ЛОЖЬ;
		
		Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
			
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + Строка(ИндексКолонки + 1)];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				ЕстьХотяБыОдинОтветУказанныйРеспондентом = Истина;
				
				НоваяСтрока = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.СоставТабличногоВопроса[ИндексСтроки+1].ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексКолонки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		 Если  ЕстьХотяБыОдинОтветУказанныйРеспондентом Тогда
			
			НоваяСтрока = ДокументАнкета.Состав.Добавить();
			НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
			НоваяСтрока.ЭлементарныйВопрос = ВопросДляКолонок;
			НоваяСтрока.Ответ              = СтрокаДерева.ПредопределенныеОтветы[ИндексКолонки - 1].Ответ;
			НоваяСтрока.НомерЯчейки        = ИндексКолонки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на комплексный вопрос и 
// аккумулирует их в общей таблице ответов.
//
// Параметры
//  СтрокаДерева   - СтрокаДереваЗначений - строка дерева шаблона анкеты
//
&НаСервере
Процедура ЗаполнитьОтветыКомплексныйВопрос(ДокументАнкета, СтрокаДерева)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ИмяВопроса(СтрокаДерева.КлючСтроки);
	
	Для каждого СтрокаКомплексногоВопроса Из СтрокаДерева.СоставКомплексногоВопроса Цикл
		
		ИмяРеквизита =  ИмяВопроса + "_Ответ_" + Формат(СтрокаКомплексногоВопроса.НомерСтроки, "ЧГ=");
		
		Если СтрокаКомплексногоВопроса.ЭлементарныйВопрос.ТипОтвета <> Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
			НоваяСтрока = ДокументАнкета.Состав.Добавить();
			НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
			НоваяСтрока.ЭлементарныйВопрос = СтрокаКомплексногоВопроса.ЭлементарныйВопрос;
			НоваяСтрока.Ответ              = ЭтотОбъект[ИмяРеквизита];
			Если СтрокаКомплексногоВопроса.ТребуетсяКомментарий Тогда
				НоваяСтрока.ОткрытыйОтвет	= ЭтотОбъект[ИмяВопроса + "_Комментарий_" + Формат(СтрокаКомплексногоВопроса.НомерСтроки, "ЧГ=")];
			КонецЕсли;
			
		Иначе
			
			ВариантыОтветовНаВопрос = Анкетирование.ПолучитьВариантыОтветовНаВопрос(СтрокаКомплексногоВопроса.ЭлементарныйВопрос,ЭтотОбъект);
		
			Счетчик = 0;
			Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
				
				Счетчик = Счетчик + 1;
				ИмяТекРеквизита =  ИмяРеквизита + "_Реквизит_" + Счетчик;
				
				Если ЭтотОбъект[ИмяТекРеквизита] Тогда
					
					НоваяСтрока = ДокументАнкета.Состав.Добавить();
					НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
					НоваяСтрока.ЭлементарныйВопрос = СтрокаКомплексногоВопроса.ЭлементарныйВопрос;
					НоваяСтрока.Ответ              = ВариантОтвета.Ответ;
					НоваяСтрока.НомерЯчейки        = Счетчик;
					Если ВариантОтвета.ТребуетОткрытогоОтвета Тогда
						НоваяСтрока.ОткрытыйОтвет	= ЭтотОбъект[ИмяРеквизита + "_Комментарий_" + Счетчик];
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

// Получает ответы, данные респондентом на простой вопрос и 
// аккумулирует их в общей таблице ответов.
//
// Параметры
//  СтрокаДерева   - СтрокаДереваЗначений - строка дерева шаблона анкеты
//
&НаСервере
Процедура ЗаполнитьОтветПростойВопрос(ДокументАнкета, СтрокаДерева)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ИмяВопроса(СтрокаДерева.КлючСтроки);
	
	Если ЗначениеЗаполнено(СтрокаДерева.ТипОтвета) И СтрокаДерева.ТипОтвета <> Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
		Ответ = ЭтотОбъект[ИмяВопроса];
		Если ЗначениеЗаполнено(Ответ) Тогда
			
			НоваяСтрока = ДокументАнкета.Состав.Добавить();
			НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
			НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.ЭлементарныйВопрос;
			Если СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
				НоваяСтрока.ОткрытыйОтвет = Ответ;
			Иначе
				НоваяСтрока.Ответ = Ответ;
				Если СтрокаДерева.ТребуетсяКомментарий Тогда
					НоваяСтрока.ОткрытыйОтвет = ЭтотОбъект[ИмяВопроса + "_Комментарий"];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВариантыОтветовНаВопрос = Анкетирование.ПолучитьВариантыОтветовНаВопрос(СтрокаДерева.ЭлементарныйВопрос, ЭтаФорма);
		
		Счётчик = 0;
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			
			Счётчик = Счётчик + 1;
			ИмяРеквизита =  ИмяВопроса + "_Реквизит_" + Счётчик;
			
			Если ЭтотОбъект[ИмяРеквизита] Тогда
				
				НоваяСтрока = ДокументАнкета.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = ВариантОтвета.Ответ;
				НоваяСтрока.НомерЯчейки        = Счётчик;
				Если ВариантОтвета.ТребуетОткрытогоОтвета Тогда
					НоваяСтрока.ОткрытыйОтвет	= ЭтотОбъект[ИмяВопроса + "_Комментарий_" + Счётчик];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура создания анкеты на основании опроса вх. трафика
//
&НаСервере
Функция СформироватьАнкету()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ДеревоРазделовАнкеты = РеквизитФормыВЗначение("ДеревоРазделов");
	
	Если ЗначениеЗаполнено(ШаблонАнкеты)
		 И ДеревоРазделовАнкеты.Строки.Количество() > 0 И НЕ ЗначениеЗаполнено(ДокументАнкета) Тогда
		
		ДокументОбъектАнкета = Документы.Анкета.СоздатьДокумент();
		ДокументОбъектАнкета.Заполнить(Неопределено);
		ДокументОбъектАнкета.Дата = ТекущаяДатаСеанса();
		ДокументОбъектАнкета.ДатаРедактирования = ТекущаяДатаСеанса();
		ДокументОбъектАнкета.Респондент = ТекущийПользователь;
		ДокументОбъектАнкета.Автор = ТекущийПользователь;
		ДокументОбъектАнкета.Опрос = ДокументОпрос;
		ДокументОбъектАнкета.РежимАнкетирования = Перечисления.РежимыАнкетирования.Анкета;
		ПреобразоватьРезультатыЗаполненияРазделаВТабличнуюЧасть(ДокументОбъектАнкета);
	Иначе
		Если ЗначениеЗаполнено(ДокументАнкета) Тогда
			ДокументОбъектАнкета = ДокументАнкета.ПолучитьОбъект();
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ДокументОбъектАнкета.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Ошибка при записи анкеты: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
		Возврат Ложь;
	КонецПопытки;
	
	ДокументАнкета = ДокументОбъектАнкета.Ссылка;
	
	Возврат Истина;
	
КонецФункции // СформироватьАнкету()

#КонецОбласти

#Область ВходящиеЭлектронныеПисьма

&НаСервере
Процедура ФормированиеНовогоПисьма(ОчищатьВсеПоля = Ложь)
	
	ТекущиеДокументПисьма   = Неопределено;
	ОтправительПисьма       = "";
	СтатусВходящегоКонтакта = Неопределено;
	Если ОчищатьВсеПоля Тогда
		ПодразделениеКомпании   = Неопределено;
		Менеджер                = Неопределено;
		Контрагент              = Неопределено;
		СписокСотрудников.Очистить();
	КонецЕсли;
	Элементы.ПодразделениеКомпанииПисьма.ТолькоПросмотр = Ложь;
	
КонецПроцедуры // ФормированиеНовогоПисьма()

// Процедура заполнения структуры электронных писем
//
&НаСервере
Процедура ЗаполнитьДеревоПапок()
	
	Папки.ПолучитьЭлементы().Очистить();
	
	ТекстОтбора = "";
	
	// Никакие учетные записи не разрешены
	Если СписокУчетныхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПапкиЭлектронныхПисем.Владелец КАК УчетнаяЗапись,
	               |	ПапкиЭлектронныхПисем.Ссылка КАК Значение,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено ЕСТЬ NULL 
	               |					ИЛИ ПредметыПапкиВзаимодействий.Рассмотрено = ИСТИНА
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК НеРассмотрено,
	               |	ПапкиЭлектронныхПисем.ПредопределеннаяПапка,
	               |	1 КАК ЕстьПравоНаИзменение,
	               |	ВЫБОР
	               |		КОГДА НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	               |			ТОГДА 7
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Входящие)
	               |					ТОГДА 1
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Отправленные)
	               |					ТОГДА 2
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Черновики)
	               |					ТОГДА 3
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Исходящие)
	               |					ТОГДА 4
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.НежелательнаяПочта)
	               |					ТОГДА 5
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Удаленные)
	               |					ТОГДА 6
	               |			КОНЕЦ
	               |	КОНЕЦ КАК НомерКартинки
	               |ИЗ
	               |	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |		ПО (ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	               |				И ПредметыПапкиВзаимодействий.Взаимодействие ССЫЛКА Документ.ЭлектронноеПисьмоВходящее)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	               |		ПО ПапкиЭлектронныхПисем.Владелец = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
	               |ГДЕ
	               |	НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	               |	И ПапкиЭлектронныхПисем.Владелец В (&ДоступныеЗаписи)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПапкиЭлектронныхПисем.Ссылка,
	               |	ПапкиЭлектронныхПисем.Владелец,
	               |	ПапкиЭлектронныхПисем.ПредопределеннаяПапка,
	               |	1,
	               |	ВЫБОР
	               |		КОГДА НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	               |			ТОГДА 7
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Входящие)
	               |					ТОГДА 1
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Отправленные)
	               |					ТОГДА 2
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Черновики)
	               |					ТОГДА 3
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Исходящие)
	               |					ТОГДА 4
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.НежелательнаяПочта)
	               |					ТОГДА 5
	               |				КОГДА ПапкиЭлектронныхПисем.ТипПредопределеннойПапки = ЗНАЧЕНИЕ(Перечисление.ТипыПредопределенныхПапокПисем.Удаленные)
	               |					ТОГДА 6
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПапкиЭлектронныхПисем.Код
	               |ИТОГИ
	               |	СУММА(НеРассмотрено),
	               |	СУММА(ЕстьПравоНаИзменение)
	               |ПО
	               |	УчетнаяЗапись,
	               |	Значение ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ДоступныеЗаписи", СписокУчетныхЗаписей.ВыгрузитьЗначения());
	Результат = Запрос.Выполнить();
	Дерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СтрокиПервыйУровень = Папки.ПолучитьЭлементы();
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		СтрокаУчЗаписи = СтрокиПервыйУровень.Добавить();
		СтрокаУчЗаписи.УчетнаяЗапись        = Строка.УчетнаяЗапись;
		СтрокаУчЗаписи.Значение             = Строка.УчетнаяЗапись;
		СтрокаУчЗаписи.НомерКартинки        = 0;
		СтрокаУчЗаписи.НеРассмотрено        = Строка.НеРассмотрено;
		СтрокаУчЗаписи.ЕстьПравоНаИзменение = Строка.ЕстьПравоНаИзменение;
		СтрокаУчЗаписи.Представление = Строка(СтрокаУчЗаписи.Значение)
			+ ?(Строка.НеРассмотрено = 0, "", " (" + Строка(Строка.НеРассмотрено) + ")");
		
		ДобавитьСтрокиВДеревоНавигации(Строка, СтрокаУчЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоПапок()

&НаКлиенте
Процедура РазвернутьДеревоПапок()
	
	Для Каждого ТекущаяПапкаПисьма Из Папки.ПолучитьЭлементы() Цикл
		Элементы.Папки.Развернуть(ТекущаяПапкаПисьма.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоПапок()

// Представление дерева навигации
//
&НаСервере
Процедура ДобавитьСтрокиВДеревоНавигации(РодительскаяСтрока, СтрокаРодитель, ВыполнятьПроверку = Истина, НомерКартинки = -1)
	
	Для Каждого Строка Из РодительскаяСтрока.Строки Цикл
		
		Если ВыполнятьПроверку И (Строка.Значение = РодительскаяСтрока.Значение ИЛИ Строка.Значение = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		Если Строка.НомерКартинки = Null И НомерКартинки <> -1 Тогда
			НоваяСтрока.НомерКартинки = НомерКартинки;
		КонецЕсли;
	
		Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Строка.Значение) Тогда
			СтрокаДетали = Строка.Строки[0];
			НоваяСтрока.Представление = СтрШаблон(
				НСтр("ru = '%1 от %2%3'"),
				?(ПустаяСтрока(СтрокаДетали.Тема), НСтр("ru = 'Тема не указана'"), СтрокаДетали.Тема),
				Формат(СтрокаДетали.Дата, "ДЛФ=DT"),
				?(Строка.НеРассмотрено = 0, "", " (" + Строка(Строка.НеРассмотрено) + ")")
			);
			НоваяСтрока.НомерКартинки = СтрокаДетали.НомерКартинки;
		Иначе
			НоваяСтрока.Представление = Строка(НоваяСтрока.Значение)
				+ ?(Строка.НеРассмотрено = 0, "", " (" + Строка(Строка.НеРассмотрено) + ")");
			Если Строка.НомерКартинки = Null И НомерКартинки = -1 И Строка.Строки.Количество() > 0 Тогда
				НоваяСтрока.НомерКартинки = Строка.Строки[0].НомерКартинки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСтрокиВДеревоНавигации(Строка, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устновки отбора списка водящих электронных писем
//
&НаСервере
Функция СоздатьГруппуОтбораПанелиНавигации()

	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
	                    ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(СписокЭлектронныхПисем).Элементы,
	                    "ОтборПанелиНавигации",
	                    ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

КонецФункции

&НаСервере
Процедура ПапкиПриАктивизацииСтрокиНаСервере()
	
	ГруппаОтбора = СоздатьГруппуОтбораПанелиНавигации();
	
	ИмяПоля                    = "Тип";
	ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	ПравоеЗначение             = СписокТипов;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ИмяПоля,
	ВидСравненияЭлементаОтбора, ПравоеЗначение);
	
	ЗначениеОтбора = ТекущаяПапка;
	
	Если ТипЗнч(ТекущаяПапка) = Тип("СправочникСсылка.ПапкиЭлектронныхПисем") Тогда
		
		ИмяПоля                    = "Папка";
		ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение             = ТекущаяПапка;
		ИмяОтбора = НСтр("ru = 'Папка'");
		
	Иначе
		
		ИмяПоля                    = "УчетнаяЗапись";
		ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение             = ТекущаяПапка;
		ИмяОтбора = НСтр("ru = 'Учетная запись'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора ,ИмяПоля, 
	                                                       ВидСравненияЭлементаОтбора, ПравоеЗначение);
	
КонецПроцедуры // ПапкиПриАктивизацииСтрокиНаСервере()

// Обработчик события возникающего на клиенте при активизации строки списка выполняемый с задержкой.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Подключаемый_ПапкиПриАктивизацииСтроки()
	
	ПапкиПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры // Подключаемый_ПапкиПриАктивизацииСтроки()

// Обработчик события возникающего на клиенте при активизации строки списка.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Папки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПапка = Элементы.Папки.ТекущиеДанные.Значение;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПапкиПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры // ПапкиПриАктивизацииСтроки()

&НаСервере
Процедура ОтобразитьПредпросмотрВзаимодействия(СсылкаДокументВзаимодействий)
	
	ПредпросмотрHTML = Взаимодействия.СформироватьТекстHTMLДляВходящегоПисьма(СсылкаДокументВзаимодействий, Ложь, Истина);
	
КонецПроцедуры // ОтобразитьПредпросмотрВзаимодействия()

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.СписокЭлектронныхПисем.ТекущиеДанные;
	
	ФормированиеНовогоПисьма();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДокументПисьма = Неопределено;
		ОтправительПисьма     = "";
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Рассмотрено Тогда
		ТекущиеДокументПисьма = ТекущиеДанные.Ссылка;
		ОтправительПисьма     = ТекущиеДанные.ОтправительАдрес;
	КонецЕсли;
	
	ОтобразитьПредпросмотрВзаимодействия(ТекущиеДанные.Ссылка);
	
КонецПроцедуры // Подключаемый_СписокПриАктивизацииСтроки()

&НаКлиенте
Процедура СписокЭлектронныхПисемПриИзменении(Элемент)
	
	ЗаполнитьДеревоПапок();
	
	РазвернутьДеревоПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭлектронныхПисемПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненияПолейВходящегоПисьма(Отказ)
	
	// Проверим выбрано ли электронное письмо
	Если НЕ ЗначениеЗаполнено(ТекущиеДокументПисьма) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбрано электронное письмо.'"),
			,
			"ТекущиеДокументПисьма",
			,
			Отказ
		);
	КонецЕсли;
	
	// Проверим статус
	Если НЕ ЗначениеЗаполнено(СтатусВходящегоКонтакта) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен статус входящего контакта.'"),
			,
			"СтатусВходящегоПисьма",
			,
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполненияПолейВходящегоПисьма()

&НаСервере
Процедура ПеревестиПисьмоВРассмотрено()
	
	МассивВзаимодействий = Новый Массив;
	МассивВзаимодействий.Добавить(ТекущиеДокументПисьма);
	
	Взаимодействия.УстановитьПризнакРассмотрено(МассивВзаимодействий, Истина, Ложь);
	
КонецПроцедуры // ПеревестиПисьмоВРассмотрено()

&НаСервере
Функция СформироватьСобытиеПисьма(РежимЗаписи)
	
	Отказ = Ложь;
	
	// Проверка заполнения полей
	ПроверитьЗаполненияПолейВходящегоПисьма(Отказ);
	
	Если НЕ Отказ Тогда
		
		СпамПисьмо = (СтатусВходящегоКонтакта = Справочники.СтатусыСобытий.Спам);
		Событие = Неопределено;
		
		Если НЕ СпамПисьмо Тогда
			
			// Фиксируем событие
			Событие = ЗафиксироватьВзаимодействие(РежимЗаписи, ТекущиеДокументПисьма);
			
		КонецЕсли;
		
		Если СпамПисьмо ИЛИ (НЕ Событие = Неопределено И РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			
			// Отметим, что письмо рассмотрено
			ПеревестиПисьмоВРассмотрено();
			
			Элементы.СписокЭлектронныхПисем.Обновить();
			
			ФормированиеНовогоПисьма();
			
			ЗаполнитьДеревоПапок();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции // СформироватьСобытиеПисьма()

&НаКлиенте
Процедура ОтображатьСодержимое(Команда)
	
	Элементы.ОтображатьСодержимое.Пометка = НЕ Элементы.ОтображатьСодержимое.Пометка;
	Элементы.ПредпросмотрHTML.Видимость   = Элементы.ОтображатьСодержимое.Пометка;
	
КонецПроцедуры // ОтображатьСодержимое()

&НаКлиенте
Процедура СтатусВходящегоПисьмаПриИзменении(Элемент)
	
	Если СтатусВходящегоКонтакта = ПредопределенноеЗначение("Справочник.СтатусыСобытий.Переадресовано") Тогда
		Элементы.ПодразделениеКомпанииПисьма.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ПодразделениеКомпанииПисьма.ТолькоПросмотр = Истина;
		ПодразделениеКомпании = Неопределено;
		Менеджер              = Неопределено;
		СписокСотрудников.Очистить();
	КонецЕсли;
	
КонецПроцедуры // СтатусВходящегоПисьмаПриИзменении()

&НаКлиенте
Процедура ИнформацияОКлиентеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНайти(ДанныеСобытия.Href, "ОткрытьВсеЗаметки", НаправлениеПоиска.СКонца) > 0 Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Предмет", Контрагент);
		ОткрытьФорму("Справочник.Заметки.Форма.ЗаметкиПоПредмету", ПараметрыФормы);
	КонецЕсли;
	
	Если СтрНайти(ДанныеСобытия.Href, "ВсеКонтакты", НаправлениеПоиска.СКонца) > 0 Тогда
		ЗначениеОтбора = Новый Структура("Контрагент", Контрагент);
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Документ.Событие.ФормаСписка", ПараметрыВыбора);
	КонецЕсли;
	
	Если СтрНайти(ДанныеСобытия.Href, "ОткрытьСписокРекомендаций", НаправлениеПоиска.СКонца) > 0 Тогда
		
		Автомобили = ПолучитьАвтомобилиСНеВыполненнымиРекомендациями();
		
		СписокАвтомобилей = Новый СписокЗначений();
		СписокАвтомобилей.ЗагрузитьЗначения(Автомобили);
		
		ФиксНастройки = Новый НастройкиКомпоновкиДанных;
		ЭлементОтбора = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобиль");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокАвтомобилей;
		ЭлементОтбора.Использование = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксНастройки);
		
		ОткрытьФорму("РегистрСведений.РекомендацииПоАвтомобилю.ФормаСписка", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ДайМенеджераИзТекущейСтроки()
	
	Если ВидВходящегоТрафика = ПредопределенноеЗначение("Справочник.ВидыСобытий.ЭлектронноеОбращение") Тогда
		
		Возврат Элементы.СписокСотрудниковПисьма.ТекущиеДанные.Менеджер;
		
	КонецЕсли;
	
	Возврат Элементы.СписокСотрудников.ТекущиеДанные.Менеджер;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущегоМенеджера(ТекущийМенеджер, ВыбиратьСтатус = Истина)
	
	Менеджер = ТекущийМенеджер;	
	
	Если ВидВходящегоТрафика = ПредопределенноеЗначение("Справочник.ВидыСобытий.ВходящийЗвонок") Тогда
		
		ДобавитьВСписокПерезвонов(ВыбиратьСтатус);
		
	ИначеЕсли ВидВходящегоТрафика = ПредопределенноеЗначение("Справочник.ВидыСобытий.Встреча") Тогда
		
		СтатусВходящегоКонтакта = ПредопределенноеЗначение("Справочник.СтатусыСобытий.ПереданМенеджеру");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокПерезвонов(ВыбиратьСтатус)
	
	СтатусСоединен = ПредопределенноеЗначение("Справочник.СтатусыСобытий.Соединен");
	УсловиеПоиска = Новый Структура("Статус", СтатусСоединен);
	НайденСоединен = СписокПерезвонов.НайтиСтроки(УсловиеПоиска);
	
	Если НайденСоединен.Количество() > 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Клиент уже соединен с менеджером.'"));
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = СписокПерезвонов.Добавить();
	НоваяСтрока.Менеджер = Менеджер;
	НоваяСтрока.Период   = ОбщегоНазначенияКлиент.ДатаСеанса();
	Элементы.СписокПерезвонов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	Если ВыбиратьСтатус Тогда
		
		Элементы.СписокПерезвонов.ТекущийЭлемент = Элементы.СписокПерезвоновСтатус;
		Элементы.СписокПерезвонов.ИзменитьСтроку();
		
	Иначе
		
		НоваяСтрока.Статус = СтатусСоединен;
		СписокПерезвоновСтатусПриИзменении(Элементы.СписокПерезвоновСтатус);
		
	КонецЕсли;
	
	СтатусВходящегоКонтакта = Неопределено;
	Элементы.СтатусВходящегоЗвонка.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеУчетныеЗаписи(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
	               |ИЗ
	               |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПочту(Команда)
	
	ЗаполнитьДеревоПапок();
	РазвернутьДеревоПапок();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеПараметровДляШаблоновСообщений()
	
	СоответствиеПараметров = Новый Соответствие;
	СоответствиеПараметров.Вставить("Обращение", 			 Клиент);
	СоответствиеПараметров.Вставить("Клиент", 				 Контрагент);
	СоответствиеПараметров.Вставить("Телефон", 			  	 Телефон);
	СоответствиеПараметров.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	
	Возврат СоответствиеПараметров;
	
КонецФункции

#КонецОбласти


