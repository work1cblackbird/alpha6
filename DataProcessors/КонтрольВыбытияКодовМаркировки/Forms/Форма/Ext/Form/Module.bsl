#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СостоянияКМ = Новый Массив();
	СостоянияКМ.Добавить(Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа);
	СостоянияКМ.Добавить(Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия);
	СостоянияКМ.Добавить(Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику);
	ТаблицаДокументов.Параметры.УстановитьЗначениеПараметра("СостоянияКМ", СостоянияКМ);
	
	ТаблицаДокументов.Параметры.УстановитьЗначениеПараметра("СостоянияКМ", СостоянияКМ);
	
	ОтборОрганизация = ПараметрыСеанса.Организация;
	УстановитьОтборПоОрганизации();
	
	Элементы.ТаблицаДокументовОбновитьСостояниеУчастников.Видимость = 
		Константы.РежимОбменаСЧестнымЗнаком.Получить() = Перечисления.СпособыОбменаСЧестнымЗнаком.ЧерезAPI
		И ПравоДоступа("Изменение",  Метаданные.Справочники.Контрагенты);
	
	УстановитьУсловноеОформление();
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаДокументовПроверяемыйДокумент"
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПроверяемыйДокумент) Тогда
		СсылкаНаДокумент = Элемент.ТекущиеДанные.ПроверяемыйДокумент;
		ПоказатьЗначение(, СсылкаНаДокумент);
	ИначеЕсли Поле.Имя = "ТаблицаДокументовДокументВывода" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументВывода) Тогда
		СсылкаНаДокумент = Элемент.ТекущиеДанные.ДокументВывода;
		ПоказатьЗначение(, СсылкаНаДокумент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборДокВыводаПриИзменении(Элемент)
	
	ОтборДокВыводаПриИзмененииНаСервере();
	
	УстановитьОтборПоОрганизации();
	УстановитьОтборПоПодразделению();
	
	УстановитьОтборПоДатеОт();
	УстановитьОтборПоДатеДо();
	
	Элементы.ТаблицаДокументов.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОтборДокВыводаПриИзмененииНаСервере()
	
	Отбор = ТаблицаДокументов.Отбор;
	Отбор.Элементы.Очистить();
	
	Если ОтборДокВывода Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НетДокументаВывода");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ОтборДокВывода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекНаОплату(Команда)
	
	СсылкаДок = Элементы.ТаблицаДокументов.ТекущиеДанные.ПроверяемыйДокумент;
	Если ТипЗнч(СсылкаДок) <> Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ПараметрыФормы = Новый Структура("Основание", СсылкаДок);
		ОткрытьФорму("Документ.ЧекНаОплату.ФормаОбъекта", ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'На основании списания невозможно создать чек на оплату' ");
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаТоваровКодовМаркировки(Команда)
	
	СсылкаДок = Элементы.таблицадокументов.ТекущиеДанные.ПроверяемыйДокумент;
	Если ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ПараметрыФормы = Новый Структура("Основание,Участник", СсылкаДок, Ложь);
		ПараметрыФормы.Вставить("Основание", СсылкаДок);
		ПараметрыДляНеУчастника = Новый Структура;
		ПараметрыДляНеУчастника.Вставить("ВыводИзОборота", Истина);
		ПараметрыДляНеУчастника.Вставить(
			"ВидТоварооборота", ПредопределенноеЗначение("Перечисление.ВидыОтгрузкиТоваров.Продажа"));
		ПараметрыФормы.Вставить("ЗаполнениеДокументаНеучастиника", ПараметрыДляНеУчастника);
		ОткрытьФорму("Документ.ОтгрузкаТоваровКодовМаркировки.ФормаОбъекта", ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'На основании списания невозможно создать чек на оплату' ");
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводИзОборотаКодовМаркировки(Команда)
	
		СсылкаДок = Элементы.таблицадокументов.ТекущиеДанные.ПроверяемыйДокумент;
		ПараметрыФормы = Новый Структура("Основание", СсылкаДок);
		ОткрытьФорму("Документ.ВыводИзОборотаКодовМаркировки.ФормаОбъекта", ПараметрыФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	ТекЭлемент = Элементы.ТаблицаДокументов.ТекущийЭлемент;
	ТекДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекЭлемент.Имя = "ТаблицаДокументовПроверяемыйДокумент" И ЗначениеЗаполнено(ТекДанные.ПроверяемыйДокумент) Тогда
		СсылкаНаДокумент = ТекДанные.ПроверяемыйДокумент;
	ИначеЕсли ТекЭлемент.Имя = "ТаблицаДокументовДокументВывода" И ЗначениеЗаполнено(ТекДанные.ДокументВывода) Тогда
		СсылкаНаДокумент = ТекДанные.ДокументВывода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Документ", СсылкаНаДокумент);
		ОткрытьФорму("Обработка.ПодчиненныеДокументы.Форма", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеУчастников(Команда)
	
	Если НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Перед выполнением операции установите отбор по организации для выбора сертификата подписи'"));
		Возврат;
		
	КонецЕсли;
	
	СписокКонтрагентов = Новый Соответствие;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаДокументов.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Элементы.ТаблицаДокументов.ДанныеСтроки(ВыделеннаяСтрока);
		СписокКонтрагентов.Вставить(ТекущаяСтрока.Контрагент);
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", "ПолучитьСтатусыУчастниковГИСМТ");
	ДополнительныеПараметры.Вставить("СписокИНН", СписокКонтрагентов);
	ДополнительныеПараметры.Вставить("Организация", ОтборОрганизация);
	ДополнительныеПараметры.Вставить("ЗаполнятьИНН", Истина);
	ДополнительныеПараметры.Вставить("ПроверятьОбъект", Ложь);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("РезультатОбновленияСтатусаУчастника", ЭтотОбъект, "ПолучитьСтатусыУчастниковГИСМТ"));
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьДокумент(
		ЭтотОбъект,
		Неопределено,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделению()
	
	Если НЕ ЗначениеЗаполнено(ОтборПодразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			ТаблицаДокументов,
			"ПодразделениеКомпании");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТаблицаДокументов,
		"ПодразделениеКомпании",
		ОтборПодразделение,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		"Отбор по подразделению");
	КонецЕсли;
	
	Элементы.ТаблицаДокументов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ТаблицаДокументов, "Организация");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТаблицаДокументов,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		"Отбор по организации");
	КонецЕсли;
	
	Элементы.ТаблицаДокументов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПроверяемогоОтПриИзменении(Элемент)
	УстановитьОтборПоДатеОт();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДатеОт()
	
	Если НЕ ЗначениеЗаполнено(ОтборДатаПроверяемогоОт) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ТаблицаДокументов, "ДатаПровДок");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТаблицаДокументов,
		"ДатаПровДок",
		ОтборДатаПроверяемогоОт,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		"Отбор по дате проверяемого документа от");
	КонецЕсли;
	
	Элементы.ТаблицаДокументов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПроверяемогоДоПриИзменении(Элемент)
	УстановитьОтборПоДатеДо();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДатеДо()
	
	Если НЕ ЗначениеЗаполнено(ОтборДатаПроверяемогоДо) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ТаблицаДокументов, "ДатаПровДокДоп");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТаблицаДокументов,
		"ДатаПровДокДоп",
		ОтборДатаПроверяемогоДо,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		"Отбор по дате проверяемого документа до");
	КонецЕсли;
	
	Элементы.ТаблицаДокументов.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДокументовСтатусУчастникаГИСМТ");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокументов.ФормаСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокФормСобственности = Новый СписокЗначений();
	СписокФормСобственности.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
	СписокФормСобственности.Добавить(Перечисления.ФормыСобственности.ОбособленноеПодразделение);
	СписокФормСобственности.Добавить(Перечисления.ФормыСобственности.ПрочаяФормаСобственности);
	
	ОтборЭлемента.ПравоеЗначение = СписокФормСобственности;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<неучастник>'"));
	
КонецПроцедуры

// Обработчик события возникающего при получении статуса участника ГИС МТ из Честного знака.
//
// Параметры:
//  РезультатОбмена         - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура РезультатОбновленияСтатусаУчастника(РезультатОбмена, ДополнительныеПараметры) Экспорт
	
	// Обновиить отображение контрагента
	Элементы.ТаблицаДокументов.Обновить();
	
КонецПроцедуры // РезультатОбновленияСтатусаУчастника()

#КонецОбласти

