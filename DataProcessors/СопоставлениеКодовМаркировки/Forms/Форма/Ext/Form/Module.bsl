
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоПросмотр = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТолькоПросмотр", Ложь);
	Документ = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Документ");
	ЗакрытьФорму = Ложь;
	
	ЗаполнитьТаблицуКодовМаркировки(Параметры);
	
	СформироватьИтоговоеПредставление();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ ЗакрытьФорму Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ОбработчикОписания = Новый ОписаниеОповещения("Подключаемый_ЗакрытиеФормыБезСохранения", ЭтотОбъект);
		ПоказатьВопрос(
			ОбработчикОписания,
			НСтр("ru = 'Закрытие формы приведет к отмене изменений. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ ВводДоступен() ИЛИ ТолькоПросмотр Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ScanData" Тогда
		
		ШтрихКод = ШтрихкодированиеКлиент.ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр);
		
		ПараметрыДействия = Новый Структура;
		ШтрихкодированиеКлиент.ОбработатьПолныйШтрихкод(Штрихкод, ПараметрыДействия);
		Штрихкод = ПараметрыДействия.Штрихкод;
		
		ДобавитьНайтиМаркировку(ШтрихКод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКодовМаркировки

&НаКлиенте
Процедура СписокКодовМаркировкиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СписокКодовМаркировки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И НЕ ТекущиеДанные.ДобавленаСтрока Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Данная строка имеется в документе. Удаление запрещено'"),
			,,,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры // СписокКодовМаркировкиПередУдалением()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВвестиКодМаркировки(Команда)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ЗавершениеВводаКодаМаркировки", ЭтотОбъект);
	
	ПоказатьВводСтроки(
		ОбработкаОповещения,
		"",
		НСтр("ru = 'Введите код маркировки'"),
		200,
		Ложь
	);
	
КонецПроцедуры // ВвестиКодМаркировки()

&НаКлиенте
Процедура ЗагрузитьИзТСД(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ЗаполнениеИзТСД", ЭтотОбъект);
	
	ЗаполнениеДокументовКлиент.ЗагрузитьИзТСД(
		Неопределено,
		ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСопоставления(Команда)
	
	// Установим параметры для печати
	МенеджерПечати = "Обработка.СопоставлениеКодовМаркировки";
	
	ИменаМакетов = Новый Массив;
	ИменаМакетов.Добавить("СопоставлениеКодовМаркировки");
	
	// Установим параметры команды
	ПараметрКоманды = Новый Массив;
	ПараметрыПечати = Новый Структура("ЗаголовокФормы", НСтр("ru = 'Сопоставление кодов маркировки'"));
	ПараметрыПечати.Вставить("СписокКодовМаркировки", СписокКодовМаркировки);
	ПараметрыПечати.Вставить("Документ", Документ);
	
	// Добавляем пустую ссылку, так как этот параметр должен иметь ссылочный тип,
	// но абсолютно не влияет на поведение печатной формы.
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	// Выведем на печатную форму
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		МенеджерПечати,
		ИменаМакетов,
		ПараметрКоманды,
		Неопределено,
		ПараметрыПечати
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Модифицированность = Ложь;
	Закрыть(РезультатСопоставления());
	
КонецПроцедуры // Применить()

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	УстановитьВсе = (Команда.Имя = "ВыбратьВсе");
	
	Для Каждого ТекущаяСтрока Из СписокКодовМаркировки Цикл
		ТекущаяСтрока.ВыборСтроки = УстановитьВсе;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершение ввода кода маркировки
//
// Параметры:
//  Результат				 - Строка - Введенный код маркировки
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры процедуры
//
&НаКлиенте
Процедура Подключаемый_ЗавершениеВводаКодаМаркировки(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено
		ИЛИ ПустаяСтрока(Результат) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьНайтиМаркировку(Результат, Ложь);
	
КонецПроцедуры // Подключаемый_ЗавершениеВводаКодаМаркировки()

// Завершение выгрузки данных из ТСД
//
// Параметры:
//  Результат				 - Структура - Данные выгрузки из ТСД
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры процедуры
//
&НаКлиенте
Процедура Подключаемый_ЗаполнениеИзТСД(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьИзТСДНаСервере(Результат);
	
КонецПроцедуры // Подключаемый_ЗаполнениеИзТСД()

&НаСервере
Процедура УстановитьПризнакПодтвержденияКодаМаркировки()
	
	Для Каждого ТекущаяСтрока Из СписокКодовМаркировки Цикл
		
		ТекущаяСтрока.КартинкаМаркировки = ?(
			ТекущаяСтрока.Подтверждено,
			БиблиотекаКартинок.ОформлениеЗнакФлажок,
			БиблиотекаКартинок.ОформлениеЗнакКрест
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.ВыборСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.ВыборСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.ДобавленаСтрока");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.АнтикБелый);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.ДобавленаСтрока");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКодовМаркировки.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКодовМаркировки(ДанныеДокумента)
	
	ТаблицаТоваров = ПолучитьЗначениеПараметраСтруктуры(ДанныеДокумента, "Товары", Новый Массив);
	ТаблицаКодовМаркировки = ПолучитьЗначениеПараметраСтруктуры(ДанныеДокумента, "КодыМаркировки", Новый Массив);
	
	ЕстьХарактеристика = Ложь;
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	НовыеКодыМаркировки = Новый Массив;
	
	Для Каждого ТекущийКодМаркировки Из ТаблицаКодовМаркировки Цикл
		
		НоваяСтрока = СписокКодовМаркировки.Добавить();
		НоваяСтрока.КодМаркировки = ТекущийКодМаркировки.КодМаркировки;
		НоваяСтрока.Подтверждено = ТекущийКодМаркировки.Подтверждено;
		
		// Поиск товаров
		СтруктураПоиска.ИдентификаторТовара = ТекущийКодМаркировки.ИдентификаторТовара;
		НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.Номенклатура = НайденныеСтроки[0].Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = НайденныеСтроки[0].ХарактеристикаНоменклатуры;
			
			Если ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНоменклатуры) Тогда
				ЕстьХарактеристика = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.ДобавленаСтрока = НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.ИдентификаторТовара);
		НоваяСтрока.ВыборСтроки = Истина;
		
		// Разберем маркировку
		НоваяСтрока.КлючМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(НоваяСтрока.КодМаркировки);
		
		Если НоваяСтрока.ДобавленаСтрока Тогда
			НовыеКодыМаркировки.Добавить(НоваяСтрока.КодМаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыеКодыМаркировки.Количество() > 0 Тогда
		
		СтруктураПоиска = Новый Структура("КодМаркировки");
		
		// Найдем номенклатуру и подставим
		ТаблицаОбъектов = НоменлатураПоКодуМаркировки(НовыеКодыМаркировки);
		
		Для Каждого ТекущийКод Из НовыеКодыМаркировки Цикл
			
			СтруктураПоиска.КодМаркировки = ТекущийКод;
			
			НайденнаяНоменклатура = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
			
			Если НайденнаяНоменклатура.Количество() > 0 Тогда
				
				НайденныеСтроки = СписокКодовМаркировки.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки[0].Номенклатура = НайденнаяНоменклатура[0].Объект;
				НайденныеСтроки[0].ХарактеристикаНоменклатуры = НайденнаяНоменклатура[0].ХарактеристикаНоменклатуры;
				
				Если ЗначениеЗаполнено(НайденныеСтроки[0].ХарактеристикаНоменклатуры) Тогда
					ЕстьХарактеристика = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СписокКодовМаркировкиХарактеристикаНоменклатуры.Видимость = ЕстьХарактеристика;
	
	УстановитьПризнакПодтвержденияКодаМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИтоговоеПредставление()
	
	НайденныеСтроки = СписокКодовМаркировки.НайтиСтроки(
		Новый Структура("ВыборСтроки,Подтверждено", Истина, Истина));
	Подтверждено = НайденныеСтроки.Количество();
	
	НайденныеСтроки = СписокКодовМаркировки.НайтиСтроки(
		Новый Структура("ВыборСтроки,Подтверждено", Истина, Ложь));
	НеПодтверждено = НайденныеСтроки.Количество();
	
	НайденныеСтроки = СписокКодовМаркировки.НайтиСтроки(
		Новый Структура("ДобавленаСтрока", Истина));
	НовыеСтроки = НайденныеСтроки.Количество();
	
	Элементы.НадписьРезультатаСопоставления.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего: %1 Подтверждено: %2 Не подтверждено: %3 Новые строки: %4'"),
			СписокКодовМаркировки.Количество(),
			Подтверждено,
			НеПодтверждено,
			НовыеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура НайтиМаркировкуВСписке(
	СчитанныйКод,
	Номенклатура = Неопределено,
	Характеристика = Неопределено,
	Сканер = Ложь)
	
	СообщениеРазбораКМ = "";
	КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СчитанныйКод, СообщениеРазбораКМ);
	
	Если НЕ ПустаяСтрока(СообщениеРазбораКМ) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СообщениеРазбораКМ);
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("КлючМаркировки", КодМаркировки);
	НайденнаяСтрока = СписокКодовМаркировки.НайтиСтроки(СтруктураПоиска);
	
	// Поиск без скобок
	Если НайденнаяСтрока.Количество() = 0 Тогда
		
		СтрокаПоиска = СтрЗаменить(КодМаркировки, "(01)", "01");
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "(21)", "21");
		
		СтруктураПоиска.Вставить("КлючМаркировки", СтрокаПоиска);
		НайденнаяСтрока = СписокКодовМаркировки.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли;
	
	Если НайденнаяСтрока.Количество() = 0 Тогда
		НоваяСтрока = СписокКодовМаркировки.Добавить();
		НоваяСтрока.КодМаркировки = КодМаркировки;
		НоваяСтрока.Подтверждено = Истина;
		НоваяСтрока.СчитанныйКодМаркировки = КодМаркировки;
		НоваяСтрока.ДобавленаСтрока = Истина;
		НоваяСтрока.ВыборСтроки = Сканер;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
			
			Если ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНоменклатуры) Тогда
				Элементы.СписокКодовМаркировкиХарактеристикаНоменклатуры.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если НайденнаяСтрока[0].Подтверждено Тогда
			Возврат;
		КонецЕсли;
		
		НайденнаяСтрока[0].Подтверждено = Истина;
		НайденнаяСтрока[0].СчитанныйКодМаркировки = КодМаркировки;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СформироватьИтоговоеПредставление();
	УстановитьПризнакПодтвержденияКодаМаркировки();
	
КонецПроцедуры // НайтиМаркировкуВСписке()

&НаСервере
Процедура ЗагрузитьИзТСДНаСервере(РезультатЗагрузки)
	
	Если НЕ (РезультатЗагрузки.Свойство("ТаблицаТоваров") 
		И ТипЗнч(РезультатЗагрузки.ТаблицаТоваров) = Тип("Массив")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из РезультатЗагрузки.ТаблицаТоваров Цикл
		
		Если СтрокаТоваров.ШтрихКод = "" Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск объектов по штрихкоду.
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(СтрокаТоваров.ШтрихКод ,, Истина);
		
		Если ОбъектыПоШтрихкоду.Количество() = 0 Тогда
			НайтиМаркировкуВСписке(
				СтрокаТоваров.Штрихкод);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОбъектПоШтрихкоду Из ОбъектыПоШтрихкоду Цикл
			
			Если ОбъектПоШтрихкоду.Запрет Тогда
				Продолжить;
			КонецЕсли;
			
			НайтиМаркировкуВСписке(
				?(ЗначениеЗаполнено(ОбъектПоШтрихкоду.КодМаркировки), ОбъектПоШтрихкоду.КодМаркировки, ОбъектПоШтрихкоду.Штрихкод),
				ОбъектПоШтрихкоду.Объект,
				ОбъектПоШтрихкоду.ХарактеристикаНоменклатуры);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РезультатСопоставления()
	
	Возврат ПоместитьВоВременноеХранилище(СписокКодовМаркировки.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗакрытиеФормыБезСохранения(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НоменлатураПоКодуМаркировки(СписокШтрихКодов)
	
	Возврат ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(СписокШтрихКодов ,, Истина);
	
КонецФункции

&НаСервере
Процедура ДобавитьНайтиМаркировку(ШтрихКод, Сканером = Истина)
	
	Номенклатура = Неопределено;
	ХарактеристикаНоменклатуры = Неопределено;
	
	// Получим номенклатуру по КМ
	ТаблицаНоменклтатуры = НоменлатураПоКодуМаркировки(ШтрихКод);
	
	Если ТаблицаНоменклтатуры.Количество() > 0 Тогда
		Номенклатура = ТаблицаНоменклтатуры[0].Объект;
		ХарактеристикаНоменклатуры = ТаблицаНоменклтатуры[0].ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	НайтиМаркировкуВСписке(ШтрихКод, Номенклатура, ХарактеристикаНоменклатуры, Сканером);
	
КонецПроцедуры

#КонецОбласти
