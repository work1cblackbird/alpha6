
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УзелОбмена = Параметры.УзелОбмена;
	Параметры.НастройкаОтборовНаУзле =
		ОбменДаннымиСервер.НастройкаОтборовНаУзле("УдаленныеПодразделения", Параметры.ВерсияКорреспондента, "");
	
	ОбменДаннымиСервер.ФормаНастройкиУзлаПриСозданииНаСервере(ЭтотОбъект, "УдаленныеПодразделения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОтборПоПодразделениямПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Отказ = Ложь;
	
	// Создадим структуру отбора для проверки уникальности реквизитов
	ПоляПоискаДублей = Новый Структура();
	ПоляПоискаДублей.Вставить("ПодразделениеКомпании");

	// Подготовим списки для накопления сведений о дублирующихся строках
	СписокНайденныхДублей = Новый Массив;
	ОбработанныеСтроки    = Новый Соответствие;
		
	// Идем по табличной части
	Для каждого СтрокаТабличнойЧасти Из Подразделения Цикл
		
		// Пропустим строки уже попавшие в черный список
		Если НЕ ОбработанныеСтроки.Получить(СтрокаТабличнойЧасти)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Производим поиск строк удовлетворяющих структуре отбора
		ЗаполнитьЗначенияСвойств(ПоляПоискаДублей, СтрокаТабличнойЧасти);
		НайденныеСтроки = Подразделения.НайтиСтроки(ПоляПоискаДублей);
		
		// Если нашли и их больше 1, то строки не уникальные
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			НомераСтрокДублей = "";
			Для каждого НайденныйДубль Из НайденныеСтроки Цикл
				НомераСтрокДублей = НомераСтрокДублей + ", " + СокрЛП(НайденныйДубль.ПодразделениеКомпании);
				ОбработанныеСтроки.Вставить(НайденныйДубль, ИСТИНА);
			КонецЦикла;
			
			// Запоминаем номера найденных дублей
			СписокНайденныхДублей.Добавить(Сред(НомераСтрокДублей, 3));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим сведения о найденных дублях по текущему ключу поиска
	Если СписокНайденныхДублей.Количество() > 0 Тогда
		
		// Информируем пользователя о найденной коллизии
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Строки таблицы ""Подразделения"" не уникальны по значению поля ""Подразделение компании""'"),
			,
			"ПодразделениеКомпании",
			,
			Отказ
		);
	КонецЕсли;
	
	// Обработаем незаполненные строки
	ПоляПоиска = Новый Структура();
	ПоляПоиска.Вставить("ПодразделениеКомпании",ПредопределенноеЗначение("Справочник.ПодразделенияКомпании.ПустаяСсылка"));
	НайденныеСтроки = Подразделения.НайтиСтроки(ПоляПоиска);
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		// Информируем пользователя о найденной коллизии
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Подразделения компании"" в списке ""Подразделения""'"),
			,
			"ПодразделениеКомпании",
			,
			Отказ
		);
		
	КонецЕсли;
	
	ЗавершитьНастройкуСинхронизацииДанных();
	
	Если НЕ Отказ Тогда
		ПодтвердитьИЗакрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбменДаннымиКлиент.ФормаНастройкиУзлаКомандаЗакрытьФорму(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.СтраницаПодразделения.Видимость = ИспользоватьОтборПоПодразделениям;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьНастройкуСинхронизацииДанных()
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("РежимПроведенияПоПартиям", РежимПроведенияПоПартиям);
	ДанныеЗаполнения.Вставить("ИспользоватьОтборПоПодразделениям", ИспользоватьОтборПоПодразделениям);
	ДанныеЗаполнения.Вставить("Подразделения", Подразделения.Выгрузить());
	
	Корреспондент = УзелОбмена.ПолучитьОбъект();
	ПланыОбмена.УдаленныеПодразделения.ПриСохраненииНастроекСинхронизацииДанных(Корреспондент, ДанныеЗаполнения);
	Корреспондент.Записать();
	
	ОбменДаннымиСервер.ЗавершитьНастройкуСинхронизацииДанных(УзелОбмена);
	
КонецПроцедуры

#КонецОбласти
