// Модуль менеджера документа "Рабочий лист"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Выполняем перенос данных при обновлении
// 
Процедура ПеренестиДанныеИзДругихВариантовВИсториюПодбора() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочийЛистИсторияПодбора.Ссылка КАК РабочийЛист,
		|	РабочийЛистИсторияПодбора.НомерСтроки КАК НомерСтроки,
		|	РабочийЛистИсторияПодбора.УдалитьАвтомобиль КАК Автомобиль,
		|	РабочийЛистИсторияПодбора.ДатаЗаписи КАК Создана,
		|	РабочийЛистИсторияПодбора.Автор КАК Автор
		|ИЗ
		|	Документ.РабочийЛист.ИсторияПодбора КАК РабочийЛистИсторияПодбора
		|ГДЕ
		|	РабочийЛистИсторияПодбора.УдалитьАвтомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
		|ИТОГИ ПО
		|	РабочийЛист"
	);
	РабочиеЛистыКОбновлению = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	Попытка
	
		Пока РабочиеЛистыКОбновлению.Следующий() Цикл
			
			СтрокиРабочегоЛистаКПереносу = РабочиеЛистыКОбновлению.Выбрать();
			РабочийЛист = РабочиеЛистыКОбновлению.РабочийЛист.ПолучитьОбъект();
			РабочийЛист.Заблокировать();
			СобытияИсторииПодбораКУдалению = Новый Массив();
			
			Пока СтрокиРабочегоЛистаКПереносу.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(РабочийЛист.ДругиеВарианты.Добавить(), СтрокиРабочегоЛистаКПереносу,, "НомерСтроки");
				НайденныеСтрокиИсторииПодбора = РабочийЛист
					.ИсторияПодбора
					.НайтиСтроки(
						Новый Структура(
							"НомерСтроки,УдалитьАвтомобиль",
							СтрокиРабочегоЛистаКПереносу.НомерСтроки,
							СтрокиРабочегоЛистаКПереносу.Автомобиль
						)
					);
					
				Для Каждого Событие Из НайденныеСтрокиИсторииПодбора Цикл
					
					СобытияИсторииПодбораКУдалению.Добавить(Событие);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого Событие Из СобытияИсторииПодбораКУдалению Цикл
				
				РабочийЛист.ИсторияПодбора.Удалить(Событие);
				
			КонецЦикла;
			
			РабочийЛист.ОбменДанными.Загрузка = Истина;
			РабочийЛист.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление ИБ.Рабочий лист'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РабочийЛист.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось обновить рабочие листы. Подробнее в журнале регистрации'");
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняем перенос данных предполагаемого срока
// 
Процедура ПеренестиДанныеПредполагаемыйСрок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочийЛист.Ссылка КАК Ссылка,
		|	РабочийЛист.УдалитьПредполагаемыйСрок КАК УдалитьПредполагаемыйСрок
		|ИЗ
		|	Документ.РабочийЛист КАК РабочийЛист
		|ГДЕ
		|	РабочийЛист.УдалитьПредполагаемыйСрок <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			РабочийЛист = Выборка.Ссылка.ПолучитьОбъект();
			РабочийЛист.Заблокировать();
			
			РабочийЛист.ПредполагаемыйСрок = Перечисления.ВидыСроковОжидания[Выборка.УдалитьПредполагаемыйСрок];
			
			РабочийЛист.ОбменДанными.Загрузка = Истина;
			РабочийЛист.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление ИБ.Рабочий лист'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РабочийЛист.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось обновить рабочие листы. Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ПредставлениеДокумента = Новый Массив;
	ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'РЛ №%1 от %2'"), СокрЛП(Данные.Номер),
		Формат(Данные.Дата, "ДФ='dd.MM.yyyy'")));
	ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'клиент <%1>'"), ?(ЗначениеЗаполнено(Данные.Контрагент),
		Данные.Контрагент, Данные.ОбращениеККлиенту)));
	
	Если ЗначениеЗаполнено(Данные.Модель) ИЛИ ЗначениеЗаполнено(Данные.Марка) Тогда
		ПредставлениеДокумента.Добавить(СтрШаблон(НСтр("ru = 'автомобиль <%1>'"), ?(ЗначениеЗаполнено(Данные.Модель),
			Данные.Модель, Данные.Марка)));
	КонецЕсли;
	
	Представление = СтрСоединить(ПредставлениеДокумента, "; ");
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Контрагент");
	Поля.Добавить("ОбращениеККлиенту");
	Поля.Добавить("Модель");
	Поля.Добавить("Марка");
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.СуммаВсегоАвтомобилей + Объект.Опции.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.СуммаНДСАвтомобилей + Объект.Опции.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая строка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "",
	Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции

Процедура ЗаполнитьОпцииПоАвтомобилю(Объект, ПараметрыДействия = Неопределено)
	
	// если указан автомобиль то заполним список доступных опций
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		
		// Перезаполним опциями по регистру комплектации
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОпцииАвтомобилей.Опция,
		|	ОпцииАвтомобилей.Количество
		|ИЗ
		|	РегистрСведений.ОпцииАвтомобилей КАК ОпцииАвтомобилей
		|ГДЕ
		|	ОпцииАвтомобилей.Автомобиль = &Автомобиль
		|	И ОпцииАвтомобилей.ЗаписьАктивна = ИСТИНА";
		Запрос.УстановитьПараметр("Автомобиль", Объект.Автомобиль);
		ОпцииКомплектации = Запрос.Выполнить().Выгрузить();
		
		Объект.Опции.Очистить();
		
		Для Каждого ОпцияАвтомобиля Из ОпцииКомплектации Цикл
			
			НоваяОпция                         = Объект.Опции.Добавить();
			НоваяОпция.Опция                   = ОпцияАвтомобиля.Опция;
			НоваяОпция.Количество              = ОпцияАвтомобиля.Количество;
			ОпцииОпцияПриИзменении(Объект, НоваяОпция);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтомобильРассчитатьСумму(ТочкаВхода, Объект, ПараметрыДействия)
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчет суммы от суммы всего
	Если ТочкаВхода = "СуммаВсегоАвтомобилей" Тогда
		Если ПараметрыДействия.Свойство("ТипЦен") Тогда
			ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
		ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
			ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
		Иначе
			ЦенаВключаетНДС = Истина;
		КонецЕсли;
		
		СтавкаНДС = Объект.СтавкаНДСАвтомобилей;
		
		СтавкаНДС = СтавкаНДС.Ставка;
		
		// посчитаем сумму ндс с себестоимостью
		Себестоимость  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость", 0);
		СуммаНДС       = Окр((Макс(Объект.СуммаВсегоАвтомобилей - Себестоимость, 0) * СтавкаНДС)/(100 + СтавкаНДС),2);
		СуммаРасчетная = ?(ЦенаВключаетНДС, Объект.СуммаВсегоАвтомобилей, Объект.СуммаВсегоАвтомобилей - СуммаНДС);
		
		Объект.СуммаАвтомобилей = Окр(СуммаРасчетная, 2);
		
		// Рассчитываем новую сумму НДС.
		СуммаВсегоБезСкидки = Объект.СуммаАвтомобилей;
		
		Если НЕ Себестоимость = 0 Тогда
			СуммаВсегоБезСкидки = Макс(СуммаВсегоБезСкидки - Себестоимость, 0);
		КонецЕсли;
		
		Если ЦенаВключаетНДС Тогда
			Объект.СуммаНДСАвтомобилей = Окр((СуммаВсегоБезСкидки * СтавкаНДС)/(100 + СтавкаНДС),2);
		Иначе
			Объект.СуммаНДСАвтомобилей = Окр(СуммаВсегоБезСкидки * СтавкаНДС / 100,2);
		КонецЕсли;
	КонецЕсли;
	
	Если (ТочкаВхода = "СуммаАвтомобилей" ИЛИ ТочкаВхода = "СуммаВсегоАвтомобилей") Тогда
		Объект.ЦенаАвтомобилей = Объект.СуммаАвтомобилей;
	КонецЕсли;
	
	// расчет суммы от цены
	Если (ТочкаВхода = "Количество" ИЛИ	ТочкаВхода = "Цена") Тогда
		
		Объект.СуммаАвтомобилей = Объект.ЦенаАвтомобилей * Объект.КоличествоАвтомобилей;
		
	КонецЕсли;
	
	// расчет суммы всего и суммы НДС
	Если (ТочкаВхода = "Количество" ИЛИ ТочкаВхода = "Цена" ИЛИ ТочкаВхода = "СуммаАвтомобилей") Тогда
		
			// получим показатель расчета из типа цен
			Если ПараметрыДействия.Свойство("ТипЦен") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			СуммаРасчетная = Объект.СуммаАвтомобилей;
			Себестоимость  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость", 0);
			
			СуммаРасчетная = Макс(СуммаРасчетная - Себестоимость, 0);
			
			Если ЦенаВключаетНДС Тогда
				Объект.СуммаВсегоАвтомобилей = Объект.СуммаАвтомобилей;
				Объект.СуммаНДСАвтомобилей   = Окр((СуммаРасчетная * Объект.СтавкаНДСАвтомобилей.Ставка)/(100 + Объект.СтавкаНДСАвтомобилей.Ставка), 2);
			Иначе
				Объект.СуммаНДСАвтомобилей   = Окр((СуммаРасчетная * Объект.СтавкаНДСАвтомобилей.Ставка)/100, 2);
				Объект.СуммаВсегоАвтомобилей = Объект.СуммаАвтомобилей + Объект.СуммаНДСАвтомобилей;
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеАвтомобиль(Объект, ПараметрыДействия = Неопределено)
	
	// заполним "количество"
	Если Объект.КоличествоАвтомобилей = 0 Тогда
		Объект.КоличествоАвтомобилей = 1;
		ПараметрыДействия.Вставить("ИзменилосьКоличество", Истина);
	КонецЕсли;
	
	// заполним ставки НДС  
	Объект.СтавкаНДСАвтомобилей = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
	
КонецПроцедуры

Процедура УстановитьЦенуНаАвтомобиль(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// установим цену автомобиля
	Если Объект.Автомобиль.Пустая() Тогда
		Объект.ЦенаАвтомобилей = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
			Объект.ТипЦен,
			Объект.Модель,
			Объект.ВариантКомплектации,
			,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента
		);
	Иначе
		Объект.ЦенаАвтомобилей = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
			Объект.ТипЦен,
			Объект.Автомобиль,
			,
			,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента
		);
	КонецЕсли;
	
КонецПроцедуры

// Подчиненные рабочие листы кредитного отдела и рабочий лист отдела страхования
//
// Параметры:
//  Объект	 - ДокументСсылка.РабочийЛист - Рабочий лист, на основании которого введены документы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список подчиненных документов.
//
Функция ПодчиненныеДокументыРабочегоЛиста(Объект) Экспорт
	
	ЗапросПодчиненных = Новый Запрос();
	ЗапросПодчиненных.УстановитьПараметр("Ссылка",     Объект.Ссылка);
	ЗапросПодчиненных.УстановитьПараметр("Контрагент", Объект.Контрагент);
	ЗапросПодчиненных.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочийЛистКредитногоОтдела.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РабочийЛистКредитногоОтдела КАК РабочийЛистКредитногоОтдела
	|ГДЕ
	|	РабочийЛистКредитногоОтдела.ДокументОснование = &Ссылка
	|	И РабочийЛистКредитногоОтдела.Клиент <> &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РабочийЛистОтделаСтрахования.Ссылка
	|ИЗ
	|	Документ.РабочийЛистОтделаСтрахования КАК РабочийЛистОтделаСтрахования
	|ГДЕ
	|	РабочийЛистОтделаСтрахования.ДокументОснование = &Ссылка
	|	И РабочийЛистОтделаСтрахования.Страхователь <> &Контрагент";
	
	Возврат ЗапросПодчиненных.Выполнить().Выгрузить();
	
КонецФункции // ПодчиненныеДокументыРабочегоЛиста()

// Устанавливает единого контрагента во всех подчиненных документах
//
Процедура УстановитьЕдиногоКонтрагента(Объект, ПодчиненныеДокументы) Экспорт
	
	Для Каждого ТекСтрока Из ПодчиненныеДокументы Цикл
		
		ПодчиненныйОбъект = ТекСтрока.Ссылка.ПолучитьОбъект();
		ПодчиненныйОбъект.Заблокировать();
		
		Если ПодчиненныйОбъект <> Неопределено Тогда
			
			Если ТипЗнч(ПодчиненныйОбъект)=Тип("ДокументОбъект.РабочийЛистКредитногоОтдела") Тогда
				ПодчиненныйОбъект.Клиент = Объект.Контрагент;
			ИначеЕсли ТипЗнч(ПодчиненныйОбъект)=Тип("ДокументОбъект.РабочийЛистОтделаСтрахования") Тогда
				ПодчиненныйОбъект.Страхователь = Объект.Контрагент;
			ИначеЕсли ТипЗнч(ПодчиненныйОбъект)=Тип("ДокументОбъект.Событие") Тогда
				ПодчиненныйОбъект.Контрагент = Объект.Контрагент;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Попытка
				ПодчиненныйОбъект.Записать();
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьЕдиногоКонтрагента()

Функция ДокументРезервированияАвтомобиля(Автомобиль) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(, Автомобиль = &Автомобиль) КАК ЗаказыАвтомобилейОстатки
	|ГДЕ
	|	ЗаказыАвтомобилейОстатки.РезервОстаток > 0";
	
	Запрос = Новый запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Автомобиль" ,  Автомобиль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Заказ;
	
КонецФункции // ДокументРезервированияАвтомобиля()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ОбращениеККлиенту");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	
	ОбязательныеРеквизиты.Добавить("Возражения.Возражение");
	ОбязательныеРеквизиты.Добавить("Опции.Количество");
	ОбязательныеРеквизиты.Добавить("Пользователи.Пользователь");
	
	Если Объект.Статус = Справочники.СтатусыРабочегоЛиста.Отказ
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Статус, "ПричинаОтказаОбязательна") Тогда
		ОбязательныеРеквизиты.Добавить("ПричинаОтказа");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы Опции
	УникальныеОпции = Новый Массив();
	УникальныеОпции.Добавить("Опция");
	
	// Уникальные поля таблицы Пользователи
	УникальныеПользователи = Новый Массив();
	УникальныеПользователи.Добавить("Пользователь");
	
	// Уникальные поля таблицы Возражения
	УникальныеВозражения = Новый Массив();
	УникальныеВозражения.Добавить("Возражение");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Опции", УникальныеОпции);
	УникальныеРеквизиты.Вставить("Пользователи", УникальныеПользователи);
	УникальныеРеквизиты.Вставить("Возражения", УникальныеВозражения);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Сохраним значения так как они будут затерты в ОбработкаПересчетаПоказателейОбъекта,
	// а нам эти данные потребуються для пересчета суммы документа.
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	СуммаДокумента       = Объект.СуммаДокумента;
	
	ОбновитьЦеныОпций(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	Если ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс * НовыйКурс) = 0 ИЛИ СтарыйКурс = НовыйКурс Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Объект.ЦенаАвтомобилей = РаботаСКурсамиВалютПлатформа.ПересчетПоКурсу(
			Объект.ЦенаАвтомобилей,
			СтарыйКурс,
			Объект.КурсДокумента
		);
		АвтомобильЦенаПриИзменении(Объект, ПараметрыДействия);		
		Объект.СуммаДокумента = Окр(СуммаДокумента * СтарыйКурс / НовыйКурс, 2);
		СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Объект.ИсточникИнформации = Объект.Контрагент.РекламныйИсточник;
		Объект.ФормаСобственности = Объект.Контрагент.ФормаСобственности;
		
		Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			
			Объект.ПолКлиента = Объект.Контрагент.Пол;
			
		Иначе
			
			Объект.ПолКлиента = Перечисления.ПолФизическихЛиц.НеУказан;
			
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.ОбращениеККлиенту) Тогда
			
			Объект.ОбращениеККлиенту = Объект.Контрагент.Наименование;
			
		КонецЕсли;
		
		// Заполняет системные поля телефона и электронной почты в документе
		УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьКонтактнуюИнформациюВДокументе(
			Объект,
			Объект.Контрагент,
			ПараметрыДействия
		);
		
	Иначе
		
		Объект.ИсточникИнформации           = Неопределено;
		Объект.ФормаСобственности           = Неопределено;
		Объект.ПолКлиента                   = Перечисления.ПолФизическихЛиц.НеУказан;
		Объект.ПредставлениеТелефона        = "";
		Объект.АдресЭлектроннойПочты        = "";
		Объект.ПредставлениеТелефонаСтрокой = "";
		Объект.АдресЭлектроннойПочтыСтрокой = "";
		Объект.ОбращениеККлиенту            = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма документов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

#КонецОбласти

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить(
		"Себестоимость",
		АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект)
	);
	ОбработатьИзменениеАвтомобиль(Объект, ПараметрыДействия);
	УстановитьЦенуНаАвтомобиль(Объект, ПараметрыДействия);
	ЗаполнитьОпцииПоАвтомобилю(Объект, ПараметрыДействия);
	АвтомобильРассчитатьСумму("Цена", Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Марка автомобиля"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МаркаАвтомобиляПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) И Объект.Автомобиль.Марка <> Объект.Марка Тогда
		Объект.Автомобиль	= Справочники.Автомобили.ПустаяСсылка();
		Объект.Модель		= Справочники.Модели.ПустаяСсылка();
		АвтомобильПриИзменении(Объект, ПараметрыДействия);
	Иначе
		Объект.Модель		= Справочники.Модели.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.ВариантКомплектации.Владелец <> Объект.Модель Тогда
		Объект.ВариантКомплектации	= Справочники.ВариантыКомплектации.ПустаяСсылка();
		ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// изменение авто
	ОбработатьИзменениеАвтомобиль(Объект, ПараметрыДействия);
	
	// цена на авто
	УстановитьЦенуНаАвтомобиль(Объект, ПараметрыДействия);
	
	// заполним тч "Опции"
	ЗаполнитьОпцииПоАвтомобилю(Объект, ПараметрыДействия);
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("Цена", Объект, ПараметрыДействия);
	
КонецПроцедуры // МодельПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Модель"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МодельПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если
		ЗначениеЗаполнено(Объект.Автомобиль)
		И ЗначениеЗаполнено(Объект.Модель)
		И Объект.Автомобиль.Модель <> Объект.Модель
	Тогда
		
		Объект.Автомобиль	= Справочники.Автомобили.ПустаяСсылка();
		АвтомобильПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	Если Объект.ВариантКомплектации.Владелец <> Объект.Модель Тогда
		
		Объект.ВариантКомплектации	= Справочники.ВариантыКомплектации.ПустаяСсылка();
		ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// изменение авто
	ОбработатьИзменениеАвтомобиль(Объект, ПараметрыДействия);
	
	// цена на авто
	УстановитьЦенуНаАвтомобиль(Объект, ПараметрыДействия);
	
	// заполним тч "Опции"
	ЗаполнитьОпцииПоАвтомобилю(Объект, ПараметрыДействия);
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("Цена", Объект, ПараметрыДействия);
	
КонецПроцедуры // МодельПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вариант комплектации"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.Автомобиль.ВариантКомплектации <> Объект.ВариантКомплектации Тогда
		Объект.Автомобиль = Справочники.Автомобили.ПустаяСсылка();
		АвтомобильПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
		Если Объект.ВариантКомплектации.Владелец <> Объект.Модель Тогда
			Модель = Объект.ВариантКомплектации.Владелец;
			МодельПриИзменении(Объект, ПараметрыДействия)
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// изменение авто
	ОбработатьИзменениеАвтомобиль(Объект, ПараметрыДействия);
	
	// цена на авто
	УстановитьЦенуНаАвтомобиль(Объект, ПараметрыДействия);
	
	// заполним тч "Опции"
	ЗаполнитьОпцииПоАвтомобилю(Объект, ПараметрыДействия);
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("Цена", Объект, ПараметрыДействия);
	
КонецПроцедуры // ВариантКомплектацииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена автомобилей"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильЦенаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("Цена", Объект, ПараметрыДействия);
	
КонецПроцедуры // АвтомобильЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество автомобилей"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильКоличествоПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("Количество", Объект, ПараметрыДействия);
	
	// Пересчет суммы закупки
	АвтомобильТипЦенЗакупкиПриИзменении(Объект,ПараметрыДействия);
	
КонецПроцедуры  // АвтомобильКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма на автомобили"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильСуммаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("СуммаАвтомобилей", Объект, ПараметрыДействия);
	
КонецПроцедуры // АвтомобильСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильСуммаВсегоПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("СуммаВсегоАвтомобилей", Объект, ПараметрыДействия);
	
КонецПроцедуры // АвтомобильСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС на автомобили"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильСтавкаНДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("Себестоимость", АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект));
	
	// расчитаем сумму по строке
	АвтомобильРассчитатьСумму("Цена", Объект, ПараметрыДействия);
	
КонецПроцедуры // АвтомобильСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС на автомобили"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильТипЦенЗакупкиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// установим цену закупки автомобиля
	НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
	Если Объект.Автомобиль.Пустая() Тогда
		ЦенаЗакупки = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦенЗакупки, Объект.Модель,
			Объект.ВариантКомплектации, НаМомент, Объект.ВалютаДокумента, Объект.КурсДокумента);
	Иначе
		ЦенаЗакупки = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦенЗакупки, Объект.Автомобиль,, НаМомент,
			Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЕсли;
	
	// Пересчет суммы закупки
	Объект.СуммаЗакупки = ЦенаЗакупки * Объект.КоличествоАвтомобилей;
	АвтомобильСуммаЗакупкиПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвтомобильТипЦенЗакупкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС на автомобили"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильСуммаЗакупкиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Пересчет прибыли
	Объект.Маржа = Объект.СуммаВсегоАвтомобилей - Объект.СуммаЗакупки;
	
КонецПроцедуры // АвтомобильСуммаЗакупкиПриИзмененииНаСервере()

#Область ОбработчикиСобытийЭлементовТаблицыФормыОпции

// Обработчик события возникающего при изменении данных реквизита "Опция"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииОпцияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("АвтомобильРеквизитОбъекта", Истина);	
	ПараметрыДействия.Вставить("Модель", Объект.Модель);	
	ПараметрыДействия.Вставить("ВариантКомплектации", Объект.ВариантКомплектации);	
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцияПриИзменении(Объект, СТрока, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Пользователи");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "РабочийЛист");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Пользователи");
	КонецЕсли;
	
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать склад компании.'");
	ВыборПодразделения.Параметры		= Новый Структура("РежимВыбора", Истина);
    
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПользователиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по подразделению'");
	Команда.Идентификатор	= "ЗаполнитьТабличнуюЧастьПоПодразделению";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Пользователи";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПользователиПодразделения", ВыборПодразделения);
	//
	ВыборОрганизации 				= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборОрганизации.ВыборСсылки 	= "Справочник.Организации.ФормаСписка";
	ВыборОрганизации.Обязательный 	= Истина;
	ВыборОрганизации.Параметры		= Новый Структура("РежимВыбора", Истина);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПользователиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по организации'");
	Команда.Идентификатор	= "ЗаполнитьТабличнуюЧастьПоОрганизации";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Пользователи";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПользователиОрганизации", ВыборОрганизации);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ПользователиЗаполнитьПользователейПоПодразделению.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ПользователиЗаполнитьПользователейПоПодразделению.Доступность", Истина);
	ПараметрыКоманд.Вставить("ПользователиЗаполнитьПользователейПоОрганизации.Видимость",     Истина);
	ПараметрыКоманд.Вставить("ПользователиЗаполнитьПользователейПоОрганизации.Доступность",   Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по подразделению
//
Функция ЗаполнитьТабличнуюЧастьПоПодразделению(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Запрос 			= Новый Запрос;
	ТекстЗапроса 	= 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ПодразделениеКомпании = &Реквизит
		|	И (НЕ Пользователи.ПометкаУдаления)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Реквизит", ПараметрыЗаполнения.ПользователиПодразделения);
	МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Пользователь = Объект.Пользователи.Выгрузить();
	Для каждого Элемент Из МассивПользователей Цикл
		Строка = Пользователь.Найти(Элемент);
		Если Строка = Неопределено Тогда
			Строка = Объект.Пользователи.Добавить();		
			Строка.Пользователь = Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // ЗаполнитьТабличнуюЧастьПоПодразделению()

// Обработчик заполнения документа по организации
//
Функция ЗаполнитьТабличнуюЧастьПоОрганизации(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Запрос 			= Новый Запрос;
	ТекстЗапроса 	= 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Организация = &Реквизит
		|	И (НЕ Пользователи.ПометкаУдаления)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Реквизит", ПараметрыЗаполнения.ПользователиОрганизации);
	МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Пользователь = Объект.Пользователи.Выгрузить();
	Для каждого Элемент Из МассивПользователей Цикл
		Строка = Пользователь.Найти(Элемент);
		Если Строка = Неопределено Тогда
			Строка = Объект.Пользователи.Добавить();		
			Строка.Пользователь = Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // ЗаполнитьТабличнуюЧастьПоОрганизации()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Если ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента") Тогда
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.РабочийЛист",
			"РабочийЛист",
			НСтр("ru = 'Рабочий лист'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати");
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.РабочийЛист",
			"КоммерческоеПредложение",
			НСтр("ru = 'Коммерческое предложение'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати");
	Иначе
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.РабочийЛист",
			"РабочийЛист",
			НСтр("ru = 'Рабочий лист'"),
			СсылкаНаДокумент);
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.РабочийЛист",
			"КоммерческоеПредложение",
			НСтр("ru = 'Коммерческое предложение'"),
			СсылкаНаДокумент);
	КонецЕсли;
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РабочийЛист",
		"РабочийЛистЗвонка",
		НСтр("ru = 'Рабочий лист звонка'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РабочийЛист",
		"РабочийЛистВстречи",
		НСтр("ru = 'Рабочий лист встречи'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РабочийЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"РабочийЛист",
															НСтр("ru = 'Приходная накладная'"),
															ПечатьРабочийЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РабочийЛистЗвонка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"РабочийЛистЗвонка",
															НСтр("ru = 'Рабочий лист звонка'"),
															ПечатьРабочийЛистЗвонка(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РабочийЛистВстречи") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"РабочийЛистВстречи",
															НСтр("ru = 'Рабочий лист встречи'"),
															ПечатьРабочийЛистВстречи(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"КоммерческоеПредложение",
															НСтр("ru = 'Коммерческое предложение'"),
															ПечатьКоммерческоеПредложение(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
															
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьРабочийЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено) 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РабочийЛист_РабочийЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	// зададим параметры макета
	ТабличныйДокумент.ПолеСверху = 20;
	ТабличныйДокумент.ПолеСлева  = 20;
	ТабличныйДокумент.ПолеСнизу  = 20;
	ТабличныйДокумент.ПолеСправа = 10;
	// ТабДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Предварительные обработки данных
		
		// валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, Документ.ВалютаДокумента,
			Документ.КурсДокумента, ВалютаПечатногоДокумента, Документ.Дата);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РабочийЛист.ПФ_MXL_РабочийЛист");
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// вывод заголовка документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ОбластьМакета.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// фирма, адрес и телефон
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьМакета.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьМакета.Параметры.ФирмаАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.ПодразделениеКомпании, Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделенияКомпании, ТекущаяДатаСеанса());
		
		Если ПустаяСтрока(СокрЛП(ОбластьМакета.Параметры.ФирмаАдресЮридический)) Тогда
			ОбластьМакета.Параметры.ФирмаАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Документ.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		КонецЕсли;
		
		ОбластьМакета.Параметры.ФирмаТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.ПодразделениеКомпании, Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании, ТекущаяДатаСеанса());
		
		Если ПустаяСтрока(СокрЛП(ОбластьМакета.Параметры.ФирмаТелефоны)) Тогда
			ОбластьМакета.Параметры.ФирмаТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Документ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
		КонецЕсли;
		
		// Клиент
		ОбластьМакета.Параметры.Менеджер				= Строка(Документ.Менеджер);
		ОбластьМакета.Параметры.ДатаДокумента			= Формат(Документ.Дата, "ДЛФ=DD");
		Срок = ?(НЕ ЗначениеЗаполнено(Документ.ПредполагаемыйСрок), "неопределен", Документ.ПредполагаемыйСрок);
		ОбластьМакета.Параметры.ПредполагаемыйСрок		= Срок;
		ОбластьМакета.Параметры.ЭлектроннаяПочта		= Документ.АдресЭлектроннойПочты;
		
		Если ЗначениеЗаполнено(Документ.Контрагент) И ТипЗнч(Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбластьМакета.Параметры.НаименованиеКлиента = Документ.Контрагент.Наименование;
			Если ПустаяСтрока(ОбластьМакета.Параметры.ЭлектроннаяПочта) Тогда
				ОбластьМакета.Параметры.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
					Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ТекущаяДатаСеанса());
			КонецЕсли;
		Иначе
			ОбластьМакета.Параметры.НаименованиеКлиента = Документ.ОбращениеККлиенту;
		КонецЕсли;
		
		ОбластьМакета.Параметры.КонтактныйТелефон = Документ.ПредставлениеТелефона;
		
		ПредыдущиеАвтомобили = КлиентыСервер.ИсторияАвтомобилей(Документ.Контрагент);
		Если ПредыдущиеАвтомобили.Количество() > 0 Тогда
			ОбластьМакета.Параметры.ПредыдущееАвто = ПредыдущиеАвтомобили[0].Автомобиль;
		КонецЕсли;
		
		// Автомобиль
		ОбластьМакета.Параметры.Заполнить(Документ.ВариантКомплектации);
		ОбластьМакета.Параметры.Модель					= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Модель);
		ОбластьМакета.Параметры.ВариантКомплектации 	=
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации);
		ОбластьМакета.Параметры.Цвет					= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Цвет);
		ОбластьМакета.Параметры.Интерьер				= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипСалона);
		
		ОбластьМакета.Параметры.СуммаПродажи = Формат(Документ.СуммаВсегоАвтомобилей * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
			
		БазовыеОпции = ОпцииАвтомобилей.БазовыеОпцииКомплектации(Документ.ВариантКомплектации);
		ОбластьМакета.Параметры.СписокБазовогоОборудования = СтрСоединить(БазовыеОпции, ", ");
		
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРабочийЛист()

Функция ПечатьРабочийЛистЗвонка(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РабочийЛист_РабочийЛистЗвонка";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// приступим к печати
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РабочийЛист.ПФ_MXL_РабочийЛистЗвонка");
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// вывод заголовка документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьМакета.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(Документ.Дата, "ДЛФ=DDT");
		ДатаЧас = Час(Документ.Дата);
		Если ДатаЧас >= 12 И ДатаЧас < 18 Тогда
			ВремяСуток = НСтр("ru = 'Добрый день.'");
		ИначеЕсли ДатаЧас >= 18 И ДатаЧас < 24 Тогда
			ВремяСуток = НСтр("ru = 'Добрый вечер.'");
		Иначе
			ВремяСуток = НСтр("ru = 'Доброе утро.'");
		КонецЕсли;
		ОбластьМакета.Параметры.ВремяСуток = ВремяСуток;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим представления и расшифровки подписей
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРабочийЛистЗвонка()

Функция ПечатьРабочийЛистВстречи(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РабочийЛист_РабочийЛистВстречи";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
		
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РабочийЛист.ПФ_MXL_РабочийЛистВстречи");
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Документ);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату                      = Документ.Дата;
		ОбластьМакета.Параметры.ОрганизацияПредставление    = УправлениеПечатьюПлатформа
			.ПолучитьПредставлениеСправочника(Документ.Организация,, ДополнительныеПараметры);
		
		ОбластьМакета.Параметры.ДатаДокумента = Формат(Документ.Дата, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаВремя     = Формат(Документ.Дата, "ДЛФ=T");
		
		Если ПустаяСтрока(Документ.ОбращениеККлиенту) И НЕ ЗначениеЗаполнено(Документ.Контрагент) Тогда
			
			ОбластьМакета.Параметры.КонтрагентФамилия = "";
			
		Иначе
			
			Если
				ЗначениеЗаполнено(Документ.Контрагент)
				И ТипЗнч(Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			Тогда
				
				ОбластьМакета.Параметры.КонтрагентИмя		= Документ.Контрагент.Имя;
				ОбластьМакета.Параметры.КонтрагентФамилия	= Документ.Контрагент.Фамилия;
				ОбластьМакета.Параметры.КонтрагентОтчество	= Документ.Контрагент.Отчество;
				ОбластьМакета.Параметры.КонтрагентАдрес		= УправлениеПечатьюПлатформа
					.ПолучитьПредставлениеСправочника(Документ.Контрагент, Новый Структура("АдресФактический", ""));
				ОбластьМакета.Параметры.КонтрагентТелефон	= УправлениеПечатьюПлатформа
					.ПолучитьПредставлениеСправочника(Документ.Контрагент, Новый Структура("ТелефонРабочий", ""));
				
			Иначе
				
				ОбластьМакета.Параметры.КонтрагентФамилия	= Документ.ОбращениеККлиенту;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Документ.АдресЭлектроннойПочты) Тогда
			ОбластьМакета.Параметры.КонтрагентПочта = Документ.АдресЭлектроннойПочты;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Документ.ПредставлениеТелефона) Тогда
			ОбластьМакета.Параметры.КонтрагентТелефон = Документ.ПредставлениеТелефона;
		КонецЕсли;
		
		// Автомобиль
		ОбластьМакета.Параметры.Заполнить(Документ.ВариантКомплектации);
		ОбластьМакета.Параметры.Модель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Модель);
		ОбластьМакета.Параметры.Цвет   = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Цвет);
		
		ТипКузова = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации.ТипКузова);
		ОбластьМакета.Параметры.АвтомобильТипКузова = ТипКузова;
		
		ТипДвигателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации.ТипДвигателя);
		ОбластьМакета.Параметры.АвтомобильТипДвигателя = ТипДвигателя;
		
		ТипКПП = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации.ТипКПП);
		ОбластьМакета.Параметры.АвтомобильТипКПП = ТипКПП;
		
		Если
			Не Документ.ВариантКомплектации.МодельДвигателя.Пустая()
			И ЗначениеЗаполнено(Документ.ВариантКомплектации.МодельДвигателя.Объем)
		Тогда
			
			ОбластьМакета.Параметры.АвтомобильДвигательОбъем = Строка(Документ.ВариантКомплектации.МодельДвигателя.Объем);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьКоммерческоеПредложение(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РабочийЛист_КоммерческоеПредложение";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Предварительные обработки данных
		
		// валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, Документ.ВалютаДокумента,
			Документ.КурсДокумента, ВалютаПечатногоДокумента, Документ.Дата);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РабочийЛист.ПФ_MXL_КоммерческоеПредложение");
		
		// для начала настроим макет
		ОбластьТовар = Макет.Область("Товар");
		
		// определяем есть ли скидки
		ОбластьСкидка = Макет.Область("Скидка");
		ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
		Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ЕстьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах", Документ);
		// если код не выводим
		Если НЕ ЕстьКод Тогда
			ОбластьКод = Макет.Область("Код");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКод.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьКод,ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// вывод заголовка документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьМакета, Документ);
		ОбластьМакета.Параметры.Заполнить(Документ);
		ОбластьМакета.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТекстЗаголовка							= НСтр("ru = 'Коммерческое предложение'");
		ОбластьМакета.Параметры.ТекстЗаголовка	= ТекстЗаголовка;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		// контрагент
		Если ЗначениеЗаполнено(Документ.Контрагент)
			И ТипЗнч(Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.НаДату = ДатаДокумента;
			ОбластьМакета.Параметры.КонтрагентПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.Контрагент, , ДополнительныеПараметры);
		Иначе
			ОбластьМакета.Параметры.КонтрагентПредставление = Документ.ОбращениеККлиенту;
		КонецЕсли;
		ОбластьМакета.Параметры.ПредполагаемыйСрок =
			?(НЕ ЗначениеЗаполнено(Документ.ПредполагаемыйСрок), "неопределен", Документ.ПредполагаемыйСрок);
		
		// автомобиль
		ОбластьМакета.Параметры.Заполнить(Документ.ВариантКомплектации);
		АвтомобильМодель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Модель);
		АвтомобильМарка = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Марка);
		ОбластьМакета.Параметры.Модель = СтрШаблон("%1, %2", СокрЛП(АвтомобильМарка), СокрЛП(АвтомобильМодель));
		
		ВариантКомплектации = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации);
		ОбластьМакета.Параметры.ВариантКомплектации = ВариантКомплектации;
		ОбластьМакета.Параметры.Цвет = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Цвет);
		
		ТипКузова = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации.ТипКузова);
		ОбластьМакета.Параметры.АвтомобильТипКузова = ТипКузова;
		
		Если Документ.ВариантКомплектации.МодельДвигателя.Пустая() Тогда
			ТипДвигателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Документ.ВариантКомплектации.ТипДвигателя);
		Иначе
			ТипДвигателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Документ.ВариантКомплектации.МодельДвигателя.Тип);

		КонецЕсли;
		ОбластьМакета.Параметры.АвтомобильТипДвигателя = ТипДвигателя;
		
		ТипКПП = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации.ТипКПП);
		ОбластьМакета.Параметры.АвтомобильТипКПП = ТипКПП;
		ОбластьМакета.Параметры.Интерьер = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипСалона);
		
		БазовыеОпции = ОпцииАвтомобилей.БазовыеОпцииКомплектации(Документ.ВариантКомплектации);
		ОбластьМакета.Параметры.СписокБазовогоОборудования = СтрСоединить(БазовыеОпции, ", ");

		
		ОбластьМакета.Параметры.СуммаПродажи = Формат(
			Документ.СуммаВсегоАвтомобилей * КоэффициентПересчета, 
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00")
		);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы     = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// Если выбран авто - то “Сумма продажи” включает опции,
		// если выбрана “Модель+Вариант комплектации” - то “Сумма продажи” не включает сумму опций.
		
		БазовыеОпции = ОпцииАвтомобилей.БазовыеОпцииКомплектации(Документ.ВариантКомплектации);
		ОбластьМакета.Параметры.СписокБазовогоОборудования = СтрСоединить(БазовыеОпции, ", ");


		ОпцииБезЦен = Истина;
		Если (ЗначениеЗаполнено(Документ.Модель)) И (ЗначениеЗаполнено(Документ.ВариантКомплектации)) Тогда
			ОпцииБезЦен = Ложь;
		КонецЕсли;	
		
		// готовим области строки
		ОбластьМакета = Макет.ПолучитьОбласть("Строка" + ?(ОпцииБезЦен, "БезЦены", ""));
		
		ОбластьМакетаИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", ВалютаПечатногоДокумента, 0, 0);
		
		
		// пересчитаем ТЧ
		ЭтотОбъектОпции = Документ.Опции.Выгрузить();
		
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
		ДокументОбъектСтруктура.Документ = Документ;
		
		Если ЭтотОбъектОпции.Количество() > 0 Тогда
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ЭтотОбъектОпции,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		// дополнительные колонки для того чтобы замаскировать ТЧ Опции под ТЧ Товары
		ЭтотОбъектОпции.Колонки.Добавить("Номенклатура");
		ЭтотОбъектОпции.Колонки.Добавить("ЕдиницаИзмерения");
		ЭтотОбъектОпции.Колонки.Добавить("Коэффициент");
		
		// перебор строк
		ВыборкаТабличнойЧасти = ЭтотОбъектОпции;
		
		
		// теперь запишем параметры шапки
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ОпцииБезЦен, "БезЦены", ""));
		Если ЕстьКод Тогда
			КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
			ОбластьШапкаТаблицы.Параметры.ИмяКолонкиКод = КолонкаКода.Синоним;
		КонецЕсли;
		
		Если НЕ ОпцииБезЦен Тогда
			// заполняем заголовок колонки НДС по типу цен
			ОбластьШапкаТаблицы.Параметры.НДС = "НДС";
			Если Документ.ТипЦен.ЦенаВключаетНДС
					И НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда	// Если НДС включен
				ОбластьШапкаТаблицы.Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда 
			// ПЕЧАТЬ ТАБЛИЦЫ ОПЦИЙ
			// теперь выводим шапку
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы = "Опции";
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
            ОбластьШапкаТаблицы.Параметры.ИмяКолонкиТовара = "Опции";
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		КонецЕсли;
		
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// предварительная обработка
			СтрокаТабличнойЧасти.Номенклатура		= СтрокаТабличнойЧасти.Опция;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= "";
			СтрокаТабличнойЧасти.Коэффициент		= 1;
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТабличнойЧасти,
				Документ, "Опции");
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			// Если Документ.Опции.Индекс(СтрокаТабличнойЧасти) = Документ.Автомобили.Количество()-1 Тогда
			//	мсвДопОбластиПодвала = Новый Массив;
			//	мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			// КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета,
				ОбластьШапкаТаблицы, ОбластьМакетаИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПред							= НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы	= "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			Если НЕ ОпцииБезЦен Тогда
				// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			КонецЕсли;
		КонецЦикла;
		
		Если (ВыборкаТабличнойЧасти.Количество() > 0) И (НЕ ОпцииБезЦен) Тогда
			// довыводим последний подвал, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьМакетаИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// итоги
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.ВалютаДокумента	= ВалютаПечатногоДокумента;
			СуммаВсего								= ВыборкаТабличнойЧасти.Итог("СуммаВсего");
			ОбластьМакета.Параметры.СуммаВсего		= Формат(СуммаВсего, ФорматВыводаСуммы);
			НДСВсего								= ВыборкаТабличнойЧасти.Итог("СуммаНДС");
			ОбластьМакета.Параметры.НДСВсего		= Формат(НДСВсего, ФорматВыводаСуммы);
			ОбластьМакета.Параметры.СуммаПрописью	= СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
				ВыборкаТабличнойЧасти.Количество(),
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, ВалютаПечатногоДокумента));
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета, , ,
				НомерСтраницы, , Документ);
		КонецЕсли;
		
		// Выводим представления и расшифровки подписей
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		//
		Если ЗначениеЗаполнено(Документ.Менеджер) Тогда
			ОбластьМакета.Параметры.МенеджерПредставление		= "/ " + Строка(Документ.Менеджер) + " /";
		КонецЕсли;
		Если ТипЗнч(Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(Документ.Контрагент.Наименование) Тогда
				ОбластьМакета.Параметры.НаименованиеКлиента		= "/ " + СокрЛП(Документ.Контрагент.Наименование) + " /";
		Иначе
			ОбластьМакета.Параметры.НаименованиеКлиента		= "/ " + СокрЛП(Документ.ОбращениеККлиенту) + " /";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РабочийЛистВыкупаАвтомобиля);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаАренду);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РабочийЛистКредитногоОтдела);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РабочийЛистОтделаСтрахования);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РезервированиеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРезервовАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ТестДрайв);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.РабочийЛист);

КонецФункции

#КонецОбласти

Процедура ОбновитьЦеныОпций(Объект, ПараметрыДействия)
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	Если ТребуетсяУстановкаЦен Тогда
		
		УстановитьНовыеЦеныОпций(Объект, ПараметрыДействия);
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		ПересчитатьЦеныОпций(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыеЦеныОпций(Объект, ПараметрыДействия)
	
	МоментЦены = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
	
	Для Каждого СтрокаОпции Из Объект.Опции Цикл
		
		СтрокаОпции.Цена = ЦенообразованиеСервер.ПолучитьЦенуОпции(
			Объект.ТипЦен,
			СтрокаОпции.Опция,
			Объект.Модель,
			Объект.ВариантКомплектации,
			МоментЦены,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента
		);
		ОпцииЦенаПриИзменении(Объект, СтрокаОпции);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьЦеныОпций(Объект, ПараметрыДействия)
	
	СтарыйКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СтарыйКурс", 0);
	
	Для Каждого Опция Из Объект.Опции Цикл
		
		Опция.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоКурсу(
			Опция.Цена,
			СтарыйКурс,
			Объект.КурсДокумента
		);
		ОпцииЦенаПриИзменении(Объект, Опция);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли