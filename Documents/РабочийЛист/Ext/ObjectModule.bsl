// Модуль объекта документа "Рабочий лист"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ИмяСтруктуры = Неопределено;
		ДанныеЗаполнения.Свойство("Имя", ИмяСтруктуры);
		
		Если ИмяСтруктуры = "Автомобиль" Тогда
			
			ОбработкаЗаполнения_Структура_Автомобиль(ДанныеЗаполнения, СтандартнаяОбработка);
			
		ИначеЕсли ИмяСтруктуры = "ПодборАвтомобиля" Тогда
			
			ОбработкаЗаполнения_Структура_ПодборАвтомобиля(ДанныеЗаполнения, СтандартнаяОбработка);
			
		ИначеЕсли ИмяСтруктуры = "Событие" Тогда
			
			ДанныеЗаполненияКопия = ДанныеЗаполнения;
			ДанныеЗаполнения = ДанныеЗаполнения.Событие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартноеЗаполнение(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	ПрерватьВыполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		
		ОбращениеККлиенту = "";
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Документы.РабочийЛист.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	
	Если ТипЗнч(ДанныеЗаполненияКонтрагент) <> Тип("Строка") И ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		
		Контрагент = ДанныеЗаполненияКонтрагент;
		
	КонецЕсли;
	
	Если
		ЗначениеЗаполнено(Контрагент)
		И ПустаяСтрока(ОбращениеККлиенту)
	Тогда
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ОбращениеККлиенту = Контрагент.Наименование;
			
		Иначе
			
			ОбращениеККлиенту = Контрагент;
			Контрагент        = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Контрагент = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементыСОшибками = ИсторияПодбора.НайтиСтроки(
		Новый Структура("Марка,Модель",
			Справочники.Марки.ПустаяСсылка(),
			Справочники.Модели.ПустаяСсылка()
		)
	);
	
	Если ЭлементыСОшибками.Количество() > 0  Тогда
	
		Для Каждого ЭлементСОшибкой Из ЭлементыСОшибками Цикл
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Таблица ""Автомобили"". Строка %1: Не указан автомобиль или модель, или марка.'"),
					ЭлементСОшибкой.НомерСтроки
				),
				ЭтотОбъект
			);
			Отказ = Истина;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("Строка") Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ОбновлятьКИ", Ложь) Тогда
		КомментарийТелефона = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ПредставлениеТелефонаСтрокой);
		УправлениеКонтактнойИнформациейАльфаАвто.СохранитьТелефон(Контрагент, ПредставлениеТелефона, КомментарийТелефона, Отказ);
		УправлениеКонтактнойИнформациейАльфаАвто.СохранитьЭлектроннуюПочту(Контрагент, АдресЭлектроннойПочты, Отказ);
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейАльфаАвто.ПроверитьТелефонСМаскойПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьПодчиненныеЗаявкиНаАвтомобили();
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если Не ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Отказ И Не РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(Ссылка, Статус) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Событие(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьВыполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьВыполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ВидПервичногоКонтакта = ДанныеЗаполнения.ВидСобытия;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажиАвтомобилей", ЭтотОбъект);
	ТипЦенЗакупки = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
	
	// Если контрагент был заполнен в документе-основании,
	// подтянем информацию из его карточки вызовом соответствующего обработчика.
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Документы.РабочийЛист.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	// Получим обращение из События.
	ОбращениеККлиенту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ОбращениеККлиенту");
	
	// Даже если в карточке контрагента заполнен телефон/почта заполняем эту информацию из События.
	УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьКонтактнуюИнформациюИзСобытия(ДанныеЗаполнения, ЭтотОбъект);
	
	Пользователи.Очистить();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения.Пользователи Цикл
		
		НоваяСтрока = Пользователи.Добавить();
		НоваяСтрока.Пользователь = ТекСтрока.Пользователь;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Событие()

// Производит заполнение объекта на основании "Автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура_Автомобиль(ДанныеЗаполнения, СтандартнаяОбработка = Истина)

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобиль = ДанныеЗаполнения.Ссылка;
	Документы.РабочийЛист.АвтомобильПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура_Автомобиль()

// Производит заполнение объекта на основании "ПодборАвтомобиля"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура_ПодборАвтомобиля(ДанныеЗаполнения, СтандартнаяОбработка = Истина)

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	КоличествоАвтомобилей = 1;
	ЦенаАвтомобилей       = ДанныеЗаполнения.ЦенаАвтомобиля;
	СтавкаНДСАвтомобилей  = ДанныеЗаполнения.СтавкаНДСНаАвтомобиль;
	
	Документы.РабочийЛист.АвтомобильЦенаПриИзменении(ЭтотОбъект, Новый Структура());
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура_ПодборАвтомобиля()

// процедура стандартного заполнения объекта
Процедура СтандартноеЗаполнение(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Статус = Справочники.СтатусыРабочегоЛиста.Создан;
	КоличествоАвтомобилей = 1;
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		
		ТекущийПользователь = ОбщегоНазначения.ОбщийМодуль("Пользователи").АвторизованныйПользователь();
		
		Если ЗначениеЗаполнено(ТекущийПользователь) И НЕ ПустаяСтрока(ТекущийПользователь.Наименование) Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекущийПользователь.Сотрудник) Тогда
				
				Менеджер = Справочники.Сотрудники.НайтиПоНаименованию(ТекущийПользователь.Наименование, Истина);
				
			Иначе
				
				Менеджер = ТекущийПользователь.Сотрудник;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Пользователи.Количество() = 0 Тогда
		
		СтрокаПользователь = Пользователи.Добавить();
		СтрокаПользователь.Пользователь = ОбщегоНазначения.ОбщийМодуль("Пользователи").АвторизованныйПользователь();
		
	КонецЕсли;
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажиАвтомобилей", ЭтотОбъект);
		ТипЦенЗакупки = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,, Ложь);
		
	КонецЕсли;
	
	Если ПустаяСтрока(КомуПокупает) Тогда
		
		КомуПокупает = "Себе";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗавершитьПодчиненныеЗаявкиНаАвтомобили()
	
	// Пока установим в качестве завершающего Сделка или Отказ
	Если НЕ (Статус = Справочники.СтатусыРабочегоЛиста.Сделка
		ИЛИ Статус = Справочники.СтатусыРабочегоЛиста.Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаАвтомобиль) Тогда	
		Возврат;    
	КонецЕсли;
	
	// Найдем подчиненные заявки на автомобиль и установим им завершающие статусы
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаявкаНаАвтомобиль.Ссылка КАК ЗаявкаНаАвтомобиль
	               |ИЗ
	               |	Документ.ЗаявкаНаАвтомобиль КАК ЗаявкаНаАвтомобиль
	               |ГДЕ
	               |	НЕ ЗаявкаНаАвтомобиль.Состояние.Завершено
	               |	И ЗаявкаНаАвтомобиль.ДокументОснование = &ДокументОснование
	               |	И НЕ ЗаявкаНаАвтомобиль.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	СостоянияЗаявокНаАвтомобиль.Ссылка КАК ЗавершающееСостояние,
	               |	СостоянияЗаявокНаАвтомобиль.Наименование КАК НаименованиеСостояния
	               |ИЗ
	               |	Справочник.СостоянияЗаявокНаАвтомобиль КАК СостоянияЗаявокНаАвтомобиль
	               |ГДЕ
	               |	СостоянияЗаявокНаАвтомобиль.Завершено";
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	// Если нет заявок, то продолжать не стоит
	Если ПакетЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем завершающий статус
	Если Статус = Справочники.СтатусыРабочегоЛиста.Отказ Тогда
		ЗавершающееСостояние = Справочники.СостоянияЗаявокНаАвтомобиль.Отменена;
	Иначе
		ЗавершающееСостояние = Справочники.СостоянияЗаявокНаАвтомобиль.Выполнена;
	КонецЕсли;
	
	ДанныеСостояния = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗавершающееСостояние, "Завершено, Наименование");
	
	// Если текущее состояние не завершает, то выбрем первое попавшее
	Если НЕ ДанныеСостояния.Завершено Тогда
		
		Если ПакетЗапроса[1].Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указано завершающее состояние для заявки на автомобиль. Закрытие заявок отменено.'"));
			Возврат;
		Иначе
			ВыборкаСостояния = ПакетЗапроса[1].Выбрать();
			ВыборкаСостояния.Следующий();
			ЗавершающееСостояние = ВыборкаСостояния.ЗавершающееСостояние;
			НаименованиеСостояния = ВыборкаСостояния.НаименованиеСостояния;
		КонецЕсли;
		
	Иначе
		
		НаименованиеСостояния = ДанныеСостояния.Наименование;
		
	КонецЕсли;
	
	ВыборкаЗаявок = ПакетЗапроса[0].Выбрать();
	
	Пока ВыборкаЗаявок.Следующий() Цикл
		
		ДокументОбъектЗаявки = ВыборкаЗаявок.ЗаявкаНаАвтомобиль.ПолучитьОбъект();
		ДокументОбъектЗаявки.Состояние = ЗавершающееСостояние;
		ДокументОбъектЗаявки.Комментарий =
			СтрШаблон(
				НСтр("ru = 'Заявке установлено состояние %1 при завершении работы с рабочим листом.'"),
				НаименованиеСостояния);
		ДокументОбъектЗаявки.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ДокументОбъектЗаявки.Записать();
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = '%1 переведена в состояние %2'"),
					ДокументОбъектЗаявки.Ссылка,
					НаименованиеСостояния
				)
			);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = '%1 не удалось завершить по причине: %2'"),
					ДокументОбъектЗаявки.Ссылка,
					ОписаниеОшибки()
				)
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
