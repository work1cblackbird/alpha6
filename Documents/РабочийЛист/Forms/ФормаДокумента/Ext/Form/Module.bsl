////////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Рабочий лист"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем АдресИзДанныхВыбора Экспорт;

&НаКлиенте
Перем ТелефонИзДанныхВыбора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если (НЕ ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон"))
		И (НЕ ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАрендаАвтомобилей"))
		И (НЕ ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтомобилиСПробегом")) Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с данным объектом необходим ключ защиты с поддержкой одного из модулей ""Автосалон"", ""Аренда автомобилей"", ""Автомобили с пробегом"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Добавление служебных реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта", Объект.Ссылка.Метаданные().ПолноеИмя());
	СлужебныеРеквизиты.Вставить("ИзменениеЗапрещено", Ложь);
	СлужебныеРеквизиты.Вставить("ИмяДополнительнойФормы", УправлениеДиалогомВызовСервера.ПолучитьИмяДополнительнойФормыОбъекта(Объект.Ссылка));
	
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(ЭтотОбъект, СлужебныеРеквизиты); 
	//
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	); 
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Зарезервировать", "Доступность", "Изменение");
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Элементы.АвтомобилиОставитьЗаявкуНаАвтомобиль.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаАвтомобиль);
	
	ЗаполнитьСтатусыРабочегоЛиста();
	ЗаполнитьВариантыДляКомуПокупает();
	ЗаполнитьВариантыДляСКемПришел();
	
	УстановитьМаркуАвтомобиляПоУмолчанию();
	УстановитьПараметрВыбораМодели();
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	ЗаполнитьПредыдущиеАвтомобили();
	ОбновитьПомощникВыбораАвтомобиляTradeIn();
	
	ФорматГодаВыпуска = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Объект);
	Элементы.ПредыдущиеАвтомобилиКонтрагентаАвтомобильГодВыпуска.ФорматРедактирования = ФорматГодаВыпуска;
	Элементы.ГодВыпускаНачало.ФорматРедактирования = ФорматГодаВыпуска;
	Элементы.ГодВыпускаКонец.ФорматРедактирования = ФорматГодаВыпуска;
	
	ВыбранныйАвтомобиль = Объект.Автомобиль;
	УстановитьОтборНаСписокСобытий();
	ОбновитьНадписьРабочийЛистВыкупа();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьСвойстваПоляВводаТелефона();
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		ПроверитьНаличиеСервисныхКомпанийДляАвтомобиля();   
		ПроставитьАвтомобильРезервирования();
		ОбновитьБазовыеОпции();
		ОпределитьНаличиеСогласияНаОбработкуПерсональныхДанных();
		НастроитьПараметрыВыбораОпций();
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	Иначе
		ПроверитьНеобходимостьОбновленияКИ();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Опции");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Возражения");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Пользователи");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПредыдущиеАвтомобили");
	
	УстановитьДоступностьЖалобы();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаписанАвтомобиль" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Объект.ТрейдИнАвтомобиль = Параметр.Автомобиль;
		ЗаполнитьПредыдущиеАвтомобили();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьЗаказыНаПодобранныеАвтомобили();
	
	ПроставитьАвтомобильРезервирования();
	ПроверитьНаличиеСервисныхКомпанийДляАвтомобиля();
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	НастроитьПараметрыВыбораЭлементовФормы();
	СвязанныйРабочийЛистВыкупа();
	ИсторияПодбораОбновитьПредставления(ЭтотОбъект);
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("РабочийЛист", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
	Если ЗначениеЗаполнено(ДокументРезервированияАвтомобиля) И НЕ АвтомобильЗарезервированНаТекущегоКонтрагента Тогда
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(  
			СтрШаблон(
				НСтр("ru = 'Автомобиль <%1> зарезервирован документом <%2> на другого контрагента.'"),
				Объект.Автомобиль,
				ДокументРезервированияАвтомобиля),
			ДокументРезервированияАвтомобиля, 
			,
			"Объект", 
			Отказ
		);
			
	КонецЕсли;
	
	НужноПроверитьРезервы = НЕ ПараметрыЗаписи.Свойство("НеПроверятьРезервы");
	ЭтоПроведение = (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
	Если НужноПроверитьРезервы И ЭтоПроведение Тогда
		Отказ = Отказ ИЛИ ЗадатьВопросОСнятииРезерва(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства   
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновлятьКИ", Элементы.ОбновлятьКИ.Пометка);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если
		Не ТекущийОбъект.Автомобиль.Пустая()
		И АвтомобильРезервирования <> ТекущийОбъект.Автомобиль
		И ЗначениеЗаполнено(ДокументРезервирования)
	Тогда
		Если ТипЗнч(ДокументРезервирования) = Тип("ДокументСсылка.РезервированиеАвтомобилей") Тогда
			ДокументСнятиеРезервированияДокумента = Документы.СнятиеРезервовАвтомобилей.СоздатьДокумент();
			ДокументСнятиеРезервированияДокумента.Заполнить(ТекущийОбъект.Ссылка);
			
			Если ДокументСнятиеРезервированияДокумента.Автомобили.Количество() > 0 Тогда
				ДокументСнятиеРезервированияДокумента.Автомобили[0].Автомобиль = АвтомобильРезервирования;
			КонецЕсли;
			ДокументСнятиеРезервированияДокумента.Комментарий = НСтр("ru = 'Сформирован автоматически из рабочего листа'");
			Попытка
				ДокументСнятиеРезервированияДокумента.Записать(РежимЗаписиДокумента.Проведение);
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Автомобиль <%1> снят с резервирования.'"),АвтомобильРезервирования), ТекущийОбъект
				);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не удалось снять с резерва автомобиль. Запись документа отменена.'"), ТекущийОбъект);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		ИначеЕсли ТипЗнч(ДокументРезервирования) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
			ДокументСнятиеРезервированияДокумента = Документы.ЗаказНаАвтомобиль.СоздатьДокумент();
			ДокументСнятиеРезервированияДокумента.Заполнить(ДокументРезервирования);
			ДокументСнятиеРезервированияДокумента.ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобильОтмена;
			
			Попытка
				ДокументСнятиеРезервированияДокумента.Записать(РежимЗаписиДокумента.Проведение);
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Автомобиль <%1> снят с резервирования.'"),АвтомобильРезервирования), ТекущийОбъект
				);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не удалось снять с резерва автомобиль. Запись документа отменена.'"), ТекущийОбъект
				);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	Если ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		ОбработкаСобытийДокументаСервер.ОбновитьДокументОснование_Событие(ТекущийОбъект);
	КонецЕсли;
	
	УстановитьЗаказыНаПодобранныеАвтомобили();
	
	ПроставитьАвтомобильРезервирования();
	ДатаСнятияРезервирования = Дата('00010101');
	
	СвязанныйРабочийЛистВыкупа();
	ОбновитьНадписьРабочийЛистВыкупа();
	УстановитьОтборНаСписокСобытий();
	ПроверитьНаличиеСервисныхКомпанийДляАвтомобиля();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	ПодчиненныеДокументы.Загрузить(Документы.РабочийЛист.ПодчиненныеДокументыРабочегоЛиста(Объект));
	
	Если Объект.Статус =  ПредопределенноеЗначение("Справочник.СтатусыРабочегоЛиста.Отказ") Тогда
		АвтомобилиСПробегомВызовСервера.ПолучитьСвязанныеСобытия(Объект.Ссылка, ПараметрыЗаписи);
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		Оповестить("ОповещениеДляДокументаСобытие", Объект.Ссылка);
	КонецЕсли;
	
	Если ПодчиненныеДокументы <> Неопределено И ПодчиненныеДокументы.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ПослеЗакрытияВопросаУстановитьЕдиногоКонтрагента",
			ЭтотОбъект,
			ПараметрыЗаписи
		);
		ТекстВопроса = НСтр("ru='Установить данного контрагента для всех подчиненных документов?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим);
		Возврат;
	КонецЕсли;
	
		// Отмена связанных событий
	Если ПараметрыЗаписи.Свойство("ОтменитьСвязанныеСобытия") Тогда
		ПараметрыОтмены = ПараметрыЗаписи.ОтменитьСвязанныеСобытия;
		Оповещение = Новый ОписаниеОповещения("ПродолжитьПослеЗаписи", ЭтотОбъект, ПараметрыОтмены);
		ТекстВопроса = НСтр("ru = 'Есть подчиненные события для Рабочего листа %1 от %2.
			|Отменить связанные события?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ПараметрыОтмены.Номер, ПараметрыОтмены.Дата);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ЗакрытьПослеЗаписи", Ложь) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура();
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);      
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);

	ПроверитьНеобходимостьОбновленияКИ();
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	Если ЕстьРеквизит(ЭтотОбъект, "РеспондентОпроса") Тогда
		//@skip-warning
		ЭтотОбъект["РеспондентОпроса"] = Объект.Контрагент;
	КонецЕсли;
	
	ОпределитьНаличиеСогласияНаОбработкуПерсональныхДанных();
	ЗаполнитьПредыдущиеАвтомобили();
	ОбновитьПомощникВыбораАвтомобиляTradeIn();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Контрагент = ВыбранноеЗначение[0].КонтактноеЛицо;
		АдресИзДанныхВыбора = "";
		ТелефонИзДанныхВыбора = "";
		Для Каждого Строка Из ВыбранноеЗначение Цикл
			Если Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") 
				И Не ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
				АдресИзДанныхВыбора = Строка.ЗначениеКИ;
			ИначеЕсли Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
				И Не ЗначениеЗаполнено(ТелефонИзДанныхВыбора)Тогда
				ТелефонИзДанныхВыбора = Строка.ЗначениеКИ;
			КонецЕсли;
		КонецЦикла;
		ОбработатьИзменениеКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаСервере
Процедура КомуПокупаетПриИзмененииНаСервере()
	
	Если Объект.КомуПокупает = "Себе" Тогда
		Объект.КонтрагентДляОформления = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КомуПокупаетПриИзменении(Элемент)
	
	КомуПокупаетПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТрейдИнПриИзменении(Элемент)
	
	Если Объект.ТрейдИн ИЛИ РабочийЛистВыкупа.Пустая() Тогда
		УправлениеДиалогомНаСервере();
		Возврат;
	КонецЕсли;
	
	НачатьОчисткуРабочегоЛистаВыкупа();
	
КонецПроцедуры

&НаКлиенте
Процедура ТрейдИнАвтомобильСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Контрагент.Пустая() Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Необходимо выбрать контрагента для создания автомобиля.'"),
			Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеАвтомобиля();

КонецПроцедуры

&НаКлиенте
Процедура ТрейдИнАвтомобильОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	ВыбранноеЗначение = Объект.ТрейдИнАвтомобиль;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрейдИнАвтомобильНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРабочийЛистВыкупаОбработкаНавигационнойСсылки(Элемент,
                                                               НавигационнаяСсылкаФорматированнойСтроки,
                                                               СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПереченьДействий = ДействияСРабочимЛистомВыкупа();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ПереченьДействий.Выбрать Тогда
		Если Объект.Ссылка.Пустая() Тогда
			ВызватьИсключение НСтр("ru = 'Документ должен быть записан'");
		КонецЕсли;
		
		Ручка = Новый ОписаниеОповещения("ВыборРабочийЛистВыкупаЗавершение", ЭтотОбъект);
		ОтборКонтрагент = Новый Структура("Контрагент", Объект.Контрагент);
		ПараметрыФормыВыбора = Новый Структура(
			"РежимВыбора,Отбор",
			Истина,
			ОтборКонтрагент
		);
		ОткрытьФорму(
			"Документ.РабочийЛистВыкупаАвтомобиля.ФормаВыбора",
			ПараметрыФормыВыбора,
			ЭтотОбъект,
			КлючУникальности,
			,
			,
			Ручка,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ПереченьДействий.Создать Тогда
		Если Объект.Ссылка.Пустая() Тогда
			ВызватьИсключение НСтр("ru = 'Документ должен быть записан'");
		КонецЕсли;
		
		Ручка = Новый ОписаниеОповещения("СозданиеРабочегоЛистаВыкупаЗавершение", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму(
			"Документ.РабочийЛистВыкупаАвтомобиля.ФормаОбъекта",
			ПараметрыОткрытия,
			ЭтотОбъект,
			КлючУникальности,
			,
			,
			Ручка
		);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ПереченьДействий.Сбросить Тогда
		ОчиститьРабочийЛистВыкупа();
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "e1cib/data/") Тогда
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не реализован обработчик операции'");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура МаркаТрейдИнПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Объект.ТрейдИнМодель = Справочники.Модели.ПустаяСсылка();
	
КонецПроцедуры 

&НаКлиенте
Процедура МаркаТрейдИнПриИзменении(Элемент = Неопределено)
	
	Если Не Элементы.Найти("ТрейдИнМодель") = Неопределено Тогда
		ЗначениеПараметра = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.ТрейдИнМарка) И НеСтандартнаяМарка(Объект.ТрейдИнМарка) Тогда
			ЗначениеПараметра = Объект.ТрейдИнМарка;
		КонецЕсли;
		
		ОбновитьПараметрыВыбораМодели("ТрейдИнМодель", ЗначениеПараметра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаТрейдИнОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МаркаТрейдИнМодели = МаркаМодели(Объект.ТрейдИнМодель);
	Если
		МаркаТрейдИнМодели <> ВыбранноеЗначение
		И ЗначениеЗаполнено(Объект.ТрейдИнМодель)
	Тогда
		СтандартнаяОбработка = Ложь;
		Режим = РежимДиалогаВопрос.ДаНет;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Вопрос", "ВопросСоответствияМарокТрейдИн");
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ШаблонСообщения = НСтр(
			"ru = 'Текущая модель марки автомобиля, сдаваемого по схеме trade-in, <%1>. Выбрана марка автомобиля <%2>. 
			|Подтвердить выбор марки и очистить модель?'"
		);
		ТекстСообщения = СтрШаблон(ШаблонСообщения, МаркаТрейдИнМодели, ВыбранноеЗначение); 
		ПоказатьВопрос(Оповещение, ТекстСообщения, Режим);
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МодельТрейдИнПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Объект.ТрейдИнМарка = Объект.ТрейдИнМодель.Марка;
	
КонецПроцедуры 

&НаКлиенте
Процедура МодельТрейдИнПриИзменении(Элемент = Неопределено)
	
	МодельТрейдИнПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура МодельТрейдИнНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Марка", Объект.ТрейдИнМарка);
	ПараметрыОткрытия.Вставить("ТрейдИн", "ТрейдИн");
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ОткрытьФорму(
		"Справочник.Модели.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыОткрытия),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СервиснаяКампанияРасширеннаяПодсказкаНажатие(Элемент)
	
	Если Объект.Автомобиль.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.ВыполнениеСервисныхКампаний.Форма.СервисныеКампанииАвтомобиля",
		Новый Структура("Автомобиль,ТолькоАктуальные", Объект.Автомобиль, Истина),
		ЭтотОбъект
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияРабочегоЛистаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СобытияРабочегоЛиста.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииНаСервере();

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормыГруппыАвтомобили

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент = Неопределено)
	
	ПараметрыДействия = Новый Структура();
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия)
	
	ЗаполнитьДругойВариантАвтомобиля(ВыбранныйАвтомобиль);
	Документы.РабочийЛист.АвтомобильПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Автомобиль, ПараметрыДействия);
	ПроверитьНаличиеСервисныхКомпанийДляАвтомобиля();
	ДокументРезервированияАвтомобиля = Документы.РабочийЛист.ДокументРезервированияАвтомобиля(Объект.Автомобиль);
	УправлениеДиалогомНаСервере();
	ВыбранныйАвтомобиль = Объект.Автомобиль;
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАвтомобиляПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МаркаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.МаркаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
	
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаПриИзменении(Элемент = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	МодельПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МаркаМодели = МаркаМодели(Объект.Модель);
	
	Если МаркаМодели <> ВыбранноеЗначение И ЗначениеЗаполнено(Объект.Модель) Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Вопрос", "ВопросСоответствияМарок");
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ШаблонСообщения = НСтр("ru = 'Текущая модель марки ""%1"". Выбрана марка автомобиля ""%2"".
									 |Подтвердить выбор марки и очистить модель?'"); 
		
		ПоказатьВопрос(
			Оповещение,
			СтрШаблон(ШаблонСообщения, МаркаМодели, ВыбранноеЗначение),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МодельПриИзмененииНаСервере(ПараметрыДействия)
	
	Документы.РабочийЛист.МодельПриИзменении(Объект, ПараметрыДействия);
	
	Если Элементы.Найти("Модель") <> Неопределено Тогда
		ЗначениеПараметра = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.Марка) Тогда
			ЗначениеПараметра = Объект.Марка;
		КонецЕсли;
		
		ОбновитьПараметрыВыбораМодели("Модель", ЗначениеПараметра);
	КонецЕсли;
	
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент = Неопределено)
	
	ПараметрыДействия = Новый Структура();
	МодельПриИзмененииНаСервере(ПараметрыДействия);
	УдалитьНесовместимыеДополнительныеОпции();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура МодельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Марка", Объект.Марка);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить(
		"НазначениеМодели",
		ПредопределенноеЗначение("Перечисление.НазначениеМоделиАвтомобиля.ПродаетсяВАвтосалоне")
	);
	ОткрытьФорму(
		"Справочник.Модели.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыОткрытия),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантКомплектацииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	ВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия);
	УдалитьНесовместимыеДополнительныеОпции();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия)
	
	Документы.РабочийЛист.ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
	
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобильЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.АвтомобильЦенаПриИзменении(Объект);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильЦенаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	АвтомобильЦенаПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура АвтомобильКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.АвтомобильКоличествоПриИзменении(Объект);
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильКоличествоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильКоличествоПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.АвтомобильСуммаПриИзменении(Объект);
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильСуммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильСуммаПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.АвтомобильСуммаВсегоПриИзменении(Объект);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильСуммаВсегоПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.АвтомобильСтавкаНДСПриИзменении(Объект);
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильСтавкаНДСПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильСуммаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильСуммаНДСПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильТипЦенЗакупкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.АвтомобильТипЦенЗакупкиПриИзменении(Объект);
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры  

&НаКлиенте
Процедура АвтомобильТипЦенЗакупкиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильТипЦенЗакупкиПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильСуммаЗакупкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛист.АвтомобильСуммаЗакупкиПриИзменении(Объект);
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры  

&НаКлиенте
Процедура АвтомобильСуммаЗакупкиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильСуммаЗакупкиПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область СтандартныеПодсистемыКонтактнаяИнформация

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииТелефона = Новый Структура;
	ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
	ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	РазрешитьВводНесколькихЗначенийТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "РазрешитьВводНесколькихЗначений");
	
	РазрешитьВводНесколькихЗначенийЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "РазрешитьВводНесколькихЗначений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКомментарияКонтактнойИнформацииСервер(КонтактнаяИнформация)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(КонтактнаяИнформация);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПредставлениеТелефона        = "";
		Объект.ПредставлениеТелефонаСтрокой = "";
		УстановитьСвойстваПоляВводаТелефона();
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.     
	Объект.ПредставлениеТелефона = Текст;
	Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииТелефона);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПредставлениеТелефона Тогда
		Объект.ПредставлениеТелефона = Элемент.ТекстРедактирования;
		Объект.ПредставлениеТелефонаСтрокой = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
		Объект.ПредставлениеТелефонаСтрокой,
		Объект.ПредставлениеТелефона,
		КомментарийТелефона
	);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение.Представление;
		КомментарийТелефона                 = ВыбранноеЗначение.Комментарий;
		Объект.ПредставлениеТелефонаСтрокой = ВыбранноеЗначение.Значение;
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение;
		КомментарийТелефона                 = "";
		Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(ВыбранноеЗначение, ВидКонтактнойИнформацииТелефона);
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
		
	Иначе
		
		УстановитьСвойстваПоляВводаТелефона();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ПредставлениеТелефона        = "";
	КомментарийТелефона                 = "";
	Объект.ПредставлениеТелефонаСтрокой = "";
	ПроверитьНеобходимостьОбновленияКИ();
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.АдресЭлектроннойПочты        = "";
		Объект.АдресЭлектроннойПочтыСтрокой = "";
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.
	Объект.АдресЭлектроннойПочты        = Текст;
	Объект.АдресЭлектроннойПочтыСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииЭлектроннойПочты);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.АдресЭлектроннойПочты        = "";
	Объект.АдресЭлектроннойПочтыСтрокой = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПредставлениеТелефона = Объект.ПредставлениеТелефона;
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				Объект.ПредставлениеТелефона,
				Объект.Контрагент,
				Объект.Ссылка
			);
		Иначе
			Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВзаимодействияАльфаАвтоКлиент.ПозвонитьКонтакту(Объект.Контрагент, ПредставлениеТелефона, Объект.Ссылка);
			Иначе
				ВывестиСообщение(Нстр("ru = 'Для звонка контрагент должен быть указан из справочника ""Контрагенты""'"), ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьОбновленияКИ()
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ТипЗнч(Объект.Контрагент) = Тип("Строка")
		ИЛИ Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.АдресЭлектроннойПочты.СписокВыбора.Количество() > 0
		И Объект.АдресЭлектроннойПочты <> "" Тогда
		ЭлектроннаяПочта = Элементы.АдресЭлектроннойПочты.СписокВыбора.НайтиПоЗначению(Объект.АдресЭлектроннойПочты);
		ЭтоНовыйАдрес = (ЭлектроннаяПочта = Неопределено);
	Иначе
		ЭтоНовыйАдрес = (Объект.АдресЭлектроннойПочты <> "");
	КонецЕсли;
	
	Если Элементы.ПредставлениеТелефона.СписокВыбора.Количество() > 0
		И Объект.ПредставлениеТелефона <> "" Тогда
		Телефон = Элементы.ПредставлениеТелефона.СписокВыбора.НайтиПоЗначению(Объект.ПредставлениеТелефона);
		ЭтоНовыйТелефон = (Телефон = Неопределено);
	Иначе
		ЭтоНовыйТелефон = (Объект.ПредставлениеТелефона <> "");
	КонецЕсли;
	
	ЕстьНоваяКИ = ЭтоНовыйАдрес ИЛИ ЭтоНовыйТелефон;
	
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = ЕстьНоваяКИ;
	
	Если НЕ ЕстьНоваяКИ Тогда
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредыдущиеАвтомобилиКонтрагента

&НаКлиенте
Процедура ПредыдущиеАвтомобилиПриИзменении(Элемент)
	
	ОбновитьПомощникВыбораАвтомобиляTradeIn();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеАвтомобилиМодельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПредыдущиеАвтомобили.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Марка", ТекущаяСтрока.Марка);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить(
		"НазначениеМодели",
		ПредопределенноеЗначение("Перечисление.НазначениеМоделиАвтомобиля.ПродаетсяВАвтосалоне")
	);
	ОткрытьФорму(
		"Справочник.Модели.ФормаВыбора",
		ПараметрыОткрытия,
		Элемент,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеАвтомобилиМодельПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.ПредыдущиеАвтомобили.НайтиПоИдентификатору(Элементы.ПредыдущиеАвтомобили.ТекущаяСтрока);
	ТекущиеДанные.Марка = МаркаМодели(ТекущиеДанные.Модель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеАвтомобилиКонтрагентаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПредыдущиеАвтомобилиКонтрагента.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Автомобиль);
	
КонецПроцедуры // ПредыдущиеАвтомобилиКонтрагентаВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияПодбора

&НаКлиенте
Процедура ИсторияПодбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Контейнер = Новый Структура(
		"Марка,
		|Модель,
		|ВариантКомплектации,
		|ВидКПП,
		|ТипКПП,
		|ТипСалона,
		|ТипКузова,
		|ТипТоплива,
		|Цвет,
		|ОбъемДвигателяНачало,
		|ОбъемДвигателяКонец,
		|ГодВыпускаНачало,
		|ГодВыпускаКонец,
		|ПробегНачало,
		|ПробегКонец,
		|ЦенаНачало,
		|ЦенаКонец"
	);
	ЗаполнитьЗначенияСвойств(Контейнер, Объект.ИсторияПодбора.НайтиПоИдентификатору(ВыбраннаяСтрока));
	ЗаполнитьЗначенияСвойств(Объект, Контейнер);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПодбораПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, АтрибутыНовогоСобытияИсторииПодбора());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

&НаКлиенте
Процедура ДругиеВариантыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, АтрибутыНовогоСобытияИсторииПодбора());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеВариантыАвтомобильПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДругиеВарианты.ТекущиеДанные;
	
	Если ТекущиеДанные.Автомобиль.Пустая() Тогда
		ТекущиеДанные.ЗаказНаАвтомобиль           = Неопределено;
		ТекущиеДанные.ЗаказПоставщикуНаАвтомобиль = Неопределено;
		Возврат;
	КонецЕсли;
	
	УстановитьЗаказыНаПодобранныеАвтомобили(ТекущиеДанные.Автомобиль);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОпции

&НаСервере
Процедура ОпцииПослеУдаленияСервер()
	
	УправлениеДиалогомАльфаАвтоСервер.ОпцииПослеУдаления(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпцииПослеУдаления(Элемент)
	
	ОпцииПослеУдаленияСервер();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомАльфаАвтоКлиент.ОпцииПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыОпции

&НаСервере
Процедура ОпцииОпцияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.РабочийЛист.ОпцииОпцияПриИзменении(Объект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииОпцияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииОпцияПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОпцииКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.РабочийЛист.ОпцииКоличествоПриИзменении(Объект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииКоличествоПриИзменении(Элемент)
	
	ОпцииКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ОпцииЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.РабочийЛист.ОпцииЦенаПриИзменении(Объект, ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпцииЦенаПриИзменении(Элемент)
	
	ОпцииЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ОпцииСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.РабочийЛист.ОпцииСуммаПриИзменении(Объект, ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпцииСуммаПриИзменении(Элемент)
	
	ОпцииСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ОпцииСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.РабочийЛист.ОпцииСтавкаНДСПриИзменении(Объект, ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпцииСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииСтавкаНДСПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОпцииСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.РабочийЛист.ОпцииСуммаВсегоПриИзменении(Объект, ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпцииСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииСуммаВсегоПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпцииОпцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура(
		"РежимВыбора,ВариантКомплектации,Автомобиль",
		Истина,
		Объект.ВариантКомплектации,
		Объект.Автомобиль
	);
	ОткрытьФорму(
		"Справочник.Опции.ФормаВыбора",
		ПараметрыОткрытия,
		Элемент,
		ЭтотОбъект,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПользователиПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НомерТекущейСтроки = Элементы.Пользователи.ТекущаяСтрока;
	// Выполним контроль дублей пользователей
	Для Каждого ТекСтрока Из Объект.Пользователи Цикл			
		Если ТекСтрока.НомерСтроки <> Элементы.Пользователи.ТекущиеДанные.НомерСтроки Тогда
			Если ТекСтрока.Пользователь = ВыбранноеЗначение Тогда
				ТекстСообщения = НСтр("ru = 'Пользователь %1 уже есть в списке участников.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(ТекстСообщения, ВыбранноеЗначение),, "Пользователь"); 
				ВыбранноеЗначение = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УстановитьОсновноеВозражение(Команда)
	
	ТекСтрока = Элементы.Возражения.ТекущаяСтрока;
	Если  ТекСтрока = Неопределено Тогда
		Возврат;
	Иначе
		НомерТекущейСтроки = Элементы.Возражения.ТекущиеДанные.НомерСтроки;
		Для Каждого Строка Из Объект.Возражения Цикл
			Строка.Основное = (Строка.НомерСтроки = НомерТекущейСтроки);		
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ОбработчикСобытия = "ПродолжитьСозданиеСобытия";
		ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(ЭтотОбъект, ПараметрыЗаписиНового);
		Возврат;
	КонецЕсли;
	
	ПродолжитьСозданиеСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагента(Команда)
	
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
			
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") И Не Объект.Контрагент.Пустая() Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Контрагент);
	Иначе
		ПараметрыФормы.Вставить("ОтборПоНаименованию", Объект.ОбращениеККлиенту);
		ПараметрыФормы.Вставить("ОтборНомерТелефона", Объект.ПредставлениеТелефона);
		ПараметрыФормы.Вставить("ОтборEmail", Объект.АдресЭлектроннойПочты);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаСписка", ПараметрыФормы, Элементы.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагентаДляОформления(Команда)
			
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
		
	Если Не Объект.КонтрагентДляОформления.Пустая() Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.КонтрагентДляОформления);
	Иначе
		ПараметрыФормы.Вставить("ОтборПоНаименованию", Объект.ОбращениеККлиенту);
		ПараметрыФормы.Вставить("ОтборНомерТелефона", Объект.ПредставлениеТелефона);
		ПараметрыФормы.Вставить("ОтборEmail", Объект.АдресЭлектроннойПочты);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаСписка", ПараметрыФормы, Элементы.КонтрагентДляОформления);

КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтомобиля(Команда)
	
	СохранитьПоискВИсторию();
	ПараметрыОткрытия = АвтомобилиКлиент.НовыеПараметрыПодбораАвтомобилей();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Объект);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		ПараметрыОткрытия.Контекст,
		КонтекстДляПодбора(),
		Истина
	);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		ПараметрыОткрытия.Отборы,
		ОтборыДляПодбора(),
		Истина
	);
	АвтомобилиКлиент.ОткрытьПодборАвтомобиля(ЭтотОбъект, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсторияАвтомобиля(Команда)
	
	ТекущиеДанные = Элементы.ПредыдущиеАвтомобилиКонтрагента.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана строка автомобиля для формирования отчета.'"));
		Возврат;
	КонецЕсли;
	
	// Вызовим общий обработчик
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, ТекущиеДанные.Автомобиль);
	
КонецПроцедуры // ОтчетИсторияАвтомобиля()

&НаКлиенте
Процедура ПоказатьАвтомобиль(Команда)
	
	ТекущиеДанные = Элементы.ПредыдущиеАвтомобилиКонтрагента.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка автомобиля.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Автомобиль);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРабочийЛист(Команда)
	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияАвтосалонВызовСервера.ОшибкаЖурналаРегистрации(
			СобытиеОшибкиДокумента(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Объект.Ссылка);
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать: ""Рабочий лист"".'"));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьЗаявкуНаАвтомобиль(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(
			,     
			НСтр("ru = 'Для создания заявки документ должен быть записан'")
		);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ЗаявкаНаАвтомобиль.ФормаОбъекта", ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпций(Команда)
	
	УправлениеДиалогомКлиент.ОткрытьПодборОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиПоиска(Команда)
	
	СохранитьПоискВИсторию();
	ОчиститьПараметрыПоиска();

КонецПроцедуры

&НаКлиенте
Процедура Зарезервировать(Команда)
	
	Отказ = Ложь;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(
			,     
			НСтр("ru = 'Для резервирования автомобиля документ должен быть записан'")
		);
		Возврат;
		
	КонецЕсли;

	Если Не Объект.Проведен Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для резервирования автомобиля рабочий лист должен быть проведен'"),
				,
				,
				"Объект",
				Отказ
			);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для резервирования автомобиля в рабочем листе должно быть заполнено поле ""Контрагент""'"),
				,
				,
				"Объект",
				Отказ
			);

	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗарезервироватьНаСервере();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезерв(Команда)
	
	ПроставитьАвтомобильРезервирования();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКИ(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если ИмяКоманды = "ОбновлятьКИ" И ПроверитьСогласиеНаОбработкуПерсональныхДанных(Объект.Контрагент) Тогда
		
		Если Не РазрешитьВводНесколькихЗначенийТелефона Или Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
			Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновлятьКИ", ЭтотОбъект);
			Если Не РазрешитьВводНесколькихЗначенийТелефона И Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
				ВидыКИ = НСтр("ru = 'телефона и адреса электронной почты'");
			ИначеЕсли Не РазрешитьВводНесколькихЗначенийТелефона Тогда
				ВидыКИ = НСтр("ru = 'телефона'");
			Иначе
				ВидыКИ = НСтр("ru = 'адреса электронной почты'");
			КонецЕсли;
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Для %1 не настроено хранение нескольких значений.
				|При включении обновления текущие значения в карточке контрагента будут заменены данными из документа. Продолжить?'"),
				ВидыКИ
			);
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		Подключаемый_ОбновлятьКИ(КодВозвратаДиалога.Да);
		
	Иначе
		Подключаемый_ОбновлятьКИ(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(Объект.АдресЭлектроннойПочтыСтрокой,
	Объект.АдресЭлектроннойПочты, ВидКонтактнойИнформацииЭлектроннойПочты, Объект.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ВыделитьОсновныеВозражения();
	ЗапретитьРедактированиеСуммОпций();
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьОсновныеВозражения()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Возражения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Возражения.Основное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ОсновноеВозражениеТекст);
	
КонецПроцедуры

&НаСервере
Процедура ЗапретитьРедактированиеСуммОпций()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОпцииСумма.Имя);
	ЭлементУсловногоОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОпцииСуммаВсего.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияПодбора

&НаКлиентеНаСервереБезКонтекста
Процедура ИсторияПодбораОбновитьПредставления(Форма)
	
	Для Каждого ЭлементИсторииПодбора Из Форма.Объект.ИсторияПодбора Цикл
		
		ИсторияПодбораОбновитьПредставленияСобытия(ЭлементИсторииПодбора);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИсторияПодбораОбновитьПредставленияСобытия(СобытиеИсторииПодбора)
	
	ОбновитьСобытиеОбъемыПредставление(СобытиеИсторииПодбора);
	ОбновитьСобытиеГодыВыпускаПредставление(СобытиеИсторииПодбора);
	ОбновитьСобытиеПробегиПредставление(СобытиеИсторииПодбора);
	ОбновитьСобытиеЦеныПредставление(СобытиеИсторииПодбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСобытиеОбъемыПредставление(СобытиеИсторииПодбора)
	
	ЕстьНачало = ЗначениеЗаполнено(СобытиеИсторииПодбора.ОбъемДвигателяНачало);
	ЕстьКонец  = ЗначениеЗаполнено(СобытиеИсторииПодбора.ОбъемДвигателяКонец);
	
	Если НЕ ЕстьНачало И НЕ ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ОбъемыПредставление = НСтр("ru = 'Любой'");
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало И ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ОбъемыПредставление = СтрШаблон(
			"%1 - %2",
			СобытиеИсторииПодбора.ОбъемДвигателяНачало,
			СобытиеИсторииПодбора.ОбъемДвигателяКонец
		);
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало Тогда
		
		СобытиеИсторииПодбора.ОбъемыПредставление =  СтрШаблон("> %1", СобытиеИсторииПодбора.ОбъемДвигателяНачало);
		Возврат;
		
	КонецЕсли;
	
	СобытиеИсторииПодбора.ОбъемыПредставление = СтрШаблон("< %1", СобытиеИсторииПодбора.ОбъемДвигателяКонец);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСобытиеГодыВыпускаПредставление(СобытиеИсторииПодбора)
	
	ЕстьНачало = ЗначениеЗаполнено(СобытиеИсторииПодбора.ГодВыпускаНачало);
	ЕстьКонец  = ЗначениеЗаполнено(СобытиеИсторииПодбора.ГодВыпускаКонец);
	
	Если НЕ ЕстьНачало И НЕ ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ГодыВыпускаПредставление = НСтр("ru = 'Любой'");
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало И ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ГодыВыпускаПредставление = СтрШаблон(
			"%1 - %2",
			Формат(СобытиеИсторииПодбора.ГодВыпускаНачало, "ДФ=yyyy"),
			Формат(СобытиеИсторииПодбора.ГодВыпускаКонец, "ДФ=yyyy")
		);
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало Тогда
		
		СобытиеИсторииПодбора.ГодыВыпускаПредставление = СтрШаблон(
			"> %1",
			Формат(СобытиеИсторииПодбора.ГодВыпускаНачало, "ДФ=yyyy")
		);
		Возврат;
		
	КонецЕсли;
	
	СобытиеИсторииПодбора.ГодыВыпускаПредставление = СтрШаблон(
		"< %1",
		Формат(СобытиеИсторииПодбора.ГодВыпускаКонец, "ДФ=yyyy")
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСобытиеПробегиПредставление(СобытиеИсторииПодбора)
	
	ЕстьНачало = ЗначениеЗаполнено(СобытиеИсторииПодбора.ПробегНачало);
	ЕстьКонец  = ЗначениеЗаполнено(СобытиеИсторииПодбора.ПробегКонец);
	
	Если НЕ ЕстьНачало И НЕ ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ПробегиПредставление = НСтр("ru = 'Любой'");
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало И ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ПробегиПредставление = СтрШаблон(
			"%1 - %2",
			СобытиеИсторииПодбора.ПробегНачало,
			СобытиеИсторииПодбора.ПробегКонец
		);
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало Тогда
		
		СобытиеИсторииПодбора.ПробегиПредставление =  СтрШаблон("> %1", СобытиеИсторииПодбора.ПробегНачало);
		Возврат;
		
	КонецЕсли;
	
	СобытиеИсторииПодбора.ПробегиПредставление = СтрШаблон("< %1", СобытиеИсторииПодбора.ПробегКонец);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСобытиеЦеныПредставление(СобытиеИсторииПодбора)
	
	ЕстьНачало = ЗначениеЗаполнено(СобытиеИсторииПодбора.ЦенаНачало);
	ЕстьКонец  = ЗначениеЗаполнено(СобытиеИсторииПодбора.ЦенаКонец);
	
	Если НЕ ЕстьНачало И НЕ ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ЦеныПредставление = НСтр("ru = 'Любая'");
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало И ЕстьКонец Тогда
		
		СобытиеИсторииПодбора.ЦеныПредставление = СтрШаблон(
			"%1 - %2",
			СобытиеИсторииПодбора.ЦенаНачало,
			СобытиеИсторииПодбора.ЦенаКонец
		);
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНачало Тогда
		
		СобытиеИсторииПодбора.ЦеныПредставление =  СтрШаблон("> %1", СобытиеИсторииПодбора.ЦенаНачало);
		Возврат;
		
	КонецЕсли;
	
	СобытиеИсторииПодбора.ЦеныПредставление = СтрШаблон("< %1", СобытиеИсторииПодбора.ЦенаКонец);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПоискВИсторию()
	
	УникальныеПоля = Новый Структура(
		"Марка,
		|Модель,
		|ВариантКомплектации,
		|ВидКПП,
		|ТипКПП,
		|ТипСалона,
		|ТипКузова,
		|ТипТоплива,
		|Цвет,
		|ОбъемДвигателяНачало,
		|ОбъемДвигателяКонец,
		|ГодВыпускаНачало,
		|ГодВыпускаКонец,
		|ПробегНачало,
		|ПробегКонец,
		|ЦенаНачало,
		|ЦенаКонец"
	);
	ЗаполнитьЗначенияСвойств(УникальныеПоля, Объект);
	
	Если Не ЗначениеЗаполнено(УникальныеПоля.Марка) И Не ЗначениеЗаполнено(УникальныеПоля.Модель) 
		Или Объект.ИсторияПодбора.НайтиСтроки(УникальныеПоля).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовоеИсторическоеСобытие = Объект.ИсторияПодбора.Добавить();
	ЗаполнитьЗначенияСвойств(НовоеИсторическоеСобытие, Объект);
	ЗаполнитьЗначенияСвойств(НовоеИсторическоеСобытие, АтрибутыНовогоСобытияИсторииПодбора());
	ИсторияПодбораОбновитьПредставленияСобытия(НовоеИсторическоеСобытие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПараметрыПоиска()
	
	УникальныеПоля = Новый Структура(
		"Марка,
		|Модель,
		|ВариантКомплектации,
		|ВидКПП,
		|ТипКПП,
		|ТипСалона,
		|ТипКузова,
		|ТипТоплива,
		|Цвет,
		|ОбъемДвигателяНачало,
		|ОбъемДвигателяКонец,
		|ГодВыпускаНачало,
		|ГодВыпускаКонец,
		|ПробегНачало,
		|ПробегКонец,
		|ЦенаНачало,
		|ЦенаКонец"
	);
	
	Для Каждого Поле Из УникальныеПоля Цикл
		
		Объект[Поле.Ключ] = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДругиеВарианты

&НаСервере
Процедура ЗаполнитьДругойВариантАвтомобиля(АвтомобильДоПодбора)
	
	Если АвтомобильДоПодбора.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УсловиеПоиска = Новый Структура("Автомобиль", АвтомобильДоПодбора);
	НайденныеСтроки = Объект.ДругиеВарианты.НайтиСтроки(УсловиеПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Объект.ДругиеВарианты.Вставить(0);
	НоваяСтрока.Автомобиль = АвтомобильДоПодбора;
	НоваяСтрока.Создана    = ТекущаяДатаСеанса();
	НоваяСтрока.Автор      = Пользователи.ТекущийПользователь();
	УстановитьЗаказыНаПодобранныеАвтомобили(АвтомобильДоПодбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаказыНаПодобранныеАвтомобили(АвтомобильЗаказа = Неопределено)
	
	ДанныеАвтомобилей = Объект.ДругиеВарианты.Выгрузить(, "Автомобиль");
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		
		ДанныеАвтомобилей.Очистить();
		ДанныеАвтомобилей.Добавить().Автомобиль = АвтомобильЗаказа;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Автомобили.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ СписокАвтомобилей
		|ИЗ
		|	&Автомобили КАК Автомобили
		|ГДЕ
		|	Автомобили.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокАвтомобилей.Автомобиль КАК Автомобиль,
		|	ЗаказыАвтомобилейОбороты.Заказ КАК Заказ
		|ИЗ
		|	СписокАвтомобилей КАК СписокАвтомобилей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыАвтомобилей.Обороты(, , , Заказ ССЫЛКА Документ.ЗаказНаАвтомобиль) КАК ЗаказыАвтомобилейОбороты
		|		ПО СписокАвтомобилей.Автомобиль = ЗаказыАвтомобилейОбороты.Автомобиль
		|ГДЕ
		|	ЗаказыАвтомобилейОбороты.КоличествоПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказыАвтомобилейОбороты.Заказ.МоментВремени УБЫВ
		|ИТОГИ ПО
		|	Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПоставщикамНаАвтомобилиОбороты.ЗаказПоставщику КАК ЗаказПоставщику,
		|	СписокАвтомобилей.Автомобиль КАК Автомобиль
		|ИЗ
		|	СписокАвтомобилей КАК СписокАвтомобилей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Обороты КАК ЗаказыПоставщикамНаАвтомобилиОбороты
		|		ПО СписокАвтомобилей.Автомобиль = ЗаказыПоставщикамНаАвтомобилиОбороты.Автомобиль
		|ГДЕ
		|	ЗаказыПоставщикамНаАвтомобилиОбороты.КоличествоПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказыПоставщикамНаАвтомобилиОбороты.ЗаказПоставщику.МоментВремени УБЫВ
		|ИТОГИ ПО
		|	Автомобиль"
	);
	Запрос.УстановитьПараметр("Автомобили", ДанныеАвтомобилей);
	РезультатЗаказов = Запрос.ВыполнитьПакет();
	
	АвтомобилиСЗаказамиКлиентов = 1;
	АвтомобилиСЗаказамиПоставщикам = 2;
	
	Если НЕ РезультатЗаказов[АвтомобилиСЗаказамиКлиентов].Пустой() Тогда
		
		Выборка = РезультатЗаказов[АвтомобилиСЗаказамиКлиентов].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			НайденныеСтроки = Объект.ДругиеВарианты.НайтиСтроки(Новый Структура("Автомобиль", Выборка.Автомобиль));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ВыборкаЗаказ = Выборка.Выбрать();
				
				Если ВыборкаЗаказ.Следующий() Тогда
					
					НайденныеСтроки[0].ЗаказНаАвтомобиль = ВыборкаЗаказ.Заказ;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ РезультатЗаказов[АвтомобилиСЗаказамиПоставщикам].Пустой() Тогда
		
		Выборка = РезультатЗаказов[АвтомобилиСЗаказамиПоставщикам].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			НайденныеСтроки = Объект.ДругиеВарианты.НайтиСтроки(Новый Структура("Автомобиль", Выборка.Автомобиль));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ВыборкаЗаказ = Выборка.Выбрать();
				
				Если ВыборкаЗаказ.Следующий() Тогда
					
					НайденныеСтроки[0].ЗаказПоставщикуНаАвтомобиль = ВыборкаЗаказ.ЗаказПоставщику;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборАвтомобиля

&НаКлиенте
Функция КонтекстДляПодбора()
	
	КонтекстДляПодбора = Новый Структура("Документ", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		КонтекстДляПодбора.Вставить("Контрагент", Объект.Контрагент);
		
	Иначе
		
		КонтекстДляПодбора.Вставить("Контрагент", Объект.ОбращениеККлиенту);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.ПредставлениеТелефона) Тогда
		
		КонтекстДляПодбора.Вставить("Телефон", Объект.ПредставлениеТелефона);
		
	КонецЕсли;
	
	Возврат КонтекстДляПодбора;
	
КонецФункции

&НаКлиенте
Функция ОтборыДляПодбора()
	
	ПоляОтборов = ПоляОтборовПодбора();
	ОтборыДляПодбора = Новый Структура(ПоляОтборов);
	ЗаполнитьЗначенияСвойств(ОтборыДляПодбора, Объект, ПоляОтборов);
	Возврат ОтборыДляПодбора;
	
КонецФункции

&НаКлиенте
Функция ПоляОтборовПодбора()
	
	ПоляОтборов = Новый Массив();
	ПоляОтборов.Добавить("ВидАвтомобиля");
	ПоляОтборов.Добавить("Марка");
	ПоляОтборов.Добавить("Модель");
	ПоляОтборов.Добавить("ВариантКомплектации");
	ПоляОтборов.Добавить("ТипСалона");
	ПоляОтборов.Добавить("Цвет");
	ПоляОтборов.Добавить("ОбъемДвигателяНачало");
	ПоляОтборов.Добавить("ОбъемДвигателяКонец");
	ПоляОтборов.Добавить("ЦенаНачало");
	ПоляОтборов.Добавить("ЦенаКонец");
	
	Если Объект.ВариантКомплектации.Пустая() Тогда
		
		ПоляОтборов.Добавить("ВидКПП");
		ПоляОтборов.Добавить("ТипКПП");
		ПоляОтборов.Добавить("ТипКузова");
		ПоляОтборов.Добавить("ТипТоплива");
		
	КонецЕсли;
	
	Если Объект.ВидАвтомобиля = ПредопределенноеЗначение("Перечисление.ВидАвтомобиля.АвтомобильСПробегом") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПоляОтборов,
			СтрРазделить("ГодВыпускаНачало,ГодВыпускаКонец,ПробегНачало,ПробегКонец", ",")
		);
		
	КонецЕсли;
	
	Возврат СтрСоединить(ПоляОтборов, ",");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораАвтомобиля(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПодобранныйАвтомобиль(РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодобранныйАвтомобиль(ПодобранныйАвтомобиль)
	
	Если ПодобранныйАвтомобиль = Объект.Автомобиль Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДругойВариантАвтомобиля(Объект.Автомобиль);
	Объект.Автомобиль = ПодобранныйАвтомобиль;
	АвтомобильПриИзмененииНаСервере(Неопределено);
	
	ДокументРезервированияАвтомобиля = Документы.РабочийЛист.ДокументРезервированияАвтомобиля(Объект.Автомобиль);
	УправлениеДиалогомНаСервере();
	ВыбранныйАвтомобиль = Объект.Автомобиль;
	
КонецПроцедуры

#КонецОбласти

#Область СвязьСРабочимЛистомВыкупа

&НаКлиенте
Процедура НачатьОчисткуРабочегоЛистаВыкупа()
	
	ОтветыНаВопрос = Новый СписокЗначений();
	ОтветыНаВопрос.Добавить("РазорватьСвязь", НСтр("ru = 'Разорвать связь?'"));
	ОтветыНаВопрос.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	ПоказатьВопрос(
		Новый ОписаниеОповещения("РабочийЛистаВыкупаПодтверждениеОчистки", ЭтотОбъект),
		НСтр("ru = 'Документ связан с рабочим листом'"),
		ОтветыНаВопрос
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийЛистаВыкупаПодтверждениеОчистки(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = "РазорватьСвязь" Тогда
		
		ОчиститьРабочийЛистВыкупа();
		Возврат;
		
	КонецЕсли;
	
	Объект.ТрейдИн = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРабочийЛистВыкупа()
	
	СвязатьСРабочимЛистомВыкупа();
	ОбновитьНадписьРабочийЛистВыкупа();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРабочийЛистВыкупа()
	
	СброситьСвязьСРабочимЛистомВыкупа();
	ОбновитьНадписьРабочийЛистВыкупа();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СброситьСвязьСРабочимЛистомВыкупа()
	
	Если РабочийЛистВыкупа.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(РабочийЛистВыкупа);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РабочийЛист.Блокировка рабочий лист выкупа автомобиля'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РабочийЛистВыкупа,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось заблокировать рабочий лист выкупа автомобиля для редактирования.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	ДокументОбъект = РабочийЛистВыкупа.ПолучитьОбъект();
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДокументРабочийЛист = Неопределено;
	
	Попытка
		
		ДокументОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РабочийЛист.Запись рабочий лист выкупа автомобиля'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РабочийЛистВыкупа,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось записать рабочий лист выкупа автомобиля.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(РабочийЛистВыкупа);
	РабочийЛистВыкупа = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура СвязатьСРабочимЛистомВыкупа()
	
	Если РабочийЛистВыкупа.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(РабочийЛистВыкупа);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РабочийЛист.Блокировка рабочий лист выкупа автомобиля'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РабочийЛистВыкупа,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось заблокировать рабочий лист выкупа автомобиля для редактирования.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	ДокументОбъект = РабочийЛистВыкупа.ПолучитьОбъект();
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДокументРабочийЛист = Объект.Ссылка;
	
	Попытка
		
		ДокументОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РабочийЛист.Запись рабочий лист выкупа автомобиля'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РабочийЛистВыкупа,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось записать рабочий лист выкупа автомобиля.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(РабочийЛистВыкупа);
	
КонецПроцедуры

&НаСервере
Процедура СвязанныйРабочийЛистВыкупа()
	
	Если Объект.Ссылка.Пустая()
		ИЛИ НЕ ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтомобилиСПробегом")
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Документы.РабочийЛистВыкупаАвтомобиля) Тогда
		
		РабочийЛистВыкупа = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	РабочийЛистВыкупаАвтомобиля.Ссылка КАК РабочийЛистВыкупа
		|ИЗ
		|	Документ.РабочийЛистВыкупаАвтомобиля КАК РабочийЛистВыкупаАвтомобиля
		|ГДЕ
		|	РабочийЛистВыкупаАвтомобиля.ДокументРабочийЛист = &Документ"
	);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		РабочийЛистВыкупа = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	РабочийЛистВыкупа = Результат.Выгрузить()[0].РабочийЛистВыкупа;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьРабочийЛистВыкупа()
	
	ЧастиСтроки = Новый Массив();
	
	Если РабочийЛистВыкупа.Пустая() Тогда
		
		ЧастиСтроки.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'создать'"),,,, ДействияСРабочимЛистомВыкупа().Создать)
		);
		ЧастиСтроки.Добавить(" ");
		ЧастиСтроки.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'выбрать'"),,,, ДействияСРабочимЛистомВыкупа().Выбрать)
		);
		
	Иначе
		
		ЧастиСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(РабочийЛистВыкупа),
				,
				,
				,
				ПолучитьНавигационнуюСсылку(РабочийЛистВыкупа)
			)
		);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(" "));
		ЧастиСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				БиблиотекаКартинок.Очистить,
				,
				,
				,
				ДействияСРабочимЛистомВыкупа().Сбросить
			)
		);
		
	КонецЕсли;
	
	НадписьРабочийЛистВыкупа = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДействияСРабочимЛистомВыкупа()
	
	Возврат Новый Структура("Создать,Выбрать,Сбросить", "Создать", "Выбрать", "Сбросить");
	
КонецФункции

&НаКлиенте
Процедура ВыборРабочийЛистВыкупаЗавершение(ВыбранныйДокумент, Контекст) Экспорт
	
	Если ВыбранныйДокумент = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РабочийЛистВыкупа = ВыбранныйДокумент;
	УстановитьРабочийЛистВыкупа();
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеРабочегоЛистаВыкупаЗавершение(Результат, Контекст) Экспорт
	
	СозданиеРабочегоЛистаВыкупаЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СозданиеРабочегоЛистаВыкупаЗавершениеНаСервере()
	
	СвязанныйРабочийЛистВыкупа();
	ОбновитьНадписьРабочийЛистВыкупа();
	
КонецПроцедуры

#КонецОбласти

#Область ПредыдущиеАвтомобили

&НаСервере
Процедура ЗаполнитьПредыдущиеАвтомобили()
	
	ПредыдущиеАвтомобилиКонтрагента.Очистить();
	
	Если КонтрагентЕстьВБазе() Тогда
		
		ПредыдущиеАвтомобилиКонтрагента.Загрузить(КлиентыСервер.ИсторияАвтомобилей(Объект.Контрагент));
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрагентЕстьВБазе()
	
	Возврат ЗначениеЗаполнено(Объект.Контрагент) И ТипЗнч(Объект.Контрагент) <> Тип("Строка");
	
КонецФункции

&НаСервере
Процедура ОбновитьПомощникВыбораАвтомобиляTradeIn()
	
	Элементы.ТрейдИнАвтомобиль.СписокВыбора.Очистить();
	ТекущиеАвтомобилиКлиента = ТекущиеАвтомобилиКлиента();
	
	Для Каждого ТекущийАвтомобиль Из ТекущиеАвтомобилиКлиента Цикл
		
		ЗначенияПараметровАвтомобиля = Новый Структура();
		ЗначенияПараметровАвтомобиля.Вставить("ТрейдИнАвтомобиль", ТекущийАвтомобиль.Автомобиль);
		ЗначенияПараметровАвтомобиля.Вставить("ТрейдИнМарка",      ТекущийАвтомобиль.Марка);
		ЗначенияПараметровАвтомобиля.Вставить("ТрейдИнМодель",     ТекущийАвтомобиль.Модель);
		ЗначенияПараметровАвтомобиля.Вставить("ТрейдИнГодВыпуска", ТекущийАвтомобиль.ГодВыпуска);
		ЗначенияПараметровАвтомобиля.Вставить("ТрейдИнПробег");
		ЗначенияПараметровАвтомобиля.Вставить("ТрейдИнЦена");
		
		Элементы.ТрейдИнАвтомобиль.СписокВыбора.Добавить(
			Новый ФиксированнаяСтруктура(ЗначенияПараметровАвтомобиля),
			ТекущийАвтомобиль.Наименование
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекущиеАвтомобилиКлиента()
	
	ОписанияАвтомобилей = Новый Массив();
	НеПроданныеАвтомобили = ПредыдущиеАвтомобилиКонтрагента.НайтиСтроки(Новый Структура("ДатаОкончания", Дата(1, 1, 1)));
	Автомобили = ПредыдущиеАвтомобилиКонтрагента
		.Выгрузить(НеПроданныеАвтомобили, "Автомобиль")
		.ВыгрузитьКолонку("Автомобиль");
	РеквизитыАвтомобилей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Автомобили,
		"Наименование,Марка,Модель,ГодВыпуска"
	);
	
	Для Каждого КлючЗначение Из РеквизитыАвтомобилей Цикл
		
		КлючЗначение.Значение.Вставить("Автомобиль", КлючЗначение.Ключ);
		ОписанияАвтомобилей.Добавить(КлючЗначение.Значение);
		
	КонецЦикла;
	
	Для Каждого ПредыдущийАвтомобиль Из Объект.ПредыдущиеАвтомобили Цикл
		
		Если ПредыдущийАвтомобиль.Марка.Пустая() И ПредыдущийАвтомобиль.Модель.Пустая() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОписанияАвтомобилей.Добавить(
			Новый Структура(
				"Наименование,Марка,Модель,ГодВыпуска,Автомобиль",
				СтрШаблон("%1-%2", ПредыдущийАвтомобиль.Марка, ПредыдущийАвтомобиль.Модель),
				ПредыдущийАвтомобиль.Марка,
				ПредыдущийАвтомобиль.Модель
			)
		);
		
	КонецЦикла;
	
	Возврат ОписанияАвтомобилей;
	
КонецФункции
	
#КонецОбласти

&НаСервереБезКонтекста
Функция АтрибутыНовогоСобытияИсторииПодбора()
	
	Возврат Новый Структура(
		"Автор,ДатаЗаписи,Создана",
		Пользователи.ТекущийПользователь(),
		ТекущаяДатаСеанса(),
		ТекущаяДатаСеанса()
	);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыРабочегоЛиста()
	
	Элементы.Статус.СписокВыбора.Очистить();
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтатусыРабочегоЛиста.Ссылка,
		|	СтатусыРабочегоЛиста.Наименование
		|ИЗ
		|	Справочник.СтатусыРабочегоЛиста КАК СтатусыРабочегоЛиста
		|ГДЕ
		|	НЕ СтатусыРабочегоЛиста.ПометкаУдаления
		|	И СтатусыРабочегоЛиста.ИспользоватьВРабочемЛисте
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыРабочегоЛиста.ПорядокВОтчете"	
	);
		
	СтатусыРабочегоЛиста = Запрос.Выполнить().Выбрать();
	
	Пока СтатусыРабочегоЛиста.Следующий() Цикл
		
	 	Элементы.Статус.СписокВыбора.Добавить(СтатусыРабочегоЛиста.Ссылка, СтатусыРабочегоЛиста.Наименование);
	 	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыДляКомуПокупает()
	
	СписокКомуПокупает = Новый Массив;
	СписокКомуПокупает.Добавить("Себе");
	СписокКомуПокупает.Добавить("Супруге(у)");
	СписокКомуПокупает.Добавить("Детям");
	СписокКомуПокупает.Добавить("Родственникам");
	СписокКомуПокупает.Добавить("Прочее");
	Элементы.КомуПокупает.СписокВыбора.ЗагрузитьЗначения(СписокКомуПокупает);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыДляСКемПришел()

	СписокСКемПришел = Новый Массив;
	СписокСКемПришел.Добавить("Один");
	СписокСКемПришел.Добавить("С супругой(ом)");
	СписокСКемПришел.Добавить("С семьей");
	СписокСКемПришел.Добавить("С другом");
	СписокСКемПришел.Добавить("С родственником");
	Элементы.СКемПришел.СписокВыбора.ЗагрузитьЗначения(СписокСКемПришел);

КонецПроцедуры

&НаСервере
Процедура УстановитьМаркуАвтомобиляПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.Марка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяМаркаПоУмолчанию = УчетныеПолитикиСервер.Значение(
		"МаркаПоУмолчанию",
		ТекущаяДатаСеанса(),
		ПараметрыСеанса.ПодразделениеКомпании		
	);
	
	Если ТекущаяМаркаПоУмолчанию = Справочники.Марки.ПустаяСсылка() Тогда
		
		ТекущаяМаркаПоУмолчанию = Справочники.Марки.МаркаНеУказана;
		
	КонецЕсли;
	
	Объект.Марка = ТекущаяМаркаПоУмолчанию;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрВыбораМодели()
	
	Если НеСтандартнаяМарка(Объект.Марка) И Элементы.Найти("Модель") <> Неопределено Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.Модель.ПараметрыВыбора,
			"Отбор.Марка",
			Объект.Марка
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НеСтандартнаяМарка(ВыбраннаяМарка)
	
	Возврат НЕ ВыбраннаяМарка = Справочники.Марки.МаркаНеУказана;
	
КонецФункции

&НаСервере
Процедура УстановитьЕдиногоКонтрагентаНаСервере()
	
	Документы.РабочийЛист.УстановитьЕдиногоКонтрагента(Объект, ПодчиненныеДокументы);
	
КонецПроцедуры // УстановитьЕдиногоКонтрагентаНаСервере()

&НаКлиенте
Процедура Подключаемый_ПослеЗакрытияВопросаУстановитьЕдиногоКонтрагента(Результат, ПараметрыДействия) Экспорт
	
	УстановитьЕдиногоКонтрагентаНаСервере();
	
	// Отмена связанных событий
	Если ПараметрыДействия.Свойство("ОтменитьСвязанныеСобытия") Тогда
		ПараметрыОтмены = ПараметрыДействия.ОтменитьСвязанныеСобытия;
		Оповещение = Новый ОписаниеОповещения("ПродолжитьПослеЗаписи", ЭтотОбъект, ПараметрыОтмены);
		ТекстВопроса = НСтр("ru = 'Есть подчиненные события для Рабочего листа %1 от %2.
			|Отменить связанные события?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ПараметрыОтмены.Номер, ПараметрыОтмены.Дата);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ПослеЗакрытияВопросаУстановитьЕдиногоКонтрагента()

&НаКлиенте
Процедура ПродолжитьПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	АвтомобилиСПробегомВызовСервера
	.ОтменитьСвязанныеСобытия(ДополнительныеПараметры.МассивДокументов, ДополнительныеПараметры.Комментарий);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаркаМодели(Модель)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Модель, "Марка");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаСнятияРезерваАвтомобиля(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("НеПроверятьРезервы");
	ДополнительныеПараметры.Вставить("КонтролироватьПересечениеИнтервалов", Ложь);
	
	Записать(ДополнительныеПараметры);
	
КонецПроцедуры // Подключаемый_ОбработкаСнятияРезерваАвтомобиля()

&НаСервере
Процедура ПроверитьНаличиеСервисныхКомпанийДляАвтомобиля()
	
	ЕстьСервисныеКомпанииДляАвтомобиля = АвтомобилиСервер
		.ПроверитьСервиснуюКампанию(Объект.Автомобиль, Объект.Дата, Истина)
		.Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеОшибкиДокумента()
	
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		МодульОбщегоНазначения = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
	#Иначе
		МодульОбщегоНазначения = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияКлиент");
	#КонецЕсли
	
	Возврат НСтр("ru = 'Рабочий лист.Ошибка записи документа'", МодульОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыВыбораМодели(Элемент, Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		
		УправлениеДиалогомСервер.УдалитьПараметрВыбора(Элементы[Элемент].ПараметрыВыбора, "Отбор.Марка");
		Возврат;
		
	КонецЕсли;
	
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы[Элемент].ПараметрыВыбора, "Отбор.Марка", Значение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНаСписокСобытий()
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СобытияРабочегоЛиста.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоиска",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора,
		"ДокументОснование",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора,
		"Ссылка",
		Объект.ДокументОснование,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры // УстановитьОтборНаСписокСобытий()

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораОпций()
	
	ДоступныеОпции = Новый Массив();
	ДополнительныеОпции = ОпцииАвтомобилей.ДополнительныеОпцииКомплектации(Объект.ВариантКомплектации);
	УстановленныеНаАвтомобильОпции = ОпцииАвтомобилей.ОпцииУстановленныеНаАвтомобиль(Объект.Автомобиль);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОпции, ДополнительныеОпции, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОпции, УстановленныеНаАвтомобильОпции, Истина);
	
	Если ДоступныеОпции.Количество() = 0 Тогда
		
		ДоступныеОпции.Добавить(Справочники.Опции.ПустаяСсылка());
		
	КонецЕсли;
	
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		Элементы.ОпцииОпция.ПараметрыВыбора,
		"Отбор.Ссылка",
		ДоступныеОпции
	);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБазовыеОпции()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		БазовыеОпции,
		"ВариантКомплектации",
		Объект.ВариантКомплектации,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.ТрейдИнРеквизиты.Видимость = Объект.ТрейдИн;
	Элементы.НадписьРабочийЛистВыкупа.Видимость = Объект.ТрейдИн;
	
	Элементы.ГруппаКонтрагентДляОформления.Доступность = (НЕ Объект.КомуПокупает = "Себе");
	
	ЕстьДокументРезервирования = ЗначениеЗаполнено(ДокументРезервированияАвтомобиля);
	
	Если ЕстьДокументРезервирования Тогда
		ДатаСнятияРезервирования = Дата('00010101');	
	Иначе
		СекундВДне = 86400;
		
		ДнейВРезервеПоУмолчанию = ПраваИНастройкиПользователя.Значение("СрокРезерваДляАвтомобилейПоУмолчанию");
		Если Не ЗначениеЗаполнено(ДнейВРезервеПоУмолчанию) Тогда
			ДнейВРезервеПоУмолчанию = 3;
		КонецЕсли;
		ДатаСнятияРезервирования = НачалоДня(ТекущаяДатаСеанса() + (ДнейВРезервеПоУмолчанию * СекундВДне));
	КонецЕсли;
		
	АвтомобильЗарезервированНаТекущегоКонтрагента = ЕстьДокументРезервирования 
		И (Объект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРезервированияАвтомобиля, "ДокументОснование.Контрагент"));
		
	Элементы.ДатаСнятияРезервирования.ТолькоПросмотр = ЕстьДокументРезервирования;
	Элементы.ДатаСнятияРезервирования.Видимость = Не ЕстьДокументРезервирования;
	Элементы.Зарезервировать.Видимость = НЕ ЕстьДокументРезервирования;
	Элементы.ДокументРезервированияАвтомобиля.Видимость = ЕстьДокументРезервирования;
	
	Если АвтомобильЗарезервированНаТекущегоКонтрагента Тогда
		Элементы.СостояниеРезервирования.Видимость = Ложь;
		Элементы.ДокументРезервированияАвтомобиля.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
	Иначе
		Элементы.СостояниеРезервирования.Видимость = ЕстьДокументРезервирования;
		Элементы.ДокументРезервированияАвтомобиля.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	КонецЕсли;	
		
	ОтображатьПараметрыИзКомплектации = НЕ Объект.ВариантКомплектации.Пустая();
	
	Элементы.ТипКПП.Видимость                                       = НЕ ОтображатьПараметрыИзКомплектации;
	Элементы.ВариантКомплектацииТипКПП.Видимость                    = ОтображатьПараметрыИзКомплектации;
	Элементы.ВидКПП.Видимость                                       = НЕ ОтображатьПараметрыИзКомплектации;
	Элементы.ВариантКомплектацииТипКППВид.Видимость                 = ОтображатьПараметрыИзКомплектации;
	Элементы.ТипКузова.Видимость                                    = НЕ ОтображатьПараметрыИзКомплектации;
	Элементы.ВариантКомплектацииТипКузова.Видимость                 = ОтображатьПараметрыИзКомплектации;
	Элементы.ТипТоплива.Видимость                                   = НЕ ОтображатьПараметрыИзКомплектации;
	Элементы.ВариантКомплектацииМодельДвигателяТипТоплива.Видимость = ОтображатьПараметрыИзКомплектации;
	
	ВыводитьГодыИПробег = (Объект.ВидАвтомобиля = Перечисления.ВидАвтомобиля.АвтомобильСПробегом);
	Элементы.ГодыВыпуска.Видимость = ВыводитьГодыИПробег;
	Элементы.Пробеги.Видимость = ВыводитьГодыИПробег;
	
	Элементы.СостояниеСервиснойКомпании.Видимость = ЕстьСервисныеКомпанииДляАвтомобиля;
	
	Элементы.СтраницаВзаимодействия.Видимость = НЕ Объект.Ссылка.Пустая();
	
	Элементы.ДанныеРабочегоЛистаВыкупа.Видимость = НЕ РабочийЛистВыкупа.Пустая();
	
	Элементы.ПриобретенУФизЛица.Видимость =
		Не Объект.Автомобиль.Пустая()
		И Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			Объект.Автомобиль,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
			Объект.Дата) = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПрерватьВыполнение = Не УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	
	Если ПрерватьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПродолжатьВыполнение = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжатьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыВопрос = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Вопрос");
	Если ДополнительныеПараметрыВопрос = "ВопросСоответствияМарок" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Марка = ДополнительныеПараметры.ВыбранноеЗначение;
			МаркаПриИзменении();
			МаркаПриИзмененииНаСервере();
		КонецЕсли;
		Возврат;
	ИначеЕсли ДополнительныеПараметрыВопрос = "ВопросСоответствияМарокТрейдИн" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.ТрейдИнМарка = ДополнительныеПараметры.ВыбранноеЗначение;
			МаркаТрейдИнПриИзменении();
			МаркаТрейдИнПриИзмененииНаСервере();
		КонецЕсли;
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОповещения) = Тип("СправочникСсылка.Модели") Тогда
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ТрейдИн") = "ТрейдИн" Тогда
			Объект.ТрейдИнМодель = РезультатОповещения;
			Объект.ТрейдИнМарка = МаркаМодели(Объект.ТрейдИнМодель);
			МодельТрейдИнПриИзменении();
		Иначе
			Объект.Модель = РезультатОповещения;
			Объект.Марка = МаркаМодели(Объект.Модель);
			МодельПриИзменении();
		КонецЕсли;
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОповещения) = Тип("СправочникСсылка.Автомобили") Тогда
		Объект.Автомобиль = РезультатОповещения;
		АвтомобильПриИзменении();
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") И Объект.Опции.Количество() = 0 Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	КонецЕсли;
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗадатьВопросОСнятииРезерва(ПараметрыЗаписи)
	
	Если
		Объект.Автомобиль.Пустая()
		ИЛИ АвтомобильРезервирования.Пустая()
		ИЛИ Объект.Автомобиль = АвтомобильРезервирования
	Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РучкаСнятиеРезервов = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаСнятияРезерваАвтомобиля",
		ЭтотОбъект,
		ПараметрыЗаписи
	);
	ШаблонВопроса = НСтр(
		"ru = 'По рабочему листу есть действующий резерв по автомобилю <%1>.
		|При записи документа резервы будут сняты.
		|Продолжить?'"
	);
	ПоказатьВопрос(
		РучкаСнятиеРезервов,
		СтрШаблон(ШаблонВопроса, АвтомобильРезервирования),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Контроль резервирования автомобиля'")
	);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УдалитьНесовместимыеДополнительныеОпции()
	
	Если Объект.Опции.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВариантКомплектации = ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка") Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Из таблицы опций будут удалены опции, несовместимые с выбранным вариантом комплектации.'")
		);
		Объект.Опции.Очистить();
		Возврат;
		
	КонецЕсли;
	
	НесовместимыеОпции = ПолучитьНесовместимыеДополнительныеОпции();
	
	Если НесовместимыеОпции = Неопределено Тогда
		
		ОбновитьОпцииНаСервере();
		Возврат;
		
	КонецЕсли;
	
	ПоказатьПредупреждение(
		,
		НСтр("ru = 'Из таблицы опций будут удалены опции, несовместимые с выбранным вариантом комплектации.'")
	);
	
	Для Каждого Строка Из НесовместимыеОпции Цикл
		
		НайденныеСтроки = Объект.Опции.НайтиСтроки(Новый Структура ("Опция", Строка));
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			Объект.Опции.Удалить(ТекСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбновитьОпцииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНесовместимыеДополнительныеОпции()
	
	Возврат ОпцииАвтомобилей.ПолучитьНесовместимыеДополнительныеОпции(Объект);
	
КонецФункции

&НаСервере
Процедура ОбновитьОпцииНаСервере()
	
	Для Каждого Строка Из Объект.Опции Цикл
		
		Строка.Цена = 0;
		Документы.РабочийЛист.ОпцииОпцияПриИзменении(Объект, Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеСогласияНаОбработкуПерсональныхДанных()
	
	Если Объект.Контрагент.Пустая() Тогда
		
		ЕстьСогласиеНаОбработкуПерсональныхДанныхКонтрагента = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ФормаСобственности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ФормаСобственности");
	
	Если ФормыСобственностиСОбязательнымСогласием().Найти(ФормаСобственности) = Неопределено Тогда
		
		ЕстьСогласиеНаОбработкуПерсональныхДанныхКонтрагента = Истина;
		Возврат;
		
	КонецЕсли;
	
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Объект.Контрагент,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	ЕстьСогласиеНаОбработкуПерсональныхДанныхКонтрагента = Согласие = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормыСобственностиСОбязательнымСогласием()
	
	Результат = Новый Массив(2);
	Результат[0] = Перечисления.ФормыСобственности.ЧастноеЛицо;
	Результат[1] = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаДокументЖалобаКлиентаСоздатьНаОсновании",
			"Видимость",
			Константы.ИспользоватьЖалобы.Получить()
		);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроставитьАвтомобильРезервирования();
	
	ДокументРезервирования = Документы.РабочийЛист.ДокументРезервированияАвтомобиля(Объект.Автомобиль);
	ДокументРезервированияАвтомобиля = ДокументРезервирования;
	
	Если НЕ ДокументРезервирования = Неопределено Тогда
		АвтомобильРезервирования = Объект.Автомобиль;
	Иначе
		АвтомобильРезервирования = Справочники.Автомобили.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗарезервироватьНаСервере()
	
	Отказ = Ложь;
	
	Если ДатаСнятияРезервирования = Дата('00010101') ИЛИ ДатаСнятияРезервирования < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Указанный срок снятия с резервирования меньше текущей даты.'"),
			,
			,
			"Объект",
			Отказ
		);
				
	КонецЕсли;

	ДокументРезервированияАвтомобиля = Документы.РабочийЛист.ДокументРезервированияАвтомобиля(Объект.Автомобиль);
	
	Если ЗначениеЗаполнено(ДокументРезервированияАвтомобиля) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Автомобиль <%1> уже зарезервирован другим документом <%2>.'"),
				Объект.Автомобиль,
				ДокументРезервированияАвтомобиля),
			ДокументРезервированияАвтомобиля,
			,
			"Объект",
			Отказ
		);
				
	КонецЕсли;
	
	Если НЕ Объект.Автомобиль.Пустая() И НЕ АвтомобильРезервирования = Объект.Автомобиль И НЕ Отказ Тогда
				
		НовыйДокументРезервированияАвтомобиля = Документы.РезервированиеАвтомобилей.СоздатьДокумент();
		НовыйДокументРезервированияАвтомобиля.Заполнить(Объект.Ссылка);
		
		Если НовыйДокументРезервированияАвтомобиля.Автомобили.Количество() > 0 
			И ЗначениеЗаполнено(ДатаСнятияРезервирования) Тогда
			НовыйДокументРезервированияАвтомобиля.Автомобили[0].СрокСнятияРезерва = ДатаСнятияРезервирования;
		КонецЕсли;
		
		НовыйДокументРезервированияАвтомобиля.Комментарий = НСтр("ru = 'Сформирован автоматически из рабочего листа'");
		
		Попытка
			
			НовыйДокументРезервированияАвтомобиля.Записать(РежимЗаписиДокумента.Проведение);
			ДокументРезервирования = НовыйДокументРезервированияАвтомобиля.Ссылка;
			ДокументРезервированияАвтомобиля = ДокументРезервирования;
			АвтомобильРезервирования = Объект.Автомобиль;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Автомобиль <%1> зарезервирован по документу <%2>.'"),
					Объект.Автомобиль,
					НовыйДокументРезервированияАвтомобиля.Ссылка),
				НовыйДокументРезервированияАвтомобиля,
				,
				"Объект"
			);
	
		Исключение
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РабочийЛист. Создание резервирования из рабочего листа'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);

		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСогласиеНаОбработкуПерсональныхДанных(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("Строка") ИЛИ Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан клиент.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Контрагент.ФормаСобственности  = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Контрагент,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	Если Согласие = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отсутствует согласие на обработку персональных данных. Запись контактной информации невозможна.'")
		);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьИзменениеКонтрагента()
	
	ПараметрыДействия = Новый Структура;
	Если ЗначениеЗаполнено(ТелефонИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("ТелефонИзДанныхВыбора", ТелефонИзДанныхВыбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("АдресИзДанныхВыбора", АдресИзДанныхВыбора);
	КонецЕсли;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ТелефонИзДанныхВыбора = "";
	АдресИзДанныхВыбора = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеСобытия(Результат  = Неопределено, ДополнительныеПараметры  = Неопределено) Экспорт

	ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.Событие.ФормаОбъекта", Объект.Ссылка, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеАвтомобиля()
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Марка", Объект.ТрейдИнМарка);
	ДанныеЗаполнения.Вставить("Модель", Объект.ТрейдИнМодель);
	ДанныеЗаполнения.Вставить("ГодВыпуска", Объект.ТрейдИнГодВыпуска);
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Владелец", Объект.Контрагент);
	ДопПараметры.Вставить("Пробег", Объект.ТрейдИнПробег);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("ПараметрыВыбора", ДопПараметры);
	ПараметрыФормы.Вставить("НеобходимоОповеститьПослеЗаписи", Истина);
	
	ОткрытьФорму(
		"Справочник.Автомобили.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаТелефона()
	
	УправлениеКонтактнойИнформациейАльфаАвто.УстановитьСвойстваПоляВводаТелефона(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Объект.ПредставлениеТелефона,
		Элементы.ПредставлениеТелефона
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлятьКИ(Результат, ДополнетельныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ОбновлятьКИ.Пометка   = Истина;
		Элементы.НеОбновлятьКИ.Пометка = Ложь;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Обновлять'");
	Иначе
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти