
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Электронное письмо исходящее".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЭлектронноеПисьмоИсходящее(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьВыполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Тема = ДанныеЗаполнения.Тема;
	Цель = ДанныеЗаполнения.Текст;
	ВидСобытия = Справочники.ВидыСобытий.ЭлектронноеОбращение;
	Результат = "";
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЭлектронноеПисьмоИсходящее()

// Производит заполнение объекта на основании документа "Электронное письмо входящее".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЭлектронноеПисьмоВходящее(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьВыполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Тема = ДанныеЗаполнения.Тема;
	Цель = ДанныеЗаполнения.Текст;
	ВидСобытия = Справочники.ВидыСобытий.ЭлектронноеОбращение;
	Результат = "";
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЭлектронноеПисьмоВходящее()

// Производит заполнение объекта на основании документа "Телефонный звонок"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ТелефонныйЗвонок(ДанныеЗаполнения,
                                             ТекстЗаполнения = "",
                                             СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьВыполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	НеобходимыеРеквизиты =
	"Тема,
	|Ответственный.Сотрудник,
	|сфпИдентификаторЗвонка,
	|АбонентКакСвязаться,
	|сфпДлительностьЗвонка,
	|Дата,
	|Важность,
	|АбонентКонтакт"; 
	РеквизитыТелефонногоЗвонка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, НеобходимыеРеквизиты);
	
	Тема = РеквизитыТелефонногоЗвонка.Тема;
	Менеджер = РеквизитыТелефонногоЗвонка.ОтветственныйСотрудник;
	
	Если ЗначениеЗаполнено(РеквизитыТелефонногоЗвонка.сфпИдентификаторЗвонка) Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		ДатаНачала        = РеквизитыТелефонногоЗвонка.Дата;
		ДатаОкончания     = ДатаНачала + РеквизитыТелефонногоЗвонка.сфпДлительностьЗвонка;
		Важность	      = РеквизитыТелефонногоЗвонка.Важность;
		Состояние	      = Перечисления.СостоянияСобытий.Запланировано;
		
		Если ТипЗнч(РеквизитыТелефонногоЗвонка.АбонентКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			Контрагент = РеквизитыТелефонногоЗвонка.АбонентКонтакт;
		КонецЕсли;
		
		СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(
			РеквизитыТелефонногоЗвонка.АбонентКакСвязаться
		);
		КонтактнаяИнформация = сфпСофтФонПроСервер.сфпСформироватьПредставлениеТелефона(
			СтруктураНомера.КодСтраны,
			СтруктураНомера.КодГорода,
			СтруктураНомера.НомерТелефона
		);
		
	Иначе
		
		ВидСобытия = Справочники.ВидыСобытий.ЭлектронноеОбращение;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ТелефонныйЗвонок()

// Производит заполнение объекта на основании документа "События"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Событие(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьВыполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	НеобходимыеРеквизитыОснования =
	"ХозОперация,
	|Важность,
	|СторонниеЛица,
	|Пользователи,
	|Тема,
	|Дата,
	|Цель,
	|Результат";
	РеквизитыСобытияОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеЗаполнения, НеобходимыеРеквизитыОснования); 
	
	ДокументОснование = ДанныеЗаполнения;
	ХозОперация       = РеквизитыСобытияОснования.ХозОперация;
	Важность          = РеквизитыСобытияОснования.Важность;
	Тема              = РеквизитыСобытияОснования.Тема;
	Состояние         = Перечисления.СостоянияСобытий.Запланировано;
	
	СторонниеЛица.Загрузить(ДанныеЗаполнения.СторонниеЛица.Выгрузить());
	Пользователи.Загрузить(ДанныеЗаполнения.Пользователи.Выгрузить());
	
	ШаблонЦели = НСтр(
		"ru = '---------- Исходное событие ----------
		|Дата: %1
		|Тема: %2
		|%3'"
	);
	Цель = СтрШаблон(
		ШаблонЦели,
		РеквизитыСобытияОснования.Дата,
		Тема,
		ПолучитьТелоHTML(РеквизитыСобытияОснования.Цель)
	);
	ШаблонРезультата = НСтр(
		"ru = '---------- Достигнутые результаты ----------
		|%1'"
	); 	
	Результат = СтрШаблон(ШаблонРезультата, ПолучитьТелоHTML(РеквизитыСобытияОснования.Результат));
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Событие()

// Производит заполнение объекта на основании справочника "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;

	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеЗаполнения.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
	
	// Заполним реквизит контрагент или реквизит контактное лицо
	Контрагент = ДанныеЗаполнения.Ссылка;
	СторонниеЛицаСтрока = СторонниеЛица.Добавить();
	СторонниеЛицаСтрока.Контрагент = ДанныеЗаполнения.Ссылка;
	СторонниеЛицаСтрока.ВладелецКИ = ДанныеЗаполнения.Ссылка;
	СторонниеЛицаСтрока.КонтактнаяИнформация = КонтактнаяИнформация;
	СторонниеЛицаСтрока.ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Контрагенты()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ХозОперация") Тогда
		ХозОперация = ДанныеЗаполнения.ХозОперация;
		Документы.Событие.ХозОперацияПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Состояние") Тогда
		Состояние = ДанныеЗаполнения.Состояние;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		Контрагент = ДанныеЗаполнения.Контрагент;
		Документы.Событие.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Дата") Тогда
		Дата = ДанныеЗаполнения.Дата;
		Документы.Событие.ДатаПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДатаНачала") Тогда
		ДатаНачала = ДанныеЗаполнения.ДатаНачала;
		Документы.Событие.ДатаНачалаПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДатаОкончания") Тогда
		ДатаОкончания = ДанныеЗаполнения.ДатаОкончания;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Автор") Тогда
		Автор = ДанныеЗаполнения.Автор;
		Документы.Событие.АвторПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Менеджер") Тогда
		Менеджер = ДанныеЗаполнения.Менеджер;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВидСобытия") Тогда
		ВидСобытия = ДанныеЗаполнения.ВидСобытия;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

// Производит заполнение объекта на основании документа "Рабочий лист"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛист(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.Событие;
	Тема = Строка(ДанныеЗаполнения);
	
	// Попытаемся определить контрагента.
	Контрагент	= Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РабочийЛист") Тогда
		Контрагент			= ДанныеЗаполнения.Контрагент;
		Продавец			= ДанныеЗаполнения.Менеджер;
		ИсточникИнформации 	= ДанныеЗаполнения.ИсточникИнформации;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РабочийЛистКредитногоОтдела") Тогда
		Контрагент	= ДанныеЗаполнения.Клиент;
		Продавец	= ДанныеЗаполнения.МенеджерКредитногоОтдела;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РабочийЛистОтделаСтрахования") Тогда
		Контрагент	= ДанныеЗаполнения.Страхователь;
		Продавец	= ДанныеЗаполнения.МенеджерОтделаСтрахования;
	КонецЕсли;
	
	Если (Контрагент<>Неопределено) И (ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		Если СторонниеЛица.Найти(Контрагент, "Контрагент") = Неопределено Тогда
			НоваяСтрока				= СторонниеЛица.Добавить();
			НоваяСтрока.Контрагент	= Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛист()

// Производит заполнение объекта на основании документа "РабочийЛистКредитногоОтдела".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛистКредитногоОтдела(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по рабочему листу
	Возврат ОбработкаЗаполнения_РабочийЛист(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_РабочийЛистКредитногоОтдела()

// Производит заполнение объекта на основании документа "РабочийЛистОтделаСтрахования".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛистОтделаСтрахования(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по рабочему листу
	Возврат ОбработкаЗаполнения_РабочийЛист(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_РабочийЛистОтделаСтрахования()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.Событие;
	
	Тема = Строка(ДанныеЗаполнения);
	ДатаНачала = ТекущаяДатаСеанса();
	
	Документы.Событие.ДатаНачалаПриИзменении(ЭтотОбъект);
	
	КонтрагентОснования = ДанныеЗаполнения.Заказчик;
	Если (КонтрагентОснования <> Неопределено) И (ТипЗнч(КонтрагентОснования) = Тип("СправочникСсылка.Контрагенты")) Тогда
		Если СторонниеЛица.Найти(КонтрагентОснования, "Контрагент") = Неопределено Тогда
			НоваяСтрока            = СторонниеЛица.Добавить();
			НоваяСтрока.Контрагент = КонтрагентОснования;
			Контрагент             = КонтрагентОснования;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыСобытий.ВыдачаАвтомобиля Тогда
		
		Выдача_МестоВыдачиАвтомобиля = Перечисления.МестаВыдачиАвтомобилей.Салон;
		Выдача_ЗаказНаАвтомобиль = ДанныеЗаполнения;
		Выдача_АвторВыдачиАвтомобиля = ДанныеЗаполнения.Автор;
		Выдача_Автомобиль = ДанныеЗаполнения.Автомобиль;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Заявка на ремонт"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.Событие;
	
	Тема         = Строка(ДанныеЗаполнения);
	ДатаНачала   = ТекущаяДатаСеанса();
	Документы.Событие.ДатаНачалаПриИзменении(ЭтотОбъект);
	
	Контрагент = ДанныеЗаполнения.Заказчик;
	АдресЭлектроннойПочты = ДанныеЗаполнения.АдресЭлектроннойПочты;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРемонт()

// Производит заполнение объекта на основании документа "Тест-драйв"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ТестДрайв(ДанныеЗаполнения,
									  ТекстЗаполнения = "",
									  СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжатьЗаполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если НЕ ПродолжатьЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.Событие;
	ОбращениеККлиенту = ДанныеЗаполнения.ОбращениеККлиенту;
	ПредставлениеТелефона = ДанныеЗаполнения.КонтактныйТелефон;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ТестДрайв()

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Жалоба клиента"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЖалобаКлиента(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЖалобаКлиента()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
											ТекстЗаполнения = "",
											СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения,
														ТекстЗаполнения = "",
														СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
												ТекстЗаполнения = "",
												СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

// Производит заполнение объекта на основании документа "Рассылка"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Рассылка(ДанныеЗаполнения,
									 ТекстЗаполнения = "",
									 СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Рассылка()

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
										 ТекстЗаполнения = "",
										 СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплату()

// Производит заполнение объекта на основании документа "Заявка на аренду"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаАренду(ДанныеЗаполнения,
										 ТекстЗаполнения = "",
										 СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
		
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаАренду()

// Производит заполнение объекта на основании документа "Договор аренды"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ДоговорАренды(ДанныеЗаполнения,
										 ТекстЗаполнения = "",
										 СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
		
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ДоговорАренды()

// Производит заполнение объекта на основании документа "Изменение договора аренды"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ИзменениеДоговораАренды(ДанныеЗаполнения,
										 ТекстЗаполнения = "",
										 СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
		
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ИзменениеДоговораАренды()

// Производит заполнение объекта на основании документа "Изменение цен аренды"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ИзменениеЦенАренды(ДанныеЗаполнения,
										 ТекстЗаполнения = "",
										 СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
		
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ИзменениеЦенАренды()

// Производит заполнение объекта на основании документа "Рабочий лист выкупа автомобиля"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛистВыкупаАвтомобиля(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжатьЗаполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если НЕ ПродолжатьЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИспользуемыеРеквизиты = Новый Структура();
	ИспользуемыеРеквизиты.Вставить("Тема", "Ссылка");
	ИспользуемыеРеквизиты.Вставить("Контрагент", "Контрагент");
	ИспользуемыеРеквизиты.Вставить("ОбращениеККлиенту", "ОбращениеККлиенту");
	ИспользуемыеРеквизиты.Вставить("ПредставлениеТелефона", "ПредставлениеТелефона");
	ИспользуемыеРеквизиты.Вставить("АдресЭлектроннойПочты", "АдресЭлектроннойПочты");
	РеквизитыДанныхЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, ИспользуемыеРеквизиты);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыДанныхЗаполнения);
	ХозОперация = Справочники.ХозОперации.Событие;
	ДатаНачала = ТекущаяДатаСеанса();
	Документы.Событие.ДатаНачалаПриИзменении(ЭтотОбъект);
	
	// Разрешим выполнение операций в основном обработчике ОбработкаЗаполнения()
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛистВыкупаАвтомобиля()

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ВидСобытия = Справочники.ВидыСобытий.ВыдачаАвтомобиля Тогда
		
		Если ДанныеЗаполнения.Автомобили.Количество() = 1 Тогда
			
			Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выдача автомобиля %1, контрагент %2'"),
				ДанныеЗаполнения.Автомобили[0].Автомобиль,
				Контрагент);
			Выдача_Автомобиль = ДанныеЗаполнения.Автомобили[0].Автомобиль;
			Выдача_ЗаказНаАвтомобиль = ДанныеЗаполнения.Автомобили[0].ЗаказНаАвтомобиль;
			
		Иначе
			
			Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выдача автомобиля контрагенту %1'"),
				Контрагент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАвтомобилей()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=Истина) Экспорт
	
	// Заполнения нового объекта по структуре
	Если ТипЗнч(ДанныеЗаполнения)=Тип("Структура") Тогда
		ВидСобытия = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ВидСобытия");
		// Заполним событие по переданному основанию.
		Если ДанныеЗаполнения.Свойство("Основание") Тогда
			ДанныеЗаполнения = ДанныеЗаполнения.Основание;
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Документы.Событие.ДобавитьТекущегоПользователя(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ТекущаяДатаСеанса() + 600;
	КонецЕсли;
	
	ТипЗначенияОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗначенияОснования=Тип("Структура") Тогда
		ИмяСтруктуры = Неопределено;
		ДанныеЗаполнения.Свойство("Имя", ИмяСтруктуры);
		Если ИмяСтруктуры = "СозданиеСобытияСофтФон" Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозОперация.Пустая() Тогда
		ХозОперация = Справочники.ХозОперации.Событие;
	КонецЕсли;
		
	Если ПустаяСтрока(Тема) И НЕ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения = Неопределено Тогда
		Если ЕстьРеквизит(ДанныеЗаполнения, "ХозОперация") Тогда
			Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Событие по %1'"), Строка(ДанныеЗаполнения.ХозОперация) + " №" + ДанныеЗаполнения.Номер);
		Иначе
			Тема = Строка(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
		
	// Попытаемся определить контрагента.
	КонтрагентОснования = Неопределено;
	Если ЕстьРеквизит(ДанныеЗаполнения,"Заказчик") Тогда
		КонтрагентОснования = ДанныеЗаполнения.Заказчик;
	ИначеЕсли ЕстьРеквизит(ДанныеЗаполнения,"Контрагент") Тогда
		КонтрагентОснования = ДанныеЗаполнения.Контрагент;
	ИначеЕсли ЕстьРеквизит(ДанныеЗаполнения,"ВладелецТовара") Тогда
		КонтрагентОснования = ДанныеЗаполнения.ВладелецТовара;
	КонецЕсли;
		
	Если (КонтрагентОснования<>Неопределено) И (ТипЗнч(КонтрагентОснования)=Тип("СправочникСсылка.Контрагенты")) Тогда 			
		Если СторонниеЛица.Найти(КонтрагентОснования, "Контрагент")=Неопределено Тогда
			НоваяСтрока = СторонниеЛица.Добавить();
			НоваяСтрока.Контрагент = КонтрагентОснования;
			Контрагент = КонтрагентОснования;
		КонецЕсли;
	КонецЕсли;
	
	ПодразделениеАвтора = ПараметрыСеанса.ПодразделениеКомпании;
	Если ЗначениеЗаполнено(Менеджер) Тогда
		ПодразделениеКомпании = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Менеджер,
			"ПодразделениеКомпании");
		Документы.Событие.ПодразделениеКомпанииПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Документы.Событие.КонтрагентПриИзменении(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат = Неопределено;
	Состояние = Перечисления.СостоянияСобытий.Запланировано;
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) И НЕ ЗначениеЗаполнено(ОбращениеККлиенту) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Поля ""Клиент"" и ""Обращение"" не заполнены. Необходимо заполнить хотя бы одно из этих полей.'"),, "Клиент",, Отказ);
	КонецЕсли;
	
	ЗавершенныеСостояния = Перечисления.СостоянияСобытий.СостоянияЗавершенныхСобытий();
	Если ЗавершенныеСостояния.Найти(Состояние) <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана дата окончания события'"), ЭтотОбъект, "ДатаОкончания",, Отказ);
		КонецЕсли;
		Если ВидСобытия = Справочники.ВидыСобытий.ОтказОтСделки
			И НЕ ПраваИНастройкиПользователя.Значение("РазрешитьЗакрыватьОтказыОтСделок") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У пользователя нет прав на завершения данного вида события'"),
				ЭтотОбъект,,,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьРеквизитСписокУчастников();
	ОбновитьРеквизитХозОперацияДокументаОснования();
	ОбновитьРеквизитХозОперацияДокументаРезультата();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Проведение по регистру сведений Журнал событий
	Если НЕ Отказ И (НЕ РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(Ссылка, Состояние)) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда	
		ЗаписатьВПараметрыПапокВзаимодействий();
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим регистр ГрафикРаботыРесурсов
	РегистрыСведений.ГрафикРаботыРесурсов.УдалитьГрафикРаботыРесурсовОбъекта(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним График работы ресурсов
	Документы.Событие.ЗаписатьГрафикРаботыРесурсов(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТелоHTML(СтрокаHTML)
	
	НачалоТела = СтрНайти(СтрокаHTML, "<BODY>") + СтрДлина("<BODY>");
	ОкончаниеТела = СтрНайти(СтрокаHTML, "</BODY>");
	
	Если НачалоТела < ОкончаниеТела Тогда
		
		ТелоСодержания = Сред(СтрокаHTML, НачалоТела, ОкончаниеТела - НачалоТела);
		
	Иначе
		
		ТелоСодержания = "";
		
	КонецЕсли;
	
	// Если, кроме пустых параграфов в теле ничего нет, вернем пустую строку.
	Проверка = СокрЛП(СтрЗаменить(ТелоСодержания, "<P>&nbsp;</P>", ""));
	
	Если Проверка = "" Тогда
		
		ТелоСодержания = "";
		
	КонецЕсли;
	
	Возврат ТелоСодержания;
	
КонецФункции

Процедура ОбновитьРеквизитСписокУчастников()
	
	Участники = Новый Массив();
	Участники.Добавить(Контрагент);
	
	Для Каждого СтороннееЛицо Из СторонниеЛица Цикл
		
		Если ЗначениеЗаполнено(СтороннееЛицо.Контрагент) Тогда
			
			Участники.Добавить(СтороннееЛицо.Контрагент);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтороннееЛицо.КонтактноеЛицо) Тогда
			
			Участники.Добавить(СтороннееЛицо.КонтактноеЛицо);
			
		КонецЕсли;
		
	КонецЦикла;

	СписокУчастников = СтрСоединить(Участники, ";");
	
КонецПроцедуры

Процедура ОбновитьРеквизитХозОперацияДокументаОснования()
	
	Если Не ЗначениеЗаполнено(ДокументОснование) ИЛИ НЕ ЕстьРеквизит (ДокументОснование, "ХозОперация") Тогда
	
		ХозОперацияДокументаОснования = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ХозОперацияДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозОперация");
	
КонецПроцедуры

Процедура ОбновитьРеквизитХозОперацияДокументаРезультата()
	
	Если Не ЗначениеЗаполнено(ДокументРезультат) Тогда
		
		ХозОперацияДокументаРезультата = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ХозОперацияДокументаРезультата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРезультат, "ХозОперация"); 
	
КонецПроцедуры

Процедура ЗаписатьВПараметрыПапокВзаимодействий()
	
	СтруктураРеквизитов 			= Взаимодействия.СтруктураРеквизитовВзаимодействия(Ссылка); 
	
	Если ЗначениеЗаполнено(Ссылка.ДокументОснование) Тогда 
		СтруктураРеквизитов.Предмет = Ссылка.ДокументОснование;
	ИначеЕсли  ЗначениеЗаполнено(Ссылка.ДокументРезультат) Тогда 
		СтруктураРеквизитов.Предмет = Ссылка.ДокументРезультат;
	КонецЕсли;
	
	СтруктураРеквизитов.Рассмотрено = Истина;  
	
	РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(Ссылка, СтруктураРеквизитов);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
