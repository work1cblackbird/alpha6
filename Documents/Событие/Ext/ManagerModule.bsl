// Модуль менеджера документа "Событие"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Автор");
	Результат.Добавить("Важность");
	Результат.Добавить("Комментарий");
		
	Возврат Результат;	
КонецФункции

#КонецОбласти  

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();	
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОптовыйЗаказКлиентаНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщикуНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОптовыйЗаказПоставщикуНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаАренду);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаХранениеШин);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦенАренды);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ТестДрайв);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
	Если Константы.ИспользоватьРассылку.Получить() Тогда
		Документы.Рассылка.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЕсли;
	//
	ЕстьЗащитаCRM = ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаCRM");
	ДокументыОбработкиСобытия = Новый Массив();
	Если Константы.ИспользоватьЖалобы.Получить()
		И ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Метаданные.Документы.ЖалобаКлиента) Тогда 
		ДокументыОбработкиСобытия.Добавить(Метаданные.Документы.ЖалобаКлиента);
	КонецЕсли;
	ДокументыОбработкиСобытия.Добавить(Метаданные.Документы.ЗаказПокупателя);
	ДокументыОбработкиСобытия.Добавить(Метаданные.Документы.ЗаявкаНаРемонт);
	
	Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Метаданные.Документы.РабочийЛист) Тогда
		ДокументыОбработкиСобытия.Добавить(Метаданные.Документы.РабочийЛист);
	КонецЕсли;
	Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(
			Метаданные.Документы.РабочийЛистКредитногоОтдела) Тогда
		ДокументыОбработкиСобытия.Добавить(Метаданные.Документы.РабочийЛистКредитногоОтдела);
	КонецЕсли;
	Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(
			Метаданные.Документы.РабочийЛистОтделаСтрахования) Тогда
		ДокументыОбработкиСобытия.Добавить(Метаданные.Документы.РабочийЛистОтделаСтрахования);
	КонецЕсли;
	Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(
			Метаданные.Документы.РабочийЛистВыкупаАвтомобиля) Тогда
		ДокументыОбработкиСобытия.Добавить(Метаданные.Документы.РабочийЛистВыкупаАвтомобиля);
	КонецЕсли;
	
	ПравоРезультатВзаимодействия = ПравоПользователя("РезультатВзаимодействия");
	МассивИсключенийДокументовОбработкиСобытия = Новый Массив;
	
	Если ПравоРезультатВзаимодействия <> Перечисления.ДокументыОбработкиСобытия.ПустаяСсылка() Тогда
		Для Каждого ПредопределенныйЭлемент Из Перечисления.ДокументыОбработкиСобытия Цикл
			Если ПредопределенныйЭлемент <> ПравоРезультатВзаимодействия Тогда
				МассивИсключенийДокументовОбработкиСобытия.Добавить(Строка(ПредопределенныйЭлемент));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Документ Из ДокументыОбработкиСобытия Цикл
		Если МассивИсключенийДокументовОбработкиСобытия.Найти(Документ.Синоним) = Неопределено Тогда
			ДокументМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ." + Документ.Имя);
			ДокументМенеджер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//   РежимЗаписиДокументаОснования - РежимЗаписиДокумента - режим записи документа
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, РежимЗаписиДокументаОснования = Неопределено) Экспорт

	Если ПравоДоступа("Добавление", Метаданные.Документы.Событие) Тогда

		Результат = КомандыСоздатьНаОсновании.Добавить();
		Результат.Менеджер = "СозданиеНаОснованииАльфаАвтоКлиент";
		Результат.Обработчик = "НачатьСозданиеНаОснованииСобытия";
		Результат.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.Событие);

		Если ПраваИНастройкиПользователя.Значение("ВводНаОснованииПроведенныхДокументов")  Тогда
			
			Если  РежимЗаписиДокументаОснования = РежимЗаписиДокумента.Запись Тогда
				Результат.РежимЗаписи = "Записывать";	
			Иначе	
				Результат.РежимЗаписи = "Проводить";
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("Тема");
	Результат.Добавить("Дата");
	Результат.Добавить("Менеджер; Менеджер");
	Результат.Добавить("НазначитьМеня; НазначитьМеня");
	Результат.Добавить("ДатаНачала");
	Результат.Добавить("ВремяНачало");
	Результат.Добавить("ДатаОкончания");
	Результат.Добавить("ВремяОкончания");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить=ЛОЖЬ, ТолькоОсновныеКонтакты=ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

Функция ПроверитьНаличиеСледующегоСобытия(Событие) Экспорт
	
	ДокументОснование = ?(
		ЗначениеЗаполнено(Событие.ДокументОснование),
		Событие.ДокументОснование,
		Событие.ДокументРезультат);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Истина;
	КонецЕсли;
	
	НаДату = ?(Событие.ДатаОкончания = Дата(1,1,1), Событие.ДатаНачала, Событие.ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Событие.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Событие КАК Событие
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА Событие.ДокументОснование = НЕОПРЕДЕЛЕНО
	               |				ТОГДА Событие.ДокументРезультат = &ДокументОснование
	               |			ИНАЧЕ Событие.ДокументОснование = &ДокументОснование
	               |		КОНЕЦ
	               |	И НЕ Событие.ПометкаУдаления
	               |	И Событие.ДатаНачала > &ДатаОкончания
	               |	И НЕ Событие.Состояние В (&ЗавершенныеСостояния)";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОкончания", НаДату);
	Запрос.УстановитьПараметр("ЗавершенныеСостояния", Перечисления.СостоянияСобытий.СостоянияЗавершенныхСобытий());
	
	УстановитьБезопасныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьНаличиеСледующегоСобытия()

Функция ПолучитьСвязанныйДокумент(Событие) Экспорт
	
	Если ТипЗнч(Событие) = Тип("ДанныеФормыСтруктура") Тогда
		РеквизитыСобытия = Новый Структура("ДокументОснование,ДокументРезультат,Ссылка");
		ЗаполнитьЗначенияСвойств(РеквизитыСобытия, Событие);
	Иначе
		РеквизитыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие, "ДокументОснование,ДокументРезультат,Ссылка");
	КонецЕсли;
	
	СвязанныеДокументы = Новый Структура;
	СвязанныеДокументы.Вставить("ДокументОснование");
	СвязанныеДокументы.Вставить("ДокументРезультат");
	
	Если ЗначениеЗаполнено(РеквизитыСобытия.ДокументОснование) Тогда		
		СвязанныеДокументы.ДокументОснование = РеквизитыСобытия.ДокументОснование;		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РеквизитыСобытия.ДокументРезультат) Тогда		
		СвязанныеДокументы.ДокументРезультат = РеквизитыСобытия.ДокументРезультат;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыСобытия.Ссылка) Тогда
		
		Возврат СвязанныеДокументы;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	ШаблонДокумента = "ТИП(Документ.%1)";
	
	Для Индекс = 0 По Перечисления.ДокументыОбработкиСобытия.Количество() - 1 Цикл
		
		ТекущийТип = Перечисления.ДокументыОбработкиСобытия[Индекс];
		ИмяДокумента = XMLСтрока(ТекущийТип);
		МассивДокументов.Добавить(СтрШаблон(ШаблонДокумента, ИмяДокумента));
		
	КонецЦикла;
	
	СтрокаУсловия = "";
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		СтрокаУсловия = СтрШаблон("
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПодчиненныеДокументы.Ссылка) В (%1)",
		СтрСоединить(МассивДокументов, ", "));
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Событие", РеквизитыСобытия.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодчиненныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.ПодчиненныеДокументы(&Событие) КАК ПодчиненныеДокументы" + СтрокаУсловия;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СвязанныеДокументы.ДокументРезультат = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Возврат СвязанныеДокументы;
	
КонецФункции

// Добавление в табличную часть "Пользователи" строки с текущим пользователем
//
// Параметры:
//  Объект	 - ДокументОбъект.Событие - Содержит ссылку на передаваемый объект метаданных.
//
Процедура ДобавитьТекущегоПользователя(Объект) Экспорт
	
	Если Объект.Пользователи.Количество() = 0 Тогда
		СтрокаПользователь = Объект.Пользователи.Добавить();
		СтрокаПользователь.Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьТекущегоПользователя()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	ОбязательныеРеквизиты.Добавить("Тема");
	ОбязательныеРеквизиты.Добавить("Важность");
	ОбязательныеРеквизиты.Добавить("Состояние");
	ОбязательныеРеквизиты.Добавить("ДатаНачала");
	ОбязательныеРеквизиты.Добавить("ВидСобытия");
	Если Объект.Состояние = Перечисления.СостоянияСобытий.Отменено Тогда
		ОбязательныеРеквизиты.Добавить("ПричинаОтказа");
	КонецЕсли;
	
	ЗаверешенныеСостояния = Перечисления.СостоянияСобытий.СостоянияЗавершенныхСобытий();
	Если ЗаверешенныеСостояния.Найти(Объект.Состояние) <> Неопределено
		И Объект.ВидСобытия = Справочники.ВидыСобытий.ОтказОтСделки Тогда
		ОбязательныеРеквизиты.Добавить("ПричинаОтказа");
		ОбязательныеРеквизиты.Добавить("ОписаниеПричиныОтказа");
	КонецЕсли;
	
	Если Объект.Состояние = Перечисления.СостоянияСобытий.Завершено Тогда
		ОбязательныеРеквизиты.Добавить("Результат");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Пользователи.Пользователь");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы пользователи
	УникальныеПользователи = Новый Массив();
	УникальныеПользователи.Добавить("Пользователь");

	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Пользователи", УникальныеПользователи);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	ПараметрыДействия.Вставить("ПересчетСуммы",  ЛОЖЬ);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.ПодразделениеАвтора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Автор,
			"ПодразделениеКомпании");
	КонецЕсли;
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Проверка склада
	Если (Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия) И (Объект.СкладКомпании.Розничный) Тогда
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата начала".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаНачалаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ДатаОкончания<=Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала + 600;
	КонецЕсли;
	
КонецПроцедуры // ДатаНачалаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Менеджер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МенеджерПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Менеджер) Тогда
		Объект.ПодразделениеКомпании = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Менеджер,
			"ПодразделениеКомпании");
		ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	
КонецПроцедуры // МенеджерПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказ на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказНаАвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Выдача_ЗаказНаАвтомобиль) Тогда
		Объект.Выдача_Автомобиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Выдача_ЗаказНаАвтомобиль,
			"Автомобиль");
	КонецЕсли;
	
КонецПроцедуры // МенеджерПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Событие",
		"ПФ_MXL_Событие",
		НСтр("ru = 'Событие'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Событие") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_Событие", "Событие", ПечатьСобытие(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьСобытие(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Событие_Событие";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Событие.ПФ_MXL_Событие");
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		// новый документ должен быть на отдельной странице
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаДокумента");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ОбластьМакета.Параметры.Продолжительность = Окр((Документ.ДатаОкончания - Документ.ДатаНачала) / 3600, 1);
		ОбластьМакета.Параметры.ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		
		// вывод свойств
		ТаблицаСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ.Ссылка);
		СтрокаСвойств = "";
		Для Каждого Свойство Из ТаблицаСвойств Цикл
			СтрокаСвойств = СтрокаСвойств + Строка(Свойство.Значение) + ": "+ Строка(Свойство.Свойство) + Символы.ПС;
		КонецЦикла;
		ОбластьМакета.Параметры.СтрокаСвойств = СтрокаСвойств;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Документ.Пользователи.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
			Область = Макет.ПолучитьОбласть("СтрокаПользователи");
			Для Каждого ТекСтрокаПользователи Из Документ.Пользователи Цикл
				Если ТекСтрокаПользователи.НомерСтроки = 1 Тогда
					Область.Параметры.НазваниеСтроки = "Пользователи:";
				Иначе
					Область.Параметры.НазваниеСтроки = " ";
				КонецЕсли;
				Область.Параметры.СтрокаПользователей = ТекСтрокаПользователи.Пользователь;
				ТабличныйДокумент.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
		
		Если Документ.СторонниеЛица.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаСторонниеЛица"));
			Область = Макет.ПолучитьОбласть("СтрокаСторонниеЛица");
			Для Каждого ТекСтрокаСторонниеЛица Из Документ.СторонниеЛица Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрокаСторонниеЛица.Контрагент)Тогда
					Область.Параметры.Контрагент = " ";
					Область.Параметры.КонтрагентСсылка = Неопределено;
				Иначе
					Область.Параметры.Контрагент = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекСтрокаСторонниеЛица.Контрагент, Документ.Дата);
					Область.Параметры.КонтрагентСсылка = ТекСтрокаСторонниеЛица.Контрагент;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекСтрокаСторонниеЛица.КонтактноеЛицо)Тогда
					ТекущееКонтактноеЛицо = " ";
				Иначе
					ТекущееКонтактноеЛицо = ТекСтрокаСторонниеЛица.КонтактноеЛицо;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекСтрокаСторонниеЛица.КонтактнаяИнформация)Тогда
					ТекущаяКонтактнаяИнформация = " ";
				Иначе
					ТекущаяКонтактнаяИнформация = СокрЛП(ТекСтрокаСторонниеЛица.КонтактнаяИнформация);
				КонецЕсли;
				
				Область.Параметры.КонтактноеЛицо = ТекущееКонтактноеЛицо;
				Область.Параметры.КонтактнаяИнформация = ТекущаяКонтактнаяИнформация;
				ТабличныйДокумент.Вывести(Область);
			КонецЦикла;
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ВерхняяГраница"));
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСодержание");
		ОбластьМакета.Параметры.Содержание = Документ.Цель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРезультат");
		ОбластьМакета.Параметры.Результат = Документ.Результат;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСобытие()

Процедура ЗаписатьГрафикРаботыРесурсов(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним График работы ресурсов
	НаборЗаписейГрафикРаботыРесурсов = РегистрыСведений.ГрафикРаботыРесурсов.СоздатьНаборЗаписей();
	НаборЗаписейГрафикРаботыРесурсов.ДокументОбъект = Объект;
	НаборЗаписейГрафикРаботыРесурсов.ОтменаПроведения();
	
	НаборЗаписей = Новый ТаблицаЗначений;
	НаборЗаписей.Колонки.Добавить("Ресурс1");
	НаборЗаписей.Колонки.Добавить("Ресурс2");
	НаборЗаписей.Колонки.Добавить("Объект");
	НаборЗаписей.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	НаборЗаписей.Колонки.Добавить("НачалоРабочегоВремени", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("КонецРабочегоВремени", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("КоличествоНатуральныхЕдиниц", Новый ОписаниеТипов("Число"));
	НаборЗаписей.Колонки.Добавить("НапомнитьЗа", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("Авторабота");
	
	// Перебираем пользователей
	УдаляемыеЗначения = Новый Массив();
	Для Каждого СтрокаПользователи Из Объект.Пользователи Цикл
		Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			Если НачалоДня(Объект.ДатаОкончания) - НачалоДня(Объект.ДатаНачала) = 0 Тогда
				// Начало окончание в одном дне
				СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
				СтрокаГрафикаРаботыРесурсов.Ресурс1 = СтрокаПользователи.Пользователь;
				СтрокаГрафикаРаботыРесурсов.Объект = Объект.Ссылка;
				СтрокаГрафикаРаботыРесурсов.Дата = НачалоДня(Объект.ДатаНачала);
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (Объект.ДатаНачала - НачалоДня(Объект.ДатаНачала));
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (Объект.ДатаОкончания - НачалоДня(Объект.ДатаОкончания));
				СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
			Иначе
				ДеньВСекундах = 86400;
				Разница = (НачалоДня(Объект.ДатаОкончания) - НачалоДня(Объект.ДатаНачала)) / ДеньВСекундах;
				ТекущийДень = НачалоДня(Объект.ДатаНачала);
				Пока Разница >= 0 Цикл
					СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
					СтрокаГрафикаРаботыРесурсов.Ресурс1 = СтрокаПользователи.Пользователь;
					СтрокаГрафикаРаботыРесурсов.Объект = Объект.Ссылка;
					СтрокаГрафикаРаботыРесурсов.Дата = ТекущийДень;
					
					// Установим НачалоРабочегоВремени 
					Если ТекущийДень = НачалоДня(Объект.ДатаНачала) Тогда
						СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (Объект.ДатаНачала - НачалоДня(Объект.ДатаНачала));
					Иначе
						СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101';
					КонецЕсли;
					
					// Установим КонецРабочегоВремени
					Если ТекущийДень = НачалоДня(Объект.ДатаОкончания) Тогда
						СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (Объект.ДатаОкончания - НачалоДня(Объект.ДатаОкончания));
					Иначе
						СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101235959';
					КонецЕсли;
					
					// Посчитаем Продолжительность
					СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
					ТекущийДень = ТекущийДень + 1*60*60*24;
					Разница = Разница - 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// Дата окончания не заполнена
			СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
			СтрокаГрафикаРаботыРесурсов.Ресурс1 = СтрокаПользователи.Пользователь;
			СтрокаГрафикаРаботыРесурсов.Объект = Объект.Ссылка;
			СтрокаГрафикаРаботыРесурсов.Дата = НачалоДня(Объект.ДатаНачала);
			СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (Объект.ДатаНачала - НачалоДня(Объект.ДатаНачала));
			СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени  = СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейГрафикРаботыРесурсов.НаборЗаписей = НаборЗаписей;
	НаборЗаписейГрафикРаботыРесурсов.Проведение();
	
КонецПроцедуры // ЗаписатьГрафикРаботыРесурсов()

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" ТОгда
		
		Если Параметры.Свойство("ЗначениеКопирования") И
			ЗначениеЗаполнено(Параметры.ЗначениеКопирования.ВидСобытия) И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ИмяФормыСобытия = ПолучитьИмяФормы(ПолучитьТипСобытия(Параметры.ЗначениеКопирования.ВидСобытия, Параметры.ЗначениеКопирования),
			Параметры.ЗначениеКопирования.ВидСобытия);
			
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И
			ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ВидСобытия) Тогда
			
			ИмяФормыСобытия = ПолучитьИмяФормы(ПолучитьТипСобытия(Параметры.ЗначенияЗаполнения.ВидСобытия, Неопределено),
			Параметры.ЗначенияЗаполнения.ВидСобытия);
			
		ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ.ВидСобытия) И  ЗначениеЗаполнено(Параметры.Ключ) Тогда 
			
			ИмяФормыСобытия = ПолучитьИмяФормы( ПолучитьТипСобытия(Параметры.Ключ.ВидСобытия, Параметры.Ключ),
			Параметры.Ключ.ВидСобытия);
			
		ИначеЕсли Параметры.Свойство("ВидСобытия") Тогда 
			ИмяФормыСобытия = ПолучитьИмяФормы( ПолучитьТипСобытия(Параметры.ВидСобытия,Неопределено),
				Параметры.ВидСобытия);
			ЗначенияЗаполнения = Новый Структура();
			ЗначенияЗаполнения.Вставить("ВидСобытия",Параметры.ВидСобытия);
			Параметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
		Иначе ИмяФормыСобытия = "ФормаДокументаПрочее";
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ИмяФормыСобытия;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипСобытия(ВидСобытия, ДокументСобытие)
	
	Если ЗначениеЗаполнено(ВидСобытия) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидСобытия, "ТипСобытия");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСобытие) Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСобытие, "ВидСобытия,ВидСобытия.ТипСобытия");
		Если ДанныеДокумента.ВидСобытия = Справочники.ВидыСобытий.ВыдачаАвтомобиля Тогда
			Возврат Неопределено;
		Иначе
			Возврат ДанныеДокумента.ВидСобытияТипСобытия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьИмяФормы(ТипСобытия, ВидСобытия)
	
	Если (ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Встреча") 
		ИЛИ ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Звонок") 
		ИЛИ ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеОбращение"))
		И ВидСобытия <> ПредопределенноеЗначение("Справочник.ВидыСобытий.ВыдачаАвтомобиля") Тогда
		
		Возврат "ФормаДокументаСобытия";
		
	КонецЕсли;
	
	Возврат "ФормаДокументаПрочее";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

