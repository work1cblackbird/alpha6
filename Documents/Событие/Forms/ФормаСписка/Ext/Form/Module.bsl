///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка документа "Событие"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	// РасширеннаяИнформация
	ОписаниеЭлементов = Новый Структура(
		"Поле,КомандаПереключатель",
		Элементы.РасширеннаяИнформация,
		Элементы.ПоказатьРасширеннуюИнформацию
	);
	РасширеннаяИнформацияВызовСервера.ПриСозданииНаСервере(ОписаниеЭлементов);
	// Конец РасширеннаяИнформация
	
	ТекущийМенеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Пользователи.ТекущийПользователь(),
		"Сотрудник"
	);
	
	ТекущееПодразделение = ПараметрыСеанса.ПодразделениеКомпании;
	ТекДата = НачалоДня(ТекущаяДатаСеанса());
	Элементы.ДатаНачалаОтбор.ТолькоПросмотр = Истина;
	ПолучитьСписокХозОперацийОснований();
	ЗаполнитьСписокВидовСобытий();
	ЗаполнитьКоманднуюПанельАтрибутыСобытия();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЖалобы();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ИмяСобытия = "ОповещениеДляДокументаСобытие" И ВыбратьДокументНаСервере(Параметр) Тогда		
		ВыборДокументаНаСервере(Новый Структура("Документ", Параметр));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	РасширеннаяИнформацияВызовСервера.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РасширеннаяИнформацияВызовСервера.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовОтбора

&НаКлиенте
Процедура ФильтрПоКонтрагентуПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоОбращениюККлиентуПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоВидуСобытияПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоСостояниюПриИзменении(Элемент)
	
	Если ФильтрПоСостоянию = "Просроченные" Тогда
		ФильтрПоДатеНачала = "";
		ДатаНачалаОтбор = Дата(1,1,1);
		Элементы.ФильтрПоДатеНачала.Доступность = Ложь;
		Элементы.ДатаНачалаОтбор.Доступность = Ложь;
	Иначе
		Элементы.ФильтрПоДатеНачала.Доступность = Истина;
		Элементы.ДатаНачалаОтбор.Доступность = Истина;
	КонецЕсли;

	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоХООснованияПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоОтветственомуПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоПодразделениюПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоДатеСозданияПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрПоДатеНачалаПриИзменении(Элемент)
	
	Если ФильтрПоДатеНачала = "Сегодня" Тогда
		ДатаНачалаОтбор = ТекДата;
	ИначеЕсли ФильтрПоДатеНачала = "Завтра" Тогда
		ДатаНачалаОтбор = КонецДня(ТекДата)+1;
	ИначеЕсли ФильтрПоДатеНачала = "Послезавтра" Тогда
		ДатаНачалаОтбор = КонецДня(КонецДня(ТекДата)+1)+1;
	ИначеЕсли ФильтрПоДатеНачала = "НаЭтойНеделе" Тогда
		ДатаНачалаОтбор = НачалоНедели(ТекДата);
	ИначеЕсли ФильтрПоДатеНачала = "НаСледующейНеделе" Тогда
		ДатаНачалаОтбор = КонецНедели(ТекДата)+1;
	Иначе
		Если ПустаяСтрока(ФильтрПоДатеНачала) Тогда
			ДатаНачалаОтбор = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
	Если ФильтрПоДатеНачала = "ДоУказаннойДаты" Тогда
		Элементы.ДатаНачалаОтбор.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ДатаНачалаОтбор.ТолькоПросмотр = Истина;
		ДатаНачалаОтборПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНачалаОтборПриИзменении(Элемент)
	
	ОбновитьОтборы(ЭтотОбъект);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РасширеннаяИнформация
	РасширеннаяИнформацияКлиент.НачатьОбновление(ЭтотОбъект);
	// Конец РасширеннаяИнформация
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеДокументаСобытие");
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыДокументаСобытие");
	КонецЕсли;
	// Конец ОценкаПроизводительности
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыДокументаСобытие");
	// Конец ОценкаПроизводительности
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Функция ПодготовитьДанные()
	
	Строка = Элементы.Список.ТекущаяСтрока;
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ДокументСобытие = Строка.Ссылка;
		СвязанныеДокументы = ПолучитьСвязанныйДокумент(ДокументСобытие);
		СвязанныйДокумент = ?(ЗначениеЗаполнено(СвязанныеДокументы.ДокументОснование),СвязанныеДокументы.ДокументОснование, СвязанныеДокументы.ДокументРезультат);
		
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'К документу %1 уже привязан документ %2.'"),
				ДокументСобытие,
				СвязанныйДокумент));
				
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Клиент",
		?(ЗначениеЗаполнено(ДокументСобытие.Контрагент), ДокументСобытие.Контрагент, ДокументСобытие.ОбращениеККлиенту));
	ПараметрыФормы.Вставить("НомерТелефона", ДокументСобытие.ПредставлениеТелефона);
	ПараметрыФормы.Вставить("АдресЭлектроннойПочты", ДокументСобытие.АдресЭлектроннойПочты);
	ПараметрыФормы.Вставить("ДокументОснование", ДокументСобытие);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ДобавлятьНовогоКонтрагента", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ПереназначитьСобытия(Команда)
	
	ВыделенныеСтрокиСобытий = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтрокиСобытий.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбраны события из списка, в которых необходимо переопределить ответственного.'")
		);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВыбранныеСобытия", ВыделенныеСтрокиСобытий);
	
	ОткрытьФорму(
		"Документ.Событие.Форма.ФормаПереназначенияСобытий",
		ПараметрыФормы
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура СделатьПривязку(Команда)
	
	ПараметрыФормы = ПодготовитьДанные();
	
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаВыбораДокумента",
		ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ПоискКлиентовИДокументов.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// РасширеннаяИнформация
&НаКлиенте
Процедура ПоказатьРасширеннуюИнформацию(Команда)
	
	РасширеннаяИнформацияКлиент.ПоказатьРасширеннуюИнформацию(ЭтотОбъект);

КонецПроцедуры
// Конец РасширеннаяИнформация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСвязанныйДокумент(Событие)
	
	Возврат Документы.Событие.ПолучитьСвязанныйДокумент(Событие);
	
КонецФункции

&НаСервере
Процедура ВыборДокументаНаСервере(РезультатПодбора)
	
	ВыбранныйДокумент = ПолучитьЗначениеПараметраСтруктуры(РезультатПодбора, "Документ", Неопределено);
	
	Событие    = Элементы.Список.ТекущаяСтрока.Ссылка;
	ДокСобытие = Событие.ПолучитьОбъект();
	
	ЕстьИзменения = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ТелефонныйЗвонок")
			ИЛИ ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			ИЛИ ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "ВзаимодействиеОснование");
				
		Иначе
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "ДокументОснование");
		КонецЕсли;
			
		Если ОснованиеДокумента = Событие И ДокСобытие.ДокументРезультат <> ВыбранныйДокумент Тогда
			ДокСобытие.ДокументРезультат = ВыбранныйДокумент;
		Иначе
			ДокСобытие.ДокументОснование = ВыбранныйДокумент;
		КонецЕсли;
		
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Контрагент = ПолучитьЗначениеПараметраСтруктуры(РезультатПодбора, "Клиент", Неопределено);
	
	Если (НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ НЕ ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"))
		И ЗначениеЗаполнено(ВыбранныйДокумент)
		И ЕстьРеквизит(ВыбранныйДокумент, "Контрагент") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Контрагент");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокСобытие.Контрагент)
		И ЗначениеЗаполнено(Контрагент)
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДокСобытие.Контрагент = Контрагент;
		Документы.Событие.КонтрагентПриИзменении(ДокСобытие);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		Попытка
			ДокСобытие.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не удалось выполнить привязку документа.'"));
		КонецПопытки;
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоманднуюПанельАтрибутыСобытия()
	
	Если Элементы.Найти("ПодменюСозданияДокумента") <> Неопределено Тогда
		Элементы.Переместить(
			Элементы.ПодменюСозданияДокумента,
			Элементы.ФормаКоманднаяПанель,
			Элементы.ФормаСкопировать);
			Элементы.ПодменюСозданияДокумента.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыОтборов()
	
	РеквизитыОтборов = Новый Структура;
	РеквизитыОтборов.Вставить("Контрагент", "ФильтрПоКонтрагенту");
	РеквизитыОтборов.Вставить("ОбращениеККлиенту", "ФильтрПоОбращениюККлиенту");
	РеквизитыОтборов.Вставить("ВидСобытия", "ФильтрПоВидуСобытия");
	РеквизитыОтборов.Вставить("Состояние", "ФильтрПоСостоянию");
	Возврат РеквизитыОтборов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПростыеОтборы(Форма)
	
	Для Каждого КлючЗначение Из РеквизитыОтборов() Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			КлючЗначение.Ключ,
			Форма[КлючЗначение.Значение],
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(Форма[КлючЗначение.Значение]),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСостоянию(Форма)
	
	Использование = Истина;
	Значение = Форма.ФильтрПоСостоянию;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Использование = Ложь;
	КонецЕсли;
	
	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Если Значение = "НеЗавершенные" Или Значение = "Просроченные" Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Состояние = Новый СписокЗначений;
		Состояние.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Запланировано"));
		Состояние.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Выполняется"));
		Состояние.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Утверждено"));
		Состояние.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСобытий.ПустаяСсылка"));
	ИначеЕсли Значение = "Завершенные" Тогда
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено");
	ИначеЕсли Значение = "Отмененные" Тогда
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено");
	ИначеЕсли Значение = "Выполняемые" Тогда
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Выполняется");
	Иначе
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Состояние",
		Состояние,
		ВидСравненияОтбора,
		,
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоХозОперации(Форма)
	
	Использование = Истина;
	Значение = Форма.ФильтрПоХООснования;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Использование = Ложь;
	КонецЕсли;
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		"ПоХозОперации",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"ХозОперацияДокументаОснование",
		Значение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"ХозОперацияДокументаРезультата",
		Значение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Использование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма)
	
	Использование = Истина;
	Значение = Форма.ФильтрПоОтветственому;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Использование = Ложь;
	КонецЕсли;
	
	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Если Значение = "Мои" Тогда
		Менеджер = Форма.ТекущийМенеджер;
	ИначеЕсли Значение = "Ничьи" Тогда
		Менеджер = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	ИначеЕсли Значение = "НичьиМои" Тогда
		Менеджер = Новый СписокЗначений;
		Менеджер.Добавить(ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
		Менеджер.Добавить(Форма.ТекущийМенеджер);
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Менеджер",
		Менеджер,
		ВидСравненияОтбора,
		,
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделениию(Форма)
	
	Использование = Истина;
	Значение = Форма.ФильтрПоПодразделению;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Использование = Ложь;
	КонецЕсли;
	
	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Если Значение = "Моего" Тогда
		Подразделение = Форма.ТекущееПодразделение;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"ПодразделениеКомпании",
		Подразделение,
		ВидСравненияОтбора,
		,
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДатеСоздания(Форма)
	
	Использование = Истина;
	Значение = Форма.ФильтрПоДатеСоздания;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Использование = Ложь;
	КонецЕсли;
	
	Если Значение = "Сегодня" Тогда
		ДатаСоздания = Форма.ТекДата;
	ИначеЕсли Значение = "Вчера" Тогда
		ДатаСоздания = НачалоДня(Форма.ТекДата - 1);
	Иначе
		ДатаСоздания = Дата(1,1,1);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Дата",
		ДатаСоздания,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		НСтр("ru = 'Начало создания'"),
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"ДатаСобытия",
		КонецДня(ДатаСоздания),
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		НСтр("ru = 'Окончание создания'"),
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДатеНачала(Форма)
	
	ИспользованиеНачало = Истина;
	ИспользованиеОкончание = Истина;
	Значение = Форма.ФильтрПоДатеНачала;
	ОтборПоПросроченным = ?(форма.ФильтрПоСостоянию = "Просроченные", Истина, Ложь);
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		ИспользованиеНачало = Ложь;
		ИспользованиеОкончание = Ложь;
	КонецЕсли;
	
	Если Значение = "Сегодня"
		ИЛИ Значение = "Завтра"
		ИЛИ Значение = "Послезавтра" Тогда
		ДатаНачала = НачалоДня(Форма.ДатаНачалаОтбор);
		ДатаОкончания = КонецДня(Форма.ДатаНачалаОтбор);
	ИначеЕсли Значение = "НаЭтойНеделе" 
		ИЛИ Значение = "НаСледующейНеделе" Тогда
		ДатаНачала = НачалоНедели(Форма.ДатаНачалаОтбор);
		ДатаОкончания = КонецНедели(Форма.ДатаНачалаОтбор);
	ИначеЕсли Значение = "ДоУказаннойДаты" ИЛИ ОтборПоПросроченным Тогда
		ДатаНачала = Дата(1,1,1);
		
		Если ОтборПоПросроченным Тогда
			ДатаОкончания = ТекущаяДата();
			ИспользованиеОкончание = Истина;
		Иначе
			ДатаОкончания = КонецДня(Форма.ДатаНачалаОтбор);
		КонецЕсли;
		
		ИспользованиеНачало = Ложь;
	Иначе
		ДатаНачала = Дата(1,1,1);
		ДатаОкончания = Дата(1,1,1);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"ДатаНачала",
		ДатаНачала,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		"ДатаНачала",
		ИспользованиеНачало,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если НЕ ОтборПоПросроченным Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"ДатаНачалаСобытия",
			ДатаОкончания,
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			"ДатаНачалаОкончания",
			ИспользованиеОкончание,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"ДатаОкончания",
		ДатаОкончания,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		"ДатаОкончания",
		ИспользованиеОкончание,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборы(Форма)
	
	УстановитьПростыеОтборы(Форма);
	УстановитьОтборПоСостоянию(Форма);
	УстановитьОтборПоХозОперации(Форма);
	УстановитьОтборПоОтветственному(Форма);
	УстановитьОтборПоПодразделениию(Форма);
	УстановитьОтборПоДатеСоздания(Форма);
	УстановитьОтборПоДатеНачала(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокХозОперацийОснований()
	
	СписокВыбора = Элементы.ФильтрПоХООснования.СписокВыбора;
	
	// Получим ХО документов
	Для Индекс = 0 По Перечисления.ДокументыОбработкиСобытия.Количество() - 1 Цикл
		ТекущийТип = Перечисления.ДокументыОбработкиСобытия[Индекс];
		ИмяДокумента = XMLСтрока(ТекущийТип);
		
		СписокХО = Справочники.ХозОперации.ПолучитьВозможныеХозОперации(Документы[ИмяДокумента].ПустаяСсылка());
		
		Для Каждого ТекущийХО Из СписокХО Цикл
			СписокВыбора.Добавить(
				Справочники.ХозОперации[ТекущийХО.Значение],
				ТекущийХО.Представление);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСписокВидовСобытий()
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.Событие)
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСобытия") Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим подменю для создания
	ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
		ЭтотОбъект,
		"ПодменюСозданияДокумента",
		"ФормаКоманднаяПанель",,
		Нстр("ru = 'Создать'"),
		БиблиотекаКартинок.СоздатьЭлементСписка,
		Нстр("ru = 'Создание нового события'"));
	
	// Получим список актуальных видов событий.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидыСобытий.Ссылка КАК ВидСобытия,
	               |	ВидыСобытий.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ВидыСобытий КАК ВидыСобытий
	               |ГДЕ
	               |	НЕ ВидыСобытий.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	СписокСоответсвийВидовСобытий.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Заполним вид события в подменю создания.
	Для Инд = 0 По СписокСоответсвийВидовСобытий.Количество() - 1 Цикл
		ИмяКоманды = СтрШаблон("СоздатьСобытие%1", Строка(Инд));
		
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыКоманды.Вставить("ИмяГруппы", "ПодменюСозданияДокумента");
		ПараметрыКоманды.Вставить("Картинка", Неопределено);
		ПараметрыКоманды.Вставить("Заголовок", СписокСоответсвийВидовСобытий[Инд].Наименование);
		ПараметрыКоманды.Вставить("Подсказка", Неопределено);
		ПараметрыКоманды.Вставить("ТолькоВоВсехДействиях", Ложь);
		ПараметрыКоманды.Вставить("МестоРасположения", Неопределено);
		ПараметрыКоманды.Вставить("Действие", "Подключаемый_СозданиеНовогоСобытия");
		ПараметрыКоманды.Вставить("Отображение", Неопределено);
		ПараметрыКоманды.Вставить("Суффикс", "");
		ПараметрыКоманды.Вставить("СочетаниеКлавиш", Неопределено);
		ПараметрыКоманды.Вставить("ИзменяетСохраняемыеДанные", Ложь);
		ПараметрыКоманды.Вставить("Доступность", Истина);
		
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(
			ЭтотОбъект,
			ПараметрыКоманды);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СозданиеНовогоСобытия(Команда) Экспорт
	
	ИндексВидаСобытия = Число(СтрЗаменить(Команда.Имя, "СоздатьСобытие", ""));
	ВидСобытия = СписокСоответсвийВидовСобытий.Получить(ИндексВидаСобытия);
	Если Не ВидСобытия = Неопределено Тогда
		ПараметрыФормы = Новый Структура("ВидСобытия", ВидСобытия.ВидСобытия);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыбратьДокументНаСервере(Параметр)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
		
	Если Не ЕстьРеквизит(Параметр, "ДокументОснование") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметр.ДокументОснование = ТекущаяСтрока
		И Параметр <> ТекущаяСтрока.ДокументРезультат Тогда
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиАльфаАвто

// РасширеннаяИнформация
&НаКлиенте
Процедура РасширеннаяИнформацияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	КонтекстНажатия = РасширеннаяИнформацияКлиент.НовыйКонтекстНажатия(ЭтотОбъект, Элементы.Список);
	КонтекстНажатия.ПолноеИмяОбъекта = "Документ.Событие";
	РасширеннаяИнформацияКлиент.Нажатие(КонтекстНажатия, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьРасширеннуюИнформацию()
	
	Контекст = РасширеннаяИнформацияКлиент.НовыйКонтекстОбновления();
	Контекст.ПолеОтображаетсяНаФорме = Элементы.РасширеннаяИнформация.Видимость;
	Контекст.ОбъектДляОбновления = Элементы.Список.ТекущаяСтрока;
    РасширеннаяИнформация = РасширеннаяИнформацияКлиент.СформироватьРасширеннуюИнформациюОбОбъекте(Контекст);
    
КонецПроцедуры
// Конец РасширеннаяИнформация

#Область ПечатьРеестра

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыПечатиРеестра(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры)
	
	ПечатьРеестраДокументов.ПолучитьНастройкиСКД(ЭтотОбъект.Элементы.Список, ПараметрыВыполнения);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеСпискомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеСпискомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", Неопределено) <> Неопределено Тогда
		Основание = Новый Структура("Событие,Имя,Контрагент", ДополнительныеПараметры.Событие, "Событие", РезультатОповещения);
		ОткрытьФорму("Документ."+ДополнительныеПараметры.ИмяКоманды+".ФормаОбъекта", Новый Структура("Основание", Основание));
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораДокумента(РезультатПодбора, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатПодбора) = Тип("Структура") Тогда
		ВыборДокументаНаСервере(РезультатПодбора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаДокументЖалобаКлиентаСоздатьНаОсновании",
			"Видимость",
			Константы.ИспользоватьЖалобы.Получить()
		);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти