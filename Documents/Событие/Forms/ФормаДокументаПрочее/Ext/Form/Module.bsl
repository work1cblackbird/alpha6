///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Событие"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	ЗаполнитьКоманднуюПанельАтрибутыСобытия();
	
	Текст = Объект.Цель;
	Результат = Объект.Результат;
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты,Адрес",
		"ПредставлениеТелефона,АдресЭлектроннойПочты,Адрес");
	// Обработаем реквизит формы "Статус события"
	ОбработкаСтатусаСобытия(ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Объект.ВидСобытия = Справочники.ВидыСобытий.ВыдачаАвтомобиля Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыдача;
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Пользователи");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "СторонниеЛица");
	Элементы.ГруппаОтказ.Видимость = (Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено"));
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Событие", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
	Объект.Цель = Текст;
	Объект.Результат = Результат;
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияДокумента", Истина);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Если ЗначениеЗаполнено(СтатусСобытия) Тогда
		ОбработкаСтатусаСобытия(, Истина);
	КонецЕсли;
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено")
		И Объект.ВидСобытия = ПредопределенноеЗначение("Справочник.ВидыСобытий.ОтказОтСделки") Тогда
		АвтомобилиСПробегомВызовСервера.ПолучитьСвязанныеСобытия(Объект.Ссылка, ПараметрыЗаписи);
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	// Отмена связанных событий
	Если ПараметрыЗаписи.Свойство("ОтменитьСвязанныеСобытия") Тогда
		ПараметрыОтмены = ПараметрыЗаписи.ОтменитьСвязанныеСобытия;
		Оповещение = Новый ОписаниеОповещения("ПродолжитьПослеЗаписи", ЭтотОбъект, ПараметрыОтмены);
		ТекстВопроса = НСтр("ru = 'Есть подчиненные события для Рабочего листа %1 от %2.
			|Отменить связанные события?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ПараметрыОтмены.Номер, ПараметрыОтмены.Дата);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты = Неопределено)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ДатаПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ХозОперацияПриИзменении(Объект, ПараметрыДействия);

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);

	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.КонтрагентПриИзменении(Объект, ПараметрыДействия);

	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты,Адрес",
		"ПредставлениеТелефона,АдресЭлектроннойПочты,Адрес");

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Текст = Объект.Тема;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НачатьРедактированиеКонтактнойИнформации(
		ЭтотОбъект,
		Элемент.ТекстРедактирования,
		УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НовыеПараметрыРедактирования()
	);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНачалоПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяНачалоПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяНачалоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + Час(ВыбранноеЗначение) * 60 * 60 + Минута(ВыбранноеЗначение) * 60 + Секунда(ВыбранноеЗначение);
	// Обработаем событие в контексте сервера
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	Если НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания) Тогда
		ЗаполнитьСписокВыбораВремени(ДанныеВыбора,Объект.ДатаНачала,Истина);
	Иначе
		ЗаполнитьСписокВыбораВремени(ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ДатаОкончания= НачалоДня(Объект.ДатаОкончания) + Час(ВыбранноеЗначение) * 60 * 60 + Минута(ВыбранноеЗначение) * 60 + Секунда(ВыбранноеЗначение);
	// Обработаем событие в контексте сервера
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СтатусСобытияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("Событие", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.СтатусыСобытия.Форма.СписокСтатусовСобытия", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура МенеджерПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.МенеджерПриИзменении(Объект, ПараметрыДействия);
	// Сформируем список статусов события
	ОбработкаСтатусаСобытия();
	
КонецПроцедуры 

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	МенеджерПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура Выдача_ЗаказНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ЗаказНаАвтомобильПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ЗаказНаАвтомобильПриИзменении(Элемент)
	
	Выдача_ЗаказНаАвтомобильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ПланируемоеВремяВыдачиАвтомобиляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ПланируемоеВремяВыдачиАвтомобиляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Коэффициент = 60;
	
	СтандартнаяОбработка = Ложь;
	Объект.Выдача_ПланируемаяДатаВыдачиАвтомобиля =
		НачалоДня(Объект.Выдача_ПланируемаяДатаВыдачиАвтомобиля)
		+ Час(ВыбранноеЗначение) * Коэффициент * Коэффициент
		+ Минута(ВыбранноеЗначение) * Коэффициент + Секунда(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ФактическоеВремяВыдачиАвтомобиляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ФактическоеВремяВыдачиАвтомобиляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Коэффициент = 60;
	
	СтандартнаяОбработка = Ложь;
	Объект.Выдача_ФактическаяДатаВыдачиАвтомобиля =
		НачалоДня(Объект.Выдача_ФактическаяДатаВыдачиАвтомобиля)
		+ Час(ВыбранноеЗначение) * Коэффициент * Коэффициент
		+ Минута(ВыбранноеЗначение) * Коэффициент + Секунда(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура Выдача_ДатаПроверкиДокументовПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Выдача_ДатаПроверкиДокументов) Тогда
		
		Объект.Выдача_АвторПроверкиДокументов = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ДатаПроверкиДокументовПриИзменении(Элемент)
	
	Выдача_ДатаПроверкиДокументовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Выдача_ДатаПроверкиАвтомобиляПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Выдача_ДатаПроверкиАвтомобиля) Тогда
		
		Объект.Выдача_АвторПроверкиАвтомобиля = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ДатаПроверкиАвтомобиляПриИзменении(Элемент)
	
	Выдача_ДатаПроверкиАвтомобиляПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Выдача_ДатаПроверкиОплатыПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Выдача_ДатаПроверкиОплаты) Тогда
		
		Объект.Выдача_АвторПроверкиОплаты = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выдача_ДатаПроверкиОплатыПриИзменении(Элемент)
	
	Выдача_ДатаПроверкиОплатыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя);

КонецПроцедуры

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Телефон = Объект.ПредставлениеТелефона;
		
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
					
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				Объект.ПредставлениеТелефона,
				Объект.Контрагент,
				Объект.Ссылка
			);
		Иначе
			ВзаимодействияАльфаАвтоКлиент.ПозвонитьКонтакту(Объект.Контрагент, Объект.ПредставлениеТелефона, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаСтатусаСобытия(УстановитьСтатус = Ложь, ВыполнитьЗаписьВРегистр = Ложь)
	
	// При записи документа сохраним текущий статус в регистре сведений
	Если ВыполнитьЗаписьВРегистр Тогда
		УстановитьПривилегированныйРежим(Истина);
		СтатусыСобытия = РегистрыСведений.СтатусыСобытия.СрезПоследних(ТекущаяДатаСеанса(), Новый Структура("Событие", Объект.Ссылка));
		Если СтатусыСобытия.Количество() > 0 Тогда
			Если СтатусыСобытия[0].Статус = СтатусСобытия Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.СтатусыСобытия.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Событие    = Объект.Ссылка;
		МенеджерЗаписи.Статус     = СтатусСобытия;
		МенеджерЗаписи.Менеджер   = Объект.Менеджер;
		МенеджерЗаписи.ВидСобытия = Объект.ВидСобытия;
		МенеджерЗаписи.Автор      = Объект.Автор;
		МенеджерЗаписи.Период     = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		Возврат;
	КонецЕсли;
	
	// При открытии документа установим последний сохраненный статус события
	Если УстановитьСтатус Тогда
		СтатусыСобытия = РегистрыСведений.СтатусыСобытия.СрезПоследних(ТекущаяДатаСеанса(), Новый Структура("Событие", Объект.Ссылка));
		Если СтатусыСобытия.Количество() > 0 Тогда
			СтатусСобытия = СтатусыСобытия[0].Статус;
		КонецЕсли;
	КонецЕсли;
	
	// Создадим список выбора для реквизита "Статус события"
	Элементы.СтатусСобытия.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыСобытий.Ссылка КАК Статус
		|ИЗ
		|	Справочник.СтатусыСобытий КАК СтатусыСобытий
		|ГДЕ
		|	СтатусыСобытий.ТипыСобытий.ВидСобытия = &ВидСобытия
		|	И СтатусыСобытий.ТипыСобытий.ВыборМенеджера = &ВыборМенеджера";
	
	Запрос.УстановитьПараметр("ВидСобытия", Объект.ВидСобытия);
	Запрос.УстановитьПараметр("ВыборМенеджера", ?(ЗначениеЗаполнено(Объект.Менеджер), Истина, Ложь));
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.СтатусСобытия.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Статус);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоманднуюПанельАтрибутыСобытия()
	
	// ПодменюСостояниеСобытия
	ИмяТекущегоСостояния = "СостоянияСобытий"+Перечисления.СостоянияСобытий.Запланировано;
	Для нИндекс = 0 По Перечисления.СостоянияСобытий.Количество() - 1 Цикл
		Если Перечисления.СостоянияСобытий[нИндекс] = Перечисления.СостоянияСобытий.Утверждено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОперации = "СостоянияСобытий"+Перечисления.СостоянияСобытий[нИндекс];
		КомандаОперации = Команды.Добавить(ИмяОперации);
		КомандаОперации.Заголовок                 = Перечисления.СостоянияСобытий[нИндекс];
		КомандаОперации.Действие                  = "Подключаемый_ПриИзмененииСостоянияСобытий";
		КомандаОперации.ИзменяетСохраняемыеДанные = ИСТИНА;
		КнопкаОперации = Элементы.Добавить(ИмяОперации, Тип("КнопкаФормы"), Элементы.ПодменюСостояниеСобытия);
		КнопкаОперации.Картинка = ПолучитьКартинкуДляОбъектов(ЭтотОбъект, "СостоянияСобытий", Перечисления.СостоянияСобытий[нИндекс]);
		КнопкаОперации.ИмяКоманды = ИмяОперации;
		КнопкаОперации.Пометка    = Ложь;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Состояние) Тогда
		ИмяТекущегоСостояния = "СостоянияСобытий"+Объект.Состояние;
	Иначе
		Объект.Состояние = Перечисления.СостоянияСобытий.Запланировано;
	КонецЕсли;
	
	Элементы.ПодменюСостояниеСобытия.Заголовок = СтрЗаменить(ИмяТекущегоСостояния,"СостоянияСобытий","");
	Элементы.ПодменюСостояниеСобытия.Картинка  = ПолучитьКартинкуДляОбъектов(ЭтотОбъект, "СостоянияСобытий", Объект.Состояние);
	
	Для Каждого КнопкаОперации Из Элементы.ПодменюСостояниеСобытия.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя = ИмяТекущегоСостояния);
	КонецЦикла;
	
	// ПодменюВидСобытия
	ЗапрещенныеВидыСобытий = Справочники.ВидыСобытий.ЗапрещенныеВидыСобытий();
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыСобытий.Ссылка
		|ИЗ
		|	Справочник.ВидыСобытий КАК ВидыСобытий
		|ГДЕ
		|	НЕ ВидыСобытий.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыСобытий.Наименование";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Индекс = 0;
	
	Пока РезультатЗапроса.Следующий() Цикл
		Если ЗапрещенныеВидыСобытий.Найти(РезультатЗапроса.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОперации = "ВидСобытия" + Индекс;
		КомандаОперации = Команды.Добавить(ИмяОперации);
		КомандаОперации.Заголовок                 = РезультатЗапроса.Ссылка;
		КомандаОперации.Действие                  = "Подключаемый_ПриИзмененииВидСобытия";
		КомандаОперации.ИзменяетСохраняемыеДанные = ИСТИНА;
		КнопкаОперации = Элементы.Добавить(ИмяОперации, Тип("КнопкаФормы"), Элементы.ПодменюВидСобытия);
		КнопкаОперации.ИмяКоманды = ИмяОперации;
		КнопкаОперации.Пометка    = Ложь;
		СоответствиеВидыСобытия.Добавить(РезультатЗапроса.Ссылка,ИмяОперации);
		Индекс = Индекс+1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
		ИмяТекущегоВидаСобытия = СоответствиеВидыСобытия.НайтиПоЗначению(Объект.ВидСобытия).Представление;
	Иначе
		ИмяТекущегоВидаСобытия = "";
	КонецЕсли;
	
	Элементы.ПодменюВидСобытия.Заголовок = ?(ЗначениеЗаполнено(Объект.ВидСобытия),Строка(Объект.ВидСобытия), НСтр("ru = 'Укажите вид события'"));
		
	Для Каждого КнопкаОперации Из Элементы.ПодменюВидСобытия.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя = ИмяТекущегоВидаСобытия);
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКартинкуДляОбъектов(Форма, ТипКартинки, Объект1)
	
	Если ТипКартинки = "СостоянияСобытий" Тогда
		Если Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Выполняется") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеВРаботе;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеЗавершено;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Запланировано") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеЗапланировано;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Утверждено") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеУтверждено;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеОтменено;
		Иначе
			ПолученнаяКартинка = Новый Картинка;
		КонецЕсли;
		
		Возврат ПолученнаяКартинка;
		
	Иначе
		Возврат Новый Картинка();
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВремени(Список, ВремяНачало = Неопределено, ДобавлятьПредставлениеДлительности = Ложь)
	
	Список.Очистить();
	ПустаяДата = Дата("00010101");
	бДобавлятьПредставлениеДлительности = (ДобавлятьПредставлениеДлительности И ТипЗнч(ВремяНачало) = Тип("Дата"));
	
	Если бДобавлятьПредставлениеДлительности Тогда
		// Если ВремяНачало содержит так же и дату
		ЗначениеВремяНачало = ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	Иначе
		ЗначениеВремяНачало = Неопределено
	КонецЕсли;
	
	ТекВремя = ?(ЗначениеВремяНачало = Неопределено, ПустаяДата, ЗначениеВремяНачало + 30 * 60);
	
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		
		Если бДобавлятьПредставлениеДлительности Тогда
			ПредставлениеПериодаВремени = ПолучитьПредставлениеПериодаВремени(ЗначениеВремяНачало, ТекВремя);
			Если ЗначениеЗаполнено(ПредставлениеПериодаВремени) Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (" + ПредставлениеПериодаВремени + ")";
			КонецЕсли;
		КонецЕсли;
		
		Список.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 30 * 60;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьПредставлениеПериодаВремени(ВремяНачало, ВремяОкончание)
	
	ПустаяДата = Дата("00010101");
	// На случай если время содержит так же и дату
	ЗначениеВремяНачало		= ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	ЗначениеВремяОкончание	= ПустаяДата + (ВремяОкончание - НачалоДня(ВремяОкончание));
	ВремяНачалоВМинутах		= Цел((ЗначениеВремяНачало - НачалоДня(ЗначениеВремяНачало)) / 60);
	ВремяОкончанияВМинутах	= Цел((ЗначениеВремяОкончание - НачалоДня(ЗначениеВремяОкончание)) / 60);
	РазницаВМинутах = ВремяОкончанияВМинутах - ВремяНачалоВМинутах;
	Если РазницаВМинутах <= 0 Тогда
		Возврат "";
	КонецЕсли;
	// 1 минута
	// 2 - 4 минуты
	// 5 и далее - минут
	// 1 час
	// 2 - 4 часа
	// 5 часов
	// 5,5 часов
	Если РазницаВМинутах < 60 Тогда
		ВремяСтрокой = Формат(РазницаВМинутах, "ЧДЦ=0; ЧН=0; ЧГ=");
		Если РазницаВМинутах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'минута'");
		ИначеЕсли РазницаВМинутах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'минуты'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'минут'");
		КонецЕсли;
	Иначе
		РазницаВЧасах = РазницаВМинутах / 60;
		Если РазницаВЧасах = Цел(РазницаВМинутах / 60) Тогда
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=0; ЧРД=,; ЧН=0; ЧГ=");
		Иначе
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=1; ЧРД=,; ЧН=0; ЧГ=");
		КонецЕсли;
		Если РазницаВЧасах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'час'");
		ИначеЕсли РазницаВЧасах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'часа'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	Возврат ВремяСтрокой + " " + ПредставлениеВремя;
	
КонецФункции 

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСостоянияСобытий(Команда) Экспорт

	Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий." +
		СтрЗаменить(Команда.Имя, "СостоянияСобытий", "") + "");
		
	Для Каждого КнопкаОперации Из Элементы.ПодменюСостояниеСобытия.ПодчиненныеЭлементы Цикл
		Если КнопкаОперации.Имя = Команда.Имя Тогда
			КнопкаОперации.Пометка = Истина;
		Иначе
			КнопкаОперации.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПодменюСостояниеСобытия.Заголовок = СтрЗаменить(Команда.Имя, "СостоянияСобытий", "");
	Элементы.ПодменюСостояниеСобытия.Картинка  = ПолучитьКартинкуДляОбъектов(ЭтотОбъект,
		"СостоянияСобытий", Объект.Состояние);
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено") Тогда
		Элементы.ГруппаОтказ.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтказ.Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВидСобытия(Команда) Экспорт
	
	ИмяКоманды = Команда.Имя;
	
	СоответствующийВидСобытия = СоответствиеВидыСобытия.НайтиПоИдентификатору(Число(СтрЗаменить(ИмяКоманды, "ВидСобытия", "")));
	Объект.ВидСобытия = СоответствующийВидСобытия.Значение;
	
	Для Каждого КнопкаОперации Из Элементы.ПодменюВидСобытия.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(КнопкаОперации) = Тип("ГруппаФормы") Тогда
			Если ИмяКоманды = "ВидСобытия0" Тогда
				Элементы.ВидСобытия0.Пометка = Истина;
			Иначе
				Элементы.ВидСобытия0.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Если КнопкаОперации.Имя = ИмяКоманды Тогда
				КнопкаОперации.Пометка = Истина;
			Иначе
				КнопкаОперации.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПодменюВидСобытия.Заголовок = ?(ЗначениеЗаполнено(Объект.ВидСобытия),
		СоответствующийВидСобытия.Значение, НСтр("ru = '<Общий вид события>'"));
	
	Если Объект.ВидСобытия = ПредопределенноеЗначение("Справочник.ВидыСобытий.ОтказОтСделки") Тогда
		Элементы.ГруппаОтказ.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтказ.Видимость = Ложь;
	КонецЕсли;
	// Сформируем список статусов события
	ОбработкаСтатусаСобытия();
	
	Если Объект.ВидСобытия = ПредопределенноеЗначение("Справочник.ВидыСобытий.ВыдачаАвтомобиля") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыдача;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры	
	
#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.СтраницаВыдача.Видимость = (Объект.ВидСобытия = Справочники.ВидыСобытий.ВыдачаАвтомобиля);
	ЭтоСостояниеЗавершено = (Объект.Состояние = Перечисления.СостоянияСобытий.Завершено);
	Элементы.Выдача_ЗаказНаАвтомобиль.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_Автомобиль.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_МестоВыдачиАвтомобиля.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_ПланируемаяДатаВыдачиАвтомобиля.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_ПланируемоеВремяВыдачиАвтомобиля.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_ДатаПроверкиДокументов.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_АвторПроверкиДокументов.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_ДатаПроверкиАвтомобиля.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_АвторПроверкиАвтомобиля.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_ДатаПроверкиОплаты.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_АвторПроверкиОплаты.ТолькоПросмотр = ЭтоСостояниеЗавершено;
	Элементы.Выдача_ФактическаяДатаВыдачиАвтомобиля.ТолькоПросмотр = НЕ ЭтоСостояниеЗавершено;
	Элементы.Выдача_ФактическоеВремяВыдачиАвтомобиля.ТолькоПросмотр = НЕ ЭтоСостояниеЗавершено;
	Элементы.Выдача_АвторВыдачиАвтомобиля.ТолькоПросмотр = НЕ ЭтоСостояниеЗавершено;
	Элементы.Выдача_Примечание.ТолькоПросмотр = НЕ ЭтоСостояниеЗавершено;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", Неопределено) <> Неопределено Тогда
		Основание = Новый Структура("Событие,Имя,Контрагент", ДополнительныеПараметры.Событие, "Событие", РезультатОповещения);
		ОткрытьФорму("Документ."+ДополнительныеПараметры.ИмяКоманды+".ФормаОбъекта", Новый Структура("Основание", Основание));
	КонецЕсли;

	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)

	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПродолжитьПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	АвтомобилиСПробегомВызовСервера
	.ОтменитьСвязанныеСобытия(ДополнительныеПараметры.МассивДокументов, ДополнительныеПараметры.Комментарий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти