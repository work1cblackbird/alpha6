///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Событие"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьРеквизитыФормы(ЭтотОбъект);	
	
	РазблокироватьСледующееСобытие();
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	ЗаполнитьКоманднуюПанельАтрибутыСобытия();
	
	МассивТипов=Новый Массив();
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	Элементы.Контрагент.ОграничениеТипа=Новый ОписаниеТипов(МассивТипов);
	Элементы.СторонниеЛицаКонтрагент.ОграничениеТипа=Новый ОписаниеТипов(МассивТипов);
	Элементы.СторонниеЛицаКонтактноеЛицо.ОграничениеТипа=Новый ОписаниеТипов(МассивТипов);
	
	Текст = Объект.Цель;
	Результат = Объект.Результат;
	ОбработкаСтатусаСобытия(ЗначениеЗаполнено(Объект.Ссылка));
	СформироватьСписокВыбораВремени();
	ТекущийСотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "Сотрудник");
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты,Адрес",
		"ПредставлениеТелефона,АдресЭлектроннойПочты,Адрес");
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НайтиСвязанныйДокумент();
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Пользователи");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "СторонниеЛица");
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ОповещениеДляДокументаСобытие" И ИскатьСвязанныйДокументНаСервере(Параметр) Тогда
			НайтиСвязанныйДокумент();
			Если Модифицированность Тогда 
				Записать();
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НайтиСвязанныйДокумент(, Ложь);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Событие", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.Цель = Текст;
	ТекущийОбъект.Результат = Результат;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияДокумента", Истина);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьРеквизитыФормы(ЭтотОбъект);	
	
	РазблокироватьСледующееСобытие();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Если ЗначениеЗаполнено(СтатусСобытия) Тогда
		ОбработкаСтатусаСобытия(, Истина);
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ЗакрытьПослеЗаписи", Ложь) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты = Неопределено)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);

	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты,Адрес",
		"ПредставлениеТелефона,АдресЭлектроннойПочты,Адрес");
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Текст = Объект.Тема;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НачатьРедактированиеКонтактнойИнформации(
		ЭтотОбъект,
		Элемент.ТекстРедактирования,
		УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НовыеПараметрыРедактирования()
	);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНачалоПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяНачалоПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяНачалоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КоэффициентВремени = 60;
	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала)
		+ Час(ВыбранноеЗначение) * КоэффициентВремени * КоэффициентВремени
		+ Минута(ВыбранноеЗначение) * КоэффициентВремени
		+ Секунда(ВыбранноеЗначение);
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	Если НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания) Тогда
		ЗаполнитьСписокВыбораВремени(ДанныеВыбора,Объект.ДатаНачала,Истина);
	Иначе
		ЗаполнитьСписокВыбораВремени(ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КоэффициентВремени = 60;
	
	Объект.ДатаОкончания= НачалоДня(Объект.ДатаОкончания)
		+ Час(ВыбранноеЗначение) * КоэффициентВремени * КоэффициентВремени
		+ Минута(ВыбранноеЗначение) * КоэффициентВремени
		+ Секунда(ВыбранноеЗначение);
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СтатусСобытияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Событие", Объект.Ссылка));
	ОткрытьФорму(
		"РегистрСведений.СтатусыСобытия.Форма.СписокСтатусовСобытия",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура МенеджерПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.МенеджерПриИзменении(Объект, ПараметрыДействия);

	ОбработкаСтатусаСобытия();
	
КонецПроцедуры 

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	МенеджерПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПодразделениеКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	ПодразделениеКомпанииПриИзмененииНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаКлиенте
Процедура ДокументСобытияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
		ПоказатьЗначение(,СвязанныйДокумент);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ Модифицированность Тогда
		ПоискДокументаСобытия();
	Иначе
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаЗаписиСобытия", ЭтотОбъект);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестДрайвНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура();
	Если ЗначениеЗаполнено(ТестДрайв) Тогда
		ПараметрыФормы.Вставить("Ключ", ТестДрайв);
	Иначе
		ПараметрыФормы.Вставить("Основание",
			?(ЗначениеЗаполнено(Объект.ДокументОснование),
			Объект.ДокументОснование,
			Объект.ДокументРезультат));
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбновитьТестДрайв", ЭтотОбъект);
	
	ОткрытьФорму(
		"Документ.ТестДрайв.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры // ТестДрайвНажатие()

#КонецОбласти

&НаКлиенте
Процедура ТаблицаСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСобытий.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Событие);
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСобытийВыбор()

&НаСервере
Процедура СледующееСобытиеВидСобытияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если СледующееСобытие.ВидСобытия = Справочники.ВидыСобытий.ОтказОтСделки Тогда
		
		// Чтение значения для руководителя
		СтруктураОтбора=Новый Структура();
		СтруктураОтбора.Вставить("Организация", Объект.ПодразделениеКомпании);
		СтруктураОтбора.Вставить("Объект", Перечисления.ВидыОбъектовСведений.Руководитель);
		
		СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(
			НачалоДня(ТекущаяДатаСеанса()),
			СтруктураОтбора);
		СледующееСобытие.Менеджер = СтруктураСведений.Значение;
		
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // СледующееСобытиеВидСобытияПриИзмененииНаСервере()

&НаКлиенте
Процедура СледующееСобытиеВидСобытияПриИзменении(Элемент)
	
	СледующееСобытиеВидСобытияПриИзмененииНаСервере();
	
КонецПроцедуры // СледующееСобытиеВидСобытияПриИзменении()

&НаКлиенте
Процедура ВремяНачалоСледующегоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КоэффициентВремени = 60;
	
	СледующееСобытие.ДатаНачала =
		НачалоДня(СледующееСобытие.ДатаНачала)
		+ Час(ВыбранноеЗначение) * КоэффициентВремени * КоэффициентВремени
		+ Минута(ВыбранноеЗначение) * КоэффициентВремени
		+ Секунда(ВыбранноеЗначение);
	
КонецПроцедуры // ВремяНачалоСледующегоОбработкаВыбора()

&НаСервере
Процедура СледующееСобытиеПодразделениеКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Событие.ПодразделениеКомпанииПриИзменении(СледующееСобытие, ПараметрыДействия);
	
КонецПроцедуры // СледующееСобытиеПодразделениеКомпанииПриИзмененииНаСервере()

&НаСервере
Процедура СледующееСобытиеМенеджерПриИзмененииНаСервере()
	
	Документы.Событие.МенеджерПриИзменении(СледующееСобытие);
	
КонецПроцедуры // СледующееСобытиеМенеджерПриИзмененииНаСервере()

&НаКлиенте
Процедура СледующееСобытиеМенеджерПриИзменении(Элемент)
	
	СледующееСобытиеМенеджерПриИзмененииНаСервере();
	
КонецПроцедуры // СледующееСобытиеМенеджерПриИзменении()

&НаКлиенте
Процедура СледующееСобытиеПодразделениеКомпанииПриИзменении(Элемент)
	
	СледующееСобытиеПодразделениеКомпанииПриИзмененииНаСервере();
	
КонецПроцедуры // СледующееСобытиеПодразделениеКомпанииПриИзменении()

&НаКлиенте
Процедура ПолеДокументРезультатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ Модифицированность Тогда
		ПоискДокументаСобытия(Элемент.Имя);
	Иначе
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаЗаписиСобытия", ЭтотОбъект, Элемент.Имя);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДокументыВводНаОсновании = ПолучитьДокументыОснованияНаСервере();	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ДокументыВводНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	
	Если НЕ ЗначениеЗаполнено(СвязанныйДокумент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбран документ для взаимодействия. Сохранение следующего события отменено'"));
	Иначе
		СоздатьСледующееСобытие();
	КонецЕсли;
	
КонецПроцедуры  // СоздатьСобытие()

&НаСервере
Процедура СоздатьСобытиеИЗавершитьТекущееНаСервере()
	
	КорректноЗаполненыРеквизиты = Истина;
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Результат"" не заполнено'"), Объект.Ссылка, "Результат");
		КорректноЗаполненыРеквизиты = Ложь;
	Иначе
		Объект.Результат = Результат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() ИЛИ НЕ КорректноЗаполненыРеквизиты Тогда
		ПроверитьКорректностьСледующегоСобытия();
		Возврат;
	КонецЕсли;
	
	СоздатьСледующееСобытие();
	
КонецПроцедуры // СоздатьСобытиеИЗавершитьТекущееНаСервере()

&НаКлиенте
Процедура СоздатьСобытиеИЗавершитьТекущее(Команда)
	
	СоздатьСобытиеИЗавершитьТекущееНаСервере();
	
	Если Элементы.СтраницыСвязанныеСобытия.ТекущаяСтраница = Элементы.ЗапланированныеСобытия Тогда
		ЗавершитьЗавершениеСобытия();
	КонецЕсли;
	
КонецПроцедуры // СоздатьСобытиеИЗавершитьТекущее()

&НаКлиенте
Процедура ЗавершитьСобытие(Команда)
	
	ЕстьСвязанныйДокумент = (ЗначениеЗаполнено(СвязанныйДокумент));
	Если Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено") 
		И ((ЕстьСвязанныйДокумент И НЕ ПроверитьНаличиеСледующегоСобытия()) ИЛИ НЕ ЕстьСвязанныйДокумент) Тогда
		
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			МассивТекстаВопроса = Новый Массив;
			МассивТекстаВопроса.Добавить(НСтр("ru = 'Завершить событие без планирования следующего взаимодействия'"));
			МассивТекстаВопроса.Добавить(НСтр("ru = 'с клиентом (запланированного события)?'"));
			ТекстВопроса = СтрСоединить(МассивТекстаВопроса, " ");
		Иначе
			ТекстВопроса = НСтр("ru = 'Завершить событие без привязки к документу?'");
		КонецЕсли;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ЗавершениеСобытия", ЭтотОбъект);
		ПоказатьВопрос(
			ОбработчикОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ЗавершитьЗавершениеСобытия();
	
КонецПроцедуры // ЗавершитьСобытие()

&НаКлиенте
Процедура ЗаписатьСобытие(Команда)
	
	ЗаписатьДокумент(Ложь);
	
КонецПроцедуры // ЗаписатьСобытие()

&НаКлиенте
Процедура ОтменитьСобытие(Команда)
	
	Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено");
	
	ЗаписатьДокумент();
	
КонецПроцедуры // ОтменитьСобытие()

&НаКлиенте
Процедура НазначитьМеня(Команда)
	
	Если СтрНайти(Команда.Имя, "НаСледующее") > 0 Тогда
		СледующееСобытие.Менеджер = ТекущийСотрудник;
		СледующееСобытиеМенеджерПриИзменении(Неопределено);
	Иначе
		Объект.Менеджер = ТекущийСотрудник;
		МенеджерПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры // НазначитьМеня()

&НаКлиенте
Процедура ПодборПричиныСобытия(Команда)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ Модифицированность Тогда
		ПоискДокументаСобытия(Команда.Имя);
	Иначе
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаЗаписиСобытия", ЭтотОбъект, Команда.Имя);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиРезультатСобытия(Команда)
	НайтиСвязанныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя); 
	
КонецПроцедуры

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Телефон = Объект.ПредставлениеТелефона;
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				Объект.ПредставлениеТелефона,
				Объект.Контрагент,
				Объект.Ссылка
			);
		Иначе
			ВзаимодействияАльфаАвтоКлиент.ПозвонитьКонтакту(Объект.Контрагент, Объект.ПредставлениеТелефона, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаСтатусаСобытия(УстановитьСтатус = Ложь, ВыполнитьЗаписьВРегистр = Ложь)
	// При записи документа сохраним текущий статус в регистре сведений
	Если ВыполнитьЗаписьВРегистр Тогда
		УстановитьПривилегированныйРежим(Истина);
		СтатусыСобытия = РегистрыСведений.СтатусыСобытия.СрезПоследних(
			ТекущаяДатаСеанса(), Новый Структура("Событие", Объект.Ссылка));
		Если СтатусыСобытия.Количество() > 0 Тогда
			Если СтатусыСобытия[0].Статус = СтатусСобытия Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.СтатусыСобытия.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Событие    = Объект.Ссылка;
		МенеджерЗаписи.Статус     = СтатусСобытия;
		МенеджерЗаписи.Менеджер   = Объект.Менеджер;
		МенеджерЗаписи.ВидСобытия = Объект.ВидСобытия;
		МенеджерЗаписи.Автор      = Объект.Автор;
		МенеджерЗаписи.Период     = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		Возврат;
	КонецЕсли;
	// При открытии документа установим последний сохраненный статус события
	Если УстановитьСтатус Тогда
		СтатусыСобытия = РегистрыСведений.СтатусыСобытия.СрезПоследних(
			ТекущаяДатаСеанса(), Новый Структура("Событие", Объект.Ссылка));
		Если СтатусыСобытия.Количество() > 0 Тогда
			СтатусСобытия = СтатусыСобытия[0].Статус;
		КонецЕсли;
	КонецЕсли;
	// Создадим список выбора для реквизита "Статус события"
	Элементы.СтатусСобытия.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыСобытий.Ссылка КАК Статус
		|ИЗ
		|	Справочник.СтатусыСобытий КАК СтатусыСобытий
		|ГДЕ
		|	СтатусыСобытий.ТипыСобытий.ВидСобытия = &ВидСобытия
		|	И СтатусыСобытий.ТипыСобытий.ВыборМенеджера = &ВыборМенеджера";
	
	Запрос.УстановитьПараметр("ВидСобытия", Объект.ВидСобытия);
	Запрос.УстановитьПараметр("ВыборМенеджера", ?(ЗначениеЗаполнено(Объект.Менеджер), Истина, Ложь));
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.СтатусСобытия.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Статус);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоманднуюПанельАтрибутыСобытия()
	// ПодменюСостояниеСобытия
	ИмяТекущегоСостояния = "СостоянияСобытий" + Перечисления.СостоянияСобытий.Запланировано;
	Для нИндекс = 0 По Перечисления.СостоянияСобытий.Количество() - 1 Цикл
		Если Перечисления.СостоянияСобытий[нИндекс] = Перечисления.СостоянияСобытий.Утверждено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОперации = "СостоянияСобытий"+Перечисления.СостоянияСобытий[нИндекс];
		КомандаОперации = Команды.Добавить(ИмяОперации);
		КомандаОперации.Заголовок                 = Перечисления.СостоянияСобытий[нИндекс];
		КомандаОперации.Действие                  = "Подключаемый_ПриИзмененииСостоянияСобытий";
		КомандаОперации.ИзменяетСохраняемыеДанные = Истина;
		КнопкаОперации = Элементы.Добавить(ИмяОперации, Тип("КнопкаФормы"), Элементы.ПодменюСостояниеСобытия);
		КнопкаОперации.Картинка = ПолучитьКартинкуДляОбъектов(
			ЭтотОбъект,
			"СостоянияСобытий",
			Перечисления.СостоянияСобытий[нИндекс]);
		КнопкаОперации.ИмяКоманды = ИмяОперации;
		КнопкаОперации.Пометка    = Ложь;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Состояние) Тогда
		ИмяТекущегоСостояния = "СостоянияСобытий"+Объект.Состояние;
	Иначе
		Объект.Состояние = Перечисления.СостоянияСобытий.Запланировано;
	КонецЕсли;
	
	Элементы.ПодменюСостояниеСобытия.Заголовок = СтрЗаменить(ИмяТекущегоСостояния,"СостоянияСобытий","");
	Элементы.ПодменюСостояниеСобытия.Картинка  = ПолучитьКартинкуДляОбъектов(
		ЭтотОбъект,
		"СостоянияСобытий",
		Объект.Состояние);
	
	Для Каждого КнопкаОперации Из Элементы.ПодменюСостояниеСобытия.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя=ИмяТекущегоСостояния);
	КонецЦикла;
	// ПодменюВидСобытия
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидыСобытий.Ссылка
	               |ИЗ
	               |	Справочник.ВидыСобытий КАК ВидыСобытий
	               |ГДЕ
	               |	НЕ ВидыСобытий.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидыСобытий.Наименование";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Индекс = 0;
	
	Пока РезультатЗапроса.Следующий() Цикл
		ИмяОперации = "ВидСобытия" + Индекс;
		КомандаОперации = Команды.Добавить(ИмяОперации);
		КомандаОперации.Заголовок                 = РезультатЗапроса.Ссылка;
		КомандаОперации.Действие                  = "Подключаемый_ПриИзмененииВидСобытия";
		КомандаОперации.ИзменяетСохраняемыеДанные = Истина;
		КнопкаОперации = Элементы.Добавить(ИмяОперации, Тип("КнопкаФормы"), Элементы.ПодменюВидСобытия);
		КнопкаОперации.ИмяКоманды = ИмяОперации;
		КнопкаОперации.Пометка    = Ложь;
		СоответствиеВидыСобытия.Добавить(РезультатЗапроса.Ссылка,ИмяОперации);
		Индекс = Индекс+1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
		ИмяТекущегоВидаСобытия = СоответствиеВидыСобытия.НайтиПоЗначению(Объект.ВидСобытия).Представление;
	Иначе
		ИмяТекущегоВидаСобытия = "";
	КонецЕсли;
	
	Элементы.ПодменюВидСобытия.Заголовок = ?(ЗначениеЗаполнено(Объект.ВидСобытия),
		Строка(Объект.ВидСобытия),
		НСтр("ru = 'Укажите вид события'"));
		
	Для Каждого КнопкаОперации Из Элементы.ПодменюВидСобытия.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя=ИмяТекущегоВидаСобытия);
	КонецЦикла;
		
КонецПроцедуры 

&НаСервере
Процедура НайтиСвязанныйДокумент(НайденныйДокумент = Неопределено, ОбновитьЗначения = Истина)
	
	СвязанныеДокументы = Документы.Событие.ПолучитьСвязанныйДокумент(Объект);
	СвязанныйДокумент = ?(ЗначениеЗаполнено(СвязанныеДокументы.ДокументОснование), СвязанныеДокументы.ДокументОснование, СвязанныеДокументы.ДокументРезультат);
	
	Если НЕ ЗначениеЗаполнено(СвязанныйДокумент)
		И НЕ НайденныйДокумент = Неопределено Тогда
		СвязанныйДокумент = НайденныйДокумент;
	КонецЕсли;
	
	ДокументыВзаимодействия = Новый Массив;
	ДокументыВзаимодействия.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
	ДокументыВзаимодействия.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	ДокументыВзаимодействия.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	
	ОснованиеСобытияВзаимодействие = (ДокументыВзаимодействия.Найти(ТипЗнч(СвязанныйДокумент)) <> Неопределено);
	
	Если ОснованиеСобытияВзаимодействие Тогда
		Если НЕ НайденныйДокумент = Неопределено Тогда
			СвязанныйДокумент = НайденныйДокумент;
		ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРезультат) Тогда
			СвязанныйДокумент = Объект.ДокументРезультат;
		Иначе
			СвязанныйДокумент = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
				
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ТаблицаСобытий.КомпоновщикНастроек.Настройки.Отбор,
				"Ссылка",
				Объект.Ссылка,
				ВидСравненияКомпоновкиДанных.НеРавно,
				,
				Истина);
				
		КонецЕсли;
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ТаблицаСобытий.КомпоновщикНастроек.Настройки.Отбор.Элементы,
			"ПоПолюПоиска",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаИЛИ,
			"ДокументОснование",
			СвязанныйДокумент,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
			
		// +АА6
		Если ЕстьРеквизит(СвязанныйДокумент, "ДокументОснование") Тогда
			УстановитьПривилегированныйРежим(Истина);
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйДокумент, "ДокументОснование");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		// -АА6
			
		Если ЗначениеЗаполнено(ОснованиеДокумента)
			И НЕ ОснованиеДокумента = Объект.Ссылка Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаИЛИ,
				"СобытиеОснование",
				ОснованиеДокумента,
				ВидСравненияКомпоновкиДанных.Равно,
				"СсылкаОснование",
				Истина);
		КонецЕсли;
		
		Если ОбновитьЗначения Тогда
			
			// до оповещения формы происходит изменение реквизита "ДокументРезультат"
			Прочитать();
			
			Если НЕ НайденныйДокумент = Неопределено Тогда
				Если (ОснованиеДокумента = Объект.Ссылка И НайденныйДокумент = СвязанныйДокумент) ИЛИ 
					(ОснованиеСобытияВзаимодействие И НайденныйДокумент = СвязанныйДокумент) Тогда
					
					Объект.ДокументРезультат = СвязанныйДокумент;
					
				Иначе
					Объект.ДокументРезультат = Неопределено;
				КонецЕсли;
				Модифицированность = Истина;
			Иначе
				
				Если Объект.ДокументОснование <> СвязанныеДокументы.ДокументОснование Тогда
					Объект.ДокументОснование = СвязанныеДокументы.ДокументОснование;
					Модифицированность = Истина;
				КонецЕсли;
				
				Если Объект.ДокументРезультат <> СвязанныеДокументы.ДокументРезультат Тогда 
					Объект.ДокументРезультат = СвязанныеДокументы.ДокументРезультат;
					Модифицированность = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтраницыСвязанныеСобытия.Видимость = ЗначениеЗаполнено(СвязанныйДокумент);
	
	ПолучитьТестДрайвРабочегоЛиста();
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьТестДрайвРабочегоЛиста()
	
	Если НЕ ЗначениеЗаполнено(СвязанныйДокумент)
		ИЛИ ТипЗнч(СвязанныйДокумент) <> Тип("ДокументСсылка.РабочийЛист") Тогда
		ТестДрайв = Документы.ТестДрайв.ПустаяСсылка();
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТестДрайв.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТестДрайв КАК ТестДрайв
		|ГДЕ
		|	ТестДрайв.ДокументОснование = &ДокументОснование
		|	И НЕ ТестДрайв.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДокументОснование", СвязанныйДокумент);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТестДрайв = Выборка.Ссылка;
		Иначе
			ТестДрайв = Документы.ТестДрайв.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТестДрайв) Тогда
		Элементы.ТестДрайв.Заголовок                 = Строка(ТестДрайв);
		Элементы.СледующееСобытиеТестДрайв.Заголовок = Строка(ТестДрайв);
	Иначе
		Элементы.ТестДрайв.Заголовок                 = НСтр("ru = '<Создать тест-драйв>'");
		Элементы.СледующееСобытиеТестДрайв.Заголовок = НСтр("ru = '<Создать тест-драйв>'");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКартинкуДляОбъектов(Форма, ТипКартинки, Объект1)
	
	Если ТипКартинки = "СостоянияСобытий" Тогда
		Если Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Выполняется") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеВРаботе;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеЗавершено;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Запланировано") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеЗапланировано;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Утверждено") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеУтверждено;
		ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено") Тогда
			ПолученнаяКартинка = БиблиотекаКартинок.СобытияСостояниеОтменено;
		Иначе
			ПолученнаяКартинка = Новый Картинка;
		КонецЕсли;
		
		Возврат ПолученнаяКартинка;
	Иначе
		Возврат Новый Картинка();
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВремени(
	Список,
	ВремяНачало = Неопределено,
	ДобавлятьПредставлениеДлительности = Ложь)
	
	Список.Очистить();
	ПустаяДата = Дата("00010101");
	бДобавлятьПредставлениеДлительности = (ДобавлятьПредставлениеДлительности И ТипЗнч(ВремяНачало) = Тип("Дата"));
	
	Если бДобавлятьПредставлениеДлительности Тогда
		// Если ВремяНачало содержит так же и дату
		ЗначениеВремяНачало = ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	Иначе
		ЗначениеВремяНачало = Неопределено;
	КонецЕсли;
	
	ТридцатьМинут = 30;
	СекундВМинуте = 60;
	
	ТекВремя = ?(ЗначениеВремяНачало = Неопределено, ПустаяДата, ЗначениеВремяНачало + ТридцатьМинут * СекундВМинуте);
	
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		
		Если бДобавлятьПредставлениеДлительности Тогда
			ПредставлениеПериодаВремени = ПолучитьПредставлениеПериодаВремени(ЗначениеВремяНачало, ТекВремя);
			Если ЗначениеЗаполнено(ПредставлениеПериодаВремени) Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (" + ПредставлениеПериодаВремени + ")";
			КонецЕсли;
		КонецЕсли;
		
		Список.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + ТридцатьМинут * СекундВМинуте;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьПредставлениеПериодаВремени(ВремяНачало, ВремяОкончание)
	ПустаяДата = Дата("00010101");
	// На случай если время содержит так же и дату
	СекундВМинуте = 60;
	ЗначениеВремяНачало		= ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	ЗначениеВремяОкончание	= ПустаяДата + (ВремяОкончание - НачалоДня(ВремяОкончание));
	ВремяНачалоВМинутах		= Цел((ЗначениеВремяНачало - НачалоДня(ЗначениеВремяНачало)) / СекундВМинуте);
	ВремяОкончанияВМинутах	= Цел((ЗначениеВремяОкончание - НачалоДня(ЗначениеВремяОкончание)) / СекундВМинуте);
	РазницаВМинутах = ВремяОкончанияВМинутах - ВремяНачалоВМинутах;
	Если РазницаВМинутах <= 0 Тогда
		Возврат "";
	КонецЕсли;
	// 1 минута
	// 2 - 4 минуты
	// 5 и далее - минут
	// 1 час
	// 2 - 4 часа
	// 5 часов
	// 5,5 часов
	ПредставлениеЧетыре = 4;
	Если РазницаВМинутах < СекундВМинуте Тогда
		ВремяСтрокой = Формат(РазницаВМинутах, "ЧДЦ=0; ЧН=0; ЧГ=");
		Если РазницаВМинутах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'минута'");
		ИначеЕсли РазницаВМинутах <= ПредставлениеЧетыре Тогда
			ПредставлениеВремя = НСтр("ru = 'минуты'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'минут'");
		КонецЕсли;
	Иначе
		РазницаВЧасах = РазницаВМинутах / СекундВМинуте;
		Если РазницаВЧасах = Цел(РазницаВМинутах / СекундВМинуте) Тогда
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=0; ЧРД=,; ЧН=0; ЧГ=");
		Иначе
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=1; ЧРД=,; ЧН=0; ЧГ=");
		КонецЕсли;
		Если РазницаВЧасах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'час'");
		ИначеЕсли РазницаВЧасах <= ПредставлениеЧетыре Тогда
			ПредставлениеВремя = НСтр("ru = 'часа'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВремяСтрокой + " " + ПредставлениеВремя;
	
КонецФункции 

&НаСервере
Функция ПроверитьКорректностьСледующегоСобытия()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СвязанныйДокумент) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите документ.'"), Объект.ДокументОснование,,, Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СледующееСобытие.Менеджер) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите ответственного.'"), СледующееСобытие.Ссылка, "Ответственный",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СледующееСобытие.Цель) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите цель события.'"), СледующееСобытие.Ссылка, "Цель",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СледующееСобытие.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите дату начала события.'"), СледующееСобытие.Ссылка, "ДатаНачала",, Отказ);
	КонецЕсли;
	
	Если СледующееСобытие.ВидСобытия = Справочники.ВидыСобытий.ОтказОтСделки
		И НЕ ЗначениеЗаполнено(СледующееСобытие.ПричинаОтказа) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Укажите причину отказа от сделки.'"), СледующееСобытие.Ссылка, "ПричинаОтказа",, Отказ);
	КонецЕсли;
	
	Возврат (НЕ Отказ);
	
КонецФункции 

&НаСервере
Процедура СоздатьСледующееСобытие()
	
	Если НЕ ПроверитьКорректностьСледующегоСобытия() Тогда
		Возврат;
	КонецЕсли;
	// Создадим документ следующего события.
	НовоеСобытие = Документы.Событие.СоздатьДокумент();
	НовоеСобытие.Заполнить(СвязанныйДокумент);
	НовоеСобытие.Дата = ТекущаяДатаСеанса();
	ЗаполнитьЗначенияСвойств(
		НовоеСобытие,
		СледующееСобытие,
		"ВидСобытия,Менеджер,ДатаНачала,ПричинаОтказа,ОписаниеПричиныОтказа,Цель");
	НовоеСобытие.Состояние = Перечисления.СостоянияСобытий.Запланировано;
	Документы.Событие.АвторПриИзменении(НовоеСобытие);
	Документы.Событие.ДатаНачалаПриИзменении(НовоеСобытие);
	
	Если НЕ НовоеСобытие.ВидСобытия = Справочники.ВидыСобытий.ОтказОтСделки Тогда
		НовоеСобытие.ПричинаОтказа = Неопределено;
		НовоеСобытие.ОписаниеПричиныОтказа = "";
	КонецЕсли;
	
	НовоеСобытие.Тема = Объект.Тема;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		НовоеСобытие.Контрагент = Объект.Контрагент;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОбращениеККлиенту) Тогда
		НовоеСобытие.ОбращениеККлиенту = Объект.ОбращениеККлиенту;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПредставлениеТелефона) Тогда
		НовоеСобытие.ПредставлениеТелефона = Объект.ПредставлениеТелефона;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АдресЭлектроннойПочты) Тогда
		НовоеСобытие.АдресЭлектроннойПочты = Объект.АдресЭлектроннойПочты;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Адрес) Тогда
		НовоеСобытие.Адрес = Объект.Адрес;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИсточникИнформации) Тогда
		НовоеСобытие.ИсточникИнформации = Объект.ИсточникИнформации;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.МаркетинговаяПрограмма) Тогда
		НовоеСобытие.МаркетинговаяПрограмма = Объект.МаркетинговаяПрограмма;
	КонецЕсли;
	
	ЗаписаноСледующееСобытие = Истина;
	Попытка
		НовоеСобытие.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписаноСледующееСобытие = Ложь;
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не удалось записать следующее сообщение по причине: %1'"),
				ОписаниеОшибки()
			)
		);
		ЗаписаноСледующееСобытие = Ложь;
	КонецПопытки;
	
	Если ЗаписаноСледующееСобытие Тогда
		ДокументОбъект = Документы.Событие.СоздатьДокумент();
		ЗначениеВРеквизитФормы(ДокументОбъект, "СледующееСобытие");
		Элементы.СтраницыСвязанныеСобытия.ТекущаяСтраница = Элементы.ЗапланированныеСобытия;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьДокумент(ЗакрытьПослеЗаписи = Истина)
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ПараметрыЗаписи.Вставить("РежимЗаписи",        РежимЗаписиДокумента.Проведение);
	
	Объект.Результат = Результат;
	
	Попытка
		Записать(ПараметрыЗаписи);
	Исключение
		ОбщегоНазначенияАвтосалонВызовСервера.ОшибкаЖурналаРегистрации(
			СобытиеОшибкиДокумента(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Объект.Ссылка);
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось провести: ""Событие"".'"));
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеОшибкиДокумента()
	
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		МодульОбщегоНазначения = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
	#Иначе
		МодульОбщегоНазначения = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияКлиент");
	#КонецЕсли
	
	Возврат НСтр("ru = 'Событие. Ошибка записи документа'", МодульОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции 

&НаСервере
Процедура СформироватьСписокВыбораВремени()
	
	СписокВыбораВремяНачало           = Элементы.ВремяНачало.СписокВыбора;
	СписокВыбораВремяОкончания        = Элементы.ВремяОкончания.СписокВыбора;
	СписокВыбораВремяНачалоСледующего = Элементы.ВремяНачалоСледующего.СписокВыбора;
	
	НачалоЧас = 28800; // 08:00
	КонецЧас  = 79200; // 22:00
	ШагЧаса   = 1800;
	
	Пока НачалоЧас <= КонецЧас Цикл
		ЗначениеВремени = Дата(1,1,1) + НачалоЧас;
		ПредставлениеВремени = Формат(Дата(1,1,1) + НачалоЧас, "ДФ = ЧЧ.мм");
		СписокВыбораВремяНачало.Добавить(ЗначениеВремени, ПредставлениеВремени);
		СписокВыбораВремяОкончания.Добавить(ЗначениеВремени, ПредставлениеВремени);
		СписокВыбораВремяНачалоСледующего.Добавить(ЗначениеВремени, ПредставлениеВремени);
		НачалоЧас = НачалоЧас + ШагЧаса;
	КонецЦикла;
	
КонецПроцедуры // СформироватьСписокВыбораВремени()

&НаКлиенте
Процедура Подключаемый_ЗавершениеСобытия(РезультатЗавершения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатЗавершения = КодВозвратаДиалога.Да Тогда
		ЗавершитьЗавершениеСобытия();
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ЗавершениеСобытия()

&НаКлиенте
Процедура ЗавершитьЗавершениеСобытия()
	
	ТекущееСостояние = Объект.Состояние;
	Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено");
	Модифицированность = Истина;
	ЗаписатьДокумент();
	
	Если Модифицированность Тогда
		Объект.Состояние = ТекущееСостояние;
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьЗавершениеСобытия()

&НаСервере
Функция ПроверитьНаличиеСледующегоСобытия()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Конец цепочки событий
	Если Объект.ВидСобытия = Справочники.ВидыСобытий.ЗавершениеСделки
		ИЛИ Объект.ВидСобытия = Справочники.ВидыСобытий.ОтказОтСделки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СвязанныйДокумент <> Объект.ДокументОснование
		И НЕ ЗначениеЗаполнено(Объект.ДокументРезультат) Тогда
		Объект.ДокументРезультат = СвязанныйДокумент;
	КонецЕсли;
	
	Возврат Документы.Событие.ПроверитьНаличиеСледующегоСобытия(Объект);
	
КонецФункции // ПроверитьНаличиеСледующегоСобытия()

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСостоянияСобытий(Команда) Экспорт
	
	ИмяКоманды = Команда.Имя;
	
	Объект.Состояние = ПредопределенноеЗначение(
		"Перечисление.СостоянияСобытий."+СтрЗаменить(ИмяКоманды,"СостоянияСобытий","")+"");
	
	Для Каждого КнопкаОперации Из Элементы.ПодменюСостояниеСобытия.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя = ИмяКоманды);
	КонецЦикла;
	
	Элементы.ПодменюСостояниеСобытия.Заголовок = СтрЗаменить(ИмяКоманды,"СостоянияСобытий","");
	Элементы.ПодменюСостояниеСобытия.Картинка  = ПолучитьКартинкуДляОбъектов(
		ЭтотОбъект, "СостоянияСобытий", Объект.Состояние);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВидСобытия(Команда) Экспорт
	
	ИмяКоманды = Команда.Имя;
	
	СоответствующийВидСобытия = СоответствиеВидыСобытия.НайтиПоИдентификатору(
		Число(СтрЗаменить(ИмяКоманды,"ВидСобытия","")));
	Объект.ВидСобытия = СоответствующийВидСобытия.Значение;
	
	Для Каждого КнопкаОперации Из Элементы.ПодменюВидСобытия.ПодчиненныеЭлементы Цикл
		Если Тип(КнопкаОперации) = Тип("ГруппаФормы") Тогда
			Элементы.ВидСобытия0.Пометка = (ИмяКоманды = "ВидСобытия0");
		Иначе
		КнопкаОперации.Пометка = (КнопкаОперации.Имя = ИмяКоманды); 
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПодменюВидСобытия.Заголовок = ?(
		ЗначениеЗаполнено(Объект.ВидСобытия),
		СоответствующийВидСобытия.Значение,
		"<Общий вид события>");
	
	// Сформируем список статусов события
	ОбработкаСтатусаСобытия();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры	

&НаСервере
Функция ИскатьСвязанныйДокументНаСервере(Параметр)
	
	Если Не ЕстьРеквизит(Параметр, "ДокументОснование") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьДокументыОснованияНаСервере()
	
	ДокументыВводНаОсновании = Метаданные.Документы.Событие.ВводитсяНаОсновании;
	
	Массив = Новый Массив;
	
	Для Каждого ДокументВводНаОсновании Из ДокументыВводНаОсновании Цикл
		Массив.Добавить(Тип("ДокументСсылка." + ДокументВводНаОсновании.Имя));
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.ГруппаОтказСледующее.Видимость = 
		(СледующееСобытие.ВидСобытия = ПредопределенноеЗначение("Справочник.ВидыСобытий.ОтказОтСделки"));
	ОснованиеРабочийЛист = (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РабочийЛист")
		ИЛИ ТипЗнч(Объект.ДокументРезультат) = Тип("ДокументСсылка.РабочийЛист"));
	Элементы.ТестДрайв.Видимость = (Объект.ВидСобытия = Справочники.ВидыСобытий.ТестДрайв И ОснованиеРабочийЛист);
	Элементы.СледующееСобытиеТестДрайв.Видимость = (
		СледующееСобытие.ВидСобытия = Справочники.ВидыСобытий.ТестДрайв
		И ОснованиеРабочийЛист);
	
	НеОтображатьЗавершение = Объект.Состояние = Перечисления.СостоянияСобытий.Завершено;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗавершитьСобытие",
		"Доступность", НЕ НеОтображатьЗавершение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьСобытиеИЗавершитьТекущее",
		"Видимость", НЕ НеОтображатьЗавершение);
   
КонецПроцедуры   

&НаСервере
Процедура РазблокироватьСледующееСобытие() 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаНачалаСледующего",
		"ТолькоПросмотр", Ложь); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВремяНачалоСледующего",
		"ТолькоПросмотр", Ложь); 
	
    ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СледующееСобытиеМенеджер",
		"ТолькоПросмотр", Ложь); 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	// Вызываем общий обработчик события
	Если
		НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
			ЭтотОбъект,
			РезультатОповещения,
			ДополнительныеПараметры)
	Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	НайтиСвязанныйДокумент();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	// Вызываем общий обработчик события в контексте клиента
	Если
		НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
			ЭтотОбъект,
			РезультатОповещения,
			ДополнительныеПараметры)
	Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", Неопределено) <> Неопределено Тогда
		Основание = Новый Структура(
			"Событие,Имя,Контрагент",
			ДополнительныеПараметры.Событие, "Событие", РезультатОповещения);
		ОткрытьФорму("Документ."+ДополнительныеПараметры.ИмяКоманды+".ФормаОбъекта", Новый Структура("Основание", Основание));
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

&НаКлиенте
Процедура Подключаемый_ОбработкаЗаписиСобытия(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			Если Записать() Тогда
				ПоискДокументаСобытия(ДополнительныеПараметры);
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать: ""Событие"".'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаЗаписиСобытия()

&НаКлиенте
Процедура ПоискДокументаСобытия(ИмяЭлемента = Неопределено)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Клиент",
		?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Объект.ОбращениеККлиенту));
	ПараметрыФормы.Вставить("НомерТелефона", Объект.ПредставлениеТелефона);
	ПараметрыФормы.Вставить("АдресЭлектроннойПочты", Объект.АдресЭлектроннойПочты);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ДобавлятьНовогоКонтрагента", Истина);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаВыбораДокумента",
		ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму(
		"Обработка.ПоискКлиентовИДокументов.Форма",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПоискДокументаСобытия()

&НаСервере
Процедура ОбработкаВыбораДокументаНаСервере(РезультатПодбора, ИмяЭлемента)
	
	ВыбранныйДокумент = ПолучитьЗначениеПараметраСтруктуры(РезультатПодбора, "Документ", Неопределено);
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		
		Модифицированность = Истина;
		ОбновлятьДокумент = Истина;
		Если ИмяЭлемента = "ПодборПричиныСобытия" Тогда
			Объект.ДокументОснование = ВыбранныйДокумент;
			Возврат;
		ИначеЕсли ИмяЭлемента = "ДокументРезультат" Тогда
			Объект.ДокументРезультат = ВыбранныйДокумент;
			ОбновлятьДокумент = Ложь;
		КонецЕсли;
		
		НайтиСвязанныйДокумент(ВыбранныйДокумент, ОбновлятьДокумент);
	КонецЕсли;
	
	Контрагент = ПолучитьЗначениеПараметраСтруктуры(РезультатПодбора, "Клиент", Неопределено);
	
	Если (НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ НЕ ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"))
		И ЗначениеЗаполнено(ВыбранныйДокумент)
		И ЕстьРеквизит(ВыбранныйДокумент, "Контрагент") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Контрагент");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(Контрагент)
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.Контрагент = Контрагент;
		КонтрагентПриИзмененииНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораДокументаНаСервере()

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораДокумента(РезультатПодбора, ДополнительныеПараметры = Неопределено) Экспорт
		Если ТипЗнч(РезультатПодбора) = Тип("Структура") Тогда
		ОбработкаВыбораДокументаНаСервере(РезультатПодбора, ДополнительныеПараметры.ИмяЭлемента);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаВыбораДокумента()

&НаКлиенте
Процедура Подключаемый_ОбновитьТестДрайв(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьТестДрайвРабочегоЛиста();
	
КонецПроцедуры // Подключаемый_ОбновитьТестДрайв()


#КонецОбласти

#КонецОбласти