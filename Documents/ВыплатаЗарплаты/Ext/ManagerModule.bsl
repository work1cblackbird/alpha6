// Модуль менеджера документа "Выплата зарплаты"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(КассаКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Сотрудники.Итог("Сумма"));
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("КассаКомпании");
	ОбязательныеРеквизиты.Добавить("СтатьяДДС");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Сотрудники");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Сотрудники.Контрагент");
	ОбязательныеРеквизиты.Добавить("Сотрудники.ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("Сотрудники.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;

КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("КассаКомпании",         Ложь);
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("Сотрудники", КонтролируемыеРеквизитыТЧ);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КассаКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КассаКомпанииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

// Обработчик события возникающего при изменении данных реквизита "Контрагент" в таблице "Сотрудники".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
		Строка.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Иначе
		ПараметрыДействия.Вставить("ВидДоговора",          Перечисления.ВидыДоговоров.Зарплата);
		ПараметрыДействия.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		Строка.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Строка.Контрагент, Перечисления.ВидыДоговоров.Зарплата, Объект, ПараметрыДействия);
	КонецЕсли;
	СотрудникиДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия);	
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов" в таблице "Сотрудники".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Строка.ДоговорВзаиморасчетов.Пустая() Тогда
		Если Строка.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
			Строка.СпособЗачетаАвансов = Неопределено;
		Иначе
			Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СотрудникиДоговорВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Сотрудники");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВыплатаЗарплаты");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Сотрудники");
	КонецЕсли;
	
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании.'");

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СотрудникиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по текущей задолженности сотрудникам'");
	Команда.Идентификатор	= "СотрудникиЗаполнитьПоТекущейЗадолженности";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Сотрудники";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеКомпании", ВыборПодразделения);
		
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("СотрудникиЗаполнитьПоТекущейЗадолженности.Видимость",    Истина);
	ПараметрыКоманд.Вставить("СотрудникиЗаполнитьПоТекущейЗадолженности.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по  текущей задолженности
//
Функция СотрудникиЗаполнитьПоТекущейЗадолженности(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании Тогда
		Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании;
		ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Заполним
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	РасчетыСКонтрагентамиОстатки.СуммаБазОстаток КАК СуммаБазОстаток,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка) КАК СпособЗачетаАвансов,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов КАК СпособВеденияВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			Контрагент В
	|					(ВЫБРАТЬ
	|						Контрагенты.Ссылка КАК Контрагент
	|					ИЗ
	|						Справочник.Контрагенты КАК Контрагенты
	|					ГДЕ
	|						Контрагенты.Сотрудник.ПодразделениеКомпании = &Подразделение)
	|				И ДоговорВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.Зарплата)) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыКомпанииОстатки.Контрагент,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток,
	|	ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток,
	|	ВзаиморасчетыКомпанииОстатки.СуммаБазОстаток,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.СпособЗачетаАвансов,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
	|			&МоментВремени,
	|			Контрагент В
	|					(ВЫБРАТЬ
	|						Контрагенты.Ссылка КАК Контрагент
	|					ИЗ
	|						Справочник.Контрагенты КАК Контрагенты
	|					ГДЕ
	|						Контрагенты.Сотрудник.ПодразделениеКомпании = &Подразделение)
	|				И ДоговорВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.Зарплата)) КАК ВзаиморасчетыКомпанииОстатки
	|ГДЕ
	|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток < 0";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МоментВремени = ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата, Ссылка));
	МоментВремени = ?(Объект.Проведен, Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая), МоментВремени);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);	
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
	РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
	
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаБаз=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Контрагент				= Выборка.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов	= Выборка.ДоговорВзаиморасчетов;
		Если Объект.ВалютаДокумента=НоваяСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
			НоваяСтрока.ДолгПоДоговору = -Выборка.СуммаОстаток;
		ИначеЕсли Объект.ВалютаДокумента=ВалютаБаз Тогда
			НоваяСтрока.ДолгПоДоговору = -Выборка.СуммаБазОстаток;
		ИначеЕсли Объект.ВалютаДокумента=ВалютаУпр Тогда
			НоваяСтрока.ДолгПоДоговору = -Выборка.СуммаУпрОстаток;
		Иначе
			НоваяСтрока.ДолгПоДоговору = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-Выборка.СуммаОстаток, НоваяСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
		КонецЕсли;
		Если Выборка.СпособВеденияВзаиморасчетов <> Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
			НоваяСтрока.СпособЗачетаАвансов = Выборка.СпособЗачетаАвансов;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // СотрудникиЗаполнитьПоТекущейЗадолженности()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВыплатаЗарплаты",
		"ПФ_MXL_Выплата",
		НСтр("ru = 'Выплата зарплаты'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВыплатаЗарплаты",
		"ПФ_MXL_Т53",
		НСтр("ru = 'Т53 (Платежная ведомость)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Выплата") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Выплата",
															НСтр("ru = 'Выплата зарплаты'"),
															ПечатьВыплата(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т53") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Т53",
															НСтр("ru = 'Т53 (Платежная ведомость)'"),
															ПечатьТ53(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;													
КонецПроцедуры // Печать()

// Формирует печатную форму "ВыплатаЗарплаты"
//
Функция ПечатьВыплата(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВыплатаЗарплаты_ВыплатаЗарплаты";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыплатаЗарплаты.ПФ_MXL_Выплата");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Итого");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьЗаголовок.Параметры.Валюта = Документ.ВалютаДокумента;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизация =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Сотрудники;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.Сумма = Формат(СтрокаТЧ.Сумма, ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Сотрудники.Индекс(СтрокаТЧ) = Документ.Сотрудники.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("Сумма");
		ОбластьПодвал.Параметры.Сумма = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,
			Документ.ВалютаДокумента);
	
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьВыплатаЗарплаты()

// Формирует печатную форму "Т53"
//
Функция ПечатьТ53(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВыплатаЗарплаты_Т53";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыплатаЗарплаты.ПФ_MXL_Т53");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка		   = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОбластьЗаголовок.Параметры.Организация, Документ.Дата);
		ОбластьЗаголовок.Параметры.ПодразделениеКомпанииПредставление =
			УправлениеПечатьюПлатформа.
			ПолучитьНаименованиеСправочника(ОбластьЗаголовок.Параметры.ПодразделениеКомпании, Документ.Дата);
		
		Если ЗначениеЗаполнено(Документ.ДокументОснование)
			И (ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.НачислениеЗарплаты")) Тогда
			
			ОбластьЗаголовок.Параметры.ДатаНачала = Документ.ДокументОснование.ДатаНачала;
			ОбластьЗаголовок.Параметры.ДатаКонца  = Документ.ДокументОснование.ДатаКонца;
			
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель"));
		ОбластьЗаголовок.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		
		ОбластьЗаголовок.Параметры.ОрганизацияПоОКПО = Документ.Организация.КодПоОКПО;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.КоррСчет = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, Новый Структура("КоррСчет", ""), ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			Документ.СуммаДокумента, Документ.ВалютаДокумента);
		ОбластьЗаголовок.Параметры.СуммаДокРублей = Цел(Документ.СуммаДокумента);
		ОбластьЗаголовок.Параметры.СуммаДокКопеек = (Документ.СуммаДокумента - Цел(Документ.СуммаДокумента)) * 100;
		ОбластьЗаголовок.Параметры.Номер          = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьЗаголовок.Параметры.Валюта         = Документ.ВалютаДокумента;
		СтрокаПараметров = СтрЗаменить(Документ.ВалютаДокумента.ПараметрыПрописи, ",", Символы.ПС);
		Коп = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7));
		ОбластьЗаголовок.Параметры.Коп = Коп;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьШапка.Параметры.Валюта = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Таблица
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВыплатаЗарплатыСотрудники.НомерСтроки КАК НомерСтроки,
		|	ВыплатаЗарплатыСотрудники.Контрагент.Код КАК ТабельныйНомер,
		|	ВЫБОР
		|		КОГДА ВыплатаЗарплатыСотрудники.Контрагент.Сотрудник = &СотрудникПустаяСсылка
		|			ТОГДА ВыплатаЗарплатыСотрудники.Контрагент
		|		ИНАЧЕ ВыплатаЗарплатыСотрудники.Контрагент.Сотрудник
		|	КОНЕЦ КАК Физлицо,
		|	ЕСТЬNULL(ВыплатаЗарплатыСотрудники.Контрагент.Сотрудник.Наименование, ВыплатаЗарплатыСотрудники.Контрагент.Наименование) КАК ФизлицоПредставление,
		|	ВыплатаЗарплатыСотрудники.Сумма КАК Сумма
		|ИЗ
		|	Документ.ВыплатаЗарплаты.Сотрудники КАК ВыплатаЗарплатыСотрудники
		|ГДЕ
		|	ВыплатаЗарплатыСотрудники.Ссылка = &ДокументСсылка");
		Запрос.УстановитьПараметр("СотрудникПустаяСсылка", Справочники.Сотрудники.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
		РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
		
		НомерСтраницы = 1;
		НомерСтраницыПред = НомерСтраницы;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента, Сумма", Документ.ВалютаДокумента, 0);
		
		Если НЕ РезультатЗапросаПоСотрудникам.Пустой() Тогда
			Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
			ВсегоСтрокДокумента = Выборка.Количество();
			НомерСтроки = 1;
			Пока Выборка.Следующий() Цикл
				ОбластьСтрока.Параметры.Заполнить(Выборка);
				ОбластьСтрока.Параметры.Сумма = Формат(Выборка.Сумма, ФорматВыводаСуммы);
				
				// доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если НомерСтроки = Выборка.Количество() Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
				КонецЕсли;
				
				// выводим строку, делая проверку попадания на лист
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
					мсвДопОбластиПодвала);
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента, Сумма", Документ.ВалютаДокумента, 0);
					НомерСтраницыПред = НомерСтраницы;
				КонецЕсли;
				
				// добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(Выборка, СтруктураИтоговПоСтранице);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатьюПлатформа.
		ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		
		ОбластьПодвал.Параметры.КоличествоЛистов = НомерСтраницы;
		ОбластьЗаголовок.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		ОбластьЗаголовок.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Кассир"));
		ОбластьПодвал.Параметры.Валюта = Документ.ВалютаДокумента;
		ОбластьПодвал.Параметры.Коп = Коп;
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьТ53()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВыплатаЗарплаты);

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыплатаЗарплаты.Организация КАК Организация, 
	|	ВыплатаЗарплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ВыплатаЗарплаты.Ссылка КАК Ссылка,
	|	ВыплатаЗарплаты.Дата КАК Дата,
	|	ВыплатаЗарплаты.ХозОперация КАК ХозОперация,
	|	ВЫБОР
	|		КОГДА ВыплатаЗарплаты.ДокументОснование ССЫЛКА Документ.НачислениеЗарплаты
	|			ТОГДА ВыплатаЗарплаты.ДокументОснование
	|		ИНАЧЕ ВыплатаЗарплаты.Ссылка
	|	КОНЕЦ КАК Сделка,
	|	ВыплатаЗарплаты.КассаКомпании КАК КассаКомпании,
	|	ВыплатаЗарплаты.СуммаДокумента КАК Сумма,
	|	ВыплатаЗарплаты.ВалютаДокумента КАК ВалютаДокумента,
	|	ВыплатаЗарплаты.КурсДокумента КАК КурсДокумента,
	|	ВыплатаЗарплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ВыплатаЗарплаты КАК ВыплатаЗарплаты
	|ГДЕ
	|	ВыплатаЗарплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.КассаКомпании КАК КассаКомпании,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыплатаЗарплатыСотрудники.Контрагент КАК Контрагент,
	|	ВыплатаЗарплатыСотрудники.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВыплатаЗарплатыСотрудники.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ВыплатаЗарплатыСотрудники.Сумма КАК Сумма,
	|	ВыплатаЗарплатыСотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВыплатаСотрудникам
	|ИЗ
	|	Документ.ВыплатаЗарплаты.Сотрудники КАК ВыплатаЗарплатыСотрудники
	|ГДЕ
	|	ВыплатаЗарплатыСотрудники.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	// Дополним таблицу для списания суммовых разниц
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Неотрицательный)));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыплатаСотрудникам.Контрагент КАК Контрагент,
	|	ВыплатаСотрудникам.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВыплатаСотрудникам.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ВыплатаСотрудникам.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеКомпанииДоговора,
	|	ВыплатаСотрудникам.Сумма КАК Сумма,
	|	ВыплатаСотрудникам.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВыплатаСотрудникамДляРасчета
	|ИЗ
	|	ВыплатаСотрудникам КАК ВыплатаСотрудникам
	|ГДЕ
	|	ВыплатаСотрудникам.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	ВыплатаСотрудникамДляРасчета.Контрагент КАК Контрагент,
	|	ВыплатаСотрудникамДляРасчета.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЕСТЬNULL(ВыплатаСотрудникамДляРасчета.Сумма, 0) КАК Сумма,
	|	ВыплатаСотрудникамДляРасчета.ВалютаДоговора КАК ВалютаДоговора,
	|	ВыплатаСотрудникамДляРасчета.ПодразделениеКомпанииДоговора КАК ПодразделениеКомпанииДоговора
	|ИЗ
	|	Задолженность КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыплатаСотрудникамДляРасчета КАК ВыплатаСотрудникамДляРасчета
	|		ПО Задолженность.Ссылка = ВыплатаСотрудникамДляРасчета.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеОбОплате.Вставить(Колонка.Имя);
	КонецЦикла;
	
	КурсыВалютВзаиморасчетов = Новый Соответствие;
	СотрудникиКВыплате = РезультатЗапроса.Выбрать();
	ДанныеОбОплатеЗаполнены = Ложь;
	
	Пока СотрудникиКВыплате.Следующий() Цикл
		
		Если СотрудникиКВыплате.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеОбОплате, СотрудникиКВыплате);
		
		// Найдем курс договора
		КурсДоговора = КурсыВалютВзаиморасчетов.Получить(СотрудникиКВыплате.ВалютаДоговора);
		Если КурсДоговора = Неопределено Тогда
			ДанныеОКурсеДоговора = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				СотрудникиКВыплате.ВалютаДоговора,
				СотрудникиКВыплате.Дата);
			КурсДоговора = ДанныеОКурсеДоговора.Курс / ?(ДанныеОКурсеДоговора.Кратность = 0, 1, ДанныеОКурсеДоговора.Кратность);
		КонецЕсли;
		ДанныеОбОплате.Вставить("КурсВалютыВзаиморасчетов", КурсДоговора);
		
		РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,,
			Отказ);
			
		ДанныеОбОплатеЗаполнены = Истина;
		
	КонецЦикла;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	// Дополним таблицу суммовыми разницами 
	Если ДанныеОбОплатеЗаполнены Тогда
		
		РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			СуммовыеРазницы,
			Истина); 
			
	КонецЕсли;
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	
КонецПроцедуры

Процедура СформироватьТаблицуДоходыИРасходы(ДвиженияДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	|	ДанныеДокументаОплаты.КассаКомпании КАК КассаКомпании,
	|	ДанныеДокументаОплаты.КассаКомпании.ПодразделениеКомпании КАК ПодразделениеКассыКомпании
	|ИЗ
	|	Задолженность КАК ДанныеДокументаОплаты";
	
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДоходыИРасходы = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("ДоходыИРасходы");
	
	СуммовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"СуммовыеРазницы",
		Новый ТаблицаЗначений);
	
	РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
		ДанныеЗаполнения,
		СуммовыеРазницы,
		ДоходыИРасходы,
		ДанныеЗаполнения.ПодразделениеКомпании);
	
	РасчетыССотрудниками = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"РасчетыСКонтрагентами",
		Новый ТаблицаЗначений);
	
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ДанныеЗаполнения.Дата);
	Если БалансВедетсяПоПодразделениям И РасчетыССотрудниками.Количество() > 0 Тогда
		ПодразделенияДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			РасчетыССотрудниками.ВыгрузитьКолонку("ДоговорВзаиморасчетов"),
			"ПодразделениеКомпании");
		ВзаиморасчетыСотрудников = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
		ПодразделениеКассаКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
			ДанныеЗаполнения.ПодразделениеКассыКомпании,
			ДанныеЗаполнения.Дата);
		
		Для Каждого СтрокаРасчетов Из РасчетыССотрудниками Цикл
			СтрокаСотрудкника = ВзаиморасчетыСотрудников.Добавить();
			СтрокаСотрудкника.Подразделение = ПодразделенияДоговоров.Получить(СтрокаРасчетов.ДоговорВзаиморасчетов);
			СтрокаСотрудкника.СуммаУпр = СтрокаРасчетов.СуммаУпр;
		КонецЦикла;
		ВзаиморасчетыСотрудников.Свернуть("Подразделение", "СуммаУпр");
		Для Каждого СтрокаВзаиморасчетов Из ВзаиморасчетыСотрудников Цикл
			ПодразделениеВзаиморасчета = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
				СтрокаВзаиморасчетов.Подразделение,
				ДанныеЗаполнения.Дата);
			БалансовыеПодразделенияНеРавны = ПодразделениеКассаКомпании <> ПодразделениеВзаиморасчета;
			Если БалансовыеПодразделенияНеРавны И СтрокаВзаиморасчетов.Сумма <> 0 Тогда
				НоваяЗапись = ДоходыИРасходы.Добавить();
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период = ДанныеЗаполнения.Дата;
				НоваяЗапись.Регистратор = ДанныеЗаполнения.Ссылка;
				НоваяЗапись.ПодразделениеКомпании = СтрокаВзаиморасчетов.Подразделение;
				НоваяЗапись.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				Если СтрокаВзаиморасчетов.СуммаУпр < 0 Тогда
					НоваяЗапись.РасходУпр = -СтрокаВзаиморасчетов.СуммаУпр;
				Иначе
					НоваяЗапись.ДоходУпр  = СтрокаВзаиморасчетов.СуммаУпр;
				КонецЕсли;
				НоваяЗапись.ХозОперация = ДанныеЗаполнения.ХозОперация;
				НоваяЗапись.Активность = Истина;
				
				НоваяЗапись = ДоходыИРасходы.Добавить();
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.Период = ДанныеЗаполнения.Дата;
				НоваяЗапись.Регистратор = ДанныеЗаполнения.Ссылка;
				НоваяЗапись.ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеКассыКомпании;
				НоваяЗапись.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				Если СтрокаВзаиморасчетов.СуммаУпр < 0 Тогда
					НоваяЗапись.РасходУпр = -СтрокаВзаиморасчетов.СуммаУпр;
				Иначе
					НоваяЗапись.ДоходУпр  = СтрокаВзаиморасчетов.СуммаУпр;
				КонецЕсли;
				НоваяЗапись.ХозОперация = ДанныеЗаполнения.ХозОперация;
				НоваяЗапись.Активность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли