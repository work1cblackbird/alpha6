// Модуль документа "Выплата зарплаты"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДДС) Тогда
		СтатьяДДС = Справочники.СтатьиДДС.ВыдачаЗП;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ОбменДанными.Загрузка Тогда
		Документы.ВыплатаЗарплаты.ХозОперацияПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// БАЛАНС: определяем, нужно ли будет вводить корректирующие движения
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	ПодразделениеКассаКомпании    = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(КассаКомпании.ПодразделениеКомпании, Дата);
	
	// расходуем деньги из кассы
	НаборЗаписейДС=Движения.ДенежныеСредстваКомпании;
	НаборЗаписейДС.ДокументОбъект     = ЭтотОбъект;
	НаборЗаписейДС.РежимПроведения    = РежимПроведения;
	НаборЗаписейДС.СтруктурнаяЕдиница = КассаКомпании;
	НаборЗаписейДС.Валюта             = Неопределено;
	НаборЗаписейДС.СтатьяДДС          = СтатьяДДС;
	НаборЗаписейДС.Сумма              = СуммаДокумента;
	Отказ=НЕ НаборЗаписейДС.Расход() ИЛИ Отказ;
	
	// Таблица для накопления суммовых разниц.
	ТаблицаСуммовыхРазниц = Новый ТаблицаЗначений();
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	
	// Таблица для накопления сумм по взаиморасчетам.
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений();
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ВыплатаЗарплатыСотрудники.Контрагент КАК Контрагент,
	                    |	ВыплатаЗарплатыСотрудники.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                    |	ВыплатаЗарплатыСотрудники.Сумма КАК Сумма,
	                    |	ВыплатаЗарплатыСотрудники.СпособЗачетаАвансов КАК СпособЗачетаАвансов
	                    |ИЗ
	                    |	Документ.ВыплатаЗарплаты.Сотрудники КАК ВыплатаЗарплатыСотрудники
	                    |ГДЕ
	                    |	ВыплатаЗарплатыСотрудники.Ссылка = &ДокументСсылка
	                    |	И ВыплатаЗарплатыСотрудники.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов <> ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)");
	Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
	РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
	Если НЕ РезультатЗапросаПоСотрудникам.Пустой() Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
		Пока Выборка.Следующий() И НЕ Отказ Цикл
			// Проводим взаиморасчеты.
			НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения       = РежимПроведения;
			НаборЗаписейВзаиморасчеты.Контрагент            = Выборка.Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок    = Выборка.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Если (ЗначениеЗаполнено(ДокументОснование)) И (ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.НачислениеЗарплаты")) Тогда
				НаборЗаписейВзаиморасчеты.Сделка = ДокументОснование;
			Иначе
				НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
			КонецЕсли;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Истина;
			НаборЗаписейВзаиморасчеты.Сумма                            = Выборка.Сумма;
			НаборЗаписейВзаиморасчеты.Валюта                           = Неопределено;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ=НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
			
			СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			
			СтрокаСуммовыхРазниц = ТаблицаСуммовыхРазниц.Добавить();
			Если БалансВедетсяПоПодразделениям Тогда
				СтрокаСуммовыхРазниц.Подразделение = Выборка.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			Иначе
				СтрокаСуммовыхРазниц.Подразделение = ПодразделениеКомпании;
			КонецЕсли;
			СтрокаСуммовыхРазниц.Сумма = СуммаДоходаРасходаСуммовыхРазниц;
				
			СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
			СтрокаВзаиморасчетов.Подразделение = Выборка.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			СтрокаВзаиморасчетов.Сумма         = Выборка.Сумма;              			
		КонецЦикла;
	КонецЕсли;
	
	Документы.ВыплатаЗарплаты.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ВыплатаЗарплаты.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	Документы.ВыплатаЗарплаты.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Доходы и расходы по суммовым разницам.
	ТаблицаСуммовыхРазниц.Свернуть("Подразделение","Сумма");
	Для Каждого СтрокаСуммовыхРазниц Из ТаблицаСуммовыхРазниц Цикл
		Если СтрокаСуммовыхРазниц.Сумма<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение          = СтрокаСуммовыхРазниц.Подразделение;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СтрокаСуммовыхРазниц.Сумма<0 Тогда
				НаборЗаписейДиР.Расход = -СтрокаСуммовыхРазниц.Сумма;
			Иначе
				НаборЗаписейДиР.Доход = СтрокаСуммовыхРазниц.Сумма;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЦикла;
	
	// Корректирующие движения.
	ТаблицаВзаиморасчетов.Свернуть("Подразделение","Сумма");
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		ПодразделениеВзаиморасчета     = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СтрокаВзаиморасчетов.Подразделение, Дата);
		БалансовыеПодразделенияНеРавны = ПодразделениеКассаКомпании<>ПодразделениеВзаиморасчета;
		Если БалансВедетсяПоПодразделениям И БалансовыеПодразделенияНеРавны И СтрокаВзаиморасчетов.Сумма<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение          = СтрокаВзаиморасчетов.Подразделение;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Ложь;
			НаборЗаписейДиР.Доход                  = СтрокаВзаиморасчетов.Сумма;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение          = КассаКомпании.ПодразделениеКомпании;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Ложь;
			НаборЗаписейДиР.Доход                  = СтрокаВзаиморасчетов.Сумма;
			Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
		КонецЕсли;
	КонецЦикла;
	
	// Возможно расхождение баланса на "копейки" из-за округления. 
	// Возникшую разницу необходимо списать на доходы и расходы.	
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
	// Проведение по регистру ПлатежныйКалендарь
	// Собственно само проведение.
	НаборЗаписей = Движения.ПлатежныйКалендарь;
	НаборЗаписей.ДокументОбъект = Ссылка;
	
	Отказ = НЕ НаборЗаписей.ФактВыплата() ИЛИ Отказ;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Начисление зарплаты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_НачислениеЗарплаты(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения;
	
	// Вычислим сумму
	Сотрудники.Очистить();
	// Выберем всю дебиторскую задолженность по договорам, которые есть в начислении зп.
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	                      |	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                      |	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК Сумма,
	                      |	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр,
	                      |	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаБазОстаток, 0) КАК СуммаБаз
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	                      |			&МоментВремени,
	                      |			ДоговорВзаиморасчетов В
	                      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |					НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов
	                      |				ИЗ
	                      |					Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
	                      |				ГДЕ
	                      |					НачислениеЗарплатыСотрудники.Ссылка = &ДокументОснование)) КАК РасчетыСКонтрагентамиОстатки
	                      |ГДЕ
	                      |	РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВзаиморасчетыКомпанииОстатки.Контрагент,
	                      |	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов,
	                      |	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаОстаток, 0),
	                      |	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток, 0),
	                      |	ЕСТЬNULL(ВзаиморасчетыКомпанииОстатки.СуммаБазОстаток, 0)
	                      |ИЗ
	                      |	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
	                      |			&МоментВремени,
	                      |			ДоговорВзаиморасчетов В
	                      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |					НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов
	                      |				ИЗ
	                      |					Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
	                      |				ГДЕ
	                      |					НачислениеЗарплатыСотрудники.Ссылка = &ДокументОснование)) КАК ВзаиморасчетыКомпанииОстатки
	                      |ГДЕ
	                      |	ВзаиморасчетыКомпанииОстатки.СуммаОстаток < 0");
						
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	МоментВремени = ?(ТекущаяДатаСеанса() > ДокументОснование.Дата, ТекущаяДатаСеанса(), КонецДня(ДокументОснование.Дата));
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	
	РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
	
	Если НЕ РезультатЗапросаПоСотрудникам.Пустой() Тогда
		
		Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока 						= Сотрудники.Добавить();
			НоваяСтрока.Контрагент 				= Выборка.Контрагент;
			НоваяСтрока.ДоговорВзаиморасчетов 	= Выборка.ДоговорВзаиморасчетов;
			ВалютаДоговора 						= Выборка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
			
			Если ВалютаДокумента = ВалютаДоговора Тогда
				НоваяСтрока.Сумма = -Выборка.Сумма;
			ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
				НоваяСтрока.Сумма = -Выборка.СуммаБаз; 
			ИначеЕсли ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
				НоваяСтрока.Сумма = -Выборка.СуммаУпр; 
			Иначе
				СтруктураКурса 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора,ДокументОснование.Дата);
				Курс           		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
				НоваяСтрока.Сумма 	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-Выборка.Сумма,ВалютаДоговора,Курс,ВалютаДокумента,ДокументОснование.Дата);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаДокумента,
		ДанныеЗаполнения.ВалютаДокумента, ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, Дата);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_НачислениеЗарплаты()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
