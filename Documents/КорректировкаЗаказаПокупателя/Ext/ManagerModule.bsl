// Модуль менеджера документа "Корректировка заказа покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносИсполнителяИзСвойств() Экспорт
	
	ПеренесеныВсеСвойства = Истина;  
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	КорректировкаЗаказаПокупателяДополнительныеРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаЗаказаПокупателя.ДополнительныеРеквизиты КАК КорректировкаЗаказаПокупателяДополнительныеРеквизиты
		|ГДЕ
		|	КорректировкаЗаказаПокупателяДополнительныеРеквизиты.Свойство= &РеквизитКУдалению";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", РеквизитКУдалению);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваКУдалению = Новый Массив();		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаЗаказаПокупателя");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Исполнитель) Тогда
				
				СвойствоИсполнительОрганизация = ЗначенияСвойств.Найти(РеквизитКУдалению,"Свойство");
				Руководитель     = ОрганизацииАльфаАвто.Руководитель(СвойствоИсполнительОрганизация.Значение, ДокументОбъект.Дата);
				
				Если ЗначениеЗаполнено(Руководитель) Тогда
					
					ДокументОбъект.Исполнитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						Руководитель,
						Выборка.Ссылка
					);
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Исполнитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
																
			Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
			Если Строка <> Неопределено Тогда 
						
				ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
			КонецЕсли;
											
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_КорректировкаЗаказаПокупателя""";
			
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);

					КонецЕсли;
									
					Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//	Параметры - Структура - параметры выполнения операции.
//
// Возвращаемое значение:
//	Булево - Результат проверки;
//
Функция ПроверитьПереносИсполнителяИзСвойств(Параметры) Экспорт
	
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаЗаказаПокупателяДополнительныеРеквизиты.Свойство КАК Свойство,
	|	КорректировкаЗаказаПокупателяДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя.ДополнительныеРеквизиты КАК КорректировкаЗаказаПокупателяДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаЗаказаПокупателяДополнительныеРеквизиты.Свойство = &РеквизитКУдалению
	|	И КорректировкаЗаказаПокупателяДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", 	РеквизитКУдалению);
	Запрос.УстановитьПараметр("Ссылка",				Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки") + Объект.Товары.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Производит пересчет дополнительных реквизитов "Заказано", "Резерв" и "Распределено" табличной части "Товары".
//
// Параметры:
//  Объект        - Данные формы структура   - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ПолучитьДанныеПоЗаказу(Объект,ТекущаяСтрока = Неопределено) Экспорт
	
	// проверим наличие "Заказано" в табличной части
	Если НЕ ЕстьРеквизит(Объект, "Заказано", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Объединение.Номенклатура,
	|	Объединение.ХарактеристикаНоменклатуры,
	|	СУММА(Объединение.Заказано) КАК Заказано,
	|	СУММА(Объединение.Резерв) КАК Резерв,
	|	СУММА(Объединение.Распределено) КАК Распределено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв,
	|		0 КАК Распределено
	|ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент, Заказ = &Заказ" + ?(ТекущаяСтрока = Неопределено, "", "
	|										И Номенклатура = &Номенклатура
	|										И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры") + ") КАК ЗаказыПокупателейОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыРаспределениеОстатки.Номенклатура,
	|		ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
	|	ИЗ
	|		РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент, ЗаказПокупателя = &Заказ" + ?(ТекущаяСтрока = Неопределено, "", "
	|										И Номенклатура = &Номенклатура
	|										И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры") + ") КАК ЗаказыРаспределениеОстатки) КАК Объединение
	|СГРУППИРОВАТЬ ПО
	|	Объединение.Номенклатура,
	|	Объединение.ХарактеристикаНоменклатуры";
	ГраницаВремени = ?(Объект.Проведен, Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая), Объект.Дата);
	Запрос.УстановитьПараметр("Момент",ГраницаВремени);
	Запрос.УстановитьПараметр("Заказ", Объект.ДокументОснование);
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ПоЗаказу = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТоваров Из ПоЗаказу Цикл
			
			СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТоваров.Номенклатура, СтрокаТоваров.ХарактеристикаНоменклатуры));
			
			Для Каждого ТекСтрока Из СтрокиТовары Цикл
				
				Если ТекСтрока.Коэффициент = 0 Тогда
					Коэффициент = 1;
				Иначе
					Коэффициент = ТекСтрока.Коэффициент;
				КонецЕсли;
			
				ТекСтрока.Заказано     = СтрокаТоваров.Заказано/Коэффициент;
				ТекСтрока.Резерв       = СтрокаТоваров.Резерв/Коэффициент;
				ТекСтрока.Распределено = СтрокаТоваров.Распределено/Коэффициент;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Запрос.УстановитьПараметр("Номенклатура",               ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
		Выборка = Запрос.Выполнить();
		Если Выборка.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ПоЗаказу = Выборка.Выбрать();
		ПоЗаказу.Следующий();
		Если ТекущаяСтрока.Коэффициент = 0 Тогда
			Коэффициент = 1;
		Иначе
			Коэффициент = ТекущаяСтрока.Коэффициент;
		КонецЕсли;
		
		ТекущаяСтрока.Заказано     = ПоЗаказу.Заказано/Коэффициент;
		ТекущаяСтрока.Резерв       = ПоЗаказу.Резерв/Коэффициент;
		ТекущаяСтрока.Распределено = ПоЗаказу.Распределено/Коэффициент;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтрокуПоЗаказу()

// Заполняет табличную часть "Товары" по остаткам
//
// Параметры:
//  Объект - Объект - Объект, для которого выполняется обработка события.
//  ЗаказПокупателя - Документ заказа - Заказ, по которому выполняется заполнение.
//
Процедура ЗаполнитьТоварыПоОстаткам(Объект, ЗаказПокупателя) Экспорт
	
	Объект.Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Заказано,
	|	ЗаказыПокупателейОстатки.СуммаОстаток    КАК Сумма,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	ЗаказыПокупателейОстатки.РезервОстаток   КАК Резерв
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Объект.Ссылка.Пустая(),"","&НаМомент")+", ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.Заказ = &Заказ";
	
	МоментВремени = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка),Новый МоментВремени(ТекущаяДатаСеанса()),Новый МоментВремени(Объект.Дата));

	Запрос.УстановитьПараметр("НаМомент",   МоментВремени);
	Запрос.УстановитьПараметр("Заказ",      ЗаказПокупателя);
	ТабОстатковЗаказов = Запрос.Выполнить().Выгрузить();
	
	ОснованиеЗаказПокупателя = (ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя"));
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Если ОснованиеЗаказПокупателя Тогда
		ТзТоваров    = ЗаказПокупателя.Товары.Выгрузить();
		ВалютаЗаказа = ЗаказПокупателя.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Для Каждого стрОстатков Из ТабОстатковЗаказов Цикл
		Если ОснованиеЗаказПокупателя Тогда
			СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",стрОстатков.Номенклатура,стрОстатков.ХарактеристикаНоменклатуры);
			ЗначениеСкидкиШапкиИзменено = Ложь;
			ЗначениеСкидкиСтрокиИзменено = Ложь;
			МассивСтрок = ТзТоваров.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() = 1 Тогда
				ПроцентСкидкиШапки  = МассивСтрок[0].ПроцентСкидки;
				ПроцентСкидкиСтроки = МассивСтрок[0].ПроцентСкидкиСтроки;
				СкидкаСтроки        = МассивСтрок[0].СкидкаНаТовар; 
				ЗначениеСкидкиШапкиИзменено = МассивСтрок[0].ЗначениеСкидкиШапкиИзменено;
				ЗначениеСкидкиСтрокиИзменено = МассивСтрок[0].ЗначениеСкидкиСтрокиИзменено;
			ИначеЕсли МассивСтрок.Количество() > 1 Тогда
				СкидкаСтроки = Справочники.ТипыСкидок.ПустаяСсылка();
				СуммаСкидкиСтрокиВсего = 0;
				СуммаСкидкиШапкиВсего = 0;
				СуммаВсего = 0;
				Для Каждого стрМассива Из МассивСтрок Цикл
					Если НЕ ЗначениеЗаполнено(СкидкаСтроки) И ЗначениеЗаполнено(стрМассива.СкидкаНаТовар) Тогда
						СкидкаСтроки = стрМассива.СкидкаНаТовар;
					КонецЕсли;
					
					СуммаВсего             = СуммаВсего + стрМассива.СуммаВсего;
					СуммаСкидкиШапкиВсего  = СуммаСкидкиШапкиВсего + стрМассива.СуммаСкидки;
					СуммаСкидкиСтрокиВсего = СуммаСкидкиСтрокиВсего + стрМассива.СуммаСкидкиСтроки;
				КонецЦикла;
				
				СуммаСоСкидкой = СуммаВсего + СуммаСкидкиШапкиВсего + СуммаСкидкиСтрокиВсего;
				
				Если СуммаСоСкидкой = 0 Тогда
					ПроцентСкидкиШапки  = 0;
					ПроцентСкидкиСтроки = 0;
				Иначе
					ПроцентСкидкиШапки  = (СуммаСкидкиШапкиВсего*100)/СуммаСоСкидкой;
					ПроцентСкидкиСтроки = (СуммаСкидкиСтрокиВсего*100)/СуммаСоСкидкой;
				КонецЕсли;
			Иначе
				ПроцентСкидкиШапки  = 0;
				ПроцентСкидкиСтроки = 0;
				СкидкаСтроки        = Справочники.ТипыСкидок.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура               = стрОстатков.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = стрОстатков.ХарактеристикаНоменклатуры;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		Если (НЕ НоваяСтрока.Коэффициент = 0) И (НЕ НоваяСтрока.Коэффициент = 1) Тогда
			НоваяСтрока.Количество = Окр(стрОстатков.Заказано/НоваяСтрока.Коэффициент, 3);
		Иначе
			НоваяСтрока.Количество = стрОстатков.Заказано;
		КонецЕсли;
		ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
		Если ОснованиеЗаказПокупателя Тогда
			НоваяСтрока.СкидкаНаТовар       = СкидкаСтроки;
			НоваяСтрока.ПроцентСкидки       = ПроцентСкидкиШапки;
			НоваяСтрока.ПроцентСкидкиСтроки = ПроцентСкидкиСтроки; 
			НоваяСтрока.ЗначениеСкидкиШапкиИзменено = ЗначениеСкидкиШапкиИзменено;
			НоваяСтрока.ЗначениеСкидкиСтрокиИзменено = ЗначениеСкидкиСтрокиИзменено;
			РассчитатьСкидкиСтроки(Объект, НоваяСтрока, "Товары");
			РассчитатьСуммуСкидкиНаценки(Объект);
		КонецЕсли;
		
		Если ОснованиеЗаказПокупателя И ВалютаЗаказа = Объект.ВалютаДокумента Тогда
			НоваяСтрока.СуммаВсего = стрОстатков.Сумма;
		Иначе
			НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(стрОстатков.СуммаУпр, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(ЗначениеЗаполнено(Объект.КурсВалютыУпр), Объект.КурсВалютыУпр, Объект.Дата), Объект.ВалютаДокумента, Объект.КурсДокумента);
		КонецЕсли;
		ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
	Если НЕ ОснованиеЗаказПокупателя Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТоварыПоОстаткам()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДокументОснование",     КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
		
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		Объект.СкидкаНаценка     = Справочники.ТипыСкидок.ПустаяСсылка();
		Объект.Контрагент        = ?(ЗначениеЗаполнено(Объект.ДокументОснование), Объект.ДокументОснование.ПодразделениеПолучатель, Справочники.ПодразделенияКомпании.ПустаяСсылка());
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			ТекСтрока.СкидкаНаТовар = Объект.СкидкаНаценка;
			ТекСтрока.СтавкаНДС     = Справочники.СтавкиНДС.ПустаяСсылка();
			ТоварыСтавкаНДСПриИзменении(Объект, ТекСтрока);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Объект.СкидкаНаценка     = Объект.ДокументОснование.СкидкаНаценка;
		Объект.Контрагент        = ?(ЗначениеЗаполнено(Объект.ДокументОснование), Объект.ДокументОснование.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия,, Истина);
	
	// пересчет дополнительных реквизитов табличной части "Товары"
	ПолучитьДанныеПоЗаказу(Объект);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) И Объект.Исполнитель.Организация <> Объект.Организация Тогда
		Объект.Исполнитель = Справочники.Подписанты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	// пересчет дополнительных реквизитов табличной части "Товары"
	ПолучитьДанныеПоЗаказу(Объект,Строка);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// пересчет дополнительных реквизитов табличной части "Товары"
	ПолучитьДанныеПоЗаказу(Объект,Строка);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") И ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
		Строка.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// процедура расчета скидок по значениям подобранным
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "КорректировкаЗаказаПокупателя");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по заказу'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоЗаказу";
	//Команда.ДополнительныеПараметры.Вставить("ИзменяетСохраняемыеДанные", Ложь);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоЗаказу.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоЗаказу.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказу
//
Функция ТоварыЗаполнитьПоЗаказу(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран заказ.'"), Ссылка);
	Иначе
		ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Ложь);
		ЗаполнитьТоварыПоОстаткам(Объект, Объект.ДокументОснование);
	КонецЕсли;	
	
КонецФункции // ТоварыЗаполнитьПоЗаказу()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.КорректировкаЗаказаПокупателя",
		"ПФ_MXL_КорректировкаЗаказаПокупателя",
		НСтр("ru = 'Корректировка заказа покупателя'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_КорректировкаЗаказаПокупателя") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_КорректировкаЗаказаПокупателя",
															НСтр("ru = 'Корректировка заказа покупателя'"),
															ПечатьКорректировкаЗаказаПокупателя(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;		
КонецПроцедуры // Печать()

// Формирует печатную форму "КорректировкаЗаказаПокупателя"
//
Функция ПечатьКорректировкаЗаказаПокупателя(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаЗаказаПокупателя_КорректировкаЗаказаПокупателя";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.КорректировкаЗаказаПокупателя.ПФ_MXL_КорректировкаЗаказаПокупателя");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовокСчета  = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		// Заголовок счета
		ОбластьЗаголовокСчета.Параметры.Заполнить(Документ);
		
		ОбластьЗаголовокСчета.Параметры.КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(Документ.Организация,
			Документ.ПодразделениеКомпании, ДатаДокумента);
		
		ОбластьЗаголовокСчета.Параметры.БанкПолучателя =
			Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Организация).Банк;
		ОбластьЗаголовокСчета.Параметры.БанкПолучателяПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("Банк"));
		ОбластьЗаголовокСчета.Параметры.БИКБанкаПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("БИК"));
		ОбластьЗаголовокСчета.Параметры.СчетБанкаПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("КоррСчет"));
		ОбластьЗаголовокСчета.Параметры.ИНН =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("ИНН"));
		ОбластьЗаголовокСчета.Параметры.Получатель = Документ.Организация;
		ОбластьЗаголовокСчета.Параметры.ПолучательПредставление =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, ДатаДокумента);
		ОбластьЗаголовокСчета.Параметры.СчетПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, Новый Структура("БанковскийСчет"));
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСчета);
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		СтруктураПредставления=Новый Структура();
		СтруктураПредставления.Вставить("ИНН",              "ИНН ");
		СтруктураПредставления.Вставить("КПП",              "КПП ");
		СтруктураПредставления.Вставить("Наименование",     "");
		СтруктураПредставления.Вставить("АдресЮридический", "");
		СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, СтруктураПредставления, ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ДокументОснованиеПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
		
		Если НЕ ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьЗаголовок.Параметры.ДокументОснованиеПредставление	= НСтр("ru = '<заказ не выбран>'")
		ИначеЕсли ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ОбластьЗаголовок.Параметры.Контрагент = Документ.ДокументОснование.Контрагент;
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.НаДату = ДатаДокумента;
			ОбластьЗаголовок.Параметры.КонтрагентПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.ДокументОснование.Контрагент, СтруктураПредставления, ДополнительныеПараметры);
		ИначеЕсли ТипЗнч(Документ.ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
			ОбластьЗаголовок.Параметры.Контрагент = Документ.ДокументОснование.ПодразделениеПолучатель;
			ОбластьЗаголовок.Параметры.КонтрагентПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Документ.ДокументОснование.ПодразделениеПолучатель, ДатаДокумента);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0 Тогда
			СуммаСкидки = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СуммаСкидки, ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество()+ НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,Документ.ВалютаДокумента);
	
		// Выводим представления и расшифровки подписей.
		ДанныеПодписант = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "Исполнитель"); 	 	
		ОбластьПодвал.Параметры.ИсполнительОрганизацияПредставление = ДанныеПодписант.Представление; 
		
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ЗаказчикКонтрагент", "ЗаказчикКонтрагент"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьКорректировкаЗаказаПокупателя()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.КорректировкаЗаказаПокупателя);

КонецФункции
	
#КонецОбласти

#КонецОбласти

#КонецЕсли