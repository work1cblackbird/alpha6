// Модуль документа "Корректировка заказа покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда 
		Подписант = ОрганизацииАльфаАвто.Руководитель(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		
		Если ЗначениеЗаполнено(Подписант)Тогда
			Исполнитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании);	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;  
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Корректируем заказ покупателя
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Неопределено;
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// Если это заказ покупателя
		НаборЗаписейЗаказыПокупателей.Контрагент = ДокументОснование.Контрагент;
	ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		// Если это внутренний заказ
		НаборЗаписейЗаказыПокупателей.Контрагент = ДокументОснование.ПодразделениеПолучатель;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недопустимый документ-основание для корректировки заказа'"), ЭтотОбъект,,,Отказ);
	КонецЕсли; 
	НаборЗаписейЗаказыПокупателей.Заказ = ДокументОснование;
	Отказ=НЕ НаборЗаписейЗаказыПокупателей.КорректировкаЗаказаПокупателя() ИЛИ Отказ;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СуммаКорректировки = НаборЗаписейЗаказыПокупателей.Итог("Сумма");
		ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ДокументОснование, СуммаКорректировки);
		Если ТаблицаДолгов.Количество() > 0 Тогда
			СтрокаДолга = ТаблицаДолгов[0];
			СуммаЗаказа       = Формат(СтрокаДолга.СуммаЗаказа,       "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + СокрЛП(СтрокаДолга.Валюта);
			Предоплата        = Формат(СтрокаДолга.Предоплата,        "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + СокрЛП(СтрокаДолга.Валюта);
			ПроцентПредоплаты = Формат(СтрокаДолга.ПроцентПредоплаты, "ЧЦ=15; ЧДЦ=2; ЧН=0") + "%";
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Стоимость заказа после корректировки составит: <%1>, внесена предоплата <%2>, установленный процент предоплаты <%3>.'"), СуммаЗаказа, Предоплата, ПроцентПредоплаты);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
	
	// Снимаем распределение заказов покупателя
	РезультатЗакрытияЗаказов = НаборЗаписейЗаказыПокупателей.Выгрузить();
	РезультатЗакрытияЗаказов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Заказано");
	
	КолонкаКоличества = РезультатЗакрытияЗаказов.Колонки.Найти("Заказано");
	КолонкаКоличества.Имя = "Количество";
	
	НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
	НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
	НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗакрытияЗаказов;
	НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = ДокументОснование;
	НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = Неопределено;
	Отказ=НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
	
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		// Корректировка распределения других заказов, на внутреннем заказе
		НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
		НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
		НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗакрытияЗаказов;
		НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = Неопределено;
		НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = ДокументОснование;
		Отказ=НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
	КонецЕсли;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);

КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
                                            ТекстЗаполнения = "",
                                            СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.КорректировкаЗаказаПокупателя;
	
	ТЧОснование = ДанныеЗаполнения.Товары.Выгрузить();
	ТЧОснование.Свернуть("Номенклатура, ХарактеристикаНоменклатуры");
	ТЧДок = ЭтотОбъект.Товары;
	ТаблицаДляЗамены = ЭтотОбъект.Товары.Выгрузить();
	ТаблицаДляЗамены.Очистить();
	
	Для Каждого СтрокаТЧОснования Из ТЧОснование Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура", СтрокаТЧОснования.Номенклатура);
		Отбор.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧОснования.ХарактеристикаНоменклатуры);
		НайденнаяСтрока = ТЧДок.НайтиСтроки(Отбор);
		
		Если НайденнаяСтрока.Количество() <> 0 Тогда
			
			НоваяСтрока = ТаблицаДляЗамены.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока[0]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтотОбъект.Товары.Очистить();
	ЭтотОбъект.Товары.Загрузить(ТаблицаДляЗамены);
	
	Если ДанныеЗаполнения.Проведен Тогда
		
		Документы.КорректировкаЗаказаПокупателя.ЗаполнитьТоварыПоОстаткам(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.КорректировкаЗаказаВнутреннее;
	
	Контрагент = ДанныеЗаполнения.ПодразделениеПолучатель;
	
	// !!!_Maye разобраться со скидками
	//ОбработкаРасчетСкидок.НеРассчитыватьАвтоматическиеСкидки = Истина;
	//ОбработкаРасчетСкидок.НеРассчитыватьСтрочныеСкидки       = Истина;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

#КонецОбласти

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	// Если выполняется восстановление последовательностей, то отключим проверку
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент, ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.Заказ = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументу.Номенклатура КАК Номенклатура,
	|	ПоДокументу.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоДокументу.Количество КАК Количество,
	|	ПоДокументу.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПоДокументу
	|ИЗ
	|	&ПоДокументу КАК ПоДокументу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументу.Номенклатура КАК Номенклатура,
	|	ПоДокументу.НомерСтроки КАК НомерСтроки,
	|	СправочникНоменклатура.Артикул КАК НоменклатураАртикул,
	|	СправочникНоменклатура.ЗапретЗакупки КАК ЗапретЗакупки,
	|	&ЗапретЗакупки КАК Запрет
	|ИЗ
	|	ПоДокументу КАК ПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО (Остатки.Номенклатура = ПоДокументу.Номенклатура)
	|			И (Остатки.ХарактеристикаНоменклатуры = ПоДокументу.ХарактеристикаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоДокументу.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Остатки.Количество, 0) - ПоДокументу.Количество < 0
	|	И СправочникНоменклатура.ЗапретЗакупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоДокументу.Номенклатура,
	|	ПоДокументу.НомерСтроки,
	|	СправочникНоменклатура.Артикул,
	|	СправочникНоменклатура.ЗапретПродажи,
	|	&ЗапретПродажи
	|ИЗ
	|	ПоДокументу КАК ПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО (Остатки.Номенклатура = ПоДокументу.Номенклатура)
	|			И (Остатки.ХарактеристикаНоменклатуры = ПоДокументу.ХарактеристикаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоДокументу.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Остатки.Количество, 0) - ПоДокументу.Количество > 0
	|	И СправочникНоменклатура.ЗапретПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоДокументу.Номенклатура,
	|	ПоДокументу.НомерСтроки,
	|	СправочникНоменклатура.Артикул,
	|	СправочникНоменклатура.ЗапретПродажи,
	|	&ЗапретПродажи
	|ИЗ
	|	ПоДокументу КАК ПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО (Остатки.Номенклатура = ПоДокументу.Номенклатура)
	|			И (Остатки.ХарактеристикаНоменклатуры = ПоДокументу.ХарактеристикаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоДокументу.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Остатки.Количество, 0) = 0
	|	И СправочникНоменклатура.ЗапретПродажи
	|	И ПоДокументу.Количество <> 0";
	
	МоментВремени = ?(НЕ ЗначениеЗаполнено(Ссылка), Неопределено, Новый МоментВремени(Дата));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	Запрос.УстановитьПараметр("ЗапретПродажи", НСТр("ru = 'продажи'"));
	Запрос.УстановитьПараметр("ЗапретЗакупки", НСТр("ru = 'закупки'"));
	Запрос.УстановитьПараметр("НаМомент", МоментВремени);
	Запрос.УстановитьПараметр("ПоДокументу",
							  Товары.Выгрузить(,"Номенклатура, ХарактеристикаНоменклатуры, НомерСтроки, Количество"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Номенклатура [%1] ""%2"" блокируется для %3.'"),
								Выборка.НоменклатураАртикул,
								Выборка.Номенклатура,
								Выборка.Запрет);
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",Выборка.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
