// Модуль менеджера документа "Заказ поставщику"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сформированную таблицу с товарами с учетом кореректировок для формирования документов оплаты
//
// Параметры:
//  Объект - ДокументСсылка.ЗаказПоставщику - документ, для которого формируются данные.
//  Результат - ТаблицаЗначений - шаблон возвращаемой таблицы данных.
//  ПараметрыПересчета - Структура - параметры пересчета
//
// Возвращаемое значение:
//  ТаблицаЗначений - сформированная таблица товаров.
//
Функция ТоварыДляДокументаОплаты(Объект, Результат, ПараметрыПересчета) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПоставщикам.Заказано) КАК Количество,
	|	СУММА(ЗаказыПоставщикам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ЗаказыПоставщикамОстатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Период <= &Момент
	|	И НЕ ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ПоступлениеТоваров
	|	И ЗаказыПоставщикам.ЗаказПоставщику = &Заказ
	|	И ЗаказыПоставщикам.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	НЕ(СУММА(ЗаказыПоставщикам.Заказано) = 0
	|			И СУММА(ЗаказыПоставщикам.Сумма) = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаЗаказаПоставщику.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КорректировкиЗаказа
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
	|ГДЕ
	|	КорректировкаЗаказаПоставщику.ДокументОснование = &Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаменаВЗаказеПоставщику.Ссылка
	|ИЗ
	|	Документ.ЗаменаВЗаказеПоставщику КАК ЗаменаВЗаказеПоставщику
	|ГДЕ
	|	ЗаменаВЗаказеПоставщику.ДокументОснование = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаЗаказаПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаЗаказаПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаЗаказаПоставщикуТовары.Количество КАК Количество,
	|	КорректировкаЗаказаПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КорректировкаЗаказаПоставщикуТовары.Коэффициент КАК Коэффициент,
	|	КорректировкаЗаказаПоставщикуТовары.Цена КАК Цена,
	|	КорректировкаЗаказаПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаЗаказаПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	КорректировкаЗаказаПоставщикуТовары.Сумма КАК Сумма,
	|	КорректировкаЗаказаПоставщикуТовары.СуммаВсего КАК СуммаВсего,
	|	КорректировкаЗаказаПоставщикуТовары.Ссылка.Дата КАК Дата
	|ПОМЕСТИТЬ ТоварыСКорректировками
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщикуТовары
	|ГДЕ
	|	КорректировкаЗаказаПоставщикуТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				КорректировкиЗаказа.Ссылка
	|			ИЗ
	|				КорректировкиЗаказа КАК КорректировкиЗаказа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПоставщикуТовары.Количество,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
	|	ЗаказПоставщикуТовары.Коэффициент,
	|	ЗаказПоставщикуТовары.Цена,
	|	ЗаказПоставщикуТовары.СтавкаНДС,
	|	ЗаказПоставщикуТовары.СуммаНДС,
	|	ЗаказПоставщикуТовары.Сумма,
	|	ЗаказПоставщикуТовары.СуммаВсего,
	|	ЗаказПоставщикуТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.Номенклатура,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.ХарактеристикаНоменклатуры,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.Количество,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.ЕдиницаИзмерения,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.Коэффициент,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.Цена,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.СтавкаНДС,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.СуммаНДС,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.Сумма,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.СуммаВсего,
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.Ссылка.Дата
	|ИЗ
	|	Документ.ЗаменаВЗаказеПоставщику.ТоварыЗаменители КАК ЗаменаВЗаказеПоставщикуТоварыЗаменители
	|ГДЕ
	|	ЗаменаВЗаказеПоставщикуТоварыЗаменители.Ссылка В
	|			(ВЫБРАТЬ
	|				КорректировкиЗаказа.Ссылка
	|			ИЗ
	|				КорректировкиЗаказа КАК КорректировкиЗаказа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКорректировок.Номенклатура КАК Номенклатура,
	|	ТаблицаКорректировок.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ТаблицаКорректировок.Дата) КАК Дата
	|ПОМЕСТИТЬ ТоварыПоДате
	|ИЗ
	|	ТоварыСКорректировками КАК ТаблицаКорректировок
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКорректировок.Номенклатура,
	|	ТаблицаКорректировок.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоДате.Номенклатура КАК Номенклатура,
	|	ТоварыПоДате.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаКорректировок.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаКорректировок.Коэффициент КАК Коэффициент,
	|	ТаблицаКорректировок.Сумма КАК Сумма,
	|	ТаблицаКорректировок.Цена КАК Цена,
	|	ТаблицаКорректировок.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаКорректировок.СуммаНДС КАК СуммаНДС,
	|	ТаблицаКорректировок.СуммаВсего КАК СуммаВсего,
	|	ТаблицаКорректировок.Количество КАК Количество
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ТоварыПоДате КАК ТоварыПоДате
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСКорректировками КАК ТаблицаКорректировок
	|		ПО ТоварыПоДате.Номенклатура = ТаблицаКорректировок.Номенклатура
	|			И ТоварыПоДате.ХарактеристикаНоменклатуры = ТаблицаКорректировок.ХарактеристикаНоменклатуры
	|			И ТоварыПоДате.Дата = ТаблицаКорректировок.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикамОстатки.Количество КАК Количество,
	|	ИтоговаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИтоговаяТаблица.Коэффициент КАК Коэффициент,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ИтоговаяТаблица.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	|	ИтоговаяТаблица.СуммаНДС КАК СуммаНДС,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.СуммаВсего КАК СуммаВсего
	|ИЗ
	|	ЗаказыПоставщикамОстатки КАК ЗаказыПоставщикамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтоговаяТаблица КАК ИтоговаяТаблица
	|		ПО ЗаказыПоставщикамОстатки.Номенклатура = ИтоговаяТаблица.Номенклатура
	|			И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ИтоговаяТаблица.ХарактеристикаНоменклатуры
	|			И ЗаказыПоставщикамОстатки.Количество = ИтоговаяТаблица.Количество
	|			И ЗаказыПоставщикамОстатки.Сумма = ИтоговаяТаблица.СуммаВсего";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Заказ", Объект);
	Запрос.УстановитьПараметр("Момент", КонецДня(ПараметрыПересчета.ДатаДокумента));
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
			НоваяСтрока.Коэффициент = 1;
		КонецЕсли;
		
		НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.СуммаВсего,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента
		);
		НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента
		);
		НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма / НоваяСтрока.Количество,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента
		);
		
		Если ПараметрыПересчета.ТребуетсяПересчет Тогда
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаВсего * Выборка.СтавкаНДССтавка / (100 + Выборка.СтавкаНДССтавка), 2);
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки = Результат.Количество();
		
	КонецЦикла;
	
	Возврат ?(Результат.Количество() = 0, Неопределено, Результат);
	
КонецФункции

// Формирует структуру с данными для выгрузки в ЭД формата CML 2
//
// Параметры:
//  Документ - ДокументСсылка.ЗаказПоставщику - документ заказа
// 
// Возвращаемое значение:
//  Структура - с полями:
//  * Шапка - Структура;
//  * Товары - ТаблицаЗначений;
//
Функция ВыгрузитьДанныеДляЭД(Документ) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Дата КАК Дата,
		|	ЗаказПоставщику.ВалютаДокумента.Код КАК ВалютаКод,
		|	ЗаказПоставщику.ВалютаДокумента КАК Валюта,
		|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказПоставщику.Номер КАК Номер,
		|	ЗаказПоставщику.Организация КАК Организация,
		|	ЗаказПоставщику.Контрагент КАК Контрагент,
		|	ЗаказПоставщику.ДокументОснование КАК ДокументОснование,
		|	ЗаказПоставщику.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорДата,
		|	ЗаказПоставщику.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорНомер,
		|	ЗаказПоставщику.Комментарий КАК Комментарий,
		|	ЗаказПоставщику.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Номенклатура.Наименование КАК Наименование,
		|	Товары.Номенклатура.Артикул КАК Артикул,
		|	Товары.ХарактеристикаНоменклатуры КАК ЗначениеХарактеристики,
		|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Товары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	Товары.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
		|	Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаВсего КАК СуммаСНДС,
		|	Товары.Цена КАК Цена,
		|	Товары.Ссылка.ТипЦен.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКод,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК БазоваяЕдиницаНаименование,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	Товары.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Документ"
	);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый Структура(
		"Шапка,Товары",
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатыЗапроса[0].Выгрузить()[0]),
		РезультатыЗапроса[1].Выгрузить()
	);

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Получает количество нераспределенного товара. Если полностью распределено или товар в заказе не найден,
// то возвращает Неопределено.
// Параметры:
//	Заказ - {ЗаказПокупателя, ЗаказВнутренний} Ссылка - ссылка на заказ,
//	Номенклатура - номенклатурная позиция,
//	Характеристика - характеристика номенклатуры.
//
Функция ПолучитьТекущееСостояниеЗаказа(Объект, Строка)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|		&НаДату,
	|		Заказ = &Заказ
	|		И Номенклатура = &Номенклатура
	|		И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(
	|		&НаДату,
	|		ЗаказПокупателя = &Заказ
	|		И Номенклатура = &Номенклатура
	|		И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ЗаказыПокупателейОстатки.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)";
	Запрос = Новый Запрос(ТекстЗапроса); 
	ВидГраницыИтог = ?(Объект.Проведен, ВидГраницы.Исключая, ВидГраницы.Включая);	
	Запрос.УстановитьПараметр("НаДату",                     ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Новый Граница(Объект.Дата, ВидГраницыИтог)));
	Запрос.УстановитьПараметр("Заказ",                      Строка.ЗаказПокупателя);
	Запрос.УстановитьПараметр("Номенклатура",               Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Возврат Рез.Количество;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьТекущееСостояниеЗаказа()

// Проверка количества номенклатуры согласно распределенному количеству и
// кратности поставок.
// 
Функция ТоварыПроверкаКоличества(Объект, Строка)
	
	Результат = Ложь;
	Если Строка.Количество < Строка.Распределено Тогда
		Строка.Количество = Строка.Распределено;
		Результат = Истина;
	КонецЕсли;
	
	// проверим кратное количество
	Если Объект.УчитыватьКратность И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		Кратность = Строка.Номенклатура.КратностьПоставок;
		Если Кратность > 0 Тогда
			ЦелЧасть   = Цел(Строка.Количество/Кратность);
			ОстатокДел = Строка.Количество%Кратность;
			Если ОстатокДел > 0 Тогда
				Строка.Количество = (ЦелЧасть+1)*Кратность;
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ТоварыПроверкаКоличества()

// Перерасчет таблицы товаров в соответствии с таблицей распределений
//
// Параметры:
//	ЭтаФорма - форма, форма обрабатываемого документа.
//
Процедура ПерерасчетРаспределения(Объект) Экспорт
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество   = СтрокаТоваров.Количество - Мин(СтрокаТоваров.Распределено, СтрокаТоваров.Количество);
		СтрокаТоваров.Распределено = 0;
	КонецЦикла;
	
	СтруктураНоменклатуры = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	Для Каждого СтрокаРаспределения Из Объект.РаспределениеЗаказа Цикл
		
		Если СтрокаРаспределения.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНоменклатуры.Вставить("Номенклатура",               СтрокаРаспределения.Номенклатура);
		СтруктураНоменклатуры.Вставить("ХарактеристикаНоменклатуры", СтрокаРаспределения.ХарактеристикаНоменклатуры);
		
		МассивСтрокТоваров = Объект.Товары.НайтиСтроки(СтруктураНоменклатуры);
		Если МассивСтрокТоваров.Количество() = 0 Тогда
			СтрокаТоваров = Объект.Товары.Добавить();
			СтрокаТоваров.Номенклатура               = СтрокаРаспределения.Номенклатура;
			СтрокаТоваров.ЕдиницаИзмерения           = СтрокаРаспределения.ЕдиницаИзмерения;
			СтрокаТоваров.Коэффициент                = СтрокаРаспределения.Коэффициент;
			
			// Обработчик события при изменении номенклатуры
			ТоварыНоменклатураПриИзменении(Объект, СтрокаТоваров);
			
			СтрокаТоваров.ХарактеристикаНоменклатуры = СтрокаРаспределения.ХарактеристикаНоменклатуры;
			
			СтрокаТоваров.Количество   = 0;
			СтрокаТоваров.Распределено = 0;
		Иначе
			СтрокаТоваров = МассивСтрокТоваров[0];
		КонецЕсли;
		
		Коэффициент  = ?(СтрокаТоваров.Коэффициент = 0, 1, СтрокаТоваров.Коэффициент);
		Распределено = ((СтрокаРаспределения.Количество*СтрокаРаспределения.Коэффициент)/Коэффициент);
		
		СтрокаТоваров.Распределено = СтрокаТоваров.Распределено + Распределено;
		СтрокаТоваров.Количество   = СтрокаТоваров.Количество   + Распределено;
		
		ТоварыКоличествоПриИзменении(Объект, СтрокаТоваров);
		
	КонецЦикла;
	
	МассивСтрокТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Количество, Распределено", 0, 0));
	Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
		Объект.Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
КонецПроцедуры // ПерерасчетРаспределения()

// Обработчик события возникающего при изменении данных реквизита "Проверка заполнения"
// в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка)
	
	Если (НЕ ЗначениеЗаполнено(Строка.ЗаказПокупателя)) ИЛИ (НЕ ЗначениеЗаполнено(Строка.Номенклатура)) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоНераспределенного = ПолучитьТекущееСостояниеЗаказа(Объект, Строка);
	Если КоличествоНераспределенного = Неопределено Тогда
		ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Строка.Номенклатура);
		ОбщегоНазначения.СообщитьПользователю(
				"[" + ЗначениеКолонкиКода + "]" + НСтр("ru = ' Номенклатура <'") + Строка.Номенклатура.Наименование
		+ ?(Строка.ХарактеристикаНоменклатуры.Пустая(), "", " / " + Строка.ХарактеристикаНоменклатуры.Наименование)
		+ НСтр("ru = '> отсутствует в заказе <'") + Строка.ЗаказПокупателя + НСтр("ru = '> или полностью распределена.'"));
		
		Если ТипЗнч(Строка.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Строка.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		Иначе
			Строка.ЗаказПокупателя = Документы.ЗаказВнутренний.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если КоличествоНераспределенного < Строка.Количество * Строка.Коэффициент Тогда
			Строка.Количество = КоличествоНераспределенного / Строка.Коэффициент;
		КонецЕсли;
		
		мсвСтрок = Строка.ЗаказПокупателя.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры));
		
		Если мсвСтрок.Количество() > 0 Тогда
			Строка.Цена = мсвСтрок[0].Цена;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры // РаспределениеЗаказаПроверкаЗаполнения()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СрокПоставки");
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.Номенклатура");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.Количество");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.Коэффициент");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.ЗаказПокупателя");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Уникальные поля таблицы Распределение заказа
	УникальныеРаспределение = Новый Массив();
	УникальныеРаспределение.Добавить("Номенклатура");
	УникальныеРаспределение.Добавить("ЕдиницаИзмерения");
	УникальныеРаспределение.Добавить("ХарактеристикаНоменклатуры");
	УникальныеРаспределение.Добавить("ЗаказПокупателя");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",              УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("РаспределениеЗаказа", УникальныеРаспределение);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ЗаказПокупателя", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("РаспределениеЗаказа", КонтролируемыеРеквизитыТЧ);

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) И Объект.ДоговорВзаиморасчетов.СрокПоставки > 0 Тогда
		СрокПоставкиДней = Объект.ДоговорВзаиморасчетов.СрокПоставки;
		Объект.СрокПоставки = НачалоДня(Объект.Дата) + СрокПоставкиДней * 60 * 60 * 24;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СрокПоставкиДней = Объект.Контрагент.СрокПоставки;
		Объект.СрокПоставки = НачалоДня(Объект.Дата) + СрокПоставкиДней * 60 * 60 * 24;
	Иначе
		Объект.СрокПоставки = Неопределено;
	КонецЕсли;
	
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип Цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыПроверкаКоличества(Объект, Строка) Тогда
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если НЕ Строка.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент Тогда
		
		КоэффВрем = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент); // запоминаем старый коэффициент
		
		Строка.Коэффициент  = Строка.ЕдиницаИзмерения.Коэффициент; // установим новый
		Строка.Распределено = Строка.Распределено * КоэффВрем / Строка.Коэффициент; // рассчитаем количество
		Строка.Количество   = Строка.Количество * КоэффВрем / Строка.Коэффициент; // рассчитаем количество
		
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТоварыПроверкаКоличества(Объект, Строка);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеЗаказа

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура РаспределениеЗаказаНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия, "РаспределениеЗаказа");
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" 
// в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура РаспределениеЗаказаХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия, "РаспределениеЗаказа");
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура РаспределениеЗаказаЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия, "РаспределениеЗаказа");
	
КонецПроцедуры // РаспределениеЗаказаЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура РаспределениеЗаказаКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказ покупателя" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаЗаказПокупателяПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ТабличныеЧастиСКомандами = Новый Массив();
	ТабличныеЧастиСКомандами.Добавить("Товары");
	ТабличныеЧастиСКомандами.Добавить("РаспределениеЗаказа");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ЗаказПоставщику");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСКомандами Цикл
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, ТабличнаяЧасть);
		
		Если ОтображатьЗаполнитьИзФайла Тогда
			ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, ТабличнаяЧасть);
		КонецЕсли;
	КонецЦикла;
	//
	ВыборКонтрагента 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборКонтрагента.ВыборСсылки 		= "Справочник.Контрагенты.ФормаСписка";
	ВыборКонтрагента.Обязательный 		= Истина;
	ВыборКонтрагента.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать поставщика.'");
	
	ПараметрыВводаДаты 					= ПоследовательныеОперацииКлиентСервер.СоздатьПараметрыОперацииВводДаты();
	ПараметрыВводаДаты.ВводДаты         = НСтр("ru ='Введите дату начала анализа заказов'");
	ПараметрыВводаДаты.Дата             = ТекущаяДатаСеанса() - (60*60*24*365);
	ПараметрыВводаДаты.ТекстОтменыВвода = НСтр("ru = 'Необходимо ввести дату расчета.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Минимальными остатками по предыдущим заказам'");
	Команда.Идентификатор	= "ТоварыМинимальнымиОстаткамиПоПредыдущимЗаказам";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", 	ВыборКонтрагента);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДатаРасчета", 	ПараметрыВводаДаты);
	//
	ВыборГруппыНоменклатуры		 				= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборГруппыНоменклатуры.ВыборСсылки 		= "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборГруппыНоменклатуры.Обязательный 		= Истина;
	ВыборГруппыНоменклатуры.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Минимальными остатками по выбранной группе'");
	Команда.Идентификатор	= "ЗаполнитьТоварыМинимальнымиОстаткамиПоВыбраннойГруппе";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", 	ВыборКонтрагента);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ВыбраннаяГруппа",ВыборГруппыНоменклатуры);
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Минимальными остатками по всем товарам'");
	Команда.Идентификатор	= "ЗаполнитьТоварыМинимальнымиОстатками";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", 	ВыборКонтрагента);
	//	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контрагент","Контрагент");
	ПараметрыОтбора.Вставить("Дата","Дата");
	ПараметрыОтбора.Вставить("СрокПоставки","СрокПоставки");
	
	ПараметрыФормы = Новый Структура("Отбор",ПараметрыОтбора);

	ФормаВыбора		 				= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаВыбора.ВыборСсылки 		= "Обработка.ФормированиеЗаказаНаОснованииПродаж.Форма";
	ФормаВыбора.Обязательный 		= Истина;
	
	ФормаВыбора.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'На основании продаж товаров поставщика'");
	Команда.Идентификатор	= "ТоварыНаОснованииПродаж";
	Команда.Порядок			= 54;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ТоварыНаОснованииПродаж", ФормаВыбора);
	//
	ВыборЗаказа 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЗаказа.ВыборСсылки 		= "Обработка.РасчетОптимальногоЗаказа.Форма.Форма";
	ВыборЗаказа.Обязательный 		= Истина;
	
	ПараметрыФормы   = Новый Структура("Дата", "Дата");
	ПараметрыФормы.Вставить("Контрагент",            "Контрагент");
	ПараметрыФормы.Вставить("ПодразделениеКомпании", "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("ВалютаДокумента",       "ВалютаДокумента");
	ПараметрыФормы.Вставить("СрокПоставки",          "СрокПоставки");
	
	ВыборЗаказа.Параметры			= ПараметрыФормы;
		
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Расчет заказа'");
	Команда.Идентификатор	= "ТоварыРасчетЗаказа";
	Команда.Порядок 		= 55;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ТоварыРасчетЗаказа", ВыборЗаказа);
	//
	ВыборЗаказаПокупателя 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЗаказаПокупателя.ВыборСсылки 		= "Документ.ЗаказПокупателя.ФормаСписка";
	ВыборЗаказаПокупателя.Обязательный 		= Истина;
	ВыборЗаказаПокупателя.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать заказ покупателя.'");
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("РежимВыбора",                    Истина);
	ПараметрыОперации.Вставить("ОтборПоНераспределеннымЗаказам", Истина);
	ПараметрыОперации.Вставить("ДокументЗаполнения",             "Ссылка");
	ПараметрыОперации.Вставить("Дата",                           "Дата");
	
	ВыборЗаказаПокупателя.Параметры			= ПараметрыОперации;
			
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РаспределениеЗаказаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по заказу покупателя'");
	Команда.Идентификатор	= "РаспределениеЗаказаЗаполнитьПоЗаказуПокупателя";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РаспределениеЗаказа";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Заказ", ВыборЗаказаПокупателя);
	//
	ВыборЗаказаВнутреннего 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЗаказаВнутреннего.ВыборСсылки 		= "Документ.ЗаказВнутренний.ФормаСписка";
	ВыборЗаказаВнутреннего.Обязательный 	= Истина;
	ВыборЗаказаВнутреннего.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать внутренний заказ.'");
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("РежимВыбора",                    Истина);
	ПараметрыОперации.Вставить("ОтборПоНераспределеннымЗаказам", Истина);
	ПараметрыОперации.Вставить("ДокументЗаполнения",             "Ссылка");
	ПараметрыОперации.Вставить("Дата",                           "Дата");
	
	ВыборЗаказаВнутреннего.Параметры			= ПараметрыОперации;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РаспределениеЗаказаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по внутреннему заказу'");
	Команда.Идентификатор	= "РаспределениеЗаказаЗаполнитьПоВнутреннемуЗаказу";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РаспределениеЗаказа";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Заказ", ВыборЗаказаВнутреннего);
	//	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РаспределениеЗаказаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по нераспределенным заказам'");
	Команда.Идентификатор	= "РаспределениеЗаказаЗаполнитьПоЗаказам";
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РаспределениеЗаказа";
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РаспределениеЗаказаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по предоплаченным заказам'");
	Команда.Идентификатор	= "РаспределениеЗаказаЗаполнитьПоПредоплаченнымЗаказам";
	Команда.Порядок			= 54;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РаспределениеЗаказа";
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РаспределениеЗаказаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по нераспределенным заказам сервиса'");
	Команда.Идентификатор	= "РаспределениеЗаказаЗаполнитьПоЗаказамСервиса";
	Команда.Порядок			= 55;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РаспределениеЗаказа";
    //
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РаспределениеЗаказаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по поставщику'");
	Команда.Идентификатор	= "РаспределениеЗаказаЗаполнитьПоПоставщику";
	Команда.Порядок			= 56;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РаспределениеЗаказа";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", ВыборКонтрагента);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстаткамиПоПредыдущимЗаказам.Видимость",        Истина);
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстаткамиПоПредыдущимЗаказам.Доступность",      Истина);
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстаткамиПоВыбраннойГруппе.Видимость",          Истина);
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстаткамиПоВыбраннойГруппе.Доступность",        Истина);
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстаткамиПоВсемТоварам.Видимость",              Истина);
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстаткамиПоВсемТоварам.Доступность",            Истина);
	ПараметрыКоманд.Вставить("ТоварыРасчетЗаказа.Видимость",                                    Истина);
	ПараметрыКоманд.Вставить("ТоварыРасчетЗаказа.Доступность",                                  Истина);
	ПараметрыКоманд.Вставить("ТоварыНаОснованииПродаж.Видимость",                               Истина);
	ПараметрыКоманд.Вставить("ТоварыНаОснованииПродаж.Доступность",                             Истина);
	ПараметрыКоманд.Вставить("ЗаполнитьПоЗаказу.Видимость",                                     Истина);
	ПараметрыКоманд.Вставить("ЗаполнитьПоЗаказу.Доступность",                                   Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказуПокупателя.Видимость",        Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказуПокупателя.Доступность",      Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоВнутреннемуЗаказу.Видимость",       Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоВнутреннемуЗаказу.Доступность",     Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказам.Видимость",                 Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказам.Доступность",               Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказамСервиса.Видимость",          Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказамСервиса.Доступность",        Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоПредоплаченнымЗаказам.Видимость",   Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоПредоплаченнымЗаказам.Доступность", Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоПоставщику.Видимость",              Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоПоставщику.Доступность",            Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

Функция ЗаполнитьТоварыМинимальнымиОстаткамиПоВыбраннойГруппе(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Контрагент=ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос 	= ЗапросДополнительныхРеквизитов(Объект, ПараметрыЗаполнения.ВыбраннаяГруппа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.МинимальныйОстаток > Выборка.ТекущийОстаток Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура	= Выборка.Номенклатура;
			НоваяСтрока.Количество		= Выборка.МинимальныйОстаток - Выборка.ТекущийОстаток;
			Документы.ЗаказПоставщику.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЕсли; 
	КонецЦикла;
	
	ПерерасчетРаспределения(Объект);
	
КонецФункции

Функция ЗаполнитьТоварыМинимальнымиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Контрагент=ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос 	= ЗапросДополнительныхРеквизитов(Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.МинимальныйОстаток > Выборка.ТекущийОстаток Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура	= Выборка.Номенклатура;
			НоваяСтрока.Количество		= Выборка.МинимальныйОстаток - Выборка.ТекущийОстаток;
			Документы.ЗаказПоставщику.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЕсли; 
	КонецЦикла;
	
	ПерерасчетРаспределения(Объект);
	
КонецФункции

Функция ЗапросДополнительныхРеквизитов(Объект, ВыбраннаяГруппа = Неопределено)
	
	Запрос 			= Новый Запрос;
	ТекстЗапроса 	= 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ДополнительныеРеквизитыНоменклатурыСрезПоследних.ЗначениеРеквизита, 0) КАК МинимальныйОстаток,
		|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) + ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноОстаток, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК ТекущийОстаток
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			ДополнительныйРеквизит = &ВидДополнительногоРеквизита
		|				И Номенклатура В ИЕРАРХИИ (&Группа)
		|				И ПодразделениеКомпании = &ПодразделениеКомпании) КАК ДополнительныеРеквизитыНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
		|				&НаДату,
		|				СкладКомпании.ПодразделениеКомпании = &ПодразделениеКомпании
		|					И Номенклатура В ИЕРАРХИИ (&Группа)) КАК ОстаткиТоваровКомпанииОстатки
		|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|				&НаДату,
		|				ЗаказПоставщику.ПодразделениеКомпании = &ПодразделениеКомпании
		|					И Номенклатура В ИЕРАРХИИ (&Группа)) КАК ЗаказыПоставщикамОстатки
		|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		|				&НаДату,
		|				Заказ.ПодразделениеПолучатель = &ПодразделениеКомпании
		|					И Номенклатура В ИЕРАРХИИ (&Группа)) КАК ЗаказыПокупателейОстатки
		|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
		|				&НаДату,
		|				ЗаказПокупателя.ПодразделениеКомпании = &ПодразделениеКомпании
		|					И Номенклатура В ИЕРАРХИИ (&Группа)) КАК ЗаказыРаспределениеОстатки
		|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура";
	
	Если ВыбраннаяГруппа = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Номенклатура В ИЕРАРХИИ (&Группа)","");
	Иначе
		Запрос.УстановитьПараметр("Группа", ВыбраннаяГруппа);	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("НаДату", ?(НЕ ЗначениеЗаполнено(Объект.Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("ВидДополнительногоРеквизита", Перечисления.ДополнительныеРеквизитыНоменклатуры.МинимальныйОстаток);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);

	Возврат Запрос;
	
КонецФункции

// Обработчик заполнения документа минимальными остатками по предыдущим заказам
//
Функция ТоварыМинимальнымиОстаткамиПоПредыдущимЗаказам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Контрагент = ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос 			= Новый Запрос;
	ТекстЗапроса 	= 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ДополнительныеРеквизитыНоменклатурыСрезПоследних.ЗначениеРеквизита, 0) КАК МинимальныйОстаток,
		|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) + ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноОстаток, 0) КАК ТекущийОстаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеРеквизитыНоменклатуры.СрезПоследних(
		|		&НаДату,
		|		ДополнительныйРеквизит = &ВидДополнительногоРеквизита
		|		    И ПодразделениеКомпании = &ПодразделениеКомпании) КАК ДополнительныеРеквизитыНоменклатурыСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&НаДату, СкладКомпании.ПодразделениеКомпании = &ПодразделениеКомпании) КАК ОстаткиТоваровКомпанииОстатки
		|			ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|		&НаДату,
		|		ЗаказПоставщику.ПодразделениеКомпании = &ПодразделениеКомпании
		|		    И Контрагент = &Контрагент) КАК ЗаказыПоставщикамОстатки
		|			ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|		ПО ЗаказыПоставщикам.Номенклатура = ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	ЗаказыПоставщикам.Контрагент = &Контрагент
		|	И ЗаказыПоставщикам.Период >= &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура";

	Запрос.Текст 	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Период",НачалоДня(ПараметрыЗаполнения.ДатаРасчета));
	Запрос.УстановитьПараметр("НаДату", ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("ВидДополнительногоРеквизита", Перечисления.ДополнительныеРеквизитыНоменклатуры.МинимальныйОстаток);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.МинимальныйОстаток > Выборка.ТекущийОстаток Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура	= Выборка.Номенклатура;
			НоваяСтрока.Количество		= Выборка.МинимальныйОстаток - Выборка.ТекущийОстаток;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЕсли; 
	КонецЦикла;
	
	ПерерасчетРаспределения(Объект);
	
КонецФункции // ТоварыМинимальнымиОстаткамиПоПредыдущимЗаказам()

// Обработчик заполнения документа на основании продаж товаров поставщика
//
Функция ТоварыНаОснованииПродаж(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого СтрокаТовара Из ПараметрыЗаполнения.ТоварыНаОснованииПродаж Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
		НоваяСтрока.Количество = СтрокаТовара.Количество;
		Документы.ЗаказПоставщику.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
	КонецЦикла;
		
	Документы.ЗаказПоставщику.ПерерасчетРаспределения(Объект);
	
КонецФункции // ТоварыНаОснованииПродаж()

// Обработчик заполнения документа на основании расчета заказа
//
Функция ТоварыРасчетЗаказа(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ ПараметрыЗаполнения.ТоварыРасчетЗаказа = Неопределено Тогда
		Объект.Товары.Очистить(); Объект.РаспределениеЗаказа.Очистить();
		Для Каждого Строка Из ПараметрыЗаполнения.ТоварыРасчетЗаказа Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			
			НоваяСтрока.Номенклатура = Строка.Ключ;
			Документы.ЗаказПоставщику.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			
			НоваяСтрока.Количество   = Строка.Значение;
			Документы.ЗаказПоставщику.ТоварыКоличествоПриИзменении(Объект, НоваяСтрока);
		КонецЦикла;
		Документы.ЗаказПоставщику.ПерерасчетРаспределения(Объект);
	КонецЕсли;
	
КонецФункции // ТоварыРасчетЗаказа()

Функция РаспределениеЗаказаЗаполнитьПоЗаказу(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);	
	ПерерасчетРаспределения(Объект);
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоЗаказу()

// Обработчик заполнения документа по заказу покупателя
//
Функция РаспределениеЗаказаЗаполнитьПоЗаказуПокупателя(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Заказ = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "Заказ", Неопределено);
	ЗаполнитьТЧПоЗаказам(Объект, ПараметрыДействия, Заказ, "ЗаказПокупателя");
	
	ПерерасчетРаспределения(Объект);
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоЗаказу()

// Обработчик заполнения документа по внутреннему заказу
//
Функция РаспределениеЗаказаЗаполнитьПоВнутреннемуЗаказу(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Заказ = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "Заказ", Неопределено);
	ЗаполнитьТЧПоЗаказам(Объект, ПараметрыДействия, Заказ, "ЗаказВнутренний");
	
	ПерерасчетРаспределения(Объект);
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоЗаказу()

Функция ЗаполнитьТЧПоЗаказам(Объект, ПараметрыДействия, Заказ, ВидЗаказа)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|				ИЛИ ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент = 0
	|			ТОГДА ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВПутиЗаказыКлиентовОстатки.РезервОстаток, 0)
	|		ИНАЧЕ (ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВПутиЗаказыКлиентовОстатки.РезервОстаток, 0)) / ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент, Заказ ССЫЛКА Документ." + ВидЗаказа + ") КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент, ЗаказПокупателя ССЫЛКА Документ." + ВидЗаказа + ") КАК ЗаказыРаспределениеОстатки
	|		ПО ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	|			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	|			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВПутиЗаказыКлиентов.Остатки(&Момент, Заказ ССЫЛКА Документ." + ВидЗаказа + ") КАК ТоварыВПутиЗаказыКлиентовОстатки
	|		ПО ЗаказыПокупателейОстатки.Заказ = ТоварыВПутиЗаказыКлиентовОстатки.Заказ
	|			И ЗаказыПокупателейОстатки.Номенклатура = ТоварыВПутиЗаказыКлиентовОстатки.Номенклатура
	|			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВПутиЗаказыКлиентовОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток - ЕСТЬNULL(ТоварыВПутиЗаказыКлиентовОстатки.РезервОстаток, 0) > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", ?(НЕ ЗначениеЗаполнено(Объект.Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Если Заказ <> Неопределено Тогда
		МассивСтрок = ТаблицаЗаказов.НайтиСтроки(Новый Структура("ЗаказПокупателя", Заказ));
		ВсегоСтрок 	= МассивСтрок.Количество();
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			НоваяСтрока 							= Объект.РаспределениеЗаказа.Добавить();
			НоваяСтрока.Номенклатура               	= ТекСтрока.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= ТекСтрока.ХарактеристикаНоменклатуры;
			РаспределениеЗаказаНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			НоваяСтрока.Количество 					= ТекСтрока.Количество;
			РаспределениеЗаказаКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			НоваяСтрока.ЗаказПокупателя 			= ТекСтрока.ЗаказПокупателя;
			РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
		
КонецФункции

// Обработчик заполнения документа по заказам
//
Функция РаспределениеЗаказаЗаполнитьПоЗаказам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	0 КАК Цена,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент ЕСТЬ NULL ИЛИ ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент = 0 ТОГДА
	|			(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0))
	|		ИНАЧЕ
	|			(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) / ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаДату, ) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&НаДату, ) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ЗаказыПокупателейОстатки.Заказ                      = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	|	И ЗаказыПокупателейОстатки.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|	
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
	|	И НЕ ЗаказыПокупателейОстатки.Заказ.ДокументОснование ССЫЛКА Документ.ЗаказНаряд";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтрокаРаспределения = Объект.РаспределениеЗаказа.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрокаРаспределения,Выборка);
		РаспределениеЗаказаНоменклатураПриИзменении(Объект, ТекСтрокаРаспределения, ПараметрыДействия);
		РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, ТекСтрокаРаспределения, ПараметрыДействия);
	КонецЦикла;
	ПерерасчетРаспределения(Объект);
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоЗаказам()

// Обработчик заполнения документа по предоплаченным заказам
//
Функция РаспределениеЗаказаЗаполнитьПоПредоплаченнымЗаказам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	               |	0 КАК Цена,
	               |	ВЫБОР
	               |		КОГДА ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент ЕСТЬ NULL 
	               |				ИЛИ ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент = 0
	               |			ТОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
	               |		ИНАЧЕ (ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) / ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	               |	КОНЕЦ КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаДату, ) КАК ЗаказыПокупателейОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&НаДату, ) КАК ЗаказыРаспределениеОстатки
	               |		ПО ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	               |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	               |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	               |ГДЕ
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
				   |	И НЕ ЗаказыПокупателейОстатки.Заказ.ДокументОснование ССЫЛКА Документ.ЗаказНаряд";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	Выборка = Запрос.Выполнить();
	
	ТаблицаРаспределения = Выборка.Выгрузить();
	КопияТаблицыРаспределения = Выборка.Выгрузить();
	КопияТаблицыРаспределения.Свернуть("ЗаказПокупателя");
	
	ДокументОбъектСтруктура=Новый Структура();
	ДокументОбъектСтруктура.Вставить("Дата"          , Объект.Дата);
	ДокументОбъектСтруктура.Вставить("МоментВремени" , ?(Объект.Проведен, Ссылка.ПолучитьОбъект().МоментВремени(),Новый МоментВремени(Объект.Дата)));
	ДокументОбъектСтруктура.Вставить("Проведен"      , Объект.Проведен);
	
	ТаблицаДолгов = ЗащищенныеФункцииСервер.ДолгиПоПредоплате(ДокументОбъектСтруктура, КопияТаблицыРаспределения.ВыгрузитьКолонку("ЗаказПокупателя"), 0);
	
	Для Каждого ТекСтрокаРаспределения Из ТаблицаРаспределения Цикл
		СтрокаПоиска = ТаблицаДолгов.Найти(ТекСтрокаРаспределения.ЗаказПокупателя, "Заказ");
		Если СтрокаПоиска = Неопределено Тогда
			НоваяСтрока = Объект.РаспределениеЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаРаспределения Из Объект.РаспределениеЗаказа Цикл
		РаспределениеЗаказаНоменклатураПриИзменении(Объект, ТекСтрокаРаспределения, ПараметрыДействия);
		РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, ТекСтрокаРаспределения, ПараметрыДействия);
	КонецЦикла;
	ПерерасчетРаспределения(Объект);
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоПредоплаченнымЗаказам()

// Обработчик заполнения документа по поставщику
//
Функция РаспределениеЗаказаЗаполнитьПоПоставщику(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Контрагент=ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ТабличнаяЧастьТоваров.ЗаказОтправленПоставщику, ЛОЖЬ) КАК ЗаказОтправленПоставщику,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент ЕСТЬ NULL 
	|				ИЛИ ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент = 0
	|			ТОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
	|		ИНАЧЕ (ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) / ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.Ссылка КАК Заказ,
	|		ЗаказТовары.Номенклатура КАК Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		МАКСИМУМ(ЗаказТовары.ЗаказОтправленПоставщику) КАК ЗаказОтправленПоставщику
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ЗаказТовары
	|	ГДЕ
	|		((ВЫРАЗИТЬ(ЗаказТовары.Поставщик КАК Справочник.Контрагенты)) = &Поставщик
	|				ИЛИ ВЫРАЗИТЬ(ЗаказТовары.Поставщик КАК Справочник.ПрайсЛистыКонтрагентов).Владелец = &Поставщик)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказТовары.Ссылка,
	|		ЗаказТовары.Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказТовары.Ссылка,
	|		ЗаказТовары.Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ЗаказВнутренний.Товары КАК ЗаказТовары
	|	ГДЕ
	|		((ВЫРАЗИТЬ(ЗаказТовары.Поставщик КАК Справочник.Контрагенты)) = &Поставщик
	|				ИЛИ ВЫРАЗИТЬ(ЗаказТовары.Поставщик КАК Справочник.ПрайсЛистыКонтрагентов).Владелец = &Поставщик)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказТовары.Ссылка,
	|		ЗаказТовары.Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры) КАК ТабличнаяЧастьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент, ) КАК ЗаказыПокупателейОстатки
	|		ПО ТабличнаяЧастьТоваров.Заказ = ЗаказыПокупателейОстатки.Заказ
	|			И ТабличнаяЧастьТоваров.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|			И ТабличнаяЧастьТоваров.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент, ) КАК ЗаказыРаспределениеОстатки
	|		ПО (ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя)
	|			И (ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура)
	|			И (ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры)
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент"   , ?(Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.РаспределениеЗаказа.Добавить();
			
			НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			РаспределениеЗаказаНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
			НоваяСтрока.Количество = Выборка.Количество;
			РаспределениеЗаказаКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
			НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
			РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
			НоваяСтрока.ЗаказОтправленПоставщику = Выборка.ЗаказОтправленПоставщику;
		КонецЦикла;
		
		ПерерасчетРаспределения(Объект);
	КонецЕсли;
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоПоставщику()

// Обработчик заполнения документа по заказам сервиса - заказам покупателей, введенных на основании заказ-нарядов.
//
Функция РаспределениеЗаказаЗаполнитьПоЗаказамСервиса(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	0 КАК Цена,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент ЕСТЬ NULL 
	|				ИЛИ ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент = 0
	|			ТОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
	|		ИНАЧЕ (ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) / ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаДату, ) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&НаДату, ) КАК ЗаказыРаспределениеОстатки
	|		ПО ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	|			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	|			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
	|	И ЗаказыПокупателейОстатки.Заказ.ДокументОснование ССЫЛКА Документ.ЗаказНаряд
	|	И НЕ ЗаказыПокупателейОстатки.Заказ.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтрокаРаспределения = Объект.РаспределениеЗаказа.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрокаРаспределения,Выборка);
		РаспределениеЗаказаНоменклатураПриИзменении(Объект, ТекСтрокаРаспределения, ПараметрыДействия);
		РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, ТекСтрокаРаспределения, ПараметрыДействия);
	КонецЦикла;
	ПерерасчетРаспределения(Объект);
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоЗаказам()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказПоставщику",
		"ПФ_MXL_ЗаказПоставщику",
		НСтр("ru = 'Заказ поставщику'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаказПоставщику") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ЗаказПоставщику",
															НСтр("ru = 'Заказ поставщику'"),
															ПечатьЗаказПоставщику(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Формирует печатную форму "ЗаказПоставщику"
//
Функция ПечатьЗаказПоставщику(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПоставщику.ПФ_MXL_ЗаказПоставщику");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Заказ поставщику'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = 
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ИсполнительКонтрагент", "ИсполнительКонтрагент"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ЗаказчикОрганизация", "ЗаказчикОрганизация"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьЗаказПоставщику()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Справочники.ПодтверждающиеДокументы);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаменаВЗаказеПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаЗаказаПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПлатежноеПоручение);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРаспределенияЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетОтПоставщика);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаказПоставщику);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

