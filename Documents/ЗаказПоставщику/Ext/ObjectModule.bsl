// Модуль документа "Заказ поставщику"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
			Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
				
				НоваяСтрока 						   = Товары.Добавить();	
				НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
				НоваяСтрока.Количество 				   = Строка.Количество;
				НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
				
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
	
	Если
		ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ЗаказНаряд")
		И ТипЗнч(ДанныеЗаполнения.ЗаказНаряд) = Тип("ДокументСсылка.ЗаказНаряд")
	Тогда
		
		ДополнительныеСвойства.Вставить("ТоварыИМатериалы", ДанныеЗаполнения.ТоварыИМатериалы);
		
		Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения.ЗаказНаряд, ТекстЗаполнения, СтандартнаяОбработка) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СрокПоставкиДней = Неопределено;
	
	Если НЕ ДоговорВзаиморасчетов.Пустая() Тогда
		
		СрокПоставкиДней = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорВзаиморасчетов, "СрокПоставки");
		
	КонецЕсли;
	
	Если (СрокПоставкиДней = Неопределено ИЛИ СрокПоставкиДней <= 0) И НЕ Контрагент.Пустая() Тогда
		
		СрокПоставкиДней = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СрокПоставки");
		
	КонецЕсли;
	
	Если СрокПоставкиДней <> Неопределено Тогда
		
		СрокПоставки = НачалоДня(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) + СрокПоставкиДней * 60 * 60 * 24;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		// заполним по копируемому документу
		Товары.Загрузить(ОбъектКопирования.Товары.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим параметры запрета для номенклатуры
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ ДополнительныеСвойства.Свойство("ЭтоВосстановлениеПоследовательностей")
	Тогда
		
		ТаблицаЗаказов = РаспределениеЗаказа.Выгрузить(, "ЗаказПокупателя");
		ТаблицаЗаказов.Свернуть("ЗаказПокупателя");
		ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказПокупателя"));
		
		Если ТаблицаДолгов.Количество()>0 Тогда
			Для Каждого ТекСтрока Из РаспределениеЗаказа Цикл
				СтрокаПоиска = ТаблицаДолгов.Найти(ТекСтрока.ЗаказПокупателя, "Заказ");
				Если НЕ СтрокаПоиска = Неопределено Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Распределение заказа. Строка: <%1>, заказ: <%2> нельзя распределить. Долг по предоплате составляет: <%3> <%4>'"),
						ТекСтрока.НомерСтроки,
						СокрЛП(ТекСтрока.ЗаказПокупателя),
						Формат(СтрокаПоиска.Долг,"ЧЦ=15; ЧДЦ=2"),
						СокрЛП(СтрокаПоиска.Валюта)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
	Если НЕ Отказ
		И ПолучитьЗначениеПараметраСтруктуры(ЭтотОбъект.ДополнительныеСвойства, "РежимЗаписи") = РежимЗаписиДокумента.Запись
	Тогда
		РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(
			ЭтотОбъект.Ссылка,
			Справочники.ВидыСостоянийЗаказНарядов.Новый
		);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование заказа поставщику
	НаборЗаписейЗаказыПоставщикам=Движения.ЗаказыПоставщикам;
	НаборЗаписейЗаказыПоставщикам.РежимПроведения=РежимПроведения;
	НаборЗаписейЗаказыПоставщикам.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейЗаказыПоставщикам.РезультатЗапросаПоТоварам=Неопределено;
	НаборЗаписейЗаказыПоставщикам.ЗаказПоставщику=Ссылка;
	НаборЗаписейЗаказыПоставщикам.Контрагент=Контрагент;
	Отказ=НЕ НаборЗаписейЗаказыПоставщикам.Приход() ИЛИ Отказ;
	Если НЕ Отказ Тогда
		НаборЗаписейЗаказыПоставщикам.Записать();
	КонецЕсли; 
	
	// зафиксируем распределение заказов покупателей на заказе поставщику
	НаборЗаписейЗаказыРаспределение=Движения.ЗаказыРаспределение;
	НаборЗаписейЗаказыРаспределение.РежимПроведения=РежимПроведения;
	НаборЗаписейЗаказыРаспределение.ДокументОбъект=ЭтотОбъект;
	Запрос=Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ДокументТовары.Количество*ДокументТовары.Коэффициент КАК Количество
		|ИЗ
		|	Документ.ЗаказПоставщику.РаспределениеЗаказа КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	НаборЗаписейЗаказыРаспределение.РезультатЗапросаПоТоварам=Запрос.Выполнить();
	НаборЗаписейЗаказыРаспределение.ЗаказПокупателя=Неопределено; //Заказ находится в табличной части
	НаборЗаписейЗаказыРаспределение.ЗаказПоставщика=Ссылка;
	Отказ=НЕ НаборЗаписейЗаказыРаспределение.Приход() ИЛИ Отказ;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Бюджет закупок"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_БюджетЗакупок(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Для Каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока 				= Товары.Добавить();
			НоваяСтрока.Номенклатура 	= ТекСтрока.Номенклатура;
			Документы.ЗаказПоставщику.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока,ДополнительныеСвойства.ПараметрыДействия);
			Если НоваяСтрока.Коэффициент = 0 Тогда
				НоваяСтрока.Количество 	= ТекСтрока.Количество;
			Иначе
				НоваяСтрока.Количество 	= ТекСтрока.Количество/НоваяСтрока.Коэффициент
			КонецЕсли;
			НоваяСтрока.Цена 			= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.Цена, ВалютаУпр, КурсВалютыУпр,
				ВалютаДокумента, КурсДокумента);
			Документы.ЗаказПоставщику.ТоварыЦенаПриИзменении(ЭтотОбъект, НоваяСтрока,ДополнительныеСвойства.ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_БюджетЗакупок()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ПраваИНастройкиПользователя.Значение("ОсновнойПоставщик", ЭтотОбъект);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Документы.ЗаказПоставщику.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	// Для документов покупки
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки", ЭтотОбъект);
	
	Товары.Очистить();
	РаспределениеЗаказа.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВПутиЗаказыКлиентовОстатки.РезервОстаток, 0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&КонецПериода, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&КонецПериода, ЗаказПокупателя = &Заказ) КАК ЗаказыРаспределениеОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	|			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВПутиЗаказыКлиентов.Остатки(&КонецПериода, Заказ = &Заказ) КАК ТоварыВПутиЗаказыКлиентовОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВПутиЗаказыКлиентовОстатки.Номенклатура
	|			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВПутиЗаказыКлиентовОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВПутиЗаказыКлиентовОстатки.РезервОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("Заказ",        ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонецПериода", ?(Ссылка.Пустая(), ТекущаяДатаСеанса(), Ссылка.Дата));
	Выборка		= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаРаспределения 							= РаспределениеЗаказа.Добавить();
		НоваяСтрокаРаспределения.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрокаРаспределения.Количество                 = Выборка.Количество;
		НоваяСтрокаРаспределения.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрокаРаспределения.ЗаказПокупателя            = Выборка.Заказ;
		НоваяСтрокаРаспределения.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		
		Документы.ЗаказПоставщику.РаспределениеЗаказаЕдиницаИзмеренияПриИзменении(ЭтотОбъект,
			НоваяСтрокаРаспределения, ДополнительныеСвойства.ПараметрыДействия);
		
		Если НЕ НоваяСтрокаРаспределения.Коэффициент = 0 Тогда
			НоваяСтрокаРаспределения.Количество = НоваяСтрокаРаспределения.Количество / НоваяСтрокаРаспределения.Коэффициент;
		КонецЕсли;
		
		Документы.ЗаказПоставщику.РаспределениеЗаказаНоменклатураПриИзменении(ЭтотОбъект,
			НоваяСтрокаРаспределения, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	Документы.ЗаказПоставщику.ПерерасчетРаспределения(ЭтотОбъект);
	Если ДополнительныеСвойства.ПараметрыДействия.Свойство("ТипЦен") Тогда
		ДополнительныеСвойства.ПараметрыДействия.ТипЦен = ТипЦен;
	Иначе
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ТипЦен", ТипЦен);
	КонецЕсли;
	Для Каждого СтрокаТоваров Из Товары Цикл
		Документы.ЗаказПоставщику.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТоваров,
			ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	СуммаДокумента = Товары.Итог("СуммаВсего");
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по внутреннему заказу
	Возврат ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ-Наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Заказ-наряд находится в состоянии ""Заявка"".
			|Вводить заказы на основании заказ-нарядов в состоянии ""Заявка"" запрещено.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Инициализируем параметры действия
	ТоварыИМатериалы = Неопределено;
	ДополнительныеСвойства.Свойство("ТоварыИМатериалы", ТоварыИМатериалы);
	Контрагент = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойПоставщик);
	Документы.ЗаказПоставщику.КонтрагентПриИзменении(ЭтотОбъект);
	
	Если ТоварыИМатериалы = Неопределено Тогда
		ТоварыИМатериалы = Новый Структура;
	КонецЕсли;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|		ЗаказНарядТовары.Количество КАК Количество,
	|		ЗаказНарядТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНарядТовары.Коэффициент КАК Коэффициент,
	|		ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|	ГДЕ
	|		ЗаказНарядТовары.Ссылка = &ЗаказНаряд" + ?(ТоварыИМатериалы.Свойство("Товары"), " И 
	|		ЗаказНарядТовары.НомерСтроки В (&НомераТоваров)", "") + "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказНарядМатериалы.Номенклатура КАК Номенклатура,
	|		ЗаказНарядМатериалы.Количество КАК Количество,
	|		ЗаказНарядМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНарядМатериалы.Коэффициент КАК Коэффициент,
	|		ЗаказНарядМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Документ.ЗаказНаряд.Материалы КАК ЗаказНарядМатериалы
	|	ГДЕ
	|		ЗаказНарядМатериалы.Ссылка = &ЗаказНаряд" + ?(ТоварыИМатериалы.Свойство("Материалы"), " И 
	|		ЗаказНарядМатериалы.НомерСтроки В (&НомераМатериалов)", "") + ") КАК ТаблицаТоваров
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры
	|";
	Запрос.УстановитьПараметр("ЗаказНаряд", ДанныеЗаполнения);
	
	Если ТоварыИМатериалы.Свойство("Товары") Тогда
		Запрос.УстановитьПараметр("НомераТоваров", ТоварыИМатериалы.Товары);
	КонецЕсли;
	
	Если ТоварыИМатериалы.Свойство("Материалы") Тогда
		Запрос.УстановитьПараметр("НомераМатериалов", ТоварыИМатериалы.Материалы);
	КонецЕсли;
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	// Получим остатки запасов
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	МассивРежимовСписания = Новый Массив;
	МассивРежимовСписания.Добавить(Перечисления.РежимыАвтоСписанияХарактеристик.РучноеСписание);
	МассивРежимовСписания.Добавить(Перечисления.РежимыАвтоСписанияХарактеристик.ПустаяСсылка());
	
	МассивТоваров               = Новый Массив;
	МассивХарактеристик         = Новый Массив;
	МассивТоваровАвтоСписание   = Новый Массив;
	МассивТоваровРучноеСписание = Новый Массив;
	Для Каждого ТекЭлемент Из ТаблицаТоваров Цикл
		Если ТекЭлемент.ХарактеристикаНоменклатуры = ПустаяХарактеристика И 
			МассивРежимовСписания.Найти(ТекЭлемент.Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик) = Неопределено Тогда
			Если МассивТоваровАвтоСписание.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
				МассивТоваровАвтоСписание.Добавить(ТекЭлемент.Номенклатура);
			КонецЕсли;
		Иначе
			Если МассивТоваровРучноеСписание.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
				МассивТоваровРучноеСписание.Добавить(ТекЭлемент.Номенклатура);
			КонецЕсли;
			Если МассивХарактеристик.Найти(ТекЭлемент.ХарактеристикаНоменклатуры) = Неопределено Тогда
				МассивХарактеристик.Добавить(ТекЭлемент.ХарактеристикаНоменклатуры);
			КонецЕсли;
		КонецЕсли;
		Если МассивТоваров.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
			МассивТоваров.Добавить(ТекЭлемент.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	РезервыПоЗаказНаряду              = ДанныеЗаполнения.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	ОснованиеЗаказНаряда              = ДанныеЗаполнения.ДокументОснование;
	ОснованиеСводногоРемонтногоЗаказа = ДанныеЗаполнения.СводныйРемонтныйЗаказ.ДокументОснование;
	
	ДопОтбор = "";
	Если ТипЗнч(ОснованиеЗаказНаряда) = Тип("ДокументСсылка.ЗаказПокупателя") И ЗначениеЗаполнено(ОснованиеЗаказНаряда) Тогда
		ДопОтбор = " ИЛИ Заказ = &ЗаказОснование";
	КонецЕсли;
	
	ДопОтборЗаказ = "";
	Если ТипЗнч(ОснованиеСводногоРемонтногоЗаказа) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(ОснованиеСводногоРемонтногоЗаказа) Тогда
		ДопОтборЗаказ = " ИЛИ Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа";
	КонецЕсли;
	
	ЗапросПоЗаказам = Новый Запрос;
	ЗапросПоЗаказам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъединенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединенныйЗапрос.Заказано) КАК Заказано
	|ИЗ (ВЫБРАТЬ
	|		ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
	|		ЗаказыПоставщикамОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказыПоставщикамОбороты.ЗаказаноОстаток КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура В (&Номенклатура)) КАК ЗаказыПоставщикамОбороты
	|	ГДЕ
	|		ЗаказыПоставщикамОбороты.ЗаказПоставщику.ДокументОснование = &ЗаказНаряд
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура,
	|		ЗаказыПокупателей.ХарактеристикаНоменклатуры,
	|		ЗаказыПокупателей.ЗаказаноОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, (Заказ.ДокументОснование = &ЗаказНаряд" + ?(РезервыПоЗаказНаряду, ДопОтборЗаказ, " ИЛИ Контрагент = &Контрагент") +ДопОтбор+") И Номенклатура В (&Номенклатура)) КАК ЗаказыПокупателей
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВПроизводствеОстатки.Номенклатура,
	|		ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
	|		ТоварыВПроизводствеОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК ТоварыВПроизводствеОстатки
	|) КАК ОбъединенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры";
	
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказНаряд",                        ДанныеЗаполнения);
	ЗапросПоЗаказам.УстановитьПараметр("Контрагент",                        ДанныеЗаполнения.Контрагент);
	ЗапросПоЗаказам.УстановитьПараметр("Номенклатура",                      МассивТоваров);
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказОснование",                    ОснованиеЗаказНаряда);
	ЗапросПоЗаказам.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", ОснованиеСводногоРемонтногоЗаказа);
	
	ТаблицаПоЗаказам = ЗапросПоЗаказам.Выполнить().Выгрузить();
	
	ЕстьАвтоСписаниеХарактеристик = (МассивТоваровАвтоСписание.Количество() > 0);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки
	|ГДЕ
	|	(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток)>0" + ?(ЕстьАвтоСписаниеХарактеристик, "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура,
	|	Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, Номенклатура В (&НоменклатураАвтоСписание)) КАК ОстаткиТоваровКомпанииОстатки
	|ГДЕ
	|	(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток)>0", "");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура",                      МассивТоваровРучноеСписание);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",        МассивХарактеристик);
	Запрос.УстановитьПараметр("НоменклатураАвтоСписание",          МассивТоваровАвтоСписание);
	Запрос.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", ОснованиеСводногоРемонтногоЗаказа);
	
	ТаблицаЗапасов = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапасов.Индексы.Добавить("Номенклатура");
	
	СтруктураОтбора = Новый Структура;
	
	// Поместим в табличную часть товаров
	Для Каждого СтрокаЗаказНаряда Из ТаблицаТоваров Цикл
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаЗаказНаряда.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаЗаказНаряда.ХарактеристикаНоменклатуры);
		
		НайденныеЗапасы = ТаблицаЗапасов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеЗапасы.Количество() > 0 Тогда
			Остаток = Окр(НайденныеЗапасы[0].Остаток / СтрокаЗаказНаряда.Коэффициент, 3);
		Иначе
			Остаток = 0;
		КонецЕсли;
		
		Если Остаток<СтрокаЗаказНаряда.Количество Тогда
			
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаЗаказНаряда.Номенклатура;
			НоваяСтрока.Количество                 = СтрокаЗаказНаряда.Количество-Остаток;
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаЗаказНаряда.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = СтрокаЗаказНаряда.Коэффициент;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаЗаказНаряда.ХарактеристикаНоменклатуры;
			
			Документы.ЗаказПоставщику.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
	// Уменьшим количество на величину уже заказанного
	Для Каждого СтрокаЗаказов Из ТаблицаПоЗаказам Цикл
		Заказано = СтрокаЗаказов.Заказано;
		МассивСтрокТоваров = ЭтотОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаЗаказов.Номенклатура, СтрокаЗаказов.ХарактеристикаНоменклатуры));
		Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
			
			Если Заказано = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ЗаказаноБаз = Окр(Заказано / СтрокаТоваров.Коэффициент, 3);
			ЗаказаноПоСтроке = Мин(ЗаказаноБаз, СтрокаТоваров.Количество);
			СтрокаТоваров.Количество = СтрокаТоваров.Количество - ЗаказаноПоСтроке;
			Заказано = Заказано - ЗаказаноПоСтроке * СтрокаТоваров.Коэффициент;
			
			Документы.ЗаказПоставщику.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаТоваров);
			
		КонецЦикла;
	КонецЦикла;
	
	// Удалим пустые строки из заказа
	МассивСтрокТоваров=ЭтотОбъект.Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
		ЭтотОбъект.Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УдаляемыеСтроки = Товары.НайтиСтроки(Новый Структура("Количество", 0));
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		
		Товары.Удалить(Строка);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТоварыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Товары").Выгрузить();
	КопияТоваров = Товары.Выгрузить();
	КопияТоваров.Свернуть(
		"Номенклатура,ЕдиницаИзмерения,Коэффициент,ХарактеристикаНоменклатуры",
		"Количество,Сумма,СуммаНДС,СуммаВсего");
	
	// Оставим заполнение товаров как есть
	Если ТоварыОснования.Количество() = КопияТоваров.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КопияТоваров, Товары);
	УсловиеПоиска = Новый Структура("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаТоваров);
		СтрокиТоваровОснования = ТоварыОснования.НайтиСтроки(УсловиеПоиска);
		СтрокаТоваров.СтавкаНДС = СтрокиТоваровОснования[0].СтавкаНДС;
		СтрокаТоваров.Цена = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество, 2);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("ЗапретЗакупки", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

#КонецОбласти

#КонецЕсли
