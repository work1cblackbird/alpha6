
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(
		ЭтаФорма,
		"РасшифровкаОплаты",
		"Доступность",
		"Просмотр",
		Метаданные.Отчеты.Взаиморасчеты);
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(
		ЭтаФорма,
		"ГруппаДанныеДляСчета",
		"Доступность",
		"Редактирование",
		Метаданные.Документы.СчетНаОплатуЗаАвтомобили);

	НастройкаПараметровВыбораСервиснойКампании();
	НастроитьВидимостьСтраницыTradeIn(ЭтотОбъект);
	УстановитьПараметрыСпискаОплат();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	// Конец Маркировка
	
	ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах(Объект, ИнформацияОСкидкахИМаркетинговыхПрограммах);
	
	ОбновитьИнформациюОРеестрах(Объект.Ссылка, ИнформацияОРеестреДокументов);
	
	УстановитьРасширенноеПредставлениеСрокаПоставки();
	УстановитьРасширенноеПредставлениеСрокаСнятияРезерва();
	
	// Заполним марку автомобиля по умолчанию
	ТекущаяМаркаПоУмолчанию = УчетныеПолитикиСервер.Значение(
		"МаркаПоУмолчанию", ТекущаяДатаСеанса(), ПараметрыСеанса.ПодразделениеКомпании
	);
	Если НЕ ЗначениеЗаполнено(Объект.Марка) Тогда
		Если ТекущаяМаркаПоУмолчанию = Справочники.Марки.ПустаяСсылка() Тогда
			Объект.Марка = Справочники.Марки.МаркаНеУказана;
		Иначе
			Объект.Марка = ТекущаяМаркаПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если НеСтандартнаяМарка(Объект.Марка) И Не Элементы.Найти("Модель") = Неопределено Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.Модель.ПараметрыВыбора, "Отбор.Марка", Объект.Марка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ЗначениеВРеквизитФормы(Объект.Автомобиль.ПолучитьОбъект(), "АвтомобильЗаказа");
	Иначе
		// Сделаем начальное заполнение полей автомобиля
		ЗаполнитьЗначенияСвойств(АвтомобильЗаказа, Объект, "Модель,ВариантКомплектации,Цвет,ЦветКод,ТипСалона");
		Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказа);
		АвтомобильЗаказа.НаименованиеПолное = НСтр("ru = '<будет создан при проведении документа>'");
	КонецЕсли;
	
	ПроверитьДеньгиНаОтмененныхЗаказах();
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;
	
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	УправлениеДиалогомАльфаАвтоКлиент.ПриОткрытии(ЭтотОбъект);
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПоступленияTradeIn");
	ОбновитьОтчетОРаспределении();
	
	УстановитьДоступностьЖалобы();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПараметрыДействия = Новый Структура;
	
	Если ИмяСобытия = "ЗаписанРеестр" И Источник = Объект.Ссылка Тогда
		ОбновитьИнформациюОРеестрах(Объект.Ссылка, ИнформацияОРеестреДокументов);
		Возврат;
	КонецЕсли;
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	// Конец Маркировка
	
	ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах(Объект, ИнформацияОСкидкахИМаркетинговыхПрограммах);
	ПроверитьДеньгиНаОтмененныхЗаказах();
	ОбновитьИнформациюОРеестрах(Объект.Ссылка, ИнформацияОРеестреДокументов);
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	НастроитьПараметрыВыбораЭлементовФормы();
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		
		ЗначениеВРеквизитФормы(Объект.Автомобиль.ПолучитьОбъект(), "АвтомобильЗаказа");
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		АвтомобильЗаказаОбъект = РеквизитФормыВЗначение("АвтомобильЗаказа");
		ЗаполнитьЗначенияСвойств(АвтомобильЗаказаОбъект, Объект);
		Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказаОбъект);
		ЗначениеВРеквизитФормы(АвтомобильЗаказаОбъект, "АвтомобильЗаказа");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;
	ТолькоПросмотр = НЕ Документы.ЗаказНаАвтомобиль.ДоступностьИзменения(Объект);
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
	УстановитьРасширенноеПредставлениеСрокаПоставки();
	УстановитьРасширенноеПредставлениеСрокаСнятияРезерва();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаказНаАвтомобиль", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если (НЕ ЗначениеЗаполнено(Объект.ДокументОснование))
		ИЛИ (НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
		
		Если Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты = -1 Тогда
			МинимальныйПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты");
		Иначе
			МинимальныйПроцентПредоплаты = Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты;
		КонецЕсли;
		
		Если МинимальныйПроцентПредоплаты > Объект.ПроцентПредоплаты Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Запрещено изменять минимальный процент предоплаты менее, чем %1 ' "), 
				Формат(МинимальныйПроцентПредоплаты, "ЧЦ=5; ЧДЦ=2; ЧН=0")) + "%",
				,
				"ПроцентПредоплаты", "Объект"
				,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьАвтомобиль = Истина;
	Если НЕ ЗначениеЗаполнено(АвтомобильЗаказа.Ссылка) Тогда
		
		Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ЗаписатьАвтомобиль = Ложь;
			
		ИначеЕсли АвтомобильЗаказа.НаименованиеПолное = НСтр("ru = '<будет создан при проведении документа>'") Тогда
			
			// Сформируем наименование автомобиля
			Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(
				АвтомобильЗаказа,
				Новый Структура("ОбновитьНаименование", Истина)
			);
			АвтомобильЗаказа.НаименованиеПолное = АвтомобильЗаказа.Наименование;
			
		КонецЕсли;
		
		АвтомобильОбъект = РеквизитФормыВЗначение("АвтомобильЗаказа", Тип("СправочникОбъект.Автомобили"));
		
	Иначе
		// Создаем объект из ссылки, чтоб избежать затирания закешированными данными измененной информации.
		АвтомобильОбъект = АвтомобильЗаказа.Ссылка.ПолучитьОбъект();
		
		ПереносимыеПоля = Новый Массив;
		ПереносимыеПоля.Добавить("Наименование");
		ПереносимыеПоля.Добавить("Модель");
		ПереносимыеПоля.Добавить("ВариантКомплектации");
		ПереносимыеПоля.Добавить("Цвет");
		ПереносимыеПоля.Добавить("ЦветКод");
		ПереносимыеПоля.Добавить("ТипСалона");
		ПереносимыеПоля.Добавить("ДатаОкончанияГарантии");
		ПереносимыеПоля.Добавить("ТипКПП");
		ПереносимыеПоля.Добавить("ТипКузова");
		ПереносимыеПоля.Добавить("ТипДвигателя");
		ПереносимыеПоля.Добавить("МодельДвигателя");
		
		// Проверим изменились ли значения реквизитов.
		ЗаписатьАвтомобиль = Ложь;
		Для Каждого ИмяРеквизита Из ПереносимыеПоля Цикл
			Если НЕ АвтомобильОбъект[ИмяРеквизита] = АвтомобильЗаказа[ИмяРеквизита] Тогда
				ЗаписатьАвтомобиль = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаписатьАвтомобиль Тогда
			ЗаполнитьЗначенияСвойств(АвтомобильОбъект, АвтомобильЗаказа, стрСоединить(ПереносимыеПоля, ","));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписатьАвтомобиль Тогда
		АвтомобильОбъект.ОбменДанными.Загрузка = Истина;
		АвтомобильОбъект.Заполнить(Новый Структура);
		
		Если НЕ ЗначениеЗаполнено(АвтомобильОбъект.Код) Тогда
			АвтомобильОбъект.УстановитьНовыйКод();
		КонецЕсли;
		
		Если АвтомобильОбъект.ЭтоНовый() Тогда
			АвтомобильОбъект.Родитель        = Справочники.Автомобили.АвтомобилиПоЗаказам;
			АвтомобильОбъект.Автор           = Пользователи.ТекущийПользователь();
			АвтомобильОбъект.ДатаРегистрации = Объект.Дата;
		КонецЕсли;
		
		Попытка
			АвтомобильОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не удалось записать автомобиль.'"),ТекущийОбъект,,, Отказ);
			Возврат;
		КонецПопытки;
		
		ТекущийОбъект.Автомобиль = АвтомобильОбъект.Ссылка;
		ЗначениеВРеквизитФормы(ТекущийОбъект.Автомобиль.ПолучитьОбъект(), "АвтомобильЗаказа");
		
		АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоступленийTradeIn();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	ОбновитьИнформациюОРеестрах(Объект.Ссылка, ИнформацияОРеестреДокументов);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);

КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусАвтомобиляПриИзменении(Элемент)
	
	СтатусАвтомобиляПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтатусАвтомобиляПриИзмененииНаСервере()
	
	Если НЕ Объект.СтатусАвтомобиля.ЗаказПокупателя Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Статус автомобиля <" + Объект.СтатусАвтомобиля
			+ "> не может быть использован для документов <Заказ на Автомобиль>.'"), Объект.Ссылка, "СтатусАвтомобиля");
		Объект.СтатусАвтомобиля = Справочники.СтатусыАвтомобилей.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Марка", Объект.Марка);
	ПараметрыОткрытия.Вставить("Модель", Объект.Модель);
	ПараметрыОткрытия.Вставить("ВариантКомплектации", Объект.ВариантКомплектации);
	ПараметрыОткрытия.Вставить("ТипСалона", Объект.ТипСалона);
	ПараметрыОткрытия.Вставить("ПодборИзЗаказаНаАвтомобиль", Истина);
	ПараметрыОткрытия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании); 
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		"ВыборАвтомобиля"
	);
	
	ОткрытьФорму(
		"Обработка.ПодборАвтомобиля.Форма",
		ПараметрыОткрытия,
		Элемент,
		Элемент,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТрейдИнПриИзменении(Элемент)
	
	ОбновитьОтчетОРаспределении();
	НастроитьВидимостьСтраницыTradeIn(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия); 
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.ЗаказчикПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Заказчик, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПредоплатыПриИзменении(Элемент)
	
	Объект.ПерерасчетОтПредоплаты = Ложь;
	ПараметрыДействия = Новый Структура;
	ПроцентПредоплатыПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ПроцентПредоплатыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредоплатыПриИзменении(Элемент)
	
	Объект.ПерерасчетОтПредоплаты = Истина;
	ПараметрыДействия = Новый Структура;
	СуммаПредоплатыПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СуммаПредоплатыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.СуммаПредоплатыПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.СтавкаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСНаАвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СтавкаНДСНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СрокПоставкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УстановитьРасширенноеПредставлениеСрокаПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПоставкиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СрокПоставкиПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СрокСнятияРезерваПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УстановитьРасширенноеПредставлениеСрокаСнятияРезерва();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокСнятияРезерваПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СрокСнятияРезерваПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СуммаНДСНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.СуммаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСНаАвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СуммаНДСНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура МаркаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Объект.Модель = Справочники.Модели.ПустаяСсылка();
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаПриИзменении(Элемент = Неопределено)
	
	Если Элементы.Найти("Модель") <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.Марка) И НеСтандартнаяМарка(Объект.Марка) Тогда
			
			УправлениеДиалогомАльфаАвтоКлиент.ОбновитьПараметрВыбора(
				Элементы.Модель.ПараметрыВыбора,
				"Отбор.Марка",
				Объект.Марка
			);
			
		Иначе
			
			УправлениеДиалогомАльфаАвтоКлиент.УдалитьПараметрВыбора(Элементы.Модель.ПараметрыВыбора, "Отбор.Марка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МаркаМодели = МаркаМодели(Объект.Модель);
	Если НЕ МаркаМодели = ВыбранноеЗначение И ЗначениеЗаполнено(Объект.Модель) Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Вопрос", "ВопросСоответствияМарок");
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Текущая модель марки <%1>. Выбрана марка автомобиля <%2>.
				|Подтвердить выбор марки и очистить модель?'"),
			МаркаМодели,
			ВыбранноеЗначение
		);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МодельПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПараметрыДействия.Вставить("АвтомобильЗаказа", АвтомобильЗаказа);
	
	Документы.ЗаказНаАвтомобиль.МодельПриИзменении(Объект, ПараметрыДействия);
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказа);
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	МодельПриИзмененииНаСервере(ПараметрыДействия);
	УдалитьНесовместимыеДополнительныеОпции();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура МодельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Марка", Объект.Марка);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму(
		"Справочник.Модели.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , ,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыОткрытия),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервере
Процедура ВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПараметрыДействия.Вставить("АвтомобильЗаказа", АвтомобильЗаказа);
	
	Документы.ЗаказНаАвтомобиль.ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
	
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказа, ПараметрыДействия);
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;
	
	ОбновитьБазовыеОпции();
	НастроитьПараметрыВыбораОпций();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантКомплектацииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия);
	УдалитьНесовместимыеДополнительныеОпции();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЦветПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// добавим параметр автомобиль заказа
	ПараметрыДействия.Вставить("АвтомобильЗаказа", АвтомобильЗаказа);
	Документы.ЗаказНаАвтомобиль.ЦветПриИзменении(Объект, ПараметрыДействия);
	
	// вызовем обработчки заполнения автомобиля заказа
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказа);
	
	УправлениеДиалогомНаСервере();
	
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЦветПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЦветКодПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПараметрыДействия.Вставить("АвтомобильЗаказа", АвтомобильЗаказа);
	Документы.ЗаказНаАвтомобиль.ЦветКодПриИзменении(Объект, ПараметрыДействия);
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказа);
	
	УправлениеДиалогомНаСервере();
	
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура ЦветКодПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЦветКодПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТипСалонаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПараметрыДействия.Вставить("АвтомобильЗаказа", АвтомобильЗаказа);
	
	Документы.ЗаказНаАвтомобиль.ТипСалонаПриИзменении(Объект, ПараметрыДействия);
	
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказа, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура ТипСалонаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ТипСалонаПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ТипСалонаПриИзменении()

&НаКлиенте
Процедура ТипКПППриИзменении(Элемент)
	
	АвтомобильЗаказа.ТипКПП = Объект.ТипКПП;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКузоваПриИзменении(Элемент)
	
	АвтомобильЗаказа.ТипКузова = Объект.ТипКузова;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДвигателяПриИзменении(Элемент)
	
	АвтомобильЗаказа.ТипДвигателя = Объект.ТипДвигателя;
	
КонецПроцедуры

&НаСервере
Процедура МодельДвигателяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// добавим параметр автомобиль заказа
	ПараметрыДействия.Вставить("АвтомобильЗаказа", АвтомобильЗаказа);
	
	Документы.ЗаказНаАвтомобиль.МодельДвигателяПриИзменении(Объект, ПараметрыДействия);
	
	// вызовем обработчки заполнения автомобиля заказа
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(АвтомобильЗаказа, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
	АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура МодельДвигателяПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	МодельДвигателяПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаАвтомобиляПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
	
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Автомобиль, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаАвтомобиляПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ЦенаАвтомобиляПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СуммаРучнойСкидкиНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.СуммаРучнойСкидкиНаАвтомобильПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРучнойСкидкиНаАвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	СуммаРучнойСкидкиНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СуммаВсегоНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаАвтомобиль.СуммаВсегоНаАвтомобильПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВсегоНаАвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	СуммаВсегоНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СервиснаяКампанияРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль,ТолькоАктуальные", Объект.Автомобиль, Истина);
		
		ОткрытьФорму("РегистрСведений.ВыполнениеСервисныхКампаний.Форма.СервисныеКампанииАвтомобиля",
					 ПараметрыОткрытия,
					 ЭтотОбъект,,,,,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОСкидкахИМаркетинговыхПрограммахОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылка,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "установить" Тогда
		СкидкиИМаркетинговыеПрограммыКлиент.ОткрытьПодборСкидокИМаркетинговыхПрограмм(Объект, ЭтотОбъект);
	ИначеЕсли НавигационнаяСсылка = "просмотр" Тогда
		СкидкиИМаркетинговыеПрограммыКлиент.ПросмотрСкидокИМаркетинговыхПрограмм(
			ПоместитьТаблицуВоВременноеХранилище(Объект.СкидкиИМаркетинговыеПрограммы, УникальныйИдентификатор),
			ЭтотОбъект
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОРеестреДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НРег(НавигационнаяСсылка) = "создатьреестр" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
			ДополнительныеПараметры = Новый Структура("ТочкаВхода", "ПоступлениеПоТрейдИн");
			Обработка = Новый ОписаниеОповещения("Подключаемый_ЗаписьОбъектЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(
				Обработка,
				НСтр("ru = 'Для ввода нового документа необходимо записать заказ. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru = 'Создание реестра документов'")
			);
		Иначе
			СоздатьРеестрДокументов();
		КонецЕсли;
	ИначеЕсли НРег(НавигационнаяСсылка) = "открытьсписок" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		Отборы = Новый Структура("ДокументОснование", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Отбор", Отборы);
		
		ОткрытьФорму("Документ.РеестрДокументов.ФормаСписка", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования
	);
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаАвтомобиль.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	// Вызываем общий обработчик изменения реквизитов формы
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзмененииНаСервере()

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 
 
&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказНаАвтомобиль.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзмененииНаСервере()

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаказНаАвтомобиль.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОпции

&НаКлиенте
Процедура ОпцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	
	УправлениеДиалогомАльфаАвтоКлиент.ОпцииПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаСервере
Процедура ОпцииПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомАльфаАвтоСервер.ОпцииПослеУдаления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииПослеУдаления(Элемент)
	
	ОпцииПослеУдаленияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыОпции

&НаСервере
Процедура ОпцииОпцияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ОпцииОпцияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииОпцияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииОпцияПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОпцииКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ОпцииКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииКоличествоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииКоличествоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОпцииЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ОпцииЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииЦенаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииЦенаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОпцииСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ОпцииСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииСуммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииСуммаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОпцииСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ОпцииСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОпцииСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Опции.НайтиПоИдентификатору(Элементы.Опции.ТекущаяСтрока);
	Документы.ЗаказНаАвтомобиль.ОпцииСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцииСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ОпцииСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоступленияTradeInПриИзменении(Элемент)
	
	ОбновитьОтчетОРаспределении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьОтчетОРаспределении(Команда = Неопределено)
	
	Если Объект.ТрейдИн И НЕ Объект.Ссылка.Пустая() И Объект.ПоступленияTradeIn.Количество() > 0 Тогда
		
		СвязанныеДокументы = Новый Массив();
		
		Для Каждого Строка Из Объект.ПоступленияTradeIn Цикл
			
			СвязанныеДокументы.Добавить(Строка.Документ);
			
		КонецЦикла;
		
		АвтомобилиСПробегомКлиент.НачатьОбновлениеИнформацииОРаспределении(
			ЭтотОбъект,
			Объект.Ссылка,
			СвязанныеДокументы
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДеньгиСОтмененныхЗаказов(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Проведен Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Перед выполнением действия документ необходимо Провести'"),
			,
			НСтр("ru = 'Ошибка'")
		);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ХозОперация <> ПредопределенноеЗначение("Справочник.ХозОперации.ЗаказНаАвтомобильОтмена") Тогда
		ПеренестиДенегСОтмененныхЗаказов();
	Иначе
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Имя", "ВыбратьЗаказДляПереносаДенегСОтмененныхЗаказов");
		
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_ВыбратьЗаказДляПереносаДенегСОтмененныхЗаказов",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		
		ОткрытьФорму(
			"Документ.ЗаказНаАвтомобиль.ФормаВыбора",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Обработчик,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпций(Команда)
	
	УправлениеДиалогомКлиент.ОткрытьПодборОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеПоТрейдИн(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		ДополнительныеПараметры = Новый Структура("ТочкаВхода", "ПоступлениеПоТрейдИн");
		Обработка = Новый ОписаниеОповещения("Подключаемый_ЗаписьОбъектЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(
			Обработка,
			НСтр("ru = 'Для ввода нового документа необходимо записать заказ. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			,
			НСтр("ru = 'Создание поступления автомобилей'")
		);
	Иначе
		СоздатьПоступлениеАвтомобилей();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСчетНаОплату(Команда)
	
	ДобавитьСчетНаОплатуЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОплатыКонтрагента(Команда)
	
	УстановитьПараметрыСпискаОплат();
	ЗаполнитьДанныеПоОплатам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуДляНовогоСчетаПоОстатку(Команда)
	
	СуммаДляНовогоСчета = ОсталосьОплатитьПоЗаказу;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьРасширенноеПредставлениеСрокаПоставки()
	
	Если ЗначениеЗаполнено(Объект.СрокПоставки) Тогда
		Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Проведен Тогда
			ПросроченоДней = Цел((НачалоДня(ТекущаяДатаСеанса()) - Объект.СрокПоставки) / 86400);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЗаказыАвтомобилей.Период) КАК Период,
			|	СУММА(ВЫБОР
			|		КОГДА ЗаказыАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
			|			ЗаказыАвтомобилей.Количество
			|		ИНАЧЕ
			|			-ЗаказыАвтомобилей.Количество
			|	КОНЕЦ) КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыАвтомобилей КАК ЗаказыАвтомобилей
			|ГДЕ
			|	ЗаказыАвтомобилей.Заказ = &Заказ";
			Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ПросроченоДней = 0;
			Если Выборка.Следующий() Тогда
				Если Выборка.Период <> null И Выборка.Количество > 0 Тогда
					ПросроченоДней = Цел((НачалоДня(ТекущаяДатаСеанса()) - Объект.СрокПоставки) / 86400);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КолДней = Макс(ПросроченоДней, -ПросроченоДней);
		НадписьДень = ДайНадписьДень(КолДней);
		
		Если ПросроченоДней > 0 Тогда
			ТекстЗаголовка = стрШаблон(НСтр("ru = 'просрочено на %1 %2'"), ПросроченоДней, НадписьДень);
			Элементы.СрокПоставкиРасширеннаяПодсказка.Заголовок  = ТекстЗаголовка;
			Элементы.СрокПоставкиРасширеннаяПодсказка.ЦветТекста = Новый Цвет(128, 0, 0);
		Иначе
			Если ПросроченоДней = 0 Тогда
				ТекстЗаголовка = НСтр("ru = 'ожидается сегодня'");
			ИначеЕсли ПросроченоДней = -1 Тогда
				ТекстЗаголовка = НСтр("ru = 'ожидается завтра'");
			Иначе
				ТекстЗаголовка = стрШаблон(НСтр("ru = 'ожидается через %1 %2'"), -ПросроченоДней, НадписьДень);
			КонецЕсли;
			
			Элементы.СрокПоставкиРасширеннаяПодсказка.Заголовок  = ТекстЗаголовка;
			Элементы.СрокПоставкиРасширеннаяПодсказка.ЦветТекста = Новый Цвет(0, 128, 0);
		КонецЕсли;
	Иначе
		Элементы.СрокПоставкиРасширеннаяПодсказка.Заголовок = НСтр("ru = '<срок не определен>'");
		Элементы.СрокПоставкиРасширеннаяПодсказка.ЦветТекста = Новый Цвет(128, 128, 128);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасширенноеПредставлениеСрокаСнятияРезерва()
	
	Если ЗначениеЗаполнено(Объект.СрокСнятияРезерва) Тогда
		Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Проведен Тогда
			ПросроченоДней = Цел((НачалоДня(ТекущаяДатаСеанса()) - Объект.СрокСнятияРезерва) / 86400)
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЗаказыАвтомобилей.Период) КАК Период,
			|	СУММА(ВЫБОР
			|			КОГДА ЗаказыАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА ЗаказыАвтомобилей.Количество
			|			ИНАЧЕ -ЗаказыАвтомобилей.Количество
			|		КОНЕЦ) КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыАвтомобилей КАК ЗаказыАвтомобилей
			|ГДЕ
			|	ЗаказыАвтомобилей.Заказ = &Заказ";
			Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ПросроченоДней = 0;
			Если Выборка.Следующий() Тогда
				Если Выборка.Период <> null И Выборка.Количество > 0 Тогда
					ПросроченоДней = Цел((НачалоДня(ТекущаяДатаСеанса()) - Объект.СрокСнятияРезерва) / 86400);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КолДней = Макс(ПросроченоДней, -ПросроченоДней);
		НадписьДень = ДайНадписьДень(КолДней);
		
		Если ПросроченоДней > 0 Тогда
			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'срок снятия резерва истек %1 %2 назад'"),
				СокрЛП(ПросроченоДней),
				НадписьДень
			);
			Элементы.СрокСнятияРезерваРасширеннаяПодсказка.Заголовок  = ТекстЗаголовка;
			Элементы.СрокСнятияРезерваРасширеннаяПодсказка.ЦветТекста = Новый Цвет(128, 0, 0);
		Иначе
			Если ПросроченоДней = 0 Тогда
				ТекстЗаголовка = НСтр("ru = 'срок снятия резерва истекает сегодня'");
			ИначеЕсли ПросроченоДней = -1 Тогда
				ТекстЗаголовка = НСтр("ru = 'срок снятия резерва истекает завтра'");
			Иначе
				ТекстЗаголовка = стрШаблон(НСтр("ru = 'срок снятия резерва истекает через %1 %2'"),
					-ПросроченоДней, НадписьДень);
			КонецЕсли;
			
			Элементы.СрокСнятияРезерваРасширеннаяПодсказка.Заголовок  = ТекстЗаголовка;
			Элементы.СрокСнятияРезерваРасширеннаяПодсказка.ЦветТекста = Новый Цвет(0, 0, 128);
		КонецЕсли;
	Иначе
		Элементы.СрокСнятияРезерваРасширеннаяПодсказка.Заголовок  = НСтр("ru = '<срок не определен>'");
		Элементы.СрокСнятияРезерваРасширеннаяПодсказка.ЦветТекста = Новый Цвет(128, 128, 128);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаркаМодели(Модель)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Модель, "Марка");
КонецФункции

// Функция показывает стандартная ли выбрана марка, или нет
// 
// Параметры:
//  ВыбраннаяМарка - СправочникСсылка.Марки - выбранная марка
//
// Возвращаемое значение:
//  Булево - Истина - если не стандартная марка.
//
&НаКлиентеНаСервереБезКонтекста
Функция НеСтандартнаяМарка(ВыбраннаяМарка)
	
	Возврат НЕ (ВыбраннаяМарка = ПредопределенноеЗначение("Справочник.Марки.МаркаНеУказана"));
	
КонецФункции

&НаСервере
Процедура НастройкаПараметровВыбораСервиснойКампании()
	
	СервисныеКомпании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(
		Объект.Автомобиль,
		Объект.Дата,
		Истина,
		Объект.Ссылка
	).ВыгрузитьКолонку("СервиснаяКампания");
	АвтомобилиСервер.ОбновитьСостояниеСервиснойКомпании(
		СервисныеКомпании.Количество() > 0,
		Элементы.СервиснаяКампания,
		Элементы.СостояниеСервиснойКомпании
	);
	Элементы.Автомобиль.МаксимальнаяШирина = ?(Элементы.СостояниеСервиснойКомпании.Видимость, 37, 39);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах(Знач Объект, ИнформацияОСкидкахИМаркетинговыхПрограммах)
	Если Объект.СкидкиИМаркетинговыеПрограммы.Количество() = 0 Тогда
		Текст = ?(ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаАвтомобиль), "Выбрать", "");
		ИнформацияОСкидкахИМаркетинговыхПрограммах = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(
				"Скидки и маркетинговые программы не предоставляются.",, ЦветаСтиля.ЗапрещенноеПравоДоступаЦвет
			),
			" ",
			Новый ФорматированнаяСтрока(Текст,, ЦветаСтиля.ТекстИнформационнойНадписи,, "установить")
		);
	Иначе
		Текст = ?(ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаАвтомобиль), "Изменить", "");
		ИнформацияОСкидкахИМаркетинговыхПрограммах = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(
				"Предоставлены скидки и маркетинговые программы",,
				ЦветаСтиля.ТекстИнформационнойНадписи,, "просмотр"
			),
			" на сумму ",
			Строка(Объект.СкидкиИМаркетинговыеПрограммы.Итог("Значение")),
			". ",
			Новый ФорматированнаяСтрока(Текст,, ЦветаСтиля.ТекстИнформационнойНадписи,, "установить")
		);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюОРеестрах(Ссылка, ИнформацияОРеестреДокументов)
	
	// Проверим есть ли у пользователя доступ к документу реестр документов.
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.РеестрДокументов, Пользователи.ТекущийПользователь()) Тогда
		
		ИнформацияОРеестреДокументов = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ЕстьДанные = Ложь;
	
	Если НЕ Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрДокументов.Ссылка КАК Документ
		|ИЗ
		|	Документ.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.ДокументОснование = &Ссылка";
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанные = НЕ РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	ЭлементыСтроки = Новый Массив;
	
	Если ЕстьДанные Тогда
		
		Текст = СтрокаСЧислом(
			";Введен %1 реестр документов;
			|Введено %1 реестра документов;
			|Введено %1 реестров документов;
			|Введено %1 реестров документов;",
			РезультатЗапроса.Выбрать().Количество(),
			ВидЧисловогоЗначения.Количественное,
			"L=ru");
		
		ЭлементыСтроки.Добавить(Текст);
		ЭлементыСтроки.Добавить(". ");
		
		Если ПравоДоступа("Просмотр", Метаданные.Документы.РеестрДокументов, Пользователи.ТекущийПользователь()) Тогда
			
			ЭлементыСтроки.Добавить(
				Новый ФорматированнаяСтрока("Открыть", , ЦветаСтиля.ТекстИнформационнойНадписи, , "открытьсписок"));
			
		КонецЕсли;
		
	Иначе
		
		ЭлементыСтроки.Добавить("Нет подчиненных ");
		
		Если 
			ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.РеестрДокументов, Пользователи.ТекущийПользователь())
		Тогда
			
			ЭлементыСтроки.Добавить(
				Новый ФорматированнаяСтрока("реестров документов", , ЦветаСтиля.ТекстИнформационнойНадписи, , "создатьреестр"));
			
		Иначе
			
			ЭлементыСтроки.Добавить("реестров документов");
			
		КонецЕсли;
		
		ЭлементыСтроки.Добавить(".");
		
	КонецЕсли;
	
	ИнформацияОРеестреДокументов = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьТаблицуВоВременноеХранилище(Знач Таблица, УникальныйИдентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(Таблица.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

// Обработка ответа на вопрос о записи объекта
//
// Параметры:
//  Ответ                   - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ЗаписьОбъектЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Если ДополнительныеПараметры.Свойство("ТочкаВхода") Тогда
				Если ДополнительныеПараметры.ТочкаВхода = "РеестрДокументов" Тогда
					СоздатьРеестрДокументов();
				ИначеЕсли ДополнительныеПараметры.ТочкаВхода = "ПоступлениеПоТрейдИн" Тогда
					СоздатьПоступлениеАвтомобилей();
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеестрДокументов()
	ПараметрыОткрытия = Новый Структура("Основание", Объект.Ссылка);
	
	ОткрытьФорму(
		"Документ.РеестрДокументов.ФормаОбъекта",
		ПараметрыОткрытия,
		ЭтотОбъект,
		КлючУникальности
	);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаИзмененияСебестоимостиАвтомобиля(
		Себестоимость,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Себестоимость = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СебестоимостьАвтомобиля = Себестоимость;
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("Себестоимость", Себестоимость);
	
	СтавкаНДСНаАвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ОбработкаИзмененияСебестоимостиАвтомобиля()

&НаКлиенте
Процедура Подключаемый_ВыбратьЗаказДляПереносаДенегСОтмененныхЗаказов(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Имя") = "ВыбратьЗаказДляПереносаДенегСОтмененныхЗаказов" Тогда
		ЗаказДляПереносаДенегСОтмененныхЗаказов = РезультатОповещения;
	КонецЕсли;
	
	Если РезультатОповещения = Неопределено Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Необходимо выбрать документ для переноса денег.'"),
			,
			НСтр("ru = 'Ошибка'")
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПеренестиДенегСОтмененныхЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоступленийTradeIn()
	
	Для Каждого Строка Из Объект.ПоступленияTradeIn Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Автор) Тогда
			
			Строка.Автор = Пользователи.ТекущийПользователь();
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.Добавлен) Тогда
			
			Строка.Добавлен = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, АвтомобильЗаказа.Ссылка);
	
КонецПроцедуры 

&НаКлиенте
Процедура СебестоимостьАвтомобиляНажатие(Элемент)
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаИзмененияСебестоимостиАвтомобиля",
		ЭтотОбъект
	);
	
	ПоказатьВводЧисла(
		ОбработчикОповещения,
		Объект.СебестоимостьАвтомобиля,
		НСтр("ru = 'Себестоимость автомобиля, купленного у физ. лица'"),
		15,
		2
	);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	НастройкаПараметровВыбораСервиснойКампании();
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
	// Запрет редактирования ОпцииСумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОпцииСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	// Запрет редактирования ОпцииСуммаВсего
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОпцииСуммаВсего.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Запрет редактирования ТоварыСумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Действие", "") = "ВыборАвтомобиляСервер" Тогда
		Если РезультатОповещения = "ОТМЕНА" Тогда
			Возврат;
		ИначеЕсли РезультатОповещения = "ДА" Тогда
			ПараметрыДействия = Новый Структура("ОчиститьТЧ", Истина);
		Иначе
			ПараметрыДействия = Новый Структура("ОчиститьТЧ", Ложь);
		КонецЕсли;
		
		Объект.Автомобиль = ДополнительныеПараметры.Автомобиль;
		ЗначениеВРеквизитФормы(Объект.Автомобиль.ПолучитьОбъект(), "АвтомобильЗаказа");
		АвтомобильЗаказаНаФорме = АвтомобильЗаказа.Ссылка;
		
		ПараметрыДействия.Вставить("ПересчитатьСтавкуНДС", Истина);
		
		Документы.ЗаказНаАвтомобиль.АвтомобильПриИзменении(Объект, ПараметрыДействия);
		ОбновитьБазовыеОпции();
		НастроитьПараметрыВыбораОпций();
		Модифицированность = Истина;
		
	ИначеЕсли ДополнительныеПараметры = "ВыбранныеСкидки" Тогда
		Если ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
			Объект.СкидкиИМаркетинговыеПрограммы.Очистить();
			ВыбранныеСкидки = ПолучитьИзВременногоХранилища(РезультатОповещения);
			Для Каждого вс Из ВыбранныеСкидки Цикл
				ЗаполнитьЗначенияСвойств(Объект.СкидкиИМаркетинговыеПрограммы.Добавить(), вс);
			КонецЦикла;
			
			РезультатОповещения = Документы.ЗаказНаАвтомобиль.ПолучитьПараметрыДействия(Объект);
			РезультатОповещения.Вставить("Себестоимость", Объект.СебестоимостьАвтомобиля);
			Документы.ЗаказНаАвтомобиль.РассчитатьСуммовыеПоказателиАвтомобиля(
				"ЦенаАвтомобиля",
				Объект,
				РезультатОповещения
			);
			
			ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах(Объект, ИнформацияОСкидкахИМаркетинговыхПрограммах);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
				ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры = "ВыборАвтомобиля" Тогда
		Если (Объект.Опции.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0) Тогда
			ПараметрыДействия = Новый Структура("Действие,Автомобиль", "ВыборАвтомобиляСервер", РезультатОповещения);
			
			Описание = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия);
			
			ТекстВопроса = НСтр("ru = 'Очищать табличные части опции и оборудование?'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ДА"     , "Да");
			Кнопки.Добавить("НЕТ"    , "Нет");
			Кнопки.Добавить("ОТМЕНА" , "Отмена");
			
			ПоказатьВопрос(Описание, ТекстВопроса, Кнопки);
			
			Возврат;
		Иначе
			ДополнительныеПараметры = Новый Структура("Действие,Автомобиль", "ВыборАвтомобиляСервер", РезультатОповещения);
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатОповещения) = Тип("СправочникСсылка.Модели") Тогда
		Объект.Модель = РезультатОповещения;
		МодельПриИзменении();
		Возврат;
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Вопрос") = "ВопросСоответствияМарок" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Марка = ДополнительныеПараметры.ВыбранноеЗначение;
			МаркаПриИзменении();
			МаркаПриИзмененииНаСервере();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	

	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыДействия, "ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах", Ложь) Тогда
			
		ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах(Объект, ИнформацияОСкидкахИМаркетинговыхПрограммах);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

// Обработчик события возникающего после создания счета на оплату за автомобили
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаОбновленияДанныхОбОплате(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = "ОбновитьДанныеОбОплате" Тогда
		ЗаполнитьДанныеПоОплатам();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ДопПараметрыИзКомплектации = Объект.ВариантКомплектации.Пустая();
	ДоступИзмененияАвтомобиля = Истина;
	
	Если НЕ АвтомобильЗаказа.Ссылка.Пустая() Тогда
		
		ДоступИзмененияАвтомобиля = ПравоДоступа("Изменение", Метаданные.Справочники.Автомобили);
		
	КонецЕсли;
	
	Элементы.ТипДвигателя.Доступность = ДопПараметрыИзКомплектации И ДоступИзмененияАвтомобиля;
	Элементы.ТипКПП.Доступность       = ДопПараметрыИзКомплектации И ДоступИзмененияАвтомобиля;
	Элементы.ТипКузова.Доступность    = ДопПараметрыИзКомплектации И ДоступИзмененияАвтомобиля;
	
	АвтомобильВНаличии = Документы.ЗаказНаАвтомобиль.ПроверитьОстаткиАвтомобилей(Объект);
	РедактированиеЦенИСуммВНоменклатурныхТаблицах = ПраваИНастройкиПользователя.Значение(
		"РедактированиеЦенИСуммВНоменклатурныхТаблицах",
		Объект
	);
	
	// установим доступность реквизитов в зависимости от хоз. операции
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобиль Тогда
		
		Элементы.Контрагент.Доступность             = Истина;
		Элементы.ДоговорВзаиморасчетов.Доступность  = Истина;
		Элементы.Заказчик.Доступность               = Истина;
		Элементы.ПроцентПредоплаты.Доступность      = Истина;
		Элементы.Автомобиль.Доступность             = Истина;
		Элементы.ТипСалона.Доступность              = Истина;
		Элементы.ВалютаДокумента.Доступность        = Истина;
		Элементы.СуммаПредоплаты.Доступность        = Истина;
		Элементы.СрокПоставки.Доступность           = Истина;
		Элементы.ТрейдИн.Доступность                = Истина;
		Элементы.СтраницаОпции.Доступность          = Истина;
		Элементы.СтраницаТовары.Доступность         = Истина;
		Элементы.Модель.Доступность                 = ДоступИзмененияАвтомобиля;
		Элементы.Марка.Доступность                  = ДоступИзмененияАвтомобиля;
		Элементы.ВариантКомплектации.Доступность    = ДоступИзмененияАвтомобиля;
		Элементы.Цвет.Доступность                   = ДоступИзмененияАвтомобиля;
		Элементы.ЦветКод.Доступность                = ДоступИзмененияАвтомобиля;
		
		Элементы.ГруппаОтменаЗаказа.Видимость       = Ложь;
		
		Элементы.ЦенаАвтомобиля.Доступность         = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СтавкаНДСНаАвтомобиль.Доступность  = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СуммаНДСНаАвтомобиль.Доступность   = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СуммаВсегоНаАвтомобиль.Доступность = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СебестоимостьАвтомобиля.Доступность = РедактированиеЦенИСуммВНоменклатурныхТаблицах
			И ЗначениеЗаполнено(Объект.Автомобиль) И АвтомобильВНаличии;
		
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобильИзменение Тогда
		
		Элементы.Контрагент.Доступность             = Ложь;
		Элементы.ДоговорВзаиморасчетов.Доступность  = Ложь;
		Элементы.Заказчик.Доступность               = Ложь;
		Элементы.ПроцентПредоплаты.Доступность      = Истина;
		Элементы.Автомобиль.Доступность             = Истина;
		Элементы.ТипСалона.Доступность              = Истина;
		Элементы.ВалютаДокумента.Доступность        = Истина;
		Элементы.СуммаПредоплаты.Доступность        = Истина;
		Элементы.СрокПоставки.Доступность           = Истина;
		Элементы.ТрейдИн.Доступность                = Истина;
		Элементы.СтраницаОпции.Доступность          = Истина;
		Элементы.СтраницаТовары.Доступность         = Истина;
		Элементы.Модель.Доступность                 = ДоступИзмененияАвтомобиля;
		Элементы.Марка.Доступность                  = ДоступИзмененияАвтомобиля;
		Элементы.ВариантКомплектации.Доступность    = ДоступИзмененияАвтомобиля;
		Элементы.Цвет.Доступность                   = ДоступИзмененияАвтомобиля;
		Элементы.ЦветКод.Доступность                = ДоступИзмененияАвтомобиля;
		
		Элементы.ГруппаОтменаЗаказа.Видимость       = Ложь;
		
		Элементы.ЦенаАвтомобиля.Доступность         = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СтавкаНДСНаАвтомобиль.Доступность  = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СуммаНДСНаАвтомобиль.Доступность   = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СуммаВсегоНаАвтомобиль.Доступность = РедактированиеЦенИСуммВНоменклатурныхТаблицах;
		Элементы.СебестоимостьАвтомобиля.Доступность = РедактированиеЦенИСуммВНоменклатурныхТаблицах
			И ЗначениеЗаполнено(Объект.Автомобиль) И АвтомобильВНаличии;
		
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобильПереуступка Тогда
		
		Элементы.Контрагент.Доступность                = Истина;
		Элементы.ДоговорВзаиморасчетов.Доступность     = Истина;
		Элементы.Заказчик.Доступность                  = Истина;
		Элементы.ПроцентПредоплаты.Доступность         = Ложь;
		Элементы.Автомобиль.Доступность                = Ложь;
		Элементы.ТипСалона.Доступность                 = Ложь;
		Элементы.ВалютаДокумента.Доступность           = Ложь;
		Элементы.СуммаПредоплаты.Доступность           = Ложь;
		Элементы.СрокПоставки.Доступность              = Истина;
		Элементы.ТрейдИн.Доступность                   = Истина;
		Элементы.СтраницаОпции.Доступность             = Ложь;
		Элементы.СтраницаТовары.Доступность            = Ложь;
		Элементы.Модель.Доступность                    = Ложь;
		Элементы.Марка.Доступность                     = Ложь;
		Элементы.ВариантКомплектации.Доступность       = Ложь;
		Элементы.Цвет.Доступность                      = Ложь;
		Элементы.ЦветКод.Доступность                   = Ложь;
		Элементы.ЦенаАвтомобиля.Доступность            = Ложь;
		Элементы.СтавкаНДСНаАвтомобиль.Доступность     = Ложь;
		Элементы.СуммаНДСНаАвтомобиль.Доступность      = Ложь;
		Элементы.СуммаВсегоНаАвтомобиль.Доступность    = Ложь;
		Элементы.СебестоимостьАвтомобиля.Доступность   = Ложь;
		
		Элементы.ТипДвигателя.Доступность              = Ложь;
		Элементы.ТипКПП.Доступность                    = Ложь;
		Элементы.ТипКузова.Доступность                 = Ложь;
		Элементы.МодельДвигателя.Доступность           = Ложь;
		
		Элементы.ГруппаОтменаЗаказа.Видимость          = Ложь;
		
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобильОтмена Тогда
		
		Элементы.Контрагент.Доступность                = Ложь;
		Элементы.ДоговорВзаиморасчетов.Доступность     = Ложь;
		Элементы.Заказчик.Доступность                  = Ложь;
		Элементы.ПроцентПредоплаты.Доступность         = Ложь;
		Элементы.Автомобиль.Доступность                = Ложь;
		Элементы.ТипСалона.Доступность                 = Ложь;
		Элементы.ВалютаДокумента.Доступность           = Ложь;
		Элементы.СуммаПредоплаты.Доступность           = Ложь;
		Элементы.СрокПоставки.Доступность              = Ложь;
		Элементы.ТрейдИн.Доступность                   = Ложь;
		Элементы.СтраницаОпции.Доступность             = Ложь;
		Элементы.СтраницаТовары.Доступность            = Ложь;
		Элементы.Модель.Доступность                    = Ложь;
		Элементы.Марка.Доступность                     = Ложь;
		Элементы.ВариантКомплектации.Доступность       = Ложь;
		Элементы.Цвет.Доступность                      = Ложь;
		Элементы.ЦветКод.Доступность                   = Ложь;
		Элементы.ЦенаАвтомобиля.Доступность            = Ложь;
		Элементы.СтавкаНДСНаАвтомобиль.Доступность     = Ложь;
		Элементы.СуммаНДСНаАвтомобиль.Доступность      = Ложь;
		Элементы.СуммаВсегоНаАвтомобиль.Доступность    = Ложь;
		Элементы.СебестоимостьАвтомобиля.Доступность   = Ложь;
		
		Элементы.ТипДвигателя.Доступность              = Ложь;
		Элементы.ТипКПП.Доступность                    = Ложь;
		Элементы.ТипКузова.Доступность                 = Ложь;
		Элементы.МодельДвигателя.Доступность           = Ложь;
		
		Элементы.ГруппаОтменаЗаказа.Видимость          = Истина;
		
	КонецЕсли;
	
	Элементы.ПриобретенУФизЛица.Видимость =
		Не Объект.Автомобиль.Пустая()
		И Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			Объект.Автомобиль,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
			Объект.Дата) = Истина;
	
	Элементы.ТипДвигателя.Видимость       = АвтомобильЗаказа.МодельДвигателя.Пустая();
	Элементы.МодельДвигателяТип.Видимость = НЕ Элементы.ТипДвигателя.Видимость;
	
	Если ЗначениеЗаполнено(АвтомобильЗаказа.Ссылка) Тогда
		
		Элементы.АвтомобильРасширеннаяПодсказка.Заголовок = Справочники
			.Автомобили
			.СформироватьИнформациюАвтомобиля(Объект, АвтомобильЗаказа.Ссылка);
		
	Иначе
		
		Элементы.АвтомобильРасширеннаяПодсказка.Заголовок = СтрШаблон(
			НСтр("ru = '%1 (новый автомобиль)'"),
			АвтомобильЗаказа.Наименование
		);
		
	КонецЕсли;
	
	ВыделениеМежценовойРазницыОтдельнойСтрокой = ПраваИНастройкиПользователя.Значение("ВыделениеМежценовойРазницыОтдельнойСтрокой", Объект);
	Элементы.СебестоимостьАвтомобиля.Видимость = ВыделениеМежценовойРазницыОтдельнойСтрокой;
	
	Если ВыделениеМежценовойРазницыОтдельнойСтрокой Тогда
		
		Элементы.СебестоимостьАвтомобиля.Заголовок = СтрШаблон(
			НСтр("ru = 'Себестоимость:  %1'"),
			Формат(Объект.СебестоимостьАвтомобиля, "ЧЦ=15; ЧДЦ=2; ЧН=0,00")
		);
		
	КонецЕсли;
	
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	ДоступенВыкупАвтомобилейСПробегом = ПолучитьФункциональнуюОпцию("ДоступенВыкупАвтомобилейСПробегом", ПараметрОпции);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СоздатьПоступлениеПоТрейдИн",
		"Видимость",
		НЕ ДоступенВыкупАвтомобилейСПробегом
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
	Элементы.СтраницаСчетаИОплаты.Доступность = ПравоДоступа("Просмотр", Метаданные.Документы.СчетНаОплатуЗаАвтомобили);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораОпций()
	
	ДоступныеОпции = Новый Массив();
	ДополнительныеОпции = ОпцииАвтомобилей.ДополнительныеОпцииКомплектации(Объект.ВариантКомплектации);
	УстановленныеНаАвтомобильОпции = ОпцииАвтомобилей.ОпцииУстановленныеНаАвтомобиль(Объект.Автомобиль);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОпции, ДополнительныеОпции, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОпции, УстановленныеНаАвтомобильОпции, Истина);
	
	Если ДоступныеОпции.Количество() = 0 Тогда
		ДоступныеОпции.Добавить(Справочники.Опции.ПустаяСсылка());
	КонецЕсли;
	
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		Элементы.ОпцииОпция.ПараметрыВыбора,
		"Отбор.Ссылка",
		ДоступныеОпции
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБазовыеОпции()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		БазовыеОпции,
		"ВариантКомплектации",
		Объект.ВариантКомплектации,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНесовместимыеДополнительныеОпции()
	
	Если Объект.Опции.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВариантКомплектации = Объект.ВариантКомплектации;
	
	Если ВариантКомплектации = ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка") Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Из таблицы опций будут удалены опции, несовместимые с выбранным вариантом комплектации.'")
		);
		Объект.Опции.Очистить();
		Возврат;
		
	КонецЕсли;
	
	НесовместимыеОпции = ПолучитьНесовместимыеДополнительныеОпции();
	
	Если НесовместимыеОпции = Неопределено Тогда
		
		ОбновитьОпцииНаСервере();
		Возврат;
		
	КонецЕсли;
	
	ПоказатьПредупреждение(
		,
		НСтр("ru = 'Из таблицы опций будут удалены опции, несовместимые с выбранным вариантом комплектации.'")
	);
	
	Для Каждого Строка Из НесовместимыеОпции Цикл
		
		НайденныеСтроки = Объект.Опции.НайтиСтроки(Новый Структура ("Опция", Строка));
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			Объект.Опции.Удалить(ТекСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбновитьОпцииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНесовместимыеДополнительныеОпции()
	
	Возврат ОпцииАвтомобилей.ПолучитьНесовместимыеДополнительныеОпции(Объект);
	
КонецФункции

&НаСервере
Процедура ОбновитьОпцииНаСервере()
	
	Для Каждого Строка Из Объект.Опции Цикл
		
		Строка.Цена = 0;
		Документы.РабочийЛист.ОпцииОпцияПриИзменении(Объект, Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИнформацииОРаспределенииЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		
		ДлительныеОперацииАвтосервисКлиентСервер.ВключитьРежимОжиданияПоляТабличногоДокумента(
			Элементы.РаспределенияДенежныхСредств,
			Результат.КраткоеПредставлениеОшибки,
			БиблиотекаКартинок.Ошибка32
		);
		Возврат;
		
	КонецЕсли;
	
	ДлительныеОперацииАвтосервисКлиентСервер.ВыключитьРежимОжиданияПоляТабличногоДокумента(
		Элементы.РаспределенияДенежныхСредств);
	РаспределенияДенежныхСредств = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьСтраницыTradeIn(Сам)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Сам.Элементы,
		"СтраницаТрейдИн",
		"Видимость",
		Сам.Объект.ТрейдИн
	);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДеньгиНаОтмененныхЗаказах()
	
	ОтмененныеЗаказы = ОтмененныеЗаказы();
	
	Если НЕ ЗначениеЗаполнено(ОтмененныеЗаказы) Тогда
		
		Элементы.ПредупреждениеОВозможныхПроблемахСВзаиморасчетами.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ОстаткиДенег = ОстаткиДенегНаОтмененныхЗаказах(ОтмененныеЗаказы);
	
	Если НЕ ЗначениеЗаполнено(ОстаткиДенег) Тогда
		
		Элементы.ПредупреждениеОВозможныхПроблемахСВзаиморасчетами.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив();
	ЧастиСтроки.Добавить(НСтр("ru = 'На связанных отмененных заказах остались денежные средства:'"));
	
	ВалютаУпрСтрокой = Строка(Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	ШаблонТекстаСОстатком = НСтр("ru = 'На заказе ""%1"" осталось %2 %3'");
	
	Для Каждого ОстатокВзаиморачетов Из ОстаткиДенег Цикл
		
		ЧастиСтроки.Добавить(
			СтрШаблон(
				ШаблонТекстаСОстатком,
				ОстатокВзаиморачетов.Сделка,
				ОстатокВзаиморачетов.СуммаУпр,
				ВалютаУпрСтрокой
			)
		);
		
	КонецЦикла;
	
	Элементы.ПредупреждениеОВозможныхПроблемахСВзаиморасчетамиТекст.Высота = ЧастиСтроки.Количество();
	Разделитель = Символы.ПС + "  - ";
	ПредупреждениеОВозможныхПроблемахСВзаиморасчетамиТекст = СтрСоединить(ЧастиСтроки, Разделитель);
	
КонецПроцедуры

&НаСервере
Функция ОтмененныеЗаказы()
	
	ОтмененныеЗаказы = Новый Массив();
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	Пока
		ЗначениеЗаполнено(ТекущийДокументОснование)
		И ТипЗнч(ТекущийДокументОснование) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
	Цикл
		
		ОтмененныеЗаказы.Добавить(ТекущийДокументОснование);
		ТекущийДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокументОснование, "ДокументОснование");
		
	КонецЦикла;
	
	Возврат ОтмененныеЗаказы;
	
КонецФункции

&НаСервере
Функция ОстаткиДенегНаОтмененныхЗаказах(ОтмененныеЗаказы)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
		|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	РасчетыСКонтрагентамиОстатки.Заказ КАК Сделка,
		|	-РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК Сумма,
		|	-РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Заказ В (&ОтмененныеЗаказы)) КАК РасчетыСКонтрагентамиОстатки
		|ГДЕ
		|	РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыКомпанииОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ВзаиморасчетыКомпанииОстатки.Сделка КАК Сделка,
		|	-ВзаиморасчетыКомпанииОстатки.СуммаОстаток КАК Сумма,
		|	-ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(, Сделка В (&ОтмененныеЗаказы)) КАК ВзаиморасчетыКомпанииОстатки
		|ГДЕ
		|	ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток < 0"
	);
	Запрос.УстановитьПараметр("ОтмененныеЗаказы", ОтмененныеЗаказы);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаСервере
Процедура ПеренестиДенегСОтмененныхЗаказов()
	
	ОтмененныеЗаказы = ОтмененныеЗаказы();
	
	Если НЕ ЗначениеЗаполнено(ОтмененныеЗаказы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОстаткиДенег = ОстаткиДенегНаОтмененныхЗаказах(ОтмененныеЗаказы);
	
	Если НЕ ЗначениеЗаполнено(ОстаткиДенег) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Взаимозачет = Документы.Взаимозачет.СоздатьДокумент();
	Взаимозачет.Заполнить(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ЗаказДляПереносаДенегСОтмененныхЗаказов) Тогда
		
		Для Каждого СтрокаСостав Из Взаимозачет.Состав Цикл
			СтрокаСостав.СделкаДебитор = ЗаказДляПереносаДенегСОтмененныхЗаказов;
			СтрокаСостав.ДоговорВзаиморасчетовДебитор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказДляПереносаДенегСОтмененныхЗаказов, "ДоговорВзаиморасчетов");
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		
		Взаимозачет.Записать(РежимЗаписиДокумента.Проведение);
		Элементы.ПредупреждениеОВозможныхПроблемахСВзаиморасчетами.Видимость = Ложь;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Заказ на автомобиль.Взаимозачет'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.Взаимозачет,
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось записать ""Взаимозачет"". Подробнее в журнале регистрации'");
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеАвтомобилей()
	
	Основание = Новый Структура;
	Основание.Вставить("ЗаказНаАвтомобиль", Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"Подключаемый_СоздатьПоступлениеАвтомобилейЗавершение",
		ЭтотОбъект,
		Новый Структура
	);
	ОткрытьФорму(
		"Документ.ПоступлениеАвтомобилей.ФормаОбъекта",
		ПараметрыОткрытия,
		ЭтотОбъект,
		КлючУникальности,
		, ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьПоступлениеАвтомобилейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ПоступлениеАвтомобиля") Тогда
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДайНадписьДень(КоличествоДней)
	
	Десять = 10;
	ОстатокОтДеления = КоличествоДней % Десять;
	НадписьДень = "";
	ДнейМинимум = 5;
	ДнейМаксимум = 9;
	КоличествоДнейМинимум = 10;
	КоличествоДнейМаксимум = 19;
	
	Если
		ОстатокОтДеления = 0
		Или ОстатокОтДеления >= ДнейМинимум И ОстатокОтДеления <= ДнейМаксимум
		Или КоличествоДней % 100 >= КоличествоДнейМинимум И КоличествоДней % 100 <= КоличествоДнейМаксимум
	Тогда
		
		НадписьДень = "дней";
		
	ИначеЕсли ОстатокОтДеления = 1 Тогда
		
		НадписьДень = "день";
		
	ИначеЕсли ОстатокОтДеления >= 2 И ОстатокОтДеления <= 4 Тогда
		
		НадписьДень = "дня";
		
	КонецЕсли;
	
	Возврат НадписьДень;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		
		Элементы.ФормаДокументЖалобаКлиентаСоздатьНаОсновании.Видимость = Константы.ИспользоватьЖалобы.Получить();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт

	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);

КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьПараметрыСпискаОплат()
	
	ОплатыКонтрагента.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОплатыНажатие(Элемент)
	
	ВариантОтчета = ПолучитьНастройкуОтчета();
	
	Контрагент = Объект.Контрагент;
	ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
	
	Если Не ЗначениеЗаполнено(Контрагент) Или Не ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Контрагент",            Контрагент);
	Отбор.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	ОтчетыПлатформаКлиент.ОткрытьОтчет(
		"Отчет.Взаиморасчеты",
		"Движения",
		ВариантОтчета,
		,
		,
		Отбор,
		,
		ОбщегоНазначенияКлиент.ДатаСеанса()
	);

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуОтчета()
	
	ВариантОтчета = Неопределено;
	
	Отчет = Отчеты.Взаиморасчеты.Создать();
	ВариантОтчета = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Движения.Настройки;
	
	Возврат ВариантОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОплатыКонтрагентаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОплатыКонтрагента.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетНаОплату = ТекущиеДанные.СчетНаОплату;
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Ключ", СчетНаОплату);
		ОткрытьФорму("Документ.СчетНаОплатуЗаАвтомобили.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОплатыКонтрагентаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Строка Из Строки Цикл
		
		СуммаОплаты = ПолучитьСуммуОплаты(Строка.Значение.Данные.СчетНаОплату);
		
		Строка.Значение.Данные.СуммаОплатыПоСчету = СуммаОплаты;
		Если Строка.Значение.Данные.СуммаСчета = СуммаОплаты Тогда
			Строка.Значение.Данные.Оплачен = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСчетНаОплатуЗавершение()
	
	Если СуммаДляНовогоСчета> 0 Тогда
		ЗаполнитьДанныеПоОплатам();
		Если ЭтотОбъект.Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для создания счета на оплату автомобиля необходимо записать документ. Записать?'")
			);
		ИначеЕсли СуммаДляНовогоСчета > ОсталосьОплатитьПоЗаказу Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru='Введена сумма счета больше, чем осталось оплатить по заказу.'")
			);
		Иначе
			ХозОперацияСчета = ?(СуммаДляНовогоСчета < ОсталосьОплатитьПоЗаказу ИЛИ Объект.СуммаДокумента > СуммаДляНовогоСчета,
				ПредопределенноеЗначение("Справочник.ХозОперации.СчетНаПредоплатуЗаАвтомобили"),
				ПредопределенноеЗначение("Справочник.ХозОперации.СчетНаОплатуЗаАвтомобили"
			));
			
			ПараметрыСчета = Новый Структура;
			ПараметрыСчета.Вставить("Основание",Объект.Ссылка);
			ПараметрыСчета.Вставить("ЗначенияЗаполнения",Новый Структура("ХозОперация,СуммаВсего",
				ХозОперацияСчета,
				СуммаДляНовогоСчета
			));
			
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаОбновленияДанныхОбОплате", ЭтотОбъект, "ОбновитьДанныеОбОплате");
			ОткрытьФорму("Документ.СчетНаОплатуЗаАвтомобили.ФормаОбъекта", ПараметрыСчета,,,,, Оповещение);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Сумма счета не может быть равна нулю.'"));
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоОплатам()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОплаченоПоЗаказуНаАвтомобиль = ПолучитьОплатыПоЗаказуНаАвтомобиль();
		УстановитьПривилегированныйРежим(Ложь);
		
		Элементы.ОплатыКонтрагента.Обновить();
		ОсталосьОплатитьПоЗаказу = Объект.СуммаДокумента - ОплаченоПоЗаказуНаАвтомобиль;
	Иначе
		ОсталосьОплатитьПоЗаказу = Объект.СуммаДокумента;
		ОплаченоПоЗаказуНаАвтомобиль = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОплатыПоЗаказуНаАвтомобиль()
		
	Схема 		= Элементы.ОплатыКонтрагента.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки 	= Элементы.ОплатыКонтрагента.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(Схема,Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	Результат 			= ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ПолучитьСуммуОплаты(Результат.ВыгрузитьКолонку("СчетНаОплату"));
	
КонецФункции // ПолучитьОстатокОплатыПоЗаказуНаАвтомобиль()

&НаСервереБезКонтекста
Функция ПолучитьСуммуОплаты(Ссылка)
	
	Оплачено		= 0;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
		"ВЫБРАТЬ
		|	Выписка.СуммаДокументаПриход КАК СуммаДокумента,
		|	Выписка.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	Документ.Выписка КАК Выписка
		|ГДЕ
		|	Выписка.ДокументОснование В (&ДокументОснование)
		|	И Выписка.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекНаОплату.СуммаДокумента,
		|	ЧекНаОплату.ДокументОснование
		|ИЗ
		|	Документ.ЧекНаОплату КАК ЧекНаОплату
		|ГДЕ
		|	ЧекНаОплату.ДокументОснование В (&ДокументОснование)
		|	И ЧекНаОплату.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.СуммаДокумента,
		|	ПриходныйКассовыйОрдер.ДокументОснование
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ДокументОснование В (&ДокументОснование)
		|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Оплаты.СуммаДокумента) КАК СуммаДокумента,
		|	Оплаты.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Оплаты КАК Оплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	Оплаты.ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Оплачено = Оплачено + ВыборкаДетальныеЗаписи.СуммаДокумента;
	КонецЦикла;

	Возврат Оплачено;
	
КонецФункции

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСчетаИОплаты Тогда
		ЗаполнитьДанныеПоОплатам();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти