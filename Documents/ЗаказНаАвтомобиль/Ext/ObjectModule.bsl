// Модуль объекта документа "Заказ на автомобиль"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Если вводится на основании события
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	КонецЕсли;
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ТипЦен          = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажиАвтомобилей", ЭтотОбъект);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,, Ложь);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
		
	КонецЕсли;
	
	Если (НЕ ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобильОтмена) И НЕ ЗначениеЗаполнено(СрокПоставки) Тогда
		СрокПоставкиДней = ПодразделениеКомпании.СрокПоставкиПокупателюПоУмолчанию;
		СрокПоставки     = НачалоДня(ТекущаяДатаСеанса()) + СрокПоставкиДней * 60 * 60 * 24;
	КонецЕсли;
	
	// Заполним автомобиль
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Автомобиль = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Автомобиль;
		Документы.ЗаказНаАвтомобиль.АвтомобильПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если НЕ ЗначениеЗаполнено(СтавкаНДСНаАвтомобиль) Тогда
			СтавкаНДСНаАвтомобиль = ПолучитьПараметрыПлательщикаНДС(ЭтотОбъект.Организация, ЭтотОбъект.ПодразделениеКомпании, ЭтотОбъект.Дата).ОсновнаяСтавка;
			документы.ЗаказНаАвтомобиль.СтавкаНДСНаАвтомобильПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		КонецЕсли;
		
		// Заполнение предоплаты
		Если ДоговорВзаиморасчетов.ПроцентПредоплаты = - 1 Тогда
			ПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", ЭтотОбъект);
		Иначе
			ПроцентПредоплаты = ДоговорВзаиморасчетов.ПроцентПредоплаты;
		КонецЕсли;
		
		Документы.ЗаказНаАвтомобиль.ПроцентПредоплатыПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	// Заполнить контрагента из события
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		Контрагент = ДанныеЗаполненияКонтрагент;
		Документы.ЗаказНаАвтомобиль.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда 
		Подписант = ОрганизацииАльфаАвто.Руководитель(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		
		Если ЗначениеЗаполнено(Подписант)Тогда
			Исполнитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании);	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		
		Возврат;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Автомобиль) Тогда
		
		Автомобиль = Справочники.Автомобили.ПустаяСсылка();
		СебестоимостьАвтомобиля = 0;
		Документы.ЗаказНаАвтомобиль.АвтомобильПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("АвтомобильСкладКомпанииБыл");
	ДополнительныеСвойства.Вставить("МоментВремениБыл");
		
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;  
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	
	Если НЕ ЭтоВосстановлениеПоследовательностей И НЕ Документы.ЗаказНаАвтомобиль.ДоступностьИзменения(ЭтотОбъект) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	// Проверим сумму предоплаты
	Если НЕ ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобильОтмена Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение И СуммаДокумента < СуммаПредоплаты Тогда
			ТекстСообщения = НСтр("ru = 'Сумма предоплаты не может быть больше суммы документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаПредоплаты", , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение  И (НЕ ЭтоВосстановлениеПоследовательностей) Тогда
		
		Отказ = Отказ ИЛИ СоздатьАвтомобиль();
		
	КонецЕсли;
	
	// получим старые значения, влияющие на границы последовательности
	Если НЕ Отказ И Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		БылиДвижения = Ложь;
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
				
		// прошлый момент времени
		Если БылиДвижения Тогда
			Запрос.Текст = "ВЫБРАТЬ МоментВремени ИЗ Документ." + Метаданные().Имя + " ГДЕ Ссылка=&Ссылка";
			ДополнительныеСвойства.Вставить("МоментВремениБыл", Запрос.Выполнить().Выгрузить().Получить(0).МоментВремени);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ИгнорируемыеДокументы = Новый Массив;
	ИгнорируемыеДокументы.Добавить(Ссылка);
	РегистрыСведений.ОпцииАвтомобилей.ОтменитьПроведениеДокумента(Автомобиль, ИгнорируемыеДокументы);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВзаиморасчетов,
		"ВалютаВзаиморасчетов,МаксимальныйКредит");
	
	ПроверитьПроцентПредоплаты(ДанныеДоговора);
	
	СписатьРезервыПодчиненныхДокументов();
	
	Если ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобильОтмена Тогда
		
		Отказ = Отказ Или ПроверитьЗаказыНаАвтомобиль(Автомобиль, ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не Отказ И ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобильОтмена Тогда
		
		НоваяЗапись = Движения.ЗаказыАвтомобилей.Добавить();
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.Автомобиль  = Автомобиль;
		НоваяЗапись.Заказ       = Ссылка;
		НоваяЗапись.Количество  = 1;
		НоваяЗапись.Резерв      = 1;
		НоваяЗапись.Сумма       = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СуммаДокумента, ВалютаДокумента, КурсДокумента, ДанныеДоговора.ВалютаВзаиморасчетов, Дата), 2);
		НоваяЗапись.СуммаУпр    = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СуммаДокумента, ВалютаДокумента, КурсДокумента, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Дата), 2);
		НоваяЗапись.ХозОперация = ХозОперация;
		
		ОпцииКопия = Опции.Выгрузить(, "Опция,Количество");
		
		Если ОпцииКопия.Количество() > 0 Тогда
			Отказ = Отказ ИЛИ РегистрыСведений
			.ОпцииАвтомобилей
			.ОбновитьОпцииАвтомобиля(ОпцииКопия, Автомобиль, Ссылка);
		Иначе
			Отказ = Отказ ИЛИ РегистрыСведений
			.ДокументыДвиженияОпцииАвтомобилей
			.ОбновитьОпцииАвтомобиля(Автомобиль, Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьЗаказыНаАвтомобиль(АвтомобильПроверки, ОбъектПроверки)
	
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка"        , Ссылка);
	ДокументОбъектСтруктура.Вставить("МоментВремени" , МоментВремени());
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РезервированиеАвтомобилей") Тогда
		
		ДокументОбъектСтруктура.Вставить("ДокументРезервирования" , ДокументОснование.Ссылка);
		
	КонецЕсли;
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.ЗаказНаАвтомобильПроверитьЗаказыНаАвтомобиль(ДокументОбъектСтруктура,
		АвтомобильПроверки);
	
КонецФункции

Функция СоздатьАвтомобиль()
	
	Если НЕ Автомобиль.Пустая() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НовыйАвтомобиль = Справочники.Автомобили.СоздатьЭлемент();
	НовыйАвтомобиль.Заполнить(Новый Структура);
	
	Если НЕ ЗначениеЗаполнено(НовыйАвтомобиль.Код) Тогда
		
		НовыйАвтомобиль.УстановитьНовыйКод();
		
	КонецЕсли;
	
	НовыйАвтомобиль.Родитель        = Справочники.Автомобили.АвтомобилиПоЗаказам;
	НовыйАвтомобиль.Автор           = Пользователи.ТекущийПользователь();
	НовыйАвтомобиль.ДатаРегистрации = Дата;
	ЗаполнитьЗначенияСвойств(НовыйАвтомобиль, ЭтотОбъект);
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(НовыйАвтомобиль);
	
	НовыйАвтомобиль.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		НовыйАвтомобиль.Записать();
		Автомобиль = НовыйАвтомобиль.Ссылка;
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось создать автомобиль. Обратитесь к системному администратору'"), ЭтотОбъект);
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобиль Тогда
		ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобильИзменение;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполненияНаОсновании_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Рабочий лист"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛист(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Не заполнен контрагент в рабочем листе.'")
		);
		Возврат Истина;
		
	КонецЕсли;
	
	НужноПрерватьВыполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если НужноПрерватьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.КомуПокупает = "Себе" Тогда
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		
	Иначе
		
		Если ДанныеЗаполнения.КонтрагентДляОформления.Пустая()
			И (НЕ ПустаяСтрока(ДанныеЗаполнения.КомуПокупает)) Тогда
			
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Не заполнен контрагент для оформления в рабочем листе.'")
			);
			Возврат Истина;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.КонтрагентДляОформления.Пустая() Тогда
			
			Контрагент = ДанныеЗаполнения.Контрагент;
			
		Иначе
			
			Контрагент = ДанныеЗаполнения.КонтрагентДляОформления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Документы.ЗаказНаАвтомобиль.КонтрагентПриИзменении(ЭтотОбъект);
	
	РабочийЛист = ДанныеЗаполнения;
	ДокументОснование = ДанныеЗаполнения;
	Заказчик = ДанныеЗаполнения.Контрагент;
	ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобиль;
	ТипЦен = ДанныеЗаполнения.ТипЦен;
	
	Если НЕ Автомобиль.Пустая() Тогда
		Документы.ЗаказНаАвтомобиль.АвтомобильПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);  
		
		СекундВДне = 86400;
		
		ДнейВРезервеПоУмолчанию = ПраваИНастройкиПользователя.Значение("СрокРезерваДляАвтомобилейПоУмолчанию");
		Если Не ЗначениеЗаполнено(ДнейВРезервеПоУмолчанию) Тогда
			ДнейВРезервеПоУмолчанию = 3;
		КонецЕсли;
		
		СрокСнятияРезерва = НачалоДня(ТекущаяДатаСеанса() + (ДнейВРезервеПоУмолчанию * СекундВДне));
		
	КонецЕсли;
	
	ЦенаАвтомобиля	= ДанныеЗаполнения.ЦенаАвтомобилей;
	ДополнительныеСвойства.ПараметрыДействия.Вставить("ПолучитьСебестоимостьАвтомобиля", Истина);
	Документы.ЗаказНаАвтомобиль.ЦенаАвтомобиляПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.СтавкаНДСАвтомобилей) Тогда
		
		СтавкаНДСНаАвтомобиль = ДанныеЗаполнения.СтавкаНДСАвтомобилей;
		
	Иначе
		
		СтавкаНДСНаАвтомобиль = ПолучитьПараметрыПлательщикаНДС(ЭтотОбъект.Организация, ЭтотОбъект.ПодразделениеКомпании, ЭтотОбъект.Дата).ОсновнаяСтавка;
		
	КонецЕсли;
	
	Документы.ЗаказНаАвтомобиль.СтавкаНДСНаАвтомобильПриИзменении(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.СуммаНДСАвтомобилей) Тогда
		СуммаНДСНаАвтомобиль  = ДанныеЗаполнения.СуммаНДСАвтомобилей;
	КонецЕсли;
	
	Документы.ЗаказНаАвтомобиль.ПроцентПредоплатыПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Резервирование автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РезервированиеАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения;
	
	ХозОперация = Справочники.ХозОперации.ЗаказНаАвтомобиль;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполненияНаОсновании_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Автомобили(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		 ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.ЭтоГруппа Тогда
		
		Автомобиль = ДанныеЗаполнения;
		Документы.ЗаказНаАвтомобиль.АвтомобильПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		
		СекундВДне = 86400;
		
		ДнейВРезервеПоУмолчанию = ПраваИНастройкиПользователя.Значение("СрокРезерваДляАвтомобилейПоУмолчанию");
		Если Не ЗначениеЗаполнено(ДнейВРезервеПоУмолчанию) Тогда
			ДнейВРезервеПоУмолчанию = 3;
		КонецЕсли;
		
		СрокСнятияРезерва = НачалоДня(ТекущаяДатаСеанса() + (ДнейВРезервеПоУмолчанию * СекундВДне));
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполненияНаОсновании_Автомобили()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.РезервированиеАвтомобилей") Тогда
			ОбработкаЗаполнения_РезервированиеАвтомобилей(ДанныеЗаполнения.ДокументОснование, , СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Автомобиль") Тогда
		Автомобиль = ДанныеЗаполнения.Автомобиль;
		Документы.ЗаказНаАвтомобиль.АвтомобильПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

Процедура ПроверитьПроцентПредоплаты(ДанныеДоговора)
	Если ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобиль
		И ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобильИзменение
		И ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобильПереуступка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ЭтотОбъект)
		И НЕ ДоговорВзаиморасчетов.ОтменаКонтроляСуммыКредита Тогда
		
		Отбор = Новый Структура("Контрагент,ДоговорВзаиморасчетов", Контрагент, ДоговорВзаиморасчетов);
		Долг = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(Отбор,, "Сумма").Итог("Сумма");
		
		СуммаВВалютеДоговора = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СуммаДокумента, ВалютаДокумента, КурсДокумента, ДанныеДоговора.ВалютаВзаиморасчетов, Дата);
		
		Если (Долг + СуммаВВалютеДоговора) > ДанныеДоговора.МаксимальныйКредит Тогда
			ФорматСуммы = Константы.ФорматВыводаСуммы.Получить();
			
			ТекстСообщения = НСтр(
				"ru = 'Сумма долга по договору составляет %1 %2.
				|Сумма заказа составляет %3 %2.
				|Итого %4 %2.
				|А максимально по договору %5 %2.'"
			);
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					ТекстСообщения,
					Формат(Долг, ФорматСуммы),
					ДанныеДоговора.ВалютаВзаиморасчетов,
					Формат(СуммаВВалютеДоговора, ФорматСуммы),
					Формат(Долг + СуммаВВалютеДоговора, ФорматСуммы),
					Формат(ДанныеДоговора.МаксимальныйКредит, ФорматСуммы)
				),
				ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура СписатьРезервыПодчиненныхДокументов()
	Перем Запрос;
	Перем БлокировкаПоЗаказу;
	
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	Если ЗначениеЗаполнено(ДокументОснование)
		И (ТипДокументаОснования = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
			ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.РезервированиеАвтомобилей")) Тогда
		
		Построитель = Новый ПостроительЗапроса(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль,
		|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ,
		|	-ЗаказыАвтомобилейОстатки.КоличествоОстаток КАК Количество,
		|	-ЗаказыАвтомобилейОстатки.РезервОстаток КАК Резерв,
		|	-ЗаказыАвтомобилейОстатки.СуммаОстаток КАК Сумма,
		|	-ЗаказыАвтомобилейОстатки.СуммаУпрОстаток КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(
		|		&Момент,
		|		{(Автомобиль), (Заказ)}) КАК ЗаказыАвтомобилейОстатки");
		
		Построитель.ЗаполнитьНастройки();
		Построитель.Параметры.Вставить("Момент", МоментВремени());
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
			Построитель.Отбор.Добавить("Заказ").Установить(ДокументОснование);
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РезервированиеАвтомобилей") Тогда
			Построитель.Отбор.Добавить("Заказ").Установить(ДокументОснование);
			Построитель.Отбор.Добавить("Автомобиль").Установить(Автомобиль);
		КонецЕсли;
		
		БлокировкаПоЗаказу = ДокументОснование;
		
		Запрос = Построитель.ПолучитьЗапрос();
		
	КонецЕсли;
	
	Если НЕ РабочийЛист.Пустая() Тогда
		
		Если Запрос = Неопределено Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль,
			|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ,
			|	-ЗаказыАвтомобилейОстатки.КоличествоОстаток КАК Количество,
			|	-ЗаказыАвтомобилейОстатки.РезервОстаток КАК Резерв,
			|	-ЗаказыАвтомобилейОстатки.СуммаОстаток КАК Сумма,
			|	-ЗаказыАвтомобилейОстатки.СуммаУпрОстаток КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(
			|		&Момент,
			|		Автомобиль = &Автомобиль
			|		И Заказ ССЫЛКА Документ.РезервированиеАвтомобилей
			|		И Заказ.ДокументОснование = &РабочийЛист) КАК ЗаказыАвтомобилейОстатки");
			Запрос.УстановитьПараметр("Момент", МоментВремени());
		Иначе
			Запрос.Текст = Запрос.Текст +
			"
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыАвтомобилейОстатки.Автомобиль,
			|	ЗаказыАвтомобилейОстатки.Заказ,
			|	-ЗаказыАвтомобилейОстатки.КоличествоОстаток,
			|	-ЗаказыАвтомобилейОстатки.РезервОстаток,
			|	-ЗаказыАвтомобилейОстатки.СуммаОстаток,
			|	-ЗаказыАвтомобилейОстатки.СуммаУпрОстаток
			|ИЗ
			|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(
			|		&Момент,
			|		Автомобиль = &Автомобиль
			|		И Заказ ССЫЛКА Документ.РезервированиеАвтомобилей
			|		И Заказ.ДокументОснование = &РабочийЛист) КАК ЗаказыАвтомобилейОстатки";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
		Запрос.УстановитьПараметр("РабочийЛист", РабочийЛист);
		
	КонецЕсли;
	
	Если Запрос = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыАвтомобилей");
	
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
	ЗначенияБлокировки.Вставить("Автомобиль", Автомобиль);
	
	Если БлокировкаПоЗаказу <> Неопределено Тогда
		
		ЗначенияБлокировки.Вставить("Заказ", ДокументОснование);
		
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = Движения.ЗаказыАвтомобилей.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Запись.Период = Дата;
			Запись.Регистратор = Ссылка;
			Запись.ХозОперация = ХозОперация;
		КонецЦикла;
		
		Движения.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
