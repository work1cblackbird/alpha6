#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * СуммаДокумента       - Число
//   * СуммаНДС             - Число
//   * СуммаБезНДС          - Число
//   * СуммаСкидкиДокумента - Число
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	СуммаДокумента = Объект.СуммаВсегоНаАвтомобиль + Объект.Товары.Итог("СуммаВсего") + Объект.Опции.Итог("СуммаВсего");
	
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	Если НЕ Расширенные Тогда
		
		Возврат ИтогиОперации;
		
	КонецЕсли;
	
	СуммаНДС = Объект.СуммаНДСНаАвтомобиль + Объект.Товары.Итог("СуммаНДС") + Объект.Опции.Итог("СуммаНДС");
	СуммаБезНДС = СуммаДокумента - СуммаНДС;
	СуммаСкидкиДокумента = Объект.СкидкиИМаркетинговыеПрограммы.Итог("Значение") + Объект.СуммаРучнойСкидкиНаАвтомобиль;
	
	ИтогиОперации.Вставить("СуммаНДС"            , СуммаНДС);
	ИтогиОперации.Вставить("СуммаБезНДС"         , СуммаБезНДС);
	ИтогиОперации.Вставить("СуммаСкидкиДокумента", СуммаСкидкиДокумента);
	Возврат ИтогиОперации;
	
КонецФункции

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки =
		Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки")
		+ Объект.СуммаРучнойСкидкиНаАвтомобиль
		+ Объект.СкидкиИМаркетинговыеПрограммы.Итог("Значение");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка,
										ТекстВременнаяТаблица = "",
										Объединить = Ложь,
										ТолькоОсновныеКонтакты = Истина) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица",  ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить",             Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции

// Процедура вызывает обработчики реквизитов справочника автомобили
//
// Параметры:
//	Объект            - Данные формы структура - Объект справочника автомобили для заполнения
//	ПараметрыДействия - Структура              - Перечень необходимых действий.
//
Процедура ОбновитьДанныеАвтомобиляЗаказа(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ОбновитьВсе = (ПараметрыДействия = Неопределено);
	
	Если ОбновитьВсе ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьМодель", Ложь) Тогда
		Справочники.Автомобили.МодельПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ОбновитьВсе ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьНаименование", Ложь) Тогда
		
		Объект.Наименование = Справочники.Автомобили.СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Расчет суммы и цены автомобиля
//
// Параметры:
//	ТочкаВхода        - Строка                 - Направление расчета
//	Объект            - Данные формы структура - Объект расчета
//	ПараметрыДействия - Стрктура               - Параметры расчета.
//	
Процедура РассчитатьСуммовыеПоказателиАвтомобиля(ТочкаВхода, Объект, ПараметрыДействия) Экспорт
	
	ТипаЦенВключаетНДС = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		
		ТипаЦенВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
		
	КонецЕсли;
	
	ЦенаВключаетНДС = ТипаЦенВключаетНДС
		ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЦенаВключаетНДС", Ложь);
	
	Если ТочкаВхода = "СуммаВсегоНаАвтомобиль" Тогда
		
		ПроцентовВЦелом = 100;
		
		Себестоимость = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость", 0);
		СуммаНДСНеОкр = Макс(Объект.СуммаВсегоНаАвтомобиль - Себестоимость, 0)
			* Объект.СтавкаНДСНаАвтомобиль.Ставка
			/ (ПроцентовВЦелом + Объект.СтавкаНДСНаАвтомобиль.Ставка);
		СуммаНДС = Окр(СуммаНДСНеОкр, 2);
		
		Если ЦенаВключаетНДС Тогда
			
			СуммаРасчетная = Объект.СуммаВсегоНаАвтомобиль;
			
		Иначе
			
			СуммаРасчетная = Объект.СуммаВсегоНаАвтомобиль - СуммаНДС;
			
		КонецЕсли;
		
		СуммаВсегоБезСкидки = СуммаРасчетная;
		СуммаРасчетная = СуммаРасчетная
			+ Объект.СкидкиИМаркетинговыеПрограммы.Итог("Значение")
			+ Объект.СуммаРучнойСкидкиНаАвтомобиль;
		Объект.ЦенаАвтомобиля = Окр(СуммаРасчетная, 2);
		
		Если НЕ Себестоимость = 0 Тогда
			
			СуммаВсегоБезСкидки = Макс(СуммаВсегоБезСкидки - Себестоимость, 0);
			
		КонецЕсли;
		
		СтавкаНДС = Объект.СтавкаНДСНаАвтомобиль.Ставка;
		
		Если ЦенаВключаетНДС Тогда
			
			Объект.СуммаНДСНаАвтомобиль = Окр((СуммаВсегоБезСкидки * СтавкаНДС)/(100 + СтавкаНДС),2);
			
		Иначе
			
			Объект.СуммаНДСНаАвтомобиль = Окр(СуммаВсегоБезСкидки * СтавкаНДС / 100,2);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТочкаВхода = "ЦенаАвтомобиля" ИЛИ ТочкаВхода = "СтавкаНДСНаАвтомобиль" Тогда
		
		СуммаСоСкидкой = Объект.ЦенаАвтомобиля
		- Объект.СкидкиИМаркетинговыеПрограммы.Итог("Значение")
		- Объект.СуммаРучнойСкидкиНаАвтомобиль;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДСНаАвтомобиль) 
			ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчитатьСтавкуНДС", Ложь) Тогда
			
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
			ЕстьСебестоимость = ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость"));

			ОсновнаяСтавка = ПараметрыНДС.ОсновнаяСтавка; 

			Если ЕстьСебестоимость Тогда 
				Объект.СтавкаНДСНаАвтомобиль= РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(ОсновнаяСтавка);
			Иначе
				Объект.СтавкаНДСНаАвтомобиль = ОсновнаяСтавка;
			КонецЕсли;			
		КонецЕсли;
		
		СтавкаНДС = Объект.СтавкаНДСНаАвтомобиль.Ставка;
		Себестоимость  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость", 0);
		СуммаРасчетная = Макс(СуммаСоСкидкой - Себестоимость, 0);
		
		Если ЦенаВключаетНДС Тогда
			
			Объект.СуммаВсегоНаАвтомобиль = ?(СуммаСоСкидкой > 0, СуммаСоСкидкой, 0);
			Объект.СуммаНДСНаАвтомобиль   = Окр((СуммаРасчетная * СтавкаНДС) / (100 + СтавкаНДС), 2);
			
		Иначе
			
			Объект.СуммаНДСНаАвтомобиль   = Окр((СуммаРасчетная * СтавкаНДС) / 100, 2);
			Объект.СуммаВсегоНаАвтомобиль = ?(СуммаСоСкидкой > 0, СуммаСоСкидкой + Объект.СуммаНДСНаАвтомобиль, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПерерасчетОтПредоплаты Тогда
		
		СуммаПредоплатыПриИзменении(Объект, ПараметрыДействия);
		
	Иначе
		
		ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Проверка наличия автомобиля на складах
//
// Параметры:
//  Объект - Структура - Содержит ссылку на документ заказ на автомобиль.
//
// Возвращаемое значение:
//   Булево   - Заказов на данный автомобиль нет.
//
Функция ПроверитьОстаткиАвтомобилей(Объект) Экспорт
	
	ДокументОбъект = Новый Структура("Ссылка,Дата,Автомобиль");
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект);
	ДокументОбъект.Вставить("МоментВремени", Новый МоментВремени(Объект.Дата));
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.ЗаказНаАвтомобильПроверитьОстаткиАвтомобилей(ДокументОбъект);
	
КонецФункции

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносИсполнителяИзСвойств() Экспорт
	
	ПеренесеныВсеСвойства = Истина;  
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	ЗаказНаАвтомобильДополнительныеРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.ДополнительныеРеквизиты КАК ЗаказНаАвтомобильДополнительныеРеквизиты
		|ГДЕ
		|	ЗаказНаАвтомобильДополнительныеРеквизиты.Свойство= &РеквизитКУдалению";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", РеквизитКУдалению);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваКУдалению = Новый Массив();		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказНаАвтомобиль");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Исполнитель) Тогда
				
				СвойствоИсполнительОрганизация = ЗначенияСвойств.Найти(РеквизитКУдалению,"Свойство");
				Руководитель     = ОрганизацииАльфаАвто.Руководитель(СвойствоИсполнительОрганизация.Значение, ДокументОбъект.Дата);
				
				Если ЗначениеЗаполнено(Руководитель) Тогда
					
					ДокументОбъект.Исполнитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						Руководитель,
						Выборка.Ссылка
					);
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Исполнитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
																
			Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
			Если Строка <> Неопределено Тогда 
						
				ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
			КонецЕсли;
											
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ЗаказНаАвтомобиль""";
				
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);

					КонецЕсли;
									
					Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//	Параметры - Структура - параметры выполнения операции.
//
// Возвращаемое значение:
//	Булево - Результат проверки;
//
Функция ПроверитьПереносИсполнителяИзСвойств(Параметры) Экспорт
	
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	ЗаказНаАвтомобильДополнительныеРеквизиты.Свойство КАК Свойство,
		|	ЗаказНаАвтомобильДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.ДополнительныеРеквизиты КАК ЗаказНаАвтомобильДополнительныеРеквизиты
		|ГДЕ
		|	ЗаказНаАвтомобильДополнительныеРеквизиты.Свойство = &РеквизитКУдалению
		|	И ЗаказНаАвтомобильДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", 	РеквизитКУдалению);
	Запрос.УстановитьПараметр("Ссылка",				Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("Модель");
	ОбязательныеРеквизиты.Добавить("Марка");
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобиль Тогда
		ОбязательныеРеквизиты.Добавить("ДокументОснование");
	КонецЕсли;
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобильОтмена Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		ОбязательныеРеквизиты.Добавить("Заказчик");
		ОбязательныеРеквизиты.Добавить("СрокПоставки");
	Иначе
		ОбязательныеРеквизиты.Добавить("ПричинаОтмены");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("Опции.Опция");
	ОбязательныеРеквизиты.Добавить("Опции.Количество");
	
	ОбязательныеРеквизиты.Добавить("ПоступленияTradeIn.Документ");

	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - с полями:
//   * Товары - Массив из Строка - список реквизитов комбинация которых дает ключ уникальности;
//   * Опции - Массив из Строка - список реквизитов комбинация которых дает ключ уникальности;
//   * ПоступленияTradeIn - Массив из Строка - список реквизитов комбинация которых дает ключ уникальности;
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	УникальныеОпции = Новый Массив;
	УникальныеОпции.Добавить("Опция");
	
	ПоступленияTradeIn = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Документ");
	
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	УникальныеРеквизиты.Вставить("Опции", УникальныеОпции);
	УникальныеРеквизиты.Вставить("ПоступленияTradeIn", ПоступленияTradeIn);
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Перезаполнение цен автомобиля и опций.
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчетСуммы", ИСТИНА);
	
	// Прекращаем обработку, если пересчет не требуется
	Если НЕ (ВозможенПересчетСуммы И (ТребуетсяУстановкаЦен ИЛИ ТребуетсяПересчетЦен)) Тогда
		
		ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
		Возврат;
		
	КонецЕсли;
	
	// установим цены
	Если ТребуетсяУстановкаЦен Тогда
		// установим цену авто
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации", Объект.Автомобиль, Объект.Модель, Объект.ВариантКомплектации);
		Объект.ЦенаАвтомобиля = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
				Объект.ТипЦен, ОбъектыПоискаЦены, , ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка),
				Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		Если ТребуетсяПересчетЦен Тогда
			СтарыйКурс = ПараметрыДействия.СтарыйКурс;
			НовыйКурс = Объект.КурсДокумента;
			
			Если (СтарыйКурс * НовыйКурс) = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект.Ссылка);
				Возврат;
			КонецЕсли;
			
			Если НЕ СтарыйКурс = НовыйКурс Тогда
				КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
				Объект.СебестоимостьАвтомобиля = Окр(Объект.СебестоимостьАвтомобиля * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// !!!_Временное изменение пока не исправлена ошибка в зф при вводе на основании рабочего листа.
		Если НЕ ПараметрыДействия.Свойство("ОбработкаЗаполненияРабочийЛист") Тогда
			ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		// установим цены опций
		Для Каждого Строка Из Объект.Опции Цикл
			ОпцииОпцияПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс = Объект.КурсДокумента;
		
		Если (СтарыйКурс * НовыйКурс) = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс = НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
		
		Для Каждого Скидка Из Объект.СкидкиИМаркетинговыеПрограммы Цикл
			Скидка.Значение = Окр(Скидка.Значение * КоэффициентСоотношенияКурсов, 2);
		КонецЦикла;
		Объект.СуммаРучнойСкидкиНаАвтомобиль = Окр(Объект.СуммаРучнойСкидкиНаАвтомобиль * КоэффициентСоотношенияКурсов, 2);
		ПараметрыДействия.Вставить("ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах", Истина);
		
		Объект.ЦенаАвтомобиля = Окр(Объект.ЦенаАвтомобиля * КоэффициентСоотношенияКурсов, 2);
		Объект.СебестоимостьАвтомобиля = Окр(Объект.СебестоимостьАвтомобиля * КоэффициентСоотношенияКурсов, 2);
		ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
		
		Для Каждого Строка Из Объект.Опции Цикл
			Строка.Цена = Окр(Строка.Цена * КоэффициентСоотношенияКурсов, 2);
			ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	// проверим скидки и маркетинговые программы
	ПроверитьДоступностьВыбранныхСкидокПоОбласти(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Заполним ставки НДС для нестандартных реквизитов шапки и тч
	ЗаполнитьСтавкиОпцийИАвтомобиля(Объект, ПараметрыДействия);
	
	// проверим скидки и маркетинговые программы
	ПроверитьДоступностьВыбранныхСкидокПоОбласти(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// Заполним ставки НДС для нестандартных реквизитов шапки и тч
	ЗаполнитьСтавкиОпцийИАвтомобиля(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) И Объект.Исполнитель.Организация <> Объект.Организация Тогда
		Объект.Исполнитель = Справочники.Подписанты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
		Объект.Заказчик = Объект.Контрагент;
		ЗаказчикПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказчик".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказчикПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Заказчик) И (Объект.Заказчик <> Объект.Контрагент) Тогда
		Объект.Контрагент = Объект.Заказчик;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	Если Объект.ХозОперация <> Справочники.ХозОперации.ЗаказНаАвтомобильПереуступка Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			ПроцентПредоплатыНовый = ?(
					Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты = - 1,
					ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", Объект),
					Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты
				);
		
			Если Объект.ПроцентПредоплаты <> ПроцентПредоплатыНовый Тогда
				Объект.ПроцентПредоплаты = ПроцентПредоплатыНовый;
				ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаСоСкидкой = РассчитатьИтогиОперации(Объект).СуммаДокумента;
	Объект.СуммаПредоплаты = (СуммаСоСкидкой * Объект.ПроцентПредоплаты) / 100;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("Себестоимость", Объект.СебестоимостьАвтомобиля);
	
	РассчитатьСуммовыеПоказателиАвтомобиля("СтавкаНДСНаАвтомобиль", Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма предоплаты".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаПредоплатыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаСоСкидкой = Документы.ЗаказНаАвтомобиль.РассчитатьИтогиОперации(Объект).СуммаДокумента;
	Если СуммаСоСкидкой = 0 Тогда
		Объект.ПроцентПредоплаты = 0;
	Иначе
		Объект.ПроцентПредоплаты = Цел((Объект.СуммаПредоплаты * 100) / СуммаСоСкидкой * 100) / 100
		КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
	// !!! добавить расчет скидок автомобилей
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	//!!!
	//СуммаАвтомобиляБезСкидки = Объект.ЦенаАвтомобиля - Объект.СуммаСкидкиНаАвтомобиль;
	//Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) ИЛИ Объект.ТипЦен.ЦенаВключаетНДС Тогда
	//	Объект.СуммаВсегоНаАвтомобиль = СуммаАвтомобиляБезСкидки;
	//Иначе
	//	Объект.СуммаВсегоНаАвтомобиль = СуммаАвтомобиляБезСкидки + Объект.СуммаНДСНаАвтомобиль;
	//КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ПараметрыДействия.Вставить("НеИзменятьЦенуАвтомобиля", Истина);
		
		РеквизитыЗаполнения = "Модель,ВариантКомплектации,Цвет,ЦветКод,ТипСалона" +
			?(ЗначениеЗаполнено(Объект.Автомобиль.ВариантКомплектации),"",",ТипКПП,ТипКузова,ТипДвигателя");
		
		ЗаполнитьЗначенияСвойств(Объект, Объект.Автомобиль, РеквизитыЗаполнения);
		МодельПриИзменении(Объект, ПараметрыДействия);
		ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
		
		ПараметрыДействия.Удалить("НеИзменятьЦенуАвтомобиля");
		
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации", Объект.Автомобиль, Объект.Модель, Объект.ВариантКомплектации);
		НоваяЦенаАвтомобиля = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
			Объект.ТипЦен,
			ОбъектыПоискаЦены,
			Объект.ВариантКомплектации,
			?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени()),
			Объект.ВалютаДокумента,
			Объект.КурсДокумента
		);
		
		Если ЗначениеЗаполнено(НоваяЦенаАвтомобиля) И НоваяЦенаАвтомобиля <> Объект.ЦенаАвтомобиля Тогда
			Объект.ЦенаАвтомобиля = НоваяЦенаАвтомобиля;
		КонецЕсли;
		
		Объект.СебестоимостьАвтомобиля = 0;
		
		Если ПроверитьОстаткиАвтомобилей(Объект) Тогда
			Объект.СебестоимостьАвтомобиля = АвтомобилиСервер
				.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект);
		КонецЕсли;
		
		ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
		ЗаполнитьКомплектациюАвтомобиля(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Модель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МодельПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.Марка = Объект.Модель.Марка;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ВариантКомплектации.Владелец <> Объект.Модель Тогда
		Объект.ВариантКомплектации = Неопределено;
	КонецЕсли;
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	// заполним данные автомобиля
	Если АвтомобильЗаказа <> Неопределено Тогда
		Если Объект.Модель <> АвтомобильЗаказа.Модель Тогда
			АвтомобильЗаказа.Модель = Объект.Модель;
			ПараметрыДействия.Вставить("ОбновитьМодель", Истина);
			ПараметрыДействия.Вставить("ОбновитьНаименование", Истина);
		КонецЕсли;
		
		Если Объект.ВариантКомплектации <> АвтомобильЗаказа.ВариантКомплектации Тогда
			АвтомобильЗаказа.ВариантКомплектации = Объект.ВариантКомплектации;
			ПараметрыДействия.Вставить("ОбновитьВариантКомплектации", Истина);
			ПараметрыДействия.Вставить("ОбновитьНаименование", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // МодельПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ВариантКомплектации".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	РеквизитыКомплектации = Новый Структура("Владелец,ТипДвигателя,ТипКузова,ТипКПП,МодельДвигателя");
	
	Если ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
		
		РеквизитыКомплектации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ВариантКомплектации,
			"Владелец,ТипДвигателя,ТипКузова,ТипКПП,МодельДвигателя"
		);
		
		Если РеквизитыКомплектации.Владелец <> Объект.Модель Тогда
			
			Объект.Модель = РеквизитыКомплектации.Владелец;
			МодельПриИзменении(Объект, ПараметрыДействия);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКомплектации, "ТипДвигателя,ТипКузова,ТипКПП,МодельДвигателя");
		
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеИзменятьЦенуАвтомобиля", Ложь) Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			
			НаМомент = Объект.Дата;
			
		Иначе
			
			НаМомент = Объект.Ссылка;
			
		КонецЕсли;
		
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации");
		ЗаполнитьЗначенияСвойств(ОбъектыПоискаЦены, Объект);
		Объект.ЦенаАвтомобиля = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
			Объект.ТипЦен,
			ОбъектыПоискаЦены,
			Объект.ВариантКомплектации,
			НаМомент,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента
		);
		ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено И Объект.ВариантКомплектации <> АвтомобильЗаказа.ВариантКомплектации Тогда
		
		АвтомобильЗаказа.ВариантКомплектации = Объект.ВариантКомплектации;
		ПараметрыДействия.Вставить("ОбновитьВариантКомплектации", Истина);
		ПараметрыДействия.Вставить("ОбновитьНаименование",        Истина);
		ЗаполнитьЗначенияСвойств(АвтомобильЗаказа, РеквизитыКомплектации, "ТипДвигателя,ТипКузова,ТипКПП,МодельДвигателя");
		
	КонецЕсли;
	
	УдалитьНеподходящиеАвтомобилюОпции(Объект);
	ПроверитьДоступностьВыбранныхСкидокПоУсловию(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена автомобиля".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПолучитьСебестоимостьАвтомобиля", Ложь) Тогда
		Если ПроверитьОстаткиАвтомобилей(Объект) Тогда
			Объект.СебестоимостьАвтомобиля = АвтомобилиСервер
				.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Объект.Автомобиль, Объект);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("Себестоимость", Объект.СебестоимостьАвтомобиля);
	
	РассчитатьСуммовыеПоказателиАвтомобиля("ЦенаАвтомобиля", Объект, ПараметрыДействия);
	
КонецПроцедуры // ЦенаАвтомобиляПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма ручной скидки на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаРучнойСкидкиНаАвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("Себестоимость", Объект.СебестоимостьАвтомобиля);
	
	РассчитатьСуммовыеПоказателиАвтомобиля("ЦенаАвтомобиля", Объект, ПараметрыДействия);
	
КонецПроцедуры // ЦенаАвтомобиляПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цвет".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦветПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		АвтомобильЗаказа.Цвет = Объект.Цвет;
		ПараметрыДействия.Вставить("ОбновитьЦвет", Истина);
		ПараметрыДействия.Вставить("ОбновитьНаименование", Истина);
	КонецЕсли;
	
КонецПроцедуры // ЦветПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цвет код".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦветКодПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		АвтомобильЗаказа.ЦветКод = Объект.ЦветКод;
	КонецЕсли;
	
КонецПроцедуры // ЦветКодПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип салона".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипСалонаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		АвтомобильЗаказа.ТипСалона = Объект.ТипСалона;
	КонецЕсли;
	
КонецПроцедуры // ТипСалонаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Модель двигателя".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МодельДвигателяПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		АвтомобильЗаказа.МодельДвигателя = Объект.МодельДвигателя;
	КонецЕсли;
	
КонецПроцедуры // ТипСалонаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаВсегоНаАвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("Себестоимость", Объект.СебестоимостьАвтомобиля);
	
	РассчитатьСуммовыеПоказателиАвтомобиля("СуммаВсегоНаАвтомобиль", Объект, ПараметрыДействия);
	
КонецПроцедуры // ЦветКодПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие. 
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие. 
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие. 
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Расчет скидок по строек товаров
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ИмяТабличнойЧасти 		- ТабличнаяЧасть - табличная часть документа, сумму по которой необходимо получить
//  СкидкаШапкиАбсолютная - Булево - признак абсолютной скидки шапки
//
// Возвращаемое значение:
//   Число		- Сумма документа без скидки.
//
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОпции

// Обработчик события возникающего при изменении данных реквизита "Опция" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииОпцияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Опция.ПризнакНабора Тогда
		РазложитьНаборОпцийНаСтроки(Объект, Строка, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Опция) Тогда
		
		МожноУстанавливатьОпцию =
			ОпцииАвтомобилей.МожноУстанавливатьОпциюДляКомплектации(Строка.Опция, Объект.ВариантКомплектации)
			ИЛИ ОпцииАвтомобилей.МожноУстанавливатьОпциюДляАвтомобиля(Строка.Опция, Объект.Автомобиль);
		
		Если НЕ МожноУстанавливатьОпцию Тогда
			
			БазовыеОпцииКомплектации = ОпцииАвтомобилей.БазовыеОпцииКомплектации(Объект.ВариантКомплектации);
			
			Если БазовыеОпцииКомплектации.Найти(Строка.Опция) = Неопределено Тогда
				
				ШаблонСообщения = НСтр("ru = 'Опция <%1> недопустима для данного варианта комплектации'");
				
			Иначе
				
				ШаблонСообщения = НСтр("ru = 'Опция <%1> для данного варианта комплектации поставляется как базовая'");
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ШаблонСообщения, Строка.Опция)
			);
			Строка.Опция = Неопределено;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Строка.СуммаВсего = 0; Строка.СуммаНДС = 0;
	
	Если Строка.Количество = 0 Тогда Строка.Количество = 1 КонецЕсли;
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	
	ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь)
		ИЛИ ПараметрыНДС.ОсвобожденОтНДС;

	Если ОсвобожденОтНДС Тогда 
		Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	Иначе 
		Строка.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Опция); 
	КонецЕсли;
		
	Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуОпции(Объект.ТипЦен, Строка.Опция, Объект.Модель, Объект.ВариантКомплектации,
		?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка), Объект.ВалютаДокумента, Объект.КурсДокумента);
	
	РассчитатьСуммуСтрокиОпций("Цена", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтрокиОпций("Количество", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтрокиОпций("Цена", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтрокиОпций("Сумма", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтрокиОпций("СуммаВсего", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтрокиОпций("СтавкаНДС", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Расчет суммовых показателей строки опций
// 
// Параметры:
//  ТочкаВхода - Строка - указывает на реквизит при пересчете, которого произошел вызов
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РассчитатьСуммуСтрокиОпций(ТочкаВхода, Объект, Строка, ПараметрыДействия) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Реквизита КоличествоБазовое может не быть в ТЧ
	ЕстьСумма = ЕстьРеквизит(Объект, "Сумма", "Опции");
	ЕстьСуммаВсего = ЕстьРеквизит(Объект, "СуммаВсего", "Опции");
	ЕстьСтавкаНДС = ЕстьРеквизит(Объект, "СтавкаНДС", "Опции");
	
	// Пересчет "Суммы" и "Суммы НДС"
	Если ТочкаВхода = "СуммаВсего" И ЕстьСумма Тогда
		Если ЕстьСтавкаНДС Тогда
			Если ПараметрыДействия.Свойство("ТипЦен") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			СтавкаНДС = Строка.СтавкаНДС;
		Иначе
			ЦенаВключаетНДС = Истина;
			СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего * 100 / (100 + СтавкаНДС.Ставка));
		Строка.Сумма = Окр(СуммаРасчетная, 2);
		
		// Рассчитываем новую сумму НДС.
		Строка.СуммаНДС = Окр((Строка.СуммаВсего * СтавкаНДС.Ставка) / (100 + СтавкаНДС.Ставка), 2);
	КонецЕсли;
	
	// Пересчет "Цены" от "Суммы"
	Если (ТочкаВхода = "Сумма" ИЛИ
			ТочкаВхода = "СуммаВсего") Тогда
		
		Если Строка.Количество = 0 Тогда
			Строка.Цена = Строка.Сумма;
		Иначе
			Строка.Цена = Окр(Строка.Сумма / Строка.Количество, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Суммы" от "Цены"
	Если ЕстьСумма И (ТочкаВхода = "Количество" ИЛИ
			ТочкаВхода = "Цена") Тогда
		
		Строка.Сумма = Строка.Цена * Строка.Количество;
		
	КонецЕсли;
	
	// Пересчет "Суммы НДС" и "Суммы всего"
	Если (ТочкаВхода = "Количество" ИЛИ
			ТочкаВхода = "Цена" ИЛИ
			ТочкаВхода = "Сумма" ИЛИ
			ТочкаВхода = "СтавкаНДС") И
		ЕстьСумма Тогда
		
		Если ЕстьСтавкаНДС Тогда
			// Включает ли цена НДС?
			Если ПараметрыДействия.Свойство("ТипЦен") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			СтавкаНДС = Строка.СтавкаНДС.Ставка;
			
			Если ЦенаВключаетНДС Тогда
				Строка.СуммаВсего = Строка.Сумма;
				Строка.СуммаНДС = Окр((Строка.Сумма * СтавкаНДС) / (100 + СтавкаНДС), 2);
			Иначе
				Строка.СуммаНДС = Окр((Строка.Сумма * СтавкаНДС) / 100, 2);
				Строка.СуммаВсего = Строка.Сумма + Строка.СуммаНДС;
			КонецЕсли;
		ИначеЕсли ЕстьСуммаВсего Тогда
			Строка.СуммаВсего = Строка.Сумма;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Если ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента") Тогда
		
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.ЗаказНаАвтомобиль",
			"ЗаказНаАвтомобиль",
			НСтр("ru = 'Заказ на автомобиль'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати"
		);
		
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.ЗаказНаАвтомобиль",
			"ДоговорПродажи",
			НСтр("ru = 'Договор продажи'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати"
		);
		
	Иначе
		
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.ЗаказНаАвтомобиль",
			"ЗаказНаАвтомобиль",
			НСтр("ru = 'Заказ на автомобиль'"),
			СсылкаНаДокумент
		);
		
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.ЗаказНаАвтомобиль",
			"ДоговорПродажи",
			НСтр("ru = 'Договор продажи'"),
			СсылкаНаДокумент
		);
		
	КонецЕсли;
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаАвтомобиль",
		"АктПриема",
		НСтр("ru = 'Акт осмотра автомобиля с пробегом'"),
		СсылкаНаДокумент
	);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений  - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаАвтомобиль") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ЗаказНаАвтомобиль",
			"Заказ на автомобиль",
			ПечатьЗаказНаАвтомобиль(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорПродажи") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ДоговорПродажи",
			"Договор продажи",
			ПечатьДоговорПродажи(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПриема") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктПриема",
			"Акт осмотра автомобиля с пробегом",
			ПечатьАктПриема(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ЗаказНаАвтомобиль" 
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//
// Возвращаемое значение: 
//	ТабличныйДокумент - Возвращает сформированный табличный документ
// 
Функция ПечатьЗаказНаАвтомобиль(МассивОбъектов, ОбъектыПечати, ПараметрыПечати=Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// Предварительные обработки данных
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, Документ.ВалютаДокумента,
			Документ.КурсДокумента, ВалютаПечатногоДокумента, Документ.Дата);
		
		// Приступим к печати
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаАвтомобиль.ПФ_MXL_ЗаказНаАвтомобиль");
		
		// получение необходимых областей
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить("Опции");
		ТабличныеЧасти.Добавить("Товары");
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет,Документ, ТабличныеЧасти);
		
		// Для начала настроим макет
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			УправлениеПечатьюПлатформа.ЗаполнитьЛоготип(ОбластьЗаголовок,Документ.Организация, Документ.ПодразделениеКомпании);
			УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ, "ШК2");
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		КонецЕсли;
		
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьТовар            = Макет.ПолучитьОбласть("Товар");
		ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодписи          = Макет.ПолучитьОбласть("Подписи");
		
		// Вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		// заказчик	
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		
		ОбластьЗаголовок.Параметры.ЗаказчикПредставление =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Заказчик);
		
		ОбластьЗаголовок.Параметры.ЗаказчикПочтовыйАдрес = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Заказчик, Новый Структура("АдресФактический", ""), ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ЗаказчикТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Заказчик, Новый Структура("ТелефонРабочий", ""), ДополнительныеПараметры);
		
		// контрагент
		ОбластьЗаголовок.Параметры.КонтрагентПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.СрокПоставки = Формат(Документ.СрокПоставки, "ДФ='dd.ММММ.yyyy'; ДП=""Неопределен""");
		ОбластьЗаголовок.Параметры.СуммаПредоплаты = Формат(Документ.СуммаПредоплаты * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		
		// автомобиль
		ТипДвигателя = ?(НЕ Документ.МодельДвигателя.Пустая(), Документ.МодельДвигателя.Тип, Документ.ТипДвигателя);
		
		ОбластьЗаголовок.Параметры.Заполнить(Документ.ВариантКомплектации);
		
		АвтомобильМодель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Модель);
		АвтомобильМарка = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Марка);
		ОбластьЗаголовок.Параметры.АвтомобильМодель =
			СтрШаблон("%1, %2", СокрЛП(АвтомобильМарка), СокрЛП(АвтомобильМодель));
		
		ВариантКомплектации = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации);
		ОбластьЗаголовок.Параметры.АвтомобильВариантКомплектации = ВариантКомплектации;
		
		АвтомобильЦвет = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Цвет);
		ОбластьЗаголовок.Параметры.АвтомобильЦвет = АвтомобильЦвет;
		
		ОбластьЗаголовок.Параметры.АвтомобильЦветКод = Документ.ЦветКод;
		
		АвтомобильТипКузова = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипКузова);
		ОбластьЗаголовок.Параметры.АвтомобильТипКузова = АвтомобильТипКузова;
		
		АвтомобильТипДвигателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТипДвигателя);
		ОбластьЗаголовок.Параметры.АвтомобильТипДвигателя = АвтомобильТипДвигателя;
		
		АвтомобильТипКПП = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипКПП);
		ОбластьЗаголовок.Параметры.АвтомобильТипКПП = АвтомобильТипКПП;
		
		АвтомобильТипСалона = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипСалона);
		ОбластьЗаголовок.Параметры.АвтомобильТипСалона = АвтомобильТипСалона;
		
		ОбластьЗаголовок.Параметры.АвтомобильЦена = Формат(Документ.ЦенаАвтомобиля * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		ПредставлениеНДС = ?(Документ.ТипЦен.ЦенаВключаетНДС, НСтр("ru = 'В т.ч.'" + " ", "") + "НДС", "");
		ОбластьЗаголовок.Параметры.ПредставлениеНДС = ПредставлениеНДС
			+ " (" + Документ.СтавкаНДСНаАвтомобиль.Наименование + ")" + ": "
			+ Формат(Документ.СуммаНДСНаАвтомобиль * КоэффициентПересчета,
				?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		ОбластьЗаголовок.Параметры.СуммаВсегоНаАвтомобиль = Формат(Документ.СуммаВсегоНаАвтомобиль * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		
		ОбластьЗаголовок.Параметры.ПредставлениеСкидки = Формат(
			Документ.СкидкиИМаркетинговыеПрограммы.Итог("Значение") * КоэффициентПересчета
				+ Документ.СуммаРучнойСкидкиНаАвтомобиль,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00")
		);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// Готовим области строки
		СтруктураИтоговПоСтраницеОпции = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",
			ВалютаПечатногоДокумента, 0, 0);
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		
		// Пересчитаем ТЧ
		ЭтотОбъектОпции = Документ.Опции.Выгрузить();
		
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
		ДокументОбъектСтруктура.Документ = Документ;
		
		Если ЭтотОбъектОпции.Количество() > 0 Тогда
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ЭтотОбъектОпции,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		// Дополнительные колонки для того чтобы замаскировать ТЧ Опции под ТЧ Товары
		ЭтотОбъектОпции.Колонки.Добавить("Номенклатура");
		ЭтотОбъектОпции.Колонки.Добавить("ЕдиницаИзмерения");
		ЭтотОбъектОпции.Колонки.Добавить("Коэффициент");
		
		// Перебор строк
		ВыборкаТабличнойЧасти = ЭтотОбъектОпции;
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда 
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы = "Опции";
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			ОбластьШапкаТаблицы.Параметры.ИмяКолонкиТовара = "Опции";
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		КонецЕсли;
		
		// Заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			
			// Предварительная обработка
			СтрокаТабличнойЧасти.Номенклатура		= СтрокаТабличнойЧасти.Опция;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= "";
			СтрокаТабличнойЧасти.Коэффициент		= 1;
			// Заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТабличнойЧасти,
				Документ, "Опции");
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтраницеОпции, Документ);
			
			// Инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтраницеОпции = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",
					ВалютаПечатногоДокумента, 0, 0);
				НомерСтраницыПредыдущий = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтраницеОпции);
			
		КонецЦикла;
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда
			// Довыводим последний подвал, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтраницеОпции, Документ);
			КонецЕсли;
			
			// итоги 
			ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
			СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
			ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
			НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
			ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
			ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
				ВыборкаТабличнойЧасти.Количество(),
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, ВалютаПечатногоДокумента));
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтраницеОпции, Документ);
		КонецЕсли;
		
		// ПЕЧАТЬ ТАБЛИЦЫ ТОВАРОВ	
		
		// пересчитаем ТЧ
		ЭтотОбъектТовары = Документ.Товары.Выгрузить();
		
		Если ЭтотОбъектТовары.Количество() > 0 Тогда
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ЭтотОбъектТовары,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		// перебор строк
		ВыборкаТабличнойЧасти = ЭтотОбъектТовары;
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = "";
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "";
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы = "Оборудование";
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			// выводим шапку
			ОбластьШапкаТаблицы.Параметры.ИмяКолонкиТовара = "Оборудование";
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		КонецЕсли;
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			
			// Заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТабличнойЧасти,
				Документ, "Товары");
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
			
			// Инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда
			// Довыводим последний подвал, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// итоги 
			ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
			СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
			ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
			НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
			СуммаСкидки = 0;
			Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0 Тогда
				СуммаСкидки = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
			КонецЕсли;
			Если ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки") > 0 Тогда
				СуммаСкидки = СуммаСкидки + ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки");
			КонецЕсли;
			Если ЗначениеЗаполнено(СуммаСкидки) Тогда
				ОбластьПодвал.Параметры.СкидкаВсего = Формат(СуммаСкидки, ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
			ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
				ВыборкаТабличнойЧасти.Количество(),
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, ВалютаПечатногоДокумента));
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Выводим представления и расшифровки подписей
		ОбластьПодписи.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ОбластьПодписи.Параметры.СуммаДокумента  = Формат(Документ.СуммаДокумента * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		ОбластьПодписи.Параметры.СуммаДокументаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			Документ.СуммаДокумента * КоэффициентПересчета, ВалютаПечатногоДокумента);
		СуммаНДС = Документ.СуммаНДСНаАвтомобиль + Документ.Опции.Итог("СуммаНДС") + Документ.Товары.Итог("СуммаНДС");
		ОбластьПодписи.Параметры.СуммаНДС = Формат(СуммаНДС * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		
		ДанныеПодписант = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "Исполнитель"); 		
		ОбластьПодписи.Параметры.ИсполнительПредставление = ДанныеПодписант.Представление;
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаАвтомобиль_ЗаказНаАвтомобиль";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция печати договора продажи  
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//
// Возвращаемое значение: 
//	ТабличныйДокумент - Возвращает сформированный табличный документ
// 
Функция ПечатьДоговорПродажи(МассивОбъектов, ОбъектыПечати, ПараметрыПечати=Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// Предварительные обработки данных
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента",
			Документ.ВалютаДокумента);
		
		КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, Документ.ВалютаДокумента, Документ.КурсДокумента, ВалютаПечатногоДокумента, Документ.Дата);
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// пересчитаем ТЧ
		ТаблицаОборудования = Документ.Опции.Выгрузить();
		
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
		ДокументОбъектСтруктура.Документ = Документ;
		
		Если ТаблицаОборудования.Количество() > 0 Тогда
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаОборудования,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		ТаблицаТоваров = Документ.Товары.Выгрузить();
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаТоваров,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		// Приступим к печати
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаАвтомобиль.ПФ_MXL_ДоговорПродажи");
		
		// Для начала настроим макет
		ОбластьЗаголовок                = Макет.ПолучитьОбласть("Заголовок");
		ОбластьПриложениеШапка          = Макет.ПолучитьОбласть("ПриложениеШапка");
		ОбластьШапкаТаблицы             = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока                   = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал                   = Макет.ПолучитьОбласть("Подвал");
		ОбластьШапкаТаблицыОборудование = Макет.ПолучитьОбласть("ШапкаТаблицыОборудование");
		ОбластьСтрокаОборудование       = Макет.ПолучитьОбласть("СтрокаОборудование");
		
		// заголовок документа
		ОбластьЗаголовок.Параметры.НомерДоговора = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаДоговора  = Формат(Документ.Дата,"ДФ=dd.MM.yyyy");
		
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
		ОбластьЗаголовок.Параметры.ФирмаАдрес               = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		ОбластьЗаголовок.Параметры.ФирмаТелефоны            = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация,Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
		
		ОбластьЗаголовок.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		ОбластьЗаголовок.Параметры.ЗаказчикПочтовыйАдрес      = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент,Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьЗаголовок.Параметры.ЗаказчикТелефоны           = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент,Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Запрос = Новый Запрос;
		Запрос.Текст = "	
		|ВЫБРАТЬ
		|	ПодтверждающиеДокументы.Ссылка КАК Документ,
		|	ПодтверждающиеДокументы.КемВыдан КАК ДокументКемВыдан,
		|	ПодтверждающиеДокументы.ДатаВыдачи КАК ДокументДатаВыдачи,
		|	ПодтверждающиеДокументы.ВидПодтверждающегоДокумента КАК ВидДокумента
		|ИЗ
		|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
		|ГДЕ
		|	ПодтверждающиеДокументы.Владелец = &Владелец
		|	И ПодтверждающиеДокументы.Текущий = ИСТИНА
		|";
		Запрос.УстановитьПараметр("Владелец", Документ.Контрагент);
		ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		Если ВыборкаДокументов.Количество()=0 Тогда
			ОбластьЗаголовок.Параметры.ЗаказчикДокумент				= "_________________";
			ОбластьЗаголовок.Параметры.ЗаказчикДокументКемВыдан		= "___________";
			ОбластьЗаголовок.Параметры.ЗаказчикДокументДатаВыдачи		= "___________";
		Иначе 
			ВыборкаДокументов.Следующий();
			ОбластьЗаголовок.Параметры.ЗаказчикДокумент				= Строка(ВыборкаДокументов.ВидДокумента) + ": " + ВыборкаДокументов.Документ;
			ОбластьЗаголовок.Параметры.ЗаказчикДокументКемВыдан		= ВыборкаДокументов.ДокументКемВыдан;
			ОбластьЗаголовок.Параметры.ЗаказчикДокументДатаВыдачи		= Формат(ВыборкаДокументов.ДокументДатаВыдачи,"ДФ='dd MMMM yyyy'");
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель","Руководитель"));
		
		СуммаПредоплатыПечать = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Документ.СуммаПредоплаты,Документ.ВалютаДокумента,Документ.Дата,ВалютаПечатногоДокумента,Документ.Дата,РежимОкругления.Окр15как20);
		ОбластьЗаголовок.Параметры.СуммаПредоплаты 		= СуммаПредоплатыПечать;
		ОбластьЗаголовок.Параметры.СуммаПредоплатыПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПредоплатыПечать, ВалютаПечатногоДокумента);
		// ОбластьМакета.Параметры.ВалютаДокумента 		= ВалютаПечатногоДокумента;
		ОбластьЗаголовок.Параметры.СрокПоставки    		= Формат(Документ.СрокПоставки,"ДФ=dd MMMM yyyy");
		ОбластьЗаголовок.Параметры.ПредставлениеАвтомобиля = " модель """+УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Модель)+?(НЕ ЗначениеЗаполнено(Документ.ВариантКомплектации),"",""" в комплектации """+УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации)+"""");
		
		СуммаАвтомобиль = РассчитатьИтогиОперации(Документ, Истина);
		СуммаВсегоНаАвтомобильПечать = СуммаАвтомобиль.СуммаДокумента;
		СуммаВсегоНаАвтомобильПечать = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаВсегоНаАвтомобильПечать,Документ.ВалютаДокумента,Документ.Дата,ВалютаПечатногоДокумента,Документ.Дата,РежимОкругления.Окр15как20);
		ОбластьЗаголовок.Параметры.СуммаВсегоНаАвтомобиль 			= СуммаВсегоНаАвтомобильПечать;
		ОбластьЗаголовок.Параметры.СуммаВсегоНаАвтомобильПрописью 	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсегоНаАвтомобильПечать,ВалютаПечатногоДокумента);
		
		ОбластьЗаголовок.Параметры.СтавкаНДСНаАвтомобиль 			= Документ.СтавкаНДСНаАвтомобиль.Ставка;
		СуммаНДСНаАвтомобильПечать = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаАвтомобиль.СуммаНДС,Документ.ВалютаДокумента,Документ.Дата,ВалютаПечатногоДокумента,Документ.Дата,РежимОкругления.Окр15как20);
		ОбластьЗаголовок.Параметры.СуммаНДСНаАвтомобиль 			= СуммаНДСНаАвтомобильПечать;
		ОбластьЗаголовок.Параметры.СуммаНДСНаАвтомобильПрописью 	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаНДСНаАвтомобильПечать,ВалютаПечатногоДокумента);
		
		ОбластьЗаголовок.Параметры.ПроцентПредоплаты 				= Документ.ПроцентПредоплаты;
		ОбластьЗаголовок.Параметры.ПроцентПредоплатыПрописью 		= ЧислоПрописью(Документ.ПроцентПредоплаты);
		СуммаПредоплатыПечать = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Документ.СуммаПредоплаты,Документ.ВалютаДокумента,Документ.Дата,ВалютаПечатногоДокумента,Документ.Дата,РежимОкругления.Окр15как20);
		ОбластьЗаголовок.Параметры.СуммаПредоплаты   				= СуммаПредоплатыПечать;
		ОбластьЗаголовок.Параметры.СуммаПредоплатыПрописью   		= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПредоплатыПечать,ВалютаПечатногоДокумента);
		СуммаНДСПредоплатыПечать = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаАвтомобиль.СуммаНДС*Документ.ПроцентПредоплаты/100,Документ.ВалютаДокумента,Документ.Дата,ВалютаПечатногоДокумента,Документ.Дата,РежимОкругления.Окр15как20);
		ОбластьЗаголовок.Параметры.СуммаНДСПредоплаты   			= СуммаНДСПредоплатыПечать;
		ОбластьЗаголовок.Параметры.СуммаНДСПредоплатыПрописью   	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаНДСПредоплатыПечать,ВалютаПечатногоДокумента);
		
		ПроцентДоплаты = 100 - Документ.ПроцентПредоплаты;
		СуммаДоплаты = СуммаВсегоНаАвтомобильПечать - СуммаПредоплатыПечать;
		ОбластьЗаголовок.Параметры.ПроцентДоплаты 					= ПроцентДоплаты;
		ОбластьЗаголовок.Параметры.ПроцентДоплатыПрописью 			= ЧислоПрописью(ПроцентДоплаты);
		ОбластьЗаголовок.Параметры.СуммаДоплаты   					= СуммаДоплаты;
		ОбластьЗаголовок.Параметры.СуммаДоплатыПрописью   			= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДоплаты,ВалютаПечатногоДокумента);
		СуммаНДСВсегоПечать = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаАвтомобиль.СуммаНДС,Документ.ВалютаДокумента,Документ.Дата,ВалютаПечатногоДокумента,Документ.Дата,РежимОкругления.Окр15как20),2,РежимОкругления.Окр15как20);
		СуммаНДСДоплаты = СуммаНДСВсегоПечать - СуммаНДСПредоплатыПечать;
		ОбластьЗаголовок.Параметры.СуммаНДСДоплаты		   			= СуммаНДСДоплаты;
		ОбластьЗаголовок.Параметры.СуммаНДСДоплатыПрописью   		= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаНДСДоплаты,ВалютаПечатногоДокумента);
		
		ОбластьЗаголовок.Параметры.ИННКПП 							= "ИНН " + Документ.Организация.ИНН + " / КПП " + Документ.Организация.КПП;
		
		ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Организация);
		ОбластьЗаголовок.Параметры.НомерСчетаПолучателя		= ОсновнойБанковскийСчет.НомерСчета;
		ОбластьЗаголовок.Параметры.БанкПолучателя			= ОсновнойБанковскийСчет.Банк;
		ОбластьЗаголовок.Параметры.БИКБанкаПолучателя		= ОсновнойБанковскийСчет.Банк.Код;
		ОбластьЗаголовок.Параметры.СчетБанкаПолучателя		= ОсновнойБанковскийСчет.Банк.КоррСчет;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПриложениеШапка.Параметры.НомерДоговора = НомерДляПечати;
		ОбластьПриложениеШапка.Параметры.ДатаДоговора = Формат(Документ.Дата,"ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьПриложениеШапка);
		
		Если ТаблицаОборудования.Количество() > 0 Тогда
			// Шапка таблицы
			ОбластьШапкаТаблицы.Параметры.ТаблицаСпецификации = "Оборудование производителя";
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			// Таблица
			Для каждого СтрокаОборудования Из ТаблицаОборудования Цикл
				ОбластьСтрока.Параметры.Заполнить(СтрокаОборудования);
				ОбластьСтрока.Параметры.ОборудованиеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаОборудования.Опция);
				ОбластьСтрока.Параметры.Оборудование = СтрокаОборудования.Опция;
				ОбластьСтрока.Параметры.Цена = СтрокаОборудования.СуммаВсего/СтрокаОборудования.Количество;
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
			ОбластьПодвал.Параметры.СуммаИтого = ТаблицаОборудования.Итог("СуммаВсего");
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;
	
		Если ТаблицаТоваров.Количество() > 0 Тогда
			// Шапка таблицы
			ОбластьШапкаТаблицы.Параметры.ТаблицаСпецификации = "Товары продавца";
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			// Таблица
			Для каждого СтрокаТоваров Из ТаблицаТоваров Цикл
				ОбластьСтрока.Параметры.Заполнить(СтрокаТоваров);
				ОбластьСтрока.Параметры.ОборудованиеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
				ОбластьСтрока.Параметры.Оборудование = СтрокаТоваров.Номенклатура;
				Если СтрокаТоваров.Количество <> 0 Тогда
					ОбластьСтрока.Параметры.Цена = СтрокаТоваров.СуммаВсего/СтрокаТоваров.Количество;
				Иначе
					ОбластьСтрока.Параметры.Цена = 0;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
			ОбластьПодвал.Параметры.СуммаИтого = ТаблицаТоваров.Итог("СуммаВсего");
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаАвтомобиль_ДоговорПродажи";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Акт приема"
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//
// Возвращаемое значение: 
//	ТабличныйДокумент - Возвращает сформированный табличный документ
//
Функция ПечатьАктПриема(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
						
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ТрейдИн") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					Нстр("ru = 'Для документа <%1> печать прервана. Акт осмотра автомобиля может быть напечатан, если указан автомобиль для поступления по Trade-In.'"),
					Документ)
			);
			Продолжить;
		КонецЕсли;
																
		ХарактеристикиАвтомобиля = ПолучитьХарактеристикиАвтомобиляДляАктаПриема(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеАвтомобилей.ПФ_MXL_АктПриема");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.Ссылка, Истина);
		ОбластьШапка.Параметры.ЗаголовокПФ = "осмотра автомобиля с пробегом";
		ОбластьШапка.Параметры.Номер = НомерДляПечати;
		ОбластьШапка.Параметры.Дата = Формат(Документ.Дата, "ДЛФ=DD");
		ОбластьШапка.Параметры.МодельНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ХарактеристикиАвтомобиля.Модель);
		ОбластьШапка.Параметры.Модель = ХарактеристикиАвтомобиля.Модель;
		ОбластьШапка.Параметры.VIN = ХарактеристикиАвтомобиля.VIN;
		ОбластьШапка.Параметры.ГодВыпуска = ?(ЗначениеЗаполнено(ХарактеристикиАвтомобиля.ГодВыпуска), Формат(ХарактеристикиАвтомобиля.ГодВыпуска, "ДФ=гггг"), "");
		ОбластьШапка.Параметры.Цвет = ХарактеристикиАвтомобиля.Цвет;
		ОбластьШапка.Параметры.Пробег = ?(ЗначениеЗаполнено(ХарактеристикиАвтомобиля.Пробег), СокрЛП(ХарактеристикиАвтомобиля.Пробег), "");
		
		Комплектация = ХарактеристикиАвтомобиля.Комплектация;
		ОбластьШапка.Параметры.Комплектация = Комплектация;
		
		ОбластьШапка.Параметры.ТипКПП = ХарактеристикиАвтомобиля.ТипКПП;
		ОбластьШапка.Параметры.ОбъемДвигателя = ХарактеристикиАвтомобиля.ОбъемДвигателя;
		ОбластьШапка.Параметры.ТипСалона = ХарактеристикиАвтомобиля.ТипСалона;
			
		ОбластьШапка.Параметры.ОписаниеКомитента = Документ.Контрагент.НаименованиеПолное;
		ОбластьШапка.Параметры.ОписаниеКомиссионера = Документ.Организация.НаименованиеПолное;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаАвтомобиль_АктПриема";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктПриема()

// Получает характеристики для заполнения печатной формы АктПриема
//
// Возвращаемое значение:
//   Структура   - характеристики автомобиля
//
Функция ПолучитьХарактеристикиАвтомобиляДляАктаПриема(ЗаказАвтомобиля)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаАвтомобильПоступленияTradeIn.Документ КАК ДокументПоступления
		|ПОМЕСТИТЬ втПоступления
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.ПоступленияTradeIn КАК ЗаказНаАвтомобильПоступленияTradeIn
		|ГДЕ
		|	ЗаказНаАвтомобильПоступленияTradeIn.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ втАвтомобили
		|ИЗ
		|	втПоступления КАК втПоступления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
		|		ПО втПоступления.ДокументПоступления = ПоступлениеАвтомобилейАвтомобили.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеАвтомобилейАвтомобили.Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втАвтомобили.Автомобиль.Модель КАК Модель,
		|	втАвтомобили.Автомобиль.VIN КАК VIN,
		|	втАвтомобили.Автомобиль.ГодВыпуска КАК ГодВыпуска,
		|	втАвтомобили.Автомобиль.Цвет КАК Цвет,
		|	втАвтомобили.Автомобиль.ТипСалона КАК ТипСалона,
		|	ВЫБОР
		|		КОГДА втАвтомобили.Автомобиль.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
		|			ТОГДА втАвтомобили.Автомобиль.МодельДвигателя.Объем
		|		КОГДА втАвтомобили.Автомобиль.ВариантКомплектации.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
		|			ТОГДА втАвтомобили.Автомобиль.ВариантКомплектации.МодельДвигателя.Объем
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОбъемДвигателя,
		|	ВЫБОР
		|		КОГДА втАвтомобили.Автомобиль.ТипКПП <> ЗНАЧЕНИЕ(Справочник.ТипыКПП.ПустаяСсылка)
		|			ТОГДА втАвтомобили.Автомобиль.ТипКПП
		|		КОГДА втАвтомобили.Автомобиль.ВариантКомплектации <> ЗНАЧЕНИЕ(Справочник.ТипыКПП.ПустаяСсылка)
		|			ТОГДА втАвтомобили.Автомобиль.ВариантКомплектации.ТипКПП
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТипыКПП.ПустаяСсылка)
		|	КОНЕЦ КАК ТипКПП,
		|	ВЫБОР
		|		КОГДА втАвтомобили.Автомобиль.ВариантКомплектации <> ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
		|			ТОГДА втАвтомобили.Автомобиль.ВариантКомплектации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
		|	КОНЕЦ КАК Комплектация,
		|	втАвтомобили.Автомобиль КАК Автомобиль
		|ИЗ
		|	втАвтомобили КАК втАвтомобили";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказАвтомобиля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура();
	Результат.Вставить("ГодВыпуска", Неопределено);
	Результат.Вставить("Цвет", Неопределено);
	Результат.Вставить("Модель", Неопределено);
	Результат.Вставить("Комплектация", Неопределено);
	Результат.Вставить("Пробег", Неопределено);
	Результат.Вставить("VIN", Неопределено);
	Результат.Вставить("ТипКПП", Неопределено);
	Результат.Вставить("ОбъемДвигателя", Неопределено);
	Результат.Вставить("ТипСалона", Неопределено);	
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
		
			Выборка.Следующий();
									
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			Результат.Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Выборка.Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказАвтомобиля, "Дата")
			);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Справочники.Автомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаряд);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ТестДрайв);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРемонт);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Взаимозачет);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщикуНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаОпцийАвтомобиля);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПланПоступленияДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеестрДокументов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СводныйРемонтныйЗаказ);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплатуЗаАвтомобили);

	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаказНаАвтомобиль);

КонецФункции

#КонецОбласти

// Получаем признак того, что на основании документа был введен документ,
// который блокирует изменение текущего.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаАвтомобиль
//
// Возвращаемое значение:
//  Булево
//
Функция ДоступностьИзменения(Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказНаАвтомобиль.Представление КАК ЗаказНаАвтомобиль
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
		|ГДЕ
		|	ЗаказНаАвтомобиль.ДокументОснование = &ДокументОснование
		|	И ЗаказНаАвтомобиль.Проведен"
	);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ШаблонСообщения = НСтр(
		"ru = 'Автомобиль по данному заказу на автомобиль перезаказан документом ""%1"".
		|Изменение заказа на автомобиль запрещено.'"
	);
	ЗаказНаАвтомобиль = РезультатЗапроса.Выгрузить()[0].ЗаказНаАвтомобиль;
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ЗаказНаАвтомобиль));
	Возврат Ложь;
	
КонецФункции

#Область ОбработчикиОбновления
// Выполняем замену справочника КлассификаторБанков
//
// Параметры: 
//  Ссылка - ДокументСсылка.ЗаказНаАвтомобиль - ссылка на документ, в которм необходимо произвести замену
//
// Возвращаемое значение:
//  Булево - результат выполнения запроса
//
Функция ЗаменитьКлассификаторБанков(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Ссылка = Неопределено Тогда 
		Запрос.Текст = ПолучитьТекстЗапроса();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапроса(Истина);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Возврат Результат.Пустой();	
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект 		= Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.Банк 	= Выборка.Банк;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;
				
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСтавкиОпцийИАвтомобиля(Объект, ПараметрыДействия = Неопределено)
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь)
					  ИЛИ ПараметрыНДС.ОсвобожденОтНДС;
					  
	Если ОсвобожденОтНДС Тогда
		Объект.СтавкаНДСНаАвтомобиль = Справочники.СтавкиНДС.БезНДС;
	Иначе
		Объект.СтавкаНДСНаАвтомобиль = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС);
	КонецЕсли;
	
	СтавкаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия);
	
	Для каждого СтрокаТЧ Из Объект.Опции Цикл
		
		СтрокаТЧ.СтавкаНДС = Объект.СтавкаНДСНаАвтомобиль;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДоступностьВыбранныхСкидокПоОбласти(Объект, ПараметрыДействия)
	
	Если Объект.СкидкиИМаркетинговыеПрограммы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиДляУдаления = Новый Массив;
	// проверим скидки на доступность использования в данной области
	ДоступныеСкидки = СкидкиИМаркетинговыеПрограммы.ДоступныеВОбластиСкидки(Объект.ПодразделениеКомпании, Объект.Дата);
	
	Для Каждого Скидка Из Объект.СкидкиИМаркетинговыеПрограммы Цикл
		Если ДоступныеСкидки.Найти(Скидка.Скидка) = Неопределено Тогда
			СкидкиДляУдаления.Добавить(Скидка);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьСкидкиИМаркетинговыеПрограммы(СкидкиДляУдаления, Объект, ПараметрыДействия);
	
КонецПроцедуры

Процедура ПроверитьДоступностьВыбранныхСкидокПоУсловию(Объект, ПараметрыДействия)
	
	Если Объект.СкидкиИМаркетинговыеПрограммы.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСкидокДляУсловия = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Объект.СкидкиИМаркетинговыеПрограммы.Выгрузить(, "Скидка").ВыгрузитьКолонку("Скидка"),
		"ОтборПоМоделиИКомплектации,Модель,Комплектация"
	);
	
	СкидкиДляУдаления = Новый Массив;
	
	Для Каждого Скидка Из Объект.СкидкиИМаркетинговыеПрограммы Цикл
		
		ДанныеСкидки = ДанныеСкидокДляУсловия.Получить(Скидка.Скидка);
		
		Если
			(ДанныеСкидки.ОтборПоМоделиИКомплектации = 1 И ДанныеСкидки.Модель <> Объект.Модель)
			ИЛИ (ДанныеСкидки.ОтборПоМоделиИКомплектации = 2
				И (
					ДанныеСкидки.Модель <> Объект.Модель
					ИЛИ ДанныеСкидки.Комплектация <> Объект.ВариантКомплектации)
				)
		Тогда
			
			СкидкиДляУдаления.Добавить(Скидка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСкидкиИМаркетинговыеПрограммы(СкидкиДляУдаления, Объект, ПараметрыДействия);
	
КонецПроцедуры

Процедура УдалитьСкидкиИМаркетинговыеПрограммы(СкидкиДляУдаления, Объект, ПараметрыДействия)
	
	Если СкидкиДляУдаления.Количество() > 0 Тогда
		Объект.СкидкиИМаркетинговыеПрограммы.Очистить();
		
		Оповещение = Новый Структура("Ссылка");
		Оповещение.Вставить("Использование", Истина);
		Оповещение.Вставить("Картинка", БиблиотекаКартинок.Предупреждение32);
		Оповещение.Вставить("Заголовок", НСтр("ru = 'Внимание!!!'"));
		Оповещение.Вставить("Текст", НСтр("ru = 'Скидки и маркетинговые программы потеряли актуальности и были очищены'"));
		
		ПараметрыДействия.Вставить("ВыводОповещения", Оповещение);
		ПараметрыДействия.Вставить("ОбновитьИнформациюОСкидкахИМаркетинговыхПрограммах", Истина);
		
		РассчитатьСуммовыеПоказателиАвтомобиля("ЦенаАвтомобиля", Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазложитьНаборОпцийНаСтроки(Объект, Строка, ПараметрыДействия = Неопределено)
	
	Набор            = Строка.Опция;
	КоличествоНабора = Строка.Количество;
	
	Если КоличествоНабора = 0 Тогда
		
		КоличествоНабора = 1;
		
	КонецЕсли;
	
	Объект.Опции.Удалить(Строка);
	
	Для Каждого ИзНабора Из Набор.СоставНабора Цикл
		
		УсловиеПоиска = Новый Структура("Опция", ИзНабора.Опция);
		СтрокиСОпциейВДокументе = Объект.Опции.НайтиСтроки(УсловиеПоиска);
		
		Если СтрокиСОпциейВДокументе.Количество() > 0 Тогда
			
			// Если добавляемое оборудование уже есть в табличной части увеличим количество.
			СтрокаТЧ = СтрокиСОпциейВДокументе[0];
			СтрокаТЧ.Количество = СтрокаТЧ.Количество + ИзНабора.Количество * КоличествоНабора;
			ОпцииКоличествоПриИзменении(Объект, СтрокаТЧ);
			
		Иначе
			
			СтрокаТЧ = Объект.Опции.Добавить();
			СтрокаТЧ.Опция      = ИзНабора.Опция;
			СтрокаТЧ.Количество = ИзНабора.Количество*КоличествоНабора;
			ОпцииОпцияПриИзменении(Объект, СтрокаТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКомплектациюАвтомобиля(Объект, Параметры = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда Возврат; КонецЕсли;
	
	// получим данные об очистке ТЧ
	Если ПолучитьЗначениеПараметраСтруктуры(параметры, "ОчиститьТЧ", Истина) Тогда
		Объект.Опции.Очистить();
		Объект.Товары.Очистить();
	КонецЕсли;
	
	// Получим таблицу комплектации
	Запрос       = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацияАвтомобилейОстатки.Номенклатура КАК Номенклатура,
	|	КомплектацияАвтомобилейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КомплектацияАвтомобилейОстатки.СуммаОстаток КАК Сумма,
	|	КомплектацияАвтомобилейОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	КомплектацияАвтомобилейОстатки.СуммаПродажиОстаток КАК СуммаПродажи,
	|	КомплектацияАвтомобилейОстатки.СуммаПродажиУпрОстаток КАК СуммаПродажиУпр,
	|	КомплектацияАвтомобилейОстатки.КоличествоОстаток КАК Количество,
	|	ИСТИНА КАК ЭтоНоменклатура
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей.Остатки(
	|			,
	|			Автомобиль = &Автомобиль
	|				И Номенклатура ССЫЛКА Справочник.Номенклатура) КАК КомплектацияАвтомобилейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОпцииАвтомобилей.Опция,
	|	NULL,
	|	0,
	|	NULL,
	|	0,
	|	NULL,
	|	ОпцииАвтомобилей.Количество,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.ОпцииАвтомобилей КАК ОпцииАвтомобилей
	|ГДЕ
	|	ОпцииАвтомобилей.Автомобиль = &Автомобиль
	|	И ОпцииАвтомобилей.ЗаписьАктивна = ИСТИНА";
	
	Запрос.УстановитьПараметр("Автомобиль", Объект.Автомобиль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	// получим курс валюты
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();	
	НеТребуетсяПереводВалюты = (ВалютаРегл = Объект.ВалютаДокумента);
	
	Если НЕ НеТребуетсяПереводВалюты Тогда
		ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		
		Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
			КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр = Объект.КурсВалютыУпр;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоНоменклатура Тогда
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСТрока.Номенклатура               = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			Документы.ЗаказНаАвтомобиль.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			
			НоваяСтрока.Количество = Выборка.Количество;
			НоваяСтрока.СуммаВсего = Выборка.СуммаПродажи;
			
			Если НеТребуетсяПереводВалюты Тогда
				
				НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Выборка.СуммаПродажиУпр,
					ВалютаУпр,
					КурсУпр,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента
				);
				
			КонецЕсли;
			
			Документы.ЗаказНаАвтомобиль.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
			
		Иначе
			НоваяСтрока = Объект.опции.Добавить();
			
			НоваяСТрока.Опция                      = Выборка.Номенклатура;
			Документы.ЗаказНаАвтомобиль.ОпцииОпцияПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.Количество                 = Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНеподходящиеАвтомобилюОпции(Объект)
	
	Если Объект.Опции.Количество() > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДоступныеОпции = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ДоступныеОпции,
			ОпцииАвтомобилей.ДополнительныеОпцииКомплектации(Объект.ВариантКомплектации)
		);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ДоступныеОпции,
			ОпцииАвтомобилей.ОпцииУстановленныеНаАвтомобиль(Объект.Автомобиль)
		);
		
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив();
	
	Для Каждого Опция Из Объект.Опции Цикл
		
		Если ДоступныеОпции.Найти(Опция.Опция) = Неопределено Тогда
			
			УдаляемыеСтроки.Добавить(Опция);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		
		Объект.Опции.Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапроса(Проверка = Ложь)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказНаАвтомобиль.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО (ВЫРАЗИТЬ(ЗаказНаАвтомобиль.УдалитьБанк КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код)
		|			И (ВЫРАЗИТЬ(ЗаказНаАвтомобиль.УдалитьБанк КАК Справочник.КлассификаторБанковРФ).КоррСчет = КлассификаторБанков.КоррСчет)
		|			И (ВЫРАЗИТЬ(ЗаказНаАвтомобиль.УдалитьБанк КАК Справочник.КлассификаторБанковРФ).СВИФТБИК = КлассификаторБанков.СВИФТБИК)
		|			И ЗаказНаАвтомобиль.Банк <> КлассификаторБанков.Ссылка
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ЗаказНаАвтомобиль.УдалитьБанк) = ТИП(Справочник.КлассификаторБанковРФ)
		|	И НЕ ЗаказНаАвтомобиль.УдалитьБанк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанковРФ.ПустаяСсылка)
		|	И ЗаказНаАвтомобиль.Банк = НЕОПРЕДЕЛЕНО
		|	И ЗаказНаАвтомобиль.Ссылка = &Ссылка";
	
	Если Не Проверка Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ЗаказНаАвтомобиль.Ссылка = &Ссылка", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает перечень нередактируемых реквизитов при открытии общей формы "Параметры документа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение неотображаемых реквизитов.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.

Функция ПолучитьНеотображаемыеРеквизиты(Объект) Экспорт
	
	НеотображаемыеРеквизиты = Новый Массив;
	НеотображаемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"СкидкаНаценка,БлокироватьПерерасчетСкидок",
		","
	);
	
	Возврат НеотображаемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецЕсли