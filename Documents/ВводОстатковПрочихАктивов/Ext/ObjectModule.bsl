// Модуль документа "Ввод остатков прочих активов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)

	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, 
							ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		СтатьяПриходования = Справочники.СтатьиДоходовИРасходов.ВводОстатковПрочихАктивов;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения количества для активов c уникальными номерами
	ОбработкаТабличнойЧастиАктивы.ПроверитьКоличествоУникальныхНомеров(ЭтотОбъект, Отказ);
	
	Для Каждого ТекСтрока Из Активы Цикл
		
		Если ТекСтрока.ОстаточнаяСтоимость + ТекСтрока.СуммаАмортизации + ТекСтрока.СуммаОбслуживания = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка %1. Итоговая стоимость актива (балансовая стоимость + амортизация + сумма обслуживания) не может быть равна нулю.'"),
				ТекСтрока.НомерСтроки
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаПоАктивам = ПолучитьРезультатЗапросаПоАктивам();
	
	// проверка тек. стоимость = 0, если 100% при вводе
	Для каждого ТекАктив Из РезультатЗапросаПоАктивам Цикл
		Если ТекАктив.ТипЭксплуатации.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизации.СтопроцентныйПриВводе И ТекАктив.БалансоваяСтоимость <> ТекАктив.Амортизация Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка %1.: текущая стоимость должна быть равна 0, если прочий актив полностью амортизируется при вводе'"), 
				Строка(РезультатЗапросаПоАктивам.Индекс(ТекАктив) + 1)
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения ,ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Проверим, что автомобиль отсутствует на остатках по различным регистрам
	Если НЕ ПроверитьОстаткиАвтомобилей(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// прочие активы в эксплуатации
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ЭтоПервыйВвод = Истина;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = Подразделение;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейЭксплуатация.Приход() ИЛИ Отказ;
	
	// доходы и расходы
	НаборЗаписейДиР = Движения.ДоходыИРасходы;
	НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
	НаборЗаписейДиР.Подразделение          = Подразделение;
	НаборЗаписейДиР.СтатьяДоходовИРасходов = СтатьяПриходования;
	НаборЗаписейДиР.Доход = РезультатЗапросаПоАктивам.Итог("БалансоваяСтоимость") - РезультатЗапросаПоАктивам.Итог("Амортизация");
	Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция выполняет проверку, что автомобиль отсутствует на остатках по различным регистрам
//
// Параметры:
// ЭтотОбъект - ДокументОбъект, документ, для которого производится действие
// Отказ 	 - булево, признак отказа от действия
//
// Возвращаемое значение:
// Результат - Булево - Признак необходимости дальнейшей обработки (статус - отработано или нет)
//       для определения возможности дальнейшей работы приватного обработчика
//
Функция ПроверитьОстаткиАвтомобилей(ЭтотОбъект, Отказ)
	
	Результат = Истина;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	             |	ДокументАвтомобили.Автомобиль КАК Автомобиль
	             |ПОМЕСТИТЬ ТаблицаАвтомобилей
	             |ИЗ
	             |	Документ.ВводОстатковПрочихАктивов.Активы КАК ДокументАвтомобили
	             |ГДЕ
	             |	ДокументАвтомобили.Ссылка = &Ссылка
	             |	И ДокументАвтомобили.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	             |	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК Остаток,
	             |	1 КАК ФлагРегистра
	             |ИЗ
	             |	РегистрНакопления.ОстаткиАвтомобилей.Остатки(
	             |			&Момент,
	             |			Автомобиль В
	             |				(ВЫБРАТЬ
	             |					ТаблицаАвтомобилей.Автомобиль
	             |				ИЗ
	             |					ТаблицаАвтомобилей)) КАК ОстаткиАвтомобилейОстатки
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ПрочиеАктивыВЭксплуатацииОстатки.Автомобиль,
	             |	ПрочиеАктивыВЭксплуатацииОстатки.КоличествоОстаток,
	             |	4
	             |ИЗ
	             |	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
	             |			&Момент,
	             |			Автомобиль В
	             |				(ВЫБРАТЬ
	             |					ТаблицаАвтомобилей.Автомобиль
	             |				ИЗ
	             |					ТаблицаАвтомобилей)) КАК ПрочиеАктивыВЭксплуатацииОстатки
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	АвтомобилиОтданныеОстатки.Автомобиль,
	             |	АвтомобилиОтданныеОстатки.КоличествоОстаток,
	             |	2
	             |ИЗ
	             |	РегистрНакопления.АвтомобилиОтданные.Остатки(
	             |			&Момент,
	             |			Автомобиль В
	             |				(ВЫБРАТЬ
	             |					ТаблицаАвтомобилей.Автомобиль
	             |				ИЗ
	             |					ТаблицаАвтомобилей)) КАК АвтомобилиОтданныеОстатки
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	РеализованныеАвтомобилиОстатки.Автомобиль,
	             |	РеализованныеАвтомобилиОстатки.КоличествоОстаток,
	             |	3
	             |ИЗ
	             |	РегистрНакопления.РеализованныеАвтомобили.Остатки(
	             |			&Момент,
	             |			Автомобиль В
	             |				(ВЫБРАТЬ
	             |					ТаблицаАвтомобилей.Автомобиль
	             |				ИЗ
	             |					ТаблицаАвтомобилей)) КАК РеализованныеАвтомобилиОстатки";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Момент", Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая));
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПолеАвтомобиль = "Автомобиль"; ТЧАвтомобили = "Активы";
	ЕстьРеквизитТЧАвтомобиль = ЕстьРеквизит(ЭтотОбъект, ПолеАвтомобиль, ТЧАвтомобили);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Остаток > 0  Тогда
			Отказ = Истина;
			Результат = Ложь;
			Если Выборка.ФлагРегистра = 1 Тогда
				ТекстОписаниеРегистра = "уже имеется на складе.";
			ИначеЕсли Выборка.ФлагРегистра = 2 Тогда
				ТекстОписаниеРегистра = "передавался на реализацию.";
			ИначеЕсли Выборка.ФлагРегистра = 3 Тогда
				ТекстОписаниеРегистра = "был взят на комиссию.";
			ИначеЕсли Выборка.ФлагРегистра = 4 Тогда
				ТекстОписаниеРегистра = "находится в эксплуатации.";
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Автомобиль <%1> %2 Повторный приход автомобиля недопустим.'"),
				СокрЛП(Выборка.Автомобиль),
				ТекстОписаниеРегистра
			);
			ПолеОбъекта = ПолеАвтомобиль;
			Если ЕстьРеквизитТЧАвтомобиль Тогда
				НайденнаяСтрока = ЭтотОбъект[ТЧАвтомобили].Найти(Выборка.Автомобиль, ПолеАвтомобиль);
				Если НайденнаяСтрока <> Неопределено Тогда
					ИндексСтроки = НайденнаяСтрока.НомерСтроки-1;
					ПолеОбъекта = СтрШаблон("%1[%2].%3", ТЧАвтомобили, ИндексСтроки, ПолеАвтомобиль);	
				КонецЕсли;
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект.Ссылка,
				ПолеОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по активам.
//
// Возвращаемое значение:
//  Таблица значений на основании выполненного запроса.
//
Функция ПолучитьРезультатЗапросаПоАктивам()
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОстаткиПрочихАктивов.ПрочийАктив КАК Актив,
				   |	ОстаткиПрочихАктивов.Автомобиль КАК Автомобиль,
	               |	ОстаткиПрочихАктивов.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	ОстаткиПрочихАктивов.ТипЭксплуатации КАК ТипЭксплуатации,
	               |	ОстаткиПрочихАктивов.ОстаточнаяСтоимость + ОстаткиПрочихАктивов.СуммаАмортизации КАК БалансоваяСтоимость,
	               |	ОстаткиПрочихАктивов.СуммаАмортизации КАК Амортизация,
	               |	ОстаткиПрочихАктивов.СуммаОбслуживания КАК СуммаОбслуживания,
	               |	ОстаткиПрочихАктивов.Ссылка.Подразделение КАК ПодразделениеКомпании,
	               |	ОстаткиПрочихАктивов.Ссылка.МОЛ КАК МОЛ,
	               |	ОстаткиПрочихАктивов.Количество КАК Количество
	               |ИЗ
	               |	Документ.ВводОстатковПрочихАктивов.Активы КАК ОстаткиПрочихАктивов
	               |ГДЕ
	               |	ОстаткиПрочихАктивов.Ссылка = &Ссылка";
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьРезультатЗапросаПоАктивам()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
