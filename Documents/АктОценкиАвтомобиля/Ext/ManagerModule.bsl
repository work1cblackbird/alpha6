#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует список обязательных реквизитов объекта
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект.АктОценкиАвтомобиля - Документ для которого формирется список
//
// Возвращаемое значение:
//  Массив из Строка - имена реквизитов. Для табличных частей в формате <ИмяТабличнойЧасти>.<ИмяРеквизита>
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ХарактеристикиАвтомобиля.Характеристика");	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура;
	
	// Временно.
	Если
		НЕ ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь)
	Тогда
		
		УникальныеХарактеристики = Новый Массив;
		УникальныеХарактеристики.Добавить("Характеристика");
		УникальныеРеквизиты.Вставить("ХарактеристикиАвтомобиля", УникальныеХарактеристики);
		
	КонецЕсли;
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	Возврат Новый Структура();
	
КонецФункции

#Область ОбработчикиИзмененияреквизитовДокумента

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.Автомобиль.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеАвтомобиля = АвтомобилиСервер.ДанныеАвтомобиля(Объект.Автомобиль);
	ЗаполнитьЗначенияСвойств(Объект, ОписаниеАвтомобиля,, "Пробег");
	Объект.Комплектация               = ОписаниеАвтомобиля.ВариантКомплектации;
	Объект.ПТС                        = ОписаниеАвтомобиля.Паспорт;
	Объект.СвидетельствоРегистрацииТС = ОписаниеАвтомобиля.Свидетельство;
	Объект.ЦветКузова                 = ОписаниеАвтомобиля.Цвет;
	ПолучитьПодтверждающиеДокументы(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Марка автомобиля"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МаркаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если
		ЗначениеЗаполнено(Объект.Модель)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Модель, "Марка") <> Объект.Марка
	Тогда
		
		Объект.Модель = Справочники.Модели.ПустаяСсылка();
		Объект.Комплектация = Справочники.ВариантыКомплектации.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Модель"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МодельПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ Объект.Модель.Пустая() Тогда
		
		Объект.Марка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Модель, "Марка");
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Комплектация"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КомплектацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ЗначенияРеквизитов = Новый Структура("ТипКПП,ТипДвигателя,ТипДвигателяВМодели,ТипКузова");
	
	Если НЕ Объект.Комплектация.Пустая() Тогда
		
		Реквизиты = Новый Структура();
		Реквизиты.Вставить("ТипКПП",              "ТипКПП");
		Реквизиты.Вставить("ТипДвигателя",        "ТипДвигателя");
		Реквизиты.Вставить("ТипДвигателяВМодели", "МодельДвигателя.Тип");
		Реквизиты.Вставить("ТипКузова",           "ТипКузова");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Комплектация, Реквизиты);
		
		Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ТипДвигателя) Тогда
			
			ЗначенияРеквизитов.ТипДвигателя = ЗначенияРеквизитов.ТипДвигателяВМодели;
			
		КонецЕсли;
		
		ЗначенияРеквизитов.Удалить("ТипДвигателяВМодели");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Структура - Содержит перечень параметров действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПересчетаСуммовыхПоказателей(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

Процедура ОбновитьХарактеристикуАвтомобиляПривод() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеПриводов = СписокСоответствияТиповПриводов();
	УсловиеОтбора = Новый Структура(
		"Характеристика",
		ПланыВидовХарактеристик.СвойстваИХарактеристикиАвтомобилей.УдалитьПривод);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОценкиАвтомобиляХарактеристикиАвтомобиля.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктОценкиАвтомобиля.ХарактеристикиАвтомобиля КАК АктОценкиАвтомобиляХарактеристикиАвтомобиля
	|ГДЕ
	|	АктОценкиАвтомобиляХарактеристикиАвтомобиля.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваИХарактеристикиАвтомобилей.УдалитьПривод)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументАктОценки = Выборка.Ссылка.ПолучитьОбъект();
		НайденныеСтроки = ДокументАктОценки.ХарактеристикиАвтомобиля.НайтиСтроки(УсловиеОтбора);
		
		Для Каждого СтрокаПривода Из НайденныеСтроки Цикл
			
			СтрокаПривода.Характеристика = ПланыВидовХарактеристик.СвойстваИХарактеристикиАвтомобилей.Привод;
			СтрокаПривода.Значение = СоответствиеПриводов.Получить(СтрокаПривода.Значение);
			
		КонецЦикла;
		
		ДокументАктОценки.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ДокументАктОценки.Записать();
		Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись нового свойства автомобиля ""Привод"" для докмента ""Акт оценки автомобиля""'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Выборка.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокСоответствияТиповПриводов()
	
	Результат = Новый Соответствие;
	Результат.Вставить(
		Перечисления.УдалитьТипыПриводаАвтомобилей.ПустаяСсылка(),
		Перечисления.ТипыПриводовАвтомобилей.ПустаяСсылка());
	Результат.Вставить(
		Перечисления.УдалитьТипыПриводаАвтомобилей.Задний,
		Перечисления.ТипыПриводовАвтомобилей.Задний);
	Результат.Вставить(
		Перечисления.УдалитьТипыПриводаАвтомобилей.Передний,
		Перечисления.ТипыПриводовАвтомобилей.Передний);
	Результат.Вставить(
		Перечисления.УдалитьТипыПриводаАвтомобилей.Полный,
		Перечисления.ТипыПриводовАвтомобилей.Полный);
	Возврат Результат;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//  Параметры - Структура - Параметры добавления команды.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Соответствие - Содержит соответствие параметров команд заполнения.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.АктОценкиАвтомобиля",
		"ПФ_MXL_КоммерческоеПредложение",
		НСтр("ru = 'Коммерческое предложение на выкуп а/м'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.АктОценкиАвтомобиля",
		"ПФ_MXL_АктОсмотра",
		НСтр("ru = 'Акт осмотра'"),
		СсылкаНаДокумент
	);
	
КонецПроцедуры

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив          - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура       - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура       - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура       - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_КоммерческоеПредложение") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_КоммерческоеПредложение",
			НСтр("ru = 'Коммерческое предложение на выкуп а/м'"),
			ПечатьКоммерческоеПредложение(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктОсмотра") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктОсмотра",
			НСтр("ru = 'Акт осмотра'"),
			ПечатьАктОсмотра(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Производит формирование структуры с доступностью и видимостью команд печати объекта.
//
// Параметры:
//  Документ - ДокументСсылка.АктОценкиАвтомобиля - Документ для которого производилось согласование.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Строка таблицы значений с ценой автомобиля.
//
Функция ПолучитьДокументСогласованияЦены(Документ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИзменениеЦенАвтомобилей.Ссылка КАК Ссылка,
		|	ИзменениеЦенАвтомобилей.Проведен КАК Проведен,
		|	ИзменениеЦенАвтомобилей.ВалютаДокумента КАК ВалютаДокумента
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	Документ.ИзменениеЦенАвтомобилей КАК ИзменениеЦенАвтомобилей
		|ГДЕ
		|	ИзменениеЦенАвтомобилей.ДокументОснование = &Документ
		|	И НЕ ИзменениеЦенАвтомобилей.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзменениеЦенАвтомобилей.ДатаНачалаДействия УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзменениеЦенАвтомобилейАвтомобили.Ссылка КАК Ссылка,
		|	Таблица.Проведен КАК Проведен,
		|	Таблица.ВалютаДокумента КАК ВалютаДокумента,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Таблица.ВалютаДокумента) КАК ВалютаПредставление,
		|	ИзменениеЦенАвтомобилейАвтомобили.Цена КАК Цена
		|ИЗ
		|	Таблица КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеЦенАвтомобилей.Автомобили КАК ИзменениеЦенАвтомобилейАвтомобили
		|		ПО ИзменениеЦенАвтомобилейАвтомобили.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	ИзменениеЦенАвтомобилейАвтомобили.Автомобиль = &Автомобиль"
	);
	Запрос.УстановитьПараметр("Документ",   Документ.Ссылка);
	Запрос.УстановитьПараметр("Автомобиль", Документ.Автомобиль);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0];
	
КонецФункции

// Расчитывает срок действия комерческого предложения по акту оценки. За дату оценки принемается дата начала действия
// документа изменение цен полученого методом ПолучитьДокументСогласованияЦены
// см. Документы.АктОценкиАвтомобиля.ПолучитьДокументСогласованияЦены 
//
// Параметры:
//  АктОценки - ДокументСсылка.АктОценкиАвтомобиля - Документ для которого производилось согласование.
//
// Возвращаемое значение:
//  Дата - дата до которой дествительно комерческое предложение
//
Функция СрокДействия(АктОценки) Экспорт
	
	Если ТипЗнч(АктОценки) <> Тип("ДокументСсылка.АктОценкиАвтомобиля") Тогда
		
		ВызватьИсключение НСтр("ru = 'Не верный тип параметра АктОценки'");
		
	КонецЕсли;
	
	ДокументСогласованияЦены = ПолучитьДокументСогласованияЦены(АктОценки);
	
	Если
		ДокументСогласованияЦены = Неопределено
		Или Не ЗначениеЗаполнено(ДокументСогласованияЦены.Ссылка)
	Тогда
		
		Возврат Дата(1, 1, 1);
		
	КонецЕсли;	
	
	РеквизитыДокументаСогласованияЦены = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументСогласованияЦены.Ссылка,
		"ДатаНачалаДействия,ПодразделениеКомпании"
	);
	Возврат РассчитатьСрокДействия(
		РеквизитыДокументаСогласованияЦены.ДатаНачалаДействия,
		РеквизитыДокументаСогласованияЦены.ПодразделениеКомпании
	);  
	
КонецФункции

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.АктОценкиАвтомобиля);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРемонт);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ДефектовочнаяВедомость);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦенАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СводныйРемонтныйЗаказ);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.АктОценкиАвтомобиля);

КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОчиститьНезаполненныеХарактеристики(ТекущийОбъект) Экспорт
	
	УдалитьХарактеристики = Новый Массив;
	Для Каждого Строка Из ТекущийОбъект.ХарактеристикиАвтомобиля Цикл
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			Продолжить;
		КонецЕсли;
		УдалитьХарактеристики.Добавить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из УдалитьХарактеристики Цикл
		ТекущийОбъект.ХарактеристикиАвтомобиля.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПересчетаСуммовыхПоказателей(Объект, ПараметрыДействия)
	
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчетСуммы", Истина);
	
	Если НЕ ВозможенПересчетСуммы ИЛИ НЕ ТребуетсяПересчетЦен Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
		
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен") Тогда
		
		ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		
	КонецЕсли;
		
	Если ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс * НовыйКурс) = 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект.Ссылка);
			Возврат;
			
		КонецЕсли;
		
		Если СтарыйКурс = НовыйКурс Тогда
			
			Возврат;
			
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
		Объект.НижняяЦенаРынка = Окр(Объект.НижняяЦенаРынка * КоэффициентСоотношенияКурсов, 2);
		Объект.ВерхняяЦенаРынка = Окр(Объект.ВерхняяЦенаРынка * КоэффициентСоотношенияКурсов, 2);
		Объект.ИтоговаяЦена = Окр(Объект.ИтоговаяЦена * КоэффициентСоотношенияКурсов, 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПодтверждающиеДокументы(Объект, ПараметрыДействия)
	
	Автомобиль = Объект.Автомобиль;
	Если Автомобиль.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	
	ПТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
		Автомобиль,
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.ПТС")
	);
	Если НЕ ПТС.Пустая() Тогда
		Параметры.Вставить("ПТС", ПТС);
	КонецЕсли;
	
	СРТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
		Автомобиль,
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.СвидетельствоОРегистрацииТС")
	);
	Если НЕ СРТС.Пустая() Тогда
		Параметры.Вставить("СвидетельствоРегистрацииТС", СРТС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		ПараметрыДействия.Вставить("ЕстьПодтверждающиеДокументы", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьСрокДействия(Начало, Подразделение)
	
	ПредложениеДействуетДней = УчетныеПолитикиСервер.Значение("СрокДействияОценкиПриВыкупе",Начало,Подразделение);
	СекундВДне = 86400;
	Возврат Начало + ПредложениеДействуетДней * СекундВДне;
	
КонецФункции

#Область Печать

Функция ПечатьКоммерческоеПредложение(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктОценкиАвтомобиля.ПФ_MXL_КоммерческоеПредложение");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ЗначенияРеквизитовКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
			"Имя,Отчество,Пол,ФормаСобственности,НаименованиеПолное");
		
		Если ЗначенияРеквизитовКонтрагента.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			
			ОбластьШапка.Параметры.Обращение = "Уважаемая";
			
		Иначе
			
			ОбластьШапка.Параметры.Обращение = "Уважаемый";
			
		КонецЕсли;
		
		Если ЗначенияРеквизитовКонтрагента.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
		
			ОбластьШапка.Параметры.ИмяОтчество = ЗначенияРеквизитовКонтрагента.Имя + " "
				+ ЗначенияРеквизитовКонтрагента.Отчество;
				
		Иначе
			
			ОбластьШапка.Параметры.ИмяОтчество = ЗначенияРеквизитовКонтрагента.НаименованиеПолное;
			
		КонецЕсли;
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = Документ.Организация.НаименованиеПолное;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
		
		ОбластьАвтомобиль.Параметры.Заполнить(Документ);
		ОбластьАвтомобиль.Параметры.Цвет = Документ.ЦветКузова;
		ОбластьАвтомобиль.Параметры.ГодВыпуска = Формат(Документ.ГодВыпуска, НСтр("ru = 'ДФ=''yyyy'''"));
		
		ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
		
		ОбластьТело = Макет.ПолучитьОбласть("Тело");
		
		ОбластьТело.Параметры.СуммаЧислоВВалюте = Документ.ИтоговаяЦена; 
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		МассивПараметров  = СтрРазделить(Документ.ВалютаДокумента.ПараметрыПрописи, ",");
		Если МассивПараметров.Количество() > 2 Тогда 
			СтрокаПодстановки = СтрШаблон(
				";%4 %1 ;; %4 %2 ; %4 %3 ;",
				МассивПараметров[0],
				МассивПараметров[1],
				МассивПараметров[2],
				"%1"
			);
			СуммаСВалютой = СтрокаСЧислом(СтрокаПодстановки, Документ.ИтоговаяЦена, ВидЧисловогоЗначения.Количественное);
			ОбластьТело.Параметры.СуммаЧислоВВалюте = Формат(Документ.ИтоговаяЦена, ФорматВыводаСуммы)
				+ " " + СтрРазделить(СуммаСВалютой, " ")[2];
		КонецЕсли;	
			
		ОбластьТело.Параметры.Дата = Формат(Документ.Дата, "ДЛФ=DD");
		ОбластьТело.Параметры.СрокДействия = УчетныеПолитикиСервер.Значение("СрокДействияОценкиПриВыкупе",
			Документ.Дата, Документ.ПодразделениеКомпании);

		ТабличныйДокумент.Вывести(ОбластьТело);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
				
		Менеджер = Документ.Менеджер;
		ОбластьПодвал.Параметры.Менеджер = Менеджер.Наименование;
		
		ОбластьПодвал.Параметры.ТелефонМенеджера = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Менеджер,
			Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника
		);
		ОбластьПодвал.Параметры.EmailМенеджера = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Менеджер,
			Справочники.ВидыКонтактнойИнформации.EmailСотрудника
		);

		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОценкиАвтомобиля_КоммерческоеПредложение";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция ПечатьАктОсмотра(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктОценкиАвтомобиля.ПФ_MXL_АктОсмотра");
		
		// Вывод шапки документа
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Организация             = Документ.Организация;
		ОбластьМакета.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа
															.ПолучитьНаименованиеСправочника(Документ.Организация);
															
		КонтактнаяИнформацияПК = Документ.ПодразделениеКомпании.КонтактнаяИнформация.Выгрузить();
		КонтактнаяИнформация = Документ.Организация.КонтактнаяИнформация.Выгрузить();
		Если КонтактнаяИнформацияПК <> Неопределено И КонтактнаяИнформацияПК.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформацияПК.Количество() Цикл
				Если КонтактнаяИнформацияПК[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресПодразделенияКомпании" Тогда
					
					ПредставлениеАдреса = ?(
						Лев(КонтактнаяИнформацияПК[Инд].Город, 1) = "г",
						КонтактнаяИнформацияПК[Инд].Город,
						"г. " + КонтактнаяИнформацияПК[Инд].Город
					);
							
					ОбластьМакета.Параметры.ФирмаАдресЮридический = ?(
						ЗначениеЗаполнено(КонтактнаяИнформацияПК[Инд].Город),
						ПредставлениеАдреса,
						""
					);
					
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(СокрЛП(ОбластьМакета.Параметры.ФирмаАдресЮридический)) Тогда
			Если КонтактнаяИнформация <> Неопределено И КонтактнаяИнформация.Количество() > 0 Тогда
				Инд = 0;
				Пока Инд < КонтактнаяИнформация.Количество() Цикл
					Если КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресОрганизации" Тогда
						
						ПредставлениеАдреса = ?(
							Лев(КонтактнаяИнформация[Инд].Город, 1) = "г",
							КонтактнаяИнформация[Инд].Город,
							"г. " + КонтактнаяИнформация[Инд].Город
						);
						
						ОбластьМакета.Параметры.ФирмаАдресЮридический = ?(
							ЗначениеЗаполнено(КонтактнаяИнформация[Инд].Город),
							ПредставлениеАдреса,
							""
						);
						
					КонецЕсли;
					Инд = Инд + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если КонтактнаяИнформацияПК <> Неопределено И КонтактнаяИнформацияПК.Количество() > 0 Тогда
			
			Инд = 0;
			
			Пока Инд < КонтактнаяИнформацияПК.Количество() Цикл
				
				Если КонтактнаяИнформацияПК[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонПодразделенияКомпании" Тогда
					
					ОбластьМакета.Параметры.ФирмаТелефоны = КонтактнаяИнформацияПК[Инд].Представление;
					
				КонецЕсли;
				
				Инд = Инд + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СокрЛП(ОбластьМакета.Параметры.ФирмаТелефоны)) Тогда
			
			Если КонтактнаяИнформация <> Неопределено И КонтактнаяИнформация.Количество() > 0 Тогда
				
				Инд = 0;
				
				Пока Инд < КонтактнаяИнформация.Количество() Цикл
					
					Если КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонОрганизации" Тогда
						
						ОбластьМакета.Параметры.ФирмаТелефоны = КонтактнаяИнформация[Инд].Представление;
						
					КонецЕсли;
					
					Инд = Инд + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерДок     = Документ.Номер;
		ОбластьМакета.Параметры.ИмяДокумента = ?(
			Документ.ДокументОснование = Неопределено,
			"-----",
			Документ.ДокументОснование.Метаданные().Синоним
		);
		ОбластьМакета.Параметры.НомерДокОснование = ?(
			Документ.ДокументОснование = Неопределено,
			"-----",
			Документ.ДокументОснование.Номер
		);
		ОбластьМакета.Параметры.Продавец = Документ.Контрагент;
		ОбластьМакета.Параметры.ПродавецПолноеНаименование = УправлениеПечатьюПлатформа
																.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		
		КонтактнаяИнформацияК = Документ.Контрагент.КонтактнаяИнформация.Выгрузить();
		
		Если ЗначениеЗаполнено(КонтактнаяИнформацияК) Тогда
			
			Инд = 0;
			
			Пока Инд < КонтактнаяИнформацияК.Количество() Цикл
				
				Если КонтактнаяИнформацияК[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонКонтрагента" Тогда
					
					ОбластьМакета.Параметры.ПродавецТелефоны = КонтактнаяИнформацияК[Инд].Представление;
					
				КонецЕсли;
				
				Инд = Инд + 1;
				
			КонецЦикла;
			
			Инд = 0;
			
			Пока Инд < КонтактнаяИнформацияК.Количество() Цикл
				
				Если КонтактнаяИнформацияК[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресКонтрагента" Тогда
					
					ПредставлениеАдреса = ?(
						Лев(КонтактнаяИнформацияК[Инд].Город, 1) = "г",
						КонтактнаяИнформацияК[Инд].Город,
						"г. " + КонтактнаяИнформацияК[Инд].Город
					);
					
					ОбластьМакета.Параметры.ПродавецАдресЮридический = ?(
						ЗначениеЗаполнено(КонтактнаяИнформацияК[Инд].Город),
						ПредставлениеАдреса,
						""
					);
					
				КонецЕсли;
				
				Инд = Инд + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если
			ЗначениеЗаполнено(Документ.Автомобиль)
			И ТипЗнч(Документ.Автомобиль) = Тип("СправочникСсылка.Автомобили")
		Тогда
			
			ОбластьМакета.Параметры.Автомобиль               = Документ.Автомобиль;
			ОбластьМакета.Параметры.АвтомобильКод            = Документ.Автомобиль.VIN;
			ОбластьМакета.Параметры.АвтомобильМодель         = Автосервис.МаркаМодельАвтомобиля(Документ.Автомобиль);
			ОбластьМакета.Параметры.АвтомобильНомерДвигателя = Документ.Автомобиль.НомерДвигателя;
			ОбластьМакета.Параметры.АвтомобильНомерШасси     = Документ.Автомобиль.НомерШасси;
			ОбластьМакета.Параметры.АвтомобильНомерКузова    = Документ.Автомобиль.НомерКузова;
			ОбластьМакета.Параметры.АвтомобильЦвет           = Документ.Автомобиль.Цвет;
			
			ОбластьМакета.Параметры.АвтомобильГодВыпуска     = Формат(
				Документ.Автомобиль.ГодВыпуска,
				АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ.Автомобиль)
			);
			
			ОбластьМакета.Параметры.АвтомобильГосНомер   = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Документ.Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,
				Документ.Дата
			);
			
			ОбластьМакета.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Документ.Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт,
				Документ.Дата
			));
			
			ОбластьМакета.Параметры.АвтомобильПробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Документ.Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
				Документ.Дата
			);
			
		КонецЕсли;
		
		ФайлКартинки = Неопределено;
		
		Если ЗначениеЗаполнено(Документ.Модель.ФайлКартинки) Тогда
			
			ФайлКартинки = Документ.Модель.ФайлКартинки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлКартинки) Тогда
			
			Попытка
				
				АдресКартинки = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
				СхемаТС = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинки), Ложь);
				ОбластьМакета.Рисунки.СхемаТС.Картинка = СхемаТС;
				ОбластьМакета.Рисунки.СхемаТС.РазмерКартинки = РазмерКартинки.Пропорционально;
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Акт оценки автомобиля.Печать'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.АктОценкиАвтомобиля,
					Документ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				
			КонецПопытки;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// выводим описание повреждений
		ОбластьМакетаШапкаПовреждения  = Макет.ПолучитьОбласть("ЗамечанияПриОсмотреШапка");
		ОбластьМакетаСтрокаПовреждения = макет.ПолучитьОбласть("ЗамечанияПриОсмотреСтрока");
		
		// получим данные о повреждениях
		ТаблицаПовреждений = Документ.Замечания.Выгрузить();
		
		Если ТаблицаПовреждений.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаПовреждения);
		Иначе
			ОбластьПустыеЗамечания = Макет.ПолучитьОбласть("ЗамечанияПустые");
			ТабличныйДокумент.Вывести(ОбластьПустыеЗамечания);
		КонецЕсли;
		
		НомерСтроки = 1;
		
		Для Каждого ТекущаяСтрока Из ТаблицаПовреждений Цикл
			
			// заполним область
			ОбластьМакетаСтрокаПовреждения.Параметры.НомерСтроки         = НомерСтроки;
			ОбластьМакетаСтрокаПовреждения.Параметры.ВидОтметки          = ТекущаяСтрока.ТипПовреждения;
			ОбластьМакетаСтрокаПовреждения.Параметры.ОписаниеПовреждения = ТекущаяСтрока.Описание;
			
			// проверим вывод
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьМакетаСтрокаПовреждения);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаПовреждения);
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапкаПовреждения);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаПовреждения);
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		// получим заголовок и строку таблицы
		ОбластьМакетаШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьМакетаПодвал        = Макет.ПолучитьОбласть("Подвал");
		
		Если ТаблицаПовреждений.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Отступ"));
		КонецЕсли;
		
		// проверим вывод
		МассивОбластей = Новый Массив;
		МассивОбластей.Добавить(ОбластьМакетаШапкаТаблицы);
		МассивОбластей.Добавить(ОбластьМакетаСтрокаТаблицы);
		
		Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		КонецЕсли;
		
		ХарактеристикиАвтомобиля = Документ.ХарактеристикиАвтомобиля.Выгрузить();
		
		Для Каждого Строка Из ХарактеристикиАвтомобиля Цикл
			
			ОбластьМакетаСтрокаТаблицы.Параметры.ПунктПроверки = Строка.Характеристика;
			ОбластьМакетаСтрокаТаблицы.Параметры.Значение      = Строка.Значение;
			
			// проверим вывод
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьМакетаСтрокаТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод подвала документа
		ОбластьМакетаПодвал.Параметры.ДатаДок = Формат(Документ.Дата, НСтр("ru = 'ДФ=''дд ММММ гггг'''"));
		
		// проверим вывод
		МассивОбластей = Новый Массив;
		МассивОбластей.Добавить(ОбластьМакетаПодвал);
		
		Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОценкиАвтомобиля_АктОсмотра";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти  

#КонецОбласти

#КонецЕсли

