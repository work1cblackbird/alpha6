#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит заполнение объекта на основании документа "РабочийЛистВыкупаАвтомобиля"
//
// Параметры:
//  Событие     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//   Булево - признак продолжения выполнения метода "ОбработкаЗаполнения"
//
Функция ОбработкаЗаполнения_РабочийЛистВыкупаАвтомобиля(Событие, // BSLLS-off
                                                         ТекстЗаполнения = "",
                                                         СтандартнаяОбработка = Истина) Экспорт
														 
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат Истина;
	КонецЕсли;
														 
	ПродолжатьЗаполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		Событие,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если Не ПродолжатьЗаполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.АктОценкиИОсмотраАвтомобиля;
	ИтоговаяЦена = 0;
	ДатаОценки = 0;
	
	Если Не Автомобиль.Пустая() Тогда
		
		Документы.АктОценкиАвтомобиля.АвтомобильПриИзменении(ЭтотОбъект, Новый Структура());
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "АктОценкиАвтомобиля"
//
// Параметры:
//  Событие     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//   Булево - признак продолжения выполнения метода "ОбработкаЗаполнения"
//
Функция ОбработкаЗаполнения_АктОценкиАвтомобиля(Событие, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт // BSLLS-off
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжатьЗаполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		Событие,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если НЕ ПродолжатьЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.АктОценкиИОсмотраАвтомобиля;
	ИтоговаяЦена = 0;
	ДатаОценки = 0;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	ДляОснованияУжеВведенАктОценки(ДанныеЗаполнения);
	
	ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Пробег"
	);
	
	Если
		ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РабочийЛистВыкупаАвтомобиля")
		И ЭтоСтатусОтказ(ДанныеЗаполнения.Статус)
	Тогда
		
		ТекстОшибки = НСтр("ru = 'Нельзя вводить документ на основании рабочего листа со статусом ""Отказ""'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьХарактеристикиАвтомобиля();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Документы.АктОценкиАвтомобиля.ОчиститьНезаполненныеХарактеристики(ЭтотОбъект);
	
	ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Отказ Или Не ПроверитьЗаполнениеКонтрагента() Или Не ПроверитьЗаполнениеАвтомобиля();
		
	КонецЕсли;
	
	ОбновитьПоказателиПрисоединенныхФайлов();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ); 
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если УтверждениеДокументовСервер.ИспользоватьУтверждениеДокументов() Тогда
		
		УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, Режим) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьХарактеристикиАвтомобиля()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвойстваИХарактеристикиАвтомобилей.Ссылка КАК Характеристика
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваИХарактеристикиАвтомобилей КАК СвойстваИХарактеристикиАвтомобилей
		|ГДЕ
		|	НЕ СвойстваИХарактеристикиАвтомобилей.ЭтоГруппа
		|	И НЕ СвойстваИХарактеристикиАвтомобилей.ПометкаУдаления
		|	И СвойстваИХарактеристикиАвтомобилей.ДобавлятьПоУмолчаниюВАктОсмотра"
	);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		НовыйЭлементХарактеристикАвтомобиля = ХарактеристикиАвтомобиля.Добавить();
		НовыйЭлементХарактеристикАвтомобиля.КлючСтроки = Новый УникальныйИдентификатор();
		НовыйЭлементХарактеристикАвтомобиля.Характеристика = Выборка.Характеристика;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДляОснованияУжеВведенАктОценки(Документ)
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РабочийЛистВыкупаАвтомобиля") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборПоСсылке = "";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ОтборПоСсылке = "И АктОценкиАвтомобиля.Ссылка <> &ЭтотДокумент";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктОценкиАвтомобиля.Ссылка КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(АктОценкиАвтомобиля.Ссылка) КАК ДокументПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ДокументОснование) КАК ОснованиеПредставление
	|ИЗ
	|	Документ.АктОценкиАвтомобиля КАК АктОценкиАвтомобиля
	|ГДЕ
	|	АктОценкиАвтомобиля.ДокументОснование = &ДокументОснование
	|	И НЕ АктОценкиАвтомобиля.ПометкаУдаления
	|	%1", ОтборПоСсылке));
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ТекстСообщения = СтрШаблон(НСтр("ru='На основании документа <%1> уже введен <%2>.'"),
		Выборка.ОснованиеПредставление, Выборка.ДокументПредставление);
	УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Выборка.Документ, ТекстСообщения);
	
КонецПроцедуры

Функция ЭтоСтатусОтказ(СтатусДокумента)
	
	Результат = СтатусДокумента = ПредопределенноеЗначение("Справочник.СтатусыРабочегоЛистаВыкупаАвтомобиля.ОтказВВыкупе")
		ИЛИ СтатусДокумента = ПредопределенноеЗначение("Справочник.СтатусыРабочегоЛистаВыкупаАвтомобиля.ОтказКлиента");
		
	Возврат Результат;
	
КонецФункции // ЭтоСтатусОтказ()

Функция ПроверитьЗаполнениеКонтрагента()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Владелец"" не заполнено'"),
			ЭтотОбъект,
			"Контрагент"
		);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьЗаполнениеАвтомобиля()
	
	Если НЕ ЗначениеЗаполнено(Автомобиль) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Автомобиль"" не заполнено'"),
			ЭтотОбъект,
			"Автомобиль"
		);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьПоказателиПрисоединенныхФайлов()
	
	КоличествоПрисоединенныхФайлов = ПрисоединенныеФайлыХарактеристикИЗамечаний.Количество();
	ЕстьПрисоединенныеФайлы = КоличествоПрисоединенныхФайлов > 0;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
