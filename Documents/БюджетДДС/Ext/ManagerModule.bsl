// Модуль менеджера документа "Бюджет ДДС"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетДДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.БюджетДДС);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Проверяет ТЧ СтатьиДДС на заполненность данными
//
// Параметры:
//  СтатьиДДС - ДанныеФормыКоллекция - Табличная часть СтатьиДДС
//
Функция ПроверитьЗаполнениеСтатейДДС(СтатьиДДС) Экспорт
	
	КоличествоСтрокСтатейДДС = СтатьиДДС.Количество();
	Если КоличествоСтрокСтатейДДС = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("СтатьяДДС", Справочники.СтатьиДДС.ПустаяСсылка());
	ПустыеСтроки = СтатьиДДС.НайтиСтроки(ПараметрыПоиска);
	Если ПустыеСтроки.Количество() = КоличествоСтрокСтатейДДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.СтатьиДДС.Итог("БазоваяСуммаУпр"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// заполнение периода по данным периодичности документа
Процедура УстановитьПериодГрафиков(Объект) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.СценарийПланирования.Периодичность) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
	Параметры.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
	
	Для Каждого Строка Из Объект.ГрафикРаспределенияДС Цикл
		Параметры.Вставить("Действие", Строка.Период);
		Строка.ПериодРаспределения = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
	КонецЦикла;
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СценарийПланирования");
	ОбязательныеРеквизиты.Добавить("ХозОперация");

	Если НЕ ПравоПользователя("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("СтатьиДДС");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("СтатьиДДС.СтатьяДДС");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеСтатьи = Новый Массив();
	УникальныеСтатьи.Добавить("СтатьяДДС");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("СтатьиДДС", УникальныеСтатьи);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.СтатьиДДС.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сценарий планирования".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СценарийПланированияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
		Объект.ДатаПланирования = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
	Параметры.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
	Параметры.Вставить("Действие", 0);
	
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
	
	Объект.ДатаПланирования = Параметры.ДатаНачала;
	
КонецПроцедуры // СценарийПланированияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьиДДС

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС" в таблице "Статьи ДДС".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтатьиДДССтатьяДДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.БазовыйБюджет) Тогда
		Если ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
			Если Строка.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Приход И ТипЗнч(Строка.БазовыйБюджет) = Тип("ДокументСсылка.БюджетПродаж") Тогда
				Строка.БазовыйБюджет = Неопределено;
			ИначеЕсли Строка.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Расход И ТипЗнч(Строка.БазовыйБюджет) = Тип("ДокументСсылка.БюджетЗакупок") Тогда
				Строка.БазовыйБюджет = Неопределено;
			ИначеЕсли Строка.СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Приход И Строка.СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Расход Тогда
				Строка.БазовыйБюджет = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		СтатьиДДСБазовыйБюджетПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Возможно появились строки призраки, их нужно аннигилировать.
	СтрокиДляУдаления = Новый Массив;
	Для Каждого СтрокаГрафика Из Объект.ГрафикРаспределенияДС Цикл
		Если Объект.СтатьиДДС.НайтиСтроки(Новый Структура("СтатьяДДС", СтрокаГрафика.СтатьяДДС)).Количество() = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаГрафика);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ГрафикРаспределенияДС.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	УстановитьПериодГрафиков(Объект);
	
КонецПроцедуры // СтатьиДДССтатьяДДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Базовая сумма" в таблице "Статьи ДДС".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтатьиДДСБазоваяСуммаУпрПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ИспользоватьРаздельныеГрафикиПогашения Тогда
		СтрокиГрафика = Объект.ГрафикРаспределенияДС.НайтиСтроки(Новый Структура("СтатьяДДС", Строка.СтатьяДДС));
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			СтрокаГрафика.СуммаПогашенияУпр = СтрокаГрафика.Процент*Строка.БазоваяСуммаУпр/100;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СтатьиДДСБазоваяСуммаУпрПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Базовый бюджет" в таблице "Статьи ДДС".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтатьиДДСБазовыйБюджетПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.БазоваяСуммаУпр = ?(ЗначениеЗаполнено(Строка.БазовыйБюджет), Строка.БазовыйБюджет.СуммаДокумента, 0);
	СтатьиДДСБазоваяСуммаУпрПриИзменении(Объект, Строка);
	
КонецПроцедуры // СтатьиДДСБазовыйБюджетПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикРаспределенияДС

// Обработчик события возникающего при изменении данных реквизита "Процент" в таблице "График распределения ДС".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ГрафикРаспределенияДСПроцентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ИспользоватьРаздельныеГрафикиПогашения Тогда
		НайденнаяСтрока = Неопределено;
		НайденныеСтроки = Объект.СтатьиДДС.НайтиСтроки(Новый Структура("СтатьяДДС", Строка.СтатьяДДС));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		Если НайденнаяСтрока <> Неопределено Тогда
			Строка.СуммаПогашенияУпр = Строка.Процент*НайденнаяСтрока.БазоваяСуммаУпр/100;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ГрафикРаспределенияДСПроцентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма погашения" в таблице "График распределения ДС".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ГрафикРаспределенияДССуммаПогашенияУпрПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ИспользоватьРаздельныеГрафикиПогашения Тогда
		НайденнаяСтрока = Неопределено;
		НайденныеСтроки = Объект.СтатьиДДС.НайтиСтроки(Новый Структура("СтатьяДДС", Строка.СтатьяДДС));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		Если НайденнаяСтрока <> Неопределено Тогда
			Строка.Процент = ?(НайденнаяСтрока.БазоваяСуммаУпр = 0, 0, Строка.СуммаПогашенияУпр/НайденнаяСтрока.БазоваяСуммаУпр*100);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ГрафикРаспределенияДССуммаПогашенияУпрПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "СтатьиДДС");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "БюджетДДС");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "СтатьиДДС");
	КонецЕсли;

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетДДС.Форма.ФормаАвтозаполнения";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГрафикРаспределенияДС", "ГрафикРаспределенияДС");
	ПараметрыФормы.Вставить("СтатьиДДС", "СтатьиДДС");
	ПараметрыФормы.Вставить("ЗначениеПроцента", "ЗначениеПроцента");
	ПараметрыФормы.Вставить("КоличествоПериодов", "КоличествоПериодов");
	ПараметрыФормы.Вставить("НачальноеСмещение", "НачальноеСмещение");
	ПараметрыФормы.Вставить("СпособАвтозаполнения", "СпособАвтозаполнения");
	ПараметрыФормы.Вставить("СценарийПланирования", "СценарийПланирования");
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СтатьиДДСПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Автозаполнение'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиСтатьиДДС";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "СтатьиДДС";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("СтатьиДДСАвтозаполнение.Видимость", Истина);
	ПараметрыКоманд.Вставить("СтатьиДДСАвтозаполнение.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения табличной части документа "График распределения ДС"
//
Функция ЗаполнениеТабличнойЧастиСтатьиДДС(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Получим структуру заполнения.
	СтруктураЗаполнения = ПараметрыЗаполнения.РезультатВыбора;
	
	// Произведем очистку ТЧ если есть необходимость.
	Если СтруктураЗаполнения.Свойство("ОчиститьТабличнуюЧастьГрафикРаспределенияДС") И СтруктураЗаполнения.ОчиститьТабличнуюЧастьГрафикРаспределенияДС = Истина Тогда
		Объект.ГрафикРаспределенияДС.Очистить();
	КонецЕсли;
	
	// Заполнение по количеству периодов или по процентам.
	Если Не СтруктураЗаполнения.СпособАвтозаполнения Тогда
		
		ВремКолПериодов = СтруктураЗаполнения.КоличествоПериодов;
		
		Если Объект.ИспользоватьРаздельныеГрафикиПогашения Тогда
			
			// Произведем расчет графика распределения денежных средств для каждой статьи.
			Для каждого ТекСтрокаСтатьяДДС Из Объект.СтатьиДДС Цикл
				
				// Установка значений статьи.
				СуммаПоСтатье = ТекСтрокаСтатьяДДС.БазоваяСуммаУпр;
				
				Если СуммаПоСтатье = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				
				ВремСмещение   = СтруктураЗаполнения.НачальноеСмещение; 
				СуммаЗаПериод  = Окр(СуммаПоСтатье / ВремКолПериодов, 2);
				СуммаПроцентов = 0;
				
				// В зависимости от количества периодов добавим строки графика распределения денежных средств.
				Для Сч = 1 По ВремКолПериодов Цикл
					
					НоваяСтрока = Объект.ГрафикРаспределенияДС.Добавить();
					
					// Произведем установку параметров
					НоваяСтрока.СтатьяДДС         = ТекСтрокаСтатьяДДС.СтатьяДДС;
					
					Если Сч=ВремКолПериодов Тогда
						ВремСумма = СуммаПоСтатье - ( (ВремКолПериодов - 1) * СуммаЗаПериод );
						НоваяСтрока.Процент = 100 - СуммаПроцентов;  
					Иначе
						ВремСумма = СуммаЗаПериод;
						НоваяСтрока.Процент = Окр(ВремСумма / СуммаПоСтатье * 100, 2);
					КонецЕсли;
					
					НоваяСтрока.Период            = ВремСмещение;
					НоваяСтрока.СуммаПогашенияУпр = ВремСумма;
					
					СуммаПроцентов = СуммаПроцентов + НоваяСтрока.Процент;
					
					// Установим период распределения.
					ПараметрыПланирования = Новый Структура;
					ПараметрыПланирования.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
					ПараметрыПланирования.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
					ПараметрыПланирования.Вставить("Действие", НоваяСтрока.Период);
					НоваяСтрока.ПериодРаспределения = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыПланирования);
					
					// Смещаем период.
					ВремСмещение = ВремСмещение + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			// Произведем установку параметров.
			ВремСмещение    = СтруктураЗаполнения.НачальноеСмещение; 
			ПроцентЗаПериод = Окр(100 / ВремКолПериодов);
			
			// В зависимости от количества периодов добавим строки графика распределения денежных средств.
			Для Сч = 1 По СтруктураЗаполнения.КоличествоПериодов Цикл
				
				НоваяСтрока = Объект.ГрафикРаспределенияДС.Добавить();
				
				// Произведем установку параметров.
				Если Сч = ВремКолПериодов Тогда
					НоваяСтрока.Процент = 100 - (ВремКолПериодов - 1) * ПроцентЗаПериод;
				Иначе
					НоваяСтрока.Процент = ПроцентЗаПериод;
				КонецЕсли;
				
				НоваяСтрока.Период = ВремСмещение;
				
				// Установим период распределения.
				ПараметрыПланирования = Новый Структура;
				ПараметрыПланирования.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
				ПараметрыПланирования.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
				ПараметрыПланирования.Вставить("Действие", НоваяСтрока.Период);
				НоваяСтрока.ПериодРаспределения = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыПланирования);
				
				// Смещаем период.
				ВремСмещение       = ВремСмещение + 1;
				
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если Объект.ИспользоватьРаздельныеГрафикиПогашения Тогда
			
			// Произведем расчет графика распределения денежных средств для каждой статьи.
			Для каждого ТекСтрокаСтатьяДДС Из Объект.СтатьиДДС Цикл
				
				// Произведем установку параметров.
				СуммаПоСтатьеОстаток = ТекСтрокаСтатьяДДС.БазоваяСуммаУпр;
				СуммаЗаПериод        = СуммаПоСтатьеОстаток * СтруктураЗаполнения.ЗначениеПроцента / 100;
				
				Если СуммаЗаПериод = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ВремСмещение = СтруктураЗаполнения.НачальноеСмещение;
				
				Пока СуммаПоСтатьеОстаток > 0 Цикл
					
					ВремСумма            = Мин(СуммаПоСтатьеОстаток, СуммаЗаПериод);
					СуммаПоСтатьеОстаток = СуммаПоСтатьеОстаток - ВремСумма;
					
					Если Цел(СуммаПоСтатьеОстаток) <= 1 Тогда
						ВремСумма = ВремСумма + СуммаПоСтатьеОстаток;
						СуммаПоСтатьеОстаток = 0;
					КонецЕсли;
					
					НоваяСтрока = Объект.ГрафикРаспределенияДС.Добавить();
					
					// Произведем установку параметров.
					НоваяСтрока.СтатьяДДС         = ТекСтрокаСтатьяДДС.СтатьяДДС;
					НоваяСтрока.Период            = ВремСмещение;
					НоваяСтрока.Процент           = Окр(ВремСумма / ТекСтрокаСтатьяДДС.БазоваяСуммаУпр * 100, 2);
					НоваяСтрока.СуммаПогашенияУпр = ВремСумма;
					
					// Установим период распределения.
					ПараметрыПланирования = Новый Структура;
					ПараметрыПланирования.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
					ПараметрыПланирования.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
					ПараметрыПланирования.Вставить("Действие", НоваяСтрока.Период);
					НоваяСтрока.ПериодРаспределения = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыПланирования);
					
					// Смещаем период.
					ВремСмещение = ВремСмещение + 1;
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			
			ПроцентЗаПериод = СтруктураЗаполнения.ЗначениеПроцента;
			ОстатокПроцента = 100;
			ВремСмещение    = СтруктураЗаполнения.НачальноеСмещение;
			
			Пока ОстатокПроцента > 0 Цикл
				
				ТекЗначениеПроцента = Мин(ОстатокПроцента, ПроцентЗаПериод);
				ОстатокПроцента     = ОстатокПроцента - ТекЗначениеПроцента;
				НоваяСтрока = Объект.ГрафикРаспределенияДС.Добавить();
				
				// Произведем установку параметров.
				НоваяСтрока.Период   = ВремСмещение;
				НоваяСтрока.Процент  = ТекЗначениеПроцента;
				
				// Установим период распределения.
				ПараметрыПланирования = Новый Структура;
				ПараметрыПланирования.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
				ПараметрыПланирования.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
				ПараметрыПланирования.Вставить("Действие", НоваяСтрока.Период);
				НоваяСтрока.ПериодРаспределения = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыПланирования);
				
				ВремСмещение = ВремСмещение + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим параметры заполнения.
	Объект.ЗначениеПроцента     = СтруктураЗаполнения.ЗначениеПроцента;
	Объект.КоличествоПериодов   = СтруктураЗаполнения.КоличествоПериодов;
	Объект.НачальноеСмещение    = СтруктураЗаполнения.НачальноеСмещение;
	Объект.СпособАвтозаполнения = СтруктураЗаполнения.СпособАвтозаполнения;
	
КонецФункции // ЗаполнениеТабличнойЧастиСтатьиДДС()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.БюджетДДС",
		"ПФ_MXL_БюджетДДСБезГрафиков",
		НСтр("ru = 'Бюджет ДДС без графиков'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.БюджетДДС",
		"ПФ_MXL_БюджетДДССГрафиками",
		НСтр("ru = 'Бюджет ДДС с графиками'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БюджетДДСБезГрафиков") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_БюджетДДСБезГрафиков",
															НСтр("ru = 'Бюджет ДДС без графиков'"),
															ПечатьБюджетДДСБезГрафиков(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БюджетДДССГрафиками") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_БюджетДДССГрафиками",
															НСтр("ru = 'Бюджет ДДС с графиками'"),
															ПечатьБюджетДДССГрафиками(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;													
КонецПроцедуры // Печать()

// Формирует печатную форму "БюджетДДСБезГрафиков"
//
Функция ПечатьБюджетДДСБезГрафиков(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БюджетДДС_БюджетДДСБезГрафиков";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// Для начала, получим данные в удобном виде
		Запрос = Новый Запрос;
		Если Документ.ИспользоватьРаздельныеГрафикиПогашения Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БюджетДДСГрафикРаспределенияДС.СтатьяДДС КАК СтатьяДДС,
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ КАК Период,
			|	СУММА(БюджетДДСГрафикРаспределенияДС.СуммаПогашенияУпр) КАК СуммаУпр,
			|	СУММА(БюджетДДСГрафикРаспределенияДС.Процент) КАК Процент
			|ИЗ
			|	Документ.БюджетДДС.ГрафикРаспределенияДС КАК БюджетДДСГрафикРаспределенияДС
			|ГДЕ
			|	БюджетДДСГрафикРаспределенияДС.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	БюджетДДСГрафикРаспределенияДС.СтатьяДДС,
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	БюджетДДСГрафикРаспределенияДС.СтатьяДДС.Наименование,
			|	Период
			|ИТОГИ
			|	СУММА(СуммаУпр),
			|	СУММА(Процент)
			|ПО
			|	СтатьяДДС,
			|	Период";
		Иначе
			 Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БюджетДДССтатьиДДС.СтатьяДДС КАК СтатьяДДС,
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ КАК Период,
			|	СУММА(БюджетДДСГрафикРаспределенияДС.Процент) КАК Процент,
			|	СУММА(БюджетДДССтатьиДДС.БазоваяСуммаУпр * БюджетДДСГрафикРаспределенияДС.Процент / 100) КАК СуммаУпр
			|ИЗ
			|	Документ.БюджетДДС.ГрафикРаспределенияДС КАК БюджетДДСГрафикРаспределенияДС,
			|	Документ.БюджетДДС.СтатьиДДС КАК БюджетДДССтатьиДДС
			|ГДЕ
			|	БюджетДДСГрафикРаспределенияДС.Ссылка = &Ссылка
			|	И БюджетДДССтатьиДДС.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	БюджетДДССтатьиДДС.СтатьяДДС
			|
			|УПОРЯДОЧИТЬ ПО
			|	БюджетДДССтатьиДДС.СтатьяДДС.Наименование,
			|	Период
			|ИТОГИ
			|	СУММА(Процент),
			|	СУММА(СуммаУпр)
			|ПО
			|	СтатьяДДС,
			|	Период"; 		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка",           Документ.Ссылка);
		Запрос.УстановитьПараметр("ДатаПланирования", Документ.ДатаПланирования);
		Запрос.УстановитьПараметр("Периодичность",    Строка(Документ.СценарийПланирования.Периодичность));
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПериодов  = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
		
		Параметры = Новый Структура;
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		СписокПериодов = Новый СписокЗначений;
		Пока ВыборкаПериодов.Следующий() Цикл
			Параметры.Вставить("ДатаИзПериода", ВыборкаПериодов.Период);
			СписокПериодов.Добавить(ВыборкаПериодов.Период, ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры));
		КонецЦикла;
		СписокПериодов.СортироватьПоЗначению();
		
		// Получаем макет
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БюджетДДС.ПФ_MXL_БюджетДДСБезГрафиков");
		
		// Заголовок
		Параметры.Очистить();
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		Параметры.Вставить("ДатаИзПериода", Документ.ДатаПланирования); 
		ПредставлениеПериода = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
		
		Параметры.Очистить();
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		Параметры.Вставить("Область"               , "Заголовок");
		Параметры.Вставить("ПодразделениеКомпании" , УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, Документ.Дата));
		Параметры.Вставить("СценарийПланирования"  , Документ.СценарийПланирования);
		Параметры.Вставить("ТекстЗаголовка"        , ТекстЗаголовка);
		Параметры.Вставить("ПериодПланирования"    , ПредставлениеПериода);
		Параметры.Вставить("Список"                , СписокПериодов);
		
		ОбластьМакета = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// Готовим и выводим шапку
		Параметры.Очистить();
		Параметры.Вставить("Область", "ШапкаТаблицы");	
		
		// Подготовим список
		мсвВрем = Новый Массив;	
		Для Каждого ТекПериод Из СписокПериодов Цикл	
			СтруктураВрем = Новый Структура;
			СтруктураВрем.Вставить("Период", ТекПериод.Представление);
			мсвВрем.Добавить(СтруктураВрем);
		КонецЦикла;
		Параметры.Вставить("Список", мсвВрем);
		
		ОбластьШапкаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);	
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Подготовим подвал страницы
		Параметры.Вставить("Область", "ПодвалСтраницы");
		ОбластьПодвалаСтраницыТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);	
		
		// Подготовим подвал документа
		Параметры.Вставить("Область", "Подвал");
		Параметры.Вставить("Автор",   Документ.Автор);
		ОбластьПодвалаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		
		// Выводим строки
		Параметры.Очистить();
		Параметры.Вставить("Область", "Строка");
		
		НомерСтроки = 1;
		ВыборкаСтатей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяДДС");
		Пока ВыборкаСтатей.Следующий() Цикл
			
			// Подготавливаем список
			мсвВрем = Новый Массив;
			ВыборкаПериодов = ВыборкаСтатей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериодов.Следующий() Цикл
				СтруктураВрем = Новый Структура;
				СтруктураВрем.Вставить("СуммаПериодаУпр", Формат(ВыборкаПериодов.СуммаУпр, ФорматВыводаСуммы));
				ПроцентИтог = ?(ВыборкаПериодов.Процент = 0, "", "" + ВыборкаПериодов.Процент + "%");
				СтруктураВрем.Вставить("Процент", "" + ?(ВыборкаПериодов.Процент = NULL, "", ПроцентИтог));
				мсвВрем.Добавить(СтруктураВрем);
			КонецЦикла;
			Параметры.Вставить("Список",      мсвВрем); 
			Параметры.Вставить("СтатьяДДС",   ВыборкаСтатей.СтатьяДДС);
			Параметры.Вставить("НомерСтроки", НомерСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если НомерСтроки = ВыборкаСтатей.Количество() Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвалаТаблицы);
			КонецЕсли;
			
			ОбластьСтрокиТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
			
			НомерСтраницы  = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокиТаблицы, ОбластьШапкаТаблицы,
																					ОбластьПодвалаСтраницыТаблицы, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвалаСтраницыТаблицы);
		КонецЕсли;
	
		// Выводим подвал
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалаТаблицы,,, НомерСтраницы,, Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьБюджетДДСБезГрафиков()

// Формирует печатную форму "БюджетДДССГрафиками"
//
Функция ПечатьБюджетДДССГрафиками(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БюджетДДС_ПечатьБюджетДДССГрафиками";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
		// Для начала, получим данные в удобном виде
		Запрос = Новый Запрос;
		Если Документ.ИспользоватьРаздельныеГрафикиПогашения Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БюджетДДСГрафикРаспределенияДС.СтатьяДДС КАК СтатьяДДС,
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ КАК Период,
			|	СУММА(БюджетДДСГрафикРаспределенияДС.СуммаПогашенияУпр) КАК СуммаУпр,
			|	СУММА(БюджетДДСГрафикРаспределенияДС.Процент) КАК Процент
			|ИЗ
			|	Документ.БюджетДДС.ГрафикРаспределенияДС КАК БюджетДДСГрафикРаспределенияДС
			|ГДЕ
			|	БюджетДДСГрафикРаспределенияДС.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	БюджетДДСГрафикРаспределенияДС.СтатьяДДС,
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	БюджетДДСГрафикРаспределенияДС.СтатьяДДС.Наименование,
			|	Период
			|ИТОГИ
			|	СУММА(СуммаУпр),
			|	СУММА(Процент)
			|ПО
			|	СтатьяДДС,
			|	Период";
		Иначе
			 Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БюджетДДССтатьиДДС.СтатьяДДС КАК СтатьяДДС,
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ КАК Период,
			|	СУММА(БюджетДДСГрафикРаспределенияДС.Процент) КАК Процент,
			|	СУММА(БюджетДДССтатьиДДС.БазоваяСуммаУпр * БюджетДДСГрафикРаспределенияДС.Процент / 100) КАК СуммаУпр
			|ИЗ
			|	Документ.БюджетДДС.ГрафикРаспределенияДС КАК БюджетДДСГрафикРаспределенияДС,
			|	Документ.БюджетДДС.СтатьиДДС КАК БюджетДДССтатьиДДС
			|ГДЕ
			|	БюджетДДСГрафикРаспределенияДС.Ссылка = &Ссылка
			|	И БюджетДДССтатьиДДС.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА &Периодичность = ""Год""
			|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, ГОД, БюджетДДСГрафикРаспределенияДС.Период)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &Периодичность = ""Квартал""
			|					ТОГДА ДОБАВИТЬКДАТЕ(&ДатаПланирования, КВАРТАЛ, БюджетДДСГрафикРаспределенияДС.Период)
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаПланирования, МЕСЯЦ, БюджетДДСГрафикРаспределенияДС.Период)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	БюджетДДССтатьиДДС.СтатьяДДС
			|
			|УПОРЯДОЧИТЬ ПО
			|	БюджетДДССтатьиДДС.СтатьяДДС.Наименование,
			|	Период
			|ИТОГИ
			|	СУММА(Процент),
			|	СУММА(СуммаУпр)
			|ПО
			|	СтатьяДДС,
			|	Период"; 		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка",           Документ.Ссылка);
		Запрос.УстановитьПараметр("ДатаПланирования", Документ.ДатаПланирования);
		Запрос.УстановитьПараметр("Периодичность",    Строка(Документ.СценарийПланирования.Периодичность));
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПериодов  = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
		
		Параметры = Новый Структура;
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		СписокПериодов = Новый СписокЗначений;
		Пока ВыборкаПериодов.Следующий() Цикл
			Параметры.Вставить("ДатаИзПериода", ВыборкаПериодов.Период);
			СписокПериодов.Добавить(ВыборкаПериодов.Период, ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры));
		КонецЦикла;
		СписокПериодов.СортироватьПоЗначению();
		
		// Получаем макет
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БюджетДДС.ПФ_MXL_БюджетДДССГрафиками");
		
		// Заголовок
		Параметры.Очистить();
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		Параметры.Вставить("ДатаИзПериода", Документ.ДатаПланирования);   
		ПредставлениеПериода = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
		
		Параметры.Очистить(); 
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		Параметры.Вставить("Область",               "Заголовок");
		Параметры.Вставить("ПодразделениеКомпании", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, Документ.Дата));
		Параметры.Вставить("СценарийПланирования",  Документ.СценарийПланирования);
		Параметры.Вставить("ТекстЗаголовка",        ТекстЗаголовка);
		Параметры.Вставить("ПериодПланирования",    ПредставлениеПериода);
	    Параметры.Вставить("Список",                СписокПериодов);
		
		ОбластьМакета = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;

		// Готовим и выводим шапку
		Параметры.Очистить();
		Параметры.Вставить("Область", ?(Документ.ИспользоватьРаздельныеГрафикиПогашения, "ШапкаТаблицыРаздельныеГрафики", "ШапкаТаблицы") );
		
		// Подготовим список
		мсвВрем = Новый Массив;	
		Для Каждого ТекПериод Из СписокПериодов Цикл	
			СтруктураВрем = Новый Структура;
			СтруктураВрем.Вставить("Период", ТекПериод.Представление);
			мсвВрем.Добавить(СтруктураВрем);
		КонецЦикла;
		Параметры.Вставить("Список", мсвВрем);

		ОбластьШапкаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Подготовим шапку для дальнейшего использования, если строки не влезут на страницу.
		Параметры.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ОбластьШапкаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		
		// Подготовим подвал страницы
		Параметры.Вставить("Область", "ПодвалСтраницы");
		ОбластьПодвалаСтраницыТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		
		// вывод строк
		Параметры.Очистить();
		Параметры.Вставить("Область", ?(Документ.ИспользоватьРаздельныеГрафикиПогашения, "СтрокаТаблицыРаздельныеГрафики", "Строка"));
		
		НомерСтроки = 1;
		ВыборкаСтатей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяДДС");
		
		Пока ВыборкаСтатей.Следующий() Цикл
		
			// Подготавливаем список
			мсвВрем = Новый Массив;
			ВыборкаПериодов = ВыборкаСтатей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериодов.Следующий() Цикл
				СтруктураВрем = Новый Структура;
				СтруктураВрем.Вставить("СуммаПериодаУпр", Формат(ВыборкаПериодов.СуммаУпр, ФорматВыводаСуммы)); 
				ПроцентИтог = ?(ВыборкаПериодов.Процент = 0, "", "" + ВыборкаПериодов.Процент + "%"); 
				СтруктураВрем.Вставить("Процент", "" + ?(ВыборкаПериодов.Процент = NULL, "", ПроцентИтог));
				мсвВрем.Добавить(СтруктураВрем);
			КонецЦикла;
			Параметры.Вставить("Список",      мсвВрем); 
			Параметры.Вставить("СтатьяДДС",   ВыборкаСтатей.СтатьяДДС);
			Параметры.Вставить("НомерСтроки", НомерСтроки);
			
			ОбластьСтрокиТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
			НомерСтраницы  = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокиТаблицы, 
												ОбластьШапкаТаблицы, ОбластьПодвалаСтраницыТаблицы, НомерСтраницы, , Документ);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвалаСтраницыТаблицы);
		КонецЕсли;
		
		// Завершаем печать статей
		Если НЕ Параметры.Свойство("Список") Тогда
			Параметры.Вставить("Список", Новый Массив);		
	    КонецЕсли;
		Параметры.Вставить("Область", "ПодвалСтатей");
		ОбластьПодвалаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
			
	    НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалаТаблицы, , , НомерСтраницы, , Документ);

		// Подготовим подвал документа
		Параметры.Вставить("Область", "Подвал");
		Параметры.Вставить("Автор",   Документ.Автор);	
		ОбластьПодвалаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);	
		
		// График выведем
		Если НЕ Документ.ИспользоватьРаздельныеГрафикиПогашения Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность); //Для получения представления периода
			
			ТабГрафикРаспределения = Новый ТабличныйДокумент;
			ТабГрафикРаспределения.Вывести(Макет.ПолучитьОбласть("ШапкаГрафика"));
			ТабГрафикРаспределения.Вывести(Макет.ПолучитьОбласть("Начало"));
			
			ВыборкаСтатей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяДДС");
			Если ВыборкаСтатей.Следующий() Тогда
				ВыборкаПериодов = ВыборкаСтатей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
				Пока ВыборкаПериодов.Следующий() Цикл
					ТекОбл = Макет.ПолучитьОбласть("ПериодГрафика");
					Параметры.Вставить("ДатаИзПериода", ВыборкаПериодов.Период);
					ТекОбл.Параметры.Период  = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
					ТекОбл.Параметры.Процент = "" + ВыборкаПериодов.Процент + "%";
					ТабГрафикРаспределения.Присоединить(ТекОбл);		
				КонецЦикла;
			КонецЕсли;
			ТабГрафикРаспределения.Присоединить(Макет.ПолучитьОбласть("ОкончаниеГрафика"));
			УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ТабГрафикРаспределения, , , НомерСтраницы, , Документ);
		КонецЕсли;

		// Выводим подвал
   		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалаТаблицы, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьБюджетДДССГрафиками()

// СформироватьОбластьТабличногоДокумента - Формирует область табличного документа.
//
// Параметры:
//  Макет     - макет, переданный для формирования табличного документа.
//  Параметры - структура, передает параметры заполнения области табличного документа.
//
// Возвращаемое значение:
//  ТабДок - Возвращает табличный документ.
//
Функция СформироватьОбластьТабличногоДокумента(Знач Макет, Знач Параметры)
	ТабДок = Новый ТабличныйДокумент;
	ТекОблПериод = Макет.ПолучитьОбласть("" + Параметры.Область + "|СтатьяДДС"); 	
	ЗаполнитьЗначенияСвойств(ТекОблПериод.Параметры, Параметры);		
	ТабДок.Вывести(ТекОблПериод);
	
	Для Каждого ТекПериод Из Параметры.Список Цикл
		ТекОблПериод = Макет.ПолучитьОбласть("" + Параметры.Область + "|Период");
		ЗаполнитьЗначенияСвойств(ТекОблПериод.Параметры, ТекПериод);
		ТабДок.Присоединить(ТекОблПериод);
	КонецЦикла;
	
	ТабДок.Присоединить(Макет.ПолучитьОбласть("" + Параметры.Область + "|Граница"));
	Возврат ТабДок;
КонецФункции // СформироватьОбластьТабличногоДокумента()

#КонецОбласти

#КонецОбласти

#КонецЕсли