// Модуль менеджера документа "Уведомление об остатках прослеживаемых товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Получает список документов с пустой страной происхождения для заполнения.
// Если ничего не нашли - возврат.
//
Процедура ЗаполнитьСтрануПроисхождения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.СтранаПроисхождения = СтранаПроисхождения(ДокументОбъект);
		
		Попытка
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		Исключение
			
			ЕстьОшибки = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Обновление ИБ.Уведомление об остатках прослеживаемых товаров'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

// Получает страну для заполнения документа "Уведомление об остатках прослеживаемых товаров" при создании документа.
// Если РНПТ документа заполнено, то значение берется из него, если нет - значение берется из ТЧ товары из номенклатуры.
// Если ничего не нашли - значение по умолчанию - Россия.
//
// Параметры:
//  Документ - ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров - заполняемый документ.
//
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - страна.
//
Функция СтранаПроисхождения(Документ) Экспорт
	
	Если ЗначениеЗаполнено(Документ.РНПТ) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.РНПТ, "Страна");
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Документ.Товары Цикл
		
		Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура.СтранаПроисхождения) Тогда
				Возврат ТекущаяСтрока.Номенклатура.СтранаПроисхождения;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура.ГТД) Тогда
			Возврат ТекущаяСтрока.Номенклатура.ГТД.Страна;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Справочники.СтраныМира.Россия;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ШаблоныСообщений
// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("Сумма"));
	
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	Возврат ИтогиОперации;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ПервичныйДокумент");
	ОбязательныеРеквизиты.Добавить("Состояние");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("КодТНВЭД");
	ОбязательныеРеквизиты.Добавить("СтранаПроисхождения");
	
	Если Объект.Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.ПолученОтвет Тогда
		ОбязательныеРеквизиты.Добавить("РНПТ");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.КоличествоПрослеживаемости");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		Строка.АртикулVIN = Строка.Номенклатура.VIN;
	Иначе
		Строка.АртикулVIN = Строка.Номенклатура.Артикул;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.КодОКПД2) Тогда
		Строка.КодОКПД2 = Строка.Номенклатура.КодОКПД2;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) ИЛИ Объект.ЕдиницаИзмерения.Коэффициент = 0 Тогда
		Коэффициент = 1;
	Иначе
		Коэффициент = Объект.ЕдиницаИзмерения.Коэффициент;
	КонецЕсли;
	
	Строка.КоличествоПрослеживаемости = Строка.Количество * Коэффициент;
	
КонецПроцедуры // ТоварыКоличествоФактПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	ПараметрыКоманд = Новый Соответствие;
	Возврат ПараметрыКоманд;
	
КонецФункции

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров",
		"УведомлениеОбОстаткахПрослеживаемыхТоваров",
		НСтр("ru = 'Уведомление об остатках прослеживаемых товаров'"),
		СсылкаНаДокумент
	);
	
КонецПроцедуры

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"УведомлениеОбОстаткахПрослеживаемыхТоваров",
			НСтр("ru = 'Уведомление об остатках прослеживаемых товаров'"),
			ПечатьУведомлениеОбОстаткахПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму "ИнвентаризацияТоваровНаКомиссии"
//
Функция ПечатьУведомлениеОбОстаткахПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати =
		"ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОбОстаткахПрослеживаемыхТоваров_УведомлениеОбОстаткахПрослеживаемыхТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.УведомлениеОбОстаткахПрослеживаемыхТоваров"
		);
		
		// Вывод заголовка документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.НомерУведомления = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьМакета.Параметры.ДатаУведомления = Формат(Документ.Дата, "ДЛФ=D");
		ОбластьМакета.Параметры.НомерКорректировки = "0";
		ОбластьМакета.Параметры.НаимОрг = СокрЛП(Документ.Организация.НаименованиеПолное);
		ОбластьМакета.Параметры.ИНН = Документ.Организация.ИНН;
		ОбластьМакета.Параметры.КПП = Документ.Организация.КПП;
		ОбластьМакета.Параметры.НаименованиеПервичногоДокумента = Документ.ПервичныйДокумент.ХозОперация.Наименование;
		ОбластьМакета.Параметры.НомерУчетногоДокумента =
			УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.ПервичныйДокумент);
		ОбластьМакета.Параметры.ДатаУчетногоДокумента = Формат(Документ.ПервичныйДокумент.Дата, "ДЛФ=D");
		
		// Товары
		НаименованиеТоваров = "";
		Если Документ.Товары.Количество() = 1 Тогда
			НаименованиеТоваров = СокрЛП(Документ.Товары[0].Номенклатура.Наименование);
		Иначе
			НаименованиеТоваров = СокрЛП(Документ.КодТНВЭД.Наименование);
		КонецЕсли;
		
		ОбластьМакета.Параметры.НаименовениеТоваров = НаименованиеТоваров;
		ОбластьМакета.Параметры.КодТНВЭД = Документ.КодТНВЭД.Код;
		ОбластьМакета.Параметры.КодОКПД2 = ?(ЗначениеЗаполнено(Документ.КодОКПД2), Документ.КодОКПД2.Код, "");
		ОбластьМакета.Параметры.КоличествоТовара = Формат(Документ.Товары.Итог("Количество"), "ЧЦ=19; ЧДЦ=6; ЧРД=.; ЧН=-");
		КодЕдиницыПервичногоДокумента = ?(ЗначениеЗаполнено(Документ.ЕдиницаИзмерения),
			Документ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код,
			"796"
		);
		ОбластьМакета.Параметры.КодЕдиницыПервичногоДокумента = КодЕдиницыПервичногоДокумента;
		ОбластьМакета.Параметры.РНПТ = Документ.РНПТ;
		КодЕдиницыПрослеживаемости = ?(ЗначениеЗаполнено(Документ.ЕдиницаИзмеренияПрослеживаемости),
			Документ.ЕдиницаИзмеренияПрослеживаемости.Код,
			"796"
		);
		ОбластьМакета.Параметры.КодЕдиницыПроследиваемости = КодЕдиницыПрослеживаемости;
		ОбластьМакета.Параметры.КоличествоТовараПрослеживаемости = Формат(
			Документ.Товары.Итог("КоличествоПрослеживаемости"),
			"ЧЦ=19; ЧДЦ=6; ЧРД=.; ЧН=-"
		);
		ОбластьМакета.Параметры.Стоимость = Формат(Документ.Товары.Итог("Сумма"), "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=-");
		
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
			Документ,
			"Руководитель",
			"Руководитель",
			,
			Истина
		);
		Руководитель = Руководитель.РуководительПредставление;
		Если НЕ ПустаяСтрока(Руководитель) Тогда
			
			ОбластьМакета.Параметры.ПрПодп = "1";
			
			ФИОРуководителя = ФизическиеЛицаКлиентСервер.ЧастиИмени(Руководитель);
			ОбластьМакета.Параметры.ОргПодписантФамилия = ФИОРуководителя.Фамилия;
			ОбластьМакета.Параметры.ОргПодписантИмя = ФИОРуководителя.Имя;
			ОбластьМакета.Параметры.ОргПодписантОтчество = ФИОРуководителя.Отчество;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ДатаПодписи = Формат(Документ.Дата, "ДЛФ=D");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли