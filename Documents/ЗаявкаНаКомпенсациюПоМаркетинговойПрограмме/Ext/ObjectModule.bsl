// Модуль объекта документа "Заявка на компенсацию по маркетинговой программе"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
			ЭтотОбъект,
			ДанныеЗаполнения,
			ТекстЗаполнения,
			СтандартнаяОбработка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если Состояние = Перечисления.СтатусыКомпенсацииПоМаркетинговымПрограммам.ОтказДистрибьютора Тогда 
		ИндексРеквизитаСуммы = ПроверяемыеРеквизиты.Найти("СоставКомпенсации.Сумма");	
		ПроверяемыеРеквизиты.Удалить(ИндексРеквизитаСуммы);	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтатусыКомпенсацийПоМаркетинговымПрограммамСрезПоследних.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.СтатусыКомпенсацийПоМаркетинговымПрограммам.СрезПоследних(
	               |	&ТекущаяДатаСеанса, Регистратор = &Регистратор) КАК СтатусыКомпенсацийПоМаркетинговымПрограммамСрезПоследних";
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПоследнееЗаписанноеСостояние = Выборка.Состояние;
		НужнаЗапись = ПоследнееЗаписанноеСостояние <> Состояние;
	Иначе
		НужнаЗапись = Истина;
	КонецЕсли;
	
	Если НужнаЗапись Тогда
		Движения.СтатусыКомпенсацийПоМаркетинговымПрограммам.Записывать = Истина;
		Для Каждого Строка Из СоставКомпенсации Цикл
			Запись = Движения.СтатусыКомпенсацийПоМаркетинговымПрограммам.Добавить();
			Запись.Период = ТекущаяДатаСеанса;
			Запись.Регистратор = Ссылка;
			Запись.Источник = Строка.Источник;
			Запись.МаркетинговаяПрограмма = Строка.МаркетинговаяПрограмма;
			Запись.Автомобиль = Строка.Автомобиль;
			Запись.Состояние = Состояние;
		КонецЦикла;
	КонецЕсли;
	
	// Запись суммовых показателей компенсации.
	РеквизитСуммы = Неопределено;
	Если Состояние = Перечисления.СтатусыКомпенсацииПоМаркетинговымПрограммам.ПолученоОтДистрибьютора Тогда
		РеквизитСуммы = "Получено";
	ИначеЕсли Состояние = Перечисления.СтатусыКомпенсацииПоМаркетинговымПрограммам.ЗаявленоДистрибьютору Тогда
		РеквизитСуммы = "Заявлено";
	КонецЕсли;
	
	Если РеквизитСуммы <> Неопределено Тогда
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Дата);
		КурсВалютыРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		Движения.КомпенсацииПоМаркетинговымПрограммам.Записывать = Истина;
		Для Каждого Строка Из СоставКомпенсации Цикл
			Запись = Движения.КомпенсацииПоМаркетинговымПрограммам.Добавить();
			Запись.Регистратор = Ссылка;
			Запись.Период = Дата;
			Запись.Контрагент = Контрагент;
			Запись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			Запись.Источник = Строка.Источник;
			Запись.Автомобиль = Строка.Автомобиль;
			Запись.МаркетинговаяПрограмма = Строка.МаркетинговаяПрограмма;
			
			Запись[РеквизитСуммы] = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Строка.Сумма,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаРегл,
				КурсВалютыРегл
			);
			
			Запись[РеквизитСуммы + "Упр"] = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Строка.Сумма,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаУпр,
				КурсВалютыУпр
			);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме;
	Состояние = Перечисления.СтатусыКомпенсацииПоМаркетинговымПрограммам.Запланировано;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Скидка   КАК МаркетинговаяПрограмма,
	|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Значение КАК Сумма,
	|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Ссылка   КАК Ссылка
	|ПОМЕСТИТЬ МПЗаказа
	|ИЗ
	|	Документ.ЗаказНаАвтомобиль.СкидкиИМаркетинговыеПрограммы КАК ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы
	|ГДЕ
	|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Ссылка = &Ссылка
	|	И ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Скидка.ЭтоМаркетинговаяПрограмма = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   МПЗаказа.Ссылка                 КАК Источник,
	|	МПЗаказа.Ссылка.Автомобиль      КАК Автомобиль,
	|	МПЗаказа.МаркетинговаяПрограмма КАК МаркетинговаяПрограмма,
	|	МПЗаказа.Сумма                  КАК Сумма
	|ИЗ
	|	МПЗаказа КАК МПЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МПЗаказа.МаркетинговаяПрограмма.Контрагент КАК Контрагент
	|ИЗ
	|	МПЗаказа КАК МПЗаказа
	|ГДЕ
	|	МПЗаказа.Ссылка.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	РезультатМаркетинговыхПрограмм = 1;
	РезультатКонтрагентов = 2;
	
	Если НЕ РезультатыЗапросов[РезультатКонтрагентов].Пустой() Тогда
		Выборка = РезультатыЗапросов[РезультатКонтрагентов].Выбрать();
		Выборка.Следующий();
		
		Контрагент = Выборка.Контрагент;
		Документы.ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ РезультатыЗапросов[РезультатМаркетинговыхПрограмм].Пустой() Тогда
		Выборка = РезультатыЗапросов[РезультатМаркетинговыхПрограмм].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СоставКомпенсации.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(
	ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме;
	Состояние = Перечисления.СтатусыКомпенсацииПоМаркетинговымПрограммам.Запланировано;
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Автомобиль,Контрагент");
	
	Контрагент = ДанныеОснования.Контрагент;
	Документы.ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме.КонтрагентПриИзменении(ЭтотОбъект);
	
	СоставКомпенсации.Очистить();
	
	НоваяСтрока = СоставКомпенсации.Добавить();
	НоваяСтрока.Источник = ДанныеЗаполнения;
	НоваяСтрока.Автомобиль = ДанныеОснования.Автомобиль;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Заявка на компенсацию по маркетинговой программе".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме(
	ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// получим данные документа-основания
	ХозОперацияДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ХозОперация");
	
	Если ХозОперацияДокументаОснования = Справочники.ХозОперации.ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме Тогда
		ХозОперация = Справочники.ХозОперации.ОтветДистрибьютораНаКомпенсациюПоМаркетинговойПрограмме;
		Состояние = Перечисления.СтатусыКомпенсацииПоМаркетинговымПрограммам.ПолученоОтДистрибьютора;
	Иначе
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru='Запрещено вводить на основании ""Ответа от дистрибьютора""! Процедура заполнения прервана.'")
		);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
