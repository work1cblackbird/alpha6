// Модуль менеджера документа "Уведомление о перемещении прослеживаемых товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет ТЧ на основании переданного документа.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОПеремещенииПрослеживаемыхТоваров - заполняемый объект.
//  Основание - ДокументСсылка.РеализацияТоваров, ДокументСсылка.РеализацияАвтомобилей - документ-основание.
//
Процедура ЗаполнитьПоОснованию(Объект, Основание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним табличную часть "Контрагенты"
	СтрокаКонтрагента = Неопределено;
	КонтрагентОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Контрагент");
	Если Объект.Контрагенты.Количество() > 0 Тогда
		НайденныеСтроки = Объект.Контрагенты.НайтиСтроки(Новый Структура("Контрагент", КонтрагентОснования));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаКонтрагента = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	Если СтрокаКонтрагента = Неопределено Тогда
		СтрокаКонтрагента = Объект.Контрагенты.Добавить();
		СтрокаКонтрагента.Контрагент = КонтрагентОснования;
		СтрокаКонтрагента.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	ИдентификаторКонтрагента = СтрокаКонтрагента.ИдентификаторСтроки;
	
	// Найдем прослеживаемый товар по СФ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетФактураВыданный.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.ДокументОснование = &Основание
	               |	И НЕ СчетФактураВыданный.ПометкаУдаления";
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТоварыСчетФактуры = Выборка.Ссылка.Товары;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.ДополнительныеСвойства.Вставить("НеИскатьСчетФактуру", Истина);
		СчетФактура.Заполнить(Основание);
		ТоварыСчетФактуры = СчетФактура.Товары;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Оставим только прослеживаемые товары
	Для Каждого ТекущаяСтрока Из ТоварыСчетФактуры Цикл
		
		Если НЕ ЭтоПрослеживаемыйТовар(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.СопроводительныйДокумент = Основание;
		НоваяСтрока.ПорядковыйНомер = ТекущаяСтрока.НомерСтроки;
		НоваяСтрока.РНПТ = ТекущаяСтрока.ГТД;
		НоваяСтрока.Сумма = ТекущаяСтрока.СуммаВсего - ТекущаяСтрока.СуммаНДС;
		НоваяСтрока.ЕдиницаИзмеренияПрослеживаемости = 
			?(ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура"),
			ТекущаяСтрока.Номенклатура.БазоваяЕдиницаИзмерения,
			Справочники.КлассификаторЕдиницИзмерения.шт);
		НоваяСтрока.КодТНВЭД = ТекущаяСтрока.Номенклатура.КодТНВЭД;
		НоваяСтрока.КоличествоПрослеживаемости = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторКонтрагента;
	КонецЦикла;
	
КонецПроцедуры

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("Сумма"));
	
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	Возврат ИтогиОперации;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ПервичныйДокумент");
	ОбязательныеРеквизиты.Добавить("Состояние");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
		ОбязательныеРеквизиты.Добавить("Контрагенты");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.КоличествоПрослеживаемости");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмеренияПрослеживаемости");
	ОбязательныеРеквизиты.Добавить("Товары.Сумма");
	ОбязательныеРеквизиты.Добавить("Товары.РНПТ");
	ОбязательныеРеквизиты.Добавить("Товары.ПорядковыйНомер");
	ОбязательныеРеквизиты.Добавить("Товары.СопроводительныйДокумент");
	ОбязательныеРеквизиты.Добавить("Товары.ИдентификаторСтроки");
	
	ОбязательныеРеквизиты.Добавить("Контрагенты.Контрагент");
	ОбязательныеРеквизиты.Добавить("Контрагенты.ИдентификаторСтроки");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("РНПТ");
	УникальныеТовары.Добавить("ПорядковыйНомер");
	УникальныеТовары.Добавить("СопроводительныйДокумент");
	
	УникальныеКонтрагенты = Новый Массив();
	УникальныеКонтрагенты.Добавить("Контрагент");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("Контрагенты", УникальныеКонтрагенты);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		// Поставим единицу если она не заполнена
		Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка.ЕдиницаИзмерения = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения;
			Строка.ЕдиницаИзмеренияПрослеживаемости = Строка.Номенклатура.БазоваяЕдиницаИзмерения;
		Иначе
			Строка.ЕдиницаИзмерения = Справочники.Номенклатура.Автомобиль.ОсновнаяЕдиницаИзмерения;
			Строка.ЕдиницаИзмеренияПрослеживаемости = Справочники.Номенклатура.Автомобиль.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		Строка.КодТНВЭД = Строка.Номенклатура.КодТНВЭД;
	Иначе
		Строка.ЕдиницаИзмерения = Неопределено;
		Строка.ЕдиницаИзмеренияПрослеживаемости = Неопределено;
		Строка.КодТНВЭД = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторСтроки) И ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		
		ИдентификаторСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыДействия,
			"ИдентификаторСтроки",
			Неопределено
		);
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			Строка.ИдентификаторСтроки = ПараметрыДействия.ИдентификаторСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) ИЛИ Строка.ЕдиницаИзмерения.Коэффициент = 0 Тогда
		Коэффициент = 1;
	Иначе
		Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент;
	КонецЕсли;
	
	Строка.КоличествоПрослеживаемости = Строка.Количество * Коэффициент;
	
КонецПроцедуры // ТоварыКоличествоФактПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	ПараметрыКоманд = Новый Соответствие;
	Возврат ПараметрыКоманд;
	
КонецФункции

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров",
		"УведомлениеОПеремещенииПрослеживаемыхТоваров",
		НСтр("ru = 'Уведомление о перемещении прослеживаемых товаров'"),
		СсылкаНаДокумент
	);
	
КонецПроцедуры

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"УведомлениеОПеремещенииПрослеживаемыхТоваров",
			НСтр("ru = 'Уведомление о перемещении прослеживаемых товаров'"),
			ПечатьУведомлениеОПеремещенииПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму "ИнвентаризацияТоваровНаКомиссии"
//
Функция ПечатьУведомлениеОПеремещенииПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати =
		"ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОПеремещенииПрослеживаемыхТоваров_УведомлениеОПеремещенииПрослеживаемыхТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.УведомлениеОПеремещенииПрослеживаемыхТоваров"
		);
		
		// Вывод заголовка документа
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьШапка.Параметры.НомерУведомления = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьШапка.Параметры.ДатаУведомления = Формат(Документ.Дата, "ДЛФ=D");
		ОбластьШапка.Параметры.НомерКорректировки = "0";
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.НаимОрг = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация,
			Новый Структура("Наименование", " ",
			ДополнительныеПараметры)
		);
		ОбластьШапка.Параметры.ИНН = Документ.Организация.ИНН;
		ОбластьШапка.Параметры.КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(
			Документ.Организация,
			Документ.ПодразделениеКомпании,
			Документ.Дата
		);
;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьКонтрагент = Макет.ПолучитьОбласть("Контрагент");
		ОбластьСтрокаСопрДокумент = Макет.ПолучитьОбласть("СтрокаСопрДокумент");
		ОбластьСведОПунктахНазначения = Макет.ПолучитьОбласть("СведОПунктахНазначения");
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ЭтоПервыйКонтрагент = Истина;
	
		// Пройдемся по каждому контрагенту
		Для Каждого ТекущийКонтрагент Из Документ.Контрагенты Цикл
			
			Если НЕ ЭтоПервыйКонтрагент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЭтоПервыйКонтрагент = Ложь;
			
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.НаДату = Документ.Дата;
			СтруктураПараметров = Новый Структура("Наименование", "");
			ОбластьКонтрагент.Параметры.НаимЛицаПередПраво = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				ТекущийКонтрагент.Контрагент,
				СтруктураПараметров,
				ДополнительныеПараметры
			);
			
			ОбластьКонтрагент.Параметры.КодСтраныКонтрагента = ТекущийКонтрагент.Контрагент.СтранаРегистрации.Код;
			ОбластьКонтрагент.Параметры.НалоговыйОрганКонтрагента = ТекущийКонтрагент.Контрагент.НалоговыйНомер;
			
			СтруктураПараметров = Новый Структура("АдресЮридический", "");
			ОбластьКонтрагент.Параметры.АдресКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				ТекущийКонтрагент.Контрагент,
				СтруктураПараметров,
				ДополнительныеПараметры
			);
			
			ТабличныйДокумент.Вывести(ОбластьКонтрагент);
			
			// Найдем документы контрагента и товары
			ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущийКонтрагент.ИдентификаторСтроки);
			НайденныеТовары = Документ.Товары.НайтиСтроки(ПараметрыОтбора);
			
			// Сформируем список документов
			СписокДокументов = Новый Массив;
			Для Каждого СтрокаТоваров Из НайденныеТовары Цикл
				Если СписокДокументов.Найти(СтрокаТоваров.СопроводительныйДокумент) = Неопределено Тогда
					СписокДокументов.Добавить(СтрокаТоваров.СопроводительныйДокумент);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекущийДокумент Из СписокДокументов Цикл
				
				ОбластьСтрокаСопрДокумент.Параметры.ВидСопоставляемогоДокумента = "2";
				ОбластьСтрокаСопрДокумент.Параметры.ДатаВходящегоДокумента = Формат(ТекущийДокумент.Дата, "ДЛФ=D");
				ОбластьСтрокаСопрДокумент.Параметры.НомерВходящегоДокумента = 
					УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ТекущийДокумент);
				ТабличныйДокумент.Вывести(ОбластьСтрокаСопрДокумент);
				
			КонецЦикла;
			
			// Адрес доставки пока не заполняем
			ТабличныйДокумент.Вывести(ОбластьСведОПунктахНазначения);
			
			// Теперь выведем таблицу с товарами
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
			Для Каждого СтрокаТоваров Из НайденныеТовары Цикл
				
				ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаТоваров);
				ОбластьСтрока.Параметры.Номенклатура =
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
				КодЕдиницыИзмерения = "";
				Если ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
					КодЕдиницыИзмерения = СтрокаТоваров.ЕдиницаИзмерения.Код;
				ИначеЕсли ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					КодЕдиницыИзмерения = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
				Иначе
					КодЕдиницыИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт.Код;
				КонецЕсли;
				ОбластьСтрока.Параметры.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
				ОбластьСтрока.Параметры.КодЕдиницыИзмеренияПрослеживаемости = СтрокаТоваров.ЕдиницаИзмеренияПрослеживаемости.Код;
				УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
					ТабличныйДокумент,
					ОбластьСтрока,
					ОбластьЗаголовокТаблицы,
					, , ,
					Документ
				);
			КонецЦикла;
		КонецЦикла;
		
		// Выведем подвал
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
			Документ,
			"Руководитель",
			,
			Документ.Организация,
			Истина
		);
		Руководитель = ДанныеРуководителя.РуководительПредставление;
		
		Если ЗначениеЗаполнено(Руководитель) Тогда
			ОбластьПодвал.Параметры.ПрПодп = "1";
			МассивФИО = СтрРазделить(Руководитель, " ", Ложь);
			ОбластьПодвал.Параметры.ОргПодписантФамилия = СокрЛП(МассивФИО[0]);
			ОбластьПодвал.Параметры.ОргПодписантИмя = ?(МассивФИО.Количество() > 1, МассивФИО[1], "");
			Если МассивФИО.Количество() > 2 Тогда
				Отчество = "";
				Для Инд = 2 По МассивФИО.Количество() - 1 Цикл
					Отчество = Отчество + МассивФИО[Инд];
				КонецЦикла;
				ОбластьПодвал.Параметры.ОргПодписантОтчество = Отчество;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ДатаПодписи = Формат(Документ.Дата, "ДЛФ=D");
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

Функция ЭтоПрослеживаемыйТовар(Строка)
	
	Возврат ЗначениеЗаполнено(Строка.ГТД)
			И Строка.ГТД.РНПТ
			И (ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
				ИЛИ ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили"))
			И Строка.Номенклатура.Прослеживаемый;
	
КонецФункции

#КонецОбласти

#КонецЕсли
