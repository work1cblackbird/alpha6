// Модуль документа "Уведомление о перемещении прослеживаемых товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.Новый;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.Новый;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность видов введенной номенклатуры
	БлокироватьВидыНоменклатуры = ПолучитьСоответствиеЗапрещенныхВидовНоменклатуры();
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		ЭтоРеализацияАвтомобилей =
			(ТипЗнч(СтрокаТоваров.СопроводительныйДокумент) = Тип("ДокументСсылка.РеализацияАвтомобилей"));
		
		ЭтоНоменклатура = ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура");
		
		Если ЭтоРеализацияАвтомобилей И ЭтоНоменклатура ИЛИ НЕ ЭтоРеализацияАвтомобилей И НЕ ЭтоНоменклатура Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары",
				СтрокаТоваров.НомерСтроки,
				"Номенклатура"
			);
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Указанный тип товара не соответствует первичному документу.'"),
				ЭтотОбъект,
				ПутьКТабличнойЧасти
			);
			
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ СтрокаТоваров.Номенклатура.Прослеживаемый Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары",
				СтрокаТоваров.НомерСтроки,
				"Номенклатура"
			);
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Указанная номенклатура не является прослеживаемым товаром.'"),
				ЭтотОбъект,
				ПутьКТабличнойЧасти
			);
			
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ЭтоНоменклатура Тогда
			Продолжить;
		КонецЕсли;
		
		Если БлокироватьВидыНоменклатуры[СтрокаТоваров.Номенклатура.ВидНоменклатуры] <> Неопределено Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары",
				СтрокаТоваров.НомерСтроки,
				"Номенклатура"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = ' В таблицу нельзя вводить номенклатуру вида %1.'"),
					СокрЛП(СтрокаТоваров.Номенклатура.ВидНоменклатуры)
				),	
				ЭтотОбъект, 
				ПутьКТабличнойЧасти,				
			);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Реализация товаров".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ВалютаДокументаПриИзменении(ЭтотОбъект);
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ТипЦен,ВалютаДокумента"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Контрагенты.Очистить();
	
	Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Реализация товаров".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ВалютаДокументаПриИзменении(ЭтотОбъект);
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ТипЦен,ВалютаДокумента"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Контрагенты.Очистить();
	
	Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Возвращает соответствие в котором перечислены виды номенклатуры, которые нельзя вводить
// в таблицу товаров. Если таких нет, то возвращает неопределено
//
// Возвращаемое значение:
//  Результат - соответствие.
//
Функция ПолучитьСоответствиеЗапрещенныхВидовНоменклатуры() Экспорт
	
	Результат = Новый Соответствие();
	Результат.Вставить(Перечисления.ВидыНоменклатуры.Услуга, 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли




