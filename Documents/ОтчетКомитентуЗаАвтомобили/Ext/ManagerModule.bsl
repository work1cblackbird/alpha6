// Модуль менеджера документа "Отчет комитенту за автомобили"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Автомобили.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

Функция ДокументПоступленияАвтомобиля(Объект, Автомобиль)
	
	Если Объект.Ссылка.Пустая() Тогда
		НаМомент = КонецДня(Объект.Дата);
	Иначе
		НаМомент = Новый Граница(Объект.Дата, ВидГраницы.Исключая);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РеализованныеАвтомобилиОстатки.ДокументПередачи КАК ДокументПоступления
	|ИЗ
	|	РегистрНакопления.РеализованныеАвтомобили.Остатки(
	|			&НаМомент,
	|			Автомобиль = &Автомобиль
	|				И Контрагент = &Контрагент
	|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов) КАК РеализованныеАвтомобилиОстатки");
	Запрос.УстановитьПараметр("НаМомент", НаМомент);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].ДокументПоступления;
	
КонецФункции

Функция СуммовыеПоказателиРеализованогоАвтомобиля(Автомобиль, ДокументПередачи)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеализованныеАвтомобилиОстатки.СуммаРеглОстаток КАК Сумма,
	|	РеализованныеАвтомобилиОстатки.СуммаУпрОстаток КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.РеализованныеАвтомобили.Остатки(,
	|			ДокументПередачи = &ДокументПередачи
	|			И Автомобиль = &Автомобиль) КАК РеализованныеАвтомобилиОстатки");
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	РезультатЗапроса = Запрос.Выполнить();
	
	Показатели = Новый Структура("Сумма,СуммаУпр");
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Показатели, Выборка);
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

// Выполняет перенос автомобилей из источника в табличную часть документа.
//
// Параметры:
//  РезультатЗапросаПоАвтомобилям - РезультатЗапроса - Источник заполнения.
//  Объект - ДокументОбъект.ОтчетКомитентуЗаАвтомобили, ДанныеФормыСтруктура - Заполняемый документ.
//	ИспользоватьСтавкуНДСПродажи - Булево - Признак использования ставки НДС, по которой продан автомобиль. 
//											При значении Истина поле со ставкой должно быть в параметре РезультатЗапросаПоАвтомобилям.
//
Процедура ДобавитьАвтомобилиВТабличнуюЧасть(РезультатЗапросаПоАвтомобилям, Объект, ИспользоватьСтавкуНДСПродажи = Ложь) Экспорт
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Выборка = РезультатЗапросаПоАвтомобилям.Выбрать();
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Автомобиль,ДокументПоступления");
		ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
		Если Объект.ВалютаДокумента = ВалютаРегл Тогда
			
			НоваяСтрока.СуммаВсего = Выборка.Сумма;
			
		Иначе
			
			НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа
				.ПересчетПоВалюте(Выборка.СуммаУпр, ВалютаУпр, Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
			
		КонецЕсли;
		
		Если ИспользоватьСтавкуНДСПродажи Тогда
			НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
		КонецЕсли;	
		
		АвтомобилиСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть реализоваными автомобилями поступивщими от указаного контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент.
//  Договор - СправочникСсылка.ДоговораВзаиморасчетов - Договор контрагента.
//  Объект - ДокументОбъект.ОтчетКомитентуЗаАвтомобили, ДанныеФормыСтруктура - Заполняемый документ.
//
Процедура ЗаполнитьАвтомобилямиПоКонтрагентуИДоговору(Контрагент, Договор, Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализованныеАвтомобилиОстатки.Автомобиль КАК Автомобиль,
	|	РеализованныеАвтомобилиОстатки.ДокументПередачи КАК ДокументПоступления,
	|	РеализованныеАвтомобилиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	РеализованныеАвтомобилиОстатки.СуммаРеглОстаток КАК Сумма
	|ПОМЕСТИТЬ ОстаткиАвтомобилей
	|ИЗ
	|	РегистрНакопления.РеализованныеАвтомобили.Остатки(
	|			&Момент,
	|			Контрагент = &Контрагент
	|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов) КАК РеализованныеАвтомобилиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.ДокументПоступления КАК ДокументПоступления,
	|	ОстаткиАвтомобилей.СуммаУпр КАК СуммаУпр,
	|	ОстаткиАвтомобилей.Сумма КАК Сумма,
	|	ЕСТЬNULL(ПродажиАвтомобилейОбороты.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС
	|ИЗ
	|	ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиАвтомобилей.Обороты(
	|				,
	|				&Момент,
	|				,
	|				Автомобиль В
	|					(ВЫБРАТЬ
	|						ОстаткиАвтомобилей.Автомобиль КАК Автомобиль
	|					ИЗ
	|						ОстаткиАвтомобилей КАК ОстаткиАвтомобилей)) КАК ПродажиАвтомобилейОбороты
	|		ПО ОстаткиАвтомобилей.Автомобиль = ПродажиАвтомобилейОбороты.Автомобиль";
	МоментВремени = ?(ЗначениеЗаполнено(Объект.Дата),
						Новый Граница(Новый МоментВремени(Объект.Дата), ВидГраницы.Исключая),
						Новый Граница(Новый МоментВремени(ТекущаяДатаСеанса()), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Договор);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДобавитьАвтомобилиВТабличнуюЧасть(РезультатЗапроса, Объект, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборПостроителя(Отбор, Поле, Знач Значение)
	
	ЭтоМассив = ТипЗнч(Значение) = Тип("Массив");
	
	ЭлементОтбора = Отбор.Добавить(Поле);
	ЭлементОтбора.ВидСравнения = ?(ЭтоМассив, ВидСравнения.ВСписке, ВидСравнения.Равно);
	
	Если ЭтоМассив Тогда
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Значение);
		Значение = Список;
	КонецЕсли;
	
	ЭлементОтбора.Значение = Значение;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

// Заполняет индикаторы "Сумма продажи" и "Сумма поступления".
//
// Параметры:
//  Объект - ДокументОбъект.ОтчетКомитентуЗаАвтомобили, ДанныеФормыСтруктура - Заполняемый документ.
//  Строка - ЭлементДанныеФормыКоллекция - Указывается если необходимо заполнить только в одной строке.
//
Процедура ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект, Строка=Неопределено) Экспорт
	
	Если НЕ ЕстьРеквизит(Объект, "СуммаПоступления", "Автомобили")
		ИЛИ НЕ ЕстьРеквизит(Объект, "СуммаПродажи", "Автомобили") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст =
	"ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.Партия КАК ДокументПоступления,
	|	ОстаткиАвтомобилей.Сумма КАК Сумма,
	|	ОстаткиАвтомобилей.СуммаУпр КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|{ГДЕ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.Партия КАК ДокументПоступления}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализованныеАвтомобилиОстатки.Автомобиль КАК Автомобиль,
	|	РеализованныеАвтомобилиОстатки.ДокументПередачи КАК ДокументПоступления,
	|	РеализованныеАвтомобилиОстатки.СуммаПродажиРеглОстаток КАК Сумма,
	|	РеализованныеАвтомобилиОстатки.СуммаПродажиОстаток КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.РеализованныеАвтомобили.Остатки(&Момент, {(Автомобиль) КАК Автомобиль, (ДокументПередачи) КАК ДокументПоступления}) КАК РеализованныеАвтомобилиОстатки";
	Построитель.ЗаполнитьНастройки();
	Построитель.Параметры.Вставить(
		"Момент",
		?(Объект.Ссылка.Пустая(), Неопределено, Новый Граница(Объект.Ссылка.МоментВремени(), ВидГраницы.Исключая)));
	
	Если Строка <> Неопределено Тогда
		
		ДобавитьОтборПостроителя(Построитель.Отбор, "Автомобиль", Строка.Автомобиль);
		ДобавитьОтборПостроителя(Построитель.Отбор, "ДокументПоступления", Строка.ДокументПоступления);
		
	Иначе
		
		ТаблицаДокумента = Объект.Автомобили.Выгрузить();
		ДобавитьОтборПостроителя(Построитель.Отбор, "Автомобиль", ТаблицаДокумента.ВыгрузитьКолонку("Автомобиль"));
		ДобавитьОтборПостроителя(Построитель.Отбор, "ДокументПоступления", ТаблицаДокумента.ВыгрузитьКолонку("ДокументПоступления"));
		
	КонецЕсли;
	
	Запрос = Построитель.ПолучитьЗапрос();
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоступление = РезультатыЗапроса[0].Выбрать();
	ВыборкаПродажа = РезультатыЗапроса[1].Выбрать();
	
	ДляОбхода = ?(Строка <> Неопределено, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка), Объект.Автомобили);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВВалютеРегл = Объект.ВалютаДокумента = ВалютаРегл;
	
	Для Каждого Элемент Из ДляОбхода Цикл
		
		Отбор = Новый Структура("Автомобиль,ДокументПоступления");
		ЗаполнитьЗначенияСвойств(Отбор, Элемент);
		
		Если ВыборкаПоступление.НайтиСледующий(Отбор) Тогда
			
			Если ВВалютеРегл Тогда
				
				Элемент.СуммаПоступления = ВыборкаПоступление.Сумма;
				
			Иначе
				
				Элемент.СуммаПоступления = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ВыборкаПоступление.СуммаУпр,
					ВалютаУпр,
					Объект.КурсВалютыУпр,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента);
				
			КонецЕсли;
			
		Иначе
			
			Элемент.СуммаПоступления = 0;
			
		КонецЕсли;
		
		ВыборкаПоступление.Сбросить();
		
		Если ВыборкаПродажа.НайтиСледующий(Отбор) Тогда
			
			Если ВВалютеРегл Тогда
				
				Элемент.СуммаПродажи = ВыборкаПродажа.Сумма;
				
			Иначе
				
				Элемент.СуммаПродажи = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ВыборкаПродажа.СуммаУпр,
					ВалютаУпр,
					Объект.КурсВалютыУпр,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента);
				
			КонецЕсли;
			
		Иначе
			
			Элемент.СуммаПродажи = 0;
			
		КонецЕсли;
		
		ВыборкаПродажа.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СтавкаНДСВознаграждения");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");

	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы автомобили
	УникальныеАвтомобили = Новый Массив;
	УникальныеАвтомобили.Добавить("Автомобиль");
	УникальныеАвтомобили.Добавить("ДокументПоступления");

	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	//
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДокументПоступления", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("Автомобили", КонтролируемыеРеквизитыТЧ);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов)
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ПодразделениеКомпании)
		И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "КомиссияОтчетНаОснованииПродаж") Тогда
		
		ПараметрыДействия.Вставить(
			"ОсвобожденОтНДС",
			ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсвобожденОтНДС
		);		
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	
	Если ТребуетсяУстановкаЦен Тогда
		
		Для Каждого Строка Из Объект.Автомобили Цикл
			
			АвтомобилиДокументПоступленияПриИзменении(Объект, Строка, ПараметрыДействия);
			
		КонецЦикла;
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СтарыйКурс", 0);
		
		Для Каждого Строка Из Объект.Автомобили Цикл
			
			Строка.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоКурсу(Строка.СуммаВсего, СтарыйКурс, Объект.КурсДокумента);
			АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
			
		КонецЦикла;
		
		ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект);
		
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов)
		И (НЕ Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, Объект.ДоговорВзаиморасчетов)) Тогда
		
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		
	КонецЕсли;
	
	// проверим вид договора
	Если Объект.ДоговорВзаиморасчетов.Пустая() Тогда
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Если Объект.ДоговорВзаиморасчетов.ВидДоговора <> Перечисления.ВидыДоговоров.СКомитентом
			И Объект.ДоговорВзаиморасчетов.ВидДоговора <> Перечисления.ВидыДоговоров.Прочее Тогда
			
			Объект.ДоговорВзаиморасчетов=Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.ДоговорВзаиморасчетов.Пустая()
		И Объект.ДоговорВзаиморасчетов.ВидДоговора=Перечисления.ВидыДоговоров.СКомитентом Тогда
		
		Для Каждого Строка Из Объект.Автомобили Цикл
			
			Документы.ОтчетКомитентуЗаАвтомобили.АвтомобилиРасчитатьВознаграждение(Объект, Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(Объект, Строка, ПараметрыДействия);
	Строка.ДокументПоступления = ДокументПоступленияАвтомобиля(Объект, Строка.Автомобиль);
	АвтомобилиДокументПоступленияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ поступления"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиДокументПоступленияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект, Строка);
	
	Если НЕ ЗначениеЗаполнено(Строка.ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Суммы = СуммовыеПоказателиРеализованогоАвтомобиля(Строка.Автомобиль, Строка.ДокументПоступления);
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если Объект.ВалютаДокумента = ВалютаРегл Тогда
		
		Строка.СуммаВсего = Суммы.Сумма;
		
	Иначе
		
		Строка.СуммаВсего = РаботаСКурсамиВалютПлатформа
			.ПересчетПоВалюте(Суммы.СуммаУпр, ВалютаУпр, Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
		
	КонецЕсли;
	
	АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	АвтомобилиРасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	АвтомобилиРасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	АвтомобилиРасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	АвтомобилиРасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Вознаграждение"
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиВознаграждениеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтавкаНДСВознаграждения, "Ставка");
	Если Ставка = Неопределено Тогда
		
		Ставка = 0;
		
	КонецЕсли;
	
	Строка.СуммаНДСВознаграждения = Строка.Вознаграждение * Ставка / (100 + Ставка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС вознаграждения"
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСВознагражденияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтавкаНДСВознаграждения, "Ставка");
	Если Ставка = Неопределено Тогда
		
		Ставка = 0;
		
	КонецЕсли;
	
	Строка.СуммаНДСВознаграждения = Строка.Вознаграждение * Ставка / (100 + Ставка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Расчитать вознаграждение"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиРасчитатьВознаграждение(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.ДоговорВзаиморасчетов.Пустая() Тогда
		
		Строка.Вознаграждение = 0;
		Возврат;
		
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорВзаиморасчетов, "ТипСуммыКомиссии,ПроцентКомиссионногоВознаграждения,СуммаКомиссионногоВознаграждения");
	
	Если ДанныеДоговора.ТипСуммыКомиссии=0 Тогда
		
		Строка.Вознаграждение = (Строка.СуммаВсего * Объект.ДоговорВзаиморасчетов.ПроцентКомиссионногоВознаграждения) / 100;
		
	ИначеЕсли Объект.ДоговорВзаиморасчетов.ТипСуммыКомиссии = 1 Тогда
		
		Строка.Вознаграждение = Мин(ДанныеДоговора.СуммаКомиссионногоВознаграждения, Строка.СуммаВсего);
		
	КонецЕсли;
	
	Если Строка.СтавкаНДСВознаграждения.Пустая() Тогда
		
		Строка.СтавкаНДСВознаграждения = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
		АвтомобилиСтавкаНДСВознагражденияПриИзменении(Объект, Строка, ПараметрыДействия);
		Возврат;
		
	КонецЕсли;
	
	АвтомобилиВознаграждениеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", Документы.ОтчетКомитентуЗаАвтомобили);
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;

	ВыборДоговора 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговора.Обязательный 		= Истина;
	ВыборДоговора.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать договор взаиморасчетов.'");
	ВыборДоговора.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Новый Структура("ХозОперация", "ХозОперация")); 
		
	Команда 						= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 				= "АвтомобилиПодменюЗаполнения";
	Команда.Представление			= НСтр("ru = 'Заполнить на основании продаж'");
	Команда.Идентификатор			= "АвтомобилиЗаполнитьНаОснованииПродаж";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговора);
	//	
	ВыборВводаОстатков 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборВводаОстатков.ВыборСсылки 		= "Документ.ВводОстатковАвтомобилей.ФормаСписка";
	ВыборВводаОстатков.Обязательный 	= Истина;
	ВыборВводаОстатков.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать документ поставки.'");

	Отбор 								= Новый Структура("ДоговорКомитента", "ДоговорВзаиморасчетов");
	ВыборВводаОстатков.Параметры		= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить на основании документа ввода остатков автомобилей'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоДокументуПоставки";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ВыбДок", ВыборВводаОстатков);
	//	
	ВыборПоступления 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПоступления.ВыборСсылки 		= "Документ.ПоступлениеАвтомобилей.ФормаСписка";
	ВыборПоступления.Обязательный 		= Истина;
	ВыборПоступления.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать документ поставки.'");

	Отбор = Новый Структура("ДоговорКомитента,ХозОперация", "ДоговорВзаиморасчетов", Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия);
	ВыборПоступления.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить на основании документа поступления автомобилей'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоДокументуПоставки";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ВыбДок", ВыборПоступления);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьНаОснованииПродаж.Видимость",                            Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьНаОснованииПродаж.Доступность",                          Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуВводаОстатков.Видимость",                     Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуВводаОстатков.Доступность",                   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьЗаполнитьПоДокументуПоступлениеАвтомобилей.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьЗаполнитьПоДокументуПоступлениеАвтомобилей.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

Функция АвтомобилиЗаполнитьНаОснованииПродаж(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ЗаполнитьАвтомобилямиПоКонтрагентуИДоговору(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "Владелец"),
		Объект.ДоговорВзаиморасчетов,
		Объект);
	
КонецФункции

// Обработчик заполнения документа на основании документа
//
Функция АвтомобилиЗаполнитьПоДокументуПоставки(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не выбран договор.'"), Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.ВыбДок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	РеализованныеАвтомобилиОстатки.Автомобиль КАК Автомобиль,
	|	РеализованныеАвтомобилиОстатки.ДокументПередачи КАК ДокументПоступления,
	|	РеализованныеАвтомобилиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	РеализованныеАвтомобилиОстатки.СуммаРеглОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РеализованныеАвтомобили.Остатки(
	|			&Момент,
	|			ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|				И ДокументПередачи = &ДокументПоступления) КАК РеализованныеАвтомобилиОстатки");
	Запрос.УстановитьПараметр("ДокументПоступления", ПараметрыЗаполнения.ВыбДок);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Момент", ?(Ссылка.Пустая(), Неопределено, Ссылка.МоментВремени()));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДобавитьАвтомобилиВТабличнуюЧасть(РезультатЗапроса, Объект);
	
КонецФункции // ТоварыЗаполнитьПоДокументуПоставки()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ОтчетКомитентуЗаАвтомобили",
		"ОтчетКомитентуЗаАвтомобили",
		НСтр("ru = 'Отчет комитенту за автомобили'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетКомитентуЗаАвтомобили") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ОтчетКомитентуЗаАвтомобили",
															"Отчет комитенту за автомобили",
															ПечатьОтчетКомитентуЗаАвтомобили(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ОтчетКомитенту"
// Возвращает сформированный табличный документ:
Функция ПечатьОтчетКомитентуЗаАвтомобили(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ, "Проведен,ПодразделениеКомпании,Контрагент,Организация,Дата,ВалютаДокумента,КурсВалютыУпр,КурсДокумента");
		
		Если НЕ ДанныеДокумента.Проведен Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Печать непроведенного документа невозможна.'"));
			Возврат Неопределено;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ОтчетКомитентуЗаАвтомобили.ПФ_MXL_ОтчетКомитентуЗаАвтомобили");
		
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеКомитента = УправлениеПечатьюПлатформа
			.ПолучитьПредставлениеСправочника(ДанныеДокумента.Контрагент, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", ДанныеДокумента.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеКомиссионера = УправлениеПечатьюПлатформа
			.ПолучитьПредставлениеСправочника(ДанныеДокумента.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ДанныеДокумента.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СуммаИтог = 0;
		Ном = 1;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаВсего", ДанныеДокумента.ВалютаДокумента, 0);
		
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		КурсВалУпр = ДанныеДокумента.КурсВалютыУпр;
		
		Если НЕ ЗначениеЗаполнено(КурсВалУпр) Тогда
			
			КурсВалУпр = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ДатаДокумента).Курс;
			
		КонецЕсли;
		
		ВалютаРегламентированногоУчетаОрганизаций = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		ДокументВРеглВалюте = ДанныеДокумента.ВалютаДокумента = ВалютаРегламентированногоУчетаОрганизаций;
		ДокументВУпрВалюте = ДанныеДокумента.ВалютаДокумента = ВалютаУпр;
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализованныеАвтомобили.Автомобиль КАК Автомобиль,
		|	РеализованныеАвтомобили.СуммаУпр КАК СуммаУпр,
		|	РеализованныеАвтомобили.СуммаРегл КАК СуммаРегл,
		|	РеализованныеАвтомобили.СуммаПродажи КАК СуммаПродажи,
		|	РеализованныеАвтомобили.СуммаПродажиРегл КАК СуммаПродажиРегл
		|ПОМЕСТИТЬ ДвиженияДокумента
		|ИЗ
		|	РегистрНакопления.РеализованныеАвтомобили КАК РеализованныеАвтомобили
		|ГДЕ
		|	РеализованныеАвтомобили.Регистратор = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Автомобиль КАК Автомобиль,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Автомобиль.VIN КАК АвтомобильVIN
		|ПОМЕСТИТЬ АвтомобилиДокумента
		|ИЗ
		|	Документ.ОтчетКомитентуЗаАвтомобили.Автомобили КАК ОтчетКомитентуЗаАвтомобилиАвтомобили
		|ГДЕ
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвтомобилиДокумента.Автомобиль КАК Автомобиль,
		|	АвтомобилиДокумента.АвтомобильVIN КАК VIN,
		|	1 КАК Количество,
		|	ЕСТЬNULL(ДвиженияДокумента.СуммаУпр, 0) КАК СуммаПоступления,
		|	ЕСТЬNULL(ДвиженияДокумента.СуммаРегл, 0) КАК СуммаПоступленияРегл,
		|	ЕСТЬNULL(ДвиженияДокумента.СуммаПродажи, 0) КАК СуммаВсего,
		|	ЕСТЬNULL(ДвиженияДокумента.СуммаПродажиРегл, 0) КАК СуммаВсегоРегл
		|ИЗ
		|	АвтомобилиДокумента КАК АвтомобилиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияДокумента КАК ДвиженияДокумента
		|		ПО АвтомобилиДокумента.Автомобиль = ДвиженияДокумента.Автомобиль");
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СуммаПоступления = Выборка.СуммаПоступления;
			СуммаВсего = Выборка.СуммаВсего;
			
			Если ДокументВРеглВалюте Тогда
				
				СуммаПоступления = Выборка.СуммаПоступленияРегл;
				СуммаВсего = Выборка.СуммаВсегоРегл;
				
			ИначеЕсли НЕ ДокументВУпрВалюте Тогда
				
				СуммаПоступления = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Выборка.СуммаПоступления, ВалютаУпр, КурсВалУпр, ДанныеДокумента.ВалютаДокумента, ДанныеДокумента.КурсДокумента);
				СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Выборка.СуммаВсего, ВалютаУпр, КурсВалУпр, ДанныеДокумента.ВалютаДокумента, ДанныеДокумента.КурсДокумента);
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.НомерСтроки = Ном;
			ОбластьСтрока.Параметры.Автомобиль = Выборка.Автомобиль;
			ОбластьСтрока.Параметры.АвтомобильНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Выборка.Автомобиль);
			ОбластьСтрока.Параметры.VIN = Выборка.VIN;
			ОбластьСтрока.Параметры.СуммаПоступления = Формат(СуммаПоступления, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
			СуммаИтог = СуммаИтог + СуммаВсего;
			
			ОбластиПодвала = Неопределено;
			
			Если Ном = Выборка.Количество() Тогда
				
				ОбластиПодвала = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбластьПодвал);
				
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
				ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице,
				НомерСтраницы, СтруктураИтоговПоСтранице, Документ, ОбластиПодвала);
			
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", ДанныеДокумента.ВалютаДокумента, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				
			КонецЕсли;
			
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(
				Новый Структура("СуммаПоступления,СуммаВсего", СуммаПоступления, СуммаВсего), СтруктураИтоговПоСтранице);
			Ном = Ном + 1;
			
		КонецЦикла;
		
		ОбластьПодвал.Параметры.ВалютаДокумента = ДанныеДокумента.ВалютаДокумента;
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаИтог, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = "Всего наименований " + Выборка.Количество()
			+ " на сумму " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаИтог, ДанныеДокумента.ВалютаДокумента);
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуЗаАвтомобили_ОтчетКомитентуЗаАвтомобили";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Взаимозачет);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПлатежноеПоручение);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ОтчетКомитентуЗаАвтомобили);

КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗакрытиеСмены - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Автомобили");
		
КонецФункции

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОтчетКомиссионера - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Автомобили");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
		|	ОтчетКомитентуЗаАвтомобили.Организация КАК Организация,
		|	ОтчетКомитентуЗаАвтомобили.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ОтчетКомитентуЗаАвтомобили.Ссылка КАК Ссылка,
		|	ОтчетКомитентуЗаАвтомобили.Дата КАК Дата,
		|	ОтчетКомитентуЗаАвтомобили.ХозОперация КАК ХозОперация,
		|	ОтчетКомитентуЗаАвтомобили.ДокументОснование КАК ДокументОснование,
		|	ОтчетКомитентуЗаАвтомобили.Контрагент КАК Контрагент,
		|	ОтчетКомитентуЗаАвтомобили.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ОтчетКомитентуЗаАвтомобили.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
		|	ОтчетКомитентуЗаАвтомобили.Ссылка КАК Сделка,
		|	ОтчетКомитентуЗаАвтомобили.СуммаДокумента КАК Сумма,
		|	ОтчетКомитентуЗаАвтомобили.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ОтчетКомитентуЗаАвтомобили.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
		|	ОтчетКомитентуЗаАвтомобили.ВалютаДокумента КАК ВалютаДокумента,
		|	ОтчетКомитентуЗаАвтомобили.КурсДокумента КАК КурсДокумента,
		|	ОтчетКомитентуЗаАвтомобили.КурсВалютыУпр КАК КурсВалютыУпр,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
		|	&ВалютаРегл КАК ВалютаРегл,
		|	&ВалютаУпр КАК ВалютаУпр
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ОтчетКомитентуЗаАвтомобили КАК ОтчетКомитентуЗаАвтомобили
		|ГДЕ
		|	ОтчетКомитентуЗаАвтомобили.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.ХозОперация КАК ХозОперация,
		|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
		|	ДанныеДокумента.Сделка КАК Сделка,
		|	ДанныеДокумента.Сумма КАК Сумма,
		|	ДанныеДокумента.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
		|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
		|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
		|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
		|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
		|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
		|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
		|	КОНЕЦ КАК КурсВалютыУпр,
		|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
		|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
		|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
		|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
		|ПОМЕСТИТЬ Задолженность
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
		|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
		|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
		|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма - Задолженность.СуммаВознаграждения КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ОтчетКомитентуЗаАвтомобилиАвтомобили.СуммаВсего - ОтчетКомитентуЗаАвтомобилиАвтомобили.Вознаграждение), 0) КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуЗаАвтомобили.Автомобили КАК ОтчетКомитентуЗаАвтомобилиАвтомобили
	|ГДЕ
	|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДвиженияДокумента.ДляПроведения.Ссылка);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	РаспределениеОплаты = ПакетЗапроса[1].Выбрать();
	
	Если Не ДанныеОбОплате.Следующий()
		ИЛИ Не РаспределениеОплаты.Следующий()
		ИЛИ РаспределениеОплаты.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	НоваяЗапись = РасчетыСКонтрагентами.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОбОплате);
	НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяЗапись.Период = ДанныеОбОплате.Дата;
	НоваяЗапись.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
	НоваяЗапись.ДокументРасчетов = ДанныеОбОплате.Сделка;
	
	НоваяЗапись.Сумма = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			РаспределениеОплаты.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаДоговора,
			ДанныеОбОплате.КурсВалютыВзаиморасчетов),
		2);
	НоваяЗапись.СуммаУпр = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			РаспределениеОплаты.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаУпр,
			ДанныеОбОплате.КурсВалютыУпр),
		2);
	НоваяЗапись.СуммаБаз = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			РаспределениеОплаты.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаРегл,
			ДанныеОбОплате.КурсВалютыРегл),
		2);
	
	НоваяЗапись.Курс = ДанныеОбОплате.КурсДокумента;
	НоваяЗапись.ВалютаПлатежа = ДанныеОбОплате.ВалютаДокумента;
	НоваяЗапись.СпособЗачета = ДанныеОбОплате.СпособЗачетаАвансов;
	НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
	НоваяЗапись.Активность = Истина;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли