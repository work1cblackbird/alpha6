///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Назначение скидок и наценок по прайс-листу"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьПараметрыВыбораЭлементовФормы();
		УстановитьОтборыТаблицПрайсЛиста();
		ОбновитьСтарыеПроцентыПрайсЛиста();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПрайсЛисты");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПрайсЛистыУточнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьОтборыТаблицПрайсЛиста();
	ОбновитьСтарыеПроцентыПрайсЛиста();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("НазначениеСкидокНаценокПоПрайсЛисту", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьОтборыТаблицПрайсЛиста();
	ОбновитьСтарыеПроцентыПрайсЛиста();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТребуетсяУстанокаДатыНачала", ЭтотОбъект, "ТребуетсяУстанокаДатыНачала");
	ТекстВопроса = НСтр("ru = 'Дата документа изменена. Сменить дату начала действия скидок/наценок?'");
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.НазначениеСкидокНаценокПоПрайсЛисту.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	ОбновитьСтарыеПроцентыПрайсЛиста();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаНачалаДействияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ОбновитьСтарыеПроцентыПрайсЛиста();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаНачалаДействияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура БазовыйТипЦенПриИзменении(Элемент)
	
	ОбновитьСтарыеПроцентыПрайсЛиста();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.НазначениеСкидокНаценокПоПрайсЛисту.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	УстановитьОтборыТаблицПрайсЛиста();
	ОбновитьСтарыеПроцентыПрайсЛиста();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ПодразделениеКомпанииПолучательПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.НазначениеСкидокНаценокПоПрайсЛисту.ПодразделениеКомпанииПолучательПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодразделениеКомпанииПолучательПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПодразделениеКомпанииПолучательПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрайсЛистыУточнение

&НаКлиенте
Процедура ПрайсЛистыУточнениеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Отказ Или (Элементы.ПрайсЛисты.ТекущиеДанные = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистыУточнениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ЭтоУточнение = Истина;
		Элемент.ТекущиеДанные.ПрайсЛист    = Элементы.ПрайсЛисты.ТекущиеДанные.ПрайсЛист;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистыПриАктивизацииСтроки(Элемент)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ЭтоУточнение", Истина);
	
	Если Элементы.ПрайсЛисты.ТекущиеДанные <> Неопределено Тогда
		ОтборСтрок.Вставить("ПрайсЛист", Элементы.ПрайсЛисты.ТекущиеДанные.ПрайсЛист);
		
		Элементы.ПрайсЛистыУточнениеТегПозиции.СписокВыбора.ЗагрузитьЗначения(
			ПрайсЛистыКонтрагентовВызовСервера.ТегиПрайсЛиста(Элементы.ПрайсЛисты.ТекущиеДанные.ПрайсЛист));
	Иначе
		ОтборСтрок.Вставить("ПрайсЛист", Неопределено);
	КонецЕсли;
	
	Элементы.ПрайсЛистыУточнение.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
	Элементы.ПрайсЛистыУточнениеКоманднаяПанель.Доступность = (Элементы.ПрайсЛисты.ТекущиеДанные <> Неопределено);
	Элементы.ПрайсЛистыУточнениеКонтекстноеМеню.Доступность = (Элементы.ПрайсЛисты.ТекущиеДанные <> Неопределено);
	
КонецПроцедуры

#Область ОбработчикиСобытийТабличнойЧастиПрайсЛисты

&НаСервере
Процедура ПрайсЛистыПрайсЛистПриИзмененииНаСервере()
	
	ОбновитьСтарыеПроцентыПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистыПрайсЛистПриИзменении(Элемент)
	
	Перем ПрайсЛистСтарый;
	// обновим прайс-лист в уточнающих строках
	Если Элементы.ПрайсЛистыУточнение.ОтборСтрок.Свойство("ПрайсЛист", ПрайсЛистСтарый) Тогда
		Условие = Новый Структура("ПрайсЛист", ПрайсЛистСтарый);
		НайденныеСтроки = Объект.ПрайсЛисты.НайтиСтроки(Условие);
		Для Каждого Уточнение Из НайденныеСтроки Цикл
			Уточнение.ПрайсЛист = Элементы.ПрайсЛисты.ТекущиеДанные.ПрайсЛист;
		КонецЦикла;
	КонецЕсли;
	
	ПрайсЛистыПрайсЛистПриИзмененииНаСервере();
	// обнновим отбор строк
	ПрайсЛистыПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыйПроцентСтроки(Идентификатор)
	
	ТекущиеДанные = Объект.ПрайсЛисты.НайтиПоИдентификатору(Идентификатор);
	
	Запрос = Новый Запрос;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаСкидокПрайсЛиста Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.Скидка КАК СтарыйПроцент
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
		|			&НаДату,
		|			ТегПозиции = &ТегПозиции
		|				И ПрайсЛист = &ПрайсЛист
		|				И Производитель = &Производитель) КАК ПрайсЛистыКонтрагентовСкидкиСрезПоследних";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрайсЛистыКонтрагентовНаценкиСрезПоследних.Наценка КАК СтарыйПроцент
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
		|			&НаДату,
		|			ТегПозиции = &ТегПозиции
		|				И ПрайсЛист = &ПрайсЛист
		|				И Производитель = &Производитель
		|				И ТипЦен = &ТипЦен) КАК ПрайсЛистыКонтрагентовНаценкиСрезПоследних";
		
		Запрос.УстановитьПараметр("ТипЦен", Объект.БазовыйТипЦен);
	КонецЕсли;
	
	НаДату = ?(ЗначениеЗаполнено(Объект.ДатаНачалаДействия), Объект.ДатаНачалаДействия, ТекущаяДатаСеанса());
	
	Запрос.УстановитьПараметр("НаДату"        , НаДату);
	Запрос.УстановитьПараметр("ПрайсЛист"     , ТекущиеДанные.ПрайсЛист);
	Запрос.УстановитьПараметр("ТегПозиции"    , ТекущиеДанные.ТегПозиции);
	Запрос.УстановитьПараметр("Производитель" , ТекущиеДанные.Производитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекущиеДанные.СтарыйПроцент = РезультатЗапроса.Выгрузить()[0].СтарыйПроцент;
	Иначе
		ТекущиеДанные.СтарыйПроцент = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистыУточнениеТегПозицииПриИзменении(Элемент)
	
	ОбновитьСтарыйПроцентСтроки(Элементы.ПрайсЛистыУточнение.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистыУточнениеПроизводительПриИзменении(Элемент)
	
	ОбновитьСтарыйПроцентСтроки(Элементы.ПрайсЛистыУточнение.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьПроцент(Команда)
	
	Действие = ?(
		Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.УстановкаСкидокПрайсЛиста"),
		"скидки",
		"наценки");
	
	ТекстПодсказки = СтрШаблон(НСтр("ru = 'Укажите процент %1'"), Действие);
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ОбработкаОповещенияУстановкаПроцента", ЭтотОбъект), 0, ТекстПодсказки, 6, 2);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТегамиИПроизводителями(Команда)
	
	ЗаполнитьТегамиИПроизводителямиНаСервере(Элементы.ПрайсЛисты.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТегами(Команда)
	
	ЗаполнитьТегамиИПроизводителямиНаСервере(Элементы.ПрайсЛисты.ТекущаяСтрока,, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроизводителями(Команда)
	
	ЗаполнитьТегамиИПроизводителямиНаСервере(Элементы.ПрайсЛисты.ТекущаяСтрока, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТребуетсяУстанокаДатыНачала(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Объект.ДатаНачалаДействия = Объект.Дата;
		ДатаНачалаДействияПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияТребуетсяУстанокаДатыНачала()

// Обработка оповещения об окончании ввода процента скидки/наценки прайс-листа
&НаКлиенте
Процедура ОбработкаОповещенияУстановкаПроцента(Процент, ДополнительныеПараметры) Экспорт
	Если Процент <> Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.ПрайсЛисты Цикл
			ТекСтрока.Процент = Процент;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыеПроцентыПрайсЛиста()
	
	// получим таблицу старых процентов
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаСкидокПрайсЛиста Тогда
		ОбновитьСтарыеПроцентыСкидокПрайсЛиста();
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.УстановкаНаценокПрайсЛиста Тогда
		ОбновитьСтарыеПроцентыНаценокПрайсЛиста();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыеПроцентыСкидокПрайсЛиста()
	
	Если Объект.ПрайсЛисты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Объект.ПрайсЛисты.Выгрузить(, "ПрайсЛист, ТегПозиции, Производитель"));
	Запрос.УстановитьПараметр("НаДату" , ?(ЗначениеЗаполнено(Объект.ДатаНачалаДействия), Объект.ДатаНачалаДействия, ТекущаяДатаСеанса()));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ПрайсЛист КАК ПрайсЛист,
	|	Таблица.ТегПозиции КАК ТегПозиции,
	|	Таблица.Производитель КАК Производитель
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.ПрайсЛист,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.ТегПозиции,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.Производитель,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.Скидка
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
	|			&НаДату,
	|			(ПрайсЛист, ТегПозиции, Производитель) В
	|					(ВЫБРАТЬ
	|						ТаблицаДокумента.ПрайсЛист,
	|						ТаблицаДокумента.ТегПозиции,
	|						ТаблицаДокумента.Производитель
	|					ИЗ
	|						ТаблицаДокумента КАК ТаблицаДокумента)
	|				И НЕ Отменена) КАК ПрайсЛистыКонтрагентовСкидкиСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого Строка Из Объект.ПрайсЛисты Цикл
		Условие = Новый Структура("ПрайсЛист,ТегПозиции,Производитель");
		ЗаполнитьЗначенияСвойств(Условие, Строка);
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Условие) Тогда
			Строка.СтарыйПроцент = Выборка.Скидка;
		Иначе
			Строка.СтарыйПроцент = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыеПроцентыНаценокПрайсЛиста()
	
	Если Объект.ПрайсЛисты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Объект.ПрайсЛисты.Выгрузить(, "ПрайсЛист, ТегПозиции, Производитель"));
	Запрос.УстановитьПараметр("НаДату" , ?(ЗначениеЗаполнено(Объект.ДатаНачалаДействия), Объект.ДатаНачалаДействия, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТипЦен" , Объект.БазовыйТипЦен);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ПрайсЛист КАК ПрайсЛист,
	|	Таблица.ТегПозиции КАК ТегПозиции,
	|	Таблица.Производитель КАК Производитель
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.ПрайсЛист,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.ТегПозиции,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.Производитель,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.Наценка,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.АлгоритмРасчетаЦены,
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.ОкруглятьДо
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
	|			&НаДату,
	|			(ПрайсЛист, ТегПозиции, Производитель) В
	|					(ВЫБРАТЬ
	|						ТаблицаДокумента.ПрайсЛист,
	|						ТаблицаДокумента.ТегПозиции,
	|						ТаблицаДокумента.Производитель
	|					ИЗ
	|						ТаблицаДокумента КАК ТаблицаДокумента)
	|				И НЕ Отменена
	|				И ТипЦен = &ТипЦен) КАК ПрайсЛистыКонтрагентовСкидкиСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого Строка Из Объект.ПрайсЛисты Цикл
		Условие = Новый Структура("ПрайсЛист,ТегПозиции,Производитель");
		ЗаполнитьЗначенияСвойств(Условие, Строка);
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Условие) Тогда
			Строка.СтарыйПроцент = Выборка.Наценка;
		Иначе
			Строка.СтарыйПроцент = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыТаблицПрайсЛиста()
	
	Для Каждого ПрайсЛист Из Объект.ПрайсЛисты Цикл
		ПрайсЛист.ЭтоУточнение = (НЕ ПустаяСтрока(ПрайсЛист.ТегПозиции) ИЛИ ЗначениеЗаполнено(ПрайсЛист.Производитель));
	КонецЦикла;
	
	// установим дотбор на строки прайс-листа
	ОтборСтрок = Новый Структура("ЭтоУточнение", Ложь);
	Элементы.ПрайсЛисты.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
	ОтборСтрок.ЭтоУточнение = Истина;
	ОтборСтрок.Вставить("ПрайсЛист", Справочники.ПрайсЛистыКонтрагентов.ПустаяСсылка());
	Элементы.ПрайсЛистыУточнение.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТегамиИПроизводителямиНаСервере(Идентификатор,
	ЗаполнитьТегами = Истина,
	ЗаполнитьПроизводителями = Истина)
	
	Если НЕ ЗаполнитьТегами И НЕ ЗаполнитьПроизводителями Тогда
		Возврат;
	КонецЕсли;
	
	// Получим теущий прайс-лист
	ТекущийПрайсЛист = Объект.ПрайсЛисты.НайтиПоИдентификатору(Идентификатор).ПрайсЛист;
	
	// почистим записи
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПрайса Из Объект.ПрайсЛисты Цикл
		ЗаполнитьТегамиБулево = ?(ЗаполнитьТегами, НЕ ПустаяСтрока(СтрокаПрайса.ТегПозиции), ПустаяСтрока(СтрокаПрайса.ТегПозиции));
		ЗаполнитьПроизводителямиБулево = ?(ЗаполнитьПроизводителями, НЕ СтрокаПрайса.Производитель.Пустая(), СтрокаПрайса.Производитель.Пустая());
		Если СтрокаПрайса.ПрайсЛист = ТекущийПрайсЛист
			И ЗаполнитьТегамиБулево	И ЗаполнитьПроизводителямиБулево Тогда
			
			УдаляемыеСтроки.Добавить(СтрокаПрайса);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемоеУточнение Из УдаляемыеСтроки Цикл
		Объект.ПрайсЛисты.Удалить(УдаляемоеУточнение);
	КонецЦикла;
	
	ТегиИПроизводители = ПрайсЛистыКонтрагентов.ТегиИПроизвидителиПрайсЛиста(ТекущийПрайсЛист,
		ЗаполнитьТегами, ЗаполнитьПроизводителями);
	
	// Проверим на наличие пустых тегов и производителей строки, т.к. он уже добавлен в таблице "Прайс-листы".
	Если ТегиИПроизводители.Колонки.Найти("ТегПозиции") <> Неопределено
		И ТегиИПроизводители.Колонки.Найти("Производитель") <> Неопределено Тогда
		ПустыеСтроки = ТегиИПроизводители.НайтиСтроки(Новый Структура("ТегПозиции,Производитель", "", Справочники.Производители.ПустаяСсылка()));
		
		Для Каждого ТекущаяСтрока Из ПустыеСтроки Цикл
			ТегиИПроизводители.Удалить(ТекущаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если ТегиИПроизводители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаСкидокПрайсЛиста Тогда
		Результат = РегистрыСведений.ПрайсЛистыКонтрагентовСкидки.ДополнитьСкидкамиПрайЛиста(ТекущийПрайсЛист,
			ТегиИПроизводители);
	Иначе
		Результат = РегистрыСведений.ПрайсЛистыКонтрагентовНаценки.ДополнитьНаценкамиПрайЛиста(ТекущийПрайсЛист,
			Объект.БазовыйТипЦен, Объект.ПодразделениеКомпанииПолучатель, ТегиИПроизводители);
	КонецЕсли;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.ПрайсЛисты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ЭтоУточнение = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ЭтоУстановкаНаценок = (Объект.ХозОперация = Справочники.ХозОперации.УстановкаНаценокПрайсЛиста);
	
	Элементы.БазовыйТипЦен.Видимость              = ЭтоУстановкаНаценок;
	Элементы.ПрайсЛистыСкидка.Видимость           = НЕ ЭтоУстановкаНаценок;
	Элементы.ПрайсЛистыНаценка.Видимость          = ЭтоУстановкаНаценок;
	Элементы.ПрайсЛистыУточнениеСкидка.Видимость  = НЕ ЭтоУстановкаНаценок;
	Элементы.ПрайсЛистыУточнениеНаценка.Видимость = ЭтоУстановкаНаценок;
	
	ЗаголовокСтарогоПроцента = "Старая " + ?(ЭтоУстановкаНаценок, "наценка", "скидка");
	
	Элементы.ПрайсЛистыСтарыйПроцент.Заголовок          = ЗаголовокСтарогоПроцента;
	Элементы.ПрайсЛистыУточнениеСтарыйПроцент.Заголовок = ЗаголовокСтарогоПроцента;
	
	Элементы.ПрайсЛистыАлгоритмРасчетаЦены.Видимость = ЭтоУстановкаНаценок;
	Элементы.ПрайсЛистыОкруглятьДо.Видимость         = ЭтоУстановкаНаценок;
	
	Элементы.ПрайсЛистыУточнениеАлгоритмРасчетаЦены.Видимость = ЭтоУстановкаНаценок;
	Элементы.ПрайсЛистыУточнениеОкруглятьДо.Видимость         = ЭтоУстановкаНаценок;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "АлгоритмРасчетаЦены" Тогда
		СтрокаПрайсЛистов = Объект.ПрайсЛисты.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		СтрокаПрайсЛистов.АлгоритмРасчетаЦены = РезультатОповещения;
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	Если РезультатОповещения <> Неопределено И Тип(РезультатОповещения) = Тип("Структура") И РезультатОповещения.Свойство("ТребуетсяУстанокаДатыНачала") И РезультатОповещения.ТребуетсяУстанокаДатыНачала Тогда
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТребуетсяУстанокаДатыНачала", ЭтотОбъект, "ТребуетсяУстанокаДатыНачала");
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Дата документа изменена. Сменить дату начала действия цен товаров?'");
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения); 
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти