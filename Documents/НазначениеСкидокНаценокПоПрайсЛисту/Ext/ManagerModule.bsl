// Модуль менеджера документа "Назначение скидок и наценок по прайс-листу"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает последнюю действующую наценку для подразделения 
Функция ПолучитьНаценку(ПрайсЛист, Объект, Подразделение = Неопределено)Экспорт 
	Если Подразделение = Неопределено Тогда
		Подразделение = Объект.ПодразделениеКомпанииПолучатель;
	КонецЕсли;
	ДатаКон = ?(ЗначениеЗаполнено(Объект.ДатаНачалаДействия), Объект.ДатаНачалаДействия, ТекущаяДатаСеанса());
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрайсЛистыКонтрагентовНаценкиСрезПоследних.ПодразделениеКомпании КАК Подразделение,
	               |	ПрайсЛистыКонтрагентовНаценкиСрезПоследних.Наценка
	               |ИЗ
	               |	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
	               |			&ДатаКон,
	               |			ТипЦен = &ТипЦен
	               |				И ПрайсЛист = &ПрайсЛист) КАК ПрайсЛистыКонтрагентовНаценкиСрезПоследних";
				   
	Запрос.УстановитьПараметр("ТипЦен", Объект.БазовыйТипЦен);
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Если Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(ДатаКон, Объект.Ссылка), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(ДатаКон, Объект.Ссылка), ВидГраницы.Исключая));
	КонецЕсли;
		
	ТабНаценок = Запрос.Выполнить().Выгрузить();
	ТабНаценок.Индексы.Добавить("Подразделение");
		
	Наценка = 0;
	ОкончитьПоиск = Ложь;
	Пока НЕ ОкончитьПоиск Цикл
		СтрокаНаценки = ТабНаценок.Найти(Подразделение, "Подразделение");
		Если СтрокаНаценки <> Неопределено Тогда
			Наценка = СтрокаНаценки.Наценка;
			ОкончитьПоиск = Истина;
		Иначе
			Если НЕ Подразделение.Родитель.Пустая() Тогда
				Подразделение = Подразделение.Родитель;
			Иначе
				ОкончитьПоиск = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Наценка;
КонецФункции //ПолучитьНаценку()

// Получает последнюю действующую скидку для подразделения
Функция ПолучитьСкидку(ПрайсЛист, Объект)Экспорт
	Скидка = 0; ДатаКон = ?(ЗначениеЗаполнено(Объект.ДатаНачалаДействия), Объект.ДатаНачалаДействия, Объект.Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.Скидка
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
	|	&ДатаКон,
	|	ПрайсЛист = &ПрайсЛист) КАК ПрайсЛистыКонтрагентовСкидкиСрезПоследних
	|ГДЕ
	|	ПрайсЛистыКонтрагентовСкидкиСрезПоследних.ПрайсЛист = &ПрайсЛист";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Если Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(ДатаКон, Объект.Ссылка), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(ДатаКон, Объект.Ссылка), ВидГраницы.Исключая));
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Скидка = Выборка.Скидка;
	КонецЕсли;
	Возврат Скидка;
КонецФункции //ПолучитьСкидку()

// Заполнение табличной части Прайс Листы
//
Процедура ЗаполнениеПрайсЛистов(Объект, ВсеПрайсЛисты = Истина)
	
	Запрос = Новый Запрос;
	
	Если НЕ ВсеПрайсЛисты Тогда
		
		Объект.ПрайсЛисты.Загрузить(РегистрыСведений.ПрайсЛистыКонтрагентовДоступностьПодразделенийКомпании.
			ДоступныеПрайсЛистыПодразделенияКомпании(Объект.ПодразделениеКомпанииПолучатель, Объект.Контрагент));
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрайсЛистыКонтрагентов.Ссылка КАК ПрайсЛист
		|ИЗ
		|	Справочник.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	НЕ ПрайсЛистыКонтрагентов.ПометкаУдаления
		|	И ВЫБОР
		|		КОГДА &Владелец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ПрайсЛистыКонтрагентов.Владелец = &Владелец
		|	КОНЕЦ ";
		
		Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
		
		Объект.ПрайсЛисты.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеПрайсЛистов()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпанииПолучатель");
	ОбязательныеРеквизиты.Добавить("ДатаНачалаДействия");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаНаценокПрайсЛиста Тогда
		ОбязательныеРеквизиты.Добавить("БазовыйТипЦен");
	КонецЕсли;

	Если НЕ ПравоПользователя("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("ПрайсЛисты");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("ПрайсЛисты.ПрайсЛист");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;

КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	
	УникальныеПрайсЛисты = Новый Массив();
	УникальныеПрайсЛисты.Добавить("ПрайсЛист");
	УникальныеПрайсЛисты.Добавить("ТегПозиции");
	УникальныеПрайсЛисты.Добавить("Производитель");
	
	УникальныеТабличныеЧасти.Вставить("ПрайсЛисты", УникальныеПрайсЛисты);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);

КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ТребуетсяУстанокаДатыНачала", Истина);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение цены".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПолучательПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
КонецПроцедуры // ПодразделениеКомпанииПолучательПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "ПрайсЛисты");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "НазначениеСкидокНаценокПоПрайсЛисту");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "ПрайсЛисты");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПрайсЛистыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Всеми прайс-листами контрагента'");
	Команда.Идентификатор	= "ПрайсЛистыЗаполнитьВсемиПрайсЛистамиКонтрагента";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти 				= "ПрайсЛисты";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
    //
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании, для которого назначаются цены.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПрайсЛистыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Доступными прайс-листами контрагента'");
	Команда.Идентификатор	= "ПрайсЛистыЗаполнитьДоступнымиПрайсЛистамиКонтрагента";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти 				= "ПрайсЛисты";	
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеКомпанииПолучатель", ВыборПодразделения);
		
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа всеми прайс-листами
//
Функция ПрайсЛистыЗаполнитьВсемиПрайсЛистамиКонтрагента(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ЗаполнениеПрайсЛистов(Объект);
	
КонецФункции // ПрайсЛистыЗаполнитьВсемиПрайсЛистамиКонтрагента()

// Обработчик заполнения документа доступными прайс-листами
//
Функция ПрайсЛистыЗаполнитьДоступнымиПрайсЛистамиКонтрагента(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеКомпанииПолучатель=ПараметрыЗаполнения.ПодразделениеКомпанииПолучатель Тогда
		Объект.ПодразделениеКомпанииПолучатель = ПараметрыЗаполнения.ПодразделениеКомпанииПолучатель;
		ПодразделениеКомпанииПолучательПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ЗаполнениеПрайсЛистов(Объект, Ложь);
	
КонецФункции // ПрайсЛистыЗаполнитьДоступнымиПрайсЛистамиКонтрагента()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.НазначениеСкидокНаценокПоПрайсЛисту);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли