// Модуль менеджера документа "Списание автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СписаниеАвтомобилей);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	Если НЕ Объект.Проведен Тогда
		ИтогиОперации.Вставить("СуммаДокумента", 0);
	Иначе
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
			КурсУпр        = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр = Объект.КурсВалютыУпр;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилей Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ОбъединенныйЗапрос.Автомобиль КАК Автомобиль,
			|	СУММА(ОбъединенныйЗапрос.Сумма) КАК Сумма
			|ИЗ
			|	(ВЫБРАТЬ
			|		ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
			|		ОстаткиАвтомобилей."+?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр")+" КАК Сумма
			|	ИЗ
			|		РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|	ГДЕ
			|		ОстаткиАвтомобилей.Регистратор = &Регистратор
			|		И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияРасход
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КомплектацияАвтомобилей.Автомобиль,
			|		КомплектацияАвтомобилей."+?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр")+"
			|	ИЗ
			|		РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|	ГДЕ
			|		КомплектацияАвтомобилей.Регистратор = &Регистратор
			|		И КомплектацияАвтомобилей.ВидДвижения = &ВидДвиженияРасход) КАК ОбъединенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбъединенныйЗапрос.Автомобиль";
		ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбъединенныйЗапрос.Автомобиль,
			|	СУММА(ОбъединенныйЗапрос.Сумма) КАК Сумма
			|ИЗ (
			|ВЫБРАТЬ
			|	АвтомобилиОтданные.Автомобиль КАК Автомобиль,
			|	АвтомобилиОтданные."+?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр")+" КАК Сумма
			|ИЗ
			|	РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
			|ГДЕ
			|	АвтомобилиОтданные.Регистратор = &Регистратор
			|	И АвтомобилиОтданные.ВидДвижения = &ВидДвиженияРасход
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КомплектацияАвтомобилей.Автомобиль,
			|	КомплектацияАвтомобилей."+?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр")+"
			|ИЗ
			|	РегистрНакопления.ПартииТоваровОтданные КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор
			|	И КомплектацияАвтомобилей.ВидДвижения = &ВидДвиженияРасход
			|
			|) КАК ОбъединенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбъединенныйЗапрос.Автомобиль";
			Запрос.УстановитьПараметр("ДокументПередачи", Объект.Автомобили.Выгрузить().ВыгрузитьКолонку("ДокументПередачи"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Регистратор"       , Объект.Ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияРасход" , ВидДвиженияНакопления.Расход);
		КэшСуммСписания=Запрос.Выполнить().Выгрузить();
		
		Если Объект.ВалютаДокумента <> ВалютаУпр И Объект.ВалютаДокумента <> ВалютаРегл Тогда
			Для Каждого СтрокаСписания Из КэшСуммСписания Цикл
				СтрокаСписания.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСписания.Сумма, ВалютаУпр, КурсУпр, Объект.ВалютаДокумента, Объект.КурсДокумента, 2);
			КонецЦикла;
		КонецЕсли;
		
		ИтогиОперации.Вставить("СуммаДокумента", КэшСуммСписания.Итог("Сумма"));
	КонецЕсли;
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СтатьяСписанияТМЦ");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	Иначе
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
		Если БалансВедетсяПоПодразделениям(Объект.Дата) Тогда
			ОбязательныеРеквизиты.Добавить("ПодразделениеЗатрат");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	// обязательные реквизиты таблицы "Автомобили"
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.Количество");
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили.ДокументПередачи");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы автомобилей
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
		УникальныеАвтомобили.Добавить("ДокументПередачи");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
		КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	Иначе
		КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонецЕсли;
	
	КонтролируемыеРеквизитыАвтомобилей = Новый Структура("ДокументПередачи", Ложь);
	
	КонтролируемыеРеквизиты.Вставить("Автомобили", КонтролируемыеРеквизитыАвтомобилей);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ИнвентаризацияАвтомобилей - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.НедостачаТовараПоИнвентаризации) КАК КодОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК РНПТ,
	|	ОстаткиАвтомобилей.Количество КАК КоличествоПрослеживаемости,
	|	ОстаткиАвтомобилей.СуммаБезНДС КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Ссылка
	|	И ОстаткиАвтомобилей.Автомобиль.ГТД.РНПТ";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим есть РНПТ у документа
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = РезультатЗапроса.Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	Документ = Объект.Ссылка;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
	ДатаДокумента = Объект.Дата;
	
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
		Объект.Контрагент            = Неопределено;
		Объект.ДоговорВзаиморасчетов = Неопределено;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// АПК:581-выкл

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// АПК:581-вкл

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Строка.Количество = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СписаниеАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
	ВыборДоговора 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговора.Обязательный 		= Истина;
	ВыборДоговора.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать договор взаиморасчетов.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по договору комиссии'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоДоговоруКомиссии";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговора);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Доступность", (Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилей));
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДоговоруКомиссии.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДоговоруКомиссии.Доступность",  (Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию));
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по складским остакам
//
Функция АвтомобилиЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&Момент, СкладКомпании = &СкладКомпании) КАК ОстаткиАвтомобилейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыАвтомобилей.Остатки КАК ЗаказыАвтомобилейОстатки
	|		ПО ОстаткиАвтомобилейОстатки.Автомобиль = ЗаказыАвтомобилейОстатки.Автомобиль
	|ГДЕ
	|	ЗаказыАвтомобилейОстатки.Автомобиль ЕСТЬ NULL");
	Запрос.УстановитьПараметр("Момент",        ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(ТекущаяДатаСеанса()), Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	ТаблицаАвтомобилей=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаАвтомобилей Цикл
		НоваяСтрока            = Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль = СтрокаТЧ.Автомобиль;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество = СтрокаТЧ.Количество;
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьСкладскимиОстатками()

// Обработчик заполнения документа по договору комиссии
//
Функция АвтомобилиЗаполнитьПоДоговоруКомиссии(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	АвтомобилиОтданныеОстатки.Автомобиль КАК Автомобиль,
	|	АвтомобилиОтданныеОстатки.ДокументПередачи КАК ДокументПередачи,
	|	АвтомобилиОтданныеОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.АвтомобилиОтданные.Остатки(
	|		&Момент,
	|		Контрагент = &Контрагент
	|		    И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов) КАК АвтомобилиОтданныеОстатки");
	Запрос.УстановитьПараметр("Момент",                ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(ТекущаяДатаСеанса()), Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("Контрагент",            Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ТаблицаАвтомобилей=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаАвтомобилей Цикл
		НоваяСтрока                  = Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль       = СтрокаТЧ.Автомобиль;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.ДокументПередачи = СтрокаТЧ.ДокументПередачи;
		НоваяСтрока.Количество       = СтрокаТЧ.Количество;
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьПоДоговоруКомиссии()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СписаниеАвтомобилей",
		"СписаниеАвтомобилей",
		НСтр("ru = 'Акт списания автомобилей'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ16",
		НСтр("ru = 'ТОРГ-16 (Акт о списании товаров)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписаниеАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"СписаниеАвтомобилей",
															"Акт списания автомобилей",
															ПечатьСписаниеАвтомобилей(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "СписаниеАвтомобилей"
// Возвращает сформированный табличный документ:
Функция ПечатьСписаниеАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеАвтомобилей.ПФ_MXL_СписаниеАвтомобилей");
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.СкладКомпанииПредставление =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// перебор строк
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТабличнойЧасти,
				Документ);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТабличнойЧасти) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			
		КонецЦикла;
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеАвтомобилей_СписаниеАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСписаниеАвтомобилей()

// Формирует печатную форму "ТОРГ16"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ16(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилей Тогда
		ВыборкаСтрокТовары = РегистрыНакопления.ОстаткиАвтомобилей.СоздатьНаборЗаписей();
		ПростоеСписание = Истина;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
		ВыборкаСтрокТовары = РегистрыНакопления.АвтомобилиОтданные.СоздатьНаборЗаписей();
		ПростоеСписание = Ложь;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Неправильный вид хозяйственной операции.'"));
		Возврат Неопределено;
	КонецЕсли;
	ВыборкаСтрокТовары.Отбор.Регистратор.Значение = Объект.Ссылка;
	ВыборкаСтрокТовары.Прочитать();
	
	// Определимся откуда будем брать многострочную часть документа
	// если движения есть, то из регистра иначе из табличной части документа.
	ЕстьДвиженияПоРегистру = Ложь;
	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ЕстьДвиженияПоРегистру = Истина;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Документ не проведен по партионному регистру. Отображение партий невозможно.'"));
		ВыборкаСтрокТовары = Объект.Автомобили;
	КонецЕсли; 
	КоличествоСтрок  = ВыборкаСтрокТовары.Количество();
	
	// создадим таблицу для вывода данных
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	Товары.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ХарактеристикаНоменклатурыПредставление", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("VIN", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ДокументПередачи", Новый ОписаниеТипов("ДокументСсылка.РеализацияАвтомобилей, ДокументСсылка.ВводОстатковАвтомобилей, ДокументСсылка.ИнвентаризацияАвтомобилей"));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Партия", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеАвтомобилей, ДокументСсылка.ВводОстатковАвтомобилей, ДокументСсылка.ИнвентаризацияАвтомобилей, ДокументСсылка.ПеремещениеАвтомобилей, ДокументСсылка.ВозвратОтПокупателяАвтомобилей, ДокументСсылка.ВыводИзЭксплуатацииАвтомобилей"));
	
	СтрокаСвертки = "Номенклатура, НоменклатураПредставление, ХарактеристикаНоменклатурыПредставление, ЕдиницаИзмерения, ЕдиницаИзмеренияКодПоОКЕИ";
	СтрокаСуммирования = "Количество, Сумма, Цена";
	
	Для каждого СтрокаТовар Из ВыборкаСтрокТовары Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура							 = СтрокаТовар.Автомобиль;
		НоваяСтрока.ХарактеристикаНоменклатурыПредставление	 = "";
		НоваяСтрока.НоменклатураПредставление				 = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТовар.Автомобиль);
		НоваяСтрока.VIN										 = СтрокаТовар.Автомобиль.VIN;
		Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеАвтомобилейОтданныхНаКомиссию Тогда
			НоваяСтрока.ДокументПередачи						 = СтрокаТовар.ДокументПередачи;
		КонецЕсли;
		НоваяСтрока.Количество								 = СтрокаТовар.Количество;
		НоваяСтрока.ЕдиницаИзмерения						 = Справочники.КлассификаторЕдиницИзмерения.шт;	
		НоваяСтрока.ЕдиницаИзмеренияКодПоОКЕИ				 = 796;
		НоваяСтрока.Партия					   				 = СтрокаТовар.Партия;
		
		Если ЕстьДвиженияПоРегистру Тогда
			НоваяСтрока.Сумма = СтрокаТовар.Сумма;
			НоваяСтрока.Цена = СтрокаТовар.Сумма / СтрокаТовар.Количество;
		Иначе
		КонецЕсли;
	КонецЦикла;
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ВыборкаСтрокТовары"  	, Товары);
	ДанныеОбъекта.Вставить("ПростоеСписание"  		, ПростоеСписание);
	ДанныеОбъекта.Вставить("ЕстьДвиженияПоРегистру" , ЕстьДвиженияПоРегистру);	
	ДанныеОбъекта.Вставить("ПредседательКомиссии"  	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1"        	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2"       	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("МОЛ" 			 	 	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"МОЛ"));
	ДанныеОбъекта.Вставить("Руководитель"    		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель"));
	ДанныеОбъекта.Вставить("СтрокаСвертки"			, СтрокаСвертки);
	ДанныеОбъекта.Вставить("СтрокаСуммирования"		, СтрокаСуммирования);
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли