///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Табель"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаПланирования = ТекущаяДатаСеанса();
		ПодготовитьПланировикНаСервере();
		
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	ОбновитьПредставлениеПериода();
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Ресурсы");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьИндикаторыРесурсов();
	ПодготовитьПланировикНаСервере();
		
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Табель", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьИндикаторыРесурсов();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.Табель.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	ПодготовитьПланировикНаСервере();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаКлиенте
Процедура РежимПланировщикаПриИзменении(Элемент)
	
	ОбновитьПредставлениеПериода();
	
	ПодготовитьПланировик();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсов

&НаКлиенте
Процедура РесурсыПриИзменении(Элемент)
	
	ПодготовитьПланировик();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого Строка Из Элемент.ВыделенныеСтроки Цикл
			
			ВыделеннаяСтрока = Элемент.ДанныеСтроки(Строка);
			НайденныеСтроки = Объект.Интервалы.НайтиСтроки(Новый Структура("Ресурс", ВыделеннаяСтрока.Ресурс));
			
			Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
				
				Объект.Интервалы.Удалить(УдаляемаяСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

Элементы.Ресурсы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПриАктивизацииСтроки(Элемент)
	
	ВыделитьСтрокиПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПослеУдаления(Элемент)
	
	ВыделитьСтрокиПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ВыделитьСтрокиПланировщика();
	
КонецПроцедуры

&НаСервере
Процедура РесурсыРесурсПриИзмененииНаСервере()
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Ресурсы.НайтиПоИдентификатору(Элементы.Ресурсы.ТекущаяСтрока);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущиеДанные.Ресурс);
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыРесурсПриИзменении(Элемент)
	
	РесурсыРесурсПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланировщика

&НаКлиенте
Процедура ПланировщикРесурсовПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Значения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДня(Значения.Получить("Ресурс"), НачалоДня(Начало));
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикРесурсовПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	День   = НачалоДня(Элемент.ВыделенныеЭлементы[0].Начало);
	Ресурс = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Ресурс");
	
	ОткрытьФормуДня(Ресурс, День);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикРесурсовПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	День   = НачалоДня(Элемент.ВыделенныеЭлементы[0].Начало);
	Ресурс = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Ресурс");
	
	ОткрытьФормуДня(Ресурс, День);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикРесурсовПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Интервал Из Элемент.ВыделенныеЭлементы Цикл
		День   = НачалоДня(Интервал.Начало);
		Ресурс = Интервал.ЗначенияИзмерений.Получить("Ресурс");
		
		Условие = Новый Структура("Ресурс,Дата", Ресурс, День);
		НайденныеСтроки = Объект.Интервалы.НайтиСтроки(Условие);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.Интервалы.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикРесурсовПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОтменаРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикРесурсовПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПериодНазад(Команда)
	
	Если Объект.РежимПланировщика = 0 Тогда
		Объект.ДатаПланирования = ДобавитьМесяц(Объект.ДатаПланирования, -1);
	ИначеЕсли Объект.РежимПланировщика = 1 Тогда
		Объект.ДатаПланирования = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНеделю(Объект.ДатаПланирования, -2);
	Иначе
		Объект.ДатаПланирования = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНеделю(Объект.ДатаПланирования, -1);
	КонецЕсли;
	
	ОбновитьПредставлениеПериода();
	
	ПодготовитьПланировик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	
	Если Объект.РежимПланировщика = 0 Тогда
		Объект.ДатаПланирования = ДобавитьМесяц(Объект.ДатаПланирования, 1);
	ИначеЕсли Объект.РежимПланировщика = 1 Тогда
		Объект.ДатаПланирования = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНеделю(Объект.ДатаПланирования, 2);
	Иначе
		Объект.ДатаПланирования = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНеделю(Объект.ДатаПланирования, 1);
	КонецЕсли;
	
	ОбновитьПредставлениеПериода();
	
	ПодготовитьПланировик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВыбранномуГрафику(Команда)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ЗаполнитьПоВыбранномуГрафикуВыбор");
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму(
		"Справочник.ГрафикиРаботы.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		КлючУникальности,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуРесурсов(Команда)
	
	ЗаполнитьПоГрафикуРесурсовНаСервере();
	
	ОбновитьИнтервалы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСмене(Команда)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ЗаполнитьПоСмене");
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму(
		"Справочник.Смены.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		КлючУникальности,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	
	Объект.Интервалы.Очистить();
	
	ОбновитьИнтервалы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНеВходящиеВПериодДокумента(Команда)
	Перем Начало, Конец;
	
	Период = ОбщегоНазначенияАвтосалонКлиентСервер.ГраницыПериода(Объект.ДатаПланирования, Объект.РежимПланировщика);
	Период.Свойство("Начало", Начало);
	Период.Свойство("Конец" , Конец);	
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого Интервал Из Объект.Интервалы Цикл
		Если Интервал.Дата < Начало ИЛИ Интервал.Дата > Конец Тогда
			УдаляемыеСтроки.Добавить(Интервал);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Интервалы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ОбновитьИнтервалы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРесурсы(Команда)
	
	Объект.Ресурсы.Очистить();
	Объект.Интервалы.Очистить();
	ПодготовитьПланировик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРесурсы(Команда)
	ПараметрыФормы = Новый Структура("ХозОперация", Объект.ХозОперация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборРесурсов");
	
	ОткрытьФорму("Документ.Табель.Форма.ФормаВыбораРесурсов", ПараметрыФормы, ЭтаФорма, ЭтаФорма,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьМесяц(Команда)
	
	Элементы.Календарь.ОтображатьПанельМесяцев = Не Элементы.Календарь.ОтображатьПанельМесяцев;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВыделениеКалендаря(Команда)
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеШкалы(Команда)
	
	ПоложениеШкалы = (НЕ ПоложениеШкалы);
	
	Элементы.ВертикальнаяШкала.Пометка = (НЕ ПоложениеШкалы);
	
	Если ПоложениеШкалы Тогда
		ПланировщикРесурсов.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
	Иначе
		ПланировщикРесурсов.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПланировщика(Команда)
	
	ПоказатьВводДаты(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборПериодаПланировщика"), Объект.ДатаПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРесурсамиПодразделения(Команда)
	
	Если Объект.ПодразделениеКомпании.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРесурсамиПодразделенияНаСервере();
	ВыделитьСтрокиПланировщика();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыделитьСтрокиПланировщика()
	
	ОбщегоНазначенияАвтосалонКлиентСервер.ВыделитьСтрокиПланировщика(ПолучитьМассивВыделенныхРесурсов(), ПланировщикРесурсов);
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьМассивВыделенныхРесурсов()
	МассивРесурсов = Новый Массив;
	
	Для Каждого Номер Из Элементы.Ресурсы.ВыделенныеСтроки Цикл
		Строка = Объект.Ресурсы.НайтиПоИдентификатору(Номер);
		
		МассивРесурсов.Добавить(Строка.Ресурс);
	КонецЦикла;
	
	Возврат МассивРесурсов;
КонецФункции

&НаСервере
Функция ПолучитьВыделенныеРесурсыНаСервере()
	
	Если Элементы.Ресурсы.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Результат = Новый Массив;
		
		Для Каждого Номер Из Элементы.Ресурсы.ВыделенныеСтроки Цикл
			
			Ресурс = Объект.Ресурсы.НайтиПоИдентификатору(Номер).Ресурс;
			
			Если ЗначениеЗаполнено(Ресурс) Тогда
				
				Результат.Добавить(Объект.Ресурсы.НайтиПоИдентификатору(Номер).Ресурс);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Результат = Объект.Ресурсы.Выгрузить().ВыгрузитьКолонку("Ресурс");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПредставлениеПериода()
	
	Элементы.ВыбратьПериодПланировщика.Заголовок = НСтр(СтрШаблон("ru = 'Дата планирования: %1'", Формат(Объект.ДатаПланирования, "ДФ=dd.MM.yyyy")));
	
	Если Объект.РежимПланировщика = 0 Тогда
		ПредставлениеПериода = Формат(Объект.ДатаПланирования, "ДФ='ММММ yyyy'");
		Возврат;
	ИначеЕсли Объект.РежимПланировщика = 1 Тогда
		Начало = НачалоНедели(Объект.ДатаПланирования);
		Конец  = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНеделю(Начало, 2) - 1;
	ИначеЕсли Объект.РежимПланировщика = 2 Тогда
		Начало = НачалоНедели(Объект.ДатаПланирования);
		Конец  = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНеделю(Начало, 1) - 1;
	КонецЕсли;
	
	ПредставлениеПериода = СтрШаблон("%1 - %2", Формат(Начало, "ДФ='dd:ММ:yyyy'"), Формат(Конец, "ДФ='dd:ММ:yyyy'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГрафикуРесурсовНаСервере()
	Перем Начало, Конец;
	
	Период = ОбщегоНазначенияАвтосалонКлиентСервер.ГраницыПериода(Объект.ДатаПланирования, Объект.РежимПланировщика);
	Период.Свойство("Начало", Начало);
	Период.Свойство("Конец" , Конец);
	
	// очистим старые данные
	ЕстьКонкретныеДни = Элементы.Календарь.ВыделенныеДаты.Количество() <> 0;
	УдаляемыеСтроки   = Новый Массив;
	
	ВыделеныеРесурсы = ПолучитьВыделенныеРесурсыНаСервере();
	
	Для Каждого Интервал Из Объект.Интервалы Цикл
		Если ВыделеныеРесурсы.Найти(Интервал.Ресурс) <> Неопределено И НЕ(ЕстьКонкретныеДни
			И Элементы.Календарь.ВыделенныеДаты.Найти(Интервал.Дата) = Неопределено) Тогда
			
			УдаляемыеСтроки.Добавить(Интервал);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Объект.Интервалы.Удалить(Строка);
	КонецЦикла;
		
	ТаблицаГрафиков = Документы.Табель.ИнтервалыГрафиковРаботРесурсов(Объект, Начало, Конец);
	Если ВыделеныеРесурсы.Количество() = 0 ИЛИ ТаблицаГрафиков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем массив из выбранные ресурсов
	Для Каждого Ресурс Из Объект.Ресурсы Цикл
		Если ВыделеныеРесурсы.Найти(Ресурс.Ресурс) <> Неопределено Тогда
			
			Если НЕ Ресурс.Ресурс.ГрафикРаботы.Пустая() Тогда
				График = Ресурс.Ресурс.ГрафикРаботы;
			ИначеЕсли НЕ Ресурс.Ресурс.ПодразделениеКомпании.ГрафикРаботы.Пустая() Тогда
				График = Ресурс.Ресурс.ПодразделениеКомпании.ГрафикРаботы;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаГрафиков.НайтиСтроки(Новый Структура("ГрафикРаботы", График));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НЕ ЕстьКонкретныеДни ИЛИ Элементы.Календарь.ВыделенныеДаты.Найти(НайденнаяСтрока.Дата) <> Неопределено Тогда
					
					НоваяЗапись = Объект.Интервалы.Добавить();
					НоваяЗапись.Ресурс = Ресурс.Ресурс;
					Если НЕ НайденнаяСтрока.ВидИнтервала.Пустая() Тогда
						НоваяЗапись.ВидИнтервала = НайденнаяСтрока.ВидИнтервала;
					Иначе
						НоваяЗапись.ВидИнтервала = Справочники.ВидыИнтервалов.Выходной;
					КонецЕсли;
					НоваяЗапись.Дата               = НайденнаяСтрока.Дата;
					НоваяЗапись.НачалоИнтервала    = НайденнаяСтрока.НачалоРабочегоВремени;
					НоваяЗапись.ОкончаниеИнтервала =
					?(НайденнаяСтрока.КонецРабочегоВремени <> Дата(1,1,1),
					НайденнаяСтрока.КонецРабочегоВремени,
					КонецДня(НайденнаяСтрока.КонецРабочегоВремени));
					
					НоваяЗапись.Значение        = (НоваяЗапись.ОкончаниеИнтервала - НоваяЗапись.НачалоИнтервала)/3600;
					НоваяЗапись.РабочийИнтервал = НоваяЗапись.ВидИнтервала.РабочийИнтервал;
					НоваяЗапись.Мнемоника       = НоваяЗапись.ВидИнтервала.Мнемоника;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВыбранномуГрафикуНаСервере(График)
	Перем Начало, Конец;
	
	Период = ОбщегоНазначенияАвтосалонКлиентСервер.ГраницыПериода(Объект.ДатаПланирования, Объект.РежимПланировщика);
	Период.Свойство("Начало", Начало);
	Период.Свойство("Конец" , Конец);
	
	// очистим старые данные
	ЕстьКонкретныеДни = Элементы.Календарь.ВыделенныеДаты.Количество() <> 0;
	УдаляемыеСтроки   = Новый Массив;
	
	ВыделеныеРесурсы = ПолучитьВыделенныеРесурсыНаСервере();
	
	Для Каждого Интервал Из Объект.Интервалы Цикл
		Если ВыделеныеРесурсы.Найти(Интервал.Ресурс) <> Неопределено И НЕ(ЕстьКонкретныеДни
			И Элементы.Календарь.ВыделенныеДаты.Найти(Интервал.Дата) = Неопределено) Тогда
			
			УдаляемыеСтроки.Добавить(Интервал);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Объект.Интервалы.Удалить(Строка);
	КонецЦикла;
	
	Если ВыделеныеРесурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыходныеДни = Новый Структура;
	ВыходныеДни.Вставить("Суббота",     Ложь);
	ВыходныеДни.Вставить("Воскресенье", Ложь);
	ДанныеТаблицыГрафика = Справочники.ГрафикиРаботы.ПолучитьГрафик(График, Начало, Конец, ВыходныеДни);
	
	Для Каждого Ресурс Из Объект.Ресурсы Цикл
		Если ВыделеныеРесурсы.Найти(Ресурс.Ресурс) <> Неопределено Тогда
			
			Для Каждого НайденнаяСтрока Из ДанныеТаблицыГрафика Цикл
				Если НЕ ЕстьКонкретныеДни ИЛИ Элементы.Календарь.ВыделенныеДаты.Найти(НайденнаяСтрока.Дата) <> Неопределено Тогда
					
					НоваяЗапись = Объект.Интервалы.Добавить();
					НоваяЗапись.Ресурс = Ресурс.Ресурс;
					Если НЕ НайденнаяСтрока.ВидИнтервала.Пустая() Тогда
						НоваяЗапись.ВидИнтервала = НайденнаяСтрока.ВидИнтервала;
					Иначе
						НоваяЗапись.ВидИнтервала = Справочники.ВидыИнтервалов.Выходной;
					КонецЕсли;
					НоваяЗапись.Дата               = НайденнаяСтрока.Дата;
					НоваяЗапись.НачалоИнтервала    = НайденнаяСтрока.НачалоРабочегоВремени;
					НоваяЗапись.ОкончаниеИнтервала =
					?(НайденнаяСтрока.КонецРабочегоВремени <> Дата(1,1,1),
					НайденнаяСтрока.КонецРабочегоВремени,
					КонецДня(НайденнаяСтрока.КонецРабочегоВремени));
					
					НоваяЗапись.Значение        = (НоваяЗапись.ОкончаниеИнтервала - НоваяЗапись.НачалоИнтервала)/3600;
					НоваяЗапись.РабочийИнтервал = НоваяЗапись.ВидИнтервала.РабочийИнтервал;
					НоваяЗапись.Мнемоника       = НоваяЗапись.ВидИнтервала.Мнемоника;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндикаторыРесурсов()
	
	Для Каждого Ресурс Из Объект.Ресурсы Цикл
		Если Ресурс.Ресурс <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Ресурс, Ресурс.Ресурс);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Интервал Из Объект.Интервалы Цикл
		ЗаполнитьЗначенияСвойств(Интервал, Интервал.ВидИнтервала);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДня(Ресурс, День)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("День"   , День);
	ПараметрыОткрытия.Вставить("Ресурс" , Ресурс);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("День"    , День);
	ДопПараметры.Вставить("Ресурс"  , Ресурс);
	ДопПараметры.Вставить("Событие" , "РедактированиеИнтервала");
	
	// добавим строки интервала
	ПараметрыОткрытия.Вставить("Интервалы", УпаковатьИнтервалыРесурса(Ресурс, День));
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Документ.Табель.Форма.РедактированиеДня", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция УпаковатьИнтервалыРесурса(Ресурс, День)
	
	Условие = Новый Структура("Ресурс,Дата", Ресурс, День);
	НайденныеСтроки = Объект.Интервалы.НайтиСтроки(Условие);
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Интервалы.Выгрузить(НайденныеСтроки), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоСменеНаСервере(Смена)
	Перем Начало, Конец;
	
	Период = ОбщегоНазначенияАвтосалонКлиентСервер.ГраницыПериода(Объект.ДатаПланирования, Объект.РежимПланировщика);
	Период.Свойство("Начало", Начало);
	Период.Свойство("Конец" , Конец);
	
	// очистим старые данные
	ЕстьКонкретныеДни = Элементы.Календарь.ВыделенныеДаты.Количество() <> 0;
	УдаляемыеСтроки   = Новый Массив;
	
	ВыделеныеРесурсы = ПолучитьВыделенныеРесурсыНаСервере();
	
	Для Каждого Интервал Из Объект.Интервалы Цикл
		Если ВыделеныеРесурсы.Найти(Интервал.Ресурс) <> Неопределено И НЕ(ЕстьКонкретныеДни
			И Элементы.Календарь.ВыделенныеДаты.Найти(Интервал.Дата) = Неопределено) Тогда
			
			УдаляемыеСтроки.Добавить(Интервал);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Объект.Интервалы.Удалить(Строка);
	КонецЦикла;
	
	Если ВыделеныеРесурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыГрафика = Смена.Интервалы.Выгрузить();
	
	Если ЕстьКонкретныеДни Тогда
		Дни = Элементы.Календарь.ВыделенныеДаты;
	Иначе
		Дни = Новый Массив;
		
		СекундВДне = 60*60*24;
		День = Начало;
		
		Пока День <= Конец Цикл
			Дни.Добавить(НачалоДня(День));
			День = День + СекундВДне;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Ресурс Из Объект.Ресурсы Цикл
		Если ВыделеныеРесурсы.Найти(Ресурс.Ресурс) <> Неопределено Тогда
			Для Каждого День Из Дни Цикл
				Для Каждого ИнтервалСмены Из ДанныеТаблицыГрафика Цикл
					НоваяЗапись = Объект.Интервалы.Добавить();
					НоваяЗапись.Ресурс = Ресурс.Ресурс;
					Если НЕ ИнтервалСмены.ВидИнтервала.Пустая() Тогда
						НоваяЗапись.ВидИнтервала = ИнтервалСмены.ВидИнтервала;
					Иначе
						НоваяЗапись.ВидИнтервала = Справочники.ВидыИнтервалов.Выходной;
					КонецЕсли;
					НоваяЗапись.Дата               = День;
					НоваяЗапись.НачалоИнтервала    = ИнтервалСмены.НачалоРабочегоВремени;
					НоваяЗапись.ОкончаниеИнтервала = ?(
						ИнтервалСмены.КонецРабочегоВремени <> Дата(1,1,1),
						ИнтервалСмены.КонецРабочегоВремени,
						КонецДня(ИнтервалСмены.КонецРабочегоВремени)
					);
					
					НоваяЗапись.Значение        = (НоваяЗапись.ОкончаниеИнтервала - НоваяЗапись.НачалоИнтервала)/3600;
					НоваяЗапись.РабочийИнтервал = НоваяЗапись.ВидИнтервала.РабочийИнтервал;
					НоваяЗапись.Мнемоника       = НоваяЗапись.ВидИнтервала.Мнемоника;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРесурсамиПодразделенияНаСервере()
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ТабельРабочихМест Тогда
		
		Запрос = ЗапросЦехаПодразделения();
		
	Иначе
		
		Запрос = ЗапросСотрудникиПодразделения();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	Объект.Ресурсы.Загрузить(Запрос.Выполнить().Выгрузить());
	ПодготовитьПланировикНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ЗапросЦехаПодразделения()
	
	Результат = Новый Запрос(
		"ВЫБРАТЬ
		|	Цеха.Ссылка КАК Ресурс,
		|	Цеха.ПодразделениеКомпании КАК ПодразделениеКомпании
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|ГДЕ
		|	Цеха.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И НЕ Цеха.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Цеха.Наименование"
	);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗапросСотрудникиПодразделения()
	
	Результат = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ресурс,
		|	Сотрудники.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	Сотрудники.Должность КАК Должность,
		|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер,
		|	Сотрудники.Цех КАК Цех
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
		|	И НЕ Сотрудники.ПометкаУдаления
		|	И НЕ Сотрудники.ФлагУволен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудники.Наименование"
	);
	Возврат Результат;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСПланировщиком

&НаКлиенте
Процедура ПодготовитьПланировик()
	
	ПодготовитьПланировикНаСервере();
	
	ВыделитьСтрокиПланировщика();
	
КонецПРоцедуры

&НаСервере
Процедура ПодготовитьПланировикНаСервере()
	Перем Начало, Конец;
	
	Период = ОбщегоНазначенияАвтосалонКлиентСервер.ГраницыПериода(Объект.ДатаПланирования, Объект.РежимПланировщика);
	Период.Свойство("Начало", Начало);
	Период.Свойство("Конец" , Конец);
	
	// настойка шакалы
	НастроитьШкалуВремени(Начало, Конец);
	
	// настройка отрезкав времени
	УстановитьТекущиеПериодыОтображенияПланировщикаРесурсов(Начало, КонецДня(Конец));
	
	// заполним измерения планировщика
	ОбновитьИзмеренияПланировщика();
	
	// заполняем интервалы
	ОбновитьИнтервалы(Начало, Конец);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеПериодыОтображенияПланировщикаРесурсов(НачалоИнтервала, ОкончаниеИнтервала)
	
	ПланировщикРесурсов.ТекущиеПериодыОтображения.Очистить();
	
	ПланировщикРесурсов.ТекущиеПериодыОтображения.Добавить(НачалоИнтервала, КонецДня(ОкончаниеИнтервала));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьШкалуВремени(Начало, Конец)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.СброситьНастройкиШкал(ПланировщикРесурсов);
	Если Объект.РежимПланировщика = 0 Тогда
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(ПланировщикРесурсов, "День",,"ДФ='ddd (dd)'", "спл:1", Ложь);
	Иначе
		ОбщегоНазначенияАвтосалонКлиентСервер.НастроитьШкалуВремени(ПланировщикРесурсов, "День",,"ДФ='ddd (dd.MM)'", "спл:1", Ложь);
	КонецЕсли;
	
	Если Объект.РежимПланировщика = 0 Тогда
		
		Кратность = Цел(((День(Конец) - День(Начало))+1)/2)+1;
		//Кратность = ((День(Конец) - День(Начало))+1);
		
	ИначеЕсли Объект.РежимПланировщика = 1 Тогда
		Кратность = 14;
	Иначе
		Кратность = 7;
	КонецЕсли;
	
	// подготовим планировщик к заполнению
	ОбщегоНазначенияАвтосалонКлиентСервер.СтартоваяНастройкаПланировщика(ПланировщикРесурсов,
		ОтображениеВремениЭлементовПланировщика.НеОтображать, Кратность);
	
	Если НЕ ПоложениеШкалы Тогда
		ПланировщикРесурсов.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	Иначе
		ПланировщикРесурсов.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
	КонецЕсли;
	
	ПланировщикРесурсов.ОтображатьПеренесенныеЗаголовки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзмеренияПланировщика()
	ПланировщикРесурсов.Измерения.Очистить();
	
	ИзмерениеПланировщика = ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьИзмерениеПланировщика(
		ПланировщикРесурсов.Измерения, "Ресурс", "Ресурс");
	
	Для Каждого Ресурс Из Объект.Ресурсы Цикл
		Если ИзмерениеПланировщика.Элементы.Найти(Ресурс.Ресурс) = Неопределено Тогда
			ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьИзмерениеПланировщика(
				ИзмерениеПланировщика.Элементы, Ресурс.Ресурс, Ресурс.Псевдоним, Новый Структура("ЦветТекста", WebЦвета.Черный));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнтервалы(Начало = Неопределено, Конец = Неопределено)
	
	Если Начало = Неопределено ИЛИ Конец = Неопределено Тогда
		Период = ОбщегоНазначенияАвтосалонКлиентСервер.ГраницыПериода(Объект.ДатаПланирования, Объект.РежимПланировщика);
		Период.Свойство("Начало", Начало);
		Период.Свойство("Конец" , Конец);	
	КонецЕсли;
	
	ПланировщикРесурсов.Элементы.Очистить();
	
	Дни = Новый Массив;
	
	СекундВДне = 60*60*24;
	День = Начало;
	
	Пока День <= Конец Цикл
		Дни.Добавить(НачалоДня(День));
		День = День + СекундВДне;
	КонецЦикла;
	
	Отбор = Новый Структура("Ресурс,Дата");
	
	ЦветВыходного = Новый Цвет(255, 180, 180);
	ЦветРабочего  = Новый Цвет(200, 255, 200);
	ЦветПерерыва  = Новый Цвет(255, 255, 200);
	
	Для Каждого Ресурс Из Объект.Ресурсы Цикл
		Для Каждого День Из Дни Цикл
			Отбор.Ресурс = Ресурс.Ресурс;
			Отбор.Дата   = День;
			
			НайденныеИнтервалы = Объект.Интервалы.НайтиСтроки(Отбор);
			Если НайденныеИнтервалы.Количество() > 0 Тогда
				ВидыИнтервалов = Новый Массив;
				
				Период = Новый Структура("ДатаНачала,ДатаОкончания", НачалоДня(День), КонецДня(День));
				
				ЗначенияРесурсов = Новый Соответствие;
				ЗначенияРесурсов.Вставить("Ресурс", Ресурс.Ресурс);
				
				Интервалы = Объект.Интервалы.Выгрузить(НайденныеИнтервалы);
				Интервалы.Сортировать("НачалоИнтервала");
				
				Начало           = Неопределено;
				Конец            = Неопределено;
				ПредставлениеДня = Новый Массив;
				ЕстьРабочий      = Ложь;
				ЕстьВыходной     = Ложь;
				Для Каждого Интервал Из Интервалы Цикл
					ВидыИнтервалов.Добавить(Интервал.ВидИнтервала);
					
					ПредставлениеДня.Добавить(Интервал.Мнемоника);
					
					Если Начало = Неопределено Тогда
						Начало = Интервал.НачалоИнтервала;
					КонецЕсли;
					
					Если Конец = Неопределено ИЛИ Конец < Интервал.ОкончаниеИнтервала Тогда
						Конец = Интервал.ОкончаниеИнтервала;
					КонецЕсли;
					
					ЕстьРабочий  = ЕстьРабочий ИЛИ Интервал.РабочийИнтервал;
					ЕстьВыходной = ЕстьВыходной ИЛИ Интервал.ВидИнтервала = ПредопределенноеЗначение("Справочник.ВидыИнтервалов.Выходной")
				КонецЦикла;
				
				Значение = Новый Структура("ВидыИнтервалов", ВидыИнтервалов);
				
				ОфрмлениеДня = Новый Структура("ЦветФона");
				Если ЕстьРабочий Тогда
					ОфрмлениеДня.ЦветФона = ЦветРабочего;
					ПредставлениеДняТек = СтрШаблон("%1 - %2 : %3", Формат(Начало, "ДФ=ЧЧ"), Формат(Конец, "ДФ=ЧЧ"), СтрСоединить(ПредставлениеДня, "; "));
				ИначеЕсли ЕстьВыходной Тогда
					ОфрмлениеДня.ЦветФона = ЦветВыходного;
					ПредставлениеДняТек = СтрШаблон("%1", СтрСоединить(ПредставлениеДня, "; "));
				Иначе
					ОфрмлениеДня.ЦветФона = ЦветПерерыва;
					ПредставлениеДняТек = СтрШаблон("%1 - %2 : %3", Формат(Начало, "ДФ=ЧЧ"), Формат(Конец, "ДФ=ЧЧ"), СтрСоединить(ПредставлениеДня, "; "));
				КонецЕсли;
				
				// mikolv
				Если НачалоДня(Начало) = Начало И ( КонецДня(Конец) = Конец Или Конец = Дата(1, 1, 1))Тогда
					ПредставлениеДня = СтрШаблон("%1", СтрСоединить(ПредставлениеДня, "; "));	
				Иначе
					ПредставлениеДня = ПредставлениеДняТек;
				КонецЕсли;
				// - mikolv

				ОбщегоНазначенияАвтосалонКлиентСервер.ДобавитьНовоеСобытиеПланировщика(ПланировщикРесурсов, Период, Значение,
					ЗначенияРесурсов, ПредставлениеДня,,ОфрмлениеДня);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ДоступныеТипы = Новый Массив;
	Если Объект.ХозОперация = Справочники.ХозОперации.ТабельСотрудников Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ТабельРабочихМест Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Цеха"));
	КонецЕсли;
	
	Элементы.РесурсыРесурс.ОграничениеТипа = Новый ОписаниеТипов(ДоступныеТипы);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ЭтоСотрудники = (Объект.ХозОперация = Справочники.ХозОперации.ТабельСотрудников);
	
	Элементы.РесурсыДолжность.Видимость      = ЭтоСотрудники;
	Элементы.РесурсыЦех.Видимость            = ЭтоСотрудники;
	Элементы.РесурсыТабельныйНомер.Видимость = ЭтоСотрудники;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	// Вызываем общий обработчик события
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ПодборРесурсов" Тогда
		
		ТЗВыбор = ПолучитьИзВременногоХранилища(РезультатОповещения);

		Для Каждого Ресурс Из ТЗВыбор Цикл
			
			НайденныеСтроки = Объект.Ресурсы.НайтиСтроки(Новый Структура("Ресурс", Ресурс.Ресурс));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НовыйРесурс = Объект.Ресурсы.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйРесурс, Ресурс);
				
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
		
		ПодготовитьПланировикНаСервере();
	ИначеЕсли ДополнительныеПараметры = "ЗаполнитьПоВыбранномуГрафикуВыбор" Тогда
		ЗаполнитьПоВыбранномуГрафикуНаСервере(РезультатОповещения);
		
		ОбновитьИнтервалы();
	ИначеЕсли ДополнительныеПараметры = "ЗаполнитьПоСмене" Тогда
		ЗаполнитьПоСменеНаСервере(РезультатОповещения);
		
		ОбновитьИнтервалы();
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "РедактированиеИнтервала" Тогда
		Если НЕ ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		Условие = Новый Структура("Ресурс,Дата", ДополнительныеПараметры.Ресурс, ДополнительныеПараметры.День);
		НайденныеСтроки = Объект.Интервалы.НайтиСтроки(Условие);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.Интервалы.Удалить(Строка);
		КонецЦикла;
		
		Для Каждого Интервал Из ПолучитьИзВременногоХранилища(РезультатОповещения) Цикл
			НовыйИнтервал = Объект.Интервалы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовыйИнтервал, Интервал);
			ЗаполнитьЗначенияСвойств(НовыйИнтервал, Условие);
		КонецЦикла;
		
		ОбновитьИнтервалы();
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыборПериодаПланировщика" И ЗначениеЗаполнено(РезультатОповещения) Тогда
		Объект.ДатаПланирования = РезультатОповещения;
		РежимПланировщикаПриИзменении(Неопределено);
		Возврат;
	КонецЕсли;
	
	// т.к нет события ДатаПриИзменении 
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") И РезультатОповещения.Свойство("ИзмененныеРеквизиты") Тогда
		ДатаИзОповещения = ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения.ИзмененныеРеквизиты, "Дата");
		Если ДатаИзОповещения <> Неопределено Тогда
			Объект.Дата = ДатаИзОповещения;
			РезультатОповещения.ИзмененныеРеквизиты.Удалить("Дата");
		КонецЕсли;
	КонецЕсли;
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	Если ДатаИзОповещения <> Неопределено Тогда
		РезультатОповещения.ИзмененныеРеквизиты.Вставить("Дата", ДатаИзОповещения);
	КонецЕсли;

	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьПланировщик", Ложь) Тогда
		Объект.Интервалы.Очистить();
		ПодготовитьПланировик();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

