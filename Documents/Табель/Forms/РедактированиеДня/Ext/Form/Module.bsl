
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("Ресурс", Ресурс);
	Параметры.Свойство("День"  , День);
	
	Интервалы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.Интервалы));
	
	Заголовок = СтрШаблон("%1 (%2)", Формат(День, "ДЛФ=DD"), Строка(Ресурс));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Интервалы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ИнтервалыВидИнтервалаПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Интервалы.НайтиПоИдентификатору(Идентификатор);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущиеДанные.ВидИнтервала);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыВидИнтервалаПриИзменении(Элемент)
	
	ИнтервалыВидИнтервалаПриИзмененииНаСервере(Элементы.Интервалы.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ИнтервалыОкончаниеИнтервалаПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Интервалы.НайтиПоИдентификатору(Идентификатор);
	РасчитатьПродолжительность(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыОкончаниеИнтервалаПриИзменении(Элемент)
	
	ИнтервалыОкончаниеИнтервалаПриИзмененииНаСервере(Элементы.Интервалы.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ИнтервалыНачалоИнтервалаПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Интервалы.НайтиПоИдентификатору(Идентификатор);
	РасчитатьПродолжительность(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыНачалоИнтервалаПриИзменении(Элемент)
	
	ИнтервалыНачалоИнтервалаПриИзмененииНаСервере(Элементы.Интервалы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыНачалоИнтервалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыОкончаниеИнтервалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВДокумент(Команда)
	
	Если ЗаполнениеВерное() Тогда
		Закрыть(ВДокументНаСервере(ВладелецФормы.УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСмене(Команда)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыборСменыЗаверщение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму(
		"Справочник.Смены.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		КлючУникальности,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает представление периода времени (1,5 часа, 6 часов, 30 минут, ...)
//
// Параметры:
//  ВремяНачало    - Дата - Время начала
//  ВремяОкончание - Дата - Время окончания
//
// Возвращаемое значение:
//  Строка - Представление времени
//
&НаКлиенте
Функция ПолучитьПредставлениеПериодаВремени(ВремяНачало, ВремяОкончание)
	
	ПустаяДата = Дата("00010101");
	// На случай если время содержит так же и дату
	ЗначениеВремяНачало		= ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	ЗначениеВремяОкончание	= ПустаяДата + (ВремяОкончание - НачалоДня(ВремяОкончание));
	ВремяНачалоВМинутах		= Цел((ЗначениеВремяНачало - НачалоДня(ЗначениеВремяНачало)) / 60);
	ВремяОкончанияВМинутах	= Цел((ЗначениеВремяОкончание - НачалоДня(ЗначениеВремяОкончание)) / 60);
	РазницаВМинутах = ВремяОкончанияВМинутах - ВремяНачалоВМинутах;
	Если РазницаВМинутах <= 0 Тогда
		Возврат "";
	КонецЕсли;
	// 1 минута
	// 2 - 4 минуты
	// 5 и далее - минут
	// 1 час
	// 2 - 4 часа
	// 5 часов
	// 5,5 часов
	Если РазницаВМинутах < 60 Тогда
		ВремяСтрокой = Формат(РазницаВМинутах, "ЧДЦ=0; ЧН=0; ЧГ=");
		Если РазницаВМинутах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'минута'");
		ИначеЕсли РазницаВМинутах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'минуты'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'минут'");
		КонецЕсли;
	Иначе
		РазницаВЧасах = РазницаВМинутах / 60;
		Если РазницаВЧасах = Цел(РазницаВМинутах / 60) Тогда
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=0; ЧРД=,; ЧН=0; ЧГ=");
		Иначе
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=1; ЧРД=,; ЧН=0; ЧГ=");
		КонецЕсли;
		Если РазницаВЧасах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'час'");
		ИначеЕсли РазницаВЧасах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'часа'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	Возврат ВремяСтрокой + " " + ПредставлениеВремя;
	
КонецФункции // ПолучитьПредставлениеПериодаВремени()

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВремени(Список, ВремяНачало = Неопределено, ДобавлятьПредставлениеДлительности = Ложь)
	
	Список.Очистить();
	ПустаяДата = Дата("00010101");
	ДобавлятьДлительность = (ДобавлятьПредставлениеДлительности И ТипЗнч(ВремяНачало) = Тип("Дата"));
	
	Если ДобавлятьДлительность Тогда
		// Если ВремяНачало содержит так же и дату
		ЗначениеВремяНачало = ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	Иначе
		ЗначениеВремяНачало = Неопределено
	КонецЕсли;
	
	ТекВремя = ?(ЗначениеВремяНачало = Неопределено, ПустаяДата, ЗначениеВремяНачало + 60 * 60);
	
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		
		Если ДобавлятьДлительность Тогда
			ПредставлениеПериодаВремени = ПолучитьПредставлениеПериодаВремени(ЗначениеВремяНачало, ТекВремя);
			Если ЗначениеЗаполнено(ПредставлениеПериодаВремени) Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (" + ПредставлениеПериодаВремени + ")";
			КонецЕсли;
		КонецЕсли;
		
		Список.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 60 * 60;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбораВремени()

&НаСервере
Функция ВДокументНаСервере(УникальныйИдентификаторВладельца)
	
	Возврат ПоместитьВоВременноеХранилище(Интервалы.Выгрузить(), УникальныйИдентификаторВладельца);
	
КонецФункции

&НаСервере
Процедура РасчитатьПродолжительность(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НачалоИнтервала) И ЗначениеЗаполнено(ТекущиеДанные.ОкончаниеИнтервала) Тогда
		ТекущиеДанные.Значение = (ТекущиеДанные.ОкончаниеИнтервала - ТекущиеДанные.НачалоИнтервала)/3600;
	Иначе
		ТекущиеДанные.Значение = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСменеНаСервере(Смена)
	
	Для Каждого ИнтервалСмены Из Смена.Интервалы Цикл
		НовыйИнтервал = Интервалы.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовыйИнтервал, ИнтервалСмены);
		ЗаполнитьЗначенияСвойств(НовыйИнтервал, ИнтервалСмены.ВидИнтервала);
		
		НовыйИнтервал.НачалоИнтервала    = ИнтервалСмены.НачалоРабочегоВремени;
		НовыйИнтервал.ОкончаниеИнтервала = ИнтервалСмены.КонецРабочегоВремени;
		НовыйИнтервал.Значение           = (ИнтервалСмены.Продолжительность - Дата(1,1,1))/3600;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборСменыЗаверщение(Смена, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Смена) Тогда
		Интервалы.Очистить();
		
		ЗаполнитьПоСменеНаСервере(Смена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеВерное()
	ЕстьОшибки = Ложь;
	
	Для Каждого Интервал Из Интервалы Цикл
		Если НЕ ЗначениеЗаполнено(Интервал.ВидИнтервала) Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Интервалы",
				Интервалы.Индекс(Интервал) + 1,
				"ВидИнтервала"
			);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен вид интервала.'"),,ПутьКТабличнойЧасти,,ЕстьОшибки
			);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
КонецФункции

#КонецОбласти
