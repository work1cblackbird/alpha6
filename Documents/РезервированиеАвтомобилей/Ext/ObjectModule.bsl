// Модуль объекта документа "Резервирование автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Процедура - обработчик ввода на основании
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, 
													ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Исполнитель) Тогда 
		Подписант = ОрганизацииАльфаАвто.Руководитель(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		
		Если ЗначениеЗаполнено(Подписант)Тогда
			Исполнитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании);	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// проверим наличие на остатках
	Отказ = ПроверитьОстаткиАвтомобилей();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// запишем данные
	Если Автомобили.Количество() > 0 Тогда
		// Наложим блокировку на считываемые данные
		структураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыАвтомобилей");
		
		значенияБлокировки = Новый Соответствие;
		значенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
		
		структураПараметровБлокировки.Вставить("ИсточникДанных", Автомобили);
		описаниеИсточника = Новый Соответствие;
		описаниеИсточника.Вставить("Автомобиль", "Автомобиль");
		
		ОбработкаСобытийДокументаСервер.
			УстановитьУправляемуюБлокировку(структураПараметровБлокировки, значенияБлокировки, описаниеИсточника);
		
		Для Каждого строка Из Автомобили Цикл
			запись = Движения.ЗаказыАвтомобилей.Добавить();
			
			запись.Период = Дата;
			запись.Регистратор = Ссылка;
			запись.Автомобиль = строка.Автомобиль;
			запись.Заказ = Ссылка;
			запись.Резерв = 1;
			запись.ХозОперация = ХозОперация;
		КонецЦикла;
		
		// проверим корректность отстаков
		запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль,
		|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ,
		|	ЗаказыАвтомобилейОстатки.РезервОстаток КАК Резерв,
		|	ЕСТЬNULL(РезервированиеАвтомобилейАвтомобили.НомерСтроки, 0) КАК НомерСтроки,
		|	ЗаказыАвтомобилейОстатки.Автомобиль.Модель КАК Модель,
		|	ЗаказыАвтомобилейОстатки.Автомобиль.VIN КАК VIN
		|ИЗ
		|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(&Момент, Заказ <> &ТекущийДокумент) КАК ЗаказыАвтомобилейОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РезервированиеАвтомобилей.Автомобили КАК РезервированиеАвтомобилейАвтомобили
		|		ПО ЗаказыАвтомобилейОстатки.Автомобиль = РезервированиеАвтомобилейАвтомобили.Автомобиль
		|ГДЕ
		|	ЗаказыАвтомобилейОстатки.РезервОстаток > 0
		|	И РезервированиеАвтомобилейАвтомобили.Ссылка = &ТекущийДокумент");
		запрос.УстановитьПараметр("Момент", МоментВремени());
		запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		результат = запрос.Выполнить();
		Если НЕ результат.Пустой() Тогда
			Выборка = результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Автомобили", 
																		Выборка.НомерСтроки, "Автомобиль");
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Автомобиль ""%1 %2"" уже зарезервирован документом %3.'"),
						Выборка.Модель,
						Выборка.vin,
						Выборка.Заказ
					),,
					ПутьКТабличнойЧасти,
					"Объект",
					Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// двигаем границу последовательности заказы на автомобили
	РаботаСГраницами.СдвинутьГраницуЗаказовАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛист(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// очистим табличную часть
	Автомобили.Очистить();
	
	АвтомобильДляЗаполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Автомобиль");
	
	Если НЕ АвтомобильДляЗаполнения.Пустая() Тогда
		НовыйАвтомобиль = Автомобили.Добавить();
		НовыйАвтомобиль.Автомобиль = АвтомобильДляЗаполнения;   
		
		СекундВДне = 86400;
		
		ДнейВРезервеПоУмолчанию = ПраваИНастройкиПользователя.Значение("СрокРезерваДляАвтомобилейПоУмолчанию");
		Если Не ЗначениеЗаполнено(ДнейВРезервеПоУмолчанию) Тогда
			ДнейВРезервеПоУмолчанию = 3;
		КонецЕсли;
		
		НовыйАвтомобиль.СрокСнятияРезерва = НачалоДня(ТекущаяДатаСеанса() + (ДнейВРезервеПоУмолчанию * СекундВДне));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании справочника "Автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Автомобили(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, 
																		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили.Очистить();
	
	Если НЕ ДанныеЗаполнения.Пустая() Тогда
		НовыйАвтомобиль = Автомобили.Добавить();
		НовыйАвтомобиль.Автомобиль = ДанныеЗаполнения;  
		
		СекундВДне = 86400;
		
		ДнейВРезервеПоУмолчанию = ПраваИНастройкиПользователя.Значение("СрокРезерваДляАвтомобилейПоУмолчанию");
		Если Не ЗначениеЗаполнено(ДнейВРезервеПоУмолчанию) Тогда
			ДнейВРезервеПоУмолчанию = 3;
		КонецЕсли;
		
		НовыйАвтомобиль.СрокСнятияРезерва = НачалоДня(ТекущаяДатаСеанса() + (ДнейВРезервеПоУмолчанию * СекундВДне));
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Проверка наличия автомобиля на складе
Функция ПроверитьОстаткиАвтомобилей()
	
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка"    , Ссылка);
	ДокументОбъектСтруктура.Вставить("Дата"      , Дата);
	ДокументОбъектСтруктура.Вставить("Автомобили", Автомобили.Выгрузить());
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.РезервированиеАвтомобилейПроверитьОстаткиАвтомобилей(ДокументОбъектСтруктура);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
