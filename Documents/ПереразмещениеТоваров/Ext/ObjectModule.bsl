// Модуль документа "Переразмещение товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ЗначениеЗаполнено(СкладКомпании) Тогда
			Если СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ячеистый 
				И СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
				УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, 
				НСтр("ru = 'Склад, указанный в документе основании не ячеистый, ввод на основании не возможен.'"));
				Возврат;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//	если заполненые по умолчанию склад не ячеистый, уберем его
	Если СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ячеистый 
		И СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();	
	КонецЕсли;
	
	СкладПолучатель = СкладКомпании;
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Для Каждого СтрТовар Из Товары Цикл
			
			СтрТовар.ЕдиницаИзмеренияНовая = СтрТовар.ЕдиницаИзмерения;
			СтрТовар.КоличествоБазовоеНовое = СтрТовар.КоличествоБазовое;
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПереразмещениеТоваров") Тогда
				СтрокаОснования = ДанныеЗаполнения.Товары[Товары.Индекс(СтрТовар)];
				СтрТовар.Ячейка = СтрокаОснования.ЯчейкаНовая;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрТовар.ЯчейкаНовая) Тогда	
				СтрТовар.ЯчейкаНовая = СтрТовар.Ячейка;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаНаХранениеШин = Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(ДокументОснование);
	Если ХозОперация = Справочники.ХозОперации.ПереразмещениеШин Тогда
		Если ТипЗнч(ЗаявкаНаХранениеШин) <> Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = '%1 должен быть введен на основании документа ""%2"".'"),
					Строка(ХозОперация),
					Метаданные.Документы.ЗаявкаНаХранениеШин
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ЗаявкаНаХранениеШин) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = '%1 не может быть введен на основании документа ""%2"".'"),
					Строка(ХозОперация),
					Метаданные.Документы.ЗаявкаНаХранениеШин
				),
				ЭтотОбъект,,,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовоеНовое) Тогда
			Строка.КоличествоБазовоеНовое = Строка.Количество * Строка.ЕдиницаИзмеренияНовая.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОрдерномуУчетуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// на всякий случай проверим тип склада, его могли поменять в самом справочнике
	Если СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ячеистый И СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Склад документа имеет вид ""%1"". Проведение возможно только для ""Ячеистого"" склада.'"), СкладКомпании.ВидСклада);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		Возврат;
	КонецЕсли; 
	
	Если СкладПолучатель.ВидСклада <> Перечисления.ВидыСкладов.Ячеистый И СкладПолучатель.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Склад-получатель документа имеет вид ""%1"". Проведение возможно только для ""Ячеистого"" склада.'"), СкладПолучатель.ВидСклада);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		Возврат;
	КонецЕсли; 
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// расход
	СписокТоваров = Товары.ВыгрузитьКолонку("Номенклатура");
	НаборЗаписейОстатки = Движения.ОстаткиТоваровОрдерныйСклад;
	НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект  = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании   = СкладКомпании;
	Если ХозОперация = Справочники.ХозОперации.ПереразмещениеШин Тогда
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин = "ЗаявкаНаХранениеШин";
	Иначе
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин = Неопределено;
	КонецЕсли;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейОстатки.Приходовать     = Истина;
	НаборЗаписейОстатки.ПоБазовомуКоличеству = Истина;
	Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	
	// приход
	Запрос=Новый Запрос();
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ДокументТовары.Номенклатура КАК Номенклатура,
	             |	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	ДокументТовары.ЕдиницаИзмеренияНовая КАК ЕдиницаИзмерения,
	             |	ДокументТовары.ЯчейкаНовая КАК Ячейка,
	             |	ДокументТовары.ЗаявкаНаХранениеШин КАК ЗаявкаНаХранениеШин,
	             |	СУММА(ДокументТовары.КоличествоБазовоеНовое) КАК Количество
	             |ИЗ
	             |	Документ.ПереразмещениеТоваров.Товары КАК ДокументТовары
	             |ГДЕ
	             |	ДокументТовары.Ссылка = &Ссылка
	             |	И ДокументТовары.Номенклатура.ВидНоменклатуры <> &Услуга
	             |	И ДокументТовары.ЯчейкаНовая <> ДокументТовары.Ячейка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ДокументТовары.Номенклатура,
	             |	ДокументТовары.ХарактеристикаНоменклатуры,
	             |	ДокументТовары.ЕдиницаИзмеренияНовая,
	             |	ДокументТовары.ЯчейкаНовая,
	             |	ДокументТовары.ЗаявкаНаХранениеШин";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
	
	НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект  = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании   = СкладПолучатель;
	НаборЗаписейОстатки.ЗаявкаНаХранениеШин = "ЗаявкаНаХранениеШин";
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = Запрос.Выполнить();
	НаборЗаписейОстатки.Приходовать     = Истина;
	НаборЗаписейОстатки.ПоБазовомуКоличеству = Истина;
	Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	
	ПроверитьХранениеШинКомплектами(НаборЗаписейОстатки, Отказ);
	
	// двигаем границу последовательности ордерного склада
	РаботаСГраницами.СдвинутьГраницуОрдерногоУчета(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьХранениеШинКомплектами(НаборЗаписейОстатки, Отказ)
	
	ПодразделениеКомпании = ?(ЗначениеЗаполнено(ДокументОснование),
		ДокументОснование.ПодразделениеКомпании,
		ПараметрыСеанса.ПодразделениеКомпании);
	
	ХранениеШинКомплектами = УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами", Дата, ПодразделениеКомпании);
	Если ХранениеШинКомплектами = Неопределено Тогда
		ХранениеШинКомплектами = Истина;
	КонецЕсли;
	
	Если Отказ ИЛИ НЕ ((ХозОперация = Справочники.ХозОперации.ПереразмещениеШин) И (ХранениеШинКомплектами)) Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль остатка шин на хранении
	НаборЗаписейОстатки.Записать();
	ТаблицаОстатковТоваров = РегистрыНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
		Новый Граница(МоментВремени(), ВидГраницы.Включая),
		Новый Структура("ЗаявкаНаХранениеШин",
			Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(ДокументОснование)),
		"ЗаявкаНаХранениеШин,СкладКомпании,Номенклатура,Ячейка",
		"Количество");
	
	ЗаголовокСообщения = Истина;
	СписокЗаявокНаХранениеШин = Новый СписокЗначений;
	ТаблицаОстатковПоЯчейкам = ТаблицаОстатковТоваров.Скопировать();
	ТаблицаОстатковПоЯчейкам.Свернуть("ЗаявкаНаХранениеШин,Ячейка", "Количество");
	Для каждого СтрокаОстатков Из ТаблицаОстатковТоваров Цикл
		Если СписокЗаявокНаХранениеШин.НайтиПоЗначению(СтрокаОстатков.ЗаявкаНаХранениеШин) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокЗаявокНаХранениеШин.Добавить(СтрокаОстатков.ЗаявкаНаХранениеШин);
		
		ЯчейкиЗаявкиНаХранениеШин = ТаблицаОстатковПоЯчейкам.НайтиСтроки(
			Новый Структура("ЗаявкаНаХранениеШин", СтрокаОстатков.ЗаявкаНаХранениеШин));
		Если ЯчейкиЗаявкиНаХранениеШин.Количество() > 1 Тогда
			ЯчейкиЗаявкиНаХранениеШин = ТаблицаОстатковТоваров.НайтиСтроки(
				Новый Структура("ЗаявкаНаХранениеШин", СтрокаОстатков.ЗаявкаНаХранениеШин));
			Если ЗаголовокСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Остатки товаров ордерного склада: Хранение шин допускается только покомплектно.'"),
					ЭтотОбъект,,,
					Отказ);
			КонецЕсли; 
			Для каждого СтрокаОстатковЗаявкиНаХранениеШин Из ЯчейкиЗаявкиНаХранениеШин Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<%1>: склад <%2>. Остаток'"),
					СтрокаОстатковЗаявкиНаХранениеШин.ЗаявкаНаХранениеШин,
					СтрокаОстатковЗаявкиНаХранениеШин.СкладКомпании);
					Если СтрокаОстатковЗаявкиНаХранениеШин.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый
						ИЛИ СтрокаОстатковЗаявкиНаХранениеШин.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
						ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = ' в ячейке <%1>'"),
							СокрЛП(СтрокаОстатковЗаявкиНаХранениеШин.Ячейка));
				КонецЕсли;
				ТекстСообщения = ТекстСообщения
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = ' в количестве <%1>.'"),
						Формат(СтрокаОстатковЗаявкиНаХранениеШин.Количество, "ЧДЦ=0; ЧН=0"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Приходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПриходныйСкладскойОрдерШин Тогда
		
		ХозОперация = Справочники.ХозОперации.ПереразмещениеШин;
		ЗаявкаНаХранениеШин = Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(ДанныеЗаполнения);
		
		Если ТипЗнч(ЗаявкаНаХранениеШин) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			
			Для Каждого Строка Из Товары Цикл
				
				Строка.ЗаявкаНаХранениеШин = ЗаявкаНаХранениеШин;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Переразмещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПереразмещениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ДанныеЗаполнения.ХозОперация;
	СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПереразмещениеТоваров()

// Производит заполнение объекта на основании документа "Приходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ПереразмещениеШин;
	ЗаявкаНаХранениеШин = ДанныеЗаполнения;
	
	Если ТипЗнч(ЗаявкаНаХранениеШин) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
		
		Товары.Очистить();
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ОстаткиТоваровОрдерныйСкладОстатки.СкладКомпании КАК СкладКомпании,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.ЗаявкаНаХранениеШин КАК ЗаявкаНаХранениеШин,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК Количество,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ОсновнаяЕдиницаИзмерения,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК ОсновнаяЕдиницаИзмеренияКоэффициент,
		               |	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
		               |ИЗ
		               |	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
		               |			&Момент,
		               |			СкладКомпании = &СкладКомпании
		               |				И ЗаявкаНаХранениеШин = &ЗаявкаНаХранениеШин) КАК ОстаткиТоваровОрдерныйСкладОстатки
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ячейка,
		               |	Номенклатура,
		               |	ХарактеристикаНоменклатуры";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр(
			"Момент",
			?(ЭтоНовый(),
				Новый Граница(Новый МоментВремени(КонецДня(Дата)), ВидГраницы.Исключая),
				Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая)));
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин", ЗаявкаНаХранениеШин);
		
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
			СтрокаТЧ = Товары.Добавить();
			СтрокаТЧ.Номенклатура = СтрокаОстатков.Номенклатура;
			СтрокаТЧ.ЗаявкаНаХранениеШин = ЗаявкаНаХранениеШин;
			Если НЕ ЗначениеЗаполнено(СтрокаОстатков.ЕдиницаИзмерения) Тогда
				СтрокаТЧ.ЕдиницаИзмерения = СтрокаОстатков.ОсновнаяЕдиницаИзмерения;
				СтрокаТЧ.Количество = СтрокаОстатков.Количество * СтрокаОстатков.ОсновнаяЕдиницаИзмеренияКоэффициент;
				СтрокаТЧ.Коэффициент = СтрокаОстатков.ОсновнаяЕдиницаИзмеренияКоэффициент;
			Иначе
				СтрокаТЧ.Количество = СтрокаОстатков.Количество;
				СтрокаТЧ.Коэффициент = СтрокаОстатков.Коэффициент;
			КонецЕсли; 
			СтрокаТЧ.КоличествоБазовое = СтрокаТЧ.Количество;
			СтрокаТЧ.Ячейка = СтрокаОстатков.Ячейка;
			СтрокаТЧ.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
		КонецЦикла; 
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
