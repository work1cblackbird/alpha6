// Модуль менеджера документа "Переразмещение товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.  
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// выводит в командную панель ТЧ "Товары" длину маршрута
Функция ПолучитьДлинуМаршрута(Объект, Товары = Неопределено)
	
	ДлинаМаршрута = 0;
	СкладКомпании = Объект.СкладКомпании;
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		НачалоОтрезка 	 = Новый Структура("X,Y,Z", СкладКомпании.ВходX, СкладКомпании.ВходY, СкладКомпании.ВходУровень);
		ТочкаВыхода 	 = Новый Структура("X,Y,Z", СкладКомпании.ВыходX, СкладКомпании.ВыходY, СкладКомпании.ВыходУровень);
		
		// проверим есть ли ТЧ Товары. если ее не передали
		Если Товары = Неопределено Тогда
			Товары = ?(ЕстьРеквизит(Объект,,"Товары"), Объект.Товары, Неопределено);
		КонецЕсли;
		
		ЕстьЯчейка = Ложь;
		Если Товары <> Неопределено Тогда
			Для каждого СтрокаТЧ Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
					ЕстьЯчейка = Истина;
					ТекЯчейка = СтрокаТЧ.Ячейка;
					// длина отрезка через координаты его точек
					ДлинаОтрезкаМаршрута = Sqrt((ТекЯчейка.КоординатаX - НачалоОтрезка.X)*(ТекЯчейка.КоординатаX - НачалоОтрезка.X) + (ТекЯчейка.КоординатаY-НачалоОтрезка.Y)*(ТекЯчейка.КоординатаY-НачалоОтрезка.Y) + (ТекЯчейка.Уровень-НачалоОтрезка.Z)*(ТекЯчейка.Уровень-НачалоОтрезка.Z));
					НачалоОтрезка.X = ТекЯчейка.КоординатаX;
					НачалоОтрезка.Y = ТекЯчейка.КоординатаY;
					НачалоОтрезка.Z = ТекЯчейка.Уровень;
					ДлинаМаршрута = ДлинаМаршрута + ДлинаОтрезкаМаршрута;
				КонецЕсли;
			КонецЦикла; 
			// расстояние от последней точки до выхода
			ДлинаМаршрута = ДлинаМаршрута + Sqrt((ТочкаВыхода.X - НачалоОтрезка.X)*(ТочкаВыхода.X - НачалоОтрезка.X) + (ТочкаВыхода.Y-НачалоОтрезка.Y)*(ТочкаВыхода.Y-НачалоОтрезка.Y) + (ТочкаВыхода.Z-НачалоОтрезка.Z)*(ТочкаВыхода.Z-НачалоОтрезка.Z));
			Если Не ЕстьЯчейка Тогда
				// если ячеек в ТЧ нет, длина маршрута от входа к выходу нам не нужна
				ДлинаМаршрута = 0;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДлинаМаршрута;
	
КонецФункции // ВыводДлиныМаршрута()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("СкладПолучатель");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмеренияНовая");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.Ячейка");
	ОбязательныеРеквизиты.Добавить("Товары.ЯчейкаНовая");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПереразмещениеШин Тогда
		ОбязательныеРеквизиты.Добавить("Товары.ЗаявкаНаХранениеШин");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;

КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется вложенный массив.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ЕдиницаИзмеренияНовая");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("Ячейка");
	УникальныеТовары.Добавить("ЯчейкаНовая");
	УникальныеТовары.Добавить("ЕдиницаИзмеренияНовая");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПереразмещениеШин Тогда
		УникальныеТовары.Добавить("ЗаявкаНаХранениеШин");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты=Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",   Ложь);
	КонтролируемыеРеквизиты.Вставить("СкладПолучатель", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("ПересчетСуммы",  ЛОЖЬ);
		
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура("ДлинаМаршрута", ПолучитьДлинуМаршрута(Объект));
	КонецЕсли;
	
КонецПроцедуры // СкладКомпанииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ЕдиницаИзмеренияНовая = Строка.ЕдиницаИзмерения;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Строка.КоличествоБазовоеНовое = Строка.КоличествоБазовое;
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Строка.КоличествоБазовоеНовое = Строка.КоличествоБазовое;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ячейка" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЯчейкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	Если НЕ ЗначениеЗаполнено(Строка.ЯчейкаНовая) И Объект.СкладКомпании = Объект.СкладПолучатель Тогда
		Строка.ЯчейкаНовая = Строка.Ячейка;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,Строка, ПараметрыДействия);
		
КонецПроцедуры //ТоварыЯчейкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ячейка" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЯчейкаНоваяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.ЯчейкаНовая) И Объект.СкладКомпании=Объект.СкладПолучатель Тогда
		Строка.ЯчейкаНовая = Строка.Ячейка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПереразмещениеТоваров");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	//
	ВыборНоменклатуры 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборНоменклатуры.ВыборСсылки 		= "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборНоменклатуры.Обязательный 		= Истина;
	ВыборНоменклатуры.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по группе номенклатуры'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборНоменклатуры);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 		ВыборСклада);
	//	
	ВыборЯчейки 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЯчейки.ВыборСсылки 		= "Справочник.ЯчейкиХранения.ФормаСписка";
	ВыборЯчейки.Обязательный 		= Истина;
	ВыборЯчейки.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать массив ячеек.'");
	ВыборЯчейки.Параметры			= Новый Структура("РежимВыбора,МножественныйВыбор,Отбор", 
										Истина, Истина, Новый Структура("Владелец", "СкладКомпании"));

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по ячейке'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 	ВыборСклада);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("МассивЯчеек", 	ВыборЯчейки);
	//	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить ячейки у выбранных товаров'");
	Команда.Идентификатор	= "ТоварыЗаполнитьЯчейкиУВыбранныхТоваров";
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Оптимизация'");
	Команда.Идентификатор	= "ТоварыОптимизация";
	Команда.Порядок			= 54;
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Погашение минусов'");
	Команда.Идентификатор	= "ТоварыПогашениеМинусов";
	Команда.Порядок			= 55;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",                    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность",                  Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Видимость",            Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Доступность",          Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке.Доступность", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЯчейкиУВыбранныхТоваров.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЯчейкиУВыбранныхТоваров.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по складским остаткам
//
Функция ТоварыЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
		
	// ТоварыЗаполнитьСкладскимиОстатками, ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе
	ПараметрыЗаполнения.Вставить("ИмяРегистра", "ОстаткиТоваровОрдерныйСклад");
	Результат = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	
	Для Каждого СтрокаТовар Из Результат Цикл
		НоваяСтрока                            = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТовар.Номенклатура;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
		Если Объект.СкладКомпании.УчетЕдиницИзмерения<>Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
			Если ЗначениеЗаполнено(СтрокаТовар.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения      = СтрокаТовар.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияНовая = СтрокаТовар.ЕдиницаИзмерения;
				КоэффициентПересчета              = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент/СтрокаТовар.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.Количество            = СтрокаТовар.Количество*КоэффициентПересчета;
			КонецЕсли;
		Иначе
			НоваяСтрока.ЕдиницаИзмерения      = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияНовая = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Количество            = СтрокаТовар.Количество*СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		НоваяСтрока.Ячейка = СтрокаТовар.Ячейка;
		ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		ТоварыЕдиницаИзмеренияПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстатками()

// Обработчик заполнения документа по складским остаткам
//
Функция ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
		
	Результат = ЗаполнениеДокументовСервер.ЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке(Объект, ПараметрыЗаполнения);
	
	Для Каждого СтрокаТовар Из Результат Цикл
		НоваяСтрока                            = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТовар.Номенклатура;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
		Если Объект.СкладКомпании.УчетЕдиницИзмерения<>Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
			Если ЗначениеЗаполнено(СтрокаТовар.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения      = СтрокаТовар.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияНовая = СтрокаТовар.ЕдиницаИзмерения;
				КоэффициентПересчета              = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент/СтрокаТовар.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.Количество            = СтрокаТовар.Количество*КоэффициентПересчета;
			КонецЕсли;
		Иначе
			НоваяСтрока.ЕдиницаИзмерения      = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияНовая = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Количество            = СтрокаТовар.Количество*СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		НоваяСтрока.Ячейка = СтрокаТовар.Ячейка;
		ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		ТоварыЕдиницаИзмеренияПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке()

// Обработчик заполнения ячеек товаров
//
Функция ТоварыЗаполнитьЯчейкиУВыбранныхТоваров(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Сформируем запрос.
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровОрдерныйСкладОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК Количество
	|ИЗ 
	|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(&Момент,Номенклатура В (&Номенклатура) И Ячейка.Владелец = &СкладКомпании) КАК ОстаткиТоваровОрдерныйСкладОстатки
	|
	| ГДЕ НЕ ОстаткиТоваровОрдерныйСкладОстатки.Ячейка.Недоступна
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры.Сортировка ВОЗР";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Момент",?(НЕ ЗначениеЗаполнено(Ссылка),Новый Граница(Новый МоментВремени(КонецДня(Объект.Дата)),ВидГраницы.Исключая), Новый Граница(Объект.Ссылка.МоментВремени(),ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЯчеек = Новый ТаблицаЗначений;
	ТаблицаЯчеек.Колонки.Добавить("Ячейка");
	ТаблицаЯчеек.Колонки.Добавить("Кратность");
	ТаблицаЯчеек.Колонки.Добавить("СтрОстаток");
	
	ТоварыДляЗаполнения = Объект.Товары.Выгрузить();
	
	// Заполним ячейки товаров.
	Для Каждого СтрТовар Из ТоварыДляЗаполнения Цикл
		
		СтрТовар.Ячейка = "";
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", СтрТовар.Номенклатура);
		
		Если Объект.СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.ВедетсяПоПриходуИОтгрузке Тогда
			Если ЗначениеЗаполнено(СтрТовар.ЕдиницаИзмерения) Тогда
				Отбор.Вставить("ЕдиницаИзмерения", СтрТовар.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрТовар.ХарактеристикаНоменклатуры) Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", СтрТовар.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(Отбор);
		
		ТаблицаЯчеек.Очистить();
		
		Для Каждого СтрОстаток Из МассивСтрок Цикл
			
			// Если в ячейке товара недостаточно продолжаем.
			Если СтрОстаток.Количество < СтрТовар.КоличествоБазовое Тогда
				Продолжить;
			КонецЕсли;
			
			Кратность = 0;
			
			Если (ЗначениеЗаполнено(СтрОстаток.ЕдиницаИзмерения)) И (ЗначениеЗаполнено(СтрТовар.ЕдиницаИзмерения)) Тогда
				Если СтрТовар.ЕдиницаИзмерения = СтрОстаток.ЕдиницаИзмерения Тогда
					Кратность = 2;
				Иначе
					Кратность = СтрТовар.ЕдиницаИзмерения.Коэффициент / СтрОстаток.ЕдиницаИзмерения.Коэффициент;
					Если Кратность > 1 Тогда
						Кратность = 1 / Кратность;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЯчеек.Добавить();
			НоваяСтрока.Ячейка = СтрОстаток.Ячейка;
			НоваяСтрока.Кратность = Кратность;
			НоваяСтрока.СтрОстаток = СтрОстаток;
			
		КонецЦикла;
		
		Если ТаблицаЯчеек.Количество() > 0 Тогда
			
			СтрокаСортировки = "";
			Если Объект.СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.ВедетсяПоПриходу Тогда
				СтрокаСортировки = СтрокаСортировки + "Кратность Убыв,";
			КонецЕсли;
			
			// Проверим заполнена ли строка сортировки, если да, то сортируем.
			Если СтрокаСортировки<>"" Тогда
				ТаблицаЯчеек.Сортировать(СтрокаСортировки);
			КонецЕсли;
			
			СтрТовар.Ячейка = ТаблицаЯчеек[0].Ячейка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Загружаем таблицу товаров с заполненными ячейками.
	Объект.Товары.Загрузить(ТоварыДляЗаполнения);
	
КонецФункции // ТоварыЗаполнитьЯчейкиУВыбранныхТоваров()

// Обработчик свертывания однотипных товаров
//
Функция ТоварыОптимизация(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Проверим склады компании на соответствие одному складу
	Если Объект.СкладКомпании <> Объект.СкладПолучатель Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Оптимизация возможна только в пределах одного склада.'"));
		
	Иначе
		
		// Установим текст запроса
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиНаСкладе.СкладКомпании,
		|	ОстаткиНаСкладе.Ячейка,
		|	ОстаткиНаСкладе.Номенклатура КАК Номенклатура,
		|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиНаСкладе.ЕдиницаИзмерения,
		|	ОстаткиНаСкладе.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
		|		&Дата,
		|		Ячейка.Владелец = &Склад
		|		    И (НЕ Ячейка.Недоступна)) КАК ОстаткиНаСкладе
		|ГДЕ
		|	ОстаткиНаСкладе.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
		
		// Установим параметры запроса
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Дата",КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Склад",Объект.СкладКомпании);
		
		// Получим результат запроса
		Результат = Запрос.Выполнить();
		
		// Выгрузим товары в дополнительную таблицу
		ТаблицаТовары = Объект.Товары.Выгрузить();
		ТаблицаДетали = Новый ТаблицаЗначений;
		ТаблицаДетали.Колонки.Добавить("Ячейка");
		ТаблицаДетали.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаДетали.Колонки.Добавить("Количество");
		
		// Произведем выборку из результата по номенклатуре
		ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ТекНоменклатура = ВыборкаНоменклатура.Номенклатура;
			
			// Произведем выборку результата по характеристике
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристика.Следующий() Цикл
				
				ТекХарактеристика = ВыборкаХарактеристика.ХарактеристикаНоменклатуры;
				
				// Произведем детальную выборку
				ВыборкаДетали = ВыборкаХарактеристика.Выбрать();
				
				ТаблицаДетали.Очистить();
				
				// Установим вспомогательные переменные
				Первый = Истина;
				Менялся = Ложь;
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					// Произведем установку признака ячейки с меньшим количеством
					Если Первый Тогда
						ПредположительноНаибольшееЗначение = ВыборкаДетали.Количество;
						ЦелеваяЯчейка = ВыборкаДетали.Ячейка;
						ЦелеваяЕдиницаИзмерения = ВыборкаДетали.ЕдиницаИзмерения;
						Первый = Ложь;
						Продолжить;
					Иначе
						Если ВыборкаДетали.Количество < ПредположительноНаибольшееЗначение Тогда
							Менялся = Истина;
						КонецЕсли
					КонецЕсли;
					
					// Добавим в таблицу
					НоваяСтрока = ТаблицаДетали.Добавить();
					НоваяСтрока.Ячейка = ВыборкаДетали.Ячейка; // старая ячейка
					НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетали.ЕдиницаИзмерения; // старая единица измерения
					НоваяСтрока.Количество = ВыборкаДетали.Количество;
					
				КонецЦикла;
				
				// Если есть ячейки с меньшим количеством, тогда распределяем
				Если Менялся Тогда
					Для Каждого СтрДетали Из ТаблицаДетали Цикл
						НоваяСтрока = ТаблицаТовары.Добавить();
						НоваяСтрока.Номенклатура = ТекНоменклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = ТекХарактеристика;
						НоваяСтрока.Ячейка = СтрДетали.Ячейка;
						НоваяСтрока.ЯчейкаНовая = ЦелеваяЯчейка;
						НоваяСтрока.ЕдиницаИзмерения = СтрДетали.ЕдиницаИзмерения;
						НоваяСтрока.ЕдиницаИзмеренияНовая = ЦелеваяЕдиницаИзмерения;
						НоваяСтрока.Количество = СтрДетали.Количество / ?(НоваяСтрока.ЕдиницаИзмерения.Коэффициент = 0, 1, НоваяСтрока.ЕдиницаИзмерения.Коэффициент);
						ТоварыКоличествоПриИзменении(Объект, НоваяСтрока)
					КонецЦикла;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		
		// Загрузим таблицу товаров в табличную часть
		Объект.Товары.Загрузить(ТаблицаТовары);
		
		// обработаем изменение количества
		Для Каждого СтрТовар Из Объект.Товары Цикл
			СтрТовар.Коэффициент = СтрТовар.ЕдиницаИзмерения.Коэффициент;
			ТоварыКоличествоПриИзменении(Объект, СтрТовар);
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ТоварыОптимизация()

// Обработчик свертывания однотипных товаров
//
Функция ТоварыПогашениеМинусов(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Проверим склады компании на соответствие одному складу
	Если Объект.СкладКомпании <> Объект.СкладПолучатель Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Погашение минусов возможно только в пределах одного склада.'"));
		
	Иначе
		
		// Установим текст запроса
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиНаСкладе.СкладКомпании,
		|	ОстаткиНаСкладе.Ячейка,
		|	ОстаткиНаСкладе.Номенклатура КАК Номенклатура,
		|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиНаСкладе.ЕдиницаИзмерения,
		|	ОстаткиНаСкладе.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
		|		&Дата,
		|		Ячейка.Владелец = &Склад
		|		    И (НЕ Ячейка.Недоступна)) КАК ОстаткиНаСкладе
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
		
		// Установим параметры запроса
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Дата",КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Склад",Объект.СкладКомпании);
		
		// Получим результат запроса
		Результат = Запрос.Выполнить();
		
		// Выгрузим табличную часть с товарами
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		
		// Введем вспомогательные таблицы
		ТаблицаОтрицательных = Новый ТаблицаЗначений;
		ТаблицаОтрицательных.Колонки.Добавить("Ячейка");
		ТаблицаОтрицательных.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаОтрицательных.Колонки.Добавить("Количество");
		
		ТаблицаПоложительных = ТаблицаОтрицательных.Скопировать();
		ТаблицаРезультат = ТаблицаОтрицательных.Скопировать();
		
		// Выберем из результата
		ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			// Получим номенклатуру
			ТекНоменклатура = ВыборкаНоменклатура.Номенклатура;
			
			// Выберем результат из номенклатуры
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристика.Следующий() Цикл
				
				ТекХарактеристика = ВыборкаХарактеристика.ХарактеристикаНоменклатуры;
				ТаблицаПоложительных.Очистить();
				ТаблицаОтрицательных.Очистить();
				
				// Выберем наиболее детальные записи
				ВыборкаДетали = ВыборкаХарактеристика.Выбрать();
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					// Определим куда записывать значение количества
					Если ВыборкаДетали.Количество < 0 Тогда
						НоваяСтрока = ТаблицаОтрицательных.Добавить();
					Иначе
						НоваяСтрока = ТаблицаПоложительных.Добавить();
					КонецЕсли;
					
					НоваяСтрока.Ячейка = ВыборкаДетали.Ячейка;
					НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетали.ЕдиницаИзмерения;
					НоваяСтрока.Количество = ВыборкаДетали.Количество;
					
				КонецЦикла;
				
				// Установим элементы которые необходимо погасить
				Для Каждого СтрокаОтрицательных Из ТаблицаОтрицательных Цикл
					
					КоличествоКПогашению = СтрокаОтрицательных.Количество;
					
					ТаблицаРезультат.Очистить();
					
					Плюсовые = ТаблицаПоложительных.Скопировать();
					
					Для Каждого СтрокаПоложительных Из Плюсовые Цикл
						
						Разница = КоличествоКПогашению + СтрокаПоложительных.Количество;
						
						Если Разница >= 0 Тогда
							КоличествоВРезультат = -КоличествоКПогашению;
							СтрокаПоложительных.Количество = Разница;
							КоличествоКПогашению = 0;
						Иначе
							КоличествоВРезультат = СтрокаПоложительных.Количество;
							КоличествоКПогашению = КоличествоКПогашению + СтрокаПоложительных.Количество;
							СтрокаПоложительных.Количество = 0;
						КонецЕсли;
						
						НоваяСтрока = ТаблицаРезультат.Добавить();
						НоваяСтрока.Ячейка = СтрокаПоложительных.Ячейка; // старая ячейка
						НоваяСтрока.Количество = КоличествоВРезультат;
						НоваяСтрока.ЕдиницаИзмерения = СтрокаПоложительных.ЕдиницаИзмерения; // старая единица измерения
						
						Если КоличествоКПогашению = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Если удалось погасить отрицательный остаток
					Если КоличествоКПогашению <= 0 Тогда
						
						ТаблицаПоложительных = Плюсовые.Скопировать();
						
						Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
							
							НоваяСтрока = ТаблицаТоваров.Добавить();
							НоваяСтрока.Номенклатура = ТекНоменклатура;
							НоваяСтрока.ХарактеристикаНоменклатуры = ТекХарактеристика;
							НоваяСтрока.Ячейка = СтрокаРезультат.Ячейка;
							НоваяСтрока.ЯчейкаНовая = СтрокаОтрицательных.Ячейка;
							НоваяСтрока.ЕдиницаИзмерения = СтрокаРезультат.ЕдиницаИзмерения;
							НоваяСтрока.ЕдиницаИзмеренияНовая = СтрокаОтрицательных.ЕдиницаИзмерения;
							НоваяСтрока.Количество = СтрокаРезультат.Количество / ?(НоваяСтрока.ЕдиницаИзмерения.Коэффициент = 0, 1, НоваяСтрока.ЕдиницаИзмерения.Коэффициент);
							ТоварыКоличествоПриИзменении(Объект, НоваяСтрока);
							
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
		// Загружаем таблицу товаров в табличную часть
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
		// Обработаем изменение количества
		Для Каждого СтрТовар Из Объект.Товары Цикл
			СтрТовар.Коэффициент = СтрТовар.ЕдиницаИзмерения.Коэффициент;
			ТоварыКоличествоПриИзменении(Объект, СтрТовар);
		КонецЦикла
		
	КонецЕсли;
	
КонецФункции // ТоварыПогашениеМинусов()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПереразмещениеТоваров",
		"ПФ_MXL_ПереразмещениеТоваров",
		НСтр("ru = 'Переразмещение товаров'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПереразмещениеТоваров",
		"ПФ_MXL_ПодборочныйЛист",
		НСтр("ru = 'Подборочный лист'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПереразмещениеТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПереразмещениеТоваров",
															НСтр("ru = 'Переразмещение товаров'"),
													ПечатьПереразмещениеТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодборочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПодборочныйЛист",
															НСтр("ru = 'Подборочный лист'"),
															ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьПереразмещениеТоваров(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПереразмещениеТоваров_ПереразмещениеТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
		
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПереразмещениеТоваров.ПФ_MXL_ПереразмещениеТоваров");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа.
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Переразмещение товаров'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.СкладКомпании);
		
		Если Документ.СкладКомпании = Документ.СкладПолучатель Тогда
			ОбластьЗаголовок.Параметры.НадписьСклад = "Склад:";
			ОбластьЗаголовок.Параметры.СкладПолучатель = Неопределено;
			ОбластьЗаголовок.Параметры.ПредставлениеСкладаПолучателя = Неопределено;
		Иначе
			СкладПолучатель = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладПолучатель);
			ОбластьЗаголовок.Параметры.НадписьСклад = НСтр("ru = 'Склад отправитель:'");
			ОбластьЗаголовок.Параметры.НадписьСкладПолучатель = НСтр("ru = 'Склад получатель:'");
			ОбластьЗаголовок.Параметры.ПредставлениеСкладаПолучателя = СкладПолучатель;
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки.
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("ЕдиницаИзмеренияНовая", СтрокаТЧ.ЕдиницаИзмеренияНовая);
			СтруктураСтроки.Вставить("Ячейка",СтрокаТЧ.Ячейка);
			СтруктураСтроки.Вставить("ЯчейкаНовая", СтрокаТЧ.ЯчейкаНовая);
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ОтпустилКонтрагент", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПриходныйСкладскойОрдер()

// функция печати подборочного лист
//
Функция ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодборочныйЛист_ПодборочныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получим макет печатной формы.
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПодборочныйЛист");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		
		// Настроим макет отчета.
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за ее счет колонку "Товар".
		ЕстьЯчейкиХранения=Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения,ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Получение необходимых областей.
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет,Документ);
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры,Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, НСтр("ru = 'Подборочный лист'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// * //
		ОбластьЗаголовок.Параметры.Склад      = НСтр("ru = 'Склад отправитель:'");
		ОбластьЗаголовок.Параметры.Покупатель = НСтр("ru = 'Склад получатель:'");
		
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладПолучатель);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада     = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		// * //
				
		// Выведем или удалим ШК.
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
		
		// Заполняем ТЧ
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ,Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его.
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка 	= ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати)," ",ЯчейкаДляПечати);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтруктураСтроки);
			
			// Доп. области.
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
					
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ПолучилКонтрагент","Получил"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПереразмещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПереразмещениеТоваров);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли