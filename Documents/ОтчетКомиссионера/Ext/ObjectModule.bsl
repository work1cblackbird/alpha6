// Модуль документа "Отчет комиссионера"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// посчитаем вознаграждение
	Для Каждого СтрокаТЧ Из Товары Цикл
		Документы.ОтчетКомиссионера.УстановитьВознаграждение(ЭтотОбъект, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	// подготовим таблицу для накопления сумм суммовых разниц по подразделениям
	ТаблицаСуммовыхРазниц = Новый ТаблицаЗначений();
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	
	НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
	НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
	ТаблицаТоваров = Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("ДокументПередачи","СуммаВсего,Вознаграждение,СпособЗачетаАвансов");
	Для каждого СтрокаВзаиморасчетов Из ТаблицаТоваров Цикл
		
		Если ЕстьРеквизит(СтрокаВзаиморасчетов.ДокументПередачи, "ДоговорВзаиморасчетов")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаВзаиморасчетов.ДокументПередачи,
				"ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов") = 
				Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
				
				Продолжить;
				
		КонецЕсли;
		
		НаборЗаписейВзаиморасчеты.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения           = РежимПроведения;
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписейВзаиморасчеты.Контрагент                = СтрокаВзаиморасчетов.ДокументПередачи.Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов     = СтрокаВзаиморасчетов.ДокументПередачи.ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.Сделка                    = СтрокаВзаиморасчетов.ДокументПередачи;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок        =
			СтрокаВзаиморасчетов.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
		НаборЗаписейВзаиморасчеты.Сумма                     = СтрокаВзаиморасчетов.СуммаВсего-СтрокаВзаиморасчетов.Вознаграждение;
		
		// Доходы и расходы по суммовым разницам.
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		СтрокаСуммовыхРазниц = ТаблицаСуммовыхРазниц.Добавить();
		СтрокаСуммовыхРазниц.Подразделение = СтрокаВзаиморасчетов.ДокументПередачи.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		СтрокаСуммовыхРазниц.Сумма         = СуммаДоходаРасходаСуммовыхРазниц;
		УстановитьПривилегированныйРежим(Ложь);
		
		Отказ=НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
	КонецЦикла; 
	
	Документы.ОтчетКомиссионера.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ОтчетКомиссионера.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// доходы и расходы по суммовым разницам
	ТаблицаСуммовыхРазниц.Свернуть("Подразделение","Сумма");
	Для Каждого СтрокаСуммовыхРазниц Из ТаблицаСуммовыхРазниц Цикл
		Если СтрокаСуммовыхРазниц.Сумма<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = СтрокаСуммовыхРазниц.Подразделение;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СтрокаСуммовыхРазниц.Сумма<0 Тогда
				НаборЗаписейДиР.Расход = -СтрокаСуммовыхРазниц.Сумма;
			Иначе
				НаборЗаписейДиР.Доход = СтрокаСуммовыхРазниц.Сумма;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЦикла;		
	       	
	// партии
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация=Справочники.ХозОперации.РеализацияТоваровКомиссия
		ИЛИ ДанныеЗаполнения.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ДокументПередачи = ДанныеЗаполнения;
			Документы.ОтчетКомиссионера.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТЧ,ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Ввод остатков товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по реализации
	Возврат ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковТоваров()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СУММА(ОтчетКомиссионераТовары.СуммаВсего) КАК СуммаВсего,
	                    |	СУММА(ОтчетКомиссионераТовары.Вознаграждение) КАК Вознаграждение
	                    |ПОМЕСТИТЬ ДокТовары
	                    |ИЗ
	                    |	Документ.ОтчетКомиссионера.Товары КАК ОтчетКомиссионераТовары
	                    |ГДЕ
	                    |	ОтчетКомиссионераТовары.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Док.Ссылка КАК Ссылка,
	                    |	Док.Дата КАК Дата,
	                    |	Док.ВалютаДокумента КАК ВалютаДокумента,
	                    |	Док.КурсДокумента КАК КурсДокумента,
	                    |	Док.ТипЦен КАК ТипЦен,
	                    |	Док.ХозОперация КАК ХозОперация,
	                    |	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	                    |	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	                    |	Док.МоментВремени КАК МоментВремени,
	                    |	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	                    |	Док.Проект КАК Проект,
	                    |	Док.СуммаДокумента КАК СуммаДокумента,
	                    |	Док.Ссылка КАК ДокументПродажи,
	                    |	Док.Контрагент КАК Контрагент,
	                    |	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                    |	ЕСТЬNULL(ДокТовары.СуммаВсего, 0) КАК СуммаВсего,
	                    |	ЕСТЬNULL(ДокТовары.Вознаграждение, 0) КАК Вознаграждение
	                    |ИЗ
	                    |	Документ.ОтчетКомиссионера КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	                    |		ПО (ИСТИНА)
	                    |ГДЕ
	                    |	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// возвращает выборку по товарной части
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по товарной части.
//
Функция ПолучитьТоварнуюЧастьДокумента(ДокументСсылка)
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	/////////// ПРИВАТ ////////////
	|	ДокТовары.ДокументПередачи КАК ДокументПередачи,
	|	ДокТовары.ГТД КАК ГТД,
	|	ЕСТЬNULL(ДокТовары.СуммаВсего,0) КАК СуммаВсего,
	|	ЕСТЬNULL(ДокТовары.Вознаграждение,0) КАК Вознаграждение
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+".Товары Как ДокТовары
	|ГДЕ
	|	ДокТовары.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// получим товарную часть документа
	ТоварнаяЧасть = ПолучитьТоварнуюЧастьДокумента(ДокументСсылка);
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.Доход                  = ШапкаДокумента.СуммаВсего-ШапкаДокумента.Вознаграждение;
		НаборЗаписейДоходыИРасходы.Приход();
		Возврат НЕ Отказ;
	КонецЕсли;
	
	НаборЗаписейПартииОтданные=Движения.ПартииТоваровОтданные;
	НаборЗаписейПартииОтданные.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартииОтданные.Контрагент=ШапкаДокумента.Контрагент;
	НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
	НаборЗаписейПартииОтданные.ОтчетКомиссионера=Истина;
	НаборЗаписейПартииОтданные.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейПартииОтданные.Расход() ИЛИ Отказ; 
	
	// продажи
	Если НЕ Отказ Тогда
		НаборЗаписейПродажи=Движения.Продажи;
		НаборЗаписейПродажи.РежимПроведения = Режим;
		НаборЗаписейПродажи.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейПродажи.СкладКомпании=Справочники.СкладыКомпании.ПустаяСсылка();
		НаборЗаписейПродажи.ДокументПродажи=ШапкаДокумента.ДокументПродажи;
		НаборЗаписейПродажи.Сторно=Ложь;
		НаборЗаписейПродажи.Покупатель=ШапкаДокумента.Контрагент;
		НаборЗаписейПродажи.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
		НаборЗаписейПродажи.ПодразделениеКомпании=ШапкаДокумента.ПодразделениеКомпании;
		НаборЗаписейПродажи.Комиссия=Истина;
		НаборЗаписейПродажи.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейПродажи.РезультатЗапросаПоПартиям=НаборЗаписейПартииОтданные.Выгрузить();
		Отказ=НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
	КонецЕсли;

	// Доходы и расходы
	// сумма себестоимости списанных товаров.
	НаборЗаписейПартииОтданные=Движения.ПартииТоваровОтданные;
	СебестоимостьУпр=НаборЗаписейПартииОтданные.Итог("СуммаСебестоимостиУпр");
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
	НаборЗаписейДоходыИРасходы.Расход=СебестоимостьУпр;	
	НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	// Определим суммы по подразделениям
	// подготовим таблицу для накопления сумм по подразделениям.
	ТаблицаСуммПоПодразделениям = Новый ТаблицаЗначений();
	ТаблицаСуммПоПодразделениям.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	
	ТаблицаСуммПоПодразделениям.Колонки.Добавить("СуммаВсего",     Новый ОписаниеТипов("Число"));
	ТаблицаСуммПоПодразделениям.Колонки.Добавить("Вознаграждение", Новый ОписаниеТипов("Число"));
	Пока ТоварнаяЧасть.Следующий() Цикл
		СтрокаСумм = ТаблицаСуммПоПодразделениям.Добавить();
		Если БалансВедетсяПоПодразделениям Тогда
			СтрокаСумм.Подразделение  = ТоварнаяЧасть.ДокументПередачи.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		Иначе
			СтрокаСумм.Подразделение  = ШапкаДокумента.ПодразделениеКомпании;
		КонецЕсли;
		СтрокаСумм.СуммаВсего     = ТоварнаяЧасть.СуммаВсего;
		СтрокаСумм.Вознаграждение = ТоварнаяЧасть.Вознаграждение;
	КонецЦикла;
	
	ТаблицаСуммПоПодразделениям.Свернуть("Подразделение","СуммаВсего,Вознаграждение");
	
	Для Каждого СтрокаСумм Из ТаблицаСуммПоПодразделениям Цикл
		// Сумма комиссионного вознаграждения
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = СтрокаСумм.Подразделение;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Вознаграждение;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.Расход                 = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСумм.Вознаграждение,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,Константы.ВалютаУправленческогоУчетаКомпании.Получить(),?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр));
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		
		// СуммаВсего - списанная сумма товарной задолженности
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение		  = СтрокаСумм.Подразделение;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте			  = Истина;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.Доход                  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСумм.СуммаВсего,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,Константы.ВалютаУправленческогоУчетаКомпании.Получить(),?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр));
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЦикла;
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
