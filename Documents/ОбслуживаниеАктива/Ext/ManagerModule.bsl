// Модуль менеджера документа "Обслуживание актива"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.  
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Вычислим сумму списания товаров
	СуммаДокумента = ?(ЕстьРеквизит(Объект, "СуммаСписания", "Товары"), Объект.Товары.Итог("СуммаСписания"), 0);
	СуммаДокумента = СуммаДокумента + Объект.СтоимостьСобственныхУслуг + Объект.СтоимостьСтороннихУслуг + Объект.ОприходованныеЦенности.Итог("Сумма");
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Производим добавление сведений о розничной сумме только в случае, если выбран розничный склад.
	ИтогиОперации.Вставить("СтоимостьСобственныхУслуг", Объект.СтоимостьСобственныхУслуг);
	ИтогиОперации.Вставить("СтоимостьСтороннихУслуг",   Объект.СтоимостьСтороннихУслуг);
	ИтогиОперации.Вставить("ОприходованныеЦенности",    Объект.ОприходованныеЦенности.Итог("Сумма"));
	
	// Производим добавление сведений о розничной сумме только в случае, если выбран розничный склад.
	Если Объект.СкладКомпании.Розничный Тогда
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		ИтогиОперации.Вставить("ПроцентНаценки", ?(ИтогиОперации.СуммаДокумента=0, 0, Окр(ИтогиОперации.СуммаРозничная/ИтогиОперации.СуммаДокумента-1, 2)*100));
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Актив");
	ОбязательныеРеквизиты.Добавить("ТипОбслуживания");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ОбслуживаниеАктиваНаРасходыПодразделения Тогда
		ОбязательныеРеквизиты.Добавить("СтатьяРасходов");
	КонецЕсли;
	
	Если Объект.СтоимостьСобственныхУслуг > 0 Тогда
		ОбязательныеРеквизиты.Добавить("ПодразделениеОказывающееУслугу");
		ОбязательныеРеквизиты.Добавить("СтатьяДоходов");
	КонецЕсли;
	
	Если Объект.СтоимостьСтороннихУслуг > 0 Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	Если Объект.ОприходованныеЦенности.Количество() > 0 Тогда
		ОбязательныеРеквизиты.Добавить("СтатьяДоходовПоОприходованнымЦенностям");
	КонецЕсли;
	
	// товары
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// ценности
	ОбязательныеРеквизиты.Добавить("ОприходованныеЦенности.Номенклатура");
	ОбязательныеРеквизиты.Добавить("ОприходованныеЦенности.Количество");
	ОбязательныеРеквизиты.Добавить("ОприходованныеЦенности.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("ОприходованныеЦенности.Коэффициент");
	
	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;

КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Уникальные ценности
	УникальныеЦенности = Новый Массив();
	УникальныеЦенности.Добавить("Номенклатура");
	УникальныеЦенности.Добавить("ЕдиницаИзмерения");
	УникальныеЦенности.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары",                 УникальныеТовары);
	УникальныеРеквизиты.Вставить("ОприходованныеЦенности", УникальныеЦенности);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	Если Объект.СтоимостьСобственныхУслуг > 0 Тогда
		КонтролируемыеРеквизиты.Вставить("ПодразделениеОказывающееУслугу");
	КонецЕсли;
	
	Если Объект.СтоимостьСтороннихУслуг > 0 Тогда
		КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонецЕсли;
	
	Если НЕ Объект.СкладКомпании.Пустая() Тогда
		КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("РасчетыСПокупателем", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	Если ТребуетсяУстановкаЦен Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
		Для Каждого Строка Из Объект.ОприходованныеЦенности Цикл
			Строка.Цена = ЦенообразованиеСервер.ПолучитьЦену(Объект.ТипЦен, Строка.Номенклатура, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка.МоментВремени(), Объект.Дата),, Объект.ВалютаДокумента, Объект.КурсДокумента, Строка.ХарактеристикаНоменклатуры, Строка.ЕдиницаИзмерения, Объект.ПодразделениеКомпании);
			ОприходованныеЦенностиЦенаПриИзменении(Объект, Строка);
		КонецЦикла;
	КонецЕсли;
	
	
	Если ТребуетсяПересчетЦен Тогда
		ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ТекстСообщения = НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс = НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		
		Если НЕ ТребуетсяУстановкаЦен Тогда
			Для Каждого Строка Из Объект.ОприходованныеЦенности Цикл
				Строка.Цена = Окр(Строка.Цена*КоэффициентСоотношенияКурсов, 2);
				ОприходованныеЦенностиЦенаПриИзменении(Объект, Строка);
			КонецЦикла;
		КонецЕсли;
		
		Объект.СтоимостьСобственныхУслуг = Окр(Объект.СтоимостьСобственныхУслуг*КоэффициентСоотношенияКурсов, 2);
		Объект.СтоимостьСтороннихУслуг   = Окр(Объект.СтоимостьСтороннихУслуг*КоэффициентСоотношенияКурсов, 2);
	КонецЕсли;
	
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	Объект.ПодразделениеОказывающееУслугу = Объект.ПодразделениеКомпании;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	// Заполним статью расходов
	Если Объект.ХозОперация=Справочники.ХозОперации.ОбслуживаниеАктиваНаРасходыПодразделения Тогда
		Объект.СтатьяРасходов = Объект.ТипОбслуживания.СтатьяДоходовИРасходов;
	КонецЕсли;
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.СкладКомпании) Тогда
		
		Если Объект.СкладКомпании.Розничный И ЗначениеЗаполнено(Объект.СкладКомпании.ТипЦенРозничнойТорговли) Тогда
			Для Каждого Строка Из Объект.ОприходованныеЦенности Цикл
				ОприходованныеЦенностиУстановитьРозничнуюЦену(Объект, Строка);
				ОприходованныеЦенностиЦенаРозничнаяПриИзменении(Объект, Строка);
			КонецЦикла;
			Для Каждого Строка Из Объект.Товары Цикл
				ОбработкаТабличнойЧастиТовары.УстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия);
				ТоварыЦенаРозничнаяПриИзменении(Объект, Строка);
			КонецЦикла;
		Иначе
			Для Каждого Строка Из Объект.ОприходованныеЦенности Цикл
				Строка.ЦенаРозничная = 0;
				ОприходованныеЦенностиЦенаРозничнаяПриИзменении(Объект, Строка);
			КонецЦикла;
			Для Каждого Строка Из Объект.Товары Цикл
				Строка.ЦенаРозничная = 0;
				ТоварыЦенаРозничнаяПриИзменении(Объект, Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Актив".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Актив) Тогда
		Если Объект.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецодежда 
			ИЛИ Объект.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка
			ИЛИ Объект.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Инструменты 
			ИЛИ Объект.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В документ нельзя вводить активы вида <%1>'"),
					Объект.Актив.ВидПрочегоАктива
				),
				Объект.Ссылка
			);
			Объект.Актив = Справочники.ПрочиеАктивы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // АктивПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ТипОбслуживания".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипОбслуживанияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Объект.СтатьяРасходов = Объект.ТипОбслуживания.СтатьяДоходовИРасходов;
	
КонецПроцедуры // ТипОбслуживанияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	Если ПараметрыДействия.Свойство("ИмяТабличнойЧасти") Тогда 
		ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия, ПараметрыДействия.ИмяТабличнойЧасти);
	Иначе
		ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
		
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОприходованныеЦенности

Процедура ОприходованныеЦенностиУстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия=Неопределено)
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Заполним розничную цену (для розничного склада)
	Если ЗначениеЗаполнено(Объект.СкладКомпании) И Объект.СкладКомпании.Розничный Тогда
		Если ЗначениеЗаполнено(Строка.Номенклатура) И (Строка.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга) Тогда
			Строка.ЦенаРозничная = ЦенообразованиеСервер.ПолучитьЦену(Объект.СкладКомпании.ТипЦенРозничнойТорговли,
												  Строка.Номенклатура,
												  ?(Объект.Ссылка.Пустая(),Объект.Дата,Объект.Ссылка.МоментВремени()),,,,
												  Строка.ХарактеристикаНоменклатуры,
												  Строка.ЕдиницаИзмерения,
												  Объект.СкладКомпании.ПодразделениеКомпании);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ОприходованныеЦенностиНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры"
// в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия,"ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения"
// в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Пересчитаем сумму строки по измененным показателям
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиКоличествоПриИзменении() 

// Обработчик события возникающего при изменении данных реквизита "Количество базовое"
// в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена розничная" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия, "ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма розничная" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия,"ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиСуммаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия,"ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Оприходованные ценности".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОприходованныеЦенностиСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия,"ОприходованныеЦенности");
	
КонецПроцедуры // ОприходованныеЦенностиСуммаНДСПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ОбслуживаниеАктива",
		"ПФ_MXL_ОбслуживаниеАктива",
		НСтр("ru = 'Обслуживание актива'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ОбслуживаниеАктива",
		"ПФ_MXL_ОС3",
		НСтр("ru = 'ОС3 (Акт приема/сдачи основных средств)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОбслуживаниеАктива") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ОбслуживаниеАктива",
															НСтр("ru = 'Обслуживание актива'"),
															ПечатьОбслуживаниеАктива(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОС3") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ОС3",
															НСтр("ru = 'ОС3 (Акт приема/сдачи основных средств)'"),
															ПечатьОС3(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Формирует печатную форму "ОС3"
//
Функция ПечатьОС3(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОбслуживаниеАктива_ОС3";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОбслуживаниеАктива.ПФ_MXL_ОС3");
		
		// зададим параметры печати
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ОбластьЗаголовок      	= Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока1        	= Макет.ПолучитьОбласть("Строка1");
		ОбластьШапка2      	  	= Макет.ПолучитьОбласть("Шапка2");
		ОбластьСтрока2         	= Макет.ПолучитьОбласть("Строка2");
		ОбластьПодвал          	= Макет.ПолучитьОбласть("Подвал");
		ОбластьОборотнаяСторона	= Макет.ПолучитьОбласть("ОборотнаяСторона");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = Новый Структура("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		
		// Заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.КонтрагентПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПодразделениеКомпании = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, Документ.Дата);
		
		ОбластьЗаголовок.Параметры.ОрганизацияПоОКПО = Документ.Организация.КодПоОКПО;
		ОбластьЗаголовок.Параметры.КонтрагентПоОКПО  = Документ.Контрагент.КодПоОКПО;
		ОбластьЗаголовок.Параметры.Валюта            = Документ.ВалютаДокумента;
		
		// Заполним информацию о руководителе организации
		ОбластьЗаголовок.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель"));
		
		// Информация о договоре
		Если ЗначениеЗаполнено(Документ.ДоговорВзаиморасчетов) Тогда
			ОбластьЗаголовок.Параметры.ДатаДоговора  = Документ.ДоговорВзаиморасчетов.ДатаНачала;
			ОбластьЗаголовок.Параметры.НомерДоговора = Документ.ДоговорВзаиморасчетов.НомерДоговора;
		КонецЕсли; 
		ОбластьЗаголовок.Параметры.Номер = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапка2.Параметры.Валюта = Документ.ВалютаДокумента;
		ОбластьПодвал.Параметры.Валюта = Документ.ВалютаДокумента;

		ВРегВалюте = (Документ.ВалютаДокумента=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
		ТекстСумм="";
		Если ВРегВалюте Тогда
			ТекстСумм=",
		|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьОстаток, 0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииОстаток, 0) КАК ОстаточнаяСтоимость,
		|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаОбслуживания, 0) КАК СуммаЗатрат";
		Иначе
			ТекстСумм=",
		|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьУпрОстаток, 0) * &МножительКурса - ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииУпрОстаток, 0) * &МножительКурса КАК ОстаточнаяСтоимость,
		|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаОбслуживанияУпр, 0) * &МножительКурса КАК СуммаЗатрат";
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбслуживаниеАктива.Актив.Наименование КАК НаимОс,
		|	ОбслуживаниеАктива.Актив.ИнвентарныйНомер КАК ИнвНомер,
		|	ОбслуживаниеАктива.Актив.СерийныйНомер КАК ЗаводскойНомер,
		|	ОбслуживаниеАктива.Актив.СрокПолезногоИспользования КАК СрокЭкспл,
		|	ОбслуживаниеАктива.ТипОбслуживания КАК ВидРабот,
		|	ОбслуживаниеАктива.Актив"+ТекстСумм+"
		|ИЗ
		|	Документ.ОбслуживаниеАктива КАК ОбслуживаниеАктива
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
		|		ПО ОбслуживаниеАктива.Актив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
		|			И ОбслуживаниеАктива.Ссылка = ПрочиеАктивыВЭксплуатации.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(&Дата, ) КАК ПрочиеАктивыВЭксплуатацииОстатки
		|		ПО ОбслуживаниеАктива.ПодразделениеКомпании = ПрочиеАктивыВЭксплуатацииОстатки.ПодразделениеКомпании
		|			И ОбслуживаниеАктива.Актив = ПрочиеАктивыВЭксплуатацииОстатки.ПрочийАктив
		|ГДЕ
		|	ОбслуживаниеАктива.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		Запрос.УстановитьПараметр("Дата", Документ.Дата);
		Если НЕ ВРегВалюте Тогда
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			Если НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
				Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
			Иначе
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			Запрос.УстановитьПараметр("МножительКурса", МножительКурса);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()Тогда
			ОбластьСтрока1.Параметры.Заполнить(Выборка);
			ОбластьСтрока2.Параметры.Заполнить(Выборка);
			ОбластьСтрока1.Параметры.ОстаточнаяСтоимость = Формат(Выборка.ОстаточнаяСтоимость, ФорматВыводаСуммы);
			СуммаЗатрат = Формат(Выборка.СуммаЗатрат,ФорматВыводаСуммы);
			ОбластьСтрока2.Параметры.СуммаЗатрат = СуммаЗатрат;
			ОбластьПодвал.Параметры.СуммаЗатрат = СуммаЗатрат;
			ОбластьПодвал.Параметры.СтоимостьКонечнаяПеч = Формат(
				?(Документ.ХозОперация = Справочники.ХозОперации.ОбслуживаниеАктиваНаРасходыПодразделения,
					Выборка.ОстаточнаяСтоимость, Выборка.ОстаточнаяСтоимость + Выборка.СуммаЗатрат),
				ФорматВыводаСуммы);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьСтрока1);
		ТабличныйДокумент.Вывести(ОбластьШапка2);
		ТабличныйДокумент.Вывести(ОбластьСтрока2);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Печать оборотной стороны
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьОборотнаяСторона.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		ОбластьОборотнаяСторона.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредседательКомиссии"));
		ОбластьОборотнаяСторона.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ЧленКомиссии1"));
		ОбластьОборотнаяСторона.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ЧленКомиссии2"));
		ОбластьОборотнаяСторона.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		ОбластьОборотнаяСторона.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ТабличныйДокумент.Вывести(ОбластьОборотнаяСторона);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьОС3()

// Формирует печатную форму "ОбслуживаниеАктива"
//
Функция ПечатьОбслуживаниеАктива(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОбслуживаниеАктива_ОбслуживаниеАктива";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		Если Документ.ВалютаДокумента = ВалютаРегл Тогда
			ИмяРесурсаСуммы       = "Сумма";
			ИмяРесурсаСуммыБезНДС = "СуммаБезНДС";
			ТребуетсяПересчет     = Ложь;
		ИначеЕсли Документ.ВалютаДокумента = ВалютаУпр Тогда
			ИмяРесурсаСуммы       = "СуммаУпр";
			ИмяРесурсаСуммыБезНДС = "СуммаБезНДСУпр";
			ТребуетсяПересчет     = Ложь;
		Иначе
			ИмяРесурсаСуммы       = "СуммаУпр";
			ИмяРесурсаСуммыБезНДС = "СуммаБезНДСУпр";
			ТребуетсяПересчет     = Истина;
		КонецЕсли;
		
		Если ТребуетсяПересчет Тогда
			
			Если ЕстьРеквизит(Документ, "КурсВалютыУпр") И ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
				КурсВалютыУпр = Документ.КурсВалютыУпр;
			Иначе
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Документ.Дата);
				КурсВалютыУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			КонецЕсли;
			
			КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУпр, КурсВалютыУпр,
				Документ.ВалютаДокумента, Документ.КурсДокумента);
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОбслуживаниеАктива.ПФ_MXL_ОбслуживаниеАктива");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка           = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтог            = Макет.ПолучитьОбласть("Итог");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделенияКомпании =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, Документ.Дата);
		ОбластьЗаголовок.Параметры.ПредставлениеАктива =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Актив);
		ОбластьЗаголовок.Параметры.ПредставлениеТипаОбслуживания =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипОбслуживания);
		ОбластьЗаголовок.Параметры.ПредставлениеСтатьиРасходов =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СтатьяРасходов);
	
		// Выводим свойства
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапка.Параметры.Заполнить(Документ);
		ОбластьШапка.Параметры.СтоимостьСобственныхУслуг =
			Формат(Документ.СтоимостьСобственныхУслуг, ФорматВыводаСуммы) + " "+ Документ.ВалютаДокумента;
		ОбластьШапка.Параметры.СтоимостьСтороннихУслуг =
			Формат(Документ.СтоимостьСтороннихУслуг, ФорматВыводаСуммы)   + " "+ Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Перебор строк
		ВыборкаТабличнойЧасти = Документ.Товары;
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда
			// Теперь выводим шапку.
			ОбластьШапкаТаблицы.Параметры.Товар = НСтр("ru = 'Расходные материалы'");
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаБезНДС,СуммаВсего",
				Документ.ВалютаДокумента, 0, 0);
			
			// Заполним параметры шапки таблицы для следующего листа.
			ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			
			ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
			ПараметрыПолучения.ИмяРегистра          = "ПартииТоваровКомпании";
			ПараметрыПолучения.ИспользуемыеРесурсы  = Новый Структура(ИмяРесурсаСуммы + "," + ИмяРесурсаСуммыБезНДС);
			ПараметрыПолучения.ВидДвиженияПриход    = ВидДвиженияНакопления.Расход;
			ПараметрыПолучения.ДобавлятьНомерСтроки = Истина;
			
			КэшТаблица = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Документ, ПараметрыПолучения);
			
			Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
				
				// Заполняем данные строки.
				СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
				
				Отбор = Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки);
				
				Если Отбор.Количество() > 0 Тогда
					МассивСумм = КэшТаблица.НайтиСтроки(Отбор);
					Если МассивСумм.Количество() > 0 Тогда
						Сумма       = 0;
						СуммаБезНДС = 0;
						Для Каждого СтрМассивСумм Из МассивСумм Цикл
							Сумма       = Сумма + СтрМассивСумм[ИмяРесурсаСуммы];
							СуммаБезНДС = СуммаБезНДС + СтрМассивСумм[ИмяРесурсаСуммыБезНДС];
						КонецЦикла;
					КонецЕсли;
				Иначе
					Сумма       = КэшТаблица.Итог(ИмяРесурсаСуммы);
					СуммаБезНДС = КэшТаблица.Итог(ИмяРесурсаСуммыБезНДС);
				КонецЕсли;
				
				Если ТребуетсяПересчет Тогда
					Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, ВалютаУпр, КурсВалютыУпр,
						Документ.ВалютаДокумента, Документ.КурсДокумента);
					СуммаБезНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаБезНДС, ВалютаУпр, КурсВалютыУпр,
						Документ.ВалютаДокумента, Документ.КурсДокумента);
				КонецЕсли;
				
				Цена  = Сумма / СтрокаТЧ.Количество / СтрокаТЧ.Коэффициент;
				
				СтруктураСтроки.Вставить("Цена",        Формат(Цена,        ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаВсего",  Формат(Сумма,       ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаБезНДС", Формат(СуммаБезНДС, ФорматВыводаСуммы));
				
				ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
				
				// Доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьИтог);
					мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
					Если Документ.ОприходованныеЦенности.Количество() > 0 Тогда
						мсвДопОбластиПодвала.Добавить(ОбластьШапкаТаблицы);
					КонецЕсли;
				КонецЕсли;
				
				// Выводим строку, делая проверку попадания на лист.
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
					мсвДопОбластиПодвала);
				
				// Инициализация итогов по странице.
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаБезНДС,СуммаВсего",
						Документ.ВалютаДокумента, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				// Добавляем итоги
				СтруктураСтроки.Вставить("СуммаВсего",  Сумма); // чтобы округление не сказалось на итоговой сумме
				СтруктураСтроки.Вставить("СуммаБезНДС", СуммаБезНДС);
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтруктураСтроки, СтруктураИтоговПоСтранице);
			КонецЦикла;
			// Выводим последний подвал, если страниц больше единицы.
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Итоги
			ОбластьИтог.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
			СуммаБезНДС = СтруктураИтоговПоСтранице.СуммаБезНДС;
			СуммаВсего = СтруктураИтоговПоСтранице.СуммаВсего;
			ОбластьИтог.Параметры.СуммаВсего  = Формат(СуммаВсего, ФорматВыводаСуммы);
			ОбластьИтог.Параметры.СуммаБезНДС = Формат(СуммаБезНДС,ФорматВыводаСуммы);
			ОбластьИтог.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
				+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,Документ.ВалютаДокумента);
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьИтог, , ,
				НомерСтраницы, , Документ);
		КонецЕсли;
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "ОтпустилПредставление"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил", "ПолучилПредставление"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьОбслуживаниеАктива()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ОбслуживаниеАктива);

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбслуживаниеАктива.Организация КАК Организация,
	|	ОбслуживаниеАктива.Ссылка КАК Ссылка,
	|	ОбслуживаниеАктива.Дата КАК Дата,
	|	ОбслуживаниеАктива.ХозОперация КАК ХозОперация,
	|	ОбслуживаниеАктива.ДокументОснование КАК ДокументОснование,
	|	ОбслуживаниеАктива.Контрагент КАК Контрагент,
	|	ОбслуживаниеАктива.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ОбслуживаниеАктива.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ОбслуживаниеАктива.Ссылка КАК Сделка,
	|	ОбслуживаниеАктива.СуммаДокумента КАК Сумма,
	|	ОбслуживаниеАктива.СтоимостьСтороннихУслуг КАК СтоимостьСтороннихУслуг,
	|	ОбслуживаниеАктива.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ОбслуживаниеАктива.ВалютаДокумента КАК ВалютаДокумента,
	|	ОбслуживаниеАктива.КурсДокумента КАК КурсДокумента,
	|	ОбслуживаниеАктива.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ОбслуживаниеАктива.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ОбслуживаниеАктива КАК ОбслуживаниеАктива
	|ГДЕ
	|	ОбслуживаниеАктива.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбслуживаниеАктиваЗачетАвансов.Ссылка КАК Ссылка,
	|	ОбслуживаниеАктиваЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ОбслуживаниеАктиваЗачетАвансов.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.ОбслуживаниеАктива.ЗачетАвансов КАК ОбслуживаниеАктиваЗачетАвансов
	|ГДЕ
	|	ОбслуживаниеАктиваЗачетАвансов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.СтоимостьСтороннихУслуг КАК СтоимостьСтороннихУслуг,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.СтоимостьСтороннихУслуг КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАванса.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАванса.ДокументАванса";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий()
		ИЛИ ДанныеОбОплате.Сумма <= 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,
		Ложь);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("СуммаДокумента", Объект.СтоимостьСтороннихУслуг);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли