// Модуль документа "Обслуживание актива"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеОказывающееУслугу = ПодразделениеКомпании;
	
	Если ЭтоНовый() И ХозОперация=Справочники.ХозОперации.ОбслуживаниеАктиваНаРасходыПодразделения Тогда
		СтатьяРасходов = Справочники.СтатьиДоходовИРасходов.РаботыПоОбслуживаниюАктивов;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
	Если Не ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
		Способ = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Если не заполнен Договор Взаимозачетов, уберем проверку Валюты и Курса Взаиморасчета.
	Если НЕ ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("ВалютаВзаиморасчетов");
		Если НЕ ИндексЭлемента=Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("КурсВалютыВзаиморасчетов");
		Если НЕ ИндексЭлемента=Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов");
		СуммаДокументаВВалютеДоговора = ?(
			ВалютаДокумента = ВалютаДоговора,
			СтоимостьСтороннихУслуг,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтоимостьСтороннихУслуг,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаДоговора,
				КурсВалютыВзаиморасчетов));
		
		Если СуммаДокументаВВалютеДоговора < ЗачетАвансов.Итог("Сумма") Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сумма зачета оплаты превышает стоимость сторонних услуг.'"),
				ЭтотОбъект
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// корректируем количество базовое 
	Для Каждого Строка Из ОприходованныеЦенности Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании, "ОприходованныеЦенности");
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ,,, ИСТИНА);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// определение необходимости формирования корректирующих проводок
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	ПодразделениеПодразделениеОказывающееУслугу = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеОказывающееУслугу, Дата);
	ПодразделениеПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеКомпании, Дата);
	
	РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоТоварам();
	ДополнительныеСвойства.Вставить("РезультатЗапросаПоТоварам", РезультатЗапросаПоТоварам);
	
	РезультатЗапросаПоОприходованнымЦенностям = ПолучитьРезультатЗапросаПоОприходованнымЦенностям();
	ДополнительныеСвойства.Вставить("РезультатЗапросаПоОприходованнымЦенностям", РезультатЗапросаПоОприходованнымЦенностям);
	
	СуммаДок = 0;
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// 1) остатки товаров
	// списываем расходные материалы
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании             = СкладКомпании;
	НаборЗаписейОстатки.ДвиженияПоРознице		  = СкладКомпании.Розничный;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	
	// приходуем ценности
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании             = СкладКомпании;
	НаборЗаписейОстатки.ДвиженияПоРознице		  = СкладКомпании.Розничный;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоОприходованнымЦенностям();
	НаборЗаписейОстатки.ПоБазовомуКоличеству = Истина;
	Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;

	// 2) партии товаров
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	ДополнительныеСвойства.Вставить("ШапкаДокумента", ШапкаДокумента);
	
	// расходные материалы
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения,Ссылка,СуммаДок) ИЛИ Отказ;
	СуммаДок = СуммаДок + СтоимостьСтороннихУслуг + СтоимостьСобственныхУслуг;
	// оприходованные ценности
	Отказ = НЕ ПровестиПоПартиямОприходованныеЦенности(РежимПроведения, Ссылка) ИЛИ Отказ;
	
	// 3) взаиморасчеты
	Если СтоимостьСтороннихУслуг > 0
		И Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании; 
		НаборЗаписейВзаиморасчеты.ДокументОбъект        	= ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения       	= РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент            	= Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов 	= ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.Сделка					= Неопределено;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок = СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Неопределено;
		НаборЗаписейВзаиморасчеты.Сумма                 	= СтоимостьСтороннихУслуг;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
	КонецЕсли;
	
	Документы.ОбслуживаниеАктива.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ОбслуживаниеАктива.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
			ЭтотОбъект,
			ШапкаДокумента);
		СтоимостьСтороннихУслугУпр = ?(
			РасчетыСКонтрагентами.Итог("СуммаУпр") < 0,
			-РасчетыСКонтрагентами.Итог("СуммаУпр"),
			РасчетыСКонтрагентами.Итог("СуммаУпр"));
	Иначе
		СтоимостьСтороннихУслугУпр = СтоимостьСтороннихУслуг;
	КонецЕсли;
	
	Если СтоимостьСтороннихУслуг > 0
		И БалансВедетсяПоПодразделениям 
		И (ПодразделениеДоговорВзаиморасчетов <> ПодразделениеПодразделениеКомпании) Тогда
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов =
			Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
		НаборЗаписейДоходыИРасходы.Расход = СтоимостьСтороннихУслугУпр;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// 4) доход подразделению
	Если СтоимостьСобственныхУслуг > 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.Подразделение          = ПодразделениеОказывающееУслугу;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = СтатьяДоходов;
		НаборЗаписейДиР.ВУпрВалюте             = Ложь;
		НаборЗаписейДиР.Расход                 = СтоимостьСобственныхУслуг;
		Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
		
		Если БалансВедетсяПоПодразделениям И (ПодразделениеПодразделениеОказывающееУслугу <> ПодразделениеПодразделениеКомпании) Тогда
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение = ПодразделениеОказывающееУслугу;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Ложь;
			НаборЗаписейДоходыИРасходы.Доход=СтоимостьСобственныхУслуг;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
		КонецЕсли;	
	КонецЕсли;
	
	// 5) зависит от ХО
	СуммаКорректировки = 0;
	Если БалансВедетсяПоПодразделениям И (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеПодразделениеКомпании) Тогда
		СуммаКорректировки = СуммаКорректировки + СтоимостьСтороннихУслугУпр;
	КонецЕсли;
	
	Если БалансВедетсяПоПодразделениям И (ПодразделениеПодразделениеОказывающееУслугу<>ПодразделениеПодразделениеКомпании) Тогда
		СуммаКорректировки =
			СуммаКорректировки + ?(СпособУчетаВзаиморасчетовПоРасчетнымДокументам,
				Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СтоимостьСобственныхУслуг,
					ШапкаДокумента.ВалютаДокумента,
					ШапкаДокумента.КурсДокумента,
					Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
					?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр)),
				2),
				СтоимостьСобственныхУслуг);
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ОбслуживаниеАктиваНаСтоимостьАктива Тогда
		// А) увеличение балансовой стоимости актива = сумме обслуживания = сумме документа.
		БалансоваяСтоимостьАктиваПлюс = СуммаДок;
	Иначе
		// Б) списываем на расходы нашего подразделения
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДиР.Подразделение = ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = СтатьяРасходов;
		НаборЗаписейДиР.ВУпрВалюте             = Ложь;
		НаборЗаписейДиР.Расход                 = СуммаДок;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		
		Если СуммаКорректировки<>0 Тогда
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение = ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДоходыИРасходы.Доход=СуммаКорректировки;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;	
		
		БалансоваяСтоимостьАктиваПлюс = 0;
	КонецЕсли;
	
	РезультатЗапросаПоАктивам = ПолучитьРезультатЗапросаПоАктивам(БалансоваяСтоимостьАктиваПлюс, СуммаДок).Выгрузить();
	
	// 6) эксплуатация активов - начисляем сумму обслуживания и прибавляем балансовую стоимость если нужно.
	Если РезультатЗапросаПоАктивам.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Подразделение ""%1"": прочий актив ""%2"" не обнаружен.'"),
				ПодразделениеКомпании,
				Актив
				),
			ЭтотОбъект,,,
			Отказ
		);
	Иначе
		НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
		НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеКомпании;
		НаборЗаписейЭксплуатация.ТипОбслуживания           = ТипОбслуживания;
		НаборЗаписейЭксплуатация.ЭтоПервыйВвод             = Ложь;
		НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАктивам;
		Отказ = НЕ НаборЗаписейЭксплуатация.Приход() ИЛИ Отказ;
		
		Если ХозОперация=Справочники.ХозОперации.ОбслуживаниеАктиваНаСтоимостьАктива И СуммаКорректировки <> 0 Тогда
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.Подразделение = ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДоходыИРасходы.Доход = СуммаКорректировки;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// двигаем границу последовательности взаиморасчетов
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	Иначе
		РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	КонецЕсли;
	
	// ДиР по оприходованным ценностям
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДоходыИРасходы.Подразделение = СкладКомпании.ПодразделениеКомпании;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = СтатьяДоходовПоОприходованнымЦенностям;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте = Ложь;
	НаборЗаписейДоходыИРасходы.Доход = ОприходованныеЦенности.Итог("СуммаВсего");
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, "ПартииТоваровКомпании", СтоимостьСобственныхУслуг + СтоимостьСтороннихУслуг + ОприходованныеЦенности.Итог("Сумма"));
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  ШапкаДокумента - ДокументСсылка - ЭтотОбъект, выборка.
//
// Возвращаемое значение:
//  Возвращает результат выборки.
// 
Функция ПолучитьРезультатЗапросаПоТоварам()

	// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьСуммаРозн = (ОприходованныеЦенности.Итог("СуммаРозничная") + Товары.Итог("СуммаРозничная")) > 0;
    ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбслуживаниеАктиваТовары.Номенклатура,
	|	ОбслуживаниеАктиваТовары.ХарактеристикаНоменклатуры,
	|	СУММА(ОбслуживаниеАктиваТовары.Количество*ОбслуживаниеАктиваТовары.Коэффициент) КАК Количество,
	|	СУММА(0) КАК Резерв";
	Если ЕстьПартии Тогда
		ТекстЗапроса = ТекстЗапроса + ", ОбслуживаниеАктиваТовары.Партия КАК Партия";
		ТекстЗапроса = ТекстЗапроса + ", ОбслуживаниеАктиваТовары.ГТД КАК ГТД";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ", СУММА(ОбслуживаниеАктиваТовары.СуммаРозничная) КАК СуммаРозничная, ОбслуживаниеАктиваТовары.ЦенаРозничная";
	ТекстЗапроса = ТекстЗапроса + "	ИЗ
	|	Документ.ОбслуживаниеАктива.Товары КАК ОбслуживаниеАктиваТовары
	|ГДЕ
	|	ОбслуживаниеАктиваТовары.Ссылка = &Ссылка
	|	И ОбслуживаниеАктиваТовары.Номенклатура.ВидНоменклатуры <> &Услуга
	|СГРУППИРОВАТЬ ПО Номенклатура, ХарактеристикаНоменклатуры, ЦенаРозничная"+"
	|	"+?(ЕстьПартии,", Партия, ГТД","")+"
	|";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка,СуммаДок = 0) Экспорт
	Отказ = Ложь;
	
	ШапкаДокумента = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ШапкаДокумента", Неопределено);
	
	Если ШапкаДокумента = Неопределено Тогда
		ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	КонецЕсли;
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// определение необходимости формирования корректирующих проводок
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеКомпании, Дата);
	
	РезультатЗапросаПоТоварам = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "РезультатЗапросаПоТоварам", Неопределено);
	Если РезультатЗапросаПоТоварам = Неопределено Тогда
		РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоТоварам();
	КонецЕсли;
	
	// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// списываем с партий
	НаборЗаписейПартии = Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании             = ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация               = ШапкаДокумента.Организация;
	НаборЗаписейПартии.ШапкаДокумента			 = ШапкаДокумента;
	НаборЗаписейПартии.ИмяРеквизитаДокумент		 = ?(ЕстьПартии,"Партия","");
	НаборЗаписейПартии.СтатусПартии				 = Неопределено;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	Отказ = НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	
	// Зачитываем принятые на реализацию товары, которые были списаны
	НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
	НаборЗаписейРеализованныеТовары.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейРеализованныеТовары.Списание                  = Истина;
	НаборЗаписейРеализованныеТовары.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейРеализованныеТовары.ШапкаДокумента            = ШапкаДокумента;
	Отказ = НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
	
	
	// Подготовим таблицу движений в разрезе подразделений только собственных списанных партий.
	ТаблицаСписанийПартий = Движения.ПартииТоваровКомпании.Выгрузить();
	ТаблицаСписанийПартий.Свернуть("СтатусПартии","СуммаУпр");
	СтруктураОтбора=Новый Структура("СтатусПартии",Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	МассивНайденныхСтрок=ТаблицаСписанийПартий.НайтиСтроки(СтруктураОтбора);
	Для Сч=0 По МассивНайденныхСтрок.ВГраница() Цикл
		ТаблицаСписанийПартий.Удалить(МассивНайденныхСтрок[Сч]);
	КонецЦикла;
	
	СебестоимостьУпр = ТаблицаСписанийПартий.Итог("СуммаУпр");
	
	Если БалансВедетсяПоПодразделениям И (ПодразделениеСклад<>ПодразделениеПодразделениеКомпании) И СебестоимостьУпр<>0 Тогда
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
		НаборЗаписейДоходыИРасходы.Доход                  = СебестоимостьУпр;	
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
	КонецЕсли;
	
	// подготовим таблицу движений в разрезе подразделений комиссионных товаров
	ТаблицаСписанийПартийРеализованных = Движения.РеализованныеТовары.Выгрузить();
	ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов","СуммаУпр");
	
	ТаблицаСписанийПартийРеализованных.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
		Если БалансВедетсяПоПодразделениям Тогда
			СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		Иначе
			СтрокаСписания.Подразделение = ШапкаДокумента.ПодразделениеКомпании;
		КонецЕсли;
	КонецЦикла;	
	ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение","СуммаУпр");
	
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
		ПодразделениеДоговора = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СтрокаСписания.Подразделение, Дата);
		Если БалансВедетсяПоПодразделениям И (ПодразделениеДоговора<>ПодразделениеПодразделениеКомпании) И СтрокаСписания.СуммаУпр<>0 Тогда
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = СтрокаСписания.Подразделение;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Расход                 = СтрокаСписания.СуммаУпр;	
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЦикла;
	
	Если ШапкаДокумента.ВалютаДокумента=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		СуммаДок = НаборЗаписейПартии.Итог("Сумма");
	Иначе
		СуммаДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НаборЗаписейПартии.Итог("СуммаУпр"), Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.Дата, ШапкаДокумента.КурсВалютыУпр), ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента);
	КонецЕсли;
	
	Если БалансВедетсяПоПодразделениям И (ПодразделениеСклад<>ПодразделениеПодразделениеКомпании) Тогда
		// Корректируем списание на расходы нашего подразделения
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.Подразделение          = ШапкаДокумента.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте             = Ложь;
		НаборЗаписейДиР.Доход                  = СуммаДок;
		НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;	
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиямОприходованныеЦенности(Режим,ДокументСсылка)
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	ДополнительныеСвойства.Вставить("ШапкаДокумента", ШапкаДокумента);
	
	// посчитаем сумму товаров
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ДокументТовары.СуммаВсего) КАК СуммаВсего
	|ИЗ
	|	Документ.ОбслуживаниеАктива.ОприходованныеЦенности 	КАК ДокументТовары
	|
	|ГДЕ  
	|	ДокументТовары.Ссылка = &ДокументСсылка
	|");
	Запрос.УстановитьПараметр("ДокументСсылка",ШапкаДокумента.Ссылка);
	ДеревоДоходовИРасходов=Запрос.Выполнить().Выгрузить();
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		// Доходы и расходы на себестоимость не оприходованных партий
		Если ДеревоДоходовИРасходов.Количество() = 0 Тогда
			НайденнаяСтрокаТоваров = Неопределено;
		Иначе
			НайденнаяСтрокаТоваров = ДеревоДоходовИРасходов[0];
		КонецЕсли;
		СуммаВсего=?(НайденнаяСтрокаТоваров<>Неопределено,НайденнаяСтрокаТоваров.СуммаВсего,0);
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		// В случае если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = Ложь;
		НаборЗаписейДоходыИРасходы.Расход = СуммаВсего;
		НаборЗаписейДоходыИРасходы.Приход();
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// определим необходимость формирования корректирующих проводок
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	
	РезультатЗапросаПоОприходованнымЦенностям = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "РезультатЗапросаПоОприходованнымЦенностям", Неопределено);
	Если РезультатЗапросаПоОприходованнымЦенностям = Неопределено Тогда
		РезультатЗапросаПоОприходованнымЦенностям = ПолучитьРезультатЗапросаПоОприходованнымЦенностям();
	КонецЕсли;
	
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
	НаборЗаписейПартии.ЕстьСтавкаНДС=Истина;
	НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
	НаборЗаписейПартии.ПоБазовомуКоличеству=Истина;
	НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
	НаборЗаписейПартии.РежимДопРасходы=0;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоОприходованнымЦенностям;
	Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

// возвращает результат запроса по таблице ОприходованныеЦенности
Функция ПолучитьРезультатЗапросаПоОприходованнымЦенностям()
	// Для поступления таблицу товаров получаем из документа, 
	// для расхода получаем таблицу из движений по остаткам + из документа получаем партии и ставки НДС.
	ИмяРеквизитаДокумент = Неопределено;
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,";
	ТекстЗапроса=ТекстЗапроса+"
		|	ДокТовары.СтавкаНДС КАК СтавкаНДС,";
	
	ТекстЗапроса=ТекстЗапроса+"
		|	СУММА(ДокТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ДокТовары.Сумма) КАК Сумма,
		|	СУММА(ДокТовары.СуммаВсего) КАК СуммаВсего,";

	ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(ДокТовары.ЕдиницаИзмерения.Вес * ДокТовары.Количество) КАК Вес,";		

	ТекстЗапроса=ТекстЗапроса+"
	|	СУММА(ДокТовары.КоличествоБазовое) КАК Количество,
	|	ДокТовары.Номенклатура КАК Номенклатура";
	
	Если СкладКомпании.Розничный Тогда
    	ТекстЗапроса = ТекстЗапроса + ", СУММА(ДокТовары.СуммаРозничная) КАК СуммаРозничная, ДокТовары.ЦенаРозничная";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|ИЗ
	|	Документ.ОбслуживаниеАктива.ОприходованныеЦенности КАК ДокТовары
	|ГДЕ
	|	  ДокТовары.Ссылка=&Ссылка
	|	И ДокТовары.Номенклатура.ВидНоменклатуры<>&Услуга
	|
	|СГРУППИРОВАТЬ ПО Номенклатура, ХарактеристикаНоменклатуры"+?(СкладКомпании.Розничный,",ЦенаРозничная","")+ ",СтавкаНДС" +"
	|
	|";
	ЗапросТовары=Новый Запрос(ТекстЗапроса);
	ЗапросТовары.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросТовары.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
	
	// для прихода все просто
	Возврат ЗапросТовары.Выполнить();
	
КонецФункции

// Функция возвращает результат выполнения запроса по активам
Функция ПолучитьРезультатЗапросаПоАктивам(БалансоваяСтоимость, СуммаОбслуживания)
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОбслуживаниеАктива.Актив,
	               |	&БалансоваяСтоимость КАК БалансоваяСтоимость,
	               |	&СуммаОбслуживания КАК СуммаОбслуживания,
	               |	0 КАК Амортизация,
	               |	ПрочиеАктивыВЭксплуатацииОстатки.МОЛ,
	               |	ПрочиеАктивыВЭксплуатацииОстатки.ТипЭксплуатации,
				   |	ПрочиеАктивыВЭксплуатацииОстатки.Автомобиль,
	               |	ПрочиеАктивыВЭксплуатацииОстатки.ПодразделениеКомпании
	               |ИЗ
	               |	Документ.ОбслуживаниеАктива КАК ОбслуживаниеАктива
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
	               |				&Момент,
	               |				ПрочийАктив = &Актив
	               |					И ПодразделениеКомпании = &Подразделение) КАК ПрочиеАктивыВЭксплуатацииОстатки
	               |		ПО ОбслуживаниеАктива.Актив = ПрочиеАктивыВЭксплуатацииОстатки.ПрочийАктив
	               |			И ОбслуживаниеАктива.ПодразделениеКомпании = ПрочиеАктивыВЭксплуатацииОстатки.ПодразделениеКомпании
	               |ГДЕ
	               |	ОбслуживаниеАктива.Ссылка = &Ссылка
	               |";

	// наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеАктивыВЭксплуатации");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата)); 
	ЗначенияБлокировки.Вставить("ПодразделениеКомпании", ПодразделениеКомпании);
	ЗначенияБлокировки.Вставить("ПрочийАктив", Актив);
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
				   
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	Запрос.УстановитьПараметр("Актив", Актив);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("БалансоваяСтоимость", БалансоваяСтоимость);
	Запрос.УстановитьПараметр("СуммаОбслуживания", СуммаОбслуживания);
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоАктивам()

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Ввод в эксплуатацию"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводВЭксплуатацию(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	Организация = ПодразделениеКомпании.Организация;
		
	ТЧОснования = ДанныеЗаполнения.Товары;
	
	СписокАктивов = Новый СписокЗначений;
	
	Для каждого ТекСтрокаТЧ Из ТЧОснования Цикл
		СписокАктивов.Добавить(ТекСтрокаТЧ.Актив);
	КонецЦикла;
	
	Если СписокАктивов.Количество() >= 1 Тогда //его и заполним
		Актив = СписокАктивов[0].Значение;
	КонецЕсли;
	
	Товары.Очистить();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводВЭксплуатацию()

// Производит заполнение объекта на основании документа "Перемещение активов"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеАктивов(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТЧОснования = ДанныеЗаполнения.Активы;
	
	СписокАктивов = Новый СписокЗначений;
	
	Для каждого ТекСтрокаТЧ Из ТЧОснования Цикл
		СписокАктивов.Добавить(ТекСтрокаТЧ.ПрочийАктив);
	КонецЦикла;
	
	Если СписокАктивов.Количество() >= 1 Тогда //его и заполним
		Актив = СписокАктивов[0].Значение;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеАктивов()

// Производит заполнение объекта на основании документа "Ввод остатков прочих активов".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковПрочихАктивов(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем обработку по перемещению активов
	Возврат ОбработкаЗаполнения_ПеремещениеАктивов(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковПрочихАктивов()

#КонецОбласти

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// Установим параметры проверки документа
ДополнительныеСвойства.Вставить("ОприходованныеЦенностиЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли
