// Модуль менеджера документа "Списание кодов маркировки".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект		 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  Расширенные	 - Булево				 - Признак получения расширенных сведений об итогах операци.
// 
// Возвращаемое значение:
//  Структура - Данные с итогами показателей
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПричинаСписания");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Статус");

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.КодМаркировки");
	ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
	
	ТабачнаяПродукция = МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции();
	Если ТабачнаяПродукция.Найти(Объект.ТоварнаяГруппа.ТоварнаяГруппа) <> Неопределено Тогда
		ОбязательныеРеквизиты.Добавить("АдресМестаВыбытия");
		ОбязательныеРеквизиты.Добавить("НомерПервичногоДокумента");
		ОбязательныеРеквизиты.Добавить("ДатаПервичногоДокумента");
		ОбязательныеРеквизиты.Добавить("ВидПервичногоДокумента");
		Если Объект.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
			ОбязательныеРеквизиты.Добавить("НаименованиеПервичногоДокумента");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("КодМаркировки");
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеКодовМаркировкиТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеКодовМаркировки.Товары КАК СписаниеКодовМаркировкиТовары
	|ГДЕ
	|	СписаниеКодовМаркировкиТовары.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.СписаниеКодовМаркировки - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Перемаркировка);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СписаниеКодовМаркировки);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение данных документа для списания кодов маркировки
//
// Параметры:
//  Объект		 - ДокументСсылка.СписаниеКодовМаркировки - Документ, для которого получаем данные
// 
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ДанныеСписанияКодовМаркировки(Объект) Экспорт
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписаниеКодовМаркировки.Организация.ИНН КАК ОрганизацияИНН,
	               |	СписаниеКодовМаркировки.ПричинаСписания КАК ПричинаСписания,
	               |	СписаниеКодовМаркировки.Номер КАК НомерПервичногоДокумента,
	               |	СписаниеКодовМаркировки.Дата КАК ДатаПервичногоДокумента,
	               |	СписаниеКодовМаркировки.ТоварнаяГруппа КАК ТоварнаяГруппа,
	               |	СписаниеКодовМаркировки.ТоварнаяГруппа.ТоварнаяГруппа КАК ВидГруппыТоваров,
	               |	СписаниеКодовМаркировки.АдресМестаВыбытия КАК АдресМестаВыбытия,
	               |	СписаниеКодовМаркировки.ВидПервичногоДокумента КАК ВидПервичногоДокумента,
	               |	СписаниеКодовМаркировки.ДатаПервичногоДокумента КАК ДатаПервичногоДокументаТабак,
	               |	СписаниеКодовМаркировки.НомерПервичногоДокумента КАК НомерПервичногоДокументаТабак,
	               |	СписаниеКодовМаркировки.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента
	               |ИЗ
	               |	Документ.СписаниеКодовМаркировки КАК СписаниеКодовМаркировки
	               |ГДЕ
	               |	СписаниеКодовМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписаниеКодовМаркировкиТовары.КодМаркировки КАК КодМаркировки,
	               |	СписаниеКодовМаркировкиТовары.ПричинаСписания КАК ПричинаСписания
	               |ИЗ
	               |	Документ.СписаниеКодовМаркировки.Товары КАК СписаниеКодовМаркировкиТовары
	               |ГДЕ
	               |	СписаниеКодовМаркировкиТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ШапкаДокумента = ПакетЗапроса[0].Выбрать();
	ШапкаДокумента.Следующий();
	
	СтрокаТоваров = ПакетЗапроса[1].Выбрать();
	
	ТабачнаяПродукция = МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции();
	Если ТабачнаяПродукция.Найти(ШапкаДокумента.ВидГруппыТоваров) <> Неопределено Тогда
		СформироватьСообщениеОСписанииКодаТабачнойПролукции(
			ТекстСообщения,
			ШапкаДокумента,
			СтрокаТоваров);
		Возврат ТекстСообщения;
	КонецЕсли;
	
	ТекстСообщения.Вставить("cancellation_doc_date", Формат(ШапкаДокумента.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy"));
	ТекстСообщения.Вставить("cancellation_doc_number", СокрЛП(ШапкаДокумента.НомерПервичногоДокумента));
	
	ПричинаСписания = ОбменССистемойМаркировкиСервер.ПричинаСписанияКодаМаркировки(ШапкаДокумента.ПричинаСписания);
	ТекстСообщения.Вставить("cancellation_reason", ПричинаСписания);
	
	// Заполним табличную часть
	ТекстСообщения.Вставить("km_list", Новый Массив);
	
	Пока СтрокаТоваров.Следующий() Цикл
		
		ТекстОшибки = "";
		КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
			СтрокаТоваров.КодМаркировки,
			ТекстОшибки,
			Ложь);
		
		// Проверим, что это КМ
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаКМ = Новый Структура;
		СтрокаКМ.Вставить("uit", КодМаркировки);
		
		ПричинаСписанияСтроки =
			ОбменССистемойМаркировкиСервер.ПричинаСписанияКодаМаркировки(СтрокаТоваров.ПричинаСписания);
		
		Если НЕ ЗначениеЗаполнено(ПричинаСписанияСтроки) Тогда
			ПричинаСписанияСтроки = ПричинаСписания;
		КонецЕсли;
		
		СтрокаКМ.Вставить("cancellation_reason", ПричинаСписанияСтроки);
		ТекстСообщения.km_list.Добавить(СтрокаКМ);
		
	КонецЦикла;
	
	ТекстСообщения.Вставить("trade_participant_inn", СокрЛП(ШапкаДокумента.ОрганизацияИНН));
	
	Возврат ТекстСообщения;
	
КонецФункции // ДанныеСписанияКодовМаркировки()

Функция ЗапросДокумента(Объект, ПараметрыОбмена, Сообщение) Экспорт
	
	СтруктураСообщения = ДанныеСписанияКодовМаркировки(Объект);
	
	Возврат СтруктураСообщения;
	
КонецФункции // ЗапросДокумента()

Процедура ЗаполнитьСтатусыКодовМаркировки(Ссылка, Отказ, СтатусДокумента = Неопределено) Экспорт

	Если СтатусДокумента = Неопределено Тогда 
		ДанныеСтатусаДокумента 	= РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
		СтатусДокумента 		= ДанныеСтатусаДокумента.Статус;
	КонецЕсли;

	Если НЕ Отказ И СтатусДокумента = Перечисления.СтатусыДокументовМаркировки.Выполнен Тогда
		ЭтотОбъект = Ссылка.ПолучитьОбъект();		
		
		ЭтоСписаниеНанесенногоКода = (Ссылка.ХозОперация = Справочники.ХозОперации.СписаниеНанесенныхКодовМаркировки);
		ЭтоТабак =
			МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции()
				.Найти(Ссылка.ТоварнаяГруппа.ТоварнаяГруппа) <> Неопределено;
		// Изменим состояние маркировки, которые ранее не были выведены
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Организация = Ссылка.Организация;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = Ссылка.Товары.Выгрузить();
		НаборЗаписейСостоянияКодовМаркировки.ПроверятьВыводИзОборота = ЭтоСписаниеНанесенногоКода И Не ЭтоТабак;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = ?(
			ЭтоСписаниеНанесенногоКода И Не ЭтоТабак,
			Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПриУтратеИлиПовреждении,
			Перечисления.СостоянияКодовМаркировки.Списан);
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		Отказ = НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() ИЛИ Отказ;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСообщениеОСписанииКодаТабачнойПролукции(Результат, ДанныеДокумента, Товары)
	
	Если ДанныеДокумента.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
		Результат.Вставить("sourceDocName", СокрЛП(ДанныеДокумента.НаименованиеПервичногоДокумента));
	КонецЕсли;
	Результат.Вставить("sourceDocNum", СокрЛП(ДанныеДокумента.НомерПервичногоДокументаТабак));
	Результат.Вставить("sourceDocDate", Формат(ДанныеДокумента.ДатаПервичногоДокументаТабак, "ДФ=yyyy-MM-dd"));
	
	КодыМаркировки = Новый Массив;
	Пока Товары.Следующий() Цикл
		
		ТекстОшибки = "";
		КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
			Товары.КодМаркировки,
			ТекстОшибки,
			Ложь);
		
		// Проверим, что это КМ
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		КодыМаркировки.Добавить(КодМаркировки);
		
	КонецЦикла;
	
	Результат.Вставить("sntins", КодыМаркировки);
	Результат.Вставить("participantId", СокрЛП(ДанныеДокумента.ОрганизацияИНН));
	Результат.Вставить("withChild", "false");
	Результат.Вставить("dropoutReason",
		ОбменССистемойМаркировкиСервер.ПричинаСписанияКодаМаркировкиДляТабака(ДанныеДокумента.ПричинаСписания));
	ВидПервичногоДокумента = ОбменССистемойМаркировкиСервер.ВидПервичногоДокумента(
		ДанныеДокумента.ВидПервичногоДокумента);
	Результат.Вставить("sourceDocType", ВидПервичногоДокумента);
	ИдентификаторАдреса =
		Документы.ВыводИзОборотаКодовМаркировки.ИдентификаторАдресаФИАС(ДанныеДокумента.АдресМестаВыбытия);
	Результат.Вставить("fiasId", Строка(ИдентификаторАдреса));
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли