// Модуль документа ПереразмещениеАвтомобилей

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ячеистый И СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		СкладКомпании = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ ЭтотОбъект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		СтруктураОтбора = Новый Структура;
		СписокНайденныхДублей = Новый СписокЗначений();
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.Автомобили Цикл
			
			Если СписокНайденныхДублей.НайтиПоЗначению(СтрокаТаблицы) = Неопределено Тогда
				СтруктураОтбора.Вставить("Ячейка", СтрокаТаблицы.Ячейка);
				НайденныеСтроки = ЭтотОбъект.Автомобили.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() > 1 Тогда
					// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
					ДублирующиесяСтроки = "";
					// выведем строку сообщения...
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						ДублирующиесяСтроки = ДублирующиесяСтроки + "," + СокрЛП(НайденнаяСтрока.НомерСтроки);
						// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
						СписокНайденныхДублей.Добавить(НайденнаяСтрока);
					КонецЦикла;
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Строки таблицы ""Автомобили"" не уникальны по значению полей (Ячейка старая). Строки: %1'"),
							Сред(ДублирующиесяСтроки, 2)
						),
						ЭтотОбъект,
						,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура;
		СписокНайденныхДублей = Новый СписокЗначений();
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.Автомобили Цикл
			
			Если СписокНайденныхДублей.НайтиПоЗначению(СтрокаТаблицы) = Неопределено Тогда
				СтруктураОтбора.Вставить("ЯчейкаНовая", СтрокаТаблицы.ЯчейкаНовая);
				НайденныеСтроки = ЭтотОбъект.Автомобили.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() > 1 Тогда
					// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
					ДублирующиесяСтроки = "";
					// выведем строку сообщения...
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						ДублирующиесяСтроки = ДублирующиесяСтроки + "," + СокрЛП(НайденнаяСтрока.НомерСтроки);
						// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
						СписокНайденныхДублей.Добавить(НайденнаяСтрока);
					КонецЦикла;
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Строки таблицы ""Автомобили"" не уникальны по значению полей (Ячейка новая). Строки: %1'"),
							Сред(ДублирующиесяСтроки, 2)
						),
						ЭтотОбъект,,,
						Отказ
					);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОрдерномуУчетуАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// проведем остатки автомобилей по регистру ОстаткиАвтомобилейОрдерныйСклад
	НаборЗаписейОстатки = Движения.ОстаткиАвтомобилейОрдерныйСклад;
	НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект  = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании   = СкладКомпании;
	НаборЗаписейОстатки.РезультатЗапросаПоАвтомобилям = Неопределено;
	НаборЗаписейОстатки.Приходовать     = Истина;
	Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Если НЕ Отказ Тогда
		НаборЗаписейОстатки.Записать();
	КонецЕсли; 

	Если НЕ Отказ Тогда
		// проведем остатки автомобилей по регистру ОстаткиАвтомобилейОрдерныйСклад
		НаборЗаписейОстатки = Движения.ОстаткиАвтомобилейОрдерныйСклад;
		НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект  = ЭтотОбъект;
		НаборЗаписейОстатки.СкладКомпании   = СкладКомпании;
		НаборЗаписейОстатки.РезультатЗапросаПоАвтомобилям = Неопределено;
		НаборЗаписейОстатки.Приходовать     = Истина;
		НаборЗаписейОстатки.ИмяРеквизитаЯчейки = "ЯчейкаНовая";
		НаборЗаписейОстатки.Переразмещение	= Истина;
		Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		НаборЗаписейОстатки.ИмяРеквизитаЯчейки = Неопределено;
	КонецЕсли;
	
	// двигаем границу последовательности автомобилей на ордерном складе
	РаботаСГраницами.СдвинутьГраницуОрдерногоУчетаПоАвтомобилям(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Приходный складской ордер на автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйСкладскойОрдерНаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили.Очистить();
	Для каждого СтрокаТЧ Из ДанныеЗаполнения.Автомобили Цикл
		НоваяСтрокаТЧ			 = Автомобили.Добавить();
		НоваяСтрокаТЧ.Автомобиль = СтрокаТЧ.Автомобиль;
		НоваяСтрокаТЧ.Количество = 1;
		НоваяСтрокаТЧ.Ячейка	 = СтрокаТЧ.Ячейка;
	КонецЦикла; 
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдерНаАвтомобили()

// Производит заполнение объекта на основании документа "Переразмещение автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПереразмещениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили.Очистить();
	Для каждого СтрокаТЧ Из ДанныеЗаполнения.Автомобили Цикл
		НоваяСтрокаТЧ			 = Автомобили.Добавить();
		НоваяСтрокаТЧ.Автомобиль = СтрокаТЧ.Автомобиль;
		НоваяСтрокаТЧ.Количество = 1;
		НоваяСтрокаТЧ.Ячейка	 = СтрокаТЧ.ЯчейкаНовая;
	КонецЦикла; 
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПереразмещениеАвтомобилей()

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили.Очистить();
	НоваяСтрокаТЧ				 = Автомобили.Добавить();
	НоваяСтрокаТЧ.Автомобиль	 = ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль;
	НоваяСтрокаТЧ.Количество	 = 1;
	Документы.ПереразмещениеАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрокаТЧ);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
