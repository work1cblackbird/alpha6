// Модуль менеджера документа "Начисление зарплаты"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	СуммаНачисления = 0; СуммаУдержания = 0;
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Если СтрокаСотрудника.НачислениеУдержание.НачислениеИлиУдержание = Перечисления.НачислениеИлиУдержание.Начисление Тогда
			СуммаНачисления = СуммаНачисления + СтрокаСотрудника.Сумма;
		Иначе
			СуммаУдержания = СуммаУдержания - СтрокаСотрудника.Сумма;
		КонецЕсли;
	КонецЦикла; 
	
	ИтогиОперации.Вставить("СуммаДокумента", СуммаНачисления + СуммаУдержания);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНачисления" , СуммаНачисления);
	ИтогиОперации.Вставить("СуммаУдержания"  , СуммаУдержания);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// выполняет пересчет количества дней от введенных дат
//
Процедура ПересчетКоличестваРабочихДней(Объект, ПараметрыДействия = Неопределено)
	
	СтароеКоличествоРабДней      = Объект.КоличествоРабочихДней;
	Объект.КоличествоРабочихДней = 0;
	
	ТекДень = Объект.ДатаНачала;
	
	Пока ТекДень <= Объект.ДатаКонца Цикл
		Если ДеньНедели(ТекДень) < 6 Тогда
			Объект.КоличествоРабочихДней = Объект.КоличествоРабочихДней + 1;
		КонецЕсли;
		ТекДень = ТекДень + 86400;
	КонецЦикла;
	
	Если СтароеКоличествоРабДней <> Объект.КоличествоРабочихДней И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыполнятьПересчет", Истина) Тогда
		ПараметрыДействия.Вставить("ТребуетсяПересчетКоличестваРабочихДней", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуВыплаты(Объект, Строка, ПараметрыДействия = Неопределено)
	
	Если Строка.НачислениеУдержание.СпособРасчета = Перечисления.СпособыРасчета.Процентом Тогда
		БазоваяСуммаВнеш = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ПолучитьБазовуюСумму(Объект,Строка),
																Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
																Объект.КурсВалютыУпр,
																Объект.ВалютаДокумента,
																Объект.КурсДокумента);
		Строка.Сумма = (Строка.БазоваяСумма/100)*БазоваяСуммаВнеш;
	Иначе
		Если Объект.КоличествоРабочихДней > 0 Тогда
			Если Строка.НачислениеУдержание.СпособРасчета = Перечисления.СпособыРасчета.ПоДням Тогда
				Строка.Сумма = (Строка.Отработано/Объект.КоличествоРабочихДней)*Строка.БазоваяСумма;
			ИначеЕсли Строка.НачислениеУдержание.СпособРасчета = Перечисления.СпособыРасчета.Суммой Тогда
				Строка.Сумма = Строка.БазоваяСумма;
			КонецЕсли;
		Иначе
			Строка.Сумма = 0;
		КонецЕсли;
		
		Строка.Сумма = Окр(Строка.Сумма, Объект.ОкруглятьНачислениеДо);
	КонецЕсли;
	
КонецПроцедуры

// получает базовую сумму из файла 
//
// Параметры:
//  ТекСтрока             - Строка для которой надо получить сумму,
//  НаименованиеОбработки - Строка - путь к обработке. 
//
Функция ПолучитьБазовуюСуммуИзФайла(Объект, Строка)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	ДвоичныеДанные = Строка.НачислениеУдержание.ОбъектРасчета.Получить();
	
	Попытка
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	ТекстЗапроса = Новый ТекстовыйДокумент;
	ТекстЗапроса.Прочитать(ИмяВременногоФайла, КодировкаТекста.ANSI);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление временного файла'",ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Запрос = Новый Запрос(ТекстЗапроса.ПолучитьТекст());
	Запрос.УстановитьПараметр("ДатаНачала" , Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"  , Объект.ДатаКонца);
	Запрос.УстановитьПараметр("Менеджер"   , Строка.Контрагент.Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.БазоваяСумма);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ПолучитьБазовуюСуммуИзМакета()

// Получает Базовую сумму для начисления процентом
//
// Параметры:
//  ТекСтрока - Строка для которой надо получить сумму.
//
// Возвращаемое значение:
//  Возвращает "Базовую сумму" если запрос выполнился, иначе возвращает 0.
//
Функция ПолучитьБазовуюСумму(Объект, Строка)
	БазоваяСумма_         =0;
	ВидОбъекта            = Строка.НачислениеУдержание.ВидОбъекта;
	НаименованиеОбработки = Строка.НачислениеУдержание.ПутьКОбъекту;
	
	Если ВидОбъекта = 2 Тогда
		// Внешний запрос из текстового файла
		БазоваяСумма_ = ПолучитьБазовуюСуммуИзФайла(Объект, Строка);
	ИначеЕсли ВидОбъекта = 3 Тогда
		// Если поле "Путь к объекту" у начисления не указан
		Если НЕ ЗначениеЗаполнено(НаименованиеОбработки) Тогда
			Возврат 0;
		КонецЕсли;
		// Встроенная обработка
		ОбработкаПолученияБазовойСуммы = Обработки[НаименованиеОбработки].Создать();
		
		ОбработкаПолученияБазовойСуммы.Сотрудник  = Строка.Контрагент.Сотрудник;
		ОбработкаПолученияБазовойСуммы.ДатаНачала = Объект.ДатаНачала;
		ОбработкаПолученияБазовойСуммы.ДатаКонца  = Объект.ДатаКонца;
		
		БазоваяСумма_ = ОбработкаПолученияБазовойСуммы.БазоваяСумма();
	ИначеЕсли ВидОбъекта = 4 Тогда
		// Внешняя обработка
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		
		ДвоичныеДанные = Строка.НачислениеУдержание.ОбъектРасчета.Получить();
		
		Попытка
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
		Исключение
			Возврат 0;
		КонецПопытки;
		
		ОбработкаПолученияБазовойСуммы = ВнешниеОбработки.Создать(ИмяВременногоФайла);
		ОбработкаПолученияБазовойСуммы.Сотрудник  = Строка.Контрагент.Сотрудник;
		ОбработкаПолученияБазовойСуммы.ДатаНачала = Объект.ДатаНачала;
		ОбработкаПолученияБазовойСуммы.ДатаКонца  = Объект.ДатаКонца;
		
		БазоваяСумма_ = ОбработкаПолученияБазовойСуммы.БазоваяСумма();
		
		// Удаляем временный файл
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось удалить временный файл.'",ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат БазоваяСумма_;
КонецФункции // ПолучитьБазовуюСумму()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДатаНачала");
	ОбязательныеРеквизиты.Добавить("ДатаКонца");
	ОбязательныеРеквизиты.Добавить("КоличествоРабочихДней");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Сотрудники");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Сотрудники.Контрагент");
	ОбязательныеРеквизиты.Добавить("Сотрудники.Должность");
	ОбязательныеРеквизиты.Добавить("Сотрудники.ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("Сотрудники.НачислениеУдержание");
	ОбязательныеРеквизиты.Добавить("Сотрудники.БазоваяСумма");
	ОбязательныеРеквизиты.Добавить("Сотрудники.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизитыСотрудники = Новый Структура();
	КонтролируемыеРеквизитыСотрудники.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты = Новый Структура;
	КонтролируемыеРеквизиты.Вставить("Сотрудники", КонтролируемыеРеквизитыСотрудники);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Сотрудники.Количество() > 0);

	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ТребуетсяПересчетКоличестваРабочихДней = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетКоличестваРабочихДней", Ложь);
	
	Если ТребуетсяПересчетКоличестваРабочихДней Тогда
		ПараметрыДействия.Вставить("ТребуетсяПересчетКоличестваРабочихДней", Ложь);
		
		Для каждого Строка Из Объект.Сотрудники Цикл
			РассчитатьСуммуВыплаты(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	Объект.ДатаНачала = НачалоМесяца(Объект.Дата);
	Объект.ДатаКонца  = КонецМесяца(Объект.Дата);
	
	ПересчетКоличестваРабочихДней(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата начала".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаНачалаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ДатаНачала > Объект.ДатаКонца Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты его окончания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	КонецЕсли;
	
	ПересчетКоличестваРабочихДней(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Дата конца".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаКонцаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ДатаНачала > Объект.ДатаКонца Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты его окончания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	КонецЕсли;
	
	ПересчетКоличестваРабочихДней(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Дата конца".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КоличествоРабочихДнейПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("ТребуетсяПересчетКоличестваРабочихДней", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

// Обработчик события возникающего при изменении данных реквизита "Контрагент" в таблице "Сотрудники".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.Контрагент.Пустая() ИЛИ Строка.Контрагент.ЭтоГруппа Тогда
		Строка.Контрагент			 = Справочники.Контрагенты.ПустаяСсылка();
		Строка.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		Строка.Должность             = Справочники.Должности.ПустаяСсылка();
	Иначе
		
		// Получим основной договор для контрагента.
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		ПараметрыДействия.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		
		Строка.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Строка.Контрагент, Перечисления.ВидыДоговоров.Зарплата, Объект, ПараметрыДействия);
		
		// Установим должность сотрудника.
		Если НЕ Строка.Контрагент.Сотрудник.Пустая() Тогда
			Строка.Должность = Строка.Контрагент.Сотрудник.Должность;
			СотрудникиДолжностьПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	СотрудникиДоговорВзаиморасчетовПриИзменении(Объект,Строка,ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ Строка.ДоговорВзаиморасчетов.Пустая() Тогда
		Если Строка.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
			Строка.СпособЗачетаАвансов = Неопределено;
		Иначе
			Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоставДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент" в таблице "Сотрудники".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиДолжностьПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.Контрагент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Сотрудник"             , Строка.Контрагент.Сотрудник);
	Отбор.Вставить("ПодразделениеКомпании" , Объект.ПодразделениеКомпании);
	Отбор.Вставить("Должность"             , Строка.Должность);
	Отбор.Вставить("НачислениеУдержание"   , Строка.НачислениеУдержание);
	
	СведенияОСотруднике = РегистрыСведений.СведенияОСотрудниках.ПолучитьПоследнее(Объект.Дата, Отбор);
	
	Если Строка.НачислениеУдержание.СпособРасчета = Перечисления.СпособыРасчета.Процентом Тогда
		Строка.БазоваяСумма = СведенияОСотруднике.БазоваяСумма;
	Иначе
		Строка.БазоваяСумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СведенияОСотруднике.БазоваяСумма,
																   Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
																   Объект.КурсВалютыУпр,
																   Объект.ВалютаДокумента,
																   Объект.КурсДокумента);
	КонецЕсли;
	
	Если Строка.НачислениеУдержание.СпособРасчета = Перечисления.СпособыРасчета.ПоДням Тогда
		Строка.Отработано = Объект.КоличествоРабочихДней;
	Иначе
		Строка.Отработано = 0;
	КонецЕсли;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СотрудникиОтработаноПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент" в таблице "Сотрудники".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиНачислениеУдержаниеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.Контрагент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Сотрудник"             , Строка.Контрагент.Сотрудник);
	Отбор.Вставить("ПодразделениеКомпании" , Объект.ПодразделениеКомпании);
	Отбор.Вставить("Должность"             , Строка.Должность);
	Отбор.Вставить("НачислениеУдержание"   , Строка.НачислениеУдержание);
	
	СведенияОСотруднике = РегистрыСведений.СведенияОСотрудниках.ПолучитьПоследнее(Объект.Дата, Отбор);
	
	Если Строка.НачислениеУдержание.СпособРасчета = Перечисления.СпособыРасчета.Процентом Тогда
		Строка.БазоваяСумма = СведенияОСотруднике.БазоваяСумма;
	Иначе
		Строка.БазоваяСумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СведенияОСотруднике.БазоваяСумма,
																   Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
																   Объект.КурсВалютыУпр,
																   Объект.ВалютаДокумента,
																   Объект.КурсДокумента);
	КонецЕсли;
	
	Если Строка.НачислениеУдержание.СпособРасчета = Перечисления.СпособыРасчета.ПоДням Тогда
		Строка.Отработано = Объект.КоличествоРабочихДней;
	Иначе
		Строка.Отработано = 0;
	КонецЕсли;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СотрудникиОтработаноПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Отработано" в таблице "Сотрудники".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиОтработаноПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	РассчитатьСуммуВыплаты(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "БазоваяСумма" в таблице "Сотрудники".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СотрудникиБазоваяСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	РассчитатьСуммуВыплаты(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Сотрудники");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "НачислениеЗарплаты");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Сотрудники");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СотрудникиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить сотрудниками подразделения'");
	Команда.Идентификатор	= "СотрудникиЗаполнитьСотрудникамиПодразделения";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Сотрудники";
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СотрудникиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Проставить нормативные дни и пересчитать начисление'");
	Команда.Идентификатор	= "СотрудникиПроставитьНормативныеДниИПересчитатьНачисление";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти 				= "Сотрудники";
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СотрудникиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить начислениями сотрудникам по заказ-нарядам'");
	Команда.Идентификатор	= "СотрудникиЗаполнитьНачисленияСотрудникамПоЗаказНаряду";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Сотрудники";
	Команда.ФункциональныеОпции = "ИспользоватьРасчетыНачисленийСотрудникамВЗаказНарядах";
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("СотрудникиЗаполнитьСотрудникамиПодразделения.Видимость",               Истина);
	ПараметрыКоманд.Вставить("СотрудникиЗаполнитьСотрудникамиПодразделения.Доступность",             Истина);
	ПараметрыКоманд.Вставить("СотрудникиПроставитьНормативныеДниИПересчитатьНачисление.Видимость",   Истина);
	ПараметрыКоманд.Вставить("СотрудникиПроставитьНормативныеДниИПересчитатьНачисление.Доступность", Истина);	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по сотрудникам подразделения
//
Функция СотрудникиЗаполнитьСотрудникамиПодразделения(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	СведенияОСотрудникахСрезПоследних.Должность КАК Должность,
	|	СведенияОСотрудникахСрезПоследних.НачислениеУдержание КАК НачислениеУдержание,
	|	Контрагенты.Сотрудник.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	РегистрСведений.СведенияОСотрудниках.СрезПоследних(&МоментВремени, ПодразделениеКомпании = &Подразделение) КАК СведенияОСотрудникахСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СведенияОСотрудникахСрезПоследних.Сотрудник = Контрагенты.Сотрудник
	|ГДЕ
	|	(Контрагенты.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(Контрагенты.Сотрудник.ДатаУвольнения, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МоментВремени, МЕСЯЦ))";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("МоментВремени", Объект.Дата);
	РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
	
	Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Контрагент			= Выборка.Контрагент;
		НоваяСтрока.Должность			= Выборка.Должность;
		НоваяСтрока.НачислениеУдержание	= Выборка.НачислениеУдержание;
		СотрудникиКонтрагентПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // СотрудникиЗаполнитьСотрудникамиПодразделения()

// Обработчик заполнения документа по сотрудникам подразделения
//
Функция СотрудникиПроставитьНормативныеДниИПересчитатьНачисление(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.КоличествоРабочихДней <> 0 Тогда
		Для каждого ТекСтрокаТЧ Из Объект.Сотрудники Цикл  	
			ТекСтрокаТЧ.Отработано = Объект.КоличествоРабочихДней;
			СотрудникиОтработаноПриИзменении(Объект, ТекСтрокаТЧ, ПараметрыДействия);
		КонецЦикла;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Количество рабочих дней равно 0. Заполнение невозможно.'"), 
			Ссылка
		);
	КонецЕсли;
	
КонецФункции // СотрудникиПроставитьНормативныеДниИПересчитатьНачисление()

// Обработчик заполнения документа начислениями сотрудников по заказ-нарядам
//
Функция СотрудникиЗаполнитьНачисленияСотрудникамПоЗаказНаряду(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
		
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл   = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		КурсУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
	Иначе
		КурсУпр = Объект.КурсВалютыУпр;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Сотрудник,
	|	НачисленияСотрудникамПоЗаказНарядамОбороты.Сотрудник.Должность КАК Должность,
	|	НачисленияСотрудникамПоЗаказНарядамОбороты.ВидНачисления КАК ВидНачисления,
	|	СУММА(НачисленияСотрудникамПоЗаказНарядамОбороты.НачисленоОборот) КАК Начислено,
	|	СУММА(НачисленияСотрудникамПоЗаказНарядамОбороты.НачисленоУпрОборот) КАК НачисленоУпр,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НачисленияСотрудникамПоЗаказНарядамОбороты.ЗаказНаряд) КАК ЗаказНарядПредставление
	|ИЗ
	|	РегистрНакопления.НачисленияСотрудникамПоЗаказНарядам.Обороты(&НачалоПериода, &КонецПериода, , ПодразделениеКомпании = &ПодразделениеКомпании) КАК НачисленияСотрудникамПоЗаказНарядамОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО НачисленияСотрудникамПоЗаказНарядамОбороты.Сотрудник = Контрагенты.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.Ссылка,
	|	НачисленияСотрудникамПоЗаказНарядамОбороты.Сотрудник.Должность,
	|	НачисленияСотрудникамПоЗаказНарядамОбороты.ВидНачисления,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НачисленияСотрудникамПоЗаказНарядамОбороты.ЗаказНаряд)";
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.ДатаКонца));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
	
	Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Контрагент			= Выборка.Сотрудник;
		НоваяСтрока.Должность			= Выборка.Должность;
		СотрудникиКонтрагентПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.НачислениеУдержание = Выборка.ВидНачисления;
		НоваяСтрока.Отработано			= 0;
		// Сформируем сумму
		Если ВалютаРегл = Объект.ВалютаДокумента Тогда
			Сумма = Выборка.Начислено;
		ИначеЕсли ВалютаУпр = Объект.ВалютаДокумента Тогда
			Сумма = Выборка.НачисленоУпр;
		Иначе
			Сумма = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Выборка.НачисленоУпр, Объект.ВалютаДокумента, Объект.КурсДокумента, ВалютаУпр, КурсУпр),
				2);
		КонецЕсли;
		НоваяСтрока.БазоваяСумма = Сумма;
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.ОснованиеНачисления = Выборка.ЗаказНарядПредставление;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.НачислениеЗарплаты",
		"ПФ_MXL_Начисление",
		НСтр("ru = 'Начисление зарплаты'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Начисление") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Начисление",
															НСтр("ru = 'Начисление зарплаты'"),
															ПечатьНачисление(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "Начисление"
//
Функция ПечатьНачисление(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачислениеЗарплаты_Начисление";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НачислениеЗарплаты.ПФ_MXL_Начисление");
		
		ОбластьЗаголовок        = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы     = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаКонтрагент = Макет.ПолучитьОбласть("СтрокаКонтрагент");
		ОбластьСтрокаНачисление = Макет.ПолучитьОбласть("СтрокаНачисление");
		ОбластьИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Заголовок
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьЗаголовок.Параметры.Организация = Документ.Организация;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ТекстДатаНачала = Формат(Документ.ДатаНачала, "ДЛФ=D");
		ТекстДатаКонца  = Формат(Документ.ДатаКонца,  "ДЛФ=D");
		ОбластьЗаголовок.Параметры.Период = НСтр("ru = 'Период с'") + Символы.НПП + ТекстДатаНачала + " по " + ТекстДатаКонца
			+ "." + Символы.НПП + НСтр("ru = 'Количество рабочих дней:'") + Символы.НПП + Документ.КоличествоРабочихДней;
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачислениеЗарплатыСотрудники.Контрагент КАК Контрагент,
			|	НачислениеЗарплатыСотрудники.НачислениеУдержание КАК НачислениеУдержание,
			|	НачислениеЗарплатыСотрудники.НачислениеУдержание.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
			|	НачислениеЗарплатыСотрудники.НачислениеУдержание.СпособРасчета КАК СпособРасчета,
			|	ВЫБОР
			|		КОГДА НачислениеЗарплатыСотрудники.НачислениеУдержание.НачислениеИлиУдержание = &ЭтоНачисление
			|			ТОГДА ""+""
			|		ИНАЧЕ ""-""
			|	КОНЕЦ КАК ЗнакСуммы,
			|	СУММА(ВЫБОР
			|			КОГДА НачислениеЗарплатыСотрудники.НачислениеУдержание.НачислениеИлиУдержание = &ЭтоНачисление
			|				ТОГДА НачислениеЗарплатыСотрудники.Сумма
			|			ИНАЧЕ НачислениеЗарплатыСотрудники.Сумма * -1
			|		КОНЕЦ) КАК Сумма
			|ИЗ
			|	Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
			|ГДЕ
			|	НачислениеЗарплатыСотрудники.Ссылка = &ДокументСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	НачислениеЗарплатыСотрудники.Контрагент,
			|	НачислениеЗарплатыСотрудники.НачислениеУдержание,
			|	НачислениеЗарплатыСотрудники.НачислениеУдержание.СтатьяДоходовИРасходов,
			|	НачислениеЗарплатыСотрудники.НачислениеУдержание.СпособРасчета,
			|	ВЫБОР
			|		КОГДА НачислениеЗарплатыСотрудники.НачислениеУдержание.НачислениеИлиУдержание = &ЭтоНачисление
			|			ТОГДА ""+""
			|		ИНАЧЕ ""-""
			|	КОНЕЦ
			|ИТОГИ
			|	СУММА(Сумма)
			|ПО
			|	Контрагент");
		Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
		Запрос.УстановитьПараметр("ЭтоНачисление", Перечисления.НачислениеИлиУдержание.Начисление);
		
		Выборка1 = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Сразу два, т.к. выводим на второй странице только.
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента, Сумма", Документ.ВалютаДокумента, 0);
		
		// Заполним параметры шапки таблицы для следующего листа.
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		НомерСтроки = 0;
		СуммаВсего = 0;
		
		Пока Выборка1.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ТабДокВрем = Новый ТабличныйДокумент;
			
			ОбластьСтрокаКонтрагент.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрокаКонтрагент.Параметры.Контрагент = Выборка1.Контрагент;
			ОбластьСтрокаКонтрагент.Параметры.ЗнакСуммы = ?(Выборка1.Сумма > 0, "+", "-");
			ОбластьСтрокаКонтрагент.Параметры.Сумма = Формат(
				?(Выборка1.Сумма > 0, Выборка1.Сумма, -Выборка1.Сумма), ФорматВыводаСуммы);
			
			СуммаВсего = СуммаВсего + Выборка1.Сумма;
			
			ТабДокВрем.Вывести(ОбластьСтрокаКонтрагент);
			
			Выборка2 = Выборка1.Выбрать();
			Пока Выборка2.Следующий() Цикл
				ОбластьСтрокаНачисление.Параметры.НачислениеУдержание = Выборка2.НачислениеУдержание;
				ОбластьСтрокаНачисление.Параметры.ЗнакСуммы = ?(Выборка2.Сумма > 0, "+", "-");
				ОбластьСтрокаНачисление.Параметры.Сумма = Формат(
					?(Выборка2.Сумма > 0, Выборка2.Сумма, -Выборка2.Сумма), ФорматВыводаСуммы);
				ТабДокВрем.Вывести(ОбластьСтрокаНачисление);
			КонецЦикла;
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если НомерСтроки = Выборка1.Количество() Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ТабДокВрем,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента, Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(Выборка1, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Всего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ОбластьПодвал.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,
			Документ.ВалютаДокумента);
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьНачисление()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыплатаЗарплаты);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.НачислениеЗарплаты);

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НачислениеЗарплаты.Организация КАК Организация,
	|	НачислениеЗарплаты.Ссылка КАК Ссылка,
	|	НачислениеЗарплаты.Дата КАК Дата,
	|	НачислениеЗарплаты.ХозОперация КАК ХозОперация,
	|	НачислениеЗарплаты.Ссылка КАК Сделка,
	|	НачислениеЗарплаты.СуммаДокумента КАК Сумма,
	|	НачислениеЗарплаты.ВалютаДокумента КАК ВалютаДокумента,
	|	НачислениеЗарплаты.КурсДокумента КАК КурсДокумента,
	|	НачислениеЗарплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыСотрудники.Контрагент КАК Контрагент,
	|	НачислениеЗарплатыСотрудники.Должность КАК Должность,
	|	НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	НачислениеЗарплатыСотрудники.НачислениеУдержание КАК НачислениеУдержание,
	|	НачислениеЗарплатыСотрудники.БазоваяСумма КАК БазоваяСумма,
	|	НачислениеЗарплатыСотрудники.Отработано КАК Отработано,
	|	НачислениеЗарплатыСотрудники.Сумма КАК Сумма,
	|	НачислениеЗарплатыСотрудники.ОснованиеНачисления КАК ОснованиеНачисления,
	|	НачислениеЗарплатыСотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НачисленияСотрудникам
	|ИЗ
	|	Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
	|ГДЕ
	|	НачислениеЗарплатыСотрудники.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСотрудникам.Контрагент КАК Контрагент,
	|	НачисленияСотрудникам.Должность КАК Должность,
	|	НачисленияСотрудникам.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	НачисленияСотрудникам.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	НачисленияСотрудникам.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияСотрудникам.БазоваяСумма КАК БазоваяСумма,
	|	НачисленияСотрудникам.Отработано КАК Отработано,
	|	НачисленияСотрудникам.Сумма КАК Сумма,
	|	НачисленияСотрудникам.ОснованиеНачисления КАК ОснованиеНачисления,
	|	НачисленияСотрудникам.Ссылка КАК Ссылка
	|ИЗ
	|	НачисленияСотрудникам КАК НачисленияСотрудникам
	|ГДЕ
	|	НачисленияСотрудникам.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	НачисленияСотрудникам.Контрагент КАК Контрагент,
	|	НачисленияСотрудникам.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияСотрудникам.НачислениеУдержание.НачислениеИлиУдержание = ЗНАЧЕНИЕ(Перечисление.НачислениеИлиУдержание.Начисление)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ЕСТЬNULL(НачисленияСотрудникам.Сумма, 0)) КАК Сумма,
	|	НачисленияСотрудникам.ВалютаДоговора КАК ВалютаДоговора
	|ИЗ
	|	Задолженность КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСотрудникам КАК НачисленияСотрудникам
	|		ПО Задолженность.Ссылка = НачисленияСотрудникам.Ссылка
	|ГДЕ
	|	НачисленияСотрудникам.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.Организация,
	|	Задолженность.КурсДокумента,
	|	Задолженность.ВалютаУпр,
	|	Задолженность.КурсВалютыУпр,
	|	НачисленияСотрудникам.ВалютаДоговора,
	|	Задолженность.Дата,
	|	Задолженность.ХозОперация,
	|	Задолженность.СпособЗачетаАвансов,
	|	НачисленияСотрудникам.ДоговорВзаиморасчетов,
	|	Задолженность.КурсВалютыРегл,
	|	Задолженность.ВалютаДокумента,
	|	Задолженность.Сделка,
	|	Задолженность.ВалютаРегл,
	|	НачисленияСотрудникам.Контрагент,
	|	Задолженность.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеОбОплате.Вставить(Колонка.Имя);
	КонецЦикла;
	
	КурсыВалютВзаиморасчетов = Новый Соответствие;
	СотрудникиКНачислению = РезультатЗапроса.Выбрать();
	
	Пока СотрудникиКНачислению.Следующий() Цикл
		
		Если СотрудникиКНачислению.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеОбОплате, СотрудникиКНачислению);
		
		// Найдем курс договора
		КурсДоговора = КурсыВалютВзаиморасчетов.Получить(СотрудникиКНачислению.ВалютаДоговора);
		Если КурсДоговора = Неопределено Тогда
			ДанныеОКурсеДоговора = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				СотрудникиКНачислению.ВалютаДоговора,
				СотрудникиКНачислению.Дата);
			КурсДоговора = ДанныеОКурсеДоговора.Курс / ?(ДанныеОКурсеДоговора.Кратность = 0, 1, ДанныеОКурсеДоговора.Кратность);
		КонецЕсли;
		ДанныеОбОплате.Вставить("КурсВалютыВзаиморасчетов", КурсДоговора);
		
		ЭтоНачисление = (ДанныеОбОплате.Сумма < 0);
		ДанныеОбОплате.Сумма = ?(ДанныеОбОплате.Сумма < 0, -1, 1) * ДанныеОбОплате.Сумма;
		
		РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,,
			Отказ,
			ЭтоНачисление);
		
	КонецЦикла;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли