// Модуль документа "Начисление зарплаты"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
                                                 
// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса());
		ДатаКонца  = КонецМесяца(ТекущаяДатаСеанса());
		
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ВыполнятьПересчет", Ложь);
		Документы.НачислениеЗарплаты.ДатаКонцаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если (НачалоДня(Дата) < НачалоДня(ДатаНачала)) ИЛИ (КонецДня(Дата) > КонецДня(ДатаКонца)) Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала, окончания и дата документа должны находится в одном периоде.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если ДатаНачала > ДатаКонца Тогда
		ТекстСообщения = НСтр("ru = 'Неправильно задан период.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	// Суммовые разницы необходимо списывать в разрезе подразделений договоров. Поэтому используем таблицу значений.
	ТаблицаСуммовыхРазниц = Новый ТаблицаЗначений;
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("СуммаУпр"     , Новый ОписаниеТипов("Число"));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеЗарплатыСотрудники.Контрагент КАК Контрагент,
	|	НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК Подразделение,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеЗарплатыСотрудники.НачислениеУдержание.НачислениеИлиУдержание = &ЭтоНачисление
	|				ТОГДА НачислениеЗарплатыСотрудники.Сумма
	|			ИНАЧЕ -НачислениеЗарплатыСотрудники.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	НачислениеЗарплатыСотрудники.СпособЗачетаАвансов КАК СпособЗачетаАвансов
	|ИЗ
	|	Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
	|ГДЕ
	|	НачислениеЗарплатыСотрудники.Ссылка = &ДокументСсылка
	|	И НачислениеЗарплатыСотрудники.Сумма <> 0
	|	И НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов <> ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыСотрудники.Контрагент,
	|	НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов,
	|	НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов.ПодразделениеКомпании,
	|	НачислениеЗарплатыСотрудники.СпособЗачетаАвансов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ЭтоНачисление"  , Перечисления.НачислениеИлиУдержание.Начисление);
	
	РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
	Если НЕ РезультатЗапросаПоСотрудникам.Пустой() Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
		Пока Выборка.Следующий() И НЕ Отказ Цикл
			НаборЗаписейВзаиморасчеты.ДокументОбъект 		           = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения		           = РежимПроведения;
			НаборЗаписейВзаиморасчеты.Контрагент 			           = Выборка.Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов            = Выборка.ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.Сделка 				           = Неопределено;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок  			   =
				Выборка.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем       = Неопределено;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			
			Если Выборка.Сумма > 0 Тогда
				НаборЗаписейВзаиморасчеты.Сумма = Выборка.Сумма;
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
			ИначеЕсли Выборка.Сумма < 0 Тогда
				НаборЗаписейВзаиморасчеты.Сумма = -Выборка.Сумма;
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
			КонецЕсли; 
			
			// доходы и расходы по суммовым разницам
			СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
				НоваяСтрока = ТаблицаСуммовыхРазниц.Добавить();
				
				Если БалансВедетсяПоПодразделениям Тогда
					НоваяСтрока.Подразделение = Выборка.Подразделение;
				Иначе
					НоваяСтрока.Подразделение = ПодразделениеКомпании;
				КонецЕсли;
				
				НоваяСтрока.СуммаУпр = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Документы.НачислениеЗарплаты.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.НачислениеЗарплаты.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Суммовые разницы.
	ТаблицаСуммовыхРазниц.Свернуть("Подразделение", "СуммаУпр");
	Для Каждого ТекСтрока Из ТаблицаСуммовыхРазниц Цикл
		Если ТекСтрока.СуммаУпр <> 0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			
			НаборЗаписейДиР.ДокументОбъект         = Ссылка;
			НаборЗаписейДиР.Подразделение          = ТекСтрока.Подразделение; 
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			
			Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
				НаборЗаписейДиР.Расход = -ТекСтрока.СуммаУпр;
			Иначе
				НаборЗаписейДиР.Доход  = ТекСтрока.СуммаУпр;
			КонецЕсли;
			
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК Подразделение,
	|	НачислениеЗарплатыСотрудники.НачислениеУдержание.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеЗарплатыСотрудники.НачислениеУдержание.НачислениеИлиУдержание = &ЭтоНачисление
	|				ТОГДА НачислениеЗарплатыСотрудники.Сумма
	|			ИНАЧЕ -НачислениеЗарплатыСотрудники.Сумма
	|		КОНЕЦ) КАК Сумма
	|ИЗ                                                                                           
	|	Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
	|ГДЕ
	|	НачислениеЗарплатыСотрудники.Ссылка = &ДокументСсылка
	|	И НачислениеЗарплатыСотрудники.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|   НачислениеЗарплатыСотрудники.ДоговорВзаиморасчетов.ПодразделениеКомпании,
	|	НачислениеЗарплатыСотрудники.НачислениеУдержание.СтатьяДоходовИРасходов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ЭтоНачисление"  , Перечисления.НачислениеИлиУдержание.Начисление);
	
	РезультатЗапросаПоСтатьям = Запрос.Выполнить();
	Если НЕ РезультатЗапросаПоСтатьям.Пустой() Тогда
		ФлагУпрВалюты   = (ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		
		Выборка = РезультатЗапросаПоСтатьям.Выбрать();
		Пока Выборка.Следующий() И НЕ Отказ Цикл
			НаборЗаписейДиР.ДокументОбъект         = Ссылка;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Выборка.СтатьяДоходовИРасходов;
			НаборЗаписейДиР.ВУпрВалюте             = ФлагУпрВалюты;
			НаборЗаписейДиР.Расход                 = Выборка.Сумма;
			
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = Выборка.Подразделение;
			КонецЕсли;
			
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЦикла;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
