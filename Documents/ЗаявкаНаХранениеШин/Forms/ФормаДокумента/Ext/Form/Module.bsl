///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Заявка на хранение шин"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(
		ЭтаФорма,
		"АвтомобильРасширеннаяПодсказка",
		"Гиперссылка",
		"Просмотр",
		Метаданные.Отчеты.ИсторияАвтомобилей);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	// Установим вариант отображения дополнительных полей "Код" и "Артикул"
	УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонокКодАртикул(ЭтотОбъект, "Шины");
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Шины);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, "Шины");
		
	ЗаполнитьИндексКартинкиШины();
	
	ПоОсямВрем = Новый Соответствие();
	ПоОсямВрем.Вставить(Перечисления.РасположениеШин.ЛевоеЗаднее, Перечисления.РасположениеШин.ЛевоеПереднее);
	ПоОсямВрем.Вставить(Перечисления.РасположениеШин.ЛевоеПереднее, Перечисления.РасположениеШин.ЛевоеЗаднее);
	ПоОсямВрем.Вставить(Перечисления.РасположениеШин.ПравоеЗаднее, Перечисления.РасположениеШин.ПравоеПереднее);
	ПоОсямВрем.Вставить(Перечисления.РасположениеШин.ПравоеПереднее, Перечисления.РасположениеШин.ПравоеЗаднее);
	СоответствиеПоОсям = Новый ФиксированноеСоответствие(ПоОсямВрем);
	
	ЗаполнитьСписокАвтомобилейКонтрагента();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
		
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
	ЗаполнитьДоступКПрисоединеннымФайлам(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	УправлениеДиалогомАльфаАвтоКлиент.ПриОткрытии(ЭтотОбъект);
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтаФорма, "Шины");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);	
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Модифицированность = Истина;
		
		Если ТипЗнч(Источник) = Тип("Массив") Тогда 
			
			ПрисоединенныйФайлСсылка = Источник[0];
			
			Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка)
				И ТипЗнч(ПрисоединенныйФайлСсылка) = Тип("СправочникСсылка.ЗаявкаНаХранениеШинПрисоединенныеФайлы") Тогда
				
				ОбработкаЗаписиПрисоединенногоФайлаНаСервере(ПрисоединенныйФайлСсылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	УправлениеДиалогомАльфаАвтоСервер.ПриЧтенииНаСервере(ЭтотОбъект);

	НастроитьПараметрыВыбораЭлементовФормы();
	ОбновитьПакетСвязанныхДокументов();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаявкаНаХранениеШин", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
    РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(ЭтотОбъект.Объект.Шины);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"Шины");
	ЗаполнитьИндексКартинкиШины();
		
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);	
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);

КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаХранениеШин.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаХранениеШин.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаНачалаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Дата окончания не может быть раньше даты начала",
			Объект.Ссылка,
			"ДатаОкончания",
			"Объект");
		УстановитьДатуОкончанияПоУмолчанию(ПараметрыДействия);
		
	Иначе
		
		ДатаОкончанияПриИзмененииНаСервере(ПараметрыДействия);
	
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуОкончанияПоУмолчанию(ПараметрыДействия = Неопределено)

	Документы.ЗаявкаНаХранениеШин.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();

КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаХранениеШин.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СкладКомпанииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	Документы.ЗаявкаНаХранениеШин.СкладКомпанииПриИзменении(Объект,ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаХранениеШин.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия); 
	НастроитьПараметрыВыбораЭлементовФормы();
	ЗаполнитьСписокАвтомобилейКонтрагента(ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаХранениеШин.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Автомобиль, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	
	ОткрытьФорму("Справочник.Автомобили.ФормаСписка", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШины
	  
&НаКлиенте
Процедура ШиныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ШиныИндексКартинки" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные.ПрисоединенныйФайл.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.ПрисоединенныйФайл, УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПриАктивизацииСтроки(Элемент)
		
	Если ЕстьДоступКПрисоединеннымФайлам Тогда
		ДоступностьФайлы = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПрисоединенныйФайл) Тогда
		ДоступностьФайлы = Ложь;
	Иначе
		ДоступностьФайлы = Истина;
	КонецЕсли;
	
	Элементы.Шины.КоманднаяПанель.ПодчиненныеЭлементы.ШиныШиныПрисоединенныеФайлы.Доступность = ДоступностьФайлы;
	
КонецПроцедуры

&НаСервере
Процедура ШиныПередУдалениемНаСервере()
	
	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ОчиститьПрисоединенныеФайлыВСтрокеШин(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПередУдалением(Элемент, Отказ)
	
	ШиныПередУдалениемНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ШиныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект, 
		Элемент, 
		НоваяСтрока,
		ОтменаРедактирования, 
		"Шины"
	);
	
КонецПроцедуры 

&НаСервере
Процедура ШиныПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтаФорма);
	УправлениеДиалогомАльфаАвтоСервер.УстановитьНадписьПодавалаКолонки(Элементы.ШиныНоменклатура, ЭтаФорма.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПослеУдаления(Элемент)
	
	ШиныПослеУдаленияНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыШины

&НаСервере
Процедура ШиныНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ШиныНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия, "Шины");
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныНоменклатураПриИзменении(Элемент)
	
	ШиныНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ШиныНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Шины.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ШиныХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаХранениеШин.ШиныХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ШиныХарактеристикаНоменклатурыПриИзмененииНаСервере()

&НаКлиенте
Процедура ШиныХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ШиныХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныХарактеристикаНоменклатурыАвтоПодбор(
	Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	Ожидание,
	СтандартнаяОбработка)
	
	МинимальнаяДлинаСтрокиПоиска = 2;
	
	Если ПустаяСтрока(Текст) ИЛИ СтрДлина(Текст) < МинимальнаяДлинаСтрокиПоиска Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Варианты = ПоискШин(Текст);
	
	Если НЕ ЗначениеЗаполнено(Варианты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Варианты;
	
КонецПроцедуры

&НаСервере
Процедура ШиныЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ШиныЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныЕдиницаИзмеренияПриИзменении(Элемент)
	
	ШиныЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ШиныКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ШиныКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ШиныКоличествоПриИзменении(Элемент)
	
	ШиныКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ШиныПримечаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ТекПримечание = Элементы.Шины.ТекущиеДанные.Примечание;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ТекПримечание", ТекПримечание);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ОбработкаПримечания", "ВыборИзСправочника");
	ОткрытьФорму("Справочник.Дефекты.ФормаВыбора",
				ПараметрыОткрытия,
				ЭтаФорма,,,,
				Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыОткрытия),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПримечаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекПримечание = Элементы.Шины.ТекущиеДанные.Примечание;
	Если ЭтаФорма.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	ТекПримечание = СтрЗаменить(ТекПримечание, "¶", Символы.ПС);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработкаПримечания", "ВводСтроки");
	ПоказатьВводСтроки(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры), ТекПримечание, "Примечание",, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Обработаем событие в контексте сервера
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)

	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаявкаНаХранениеШин.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)

	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаХранениеШин.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьШинамиПоУмолчанию(Команда)
	
	ЗаполнитьШинамиПоУмолчаниюНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПрисоединенныеФайлы(Команда)
	
	Если Элементы.Шины.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШиныПрисоединенныеФайлыСтроки(Элементы.Шины.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатурыУслуги(Команда)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,,,, Новый Структура("НеУстанавливатьОтборНаОстаток", Истина));
	
КонецПроцедуры // ПодборНоменклатуры()

&НаКлиенте
Процедура СкопироватьДанные(Команда)
	
	Если Элементы.Шины.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Строки = Новый Массив();
	ДанныеСтроки = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	
	Для Каждого Шина Из Объект.Шины Цикл
		
		Если Шина.РасположениеШины = ДанныеСтроки.РасположениеШины Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Строки.Добавить(Шина);
		
	КонецЦикла;
	
	СкопироватьШины(ДанныеСтроки, Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеДляОси(Команда)
	
	Если Элементы.Шины.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтроки = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	Отбор = Новый Структура("РасположениеШины", СоответствиеПоОсям.Получить(ДанныеСтроки.РасположениеШины));
	СкопироватьШины(ДанныеСтроки, Объект.Шины.НайтиСтроки(Отбор));
	
КонецПроцедуры

// обработка команды ввода приходного складского ордера
&НаКлиенте
Процедура ПринятьШины(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения операции необходимо записать документ'"));
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПриходныйСкладскойОрдер.ФормаОбъекта",
		Новый Структура("Основание", Объект.Ссылка),
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("Подключаемый_ВводСкладскогоОрдераЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

// обработка команды ввода расходного складского ордера
&НаКлиенте
Процедура ВернутьШины(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения операции необходимо записать документ.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ДокументПринятиеШинНаХранение.Пустая() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нет информации о принятии шин на хранение.'"));
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.РасходныйСкладскойОрдер.ФормаОбъекта",
		Новый Структура("Основание", Объект.Ссылка),
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("Подключаемый_ВводСкладскогоОрдераЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ШиныХарактеристикаНоменклатуры",
		"Объект.Шины.ВладелецХарактеристики"
	);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
	// Запрет редактирования ТоварыСумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	ЗаполнениеОбъектовАльфаАвто.УстановитьВидимостьКолонокТЧ(ЭтотОбъект, Объект, "Шины");
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро
&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияОбАвтомобилеНажатие(Элемент)
	
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, Объект.Автомобиль);
	
КонецПроцедуры 

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИндексКартинкиШины()
	
	Для Каждого СтрокаТЧ Из Объект.Шины Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ПрисоединенныйФайл) Тогда
			СтрокаТЧ.ИндексКартинки = СтрокаТЧ.ПрисоединенныйФайл.ИндексКартинки;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаписиПрисоединенногоФайлаНаСервере(ПрисоединенныйФайлСсылка)
	
	Если ПрисоединенныйФайлСсылка.ВладелецФайла <> Объект.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(Элементы.Шины.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПрисоединенныйФайл = ПрисоединенныйФайлСсылка;
	ТекущиеДанные.ИндексКартинки = ПрисоединенныйФайлСсылка.ИндексКартинки;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПрисоединенныеФайлыДобавитьОткрытьФорму(ИдентификаторСтроки)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ТекущиеДанные = Объект.Шины.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПрисоединенныйФайл) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
		Возврат;
		
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущиеДанные.ПрисоединенныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПрисоединенныеФайлыСтрокиВопросЗавершение(Ответ, ИдентификаторСтроки) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШиныПрисоединенныеФайлыДобавитьОткрытьФорму(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныПрисоединенныеФайлыСтроки(ИдентификаторСтроки)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ШиныПрисоединенныеФайлыСтрокиВопросЗавершение", ЭтотОбъект, ИдентификаторСтроки),
			НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
		
	КонецЕсли;
	
	ШиныПрисоединенныеФайлыДобавитьОткрытьФорму(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШинамиНаСервере(Результат)
	
	Документы.ЗаявкаНаХранениеШин.ЗаполнитьШинамиПоУмолчанию(Объект, Результат);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтаФорма,"Шины");
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьШинамиПослеВыбораНоменклатуры(Результат, Параметры) Экспорт
	
	ЗаполнитьШинамиНаСервере(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШинамиВыборНоменклатуры()
	
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("ВидНоменклатуры", ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Шины"));
	Отбор.Вставить("ЭтоГруппа", Ложь); 

	ПараметрыФормы.Вставить("Отбор", Отбор);	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока");
	
	// Вызов процедуры клиентского модуля
	ОповещениеЗаполнениеШинами = Новый ОписаниеОповещения("ЗаполнитьШинамиПослеВыбораНоменклатуры", ЭтаФорма, ПараметрыФормы);
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,
		,
		,
		ОповещениеЗаполнениеШинами
	);	
	
КонецПроцедуры
	  
&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеПередЗаполнением(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьШинамиВыборНоменклатуры();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШинамиПоУмолчаниюНаКлиенте()
	
	Если Объект.Шины.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением таблицы шин табличная часть будет очищена. Продолжить заполнение?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеПередЗаполнением", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьШинамиВыборНоменклатуры();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СформироватьДефект(СуществующиеДефекты, НовыеДефекты)
	
	Возврат Справочники.Дефекты.СформироватьДефект(НовыеДефекты, СуществующиеДефекты);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВводСкладскогоОрдераЗавершение(Результат, ДопПараметры) Экспорт
	
	ОбновитьПакетСвязанныхДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПакетСвязанныхДокументов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПриходныйСкладскойОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйСкладскойОрдер КАК ПриходныйСкладскойОрдер
	|ГДЕ
	|	НЕ ПриходныйСкладскойОрдер.ПометкаУдаления
	|	И ПриходныйСкладскойОрдер.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		РезультатЗапроса = Неопределено;	
	КонецПопытки;
	
	Если НЕ РезультатЗапроса = Неопределено И НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДокументПринятиеШинНаХранение = Выборка.Ссылка;
	КонецЕсли;
		
	
	Если НЕ ДокументПринятиеШинНаХранение.Пустая() Тогда
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РасходныйСкладскойОрдер.Ссылка КАК Документ
		|ИЗ
		|	Документ.РасходныйСкладскойОрдер КАК РасходныйСкладскойОрдер
		|ГДЕ
		|	НЕ РасходныйСкладскойОрдер.ПометкаУдаления
		|	И РасходныйСкладскойОрдер.ДокументОснование = &ДокументОснование";
		
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
		Исключение
			РезультатЗапроса = Неопределено;	
		КонецПопытки;
		
		Если НЕ РезультатЗапроса = Неопределено И НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДокументВыдачаШинСХранения = Выборка.Документ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьПакетаСвязанныхДокументов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПакетаСвязанныхДокументов()
	
	Элементы.ДокументПринятиеШинНаХранение.Видимость = НЕ ДокументПринятиеШинНаХранение.Пустая();
	Элементы.ПринятьШины.Видимость = НЕ Элементы.ДокументПринятиеШинНаХранение.Видимость;
	Элементы.ПринятьШины.Доступность = ЕстьДоступПоТипуДокумента("Изменение", ТипЗнч(ДокументПринятиеШинНаХранение));
	Элементы.ДокументПринятиеШинНаХранение.Доступность = ЕстьДоступПоТипуДокумента("Просмотр", ТипЗнч(ДокументПринятиеШинНаХранение));
	
	Элементы.ДокументВыдачаШинСХранения.Видимость = НЕ ДокументВыдачаШинСХранения.Пустая();
	Элементы.ВернутьШины.Видимость = НЕ Элементы.ДокументВыдачаШинСХранения.Видимость;
	Элементы.ВернутьШины.Доступность = ЕстьДоступПоТипуДокумента("Изменение", ТипЗнч(ДокументВыдачаШинСХранения));
	Элементы.ДокументВыдачаШинСХранения.Доступность = ЕстьДоступПоТипуДокумента("Просмотр", ТипЗнч(ДокументВыдачаШинСХранения));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступПоТипуДокумента(Право,Тип)
	
	ЕстьДоступ = Истина;
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип);
	
	Если НЕ МетаданныеОбъекта = Неопределено Тогда
		
		ЕстьДоступ = ПравоДоступа(Право, МетаданныеОбъекта);
		
	КонецЕсли;
	
	Возврат ЕстьДоступ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокАвтомобилейКонтрагента(ПараметрыДействия = Неопределено)
	
	// заполним список выбора автомобилями контрагента
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("АвтомобилиКонтрагента") Тогда
		АвтомобилиКонтрагента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобилиКонтрагента", Новый Массив);
	Иначе
		АвтомобилиКонтрагента = Документы.ЗаявкаНаХранениеШин.ПолучитьАвтомобилиКонтрагента(Объект);
	КонецЕсли;
	
	Элементы.Автомобиль.СписокВыбора.ЗагрузитьЗначения(АвтомобилиКонтрагента);
	
КонецПроцедуры // ЗаполнитьСписокАвтомобилейКонтрагента()

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.НадписьСрокХранения.Заголовок = Документы.ЗаявкаНаХранениеШин.СформироватьРазностьДат(Объект.ДатаОкончания, Объект.ДатаНачала);
	
	Если ЗначениеЗаполнено(Объект.СкладКомпании) И
		 (Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый) Тогда
		
		ХранениеШинКомплектами = УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами", Объект.Дата, Объект.ПодразделениеКомпании);
	
		Если ХранениеШинКомплектами = Неопределено ИЛИ ХранениеШинКомплектами Тогда	
			Элементы.Ячейка.Видимость = Истина;
			Элементы.ДекорацияЯчейка.Видимость = Истина;
			Элементы.ШиныЯчейка.Видимость = Ложь;
		Иначе
			Элементы.Ячейка.Видимость = Ложь;
			Элементы.ДекорацияЯчейка.Видимость = Ложь;
			Элементы.ШиныЯчейка.Видимость = Истина;
		КонецЕсли; 
		
	Иначе
		
		Элементы.Ячейка.Видимость = Ложь;
		Элементы.ДекорацияЯчейка.Видимость = Ложь;
		Элементы.ШиныЯчейка.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.Автомобиль.РасширеннаяПодсказка.Заголовок = Справочники.Автомобили.СформироватьИнформациюАвтомобиля(Объект);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	// Если это обработка Примечания из ТЧ Шины
	Примечание = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ОбработкаПримечания", "");
	Если Примечание = "ВводСтроки" Тогда
		Элементы.Шины.ТекущиеДанные.Примечание = СокрЛП(РезультатОповещения);
	ИначеЕсли Примечание = "ВыборИзСправочника" Тогда
		Элементы.Шины.ТекущиеДанные.Примечание = СформироватьДефект(ДополнительныеПараметры.ТекПримечание, РезультатОповещения);
	КонецЕсли;

	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

&НаКлиенте
Процедура СкопироватьШины(Шаблон, Строки)
	
	Для Каждого Строка Из Строки Цикл
		
		ЗаполнитьЗначенияСвойств(Строка, Шаблон,, "ПрисоединенныйФайл,РасположениеШины");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокуВПараметрыПоиска(Текст)
	
	ЧастиСтроки = СтрРазделить(Текст, " ");
	
	ПредставленияЗимы = Новый Массив();
	ПредставленияЗимы.Добавить("з");
	ПредставленияЗимы.Добавить("зима");
	ПредставленияЗимы.Добавить("w");
	ПредставленияЗимы.Добавить("winter");
	ПредставленияЗимы.Добавить("p");
	ПредставленияЗимы.Добавить("pbvf");
	
	ПредставленияШипов = Новый Массив();
	ПредставленияШипов.Добавить("ш");
	ПредставленияШипов.Добавить("шипы");
	ПредставленияШипов.Добавить("шипованная");
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(6, 2, ДопустимыйЗнак.Неотрицательный);
	
	ПараметрыПоиска = Новый Структура();
	
	Для Каждого Часть Из ЧастиСтроки Цикл
		
		НРегЧасть = НРег(Часть);
		
		Если ПредставленияЗимы.Найти(НРегЧасть) <> Неопределено Тогда
			
			ПараметрыПоиска.Вставить("Сезон", Перечисления.СезоныШин.Зима);
			
		ИначеЕсли ПредставленияШипов.Найти(НРегЧасть) <> Неопределено Тогда
			
			ПараметрыПоиска.Вставить("Шипы", Истина);
			
		Иначе
			
			Значение = ТипЧисло.ПривестиЗначение(НРегЧасть);
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ ПараметрыПоиска.Свойство("Значение") ИЛИ ТипЗнч(ПараметрыПоиска.Значение) <> Тип("Массив") Тогда
				
				ПараметрыПоиска.Вставить("Значение", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение));
				
			Иначе
				
				ПараметрыПоиска.Значение.Добавить(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоискШин(Текст)
	
	ПараметрыПоиска = СтрокуВПараметрыПоиска(Текст);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска) Тогда
		
		Возврат Новый СписокЗначений();
		
	КонецЕсли;
	
	Построитель = Новый ПостроительЗапроса(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ПодходящиеШины
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|{ГДЕ
		|	ХарактеристикиНоменклатуры.ВысотаПрофиля КАК Значение,
		|	ХарактеристикиНоменклатуры.Сезон,
		|	ХарактеристикиНоменклатуры.Шипы}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 10
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|{ГДЕ
		|	ХарактеристикиНоменклатуры.Ширина КАК Значение,
		|	ХарактеристикиНоменклатуры.Сезон,
		|	ХарактеристикиНоменклатуры.Шипы}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 10
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|{ГДЕ
		|	ХарактеристикиНоменклатуры.Радиус КАК Значение,
		|	ХарактеристикиНоменклатуры.Сезон,
		|	ХарактеристикиНоменклатуры.Шипы}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
		|	ПодходящиеШины.Характеристика КАК Характеристика
		|ИЗ
		|	ПодходящиеШины КАК ПодходящиеШины"
	);
	
	Построитель.ЗаполнитьНастройки();
	
	Для Каждого ПолеОтбора Из ПараметрыПоиска Цикл
		
		ВидСравненияОтбора = ВидСравнения.Равно;
		Значение = ПолеОтбора.Значение;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Значение = Новый СписокЗначений();
			Значение.ЗагрузитьЗначения(ПолеОтбора.Значение);
			ВидСравненияОтбора = ВидСравнения.ВСписке;
			
		КонецЕсли;
		
		Отбор = Построитель.Отбор.Добавить(ПолеОтбора.Ключ);
		Отбор.Использование = Истина;
		Отбор.ВидСравнения = ВидСравненияОтбора;
		Отбор.Значение = Значение;
		
	КонецЦикла;
	
	Построитель.Выполнить();
	
	Если Построитель.Результат.Пустой() Тогда
		
		Возврат Новый СписокЗначений();
		
	КонецЕсли;
	
	Результат = Новый СписокЗначений();
	Результат.ЗагрузитьЗначения(Построитель.Результат.Выгрузить().ВыгрузитьКолонку("Характеристика"));
	Возврат Результат;
	
КонецФункции

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДоступКПрисоединеннымФайлам(Объект)
	
	Если РаботаСФайламиАльфаАвто.ТолькоПросмотрСправочникаХранилищаФайлов(Объект) Тогда
		ЕстьДоступКПрисоединеннымФайлам = Ложь;
	Иначе
		ЕстьДоступКПрисоединеннымФайлам = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти