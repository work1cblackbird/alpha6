// Модуль менеджера документа "Заявка на хранение шин"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СтоимостьШин", Объект.Шины.Итог("Цена"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки") + Объект.Товары.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции // ПолучитьТекстЗапросаПоКонтактам()

// Возвращает заявку на хранение шин, найденную среди подчиненных документов
//
Функция ПолучитьЗаявкуНаХранениеШин(ДокументОснование) Экспорт
	
	ЗаявкаНаХранениеШин = ДокументОснование;
	
	// Массив уже рассмотренных документов, используется, чтобы не допустить зацикливания.
	КонтрольПовторов = Новый Массив();
	Пока ТипЗнч(ЗаявкаНаХранениеШин) <> Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Цикл
		Если НЕ ЗначениеЗаполнено(ЗаявкаНаХранениеШин) 
			ИЛИ НЕ (КонтрольПовторов.Найти(ЗаявкаНаХранениеШин) = Неопределено) Тогда
			Прервать;
		КонецЕсли;

		КонтрольПовторов.Добавить(ЗаявкаНаХранениеШин);

		ЗаявкаНаХранениеШин = ЗаявкаНаХранениеШин.ДокументОснование;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаХранениеШин) Тогда
		ЗаявкаНаХранениеШин = Неопределено;
	КонецЕсли;
	
	Возврат ЗаявкаНаХранениеШин;
	
КонецФункции // ПолучитьЗаявкуНаХранениеШин()

// Возвращает разность между датой окончания и датой начала 
//
Функция СформироватьРазностьДат(Дата1, Дата2) Экспорт

    Лет        = 0;
    Месяцев    = 0;
    Дней    = 0;

    Если Дата1 > Дата2 Тогда

        ВременнаяДата = Дата1;

        Если День(ВременнаяДата) < День(Дата2) Тогда
            Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата, -1)) / 86400;
            ВременнаяДата = ДобавитьМесяц(ВременнаяДата, -1);
        КонецЕсли;

        Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
            ВременнаяДата = ДобавитьМесяц(ВременнаяДата, -12);
            Месяцев = 12;
        КонецЕсли;

        Лет        = Макс(             Год(ВременнаяДата)        - Год(Дата2),    0);
        Месяцев    = Макс(Месяцев    + Месяц(ВременнаяДата)    - Месяц(Дата2),    0);
        Дней    = Макс(Дней        + День(ВременнаяДата)    - День(Дата2),    0);
		
        // Скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах.
        Если Дата2 <> (ДобавитьМесяц(Дата1, -Лет * 12 - Месяцев) - Дней * 86400) Тогда
            Дней = Дней + (День(КонецМесяца(Дата2)) - День(НачалоМесяца(Дата2))) 
				- (День(КонецМесяца(ДобавитьМесяц(Дата1, -1))) 
					- День(НачалоМесяца(ДобавитьМесяц(Дата1, -1))));
        КонецЕсли;
        
	КонецЕсли;
	
	Результат = "всего: ";
	
	Если Месяцев > 0 ИЛИ Лет > 0 Тогда
		Результат = Результат + (Месяцев + Лет*12) + " мес. ";
		Результат = Результат + Дней + " " + УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(Дней) + " ";
		Результат = Результат + "(" + Строка((Дата1 - Дата2)/86400) + " " 
				+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня((Дата1 - Дата2) / 86400) + ")";
	Иначе
		Результат = Результат + Дней + " " + УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(Дней);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции    // СформироватьРазностьДат

// Заполнение ТЧ Шины строками по умолчанию
//
Процедура ЗаполнитьШинамиПоУмолчанию(Объект, Шина = Неопределено) Экспорт
	
	ОчиститьТабличнуюЧастьШины(Объект);
	
	Для Инд = 1 По 5 Цикл
		
		НоваяСтрока = Объект.Шины.Добавить();
		НоваяСтрока.Номенклатура = Шина;
		НоваяСтрока.Количество = 1;
		Документы.ЗаявкаНаХранениеШин.ШиныНоменклатураПриИзменении(Объект, НоваяСтрока);

		Если Инд = 1 Тогда
			НоваяСтрока.РасположениеШины = Перечисления.РасположениеШин.ЛевоеПереднее;
		ИначеЕсли Инд = 2 Тогда
			НоваяСтрока.РасположениеШины = Перечисления.РасположениеШин.ПравоеПереднее;
		ИначеЕсли Инд = 3 Тогда
			НоваяСтрока.РасположениеШины = Перечисления.РасположениеШин.ЛевоеЗаднее;
		ИначеЕсли Инд = 4 Тогда
			НоваяСтрока.РасположениеШины = Перечисления.РасположениеШин.ПравоеЗаднее;
		ИначеЕсли Инд = 5 Тогда
			НоваяСтрока.РасположениеШины = Перечисления.РасположениеШин.Запасное;
		КонецЕсли;		
	КонецЦикла
	
КонецПроцедуры // ЗаполнитьШинамиПоУмолчанию() 

// Очистка ТЧ Шины и удаление связанных присоединенных файлов
//
Процедура ОчиститьТабличнуюЧастьШины(Объект) Экспорт
	
	Для Каждого СтрокаТЧ Из Объект.Шины Цикл
		ОчиститьПрисоединенныеФайлыВСтрокеШин(СтрокаТЧ)
	КонецЦикла;
	
	Объект.Шины.Очистить();
	
КонецПроцедуры // ОчиститьТабличнуюЧастьШины()

// Удаление связанных присоединенных файлов в строке ТЧ Шины
//
Процедура ОчиститьПрисоединенныеФайлыВСтрокеШин(Строка) Экспорт
	
	Если ЗначениеЗаполнено(Строка.ПрисоединенныйФайл) Тогда
		Попытка 
			Объект = Строка.ПрисоединенныйФайл.ПолучитьОбъект();
			Объект.УстановитьПометкуУдаления(Истина);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки пометки удаления'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ОчиститьПрисоединенныеФайлыВСтрокеШин() 

// Заполнение ТЧ Услуги услугой по умолчанию
//
Процедура ЗаполнитьУслугамиПоУмолчанию(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании) И ЗначениеЗаполнено(Объект.ПодразделениеКомпании.УслугаПоСезонномуХранениюШинПоУмолчанию) Тогда
		УслугаПоУмолчанию = Объект.ПодразделениеКомпании.УслугаПоСезонномуХранениюШинПоУмолчанию;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(УслугаПоУмолчанию) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("Заполнен") И Объект.Товары.Количество()=0 Тогда
		
		Объект.ДополнительныеСвойства.Вставить("Заполнен",Истина);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",УслугаПоУмолчанию));
		
		Если НайденныеСтроки.Количество()=0 Тогда
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = УслугаПоУмолчанию;
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("ВвестиКоличествоНаборов",Ложь);
			Документы.ЗаявкаНаХранениеШин.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьУслугамиПоУмолчанию() 

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("ДатаНачала");
	ОбязательныеРеквизиты.Добавить("ДатаОкончания");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
		ОбязательныеРеквизиты.Добавить("Шины");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("Шины.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Шины.Количество");
	ОбязательныеРеквизиты.Добавить("Шины.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Шины.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Шины.РасположениеШины");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товары
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаПересчетаСтоимостиШин(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаНачалаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.ДатаОкончания = Объект.ДатаНачала + УчетныеПолитикиСервер.Значение("СрокХраненияШинПоУмолчанию",, 
									Объект.ПодразделениеКомпании) * 86400;

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	Если (НЕ Объект.Ячейка.Пустая()) И Объект.Ячейка.Владелец <> Объект.СкладКомпании Тогда
		Объект.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект.Шины Цикл
		Если (НЕ СтрокаТЧ.Ячейка.Пустая()) И СтрокаТЧ.Ячейка.Владелец <> Объект.СкладКомпании Тогда
			СтрокаТЧ.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("АвтомобилиКонтрагента", ПолучитьАвтомобилиКонтрагента(Объект));
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		
		// Получение последнего хозяина
		Хозяин = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.Дата);
		Если ЗначениеЗаполнено(Хозяин) И Объект.Контрагент <> Хозяин Тогда
			
			Объект.Контрагент = Хозяин;
			ПараметрыДействия = Новый Структура;
			КонтрагентПриИзменении(ПараметрыДействия);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // АвтомобильПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "СкидкаНаценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// расчет скидок по строке
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШины

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ШиныНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия, "Шины");
	ОбработкаТабличнойЧастиТовары.УстановитьЦенуНоменклатуры(Объект, Строка, ПараметрыДействия, "Шины");
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ШиныНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ШиныХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ЦенаТолькоДляХарактеристики", Истина);
	ОбработкаТабличнойЧастиТовары.УстановитьЦены(Объект, Строка, ПараметрыДействия, "Шины");
	
КонецПроцедуры // ШиныХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ШиныЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ШиныЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ШиныКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	
КонецПроцедуры // ШиныКоличествоПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаХранениеШин",
		"ЗаявкаНаХранениеШин",
		НСтр("ru = 'Заявка на хранение шин'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаХранениеШин",
		"ДоговорХранения",
		НСтр("ru = 'Договор хранения шин'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаХранениеШин",
		"АктПриемаПередачи",
		НСтр("ru = 'Акт приема-передачи'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаХранениеШин",
		"Бирок",
		НСтр("ru = 'Бирки'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаХранениеШин",
		"БиркиБольшие",
		НСтр("ru = 'Бирки (большие)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаХранениеШин") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ЗаявкаНаХранениеШин",
															"Заявка на хранение шин",
															ПечатьЗаявкаНаХранениеШин(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорХранения") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ДоговорХранения",
															"Договор хранения шин",
															ПечатьДоговорХранения(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПриемаПередачи") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"АктПриемаПередачи",
															"Акт приема-передачи",
															ПечатьАктПриемаПередачи(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Бирок") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"Бирок",
															"Бирки",
															ПечатьБирок(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БиркиБольшие") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"БиркиБольшие",
															"Бирки (большие)",
															ПечатьБиркиБольшие(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция печати договора продажи
Функция ПечатьЗаявкаНаХранениеШин(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаХранениеШин_ЗаявкаНаХранениеШин";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// получим макет печатной формы
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаХранениеШин.ПФ_MXL_ЗаявкаНаХранениеШин");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаЗаголовок.Параметры.НомерДок = НомерДляПечати;
		ОбластьМакетаЗаголовок.Параметры.ДатаДок = Формат(Документ.Дата, "ДЛФ=ДД");
		
		ЗакПред =  УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент) + ", ";
		ЗакПред = ЗакПред + УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент,Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса()) + ", ";
		ЗакПред = ЗакПред + " тел.: "+ УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент,Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьМакетаЗаголовок.Параметры.ЗаказчикПредставление = ЗакПред;
		
		ОбластьМакетаЗаголовок.Параметры.Автомобиль = СокрЛП(Строка(Документ.Автомобиль));
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьМакетаЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);

		ОбластьМакетаПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакетаПодписи.Параметры.ЗаказчикПолноеНаименование = Документ.Контрагент.НаименованиеПолное;
		
		ОбластьМакетаШина = Макет.ПолучитьОбласть("ШинаСтроки|ШинаСтолбцы");
		
		МассивОбластейПодвала = Новый Массив;
		МассивОбластейПодвала.Добавить(ОбластьМакетаПодписи);
		
		НомерСтраницы = 1;
		НомерСтраницыПред = 1;
		
		Для Каждого СтрокаШины Из Документ.Шины Цикл

			ОбластьМакетаШина.Параметры.Расположение = СтрокаШины.РасположениеШины;
	        НомерСтроки = СтрокаШины.НомерСтроки / 2;
			Если Цел(НомерСтроки) <> НомерСтроки Тогда
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
					ТабличныйДокумент, ОбластьМакетаШина, , , НомерСтраницыПред, , Документ, МассивОбластейПодвала);
			Иначе 
				ТабличныйДокумент.Присоединить(ОбластьМакетаШина);
			КонецЕсли;

		КонецЦикла;

		ТабличныйДокумент.Вывести(ОбластьМакетаПодписи);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //переходим на следующую страницу
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция печати договора продажи
Функция ПечатьАктПриемаПередачи(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаХранениеШин_АктПриемаПередачи";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаХранениеШин.ПФ_MXL_АктПриемаПередачи");
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ, Ложь);
		ФорматированнаяДата = Формат(Документ.Дата, "ДЛФ=ДД");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.НомерДок = НомерДляПечати;
		ОбластьМакета.Параметры.ДатаДок  = ФорматированнаяДата;
		
		Если Документ.Организация.Пустая() Тогда
			
			ВызватьИсключение НСтр(
				"ru = 'Организация должна быть заполнена'",
				ОбщегоНазначения.КодОсновногоЯзыка()
			);
			
		КонецЕсли;
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Организация, "ИНН,КПП");
		АдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			ТекущаяДатаСеанса()
		);
		ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Организация,
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
			ТекущаяДатаСеанса()
		);
		ОрганизацияПредставление = Новый Массив();
		ОрганизацияПредставление.Добавить(УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация));
		ОрганизацияПредставление.Добавить(СтрШаблон("ИНН %1", РеквизитыОрганизации.ИНН));
		ОрганизацияПредставление.Добавить(СтрШаблон("КПП %1", РеквизитыОрганизации.КПП));
		ОрганизацияПредставление.Добавить(АдресОрганизации);
		ОрганизацияПредставление.Добавить(СтрШаблон("тел.: %1", ТелефонОрганизации));
		ОбластьМакета.Параметры.ОрганизацияПредставление = СтрСоединить(ОрганизацияПредставление, ", ");
		
		АдресЗаказчика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Контрагент,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса()
		);
		ТелефонЗаказчика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Контрагент,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса()
		);
		ПредставлениеЗаказчик = Новый Массив();
		ПредставлениеЗаказчик.Добавить(УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент));
		ПредставлениеЗаказчик.Добавить(АдресЗаказчика);
		ПредставлениеЗаказчик.Добавить(СтрШаблон("тел. %1", ТелефонЗаказчика));
		ОбластьМакета.Параметры.ЗаказчикПредставление = СтрСоединить(ПредставлениеЗаказчик, ", ");
		
		ОбластьМакета.Параметры.Автомобиль = СокрЛП(Строка(Документ.Автомобиль));
		ОбластьМакета.Параметры.ДатаНачала = Формат(Документ.ДатаНачала, "ДЛФ=ДД");
		ОбластьМакета.Параметры.ДатаОкончания = Формат(Документ.ДатаОкончания, "ДЛФ=ДД");
		СрокХранения = СформироватьРазностьДат(Документ.ДатаОкончания,Документ.ДатаНачала);
		ОбластьМакета.Параметры.СрокХранения = СрокХранения;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыШин");
		ОбластьМакета.Параметры.НомерДок = НомерДляПечати;
		ОбластьМакета.Параметры.ДатаДок  = ФорматированнаяДата;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтроки = 0;
		ИтогСтоимость = 0;
		
		Для Каждого ТекСтрока Из Документ.Шины Цикл
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыШин");
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			ПараметрДиск = "";
			
			Если ЗначениеЗаполнено(ТекСтрока.Диск) Тогда
				
				Если Текстрока.Диск = Перечисления.ВидыАвтомобильныхДисков.БезДиска Тогда
					
					ПараметрДиск = "(" + нрег(Текстрока.Диск) + ")";
					
				Иначе
					
					ПараметрДиск = "(" + нрег(Текстрока.Диск) + " диск)";
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекСтрока.Номенклатура) + ?(НЕ ПустаяСтрока(ПараметрДиск), " " + ПараметрДиск, "");
			ОбластьМакета.Параметры.Расположение = ТекСтрока.РасположениеШины;
			ОбластьМакета.Параметры.Характеристика = ТекСтрока.ХарактеристикаНоменклатуры;
			ОбластьМакета.Параметры.Примечание = ТекСтрока.Примечание;
			ОбластьМакета.Параметры.Цена = Строка(ТекСтрока.Цена);
			ИтогСтоимость = ИтогСтоимость + ТекСтрока.Цена;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыШин");
		ОбластьМакета.Параметры.ИтогоЦена = Строка(ИтогСтоимость);
		ОбластьМакета.Параметры.Валюта = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция печати договора продажи
Функция ПечатьДоговорХранения(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаХранениеШин_ДоговорХранения";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// получим макет печатной формы
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаХранениеШин.ПФ_MXL_ДоговорХранения");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ, Ложь);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстДоговораВерх");
		ДанныеОбъекта = ПолучитьДанныеОбъекта(Документ);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыТоваров");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,ДанныеОбъекта.ТаблицаТоваров);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Для Каждого ТекСтрока Из ДанныеОбъекта.ТаблицаТоваров.Строки Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыТоваров");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,ТекСтрока);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыТоваров");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,ДанныеОбъекта.ТаблицаТоваров);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШиныШапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Для Каждого ТекСтрока Из ДанныеОбъекта.Шины Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШиныСтрока");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ТекСтрока);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШиныПодвал");
		ОбластьМакета.Параметры.Стоимость = ДанныеОбъекта.СтоимостьИтого;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстДоговораНиз");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("АдресаРеквизиты");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,ДанныеОбъекта);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьМакета.Параметры.ФирмаАдрес = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
		Если НЕ ТабличныйДокумент.ПроверитьВывод(ОбластьМакета) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция печати этикеток и ценников
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
Функция ПечатьБирок(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаХранениеШин_ПечатьБирок";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаХранениеШин.ПФ_MXL_Бирка");
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ, Ложь);
		ДатаДок = Формат(Документ.Дата, "ДЛФ=ДД");
		КонтрагентНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);	
		
		СтрокНаЛисте = 4;
		КолонокНаЛисте = 2;
		СтрокаНаЛисте = 0;
		КолонкаНаЛисте = КолонокНаЛисте + 1;
		
		ХранениеШинКомплектами = УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами",
			Документ.Дата,
			Документ.ПодразделениеКомпании,			
			Истина
		);
		
		Для Каждого ТекСтрока Из Документ.Шины Цикл
		
			ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
			ОбластьМакета.Параметры.НомерДок = НомерДляПечати;
			ОбластьМакета.Параметры.ДатаДок = ДатаДок;
			ОбластьМакета.Параметры.Номенклатура = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекСтрока.Номенклатура);
			ОбластьМакета.Параметры.Диск = ТекСтрока.Диск;
			ОбластьМакета.Параметры.Характеристика = ТекСтрока.ХарактеристикаНоменклатуры;
			ОбластьМакета.Параметры.Расположение = ТекСтрока.РасположениеШины;
			ОбластьМакета.Параметры.Склад = Документ.СкладКомпании;
			ОбластьМакета.Параметры.Ячейка = ТекСтрока.Ячейка;
			
			Если ХранениеШинКомплектами Тогда
				
				ОбластьМакета.Параметры.Ячейка = Документ.Ячейка;
				
			КонецЕсли;
			
			УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьМакета, Документ);
			
			Если КолонкаНаЛисте>=КолонокНаЛисте Тогда
				
				// Если в строке выведено этикеток более заданного - начнем новую строку
				СтрокаНаЛисте=СтрокаНаЛисте+1;
				КолонкаНаЛисте=1;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе
				
				// Иначе продолжаем вывод в текущую строку
				КолонкаНаЛисте=КолонкаНаЛисте+1;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
				
			КонецЕсли;
			
			Если СтрокаНаЛисте>=СтрокНаЛисте Тогда
				
				// Если на листе выведено этикеток более заданного - начнем новый лист
				СтрокаНаЛисте=0;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЭтикетокИЦенников()

// Функция печати больших бирок
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
Функция ПечатьБиркиБольшие(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаХранениеШин_ПечатьБиркаБольшая";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаХранениеШин.ПФ_MXL_БиркаБольшая");
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент         = Ложь;
		НомерДляПечати         = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ, Ложь);
		ДатаДок                = Формат(Документ.Дата, "ДЛФ=ДД");
		КонтрагентНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		ГосНомер               = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
			
		ХранениеШинКомплектами = УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами",
			Документ.Дата,
			Документ.ПодразделениеКомпании,
			Истина
		);
		
		Для Каждого ТекСтрока Из Документ.Шины Цикл
		
			МассивОбластейДляПроверки = Новый Массив;
			
			// Область "РамкаВерх"
			ОбластьРамкаВерх = Макет.ПолучитьОбласть("РамкаВерх");
			МассивОбластейДляПроверки.Добавить(ОбластьРамкаВерх);
			
			// Область "ШтрихКод"
			Если РегистрыСведений.Штрихкоды.ЕстьШтрихкодУДокумента(Документ) Тогда
				
				ОбластьШтрихКод = Макет.ПолучитьОбласть("ШтрихКод");
				УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьШтрихКод, Документ);
				МассивОбластейДляПроверки.Добавить(ОбластьШтрихКод);
				
			КонецЕсли;
			
			// Область "ЗаявкаНаХранение"
			ОбластьЗаявкаНаХранение = Макет.ПолучитьОбласть("ЗаявкаНаХранение");
			ОбластьЗаявкаНаХранение.Параметры.НомерДок = НомерДляПечати;
			ОбластьЗаявкаНаХранение.Параметры.ДатаДок  = ДатаДок;
			МассивОбластейДляПроверки.Добавить(ОбластьЗаявкаНаХранение);
			
			// Область "ГосНомер"
			Если ЗначениеЗаполнено(ГосНомер) Тогда
				
				ОбластьГосНомер = Макет.ПолучитьОбласть("ГосНомер");
				ОбластьГосНомер.Параметры.ГосНомер = ГосНомер;
				МассивОбластейДляПроверки.Добавить(ОбластьГосНомер);
				
			КонецЕсли;
			
			// Область "Бирка"
			ОбластьБирка = Макет.ПолучитьОбласть("Бирка");
			ОбластьБирка.Параметры.Контрагент     = КонтрагентНаименование;
			ОбластьБирка.Параметры.Номенклатура   = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекСтрока.Номенклатура);
			ОбластьБирка.Параметры.Характеристика = ?(
				ЗначениеЗаполнено(ТекСтрока.ХарактеристикаНоменклатуры),
				", " + ТекСтрока.ХарактеристикаНоменклатуры,
				"");
			ОбластьБирка.Параметры.Диск           = ТекСтрока.Диск;
			ОбластьБирка.Параметры.Расположение   = ТекСтрока.РасположениеШины;
			ОбластьБирка.Параметры.Склад          = Документ.СкладКомпании;
			ОбластьБирка.Параметры.Ячейка         = ТекСтрока.Ячейка;
			
			Если ХранениеШинКомплектами Тогда
				
				ОбластьБирка.Параметры.Ячейка = Документ.Ячейка;
				
			КонецЕсли;
			
			МассивОбластейДляПроверки.Добавить(ОбластьБирка);
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки) Тогда
			
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЕсли;
			
			Для Каждого Область Из МассивОбластейДляПроверки Цикл
				
				ТабличныйДокумент.Вывести(Область);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Выписка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИнвентаризацияОрдерногоСклада);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПереразмещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаявкаНаХранениеШин);

КонецФункции

#КонецОбласти

// Формирует структуру с данными объекта, которые необходимы для заполнения шаблона
Функция ПолучитьДанныеОбъекта(Объект) Экспорт
		
	НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект);
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("НомерДокумента", НомерДляПечати);
	ДанныеОбъекта.Вставить("ДатаДокумента", Формат(Объект.Дата,"ДЛФ=ДД"));
	ДанныеОбъекта.Вставить("ПредставлениеОрганизации",  УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Объект.Организация));
	ДанныеОбъекта.Вставить("ФирмаАдрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса()));
	ДанныеОбъекта.Вставить("ФирмаТелефоны", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса()));
	ДанныеОбъекта.Вставить("ЗаказчикПолноеНаименование", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Объект.Контрагент));
	ДанныеОбъекта.Вставить("ЗаказчикПочтовыйАдрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Контрагент,Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ТекущаяДатаСеанса()));
	ДанныеОбъекта.Вставить("ЗаказчикТелефоны", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Контрагент,Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса()));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "	
		|ВЫБРАТЬ
		|	ПодтверждающиеДокументы.Ссылка КАК Документ,
		|	ПодтверждающиеДокументы.КемВыдан КАК ДокументКемВыдан
		|ИЗ
		|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
		|ГДЕ
		|	ПодтверждающиеДокументы.Владелец = &Владелец
		|	И ПодтверждающиеДокументы.Текущий = ИСТИНА
		|";
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);		
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Если ВыборкаДокументов.Количество()=0 Тогда
		ДанныеОбъекта.Вставить("ЗаказчикДокумент", "__________________________________");
	Иначе 
		ВыборкаДокументов.Следующий();
		ПредставлениеДокумента = Строка(ВыборкаДокументов.Документ);
		Если НЕ ПустаяСтрока(ВыборкаДокументов.ДокументКемВыдан) Тогда
			ПредставлениеДокумента = ПредставлениеДокумента + " " +ВыборкаДокументов.ДокументКемВыдан;
		КонецЕсли;
		ДанныеОбъекта.Вставить("ЗаказчикДокумент", ПредставлениеДокумента);
	КонецЕсли;
	
	Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель","Руководитель");
	ДанныеОбъекта.Вставить("РуководительДолжность", НРЕГ(Руководитель.РуководительДолжность));
	ДанныеОбъекта.Вставить("РуководительПредставление", Руководитель.РуководительПредставление);
	
	ДанныеОбъекта.Вставить("СуммаДокумента", Формат(Объект.СуммаДокумента,"ЧДЦ=2; ЧН=0,00"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("ДатаНачала", Формат(Объект.ДатаНачала,"ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ДатаОкончания", Формат(Объект.ДатаОкончания,"ДФ=dd.MM.yyyy"));
	
	ДанныеОбъекта.Вставить("ИННКПП", "ИНН " + Объект.Организация.ИНН + " / КПП " + Объект.Организация.КПП);
	ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
	ДанныеОбъекта.Вставить("НомерСчетаПолучателя", ОсновнойБанковскийСчет.НомерСчета);
	ДанныеОбъекта.Вставить("БанкПолучателя", ОсновнойБанковскийСчет.Банк);
	ДанныеОбъекта.Вставить("БИКБанкаПолучателя", ОсновнойБанковскийСчет.Банк.Код);
	ДанныеОбъекта.Вставить("СчетБанкаПолучателя", ОсновнойБанковскийСчет.Банк.КоррСчет);

	ДанныеОбъекта.Вставить("РуководительДолжность", НРЕГ(Руководитель.РуководительДолжность));
	ДанныеОбъекта.Вставить("РуководительПредставление", Руководитель.РуководительПредставление);
	
	// Таблица товаров (услуг)
	ДанныеОбъекта.Вставить("ТаблицаТоваров", Новый Структура);
	ДанныеОбъекта.ТаблицаТоваров.Вставить("Строки", Новый Массив);
	НомерСтрокиПоПорядку = 0;
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		
		НомерСтрокиПоПорядку = НомерСтрокиПоПорядку + 1;
		СтрокаТаблицы = Новый Структура;
		СтрокаТаблицы.Вставить("НомерСтроки",	НомерСтрокиПоПорядку);
		СтрокаТаблицы.Вставить("Номенклатура",	УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура));
		СтрокаТаблицы.Вставить("СуммаВсего",	Формат(СтрокаТоваров.СуммаВсего,"ЧДЦ=2; ЧН=0,00"));
		СтрокаТаблицы.Вставить("Количество",	СтрокаТоваров.Количество);
		
		Если СтрокаТоваров.Количество <> 0 Тогда
			СтрокаТаблицы.Вставить("Цена",	Формат((СтрокаТоваров.СуммаВсего/СтрокаТоваров.Количество),"ЧДЦ=2; ЧН=0,00"));
		Иначе
			СтрокаТаблицы.Вставить("Цена",	Формат(0,"ЧДЦ=2; ЧН=0,00"));
		КонецЕсли;
		
		ДанныеОбъекта.ТаблицаТоваров.Строки.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	ДанныеОбъекта.ТаблицаТоваров.Вставить("СуммаИтого", Формат(Объект.Товары.Итог("СуммаВсего"),"ЧДЦ=2; ЧН=0,00"));
	
	Шины = Новый Массив();
	
	Для Каждого Шина Из Объект.Шины Цикл
		
		СтрокаШины = Новый Структура("НомерСтроки,Шина,РасположениеШины,Стоимость");
		ЗаполнитьЗначенияСвойств(СтрокаШины, Шина);
		СтрокаШины.Шина = Шина.Номенклатура;
		Если ЗначениеЗаполнено(Шина.ХарактеристикаНоменклатуры) Тогда
			
			СтрокаШины.Шина = СтрШаблон("%1 (%2)", Шина.Номенклатура, Шина.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
		СтрокаШины.Стоимость = Шина.Цена;
		Шины.Добавить(СтрокаШины);
		
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("Шины", Шины);
	ДанныеОбъекта.Вставить("СтоимостьИтого", Формат(Объект.Шины.Итог("Цена"),"ЧДЦ=2; ЧН=0,00"));
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьСтоимостьШин(Объект, ПараметрыДействия)
	
	Для Каждого Строка Из Объект.Шины Цикл
		
		ОбработкаТабличнойЧастиТовары.УстановитьЦенуНоменклатуры(Объект, Строка, ПараметрыДействия, "Шины");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьСтоимостьШин(Объект, ПараметрыДействия)
	
	СтарыйКурс = ПараметрыДействия.СтарыйКурс;
	НовыйКурс  = Объект.КурсДокумента;
	
	Если СтарыйКурс =0 ИЛИ НовыйКурс = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	Если СтарыйКурс = НовыйКурс Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
	
	Для Каждого Строка Из Объект.Шины Цикл
		
		Строка.Цена = Окр(Строка.Цена * КоэффициентСоотношенияКурсов, 2);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПересчетаСтоимостиШин(Объект, ПараметрыДействия)
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	
	Если НЕ ТребуетсяУстановкаЦен И НЕ ТребуетсяПересчетЦен Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТребуетсяУстановкаЦен Тогда
		
		ОпределитьСтоимостьШин(Объект, ПараметрыДействия);
		Возврат;
		
	КонецЕсли;
	
	ПересчитатьСтоимостьШин(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Функция получения автомобилей контрагента
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьАвтомобилиКонтрагента(Объект) Экспорт
	
	// получим первые 10 автомобилей контрагента
	Возврат Справочники.Контрагенты.АвтомобилиКонтрагента(Объект.Контрагент, Объект.Дата, 10);
	
КонецФункции // ПолучитьАвтомобилиКонтрагента()

#КонецОбласти

#КонецЕсли