// Модуль объекта документа "Заявка на хранение шин"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
		
	КонецЕсли;
	
	ПрерватьЗаполение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыДействия = Документы.ЗаказПокупателя.ПолучитьПараметрыДействия(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		
		Если
			ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС)
			Или Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
		Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			
			Документы.ЗаявкаНаХранениеШин.ТоварыСтавкаНДСПриИзменении(
				ЭтотОбъект,
				СтрокаТабличнойЧасти,
				ДополнительныеСвойства.ПараметрыДействия
			);
			
		КонецЕсли;
		
	КонецЦикла;

	ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ПараметрыДействия);
	
	ДатаНачала = Дата;
	ДатаОкончания = Неопределено;
	Документы.ЗаявкаНаХранениеШин.ДатаНачалаПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Обычный Тогда
		
		СкладКомпании = Неопределено;
		
	КонецЕсли; 
	
	Документы.ЗаявкаНаХранениеШин.ЗаполнитьШинамиПоУмолчанию(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	Документы.ЗаявкаНаХранениеШин.ЗаполнитьУслугамиПоУмолчанию(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);

	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		
		Контрагент = ДанныеЗаполненияКонтрагент;
		Документы.ЗаявкаНаХранениеШин.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если Не ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНачала = ТекущаяДатаСеанса();
	ДатаОкончания = Неопределено;
	Документы.ЗаявкаНаХранениеШин.ДатаНачалаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если
		ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(ЭтотОбъект)
		Или Не ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПроверкаЗаполнения", Истина)
		Или Не ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов", ЭтотОбъект)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработкаСобытийОбъектаСервер.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	ОбработкаСобытийОбъектаСервер.ПроверитьПараметрыВыбораРеквизитовОбъекта(ЭтотОбъект, Отказ);
	ОбработкаСобытийДокументаСервер.ПроверитьЗаполнениеХарактеристикиНоменклатуры(ЭтотОбъект, Отказ);
	ОбработкаСобытийОбъектаСервер.ПроверитьКоличествоСерийнойНоменклатуры(ЭтотОбъект, Отказ);
	ОбработкаСобытийДокументаСервер.ПроверитьЗаполнениеПартииПоГТД(ЭтотОбъект, Отказ);
	ОбработкаСобытийОбъектаСервер.ПроверитьСоответствиеОрганизацииПодразделения(ЭтотОбъект, Отказ);
	ОбработкаСобытийДокументаСервер.ПроверитьЗаполнениеРеквизитовПоОрганизации(ЭтотОбъект, Отказ);
	ОбработкаСобытийДокументаСервер.ПроверитьПараметрыОперацииНаСоответствиеДоговору(ЭтотОбъект, Отказ);
	ОбработкаСобытийДокументаСервер.ПроверитьУникальностьНомеровВходящихДокументов(ЭтотОбъект, Отказ);
	ОбработкаСобытийДокументаСервер.ПроверитьСоответствиеВалют(ЭтотОбъект, Отказ);
	
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Обычный Тогда
		
		ТекстСообщения = СтрШаблон (
			НСтр(
				"ru = 'Склад документа имеет вид <%1>.
				|Возможно использование только ""Ордерного"" или ""Ячеистого"" склада.'"
			),
			СкладКомпании.ВидСклада
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Шины",, Отказ);
		
	КонецЕсли; 
	
	Для Каждого ТекСтрока Из Шины Цикл
		
		Если
			ЗначениеЗаполнено(ТекСтрока.Номенклатура)
			И ТекСтрока.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Шины
		Тогда                             
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'В табличной части <%1> в строке номер <%2> выбрана номенклатура некорректного типа.
					|Возможно использование только шин или дисков.'"
				),
				"""Шины""",
				ТекСтрока.НомерСтроки
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Шины",,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если
			ЗначениеЗаполнено(ТекСтрока.Номенклатура)
			И ТекСтрока.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга
		Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр(
					"ru = 'В табличной части <%1> в строке номер <%2> выбрана номенклатура некорректного типа.
					|Возможно использование только услуг.'"),
				"""Услуги""",
				ТекСтрока.НомерСтроки
			);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Товары",, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ХранениеШинКомплектами = УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами", Дата, ПодразделениеКомпании);
	
	Если ХранениеШинКомплектами = Неопределено ИЛИ ХранениеШинКомплектами Тогда
		
		Для каждого СтрокаТЧ Из Шины Цикл
			
			СтрокаТЧ.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
			
		КонецЦикла;
		
	Иначе
		
		Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ-наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьЗаполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	
	Если ПрерватьЗаполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Товары.Очистить();
	Автомобиль = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Автомобиль;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ДополнительныеСвойства.Вставить("ШиныЗапретАвтоСписанияХарактеристик", Истина);

#КонецОбласти

#КонецЕсли
