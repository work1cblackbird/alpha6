
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

&НаСервере
// Процедура пытается найти контакт по ID CoMagic и заполнить в Событии.
//
// Параметры:
//	Нет.
//
Процедура сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()
	Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоIDИзCoMagic(сфпСтруктураВнешнихДанных.comagic_context.visitor_id);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Объект.АбонентКонтакт = Контакт.Ссылка;
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()	

&НаКлиенте
// Процедура проверяет доступность создания контакта.
//
// Параметры:
//	Нет.
//
Процедура ПроверитьДоступностьСозданияКонтакта()
	//Элементы.СоздатьКонтакт.Доступность = (НЕ Объект.Ссылка.Пустая())  И (НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт)) 
	//	И (НЕ ПустаяСтрока(Объект.АбонентПредставление));
КонецПроцедуры // ПроверитьДоступностьСозданияКонтакта()

&НаСервере
// Процедура вычисляет владельца контакта и отображает его в форме документа
//
Процедура сфпЗаполнитьВладельцаКонтакта()
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		ИмяМетаданных = Объект.АбонентКонтакт.Метаданные().Имя;
		Если ИмяМетаданных = "КонтактныеЛица" ИЛИ ИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
			сфпВладелец = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Объект.АбонентКонтакт);
			Объект.сфпКлиент = сфпВладелец;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура управляет видимостью кнопок "Создать Партнера" и "Добавить телефон"
//
Процедура сфпУправлениюВидимостьюКнопокДобавления()
	Элементы.СоздатьПартнера.Видимость = НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт);
КонецПроцедуры

&НаСервере
Процедура сфпРазрешеныИзмененияВДокументе()
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	Если ТекПользователь <> Объект.Ответственный И Не сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		ТолькоПросмотр = Истина;
		Элементы.Ответственный.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияДанныхОбъекта(ОбъектСсылка)
	Возврат ОбъектСсылка.ВерсияДанных;
КонецФункции

#Область ОбработчикиИнтереса

&НаКлиенте
Процедура АбонентКонтактПриИзменении(Элемент)

	сфпЗаполнитьВладельцаКонтакта();
	сфпУправлениюВидимостьюКнопокДобавления();

КонецПроцедуры

&НаКлиенте
Процедура АбонентКонтактОчистка(Элемент, СтандартнаяОбработка)
	
	сфпВладелец = Неопределено;
	сфпУправлениюВидимостьюКнопокДобавления();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "АбонентПредставление".
//
Процедура ПредставлениеКонтактаПриИзменении(Элемент)
	ПроверитьДоступностьСозданияКонтакта();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ.

&НаКлиенте
// Процедура - обработчик команды формы "ПрослушатьЗаписьРазговора".
//
Процедура ПрослушатьЗаписьРазговора(Команда)
	
	ПараметрыЗвонка = Новый Структура("ИдентификаторЗвонка, ИдентификаторЗаписи, Ответственный, Входящий, НомерТелефона, ВнутреннийНомер, ДатаНачала, ДатаОкончания, Звонок",
		Объект.сфпИдентификаторЗвонка, Объект.сфпИдентификаторЗаписи, Объект.Ответственный, Объект.Входящий, Объект.АбонентКакСвязаться, сфпВнутреннийНомер, сфпДатаНачала, сфпДатаОкончания, Объект.Ссылка);
	сфпСофтФонПроКлиент.НачатьПрослушиваниеЗаписиРазговора(ПараметрыЗвонка, ЭтаФорма, Элементы.ФормаПрослушатьЗаписьРазговора);

КонецПроцедуры // ПрослушатьЗаписьРазговора()

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьПартнераПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Объект.АбонентКакСвязаться);
	
	СтруктураПараметры = Новый Структура();
	СтруктураПараметры.Вставить("Телефон", Телефон);
	СтруктураПараметры.Вставить("НомерТелефона", Телефон);
	СтруктураПараметры.Вставить("Наименование", Объект.АбонентПредставление);
	СтруктураПараметры.Вставить("Звонок", Объект.Ссылка);
	
	СправочникВладелец = ВладелецСправочника(Результат.Значение);
	Если ЗначениеЗаполнено(СправочникВладелец) Тогда
		ДополнительныеПараметры = Новый Структура("ВидКонтакта,СтруктураПараметры", Результат.Значение, СтруктураПараметры);
		НовоеОповещение = Новый ОписаниеОповещения("ВыборКлиентаДляСозданияКонтактногоЛица", ЭтаФорма, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник." + СправочникВладелец + ".ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		ФормаПартнера = ПолучитьФорму("Справочник." + Результат.Значение + ".ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураПараметры), ЭтаФорма);
		ФормаПартнера.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору партнёра для создания КЛ
// 
// Параметры:
//   Результат 					- СправочникСсылка - Выбранный партнёр
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура ВыборКлиентаДляСозданияКонтактногоЛица(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДополнительныеПараметры.СтруктураПараметры);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Владелец", Результат);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ОбъектВладелец", Результат);

		ОткрытьФорму("Справочник." + ДополнительныеПараметры.ВидКонтакта + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьКонтактВыполнить".
//
Процедура СоздатьКонтактВыполнить()
	
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьПартнераПослеВыбораТипаКонтакта", ЭтаФорма);
	ПоказатьВыборИзСписка(НовоеОповещение, СписокВидовКонтактовДляВыбора, Элементы.АбонентПредставление, 1);
	
КонецПроцедуры // СоздатьКонтактВыполнить()

&НаСервере
Функция ВладелецСправочника(ИмяСправочника)
	
	СправочникВладелец = "";

	Для Каждого ТекВладелец Из Метаданные.Справочники[ИмяСправочника].Владельцы Цикл
		СправочникВладелец = ТекВладелец.Имя;
		Прервать;
	КонецЦикла;

	Возврат СправочникВладелец;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Ответственный = сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Дата = ТекущаяДатаСеанса();
		
		Если Объект.Ссылка.Метаданные().Реквизиты.Найти("Важность") <> Неопределено Тогда
			Если Метаданные.Перечисления.Найти("ВариантыВажностиЗадачи") <> Неопределено Тогда
				Объект["Важность"] = Перечисления["ВариантыВажностиЗадачи"].Обычная;

			ИначеЕсли Метаданные.Перечисления.Найти("ВариантыВажностиВзаимодействия") <> Неопределено Тогда
				Объект["Важность"] = Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Входящий = НЕ (Параметры.Свойство("Основание") И НЕ (Параметры.Основание = Ложь ИЛИ Параметры.Основание = Неопределено));
	КонецЕсли;
	
	Если Параметры.Свойство("АбонентКонтакт") И ЗначениеЗаполнено(Параметры.АбонентКонтакт) Тогда
		Объект.АбонентКонтакт = Параметры.АбонентКонтакт;
		Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		
		Модифицированность = Истина;				
	КонецЕсли;
	
	// Определим типы контактов, которые можно создать
	//СписокИнтерактивноСоздаваемыхКонтактов = Взаимодействия.СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов();
	
	сфпИспользоватьКоллтрекинг = Константы.сфпИспользоватьCoMagic.Получить();
	Элементы.ГруппаИсточникПривлечения.Видимость = сфпИспользоватьКоллтрекинг;
	
	сфпИспользоватьРечевуюАналитику = Константы.сфпИспользоватьРечевуюАналитику.Получить();
	Элементы.ГруппаРечеваяАналитика.Видимость = сфпИспользоватьРечевуюАналитику;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ВнутреннийНомер, ДатаНачала, ДатаОтвета, ДатаОкончания, КаналРекламногоВоздействия, МаркетинговоеМероприятие
		|ИЗ РегистрСведений.сфпИсторияЗвонков
		|ГДЕ Звонок = &Звонок И ИдентификаторЗвонка = &ИдентификаторЗвонка");
		Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
		Запрос.УстановитьПараметр("ИдентификаторЗвонка", Объект.сфпИдентификаторЗвонка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			сфпВнутреннийНомер = Выборка.ВнутреннийНомер;
			сфпДатаНачала = Выборка.ДатаНачала;
			сфпДатаОтвета = Выборка.ДатаОтвета;
			сфпДатаОкончания = Выборка.ДатаОкончания;
			
			Если сфпИспользоватьКоллтрекинг Тогда
				сфпКаналРекламногоВоздействия = Выборка.КаналРекламногоВоздействия;
				сфпМаркетинговоеМероприятие = Выборка.МаркетинговоеМероприятие;
			КонецЕсли;
		КонецЕсли;
		
		Если сфпИспользоватьРечевуюАналитику Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ Тематика, Количество, СтопСлова
			|ИЗ РегистрСведений.сфпРечеваяАналитика
			|ГДЕ Звонок = &Звонок
			|УПОРЯДОЧИТЬ ПО Тематика
			|АВТОУПОРЯДОЧИВАНИЕ");
			Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
			сфпТематикиРазговора.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;	
	КонецЕсли;
	
	СписокВидовКонтактовДляВыбора = Новый СписокЗначений();
	
	Для Каждого ТипКонтакта Из Метаданные.ОпределяемыеТипы.сфпКонтактВзаимодействия.Тип.Типы() Цикл
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипКонтакта);
		ОписаниеТипаКонтакта = Новый ОписаниеТипов(МассивТипов);
		ТипКонтактаСсылка = ОписаниеТипаКонтакта.ПривестиЗначение(Неопределено);
		
		ТекМетаданные = ТипКонтактаСсылка.Метаданные();
		Если ТекМетаданные.Имя = "Организации" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекМетаданные.ПредставлениеОбъекта) Тогда
			  ТекПредставление = ТекМетаданные.ПредставлениеОбъекта;
		Иначе ТекПредставление = ТекМетаданные.Представление();
		КонецЕсли;	
		СписокВидовКонтактовДляВыбора.Добавить(ТекМетаданные.Имя, ТекПредставление);
	КонецЦикла;	

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	сфпДлительность = Дата('00010101') + Объект.сфпДлительностьЗвонка;
	
	Заголовок = НСтр("ru='Звонок';en='Call'");
	
	Если Объект.Входящий Тогда
		Заголовок = Заголовок + НСтр("ru=' входящий '");
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Заголовок = Заголовок + "(" + НСтр("ru='пропущенный';en='missed'") + ")";
			Элементы.СостояниеЗвонка.Заголовок = Нстр("ru='Пропущенный'");
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Красный;

		Иначе	
			Заголовок = Заголовок + "(" + НСтр("ru='отвеченный';en='answered'") + ")";
			Элементы.СостояниеЗвонка.Заголовок = Нстр("ru='Отвеченный'");
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;			
		КонецЕсли;

		Элементы.ГруппаЛево.Заголовок = "Кто звонил";
		Элементы.ГруппаПраво.Заголовок = "Кто ответил";

	Иначе
		Заголовок = Заголовок + НСтр("ru=' исходящий '");
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Заголовок = Заголовок + "(" + НСтр("ru='не дозвонились';en='not reached'") + ")";
			Элементы.СостояниеЗвонка.Заголовок = Нстр("ru='Не дозвонились'");
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Красный;

		Иначе	
			Заголовок = Заголовок + "(" + НСтр("ru='отвеченный';en='answered'") + ")";
			Элементы.СостояниеЗвонка.Заголовок = Нстр("ru='Отвеченный'");
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;						
		КонецЕсли;	
		
		Элементы.ГруппаЛево.Заголовок = "Кому звонили";
		Элементы.ГруппаПраво.Заголовок = "Кто звонил";
	КонецЕсли;
	
	Заголовок = Заголовок + ", " + Объект.АбонентПредставление + ", " + Формат(Объект.Дата, "ДЛФ=D") + "/" 
		+ Формат(Объект.Дата, "ДЛФ=T; ДП=0:00:00") + "/" + Формат(Дата('00010101') + Объект.сфпДлительностьЗвонка, "ДЛФ=T; ДП=0:00:00");
		
	ПроверитьДоступностьСозданияКонтакта();
	
	сфпЗаполнитьВладельцаКонтакта();
	сфпУправлениюВидимостьюКнопокДобавления();
	сфпРазрешеныИзмененияВДокументе();
	
	УстановитьВидимостьКонтакта();

	Элементы.сфпНомерКомпании.Видимость = ЗначениеЗаполнено(Объект.сфпНомерКомпании);

КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура УстановитьВидимостьКонтакта()
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		Элементы.ГруппаАбонентПредставление.Видимость = Ложь;
		Элементы.АбонентКонтакт.Видимость = Истина;
		
	Иначе
		Элементы.ГруппаАбонентПредставление.Видимость = Истина;
		Элементы.АбонентКонтакт.Видимость = Ложь;
	КонецЕсли;
	Элементы.сфпВладелец.Видимость = ЗначениеЗаполнено(сфпВладелец);

КонецПроцедуры	
	
&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			Объект.сфпДлительностьЗвонка = сфпСофтФонПроСервер.сфпТекущаяДата() - Объект.Дата;
			Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Отвеченный");
			сфпДлительность	= Дата('00010101') + Объект.сфпДлительностьЗвонка;
			Объект.Описание	= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);
			Если Параметр.Свойство("НовыйОтветственный") Тогда
				Объект.Ответственный = Параметр.НовыйОтветственный;
			КонецЕсли;
			Модифицированность = Истина;
			
			Попытка
				ЭтаФорма.Записать();
			Исключение КонецПопытки;	
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли (ИмяСобытия = "сфпКонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			
			Если Объект.ВерсияДанных <> ВерсияДанныхОбъекта(Объект.Ссылка) Тогда
				ЭтаФорма.Прочитать();
			КонецЕсли;
			
			Если Параметр.Свойство("СостояниеЗвонка") И ЗначениеЗаполнено(Параметр.СостояниеЗвонка) И (Объект.сфпСостояниеЗвонка <> Параметр.СостояниеЗвонка) Тогда
				Объект.сфпСостояниеЗвонка = Параметр.СостояниеЗвонка;
				Модифицированность = Истина;
			КонецЕсли;
			
			Если Параметр.Свойство("ДлительностьЗвонка") И ЗначениеЗаполнено(Параметр.ДлительностьЗвонка) И (Объект.сфпДлительностьЗвонка <> Параметр.ДлительностьЗвонка) Тогда
				Объект.сфпДлительностьЗвонка = Параметр.ДлительностьЗвонка;
				Модифицированность = Истина;
			КонецЕсли;	
			
			Если Параметр.Свойство("ИдентификаторЗаписи") И ЗначениеЗаполнено(Параметр.ИдентификаторЗаписи) И НЕ ЗначениеЗаполнено(Объект.сфпИдентификаторЗаписи) Тогда
				Объект.сфпИдентификаторЗаписи = Параметр.ИдентификаторЗаписи;
				Модифицированность = Истина;
			КонецЕсли;
			
			сфпДлительность	= Дата('00010101') + Объект.сфпДлительностьЗвонка;
						
			ТекстОписания = сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);
			Если Объект.Описание <> ТекстОписания Тогда
				Объект.Описание	= ТекстОписания;
				Модифицированность = Истина;
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Элементы.Комментарий.ТекстРедактирования) Тогда
				ТекстКомментария = Элементы.Комментарий.ТекстРедактирования;
				Если Объект.Комментарий <> ТекстКомментария Тогда
					Объект.Комментарий = ТекстКомментария;
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Если Модифицированность Тогда
					ЭтаФорма.Записать();
				КонецЕсли;
			Исключение КонецПопытки;
		КонецЕсли;

	 	Возврат;

	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Если (Объект.сфпДлительностьЗвонка = 0) И (сфпСтруктураВнешнихДанных = Неопределено) Тогда
				// Заполняем документ данными из CoMagic
				сфпСтруктураВнешнихДанных	= Параметр.СтруктураCoMagic;
				Объект.сфпCoMagicID			= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
				Объект.Комментарий = Объект.Комментарий + ?(ПустаяСтрока(Объект.Комментарий), "", Символы.ПС) 
					+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
					+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
					+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
				Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
					сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic();
				КонецЕсли;			
				Модифицированность	= Истина;
				
				Попытка
					ЭтаФорма.Записать();
				Исключение КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
		
		Возврат;

	ИначеЕсли (ИмяСобытия = "ЗаполнитьКонтактВТелефонномЗвонке") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Объект.АбонентКонтакт = Параметр.Контакт;
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
			Элементы.СоздатьПартнера.Видимость = Ложь;
			//ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
			Модифицированность = Истина;
			
			Попытка
				ЭтаФорма.Записать();
			Исключение КонецПопытки;
			
			сфпЗаполнитьВладельцаКонтакта();
			УстановитьВидимостьКонтакта();
		КонецЕсли;			
		
		Возврат;
	КонецЕсли;
	
	ПроверитьДоступностьСозданияКонтакта();

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроверитьДоступностьСозданияКонтакта();
	
	Если НЕ ПустаяСтрока(Объект.сфпCoMagicID) Тогда
		Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
			Если сфпСофтФонПроСервер.сфпРеквизитСуществует(Объект.АбонентКонтакт, "сфпCoMagicID") Тогда
				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.АбонентКонтакт, Объект.сфпCoMagicID);
				Объект.сфпCoMagicID = "";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Оповестить("ОбновленыДанныеТелефонногоЗвонка", Объект.Ссылка);

КонецПроцедуры // ПослеЗаписи()

&НаСервереБезКонтекста
Функция ЭтоСсылкаКонтакта(СсылкаКонтакта)
	
	Возврат Метаданные.ОпределяемыеТипы.сфпКонтактВзаимодействия.Тип.СодержитТип(ТипЗнч(СсылкаКонтакта));
	
КонецФункции

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ЭтоСсылкаКонтакта(НовыйОбъект) Тогда
		Объект.АбонентКонтакт = НовыйОбъект;
		Объект.АбонентПредставление = Строка(НовыйОбъект);
		Объект.сфпКлиент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(НовыйОбъект);
		Элементы.сфпВладелец.Видимость = ЗначениеЗаполнено(Объект.сфпКлиент);
		
		Элементы.ГруппаАбонентПредставление.Видимость = Ложь;
		Элементы.АбонентКонтакт.Видимость = Истина;
		
		Модифицированность = Истина;
		
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере".
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
	Если МодульОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = МодульОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		Попытка
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		Исключение КонецПопытки;	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если сфпИспользоватьКоллтрекинг Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ДатаНачала, НомерТелефона, Звонок, КаналРекламногоВоздействия, МаркетинговоеМероприятие
		|ИЗ РегистрСведений.сфпИсторияЗвонков
		|ГДЕ Звонок = &Звонок И ИдентификаторЗвонка = &ИдентификаторЗвонка");
		Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
		Запрос.УстановитьПараметр("ИдентификаторЗвонка", Объект.сфпИдентификаторЗвонка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.КаналРекламногоВоздействия <> сфпКаналРекламногоВоздействия ИЛИ Выборка.МаркетинговоеМероприятие <> сфпМаркетинговоеМероприятие Тогда
				МенеджерЗаписи = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.КаналРекламногоВоздействия = сфпКаналРекламногоВоздействия;
					МенеджерЗаписи.МаркетинговоеМероприятие = сфпМаркетинговоеМероприятие;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
