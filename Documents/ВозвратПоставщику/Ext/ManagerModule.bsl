// Модуль менеджера документа "Возврат поставщику"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует коллекцию с описанием кодов маркировок проданых товаров
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * ИдентификаторТовара - Строка - идентификатор строки товаров к которой относятся коды;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукции(Сам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратПоставщикуТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВозвратПоставщикуТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВозвратПоставщикуТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТоваровТовары
	|ГДЕ
	|	ВозвратПоставщикуТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратПоставщикуКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	|	ВозвратПоставщикуКодыМаркировки.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ СписокКодовМаркировки
	|ИЗ
	|	Документ.ВозвратПоставщику.КодыМаркировки КАК ВозвратПоставщикуКодыМаркировки
	|ГДЕ
	|	ВозвратПоставщикуКодыМаркировки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СписокКодовМаркировки.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	СписокКодовМаркировки КАК СписокКодовМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО СписокКодовМаркировки.ИдентификаторТовара = ТаблицаТоваров.ИдентификаторТовара";
	Запрос.УстановитьПараметр("Ссылка", Сам);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Движения документа выполненные по регистру ГТД
//
// Параметры:
// 	Сам - Документ.Ссылка - документ по которому выбираются движения регистра ГТД
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат запроса к регистру ГТД.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	СУММА(-ГТДПартийТоваровКомпании.Количество) КАК Количество,
		|	ГТДПартийТоваровКомпании.Партия
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор = &Сам
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.Партия"
	);
	Запрос.УстановитьПараметр("Сам", Сам);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратПоставщикуКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратПоставщику.КодыМаркировки КАК ВозвратПоставщикуКодыМаркировки
	|ГДЕ
	|	ВозвратПоставщикуКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВозвратПоставщику - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратПоставщикуДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратПоставщику.ДополнительныеРеквизиты КАК ВозвратПоставщикуДополнительныеРеквизиты
	|ГДЕ
	|	ВозвратПоставщикуДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ВозвратПоставщику");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;   
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда
				
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла; 
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ВозвратПоставщику""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратПоставщикуДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ВозвратПоставщикуДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ВозвратПоставщику.ДополнительныеРеквизиты КАК ВозвратПоставщикуДополнительныеРеквизиты
	|ГДЕ
	|	ВозвратПоставщикуДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И ВозвратПоставщикуДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
		
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзОборотаКодовМаркировки);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВозвратПоставщику);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Устанавливает партию для новой строки
//
Процедура УстановитьПартиюСтроки(Объект, Строка)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И Строка <> Неопределено И НЕ ЗначениеЗаполнено(Строка.Партия) Тогда
		
		// Получим стратегию списания товаров
		Если ЕстьРеквизит(Объект.ДокументОснование, "СкладКомпании") Тогда
			СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(Объект.СкладКомпании, Объект.Организация, ТекущаяДатаСеанса());
		Иначе
			СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(Неопределено, Объект.Организация, ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если СтратегияСписанияПартийТоваровПоДатам=Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
			Партия = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
		Иначе
			Партия = Объект.ДокументОснование;
		КонецЕсли;
		
		Строка.Партия = Партия;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество партии
//
// Параметры:
//  Номенклатура               - СправочникСсылка.Номенклатура,
//  ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры,
//  Партия                     - Характеристика.ТипыПартий.
//
// Возвращаемое значение:
//  Возвращает остатки по регистру накопления "ПартииТоваровКомпании".
//
Функция ПолучитьКоличествоПартии(Объект, Строка)
	
	МоментВремени = ?(Объект.Ссылка.Пустая(), Объект.Дата, Новый Граница(Объект.Ссылка.МоментВремени(),ВидГраницы.Исключая));
	
	СтруктураОтбора=Новый Структура("СкладКомпании,Номенклатура,ХарактеристикаНоменклатуры",Объект.СкладКомпании, Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры);
	Если ЗначениеЗаполнено(Строка.Партия) Тогда
		СтруктураОтбора.Вставить("Партия", Строка.Партия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.ГТД) Тогда
		СтруктураОтбора.Вставить("ГТД", Строка.ГТД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ГТД) Тогда
		Остатки = РегистрыНакопления.ГТДПартийТоваровКомпании.Остатки(МоментВремени, СтруктураОтбора,, "Количество");
	Иначе
		Остатки = РегистрыНакопления.ПартииТоваровКомпании.Остатки(МоментВремени, СтруктураОтбора,, "Количество");
	КонецЕсли;
	
	Возврат Остатки.Итог("Количество");
	
КонецФункции // ПолучитьКоличествоПартии()

// Получает Сумму всего на товар из документа поставки
//
// Параметры:
//  Объект        - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - Строка таблицы Товары.
//
// Возвращаемое значение:
//  СуммаВсего - число.
//
Функция ПолучитьЦенуИзДокументаПоставки(Объект, Строка)
	
	Номенклатура               = Строка.Номенклатура;
	Партия                     = Строка.Партия;
	ГТД                        = Строка.ГТД;
	ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Количество                 = Строка.Количество*Строка.Коэффициент;
	
	Если (НЕ ЗначениеЗаполнено(Партия)) ИЛИ (НЕ ЗначениеЗаполнено(Номенклатура)) Тогда
		Возврат 0;
	КонецЕсли;
	
	// получаем цены
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ПартииТоваровКомпанииОстатки.СуммаОстаток),0) КАК СуммаВсего,
	|	ЕСТЬNULL(СУММА(ПартииТоваровКомпанииОстатки.КоличествоОстаток),0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
	|			&НаМомент,
	|			СкладКомпании = &Склад
	|			И Номенклатура = &Номенклатура
	|"+?(ЗначениеЗаполнено(ХарактеристикаНоменклатуры), " И ХарактеристикаНоменклатуры=&ХарактеристикаНоменклатуры", "")+" 
	|   И Партия = &Партия)"+"КАК ПартииТоваровКомпанииОстатки");
	
	Запрос.УстановитьПараметр("НаМомент",?(Объект.Ссылка.Пустая(), Объект.Дата, Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка),ВидГраницы.Включая)));	
	Запрос.УстановитьПараметр("Партия",                     Партия);
	Запрос.УстановитьПараметр("Номенклатура",               Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Склад",                      Объект.СкладКомпании);
	
	СуммаВсего = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаВсего, Партия.ВалютаДокумента, Партия.КурсДокумента, Объект.ВалютаДокумента, Объект.КурсДокумента);
		Если Выборка.Количество = Количество ИЛИ Выборка.Количество=0 Тогда
			СуммаВсего = Выборка.СуммаВсего;
		Иначе
			СуммаВсего = Окр(Выборка.СуммаВсего * Строка.Количество * Строка.Коэффициент / Выборка.Количество, 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаВсего;
	
КонецФункции // ПолучитьЦенуИзДокументаПоставки()

// Возвращает ставку НДС партии ставку НДС партии
//
// Параметры:
//  Объект        - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - Строка таблицы Товары.
//
// Возвращаемое значение:
//  Возвращает ставку НДС по регистру накопления "ПартииТоваровКомпании".
//
Функция ПолучитьСтавкуНДСПартии(Объект, Строка)
	
	Если (НЕ ЗначениеЗаполнено(Строка.Партия)) ИЛИ (НЕ ЗначениеЗаполнено(Строка.Номенклатура)) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПартииТоваровКомпании.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор = &Регистратор
	|	И ПартииТоваровКомпании.Номенклатура = &Номенклатура
	|	И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И ПартииТоваровКомпании.СкладКомпании = &СкладКомпании
	|	И ПартииТоваровКомпании.Партия = &Партия
	|";
	
	Запрос.УстановитьПараметр("Регистратор",                Строка.Партия);
	Запрос.УстановитьПараметр("Номенклатура",               Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СкладКомпании",              Объект.СкладКомпании);
	Запрос.УстановитьПараметр("Партия",                     Строка.Партия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьСтавкуНДСПартии()

Процедура ЗаполнитьСтрокуПоДаннымПартий(Объект, Строка, НеУвеличиватьКоличество, ПараметрыДействия=Неопределено)
	
	УстановитьПартиюСтроки(Объект, Строка);
	
	Количество = ПолучитьКоличествоПартии(Объект, Строка);
	Если Количество > 0 Тогда
		Если НеУвеличиватьКоличество Тогда
			Строка.Количество = Мин(Строка.Количество, Количество/?(Строка.Коэффициент=0,1,Строка.Коэффициент));
		Иначе
			Строка.Количество = Количество/?(Строка.Коэффициент=0,1,Строка.Коэффициент);
		КонецЕсли;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	СтавкаНДС = ПолучитьСтавкуНДСПартии(Объект, Строка);
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		Строка.СтавкаНДС = СтавкаНДС;
	КонецЕсли;
	
	СуммаВсего = ПолучитьЦенуИзДокументаПоставки(Объект, Строка);
	Если СуммаВсего > 0 Тогда
		Строка.СуммаВсего = СуммаВсего;
		ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуПоДаннымПартий()

// Получение табличной части товаров по документу
//
// Параметры:
//  Объект        - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение: 
//  Результат запроса - результат запроса по табличной части товаров.
//
Функция ПолучитьТаблицуТоваров(Объект) Экспорт
	
	ТипЦенСклада 					= Объект.СкладКомпании.ТипЦенРозничнойТорговли;
	АлгоритмПолученияЦены        	= ТипЦенСклада.АлгоритмПолученияЦены;
	ВедетсяУчетПоЕдиницам       	= (АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения);
	ВедетсяУчетПоХарактеристикам 	= (АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике);
	
	ОсновноеПодразделение = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
	ДобавитьОсновноеПодразделение = (НЕ ОсновноеПодразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка());
	
	ТаблицаИерархииПодразделений = Новый ТаблицаЗначений;
	ТаблицаИерархииПодразделений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаИерархииПодразделений.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	ТекущееПодразделение 	= Объект.ПодразделениеКомпании;
	Уровень 				= 0;
	
	Пока ЗначениеЗаполнено(ТекущееПодразделение) Цикл
		
		СтрокаПодразделения 				= ТаблицаИерархииПодразделений.Добавить();
		СтрокаПодразделения.Подразделение 	= ТекущееПодразделение;
		СтрокаПодразделения.Уровень       	= Уровень;
		
		Если ТекущееПодразделение = ОсновноеПодразделение Тогда
			ДобавитьОсновноеПодразделение 	= Ложь;
		КонецЕсли;
		
		// Получаем родителя подразделения
		ТекущееПодразделение 				= ТекущееПодразделение.Родитель;
		Уровень 							= Уровень + 1;
		
	КонецЦикла;
	
	Если ДобавитьОсновноеПодразделение Тогда
		
		СтрокаПодразделения 				= ТаблицаИерархииПодразделений.Добавить();
		СтрокаПодразделения.Подразделение 	= ОсновноеПодразделение;
		СтрокаПодразделения.Уровень       	= Уровень;
		Уровень 							= Уровень + 1;
		
	КонецЕсли;
	
	СтрокаПодразделения 				= ТаблицаИерархииПодразделений.Добавить();
	СтрокаПодразделения.Подразделение 	= Справочники.ПодразделенияКомпании.ПустаяСсылка();
	СтрокаПодразделения.Уровень 		= Уровень;
	
	ТекстЦена     						= "ТаблицаЦен.Цена";
	РабочийТипЦен 						= ТипЦенСклада;
	
	Запрос = Новый Запрос;
	
	ТекстСоединенийПроцентыСкидкиНаценки 	= "";
	// Если расчетная цена получим базовую цену
	Счетчик 								= 1;
	
	Пока РабочийТипЦен.Рассчитывается Цикл
		
		// ведется ли расчет по ценовой группе
		Если РабочийТипЦен.ПроцентыСкидкиНаценки.Количество() > 0 Тогда
			
			ИмяТаблицы = "ПроцентыСкидкиНаценки" + Строка(Счетчик);
			ТекстСоединенийПроцентыСкидкиНаценки = ТекстСоединенийПроцентыСкидкиНаценки + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК " + ИмяТаблицы + "
			|ПО
			|	" + ИмяТаблицы + ".Ссылка = &ТипЦены" + Строка(Счетчик) + "
			|	И ТаблицаЦен.Номенклатура.ЦеноваяГруппа = " + ИмяТаблицы + ".ЦеноваяГруппа";
			
			ТекстЦена = "("+ТекстЦена + "+" + ТекстЦена + "*ЕСТЬNULL(" + ИмяТаблицы + ".ПроцентСкидкиНаценки/100, " + Формат(РабочийТипЦен.ПроцентСкидкиНаценки/100,"ЧРД=.; ЧН=0")+"))";
			
			Запрос.УстановитьПараметр("ТипЦены" + Строка(Счетчик), РабочийТипЦен);
			
			Счетчик = Счетчик + 1;
			
		Иначе
			
			Если РабочийТипЦен.ПроцентСкидкиНаценки <> 0 Тогда
				ТекстЦена = "("+ТекстЦена + "+" + ТекстЦена + "*" + Формат(РабочийТипЦен.ПроцентСкидкиНаценки/100,"ЧРД=.")+")";
			КонецЕсли;
			
		КонецЕсли;
		
		РабочийТипЦен = РабочийТипЦен.БазовыйТипЦен;
		
	КонецЦикла;
	
	ТекстВыборкиЦен 	= "";
	ТекстСоединениеЦен 	= "";
	
	Если ВедетсяУчетПоЕдиницам Тогда
		
		ТекстВыборкиЦен = ",
		|	СУММА(ЕСТЬNULL(ТаблицаЦен.Цена, ЕСТЬNULL(ТаблицаЦенБаза.Цена, ЕСТЬNULL(ТаблицаЦенОбщ.Цена, 0)))*ТаблДок.Количество) КАК СуммаРозничная";
		
		ТекстСоединениеЦен = "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ИтоговаяТаблицаЦен КАК ТаблицаЦен
		|ПО
		|	ТаблДок.Номенклатура = ТаблицаЦен.Номенклатура
		|	И ТаблДок.ЕдиницаИзмерения = ТаблицаЦен.ЕдиницаИзмерения
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ИтоговаяТаблицаЦен КАК ТаблицаЦенБаза
		|ПО
		|	ТаблДок.Номенклатура = ТаблицаЦенБаза.Номенклатура
		|	И ТаблицаЦенБаза.ЭтоБазовая = ИСТИНА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ИтоговаяТаблицаЦен КАК ТаблицаЦенОбщ
		|ПО
		|	ТаблДок.Номенклатура = ТаблицаЦенОбщ.Номенклатура
		|	И ТаблицаЦенОбщ.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|";
		
	ИначеЕсли ВедетсяУчетПоХарактеристикам Тогда
		
		ТекстВыборкиЦен = ",
		|	СУММА(ЕСТЬNULL(ТаблицаЦен.Цена, ЕСТЬNULL(ТаблицаЦенОбщ.Цена, 0))*ТаблДок.Количество) КАК СуммаРозничная";
		
		ТекстСоединениеЦен = "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ИтоговаяТаблицаЦен КАК ТаблицаЦен
		|ПО
		|	ТаблДок.Номенклатура = ТаблицаЦен.Номенклатура
		|	И ТаблДок.ХарактеристикаНоменклатуры = ТаблицаЦен.ХарактеристикаНоменклатуры
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ИтоговаяТаблицаЦен КАК ТаблицаЦенОбщ
		|ПО
		|	ТаблДок.Номенклатура = ТаблицаЦенОбщ.Номенклатура
		|	И ТаблицаЦенОбщ.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|";
	Иначе
		
		ТекстВыборкиЦен = ",
		|	СУММА(ЕСТЬNULL(ТаблицаЦен.Цена, 0)*ТаблДок.Количество) КАК СуммаРозничная";
		
		ТекстСоединениеЦен = "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ИтоговаяТаблицаЦен КАК ТаблицаЦен
		|ПО
		|	ТаблДок.Номенклатура = ТаблицаЦен.Номенклатура
		|";
	КонецЕсли;
	
	ТекстЦена 				= ТекстЦена + "*ТабВалют.Курс";
	
	ВалютаИзНоменклатуры 	= РабочийТипЦен.ВВалютеУчета;
	
	Запрос.Текст 			= "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПодразделений.Подразделение КАК Подразделение,
	|	ТаблицаПодразделений.Уровень КАК Уровень
	|ПОМЕСТИТЬ
	|	ТаблицаПодразделений
	|ИЗ
	|	&ТаблицаПодразделений КАК ТаблицаПодразделений
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	"+?(ВедетсяУчетПоЕдиницам,"ВозвратПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,", "")+"
	|	СУММА(ВозвратПоставщикуТовары.Количество * ВозвратПоставщикуТовары.Коэффициент) КАК Количество,
	|	0 КАК СуммаСкидки,
	|	0 КАК Резерв
	|ПОМЕСТИТЬ
	|	ТаблДокумента
	|ИЗ
	|	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТовары
	|ГДЕ
	|	ВозвратПоставщикуТовары.Ссылка = &Ссылка
	|	И ВозвратПоставщикуТовары.Номенклатура.ВидНоменклатуры <> &Услуга
	|СГРУППИРОВАТЬ ПО
	|	ВозвратПоставщикуТовары.Номенклатура,
	|	ВозвратПоставщикуТовары.ХарактеристикаНоменклатуры"+?(ВедетсяУчетПоЕдиницам, ",
	|	ВозвратПоставщикуТовары.ЕдиницаИзмерения", "")+"
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблДокумента.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ
	|	ОтборПоНоменклатуре
	|ИЗ
	|	ТаблДокумента КАК ТаблДокумента
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Валюты.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА Валюты.Кратность = 0 ТОГДА
	|			Валюты.Курс
	|		ИНАЧЕ
	|			Валюты.Курс/Валюты.Кратность
	|	КОНЕЦ КАК Курс
	|	
	|ПОМЕСТИТЬ
	|	ТабВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, "+?(ВалютаИзНоменклатуры, "", "Валюта = &ВалютаЦен")+") КАК Валюты
	|ГДЕ
	|	Валюты.Курс > 0
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура" + ?(ВедетсяУчетПоЕдиницам, ",
	|	ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения", "") + ?(ВедетсяУчетПоХарактеристикам, ",
	|	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры", "") + ",
	|	ТаблицаПодразделений.Уровень КАК Уровень,
	|	ЦеныСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ
	|	ТаблицаЦен
	|ИЗ
	|	РегистрСведений.Цены.СрезПоследних(
	|			&МоментВремени,
	|			ТипЦен = &ТипЦен
	|			И Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)"
				+ ?(НЕ ВедетсяУчетПоЕдиницам, " И ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)", "")
				+ ?(НЕ ВедетсяУчетПоХарактеристикам, " И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)", "")
				+ " И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ОтборПоНоменклатуре)
	|			И ПодразделениеКомпании В (ВЫБРАТЬ Подразделение ИЗ ТаблицаПодразделений)) КАК ЦеныСрезПоследних
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ТаблицаПодразделений КАК ТаблицаПодразделений
	|ПО
	|	ЦеныСрезПоследних.ПодразделениеКомпании = ТаблицаПодразделений.Подразделение
	|ГДЕ
	|	ЦеныСрезПоследних.Цена > 0
	|;
	|
	|УНИЧТОЖИТЬ
	|	ТаблицаПодразделений
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура" + ?(ВедетсяУчетПоЕдиницам, ",
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения", "") + ?(ВедетсяУчетПоХарактеристикам, ",
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры", "") + ",
	|	МИНИМУМ(ТаблицаЦен.Уровень) КАК Уровень
	|ПОМЕСТИТЬ
	|	СрезПоследних
	|ИЗ
	|	ТаблицаЦен КАК ТаблицаЦен
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЦен.Номенклатура" + ?(ВедетсяУчетПоЕдиницам, ",
	|	ТаблицаЦен.ЕдиницаИзмерения", "") + ?(ВедетсяУчетПоХарактеристикам, ",
	|	ТаблицаЦен.ХарактеристикаНоменклатуры", "") + "
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СрезПоследних.Номенклатура КАК Номенклатура" + ?(ВедетсяУчетПоЕдиницам, ",
	|	СрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения = СрезПоследних.ЕдиницаИзмерения.ЕдиницаПоКлассификатору
	|			И СрезПоследних.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоБазовая", "") + ?(ВедетсяУчетПоХарактеристикам, ",
	|	СрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры", "") + ",
	|	" + ТекстЦена + " КАК Цена
	|ПОМЕСТИТЬ
	|	ИтоговаяТаблицаЦен
	|ИЗ
	|	СрезПоследних КАК СрезПоследних
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ТаблицаЦен КАК ТаблицаЦен
	|ПО
	|	СрезПоследних.Номенклатура = ТаблицаЦен.Номенклатура"
	+ ?(ВедетсяУчетПоЕдиницам, " И СрезПоследних.ЕдиницаИзмерения = ТаблицаЦен.ЕдиницаИзмерения", "")
	+ ?(ВедетсяУчетПоХарактеристикам, " И СрезПоследних.ХарактеристикаНоменклатуры = ТаблицаЦен.ХарактеристикаНоменклатуры", "")
	+ " И СрезПоследних.Уровень = ТаблицаЦен.Уровень
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТабВалют КАК ТабВалют
	|ПО
	|	" + ?(ВалютаИзНоменклатуры, "СрезПоследних.Номенклатура.ВалютаУчета = ТабВалют.Валюта", "ИСТИНА") + "
	|" + ТекстСоединенийПроцентыСкидкиНаценки + "
	|;
	|
	|УНИЧТОЖИТЬ
	|	СрезПоследних
	|;
	|
	|УНИЧТОЖИТЬ
	|	ТаблицаЦен
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СкладКомпании                             КАК СкладКомпании,
	|	ИтоговаяТаблица.Номенклатура               КАК Номенклатура,
	|	ИтоговаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИтоговаяТаблица.Количество                 КАК Количество,
	|	ИтоговаяТаблица.СуммаСкидки                КАК СуммаСкидки,
	|	ИтоговаяТаблица.Резерв                     КАК Резерв,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.СуммаРозничная = 0 ТОГДА
	|			ИтоговаяТаблица.СуммаРозничнаяПоОст
	|		ИНАЧЕ
	|			ИтоговаяТаблица.СуммаРозничная
	|	КОНЕЦ КАК СуммаРозничная,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.СуммаРозничная = 0 ТОГДА
	|			ИтоговаяТаблица.ЦенаРозничная
	|		КОГДА ИтоговаяТаблица.Количество = 0 ТОГДА
	|			0
	|		ИНАЧЕ
	|			ИтоговаяТаблица.СуммаРозничная/ИтоговаяТаблица.Количество
	|	КОНЕЦ КАК ЦенаРозничная
	|ИЗ
	|(	ВЫБРАТЬ
	|		ТаблДок.Номенклатура               КАК Номенклатура,
	|		ТаблДок.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(ТаблДок.Количество)          КАК Количество,
	|		МАКСИМУМ(ТаблДок.СуммаСкидки)      КАК СуммаСкидки,
	|		МАКСИМУМ(ТаблДок.Резерв)           КАК Резерв"+ТекстВыборкиЦен+",
	|		СУММА(ВЫБОР
	|			КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ИЛИ Остатки.КоличествоОстаток = 0 ТОГДА
	|				0
	|			ИНАЧЕ
	|				(Остатки.СуммаРознОстаток/Остатки.КоличествоОстаток)*ТаблДок.Количество
	|		КОНЕЦ) КАК СуммаРозничнаяПоОст,
	|		МАКСИМУМ(ВЫБОР
	|			КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ИЛИ Остатки.КоличествоОстаток = 0 ТОГДА
	|				0
	|			ИНАЧЕ
	|				(Остатки.СуммаРознОстаток/Остатки.КоличествоОстаток)
	|		КОНЕЦ) КАК ЦенаРозничная
	|	ИЗ
	|		ТаблДокумента КАК ТаблДок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&МоментВремени, СкладКомпании = &СкладКомпании) КАК Остатки
	|	ПО
	|		ТаблДок.Номенклатура = Остатки.Номенклатура
	|		И ТаблДок.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры" + ТекстСоединениеЦен + "
	|	СГРУППИРОВАТЬ ПО
	|		ТаблДок.Номенклатура,
	|		ТаблДок.ХарактеристикаНоменклатуры) КАК ИтоговаяТаблица
	|";
	
	Запрос.УстановитьПараметр("МоментВремени",        Объект.МоментВремени());
	Запрос.УстановитьПараметр("Ссылка",               Объект.Ссылка);
	Запрос.УстановитьПараметр("СкладКомпании",        Объект.СкладКомпании);
	Запрос.УстановитьПараметр("Услуга",               Перечисления.ВидыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("ТипЦен",               РабочийТипЦен);
	Запрос.УстановитьПараметр("ТаблицаПодразделений", ТаблицаИерархииПодразделений);
	Запрос.УстановитьПараметр("ВалютаЦен",            РабочийТипЦен.ВалютаЦены);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуТоваров()

// Заполнить табличную часть в соответствии с документом основания
//
Процедура ЗаполнитьТабличнуюЧастьНаОсновании(Объект, ДокументОснование) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Если ЕстьРеквизит(ДокументОснование, "СкладКомпании") Тогда
			СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(ДокументОснование.СкладКомпании, ДокументОснование.Организация, ДокументОснование.Дата);
		Иначе
			СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(Неопределено, ДокументОснование.Организация, ДокументОснование.Дата);
		КонецЕсли;
		
		Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
			
			Объект.Товары.Очистить();
			ТоварыОснование = ДокументОснование.Товары;
			Партия 			= Константы.ПартияТоваровОтрицательныхОстатков.Получить();
			
			ЕстьИдентификаторТоваров = ЕстьРеквизит(ДокументОснование, "ИдентификаторТовара", "Товары");
			
			Для Каждого ТекСтрока Из ТоварыОснование Цикл
				НоваяСтрока								= Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура				= ТекСтрока.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры	= ТекСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.Партия						= Партия;
				Документы.ВозвратПоставщику.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
				НоваяСтрока.Количество 					= ТекСтрока.Количество;
				Документы.ВозвратПоставщику.ТоварыКоличествоПриИзменении(Объект, НоваяСтрока);
				
				Если ЕстьИдентификаторТоваров Тогда
					НоваяСтрока.ИдентификаторТовара = ТекСтрока.ИдентификаторТовара;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаКодовМаркировки = ТаблицаКодовМаркировкиПоОснованию(ДокументОснование);
			СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
			
			Партия = ДокументОснование;	
			Объект.Товары.Очистить();
			Объект.КодыМаркировки.Очистить();
			Запрос = Новый Запрос;
			
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииТоваровКомпанииОстатки.Номенклатура,
			|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
			|		,
			|		Партия = &Партия
			|			И СкладКомпании = &СкладКомпании) КАК ПартииТоваровКомпанииОстатки
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровКомпанииОстатки.Номенклатура,
			|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры";
			
			Запрос.УстановитьПараметр("Партия",			Партия);
			Запрос.УстановитьПараметр("СкладКомпании",	Объект.СкладКомпании);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока								= Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура				= Выборка.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры	= Выборка.ХарактеристикаНоменклатуры;
				НоваяСтрока.Партия						= Партия;
				ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
				
				// Найдем КМ основания
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				НайденныеСтроки = ТаблицаКодовМаркировки.НайтиСтроки(СтруктураПоиска);
				СтрокиУдалить = Новый Массив;
				
				// Заполним коды маркировки
				КоличествоЗаполнено = 0;
				Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
					НоваяСтрокаКМ = Объект.КодыМаркировки.Добавить();
					НоваяСтрокаКМ.ИдентификаторТовара = НоваяСтрока.ИдентификаторТовара;
					НоваяСтрокаКМ.КодМаркировки = ТекущаяСтрока.КодМаркировки;
					СтрокиУдалить.Добавить(ТекущаяСтрока);
					КоличествоЗаполнено = КоличествоЗаполнено + 1;
					Если КоличествоЗаполнено = НоваяСтрока.Количество Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Удалим ранее заполненные коды из таблицы
				Для Каждого ТекущаяСтрока Из СтрокиУдалить Цикл
					ТаблицаКодовМаркировки.Удалить(ТекущаяСтрока);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// изменим итоговую сумму документа
	Объект.СуммаДокумента	= Объект.Товары.Итог("СуммаВсего");
	
КонецПроцедуры

Функция ТаблицаКодовМаркировкиПоОснованию(Основание)
	
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений();
	ТаблицаКодовМаркировки.Колонки.Добавить("Номенклатура");
	ТаблицаКодовМаркировки.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки");
	
	Если НЕ ЕстьРеквизит(Основание, , "КодыМаркировки") Тогда
		Возврат ТаблицаКодовМаркировки;
	КонецЕсли;
	
	ИмяДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	Товары.ИдентификаторТовара КАК ИдентификаторТовара
	               |ПОМЕСТИТЬ ТаблицаТоваров
	               |ИЗ
	               |	Документ.#ИмяДокумента.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КодыМаркировки.КодМаркировки КАК КодМаркировки,
	               |	КодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара
	               |ПОМЕСТИТЬ ТаблицаКМ
	               |ИЗ
	               |	Документ.#ИмяДокумента.КодыМаркировки КАК КодыМаркировки
	               |ГДЕ
	               |	КодыМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	               |	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаКМ.КодМаркировки КАК КодМаркировки
	               |ИЗ
	               |	ТаблицаТоваров КАК ТаблицаТоваров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКМ КАК ТаблицаКМ
	               |		ПО ТаблицаТоваров.ИдентификаторТовара = ТаблицаКМ.ИдентификаторТовара";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяДокумента", ИмяДокумента);
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	ТаблицаМаркировки = Запрос.Выполнить().Выгрузить();
	
	// Получим актуальные статусы
	ТаблицаМаркировки.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	ТаблицаМаркировки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	// Разберем маркировку на состовляющие для поиска
	Для Каждого ТекущийКодМаркировки Из ТаблицаМаркировки Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМаркировки =
			МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущийКодМаркировки.КодМаркировки);
		
		// Это не маркировка товара
		Если СтруктураМаркировки.ТипИдентификатораТовара
			<> ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийКодМаркировки.GTIN = СтруктураМаркировки.GTIN;
		ТекущийКодМаркировки.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
		
	КонецЦикла;
	
	ТекущиеСтатусыМаркировки = РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(
		ТаблицаМаркировки,
		ТекущаяДатаСеанса()
	);
	
	// Проверим коды на выбытие
	СостоянияВОбороте = Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
	
	Для Каждого ТекущаяСтрока Из ТекущиеСтатусыМаркировки Цикл
		
		// Исключим из рассмотрения коды, которые не в обороте.
		Если СостоянияВОбороте.Найти(ТекущаяСтрока.Состояние) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаКодовМаркировки.Добавить(), ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ТаблицаКодовМаркировки;
	
КонецФункции

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ВозвратПоставщику - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	
	// Для контрагентов из ЕАЭС другая форма отчетности
	Если ДанныеКонтрагента.СтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
	
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВозвратПоставщикуТовары.Количество * ВозвратПоставщикуТовары.Коэффициент) КАК КоличествоОсталось,
	|	СУММА(ВозвратПоставщикуТовары.СуммаВсего - ВозвратПоставщикуТовары.СуммаНДС) КАК СуммаОсталось,
	|	ВозвратПоставщикуТовары.Партия КАК Партия,
	|	ВозвратПоставщикуТовары.ГТД КАК ГТД
	|ИЗ
	|	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТовары
	|ГДЕ
	|	ВозвратПоставщикуТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратПоставщикуТовары.Номенклатура,
	|	ВозвратПоставщикуТовары.Партия,
	|	ВозвратПоставщикуТовары.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПолученнаяКорректировочннаяСчетФактураУменьшение) КАК КодОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД КАК РНПТ,
	|	СУММА(-ГТДПартийТоваровКомпании.Количество) КАК КоличествоПрослеживаемости,
	|	ГТДПартийТоваровКомпании.Партия КАК Партия
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Ссылка
	|	И ГТДПартийТоваровКомпании.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ВЫБОР
	|		КОГДА ГТДПартийТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.НедостачаТовараПоИнвентаризации)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВозвратУтерянногоТовара)
	|	КОНЕЦ,
	|	ГТДПартийТоваровКомпании.Партия";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	// Проверим есть РНПТ у документа
	Если ПакетЗапросов[1].Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаТоваров = ПакетЗапросов[0].Выгрузить();
	ТаблицаРНПТ = ПакетЗапросов[1].Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	Документ = Объект.Ссылка;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
	ДатаДокумента = Объект.Дата;
	КонтрагентОперации = Объект.Контрагент;
	
	// Для пересчета валюты в рубли
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
	
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.Контрагент = КонтрагентОперации;
		
		// Получим сумму товара
		КоличествоРНПТ = ТекущаяСтрока.КоличествоПрослеживаемости;
		СтруктураПоиска = Новый Структура("Номенклатура,ГТД,Партия");
		СтруктураПоиска.ГТД = ТекущаяСтрока.РНПТ;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтруктураПоиска.ГТД = Справочники.ГТД.ПустаяСсылка();
			НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаНоменклатуры = НайденныеСтроки[0];
		
		Если КоличествоРНПТ >= СтрокаНоменклатуры.КоличествоОсталось Тогда
			СуммаБезНДС = СтрокаНоменклатуры.СуммаОсталось;
		Иначе
			СуммаБезНДС = Окр(СтрокаНоменклатуры.СуммаОсталось /
				?(СтрокаНоменклатуры.КоличествоОсталось = 0, 1, СтрокаНоменклатуры.КоличествоОсталось)
				* КоличествоРНПТ, 2);
		КонецЕсли;
		НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
		Если ВалютаНеРегл Тогда
			НоваяСтрока.СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
		КонецЕсли;
		
		СтрокаНоменклатуры.КоличествоОсталось = СтрокаНоменклатуры.КоличествоОсталось - КоличествоРНПТ;
		СтрокаНоменклатуры.СуммаОсталось = СтрокаНоменклатуры.СуммаОсталось - СуммаБезНДС;
		Если СтрокаНоменклатуры.КоличествоОсталось <= 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОперацииПрослеживаемости.Свернуть(
		"Организация,ПериодОтчета,ОтчетностьОперации,КодОперации,Документ,Контрагент,Номенклатура,РНПТ,ВидДокумента,НомерДокумента,ДатаДокумента",
		"КоличествоПрослеживаемости,СуммаБезНДС");
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	Если ПраваИНастройкиПользователя.Значение("РежимСписанияПриВозвратеПоставщику", Объект) = Перечисления.РежимыСписанияПриВозврате.ТолькоПоУказаннойПартии Тогда
		ОбязательныеРеквизиты.Добавить("Товары.Партия");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) ИЛИ ПраваИНастройкиПользователя.Значение("РежимСписанияПриВозвратеПоставщику", Объект) = Перечисления.РежимыСписанияПриВозврате.ТолькоПоУказаннойПартии Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Док. поставки".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип Цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ЗаполнитьСтрокуПоДаннымПартий(Объект, Строка, ЛОЖЬ, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьСтрокуПоДаннымПартий(Объект, Строка, ЛОЖЬ, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьСтрокуПоДаннымПартий(Объект, Строка, ИСТИНА, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьСтрокуПоДаннымПартий(Объект, Строка, ИСТИНА, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВозвратПоставщику");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по документу поставки'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуПоставки";
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуПоставки.Видимость",    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуПоставки.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по документу отгрузки
//
Функция ТоварыЗаполнитьПоДокументуПоставки(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран документ поставки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка);
	Иначе
		// перезаполняем
		ЗаполнитьТабличнуюЧастьНаОсновании(Объект, Объект.ДокументОснование);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоДокументуОтгрузки()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВозвратПоставщику",
		"ПФ_MXL_ВозвратПоставщику",
		НСтр("ru = 'Возвратная накладная'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВозвратПоставщику",
		"ПФ_MXL_ПодборочныйЛист",
		НСтр("ru = 'Подборочный лист'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМХ",
		"ПФ_MXL_МХ3",
		НСтр("ru = 'МХ-3 (Акт о возврате ТМЦ)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);

КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ВозвратПоставщику") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_ВозвратПоставщику",
		"Возврат поставщику",
		ПечатьВозвратПоставщику(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодборочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПодборочныйЛист",
															НСтр("ru = 'Подборочный лист'"),
															ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Накладная"
// 
Функция ПечатьВозвратПоставщику(МассивОбъектов, ОбъектыПечати)
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратПоставщику.ПФ_MXL_ВозвратПоставщику");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратПоставщику_ВозвратПоставщику";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		// Для начала настроим макет
		
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		
		// Вывод заголовка документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ТекстЗаголовка = Строка(Документ);
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьМакета.Параметры.ПредставлениеОтправителя = 
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьМакета.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьМакета.Параметры.ПредставлениеПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
			
		ТабличныйДокумент.Вывести(ОбластьМакета);
		// Сразу два, т.к. выводим на второй странице только.
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// Теперь выводим шапку
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим области строки
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакетаИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		
		// Заполним параметры шапки таблицы для следующего листа.
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		// Перебор строк
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТабличнойЧасти,
				Документ);
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТабличнойЧасти) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// Выводим строку, делая проверку попадания на лист.
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета,
				ОбластьШапкаТаблицы, ОбластьМакетаИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			// Добавляем итоги
			
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьМакетаИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(Документ.Товары.Итог("СуммаВсего"), ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(Документ.Товары.Итог("СуммаНДС"), ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.Товары.Итог("СуммаВсего"), Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		Отпустил = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил");
		Отпустил.ОтпустилПредставление = ?(ЗначениеЗаполнено(Отпустил.Отпустил), "/ " + Отпустил.ОтпустилПредставление, "");
		ОбластьПодвал.Параметры.Заполнить(Отпустил);
		Получил  = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент");
		Получил.ПолучилКонтрагентПредставление =
			?(ЗначениеЗаполнено(Получил.ПолучилКонтрагент), "/ " + Получил.ПолучилКонтрагентПредставление, "");
		ОбластьПодвал.Параметры.Заполнить(Получил);
		
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,
			ОбластьПодвал, , , НомерСтраницы, , Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции // ПечатьВозвратПоставщику()

// функция печати подборочного лист
//
Функция ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратПоставщику_ПодборочныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// получим макет печатной формы
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПодборочныйЛист");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		
		// Настроим макет отчета
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за ее счет колонку "Товар".
		ЕстьЯчейкиХранения = Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// получение необходимых областей
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры,Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Подборочный лист'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// * //
		ОбластьЗаголовок.Параметры.Поставщик  = "Поставщик:";
		ОбластьЗаголовок.Параметры.Склад      = "Склад:";
		ОбластьЗаголовок.Параметры.Покупатель = "Покупатель:";
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		// * //
				
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
		
		// заполняем ТЧ
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует печатную форму "МХ-3" Акт о возврате ТМЦ
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
Функция ПолучитьДанныеДляПечатиМХ3(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"          , Объект.Организация);
	ДанныеОбъекта.Вставить("Дата"                 , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ВладелецТовара"       , Объект.Контрагент);
	
	// ПодготовкаТЧ
	Товары = Объект.Товары.Выгрузить();
	ДанныеОбъекта.Вставить("Товары", Товары);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина);
	ДанныеОбъекта.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил",  УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил",  "ПолучилПредставление"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПечатьМХ3

Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	               |	ВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	               |	ВозвратПоставщикуТовары.Количество КАК Количество,
	               |	ВозвратПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВозвратПоставщикуТовары.Коэффициент КАК Коэффициент,
	               |	ВозвратПоставщикуТовары.Цена КАК Цена,
	               |	ВозвратПоставщикуТовары.Сумма КАК Сумма,
	               |	ВозвратПоставщикуТовары.СуммаВсего КАК СуммаВсего,
	               |	ВозвратПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ВозвратПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	               |	ВозвратПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ВозвратПоставщикуТовары.Партия КАК Партия,
	               |	ВозвратПоставщикуТовары.ГТД КАК ГТД,
	               |	ВозвратПоставщикуТовары.Ячейка КАК Ячейка,
	               |	ВозвратПоставщикуТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	               |	ВозвратПоставщикуТовары.Количество * ВозвратПоставщикуТовары.Коэффициент КАК КоличествоБазовое,
	               |	ВозвратПоставщикуТовары.Номенклатура.Артикул КАК Код,
	               |	ВозвратПоставщикуТовары.СуммаВсего - ВозвратПоставщикуТовары.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТовары
	               |ГДЕ
	               |	ВозвратПоставщикуТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка); 
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();		
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ТаблицаТоваров);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Неопределено);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Контрагент.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" ,"");
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузополучатель"       , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"       , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"      , ДанныеОбъекта.Плательщик.КодПоОКПО);

	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Получил"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта; 
	
КонецФункции

// функция получения данных для УПД
Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Объект.Ссылка).СчетФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ЗначениеЗаполнено(ДокументФактура) Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		
		ТаблицаТоваров = ДокументОбъект.Товары.Выгрузить();
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
		
		// Получим ТЧ товаров по счет-фактуре с ГТД
		УстановитьПривилегированныйРежим(Истина);
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.Заполнить(Объект.Ссылка);
		ТаблицаТоваров = СчетФактура.Товары.Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"                   	, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, ДокументОбъект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", ?(Статус = 1, ДокументОбъект.ДокументОснование, Объект.Ссылка));
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УчетПрослеживаемыхТоваровСервер.РНПТВДокументе(Объект.Ссылка));
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДанныеОбъекта.Вставить("ДатаОтгрузки"           , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта));

	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент));
  	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВозвратПоставщику - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);  
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратПоставщику.Организация КАК Организация,
	|	ВозвратПоставщику.Ссылка КАК Ссылка,
	|	ВозвратПоставщику.Дата КАК Дата,
	|	ВозвратПоставщику.ХозОперация КАК ХозОперация,
	|	ВозвратПоставщику.ДокументОснование КАК ДокументОснование,
	|	ВозвратПоставщику.Контрагент КАК Контрагент,
	|	ВозвратПоставщику.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВозвратПоставщику.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ВЫБОР
	|		КОГДА ВозвратПоставщику.ДокументОснование = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВозвратПоставщику.Ссылка
	|		ИНАЧЕ ВозвратПоставщику.ДокументОснование
	|	КОНЕЦ КАК Сделка,
	|	ВозвратПоставщику.СуммаДокумента КАК Сумма,
	|	ВозвратПоставщику.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ВозвратПоставщику.ВалютаДокумента КАК ВалютаДокумента,
	|	ВозвратПоставщику.КурсДокумента КАК КурсДокумента,
	|	ВозвратПоставщику.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Значение(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ВозвратПоставщику КАК ВозвратПоставщику
	|ГДЕ
	|	ВозвратПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если ДвиженияДокумента.ДляПроведения.ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОбОплате.Сделка <> ДанныеОбОплате.Ссылка Тогда
		
		РасчетыСКонтрагентамиСервер.ЗачестьОплатуПоСделке(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,
			Ложь);
		
	Иначе
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			ДанныеОбОплате.Сумма,
			ВидДвиженияНакопления.Приход,
			Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
			ДанныеОбОплате.Ссылка,
			Перечисления.ТипыРасчетов.Аванс,
			Истина);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли


