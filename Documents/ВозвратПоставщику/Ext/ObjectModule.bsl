// Модуль документа "Возврат поставщику"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщику;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") И ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Документы.ВозвратПоставщику.ЗаполнитьТабличнуюЧастьНаОсновании(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ДополнительныеСвойства.ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	КонецЕсли;
	
	// Производим корректировку значений реквизитов объекта
	Руководитель		  = Неопределено;
	ГлавныйБухгалтер	  = Неопределено;
	Отпустил			  = Неопределено; 
	Получил				  = Неопределено;
	Принял				  = Неопределено;
    Грузоотправитель	  = Неопределено;
	Грузополучатель		  = Неопределено; 

	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
	// Заполним доп. поля
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Если ДокументОснование.Контрагент <> Контрагент Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru='Контрагент документа основания отличается от контрагента текущего документа.'"), ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Если ДокументОснование.ДоговорВзаиморасчетов <> ДоговорВзаиморасчетов Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru='Договор взаиморасчетов документа основания отличается от договора взаиморасчетов текущего документа.'"), ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим заполнение ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ);
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
	Отказ = Отказ ИЛИ Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта); 
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	// Определим необходимость корректирующих проводок, для поддержания баланса по подразделениям.
	ПодразделениеСклад                 = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	БалансовыеПодразделенияНеРавны     = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	Если СкладКомпании.Розничный И ПодразделениеКомпании.ПереоценкаРозницаПоРасходу Тогда
		ТаблицаПоТоварам = Документы.ВозвратПоставщику.ПолучитьТаблицуТоваров(ЭтотОбъект);
		СписыватьРозницуПоОстаткам=Ложь;
	Иначе
		ТаблицаПоТоварам=Неопределено;
		СписыватьРозницуПоОстаткам=Истина;
	КонецЕсли;
	
	// проведем остатки товаров
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=ТаблицаПоТоварам;
	НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
	НаборЗаписейОстатки.Приходовать=Истина;
	НаборЗаписейОстатки.СписыватьРозницуПоОстаткам=СписыватьРозницуПоОстаткам;
	НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
	НаборЗаписейОстатки.Контрагент=Контрагент;
	НаборЗаписейОстатки.ИмяРеквизитаЦенаРозничная="Цена";
	НаборЗаписейОстатки.ИмяРеквизитаСуммаРозничная="Сумма";
	Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Если Отказ Тогда
		Возврат; // дальше смысла не имеет
	КонецЕсли;
	
	Документы.ВозвратПоставщику.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
	
	// проведем взаиморасчеты
	Если ХозОперация <> Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия
		И Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения=РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент=Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов=ДоговорВзаиморасчетов;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			НаборЗаписейВзаиморасчеты.Сделка=ДокументОснование;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Ложь;
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка=Неопределено;
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.Сумма=СуммаДокумента;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
		Отказ=НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
		
		// Доходы и расходы по суммовым разницам.
		СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	Документы.ВозвратПоставщику.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Проведем партии товаров.
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// Способ ведения не по подразделениям или балансовые подразделения равны то ничего не будем корректировать.
	// Комиссионный товар не на балансе.
	Если ХозОперация<>Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия И БалансВедетсяПоПодразделениям И БалансовыеПодразделенияНеРавны Тогда
		
		СуммаВзаиморасчетов = Движения.ВзаиморасчетыКомпании.Итог("СуммаУпр");
		СуммаПартий = -Движения.ПартииТоваровКомпании.Итог("СуммаУпр");
		Если СуммаПартий<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение = СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			НаборЗаписейДиР.Доход = СуммаПартий;
			Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;	
		КонецЕсли;
		
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте = Ложь;
		НаборЗаписейДиР.Доход = СуммаДокумента;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
		
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
		
		СостояниеКодаМаркировки = ?(Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо,
			Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаВозвращенФизическомуЛицу,
			Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику);
		
		// Изменим состояние маркировки
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
		НаборЗаписейСостоянияКодовМаркировки.ПроверятьВыводИзОборота = Истина;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = СостояниеКодаМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	Если НЕ Отказ Тогда
		Движения.ГТДПартийТоваровКомпании.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.ВозвратПоставщику.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;	
	
	// если модифицировали документ, то запишем его
	Если НЕ Отказ И Модифицированность() Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия;
	КонецЕсли;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Ввод остатков товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия;
	КонецЕсли;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковТоваров()

// Производит заполнение объекта на основании документа "Возврат от покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// подставим тип цен закупки
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки", ЭтотОбъект);

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателя()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СУММА(ВозвратПоставщикуТовары.СуммаВсего) КАК СуммаВсего
	                    |ПОМЕСТИТЬ ДокТовары
	                    |ИЗ
	                    |	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТовары
	                    |ГДЕ
	                    |	ВозвратПоставщикуТовары.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Док.Ссылка КАК Ссылка,
	                    |	Док.Дата КАК Дата,
	                    |	Док.ВалютаДокумента КАК ВалютаДокумента,
	                    |	Док.КурсДокумента КАК КурсДокумента,
	                    |	Док.ТипЦен КАК ТипЦен,
	                    |	Док.ХозОперация КАК ХозОперация,
	                    |	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	                    |	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	                    |	Док.МоментВремени КАК МоментВремени,
	                    |	Док.Организация КАК Организация,
	                    |	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	                    |	Док.Проект КАК Проект,
	                    |	Док.СкладКомпании КАК СкладКомпании,
	                    |	Док.Контрагент КАК Контрагент,
	                    |	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                    |	Док.ДокументОснование КАК ДокументОснование,
	                    |	ЕСТЬNULL(ДокТовары.СуммаВсего, 0) КАК СуммаВсего
	                    |ИЗ
	                    |	Документ.ВозвратПоставщику КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	                    |		ПО (ИСТИНА)
	                    |ГДЕ
	                    |	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	Если ДополнительныеСвойства.Свойство("СпособУчетаВзаиморасчетовПоРасчетнымДокументам") Тогда
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам = ДополнительныеСвойства.СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	Иначе
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	КонецЕсли;
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
			ЭтотОбъект,
			ШапкаДокумента);
		УсловиеОтбора = Новый Структура;
		УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
		УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
		СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
			РасчетыСКонтрагентами,
			УсловиеОтбора);
	Иначе
		РасчетыСКонтрагентами = Неопределено;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		
	// Определим необходимость корректирующих проводок для поддержания баланса по подразделениям.
	ПодразделениеСклад                 = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны     = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		// Доходы и расходы на себестоимость не оприходованных партий
		Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия Тогда
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			НаборЗаписейДоходыИРасходы.Доход                  = ?(
				СпособУчетаВзаиморасчетовПоРасчетнымДокументам,
				СуммыПоРасчетамСКонтрагентом.СуммаУпр,
				ШапкаДокумента.СуммаВсего);
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		Возврат НЕ Отказ;
	КонецЕсли;
	
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании             = ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация               = ШапкаДокумента.Организация;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейПартии.ИмяРеквизитаДокумент      = "Партия";
	НаборЗаписейПартии.Сторно                    = Истина;
	НаборЗаписейПартии.ШапкаДокумента            = ШапкаДокумента;
	НаборЗаписейПартии.СтатусПартии              = ?(ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия,Перечисления.СтатусыПартий.ТоварПринятыйКомиссия,Перечисления.СтатусыПартий.ТоварКупленный);
	НаборЗаписейПартии.РасчетыСКонтрагентами = РасчетыСКонтрагентами;
	Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
	
	// Движения по Доходам и Расходам
	Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия Тогда
		// определим суммы для товаров и услуг в документе
		СуммаУслуг=0;
		СуммаТоваров=0;
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры =  &Услуга ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ) КАК СуммаУслуг,
		|	СУММА(ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры <> &Услуга ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ) КАК СуммаТоваров
		|ИЗ
		|	Документ.ВозвратПоставщику.Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &ДокументСсылка
		|
		|");
		Запрос.УстановитьПараметр("ДокументСсылка",ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаУслуг	 = Выборка.СуммаУслуг;
			СуммаТоваров = Выборка.СуммаТоваров;
		КонецЕсли;
		
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Если ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
			КурсУпр        = ШапкаДокумента.КурсВалютыУпр;
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,Дата);
			КурсУпр 	   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЕсли;	
		
		СуммаУслуг   = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаУслуг,  ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр);
		СуммаТоваров = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаТоваров,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр);
		ДоходТовары	 = -НаборЗаписейПартии.Итог("СуммаУпр");
		
		Если (НЕ БалансВедетсяПоПодразделениям ИЛИ  Не БалансовыеПодразделенияНеРавны) И УправлениеДиалогомСервер.ПолучитьМодульЧисла(СуммаТоваров-ДоходТовары)>=0.01 Тогда	
			// запишем суммы в регистр
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ОтклонениеСтоимостиВозврата;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= СуммаТоваров-ДоходТовары;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// если возвращали услуги
		Если СуммаУслуг<>0 Тогда
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ВозвратУслугПоставщика;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение		= ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= СуммаУслуг;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		Если БалансВедетсяПоПодразделениям И БалансовыеПодразделенияНеРавны Тогда	
			// запишем суммы в регистр
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.Подразделение			= ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Расход					= СуммаУслуг;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;

	КонецЕсли;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
