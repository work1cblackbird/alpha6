// Модуль документа "Уведомление о ввозе прослеживаемых товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Сделаем подготовку заполнения документа
	РеквизитЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание") Тогда
		ДополнительныеСвойства.Вставить("НеПроверятьОграничениеПоПартиям");
		РеквизитЗаполнения = ДанныеЗаполнения;
		// Заполним на основании
		ДанныеЗаполнения = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитЗаполнения <> Неопределено Тогда
		ЗаполнениеДокументаПоСтруктуре(РеквизитЗаполнения);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.Новый;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	РНПТ = Справочники.ГТД.ПустаяСсылка();
	Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.Новый;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность видов введенной номенклатуры
	ЭтоВвозАвтомобилей = (ХозОперация = Справочники.ХозОперации.УведомлениеОВвозеПрослеживаемыхАвтомобилей);
	Ошибки="";
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		Если ЭтоВвозАвтомобилей И ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			ИЛИ НЕ ЭтоВвозАвтомобилей И ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Строка %1. Товар <%2>. Указанный тип товара не соответствует первичному документу.'"),
					СтрокаТоваров.НомерСтроки,
					СтрокаТоваров.Номенклатура),
				ЭтотОбъект
			);
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокаТоваров.Номенклатура.Прослеживаемый Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Строка %1. Товар <%2>. Указанная номенклатура не является прослеживаемым товаром.'"),
					СтрокаТоваров.НомерСтроки,
					СтрокаТоваров.Номенклатура),
				ЭтотОбъект
			);

			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		Если СтрокаТоваров.Номенклатура.КодТНВЭД <> КодТНВЭД Тогда  
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Строка %1. Товар <%2>. Код ТН ВЭД номенклатуры не соответствует коду ТН ВЭД документа.'"),
					СтрокаТоваров.НомерСтроки,
					СтрокаТоваров.Номенклатура),
				ЭтотОбъект
			);

			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(РНПТ) И НЕ РНПТ.РНПТ Тогда
		Отказ = Истина; 
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'При записи <%1> обнаружены ошибки: РНПТ указан без соответствующего признака'"),
				Ссылка),
			ЭтотОбъект
		);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.ПолученОтвет Тогда
		ВыполнитьДвиженияПоГТД(Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Таможенная декларация (импорт)"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ТаможеннаяДекларацияИмпорт(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ВалютаДокументаПриИзменении(ЭтотОбъект);
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка, "ТипЦен,ВалютаДокумента") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпортАвтомобилей Тогда
		ХозОперация = Справочники.ХозОперации.УведомлениеОВвозеПрослеживаемыхАвтомобилей;
	Иначе
		ХозОперация = Справочники.ХозОперации.УведомлениеОВвозеПрослеживаемыхТоваров;
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("НеПроверятьОграничениеПоПартиям") Тогда
		Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ЗаполнитьТоварыПоОснованию(ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ПервичныйДокумент = ДанныеЗаполнения;
	Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ВалютаДокументаПриИзменении(ЭтотОбъект);
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка, "ТипЦен,ВалютаДокумента") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.УведомлениеОВвозеПрослеживаемыхТоваров;
	Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ЗаполнитьТоварыПоОснованию(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ВалютаДокументаПриИзменении(ЭтотОбъект);
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка, "ТипЦен,ВалютаДокумента") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.УведомлениеОВвозеПрослеживаемыхАвтомобилей;
	ПервичныйДокумент = ДанныеЗаполнения;
	Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ЗаполнитьТоварыПоОснованию(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

Процедура ВыполнитьДвиженияПоГТД(Отказ)
	
	СкладКомпании = ДокументОснование.СкладКомпании;
	ЭтоПоступлениеТоваров = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров");
	
	// Получим партии и ГТД текущих номенклатур
	Если ДокументОснование.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт
		ИЛИ ЭтоПоступлениеТоваров Тогда
		
		ПартияТоваровОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
		
		СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(
			СкладКомпании,
			Организация,
			Дата);
		
		СписаниеПоСредней =
			СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура КАК Номенклатура,
		|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ВЫБОР
		|		КОГДА &СписаниеПоСредней
		|			ТОГДА &ПартияТоваровОтрицательныхОстатков
		|		ИНАЧЕ УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка.ПервичныйДокумент
		|	КОНЕЦ КАК Партия
		|ПОМЕСТИТЬ ПрослеживаемыйТоварДокумент
		|ИЗ
		|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК УведомлениеОВвозеПрослеживаемыхТоваровТовары
		|ГДЕ
		|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		Если ЭтоПоступлениеТоваров Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
			|	ПоступлениеТоваровТовары.Ссылка КАК Партия,
			|	ПоступлениеТоваровТовары.Ссылка.СкладКомпании КАК Склад
			|ПОМЕСТИТЬ СписокПартийНоменклатуры
			|ИЗ
			|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
			|ГДЕ
			|	ПоступлениеТоваровТовары.Ссылка = &ДокументОснование";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК Номенклатура,
			|	ТаможеннаяДекларацияИмпортТовары.Партия КАК Партия,
			|	ТаможеннаяДекларацияИмпортТовары.Склад КАК Склад
			|ПОМЕСТИТЬ СписокПартийНоменклатуры
			|ИЗ
			|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
			|ГДЕ
			|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &ДокументОснование";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрослеживаемыйТоварДокумент.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ПрослеживаемыйТоварДокумент.КоличествоПрослеживаемости) КАК КоличествоПрослеживаемости,
		|	ПрослеживаемыйТоварДокумент.Партия КАК Партия,
		|	ЕСТЬNULL(СписокПартийНоменклатуры.Склад, &СкладКомпании) КАК Склад
		|ПОМЕСТИТЬ ПрослеживаемыйТовар
		|ИЗ
		|	ПрослеживаемыйТоварДокумент КАК ПрослеживаемыйТоварДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПартийНоменклатуры КАК СписокПартийНоменклатуры
		|		ПО ПрослеживаемыйТоварДокумент.Номенклатура = СписокПартийНоменклатуры.Номенклатура
		|			И ПрослеживаемыйТоварДокумент.Партия = СписокПартийНоменклатуры.Партия
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрослеживаемыйТоварДокумент.Номенклатура,
		|	ПрослеживаемыйТоварДокумент.Партия,
		|	ЕСТЬNULL(СписокПартийНоменклатуры.Склад, &СкладКомпании)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ПартииТоваровКомпанииОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	ПартииТоваровКомпанииОстатки.Партия КАК Партия,
		|	ПартииТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании
		|ПОМЕСТИТЬ ТоварыПоПартии
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|			&МоментВремени,
		|			(&БезФильтраПоОрганизации
		|			ИЛИ Организация = &Организация)
		|			И (Номенклатура, Партия, СкладКомпании) В
		|				(ВЫБРАТЬ
		|					ПрослеживаемыйТовар.Номенклатура КАК Номенклатура,
		|					ПрослеживаемыйТовар.Партия КАК Партия,
		|					ПрослеживаемыйТовар.Склад КАК Склад
		|				ИЗ
		|					ПрослеживаемыйТовар КАК ПрослеживаемыйТовар)) КАК ПартииТоваровКомпанииОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.Партия,
		|	ПартииТоваровКомпанииОстатки.СкладКомпании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГТДПартийТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	ГТДПартийТоваровКомпанииОстатки.Партия КАК Партия,
		|	ГТДПартийТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании
		|ПОМЕСТИТЬ ТоварыПоГТД
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании.Остатки(
		|			&МоментВремени,
		|			(&БезФильтраПоОрганизации
		|			ИЛИ Организация = &Организация)
		|			И(Номенклатура, Партия, СкладКомпании) В
		|				(ВЫБРАТЬ
		|					ПрослеживаемыйТовар.Номенклатура КАК Номенклатура,
		|					ПрослеживаемыйТовар.Партия КАК Партия,
		|					ПрослеживаемыйТовар.Склад КАК Склад
		|				ИЗ
		|					ПрослеживаемыйТовар КАК ПрослеживаемыйТовар)) КАК ГТДПартийТоваровКомпанииОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпанииОстатки.Номенклатура,
		|	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпанииОстатки.Партия,
		|	ГТДПартийТоваровКомпанииОстатки.СкладКомпании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрослеживаемыйТовар.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыПоПартии.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ПрослеживаемыйТовар.КоличествоПрослеживаемости КАК Количество,
		|	ЕСТЬNULL(ТоварыПоПартии.КоличествоОстаток, 0) КАК КоличествоПартии,
		|	ПрослеживаемыйТовар.Партия КАК Партия,
		|	ПрослеживаемыйТовар.Склад КАК Склад
		|ПОМЕСТИТЬ ТоварыПартииДокумента
		|ИЗ
		|	ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоПартии КАК ТоварыПоПартии
		|		ПО ПрослеживаемыйТовар.Номенклатура = ТоварыПоПартии.Номенклатура
		|			И ПрослеживаемыйТовар.Партия = ТоварыПоПартии.Партия
		|			И ПрослеживаемыйТовар.Склад = ТоварыПоПартии.СкладКомпании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПрослеживаемыйТовар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыПоПартии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПартииДокумента.Номенклатура КАК Номенклатура,
		|	ТоварыПартииДокумента.Характеристика КАК Характеристика,
		|	ТоварыПартииДокумента.Количество КАК Количество,
		|	ТоварыПартииДокумента.КоличествоПартии КАК КоличествоПартии,
		|	ЕСТЬNULL(ТоварыПоГТД.КоличествоОстаток, 0) КАК КоличествоГТД,
		|	ТоварыПартииДокумента.Партия КАК Партия,
		|	ТоварыПартииДокумента.Склад КАК Склад
		|ИЗ
		|	ТоварыПартииДокумента КАК ТоварыПартииДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоГТД КАК ТоварыПоГТД
		|		ПО ТоварыПартииДокумента.Номенклатура = ТоварыПоГТД.Номенклатура
		|			И ТоварыПартииДокумента.Характеристика = ТоварыПоГТД.ХарактеристикаНоменклатуры
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(КоличествоПартии),
		|	СУММА(КоличествоГТД)
		|ПО
		|	Номенклатура";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(МоментВремени().Дата));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("Партия", ДокументОснование.ДокументОснование);
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("СписаниеПоСредней", СписаниеПоСредней);
		Запрос.УстановитьПараметр("ПартияТоваровОтрицательныхОстатков", ПартияТоваровОтрицательныхОстатков);
		
		ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			
			// Проверим, что количество товара по документу не выходит за количество по партии
			 
			Если ВыборкаНоменклатуры.Количество > (ВыборкаНоменклатуры.КоличествоПартии - ВыборкаНоменклатуры.КоличествоГТД) Тогда
				
				Превышение = ВыборкаНоменклатуры.Количество - (ВыборкаНоменклатуры.КоличествоПартии - ВыборкаНоменклатуры.КоличествоГТД);
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'РНПТ прослеживаемого товара %1 была не полностью распределена. В документе указано количество товара больше, чем необходимо.
						|Превышение на <%2>, по организации <%3>'"),
						ВыборкаНоменклатуры.Номенклатура,
						Превышение,
						Организация),
					ЭтотОбъект
				);
				Отказ = Истина;
			
			КонецЕсли;
			
			КоличествоРНПТ = ВыборкаНоменклатуры.Количество;
			
			Выборка = ВыборкаНоменклатуры.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				КоличествоСписано = Мин(КоличествоРНПТ, Выборка.КоличествоПартии - Выборка.КоличествоГТД);
				
				Если КоличествоСписано <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				НоваяЗапись = Движения.ГТДПартийТоваровКомпании.Добавить();
				НоваяЗапись.Регистратор = Ссылка;
				НоваяЗапись.ХозОперация = ХозОперация;
				НоваяЗапись.Период = Дата;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.СкладКомпании = Выборка.Склад;
				НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период
				);
				НоваяЗапись.ГТД = РНПТ;
				НоваяЗапись.Количество = КоличествоСписано;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				
				КоличествоРНПТ = КоличествоРНПТ - КоличествоСписано;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура КАК Справочник.Автомобили) КАК Номенклатура,
		|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка.ПервичныйДокумент КАК Партия
		|ПОМЕСТИТЬ ТаблицаАвтомобилей
		|ИЗ
		|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК УведомлениеОВвозеПрослеживаемыхТоваровТовары
		|ГДЕ
		|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАвтомобилей.Номенклатура КАК Автомобиль,
		|	ТаблицаАвтомобилей.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
		|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.КоличествоОстаток, 0) КАК Количество
		|ИЗ
		|	ТаблицаАвтомобилей КАК ТаблицаАвтомобилей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей.Остатки(
		|				&МоментВремени,
		|				(Автомобиль, Партия) В
		|						(ВЫБРАТЬ
		|							ТаблицаАвтомобилей.Номенклатура КАК Номенклатура,
		|							ТаблицаАвтомобилей.Партия КАК Партия
		|						ИЗ
		|							ТаблицаАвтомобилей КАК ТаблицаАвтомобилей)
		|					И СкладКомпании = &СкладКомпании) КАК ОстаткиАвтомобилейОстатки
		|		ПО ТаблицаАвтомобилей.Номенклатура = ОстаткиАвтомобилейОстатки.Автомобиль
		|ГДЕ
		|	ТаблицаАвтомобилей.Номенклатура.Прослеживаемый";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Количество = 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(  
						НСтр("ru = 'Автомобиль %1 не найден на остатках! РНПТ не присвоен.'"),
						Выборка.Автомобиль),
					ЭтотОбъект, , , Отказ
				);

				Продолжить;
			КонецЕсли;
			
			АвтомобильОбъект = Выборка.Автомобиль.ПолучитьОбъект();
			АвтомобильОбъект.ОбменДанными.Загрузка = Истина;
			АвтомобильОбъект.ГТД = РНПТ;
			Попытка
				АвтомобильОбъект.Записать();
			Исключение  
					
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(  
						НСтр("ru = 'Не удалось записать РНПТ в карточку автомобиля %1'"),
						Выборка.Автомобиль),
					ЭтотОбъект, , , Отказ
				);

				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка при записи элемента справочника ""Автомобили""'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
					),
					УровеньЖурналаРегистрации.Ошибка,
					, , 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнениеДокументаПоСтруктуре(ОснованиеДокумента)
	
	// Заполним реквизиты документа
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		ОснованиеДокумента,
		"ПервичныйДокумент,КодТНВЭД,ЕдиницаИзмерения,ЕдиницаИзмеренияПрослеживаемости,СтранаПроисхождения");
	
	// Для пересчета суммовых показателей
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, ТекущаяДатаСеанса());
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ДанныеТоваров = ПолучитьИзВременногоХранилища(ОснованиеДокумента.Товары);
	
	Товары.Очистить();
	
	Если ДанныеТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ДанныеТоваров Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		НоваяСтрока.КоличествоПрослеживаемости = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		// Пересчитаем сумму
		Если ВалютаДокумента <> ВалютаРегл Тогда
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма, ВалютаРегл, КурсРегл, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
