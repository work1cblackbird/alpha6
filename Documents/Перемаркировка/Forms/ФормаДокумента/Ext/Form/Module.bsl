///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Перемаркировка".
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, , "Новая", Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);   
		ЗаполнитьСтатусИИдентификаторДокумента();
		
		Элементы.ТоварыПричинаПеремаркировки.Видимость =
			(ЭтотОбъект.РежимОбменаСЧестнымЗнаком = Перечисления.СпособыОбменаСЧестнымЗнаком.ЧерезAPI);
		
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
	МаркировкаТоваровСервер.УстановитьРедактированиеКодовМаркировки(
		ЭтотОбъект,
		Объект.Ссылка,
		Элементы.ТоварыКодМаркировки.Имя
	);
	
	МаркировкаТоваровСервер.УстановитьРедактированиеКодовМаркировки(
		ЭтотОбъект,
		Объект.Ссылка,
		Элементы.ТоварыКодМаркировкиНовый.Имя
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ПриОткрытии(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ПриОткрытии(ЭтотОбъект);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Объект")
		И ВыбранноеЗначение.Свойство("КодМаркировки")
		И НЕ ПустаяСтрока(ВыбранноеЗначение.КодМаркировки) Тогда
		
		Если ТипЗнч(ВыбранноеЗначение.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если ТолькоПросмотр ИЛИ Элементы.Товары.ТолькоПросмотр Тогда
				Возврат;
			КонецЕсли;
			
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("КодМаркировки", ВыбранноеЗначение.КодМаркировки);
			
			Если Объект.Товары.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данный код маркировки ранее был добавлен'"));
				Возврат;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыбранноеЗначение.Объект;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаКлиент.ОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		Объект,
		ЭтотОбъект.Окно,
		ПараметрыДействия
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	УправлениеДиалогомАльфаАвтоСервер.ПриЧтенииНаСервере(ЭтотОбъект);
	ЗаполнитьСтатусИИдентификаторДокумента();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Перемаркировка", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)  
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Статус", Статус);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеОшибки", ОписаниеОшибки);  
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Перемаркировка.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Перемаркировка.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтатусПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРасширеннаяПодсказкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Ошибка при отправке запроса'"));
	ПараметрыФормы.Вставить("Сообщение", ОписаниеОшибки);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСообщенияПользователю",
		ПараметрыФормы,
		ЭтотОбъект,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервере
Процедура ТоварнаяГруппаПриИзмененииНаСервере()
	
	НастроитьПараметрыВыбораЭлементовФормы();
	НастроитьПараметрыВыбораНоменклатуры();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяГруппаПриИзменении(Элемент)
	
	ТоварнаяГруппаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Перемаркировка.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ПричинаПеремаркировкиПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаПеремаркировкиПриИзменении(Элемент)
	
	ПричинаПеремаркировкиПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования,
		, ,
		""
	);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И НЕ ТекущиеДанные.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка Тогда
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущиеДанные.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В таблицу нельзя вводить номенклатуру, по которой не ведется учет по маркировке'"),
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);

		ТекущиеДанные.Номенклатура = Неопределено;
	КонецЕсли;
	
	Документы.Перемаркировка.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		НачатьСканированиеМаркировки(ТекущиеДанные.Номенклатура, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы
	.Перемаркировка
	.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураНоваяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНовая)
		И НЕ ТекущиеДанные.НоменклатураНовая.ТипНоменклатуры.ВедетсяМаркировка Тогда
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущиеДанные.НомерСтроки, "НоменклатураНовая");
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В таблицу нельзя вводить номенклатуру, по которой не ведется учет по маркировке'"),
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);

		ТекущиеДанные.НоменклатураНовая = Неопределено;
	КонецЕсли;
	
	Документы.Перемаркировка.ТоварыНоменклатураНоваяПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия , , "Новая");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНоваяПриИзменении(Элемент)
	
	ТоварыНоменклатураНоваяПриИзмененииНаСервере();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		НачатьСканированиеМаркировки(ТекущиеДанные.НоменклатураНовая, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодМаркировкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекстСообщения = "";
	Если НЕ ЭтоКодМаркировки(ТекущиеДанные.КодМаркировки, ТекстСообщения) Тогда
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущиеДанные.НомерСтроки, "КодМаркировки");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);
		
		ТекущиеДанные.КодМаркировки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодМаркировкиНовыйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекстСообщения = "";
	Если НЕ ЭтоКодМаркировки(ТекущиеДанные.КодМаркировкиНовый, ТекстСообщения) Тогда
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущиеДанные.НомерСтроки, "КодМаркировкиНовый");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);
		
		ТекущиеДанные.КодМаркировкиНовый = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ИмяДействия = "ОтправкаЗапросаПеремаркировкиТовара";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("Документ", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект, ИмяДействия));
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьДокумент(
		ЭтотОбъект,
		Объект,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКода(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВводКодаМаркировки(Ложь, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	ТекущийСтатус = Статус;
	ЗаполнитьСтатусИИдентификаторДокумента();
	Если Статус = ТекущийСтатус Тогда
		МаркировкаТоваровКлиент.ОбновитьСтатусДокумента(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(РезультатОбмена, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСтатусИИдентификаторДокумента();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	ЗаполнениеОбъектовАльфаАвто.УстановитьВидимостьКолонокТЧ(ЭтотОбъект, Объект, , "Новая");
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(МаркировкаТоваровСервер.РазрешенныеСтатусыДокументовМаркировки(Объект.Ссылка));
	
	СписокВыбора = Элементы.ПричинаПеремаркировки.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ПричиныПеремаркировки.ИспорченаМаркировка);
	СписокВыбора.Добавить(Перечисления.ПричиныПеремаркировки.ОшибкаВОписании);
	
	Если ДоступенВозвратПроданногоТовара(Объект.ТоварнаяГруппа) Тогда
		СписокВыбора.Добавить(Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа);
		СписокВыбора.Добавить(Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа);
	КонецЕсли;
	
	СписокВыбора.Добавить(Перечисления.ПричиныПеремаркировки.ВозвратОтКонечногоПокупателя);
	СписокВыбора.Добавить(Перечисления.ПричиныПеремаркировки.РешениеНеСвязанныхСРеализацией);
	СписокВыбора.Добавить(Перечисления.ПричиныПеремаркировки.ВозвратРанееЭкспортированногоВЕАЭС);
	
	Элементы.ТоварыПричинаПеремаркировки.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
	СписокВыбора = Элементы.ТоварыОплачен.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("Да");
	СписокВыбора.Добавить("Нет");
	
	СписокВыбора = Элементы.ТоварыВидПервичногоДокумента.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ВидыПервичныхДокументов.КассовыйЧек);
	СписокВыбора.Добавить(Перечисления.ВидыПервичныхДокументов.ТоварныйЧек);
	СписокВыбора.Добавить(Перечисления.ВидыПервичныхДокументов.Прочее);
	
	СписокВыбора = Элементы.ТоварыВидДокументаРегистрации.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ВидыДокументовСоответствия.ДекларацияОСоответствии);
	СписокВыбора.Добавить(Перечисления.ВидыДокументовСоответствия.СертификатСоответствия);
	
	СписокВыбора = Элементы.ТоварнаяГруппа.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(МаркировкаТоваровСервер.СписокТоварныхГрупп(Объект.Ссылка));
	
	НастроитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.Статус.ОтображениеПодсказки = ?(
		ЗначениеЗаполнено(ОписаниеОшибки),
		ОтображениеПодсказки.ОтображатьСправа,
		ОтображениеПодсказки.Нет
	);
	
	ЭтоВозврат = ЭтоВозвратКодовМаркировки(Объект.ПричинаПеремаркировки);
	ЭтоОбувь = (Объект.ТоварнаяГруппа = Справочники.ТипыМаркировки.ОбувныеТовары);
	ЧерезAPI =
		ЭтотОбъект.РежимОбменаСЧестнымЗнаком = ПредопределенноеЗначение("Перечисление.СпособыОбменаСЧестнымЗнаком.ЧерезAPI");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыНоменклатура",
		"Видимость",
		НЕ ЭтоВозврат
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыХарактеристикаНоменклатуры",
		"Видимость",
		Элементы.ТоварыХарактеристикаНоменклатуры.Видимость И НЕ ЭтоВозврат
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыКодМаркировки",
		"Видимость",
		НЕ ЭтоВозврат
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыВидПервичногоДокумента",
		"Видимость",
		ЭтоВозврат
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыНаименованиеПервичногоДокумента",
		"Видимость",
		ЭтоВозврат
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыДатаПервичногоДокумента",
		"Видимость",
		ЭтоВозврат
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыНомерПервичногоДокумента",
		"Видимость",
		ЭтоВозврат
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыВвестиКод",
		"Доступность",
		ЗначениеЗаполнено(Объект.Ссылка)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИдентификаторДокумента",
		"Видимость",
		ЧерезAPI
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСтранаПроизводства",
		"Видимость",
		Документы.Перемаркировка.ВыводитьСтрануТовара(Объект.ТоварнаяГруппа)
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЦвет",
		"Видимость",
		ЭтоОбувь
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыРазмер",
		"Видимость",
		ЭтоОбувь
	);
	
	Если ЧерезAPI Тогда
		ЭтотОбъект.ТолькоПросмотр = Статус = Перечисления.СтатусыДокументовМаркировки.ОжидаетОбработки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОбновитьСтатус",
		"Видимость",
		ЧерезAPI
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Статус",
		"ТолькоПросмотр",
		ЭтотОбъект.ТолькоПросмотр
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ТоварыХарактеристикаНоменклатурыНовая",
		"Объект.Товары.ВладелецХарактеристикиНовая"
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

// Обработка сканирования кода маркировки
//
// Параметры:
//  КодМаркировки			 - Строка	 - Считанный код маркировки.
//  ДополнительныеПараметры	 - Структура - Полученные параметры.
//
&НаКлиенте
Процедура Подключаемый_СканированиеМаркировкиЗавершение(КодМаркировки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если КодМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЭтоНовый") И ДополнительныеПараметры.ЭтоНовый Тогда
		ТекущиеДанные.КодМаркировкиНовый = КодМаркировки;
	Иначе
		ТекущиеДанные.КодМаркировки = КодМаркировки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСканированиеМаркировки(Номенклатура, ЭтоНовый)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
	ПараметрыФормы.Вставить("ЭтоНовый", ЭтоНовый);
	
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_СканированиеМаркировкиЗавершение",
		ЭтотОбъект,
		ПараметрыФормы);
	
	ОткрытаяФорма = ОткрытьФорму(
		"ОбщаяФорма.ФормаСканированияМаркировки",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если ОткрытаяФорма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработкаОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКодаМаркировки(ДобавитьНовуюСтроку = Истина, ТекущаяСтрока = Неопределено)
	
	ЭтоВозврат = ЭтоВозвратКодовМаркировки(Объект.ПричинаПеремаркировки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоВозврат", ЭтоВозврат);
	ПараметрыФормы.Вставить("ТоварнаяГруппа", Объект.ТоварнаяГруппа);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущийКодМаркировки", ТекущаяСтрока.КодМаркировки);
		ПараметрыФормы.Вставить("ТекущаяНоменклатура" , ТекущаяСтрока.Номенклатура);
		ПараметрыФормы.Вставить("НовыйКодМаркировки"  , ТекущаяСтрока.КодМаркировкиНовый);
		ПараметрыФормы.Вставить("НоваяНоменклатура"   , ТекущаяСтрока.НоменклатураНовая);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДобавитьНовуюСтроку", ДобавитьНовуюСтроку);
	ДополнительныеПараметры.Вставить("ЭтоВозврат", ЭтоВозврат);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"Подключаемый_ВводКодаМаркировкиЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ОткрытьФорму(
		"Документ.Перемаркировка.Форма.ФормаВводаКодаМаркировки",
		ПараметрыФормы,
		ЭтотОбъект,
		, , ,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

// Обработка ввода кода маркировки.
//
// Параметры:
//  Результат - Структура, Неопределено - Результат закрытия подчиненной формы.
//  ДополнительныеПараметры - Структура - Полученные параметры.
//
&НаКлиенте
Процедура Подключаемый_ВводКодаМаркировкиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭтоВозврат = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ЭтоВозврат", Ложь);
	ДобавитьНовуюСтроку = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ДобавитьНовуюСтроку", Истина);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ДобавитьНовуюСтроку Тогда
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.ДатаПеремаркировки = Объект.Дата;
		ИначеЕсли Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
			СтрокаТовара = Элементы.Товары.ТекущиеДанные;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Результат);
		ВводКодаМаркировкиЗавершениеНаСервере(СтрокаТовара.ПолучитьИдентификатор(), ЭтоВозврат);
	ИначеЕсли ДобавитьНовуюСтроку Тогда
		СтрокаТовара = Объект.Товары.Добавить();
		СтрокаТовара.ДатаПеремаркировки = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВводКодаМаркировкиЗавершениеНаСервере(ИдентификаторСтроки, ЭтоВозврат)
	
	ПараметрыДействия = Новый Структура;
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ЭтоВозврат Тогда
		Документы.Перемаркировка.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
		УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	КонецЕсли;
	
	Документы.Перемаркировка.ТоварыНоменклатураНоваяПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия , , "Новая");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоВозвратКодовМаркировки(ПричинаПеремаркировки)
	
	Возврат ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа
		ИЛИ ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа;
	
КонецФункции

&НаКлиенте
Функция ЭтоКодМаркировки(ШтрихКод, ТекстСообщения)
	
	ШтрихКод = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ШтрихКод, ТекстСообщения);
	Возврат ПустаяСтрока(ТекстСообщения);
	
КонецФункции

&НаСервере
Процедура НастроитьПараметрыВыбораНоменклатуры()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТоварнаяГруппа) Тогда
		УправлениеДиалогомСервер
		.УдалитьПараметрВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора, "Отбор.ТипНоменклатуры");
		УправлениеДиалогомСервер
		.УдалитьПараметрВыбора(Элементы.ТоварыНоменклатураНовая.ПараметрыВыбора, "Отбор.ТипНоменклатуры");
	КонецЕсли;
	
	ТипыНоменклатуры = МаркировкаТоваровСервер.ТипыНоменклатурыТоварнойГруппы(Объект.ТоварнаяГруппа);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		Элементы.ТоварыНоменклатура.ПараметрыВыбора,
		"Отбор.ТипНоменклатуры",
		ТипыНоменклатуры
	);
	
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		Элементы.ТоварыНоменклатураНовая.ПараметрыВыбора,
		"Отбор.ТипНоменклатуры",
		ТипыНоменклатуры
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусИИдентификаторДокумента()
	
	Запись = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Объект.Ссылка);
	Статус = Запись.Статус;
	ИдентификаторДокумента = Запись.ИдентификаторДокумента;
	ОписаниеОшибки = Запись.ОписаниеОшибки;
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ДоступенВозвратПроданногоТовара(ТоварнаяГруппа)
	
	Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Группа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяГруппа, "ТоварнаяГруппа");
	
	ИсключитьТоварныеГруппы = Новый Массив;
	ИсключитьТоварныеГруппы.Добавить("water");
	
	Возврат ИсключитьТоварныеГруппы.Найти(НРег(Группа)) = Неопределено;
	
КонецФункции // ДоступенВозвратПроданногоТовара()

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения.Свойство("Действие") И ЗначениеЗаполнено(РезультатОповещения.Действие)Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти