// Модуль объекта документа "Перемаркировка"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Чек"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Чек(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Хозоперация <> Справочники.ХозОперации.ЧекНаВозврат Тогда
		ТекстСообщения = НСтр("ru = 'Перемаркировка доступна только при вводе на основании чека на возврат.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ДанныеЗаполнения, ТекстСообщения);
	КонецЕсли;

	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа;
	ЗаполнитьТабличнуюЧастьТоваровПоОснованию(
		ДанныеЗаполнения,
		Перечисления.ВидыПервичныхДокументов.КассовыйЧек,
		НСтр("ru = 'Чек на возврат'")
	);
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "ВозвратОтПокупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа;
	
	ЗаполнитьТабличнуюЧастьТоваровПоОснованию(
		ДанныеЗаполнения,
		Перечисления.ВидыПервичныхДокументов.ТоварныйЧек,
		НСтр("ru = 'Возврат от покупателя'")
	);
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "СписаниеКодовМаркировки"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СписаниеКодовМаркировки(ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Хозоперация <> Справочники.ХозОперации.СписаниеНанесенныхКодовМаркировки Тогда
		ТекстСообщения = НСтр(
			"ru = 'Перемаркировка доступна только при вводе на основании списания КМ, нанесенных на товар.'"
		);
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ДанныеЗаполнения, ТекстСообщения);
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ИспорченаМаркировка;
	
	ЗаполнитьТабличнуюЧастьТоваровПоОснованию(
		ДанныеЗаполнения,
		Перечисления.ВидыПервичныхДокументов.Прочее,
		НСтр("ru = 'Списание кодов маркировки'")
	);
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "КорректировкаРеализаци"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа;
	
	Товары.Очистить();
	
	// Заполним ТЧ Товары только теми товарами, которые на уменьшение и не указаны коды
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	СтруктураПоиска.Вставить("Возврат", Истина);
	Для Каждого ТекущаяСтрока Из ДанныеЗаполнения.Товары Цикл
		
		РазностьКоличества = -ТекущаяСтрока.КоличествоРазница;
		
		// Количество не было уменьшено
		Если РазностьКоличества <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим штучный товар
		РазностьКоличества = РазностьКоличества * ТекущаяСтрока.Коэффициент;
		
		// Проверим, что количество возвратов совпадает с количеством разницы
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		НайденныеСтроки = ДанныеЗаполнения.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		// Уберем указанные маркировки к возврату
		РазностьКоличества = РазностьКоличества - НайденныеСтроки.Количество();
		
		Пока РазностьКоличества > 0 Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.НоменклатураНовая = ТекущаяСтрока.Номенклатура;
			Документы.Перемаркировка.ТоварыНоменклатураНоваяПриИзменении(ЭтотОбъект, НоваяСтрока);
			НоваяСтрока.ХарактеристикаНоменклатурыНовая = ТекущаяСтрока.ХарактеристикаНоменклатуры;
			
			НоваяСтрока.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее;
			НоваяСтрока.НомерПервичногоДокумента = ДанныеЗаполнения.Номер;
			НоваяСтрока.ДатаПервичногоДокумента = ДанныеЗаполнения.Дата;
			НоваяСтрока.НаименованиеПервичногоДокумента = НСтр("ru = 'Корректировка реализации'");
			НоваяСтрока.ДатаПеремаркировки = Дата;
			
			РазностьКоличества = РазностьКоличества - 1;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Номенклатура = Товары.ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Номенклатура, Товары.ВыгрузитьКолонку("НоменклатураНовая"));
		ТоварнаяГруппа = МаркировкаТоваровСервер.ТоварнаяГруппа(Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим статусы указанных кодов маркировки
	ТаблицаРазбораМаркировки = Новый ТаблицаЗначений;
	ТаблицаРазбораМаркировки.Колонки.Добавить("GTIN",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50))
	);
	ТаблицаРазбораМаркировки.Колонки.Добавить("СерийныйНомер",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50))
	);
	ТаблицаРазбораМаркировки.Колонки.Добавить("КодМаркировки", Новый ОписаниеТипов("Строка"
		, , Новый КвалификаторыСтроки(200))
	);
	ТаблицаРазбораМаркировки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	// Разберем маркировку на состовляющие для поиска
	Для Каждого ТекущийКодМаркировки Из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(
			ТекущийКодМаркировки.КодМаркировки
		);
		Если НЕ СтруктураМаркировки.Разобран Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Код маркировки <%1> не разобран. Проверьте его корректность.'"),
					ТекущийКодМаркировки.КодМаркировки
				),
				ЭтотОбъект,
				, ,
				Отказ			
			);
			Продолжить;
		КонецЕсли;
		
		Если СтруктураМаркировки.ТипИдентификатораТовара <>
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРазбораМаркировки.Добавить();
		НоваяСтрока.GTIN = СтруктураМаркировки.GTIN;
		НоваяСтрока.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
		НоваяСтрока.КодМаркировки = ТекущийКодМаркировки.КодМаркировки;
		НоваяСтрока.НомерСтроки = ТекущийКодМаркировки.НомерСтроки;
		
	КонецЦикла;
	
	ТекущиеСтатусы = РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(
		ТаблицаРазбораМаркировки,
		Дата
	);
	
	// Можем перемаркировкть только маркировку со статусом "Введен в оборот"
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.СостоянияКодовМаркировки.ВведенВОборот);
	СостоянияПроверки.Добавить(Перечисления.СостоянияКодовМаркировки.ВведенВОборотПриВозврате);
	СостоянияПроверки.Добавить(Перечисления.СостоянияКодовМаркировки.ВведенВОборотОжидаетПеремаркировки);
	СостоянияПроверки.Добавить(Перечисления.СостоянияКодовМаркировки.ВыведенИзОборота);
	СостоянияПроверки.Добавить(Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПриУтратеИлиПовреждении);
	Для Каждого ТекущаяСтрока Из ТекущиеСтатусы Цикл
		
		Если СостоянияПроверки.Найти(ТекущаяСтрока.Состояние) = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Код маркировки <%1> не введен в оборот.'"),
					СокрЛП(ТекущаяСтрока.КодМаркировки)
				),
				ЭтотОбъект,
				, ,
				Отказ			
			);
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим состояния кодов для новых
	ТаблицаРазбораМаркировкиНовые = ТаблицаРазбораМаркировки.Скопировать();
	ТаблицаПроверкиУникальностиКодов = ТаблицаРазбораМаркировки.Скопировать();
	ТаблицаПроверкиУникальностиКодов.Колонки.Добавить("НомерСтрокиНовая", Новый ОписаниеТипов("Число"));
	ТаблицаРазбораМаркировкиНовые.Очистить();
	
	// Разберем маркировку на составляющие для поиска
	Для Каждого ТекущийКодМаркировки Из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировкиНовый) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(
			ТекущийКодМаркировки.КодМаркировкиНовый
		);
		Если НЕ СтруктураМаркировки.Разобран Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Код маркировки <%1> не разобран. Проверьте его корректность.'"),
					ТекущийКодМаркировки.КодМаркировкиНовый
				),
				ЭтотОбъект,
				, ,
				Отказ
			);
			Продолжить;
		КонецЕсли;
		Если СтруктураМаркировки.ТипИдентификатораТовара <>
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРазбораМаркировкиНовые.Добавить();
		НоваяСтрока.GTIN = СтруктураМаркировки.GTIN;
		НоваяСтрока.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
		НоваяСтрока.КодМаркировки = ТекущийКодМаркировки.КодМаркировкиНовый;
		НоваяСтрока.НомерСтроки = ТекущийКодМаркировки.НомерСтроки;
		
		НоваяСтрока = ТаблицаПроверкиУникальностиКодов.Добавить();
		НоваяСтрока.КодМаркировки = ТекущийКодМаркировки.КодМаркировкиНовый;
		НоваяСтрока.НомерСтрокиНовая = ТекущийКодМаркировки.НомерСтроки;
		
	КонецЦикла;
	
	Если НЕ КодыМаркировкиУникальны(ТаблицаПроверкиУникальностиКодов) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ТекущиеСтатусыНовая = РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(
		ТаблицаРазбораМаркировки,
		Дата
	);
	
	// Можем перемаркировать только маркировку со статусом "Эмитирован"
	Для Каждого ТекущаяСтрока Из ТекущиеСтатусы Цикл
		
		Если ТекущаяСтрока.Состояние = Перечисления.СостоянияКодовМаркировки.Экспортирован Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущаяСтрока.НомерСтроки, "КодМаркировки");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Код маркировки <%1> не эмитирован.'"),
					ТекущийКодМаркировки.КодМаркировки
				),
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ	
			);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если перемаркируем испорченную, то надо, чтоб КИ совпадал
	Если ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ИспорченаМаркировка Тогда
		Для Каждого ТекущаяСтрока Из ТаблицаРазбораМаркировки Цикл
			НайденнаяСтрока = ТаблицаРазбораМаркировкиНовые.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки");
			Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.GTIN <> ТекущаяСтрока.GTIN Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Товары. Строка %1: Указанные коды маркировки имеют разный код товара.'"),
						ТекущаяСтрока.НомерСтроки
					),
					ЭтотОбъект,
					, ,
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭтоРозничныйВозврат = 
		(ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа);
	ЭтоДистанционныйВозврат =
		(ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа);
	
	Если ЭтоДистанционныйВозврат Тогда
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			
			Если ТекущаяСтрока.Оплачен <> "Да" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидПервичногоДокумента) Тогда
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущаяСтрока.НомерСтроки, "ВидПервичногоДокумента");
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Необходимо заполнить вид первичного документа.'"),
					,
					ПутьКТабличнойЧасти,
					"Объект",
					Отказ
				);
				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаПервичногоДокумента) Тогда
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущаяСтрока.НомерСтроки, "ДатаПервичногоДокумента");
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Необходимо заполнить дату первичного документа.'"),
					,
					ПутьКТабличнойЧасти,
					"Объект",
					Отказ
				);

			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НомерПервичногоДокумента) Тогда
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущаяСтрока.НомерСтроки, "НомерПервичногоДокумента");	
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Необходимо заполнить номер первичного документа.'"),
					,
					ПутьКТабличнойЧасти,
					"Объект",
					Отказ
				);

			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НаименованиеПервичногоДокумента) Тогда
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущаяСтрока.НомерСтроки, "НаименованиеПервичногоДокумента");	
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Необходимо заполнить наименование первичного документа.'"),
					,
					ПутьКТабличнойЧасти,
					"Объект",
					Отказ
				);

			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НоменклатураСоответствуетТоварнойГруппе(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Переведем вид кода маркировки
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		ТекущаяСтрока.КодМаркировки = 
			МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
				ТекущаяСтрока.КодМаркировки,,
				СтрНачинаетсяС(ТекущаяСтрока.КодМаркировки, "("));
		
		ТекущаяСтрока.КодМаркировкиНовый = 
			МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
				ТекущаяСтрока.КодМаркировкиНовый,,
				СтрНачинаетсяС(ТекущаяСтрока.КодМаркировкиНовый, "("));
		
	КонецЦикла;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа
		ИЛИ ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ЭтоВозврат Тогда
			ТекущаяСтрока.Номенклатура = Неопределено;
			ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
			ТекущаяСтрока.КодМаркировки = "";
		Иначе
			ТекущаяСтрока.ВидПервичногоДокумента = Неопределено;
			ТекущаяСтрока.НаименованиеПервичногоДокумента = "";
			ТекущаяСтрока.ДатаПервичногоДокумента = Дата(1, 1, 1);
			ТекущаяСтрока.НомерПервичногоДокумента = "";
		КонецЕсли;
	КонецЦикла;
	
		// Только для записанных документов определим статус из регистра при необходимости
	Если ЗначениеЗаполнено(Ссылка)
		И ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "Статус") = Неопределено Тогда
			ДанныеСтатусаДокумента = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
			ДополнительныеСвойства.Вставить("ИдентификаторДокумента", ДанныеСтатусаДокумента.ИдентификаторДокумента);
			ДополнительныеСвойства.Вставить("Статус", ДанныеСтатусаДокумента.Статус);
			ДополнительныеСвойства.Вставить("ОписаниеОшибки", ДанныеСтатусаДокумента.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;;
	
	Если НЕ Отказ Тогда
		МаркировкаТоваровСервер.ЗаписатьСтатусДокумента(Ссылка, ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьТабличнуюЧастьТоваровПоОснованию(ДанныеЗаполнения, ВидПервичногоДокумента, НаименованиеДокумента)
	
	Товары.Очистить();
	
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	// Найдем номенклатуру, у которой не отсканировали код
	Для Каждого ТекущаяСтрока Из ДанныеЗаполнения.Товары Цикл
		
		Если НЕ ТекущаяСтрока.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		
		Попытка
			НайденныеСтроки = ДанныеЗаполнения.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
			КоличествоБезМаркировки = (ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент - НайденныеСтроки.Количество());
		Исключение
			КоличествоБезМаркировки = 1;
		КонецПопытки;
		
		Пока КоличествоБезМаркировки > 0 Цикл
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.НоменклатураНовая = ТекущаяСтрока.Номенклатура;
			Документы.Перемаркировка.ТоварыНоменклатураНоваяПриИзменении(ЭтотОбъект, НоваяСтрока);
			НоваяСтрока.ХарактеристикаНоменклатурыНовая = ТекущаяСтрока.ХарактеристикаНоменклатуры;
			
			НоваяСтрока.ВидПервичногоДокумента = ВидПервичногоДокумента;
			НоваяСтрока.НомерПервичногоДокумента = ДанныеЗаполнения.Номер;
			НоваяСтрока.ДатаПервичногоДокумента = ДанныеЗаполнения.Дата;
			НоваяСтрока.НаименованиеПервичногоДокумента = НаименованиеДокумента;
			НоваяСтрока.ДатаПеремаркировки = Дата;
			
			КоличествоБезМаркировки = КоличествоБезМаркировки - 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодыМаркировкиУникальны(ТаблицаПроверкиУникальностиКодов)
	
	Результат = Истина;
	
	ТаблицаПроверкиУникальностиКодов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПроверкиУникальностиКодов.ЗаполнитьЗначения(1, "Количество");
	КопияТаблицы = ТаблицаПроверкиУникальностиКодов.Скопировать();
	
	ТаблицаПроверкиУникальностиКодов.Свернуть("КодМаркировки", "Количество");
	
	Для Каждого Строка Из ТаблицаПроверкиУникальностиКодов Цикл
		Если Строка.Количество > 1 Тогда
			Результат = Ложь;
			НайденныеСтроки = КопияТаблицы.НайтиСтроки(Новый Структура("КодМаркировки", Строка.КодМаркировки));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.НомерСтрокиНовая > 0 Тогда 
					ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",НайденнаяСтрока.НомерСтрокиНовая, "КодМаркировкиНовый");
				Иначе
					ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",НайденнаяСтрока.НомерСтроки, "КодМаркировки");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Код маркировки <%1> не уникален.'"),
						Строка.КодМаркировки
					),
					,
					ПутьКТабличнойЧасти,
					"Объект"
				);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура НоменклатураСоответствуетТоварнойГруппе(Отказ)
	
	ЭтоВозврат = ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа
		ИЛИ ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа;
	
	ТипыНоменклатуры = МаркировкаТоваровСервер.ТипыНоменклатурыТоварнойГруппы(ТоварнаяГруппа);
	
	ТоварнаяГруппаПредставление = Строка(ТоварнаяГруппа);
	
	Для Каждого Строка Из Товары Цикл
		
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И НЕ ЭтоВозврат
			И ТипыНоменклатуры.Найти(Строка.Номенклатура.ТипНоменклатуры) = Неопределено Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Строка.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Тип номенклатуры ""%1"" недопустим для выбранной группы товаров ""%2"".'"),
					Строка.Номенклатура,
					ТоварнаяГруппаПредставление
				),
				,
				ПутьКТабличнойЧасти, 
				"Объект",
				Отказ
			);
			
		КонецЕсли;
		
		Если ТипыНоменклатуры.Найти(Строка.НоменклатураНовая.ТипНоменклатуры) = Неопределено Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Строка.НомерСтроки, "НоменклатураНовая");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Тип номенклатуры ""%1"" недопустим для выбранной группы товаров ""%2"".'"),
					Строка.НоменклатураНовая,
					ТоварнаяГруппаПредставление
				),
				,
				ПутьКТабличнойЧасти, 
				"Объект",
				Отказ
			);

			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли