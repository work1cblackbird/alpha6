// Модуль менеджера документа "Перемаркировка".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
// Возвращаемое значение:
//  Структура - значения итоговых показателей по операции в целом:
//    СуммаДокумента	- Число - сумма документа;
//    СуммаНДС			- Число - сумма НДС;
//    СуммаБезНДС		- Число - сумма без НДС.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

Функция ВыводитьСтрануТовара(ТоварнаяГруппа) Экспорт
	
	Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГруппаТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяГруппа, "ТоварнаяГруппа");
	
	СписокТоваров = Новый Массив;
	СписокТоваров.Добавить("bicycle");
	СписокТоваров.Добавить("perfum");
	СписокТоваров.Добавить("shoes");
	СписокТоваров.Добавить("lp");
	СписокТоваров.Добавить("water");
	СписокТоваров.Добавить("photo");
	
	Возврат СписокТоваров.Найти(ГруппаТоваров) <> Неопределено;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.ДатаПеремаркировки");
	ОбязательныеРеквизиты.Добавить("Товары.НоменклатураНовая");
	ОбязательныеРеквизиты.Добавить("Товары.ДатаПеремаркировки");
	Если Объект.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ОшибкаВОписании Тогда
		ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
		ОбязательныеРеквизиты.Добавить("Товары.КодМаркировки");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.КодТНВЭД");
	
	Статус = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Объект.Ссылка).Статус;
	Если Статус <> Перечисления.СтатусыДокументовМаркировки.Новый Тогда
		ОбязательныеРеквизиты.Добавить("Товары.КодМаркировкиНовый");
	КонецЕсли;
	
	Если Объект.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа Тогда
		ОбязательныеРеквизиты.Добавить("Товары.Оплачен");
		ОбязательныеРеквизиты.Добавить("Товары.НаименованиеПервичногоДокумента");
		ОбязательныеРеквизиты.Добавить("Товары.ВидПервичногоДокумента");
		ОбязательныеРеквизиты.Добавить("Товары.ДатаПервичногоДокумента");
		ОбязательныеРеквизиты.Добавить("Товары.НомерПервичногоДокумента");
	КонецЕсли;
	
	Если ВыводитьСтрануТовара(Объект.ТоварнаяГруппа) Тогда
		ОбязательныеРеквизиты.Добавить("Товары.СтранаПроизводства");
	КонецЕсли;
	
	Если Объект.ТоварнаяГруппа = Справочники.ТипыМаркировки.ОбувныеТовары Тогда
		ОбязательныеРеквизиты.Добавить("Товары.Цвет");
		ОбязательныеРеквизиты.Добавить("Товары.Размер");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПричинаПеремаркировки");
	ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	УникальныеТовары = Новый Массив();
	Если Объект.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ОшибкаВОписании Тогда
		УникальныеТовары.Добавить("КодМаркировки");
	КонецЕсли;
	
	Статус = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Объект.Ссылка).Статус;
	Если Статус <> Перечисления.СтатусыДокументовМаркировки.Новый Тогда
		УникальныеТовары.Добавить("КодМаркировкиНовый");
	КонецЕсли;
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Структура - Содержит перечень параметров действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураНоваяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.КодТНВЭД) Тогда
		Строка.КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.НоменклатураНовая, "КодТНВЭД");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.СтранаПроизводства) Тогда
		Строка.СтранаПроизводства = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.НоменклатураНовая, "СтранаПроисхождения");
	КонецЕсли;
	
	НоменклатураНовая = Строка.НоменклатураНовая;
	ХарактеристикаНовая = Строка.ХарактеристикаНоменклатурыНовая;
	
	ИспользованиеХарактеристик = НоменклатураНовая.ТипНоменклатуры.ИспользованиеХарактеристик;
	
	Если
		(ИспользованиеХарактеристик = 1 И ХарактеристикаНовая.Владелец <> НоменклатураНовая.ТипНоменклатуры)
		ИЛИ (ИспользованиеХарактеристик = 2 И ХарактеристикаНовая.Владелец <> НоменклатураНовая)
		ИЛИ ИспользованиеХарактеристик = 3
	Тогда
		Строка.ХарактеристикаНоменклатурыНовая = Неопределено;
	КонецЕсли;
	
	// Только для интерактива
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") И ТипЗнч(Строка) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Если Строка.Свойство("ВладелецХарактеристикиНовая") Тогда
			Если ИспользованиеХарактеристик = 1 Тогда
				Строка.ВладелецХарактеристикиНовая = НоменклатураНовая.ТипНоменклатуры;
			ИначеЕсли ИспользованиеХарактеристик = 2 Тогда
				Строка.ВладелецХарактеристикиНовая = НоменклатураНовая;
			Иначе
				Строка.ВладелецХарактеристики = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//  Параметры - Структура - Вспомогательные параметры. 
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "Перемаркировка");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить коды маркировок по заказам на эмиссию'");
	Команда.Идентификатор	= "ЗаполнитьКодыМаркировкиИзЗаказов";
	
КонецПроцедуры

// Производит формирование структуры с доступностью команд заполнения объекта
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Соответствие - Настройка доступности и видимости команд заполнения
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	ДоступностьКоманд = Новый Соответствие;
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьКодыМаркировкиИзЗаказов.Видимость"   , Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьКодыМаркировкиИзЗаказов.Доступность" , Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ДоступностьКоманд;
	
КонецФункции

// Заполнение табличной части документа заказанными кодами маркировки
//
// Параметры:
// 	Ссылка				 - ДокументСсылка.ВводВОборотКодовМаркировки - Документ ввода в оборот
//  ПараметрыКоманды	 - Структура - Параметры для заполнения
//  ПараметрыДействия	 - Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Неопределено - Функция не возвращает определенное значение
//
Функция ЗаполнитьКодыМаркировкиИзЗаказов(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим введенные заказы на основании и полученные коды маркировки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКодовМаркировки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокЗаказов
	|ИЗ
	|	Документ.ЗаказКодовМаркировки КАК ЗаказКодовМаркировки
	|ГДЕ
	|	ЗаказКодовМаркировки.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияКодовМаркировкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	СостоянияКодовМаркировкиСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СостоянияКодовМаркировкиСрезПоследних.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	РегистрСведений.СостоянияКодовМаркировки.СрезПоследних(
	|			,
	|			ДокументОснование В
	|				(ВЫБРАТЬ
	|					СписокЗаказов.Ссылка КАК Ссылка
	|				ИЗ
	|					СписокЗаказов КАК СписокЗаказов)) КАК СостоянияКодовМаркировкиСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Заполним коды маркировки с учетом заполненных
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("НоменклатураНовая, ХарактеристикаНоменклатурыНовая,КодМаркировкиНовый");
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура ("КодМаркировкиНовый", Выборка.КодМаркировки);
		
		Если Объект.Товары.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.НоменклатураНовая = Выборка.Номенклатура;
		СтруктураПоиска.ХарактеристикаНоменклатурыНовая = Выборка.ХарактеристикаНоменклатуры;
		СтруктураПоиска.КодМаркировкиНовый = "";
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].КодМаркировкиНовый = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
				Выборка.КодМаркировки, "");
		КонецЕсли;
		
	КонецЦикла;

	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремаркировкаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Перемаркировка.Товары КАК ПеремаркировкаТовары
	|ГДЕ
	|	(ПеремаркировкаТовары.КодМаркировки <> """"
	|			ИЛИ ПеремаркировкаТовары.КодМаркировкиНовый <> """")";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.Перемаркировка - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
		СтрокаТоваров.КодМаркировкиНовый =
			МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировкиНовый);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение данных документа для вывода из оборота
//
// Параметры:
//  Объект		 - ДокументСсылка.Перемаркировка - Документ, для которого получаем данные
//  Сообщение	 - Строка - Ошибка при проверке документа
// 
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ДанныеПеремаркировкиКодов(Объект, Сообщение) Экспорт
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Перемаркировка.Организация.ИНН КАК ОрганизацияИНН,
	               |	Перемаркировка.Дата КАК ДатаПеремаркировки,
	               |	Перемаркировка.ПричинаПеремаркировки КАК ПричинаПеремаркировки,
	               |	Перемаркировка.ТоварнаяГруппа КАК ТоварнаяГруппа
	               |ИЗ
	               |	Документ.Перемаркировка КАК Перемаркировка
	               |ГДЕ
	               |	Перемаркировка.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПеремаркировкаТовары.ВидДокументаРегистрации КАК ВидДокументаРегистрации,
	               |	ПеремаркировкаТовары.НомерДокументаСоответствия КАК НомерДокументаСоответствия,
	               |	ПеремаркировкаТовары.ДатаДокументаСоответствия КАК ДатаДокументаСоответствия,
	               |	ПеремаркировкаТовары.КодМаркировки КАК КодМаркировки,
	               |	ПеремаркировкаТовары.КодМаркировкиНовый КАК КодМаркировкиНовый,
	               |	ПеремаркировкаТовары.ДатаПеремаркировки КАК ДатаПеремаркировки,
	               |	ПеремаркировкаТовары.ВидПервичногоДокумента КАК ВидПервичногоДокумента,
	               |	ПеремаркировкаТовары.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	               |	ПеремаркировкаТовары.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	               |	ПеремаркировкаТовары.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	               |	ПеремаркировкаТовары.КодТНВЭД.Код КАК КодТНВЭД,
	               |	ПеремаркировкаТовары.Оплачен КАК Оплачен,
	               |	ПеремаркировкаТовары.ПричинаПеремаркировки КАК ПричинаПеремаркировки,
	               |	ВЫБОР
	               |		КОГДА ПеремаркировкаТовары.СтранаПроизводства = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	               |			ТОГДА """"
	               |		ИНАЧЕ ПеремаркировкаТовары.СтранаПроизводства.Код
	               |	КОНЕЦ КАК Страна,
	               |	ПеремаркировкаТовары.Цвет КАК Цвет,
	               |	ПеремаркировкаТовары.Размер КАК Размер
	               |ИЗ
	               |	Документ.Перемаркировка.Товары КАК ПеремаркировкаТовары
	               |ГДЕ
	               |	ПеремаркировкаТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ШапкаДокумента = ПакетЗапроса[0].Выбрать();
	ШапкаДокумента.Следующий();
	
	СтрокаТоваров = ПакетЗапроса[1].Выбрать();
	
	ТекстСообщения.Вставить("participant_inn", СокрЛП(ШапкаДокумента.ОрганизацияИНН));
	ТекстСообщения.Вставить("remarking_date", Формат(ШапкаДокумента.ДатаПеремаркировки, "ДФ=dd.MM.yyyy"));
	
	ЭтоВозвратРозница =
		(ШапкаДокумента.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа);
	ЭтоВозвратДистанционный =
		(ШапкаДокумента.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа);
	ПричинаПеремаркировки = ОбменССистемойМаркировкиСервер.ПричинаПеремаркировки(ШапкаДокумента.ПричинаПеремаркировки);
	ЭтоШина = (ШапкаДокумента.ТоварнаяГруппа = Справочники.ТипыМаркировки.ШиныИАвтопокрышки);
	ЭтоОбувь = (ШапкаДокумента.ТоварнаяГруппа = Справочники.ТипыМаркировки.ОбувныеТовары);
	ТекстСообщения.Вставить("remarking_cause", ПричинаПеремаркировки);
	
	// Заполним табличную часть
	ТекстСообщения.Вставить("products", Новый Массив);
	
	Пока СтрокаТоваров.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.КодМаркировкиНовый) Тогда
			
			Сообщение = НСтр("ru = 'Имеются строки, в которых не указан новый код маркировки. Выгрузка файла отменена.'");
			Возврат Неопределено;
			
		КонецЕсли;
		
		СтрокаКМ = Новый Структура;
		ТекстОшибки = "";
		
		Если ЗначениеЗаполнено(СтрокаТоваров.КодМаркировки) Тогда
			
			КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
				СтрокаТоваров.КодМаркировки,
				ТекстОшибки,
				Ложь);
			
			// Проверим, что это КМ
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКМ.Вставить("last_uin", КодМаркировки);
			
		КонецЕсли;
		
		КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
			СтрокаТоваров.КодМаркировкиНовый,
			ТекстОшибки,
			Ложь);
		
		// Проверим, что это КМ
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаКМ.Вставить("new_uin", КодМаркировки);
		
		// Код ТНВЭД
		СтрокаКМ.Вставить("tnved_10", СтрокаТоваров.КодТНВЭД);
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ДатаПеремаркировки) Тогда
			
			СтрокаКМ.Вставить("remarking_date", Формат(СтрокаТоваров.ДатаПеремаркировки, "ДФ=dd.MM.yyyy"));
			
		Иначе
			
			СтрокаКМ.Вставить("remarking_date", Формат(ШапкаДокумента.ДатаПеремаркировки, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ПричинаПеремаркировки) Тогда
			
			ПричинаПеремаркировкиСтроки =
				ОбменССистемойМаркировкиСервер.ПричинаПеремаркировки(СтрокаТоваров.ПричинаПеремаркировки);
			СтрокаКМ.Вставить("remarking_cause", ПричинаПеремаркировкиСтроки);
			
		Иначе
			
			СтрокаКМ.Вставить("remarking_cause", ПричинаПеремаркировки);
			
		КонецЕсли;
		
		Если ЭтоВозвратДистанционный ИЛИ ЭтоВозвратРозница Тогда
			
			Оплачен = "";
			
			Если СтрокаТоваров.Оплачен = "Да" Тогда
				
				Оплачен = "true";
				
			Иначе
				
				Оплачен = "false";
				
			КонецЕсли;
			
			СтрокаКМ.Вставить("paid", Оплачен);
			
			Если СтрокаТоваров.Оплачен = "Да" ИЛИ ЭтоВозвратРозница Тогда
				
				ВидДокумента = ОбменССистемойМаркировкиСервер.ВидПервичногоДокумента(СтрокаТоваров.ВидПервичногоДокумента);
				
				СтрокаКМ.Вставить("primary_document_type", ВидДокумента);
				СтрокаКМ.Вставить("primary_document_custom_name", СтрокаТоваров.НаименованиеПервичногоДокумента);
				СтрокаКМ.Вставить("primary_document_number", СтрокаТоваров.НомерПервичногоДокумента);
				СтрокаКМ.Вставить("primary_document_date", Формат(СтрокаТоваров.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВидДокумента = ОбменССистемойМаркировкиСервер.ВидДокументаСоответствия(
			СтрокаТоваров.ВидДокументаРегистрации);
			
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			
			СтрокаКМ.Вставить("certificate_type", ВидДокумента);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.НомерДокументаСоответствия) Тогда
			
			СтрокаКМ.Вставить("certificate_number", СтрокаТоваров.НомерДокументаСоответствия);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ДатаДокументаСоответствия) Тогда
			
			СтрокаКМ.Вставить("certificate_date", Формат(СтрокаТоваров.ДатаДокументаСоответствия, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
		Если НЕ ЭтоШина Тогда
			
			СтрокаКМ.Вставить("production_country", СтрокаТоваров.Страна);
			
		КонецЕсли;
		
		Если ЭтоОбувь Тогда
			СтрокаКМ.Вставить("color", СтрокаТоваров.Цвет);
			СтрокаКМ.Вставить("product_size", СтрокаТоваров.Размер);
		КонецЕсли;
		
		ТекстСообщения.products.Добавить(СтрокаКМ);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ЗапросДокумента(Объект, ПараметрыОбмена, Сообщение) Экспорт
	
	СтруктураСообщения = ДанныеПеремаркировкиКодов(Объект, Сообщение);
	
	Возврат СтруктураСообщения;
	
КонецФункции

Процедура ЗаполнитьСтатусыКодовМаркировки(Ссылка, Отказ, СтатусДокумента = Неопределено) Экспорт
	
	ДанныеСтатусаДокумента 	= РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
	Если СтатусДокумента = Неопределено Тогда
		СтатусДокумента 		= ДанныеСтатусаДокумента.Статус;
	КонецЕсли;
	
	Если НЕ Отказ И СтатусДокумента = Перечисления.СтатусыДокументовМаркировки.Выполнен Тогда
		ЭтотОбъект = Ссылка.ПолучитьОбъект();		
		// Изменим состояние маркировки
		ТаблицаМаркировок = Новый ТаблицаЗначений;
		ТаблицаМаркировок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМаркировок.Колонки.Добавить("ХарактеристикаНоменклатуры",
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры")
		);
		ТаблицаМаркировок.Колонки.Добавить("КодМаркировки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		ТаблицаМаркировок.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		
		ТаблицаНовыхМаркировок = ТаблицаМаркировок.Скопировать();
		Период = ТекущаяДатаСеанса();
		
		ЭтоВозврат = Ссылка.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа
			ИЛИ Ссылка.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа;
		
		// Получим текущие сосотояния кодов маркировок
		ДокументБылВыполнен = (ДанныеСтатусаДокумента.Статус = Перечисления.СтатусыДокументовМаркировки.Выполнен);
		СтатусыКодовМаркировкиПоДокументу = Неопределено;
		
		Если ДокументБылВыполнен Тогда
			СтатусыКодовМаркировкиПоДокументу =
				РегистрыСведений.СостоянияКодовМаркировки.СтатусыКодовМаркировкиПоДокументу(Ссылка);
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из Ссылка.Товары Цикл
			
			Если НЕ ЭтоВозврат
				И Не УстановленоСостояниеКодаМаркировки(
					ТекущаяСтрока,
					СтатусыКодовМаркировкиПоДокументу,
					ТаблицаНовыхМаркировок) Тогда
				НоваяСтрока = ТаблицаМаркировок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.Период = Период;
			КонецЕсли;
			
			Если УстановленоСостояниеКодаМаркировки(
				ТекущаяСтрока,
				СтатусыКодовМаркировкиПоДокументу,
				ТаблицаНовыхМаркировок,
				Истина) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНовыхМаркировок.Добавить();
			НоваяСтрока.Номенклатура = ТекущаяСтрока.НоменклатураНовая;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатурыНовая;
			НоваяСтрока.КодМаркировки = ТекущаяСтрока.КодМаркировкиНовый;
			НоваяСтрока.Период = Период;
			
		КонецЦикла;
		
		// Для перемаркируемых поставим сотояние выбытия из оборота
		ОчищатьЗаписи = Истина;
		УдалятьДвижения = Истина;
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.Организация = Ссылка.Организация;
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		НаборЗаписейСостоянияКодовМаркировки.Период = Период;
		
		Если ТаблицаМаркировок.Количество() > 0 Тогда
			НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейСостоянияКодовМаркировки.Состояние = 
				Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПриПеремаркировке;
			НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаМаркировок;
			Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
				Отказ = Истина;
			КонецЕсли;
			ОчищатьЗаписи = Ложь;
			УдалятьДвижения = Ложь;
		КонецЕсли;
		
		// Введем в оборот новые маркировки
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборот;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаНовыхМаркировок;
		НаборЗаписейСостоянияКодовМаркировки.ОчищатьЗаписи = ОчищатьЗаписи;
		НаборЗаписейСостоянияКодовМаркировки.УдалятьДвижения = УдалятьДвижения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановленоСостояниеКодаМаркировки(
		СтрокаМаркировки,
		УстановленныеСостояния,
		НовыеКодыМаркировки,
		НовыйКодМаркировки = Ложь)
	
	Если УстановленныеСостояния = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрефиксКолонкиКода = ?(НовыйКодМаркировки, "Новый", "");
	
	УсловиеПоиска = Новый Структура("КодМаркировки", СтрокаМаркировки[СтрШаблон("КодМаркировки%1", ПрефиксКолонкиКода)]);
	НайденныеСостояния = УстановленныеСостояния.НайтиСтроки(УсловиеПоиска);
	
	Если НайденныеСостояния.Количество() > 0 Тогда
		СтрокаКодаМаркировки = НовыеКодыМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировки, НайденныеСостояния[0]);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказКодовМаркировки);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Перемаркировка);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли