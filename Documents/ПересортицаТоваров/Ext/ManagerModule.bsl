// Модуль менеджера документа "Пересортица товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("Сумма"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Производим добавление сведений о розничной сумме только в случае если выбран розничный склад.
	Если Объект.СкладКомпании.Розничный Тогда
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		ИтогиОперации.Вставить("ПроцентНаценки", ?(ИтогиОперации.СуммаДокумента=0, 0, Окр(ИтогиОперации.СуммаРозничная/ИтогиОперации.СуммаДокумента-1, 2)*100));
	КонецЕсли;

	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Возвращает структуру из строки прихода
//
Функция ПолучитьСтрокуПоПриходу(ТекущаяСтрока)
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("НомерСтроки",                ТекущаяСтрока.НомерСтроки);
	СтруктураСтроки.Вставить("Номенклатура",               ТекущаяСтрока.НоменклатураПриход);
	СтруктураСтроки.Вставить("ЕдиницаИзмерения",           ТекущаяСтрока.ЕдиницаИзмеренияПриход);
	СтруктураСтроки.Вставить("Количество",                 ТекущаяСтрока.КоличествоПриход);
	СтруктураСтроки.Вставить("Коэффициент",                ТекущаяСтрока.КоэффициентПриход);
	СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатурыПриход);
	СтруктураСтроки.Вставить("Цена",                       ТекущаяСтрока.Цена);
	СтруктураСтроки.Вставить("Сумма",                      ТекущаяСтрока.Сумма);
	СтруктураСтроки.Вставить("ЦенаРозничная",              ТекущаяСтрока.ЦенаРозничнаяПриход);
	СтруктураСтроки.Вставить("СуммаРозничная",             ТекущаяСтрока.СуммаРозничнаяПриход);
	СтруктураСтроки.Вставить("Партия",                     ТекущаяСтрока.Партия);
	СтруктураСтроки.Вставить("ГТД",                        ТекущаяСтрока.ГТДПриход);
	СтруктураСтроки.Вставить("Ячейка",                     ТекущаяСтрока.ЯчейкаПриход);
	СтруктураСтроки.Вставить("ВладелецХарактеристики",     ТекущаяСтрока.ВладелецХарактеристикиПриход);
	СтруктураСтроки.Вставить("ВладелецЕдиницыИзмерения",   ТекущаяСтрока.ВладелецЕдиницыИзмеренияПриход);
	СтруктураСтроки.Вставить("ОстатокНаСкладе",            ТекущаяСтрока.ОстатокНаСкладеПриход);
	
	Возврат СтруктураСтроки;
	
КонецФункции // ПолучитьСтрокуПоПриходу()

// Возвращает структуру из строки расхода
//
Функция ПолучитьСтрокуПоРасходу(ТекущаяСтрока)
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("НомерСтроки",                ТекущаяСтрока.НомерСтроки);
	СтруктураСтроки.Вставить("Номенклатура",               ТекущаяСтрока.Номенклатура);
	СтруктураСтроки.Вставить("ЕдиницаИзмерения",           ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураСтроки.Вставить("Количество",                 ТекущаяСтрока.Количество);
	СтруктураСтроки.Вставить("Коэффициент",                ТекущаяСтрока.Коэффициент);
	СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	СтруктураСтроки.Вставить("Цена",                       ТекущаяСтрока.Цена);
	СтруктураСтроки.Вставить("Сумма",                      ТекущаяСтрока.Сумма);
	СтруктураСтроки.Вставить("ЦенаРозничная",              ТекущаяСтрока.ЦенаРозничная);
	СтруктураСтроки.Вставить("СуммаРозничная",             ТекущаяСтрока.СуммаРозничная);
	СтруктураСтроки.Вставить("ГТД",                        ТекущаяСтрока.ГТД);
	СтруктураСтроки.Вставить("Ячейка",                     ТекущаяСтрока.Ячейка);
	СтруктураСтроки.Вставить("ВладелецХарактеристики",     ТекущаяСтрока.ВладелецХарактеристики);
	СтруктураСтроки.Вставить("ВладелецЕдиницыИзмерения",   ТекущаяСтрока.ВладелецЕдиницыИзмерения);
	СтруктураСтроки.Вставить("ОстатокНаСкладе",            ТекущаяСтрока.ОстатокНаСкладе);
	
	Возврат СтруктураСтроки;
	
КонецФункции // ПолучитьСтрокуПоРасходу()

// Заполняет строку из структурыРасхода
//
Процедура ЗаполнитьСтрокуРасхода(ТекущаяСтрока, СтруктураСтроки)
	
	ТекущаяСтрока.Номенклатура               = СтруктураСтроки.Номенклатура;
	ТекущаяСтрока.ЕдиницаИзмерения           = СтруктураСтроки.ЕдиницаИзмерения;
	ТекущаяСтрока.Количество                 = СтруктураСтроки.Количество;
	ТекущаяСтрока.Коэффициент                = СтруктураСтроки.Коэффициент;
	ТекущаяСтрока.ХарактеристикаНоменклатуры = СтруктураСтроки.ХарактеристикаНоменклатуры;
	ТекущаяСтрока.ЦенаРозничная              = СтруктураСтроки.ЦенаРозничная;
	ТекущаяСтрока.СуммаРозничная             = СтруктураСтроки.СуммаРозничная;
	ТекущаяСтрока.ГТД                        = СтруктураСтроки.ГТД;
	ТекущаяСтрока.Ячейка                     = СтруктураСтроки.Ячейка;
	ТекущаяСтрока.ВладелецХарактеристики     = СтруктураСтроки.ВладелецХарактеристики;
	ТекущаяСтрока.ВладелецЕдиницыИзмерения   = СтруктураСтроки.ВладелецЕдиницыИзмерения;
	ТекущаяСтрока.ОстатокНаСкладе            = СтруктураСтроки.ОстатокНаСкладе;
	
КонецПроцедуры //ЗаполнитьСтрокуРасхода()

// Заполняет строку из структуры прихода
//
Процедура ЗаполнитьСтрокуПрихода(ТекущаяСтрока, СтруктураСтроки)
	
	ТекущаяСтрока.НоменклатураПриход               = СтруктураСтроки.Номенклатура;
	ТекущаяСтрока.ЕдиницаИзмеренияПриход           = СтруктураСтроки.ЕдиницаИзмерения;
	ТекущаяСтрока.КоличествоПриход                 = СтруктураСтроки.Количество;
	ТекущаяСтрока.КоэффициентПриход                = СтруктураСтроки.Коэффициент;
	ТекущаяСтрока.ХарактеристикаНоменклатурыПриход = СтруктураСтроки.ХарактеристикаНоменклатуры;
	ТекущаяСтрока.Цена                             = СтруктураСтроки.Цена;
	ТекущаяСтрока.Сумма                            = СтруктураСтроки.Сумма;
	ТекущаяСтрока.ЦенаРозничнаяПриход              = СтруктураСтроки.ЦенаРозничная;
	ТекущаяСтрока.СуммаРозничнаяПриход             = СтруктураСтроки.СуммаРозничная;
	ТекущаяСтрока.Партия                           = СтруктураСтроки.Партия;
	ТекущаяСтрока.ГТДПриход                        = СтруктураСтроки.ГТД;
	ТекущаяСтрока.ЯчейкаПриход                     = СтруктураСтроки.Ячейка;
	ТекущаяСтрока.ВладелецХарактеристикиПриход     = СтруктураСтроки.ВладелецХарактеристики;
	ТекущаяСтрока.ВладелецЕдиницыИзмеренияПриход   = СтруктураСтроки.ВладелецЕдиницыИзмерения;
	ТекущаяСтрока.ОстатокНаСкладеПриход            = СтруктураСтроки.ОстатокНаСкладе;
	
КонецПроцедуры //ЗаполнитьСтрокуПрихода()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.НоменклатураПриход");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.КоличествоПриход");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмеренияПриход");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.КоэффициентПриход");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("НоменклатураПриход");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатурыПриход");
	УникальныеТовары.Добавить("ГТДПриход");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	Для Каждого стрТовары Из Объект.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(Объект.СкладКомпании) ИЛИ НЕ ЗначениеЗаполнено(стрТовары.НоменклатураПриход) Тогда
			стрТовары.ЯчейкаПриход = Справочники.ЯчейкиХранения.ПустаяСсылка();
		Иначе
			стрТовары.ЯчейкаПриход = Справочники.Номенклатура.ПолучитьЯчейкуХранения(стрТовары.НоменклатураПриход, Объект.СкладКомпании);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СкладКомпании) ИЛИ НЕ ЗначениеЗаполнено(стрТовары.Номенклатура) Тогда
			стрТовары.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
		Иначе
			стрТовары.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(стрТовары.Номенклатура, Объект.СкладКомпании);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип Цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура расход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	СтараяЦена = Строка.Цена;
	СтараяСумма = Строка.Сумма;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значение поля "Характеристика номенклатуры"
	Если ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
		Строка.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
	// Приведем номенклатуру к основной единице измерения
	Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		
		ОсновнаяЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(Строка.Номенклатура);
		
		Если НЕ ОсновнаяЕдиницаИзмерения = Строка.ЕдиницаИзмерения Тогда
			Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяЕдиницаИзмерения, "Коэффициент");
			КоэффициентПересчета = Окр(Строка.Коэффициент / ?(Коэффициент = 0, 1, Коэффициент), 2);
			КоэффициентПересчета = ?(КоэффициентПересчета = 0, 1, КоэффициентПересчета);
			Строка.ЕдиницаИзмерения = ОсновнаяЕдиницаИзмерения;
			Строка.Количество  =Строка.Количество * КоэффициентПересчета;
			СтараяЦена = Окр(Строка.Цена / КоэффициентПересчета, 2);
			Строка.Коэффициент = Коэффициент;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	// получим розничную цену
	Если ЗначениеЗаполнено(Объект.СкладКомпании) И Объект.СкладКомпании.Розничный Тогда
		Строка.ЦенаРозничная = ЦенообразованиеСервер.ПолучитьЦену(Объект.СкладКомпании.ТипЦенРозничнойТорговли, Строка.Номенклатура, ?(Объект.Ссылка.Пустая(), Объект.Дата, Новый МоментВремени(Объект.Дата, Объект.Ссылка)),,,, Строка.ХарактеристикаНоменклатуры, Строка.ЕдиницаИзмерения, Объект.СкладКомпании.ПодразделениеКомпании);
		ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Для товаров расход цену менять не надо
	Строка.Цена = СтараяЦена;
	Строка.Сумма = СтараяСумма;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры расход"
// в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	СтараяЦена = Строка.Цена;
	СтараяСумма = Строка.Сумма;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Для товаров расход цену менять не надо
	Строка.Цена = СтараяЦена;
	Строка.Сумма = СтараяСумма;
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения расход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество расход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекущаяСтрока = ПолучитьСтрокуПоРасходу(Строка);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуРасхода(Строка, ТекущаяСтрока);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная) расход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная) расход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПартияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ГТД расход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыГТДПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Понижение стоимости" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПонижениеСортностиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Строка.КоличествоПриход=Строка.Количество;
	ТоварыКоличествоПриходПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПонижениеСортностиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Номенклатура приход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриходПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Приведем номенклатуру к основной единице измерения
	Если ЗначениеЗаполнено(Строка.НоменклатураПриход) Тогда
		
		ОсновнаяЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(Строка.НоменклатураПриход);
		
		Если НЕ ОсновнаяЕдиницаИзмерения = Строка.ЕдиницаИзмеренияПриход Тогда
			Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяЕдиницаИзмерения, "Коэффициент");
			КоэффициентПересчета = Окр(Строка.КоэффициентПриход / ?(Коэффициент = 0, 1, Коэффициент), 2);
			КоэффициентПересчета = ?(КоэффициентПересчета = 0, 1, КоэффициентПересчета);
			Строка.ЕдиницаИзмеренияПриход = ОсновнаяЕдиницаИзмерения;
			Строка.КоличествоПриход  =Строка.КоличествоПриход * КоэффициентПересчета;
			Строка.КоэффициентПриход = Коэффициент;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
	
	// Очистим значение поля "Характеристика номенклатуры"
	Если ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатурыПриход) Тогда
		Строка.ХарактеристикаНоменклатурыПриход = Неопределено;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
	// получим цену
	Строка.Цена = ЦенообразованиеСервер.ПолучитьЦену(Объект.ТипЦен, Строка.НоменклатураПриход, ?(Объект.Ссылка.Пустая(), Объект.Дата, Новый МоментВремени(Объект.Дата, Объект.Ссылка)),,,, Строка.ХарактеристикаНоменклатурыПриход, Строка.ЕдиницаИзмеренияПриход, Объект.ПодразделениеКомпании);
	ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// получим розничную цену
	Если ЗначениеЗаполнено(Объект.СкладКомпании) И Объект.СкладКомпании.Розничный Тогда
		Строка.ЦенаРозничнаяПриход = ЦенообразованиеСервер.ПолучитьЦену(Объект.СкладКомпании.ТипЦенРозничнойТорговли, Строка.НоменклатураПриход, ?(Объект.Ссылка.Пустая(), Объект.Дата, Новый МоментВремени(Объект.Дата, Объект.Ссылка)),,,, Строка.ХарактеристикаНоменклатурыПриход, Строка.ЕдиницаИзмеренияПриход, Объект.СкладКомпании.ПодразделениеКомпании);
		ТоварыЦенаРозничнаяПриходПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Добавим иконку для прослеживаемого товара
	ИменаРеквизитов = УчетПрослеживаемыхТоваровСервер.ИменаРеквизитовДляЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
	ИменаРеквизитов.ИмяРеквизита = "НоменклатураПриход"; 
	ИменаРеквизитов.ИмяПризнака = "ПрослеживаемыйТоварПриход";
	ИменаРеквизитов.ИмяКартинки = "КартинкаПрослеживаемогоТовараПриход";
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект, Строка, ИменаРеквизитов);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры приход"
// в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриходПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
	// получим цену
	Строка.Цена = ЦенообразованиеСервер.ПолучитьЦену(Объект.ТипЦен, Строка.НоменклатураПриход, ?(Объект.Ссылка.Пустая(), Объект.Дата, Новый МоментВремени(Объект.Дата, Объект.Ссылка)),,,, Строка.ХарактеристикаНоменклатурыПриход, Строка.ЕдиницаИзмеренияПриход, Объект.ПодразделениеКомпании);
	ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// получим розничную цену
	Если ЗначениеЗаполнено(Объект.СкладКомпании) И Объект.СкладКомпании.Розничный Тогда
		Строка.ЦенаРозничнаяПриход = ЦенообразованиеСервер.ПолучитьЦену(Объект.СкладКомпании.ТипЦенРозничнойТорговли, Строка.НоменклатураПриход, ?(Объект.Ссылка.Пустая(), Объект.Дата, Новый МоментВремени(Объект.Дата, Объект.Ссылка)),,,, Строка.ХарактеристикаНоменклатурыПриход, Строка.ЕдиницаИзмеренияПриход, Объект.СкладКомпании.ПодразделениеКомпании);
		ТоварыЦенаРозничнаяПриходПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриходПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения приход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриходПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриходПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество приход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриходПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
КонецПроцедуры // ТоварыКоличествоПриходПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена приход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма приход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная) приход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриходПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриходПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная) приход" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриходПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекущаяСтрока = ПолучитьСтрокуПоПриходу(Строка);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
	ЗаполнитьСтрокуПрихода(Строка, ТекущаяСтрока);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриходПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПересортицаТоваров");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	//	
	ВыборНоменклатуры 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборНоменклатуры.ВыборСсылки 		= "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборНоменклатуры.Обязательный 		= Истина;
	ВыборНоменклатуры.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по группе'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборНоменклатуры);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании",		ВыборСклада);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",           Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность",         Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по складским остаткам 
//
Функция ТоварыЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Результат = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	
	Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
		// было заполнение, заполним таблицу
		Для Каждого СтрокаТЧ Из Результат Цикл 
			
			КоличествоБезРезерва = СтрокаТЧ.Количество - СтрокаТЧ.Резерв;
			
			Если КоличествоБезРезерва <= 0 Тогда
				Продолжить;	
			КонецЕсли;

			НоваяСтрока = Объект.Товары.Добавить();
			
			НоваяСтрока.Количество                       = КоличествоБезРезерва;
			ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			НоваяСтрока.Номенклатура                     = СтрокаТЧ.Номенклатура;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			НоваяСтрока.ХарактеристикаНоменклатуры       = СтрокаТЧ.ХарактеристикаНоменклатуры;
			ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстатками()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПересортицаТоваров",
		"ПФ_MXL_ПересортицаТоваров",
		НСтр("ru = 'Пересортица товаров'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПересортицаТоваров",
		"ПФ_MXL_Переоценка",
		НСтр("ru = 'Переоценка'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПересортицаТоваров",
		"ПФ_MXL_ИНВ19",
		НСтр("ru = 'ИНВ19 (Сличительная ведомость)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПересортицаТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПересортицаТоваров",
															НСтр("ru = 'Пересортица товаров'"),
															ПечатьПересортицаТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Переоценка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Переоценка",
															"Переоценка",
															ПечатьПереоценка(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИНВ19") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ИНВ19",
															НСтр("ru = 'ИНВ19 (Сличительная ведомость)'"),
															ПечатьИНВ19(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;													
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Переоценка"
//
Функция ПечатьПереоценка(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересортицаТоваров_Переоценка";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПересортицаТоваров.ПФ_MXL_Переоценка");
		
		// Для начала настроим макет.
		ОбластьТовар = Макет.Область("Товар");
		ЕстьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах",Документ);
		
		// Если код не выводим.
		Если НЕ ЕстьКод Тогда
			ОбластьКод = Макет.Область("Код");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКод.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьКод, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ЭтоРозничный = Ложь;
		ТипОперации = "Опт";
		Если (ЗначениеЗаполнено(Документ.СкладКомпании) И Документ.СкладКомпании.Розничный) Тогда
			ЭтоРозничный = Истина;
			ТипОперации = "Розница";
		КонецЕсли;
		// Теперь запишем параметры шапки.
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы" + ТипОперации);
		
		ИмяКода = "";
		Если ЕстьКод Тогда
			КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Синоним;
			ОбластьШапкаТаблицы.Параметры.ИмяКолонкиКод = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
		КонецЕсли;
		
		// Форматы вывода
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка" + ТипОперации);
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице" + ТипОперации);
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал" + ТипОперации);
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, "Переоценка");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.СкладКомпании);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаПереоценки", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		СуммаВсего	= 0; 
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			СтруктураСтроки = Новый Структура;
			ТоварНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Номенклатура);
			// Характеристику выводим в строке с наименованием.
			ТоварНаименование = ТоварНаименование + ", " 
				+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ХарактеристикаНоменклатуры);
			// Заполняем структуру строки
			СтруктураСтроки.Вставить("НомерСтроки", СтрокаТЧ.НомерСтроки);
			СтруктураСтроки.Вставить("ТоварНаименование", ТоварНаименование);
			// Для расшифровки
			СтруктураСтроки.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			
			// Получаем код номенклатуры в зависимости от настройки прав.
			Если ЕстьКод Тогда
				КодНоменклатуры = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТЧ.Номенклатура);
				СтруктураСтроки.Вставить("Код", КодНоменклатуры);
			КонецЕсли;
			
			// Если количество не равно базовому, корректируем вывод.
			СтруктураСтроки.Вставить("Количество", Формат(СтрокаТЧ.Количество, ФорматВыводаКоличества));
			СтруктураСтроки.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
			Если ЭтоРозничный Тогда
				СуммаПереоценки = СтрокаТЧ.СуммаРозничнаяПриход - СтрокаТЧ.СуммаРозничная;
				СуммаПереоценки = ?(СуммаПереоценки < 0, - СуммаПереоценки, СуммаПереоценки);
				СтруктураСтроки.Вставить("СуммаПереоценки", Формат(СуммаПереоценки, ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("ЦенаСтарая", Формат(СтрокаТЧ.ЦенаРозничная, ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("Цена", Формат(СтрокаТЧ.ЦенаРозничнаяПриход, ФорматВыводаСуммы));
				ЧислоСто = 100;
				ПроцентНаценки = ?(СтрокаТЧ.ЦенаРозничная = 0, 0,
					ЧислоСто * (СтрокаТЧ.ЦенаРозничнаяПриход - СтрокаТЧ.ЦенаРозничная) / СтрокаТЧ.ЦенаРозничная);
				СтруктураСтроки.Вставить("ПроцентНаценки", Формат(ПроцентНаценки, "ЧЦ=6; ЧДЦ=2"));
			Иначе
				СуммаПереоценки = СтрокаТЧ.Сумма;
				СтруктураСтроки.Вставить("СуммаПереоценки", Формат(СуммаПереоценки, ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("Цена", Формат(СтрокаТЧ.Цена, ФорматВыводаСуммы));
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по страниц.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаПереоценки", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			СтруктураИтоговПоСтранице.Вставить("СуммаПереоценки", СтруктураИтоговПоСтранице.СуммаПереоценки + СуммаПереоценки);
			СуммаВсего = СуммаВсего + СуммаПереоценки;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = ИСТИНА;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьПереоценка()

// Формирует печатную форму "ПересортицаТоваров"
//
Функция ПечатьПересортицаТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересортицаТоваров_ПересортицаТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПересортицаТоваров.ПФ_MXL_ПересортицаТоваров");
		
		ЕстьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах", Документ);
		// Если код не выводим
		Если НЕ ЕстьКод Тогда
			ОбластьТовар = Макет.Область("ТоварРасход");
			ОбластьКод = Макет.Область("КодРасход");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКод.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьКод, ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьТовар = Макет.Область("ТоварПриход");
			ОбластьКод = Макет.Область("КодПриход");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКод.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьКод, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ЭтоРозничный = (ЗначениеЗаполнено(Документ.СкладКомпании) И Документ.СкладКомпании.Розничный);
		ПоказыватьСебестоимость = Истина;
		Если НЕ ЭтоРозничный И НЕ ПраваИНастройкиПользователя.Значение("ПоказыватьСебестоимостьПроведения", Документ) Тогда
			ОбластьТовар = Макет.Область("ТоварРасход");
			ОбластьСуммаСписания = Макет.Область("СуммаСписания");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьСуммаСписания.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСуммаСписания, ТипСмещенияТабличногоДокумента.ПоВертикали);
			ПоказыватьСебестоимость = Ложь;
		КонецЕсли;
		
		Если ПоказыватьСебестоимость И НЕ ЭтоРозничный Тогда
			ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			
			Если Документ.ВалютаДокумента = ВалютаРегл Тогда
				ИмяРесурсаСуммы       = "Сумма";
				ИмяРесурсаСуммыБезНДС = "СуммаБезНДС";
				ТребуетсяПересчет     = Ложь;
			ИначеЕсли Документ.ВалютаДокумента = ВалютаУпр Тогда
				ИмяРесурсаСуммы       = "СуммаУпр";
				ИмяРесурсаСуммыБезНДС = "СуммаБезНДСУпр";
				ТребуетсяПересчет     = Ложь;
			Иначе
				ИмяРесурсаСуммы       = "СуммаУпр";
				ИмяРесурсаСуммыБезНДС = "СуммаБезНДСУпр";
				ТребуетсяПересчет     = Истина;
			КонецЕсли;
			
			Если ТребуетсяПересчет Тогда
				
				Если ЕстьРеквизит(Документ, "КурсВалютыУпр") И ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
					КурсВалютыУпр = Документ.КурсВалютыУпр;
				Иначе
					СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Документ.Дата);
					КурсВалютыУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
				КонецЕсли;
				
				КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУпр, КурсВалютыУпр,
					Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			
			ПараметрыПолучения= ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
			ПараметрыПолучения.ИмяРегистра = "ПартииТоваровКомпании";
			ПараметрыПолучения.ИспользуемыеРесурсы = Новый Структура(ИмяРесурсаСуммы + "," + ИмяРесурсаСуммыБезНДС);
			ПараметрыПолучения.ВидДвиженияПриход = ВидДвиженияНакопления.Расход;
			ПараметрыПолучения.ДобавлятьНомерСтроки = Истина;
			
			КэшТаблица = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Документ, ПараметрыПолучения);
			
		КонецЕсли;
		
		// Для начала настроим макет.
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ИмяКода = "";
		Если ЕстьКод Тогда
			КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Синоним;
			ОбластьШапкаТаблицы.Параметры.ИмяКолонкиКод = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
		КонецЕсли;
		
		ОбластьШапкаТаблицы.Параметры.ИмяКолонкиЦена = ?(ЭтоРозничный, НСтр("ru = 'Цена розн.'"), "Цена");
		
		// Форматы вывода
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Пересортица товаров'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.СкладКомпании);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента",      Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаБезНДСРасход",    0);
		СтруктураИтоговПоСтранице.Вставить("СуммаРозничнаяРасход", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаРозничнаяПриход", 0);
		
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки.
		ВыборкаТабличнойЧасти = Документ.Товары;
		СуммаВсегоБезНДС    = 0;
		СуммаВсегоРасход	= 0; 
		СуммаВсегоПриход 	= 0;
		СуммаСписания		= 0;
		СуммаОприходования 	= 0;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			// Заполняем данные строки
			СтруктураСтроки = Новый Структура;
			ТоварНаименованиеРасход =  УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Номенклатура);
			ТоварНаименованиеПриход =  УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.НоменклатураПриход);
			// Характеристику выводим в строке с наименованием.
			ТоварНаименованиеРасход = ТоварНаименованиеРасход + ", "
				+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ХарактеристикаНоменклатуры);
			ТоварНаименованиеПриход = ТоварНаименованиеПриход + ", "
				+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ХарактеристикаНоменклатурыПриход);
			// Заполняем структуру строки.
			СтруктураСтроки.Вставить("НомерСтроки", СтрокаТЧ.НомерСтроки);
			СтруктураСтроки.Вставить("ТоварНаименованиеРасход", ТоварНаименованиеРасход);
			СтруктураСтроки.Вставить("ТоварНаименованиеПриход", ТоварНаименованиеПриход);
			// Для расшифровки
			СтруктураСтроки.Вставить("НоменклатураРасход", СтрокаТЧ.Номенклатура);
			СтруктураСтроки.Вставить("НоменклатураПриход", СтрокаТЧ.НоменклатураПриход);
			
			// Получаем код номенклатуры в зависимости от настройки прав.
			Если ЕстьКод Тогда
				КодНоменклатуры = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТЧ.Номенклатура);
				СтруктураСтроки.Вставить("КодРасход", КодНоменклатуры);
				КодНоменклатуры = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТЧ.НоменклатураПриход);
				СтруктураСтроки.Вставить("КодПриход", КодНоменклатуры);
			КонецЕсли;
			
			// Если количество не равно базовому, корректируем вывод.
			СтруктураСтроки.Вставить("КоличествоРасход", Формат(СтрокаТЧ.Количество,       ФорматВыводаКоличества));
			СтруктураСтроки.Вставить("КоличествоПриход", Формат(СтрокаТЧ.КоличествоПриход, ФорматВыводаКоличества));
			СтруктураСтроки.Вставить("ЕдиницаИзмеренияРасход", СтрокаТЧ.ЕдиницаИзмерения);
			СтруктураСтроки.Вставить("ЕдиницаИзмеренияПриход", СтрокаТЧ.ЕдиницаИзмеренияПриход);
			
			Если ЭтоРозничный Тогда
				СуммаСписания = СтрокаТЧ.СуммаРозничная;
				СуммаБезНДС = СтрокаТЧ.СуммаРозничная;
				СуммаОприходования = СтрокаТЧ.СуммаРозничнаяПриход;
				СтруктураСтроки.Вставить("ЦенаРозничнаяРасход",  Формат(СтрокаТЧ.ЦенаРозничная,       ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("ЦенаРозничнаяПриход",  Формат(СтрокаТЧ.ЦенаРозничнаяПриход, ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаБезНДСРасход",    Формат(СуммаБезНДС,                  ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаРозничнаяРасход", Формат(СуммаСписания,                ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаРозничнаяПриход", Формат(СуммаОприходования,           ФорматВыводаСуммы));
			Иначе
				Если ПоказыватьСебестоимость Тогда
					Отбор = Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки);
				
					Если Отбор.Количество() > 0 Тогда
						МассивСумм = КэшТаблица.НайтиСтроки(Отбор);
						Если МассивСумм.Количество() > 0 Тогда
							СуммаСписания = 0;
							СуммаБезНДС   = 0;
							Для Каждого СтрМассивСумм Из МассивСумм Цикл
								СуммаСписания = СуммаСписания + СтрМассивСумм[ИмяРесурсаСуммы];
								СуммаБезНДС  = СуммаБезНДС + СтрМассивСумм[ИмяРесурсаСуммыБезНДС];
							КонецЦикла;
						КонецЕсли;
					Иначе
						СуммаСписания = КэшТаблица.Итог(ИмяРесурсаСуммы);
						СуммаБезНДС   = КэшТаблица.Итог(ИмяРесурсаСуммыБезНДС);
					КонецЕсли;
					
					Если ТребуетсяПересчет Тогда
						СуммаСписания = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСписания, ВалютаУпр, КурсВалютыУпр,
							Документ.ВалютаДокумента, Документ.КурсДокумента);
						СуммаБезНДС   = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаБезНДС, ВалютаУпр, КурсВалютыУпр,
							Документ.ВалютаДокумента, Документ.КурсДокумента);
					КонецЕсли;
					
					ЦенаСписания = ?(СтрокаТЧ.Количество = 0, 0, СуммаСписания / СтрокаТЧ.Количество);
				Иначе
					СуммаСписания = 0;
					ЦенаСписания = 0;
				КонецЕсли;
				СуммаОприходования = СтрокаТЧ.Сумма;
				СтруктураСтроки.Вставить("ЦенаРозничнаяРасход",  Формат(ЦенаСписания,       ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("ЦенаРозничнаяПриход",  Формат(СтрокаТЧ.Цена,      ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаБезНДСРасход",    Формат(СуммаБезНДС,        ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаРозничнаяРасход", Формат(СуммаСписания,      ФорматВыводаСуммы));
				СтруктураСтроки.Вставить("СуммаРозничнаяПриход", Формат(СуммаОприходования, ФорматВыводаСуммы));
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента",      Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаБезНДСРасход",    0);
				СтруктураИтоговПоСтранице.Вставить("СуммаРозничнаяРасход", 0);
				СтруктураИтоговПоСтранице.Вставить("СуммаРозничнаяПриход", 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтруктураСтроки, СтруктураИтоговПоСтранице);
			
			СуммаВсегоБезНДС = СуммаВсегоБезНДС + СуммаБезНДС;
			СуммаВсегоРасход = СуммаВсегоРасход + СуммаСписания;
			СуммаВсегоПриход = СуммаВсегоПриход + СуммаОприходования;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		Если Не ЭтоРозничный И Не ПоказыватьСебестоимость Тогда
			ОбластьПодвал.Параметры.ВсегоНаименованийРасход = НСтр("ru = 'Всего наименований (расход):'") + Символы.НПП
				+ ВыборкаТабличнойЧасти.Количество();
		Иначе
			ОбластьПодвал.Параметры.СуммаВсегоРасход = Формат(СуммаВсегоРасход, ФорматВыводаСуммы);
			ОбластьПодвал.Параметры.СуммаВсегоБезНДС = Формат(СуммаВсегоБезНДС, ФорматВыводаСуммы);
			ОбластьПодвал.Параметры.ВсегоНаименованийРасход =  НСтр("ru = 'Всего наименований (расход):'") + Символы.НПП
				+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсегоРасход, Документ.ВалютаДокумента);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.СуммаВсегоПриход = Формат(СуммаВсегоПриход, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ВсегоНаименованийПриход =  НСтр("ru = 'Всего наименований (приход):'") + Символы.НПП 
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП 
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсегоПриход, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьПересортицаТоваров()

// Формирует печатную форму "ИНВ19"
//
Функция ПечатьИНВ19 (МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересортицаТоваров_ИНВ19";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ВалютаУправленческогоУчетаКомпании        = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегламентированногоУчетаОрганизаций = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ФорматВыводаСуммы = "ЧДЦ=2";
		ФорматВыводаКоличества = "";

		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьИНВ.ПФ_MXL_ИНВ19");
		
		ОбластьЗаголовок        = Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьИтогоТаблицы     = Макет.ПолучитьОбласть("ИтогоТаблицы");
		ОбластьИтогиПоСтранице  = Макет.ПолучитьОбласть("ИтогоТаблицыИтогиПоСтранице");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = Новый Структура("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		
		// Заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		СтруктураПредставления=Новый Структура();
		СтруктураПредставления.Вставить("Наименование",     "");
		СтруктураПредставления.Вставить("ИНН",              "ИНН ");
		СтруктураПредставления.Вставить("АдресЮридический", "");
		СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
		СтруктураПредставления.Вставить("БанковскийСчет",   "р/с ");
		СтруктураПредставления.Вставить("Банк",             НСтр("ru = 'в банке'") + " ");
		СтруктураПредставления.Вставить("БИК",              "БИК ");
		СтруктураПредставления.Вставить("КоррСчет",         "к/с ");
	
		// Правим, что автоматом не заполнилось, или заполнилось неправильно.
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьЗаголовок.Параметры.Организация, СтруктураПредставления, ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ОрганизацияПоОКПО     = ОбластьЗаголовок.Параметры.Организация.КодПоОКПО;
		ОбластьЗаголовок.Параметры.ВидДеятельностиПоОКДП = ОбластьЗаголовок.Параметры.Организация.КодПоОКДП;
		
		
		ОбластьЗаголовок.Параметры.ДатаНачалаИнвентаризации    = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ДатаОкончанияИнвентаризации = ДатаДокумента;
		
		// Свойства
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаНачала);
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаКонца);
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МОЛ);
		
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ, Истина, Истина, ИскомыеСвойства);
		
		ОбластьЗаголовок.Параметры.МОЛ = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("МОЛ",
			ЗначенияСвойствОбъекта, Документ.СкладКомпании.МОЛ);
		ОбластьЗаголовок.Параметры.МОЛДолжность	 	= ОбластьЗаголовок.Параметры.МОЛ.Должность;
		ОбластьЗаголовок.Параметры.МОЛПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ОбластьЗаголовок.Параметры.МОЛ);
		ОбластьЗаголовок.Параметры.Номер			= УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьЗаголовок.Параметры.Основание		= "приказ, постановление, распоряжение";
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокНаСтранице = 27;
		СтрокШапки      = 5;
		СтрокПодвала    = 5;
		НомерСтраницы   = 2;
		Ном             = 1;
		
		ИтогоРезультатИзлишекКолво  	   = 0;
		ИтогоРезультатИзлишекСумма  	   = 0;
		ИтогоРезультатНедостачаКолво	   = 0;
		ИтогоРезультатНедостачаСумма	   = 0;
		ИтогоПересортНедостачиКолво  	   = 0;
		ИтогоПересортНедостачиСумма 	   = 0;
		ИтогоПересортИзлишкиКолво  		   = 0;
		ИтогоПересортИзлишкиСумма  		   = 0;
		ИтогоПриходИзлишковКолво           = 0;
		ИтогоПриходИзлишковСумма           = 0;
		ИтогоСписаниеНедостачКолонка1Колво = 0;
		ИтогоСписаниеНедостачКолонка1Сумма = 0;
		
		// Выводим заголовок таблицы
		ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
		ОбластьЗаголовокТаблицы.Параметры.Валюта = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		ВыборкаСтрокТовары = Документ.Товары;
		
		// Определим, что показывать в колонке кода - код или артикул.
		ИмяКодаСправочника = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
		
		// Выводим многострочную часть документа
		// структура итогов по странице.
		СтруктураИтогов = Новый Структура();
		СтруктураИтогов.Вставить("ИтогоРезультатИзлишекКолво",         0);
		СтруктураИтогов.Вставить("ИтогоРезультатИзлишекСумма",         0);
		СтруктураИтогов.Вставить("ИтогоРезультатНедостачаКолво",       0);
		СтруктураИтогов.Вставить("ИтогоРезультатНедостачаСумма",       0);
		СтруктураИтогов.Вставить("ИтогоПересортИзлишкиКолво",          0);
		СтруктураИтогов.Вставить("ИтогоПересортИзлишкиСумма",          0);
		СтруктураИтогов.Вставить("ИтогоПересортНедостачиКолво",        0);
		СтруктураИтогов.Вставить("ИтогоПересортНедостачиСумма",        0);
		СтруктураИтогов.Вставить("ИтогоПриходИзлишковКолво",           0);
		СтруктураИтогов.Вставить("ИтогоПриходИзлишковСумма",           0);
		СтруктураИтогов.Вставить("ИтогоСписаниеНедостачКолонка1Колво", 0);
		СтруктураИтогов.Вставить("ИтогоСписаниеНедостачКолонка1Сумма", 0);
		
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьИтогоТаблицы);
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		
		Для Каждого СтрокаТовар Из ВыборкаСтрокТовары Цикл
		
			НедостачаКолво  = 0;
			НедостачаСумма  = 0;
			ИзлишекКолво 	= 0;
			ИзлишекСумма	= 0;
			ПересортКолво   = 0;
			ПересортСумма   = 0;
			
			ТребуетсяПересчетИзУпр = (Документ.ВалютаДокумента = ВалютаУправленческогоУчетаКомпании);
			ТребуетсяПересчетИзРегл = (Документ.ВалютаДокумента = ВалютаРегламентированногоУчетаОрганизаций);
			
			НедостачаКолво = СтрокаТовар.Количество;
			ИзлишекКолво   = СтрокаТовар.КоличествоПриход;
			
			Если Документ.СкладКомпании.Розничный Тогда
				НедостачаСумма = СтрокаТовар.СуммаРозничная;
				ИзлишекСумма   = СтрокаТовар.СуммаРозничнаяПриход;
			Иначе
				ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияСуммыСписания();
				ПараметрыПолучения.ИмяРегистра                = "ПартииТоваровКомпании";
				ПараметрыПолучения.Номенклатура               = СтрокаТовар.Номенклатура;
				ПараметрыПолучения.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
				ПараметрыПолучения.НомерСтроки                = СтрокаТовар.НомерСтроки;
				НедостачаСумма  = ЗащищенныеФункцииСервер.ПолучитьСуммуСписания(Документ, ПараметрыПолучения);
				ИзлишекСумма	= СтрокаТовар.Сумма;
				Если ТребуетсяПересчетИзРегл Тогда
					НедостачаСумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НедостачаСумма,
						ВалютаРегламентированногоУчетаОрганизаций, Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
					ИзлишекСумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ИзлишекСумма,
						ВалютаРегламентированногоУчетаОрганизаций, Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
				ИначеЕсли ТребуетсяПересчетИзУпр Тогда
					НедостачаСумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НедостачаСумма,
						ВалютаУправленческогоУчетаКомпании, Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
					ИзлишекСумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ИзлишекСумма,
						ВалютаУправленческогоУчетаКомпании, Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
				КонецЕсли;
			КонецЕсли;
			
			Если НедостачаКолво = 0 И ИзлишекКолво = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПересортКолво = Мин(ИзлишекКолво, НедостачаКолво);
			ПересортСумма = Мин(ИзлишекСумма, НедостачаСумма); 
			
			// Формируем строку недостачи.
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовар);
			Характеристика = Строка(СтрокаТовар.ХарактеристикаНоменклатуры);
			ОбластьСтрокаТаблицы.Параметры.ТоварНаименование = 
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТовар.Номенклатура)
				+ ?(Характеристика = "", "", ", " + Характеристика);
			ОбластьСтрокаТаблицы.Параметры.ТоварКод = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(
				СтрокаТовар.Номенклатура);
			ОбластьСтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТовар.Номенклатура.БазоваяЕдиницаИзмерения;
			ОбластьСтрокаТаблицы.Параметры.ЕдиницаИзмеренияКодПоОКЕИ    = СтрокаТовар.Номенклатура.БазоваяЕдиницаИзмерения.Код;
			
			ОбластьСтрокаТаблицы.Параметры.РезультатИзлишекКолво         = 0;
			ОбластьСтрокаТаблицы.Параметры.РезультатИзлишекСумма  		 = 0;
			ОбластьСтрокаТаблицы.Параметры.РезультатНедостачаКолво		 = Формат(НедостачаКолво, ФорматВыводаКоличества);
			ОбластьСтрокаТаблицы.Параметры.РезультатНедостачаСумма		 = Формат(НедостачаСумма, ФорматВыводаСуммы);
			ОбластьСтрокаТаблицы.Параметры.ПересортИзлишкиКолво   		 = 0;
			ОбластьСтрокаТаблицы.Параметры.ПересортИзлишкиСумма   		 = 0;
			ОбластьСтрокаТаблицы.Параметры.ПересортНедостачиКолво 		 = Формат(ПересортКолво, ФорматВыводаКоличества);
			ОбластьСтрокаТаблицы.Параметры.ПересортНедостачиСумма 		 = Формат(ПересортСумма, ФорматВыводаСуммы);
			ОбластьСтрокаТаблицы.Параметры.ПриходИзлишковКолво           = 0;
			ОбластьСтрокаТаблицы.Параметры.ПриходИзлишковСумма   		 = 0;
			ОбластьСтрокаТаблицы.Параметры.СписаниеНедостачКолонка1Колво = Формат(
				(НедостачаКолво - ПересортКолво), ФорматВыводаКоличества);
			ОбластьСтрокаТаблицы.Параметры.СписаниеНедостачКолонка1Сумма = Формат(
				(НедостачаСумма - ПересортСумма), ФорматВыводаСуммы);
			
			ИтогоРезультатИзлишекКолво   	   = ИтогоРезультатИзлишекКолво   + 0;
			ИтогоРезультатИзлишекСумма   	   = ИтогоРезультатИзлишекСумма   + 0;
			ИтогоРезультатНедостачаКолво 	   = ИтогоРезультатНедостачаКолво + НедостачаКолво;
			ИтогоРезультатНедостачаСумма 	   = ИтогоРезультатНедостачаСумма + НедостачаСумма;
			ИтогоПересортИзлишкиКолво		   = ИтогоПересортИзлишкиКолво   + 0;
			ИтогоПересортИзлишкиСумма  		   = ИтогоПересортИзлишкиСумма   + 0;
			ИтогоПересортНедостачиКолво 	   = ИтогоПересортНедостачиКолво + ПересортКолво;
			ИтогоПересортНедостачиСумма 	   = ИтогоПересортНедостачиСумма + ПересортСумма;
			ИтогоПриходИзлишковКолво           = ИтогоПриходИзлишковКолво + 0;
			ИтогоПриходИзлишковСумма           = ИтогоПриходИзлишковСумма + 0;
			ИтогоСписаниеНедостачКолонка1Колво = ИтогоСписаниеНедостачКолонка1Колво + (НедостачаКолво - ПересортКолво);
			ИтогоСписаниеНедостачКолонка1Сумма = ИтогоСписаниеНедостачКолонка1Сумма + (НедостачаСумма - ПересортСумма);
			
			ОбластьСтрокаТаблицы.Параметры.ПересортИзлишкиНомер   = 0;
			ОбластьСтрокаТаблицы.Параметры.ПересортНедостачиНомер = Ном + 1;
			ОбластьСтрокаТаблицы.Параметры.Номер 				  = Ном;
			Ном = Ном + 1;
			
			СтраницаДоВывода = НомерСтраницы;
			Области = Новый Структура;
			Области.Вставить("Шапка",  ОбластьЗаголовокТаблицы);
			Области.Вставить("Подвал", ОбластьИтогиПоСтранице);
			НомерСтраницы = Обработки.ПечатьИНВ.ВывестиГоризонтальнуюОбластьИНВ19(ТабличныйДокумент, ОбластьСтрокаТаблицы,
				Области, Документ, НомерСтраницы, СтруктураИтогов, мсвДопОбластиПодвала);
			
			Если СтраницаДоВывода <> НомерСтраницы Тогда
				СтруктураИтогов = Новый Структура();
				СтруктураИтогов.Вставить("ИтогоРезультатИзлишекКолво",         0);
				СтруктураИтогов.Вставить("ИтогоРезультатИзлишекСумма",         0);
				СтруктураИтогов.Вставить("ИтогоРезультатНедостачаКолво",       0);
				СтруктураИтогов.Вставить("ИтогоРезультатНедостачаСумма",       0);
				СтруктураИтогов.Вставить("ИтогоПересортИзлишкиКолво",          0);
				СтруктураИтогов.Вставить("ИтогоПересортИзлишкиСумма",          0);
				СтруктураИтогов.Вставить("ИтогоПересортНедостачиКолво",        0);
				СтруктураИтогов.Вставить("ИтогоПересортНедостачиСумма",        0);
				СтруктураИтогов.Вставить("ИтогоПриходИзлишковКолво",           0);
				СтруктураИтогов.Вставить("ИтогоПриходИзлишковСумма",           0);
				СтруктураИтогов.Вставить("ИтогоСписаниеНедостачКолонка1Колво", 0);
				СтруктураИтогов.Вставить("ИтогоСписаниеНедостачКолонка1Сумма", 0);
			КонецЕсли;
			
			СтруктураИтогов.ИтогоРезультатИзлишекКолво   		  = СтруктураИтогов.ИтогоРезультатИзлишекКолво + 0;
			СтруктураИтогов.ИтогоРезультатИзлишекСумма  		  = СтруктураИтогов.ИтогоРезультатИзлишекСумма + 0;
			СтруктураИтогов.ИтогоРезультатНедостачаКолво 		  = СтруктураИтогов.ИтогоРезультатНедостачаКолво + НедостачаКолво;
			СтруктураИтогов.ИтогоРезультатНедостачаСумма 		  = СтруктураИтогов.ИтогоРезультатНедостачаСумма + НедостачаСумма;
			СтруктураИтогов.ИтогоПересортИзлишкиКолво  			  = СтруктураИтогов.ИтогоПересортИзлишкиКолво + 0;
			СтруктураИтогов.ИтогоПересортИзлишкиСумма 			  = СтруктураИтогов.ИтогоПересортИзлишкиСумма + 0;
			СтруктураИтогов.ИтогоПересортНедостачиКолво   		  = СтруктураИтогов.ИтогоПересортНедостачиКолво + ПересортКолво;
			СтруктураИтогов.ИтогоПересортНедостачиСумма   	   	  = СтруктураИтогов.ИтогоПересортНедостачиСумма + ПересортСумма;
			СтруктураИтогов.ИтогоПриходИзлишковКолво           	  = СтруктураИтогов.ИтогоПриходИзлишковКолво + 0;
			СтруктураИтогов.ИтогоПриходИзлишковСумма           	  = СтруктураИтогов.ИтогоПриходИзлишковСумма + 0;
			СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Колво 	  = СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Колво
				+ (НедостачаКолво - ПересортКолво);
			СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Сумма    = СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Сумма
				+ (НедостачаСумма - ПересортСумма);
			
			// Формируем строку излишка.
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовар);
			ОбластьСтрокаТаблицы.Параметры.ТоварНаименование = СтрокаТовар.НоменклатураПриход;
			Характеристика = Строка(СтрокаТовар.ХарактеристикаНоменклатурыПриход);
			ОбластьСтрокаТаблицы.Параметры.ТоварНаименование =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТовар.НоменклатураПриход)
				+ ?(Характеристика = "", "", ", " + Характеристика);
			ОбластьСтрокаТаблицы.Параметры.ТоварКод = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(
				СтрокаТовар.НоменклатураПриход);
			ОбластьСтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование =
				СтрокаТовар.НоменклатураПриход.БазоваяЕдиницаИзмерения;
			ОбластьСтрокаТаблицы.Параметры.ЕдиницаИзмеренияКодПоОКЕИ =
				СтрокаТовар.НоменклатураПриход.БазоваяЕдиницаИзмерения.Код;
			
			ОбластьСтрокаТаблицы.Параметры.РезультатИзлишекКолво 	 = Формат(ИзлишекКолво, ФорматВыводаКоличества);
			ОбластьСтрокаТаблицы.Параметры.РезультатИзлишекСумма 	 = Формат(ИзлишекСумма, ФорматВыводаСуммы);
			ОбластьСтрокаТаблицы.Параметры.РезультатНедостачаКолво 	 = 0;
			ОбластьСтрокаТаблицы.Параметры.РезультатНедостачаСумма 	 = 0;
			ОбластьСтрокаТаблицы.Параметры.ПересортИзлишкиКолво   	 = Формат(ПересортКолво, ФорматВыводаКоличества);
			ОбластьСтрокаТаблицы.Параметры.ПересортИзлишкиСумма   	 = Формат(ПересортСумма, ФорматВыводаСуммы);
			ОбластьСтрокаТаблицы.Параметры.ПересортНедостачиКолво 	 = 0;
			ОбластьСтрокаТаблицы.Параметры.ПересортНедостачиСумма 	 = 0;
			ОбластьСтрокаТаблицы.Параметры.ПриходИзлишковКолво		 = Формат(ИзлишекКолво - ПересортКолво, ФорматВыводаКоличества);
			ОбластьСтрокаТаблицы.Параметры.ПриходИзлишковСумма 		 = Формат(ИзлишекСумма - ПересортСумма, ФорматВыводаСуммы);
			ОбластьСтрокаТаблицы.Параметры.СписаниеНедостачКолонка1Колво = 0;
			ОбластьСтрокаТаблицы.Параметры.СписаниеНедостачКолонка1Сумма = 0;
			
			ИтогоРезультатИзлишекКолво   	   = ИтогоРезультатИзлишекКолво  + ИзлишекКолво;
			ИтогоРезультатИзлишекСумма  	   = ИтогоРезультатИзлишекСумма  + ИзлишекСумма;
			ИтогоРезультатНедостачаКолво 	   = ИтогоРезультатНедостачаКолво + 0;
			ИтогоРезультатНедостачаСумма	   = ИтогоРезультатНедостачаСумма + 0;
			ИтогоПересортИзлишкиКолво  		   = ИтогоПересортИзлишкиКолво   + ПересортКолво;
			ИтогоПересортИзлишкиСумма  		   = ИтогоПересортИзлишкиСумма   + ПересортСумма;
			ИтогоПересортНедостачиКолво 	   = ИтогоПересортНедостачиКолво + 0;
			ИтогоПересортНедостачиСумма 	   = ИтогоПересортНедостачиСумма + 0;
			ИтогоПриходИзлишковКолво           = ИтогоПриходИзлишковКолво + (ИзлишекКолво - ПересортКолво);
			ИтогоПриходИзлишковСумма           = ИтогоПриходИзлишковСумма + (ИзлишекСумма - ПересортСумма);
			ИтогоСписаниеНедостачКолонка1Колво = ИтогоСписаниеНедостачКолонка1Колво + 0;
			ИтогоСписаниеНедостачКолонка1Сумма = ИтогоСписаниеНедостачКолонка1Сумма + 0;
			
			ОбластьСтрокаТаблицы.Параметры.ПересортИзлишкиНомер 	= Ном-1;
			ОбластьСтрокаТаблицы.Параметры.ПересортНедостачиНомер   = 0; 
			ОбластьСтрокаТаблицы.Параметры.Номер 					= Ном;
			Ном = Ном + 1;
			
			СтраницаДоВывода = НомерСтраницы;
			Области = Новый Структура;
			Области.Вставить("Шапка",  ОбластьЗаголовокТаблицы);
			Области.Вставить("Подвал", ОбластьИтогиПоСтранице);
			НомерСтраницы = Обработки.ПечатьИНВ.ВывестиГоризонтальнуюОбластьИНВ19(ТабличныйДокумент, ОбластьСтрокаТаблицы,
				Области, Документ, НомерСтраницы, СтруктураИтогов, мсвДопОбластиПодвала);
			
			Если СтраницаДоВывода <> НомерСтраницы Тогда
				СтруктураИтогов = Новый Структура();
				СтруктураИтогов.Вставить("ИтогоРезультатИзлишекКолво",         0);
				СтруктураИтогов.Вставить("ИтогоРезультатИзлишекСумма",         0);
				СтруктураИтогов.Вставить("ИтогоРезультатНедостачаКолво",       0);
				СтруктураИтогов.Вставить("ИтогоРезультатНедостачаСумма",       0);
				СтруктураИтогов.Вставить("ИтогоПересортИзлишкиКолво",          0);
				СтруктураИтогов.Вставить("ИтогоПересортИзлишкиСумма",          0);
				СтруктураИтогов.Вставить("ИтогоПересортНедостачиКолво",        0);
				СтруктураИтогов.Вставить("ИтогоПересортНедостачиСумма",        0);
				СтруктураИтогов.Вставить("ИтогоПриходИзлишковКолво",           0);
				СтруктураИтогов.Вставить("ИтогоПриходИзлишковСумма",           0);
				СтруктураИтогов.Вставить("ИтогоСписаниеНедостачКолонка1Колво", 0);
				СтруктураИтогов.Вставить("ИтогоСписаниеНедостачКолонка1Сумма", 0);
			КонецЕсли;
			
			СтруктураИтогов.ИтогоРезультатИзлишекКолво   		  = СтруктураИтогов.ИтогоРезультатИзлишекКолво + ИзлишекКолво;
			СтруктураИтогов.ИтогоРезультатИзлишекСумма  		  = СтруктураИтогов.ИтогоРезультатИзлишекСумма + ИзлишекСумма;
			СтруктураИтогов.ИтогоРезультатНедостачаКолво 		  = СтруктураИтогов.ИтогоРезультатНедостачаКолво + 0;
			СтруктураИтогов.ИтогоРезультатНедостачаСумма 	 	  = СтруктураИтогов.ИтогоРезультатНедостачаСумма + 0;
			СтруктураИтогов.ИтогоПересортИзлишкиКолво  			  = СтруктураИтогов.ИтогоПересортИзлишкиКолво + ПересортКолво;
			СтруктураИтогов.ИтогоПересортИзлишкиСумма  		      = СтруктураИтогов.ИтогоПересортИзлишкиСумма + ПересортСумма;
			СтруктураИтогов.ИтогоПересортНедостачиКолво   	      = СтруктураИтогов.ИтогоПересортНедостачиКолво + 0;
			СтруктураИтогов.ИтогоПересортНедостачиСумма   	      = СтруктураИтогов.ИтогоПересортНедостачиСумма + 0;
			СтруктураИтогов.ИтогоПриходИзлишковКолво           	  = СтруктураИтогов.ИтогоПриходИзлишковКолво
				+ (ИзлишекКолво - ПересортКолво);
			СтруктураИтогов.ИтогоПриходИзлишковСумма           	  = СтруктураИтогов.ИтогоПриходИзлишковСумма
				+ (ИзлишекСумма - ПересортСумма);
			СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Колво 	  = СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Колво + 0;
			СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Сумма    = СтруктураИтогов.ИтогоСписаниеНедостачКолонка1Сумма + 0;
			
		КонецЦикла;
		
		// Выведем область итогов по странице.
		Если НомерСтраницы > 2 Тогда
			Обработки.ПечатьИНВ.ВывестиИтогиПоСтраницеИНВ19(ТабличныйДокумент, ОбластьИтогиПоСтранице,
				СтруктураИтогов, Документ);
			// Заменим область итогов таблицы, в ней отличается оформление.
			ОбластьИтогоТаблицы = Макет.ПолучитьОбласть("ИтогоТаблицы2");
		КонецЕсли;
		
		ФорматВыводаКоличества = "ЧЦ=15; ЧДЦ=3";
		ФорматВыводаСуммы = "ЧЦ=15; ЧДЦ=2";
		
		ИтогоРезультатИзлишекКолво = Формат(ИтогоРезультатИзлишекКолво, ФорматВыводаКоличества);
		ОбластьИтогоТаблицы.Параметры.ИтогоРезультатИзлишекКолво = ИтогоРезультатИзлишекКолво;
		ОбластьИтогоТаблицы.Параметры.ИтогоРезультатИзлишекСумма = Формат(ИтогоРезультатИзлишекСумма, ФорматВыводаСуммы);
		ИтогоРезультатНедостачаКолво = Формат(ИтогоРезультатНедостачаКолво, ФорматВыводаКоличества);
		ОбластьИтогоТаблицы.Параметры.ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво;
		ОбластьИтогоТаблицы.Параметры.ИтогоРезультатНедостачаСумма = Формат(ИтогоРезультатНедостачаСумма, ФорматВыводаСуммы);
		ОбластьИтогоТаблицы.Параметры.ИтогоПересортИзлишкиКолво = Формат(ИтогоПересортИзлишкиКолво, ФорматВыводаКоличества);
		ОбластьИтогоТаблицы.Параметры.ИтогоПересортИзлишкиСумма = Формат(ИтогоПересортИзлишкиСумма, ФорматВыводаСуммы);
		ИтогоПересортНедостачиКолво = Формат(ИтогоПересортНедостачиКолво, ФорматВыводаКоличества);
		ОбластьИтогоТаблицы.Параметры.ИтогоПересортНедостачиКолво = ИтогоПересортНедостачиКолво;
		ОбластьИтогоТаблицы.Параметры.ИтогоПересортНедостачиСумма = Формат(ИтогоПересортНедостачиСумма, ФорматВыводаСуммы);
		ОбластьИтогоТаблицы.Параметры.ИтогоПриходИзлишковКолво = Формат(ИтогоПриходИзлишковКолво, ФорматВыводаКоличества);
		ОбластьИтогоТаблицы.Параметры.ИтогоПриходИзлишковСумма = Формат(ИтогоПриходИзлишковСумма, ФорматВыводаСуммы);
		ИтогоСписаниеНедостачКолонка1Колво = Формат(ИтогоСписаниеНедостачКолонка1Колво, ФорматВыводаКоличества);
		ОбластьИтогоТаблицы.Параметры.ИтогоСписаниеНедостачКолонка1Колво = ИтогоСписаниеНедостачКолонка1Колво;
		ИтогоСписаниеНедостачКолонка1Сумма = Формат(ИтогоСписаниеНедостачКолонка1Сумма, ФорматВыводаСуммы);
		ОбластьИтогоТаблицы.Параметры.ИтогоСписаниеНедостачКолонка1Сумма = ИтогоСписаниеНедостачКолонка1Сумма;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоТаблицы);

		ОбластьПодвал.Параметры.Заполнить(Документ);
		
		// Заполним информацию о руководителях и ответственных.
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер"));
		
		ОбластьПодвал.Параметры.МОЛ = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("МОЛ",
			ЗначенияСвойствОбъекта, Документ.СкладКомпании.МОЛ);
		ОбластьПодвал.Параметры.МОЛДолжность = ОбластьЗаголовок.Параметры.МОЛ.Должность;
		ОбластьПодвал.Параметры.МОЛПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ОбластьЗаголовок.Параметры.МОЛ);
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Переоценка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПересортицаТоваров);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли