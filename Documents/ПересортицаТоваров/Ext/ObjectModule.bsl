// Модуль документа "Пересортица товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект, , "НоменклатураПриход", "ГТДПриход");
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании,,"Приход");
		
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "", Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// сначала спишем то что надо списать
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения           = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаОстатки("Расход");
	НаборЗаписейОстатки.СкладКомпании             = СкладКомпании;
	НаборЗаписейОстатки.Пересортица               = Истина;
	НаборЗаписейОстатки.ЕстьРозничнаяСумма        = Ложь;
	НаборЗаписейОстатки.Резервировать             = Истина;
	НаборЗаписейОстатки.ДвиженияПоРознице         = СкладКомпании.Розничный;
	
	Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Если Отказ Тогда
		Возврат; // дальше смысла не имеет
	КонецЕсли;
	
	// Снимаем резервы по заказам (если таковые были)
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = НаборЗаписейОстатки.Выгрузить();
	НаборЗаписейЗаказыПокупателей.СкладКомпании = СкладКомпании;
	Отказ=НЕ НаборЗаписейЗаказыПокупателей.СнятиеРезервовЗаказовПокупателей() ИЛИ Отказ;
	
	// оприходуем что надо оприходовать
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=ПолучитьРезультатЗапросаОстатки("Приход");
	НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
	НаборЗаписейОстатки.Приходовать=Истина;
	НаборЗаписейОстатки.Резервировать=Ложь;
	НаборЗаписейОстатки.ЕстьРозничнаяСумма=Ложь;
	НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
	Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	
	// партии
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// Если приходуем товар на розничный склад, то установим розничные цены на этот товар.
	Если НЕ Отказ И СкладКомпании.Розничный И ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
		// устанавливаем цены.
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаНоменклатура="НоменклатураПриход";
		НаборЗаписейЦены.ТипЦен=СкладКомпании.ТипЦенРозничнойТорговли;
		НаборЗаписейЦены.ИмяРеквизитаЦена="ЦенаРозничнаяПриход";
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// установим закупочные цены компании
	Если НЕ Отказ И ПодразделениеКомпании.ФормироватьЗакупочнуюЦену И НЕ Справочники.ТипыЦен.ОсновнойТипЦенЗакупки.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаНоменклатура="НоменклатураПриход";
		НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
		НаборЗаписейЦены.ТипЦен=Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// установим нормативные цены компании
	Если НЕ Отказ И ПодразделениеКомпании.ФормироватьНормативнуюЦену И НЕ Справочники.ТипыЦен.НормативнаяЦена.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаНоменклатура="НоменклатураПриход";
		НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
		НаборЗаписейЦены.ТипЦен=Справочники.ТипыЦен.НормативнаяЦена;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "");
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДвиженийДокумента

// Возвращает результат запроса по таблице товаров, для проведения по регистру "ОстаткиТоваровКомпании".
//
// Параметры:
//  Направление - строка - задает направление "Приход" или "Расход".
//
Функция ПолучитьРезультатЗапросаОстатки(Направление)
    Направление = ?(Направление="Расход", "",Направление);
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПересортицаТоваровТовары.Номенклатура"+Направление+" КАК Номенклатура,
	|	ПересортицаТоваровТовары.ХарактеристикаНоменклатуры"+Направление+" КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ПересортицаТоваровТовары.ЦенаРозничная"+Направление+") КАК ЦенаРозничная,
	|	СУММА(ПересортицаТоваровТовары.Количество"+Направление+"*ПересортицаТоваровТовары.Коэффициент"+Направление+") КАК Количество,
	|	СУММА(ПересортицаТоваровТовары.СуммаРозничная"+Направление+") КАК СуммаРозничная,
	|	СУММА(0) КАК Резерв
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|ГДЕ
	|	ПересортицаТоваровТовары.Ссылка=&Ссылка
	|СГРУППИРОВАТЬ
	|	ПО ПересортицаТоваровТовары.Номенклатура"+Направление+",ПересортицаТоваровТовары.ХарактеристикаНоменклатуры"+Направление);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаОстатки()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
	НаборЗаписейПартии.Сторно=Ложь;
	НаборЗаписейПартии.ИмяРеквизитаДокумент=?(ЕстьПартии,"Партия","");
	НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам=Неопределено;
	НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
	НаборЗаписейПартии.ЗаписыватьДвижения = Истина;
	Отказ=НЕ НаборЗаписейПартии.Пересортица() ИЛИ Отказ;
	
	// считаем суммы, для проведения по доходам и расходам
	СписалиУпр = 0;
	ОприходовалиУпр = 0;
	Для Каждого Запись Из НаборЗаписейПартии Цикл
		Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			ОприходовалиУпр = ОприходовалиУпр + Запись.СуммаУпр;
		Иначе
			СписалиУпр = СписалиУпр + Запись.СуммаУпр;
		КонецЕсли;
	КонецЦикла;
	Разница = ОприходовалиУпр - СписалиУпр;
	
	// проводим по ДиР
	Если Разница <> 0 Тогда
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Пересортица;
		Если БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата) Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
		КонецЕсли;	
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		Если Разница > 0 Тогда
			НаборЗаписейДоходыИРасходы.Доход = Разница;
		Иначе
			НаборЗаписейДоходыИРасходы.Расход = - Разница;
		КонецЕсли;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
