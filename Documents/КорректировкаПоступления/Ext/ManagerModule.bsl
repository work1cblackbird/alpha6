// Модуль менеджера документа "Корректировка поступления"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//  
// Возвращаемое значение:
//  Структура - значения итоговых показателей по операции в целом:
//    СуммаДокумента	- Число - сумма документа;
//    СуммаНДС			- Число - сумма НДС;
//    СуммаБезНДС		- Число - сумма без НДС.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаДокументаДоКорректировки", Объект.Товары.Итог("СуммаВсегоПоДокументуПоступления"));
	
	Если НЕ Расширенные Тогда
		
		Возврат ИтогиОперации;
		
	КонецЕсли;
	
	ИтогиОперации.Вставить("СуммаНДС", Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	Если
		НЕ Объект.СкладКомпании.Пустая()
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладКомпании, "Розничный")
	Тогда
		
		ПроцентНаценки = 0;
		
		Если ИтогиОперации.СуммаДокумента <> 0 Тогда
			
			ПроцентНаценки = (ИтогиОперации.СуммаРозничная - ИтогиОперации.СуммаДокумента) * 100 / ИтогиОперации.СуммаДокумента;
			ПроцентНаценки = Окр(ПроцентНаценки, 2);
			
		КонецЕсли;
		
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		ИтогиОперации.Вставить("ПроцентНаценки", ПроцентНаценки);
		
	КонецЕсли;
	
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получение сделки по документу основания
//
// Параметры:
//  Сделка  - ДокументСсылка - Ссылка на документ основания.
//
// Возвращаемое значение:
//   ДокументСсылка   - Сделка в цепочке документов.
//
Функция ПолучитьСделку(Знач Сделка) Экспорт 
	Если (ЗначениеЗаполнено(Сделка)) И ТипЗнч(Сделка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Сделка = ПолучитьСделку(Сделка.ДокументОснование);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Сделка = Неопределено;
	КонецЕсли; 
	Возврат Сделка;
КонецФункции // ПолучитьСделку()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Расчет разницы сумм по документу поступления и введенной суммы
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасчетРазницы(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.Коэффициент = 0 Тогда
		Строка.КоличествоРазница = 0;
	Иначе
		Строка.КоличествоРазница = (Строка.Количество)-((Строка.КоличествоПоДокументуПоступления*Строка.КоэффициентПоДокументуПоступления)/Строка.Коэффициент);
	КонецЕсли;
	Строка.СуммаНДСРазница		 = Строка.СуммаНДС - Строка.СуммаНДСПоДокументуПоступления;
	Строка.СуммаВсегоРазница	 = Строка.СуммаВсего - Строка.СуммаВсегоПоДокументуПоступления;
	Строка.СуммаРозничнаяРазница = Строка.СуммаРозничная - Строка.СуммаРозничнаяПоДокументуПоступления;
	
КонецПроцедуры // РасчетРазницы()

// Процедура заполнения реквизита "СуммаДокументаРазница"
//
Процедура ЗаполнитьСуммаДокументаРазница() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.СуммаДокументаРазница = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.Заблокировать();
		ДокументОбъект.СуммаДокументаРазница = ДокументОбъект.Товары.Итог("СуммаВсегоРазница");
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось перезаполнить сумму разницы в %1'"),
					СокрЛП(Строка(ДокументОбъект.Ссылка))
				)
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСуммаДокументаРазница()

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ПоступлениеАвтомобили - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	
	// Для контрагентов из ЕАЭС другая форма отчетности
	Если ДанныеКонтрагента.СтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
	
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.УПД) КАК ВидДокумента,
		|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПоступлениеТоваров) КАК КодОперации,
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	СУММА(КорректировкаПоступленияТовары.Количество * КорректировкаПоступленияТовары.Коэффициент) КАК КоличествоПрослеживаемости,
		|	КорректировкаПоступленияТовары.ГТД КАК РНПТ,
		|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(КорректировкаПоступленияТовары.СуммаВсего - КорректировкаПоступленияТовары.СуммаНДС) КАК СуммаБезНДС
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
		|	И КорректировкаПоступленияТовары.ГТД.РНПТ
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПоступленияТовары.Номенклатура,
		|	КорректировкаПоступленияТовары.ГТД,
		|	КорректировкаПоступленияТовары.СтавкаНДС";
		
		Документ = Объект.Сделка;
		Если ЗначениеЗаполнено(Объект.Сделка) Тогда
			Если ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
				ДанныеПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.Сделка, "ВхДокНомер,ВхДокДата,Дата,Номер,Контрагент");
				ПериодОтчета = НачалоКвартала(ДанныеПоступления.Дата);
				НомерДокумента = ДанныеПоступления.ВхДокНомер;
				ДатаДокумента = ДанныеПоступления.ВхДокДата;
				КонтрагентОперации = ДанныеПоступления.Контрагент;
			Иначе
				ДанныеПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.Сделка, "Дата,Номер,Контрагент");
				ПериодОтчета = НачалоКвартала(ДанныеПоступления.Дата);
				НомерДокумента = Объект.ВхДокНомер;
				ДатаДокумента = Объект.ВхДокДата;
				КонтрагентОперации = ДанныеПоступления.Контрагент;
			КонецЕсли;
		Иначе
			ПериодОтчета = НачалоКвартала(Объект.Дата);
			КонтрагентОперации = Объект.Контрагент;
		КонецЕсли;
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.УКД) КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияТовары.СуммаВсегоРазница > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПолученнаяКорректировочннаяСчетФактураУвеличение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПолученнаяКорректировочннаяСчетФактураУменьшение)
		|	КОНЕЦ КАК КодОперации,
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	СУММА(КорректировкаПоступленияТовары.КоличествоРазница * ВЫБОР
		|			КОГДА КорректировкаПоступленияТовары.КоличествоРазница < 0
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * КорректировкаПоступленияТовары.Коэффициент) КАК КоличествоПрослеживаемости,
		|	КорректировкаПоступленияТовары.ГТД КАК РНПТ,
		|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(КорректировкаПоступленияТовары.СуммаВсегоРазница * ВЫБОР
		|			КОГДА КорректировкаПоступленияТовары.СуммаВсегоРазница < 0
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ - КорректировкаПоступленияТовары.СуммаНДСРазница * ВЫБОР
		|			КОГДА КорректировкаПоступленияТовары.СуммаНДСРазница < 0
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК СуммаБезНДС
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
		|	И КорректировкаПоступленияТовары.ГТД.РНПТ
		|	И КорректировкаПоступленияТовары.СуммаВсегоРазница <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПоступленияТовары.Номенклатура,
		|	КорректировкаПоступленияТовары.ГТД,
		|	КорректировкаПоступленияТовары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияТовары.СуммаВсегоРазница > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПолученнаяКорректировочннаяСчетФактураУвеличение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПолученнаяКорректировочннаяСчетФактураУменьшение)
		|	КОНЕЦ";
		Документ = Объект.Ссылка;
		ПериодОтчета = НачалоКвартала(Объект.Дата);
		НомерДокумента = Объект.ВхДокНомер;
		ДатаДокумента = Объект.ВхДокДата;
		КонтрагентОперации = Объект.Контрагент;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим, что в документе есть РНПТ
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = Запрос.Выполнить().Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	
	// Для пересчета валюты в рубли
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
	
	// Сформируем таблицу
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.Контрагент = КонтрагентОперации;
		
		Если ВалютаНеРегл Тогда
			НоваяСтрока.СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Определяет возможен ли ввод корректировки на основании данного документа основания.
//
// Параметры:
//	Основание - документ поступление товаров или корректировки поступления.
//
Функция КорректировкаНеДоступна(Основание) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК ЕстьВозврат
	|ИЗ
	|	Документ.ВозвратПоставщику КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ДокументОснование = &Основание
	|	И ТаблицаОбъекта.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.ВозвратПоставщику.Товары КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.Партия = &Основание
	|	И ТаблицаОбъекта.Ссылка.Проведен
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", Основание);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // КорректировкаНеДоступна()

// АПК:299-выкл

#Область ПараметрыОбработкиРеквизитовОбъекта

// АПК:299-выкл

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("Коэффициент");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ГТД");
	УникальныеТовары.Добавить("Цена");
	
	УникальныеРеквизиты.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// АПК:299-вкл

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Структура - Содержит перечень параметров действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Если документ ссылается сам на себя, запретим выбор
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Объект.Сделка = Документы.КорректировкаПоступления.ПолучитьСделку(Объект.ДокументОснование);
		
		Если Объект.ДокументОснование = Объект.Ссылка Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Ввод корректировки поступления на основании самого себя запрещен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат;
		КонецЕсли;

		Если КорректировкаНеДоступна(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'На основании %1 введен возврат товаров поставщику. Ввод корректировки поступления невозможен.'"),
				Объект.ДокументОснование);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ДокументОснование.Проведен Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Ввод корректировки поступления возможен только на основании проведенного документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			Возврат;
		КонецЕсли;

		Если Объект.ДокументОснование.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Ввод корректировки поступления невозможен на основании поступления товаров комиссия.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаПоступления.Ссылка КАК Документ
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ДокументОснование = &ДокументОснование
		|	И КорректировкаПоступления.Ссылка <> &Ссылка";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДокументОснование",Объект.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выгрузить();

		Если Выборка.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='На основании документа <%1> уже введен <%2>.'"), Объект.ДокументОснование,Выборка[0].Документ);
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Выборка[0].Документ, ТекстСообщения);
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах") Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			Объект.НомерИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "НомерИсправления") + 1;
		Иначе
			Объект.НомерИсправления = 1;
		КонецЕсли;
	Иначе
		Объект.НомерИсправления = 0;
	КонецЕсли;
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КарточкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Подтверждение" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПодтверждениеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Подтверждение Тогда
		Строка.Количество = (Строка.КоличествоПоДокументуПоступления * Строка.КоэффициентПоДокументуПоступления) / Строка.Коэффициент;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		Строка.СуммаВсего = Строка.СуммаВсегоПоДокументуПоступления;
		ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
		Строка.СуммаРозничная = Строка.СуммаРозничнаяПоДокументуПоступления;
		ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		Строка.Количество=0;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		Строка.СуммаРозничная = Строка.Количество * Строка.Коэффициент * Строка.ЦенаРозничная;
	КонецЕсли; 
	
	// пересчитаем разницу
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Строка.Подтверждение = Истина;
	Строка.ПоДокументуПоступления = Ложь;
	Строка.СодержаниеДоКорректировки = "";
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// пересчитаем разницу
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// пересчитаем разницу
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентНаценкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// пересчитаем разницу
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// пересчитаем разницу
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//  Параметры - Структура - Вспомогательные параметры. 
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "КорректировкаПоступления");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по документу основания'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуОснования";
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - сформированные параметры видимости и доступности команд проверки.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснования.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснования.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по документу основания
//
// Параметры:
//  Ссылка				 - ДокументСсылка.КорректировкаПоступления - документ коректировки поступления
//  ПараметрыКоманды	 - Структура - Параметры для заполнения
//  ПараметрыДействия	 - Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Неопределено - Функция не возвращает определенное значение
//
Функция ТоварыЗаполнитьПоДокументуОснования(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровТовары.Номенклатура,
	|	ПоступлениеТоваровТовары.Количество КАК Количество,
	|	ПоступлениеТоваровТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровТовары.Коэффициент,
	|	ПоступлениеТоваровТовары.Цена,
	|	ПоступлениеТоваровТовары.Сумма КАК Сумма,
	|	ПоступлениеТоваровТовары.СуммаВсего КАК СуммаВсего,
	|	ПоступлениеТоваровТовары.СтавкаНДС,
	|	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеТоваровТовары.ЦенаРозничная,
	|	ПоступлениеТоваровТовары.СуммаРозничная КАК СуммаРозничная,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровТовары.ГТД
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &Заказ И ПоступлениеТоваровТовары.Количество > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровТовары.НомерСтроки";
	
	Запрос.УстановитьПараметр("Заказ", Объект.ДокументОснование);
	
	Если ПараметрыЗаполнения.Свойство("ОчиститьТабличнуюЧасть") Тогда
		Если ПараметрыЗаполнения.ОчиститьТабличнуюЧасть Тогда
			Объект.Товары.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаТоваров                                        = Объект.Товары.Добавить();
		НоваяСтрокаТоваров.ПоДокументуПоступления                 = Истина;
		НоваяСтрокаТоваров.Подтверждение                          = Истина;
		НоваяСтрокаТоваров.Номенклатура                           = Выборка.Номенклатура;
		НоваяСтрокаТоваров.ХарактеристикаНоменклатуры             = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрокаТоваров.ЕдиницаИзмерения                       = Выборка.ЕдиницаИзмерения;
		НоваяСтрокаТоваров.ЕдиницаИзмеренияПоДокументуПоступления = Выборка.ЕдиницаИзмерения;
		НоваяСтрокаТоваров.Коэффициент                            = Выборка.Коэффициент;
		НоваяСтрокаТоваров.КоэффициентПоДокументуПоступления      = Выборка.Коэффициент;
		НоваяСтрокаТоваров.Количество                             = Выборка.Количество;
		НоваяСтрокаТоваров.КоличествоПоДокументуПоступления       = Выборка.Количество;
		НоваяСтрокаТоваров.Цена                                   = Выборка.Цена;
		НоваяСтрокаТоваров.ЦенаРозничная                          = Выборка.ЦенаРозничная;
		НоваяСтрокаТоваров.Сумма                                  = Выборка.Сумма;
		НоваяСтрокаТоваров.СуммаРозничная                         = Выборка.СуммаРозничная;
		НоваяСтрокаТоваров.СуммаРозничнаяПоДокументуПоступления   = Выборка.СуммаРозничная;
		НоваяСтрокаТоваров.СуммаВсего                             = Выборка.СуммаВсего;
		НоваяСтрокаТоваров.СуммаВсегоПоДокументуПоступления       = Выборка.СуммаВсего;
		НоваяСтрокаТоваров.СтавкаНДС                              = Выборка.СтавкаНДС;
		НоваяСтрокаТоваров.СуммаНДС                               = Выборка.СуммаНДС;
		НоваяСтрокаТоваров.СтавкаНДСПоДокументуПоступления        = Выборка.СтавкаНДС;
		НоваяСтрокаТоваров.СуммаНДСПоДокументуПоступления         = Выборка.СуммаНДС;
		НоваяСтрокаТоваров.ГТД                                    = Выборка.ГТД;
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьПоДокументуОснования()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.КорректировкаПоступления",
		"ПФ_MXL_КорректировкаПоступления",
		НСтр("ru = 'Корректировка поступления'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУКД",
		"ПФ_MXL_УКД",
		НСтр("ru = 'Универсальный корректировочный документ'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_КорректировкаПоступления") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_КорректировкаПоступления",
															НСтр("ru = 'Корректировка поступления'"),
															ПечатьКорректировкаПоступления(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция получения данных для УКД
//
// Параметры:
//  Объект - ДокументСсылка.КорректировкаПоступления - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - структура с данными документа.
//
Функция ПолучитьДанныеДляПечатиУКД(Объект) Экспорт
	
	ДокументФактура = Документы.СчетФактураПолученный.НайтиПоРеквизиту("ДокументОснование", Объект.Ссылка);
	ДокументОбъект = ДокументФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ДокументФактура <> Документы.СчетФактураПолученный.ПустаяСсылка() И НЕ ДокументФактура.ПометкаУдаления Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
	КонецЕсли;
	
	ТаблицаТоваров = ТоварыДляПечатиУКД(Объект.Ссылка);
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"					, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"					, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"			, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"		, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"		, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"			, Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"					, Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"				, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"				, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("Организация"			, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов",
		?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары" , ТаблицаТоваров);
	ДанныеОбъекта.Вставить("Статус" , Статус);
	ДанныеОбъекта.Вставить("Ссылка" , ДокументОбъект.Ссылка);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Неопределено);
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсходногоДокумента",
			?(ЗначениеЗаполнено(ДокументОбъект.НомерИсходногоДокумента), ДокументОбъект.НомерИсходногоДокумента, "--"));
		ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",
			?(ЗначениеЗаполнено(ДокументОбъект.ДатаИсходногоДокумента), ДокументОбъект.ДатаИсходногоДокумента, "--"));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , Неопределено);
	КонецЕсли;
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(
		ДокументОбъект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта));
		
	ДанныеОбъекта.Вставить("Руководитель"     	     , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель")
	);
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 ,
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер")
	);
	ДанныеОбъекта.Вставить("Менеджер"         		 , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер")
	);
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

// АПК:299-вкл

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаПоступленияКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступления.КодыМаркировки КАК КорректировкаПоступленияКодыМаркировки
	|ГДЕ
	|	КорректировкаПоступленияКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаПоступления - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит "НомерИсправления" на основании введенного корректировочного счета-фактуры.
//
Процедура ЗаполнитьНомерИсправленияВКорректировкахПоступления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Исключения = Новый Массив;
	Результат = КорректировкиДляЗаполнения(Исключения);
	
	Пока Не Результат.Пустой Цикл
		
		ВыборкаДокумента = Результат.Выборка;
		
		Пока ВыборкаДокумента.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
			ДокументОбъект.НомерИсправления = ВыборкаДокумента.НомерИсправления;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не удалось заполнить реквизит номер исправления документа %1'"),
						СокрЛП(Строка(ДокументОбъект.Ссылка))
					)
				);
			КонецПопытки;
			
			Исключения.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
		Результат = КорректировкиДляЗаполнения(Исключения);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовПоступления();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступления.ДополнительныеРеквизиты КАК КорректировкаПоступленияДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаПоступленияДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаПоступления");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
						
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
		
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_КорректировкаПоступления""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияДополнительныеРеквизиты.Свойство КАК Свойство,
	|	КорректировкаПоступленияДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.КорректировкаПоступления.ДополнительныеРеквизиты КАК КорректировкаПоступленияДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаПоступленияДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И КорректировкаПоступленияДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 

#КонецОбласти 


#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаПоступления);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзОборотаКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер); 
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер); 
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.КорректировкаПоступления);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("СкладКомпании");
		
    Возврат Результат;
    
КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаПоступления - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТоварыДляПечатиУКД(ДокументОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ДокументОбъект.Ссылка);
	ПроверяемыйДокумент = ДокументОбъект.Ссылка;
	Пока Истина Цикл
		ПроверяемыйДокумент = ПроверяемыйДокумент.ДокументОснование;
		Если ЗначениеЗаполнено(ПроверяемыйДокумент) Тогда
			МассивОбъектов.Добавить(ПроверяемыйДокумент);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.Содержание КАК Содержание,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.Количество КАК Количество,
	|	КорректировкаПоступленияТовары.КоличествоРазница КАК КоличествоРазница,
	|	КорректировкаПоступленияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КорректировкаПоступленияТовары.Коэффициент КАК Коэффициент,
	|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаПоступленияТовары.СуммаНДС КАК СуммаНДС,
	|	КорректировкаПоступленияТовары.СуммаНДСРазница КАК СуммаНДСРазница,
	|	КорректировкаПоступленияТовары.СуммаРозничная КАК СуммаРозничная,
	|	КорректировкаПоступленияТовары.СуммаРозничнаяРазница КАК СуммаРозничнаяРазница,
	|	КорректировкаПоступленияТовары.СуммаВсего КАК СуммаВсего,
	|	КорректировкаПоступленияТовары.СуммаВсегоРазница КАК СуммаВсегоРазница,
	|	КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления КАК СуммаВсегоПоДокументуПоступления,
	|	КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления КАК СуммаНДСПоДокументуПоступления,
	|	КорректировкаПоступленияТовары.ГТД КАК ГТД,
	|	КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления КАК СтавкаНДСПоДокументуПоступления,
	|	КорректировкаПоступленияТовары.ГТДПоДокументуПоступления КАК ГТДПоДокументуПоступления
	|ПОМЕСТИТЬ ТЧКорректировки
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияТовары.Количество <> КорректировкаПоступленияТовары.КоличествоПоДокументуПоступления
	|			ИЛИ КорректировкаПоступленияТовары.ЕдиницаИзмерения <> КорректировкаПоступленияТовары.ЕдиницаИзмеренияПоДокументуПоступления
	|			ИЛИ КорректировкаПоступленияТовары.Коэффициент <> КорректировкаПоступленияТовары.КоэффициентПоДокументуПоступления
	|			ИЛИ КорректировкаПоступленияТовары.СтавкаНДС <> КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДС <> КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления
	|			ИЛИ КорректировкаПоступленияТовары.СуммаРозничная <> КорректировкаПоступленияТовары.СуммаРозничнаяПоДокументуПоступления
	|			ИЛИ КорректировкаПоступленияТовары.СуммаВсего <> КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления
	|			ИЛИ КорректировкаПоступленияТовары.ГТД <> КорректировкаПоступленияТовары.ГТДПоДокументуПоступления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоДо
	|ПОМЕСТИТЬ втГТДДоИзменения
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор В(&МассивОбъектов)
	|	И ГТДПартийТоваровКомпании.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоПосле
	|ПОМЕСТИТЬ втГТДПослеИзменения
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГТДДоИзменения.Номенклатура, втГТДПослеИзменения.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(втГТДДоИзменения.ХарактеристикаНоменклатуры, втГТДПослеИзменения.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(втГТДДоИзменения.КоличествоДо, 0) КАК КоличествоДо,
	|	ЕСТЬNULL(втГТДПослеИзменения.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД,
	|	ЕСТЬNULL(втГТДПослеИзменения.КоличествоПосле, 0) КАК КоличествоПосле
	|ПОМЕСТИТЬ втИтог
	|ИЗ
	|	втГТДДоИзменения КАК втГТДДоИзменения
	|		ПОЛНОЕ СОЕДИНЕНИЕ втГТДПослеИзменения КАК втГТДПослеИзменения
	|		ПО втГТДДоИзменения.Номенклатура = втГТДПослеИзменения.Номенклатура
	|			И втГТДДоИзменения.ХарактеристикаНоменклатуры = втГТДПослеИзменения.ХарактеристикаНоменклатуры
	|			И втГТДДоИзменения.ГТД = втГТДПослеИзменения.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втГТДДоИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втГТДПослеИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧКорректировки.Номенклатура КАК Номенклатура,
	|	ТЧКорректировки.Содержание КАК Содержание,
	|	ТЧКорректировки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТЧКорректировки.Количество КАК Количество,
	|	ТЧКорректировки.КоличествоРазница КАК КоличествоРазница,
	|	ТЧКорректировки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧКорректировки.Коэффициент КАК Коэффициент,
	|	ТЧКорректировки.СтавкаНДС КАК СтавкаНДС,
	|	ТЧКорректировки.СуммаНДС КАК СуммаНДС,
	|	ТЧКорректировки.СуммаНДСРазница КАК СуммаНДСРазница,
	|	ТЧКорректировки.СуммаРозничная КАК СуммаРозничная,
	|	ТЧКорректировки.СуммаРозничнаяРазница КАК СуммаРозничнаяРазница,
	|	ТЧКорректировки.СуммаВсего КАК СуммаВсего,
	|	ТЧКорректировки.СуммаВсегоРазница КАК СуммаВсегоРазница,
	|	ТЧКорректировки.СуммаВсегоПоДокументуПоступления КАК СуммаВсегоПоДокументуПоступления,
	|	ТЧКорректировки.СуммаНДСПоДокументуПоступления КАК СуммаНДСПоДокументуПоступления,
	|	ТЧКорректировки.ГТД КАК ГТДПослеИзменения,
	|	0 КАК НомерСтроки,
	|	0 КАК ИсходныйНомерСтроки,
	|	ЕСТЬNULL(втИтог.КоличествоДо, 0) КАК КоличествоДо,
	|	ТЧКорректировки.СтавкаНДСПоДокументуПоступления КАК СтавкаНДСДоИзменения,
	|	ТЧКорректировки.ГТДПоДокументуПоступления КАК ГТД
	|ПОМЕСТИТЬ ТоварыКоличествоДо
	|ИЗ
	|	ТЧКорректировки КАК ТЧКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтог КАК втИтог
	|		ПО ТЧКорректировки.Номенклатура = втИтог.Номенклатура
	|			И ТЧКорректировки.ХарактеристикаНоменклатуры = втИтог.ХарактеристикаНоменклатуры
	|			И ТЧКорректировки.ГТДПоДокументуПоступления = втИтог.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧКорректировки.Номенклатура КАК Номенклатура,
	|	ТЧКорректировки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТЧКорректировки.ГТД КАК ГТДПослеИзменения,
	|	ЕСТЬNULL(втИтог.КоличествоПосле, 0) КАК КоличествоПосле,
	|	ТЧКорректировки.ГТДПоДокументуПоступления КАК ГТД
	|ПОМЕСТИТЬ ТоварыКоличествоПосле
	|ИЗ
	|	ТЧКорректировки КАК ТЧКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтог КАК втИтог
	|		ПО ТЧКорректировки.Номенклатура = втИтог.Номенклатура
	|			И ТЧКорректировки.ХарактеристикаНоменклатуры = втИтог.ХарактеристикаНоменклатуры
	|			И ТЧКорректировки.ГТД = втИтог.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКоличествоДо.Номенклатура КАК Номенклатура,
	|	ТоварыКоличествоДо.Содержание КАК Содержание,
	|	ТоварыКоличествоДо.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыКоличествоДо.Количество КАК Количество,
	|	ТоварыКоличествоДо.КоличествоРазница КАК КоличествоРазница,
	|	ТоварыКоличествоДо.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыКоличествоДо.Коэффициент КАК Коэффициент,
	|	ТоварыКоличествоДо.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыКоличествоДо.СуммаНДС КАК СуммаНДС,
	|	ТоварыКоличествоДо.СуммаНДСРазница КАК СуммаНДСРазница,
	|	ТоварыКоличествоДо.СуммаРозничная КАК СуммаРозничная,
	|	ТоварыКоличествоДо.СуммаРозничнаяРазница КАК СуммаРозничнаяРазница,
	|	ТоварыКоличествоДо.СуммаВсего КАК СуммаВсего,
	|	ТоварыКоличествоДо.СуммаВсегоРазница КАК СуммаВсегоРазница,
	|	ТоварыКоличествоДо.СуммаВсегоПоДокументуПоступления КАК СуммаВсегоПоДокументуПоступления,
	|	ТоварыКоличествоДо.СуммаНДСПоДокументуПоступления КАК СуммаНДСПоДокументуПоступления,
	|	ТоварыКоличествоДо.ГТДПослеИзменения КАК ГТДПослеИзменения,
	|	ТоварыКоличествоДо.НомерСтроки КАК НомерСтроки,
	|	ТоварыКоличествоДо.ИсходныйНомерСтроки КАК ИсходныйНомерСтроки,
	|	ТоварыКоличествоДо.КоличествоДо КАК КоличествоДо,
	|	ТоварыКоличествоПосле.КоличествоПосле КАК КоличествоПосле,
	|	ТоварыКоличествоДо.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	ТоварыКоличествоДо.ГТД КАК ГТД
	|ИЗ
	|	ТоварыКоличествоДо КАК ТоварыКоличествоДо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКоличествоПосле КАК ТоварыКоличествоПосле
	|		ПО ТоварыКоличествоДо.Номенклатура = ТоварыКоличествоПосле.Номенклатура
	|			И ТоварыКоличествоДо.ХарактеристикаНоменклатуры = ТоварыКоличествоПосле.ХарактеристикаНоменклатуры
	|			И ТоварыКоличествоДо.ГТД = ТоварыКоличествоПосле.ГТД
	|			И ТоварыКоличествоДо.ГТДПослеИзменения = ТоварыКоличествоПосле.ГТДПослеИзменения";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	// Эти колонки используются при пересчете внутри функции см.ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров,
	// в других местах значения из них не используется
	ТаблицаТоваров.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ЗаполнитьНомераСтрокВТаблице(ДокументОбъект.Ссылка, ТаблицаТоваров);
	
КонецФункции

Функция ЗаполнитьНомераСтрокВТаблице(Сам, Знач ТаблицаИзменений)
	
	СтруктураПоиска = Новый Структура("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,ГТД");
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураПолученныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураПолученныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетФактураПолученныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетФактураПолученныйТовары.ГТД КАК ГТД,
		|	СчетФактураПолученныйТовары.ИсходныйНомерСтрокиТовара КАК ИсходныйНомерСтроки
		|ИЗ
		|	Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
		|ГДЕ
		|	СчетФактураПолученныйТовары.Ссылка.ДокументОснование = &ССылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сам);
	
	ДанныеСФ = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекущаяСтрока Из ТаблицаИзменений Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		
		НайденныеСтроки = ДанныеСФ.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока.ИсходныйНомерСтроки = НайденныеСтроки[0].ИсходныйНомерСтроки;
		
	КонецЦикла;
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Функция КорректировкиДляЗаполнения(Исключения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Выборка, Пустой");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исключения", Исключения);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2000
	|	СчетФактураПолученный.ДокументОснование КАК Ссылка,
	|	СчетФактураПолученный.НомерИсправления КАК НомерИсправления
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.КорректировкаПоступления
	|	И НЕ ВЫРАЗИТЬ(СчетФактураПолученный.ДокументОснование КАК Документ.КорректировкаПоступления) В (&Исключения)
	|	И ВЫРАЗИТЬ(СчетФактураПолученный.ДокументОснование КАК Документ.КорректировкаПоступления).ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах)
	|	И ВЫРАЗИТЬ(СчетФактураПолученный.ДокументОснование КАК Документ.КорректировкаПоступления).НомерИсправления = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Пустой = Истина;
	Иначе
		Результат.Пустой = Ложь;
		Результат.Выборка = РезультатЗапроса.Выбрать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПечатьКорректировкаПоступления(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаПоступления_КорректировкаПоступления";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаПоступления.ПФ_MXL_КорректировкаПоступления");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладКомпании);
				
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// заполнение подвала и итогов
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего   = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ОтпустилКонтрагент", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьКорректировкаПоступления()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	// получим партию средних остатков
	ПартияОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	
	// получим стратегию списания товаров
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(
		Объект.СкладКомпании,
		Объект.Организация,
		Объект.Дата);
	
	ТекущеееОснование = Объект.ДокументОснование;
	Пока ТипЗнч(ТекущеееОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Цикл
		ТекущеееОснование = ТекущеееОснование.ДокументОснование;
	КонецЦикла;
	ПартияДокумента = ТекущеееОснование;
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ПартияДокумента", ПартияДокумента);
	ДополнительныеПараметры.ДляПроведения.Вставить("ПартияОтрицательныхОстатков", ПартияОтрицательныхОстатков);
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаПоступления.Организация КАК Организация,
	|	КорректировкаПоступления.Ссылка КАК Ссылка,
	|	КорректировкаПоступления.Дата КАК Дата,
	|	КорректировкаПоступления.ХозОперация КАК ХозОперация,
	|	КорректировкаПоступления.ДокументОснование КАК ДокументОснование,
	|	КорректировкаПоступления.Контрагент КАК Контрагент,
	|	КорректировкаПоступления.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	КорректировкаПоступления.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	КорректировкаПоступления.Сделка КАК Сделка,
	|	КорректировкаПоступления.СуммаДокумента КАК Сумма,
	|	КорректировкаПоступления.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	КорректировкаПоступления.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаПоступления.КурсДокумента КАК КурсДокумента,
	|	КорректировкаПоступления.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(КорректировкаПоступленияТовары.СуммаВсегоРазница), 0) КАК СуммаКорректировки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаРазницыКорректировки
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступленияТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл,
	|	ЕСТЬNULL(СуммаРазницыКорректировки.СуммаКорректировки, 0) КАК СуммаКорректировки
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаРазницыКорректировки КАК СуммаРазницыКорректировки
	|		ПО ДанныеДокумента.Ссылка = СуммаРазницыКорректировки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если ДвиженияДокумента.ДляПроведения.ПартияДокумента.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия
		ИЛИ ДвиженияДокумента.ДляПроведения.ПартияДокумента.ХозОперация = Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.СуммаКорректировки КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеОбОплате.Следующий()
		Или ДанныеОбОплате.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОбОплате.Сумма > 0 Тогда
		
		Если ДвиженияДокумента.ДляПроведения.ПартияДокумента = ДвиженияДокумента.ДляПроведения.ПартияОтрицательныхОстатков Тогда
			// сделка - не партия, а документ-основание
			Сделка = ДанныеОбОплате.ДокументОснование;
		Иначе
			Сделка = ДвиженияДокумента.ДляПроведения.ПартияДокумента;
		КонецЕсли;
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			ДанныеОбОплате.Сумма,
			ВидДвиженияНакопления.Расход,
			Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности,
			Сделка,,
			Истина);
		
	Иначе
		
		РасчетыСКонтрагентамиСервер.ЗачестьОплатуПоСделке(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,
			Ложь,
			Истина);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли