// Модуль объекта документа "Корректировка поступления"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	Если Не ВозможенВВодНаОсновании(ДанныеЗаполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если
		ЗначениеЗаполнено(ДанныеЗаполнения)
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров")
			Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления"))
	Тогда
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
		
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Корректировка поступления вводится только на основании проведенного документа.'")
			);
			Возврат;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения = Ссылка Тогда
			
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки поступления на основании себя запрещен.'")
			);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Сделка = Документы.КорректировкаПоступления.ПолучитьСделку(ДанныеЗаполнения);
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ВхДокНомер,ВхДокДата"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах")
		И НЕ ЗначениеЗаполнено(НомерИсправления)
	Тогда
		НомерИсправления = 1;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	ВхДокНомер = "";
	ВхДокДата = Дата(1,1,1);
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим параметры запрета для номенклатуры
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();

	Если ЭтоУниверсальныйДокумент 
		И (Не ЗначениеЗаполнено(ЭтотОбъект.ВхДокДата)
		 Или Не ЗначениеЗаполнено(ЭтотОбъект.ВхДокНомер))Тогда
		 
		 ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для документа с признаком УКД необходимо заполнить данные входящего документа!'"),
				ЭтотОбъект, "ВхДокДата");

	КонецЕсли; 	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	 ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// Проверим хоз. операции
	// составим список документов движений.
	Если ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон Тогда
		
		// заполним значение до корректировки
		Для Каждого стрТовары Из Товары Цикл
			стрТовары.КоличествоДоКорректировки = стрТовары.КоличествоПоДокументуПоступления;
			стрТовары.СуммаВсегоДоКорректировки = стрТовары.СуммаВсегоПоДокументуПоступления;
			стрТовары.СуммаНДСДоКорректировки   = стрТовары.СуммаНДСПоДокументуПоступления;
		КонецЦикла;
		
	КонецЕсли;
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах Тогда
		
		// проверим введенные на основании корректировки
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаПоступления
		|	И НЕ ПодчиненныеДокументы.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон)
		|	И НЕ ПодчиненныеДокументы.Ссылка = &Ссылка
		|	И ПодчиненныеДокументы.Ссылка.Проведен";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка",    Ссылка);
		ВыполнениеЗапроса = Запрос.Выполнить();
		
		Если НЕ ВыполнениеЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'К документу %1 введено больше одного корректировочного документа с хоз. операцей ""Исправление первичных документов"". 
								|Каждую последующую корректировку следует вводить на основании предыдущей.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения,Строка(ДокументОснование)),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.КорректировкаПоступления.ВозможенВводСчетФактурыПолученной(ЭтотОбъект);
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
	СуммаДокументаРазница = Товары.Итог("СуммаВсегоРазница");
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураПолученный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ВозможенВВодНаОсновании(Сделка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Ошибки = "";
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	ИнициализироватьДанныеДляПроведения();
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	СтрОснований = ДополнительныеСвойства.ПартииТоваров;
	
	// Спишем остатки
	// выполним списание по регистру остатков и выполним переоценку если надо.
	ТаблицаНоменклатуры = ПолучитьТаблицуНоменклатуры();
	Если СтрОснований.ПартияДок.ХозОперация <> Справочники.ХозОперации.УслугиСтороннихОрганизаций Тогда
		ВыполнитьДвиженияПоОстаткам(ТаблицаНоменклатуры, Отказ, Ошибки);
		Если НЕ Отказ Тогда
			ВыполнитьДвиженияПоПартиям(ТаблицаНоменклатуры, Отказ, Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	// оприходуем услуги
	Если НЕ Отказ Тогда
		ВыполнитьДвиженияПоУслугам(ТаблицаНоменклатуры, Отказ, Ошибки);
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	ТаблицаПрослеживаемыхТоваров = Документы.КорректировкаПоступления.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		// при безвозмездном поступлении сумму на доходы и расходы
		Если СтрОснований.ПартияДок.ХозОперация=Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
			СуммаСебестоимости = 0;
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение          = ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Доход                  = Движения.ПартииТоваровКомпании.Итог("СуммаУпр");;
			СуммаСебестоимости                     = СуммаСебестоимости+НаборЗаписейДиР.Доход;
			Если НаборЗаписейДиР.Доход <> 0 Тогда
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
		
		Документы.КорректировкаПоступления.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
		Документы.КорректировкаПоступления.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
		ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
		
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
		ДополнительныеСвойства.Вставить(
			"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
			СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
		
		// взаиморасчеты проведем
		Если СтрОснований.ПартияДок.ХозОперация<>Справочники.ХозОперации.ПоступлениеТоваровКомиссия И СтрОснований.ПартияДок.ХозОперация<>Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда // И Контрагент.ВидКонтрагента<>Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо
			СуммаДоходаРасходаСуммовыхРазниц = ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Ошибки);
			// доходы и расходы по суммовым разницам
			Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте = Истина;
				Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
		
		// Двигаем границы
		РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
		РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
		РаботаСГраницами.СдвинутьГраницуПартий(Ссылка,  ДополнительныеСвойства, Движения);

	КонецЕсли;
	
	// Запишем коды маркировки
	Если НЕ Отказ Тогда
		ПровестиПоКодамМаркировки(РежимПроведения);
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// Зафиксируем новые штрихкоды товара из кода маркировки
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		МаркировкаТоваровСервер.ПроверитьИДобавитьГТИННоменклатуры(Ссылка);
	КонецЕсли;

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФПолученный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Товары.Очистить();
		КодыМаркировки.Очистить();
		Контрагент = ДанныеЗаполнения.Контрагент;
		ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			КодыМаркировкиОснования = ДанныеЗаполнения.КодыМаркировки.Выгрузить();
			СтруктураПоиска = Новый Структура("ИдентификаторТовара");
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
			|	ПоступлениеТоваровТовары.Содержание КАК Содержание,
			|	ПоступлениеТоваровТовары.Количество КАК Количество,
			|	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПоступлениеТоваровТовары.Коэффициент КАК Коэффициент,
			|	ПоступлениеТоваровТовары.Цена КАК Цена,
			|	ПоступлениеТоваровТовары.Сумма КАК Сумма,
			|	ПоступлениеТоваровТовары.СуммаВсего КАК СуммаВсего,
			|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
			|	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
			|	ПоступлениеТоваровТовары.ЦенаРозничная КАК ЦенаРозничная,
			|	ПоступлениеТоваровТовары.СуммаРозничная КАК СуммаРозничная,
			|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ПоступлениеТоваровТовары.ГТД КАК ГТД,
			|	ПоступлениеТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара
			|ИЗ
			|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
			|ГДЕ
			|	ПоступлениеТоваровТовары.Ссылка = &Основание
			|	И ПоступлениеТоваровТовары.Количество > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПоступлениеТоваровТовары.НомерСтроки";
			Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаТоваров                                        = Товары.Добавить();
				НоваяСтрокаТоваров.ПоДокументуПоступления                 = Истина;
				НоваяСтрокаТоваров.Подтверждение                          = Истина;
				НоваяСтрокаТоваров.Номенклатура                           = Выборка.Номенклатура;
				НоваяСтрокаТоваров.ХарактеристикаНоменклатуры             = Выборка.ХарактеристикаНоменклатуры;
				НоваяСтрокаТоваров.ЕдиницаИзмерения                       = Выборка.ЕдиницаИзмерения;
				НоваяСтрокаТоваров.ЕдиницаИзмеренияПоДокументуПоступления = Выборка.ЕдиницаИзмерения;
				НоваяСтрокаТоваров.Коэффициент                            = Выборка.Коэффициент;
				НоваяСтрокаТоваров.КоэффициентПоДокументуПоступления      = Выборка.Коэффициент;
				НоваяСтрокаТоваров.Количество                             = Выборка.Количество;
				НоваяСтрокаТоваров.КоличествоПоДокументуПоступления       = Выборка.Количество;
				НоваяСтрокаТоваров.Цена                                   = Выборка.Цена;
				НоваяСтрокаТоваров.ЦенаРозничная                          = Выборка.ЦенаРозничная;
				НоваяСтрокаТоваров.Сумма                                  = Выборка.Сумма;
				НоваяСтрокаТоваров.СуммаРозничная                         = Выборка.СуммаРозничная;
				НоваяСтрокаТоваров.СуммаРозничнаяПоДокументуПоступления   = Выборка.СуммаРозничная;
				НоваяСтрокаТоваров.СуммаВсего                             = Выборка.СуммаВсего;
				НоваяСтрокаТоваров.СуммаВсегоПоДокументуПоступления       = Выборка.СуммаВсего;
				НоваяСтрокаТоваров.СтавкаНДС                              = Выборка.СтавкаНДС;
				НоваяСтрокаТоваров.СуммаНДС                               = Выборка.СуммаНДС;
				НоваяСтрокаТоваров.СтавкаНДСПоДокументуПоступления        = Выборка.СтавкаНДС;
				НоваяСтрокаТоваров.СуммаНДСПоДокументуПоступления         = Выборка.СуммаНДС;
				НоваяСтрокаТоваров.ГТД                                    = Выборка.ГТД;
				НоваяСтрокаТоваров.ГТДПоДокументуПоступления              = НоваяСтрокаТоваров.ГТД;
				НоваяСтрокаТоваров.ИдентификаторТовара                    = Выборка.ИдентификаторТовара;
				НоваяСтрокаТоваров.Содержание                             = Выборка.Содержание;
				НоваяСтрокаТоваров.СодержаниеДоКорректировки              = Выборка.Содержание;
				
				// Заполним коды маркировки товаров
				СтруктураПоиска.ИдентификаторТовара = НоваяСтрокаТоваров.ИдентификаторТовара;
				НайденныеКодыМаркировки = КодыМаркировкиОснования.НайтиСтроки(СтруктураПоиска);
				Для Каждого ТекущаяСтрока Из НайденныеКодыМаркировки Цикл
					ЗаполнитьЗначенияСвойств(КодыМаркировки.Добавить(), ТекущаяСтрока);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Корректировка поступления".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ОснованиеКорректировка = (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон);
			
			// Заполним табличную часть товары приватно
			Товары.Очистить();
			КодыМаркировки.Очистить();
			
			КодыМаркировкиОснования = ДанныеЗаполнения.КодыМаркировки.Выгрузить();
			СтруктураПоиска = Новый Структура("ИдентификаторТовара");
			
			ТоварыОснования = ДанныеЗаполнения.Товары.Выгрузить();
			Для Каждого стрТоваров Из ТоварыОснования Цикл
				
				Если (НЕ стрТоваров.Подтверждение) ИЛИ (стрТоваров.Количество = 0) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаТоваров = Товары.Добавить();
				НоваяСтрокаТоваров.ПоДокументуПоступления	= Истина;
				НоваяСтрокаТоваров.Подтверждение			= Истина;
				НоваяСтрокаТоваров.ИдентификаторТовара		= стрТоваров.ИдентификаторТовара;
				
				ЗаполнитьЗначенияСвойств(
					НоваяСтрокаТоваров,
					стрТоваров,
					, 
					"ПоДокументуПоступления, Подтверждение, КоличествоРазница, СуммаНДСРазница, СуммаРозничнаяРазница,
					|СуммаВсегоРазница, ГТДДоКорректировки, ГТДПоДокументуПоступления, СодержаниеДоКорректировки");
				
				НоваяСтрокаТоваров.КоличествоПоДокументуПоступления       = НоваяСтрокаТоваров.Количество;
				НоваяСтрокаТоваров.СуммаНДСПоДокументуПоступления         = НоваяСтрокаТоваров.СуммаНДС;
				НоваяСтрокаТоваров.СтавкаНДСПоДокументуПоступления        = НоваяСтрокаТоваров.СтавкаНДС;
				НоваяСтрокаТоваров.СуммаВсегоПоДокументуПоступления       = НоваяСтрокаТоваров.СуммаВсего;
				НоваяСтрокаТоваров.СуммаРозничнаяПоДокументуПоступления   = НоваяСтрокаТоваров.СуммаРозничная;
				НоваяСтрокаТоваров.ГТДПоДокументуПоступления              = НоваяСтрокаТоваров.ГТД;
				НоваяСтрокаТоваров.КоэффициентПоДокументуПоступления      = НоваяСтрокаТоваров.Коэффициент;
				НоваяСтрокаТоваров.ЕдиницаИзмеренияПоДокументуПоступления = НоваяСтрокаТоваров.ЕдиницаИзмерения;
				НоваяСтрокаТоваров.СодержаниеДоКорректировки              = НоваяСтрокаТоваров.Содержание;
				Если ОснованиеКорректировка Тогда
					
					НоваяСтрокаТоваров.КоличествоДоКорректировки     = НоваяСтрокаТоваров.КоличествоПоДокументуПоступления;
					НоваяСтрокаТоваров.СуммаНДСДоКорректировки       = НоваяСтрокаТоваров.СтавкаНДСПоДокументуПоступления;
					НоваяСтрокаТоваров.СуммаВсегоДоКорректировки     = НоваяСтрокаТоваров.СуммаВсегоПоДокументуПоступления;
					НоваяСтрокаТоваров.СуммаРозничнаяДоКорректировки = НоваяСтрокаТоваров.СуммаРозничнаяПоДокументуПоступления;
					НоваяСтрокаТоваров.ГТДДоКорректировки            = НоваяСтрокаТоваров.ГТДПоДокументуПоступления;
					
				КонецЕсли;
				
				// Заполним коды маркировки товаров
				СтруктураПоиска.ИдентификаторТовара = НоваяСтрокаТоваров.ИдентификаторТовара;
				НайденныеКодыМаркировки = КодыМаркировкиОснования.НайтиСтроки(СтруктураПоиска);
				Для Каждого ТекущаяСтрока Из НайденныеКодыМаркировки Цикл
					Если ТекущаяСтрока.Возврат Тогда
						Продолжить;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(КодыМаркировки.Добавить(), ТекущаяСтрока);
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах")
	Тогда
		НомерИсправления = ДанныеЗаполнения.НомерИсправления + 1;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаПоступления()

Функция ВозможенВВодНаОсновании(ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
		
		Если ДанныеЗаполнения = Ссылка Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки поступления на основании самой себя запрещен.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки поступления возможен только на основании проведенного документа.'"));
			Возврат Ложь;
		КонецЕсли;
		
		ХозОперацияОснования = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ХозОперация", "");
		Если ХозОперацияОснования = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки поступления не возможен на основании поступления товаров комиссия.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если Документы.КорректировкаПоступления.КорректировкаНеДоступна(ДанныеЗаполнения) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'На основании <%1> введен возврат товаров поставщику. Ввод корректировки поступления невозможен.'"),
				ДанныеЗаполнения);
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СкладКомпании КАК СкладКомпании,
	|	&СуммаРазногласий КАК СуммаДокумента,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.Сделка КАК Сделка
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.УстановитьПараметр("СуммаРазногласий",Товары.Итог("СуммаВсегоРазница"));
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции // ПолучитьШапкуДокумента()

Функция ПолучитьТаблицуНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.Номенклатура.Код КАК НоменклатураКод,
	|	КорректировкаПоступленияТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	КорректировкаПоступленияТовары.Номенклатура.Производитель КАК НоменклатураПроизводитель,
	|	СУММА(КорректировкаПоступленияТовары.КоличествоПоДокументуПоступления * КорректировкаПоступленияТовары.КоэффициентПоДокументуПоступления) КАК КоличествоПоДокументуПоступления,
	|	СУММА(КорректировкаПоступленияТовары.Количество * КорректировкаПоступленияТовары.Коэффициент) КАК Количество,
	|	СУММА(КорректировкаПоступленияТовары.КоличествоРазница * КорректировкаПоступленияТовары.Коэффициент) КАК КоличествоРазница,
	|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления) КАК СуммаНДСПоДокументуПоступления,
	|	СУММА(КорректировкаПоступленияТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(КорректировкаПоступленияТовары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления) КАК СуммаВсегоПоДокументуПоступления,
	|	СУММА(КорректировкаПоступленияТовары.СуммаРозничнаяПоДокументуПоступления) КАК СуммаРозничнаяПоДокументуПоступления,
	|	СУММА(КорректировкаПоступленияТовары.СуммаРозничная) КАК СуммаРозничная,
	|	КорректировкаПоступленияТовары.ЦенаРозничная КАК ЦенаРозничная,
	|	СУММА(КорректировкаПоступленияТовары.СуммаВсегоРазница) КАК СуммаВсегоРазница,
	|	СУММА(КорректировкаПоступленияТовары.СуммаРозничнаяРазница) КАК СуммаРозничнаяРазница,
	|	СУММА(КорректировкаПоступленияТовары.СуммаНДСРазница) КАК СуммаНДСРазница
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	(КорректировкаПоступленияТовары.КоличествоРазница <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаРозничнаяРазница <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаВсегоРазница <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДСРазница <> 0)
	|	И КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.ЦенаРозничная,
	|	КорректировкаПоступленияТовары.Номенклатура.Артикул,
	|	КорректировкаПоступленияТовары.Номенклатура.Код,
	|	КорректировкаПоступленияТовары.Номенклатура.Производитель";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНоменклатуры()

Функция ПартииТоваровПоСтратегииСписания()
	
	Результат = Новый Структура;
	Результат.Вставить("ПартияОтрицательныхОстатков", Константы.ПартияТоваровОтрицательныхОстатков.Получить());
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация, Дата);
	
	Основание = ДокументОснование;
	Основания = Новый Массив();
	Основания.Добавить(Основание);
	
	Пока ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Цикл
		
		Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДокументОснование");
		Основания.Добавить(Основание);
		
	КонецЦикла;
	
	Результат.Вставить("ПервоеПоступление", Основание);
	Результат.Вставить("Основания", Основания);
	
	Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
		
		Результат.Вставить("ПартияДок", Результат.ПартияОтрицательныхОстатков);
		
	Иначе
		
		Результат.Вставить("ПартияДок", Результат.ПервоеПоступление);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ПартияДок) Тогда
		
		Результат.Вставить("ОснованиеХозОперация",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ПартияДок, "ХозОперация"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДляПроведения()
	
	РазрешитьОтрицательныеСкладскиеОстатки = ПраваИНастройкиПользователя.Значение(
		"РазрешитьОтрицательныеСкладскиеОстатки", ЭтотОбъект);
	ДополнительныеСвойства.Вставить("ОтрицательныеОстаткиРазрешеныПоПартиям", РазрешитьОтрицательныеСкладскиеОстатки
		= Перечисления.ВидыРазрешенныхОтрицательныхОстатков.ПоПартиям);
	ДополнительныеСвойства.Вставить("ОтрицательныеОстаткиРазрешеныПоСкладам", РазрешитьОтрицательныеСкладскиеОстатки
		<> Перечисления.ВидыРазрешенныхОтрицательныхОстатков.Запрещены);
	
	ДополнительныеСвойства.Вставить("РежимВыводаКода",
		УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя);
	
	ДополнительныеСвойства.Вставить("ПартииТоваров", ПартииТоваровПоСтратегииСписания());
	
	ДополнительныеСвойства.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	ДополнительныеСвойства.Вставить("КурсУпр", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "КурсВалютыУпр")); 
	
	Если Не ЗначениеЗаполнено(ДополнительныеСвойства.КурсУпр) Тогда
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДополнительныеСвойства.ВалютаУпр, Дата);
		ДополнительныеСвойства.КурсУпр = СтруктураКурса.Курс /
			?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоОстаткам(ТаблицаНоменклатуры, Отказ, Ошибки)
	
	ОтрицательныеОстаткиРазрешены = ДополнительныеСвойства.ОтрицательныеОстаткиРазрешеныПоСкладам;
	
	Для Каждого стрНоменклатуры Из ТаблицаНоменклатуры Цикл
		Если стрНоменклатуры.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга ИЛИ стрНоменклатуры.КоличествоРазница = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись               = Движения.ОстаткиТоваровКомпании.Добавить();
		НоваяЗапись.Период        = Дата;
		НоваяЗапись.Регистратор   = Ссылка;
		НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Номенклатура  = стрНоменклатуры.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры = стрНоменклатуры.ХарактеристикаНоменклатуры;
		НоваяЗапись.СкладКомпании = СкладКомпании;
		НоваяЗапись.Количество    = стрНоменклатуры.КоличествоРазница;
		НоваяЗапись.СуммаРозн     = стрНоменклатуры.СуммаРозничнаяРазница;
		НоваяЗапись.ХозОперация   = ХозОперация;
		НоваяЗапись.Контрагент    = Контрагент;
	КонецЦикла;
	Движения.ОстаткиТоваровКомпании.Записать();
	
	// получим остатки по складу
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура.Код КАК НоменклатураКод,
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура.Производитель КАК НоменклатураПроизводитель,
	|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ОстаткиТоваровКомпанииОстатки.РезервОстаток КАК РезервОстаток,
	|	ОстаткиТоваровКомпанииОстатки.СуммаРознОстаток КАК СуммаРознОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	|			&Момент,
	|			СкладКомпании = &СкладКомпании
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки";
	
	Запрос.УстановитьПараметр("Момент", Новый Граница(МоментВремени(),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	
	ВыборкаОстатков = Запрос.Выполнить().Выбрать(); Ошибки = "";
	
	Пока ВыборкаОстатков.Следующий() Цикл
		
		Если ДополнительныеСвойства.РежимВыводаКода = "КодИАртикул" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2'"), 
							СокрЛП(ВыборкаОстатков.НоменклатураКод), ВыборкаОстатков.НоменклатураАртикул);
		ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "АртикулКодПроизводитель" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2, %3'"),
							СокрЛП(ВыборкаОстатков.НоменклатураКод),
							ВыборкаОстатков.НоменклатураАртикул,
							ВыборкаОстатков.НоменклатураПроизводитель);
		ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "КодИПроизводитель" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2'"),
							СокрЛП(ВыборкаОстатков.НоменклатураКод),
							ВыборкаОстатков.НоменклатураПроизводитель);
		ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "АртикулИПроизводитель" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2'"),
							ВыборкаОстатков.НоменклатураАртикул,
							ВыборкаОстатков.НоменклатураПроизводитель);
		ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "Артикул" Тогда
			СтрокаКода = ВыборкаОстатков.НоменклатураАртикул;
		Иначе
			СтрокаКода = СокрЛП(ВыборкаОстатков.НоменклатураКод);
		КонецЕсли;
		
		// проверим остаток
		Если ВыборкаОстатков.КоличествоОстаток < ВыборкаОстатков.РезервОстаток И ВыборкаОстатков.РезервОстаток > 0 Тогда  
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ВыборкаОстатков.Номенклатура);
			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора); 
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НомерСтроки = НайденныеСтроки[0].НомерСтроки;
			Иначе	
			    НомерСтроки = "";
			КонецЕсли; 
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Нельзя откорректировать зарезервированный товар ""%1 [%2]"" в строке ""%3"" - превышение ""%4"".'"),
					ВыборкаОстатков.Номенклатура,
					СтрокаКода, 
					НомерСтроки,
					Строка(ВыборкаОстатков.РезервОстаток-ВыборкаОстатков.КоличествоОстаток)
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
		 
		Если НЕ ОтрицательныеОстаткиРазрешены И ВыборкаОстатков.КоличествоОстаток < 0 Тогда 
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ВыборкаОстатков.Номенклатура);
			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора); 
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НомерСтроки = НайденныеСтроки[0].НомерСтроки;
			Иначе	
			    НомерСтроки = "";
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не хватает товара ""%1 [%2]"" в строке ""%3"" для корректировки в количестве ""%4"".'"),
					ВыборкаОстатков.Номенклатура,
					СтрокаКода,
					НомерСтроки,
					Строка(-ВыборкаОстатков.КоличествоОстаток)
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
		
		Если СкладКомпании.Розничный И ПодразделениеКомпании.ПереоценкаРозницаПоПриходу Тогда
			// выполним переоценку
			// получим цену из ТЧ
			стрПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",ВыборкаОстатков.Номенклатура,ВыборкаОстатков.ХарактеристикаНоменклатуры);
			МассивСтрок = ТаблицаНоменклатуры.НайтиСтроки(стрПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				ЦенаПоДок = МассивСтрок[0].ЦенаРозничная;
			Иначе
				ЦенаПоДок = 0;
			КонецЕсли;
			
			Если (ЦенаПоДок <> 0) И (ЦенаПоДок*ВыборкаОстатков.КоличествоОстаток) <> ВыборкаОстатков.СуммаРознОстаток Тогда
				НоваяЗапись               = Движения.ОстаткиТоваровКомпании.Добавить();
				НоваяЗапись.Период        = Дата;
				НоваяЗапись.Регистратор   = Ссылка;
				НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Номенклатура  = ВыборкаОстатков.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаОстатков.ХарактеристикаНоменклатуры;
				НоваяЗапись.СкладКомпании = СкладКомпании;
				НоваяЗапись.Количество    = 0;
				НоваяЗапись.СуммаРозн     = (ЦенаПоДок*ВыборкаОстатков.КоличествоОстаток)-ВыборкаОстатков.СуммаРознОстаток;
				НоваяЗапись.ХозОперация   = ХозОперация;
				НоваяЗапись.Контрагент    = Контрагент;
				НоваяЗапись.Цена          = ЦенаПоДок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоПартиям(ТаблицаНоменклатуры, Отказ, Ошибки)
	
	РазницаСебестоимости = РазницаСебестоимостиПустая();
	ОтрицательныеОстаткиРазрешены = ДополнительныеСвойства.ОтрицательныеОстаткиРазрешеныПоПартиям;
	ОстаткиПартийТоваров = ОстаткиПартийТоваров(ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"));

	Для Каждого ТоварнаяПозиция Из ТаблицаНоменклатуры Цикл
		
		Если ЭтоУслуга(ТоварнаяПозиция.Номенклатура) Или ПозицияНеИзменялась(ТоварнаяПозиция) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаУпрНом = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТоварнаяПозиция.СуммаВсегоРазница,
			ВалютаДокумента,
			КурсДокумента,
			ДополнительныеСвойства.ВалютаУпр,
			ДополнительныеСвойства.КурсУпр,
			РежимОкругления.Окр15как20
		);
		СуммаРеглНом = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТоварнаяПозиция.СуммаВсегоРазница,
			ВалютаДокумента,
			КурсДокумента,
			Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),
			Дата,
			РежимОкругления.Окр15как20
		);
		СуммаУпрНомНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТоварнаяПозиция.СуммаНДСРазница,
			ВалютаДокумента,
			КурсДокумента,
			ДополнительныеСвойства.ВалютаУпр,
			ДополнительныеСвойства.КурсУпр,
			РежимОкругления.Окр15как20
		);
		СуммаРеглНомНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТоварнаяПозиция.СуммаНДСРазница,
			ВалютаДокумента,
			КурсДокумента,
			Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),
			Дата,
			РежимОкругления.Окр15как20
		);
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",
			ТоварнаяПозиция.Номенклатура,
			ТоварнаяПозиция.ХарактеристикаНоменклатуры
		);
		ПодходящиеПартии = ОстаткиПартийТоваров.НайтиСтроки(УсловиеПоиска);
		
		Если ПодходящиеПартии.Количество() = 0 Тогда
			
			// От партии ничего не осталось
			Если ТоварнаяПозиция.КоличествоРазница = 0 Тогда 
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", ТоварнаяПозиция.Номенклатура);
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора); 
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НомерСтроки = НайденныеСтроки[0].НомерСтроки;
				Иначе	
					НомерСтроки = "";
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не удалось откорректировать сумму по товару ""%1 [%2]"" в строке ""%3"" - партия была расформирована.'"),
						ТоварнаяПозиция.Номенклатура,
						ПрефиксКодаДляСообщений(ТоварнаяПозиция),
						НомерСтроки
					),
					ЭтотОбъект,
					,
					,
					Отказ
				);
				Продолжить;
				
			ИначеЕсли Не ОтрицательныеОстаткиРазрешены И ТоварнаяПозиция.КоличествоРазница < 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Нехватка товара ""%1 [%2]"" в строке ""%3"" по партии в количестве ""%4"".'"),
						ТоварнаяПозиция.Номенклатура,
						ПрефиксКодаДляСообщений(ТоварнаяПозиция),
						НомерСтроки,
						Строка(-ТоварнаяПозиция.КоличествоРазница)
					),
					ЭтотОбъект,,,
					Отказ
				);
				Продолжить;
				
			КонецЕсли;
			
			НоваяЗапись = Движения.ПартииТоваровКомпании.Добавить();
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Регистратор   = Ссылка;
			НоваяЗапись.Номенклатура  = ТоварнаяПозиция.Номенклатура;
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗапись.СкладКомпании = СкладКомпании;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
			НоваяЗапись.ХарактеристикаНоменклатуры = ТоварнаяПозиция.ХарактеристикаНоменклатуры;
			НоваяЗапись.Партия = ?(
				ТоварнаяПозиция.КоличествоРазница > 0,
				ДополнительныеСвойства.ПартииТоваров.ПартияДок,
				ДополнительныеСвойства.ПартииТоваров.ПартияОтрицательныхОстатков
			);
			Если ДополнительныеСвойства.ПартииТоваров.ПартияДок.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
				НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
			Иначе
				НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
			КонецЕсли;
			НоваяЗапись.Количество = ТоварнаяПозиция.КоличествоРазница;
			НоваяЗапись.Сумма = СуммаРеглНом;
			НоваяЗапись.СуммаУпр = СуммаУпрНом;
			НоваяЗапись.СуммаНДС = СуммаРеглНомНДС;
			НоваяЗапись.СуммаНДСУпр = СуммаУпрНомНДС;
			НоваяЗапись.ХозОперация = ХозОперация;
			НоваяЗапись.СтавкаНДС = ТоварнаяПозиция.СтавкаНДС;
			НоваяЗапись.Проект = Проект;
			НоваяЗапись.СуммаБезНДС    = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			
			// Сформируем записи для корректировки себестоимости в регистрах продажи
			СформироватьРазницуСебестоимостиТоваров(РазницаСебестоимости, ТоварнаяПозиция, НоваяЗапись);
			
		ИначеЕсли ТоварнаяПозиция.КоличествоРазница < 0 Тогда
			
			ТребуетсяСписать = -ТоварнаяПозиция.КоличествоРазница;
			
			Для Каждого Партия Из ПодходящиеПартии Цикл
				
				Если ТребуетсяСписать = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Списываем = Мин(ТребуетсяСписать, Партия.КоличествоОстаток);
				ТребуетсяСписать = ТребуетсяСписать - Списываем;
				
				НоваяЗапись = Движения.ПартииТоваровКомпании.ДобавитьПриход();
				НоваяЗапись.Регистратор = Ссылка;
				НоваяЗапись.Период = Дата;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ТоварнаяПозиция,
					"Номенклатура,ХарактеристикаНоменклатуры,СтавкаНДС");
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭтотОбъект, "СкладКомпании,ХозОперация,Проект");
				НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Партия, "Партия,СтатусПартии");
				
				НоваяЗапись.Количество = -Списываем;
				
				Если Списываем = Партия.КоличествоОстаток Тогда
					
					НоваяЗапись.Сумма = -Партия.СуммаОстаток;
					НоваяЗапись.СуммаНДС = -Партия.СуммаНДСОстаток;
					НоваяЗапись.СуммаУпр = -Партия.СуммаУпрОстаток;
					НоваяЗапись.СуммаНДСУпр = -Партия.СуммаНДСУпрОстаток;
					
				Иначе 
					
					НоваяЗапись.Сумма = -Партия.СуммаОстаток * Списываем / Партия.КоличествоОстаток;
					НоваяЗапись.СуммаНДС = -Партия.СуммаНДСОстаток * Списываем / Партия.КоличествоОстаток;
					НоваяЗапись.СуммаУпр = -Партия.СуммаУпрОстаток * Списываем / Партия.КоличествоОстаток;
					НоваяЗапись.СуммаНДСУпр = -Партия.СуммаНДСУпрОстаток * Списываем / Партия.КоличествоОстаток;
					
				КонецЕсли;
				
				НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
				НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				
				СуммаРеглНом = СуммаРеглНом - НоваяЗапись.Сумма;
				СуммаРеглНомНДС = СуммаРеглНомНДС - НоваяЗапись.СуммаНДС;
				СуммаУпрНом = СуммаУпрНом - НоваяЗапись.СуммаУпр;
				СуммаУпрНомНДС = СуммаУпрНомНДС - НоваяЗапись.СуммаНДСУпр;
				
			КонецЦикла;
			
			Если ТребуетсяСписать > 0 Тогда
				
				Если ОтрицательныеОстаткиРазрешены Тогда
					
					НоваяЗапись = Движения.ПартииТоваровКомпании.ДобавитьПриход();
					НоваяЗапись.Регистратор = Ссылка;
					НоваяЗапись.Период = Дата;
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ТоварнаяПозиция,
						"Номенклатура,ХарактеристикаНоменклатуры,СтавкаНДС");
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭтотОбъект, "СкладКомпании,ХозОперация,Проект");
					НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
					НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
					НоваяЗапись.Партия = ДополнительныеСвойства.ПартииТоваров.ПартияОтрицательныхОстатков;
					
					НоваяЗапись.Количество = -ТребуетсяСписать;
					НоваяЗапись.Сумма = -СуммаРеглНом;
					НоваяЗапись.СуммаНДС = -СуммаРеглНомНДС;
					НоваяЗапись.СуммаУпр = -СуммаУпрНом;
					НоваяЗапись.СуммаНДСУпр = -СуммаУпрНомНДС;
					НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
					НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
					
				Иначе
					
					СтрокиТоваровСНехваткой = Товары
						.НайтиСтроки(Новый Структура("Номенклатура", ТоварнаяПозиция.Номенклатура));
					НомерСтроки = "";
					
					Если СтрокиТоваровСНехваткой.Количество() > 0 Тогда
						
						НомерСтроки = СтрокиТоваровСНехваткой[0].НомерСтроки;
						
					КонецЕсли;
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Нехватка товара ""%1 [%2]"" в строке ""%3"" по партии в количестве ""%4"".'"),
							ТоварнаяПозиция.Номенклатура,
							ТоварнаяПозиция.НоменклатураАртикул,
							НомерСтроки,
							Строка(ТребуетсяСписать)
						),
						ЭтотОбъект,
						,
						,
						Отказ
					);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НоваяЗапись = Движения.ПартииТоваровКомпании.ДобавитьПриход();
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период = Дата;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТоварнаяПозиция,
				"Номенклатура,ХарактеристикаНоменклатуры,СтавкаНДС");
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭтотОбъект, "СкладКомпании,ХозОперация,Проект");
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
			НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
			НоваяЗапись.Партия = ДополнительныеСвойства.ПартииТоваров.ПартияОтрицательныхОстатков;
			
			НоваяЗапись.Количество = ТоварнаяПозиция.КоличествоРазница;
			НоваяЗапись.Сумма = СуммаРеглНом;
			НоваяЗапись.СуммаНДС = СуммаРеглНомНДС;
			НоваяЗапись.СуммаУпр = СуммаУпрНом;
			НоваяЗапись.СуммаНДСУпр = СуммаУпрНомНДС;
			НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			НоваяЗапись.Партия = ДополнительныеСвойства.ПартииТоваров.ПартияДок;
			
			Если ДополнительныеСвойства.ПартииТоваров.ОснованиеХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
				
				НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
				
			Иначе
				
				НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Учем новую себестоимость при записи в регистр
	ВыполнитьДвиженияПоСебестоимости(РазницаСебестоимости);
	
	Движения.ПартииТоваровКомпании.Записать();
	
	Если НЕ Отказ Тогда
		ВыполнитьДвиженияПоГТД(Отказ, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ОстаткиПартийТоваров(Номенклатура)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПартииТоваровКомпании.Партия
		|ПОМЕСТИТЬ ПартииВОснованиях
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ПартииТоваровКомпании.Регистратор В (&Основания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.КоличествоОстаток,
		|	ПартииТоваровКомпанииОстатки.Партия,
		|	ПартииТоваровКомпанииОстатки.СтатусПартии,
		|	ПартииТоваровКомпанииОстатки.СуммаОстаток,
		|	ПартииТоваровКомпанииОстатки.СуммаУпрОстаток,
		|	ПартииТоваровКомпанииОстатки.СуммаНДСОстаток,
		|	ПартииТоваровКомпанииОстатки.СуммаНДСУпрОстаток,
		|	ПартииТоваровКомпанииОстатки.Партия <> &ПартияДок КАК Приоритет
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|		&Период,
		|		СкладКомпании = &СкладКомпании
		|		И Партия В (ВЫБРАТЬ ПартииВОснованиях.Партия Из ПартииВОснованиях)
		|		И Номенклатура В (&СписокНоменклатуры)
		|	) КАК ПартииТоваровКомпанииОстатки
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет"
	);
	
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("ПартияДок", ДополнительныеСвойства.ПартииТоваров.ПартияДок);
	Запрос.УстановитьПараметр("Основания", ДополнительныеСвойства.ПартииТоваров.Основания);
	Запрос.УстановитьПараметр("СписокНоменклатуры" , Номенклатура);
	Запрос.УстановитьПараметр("Период", МоментВремени());
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РазницаСебестоимостиПустая()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("ХарактеристикаНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Партия", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваров"));
	Результат.Колонки.Добавить("СтатусПартии", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПартий"));
	Результат.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("СуммаНДСУпр", Новый ОписаниеТипов("Число"));
	Возврат Результат;
	
КонецФункции

Функция ЭтоУслуга(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	
КонецФункции

Функция ПозицияНеИзменялась(ТоварнаяПозиция)
	
	Возврат ТоварнаяПозиция.КоличествоРазница = 0
		И ТоварнаяПозиция.СуммаРозничнаяРазница = 0
		И ТоварнаяПозиция.СуммаВсегоРазница = 0
		И ТоварнаяПозиция.СуммаНДСРазница = 0;
	
КонецФункции

Функция ВыполнитьДвиженияПоУслугам(ТаблицаНоменклатуры, Отказ, Ошибки)
	
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	СуммаПоКоличествуБаз     = 0; СуммаПоКоличествуНДСБаз     = 0;
	СуммаПоСуммеБаз          = 0; СуммаПоСуммеНДСБаз          = 0;
	СуммаНаДоходыИРасходыБаз = 0; СуммаНаДоходыИРасходыНДСБаз = 0;
	МассивНаДоходыИРасходы = Новый Массив;
	СтрПартий = ПартииТоваровПоСтратегииСписания();
	// получим набор услуг для распределения суммы на товары
	Для Каждого стрНом Из ТаблицаНоменклатуры Цикл
		Если стрНом.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		Если стрНом.Номенклатура.СпособРаспределенияДопРасходов = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
			СуммаПоКоличествуБаз = СуммаПоКоличествуБаз + стрНом.СуммаВсегоРазница;
			СуммаПоКоличествуНДСБаз = СуммаПоКоличествуНДСБаз + стрНом.СуммаНДСРазница;
		ИначеЕсли стрНом.Номенклатура.СпособРаспределенияДопРасходов = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы Тогда
			СуммаНаДоходыИРасходыБаз = СуммаНаДоходыИРасходыБаз + стрНом.СуммаВсегоРазница;
			СуммаНаДоходыИРасходыНДСБаз = СуммаНаДоходыИРасходыНДСБаз + стрНом.СуммаНДСРазница;
			МассивНаДоходыИРасходы.Добавить(стрНом);
		Иначе
			СуммаПоСуммеБаз = СуммаПоСуммеБаз + стрНом.СуммаВсегоРазница;
			СуммаПоСуммеНДСБаз = СуммаПоСуммеНДСБаз + стрНом.СуммаНДСРазница;
		КонецЕсли;
	КонецЦикла;
	
	// сразу переведем суммы
	ВалютаУпр                = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл               = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// упр
	СуммаПоКоличеству        = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоКоличествуБаз, ВалютаДокумента, КурсДокумента, ВалютаУпр, КурсВалютыУпр); 
	СуммаПоСумме             = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоСуммеБаз, ВалютаДокумента, КурсДокумента, ВалютаУпр, КурсВалютыУпр); 
	СуммаНаДоходыИРасходы    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаНаДоходыИРасходыБаз, ВалютаДокумента, КурсДокумента, ВалютаУпр, КурсВалютыУпр);
	СуммаНаДоходыИРасходыНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаНаДоходыИРасходыНДСБаз, ВалютаДокумента, КурсДокумента, ВалютаУпр, КурсВалютыУпр);
	
	// регл
	СуммаПоКоличествуРегл        = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоКоличествуБаз, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата); 
	СуммаПоКоличествуНДСРегл     = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоКоличествуНДСБаз, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
	СуммаПоСуммеРегл             = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоСуммеБаз, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата); 
	СуммаПоСуммеНДСРегл          = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоСуммеНДСБаз, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
	// получим товары после проведения основных изысканий
	Если СуммаПоКоличеству <> 0 ИЛИ СуммаПоСумме <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток > 0
		|			ТОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток
		|		ИНАЧЕ -ПартииТоваровКомпанииОстатки.КоличествоОстаток
		|	КОНЕЦ КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпанииОстатки.СуммаОстаток > 0
		|			ТОГДА ПартииТоваровКомпанииОстатки.СуммаОстаток
		|		ИНАЧЕ -ПартииТоваровКомпанииОстатки.СуммаОстаток
		|	КОНЕЦ КАК СуммаОстаток,
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпанииОстатки.СуммаУпрОстаток > 0
		|			ТОГДА ПартииТоваровКомпанииОстатки.СуммаУпрОстаток
		|		ИНАЧЕ -ПартииТоваровКомпанииОстатки.СуммаУпрОстаток
		|	КОНЕЦ КАК СуммаУпрОстаток,
		|	ПартииТоваровКомпанииОстатки.СтатусПартии
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|			&Граница,
		|			Партия = &Партия
		|				И СкладКомпании = &СкладКомпании) КАК ПартииТоваровКомпанииОстатки
		|ИТОГИ
		|	СУММА(КоличествоОстаток),
		|	СУММА(СуммаОстаток),
		|	СУММА(СуммаУпрОстаток)
		|ПО
		|	ОБЩИЕ";
		Запрос.УстановитьПараметр("Партия"        , СтрПартий.ПартияДок);
		Запрос.УстановитьПараметр("СкладКомпании" , СкладКомпании);
		Запрос.УстановитьПараметр("Граница"       , Новый Граница(МоментВремени(),ВидГраницы.Включая));
		
		ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаИтоги.Следующий() Тогда
			Если СуммаПоКоличеству <> 0 И ВыборкаИтоги.КоличествоОстаток = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось распределить услуги по количеству так как количество товаров в партии 0.'"),ЭтотОбъект,,,Отказ);
			КонецЕсли;
			
			Если СуммаПоСумме <> 0 И ВыборкаИтоги.СуммаОстаток = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось распределить услуги по сумме так как сумма товаров в партии 0.'"),ЭтотОбъект,,,Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			// распишем услуги по количеству
			ВыборкаДетали     = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СуммаНаЕдиницу    = Окр(СуммаПоКоличеству/ВыборкаИтоги.КоличествоОстаток,2,РежимОкругления.Окр15как20);
			СуммаОсталось     = СуммаПоКоличеству;
			
			СуммаНаЕдиницуРегл    = Окр(СуммаПоКоличествуРегл/ВыборкаИтоги.КоличествоОстаток,2,РежимОкругления.Окр15как20);
			СуммаНаЕдиницуНДСРегл = Окр(СуммаПоКоличествуНДСРегл/ВыборкаИтоги.КоличествоОстаток,2,РежимОкругления.Окр15как20);
			СуммаОсталосьРегл     = СуммаПоКоличествуРегл;
			СуммаОсталосьНДСРегл  = СуммаПоКоличествуНДСРегл;
			
			Пока ВыборкаДетали.Следующий() Цикл
				Если СуммаОсталось = 0 Тогда Прервать; КонецЕсли;
				
				СуммаОприх = СуммаНаЕдиницу*ВыборкаДетали.КоличествоОстаток;
				СуммаОприхРегл = СуммаНаЕдиницуРегл*ВыборкаДетали.СуммаОстаток;
				СуммаОприхНДСРегл = СуммаНаЕдиницуНДСРегл*ВыборкаДетали.СуммаОстаток;
				Если СуммаОприх <> 0 Тогда
					СуммаОсталось = СуммаОсталось - СуммаОприх;
					СуммаОсталосьРегл = СуммаОсталосьРегл - СуммаОприхРегл;
					СуммаОсталосьНДСРегл = СуммаОсталосьНДСРегл - СуммаОприхНДСРегл;
					
					НоваяЗапись = Движения.ПартииТоваровКомпании.Добавить();
					НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
					НоваяЗапись.Период                     = Дата;
					НоваяЗапись.СкладКомпании              = СкладКомпании;
					НоваяЗапись.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
					НоваяЗапись.Регистратор                = Ссылка;
					НоваяЗапись.Номенклатура               = ВыборкаДетали.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаДетали.ХарактеристикаНоменклатуры;
					НоваяЗапись.СтатусПартии               = ВыборкаДетали.СтатусПартии;
					НоваяЗапись.Партия                     = СтрПартий.ПартияДок;
					
					НоваяЗапись.Количество                 = 0;
					НоваяЗапись.Сумма                      = СуммаОприхРегл;
					НоваяЗапись.СуммаУпр                   = СуммаОприх;
					НоваяЗапись.СуммаНДС                   = СуммаОприхНДСРегл;
					
					НоваяЗапись.ХозОперация = ХозОперация;
				КонецЕсли;
			КонецЦикла;
			
			Если СуммаОсталось <> 0 ИЛИ СуммаОсталосьРегл <> 0 ИЛИ СуммаОсталосьНДСРегл <> 0 И НоваяЗапись <> Неопределено Тогда
				НоваяЗапись.Сумма    = НоваяЗапись.Сумма + СуммаОсталосьРегл;
				НоваяЗапись.СуммаНДС = НоваяЗапись.СуммаНДС + СуммаОсталосьНДСРегл;
				НоваяЗапись.СуммаУпр = НоваяЗапись.СуммаУпр + СуммаОсталось;
			КонецЕсли;
			
			
			// распишем услуги по сумме
			ВыборкаДетали.Сбросить();
			ВыборкаДетали = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СуммаНаЕдиницу = Окр(СуммаПоСумме/ВыборкаИтоги.СуммаОстаток,2,РежимОкругления.Окр15как20);
			СуммаОсталось = СуммаПоСумме;
			
			СуммаНаЕдиницуРегл    = Окр(СуммаПоСуммеРегл/ВыборкаИтоги.СуммаОстаток,2,РежимОкругления.Окр15как20);
			СуммаНаЕдиницуНДСРегл = Окр(СуммаПоСуммеНДСРегл/ВыборкаИтоги.СуммаОстаток,2,РежимОкругления.Окр15как20);
			СуммаОсталосьРегл     = СуммаПоСуммеРегл;
			СуммаОсталосьНДСРегл  = СуммаПоСуммеНДСРегл;

			Пока ВыборкаДетали.Следующий() Цикл
				Если СуммаОсталось = 0 Тогда Прервать; КонецЕсли;
				
				СуммаОприх = СуммаНаЕдиницу*ВыборкаДетали.СуммаОстаток;
				СуммаОприхРегл = СуммаНаЕдиницуРегл*ВыборкаДетали.СуммаОстаток;
				СуммаОприхНДСРегл = СуммаНаЕдиницуНДСРегл*ВыборкаДетали.СуммаОстаток;
				Если СуммаОприх <> 0 Тогда
					СуммаОсталось = СуммаОсталось - СуммаОприх;
					СуммаОсталосьРегл = СуммаОсталосьРегл - СуммаОприхРегл;
					СуммаОсталосьНДСРегл = СуммаОсталосьНДСРегл - СуммаОприхНДСРегл;
					
					НоваяЗапись = Движения.ПартииТоваровКомпании.Добавить();
					
					НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
					НоваяЗапись.Период                     = Дата;
					НоваяЗапись.СкладКомпании              = СкладКомпании;
					НоваяЗапись.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
					НоваяЗапись.Регистратор                = Ссылка;
					НоваяЗапись.Номенклатура               = ВыборкаДетали.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаДетали.ХарактеристикаНоменклатуры;
					НоваяЗапись.СтатусПартии               = ВыборкаДетали.СтатусПартии;
					НоваяЗапись.Партия                     = СтрПартий.ПартияДок;
					
					НоваяЗапись.Количество                 = 0;
					НоваяЗапись.Сумма                      = СуммаОприхРегл;
					НоваяЗапись.СуммаУпр                   = СуммаОприх;
					НоваяЗапись.СуммаНДС                   = СуммаОприхНДСРегл;
					
					НоваяЗапись.ХозОперация = ХозОперация;
				КонецЕсли;
			КонецЦикла;
			
			Если СуммаОсталось <> 0 ИЛИ СуммаОсталосьРегл <> 0 ИЛИ СуммаОсталосьНДСРегл <> 0 И НоваяЗапись <> Неопределено Тогда
				НоваяЗапись.Сумма    = НоваяЗапись.Сумма + СуммаОсталосьРегл;
				НоваяЗапись.СуммаНДС = НоваяЗапись.СуммаНДС + СуммаОсталосьНДСРегл;
				НоваяЗапись.СуммаУпр = НоваяЗапись.СуммаУпр + СуммаОсталось;
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось распределить услуги так как товаров в партии не осталось.'"),ЭтотОбъект,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Запишем сумму на доходы и расходы
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	ПодразделениеПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеКомпании, Дата);
	Если ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций Тогда
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеПодразделениеКомпании);
	Иначе	
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	КонецЕсли;
	
	Если СуммаНаДоходыИРасходы <> 0 И СтрПартий.ПартияДок.ХозОперация<>Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
		СуммаУслуг = 0;
		Для Каждого СтрокаУслуги Из МассивНаДоходыИРасходы Цикл
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение=ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = СтрокаУслуги.Номенклатура.СтатьяДопРасходов;
			НаборЗаписейДиР.ВУпрВалюте = (ШапкаДокумента.ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
			НаборЗаписейДиР.Расход = СтрокаУслуги.СуммаВсегоРазница;
			СуммаУслуг = СуммаУслуг+СтрокаУслуги.СуммаВсегоРазница;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЦикла;
		
		// способ ведения не по подразделениям то ничего не будем корректировать
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны  И СуммаУслуг<>0 Тогда	
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение = ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Ложь;
			НаборЗаписейДиР.Доход = СуммаУслуг;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ВыполнитьДвиженияПоУслугам()

Функция ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Ошибки)
	
	Если ДополнительныеСвойства.Свойство("СпособУчетаВзаиморасчетовПоРасчетнымДокументам") Тогда
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам = ДополнительныеСвойства.СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	Иначе
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	КонецЕсли;
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		Возврат 0;
	КонецЕсли;
	
	// получим сумму документа
	СуммаДок = Товары.Итог("СуммаВсегоРазница");
	Если СуммаДок = 0 Тогда
		Возврат 0;
	КонецЕсли;
	СтрОснований = ПартииТоваровПоСтратегииСписания();
	
	НаборВзаиморасчетов = Движения.ВзаиморасчетыКомпании;
	НоваяЗапись = НаборВзаиморасчетов.Добавить();
	НоваяЗапись.Регистратор = Ссылка;
	НоваяЗапись.Период = Дата;
	НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяЗапись.Контрагент = Контрагент;
	НоваяЗапись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
	Если СтрОснований.ПартияДок = СтрОснований.ПартияОтрицательныхОстатков Тогда
		// сделка - не партия, а документ-основание
		НоваяЗапись.Сделка = ДокументОснование;
	Иначе
		НоваяЗапись.Сделка = СтрОснований.ПартияДок;
	КонецЕсли;
	НоваяЗапись.Сумма    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДок, ВалютаДокумента, КурсДокумента,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Дата);
	НоваяЗапись.СуммаУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДок, ВалютаДокумента, КурсДокумента, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), КурсВалютыУпр);
	НоваяЗапись.СуммаБаз = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДок, ВалютаДокумента, КурсДокумента, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Дата);
	НоваяЗапись.ХозОперация = ХозОперация;
	НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
	НаборВзаиморасчетов.Записать();
	
	Возврат 0;
	
КонецФункции // ВыполнитьДвиженияПоВзаиморасчетам()

Функция ВыполнитьДвиженияПоГТД(Отказ, Ошибки)
	
	ОтрицательныеОстаткиРазрешены = ДополнительныеСвойства.ОтрицательныеОстаткиРазрешеныПоПартиям;
	СтрПартий = ПартииТоваровПоСтратегииСписания();
	
	РежимВыводаКода = ДополнительныеСвойства.РежимВыводаКода;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ГТД КАК ГТД,
	|	СУММА(КорректировкаПоступленияТовары.КоличествоРазница * КорректировкаПоступленияТовары.Коэффициент) КАК Количество
	|ПОМЕСТИТЬ ДвиженияГТД
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.КоличествоРазница <> 0
	|	И КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|	И КорректировкаПоступленияТовары.ГТД = КорректировкаПоступленияТовары.ГТДПоДокументуПоступления
	|	И НЕ КорректировкаПоступленияТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ГТД,
	|	КорректировкаПоступленияТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ГТД,
	|	СУММА(КорректировкаПоступленияТовары.Количество * КорректировкаПоступленияТовары.Коэффициент)
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.ГТД <> КорректировкаПоступленияТовары.ГТДПоДокументуПоступления
	|	И КорректировкаПоступленияТовары.Количество <> 0
	|	И КорректировкаПоступленияТовары.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|	И НЕ КорректировкаПоступленияТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ГТДПоДокументуПоступления,
	|	СУММА(-КорректировкаПоступленияТовары.КоличествоПоДокументуПоступления * КорректировкаПоступленияТовары.Коэффициент)
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.ГТД <> КорректировкаПоступленияТовары.ГТДПоДокументуПоступления
	|	И КорректировкаПоступленияТовары.Количество <> 0
	|	И КорректировкаПоступленияТовары.ПоДокументуПоступления = ИСТИНА
	|	И НЕ КорректировкаПоступленияТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступленияТовары.ГТДПоДокументуПоступления,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ГТДПоДокументуПоступления,
	|	КорректировкаПоступленияТовары.КоличествоРазница * КорректировкаПоступленияТовары.Коэффициент
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.ГТД <> КорректировкаПоступленияТовары.ГТДПоДокументуПоступления
	|	И КорректировкаПоступленияТовары.Количество = 0
	|	И НЕ КорректировкаПоступленияТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|	И КорректировкаПоступленияТовары.КоличествоРазница <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступленияТовары.ГТДПоДокументуПоступления,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.КоличествоРазница * КорректировкаПоступленияТовары.Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияГТД.Номенклатура КАК Номенклатура,
	|	ДвиженияГТД.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДвиженияГТД.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ДвиженияГТД.ГТД КАК ГТД,
	|	ДвиженияГТД.Количество КАК Количество,
	|	ДвиженияГТД.Номенклатура.Код КАК НоменклатураКод,
	|	ДвиженияГТД.Номенклатура.Производитель КАК НоменклатураПроизводитель
	|ИЗ
	|	ДвиженияГТД КАК ДвиженияГТД
	|ГДЕ
	|	ДвиженияГТД.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// получим список ГТД
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпанииОстатки.ГТД КАК ГТД,
	|	СУММА(ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании.Остатки(
	|			&Момент,
	|			Партия = &Партия
	|				И СкладКомпании = &СкладКомпании) КАК ГТДПартийТоваровКомпанииОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпанииОстатки.Номенклатура,
	|	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпанииОстатки.ГТД";
	Запрос.УстановитьПараметр("Момент"       , МоментВремени());
	Запрос.УстановитьПараметр("Партия"       , СтрПартий.ПартияДок);
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	ОстаткиГТД = Запрос.Выполнить().Выгрузить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если РежимВыводаКода = "КодИАртикул" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2'"), 
							СокрЛП(Выборка.НоменклатураКод), Выборка.НоменклатураАртикул);
		ИначеЕсли РежимВыводаКода = "АртикулКодПроизводитель" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2, %3'"),
							СокрЛП(Выборка.НоменклатураКод),
							Выборка.НоменклатураАртикул,
							Выборка.НоменклатураПроизводитель);
		ИначеЕсли 	РежимВыводаКода = "КодИПроизводитель" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2'"),
							СокрЛП(Выборка.НоменклатураКод),
							Выборка.НоменклатураПроизводитель);
		ИначеЕсли РежимВыводаКода = "АртикулИПроизводитель" Тогда
			СтрокаКода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1, %2'"),
							Выборка.НоменклатураАртикул,
							Выборка.НоменклатураПроизводитель);
		ИначеЕсли РежимВыводаКода = "Артикул" Тогда
			СтрокаКода = Выборка.НоменклатураАртикул;
		Иначе
			СтрокаКода = СокрЛП(Выборка.НоменклатураКод);
		КонецЕсли;
		
		Если Выборка.Количество < 0 И НЕ ОтрицательныеОстаткиРазрешены Тогда
			
			// если расход проверим можно ли его отсторнировать
			НайденныеГТД = ОстаткиГТД.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД",Выборка.Номенклатура,Выборка.ХарактеристикаНоменклатуры,Выборка.ГТД));
			Если НайденныеГТД.Количество() = 0 Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора); 
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НомерСтроки = НайденныеСтроки[0].НомерСтроки;
				Иначе	
				    НомерСтроки = "";
				КонецЕсли;
			
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Нехватка товара ""%1 [%2]"" в строке ""%3"" с ГТД ""%4"" в количестве %5.'"),
						Выборка.Номенклатура,
						СтрокаКода,
						НомерСтроки,
						Выборка.ГТД,
						Строка(-Выборка.Количество)
					),
					ЭтотОбъект,,,
					Отказ
				);
				Продолжить;
			КонецЕсли;
			
			СтрокаГТД = НайденныеГТД[0];
			Если СтрокаГТД.КоличествоОстаток < -Выборка.Количество Тогда  
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора); 
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НомерСтроки = НайденныеСтроки[0].НомерСтроки;
				Иначе	
				    НомерСтроки = "";
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Нехватка товара ""%1 [%2]"" в строке ""%3"" с ГТД ""%4"" в количестве %5.'"),
						Выборка.Номенклатура,
						СтрокаКода,
						НомерСтроки,	
						Выборка.ГТД,
						Строка(-Выборка.Количество-СтрокаГТД.КоличествоОстаток)
					),
					ЭтотОбъект,,,
					Отказ
				);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// если товара хватает спишем его
		НоваяЗапись = Движения.ГТДПартийТоваровКомпании.Добавить();
		
		НоваяЗапись.Регистратор                = Ссылка;
		НоваяЗапись.Период                     = Дата;
		НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
		НоваяЗапись.ХозОперация                = ХозОперация;
		НоваяЗапись.Номенклатура               = Выборка.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяЗапись.ГТД                        = Выборка.ГТД;
		НоваяЗапись.СкладКомпании              = СкладКомпании;
		НоваяЗапись.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
		НоваяЗапись.Партия                     = СтрПартий.ПартияДок;
		НоваяЗапись.Количество                 = Выборка.Количество;
	КонецЦикла;
	
КонецФункции // ВыполнитьДвиженияПоГТД()

Процедура СформироватьРазницуСебестоимостиТоваров(ТаблицаСебестоимости, стрНоменклатура, НоваяЗапись)
	
	// Проверим не изменилась ли себестоимость товаров             
	Если стрНоменклатура.КоличествоПоДокументуПоступления = 0 ИЛИ стрНоменклатура.Количество = 0 Тогда
		Возврат
	КонецЕсли;
	
	СуммаЗаЕдиницуТовараПоступления =
		Окр(стрНоменклатура.СуммаВсегоПоДокументуПоступления / стрНоменклатура.КоличествоПоДокументуПоступления, 2);
	СуммаЗаЕдиницуТовара = Окр(стрНоменклатура.СуммаВсего / стрНоменклатура.Количество, 2);
	КорректировкаСуммы = (СуммаЗаЕдиницуТовара <> СуммаЗаЕдиницуТовараПоступления);
	
	СуммаНДСЗаЕдиницуТовараПоступления =
		Окр(стрНоменклатура.СуммаНДСПоДокументуПоступления / стрНоменклатура.КоличествоПоДокументуПоступления, 2);
	СуммаНДСЗаЕдиницуТовара = Окр(стрНоменклатура.СуммаНДС / стрНоменклатура.Количество, 2);
	КорректировкаСуммыНДС = (СуммаНДСЗаЕдиницуТовара <> СуммаНДСЗаЕдиницуТовараПоступления);
	
	Если НЕ КорректировкаСуммы И НЕ КорректировкаСуммыНДС Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СуммаУпрДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		стрНоменклатура.СуммаВсего,
		ВалютаДокумента,
		Дата,
		Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
		Дата,
		РежимОкругления.Окр15как20);
	СуммаРеглДок = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		стрНоменклатура.СуммаВсего,
		ВалютаДокумента,
		Дата,
		Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),
		Дата,
		РежимОкругления.Окр15как20);
	СуммаУпрДокНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		стрНоменклатура.СуммаНДС,
		ВалютаДокумента,
		Дата,
		Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
		Дата,
		РежимОкругления.Окр15как20);
	СуммаРеглДокНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		стрНоменклатура.СуммаНДС,
		ВалютаДокумента,
		Дата,
		Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),
		Дата,
		РежимОкругления.Окр15как20);
		
	СуммаУпрПоступленияНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		стрНоменклатура.СуммаНДСПоДокументуПоступления,
		ВалютаДокумента,
		Дата,
		Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
		Дата,
		РежимОкругления.Окр15как20);
	СуммаРеглПоступленияНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		стрНоменклатура.СуммаНДСПоДокументуПоступления,
		ВалютаДокумента,
		Дата,
		Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),
		Дата,
		РежимОкругления.Окр15как20);
		
		
	НоваяСтрока = ТаблицаСебестоимости.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, стрНоменклатура);
	НоваяСтрока.СтатусПартии = НоваяЗапись.СтатусПартии;
	НоваяСтрока.Количество = стрНоменклатура.КоличествоПоДокументуПоступления;
	НоваяСтрока.Партия = НоваяЗапись.Партия;
	НоваяСтрока.Сумма = ?(НЕ КорректировкаСуммы, 0,
		НоваяЗапись.Сумма - Окр(СуммаРеглДок / стрНоменклатура.Количество
		* (стрНоменклатура.Количество - стрНоменклатура.КоличествоПоДокументуПоступления), 2));
	НоваяСтрока.СуммаУпр = ?(НЕ КорректировкаСуммы, 0,
		НоваяЗапись.СуммаУпр - Окр(СуммаУпрДок / стрНоменклатура.Количество
		* стрНоменклатура.КоличествоРазница, 2));
	НоваяСтрока.СуммаНДС = ?(НЕ КорректировкаСуммыНДС, 0,
		Окр(СуммаРеглДокНДС / стрНоменклатура.Количество
		* стрНоменклатура.КоличествоПоДокументуПоступления, 2) - СуммаРеглПоступленияНДС);
	НоваяСтрока.СуммаНДСУпр = ?(НЕ КорректировкаСуммыНДС, 0,
		Окр(СуммаУпрДокНДС / стрНоменклатура.Количество
		* стрНоменклатура.КоличествоПоДокументуПоступления, 2) - СуммаУпрПоступленияНДС);
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоСебестоимости(ТаблицаСебестоимости)
	
	
	Если ТаблицаСебестоимости.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Спишем себестоимость ранее списанного товара
	Для Каждого ТекущаяСтрока Из ТаблицаСебестоимости Цикл
		
		НоваяЗапись = Движения.ПартииТоваровКомпании.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяСтрока);
		НоваяЗапись.Период = Дата;
		НоваяЗапись.Регистратор   = Ссылка;
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяЗапись.СкладКомпании = СкладКомпании;
		НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(Организация, НоваяЗапись.СкладКомпании, НоваяЗапись.Период);
		НоваяЗапись.ХозОперация = ХозОперация;
		НоваяЗапись.Проект = Проект;
		НоваяЗапись.Количество = 0;
		НоваяЗапись.СуммаБезНДС    = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
		НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
		
	КонецЦикла;
	
	// Получим движения по регистрам продаж для актуализации себестоимости
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТаблицаСебестоимости ИЗ &ТаблицаСебестоимости КАК ТаблицаСебестоимости";
	Запрос.УстановитьПараметр("ТаблицаСебестоимости", ТаблицаСебестоимости);
	Запрос.Выполнить();

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продажи.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	Продажи.Автомобиль КАК Автомобиль,
		|	Продажи.Номенклатура КАК Номенклатура,
		|	Продажи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Продажи.Поставщик КАК Поставщик,
		|	Продажи.Покупатель КАК Покупатель,
		|	Продажи.СтатусПартии КАК СтатусПартии,
		|	Продажи.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	Продажи.СкладКомпании КАК СкладКомпании,
		|	Продажи.СтавкаНДС КАК СтавкаНДС,
		|	Продажи.Партия КАК Партия,
		|	Продажи.Проект КАК Проект,
		|	Продажи.ГТД КАК ГТД,
		|	Продажи.ДокументПродажи КАК ДокументПродажи,
		|	Продажи.Количество КАК КоличествоРеализации,
		|	ТаблицаСебестоимости.Количество КАК Количество,
		|	ТаблицаСебестоимости.Сумма КАК Сумма,
		|	ТаблицаСебестоимости.СуммаУпр КАК СуммаУпр,
		|	ТаблицаСебестоимости.СуммаНДС КАК СуммаНДС,
		|	ТаблицаСебестоимости.СуммаНДСУпр КАК СуммаНДСУпр
		|ИЗ
		|	ТаблицаСебестоимости КАК ТаблицаСебестоимости
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи КАК Продажи
		|		ПО ТаблицаСебестоимости.Номенклатура = Продажи.Номенклатура
		|			И ТаблицаСебестоимости.ХарактеристикаНоменклатуры = Продажи.ХарактеристикаНоменклатуры
		|			И ТаблицаСебестоимости.Партия = Продажи.Партия
		|			И ТаблицаСебестоимости.СтатусПартии = Продажи.СтатусПартии
		|			И (Продажи.Период <= &ДатаДокумента)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Продажи.Период УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СуммаУпр),
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(СуммаНДСУпр)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристикиНоменклатуры = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристикиНоменклатуры.Следующий() Цикл
			
			КоличествоРаспределить = ВыборкаХарактеристикиНоменклатуры.Количество;
			СуммаРаспределить = ВыборкаХарактеристикиНоменклатуры.Сумма;
			СуммаУпрРаспределить = ВыборкаХарактеристикиНоменклатуры.СуммаУпр;
			СуммаНДСРаспределить = ВыборкаХарактеристикиНоменклатуры.СуммаНДС;
			СуммаНДСУпрРаспределить = ВыборкаХарактеристикиНоменклатуры.СуммаНДСУпр;
			
			Выборка = ВыборкаХарактеристикиНоменклатуры.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НоваяЗапись = Движения.Продажи.Добавить();
				НоваяЗапись.Период = Дата;
				НоваяЗапись.Регистратор = Ссылка;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка,, "Количество,Сумма,СуммаУпр,СуммаНДС,СуммаНДСУпр");
				
				Если КоличествоРаспределить <= Выборка.КоличествоРеализации Тогда
					
					НоваяЗапись.Себестоимость = СуммаРаспределить;
					НоваяЗапись.СуммаНДСВходящий = СуммаНДСРаспределить;
					НоваяЗапись.СебестоимостьБезНДС = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
					НоваяЗапись.СебестоимостьУпр = СуммаУпрРаспределить;
					НоваяЗапись.СуммаНДСВходящийУпр = СуммаНДСУпрРаспределить;
					НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
					КоличествоРаспределить = 0;
					
				Иначе
					
					Себестоимость = Окр(СуммаРаспределить / КоличествоРаспределить * Выборка.КоличествоРеализации, 2);
					СуммаНДСВходящий = Окр(СуммаНДСРаспределить / КоличествоРаспределить * Выборка.КоличествоРеализации, 2);
					СебестоимостьУпр = Окр(СуммаУпрРаспределить / КоличествоРаспределить * Выборка.КоличествоРеализации, 2);
					СуммаНДСВходящийУпр = Окр(СуммаНДСУпрРаспределить / КоличествоРаспределить * Выборка.КоличествоРеализации, 2);
					НоваяЗапись.Себестоимость = Себестоимость;
					НоваяЗапись.СуммаНДСВходящий = СуммаНДСВходящий;
					НоваяЗапись.СебестоимостьБезНДС = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
					НоваяЗапись.СебестоимостьУпр = СебестоимостьУпр;
					НоваяЗапись.СуммаНДСВходящийУпр = СуммаНДСВходящийУпр;
					НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
					КоличествоРаспределить = КоличествоРаспределить - Выборка.КоличествоРеализации;
					СуммаРаспределить = СуммаРаспределить - Себестоимость;
					СуммаНДСРаспределить = СуммаНДСРаспределить - СуммаНДСВходящий;
					СуммаУпрРаспределить = СуммаУпрРаспределить - СебестоимостьУпр;
					СуммаНДСУпрРаспределить = СуммаНДСУпрРаспределить - СуммаНДСВходящийУпр;
					
				КонецЕсли;
				
				// Зафиксируем себестоимость в реализованных товарах
				Если Выборка.СтатусПартии <> Перечисления.СтатусыПартий.ТоварКупленный
					И Сделка.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия
					И ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж Тогда
					
					НоваяЗаписьРеализованныеТовары = Движения.РеализованныеТовары.Добавить();
					НоваяЗаписьРеализованныеТовары.Период = Дата;
					НоваяЗаписьРеализованныеТовары.Регистратор = Ссылка;
					НоваяЗаписьРеализованныеТовары.Контрагент = Контрагент;
					НоваяЗаписьРеализованныеТовары.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
					НоваяЗаписьРеализованныеТовары.Номенклатура = Выборка.Номенклатура;
					НоваяЗаписьРеализованныеТовары.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
					НоваяЗаписьРеализованныеТовары.ДокументПередачи = Сделка;
					НоваяЗаписьРеализованныеТовары.ГТД = Выборка.ГТД;
					НоваяЗаписьРеализованныеТовары.СуммаУпр = НоваяЗапись.СебестоимостьУпр;
					НоваяЗаписьРеализованныеТовары.СуммаНДСУпр = НоваяЗапись.СуммаНДСВходящийУпр;
					НоваяЗаписьРеализованныеТовары.СуммаБезНДСУпр = НоваяЗапись.СебестоимостьБезНДСУпр;
					НоваяЗаписьРеализованныеТовары.СуммаРегл = НоваяЗапись.Себестоимость;
					НоваяЗаписьРеализованныеТовары.СуммаНДС = НоваяЗапись.СуммаНДСВходящий;
					НоваяЗаписьРеализованныеТовары.СуммаБезНДС = НоваяЗапись.СебестоимостьБезНДС;
					
				КонецЕсли;
					
				Если КоличествоРаспределить = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Продажи.Записать();
	Движения.РеализованныеТовары.Записать();
	
КонецПроцедуры

#КонецОбласти

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Предупреждать", Истина);
	
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

Процедура ПровестиПоКодамМаркировки(РежимПроведения)
	
	// Отменим записи состояний документа
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
	ТаблицаМаркировки = НаборЗаписейСостоянияКодовМаркировки.ТаблицаКодовМаркировки();
	
	ТаблицаМаркировки.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	ТаблицаМаркировки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	// Разберем маркировку на состовляющие для поиска
	Для Каждого ТекущийКодМаркировки Из ТаблицаМаркировки Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМаркировки =
			МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущийКодМаркировки.КодМаркировки);
		
		// Это не маркировка товара
		Если СтруктураМаркировки.ТипИдентификатораТовара
			<> ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийКодМаркировки.GTIN = СтруктураМаркировки.GTIN;
		ТекущийКодМаркировки.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
		
	КонецЦикла;
	
	ТекущиеСтатусыМаркировки = РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(
		ТаблицаМаркировки,
		МоментВремени()
	);
	
	// Проверим коды на выбытие
	СостоянияВОбороте = Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
	
	// Коды Маркировок, которые надо вывести из оборота
	ТаблицаВывода = ТекущиеСтатусыМаркировки.СкопироватьКолонки();
	
	// Таблица маркирвки, которые необходимо вернуть
	ТаблицаВвода = ТекущиеСтатусыМаркировки.СкопироватьКолонки();
	ТаблицаНеПодтвержденных = ТекущиеСтатусыМаркировки.СкопироватьКолонки();
	
	Для Каждого ТекущаяСтрока Из КодыМаркировки Цикл
		СтрокаМаркировки = ТекущиеСтатусыМаркировки.Найти(ТекущаяСтрока.КодМаркировки, "КодМаркировки");
		СтрокаТоваров = Товары.Найти(ТекущаяСтрока.ИдентификаторТовара, "ИдентификаторТовара");
		ЭтоВозврат = ТекущаяСтрока.Возврат;
		Если СтрокаМаркировки = Неопределено И СтрокаТоваров <> Неопределено Тогда
			НоваяСтрока = ТаблицаВывода.Добавить();
			НоваяСтрока.КодМаркировки = ТекущаяСтрока.КодМаркировки;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		ИначеЕсли СостоянияВОбороте.Найти(СтрокаМаркировки.Состояние) <> Неопределено И ЭтоВозврат Тогда
			НоваяСтрока = ТаблицаВвода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМаркировки);
		ИначеЕсли СтрокаТоваров <> Неопределено И НЕ СтрокаТоваров.Подтверждение Тогда
			НоваяСтрока = ТаблицаНеПодтвержденных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМаркировки);
		КонецЕсли;
	КонецЦикла;
	
	// Для перемаркируемых поставим состояние выбытия из оборота
	ОчищатьЗаписи = Истина;
	УдалятьДвижения = Истина;
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
	НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
	
	// Выведем указанную маркировку из оборота
	Если ТаблицаВывода.Количество() > 0 Тогда
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборот;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаВывода;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
		ОчищатьЗаписи = Ложь;
		УдалятьДвижения = Ложь;
	КонецЕсли;
	
	// Введем в оборот возврат
	Если ТаблицаВвода.Количество() > 0 Тогда
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаВвода;
		НаборЗаписейСостоянияКодовМаркировки.ОчищатьЗаписи = ОчищатьЗаписи;
		НаборЗаписейСостоянияКодовМаркировки.УдалятьДвижения = УдалятьДвижения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Для неподтверженных товаров с кодами сделаем в обороте
	Если ТаблицаНеПодтвержденных.Количество() > 0 Тогда
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаНеПодтвержденных;
		НаборЗаписейСостоянияКодовМаркировки.ОчищатьЗаписи = ОчищатьЗаписи;
		НаборЗаписейСостоянияКодовМаркировки.УдалятьДвижения = УдалятьДвижения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПрефиксКодаДляСообщений(Номенклатура)
	
	Артикул = Номенклатура.НоменклатураАртикул;
	Код = Номенклатура.НоменклатураКод;
	Производитель = Номенклатура.НоменклатураПроизводитель;
	
	Если ДополнительныеСвойства.РежимВыводаКода = "КодИАртикул" Тогда
		
		Возврат СтрШаблон(НСтр("ru = '%1, %2'"), СокрЛП(Код), Артикул);
		
	ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "АртикулКодПроизводитель" Тогда
		
		Возврат СтрШаблон(НСтр("ru = '%1, %2, %3'"), СокрЛП(Код), Артикул,Производитель);
		
	ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "КодИПроизводитель" Тогда
		
		Возврат СтрШаблон(НСтр("ru = '%1, %2'"), СокрЛП(Код), Производитель);
		
	ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "АртикулИПроизводитель" Тогда
		
		Возврат СтрШаблон(НСтр("ru = '%1, %2'"), Артикул, Производитель);
		
	ИначеЕсли ДополнительныеСвойства.РежимВыводаКода = "Артикул" Тогда
		
		Возврат Артикул;
		
	Иначе
		
		Возврат СокрЛП(Код);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли
