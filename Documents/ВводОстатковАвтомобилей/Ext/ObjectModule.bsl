// Модуль объекта документа "Ввод остатков автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ТипЦен          = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,,Ложь);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейПереданныхНаКомиссию) И (ЗначениеЗаполнено(СкладКомпании)) Тогда
		СкладКомпании = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
	Если (Не Отказ) И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ГТДАвтомобилей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Автомобили.ВыгрузитьКолонку("Автомобиль"), "ГТД");
		
		Для Каждого Строка Из Автомобили Цикл
			
			ГТД = ГТДАвтомобилей.Получить(Строка.Автомобиль);
			
			Если ЗначениеЗаполнено(Строка.ГТД) И Строка.ГТД <> ГТД Тогда
				
				Автомобиль = Строка.Автомобиль.ПолучитьОбъект();
				Автомобиль.ГТД = Строка.ГТД;
				Автомобиль.ОбменДанными.Загрузка = Истина;
				Автомобиль.Записать();
				
			КонецЕсли;
			
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				Строка.Автомобиль,
				Перечисления.ВидАвтомобиля[?(Строка.АвтомобильБУ, "АвтомобильСПробегом", "Новый")],
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля,
				Дата,
				Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПоступлениеАвтомобиля);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, Режим) Тогда
		Возврат;
	КонецЕсли;
	
	// проверим, что автомобиль отсутствует на остатках по различным регистрам
	Если НЕ РегистрыНакопления.ОстаткиАвтомобилей.ПроверитьОстаткиАвтомобилей(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;

	Если ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилей ИЛИ
		 ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейПринятыхНаКомиссию ИЛИ
		 ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейНаОтветственномХранении Тогда
		 
		// получим шапку документа
		ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);

		// Приходуем автомобили
		НаборЗаписейОстатки = Движения.ОстаткиАвтомобилей;
		НаборЗаписейОстатки.РежимПроведения               = Режим;
		НаборЗаписейОстатки.ДокументОбъект                = ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоАвтомобилям = ПолучитьРезультатЗапросаПоАвтомобилям();
		НаборЗаписейОстатки.СкладКомпании                 = СкладКомпании;
		НаборЗаписейОстатки.Партия                        = Ссылка;
		НаборЗаписейОстатки.ШапкаДокумента                = ШапкаДокумента;
		
		Если ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейПринятыхНаКомиссию Тогда
			НаборЗаписейОстатки.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
		ИначеЕсли ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейНаОтветственномХранении Тогда
			НаборЗаписейОстатки.СтатусПартии = Перечисления.СтатусыПартий.ТоварОтветственноеХранение;
		Иначе
			НаборЗаписейОстатки.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
		КонецЕсли;
		
		Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		
		Если НЕ Отказ Тогда
			НаборЗаписейОстатки.Записать();
		КонецЕсли; 
		
	ИначеЕсли ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейПереданныхНаКомиссию Тогда
		
		// Отдаем товар на комиссию
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВводОстатковАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		|	ВводОстатковАвтомобилейАвтомобили.ГТД КАК ГТД,
		|	&Ссылка КАК Партия,
		|	Сумма(ВводОстатковАвтомобилейАвтомобили.СуммаНДС) КАК СуммаНДС,
		|	Сумма(ВводОстатковАвтомобилейАвтомобили.Сумма) КАК Сумма,
		|	Сумма(ВводОстатковАвтомобилейАвтомобили.СуммаВсего) КАК СуммаВсего,
		|	Сумма(ВводОстатковАвтомобилейАвтомобили.Количество) КАК Количество
		|ИЗ
		|	Документ.ВводОстатковАвтомобилей.Автомобили КАК ВводОстатковАвтомобилейАвтомобили
		|ГДЕ
		|	ВводОстатковАвтомобилейАвтомобили.Ссылка=&Ссылка
		|СГРУППИРОВАТЬ ПО Автомобиль,ГТД");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		// Проведем по регистру отданных на реализацию автомобилей
		НаборЗаписейАвтомобилиОтданные = Движения.АвтомобилиОтданные;
		
		НаборЗаписейАвтомобилиОтданные.ДокументОбъект                    = ЭтотОбъект;
		НаборЗаписейАвтомобилиОтданные.Контрагент                        = Контрагент;
		НаборЗаписейАвтомобилиОтданные.ДоговорВзаиморасчетов             = ДоговорВзаиморасчетов;
		НаборЗаписейАвтомобилиОтданные.РезультатЗапросаПоАвтомобилям     = Запрос.Выполнить();
		НаборЗаписейАвтомобилиОтданные.ПередаватьНаКомиссиюВсеАвтомобили = Истина;
		
		Отказ = НЕ НаборЗаписейАвтомобилиОтданные.Приход();
		
		Если НЕ Отказ Тогда
			НаборЗаписейАвтомобилиОтданные.Записать();
		КонецЕсли; 
		
	КонецЕсли;
	
	// проведем партии товаров
	Отказ = НЕ ПровестиПоПартиям(Режим,Ссылка) ИЛИ Отказ;
	
	Если НЕ Отказ Тогда
		
		// Запишем признак приобретения автомобиля у физического лица
		Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
			
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				СтрокаАвтомобиля.Автомобиль,
				СтрокаАвтомобиля.ПриобретенУФизЛица,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
				Дата,
				Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ВводОстатковАвтомобилей);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДвиженийДокумента

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СтатьяОприходованияТМЦ КАК СтатьяОприходованияТМЦ
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по автомобилям.
Функция ПолучитьРезультатЗапросаПоАвтомобилям()
	ДокументОбъектСтруктура = Новый Структура("Ссылка", Ссылка);
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.ВводОстатковАвтомобилейПолучитьРезультатЗапросаПоАвтомобилям(ДокументОбъектСтруктура);
КонецФункции

// Формирует движения документа по партионным регистрам
// Возвращает Истина - все хорошо, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ = Ложь;

	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		
	Если ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилей Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ОбъединенныйЗапрос.СуммаАвтомобилейУпр + ОбъединенныйЗапрос.СуммаОпцийУпр) КАК СуммаУпр
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(ОстаткиАвтомобилей.СуммаУпр), 0) КАК СуммаАвтомобилейУпр,
		|		0 КАК СуммаОпцийУпр
		|	ИЗ
		|		РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|	ГДЕ
		|		ОстаткиАвтомобилей.Регистратор = &Регистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр), 0)
		|	ИЗ
		|		РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|	ГДЕ
		|		КомплектацияАвтомобилей.Регистратор = &Регистратор) КАК ОбъединенныйЗапрос";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			// Доходы и расходы
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяОприходованияТМЦ;
			
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение		= ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= Выборка.СуммаУпр;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
		
	ИначеЕсли ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейПереданныхНаКомиссию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ОбъединенныйЗапрос.СуммаАвтомобилейУпр + ОбъединенныйЗапрос.СуммаОпцийУпр) КАК СуммаУпр
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(АвтомобилиОтданные.СуммаУпр), 0) КАК СуммаАвтомобилейУпр,
		|		0 КАК СуммаОпцийУпр
		|	ИЗ
		|		РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
		|	ГДЕ
		|		АвтомобилиОтданные.Регистратор = &Регистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		ЕСТЬNULL(СУММА(ПартииТоваровОтданные.СуммаУпр), 0)
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
		|	ГДЕ
		|		ПартииТоваровОтданные.Регистратор = &Регистратор) КАК ОбъединенныйЗапрос";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			// Доходы и расходы
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяОприходованияТМЦ;
			
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение		= ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			НаборЗаписейДиР.Доход					= Выборка.СуммаУпр;
			
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
