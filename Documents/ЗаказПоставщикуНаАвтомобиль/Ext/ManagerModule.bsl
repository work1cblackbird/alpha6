// Модуль менеджера документа "Заказ поставщику на автомобиль"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.СуммаВсегоНаАвтомобиль + Объект.Опции.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС", Объект.СуммаНДСНаАвтомобиль + Объект.Опции.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Расчет суммы и цены автомобиля
//
// Параметры:
//	ТочкаВхода        - Строка                 - Направление расчета
//	Объект            - Данные формы структура - Объект расчета
//	ПараметрыДействия - Стрктура               - Параметры расчета.
//	
Процедура РассчитатьСуммовыеПоказателиАвтомобиля(ТочкаВхода, Объект, ПараметрыДействия) Экспорт
	
	// получим основные параметры
	ЦенаВключаетНДС = Объект.ТипЦен.ЦенаВключаетНДС ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЦенаВключаетНДС", Ложь);
	
	// Сумма автомобиля изменилась
	Если ТочкаВхода = "СуммаВсегоНаАвтомобиль" Тогда
		Если ЦенаВключаетНДС Тогда
			Объект.ЦенаАвтомобиля       = Объект.СуммаВсегоНаАвтомобиль;
			Объект.СуммаНДСНаАвтомобиль = Окр((Объект.ЦенаАвтомобиля*Объект.СтавкаНДСНаАвтомобиль.Ставка)/(100+Объект.СтавкаНДСНаАвтомобиль.Ставка),2);
		Иначе
			Объект.ЦенаАвтомобиля       = Окр(Объект.СуммаВсегоНаАвтомобиль*100/(100+Объект.СтавкаНДСНаАвтомобиль.Ставка), 2);
			Объект.СуммаНДСНаАвтомобиль = Окр(Объект.ЦенаАвтомобиля*Объект.СтавкаНДСНаАвтомобиль.Ставка/100,2);
		КонецЕсли;
	КонецЕсли;
		
	Если ТочкаВхода = "ЦенаАвтомобиля" Тогда
		Если ЦенаВключаетНДС Тогда
			Объект.СуммаНДСНаАвтомобиль   = Окр((Объект.ЦенаАвтомобиля*Объект.СтавкаНДСНаАвтомобиль.Ставка)/(100+Объект.СтавкаНДСНаАвтомобиль.Ставка),2);
			Объект.СуммаВсегоНаАвтомобиль = Объект.ЦенаАвтомобиля;
		Иначе
			Объект.СуммаНДСНаАвтомобиль = Окр(Объект.ЦенаАвтомобиля*Объект.СтавкаНДСНаАвтомобиль.Ставка/100,2);
			Объект.СуммаВсегоНаАвтомобиль = Объект.ЦенаАвтомобиля + Объект.СуммаНДСНаАвтомобиль;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу комплектации по автомобилю
//
Процедура ЗаполнитьКомплектациюАвтомобиля(Объект, Параметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда Возврат; КонецЕсли;
	
	// получим данные об очистке ТЧ
	Если ПолучитьЗначениеПараметраСтруктуры(параметры, "ОчиститьТЧ", Истина) Тогда
		Объект.Опции.Очистить();
	КонецЕсли;
	
	// Получим таблицу комплектации
	Запрос       = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОпцииАвтомобилей.Опция,
	|	ОпцииАвтомобилей.Количество
	|ИЗ
	|	РегистрСведений.ОпцииАвтомобилей КАК ОпцииАвтомобилей
	|ГДЕ
	|	ОпцииАвтомобилей.Автомобиль = &Автомобиль
	|	И ОпцииАвтомобилей.ЗаписьАктивна = ИСТИНА";
	
	Запрос.УстановитьПараметр("Автомобиль", Объект.Автомобиль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	// получим курс валюты
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();	
	НеТребуетсяПереводВалюты = (ВалютаРегл = Объект.ВалютаДокумента);
	
	// Заполним табличные части
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.опции.Добавить();
		
		НоваяСТрока.Опция                      = Выборка.Опция;
		Документы.ЗаказПоставщикуНаАвтомобиль.ОпцииОпцияПриИзменении(Объект, НоваяСтрока);
		НоваяСтрока.Количество                 = Выборка.Количество;
	КонецЦикла;
	
КонецПроцедуры

// Устонавливает ставку НДС относительно организации и подразделения
Процедура УстановитьСтавкиНДС(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыНДС = Новый Структура();
	Если Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
		ЭтоЧастноеЛицо = Ложь;
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭтоЧастноеЛицо = Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
		КонецЕсли;
		ОсвобожденОтНДС = Объект.Контрагент.ОсвобожденОтНДС ИЛИ ЭтоЧастноеЛицо;
	Иначе
		ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
		ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;	
	КонецЕсли;
	
	ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь) ИЛИ ОсвобожденОтНДС;
	
	СтавкаНДС = ?(НЕ ОсвобожденОтНДС, 
		РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС),
		Справочники.СтавкиНДС.БезНДС
	);
	
	Если ЕстьРеквизит(Объект, "СтавкаНДСНаАвтомобиль") Тогда
	
		Объект.СтавкаНДСНаАвтомобиль = СтавкаНДС;
		СтавкаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия);
	
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Опции Цикл
		Строка.СтавкаНДС = СтавкаНДС;
		ОпцииСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("Модель");
	ОбязательныеРеквизиты.Добавить("Марка");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильОтмена ИЛИ Объект.ХозОперация = Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильИзменение Тогда
		ОбязательныеРеквизиты.Добавить("ДокументОснование");
	КонецЕсли;
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильОтмена Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		ОбязательныеРеквизиты.Добавить("СрокПоставки");
		ОбязательныеРеквизиты.Добавить("Модель");
		ОбязательныеРеквизиты.Добавить("Опции.Опция");
		ОбязательныеРеквизиты.Добавить("Опции.Количество");
	Иначе
		ОбязательныеРеквизиты.Добавить("ПричинаОтмены");
	КонецЕсли;

	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы опций
	УникальныеОпции = Новый Массив();
	УникальныеОпции.Добавить("Опция");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Опции", УникальныеОпции);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
		
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Перезаполнение цен автомобиля и опций.
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчетСуммы",         ИСТИНА);
	ТребуетсяИзменитьКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяИзменитьКурс", Ложь);
	
	// Прекращаем обработку, если пересчет не требуется
	Если НЕ(ВозможенПересчетСуммы И (ТребуетсяУстановкаЦен ИЛИ ТребуетсяПересчетЦен) ИЛИ ТребуетсяИзменитьКурс) Тогда
		ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
		Возврат;
	КонецЕсли;

	// установим цены
	Если ТребуетсяУстановкаЦен Тогда
		// установим цену авто
		НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
		
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации", Объект.Автомобиль,
			Объект.Модель, Объект.ВариантКомплектации);
		Объект.ЦенаАвтомобиля = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, ОбъектыПоискаЦены,
			Объект.ВариантКомплектации, НаМомент, Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
		
		// установим цены опций
		Для Каждого Строка Из Объект.Опции Цикл
			ОпцииОпцияПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		
		Объект.ЦенаАвтомобиля = Окр(Объект.ЦенаАвтомобиля*КоэффициентСоотношенияКурсов, 2);
		ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
		
		Для Каждого Строка Из Объект.Опции Цикл
			Строка.Цена = Окр(Строка.Цена*КоэффициентСоотношенияКурсов, 2);
			ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	ПараметрыДействия.Вставить("ТребуетсяПересчетЦен", Ложь);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьСтавкиНДС(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьСтавкиНДС(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьСтавкиНДС(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) И Объект.ДоговорВзаиморасчетов.СрокПоставки > 0 Тогда
		СрокПоставкиДней = Объект.ДоговорВзаиморасчетов.СрокПоставки;
		Объект.СрокПоставки = НачалоДня(Объект.Дата) + СрокПоставкиДней * 60 * 60 * 24;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СрокПоставкиДней = Объект.Контрагент.СрокПоставки;
		Объект.СрокПоставки = НачалоДня(Объект.Дата) + СрокПоставкиДней * 60 * 60 * 24;
	Иначе
		Объект.СрокПоставки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ПараметрыДействия.Вставить("НеИзменятьЦенуАвтомобиля", Истина);
		
		РеквизитыЗаполнения = "Модель,ВариантКомплектации,Цвет,ЦветКод,ТипСалона";
		
		ЗаполнитьЗначенияСвойств(Объект, Объект.Автомобиль, РеквизитыЗаполнения);
		МодельПриИзменении(Объект, ПараметрыДействия);
		ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
		
		ПараметрыДействия.Удалить("НеИзменятьЦенуАвтомобиля");
		
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации", Объект.Автомобиль,
			Объект.Модель, Объект.ВариантКомплектации);
		НоваяЦенаАвтомобиля = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
			Объект.ТипЦен, ОбъектыПоискаЦены, Объект.ВариантКомплектации, ?(Объект.Ссылка.Пустая(), Объект.Дата,
			Объект.Ссылка.МоментВремени()), Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		Если ЗначениеЗаполнено(НоваяЦенаАвтомобиля) И НоваяЦенаАвтомобиля <> Объект.ЦенаАвтомобиля Тогда
			Объект.ЦенаАвтомобиля = НоваяЦенаАвтомобиля;
			ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		ЗаполнитьКомплектациюАвтомобиля(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // АвтомобильПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Модель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МодельПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Объект.Марка = Объект.Модель.Марка;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ВариантКомплектации.Владелец <> Объект.Модель Тогда
		Объект.ВариантКомплектации = Неопределено;
	КонецЕсли;
	
	// установим контрагента и договор взаиморасчетов из модели
	Если ЗначениеЗаполнено(Объект.Модель) И (Объект.ХозОперация = Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобиль ИЛИ Объект.ХозОперация = Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильПодТестДрайв) Тогда
		НовыйПоставщик = ?(НЕ ЗначениеЗаполнено(Объект.Модель.Контрагент), Неопределено, Объект.Модель.Контрагент);
		НовыйДоговор   = ?(НЕ ЗначениеЗаполнено(Объект.Модель.ДоговорВзаиморасчетов), Неопределено, Объект.Модель.ДоговорВзаиморасчетов);
		
		Если НовыйПоставщик <> Неопределено И НовыйПоставщик <> Объект.Контрагент Тогда
			Объект.Контрагент = НовыйПоставщик;
			ОБъект.ДоговорВзаиморасчетов = НовыйДоговор;
			
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
			ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
		ИначеЕсли НовыйДоговор <> Неопределено И НовыйДоговор <> Объект.ДоговорВзаиморасчетов Тогда
			ОБъект.ДоговорВзаиморасчетов = НовыйДоговор;
			
			ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	// заполним данные автомобиля
	Если АвтомобильЗаказа <> Неопределено Тогда
		Если Объект.Модель <> АвтомобильЗаказа.Модель Тогда
			АвтомобильЗаказа.Модель = Объект.Модель;
			ПараметрыДействия.Вставить("ОбновитьМодель", Истина);
			ПараметрыДействия.Вставить("ОбновитьНаименование", Истина);
		КонецЕсли;
		
		Если Объект.ВариантКомплектации <> АвтомобильЗаказа.ВариантКомплектации Тогда
			АвтомобильЗаказа.ВариантКомплектации = Объект.ВариантКомплектации;
			ПараметрыДействия.Вставить("ОбновитьВариантКомплектации", Истина);
			ПараметрыДействия.Вставить("ОбновитьНаименование", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // МодельПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ВариантКомплектации".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ВариантКомплектации) И Объект.ВариантКомплектации.Владелец <> Объект.Модель Тогда
		Объект.Модель = Объект.ВариантКомплектации.Владелец;
		МодельПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеИзменятьЦенуАвтомобиля", Ложь) Тогда
		НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
		
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации", Объект.Автомобиль, Объект.Модель, Объект.ВариантКомплектации);
		Объект.ЦенаАвтомобиля = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, ОбъектыПоискаЦены,
			Объект.ВариантКомплектации, НаМомент, Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		
		Если Объект.ВариантКомплектации <> АвтомобильЗаказа.ВариантКомплектации Тогда
			
			АвтомобильЗаказа.ВариантКомплектации = Объект.ВариантКомплектации;
			ПараметрыДействия.Вставить("ОбновитьВариантКомплектации", Истина);
			ПараметрыДействия.Вставить("ОбновитьНаименование", Истина);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			АвтомобильЗаказа,
			Объект.ВариантКомплектации,
			"ТипДвигателя,ТипКузова,ТипКПП,МодельДвигателя"
		);
		
	КонецЕсли;
	
	УдалитьНеподходящиеАвтомобилюОпции(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена автомобиля".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммовыеПоказателиАвтомобиля("ЦенаАвтомобиля", Объект, ПараметрыДействия);
	
КонецПроцедуры // ЦенаАвтомобиляПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цвет".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦветПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		АвтомобильЗаказа.Цвет = Объект.Цвет;
		ПараметрыДействия.Вставить("ОбновитьЦвет", Истина);
		ПараметрыДействия.Вставить("ОбновитьНаименование", Истина);
	КонецЕсли;
	
КонецПроцедуры // ЦветПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цвет код".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦветКодПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		АвтомобильЗаказа.ЦветКод = Объект.ЦветКод;
	КонецЕсли;
	
КонецПроцедуры // ЦветКодПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип салона".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипСалонаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобильЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильЗаказа", Неопределено);
	
	Если АвтомобильЗаказа <> Неопределено Тогда
		АвтомобильЗаказа.ТипСалона = Объект.ТипСалона;
	КонецЕсли;
	
КонецПроцедуры // ТипСалонаПриИзменении()


// Обработчик события возникающего при изменении данных реквизита "Ставка НДС на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	ЦенаАвтомобиляПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаНДСНаАвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего на автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаВсегоНаАвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммовыеПоказателиАвтомобиля("СуммаВсегоНаАвтомобиль", Объект, ПараметрыДействия);
	
КонецПроцедуры // ЦветКодПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Опция" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииОпцияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Опция.ПризнакНабора Тогда
		РазложитьНаборОпцийНаСтроки(Объект, Строка, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Опция) Тогда
		
		МожноУстанавливатьОпцию =
			ОпцииАвтомобилей.МожноУстанавливатьОпциюДляКомплектации(Строка.Опция, Объект.ВариантКомплектации)
			ИЛИ ОпцииАвтомобилей.МожноУстанавливатьОпциюДляАвтомобиля(Строка.Опция, Объект.Автомобиль);
		
		Если НЕ МожноУстанавливатьОпцию Тогда
			
			БазовыеОпцииКомплектации = ОпцииАвтомобилей.БазовыеОпцииКомплектации(Объект.ВариантКомплектации);
			
			Если БазовыеОпцииКомплектации.Найти(Строка.Опция) = Неопределено Тогда
				
				ШаблонСообщения = НСтр("ru = 'Опция <%1> недопустима для данного варианта комплектации'");
				
			Иначе
				
				ШаблонСообщения = НСтр("ru = 'Опция <%1> для данного варианта комплектации поставляется как базовая'");
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ШаблонСообщения, Строка.Опция)
			);
			Строка.Опция = Неопределено;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Строка.СуммаВсего = 0; Строка.СуммаНДС = 0;
	
	Если Строка.Количество = 0 Тогда Строка.Количество = 1 КонецЕсли;
	
	ПараметрыНДС = Новый Структура();
	
	Если Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
		ЭтоЧастноеЛицо = Ложь;
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭтоЧастноеЛицо = Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
		КонецЕсли;
		ОсвобожденОтНДС = Объект.Контрагент.ОсвобожденОтНДС ИЛИ ЭтоЧастноеЛицо;
	Иначе
		ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
		ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;
	КонецЕсли;
	
	ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь) ИЛИ ОсвобожденОтНДС;
	
	Строка.СтавкаНДС = ?(ОсвобожденОтНДС, 
		Справочники.СтавкиНДС.БезНДС, 
		РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС)
	);
	
	Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуОпции(Объект.ТипЦен, Строка.Опция, Объект.Модель, Объект.ВариантКомплектации,
		?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка), Объект.ВалютаДокумента, Объект.КурсДокумента);
	
	ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Опции".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ОпцииСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

Процедура РазложитьНаборОпцийНаСтроки(Объект, Строка, ПараметрыДействия = Неопределено)
	// имеем дело с набором, разложим его...
	Набор            = Строка.Опция;
	КоличествоНабора = Строка.Количество;
	
	Если КоличествоНабора = 0 Тогда
		КоличествоНабора = 1;
	КонецЕсли;
	
	// удалим строку из табличной части
	Объект.Опции.Удалить(Строка);
	
	Для Каждого ИзНабора Из Набор.СоставНабора Цикл
		// поищем оборудование из набора в таблице
		МассивСтрок = Объект.Опции.НайтиСтроки(Новый Структура("Опция",ИзНабора.Опция));
		Если МассивСтрок.Количество() > 0 Тогда
			// Если добавляемое оборудование уже есть в табличной части
			// просто увеличим количество, если его запрашивать не надо.
			СтрокаТЧ = МассивСтрок[0];
			СтрокаТЧ.Количество = СтрокаТЧ.Количество + (ИзНабора.Количество*КоличествоНабора);
			ОпцииКоличествоПриИзменении(Объект, СтрокаТЧ);
		Иначе
			СтрокаТЧ = Объект.Опции.Добавить();
			СтрокаТЧ.Опция                   = ИзНабора.Опция;
			СтрокаТЧ.Количество              = ИзНабора.Количество*КоличествоНабора;
			ОпцииОпцияПриИзменении(Объект, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Если ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента") Тогда
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.ЗаказПоставщикуНаАвтомобиль",
			"ЗаказПоставщикуНаАвтомобиль",
		НСтр("ru = 'Заказ поставщику на автомобиль'"),
		СсылкаНаДокумент,
		"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати");
	Иначе
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.ЗаказПоставщикуНаАвтомобиль",
			"ЗаказПоставщикуНаАвтомобиль",
			НСтр("ru = 'Заказ поставщику на автомобиль'"),
			СсылкаНаДокумент);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПоставщикуНаАвтомобиль") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ЗаказПоставщикуНаАвтомобиль",
															"Заказ поставщику на автомобиль",
															ПечатьЗаказПоставщикуНаАвтомобиль(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ЗаказНаАвтомобиль"
// Возвращает сформированный табличный документ:
Функция ПечатьЗаказПоставщикуНаАвтомобиль(МассивОбъектов, ОбъектыПечати, ПараметрыПечати=Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// Предварительные обработки данных
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента",
			Документ.ВалютаДокумента);
		
		КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1,
			Документ.ВалютаДокумента,
			Документ.КурсДокумента,
			ВалютаПечатногоДокумента,
			Документ.Дата);
		
		// Приступим к печати
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПоставщикуНаАвтомобиль.ПФ_MXL_ЗаказПоставщикуНаАвтомобиль");
		
		// получение необходимых областей
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить("Опции");
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет,Документ, ТабличныеЧасти);
		
		// Для начала настроим макет
		ОбластьЗаголовок        = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьТовар            = Макет.ПолучитьОбласть("Товар");
		ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодписи          = Макет.ПолучитьОбласть("Подписи");
		
		// Вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.Заполнить(Документ.ВариантКомплектации);
		
		АвтомобильМодель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Модель);
		АвтомобильМарка = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Марка);
		ОбластьЗаголовок.Параметры.АвтомобильМодель = 
			СтрШаблон("%1, %2", СокрЛП(АвтомобильМарка), СокрЛП(АвтомобильМодель));
		
		ВариантКомплектации = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации);
		ОбластьЗаголовок.Параметры.АвтомобильВариантКомплектации = ВариантКомплектации;
		
		АвтомобильЦвет = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Цвет);
		ОбластьЗаголовок.Параметры.АвтомобильЦвет = АвтомобильЦвет;
		
		ОбластьЗаголовок.Параметры.АвтомобильЦветКод = Документ.ЦветКод;
		ТипДвигателя = ?(НЕ Документ.ВариантКомплектации.МодельДвигателя.Пустая(),
			Документ.ВариантКомплектации.МодельДвигателя.Тип, Документ.ВариантКомплектации.ТипДвигателя);
		
		ТипКузова = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации.ТипКузова);
		ОбластьЗаголовок.Параметры.АвтомобильТипКузова = ТипКузова;
		
		АвтомобильТипДвигателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТипДвигателя);
		ОбластьЗаголовок.Параметры.АвтомобильТипДвигателя = АвтомобильТипДвигателя;
		
		АвтомобильТипКПП = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВариантКомплектации.ТипКПП);
		ОбластьЗаголовок.Параметры.АвтомобильТипКПП = АвтомобильТипКПП;
		
		АвтомобильТипСалона = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипСалона);
		ОбластьЗаголовок.Параметры.АвтомобильТипСалона = АвтомобильТипСалона;
		
		ОбластьЗаголовок.Параметры.АвтомобильЦена = Формат(Документ.ЦенаАвтомобиля * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		
		ОбластьЗаголовок.Параметры.ПредставлениеНДС = ?(Документ.ТипЦен.ЦенаВключаетНДС, НСтр("ru = 'В т.ч.'") + " ", "")
			+ "НДС" + " (" + Документ.СтавкаНДСНаАвтомобиль.Ставка + "%)" + ": "
			+ Формат(Документ.СуммаНДСНаАвтомобиль * КоэффициентПересчета,
				?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		
		ОбластьЗаголовок.Параметры.СуммаВсегоНаАвтомобиль = Формат(Документ.СуммаВсегоНаАвтомобиль * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// Готовим области строки
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", ВалютаПечатногоДокумента, 0, 0);
		
		// Пересчитаем ТЧ
		ЭтотОбъектОпции = Документ.Опции.Выгрузить();
		
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
		ДокументОбъектСтруктура.Документ = Документ;
		ДокументОбъектСтруктура.ЭтоПродажа = Ложь;
		
		Если ЭтотОбъектОпции.Количество() > 0 Тогда
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ЭтотОбъектОпции,
				ДокументОбъектСтруктура, ВалютаПечатногоДокумента);
		КонецЕсли;
		
		// Дополнительные колонки для того чтобы замаскировать ТЧ Опции под ТЧ Товары
		ЭтотОбъектОпции.Колонки.Добавить("Номенклатура");
		ЭтотОбъектОпции.Колонки.Добавить("ЕдиницаИзмерения");
		ЭтотОбъектОпции.Колонки.Добавить("Коэффициент");
		
		// Перебор строк
		ВыборкаТабличнойЧасти = ЭтотОбъектОпции;
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы = "Опции";
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			ОбластьШапкаТаблицы.Параметры.ИмяКолонкиТовара = "Опции";
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		КонецЕсли;
		
		// Заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			
			// Предварительная обработка
			СтрокаТабличнойЧасти.Номенклатура		= СтрокаТабличнойЧасти.Опция;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= "";
			СтрокаТабличнойЧасти.Коэффициент		= 1;
			// Заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТабличнойЧасти,
				Документ, "Опции");
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
			
			// Инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", ВалютаПечатногоДокумента, 0, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда
			// Довыводим последний подвал, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// итоги 
			ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
			СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
			ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
			НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
			ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
			ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
				ВыборкаТабличнойЧасти.Количество(),
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, ВалютаПечатногоДокумента));
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Выводим представления и расшифровки подписей
		ОбластьПодписи.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ОбластьПодписи.Параметры.СуммаДокумента  = Формат(Документ.СуммаДокумента * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		ОбластьПодписи.Параметры.СуммаДокументаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			Документ.СуммаДокумента * КоэффициентПересчета, ВалютаПечатногоДокумента);
		СуммаНДС = Документ.СуммаНДСНаАвтомобиль + Документ.Опции.Итог("СуммаНДС");
		ОбластьПодписи.Параметры.СуммаНДС = Формат(СуммаНДС * КоэффициентПересчета,
			?(НЕ ПустаяСтрока(ФорматВыводаСуммы), ФорматВыводаСуммы, ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		
		// Выводим представления и расшифровки подписей
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ИсполнительКонтрагент"));
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ЗаказчикОрганизация"));
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщикуНаАвтомобиль_ЗаказПоставщикуНаАвтомобиль";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЗаказПоставщикуНаАвтомобиль()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетОтПоставщикаЗаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Взаимозачет);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщикуНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаОпцийАвтомобиля);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПлатежноеПоручение);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаказПоставщикуНаАвтомобиль);

КонецФункции

#КонецОбласти

Процедура УдалитьНеподходящиеАвтомобилюОпции(Объект)
	
	Если Объект.Опции.Количество() > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДоступныеОпции = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ДоступныеОпции,
			ОпцииАвтомобилей.ДополнительныеОпцииКомплектации(Объект.ВариантКомплектации)
		);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ДоступныеОпции,
			ОпцииАвтомобилей.ОпцииУстановленныеНаАвтомобиль(Объект.Автомобиль)
		);
		
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив();
	
	Для Каждого Опция Из Объект.Опции Цикл
		
		Если ДоступныеОпции.Найти(Опция.Опция) = Неопределено Тогда
			
			УдаляемыеСтроки.Добавить(Опция);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		
		Объект.Опции.Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли