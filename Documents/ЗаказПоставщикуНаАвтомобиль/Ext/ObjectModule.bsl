// Модуль объекта документа "Заказ поставщику на автомобиль"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если вводится на основании события
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	КонецЕсли;
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,, Ложь);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "СтатусАвтомобиля") Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозОперация <> Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильОтмена 
			И НЕ ЗначениеЗаполнено(СрокПоставки) Тогда
		Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) И ДоговорВзаиморасчетов.СрокПоставки > 0 Тогда
			СрокПоставкиДней = ДоговорВзаиморасчетов.СрокПоставки;
			СрокПоставки     = НачалоДня(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) + СрокПоставкиДней * 60 * 60 * 24;
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			СрокПоставкиДней = Контрагент.СрокПоставки;
			СрокПоставки     = НачалоДня(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()))+СрокПоставкиДней * 60 * 60 * 24;
		Иначе
			СрокПоставки = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Документы.ЗаказПоставщикуНаАвтомобиль.УстановитьСтавкиНДС(ЭтотОбъект);
	КонецЕсли;
	
	// Установим тип цен из права
	Если НЕ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
	КонецЕсли;
	
	// Заполнить контрагента из события
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		Контрагент = ДанныеЗаполненияКонтрагент;
		Документы.ЗаказПоставщикуНаАвтомобиль.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Автомобиль) Тогда
		Автомобиль = Справочники.Автомобили.ПустаяСсылка();
		Документы.ЗаказПоставщикуНаАвтомобиль.АвтомобильПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ИзмеренияРегистраБыли");
	ДополнительныеСвойства.Вставить("МоментВремениБыл");
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	// Проверим сумму предоплаты если есть заказ покупателя
	
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
		
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ЭтоВосстановлениеПоследовательностей Тогда
		
		ДокументОбъектСтруктура = Новый Структура();
		ДокументОбъектСтруктура.Вставить("Представление", Строка(ЭтотОбъект));
		ДокументОбъектСтруктура.Вставить("Дата", Дата);
		ДокументОбъектСтруктура.Вставить("МоментВремени", МоментВремени());
		ДокументОбъектСтруктура.Вставить("Проведен", Проведен);
		ДокументОбъектСтруктура.Вставить("Автомобиль", Автомобиль);
		Отказ = Отказ ИЛИ НЕ ЗащищенныеФункцииАльфаАвтоСервер
			.ЗаказПоставщикуНаАвтомобильПроверитьПредоплатуПоЗаказуНаАвтомобиль(ДокументОбъектСтруктура);
		
		Отказ = Отказ ИЛИ СоздатьАвтомобиль();
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ИгнорируемыеДокументы = Новый Массив;
	ИгнорируемыеДокументы.Добавить(Ссылка);
	РегистрыСведений.ОпцииАвтомобилей.ОтменитьПроведениеДокумента(Автомобиль, ИгнорируемыеДокументы);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если
		ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль")
	Тогда
		
		// Проверим, а нет ли заказа на этот автомобиль по заказу документа основания
		// Сформируем таблицы документов оснований.
		МассивДокументовОснований  = Новый Массив;
		ТаблицаДокументовОснований = Новый ТаблицаЗначений;
		ТаблицаДокументовОснований.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
		ДокОснования = ДокументОснование;
		Пока ЗначениеЗаполнено(ДокОснования) Цикл
			Если ТипЗнч(ДокОснования) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль") Тогда
				МассивДокументовОснований.Добавить(ДокОснования);
				НоваяСтрока = ТаблицаДокументовОснований.Добавить();
				НоваяСтрока.ЗаказПоставщику = ДокОснования;
			Иначе
				Прервать;
			КонецЕсли;
			ДокОснования = ДокОснования.ДокументОснование;
		КонецЦикла;
		
		// Получим остатки заказов-оснований
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.Автомобиль КАК Автомобиль,
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ЕСТЬNULL(ЗаказыПоставщикамНаАвтомобилиОстатки.СуммаОстаток, 0) КАК Сумма,
		|	ЕСТЬNULL(ЗаказыПоставщикамНаАвтомобилиОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр,
		|	ЕСТЬNULL(ЗаказыПоставщикамНаАвтомобилиОстатки.КоличествоОстаток, 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(&НаДату, ЗаказПоставщику В (&Заказ)) КАК ЗаказыПоставщикамНаАвтомобилиОстатки";
		Запрос.УстановитьПараметр("Заказ",  МассивДокументовОснований);
		Запрос.УстановитьПараметр("НаДату", МоментВремени());
		
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПоставщикамНаАвтомобили");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаДокументовОснований);
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("ЗаказПоставщику", "ЗаказПоставщику");
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.Количество <> 0 Тогда
			
			// Проверим нет ли резерва на этот автомобиль
			Отказ = ПроверитьРезервыНаАвтомобиль(Выборка.Автомобиль, ЭтотОбъект);
			
			// Снимаем заказ документа основания
			НаборЗаписейЗаказы = Движения.ЗаказыПоставщикамНаАвтомобили;
			НоваяЗапись = НаборЗаписейЗаказы.Добавить();
			НоваяЗапись.ВидДвижения     = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период          = Дата;
			НоваяЗапись.Регистратор     = Ссылка;
			НоваяЗапись.Автомобиль      = Выборка.Автомобиль;
			НоваяЗапись.ЗаказПоставщику = Выборка.ЗаказПоставщику;
			НоваяЗапись.Количество      = -Выборка.Количество;
			НоваяЗапись.Сумма           = -Выборка.Сумма;
			НоваяЗапись.СуммаУпр        = -Выборка.СуммаУпр;
			НоваяЗапись.ХозОперация     = ХозОперация;
			Движения.ЗаказыПоставщикамНаАвтомобили.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ХозОперация = Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильОтмена Тогда
		
		Отказ = Отказ ИЛИ ПроверитьЗаказыНаАвтомобиль(Автомобиль, ЭтотОбъект);
		
		Если НЕ Отказ Тогда
			
			НаборЗаписейЗаказы = Движения.ЗаказыПоставщикамНаАвтомобили;
			НоваяЗапись = НаборЗаписейЗаказы.Добавить();
			НоваяЗапись.ВидДвижения     = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период          = Дата;
			НоваяЗапись.Регистратор     = Ссылка;
			НоваяЗапись.Автомобиль      = Автомобиль;
			НоваяЗапись.ЗаказПоставщику = Ссылка;
			НоваяЗапись.Количество      = 1;
			НоваяЗапись.Сумма           = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаДокумента,
					ВалютаДокумента,
					КурсДокумента,
					ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
					Дата
				),
				2
			);
			НоваяЗапись.СуммаУпр    = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаДокумента,
					ВалютаДокумента,
					КурсДокумента,
					Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
					Дата
				),
				2
			);
			НоваяЗапись.ХозОперация = ХозОперация;
			
		КонецЕсли;
		
		ДокументОпций = Ссылка;
		ЭтоОтменаЗаказ = Ложь;
		
	Иначе
		
		ДокументОпций = ДокументОснование;
		ЭтоОтменаЗаказ = Истина;
		
	КонецЕсли;
	
	ОпцииКопия = Опции.Выгрузить(, "Опция,Количество");
	
	Если ОпцииКопия.Количество() > 0 Тогда
		Отказ = Отказ ИЛИ РегистрыСведений
		.ОпцииАвтомобилей
		.ОбновитьОпцииАвтомобиля(ОпцииКопия, Автомобиль, ДокументОпций, ЭтоОтменаЗаказ);
	ИначеЕсли Не ЭтоОтменаЗаказ Тогда
		Отказ = Отказ ИЛИ РегистрыСведений
		.ДокументыДвиженияОпцииАвтомобилей
		.ОбновитьОпцииАвтомобиля(Автомобиль, Ссылка);
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуЗаказовАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьАвтомобиль()
	
	Если НЕ Автомобиль.Пустая() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НовыйАвтомобиль = Справочники.Автомобили.СоздатьЭлемент();
	НовыйАвтомобиль.Заполнить(Новый Структура);
	
	Если НЕ ЗначениеЗаполнено(НовыйАвтомобиль.Код) Тогда
		
		НовыйАвтомобиль.УстановитьНовыйКод();
		
	КонецЕсли;
	
	НовыйАвтомобиль.Родитель        = Справочники.Автомобили.АвтомобилиПоЗаказам;
	НовыйАвтомобиль.Автор           = Пользователи.ТекущийПользователь();
	НовыйАвтомобиль.ДатаРегистрации = Дата;
	ЗаполнитьЗначенияСвойств(НовыйАвтомобиль, ЭтотОбъект);
	Документы.ЗаказНаАвтомобиль.ОбновитьДанныеАвтомобиляЗаказа(НовыйАвтомобиль);
	
	НовыйАвтомобиль.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		НовыйАвтомобиль.Записать();
		Автомобиль = НовыйАвтомобиль.Ссылка;
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось создать автомобиль. Обратитесь к системному администратору'"), ЭтотОбъект);
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Проверка наличия других заказов на автомобиль с данным VINом
//
// Параметры
//  АвтомобильПроверки - Автомобиль, заказы на который проверяются
//  ОбъектПроверки  - <ДокументОбъект> - Документ, который проверяет наличие заказов.
//
// Возвращаемое значение:
//   <Булево>   - Заказов на данный автомобиль нет.
//
Функция ПроверитьЗаказыНаАвтомобиль(АвтомобильПроверки, ОбъектПроверки)
	
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка"        , ОбъектПроверки.Ссылка);
	ДокументОбъектСтруктура.Вставить("МоментВремени" , ОбъектПроверки.МоментВремени());
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.ЗаказПоставщикуНаАвтомобильПроверитьЗаказыНаАвтомобиль(ДокументОбъектСтруктура, АвтомобильПроверки);
	
КонецФункции // ПроверитьЗаказыНаАвтомобиль()

// Проверка наличия других заказов на автомобиль с данным VINом
//
// Параметры
//  АвтомобильПроверки - Автомобиль, заказы на который проверяются
//  ОбъектПроверки  - <ДокументОбъект> - Документ, который проверяет наличие заказов.
//
// Возвращаемое значение:
//   <Булево>   - Заказов на данный автомобиль нет.
//
Функция ПроверитьРезервыНаАвтомобиль(АвтомобильПроверки, ОбъектПроверки)
	
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка",        ОбъектПроверки.Ссылка);
	ДокументОбъектСтруктура.Вставить("МоментВремени", ОбъектПроверки.МоментВремени());
	
	ЕстьРезервНаАвтомобиль = Ложь;
	
	// Проверим нет ли другого заказа на автомобиль с данным VIN
	Если НЕ ЗначениеЗаполнено(АвтомобильПроверки) Тогда
		Возврат ЕстьРезервНаАвтомобиль;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.РезервОстаток, 0) КАК Резерв
	|ИЗ
	|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(
	|			&НаГраницу,
	|			Автомобиль = &Автомобиль И Заказ ССЫЛКА Документ.РезервированиеАвтомобилей) КАК ЗаказыАвтомобилейОстатки
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.РезервОстаток, 0) > 0";
	
	Запрос.УстановитьПараметр("НаГраницу",  Новый Граница(ДокументОбъектСтруктура.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Автомобиль", АвтомобильПроверки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Автомобиль: <%1> зарезервирован по документу <%2>.'"),
			СокрЛП(АвтомобильПроверки),
			СокрЛП(Выборка.Заказ)
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, ЕстьРезервНаАвтомобиль);
		
	КонецЕсли;
	
	Возврат ЕстьРезервНаАвтомобиль;
	
КонецФункции // ПроверитьРезервыНаАвтомобиль()

Процедура ЗаполнитьДокументАктуальнымиОпциями()
	
	РезультатЗапроса = ПолучитьДополнительныеОпцииАвтомобиля();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаОпций = Опции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОпций, Выборка);
		Документы.ЗаказПоставщикуНаАвтомобиль.ОпцииОпцияПриИзменении(ЭтотОбъект, НоваяСтрокаОпций);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДополнительныеОпцииАвтомобиля()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОпцииАвтомобилей.Опция КАК Опция,
	               |	ОпцииАвтомобилей.Количество КАК Количество
	               |ИЗ
	               |	РегистрСведений.ОпцииАвтомобилей КАК ОпцииАвтомобилей
	               |ГДЕ
	               |	ОпцииАвтомобилей.Автомобиль = &Автомобиль
	               |	И ОпцииАвтомобилей.ЗаписьАктивна";
	Возврат Запрос.Выполнить();
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Модель.Контрагент) И Модель.Контрагент <> Контрагент Тогда
		Контрагент = Модель.Контрагент;
		ПараметрыДействия = Новый Структура;
		Документы.ЗаказПоставщикуНаАвтомобиль.КонтрагентПриИзменении(ЭтотОбъект, ПараметрыДействия);
		Если ЗначениеЗаполнено(Модель.ДоговорВзаиморасчетов) И Модель.ДоговорВзаиморасчетов <> ДоговорВзаиморасчетов Тогда
			ДоговорВзаиморасчетов = Модель.ДоговорВзаиморасчетов;
			ПараметрыДействия = Новый Структура;
			Документы.ЗаказПоставщикуНаАвтомобиль.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, ПараметрыДействия);
		КонецЕсли; 
	Иначе
		ОсновнойПоставщик = ПраваИНастройкиПользователя.Значение("ОсновнойПоставщик", ЭтотОбъект);
		Если ЗначениеЗаполнено(ОсновнойПоставщик) И ОсновнойПоставщик <> Контрагент Тогда
			Контрагент = ОсновнойПоставщик;
			ПараметрыДействия = Новый Структура;
			Документы.ЗаказПоставщикуНаАвтомобиль.КонтрагентПриИзменении(ЭтотОбъект, ПараметрыДействия);
		КонецЕсли; 
	КонецЕсли;
	
	Документы.ЗаказПоставщикуНаАвтомобиль.УстановитьСтавкиНДС(ЭтотОбъект);
	
	// установим цену автомобиля
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
	
	ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации", Автомобиль, Модель, ВариантКомплектации);
	ЦенаАвтомобиля = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
		ТипЦен, ОбъектыПоискаЦены, ВариантКомплектации,
		?(Ссылка.Пустая(), Дата, МоментВремени()), ВалютаДокумента, КурсДокумента);
		
	Документы.ЗаказПоставщикуНаАвтомобиль.ЦенаАвтомобиляПриИзменении(ЭтотОбъект);
	
	Опции.Очистить();
	ЗаполнитьДокументАктуальнымиОпциями();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполненияНаОсновании_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль")
		И ЗначениеЗаполнено(ДанныеЗаполнения)
		И ХозОперация <> Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильОтмена Тогда
		 
		ХозОперация = Справочники.ХозОперации.ЗаказПоставщикуНаАвтомобильИзменение;
		 
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполненияНаОсновании_ЗаказПокупателя()

// Производит заполнение объекта на основании справочника "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Документы.ЗаказПоставщикуНаАвтомобиль.УстановитьСтавкиНДС(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполненияНаОсновании_ЗаказПокупателя()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
