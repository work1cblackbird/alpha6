///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Замена в заказе покупателя"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	// Установим вариант отображения дополнительных полей "Код" и "Артикул"
	УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонокКодАртикул(ЭтотОбъект, "Замены");
	УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонокКодАртикул(ЭтотОбъект, "ТоварыЗаменители");
	
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПроцентПредоплаты = Объект.ДокументОснование.ПроцентПредоплаты;
	ИначеЕсли ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		ПроцентПредоплаты = 0;
	КонецЕсли;
	
	// пересчет дополнительных реквизитов табличной части "Замены"
	Документы.ЗаменаВЗаказеПокупателя.ПолучитьДанныеПоЗаказу(Объект);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СкладКомпании 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "СкладКомпании");
	КонецЕсли; 
	
	РассчитыватьСкидкуШапкиПоСтроке = Объект.Замены.Количество()>0 И Объект.Замены.Итог("СуммаСкидки")>0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Замены);
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.ТоварыЗаменители);
		// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"Замены");
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"ТоварыЗаменители");
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Замены);
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);

КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// TODO: Порефакторить, что бы передача на сервер и обработка ответа происходила в рамках вызова каждой подсистемы 
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	/// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обновим колонку владельцев характеристик и единиц измерения
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Замены);
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.ТоварыЗаменители);
	
	// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"Замены");
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"ТоварыЗаменители");
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойств
	
	// перезапишем документ-основание с новым процентом предоплаты
	Если (НЕ Отказ) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если (НЕ Объект.ДокументОснование.ПроцентПредоплаты = ПроцентПредоплаты) Тогда
			
			ОснованиеДокументОбъект = Объект.ДокументОснование.ПолучитьОбъект();
			ОснованиеДокументОбъект.ПроцентПредоплаты = ПроцентПредоплаты;
			ОснованиеДокументОбъект.ДополнительныеСвойства.Вставить("ИзменениеПроцентаПредоплаты", Истина);
			ОснованиеДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ОснованиеДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
			ОснованиеДокументОбъект.ОбменДанными.Загрузка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
    РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Обновим колонку владельцев характеристик и единиц измерения
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Замены);
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.ТоварыЗаменители);
	
	// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"Замены");
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"ТоварыЗаменители");
	
	// пересчет дополнительных реквизитов табличной части "Замены"
	Документы.ЗаменаВЗаказеПокупателя.ПолучитьДанныеПоЗаказу(Объект);
		
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	Документы.ЗаменаВЗаказеПокупателя.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаменаВЗаказеПокупателя.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаменаВЗаказеПокупателя.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ПроцентПредоплаты 	= Объект.ДокументОснование.ПроцентПредоплаты;  
		СкладКомпании 		= Объект.ДокументОснование.СкладКомпании;
			
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		СкладКомпании 				= Объект.ДокументОснование.СкладКомпании;
		ПроцентПредоплаты 	= 0;
	Иначе 
		СкладКомпании 				= Неопределено;
	КонецЕсли;  
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаменаВЗаказеПокупателя.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗамены

&НаКлиенте
Процедура ЗаменыПриАктивизацииСтроки(Элемент)
	
	КлючСвязи = Элементы.Замены.ТекущиеДанные;
	
	Если КлючСвязи=Неопределено Тогда
		ПараметрыОтбора = Неопределено;
	Иначе
		Если НЕ ЗначениеЗаполнено(КлючСвязи.ИдентификаторСтроки) Тогда
			КлючСвязи.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);
	КонецЕсли;
	
	Элементы.ТоварыЗаменители.ОтборСтрок = ПараметрыОтбора;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаменыПередУдалением(Элемент, Отказ)
	
	// Удалим все строки из "Товары заменители", которые связаны с удаляемой строкой
	Если НЕ Отказ Тогда
		
		КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
		ИдентификаторСтроки = Новый Структура("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);
		УдаляемыеЗаменители = Объект.ТоварыЗаменители.НайтиСтроки(ИдентификаторСтроки);
		
		Для НомерСтроки = 0 По УдаляемыеЗаменители.Количество() - 1 Цикл
			Объект.ТоварыЗаменители.Удалить(УдаляемыеЗаменители[НомерСтроки].НомерСтроки - 1);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаменыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Установим итоги служебных колонок
	ТоварыЗаказаноТекстПодвала     = Формат(Объект.Замены.Итог("Заказано"), "ЧДЦ=3");
	ТоварыРезервТекстПодвала       = Формат(Объект.Замены.Итог("Резерв"), "ЧДЦ=3");
	ТоварыРаспределеноТекстПодвала = Формат(Объект.Замены.Итог("Распределено"), "ЧДЦ=3");
	
КонецПроцедуры 

&НаСервере
Процедура ЗаменыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	Если НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Замены, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(Элементы.ЗаменыНоменклатура.ТекстПодвала, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменыПослеУдаления(Элемент)

	ЗаменыПослеУдаленияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыЗамены

&НаКлиенте
Процедура ЗаменыНоменклатураПриИзменении(Элемент)
	
	ЗаменыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаменыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ЗаменыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия, "Замены");
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаменыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ЗаменыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаменыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ЗаменыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаменыЕдиницаИзмеренияПриИзменении(Элемент)
	
	
	ЗаменыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаменыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ЗаменыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменыКоличествоПриИзменении(Элемент)
	
	ЗаменыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаменыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ЗаменыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.СуммаСкидки = 0; 
	ИначеЕсли (ТекущиеДанные.Заказано-ТекущиеДанные.Резерв)> ТекущиеДанные.Количество Тогда
		ТекущиеДанные.СуммаСкидки = Окр(ТекущиеДанные.СуммаСкидки / (ТекущиеДанные.Заказано-ТекущиеДанные.Резерв) * ТекущиеДанные.Количество,2);
	КонецЕсли;
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		ПараметрыДействия = Новый Структура();
		ПараметрыДействия.Вставить("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);   
		ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
		ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки",  Объект.БлокироватьПерерасчетСкидок); 
	
		Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
			ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
			ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", ТекущиеДанные.СуммаСкидки);
		КонецЕсли;  
		
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "ТоварыЗаменители");
	
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыЗаменители

&НаКлиенте
Процедура ТоварыЗаменителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(
		ЭтотОбъект,
		Поле,
		ВыбраннаяСтрока,
		Объект.БлокироватьПерерасчетСкидок,
		"ТоварыЗаменители"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.Замены.ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана номенклатура, для которой предназначен заменитель.'"), Объект.Ссылка,,, Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования, "ТоварыЗаменители");
	
	ТекущаяСтрока = Элементы.ТоварыЗаменители.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(ТекущаяСтрока);
	
	// Удалим данную строку если нет связи со строкой из табличной части "Замены"
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		Объект.ТоварыЗаменители.Удалить(ТекущиеДанные.НомерСтроки - 1);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЗаменителиПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.ТоварыЗаменители);
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(Элементы.ТоварыЗаменителиНоменклатура.ТекстПодвала, Объект); 
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", Истина);
		ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);

		Для Каждого Строка ИЗ Объект.Замены Цикл 
			
			ПараметрыДействия.Вставить("ИдентификаторСтроки", Строка.ИдентификаторСтроки); 
			ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", Строка.СуммаСкидки);

			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "ТоварыЗаменители");

		КонецЦикла;
			
	КонецЕсли;
	
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьКолонкиСуммаВсего(ЭтотОбъект, Объект, "ТоварыЗаменители");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиПослеУдаления(Элемент)
	
ТоварыЗаменителиПослеУдаленияНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТоварыЗаменители

&НаСервере
Процедура ТоварыЗаменителиНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия, "ТоварыЗаменители");
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиНоменклатураПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
	ИдентификаторСтроки = КлючСвязи.ИдентификаторСтроки;
	ПараметрыДействия.Вставить("ИдентификаторСтроки",ИдентификаторСтроки);   
	ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
	ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки",  Объект.БлокироватьПерерасчетСкидок); 
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
		ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", КлючСвязи.СуммаСкидки);
	КонецЕсли;
	
	ТоварыЗаменителиНоменклатураПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыЗаменителиХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗаменителиХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЗаменителиЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЗаменителиЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиКоличествоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
    ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
	ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки", Объект.БлокироватьПерерасчетСкидок);
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);  
    	ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", КлючСвязи.СуммаСкидки); 
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
		
	
	КонецЕсли; 

	ТоварыЗаменителиКоличествоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЗаменителиКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиЦенаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
    ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
	ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки", Объект.БлокироватьПерерасчетСкидок);
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);  
    	ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", КлючСвязи.СуммаСкидки); 
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
		
	КонецЕсли; 

	ТоварыЗаменителиЦенаПриИзмененииНаСервере(ПараметрыДействия);   	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЗаменителиЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиСуммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
    ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
	ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки", Объект.БлокироватьПерерасчетСкидок);
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);  
    	ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", КлючСвязи.СуммаСкидки); 
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
		
	КонецЕсли; 

	ТоварыЗаменителиСуммаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗаменителиСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);

КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиСуммаВсегоПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
    ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
	ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки",  Объект.БлокироватьПерерасчетСкидок); 
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);  
    	ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", КлючСвязи.СуммаСкидки); 
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
		
	КонецЕсли; 

	ТоварыЗаменителиСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЗаменителиСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
    ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
	ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки",  Объект.БлокироватьПерерасчетСкидок); 
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);  
    	ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", КлючСвязи.СуммаСкидки); 
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
		
	КонецЕсли; 

	ТоварыЗаменителиСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗаменителиСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиСуммаНДСПриИзменении(Элемент)

	ТоварыЗаменителиСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗаменителиСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыЗаменителиПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗаменителиПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыЗаменителиСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЗаменителиСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиСкидкаНаТоварПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
    ПараметрыДействия.Вставить("СкладКомпании", СкладКомпании);
	ПараметрыДействия.Вставить("НеПодбиратьОбщиеСкидки", Объект.БлокироватьПерерасчетСкидок); 
	
	Если РассчитыватьСкидкуШапкиПоСтроке Тогда 
		
		КлючСвязи = Объект.Замены.НайтиПоИдентификатору(Элементы.Замены.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторСтроки", КлючСвязи.ИдентификаторСтроки);  
    	ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", КлючСвязи.СуммаСкидки); 
		ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", РассчитыватьСкидкуШапкиПоСтроке);
		
	КонецЕсли; 
	
	ТоварыЗаменителиСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗаменителиСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаменителиПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыЗаменителиПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЗаменителиПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиПроцентСкидкиСтрокиПриИзменении(
		Объект,
		ТекущиеДанные,
		ПараметрыДействия
	);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЗаменителиСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыЗаменителиСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЗаменителиСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ТоварыЗаменители.НайтиПоИдентификатору(Элементы.ТоварыЗаменители.ТекущаяСтрока);
	Документы.ЗаменаВЗаказеПокупателя.ТоварыЗаменителиСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства
#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ЗаменыХарактеристикаНоменклатуры",
		"Объект.Замены.ВладелецХарактеристики"
	);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ТоварыЗаменителиХарактеристикаНоменклатуры",
		"Объект.ТоварыЗаменители.ВладелецХарактеристики"
	);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект,"ТоварыЗаменители");
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаменителиСуммаВсего.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры 

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	ЗаполнениеОбъектовАльфаАвто.УстановитьВидимостьКолонокТЧ(ЭтотОбъект, Объект, "Замены");
	ЗаполнениеОбъектовАльфаАвто.УстановитьВидимостьКолонокТЧ(ЭтотОбъект, Объект, "ТоварыЗаменители");
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	Если Не Элементы.Найти("ЗаменыНоменклатура")=Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ЗаменыНоменклатура.ПараметрыВыбора, "Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	Если Не Элементы.Найти("ТоварыЗаменителиНоменклатура")=Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТоварыЗаменителиНоменклатура.ПараметрыВыбора, "Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	// Установим отметку незаполненного для характеристик
	Элементы.ТоварыЗаменителиХарактеристикаНоменклатуры.ОтметкаНезаполненного=Истина;
	Элементы.ТоварыЗаменителиХарактеристикаНоменклатуры.АвтоОтметкаНезаполненного=Истина;
	Элементы.ЗаменыХарактеристикаНоменклатуры.ОтметкаНезаполненного=Истина;
	Элементы.ЗаменыХарактеристикаНоменклатуры.АвтоОтметкаНезаполненного=Истина;
		
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(Элементы.ЗаменыНоменклатура.ТекстПодвала, Объект);
	УправлениеДиалогомДокументаСервер.УстановитьНадписьПодвалаКолонкиНоменклатура(Элементы.ТоварыЗаменителиНоменклатура.ТекстПодвала, Объект);
	
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьКолонкиСуммаВсего(ЭтотОбъект, Объект, "ТоварыЗаменители");
	
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Элементы.ПроцентПредоплаты.ТолькоПросмотр = Ложь;
	ИначеЕсли ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		Элементы.ПроцентПредоплаты.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// если надо запретить редактирование цен и сумм, то запретим
	Если НЕ ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах",Объект) Тогда
		Элементы.ТоварыЗаменителиЦена.Доступность       = Ложь;
		Элементы.ТоварыЗаменителиСумма.Доступность      = Ложь;
		Элементы.ТоварыЗаменителиСуммаВсего.Доступность = Ложь;
		Элементы.ТоварыЗаменителиСтавкаНДС.Доступность  = Ложь;
		Элементы.ТоварыЗаменителиСуммаНДС.Доступность   = Ложь;
	КонецЕсли;
	
	СпособВыбораСкидки = ПравоПользователя("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЗаменителиПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЗаменителиСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЗаменителиСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЗаменителиПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЗаменителиСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	Элементы.ЗаменыСуммаСкидки.Видимость   = Ложь;
	Элементы.ЗаменыСуммаСкидки.ТолькоПросмотр= Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если ЛЕВ(ДополнительныеПараметры, 17)="КомандаЗаполнения" И СтрНайти(ДополнительныеПараметры, "Замены") <> 0 Тогда
		// Если требуется произвести очистку таблицу "Замены", то и очистим таблицу "ТоварыЗаменители".
		Если ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения.ПараметрыЗаполнения, "ОчиститьТабличнуюЧасть", ЛОЖЬ) Тогда
			Объект.ТоварыЗаменители.Очистить();
		КонецЕсли;
	КонецЕсли;
	

	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "РазрешенияДляПересчета" Тогда
		
		// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"Замены");
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"ТоварыЗаменители");
		РассчитыватьСкидкуШапкиПоСтроке = Объект.Замены.Количество()>0 И Объект.Замены.Итог("СуммаСкидки")>0;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)

	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);   
	
	Если
		ТипЗнч(РезультатОповещения) = Тип("Структура")
		И РезультатОповещения.Свойство("ИзмененныеРеквизиты")
		И ТипЗнч(РезультатОповещения.ИзмененныеРеквизиты) = Тип("Структура")
		И РезультатОповещения.ИзмененныеРеквизиты.Свойство("БлокироватьПерерасчетСкидок")
	Тогда
		
		РассчитыватьСкидкуШапкиПоСтроке = Ложь;
		Для Каждого Строка Из Объект.Замены Цикл 
			Строка.СуммаСкидки = 0;
		КонецЦикла;
		
	КонецЕсли;

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти