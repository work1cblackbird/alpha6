// Модуль менеджера документа "Замена в заказе покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносИсполнителяИзСвойств() Экспорт
	
	ПеренесеныВсеСвойства = Истина;  
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	ЗаменаВЗаказеПокупателяДополнительныеРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаменаВЗаказеПокупателя.ДополнительныеРеквизиты КАК ЗаменаВЗаказеПокупателяДополнительныеРеквизиты
		|ГДЕ
		|	ЗаменаВЗаказеПокупателяДополнительныеРеквизиты.Свойство= &РеквизитКУдалению";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", РеквизитКУдалению);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваКУдалению = Новый Массив();		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаменаВЗаказеПокупателя");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Исполнитель) Тогда
				
				СвойствоИсполнительОрганизация = ЗначенияСвойств.Найти(РеквизитКУдалению,"Свойство");
				Руководитель     = ОрганизацииАльфаАвто.Руководитель(СвойствоИсполнительОрганизация.Значение, ДокументОбъект.Дата);
				
				Если ЗначениеЗаполнено(Руководитель) Тогда
					
					ДокументОбъект.Исполнитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						Руководитель,
						Выборка.Ссылка
					);
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Исполнитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
																
			Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
			Если Строка <> Неопределено Тогда 
						
				ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
			КонецЕсли;
											
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ЗаменаВЗаказеПокупателя""";
			
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);

					КонецЕсли;
									
					Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//	Параметры - Структура - параметры выполнения операции.
//
// Возвращаемое значение:
//	Булево - Результат проверки;
//
Функция ПроверитьПереносИсполнителяИзСвойств(Параметры) Экспорт
	
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаменаВЗаказеПокупателяДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗаменаВЗаказеПокупателяДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаменаВЗаказеПокупателя.ДополнительныеРеквизиты КАК ЗаменаВЗаказеПокупателяДополнительныеРеквизиты
	|ГДЕ
	|	ЗаменаВЗаказеПокупателяДополнительныеРеквизиты.Свойство = &РеквизитКУдалению
	|	И ЗаменаВЗаказеПокупателяДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", 	РеквизитКУдалению);
	Запрос.УстановитьПараметр("Ссылка",				Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти
  
#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.ТоварыЗаменители.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.ТоварыЗаменители.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.ТоварыЗаменители.Итог("СуммаСкидки") + Объект.ТоварыЗаменители.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти="Товары", СкидкаШапкиАбсолютная=Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

// Производит пересчет дополнительных реквизитов "Заказано", "Резерв" и "Распределено" табличной части "Замены".
//
// Параметры:
//  Объект        - Данные формы структура   - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ПолучитьДанныеПоЗаказу(Объект,ТекущаяСтрока = Неопределено) Экспорт
	
	// проверим наличие "Заказано" в табличной части
	Если НЕ ЕстьРеквизит(Объект, "Заказано", "Замены") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Объединение.Номенклатура,
	|	Объединение.ХарактеристикаНоменклатуры,
	|	СУММА(Объединение.Заказано) КАК Заказано,
	|	СУММА(Объединение.Резерв) КАК Резерв,
	|	СУММА(Объединение.Распределено) КАК Распределено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв,
	|		0 КАК Распределено
	|ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент, Заказ = &Заказ" + ?(ТекущаяСтрока = Неопределено, "", "
	|										И Номенклатура = &Номенклатура
	|										И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры") + ") КАК ЗаказыПокупателейОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыРаспределениеОстатки.Номенклатура,
	|		ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)
	|	ИЗ
	|		РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент, ЗаказПокупателя = &Заказ" + ?(ТекущаяСтрока = Неопределено, "", "
	|										И Номенклатура = &Номенклатура
	|										И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры") + ") КАК ЗаказыРаспределениеОстатки) КАК Объединение
	|СГРУППИРОВАТЬ ПО
	|	Объединение.Номенклатура,
	|	Объединение.ХарактеристикаНоменклатуры";
	ГраницаВремени = ?(Объект.Проведен, Новый Граница(Объект.Дата, ВидГраницы.Исключая), Объект.Дата);
	Запрос.УстановитьПараметр("Момент", ГраницаВремени);
	Запрос.УстановитьПараметр("Заказ",  Объект.ДокументОснование);
		
	Если ТекущаяСтрока = Неопределено Тогда
		
		ПоЗаказу = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТоваров Из ПоЗаказу Цикл
			
			СтрокиЗамены = Объект.Замены.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТоваров.Номенклатура, СтрокаТоваров.ХарактеристикаНоменклатуры));
			
			Для Каждого ТекСтрока Из СтрокиЗамены Цикл
				
				Если ТекСтрока.Коэффициент = 0 Тогда
					Коэффициент = 1;
				Иначе
					Коэффициент = ТекСтрока.Коэффициент;
				КонецЕсли;
			
				ТекСтрока.Заказано     = СтрокаТоваров.Заказано/Коэффициент;
				ТекСтрока.Резерв     = СтрокаТоваров.Резерв/Коэффициент;
				ТекСтрока.Распределено = СтрокаТоваров.Распределено/Коэффициент;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Запрос.УстановитьПараметр("Номенклатура",               ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
		Выборка = Запрос.Выполнить();
		Если Выборка.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ПоЗаказу = Выборка.Выбрать();
		ПоЗаказу.Следующий();
		Если ТекущаяСтрока.Коэффициент = 0 Тогда
			Коэффициент = 1;
		Иначе
			Коэффициент = ТекущаяСтрока.Коэффициент;
		КонецЕсли;
		
		ТекущаяСтрока.Заказано     = ПоЗаказу.Заказано/Коэффициент;
		ТекущаяСтрока.Резерв       = ПоЗаказу.Резерв/Коэффициент;
		ТекущаяСтрока.Распределено = ПоЗаказу.Распределено/Коэффициент;
		
	КонецЕсли;
	
КонецПроцедуры //ПолучитьДанныеПоЗаказу()

// Приводит макет печатной формы в соответствие с данными документа
//
// Параметры:
//  Макет -ТабличныйДокумент - макет печатной формы.
//  Объект - ДокументСсылка - документ, для которого производится действие
//
// Возвращаемое значение:
//  ТабличныйДокумент - Область шапки таблицы с заполненными параметрами.
//
Функция ПривестиМакетПечатнойФормыЗаменыВЗаказеПокупателя(Макет, Объект)
	// получим нужные области
	ОбластьТовар = Макет.Область("Товар");
	
	// определим, нужны ли скидки
	ЕстьСкидка = Ложь;
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("Товары");
	
	// проверим нужно ли выводить код в печатных формах
	ПоправкаНаКод = 0;
	ЕстьКод = ПравоПользователя("ВыводитьКодВПечатныхФормах");
	Если НЕ ЕстьКод И Макет.Области.Найти("Код") <> Неопределено Тогда
		ПоправкаНаКод = 1;
		// удалим область "Код"
		ОбластьКод = Макет.Область("Код | Строка");
		ОбластьШапка  = Макет.Область("Код | ШапкаТаблицы");
		ОбластьКодШапкаЗаменителей = Макет.Область("Код | ШапкаЗаменителей");
		ОбластьКодСтрокаЗаменителей = Макет.Область("Код | СтрокаЗаменителей");
		
		Сч = ОбластьКод.Право;
		ШиринаКода = ОбластьКод.ШиринаКолонки;
		ОбластьШапкаЛево = Неопределено;
		ОбластьСтрокаЛево = Неопределено;
		ОбластьШапкаЗаменителейЛево = Неопределено;
		ОбластьСтрокаЗаменителейЛево = Неопределено;
		
		ОбластьСтрокаПраво = Макет.Область(ОбластьКод.Верх, Сч, ОбластьКод.Низ, Сч);
		ОбластьШапкаПраво  = Макет.Область(ОбластьШапка.Низ, Сч, ОбластьШапка.Низ, Сч);
		ОбластьСтрокаЛево  = Макет.Область(ОбластьКод.Верх, Сч - 1, ОбластьКод.Низ, Сч - 1);
		ОбластьШапкаЛево   = Макет.Область(ОбластьШапка.Низ, Сч - 1, ОбластьШапка.Низ, Сч - 1);
		ОбластьСтрокаЗаменителейПраво =
			Макет.Область(ОбластьКодСтрокаЗаменителей.Верх, Сч, ОбластьКодСтрокаЗаменителей.Низ, Сч);
		ОбластьШапкаЗаменителейПраво =
			Макет.Область(ОбластьКодШапкаЗаменителей.Низ, Сч, ОбластьКодШапкаЗаменителей.Низ, Сч);
		ОбластьСтрокаЗаменителейЛево =
			Макет.Область(ОбластьКодСтрокаЗаменителей.Верх, Сч - 1, ОбластьКодСтрокаЗаменителей.Низ, Сч - 1);
		ОбластьШапкаЗаменителейЛево =
			Макет.Область(ОбластьКодШапкаЗаменителей.Низ, Сч - 1, ОбластьКодШапкаЗаменителей.Низ, Сч - 1);
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПраво, ОбластьСтрокаЛево);
		ЗаполнитьЗначенияСвойств(ОбластьШапкаПраво, ОбластьШапкаЛево);
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаменителейПраво, ОбластьСтрокаЗаменителейЛево);
		ЗаполнитьЗначенияСвойств(ОбластьШапкаЗаменителейПраво, ОбластьШапкаЗаменителейЛево);
		
		Если ОбластьШапкаЛево.Параметр = Неопределено Тогда
			ОбластьШапкаПраво.Текст = ОбластьШапкаЛево.Текст;
		КонецЕсли; 
		
		Если ОбластьШапкаЗаменителейЛево.Параметр = Неопределено Тогда
			ОбластьШапкаЗаменителейПраво.Текст = ОбластьШапкаЗаменителейЛево.Текст;
		КонецЕсли;
		
		ОбластьСтрокаЛево.Очистить();
		ОбластьШапкаЛево.Очистить();
		ОбластьСтрокаЗаменителейЛево.Очистить();
		ОбластьШапкаЗаменителейЛево.Очистить();
		
		ОбластьШапкаЛево.ШиринаКолонки  = ШиринаКода;
		ОбластьСтрокаЛево.ШиринаКолонки = ШиринаКода;
		ОбластьСтрокаЗаменителейЛево.ШиринаКолонки = ШиринаКода;
		ОбластьШапкаЗаменителейЛево.ШиринаКолонки = ШиринаКода;
		
		Отступ = 2;
		Макет.Область(ОбластьШапка.Низ, ОбластьКод.Право - Отступ, ОбластьШапка.Низ, ОбластьКод.Право).Объединить();
		Макет.Область(
			ОбластьСтрокаЛево.Низ,
			ОбластьКод.Право - Отступ,
			ОбластьСтрокаЛево.Низ,
			ОбластьКод.Право).Объединить();
		Макет.Область(
			ОбластьКодШапкаЗаменителей.Низ,
			ОбластьКодСтрокаЗаменителей.Право,
			ОбластьКодШапкаЗаменителей.Низ,
			ОбластьКодСтрокаЗаменителей.Право).Объединить();
		Макет.Область(
			ОбластьСтрокаЗаменителейЛево.Низ,
			ОбластьКодСтрокаЗаменителей.Право - Отступ,
			ОбластьСтрокаЗаменителейЛево.Низ,
			ОбластьКодСтрокаЗаменителей.Право).Объединить();
		
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ЕстьСкидка = ЕстьРеквизит(Объект, "СуммаСкидки", ТабличнаяЧасть) И (Объект[ТабличнаяЧасть].Итог("СуммаСкидки") <> 0);
		ЕстьСкидка = ЕстьСкидка
			ИЛИ (ЕстьРеквизит(Объект,"СуммаСкидкиСтроки", ТабличнаяЧасть)
			И (Объект[ТабличнаяЧасть].Итог("СуммаСкидкиСтроки") <> 0));
		ЕстьСкидка = ЕстьСкидка
			ИЛИ (ЕстьРеквизит(Объект,"СуммаСкидкиБонусами", ТабличнаяЧасть)
			И (Объект[ТабличнаяЧасть].Итог("СуммаСкидкиБонусами") <> 0));
		Если ЕстьСкидка Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьШапкаТаблицы = Макет.Область("ШапкаТаблицы");
	ОбластьШапкаТаблицы.СоздатьФорматСтрок();
	ОбластьСтрока = Макет.Область("Строка");
	ОбластьСтрока.СоздатьФорматСтрок();
	
	Если НЕ ЕстьСкидка И  Макет.Области.Найти("Скидка") <> Неопределено Тогда
			// удалим область "Скидка"
			ОбластьСкидка = Макет.Область("Скидка | Строка");
			ОбластьШапка  = Макет.Область("Скидка | ШапкаТаблицы");
			ОбластьПодвал = Макет.Область("Скидка | Подвал");
			ОбластьШапкаЗаменителей = Макет.Область("Скидка | ШапкаЗаменителей");
			ОбластьСкидкаЗаменителей = Макет.Область("Скидка | СтрокаЗаменителей");
			
			Сч = ОбластьСкидка.Право;
			ШиринаСкидки = ОбластьСкидка.ШиринаКолонки;
			ОбластьШапкаЛево = Неопределено;
			ОбластьСтрокаЛево = Неопределено;
			ОбластьШапкаЗаменителейЛево = Неопределено;
			ОбластьСтрокаЗаменителейЛево = Неопределено;
			
			Пока Сч > ОбластьСкидка.Право - (4 - ПоправкаНаКод) Цикл
				ОбластьСтрокаПраво = Макет.Область(ОбластьСкидка.Верх, Сч, ОбластьСкидка.Низ, Сч);
				ОбластьШапкаПраво  = Макет.Область(ОбластьШапка.Низ, Сч, ОбластьШапка.Низ, Сч);
				ОбластьСтрокаЛево  = Макет.Область(ОбластьСкидка.Верх, Сч - 1, ОбластьСкидка.Низ, Сч - 1);
				ОбластьШапкаЛево   = Макет.Область(ОбластьШапка.Низ, Сч - 1, ОбластьШапка.Низ, Сч - 1);
				ОбластьСтрокаЗаменителейПраво =
					Макет.Область(ОбластьСкидкаЗаменителей.Верх, Сч, ОбластьСкидкаЗаменителей.Низ, Сч);
				ОбластьШапкаЗаменителейПраво =
					Макет.Область(ОбластьШапкаЗаменителей.Низ, Сч, ОбластьШапкаЗаменителей.Низ, Сч);
				ОбластьСтрокаЗаменителейЛево =
					Макет.Область(ОбластьСкидкаЗаменителей.Верх, Сч - 1, ОбластьСкидкаЗаменителей.Низ, Сч - 1);
				ОбластьШапкаЗаменителейЛево =
					Макет.Область(ОбластьШапкаЗаменителей.Низ, Сч - 1, ОбластьШапкаЗаменителей.Низ, Сч - 1);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаПраво, ОбластьСтрокаЛево);
				ЗаполнитьЗначенияСвойств(ОбластьШапкаПраво, ОбластьШапкаЛево);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаменителейПраво, ОбластьСтрокаЗаменителейЛево);
				ЗаполнитьЗначенияСвойств(ОбластьШапкаЗаменителейПраво, ОбластьШапкаЗаменителейЛево);
				Если ОбластьШапкаЛево.Параметр = Неопределено Тогда
					ОбластьШапкаПраво.Текст = ОбластьШапкаЛево.Текст;
				КонецЕсли;
				ОбластьСтрокаЛево.Очистить();
				ОбластьШапкаЛево.Очистить();
				ОбластьСтрокаЗаменителейЛево.Очистить();
				ОбластьШапкаЗаменителейЛево.Очистить();
				Сч = Сч - 1;
			КонецЦикла;
			ОбластьШапкаЛево.ШиринаКолонки  = ШиринаСкидки;
			ОбластьСтрокаЛево.ШиринаКолонки = ШиринаСкидки; 
			ОбластьШапкаЗаменителейЛево.ШиринаКолонки = ШиринаСкидки;
			ОбластьСтрокаЗаменителейЛево.ШиринаКолонки = ШиринаСкидки;
			
			Макет.Область(
				ОбластьШапка.Низ,
				ОбластьСкидка.Право - (6 - ПоправкаНаКод),
				ОбластьШапка.Низ,
				ОбластьСкидка.Право - (4 - ПоправкаНаКод)).Объединить();
			Макет.Область(
				ОбластьСтрокаЛево.Низ,
				ОбластьСкидка.Право - (6 - ПоправкаНаКод),
				ОбластьСтрокаЛево.Низ,
				ОбластьСкидка.Право - (4 - ПоправкаНаКод)).Объединить();
			Макет.Область(
				ОбластьШапкаЗаменителей.Низ,
				ОбластьСкидкаЗаменителей.Право - (6 - ПоправкаНаКод),
				ОбластьШапкаЗаменителей.Низ,
				ОбластьСкидкаЗаменителей.Право - (4 - ПоправкаНаКод)).Объединить();
			Макет.Область(
				ОбластьСтрокаЗаменителейЛево.Низ,
				ОбластьСкидкаЗаменителей.Право - (6 - ПоправкаНаКод),
				ОбластьСтрокаЗаменителейЛево.Низ,
				ОбластьСкидкаЗаменителей.Право - (4 - ПоправкаНаКод)).Объединить();
			
			ОбластьПодвалСкидка = Макет.Область(
				ОбластьПодвал.Верх,
				ОбластьСкидка.Право - 1,
				ОбластьПодвал.Верх,
				ОбластьСкидка.Право);
			ОбластьПодвалСкидка.Объединить();
			ОбластьПодвалСкидка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ОбластьПодвалСкидка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			
			// объединим где есть ИтогоПоСтранице
			ОбластьИтогоПоСтранице = Макет.Области.Найти("ИтогоПоСтранице");
			Если ЗначениеЗаполнено(ОбластьИтогоПоСтранице) Тогда
				Область = Макет.Область(
					ОбластьИтогоПоСтранице.Верх,
					ОбластьСкидка.Право - 1,
					ОбластьИтогоПоСтранице.Верх,
					ОбластьСкидка.Право);
				Область.Объединить();
				Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			КонецЕсли;
			
			ОбластьПодвалАкта = Макет.Области.Найти("ПодвалАкта");
			Если ЗначениеЗаполнено(ОбластьПодвалАкта) Тогда
				Область = Макет.Область(
					ОбластьПодвалАкта.Верх,
					ОбластьСкидка.Лево - 1,
					ОбластьПодвалАкта.Верх,
					ОбластьСкидка.Лево);
				Область.Объединить();
				Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			КонецЕсли;
			
	КонецЕсли;
	
	// теперь запишем параметры шапки
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Если ЕстьКод Тогда
		КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		ОбластьМакета.Параметры.ИмяКолонкиКод = СтрЗаменить(КолонкаКода.Синоним, "/", Символы.ПС);
	КонецЕсли;
	
	// заполняем заголовок колонки НДС по типу цен
	Параметры = Новый Структура("НДС");
	Параметры.НДС = "НДС";
	Если ЕстьРеквизит(Объект, "ТипЦен") И Объект.ТипЦен.ЦенаВключаетНДС Тогда	// Если НДС включен
		Организация = Неопределено;
		ПодразделениеКомпании = Неопределено;
		ДатаСреза = Неопределено;
		
		Если ЕстьРеквизит(Объект,"Организация") Тогда
			Организация = Объект.Организация;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект,"ПодразделениеКомпании") Тогда
			ПодразделениеКомпании = Объект.ПодразделениеКомпании;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Дата") Тогда
			ДатаСреза = Объект.Дата;
		КонецЕсли;
		
		Если НЕ ПолучитьПараметрыПлательщикаНДС(Организация, ПодразделениеКомпании, ДатаСреза).ОсвобожденОтНДС Тогда
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли; 
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(Параметры);
	
	Возврат ОбластьМакета;
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Замены");
		ОбязательныеРеквизиты.Добавить("ТоварыЗаменители");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Замены.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Замены.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Замены.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("ТоварыЗаменители.Номенклатура");
	ОбязательныеРеквизиты.Добавить("ТоварыЗаменители.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("ТоварыЗаменители.Коэффициент");
	ОбязательныеРеквизиты.Добавить("ТоварыЗаменители.Количество");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;

КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Замены", 				УникальныеТовары);
	УникальныеРеквизиты.Вставить("ТоварыЗаменители", 	УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДокументОснование",         КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Замены.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// отрабатываем приватно
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	ТребуетсяЗаполнитьНаОсновании = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяЗаполнитьНаОсновании", Ложь);
		
	Если ТребуетсяУстановкаЦен Тогда
		
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
		Для Каждого СтрокаТовары Из Объект.ТоварыЗаменители Цикл
			ОбработкаТабличнойЧастиТовары.УстановитьЦены(Объект, СтрокаТовары, ПараметрыДействия,"ТоварыЗаменители");
			ТоварыЗаменителиЦенаПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
		КонецЦикла;
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'"));
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		Для Каждого СтрокаТовары Из Объект.ТоварыЗаменители Цикл
			СтрокаТовары.Цена = Окр(СтрокаТовары.Цена*КоэффициентСоотношенияКурсов, 2);
			ТоварыЗаменителиЦенаПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
		КонецЦикла;
		
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	Если ТребуетсяЗаполнитьНаОсновании Тогда
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Замены);
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.ТоварыЗаменители);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
	// обрабатываем приватно
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		
		Объект.Контрагент = ?(НЕ ЗначениеЗаполнено(Объект.ДокументОснование), Неопределено, Объект.ДокументОснование.ПодразделениеПолучатель);
		Объект.СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
		
		Для Каждого ТекСтрока Из Объект.ТоварыЗаменители Цикл
			
			ТекСтрока.СкидкаНаТовар = Объект.СкидкаНаценка;
			ТекСтрока.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			ТоварыЗаменителиСтавкаНДСПриИзменении(Объект, ТекСтрока, ПараметрыДействия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// пересчет дополнительных реквизитов табличной части "Замены"
	ПолучитьДанныеПоЗаказу(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыНДС = Новый Структура();
	Если Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
		ЭтоЧастноеЛицо = Ложь;
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭтоЧастноеЛицо = Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
		КонецЕсли;
		ОсвобожденОтНДС = Объект.Контрагент.ОсвобожденОтНДС ИЛИ ЭтоЧастноеЛицо;
	Иначе
		ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
		ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из Объект.ТоварыЗаменители Цикл
		Если ОсвобожденОтНДС Тогда
			СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТоваров.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, СтрокаТоваров.Номенклатура);
		КонецЕсли;
		ТоварыЗаменителиСтавкаНДСПриИзменении(Объект, СтрокаТоваров);
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) И Объект.Исполнитель.Организация <> Объект.Организация Тогда
		Объект.Исполнитель = Справочники.Подписанты.ПустаяСсылка();
	КонецЕсли;

	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	ЭтоПокупка     = Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка);
	
	// Проверяем является ли контрагент плательщиком НДС (соответственно проставляем ставки НДС)
	// только для документов поступления.
	Если ЭтоПокупка Тогда
		
		ЭтоЧастноеЛицо = Ложь;
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭтоЧастноеЛицо = Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
		КонецЕсли;
		ОсвобожденОтНДС = Объект.Контрагент.ОсвобожденОтНДС ИЛИ ЭтоЧастноеЛицо;
		
		Для Каждого СтрокаТоваров Из Объект.ТоварыЗаменители Цикл
			Если ОсвобожденОтНДС Тогда
				СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			Иначе
				СтрокаТоваров.СтавкаНДС = СтрокаТоваров.Номенклатура.СтавкаНДС;
			КонецЕсли;
			ТоварыЗаменителиСтавкаНДСПриИзменении(Объект, СтрокаТоваров);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия); 
	ПараметрыДействия.Вставить("РассчитыватьСкидкуШапкиПоСтроке", Ложь);
	Для Каждого Строка Из Объект.ТоварыЗаменители Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла; 
	
	// Вызываем общий обработчик события
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "ТоварыЗаменители");
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Карточка = Объект.Карточка;
	Если ЗначениеЗаполнено(Карточка)
		И Карточка.ВидКарточки = Перечисления.ВидыКарточек.ДисконтнаяКарта
		И ТипЗнч(Карточка.Объект) = Тип("СправочникСсылка.Контрагенты")
		И ЕстьРеквизит(Объект, "Контрагент")
		И ЗначениеЗаполнено(Карточка.Объект)
		И Объект.Контрагент <> Карточка.Объект Тогда
		
		Объект.Контрагент = Карточка.Объект;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "ТоварыЗаменители");
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Замены".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаменыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия, "Замены");
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
		Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// пересчет дополнительных реквизитов табличной части "Замены"
	ПолучитьДанныеПоЗаказу(Объект, Строка);
	
КонецПроцедуры // ЗаменыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Замены".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаменыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия, "Замены");
	
	// пересчет дополнительных реквизитов табличной части "Замены"
	ПолучитьДанныеПоЗаказу(Объект, Строка);
	
КонецПроцедуры // ЗаменыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Замены".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаменыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия, "Замены");
	
КонецПроцедуры // ЗаменыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Замены".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаменыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия, "Замены");
			
КонецПроцедуры // ЗаменыКоличествоПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыЗаменители

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);  

	Если ЗначениеЗаполнено(Объект.ДокументОснование) И  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;

	Строка.ИдентификаторСтроки = ПараметрыДействия.ИдентификаторСтроки;

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" 
// в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
КонецПроцедуры // ТоварыЗаменителиХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
КонецПроцедуры // ТоварыЗаменителиЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия); 
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
КонецПроцедуры // ТоварыЗаменителиСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиПроцентСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиСуммаСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	Если ЗначениеЗаполнено(Объект.ДокументОснование) И  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда 
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиСкидкаНаТоварПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиПроцентСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "ТоварыЗаменители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаменителиСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия, "ТоварыЗаменители");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыЗаменителиСуммаСкидкиСтрокиПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Замены");
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "ТоварыЗаменители");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ЗаменаВЗаказеПокупателя");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Замены");
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "ТоварыЗаменители");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ЗаменыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по документу основания'");
	Команда.Идентификатор	= "ЗаменыЗаполнитьПоДокументуОснования";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Замены";

КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ЗаменыЗаполнитьПоДокументуОснования.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ЗаменыЗаполнитьПоДокументуОснования.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по документу основания
//
Функция ЗаменыЗаполнитьПоДокументуОснования(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;  
	
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		ЗаполнитьПоЗаказуПокупателя(Ссылка, Объект, ПараметрыДействия);
	Иначе
		
		ЗаполнитьПоЗаказуВнутреннему(Ссылка, Объект, ПараметрыДействия);
		
	КонецЕсли;
		
КонецФункции // ЗаменыЗаполнитьПоДокументуОснования()

Функция ЗаполнитьПоЗаказуПокупателя(Ссылка, Объект, ПараметрыДействия)  
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	             |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Количество,
	             |	ЗаказыПокупателейОстатки.СкладКомпании КАК МестоРазмещения,
	             |	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	             |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	             |ГДЕ
	             |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток, 0) > 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	             |	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ЗаказПокупателяТовары.СуммаСкидки) КАК СуммаСкидки,
	             |	МАКСИМУМ(ЗаказПокупателяТовары.Номенклатура.ОсновнаяЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	             |	МАКСИМУМ(ЗаказПокупателяТовары.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент) КАК Коэффициент,
	             |	СУММА(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент / ЗаказПокупателяТовары.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент) КАК Количество
	             |ИЗ
	             |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	             |ГДЕ
	             |	ЗаказПокупателяТовары.Ссылка = &Заказ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказПокупателяТовары.Номенклатура,
	             |	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("НаМомент", Новый МоментВремени(Объект.Дата));
	Запрос.УстановитьПараметр("Заказ",    Объект.ДокументОснование);  
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Объект.СкидкаНаценка = Объект.ДокументОснование.СкидкаНаценка; 
	
	Объект.Замены.Загрузить(МассивРезультатов[0].Выгрузить()); 
    ВыборкаДокумент = МассивРезультатов[1].Выбрать();
	
	ВВалютеЗаказа = Истина;
	
	Если Объект.ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда 
		ВВалютеЗаказа = Ложь; 
		ВалютаЗаказа   =  Объект.ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа, Объект.Дата);
		КурсЗаказа     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	Для Каждого СтрокаТоваров Из Объект.Замены Цикл
		
		Документы.ЗаменаВЗаказеПокупателя.ЗаменыНоменклатураПриИзменении(Объект, СтрокаТоваров, ПараметрыДействия);
		СтрокаТоваров.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		Если (НЕ СтрокаТоваров.Коэффициент = 0) И (НЕ СтрокаТоваров.Коэффициент = 1) Тогда
			
			СтрокаТоваров.Количество = Окр(СтрокаТоваров.Количество/СтрокаТоваров.Коэффициент, 3);
			Документы.ЗаменаВЗаказеПокупателя.ЗаменыКоличествоПриИзменении(Объект, СтрокаТоваров, ПараметрыДействия);
			
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
			
		Если ВыборкаДокумент.НайтиСледующий(СтруктураПоиска) Тогда
			Если ВыборкаДокумент.Количество = СтрокаТоваров.Количество Тогда 
				СуммаСкидки = ВыборкаДокумент.СуммаСкидки;
			ИначеЕсли  ВыборкаДокумент.Количество > СтрокаТоваров.Количество Тогда 
				СуммаСкидки =ОКР(ВыборкаДокумент.СуммаСкидки/ВыборкаДокумент.Количество*СтрокаТоваров.Количество, 2);	
			КонецЕсли; 
			Если  ВВалютеЗаказа Тогда
				СтрокаТоваров.СуммаСкидки = СуммаСкидки;
			Иначе
				СтрокаТоваров.СуммаСкидки	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаСкидки,
					ВалютаЗаказа,
					КурсЗаказа,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента
			); 
			КонецЕсли;
				
			ВыборкаДокумент.Сбросить();
				
		КонецЕсли;	
		
	КонецЦикла;

КонецФункции

Функция ЗаполнитьПоЗаказуВнутреннему(Ссылка, Объект, ПараметрыДействия) 
	
	Объект.СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Ссылка.Пустая(),"","&НаМомент")+", 
	|		Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток) > 0
	|";
	
	Запрос.УстановитьПараметр("НаМомент",   ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(Объект.Дата),Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("Заказ",      Объект.ДокументОснование);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Замены.Добавить();
		НоваяСтрока.ИдентификаторСтроки        = Новый УникальныйИдентификатор;
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество                 = Выборка.Количество;
		Документы.ЗаменаВЗаказеПокупателя.ЗаменыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;

КонецФункции

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаменаВЗаказеПокупателя",
		"ПФ_MXL_ЗаменаВЗаказеПокупателя",
		НСтр("ru = 'Замена в заказе покупателя'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаменаВЗаказеПокупателя") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ЗаменаВЗаказеПокупателя",
															НСтр("ru = 'Замена в заказе покупателя'"),
															ПечатьЗаменаВЗаказеПокупателя(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;		
КонецПроцедуры // Печать()

// Формирует печатную форму "ЗаменаВЗаказеПокупателя"
//
Функция ПечатьЗаменаВЗаказеПокупателя(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаменаВЗаказеПокупателя_ЗаменаВЗаказеПокупателя";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаменаВЗаказеПокупателя.ПФ_MXL_ЗаменаВЗаказеПокупателя");
				
		ОбластьШапкаТаблицы = ПривестиМакетПечатнойФормыЗаменыВЗаказеПокупателя(Макет, Документ);
		
		// определяем есть ли скидки
		ЕстьСкидка = Ложь;
		Если Документ.ТоварыЗаменители.Итог("СуммаСкидки") <> 0 
			ИЛИ Документ.ТоварыЗаменители.Итог("СуммаСкидкиСтроки") <> 0 Тогда
			
			ЕстьСкидка = Истина;
			
		КонецЕсли;
		
		ОбластьЗаголовокСчета 	 = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьЗаголовок      	 = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          	 = Макет.ПолучитьОбласть("Строка");
		ОбластьШапкаЗаменителей  = Макет.ПолучитьОбласть("ШапкаЗаменителей");
		ОбластьСтрокаЗаменителей = Макет.ПолучитьОбласть("СтрокаЗаменителей");
		ОбластьИтогоПоСтранице	 = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал         	 = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// Заголовок счета
		ОбластьЗаголовокСчета.Параметры.Заполнить(Документ);
		
		ОбластьЗаголовокСчета.Параметры.БанкПолучателя =
			Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Организация).Банк;
		
		ОбластьЗаголовокСчета.Параметры.БанкПолучателяПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("Банк"));
		
		ОбластьЗаголовокСчета.Параметры.БИКБанкаПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("БИК"));
		
		ОбластьЗаголовокСчета.Параметры.СчетБанкаПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("КоррСчет"));
		
		ОбластьЗаголовокСчета.Параметры.ИНН =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("ИНН"));
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ОбластьЗаголовокСчета.Параметры.КПП = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, Новый Структура("КПП"), ДополнительныеПараметры);
		
		ОбластьЗаголовокСчета.Параметры.Получатель = Документ.Организация;
		
		ОбластьЗаголовокСчета.Параметры.ПолучательПредставление =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, ДатаДокумента);
		
		ОбластьЗаголовокСчета.Параметры.СчетПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, Новый Структура("БанковскийСчет"));
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСчета);
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		СтруктураПредставления = Новый Структура();
		СтруктураПредставления.Вставить("ИНН",              "ИНН ");
		СтруктураПредставления.Вставить("КПП",              "КПП ");
		СтруктураПредставления.Вставить("Наименование",     "");
		СтруктураПредставления.Вставить("АдресЮридический", "");
		СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, СтруктураПредставления, ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ДокументОснованиеПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
		
		Если НЕ ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьЗаголовок.Параметры.ДокументОснованиеПредставление	= НСтр("ru = '<заказ не выбран>'")
		ИначеЕсли ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ОбластьЗаголовок.Параметры.Контрагент = Документ.ДокументОснование.Контрагент;
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.НаДату = ДатаДокумента;
			ОбластьЗаголовок.Параметры.КонтрагентПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.ДокументОснование.Контрагент, СтруктураПредставления, ДополнительныеПараметры);
		ИначеЕсли ТипЗнч(Документ.ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
			ОбластьЗаголовок.Параметры.Контрагент = Документ.ДокументОснование.ПодразделениеПолучатель;
			ОбластьЗаголовок.Параметры.КонтрагентПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Документ.ДокументОснование.ПодразделениеПолучатель, ДатаДокумента);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Замены;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("Количество", Формат(СтрокаТЧ.Количество, ФорматВыводаКоличества));
			СтруктураСтроки.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
			
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
			МассивЗаменителей = Документ.ТоварыЗаменители.НайтиСтроки(СтруктураПоиска);
		
			мсвДопОбластиПодвала = Неопределено;
			Если МассивЗаменителей.Количество() > 0 Тогда
				ТабДокВрем = Новый ТабличныйДокумент;
				ТабДокВрем.Вывести(ОбластьШапкаЗаменителей);
				Для Каждого СтрокаЗаменителей Из МассивЗаменителей Цикл
					
					СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаЗаменителей,
						Документ);
					СтруктураСтроки.Вставить("Количество", Формат(СтрокаЗаменителей.Количество, ФорматВыводаКоличества));
					СтруктураСтроки.Вставить("ЕдиницаИзмерения", СтрокаЗаменителей.ЕдиницаИзмерения);
					СтруктураСтроки.Вставить("Цена", Формат(СтрокаЗаменителей.Цена, ФорматВыводаСуммы));
					СтруктураСтроки.Вставить("ПредставлениеСкидки",
						Формат(СтрокаЗаменителей.СуммаСкидкиСтроки + СтрокаЗаменителей.СуммаСкидки, ФорматВыводаСуммы));
					СтруктураСтроки.Вставить("СуммаНДС", Формат(СтрокаЗаменителей.СуммаНДС, ФорматВыводаСуммы));
					СтруктураСтроки.Вставить("СуммаВсего", Формат(СтрокаЗаменителей.СуммаВсего, ФорматВыводаСуммы));
					
					ОбластьСтрокаЗаменителей.Параметры.Заполнить(СтруктураСтроки);
					ТабДокВрем.Вывести(ОбластьСтрокаЗаменителей);
				КонецЦикла;
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ТабДокВрем);
			КонецЕсли;
				
			// доп. области
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				Если мсвДопОбластиПодвала = Неопределено Тогда
					мсвДопОбластиПодвала = Новый Массив;
				КонецЕсли;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			Если МассивЗаменителей.Количество() > 0 Тогда
				ТабличныйДокумент.Вывести(ОбластьШапкаЗаменителей);
				Для Каждого СтрокаЗаменителей Из МассивЗаменителей Цикл
					// заполняем данные строки
					СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаЗаменителей,
						Документ);
					СтруктураСтроки.Вставить("Количество", Формат(СтрокаЗаменителей.Количество, ФорматВыводаКоличества));
					СтруктураСтроки.Вставить("ЕдиницаИзмерения", СтрокаЗаменителей.ЕдиницаИзмерения);
					СтруктураСтроки.Вставить("Цена", Формат(СтрокаЗаменителей.Цена, ФорматВыводаСуммы));
					СтруктураСтроки.Вставить("ПредставлениеСкидки", 
						Формат(СтрокаЗаменителей.СуммаСкидкиСтроки + СтрокаЗаменителей.СуммаСкидки, ФорматВыводаСуммы));
					СтруктураСтроки.Вставить("СуммаНДС", Формат(СтрокаЗаменителей.СуммаНДС, ФорматВыводаСуммы));
					СтруктураСтроки.Вставить("СуммаВсего", Формат(СтрокаЗаменителей.СуммаВсего, ФорматВыводаСуммы));
					ОбластьСтрокаЗаменителей.Параметры.Заполнить(СтруктураСтроки);
					ТабличныйДокумент.Вывести(ОбластьСтрокаЗаменителей);
					// добавляем итоги
					УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаЗаменителей, СтруктураИтоговПоСтранице);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = Документ.ТоварыЗаменители.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = Документ.ТоварыЗаменители.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если ЕстьСкидка Тогда
			СуммаСкидки = Документ.ТоварыЗаменители.Итог("СуммаСкидки");
			СуммаСкидки = СуммаСкидки + Документ.ТоварыЗаменители.Итог("СуммаСкидкиСтроки");
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СуммаСкидки, ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ Документ.ТоварыЗаменители.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей
		ДанныеПодписант = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "Исполнитель"); 	 
		ОбластьПодвал.Параметры.ИсполнительОрганизацияПредставление = ДанныеПодписант.Представление;

		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ЗаказчикКонтрагент", "ЗаказчикКонтрагент"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьЗаменаВЗаказеПокупателя()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаменаВЗаказеПокупателя);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли