// Модуль документа "Замена в заказе покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда 
		Подписант = ОрганизацииАльфаАвто.Руководитель(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		
		Если ЗначениеЗаполнено(Подписант)Тогда
			Исполнитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании);	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// Проверим, чтоб для каждого товара была указана хотя бы одна замена 	
	Для Каждого Товар Из Замены Цикл
		Если ТоварыЗаменители.Найти(Товар.ИдентификаторСтроки, "ИдентификаторСтроки") = Неопределено Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Для товара %1 %2 не указана замена.'"),
				Товар.Номенклатура, 
				Товар.Номенклатура.Артикул
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
		
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Ссылка.ДокументОснование КАК Заказ,
	|	ДокументТовары.Ссылка.ДокументОснование.СкладКомпании КАК СкладЗаказа,
	|	ДокументТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокументТовары.Количество*ДокументТовары.Коэффициент КАК Количество
	|ИЗ
	|	Документ.ЗаменаВЗаказеПокупателя.Замены КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка
	|");
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// Снимаем резервы по заказам (если таковые были)
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект  = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейЗаказыПокупателей.Заказ           = ДокументОснование;
	НаборЗаписейЗаказыПокупателей.ВидОперации     = Перечисления.ВидыОперацийЗаказов.Замена;
	НаборЗаписейЗаказыПокупателей.СкладКомпании   = Неопределено;
	Отказ = НЕ НаборЗаписейЗаказыПокупателей.КорректировкаСписаниемЗаказаПокупателя() ИЛИ Отказ;
	
	// Снимаем распределение заказов покупателя
	РезультатЗакрытияЗаказов = НаборЗаписейЗаказыПокупателей.Выгрузить();
	РезультатЗакрытияЗаказов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Заказано");
	
	КолонкаКоличества = РезультатЗакрытияЗаказов.Колонки.Найти("Заказано");
	КолонкаКоличества.Имя = "Количество";
	
	НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
	НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
	НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗакрытияЗаказов;
	НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = ДокументОснование;
	НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = Неопределено;
	Отказ = НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
	
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		// Корректировка распределения других заказов, на внутреннем заказе
		НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
		НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
		НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗакрытияЗаказов;
		НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = Неопределено;
		НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = ДокументОснование;
		Отказ=НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаменаВЗаказеПокупателяТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗаменаВЗаказеПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаменаВЗаказеПокупателяТовары.Количество * ЗаменаВЗаказеПокупателяТовары.Коэффициент КАК Количество,
	|	ЗаменаВЗаказеПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаменаВЗаказеПокупателяТовары.СуммаВсего КАК Сумма
	|ИЗ
	|	Документ.ЗаменаВЗаказеПокупателя.ТоварыЗаменители КАК ЗаменаВЗаказеПокупателяТовары
	|ГДЕ
	|	ЗаменаВЗаказеПокупателяТовары.Ссылка = &Ссылка
	|	И ЗаменаВЗаказеПокупателяТовары.Количество > 0";
	
	// проводим заказ покупателя
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Запрос.Выполнить();
	НаборЗаписейЗаказыПокупателей.Контрагент                = Контрагент;
	НаборЗаписейЗаказыПокупателей.Заказ                     = ДокументОснование;
	НаборЗаписейЗаказыПокупателей.СкладКомпании             = ДокументОснование.СкладКомпании;
	НаборЗаписейЗаказыПокупателей.ВидОперации               = Перечисления.ВидыОперацийЗаказов.Замена;
	НаборЗаписейЗаказыПокупателей.Заказывать                = Истина;
	НаборЗаписейЗаказыПокупателей.Резервировать             = Ложь;
	Отказ = НЕ НаборЗаписейЗаказыПокупателей.Приход() ИЛИ Отказ;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СуммаКорректировки = НаборЗаписейЗаказыПокупателей.Итог("Сумма");
		ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ДокументОснование, СуммаКорректировки);
		Если ТаблицаДолгов.Количество() > 0 Тогда
			СтрокаДолга = ТаблицаДолгов[0];
			СуммаЗаказа       = Формат(СтрокаДолга.СуммаЗаказа,       "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + СокрЛП(СтрокаДолга.Валюта);
			Предоплата        = Формат(СтрокаДолга.Предоплата,        "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + СокрЛП(СтрокаДолга.Валюта);
			ПроцентПредоплаты = Формат(СтрокаДолга.ПроцентПредоплаты, "ЧЦ=15; ЧДЦ=2; ЧН=0") + "%";
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Стоимость заказа после замены составит: %1, внесена предоплата %2, установленный процент предоплаты %3.'"),СуммаЗаказа,Предоплата,ПроцентПредоплаты);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЗаменаВЗаказеПокупателя;
	Контрагент  = ДанныеЗаполнения.Контрагент;
		
	// А теперь откорректируем ТЧ на предмет того, что в ней должны остаться только текущие резервы.
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	             |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Количество,
	             |	ЗаказыПокупателейОстатки.СкладКомпании КАК МестоРазмещения,
	             |	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	             |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	             |ГДЕ
	             |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток, 0) > 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	             |	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ЗаказПокупателяТовары.СуммаСкидки) КАК СуммаСкидки,
	             |	МАКСИМУМ(ЗаказПокупателяТовары.Номенклатура.ОсновнаяЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	             |	МАКСИМУМ(ЗаказПокупателяТовары.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент) КАК Коэффициент,
	             |	СУММА(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент / ЗаказПокупателяТовары.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент) КАК Количество
	             |ИЗ
	             |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	             |ГДЕ
	             |	ЗаказПокупателяТовары.Ссылка = &Заказ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказПокупателяТовары.Номенклатура,
	             |	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("НаМомент", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Заказ",    ДанныеЗаполнения);  
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	Замены.Загрузить(МассивРезультатов[0].Выгрузить()); 
    ВыборкаДокумент = МассивРезультатов[1].Выбрать();
	
	СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	Для Каждого СтрокаТоваров Из Замены Цикл
		
		Документы.ЗаменаВЗаказеПокупателя.ЗаменыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТоваров, ДополнительныеСвойства.ПараметрыДействия);
		СтрокаТоваров.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		Если (НЕ СтрокаТоваров.Коэффициент = 0) И (НЕ СтрокаТоваров.Коэффициент = 1) Тогда
			
			СтрокаТоваров.Количество = Окр(СтрокаТоваров.Количество/СтрокаТоваров.Коэффициент, 3);
			Документы.ЗаменаВЗаказеПокупателя.ЗаменыКоличествоПриИзменении(ЭтотОбъект, СтрокаТоваров, ДополнительныеСвойства.ПараметрыДействия);
			
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		
		Если ВыборкаДокумент.НайтиСледующий(СтруктураПоиска) Тогда
			Если ВыборкаДокумент.Количество = СтрокаТоваров.Количество Тогда 
				СтрокаТоваров.СуммаСкидки = ВыборкаДокумент.СуммаСкидки;
			ИначеЕсли  ВыборкаДокумент.Количество > СтрокаТоваров.Количество Тогда 
				СтрокаТоваров.СуммаСкидки =ОКР(ВыборкаДокумент.СуммаСкидки/ВыборкаДокумент.Количество*СтрокаТоваров.Количество, 2);	
			КонецЕсли; 
				
			ВыборкаДокумент.Сбросить();
				
		КонецЕсли;	
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЗаменаВЗаказеВнутреннее;
	Контрагент  = ДанныеЗаполнения.ПодразделениеПолучатель;
	СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
	
	// А теперь откорректируем ТЧ на предмет того, что в ней должны остаться только текущие резервы.
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток,0) КАК Количество,
	|	ЗаказыПокупателейОстатки.СкладКомпании КАК МестоРазмещения,
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент,Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток, 0) > 0
	|";
	
	Запрос.УстановитьПараметр("НаМомент", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Заказ",    ДанныеЗаполнения);
	
	Замены.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТоваров Из Замены Цикл
		
		Документы.ЗаменаВЗаказеПокупателя.ЗаменыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТоваров, ДополнительныеСвойства.ПараметрыДействия);
		СтрокаТоваров.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		Если (НЕ СтрокаТоваров.Коэффициент = 0) И (НЕ СтрокаТоваров.Коэффициент = 1) Тогда
			
			СтрокаТоваров.Количество = Окр(СтрокаТоваров.Количество/СтрокаТоваров.Коэффициент, 3);
			Документы.ЗаменаВЗаказеПокупателя.ЗаменыКоличествоПриИзменении(ЭтотОбъект, СтрокаТоваров, ДополнительныеСвойства.ПараметрыДействия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

#КонецОбласти

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("ЗапретЗакупки", Истина);
	Параметры.Вставить("ЗапретПродажи", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("ТоварыЗаменители");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
