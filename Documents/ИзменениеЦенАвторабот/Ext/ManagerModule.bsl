// Модуль менеджера документа "Изменение цен авторабот"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Производит перезаполнение цен и валют цен нормочасов авторабот.
// При указании нормочаса перезаполнятся только строки с этим нормочасом.
//
// Параметры:
//  Объект   - Документ объект или объект формы - Объект перезаполнения
//  Нормочас - СправочникСсылка.Нормочасы       - Нормочас, по которому нужно перезаполнить цены
//
Процедура ПерезаполнитьДействующимиЦенамиНормочаса(Объект, Нормочас = Неопределено) Экспорт
	
	МассивНормочасов = Новый Массив;
	Если Нормочас = Неопределено Тогда
		Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
			МассивНормочасов.Добавить(ТекущаяСтрока.Нормочас);
		КонецЦикла;
	Иначе
		МассивНормочасов.Добавить(Нормочас);
	КонецЕсли;
	// Если не заполнен реквизит ДатаНачалаДействия, то нет даты, относительно которой выводить данные.
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
			ТекущаяСтрока.ЦенаНормочаса = 0;
			ТекущаяСтрока.ВалютаНормочаса = Справочники.Валюты.ПустаяСсылка();
		КонецЦикла;
		Возврат;
	КонецЕсли;
	// Получим последние цены из регистра
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНормочасовСрезПоследних.Нормочас КАК Нормочас,
	               |	ЦеныНормочасовСрезПоследних.Цена КАК Цена,
	               |	ЦеныНормочасовСрезПоследних.Валюта КАК Валюта
	               |ИЗ
	               |	РегистрСведений.ЦеныНормочасов.СрезПоследних(&ДатаНачалаДействия, Нормочас В (&СписокНормочасов)) КАК ЦеныНормочасовСрезПоследних";
	Запрос.УстановитьПараметр("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("СписокНормочасов",   МассивНормочасов);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
		НайденныеСтроки = ТаблицаЦен.НайтиСтроки(Новый Структура("Нормочас", ТекущаяСтрока.Нормочас));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.ЦенаНормочаса = НайденныеСтроки[0].Цена;
			ТекущаяСтрока.ВалютаНормочаса = НайденныеСтроки[0].Валюта;
		ИначеЕсли (НЕ Нормочас = Неопределено И Нормочас = ТекущаяСтрока.Нормочас) ИЛИ Нормочас = Неопределено Тогда
			// Очистим соответствующие реквизиты
			ТекущаяСтрока.ЦенаНормочаса = 0;
			ТекущаяСтрока.ВалютаНормочаса = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Возвращает цену автоработы.
//
// Параметры:
//	Объект - Документ объект или объект формы - объект заполнения
//	Строка - Строка табличной части в которой заполняется базовая цена.
//
Процедура ЗаполнитьЦенуАвтоработы(Объект, Строка, ПараметрыДействия) Экспорт
	
	Строка.Цена = 0;
	Строка.Нормочас = Справочники.Нормочасы.ПустаяСсылка();
	ПараметрыДействия.Вставить("ИзмениласьЦена", Истина);
	
	// Проверим возможность назначения цены
	Если НЕ ЗначениеЗаполнено(Строка.Авторабота) ИЛИ НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем цену в строке
	ЦенаРаботы = ЦенообразованиеСервер.ПолучитьЦенуАвтоработы(
		Объект.ТипЦен,
		Строка.Авторабота,
		Строка.Модель,
		?(ЕстьРеквизит(Объект, "Контрагент"), Объект.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
		?(ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов"), Объект.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка()),
		?(ЕстьРеквизит(Объект, "Цех"), Объект.Цех, Справочники.Цеха.ПустаяСсылка()),
		?(ЕстьРеквизит(Объект, "ВидРемонта"), Объект.ВидРемонта, Справочники.ВидыРемонта.ПустаяСсылка()),,
		Объект.ВалютаДокумента,
		Объект.КурсДокумента);
	
	Если ЦенаРаботы.ВидЦены = "Нормочас" Тогда
		Строка.Нормочас = ЦенаРаботы.Нормочас;
	ИначеЕсли ЦенаРаботы.ВидЦены = "Цена" Тогда
		Строка.Цена = ЦенаРаботы.Цена;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Заполнить автоработами
//
Процедура ЗаполнитьАвтоработамиПоВарианту(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.ИмяКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Автоработы.Ссылка КАК Авторабота,
	|	ВЫБОР
	|		КОГДА ЦеныАвтоработСрезПоследних.Модель ЕСТЬ NULL ТОГДА
	|			ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Нормочас, ЗНАЧЕНИЕ(Справочник.Нормочасы.Рубль))
	|		ИНАЧЕ
	|			ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Нормочас, ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка))
	|	КОНЕЦ КАК НормоЧас,
	|	ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Модель, ЗНАЧЕНИЕ(Справочник.Модели.ПустаяСсылка)) КАК Модель,
	|	ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Валюта , ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныАвторабот.СрезПоследних(
	|			&Момент,
	|			ТипЦен = &ТипЦен И 
	|			ВидРемонта = &ВидРемонта И 
	|			Авторабота.ЭтоГруппа = &ВыбратьГруппы И 
	|			//ДЛЯСОЕДИНЕНИЯ
	|			Цех = &Цех И 
	|			ДоговорВзаиморасчетов = &Договор И
	|			Контрагент = &Контрагент) КАК ЦеныАвтоработСрезПоследних
	|ПО
	|	Автоработы.Ссылка = ЦеныАвтоработСрезПоследних.Авторабота
	|ГДЕ
	|	Автоработы.ЭтоГруппа = &ВыбратьГруппы //ОТБОР";
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		Объект.ДатаНачалаДействия = Объект.Дата;
	КонецЕсли;
	
	Момент = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.ДатаНачалаДействия)), Новый Граница(Новый МоментВремени(Объект.ДатаНачалаДействия, Объект.Ссылка),ВидГраницы.Исключая));
	
	Запрос.УстановитьПараметр("Момент",     Момент);
	Запрос.УстановитьПараметр("ТипЦен",     Объект.ТипЦен);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор",    Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидРемонта", Объект.ВидРемонта);
	Запрос.УстановитьПараметр("Цех",        Объект.Цех);
	
	Если ПараметрыЗаполнения.ИмяКоманды = "АвтоработыЗаполнитьРаботамиПоГруппе" Тогда
		
		ВыбраннаяГруппа = ПараметрыЗаполнения.ВыбраннаяГруппа;
		Если НЕ ЗначениеЗаполнено(ВыбраннаяГруппа) Тогда
			Возврат;
		КонецЕсли;
			
		Текстзапроса = СтрЗаменить(ТекстЗапроса, "//ДЛЯСОЕДИНЕНИЯ", "Авторабота.Ссылка В ИЕРАРХИИ(&ВыбраннаяГруппа) И ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОТБОР"        , " И Автоработы.Ссылка В ИЕРАРХИИ(&ВыбраннаяГруппа)");
		Запрос.УстановитьПараметр("ВыбраннаяГруппа", ВыбраннаяГруппа);
		ВыбратьГруппы = Ложь;
		
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды = "АвтоработыЗаполнитьВсемиГруппамиРабот" Тогда                 
		
		ВыбратьГруппы = Истина;
		
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды = "АвтоработыЗаполнитьВсемиРаботами" Тогда
		
		ВыбратьГруппы = Ложь;
		
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды = "АвтоработыЗаполнитьЦенами" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЦеныАвтоработСрезПоследних.Авторабота КАК Авторабота,
		|	ЦеныАвтоработСрезПоследних.Модель     КАК Модель,
		|	ЦеныАвтоработСрезПоследних.Нормочас   КАК НормоЧас,
		|	ЦеныАвтоработСрезПоследних.Нормочас   КАК Валюта,
		|	ЦеныАвтоработСрезПоследних.Цена       КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныАвторабот.СрезПоследних(
		|			&Момент,
		|			Контрагент = &Контрагент И 
		|			ДоговорВзаиморасчетов = &Договор И
		|			Цех = &Цех И 
		|			ТипЦен = &ТипЦен И 
		|			ВидРемонта = &ВидРемонта) КАК ЦеныАвтоработСрезПоследних";
		
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды = "АвтоработыЗаполнитьПоЦеновойГруппе" Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Автоработы.Ссылка КАК Авторабота
		|ПОМЕСТИТЬ Автоработы
		|ИЗ
		|	Справочник.Автоработы КАК Автоработы
		|ГДЕ
		|	Автоработы.ЭтоГруппа = ЛОЖЬ
		|	И Автоработы.ЦеноваяГруппа = &ЦеноваяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Автоработы.Авторабота КАК Авторабота,
		|	ВЫБОР
		|		КОГДА ЦеныАвтоработСрезПоследних.Модель ЕСТЬ NULL ТОГДА
		|			ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Нормочас, ЗНАЧЕНИЕ(Справочник.Нормочасы.Рубль))
		|		ИНАЧЕ
		|			ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Нормочас, ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка))
		|	КОНЕЦ                                                                                 КАК НормоЧас,
		|	ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Модель, ЗНАЧЕНИЕ(Справочник.Модели.ПустаяСсылка)) КАК Модель,
		|	ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ЕСТЬNULL(ЦеныАвтоработСрезПоследних.Цена, 0)                                          КАК Цена
		|ИЗ
		|	Автоработы КАК Автоработы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАвторабот.СрезПоследних(
		|				&Момент,
		|				ВидРемонта = &ВидРемонта
		|					И ДоговорВзаиморасчетов = &Договор
		|					И Контрагент = &Контрагент
		|					И ТипЦен = &ТипЦен
		|					И Цех = &Цех) КАК ЦеныАвтоработСрезПоследних
		|		ПО Автоработы.Авторабота = ЦеныАвтоработСрезПоследних.Авторабота";
		Запрос.УстановитьПараметр("ЦеноваяГруппа", ПараметрыЗаполнения.ЦеноваяГруппа);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбратьГруппы" , ВыбратьГруппы);
	ТабРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЦен из ТабРезультатаЗапроса Цикл
		НоваяСтрока = Объект.Автоработы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЦен);
		Если ЗначениеЗаполнено(СтрокаЦен.Валюта) Тогда
			АвтоработыАвтоработаПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАвтоработамиПоВарианту()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенАвтоработКонтрагента Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
	Конецесли;
	ОбязательныеРеквизиты.Добавить("ДатаНачалаДействия");

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автоработы");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автоработы.Авторабота");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАвтоработы = Новый Массив();
	УникальныеАвтоработы.Добавить("Авторабота");
	УникальныеАвтоработы.Добавить("Модель");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автоработы", УникальныеАвтоработы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автоработы.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	Если ТребуетсяУстановкаЦен Тогда
		
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
		Для Каждого Строка Из Объект.Автоработы Цикл
			ЗаполнитьЦенуАвтоработы(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ОбщегоНазначения.СообщитьПользователю("При пересчете валюты обнаружен нулевой курс валюты.");
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		Для Каждого СтрокаАвтоработы Из Объект.Автоработы Цикл
			СтрокаАвтоработы.Цена = Окр(СтрокаАвтоработы.Цена*КоэффициентСоотношенияКурсов, 2);
			АвтоработыЦенаПриИзменении(Объект, СтрокаАвтоработы);
		КонецЦикла;
		
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Тип цен не должен быть рассчитываемым 
	Если Объект.ТипЦен.Рассчитывается Тогда
		Объект.ТипЦен = Справочники.ТипыЦен.ПустаяСсылка();
		ТекстСообщения = НСтр("ru = 'Тип цен не должен быть рассчитываемым.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеПерезаполнятьПоДоговоруВзаиморасчетов", Истина);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьЦенуАвтоработы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Модель" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыМодельПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьЦенуАвтоработы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Нормочас" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыНормочасПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Нормочас) Тогда
		Строка.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Нормочас) Тогда
		Строка.Нормочас = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ИзменениеЦенАвторабот",
		"ИзменениеЦенАвторабот",
		НСтр("ru = 'Изменение цен авторабот'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИзменениеЦенАвторабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ИзменениеЦенАвторабот",
															"Изменение цен авторабот",
															ПечатьИзменениеЦенАвторабот(МассивОбъектов, ОбъектыПечати));
															
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ИзменениеЦенАвторабот"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьИзменениеЦенАвторабот(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеЦенАвторабот_ИзменениеЦенАвторабот";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИзменениеЦенАвторабот.ПФ_MXL_ИзменениеЦенАвторабот");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеТипаЦен =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипЦен);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеКонтрагента =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеДоговора =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ДоговорВзаиморасчетов);
		
		ОбластьЗаголовок.Параметры.ПредставлениеЦеха =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Цех);
		
		ОбластьЗаголовок.Параметры.ПредставлениеВидаРемонта =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ВидРемонта);
		
		// выведем или удалим ШК
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		МоментВремени = ?(НЕ ЗначениеЗаполнено(Документ.ДатаНачалаДействия), Документ.Ссылка.МоментВремени(),
			Новый МоментВремени(Документ.ДатаНачалаДействия, Документ.Ссылка));
		МоментВремени = Новый Граница(МоментВремени, ВидГраницы.Исключая);
		
		// перебор строк
		ВыборкаТабличнойЧасти = Документ.Автоработы.Выгрузить();
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			// заполняем данные строки
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("НомерСтроки",            СтрокаТЧ.НомерСтроки);
			СтруктураСтроки.Вставить("АвтоработаНаименование", СтрокаТЧ.Авторабота);
			СтруктураСтроки.Вставить("Авторабота",             СтрокаТЧ.Авторабота);
			СтруктураСтроки.Вставить("МодельНаименование",     СтрокаТЧ.Модель);
			СтруктураСтроки.Вставить("Цена",                   Формат(СтрокаТЧ.Цена, ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("Нормочас",               СтрокаТЧ.Нормочас);
			СтруктураСтроки.Вставить("Код", УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТЧ.Авторабота));
			
			// найдём старую цену
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("ТипЦен",                Документ.ТипЦен);
			СтруктураОтбора.Вставить("Контрагент",            Документ.Контрагент);
			СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", Документ.ДоговорВзаиморасчетов);
			СтруктураОтбора.Вставить("Цех",                   Документ.Цех);
			СтруктураОтбора.Вставить("ВидРемонта",            Документ.ВидРемонта);
			СтруктураОтбора.Вставить("Модель",                СтрокаТЧ.Модель);
			СтруктураОтбора.Вставить("Авторабота",            СтрокаТЧ.Авторабота);
			
			СтруктураЦен=РегистрыСведений.ЦеныАвторабот.ПолучитьПоследнее(МоментВремени, СтруктураОтбора);
			ЦенаСтарая = СтруктураЦен.Цена;
			
			ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(Документ.ТипЦен, СтрокаТЧ.Модель);
			Если НЕ ВалютаТипаЦены = Документ.ВалютаДокумента Тогда
				ЦенаСтарая = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ЦенаСтарая, ВалютаТипаЦены, Документ.Дата,
					Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			СтруктураСтроки.Вставить("СтараяЦена", Формат(ЦенаСтарая, ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("СтарыйНормочас", СтруктураЦен.Нормочас);
			
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автоработы.Индекс(СтрокаТЧ) = Документ.Автоработы.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// итоги
		ОбластьПодвал.Параметры.СуммаПрописью = "Всего наименований " + ВыборкаТабличнойЧасти.Количество();
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредседательКомиссии"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьИзменениеЦенАвторабот()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автоработы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ИзменениеЦенАвторабот");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автоработы");
	КонецЕсли;
	
	ВыборАвторабот 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборАвторабот.ВыборСсылки 		= "Справочник.Автоработы.ФормаВыбораГруппы";
	ВыборАвторабот.Обязательный 	= Истина;
	ВыборАвторабот.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать группу авторабот.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить автоработами по группе'");
	Команда.Идентификатор	= "АвтоработыЗаполнитьПоВыбраннойКоманде";
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "АвтоработыЗаполнитьРаботамиПоГруппе";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ВыбраннаяГруппа", ВыборАвторабот);
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить всеми группами авторабот'");
	Команда.Идентификатор	= "АвтоработыЗаполнитьПоВыбраннойКоманде";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "АвтоработыЗаполнитьВсемиГруппамиРабот";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	//	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить всеми автоработами'");
	Команда.Идентификатор	= "АвтоработыЗаполнитьПоВыбраннойКоманде";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "АвтоработыЗаполнитьВсемиРаботами";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по ценам'");
	Команда.Идентификатор	= "АвтоработыЗаполнитьПоВыбраннойКоманде";
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "АвтоработыЗаполнитьЦенами";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	//
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы") Тогда 
		ВыборЦеновойГруппы 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
		ВыборЦеновойГруппы.ВыборСсылки 		= "Справочник.ЦеновыеГруппы.ФормаСписка";
		ВыборЦеновойГруппы.Обязательный 	= Истина;
		ВыборЦеновойГруппы.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать ценовую группу.'");
		
		Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
		Команда.Подменю			= "АвтоработыПодменюЗаполнения";
		Команда.Представление	= НСтр("ru = 'Заполнить по ценовой группе'");
		Команда.Идентификатор	= "АвтоработыЗаполнитьПоВыбраннойКоманде";
		Команда.Порядок			= 54;
		Команда.ДополнительныеПараметры.ПараметрВыполнения = "АвтоработыЗаполнитьПоЦеновойГруппе";
		Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
		Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ЦеноваяГруппа", ВыборЦеновойГруппы);
	КонецЕсли;
	//
	ВыборНормочасы 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборНормочасы.ВыборСсылки 		= "Справочник.Нормочасы.ФормаВыбора";
	ВыборНормочасы.Обязательный 	= Истина;
	ВыборНормочасы.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать нормочас.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить нормочас по выделенным строкам'");
	Команда.Идентификатор	= "АвтоработыЗаполнитьНормочасПоВыделеннымСтрокам";
	Команда.Порядок			= 55;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "АвтоработыЗаполнитьНормочасПоВыделеннымСтрокам";
	Команда.ДополнительныеПараметры.Вставить("ОчиститьПередЗаполнением", Ложь);
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Нормочас", ВыборНормочасы);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьРаботамиПоГруппе.Видимость",     Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьРаботамиПоГруппе.Доступность",   Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьВсемиГруппамиРабот.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьВсемиГруппамиРабот.Доступность", Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьВсемиРаботами.Видимость",        Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьВсемиРаботами.Доступность",      Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьЦенами.Видимость",               Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнитьЦенами.Доступность",             Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по командам заполнения
//
Функция АвтоработыЗаполнитьПоВыбраннойКоманде(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	ПараметрыЗаполнения.Вставить("ИмяКоманды", ПараметрыЗаполнения.ПараметрКоманды);
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьАвтоработамиПоВарианту(Объект, ПараметрыЗаполнения, ПараметрыДействия);
	
КонецФункции // АвтоработыЗаполнитьПоВыбраннойКоманде()

// Обработчик заполнения документа нормочаса
//
Функция АвтоработыЗаполнитьНормочасПоВыделеннымСтрокам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ВыделенныеСтроки = ПараметрыКоманды.Форма.Элементы.Автоработы.ВыделенныеСтроки;
	
	Если НЕ ВыделенныеСтроки = Неопределено Тогда
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ТекущаяСтрока = Объект.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекущаяСтрока.Нормочас = ПараметрыЗаполнения.Нормочас;
			АвтоработыНормочасПриИзменении(Объект, ТекущаяСтрока, ПараметрыДействия);
		КонецЦикла;
		ПерезаполнитьДействующимиЦенамиНормочаса(Объект, ПараметрыЗаполнения.Нормочас);
	КонецЕсли;
	
КонецФункции // АвтоработыЗаполнитьПоВыбраннойКоманде()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ИзменениеЦенАвторабот);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли