// Модуль объекта документа "Корректировка реализации автомобиля"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	Если Не ВозможенВВодНаОсновании(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И НЕ ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				Нстр("ru = 'Корректировка реализации автомобилей вводится только на основании проведенного документа.'")
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		Контрагент = Неопределено;
		ДоговорВзаиморасчетов = Неопределено;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ввод корректировки реализации автомобилей возможен только на основании.'"), ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Сделка = ПолучитьСделку();
	
	Основания = ПолучитьСписокОснований();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРег = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// заполняем суммы автомобилей
	Если Сделка.ХозОперация <> Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
		ТаблицаСумм = ПолучитьСуммуПродажиАвтомобиля(Автомобили.ВыгрузитьКолонку("Автомобиль"), Основания).Строки;
	Иначе
		// заполним суммами передачи
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистраторы" , Основания);
		Запрос.УстановитьПараметр("Автомобили"   , Автомобили.ВыгрузитьКолонку("Автомобиль"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АвтомобилиОтданные.Автомобиль,
		|	СУММА(АвтомобилиОтданные.Сумма) КАК Сумма,
		|	СУММА(АвтомобилиОтданные.СуммаУпр) КАК СуммаУпр,
		|	СУММА(АвтомобилиОтданные.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
		|ГДЕ
		|	АвтомобилиОтданные.Регистратор В(&Регистраторы)
		|	И АвтомобилиОтданные.Автомобиль В(&Автомобили)
		|
		|СГРУППИРОВАТЬ ПО
		|	АвтомобилиОтданные.Автомобиль";
		
		ТаблицаСумм = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	// заполняем суммы автомобилей
	Для Каждого Автомобиль Из Автомобили Цикл
		
		Автомобиль.VIN = Автомобиль.Автомобиль.VIN;
		
		// получим сумму для авто
		Суммы = ТаблицаСумм.Найти(Автомобиль.Автомобиль, "Автомобиль");
		Если Суммы = Неопределено Тогда
			Суммы = Новый Структура("СуммаУпр,СуммаНДС,Сумма", 0,0,0);
		КонецЕсли;
		
		Если ВалютаРег = ВалютаДокумента Тогда
			Автомобиль.СуммаВсего = Суммы.Сумма;
		Иначе
			Автомобиль.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Суммы.СуммаУпр,
				ВалютаУпр,
				КурсВалютыУпр,
				ВалютаДокумента,
				КурсДокумента
			);
		КонецЕсли;
		Документы.КорректировкаРеализацииАвтомобилей.АвтомобилиСуммаВсегоПриИзменении(
			ЭтотОбъект,
			Автомобиль,
			ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия
		);
		
		Автомобиль.СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Суммы.СуммаНДС,
			ВалютаРег,
			Дата,
			ВалютаДокумента,
			КурсДокумента
		);
		
		// заполним доп реквизиты
		Автомобиль.СуммаВсегоПоДокументуРеализации = Автомобиль.СуммаВсего;
		Автомобиль.СуммаПоДокументуРеализации      = Автомобиль.Сумма;
		Автомобиль.СуммаНДСПоДокументуРеализации   = Автомобиль.СуммаНДС;
		Автомобиль.СтавкаНДСПоДокументуРеализации  = Автомобиль.СтавкаНДС;
		Автомобиль.КоличествоПоДокументуРеализации = Автомобиль.Количество;
		Автомобиль.ИзДокументаОснования            = Истина;
		
		Документы.КорректировкаРеализацииАвтомобилей.РасчетРазницы(
			ЭтотОбъект,
			Автомобиль,
			ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия
		);
	КонецЦикла;
	
	// Подсчет новой суммы документа назначения
	СуммаДокумента = Автомобили.Итог("СуммаВсего");
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах")
		И НЕ ЗначениеЗаполнено(НомерИсправления)
	Тогда
		НомерИсправления = 1;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта)
		Или ХозОперацияУказанаНеВерно();
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// заполним сделку
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Сделка = ПолучитьСделку();
	КонецЕсли;
	
	// Проверим хоз. операции
	// составим список документов движений.
	Если ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон Тогда
		
		// заполним значение до корректировки
		Для Каждого Строка Из Автомобили Цикл
			Строка.СуммаВсегоДоКорректировки = Строка.СуммаВсегоПоДокументуРеализации;
			Строка.СуммаНДСДоКорректировки   = Строка.СуммаНДСПоДокументуРеализации;
		КонецЦикла;
		
	ИначеЕсли ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах Тогда
		
		// проверим введенные на основании корректировки
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаРеализацииАвтомобилей
		|	И НЕ ПодчиненныеДокументы.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон)
		|	И НЕ ПодчиненныеДокументы.Ссылка = &Ссылка
		|	И ПодчиненныеДокументы.Ссылка.Проведен";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка",    Ссылка);
		ВыполнениеЗапроса = Запрос.Выполнить();
		
		Если НЕ ВыполнениеЗапроса.Пустой() Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'К документу %1 введено больше одного корректировочного документа с хоз. операцей ""Исправление первичных документов"". 
							|Каждую последующую корректировку следует вводить на основании предыдущей.'"),
				Строка(ДокументОснование)
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДоговорВзаиморасчетовБыл");
	ДополнительныеСвойства.Вставить("МоментВремениБыл");
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
		
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.КорректировкаРеализацииАвтомобилей.ВозможенВводСчетФактурыВыданной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	
	СуммаДокумента        = Автомобили.Итог("СуммаВсего");
	СуммаДокументаРазница = Автомобили.Итог("СуммаВсегоРазница");
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОснований = ПолучитьСписокОснований();
	
	ЭтоРеализацияАвтомобилейКомиссия = (Сделка.ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
	
	Если ЭтоРеализацияАвтомобилейКомиссия Тогда
		ВыполнитьДвиженияПоРегистрамРеализации(СписокОснований, Отказ);
	ИначеЕсли Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ВыполнитьДвиженияПоВзаиморасчетам(Отказ, РежимПроведения);
	КонецЕсли;
	
	Документы.КорректировкаРеализацииАвтомобилей.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.КорректировкаРеализацииАвтомобилей.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	Если Не ЭтоРеализацияАвтомобилейКомиссия Тогда
		КомиссионныеАвтомобили = ПолучитьКомиссионныеАвтомобили();
		ВыполнитьДвиженияПоПродажам(СписокОснований, КомиссионныеАвтомобили, Отказ);
		ВыполнитьДвиженияПоРеализованнымАвтомобилям(СписокОснований, КомиссионныеАвтомобили, Отказ);
	КонецЕсли;
	
	ВыполнитьДвиженияПоВозвратуАвтомобилей(СписокОснований, Отказ);
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	ТаблицаПрослеживаемыхТоваров = Документы.КорректировкаРеализацииАвтомобилей.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФВыданный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСуммуПродажиАвтомобиля(Знач Автомобиль = Неопределено, Основания = Неопределено) Экспорт
	
	Если Автомобиль = Неопределено Тогда
		Автомобиль = Автомобили.ВыгрузитьКолонки("Автомобиль");
	ИначеЕсли ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
		АвтомобильМассив = Новый Массив;
		АвтомобильМассив.Добавить(Автомобиль);
		Автомобиль = АвтомобильМассив;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основания) Тогда
		Основания = ПолучитьСписокОснований();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Автомобили"   , Автомобиль);
	Запрос.УстановитьПараметр("Регистраторы" , Основания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ПродажиАвтомобилей.Сумма КАК Сумма,
	|	ПродажиАвтомобилей.СуммаНДС КАК СуммаНДС,
	|	ПродажиАвтомобилей.СуммаУпр КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ПродажиАвтомобилей КАК ПродажиАвтомобилей
	|ГДЕ
	|	ПродажиАвтомобилей.Автомобиль В(&Автомобили)
	|	И ПродажиАвтомобилей.Регистратор В(&Регистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Продажи.Автомобиль,
	|	Продажи.Сумма,
	|	Продажи.СуммаНДС,
	|	Продажи.СуммаУпр
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор В(&Регистраторы)
	|	И Продажи.Автомобиль В(&Автомобили)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаУпр)
	|ПО
	|	Автомобиль";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ПолучитьСписокОснований() Экспорт
	
	Основания = Новый Массив;
	ТекОснование = ДокументОснование;
	
	Если ТекОснование = Неопределено Тогда
		Возврат Основания;
	КонецЕсли;
	
	Пока ТипЗнч(ТекОснование) <> Тип("ДокументСсылка.РеализацияАвтомобилей") Цикл
		Основания.Добавить(ТекОснование);
		ТекОснование = ТекОснование.ДокументОснование;
	КонецЦикла;
	
	Основания.Добавить(ТекОснование);
	
	Возврат Основания;
	
КонецФункции

Функция ПолучитьСделку(СписокОснований = Неопределено) Экспорт
	
	Если СписокОснований = Неопределено Тогда
		СписокОснований = ПолучитьСписокОснований();
	КонецЕсли;
	
	Для Каждого Основание Из СписокОснований Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
			Возврат Основание;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Документы.РеализацияАвтомобилей.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьКомиссионныеАвтомобили()
	
	// получим коммисионные автомобили
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАвтомобилей.Автомобиль
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Регистратор
	|	И ОстаткиАвтомобилей.СтатусПартии = &СтатусПартии";
	Запрос.УстановитьПараметр("Регистратор"  , Сделка);
	Запрос.УстановитьПараметр("СтатусПартии" , Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница КАК СуммаНДСРазница,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница КАК СуммаВсегоРазница,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализованныеАвтомобилиОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОстаток,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РеализованныеАвтомобили.Остатки(&МоментВремени, Автомобиль В (&Автомобили)) КАК РеализованныеАвтомобилиОстатки
	|		ПО КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль = РеализованныеАвтомобилиОстатки.Автомобиль
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница <> 0
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница <> 0
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль В(&Автомобили)
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница = 0";
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Автомобили", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Автомобиль"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьКомиссионныеАвтомобили()

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Проект КАК Проект,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СкладКомпании КАК СкладКомпании,
	|	&СуммаВсегоРазница КАК СуммаДокумента,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.Сделка КАК Сделка
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.УстановитьПараметр("СуммаВсегоРазница",Автомобили.Итог("СуммаВсегоРазница"));
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// получим список авто из документа
	Автомобили.Загрузить(ДанныеЗаполнения.Автомобили.Выгрузить());
	
	ДоступнаПечатьУПД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах;
	ДоступнаПечатьУКД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАвтомобилей()

// Производит заполнение объекта на основании документа "Корректировака реализации автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализацииАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах")
	Тогда
		НомерИсправления = ДанныеЗаполнения.НомерИсправления + 1;
	КонецЕсли;
	
	// получим список авто из документа
	Автомобили.Загрузить(ДанныеЗаполнения.Автомобили.Выгрузить());
	
	// Удалим из корректировки возвращенные автомобили
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Количество", 0);
	
	НайденныеСтроки = Автомобили.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		Автомобили.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	Если Не ДанныеЗаполнения.ДоступнаПечатьУКД Тогда	
		ДоступнаПечатьУПД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах;
		ДоступнаПечатьУКД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализацииАвтомобилей()

Функция ВозможенВВодНаОсновании(ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияАвтомобилей")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей")) Тогда
		
		Если ДанныеЗаполнения = Ссылка Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации автомобилей на основании самой себя запрещен.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации автомобилей возможен только на основании проведенного документа.'"));
			Возврат Ложь;
		КонецЕсли;
		
		ХозОперацияОснования = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ХозОперация", "");
		Если ХозОперацияОснования = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации автомобилей не возможен на основании реализации автомобилей комиссия.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если Документы.КорректировкаРеализацииАвтомобилей.КорректировкаНеДоступна(ДанныеЗаполнения) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании <%1> введен возврат автомобилей. Ввод корректировки реализации автомобилей невозможен.'"),
				ДанныеЗаполнения);
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

Функция ВыполнитьДвиженияПоПродажам(СписокОснований, КомиссионныеАвтомобили, Отказ)
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам = ДополнительныеСвойства.СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПродажиАвтомобилей.ПодразделениеКомпании,
	|	ПродажиАвтомобилей.Автомобиль,
	|	ПродажиАвтомобилей.ДокументПродажи,
	|	ПродажиАвтомобилей.Поставщик,
	|	ПродажиАвтомобилей.Покупатель,
	|	ПродажиАвтомобилей.СтатусПартии,
	|	ПродажиАвтомобилей.ХозОперация,
	|	ПродажиАвтомобилей.ДоговорВзаиморасчетов,
	|	ПродажиАвтомобилей.СкладКомпании,
	|	ПродажиАвтомобилей.СтавкаНДС,
	|	ПродажиАвтомобилей.Партия,
	|	ПродажиАвтомобилей.ГТД,
	|	ПродажиАвтомобилей.СуммаНДСВходящий,
	|	ПродажиАвтомобилей.Себестоимость
	|ИЗ
	|	РегистрНакопления.ПродажиАвтомобилей КАК ПродажиАвтомобилей
	|ГДЕ
	|	ПродажиАвтомобилей.Регистратор В(&Регистраторы)
	|	И ПродажиАвтомобилей.Автомобиль В(&Автомобили)";
	Запрос.УстановитьПараметр("Регистраторы" , СписокОснований);
	Запрос.УстановитьПараметр("Автомобили"   , Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	СуммаДоходов  = 0;
	СуммаРасходов = 0;
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		РасчетыСКонтрагентом =
			РасчетыСКонтрагентамиСервер.РасчетыСКонтрагентамиПоДокументу(
				Ссылка, Истина, Истина);
		РаспределениеСумм = Автомобили.Выгрузить();
		СуммыТоваров = РаспределениеСумм.ВыгрузитьКолонку("СуммаВсего");
		РаспределениеСумм.ЗагрузитьКолонку(СуммыТоваров, "Сумма");
		
		СведенияОВалюте = Новый Структура();
		СведенияОВалюте.Вставить("ВалютаДоговора", Неопределено);
		СведенияОВалюте.Вставить("ВалютаРегл", ВалютаРегл);
		СведенияОВалюте.Вставить("ВалютаУпр", ВалютаУпр);
		СведенияОВалюте.Вставить("КурсРегл", Дата);
		СведенияОВалюте.Вставить("КурсУпр", Дата);
		
		ПересчитатьПоРасчетамСКонтрагентами = ОбработкаСобытийДокументаСервер.ПересчитанаВВалютуКорректировка(
			Ссылка,
			РаспределениеСумм,
			РасчетыСКонтрагентом,
			СведенияОВалюте,
			Истина,
			"СуммаВсегоПоДокументуРеализации");
	Иначе
		ПересчитатьПоРасчетамСКонтрагентами = Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из Автомобили Цикл
		
		Если Строка.КоличествоРазница = 0
			И Строка.СуммаРазница = 0
			И Строка.СуммаНДСРазница = 0
			И Строка.СуммаВсегоРазница = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Автомобиль", Строка.Автомобиль);
		Выборка.Сбросить();
		Если НЕ Выборка.НайтиСледующий(Отбор) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Для автомобиля <%1> не найдена запись в регистре продаж.'"),
					Строка.Автомобиль
				),
				ЭтотОбъект,,,
			Отказ
			);
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = Движения.ПродажиАвтомобилей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка,, "Себестоимость,СуммаНДСВходящий");
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.ХозОперация = ХозОперация;
		
		// запишем суммы
		Если ПересчитатьПоРасчетамСКонтрагентами Тогда
			УсловиеОтбора = Новый Структура("НомерСтроки", Строка.НомерСтроки);
			СтрокаРаспределения = РаспределениеСумм.НайтиСтроки(УсловиеОтбора);
			Если ВалютаДокумента = ВалютаРегл Тогда
				НоваяЗапись.Сумма = Строка.СуммаВсегоРазница;
				НоваяЗапись.СуммаНДС = Строка.СуммаНДСРазница;
			Иначе
				НоваяЗапись.Сумма = СтрокаРаспределения[0].Сумма - СтрокаРаспределения[0].СуммаВсегоПоДокументуРеализации;
				НоваяЗапись.СуммаНДС = СтрокаРаспределения[0].СуммаНДС - СтрокаРаспределения[0].СуммаНДСПоДокументуРеализации;
			КонецЕсли;
			Если ВалютаДокумента = ВалютаУпр Тогда
				НоваяЗапись.СуммаУпр = Строка.СуммаВсегоРазница;
				НоваяЗапись.СуммаНДСУпр = Строка.СуммаНДСРазница;
			Иначе
				НоваяЗапись.СуммаУпр = СтрокаРаспределения[0].СуммаУпр - СтрокаРаспределения[0].СуммаВсегоПоДокументуРеализацииУпр;
				НоваяЗапись.СуммаНДСУпр =
					СтрокаРаспределения[0].СуммаНДСУпр - СтрокаРаспределения[0].СуммаНДСПоДокументуРеализацииУпр;
			КонецЕсли;
		Иначе
			НоваяЗапись.Сумма       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Строка.СуммаВсегоРазница,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаРегл,
				Дата);
			НоваяЗапись.СуммаНДС    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Строка.СуммаНДСРазница,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаРегл, Дата);
			НоваяЗапись.СуммаУпр    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Строка.СуммаВсегоРазница,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаУпр,
				КурсВалютыУпр);
			НоваяЗапись.СуммаНДСУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Строка.СуммаНДСРазница,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаУпр,
				КурсВалютыУпр);
		КонецЕсли;
		
		НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
		НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
		НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС;
		НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
		НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
		НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр;
		
		СуммаДоходов = СуммаДоходов + НоваяЗапись.СуммаУпр;
		
		// Проверим что еще не отчитались за автомобиль
		Если НЕ КомиссионныеАвтомобили = Неопределено Тогда
			КомиссионныйАвтомобиль = КомиссионныеАвтомобили.Найти(Строка.Автомобиль, "Автомобиль");
			
			Если КомиссионныйАвтомобиль <> Неопределено И НЕ КомиссионныйАвтомобиль.ЕстьОстаток Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Обработаем ситуацию когда себестоимость равна сумме продажи.
		Попытка
			
			Если НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия
				И НЕ НоваяЗапись.Партия.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж
			Тогда
			
				СтавкаНДСВходящее   = Окр(Выборка.СуммаНДСВходящий / (Выборка.Себестоимость - Выборка.СуммаНДСВходящий), 2);
				СебестоимостьБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
				
				НоваяЗапись.Себестоимость    = НоваяЗапись.Сумма;
				НоваяЗапись.СебестоимостьУпр = НоваяЗапись.СуммаУпр;
				НоваяЗапись.СуммаНДСВходящий = Окр(СебестоимостьБезНДС * СтавкаНДСВходящее, 2);
				
				НоваяЗапись.СуммаНДСВходящийУпр    = Окр(РаботаСКурсамиВалютПлатформа
					.ПересчетПоВалюте(НоваяЗапись.СуммаНДСВходящий, ВалютаРегл, Дата, ВалютаУпр, КурсВалютыУпр), 2);
				НоваяЗапись.СебестоимостьБезНДС    = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
				НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
				
				СуммаРасходов = СуммаРасходов + НоваяЗапись.СебестоимостьУпр;
				
			КонецЕсли;
			
		Исключение
			
			// TODO: Обработка исключения.
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Движения.ПродажиАвтомобилей.Записать();
	КонецЕсли;
	
	Если СуммаДоходов <> 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоАвтомобилям;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		
		НаборЗаписейДиР.Доход = СуммаДоходов;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если СуммаРасходов <> 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		
		НаборЗаписейДиР.Расход = СуммаРасходов;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Режим)
	// получим сумму различий
	СуммаЗаписи = Автомобили.Итог("СуммаВсегоРазница");
	
	Если СуммаЗаписи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейВзаиморасчеты                       = Движения.ВзаиморасчетыКомпании;
	НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
	НаборЗаписейВзаиморасчеты.РежимПроведения       = Режим;
	НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
	НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
	НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок	=
		(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
	НаборЗаписейВзаиморасчеты.Сделка                = Сделка;
	НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
	
	Если СуммаЗаписи > 0 Тогда
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
		НаборЗаписейВзаиморасчеты.Сумма                     = СуммаЗаписи;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
	Иначе
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
		НаборЗаписейВзаиморасчеты.Сумма                     = -СуммаЗаписи;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
	КонецЕсли;
	
	// доходы и расходы по суммовым разницам
	СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
	Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
		НаборЗаписейДиР                        = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
			НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
		Иначе
			НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
		КонецЕсли;
		
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегистрамРеализации(СписокОснований, Отказ)
	
	// получим таблицу авто с остатками
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница КАК СуммаНДСРазница,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница КАК СуммаВсегоРазница,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(АвтомобилиОтданныеОстатки.КоличествоОстаток, 2) = 2
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОстаток
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АвтомобилиОтданные.Остатки(
	|				,
	|				Контрагент = &Контрагент
	|					И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов) КАК АвтомобилиОтданныеОстатки
	|		ПО КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль = АвтомобилиОтданныеОстатки.Автомобиль
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница <> 0
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница <> 0
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница = 0";
	
	//Запрос.УстановитьПараметр("Момент"                , МоментВремени());
	Запрос.УстановитьПараметр("Контрагент"            , Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов" , ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
	
	ВыборкаДокумента = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтомобилиОтданные.Контрагент,
	|	АвтомобилиОтданные.Автомобиль,
	|	АвтомобилиОтданные.ДоговорВзаиморасчетов,
	|	АвтомобилиОтданные.ДокументПередачи,
	|	АвтомобилиОтданные.Партия,
	|	АвтомобилиОтданные.ГТД
	|ИЗ
	|	РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
	|ГДЕ
	|	АвтомобилиОтданные.Регистратор В(&Регистраторы)
	|	И АвтомобилиОтданные.Автомобиль В(&Автомобили)";
	Запрос.УстановитьПараметр("Регистраторы" , СписокОснований);
	Запрос.УстановитьПараметр("Автомобили"   , Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	ВыборкаОтданных = Запрос.Выполнить().Выбрать();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Пока ВыборкаДокумента.Следующий() Цикл
		ВыборкаОтданных.Сбросить();
		Если НЕ ВыборкаОтданных.НайтиСледующий(ВыборкаДокумента.Автомобиль, "Автомобиль") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для автомобиля <%1'> не найдена запись в регистре отданных автомобилей."),
					ВыборкаДокумента.Автомобиль
				),
				ЭтотОбъект,,, 
				Отказ
			);
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = Движения.АвтомобилиОтданные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаОтданных);
		
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяЗапись.ХозОперация = ХозОперация;
		// запишем суммы
		НоваяЗапись.Сумма    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаДокумента.СуммаВсегоРазница, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
		НоваяЗапись.СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаДокумента.СуммаНДСРазница, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
		НоваяЗапись.СуммаУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаДокумента.СуммаВсегоРазница, ВалютаДокумента, КурсДокумента, ВалютаУпр, КурсВалютыУпр);
		
		Если НЕ ВыборкаДокумента.ЕстьОстаток Тогда
			ВтораяЗапись = Движения.АвтомобилиОтданные.Добавить();
			ЗаполнитьЗначенияСвойств(ВтораяЗапись, НоваяЗапись);
			ВтораяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Движения.АвтомобилиОтданные.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРеализованнымАвтомобилям(СписокОснований, КомиссионныеАвтомобили, Отказ)
	
	Если КомиссионныеАвтомобили = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РеализованныеАвтомобили.Контрагент,
	|	РеализованныеАвтомобили.Автомобиль,
	|	РеализованныеАвтомобили.ДоговорВзаиморасчетов,
	|	РеализованныеАвтомобили.ДокументПередачи,
	|	РеализованныеАвтомобили.ГТД
	|ИЗ
	|	РегистрНакопления.РеализованныеАвтомобили КАК РеализованныеАвтомобили
	|ГДЕ
	|	РеализованныеАвтомобили.Регистратор В(&Регистраторы)
	|	И РеализованныеАвтомобили.Автомобиль В(&Автомобили)";
	Запрос.УстановитьПараметр("Регистраторы" , СписокОснований);
	Запрос.УстановитьПараметр("Автомобили" , Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	ВыборкаОтданных = Запрос.Выполнить().Выбрать();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Для Каждого ВыборкаДокумента Из КомиссионныеАвтомобили Цикл
		ВыборкаОтданных.Сбросить();
		Если НЕ ВыборкаОтданных.НайтиСледующий(ВыборкаДокумента.Автомобиль, "Автомобиль") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для автомобиля <%1> не найдена запись в регистре отданных автомобилей.'"),
					ВыборкаДокумента.Автомобиль
				),
				ЭтотОбъект,,,
				Отказ
			);
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = Движения.РеализованныеАвтомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаОтданных);
		
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		// запишем суммы
		НоваяЗапись.СуммаПродажиРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаДокумента.СуммаВсегоРазница, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
		НоваяЗапись.СуммаПродажи     = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаДокумента.СуммаВсегоРазница, ВалютаДокумента, КурсДокумента, ВалютаУпр, КурсВалютыУпр);
		НоваяЗапись.ХозОперация = ХозОперация;
		
		//СебестоимостьРавнаПродаже
		Если НЕ НоваяЗапись.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж Тогда
			НоваяЗапись.СуммаРегл      = НоваяЗапись.СуммаПродажиРегл;
			НоваяЗапись.СуммаНДС       = Окр((НоваяЗапись.СуммаРегл * ВыборкаДокумента.СтавкаНДС.Ставка)/(100 + ВыборкаДокумента.СтавкаНДС.Ставка),2);
			НоваяЗапись.СуммаБезНДС    = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр       = НоваяЗапись.СуммаПродажи;
			НоваяЗапись.СуммаНДСУпр    = Окр((НоваяЗапись.СуммаУпр * ВыборкаДокумента.СтавкаНДС.Ставка)/(100 + ВыборкаДокумента.СтавкаНДС.Ставка),2);
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;

		КонецЕсли;
		
		Если НЕ ВыборкаДокумента.ЕстьОстаток Тогда
			ВтораяЗапись = Движения.РеализованныеАвтомобили.Добавить();
			ЗаполнитьЗначенияСвойств(ВтораяЗапись, НоваяЗапись);
			ВтораяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Движения.РеализованныеАвтомобили.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоВозвратуАвтомобилей(СписокОснований, Отказ)
	
	РеализацияАвтомобилейКомиссия = (Сделка.ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
	               |ПОМЕСТИТЬ СписокАвтомобилейКВозврату
	               |ИЗ
	               |	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
	               |ГДЕ
	               |	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
	               |	И КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПродажиАвтомобилей.ПодразделениеКомпании КАК ПодразделениеКомпании,
	               |	ПродажиАвтомобилей.Автомобиль КАК Автомобиль,
	               |	ПродажиАвтомобилей.ДокументПродажи КАК ДокументПродажи,
	               |	ПродажиАвтомобилей.Поставщик КАК Поставщик,
	               |	ПродажиАвтомобилей.Покупатель КАК Покупатель,
	               |	ПродажиАвтомобилей.СтатусПартии КАК СтатусПартии,
	               |	ПродажиАвтомобилей.ХозОперация КАК ХозОперация,
	               |	ПродажиАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	ПродажиАвтомобилей.СкладКомпании КАК СкладКомпании,
	               |	ПродажиАвтомобилей.СтавкаНДС КАК СтавкаНДС,
	               |	ПродажиАвтомобилей.Партия КАК Партия,
	               |	ПродажиАвтомобилей.ГТД КАК ГТД,
	               |	СУММА(-ПродажиАвтомобилей.Количество) КАК Количество,
	               |	СУММА(-ПродажиАвтомобилей.Сумма) КАК Сумма,
	               |	СУММА(-ПродажиАвтомобилей.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(-ПродажиАвтомобилей.ВыручкаБезНДС) КАК ВыручкаБезНДС,
	               |	СУММА(-ПродажиАвтомобилей.СуммаСкидки) КАК СуммаСкидки,
	               |	СУММА(-ПродажиАвтомобилей.ВыручкаДоПримененияСкидки) КАК ВыручкаДоПримененияСкидки,
	               |	СУММА(-ПродажиАвтомобилей.ВыручкаДоПримененияСкидкиБезНДС) КАК ВыручкаДоПримененияСкидкиБезНДС,
	               |	СУММА(-ПродажиАвтомобилей.СуммаУпр) КАК СуммаУпр,
	               |	СУММА(-ПродажиАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
	               |	СУММА(-ПродажиАвтомобилей.ВыручкаБезНДСУпр) КАК ВыручкаБезНДСУпр,
	               |	СУММА(-ПродажиАвтомобилей.СуммаСкидкиУпр) КАК СуммаСкидкиУпр,
	               |	СУММА(-ПродажиАвтомобилей.ВыручкаДоПримененияСкидкиУпр) КАК ВыручкаДоПримененияСкидкиУпр,
	               |	СУММА(-ПродажиАвтомобилей.ВыручкаДоПримененияСкидкиБезНДСУпр) КАК ВыручкаДоПримененияСкидкиБезНДСУпр,
	               |	СУММА(-ПродажиАвтомобилей.Себестоимость) КАК Себестоимость,
	               |	СУММА(-ПродажиАвтомобилей.СуммаНДСВходящий) КАК СуммаНДСВходящий,
	               |	СУММА(-ПродажиАвтомобилей.СебестоимостьБезНДС) КАК СебестоимостьБезНДС,
	               |	СУММА(-ПродажиАвтомобилей.СебестоимостьУпр) КАК СебестоимостьУпр,
	               |	СУММА(-ПродажиАвтомобилей.СуммаНДСВходящийУпр) КАК СуммаНДСВходящийУпр,
	               |	СУММА(-ПродажиАвтомобилей.СебестоимостьБезНДСУпр) КАК СебестоимостьБезНДСУпр
	               |ИЗ
	               |	РегистрНакопления.ПродажиАвтомобилей КАК ПродажиАвтомобилей
	               |ГДЕ
	               |	ПродажиАвтомобилей.Регистратор В(&СписокОснований)
	               |	И ПродажиАвтомобилей.Автомобиль В
	               |			(ВЫБРАТЬ
	               |				СписокАвтомобилейКВозврату.Автомобиль КАК Автомобиль
	               |			ИЗ
	               |				СписокАвтомобилейКВозврату КАК СписокАвтомобилейКВозврату)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПродажиАвтомобилей.СтавкаНДС,
	               |	ПродажиАвтомобилей.СкладКомпании,
	               |	ПродажиАвтомобилей.Партия,
	               |	ПродажиАвтомобилей.ГТД,
	               |	ПродажиАвтомобилей.СтатусПартии,
	               |	ПродажиАвтомобилей.ХозОперация,
	               |	ПродажиАвтомобилей.Автомобиль,
	               |	ПродажиАвтомобилей.ДокументПродажи,
	               |	ПродажиАвтомобилей.Покупатель,
	               |	ПродажиАвтомобилей.Поставщик,
	               |	ПродажиАвтомобилей.ПодразделениеКомпании,
	               |	ПродажиАвтомобилей.ДоговорВзаиморасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	               |	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании,
	               |	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
	               |	ОстаткиАвтомобилей.Партия КАК Партия,
	               |	СУММА(-ОстаткиАвтомобилей.Количество) КАК Количество,
	               |	СУММА(-ОстаткиАвтомобилей.Сумма) КАК Сумма,
	               |	СУММА(-ОстаткиАвтомобилей.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(-ОстаткиАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(-ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр,
	               |	СУММА(-ОстаткиАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
	               |	СУММА(-ОстаткиАвтомобилей.СуммаБезНДСУпр) КАК СуммаБезНДСУпр
	               |ИЗ
	               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	               |ГДЕ
	               |	ОстаткиАвтомобилей.Регистратор = &Регистратор
	               |	И ОстаткиАвтомобилей.Автомобиль В
	               |			(ВЫБРАТЬ
	               |				СписокАвтомобилейКВозврату.Автомобиль КАК Автомобиль
	               |			ИЗ
	               |				СписокАвтомобилейКВозврату КАК СписокАвтомобилейКВозврату)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиАвтомобилей.СкладКомпании,
	               |	ОстаткиАвтомобилей.СтатусПартии,
	               |	ОстаткиАвтомобилей.Партия,
	               |	ОстаткиАвтомобилей.Автомобиль
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
	               |	КомплектацияАвтомобилей.СкладКомпании КАК СкладКомпании,
	               |	КомплектацияАвтомобилей.Номенклатура КАК Номенклатура,
	               |	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	КомплектацияАвтомобилей.СтатусПартии КАК СтатусПартии,
	               |	КомплектацияАвтомобилей.ГТД КАК ГТД,
	               |	КомплектацияАвтомобилей.Партия КАК Партия,
	               |	СУММА(-КомплектацияАвтомобилей.Количество) КАК Количество,
	               |	СУММА(-КомплектацияАвтомобилей.Сумма) КАК Сумма,
	               |	СУММА(-КомплектацияАвтомобилей.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(-КомплектацияАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(-КомплектацияАвтомобилей.СуммаУпр) КАК СуммаУпр,
	               |	СУММА(-КомплектацияАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
	               |	СУММА(-КомплектацияАвтомобилей.СуммаБезНДСУпр) КАК СуммаБезНДСУпр,
	               |	СУММА(-КомплектацияАвтомобилей.СуммаПродажи) КАК СуммаПродажи,
	               |	СУММА(-КомплектацияАвтомобилей.СуммаПродажиУпр) КАК СуммаПродажиУпр
	               |ИЗ
	               |	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	               |ГДЕ
	               |	КомплектацияАвтомобилей.Регистратор = &Регистратор
	               |	И КомплектацияАвтомобилей.Автомобиль В
	               |			(ВЫБРАТЬ
	               |				СписокАвтомобилейКВозврату.Автомобиль КАК Автомобиль
	               |			ИЗ
	               |				СписокАвтомобилейКВозврату КАК СписокАвтомобилейКВозврату)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КомплектацияАвтомобилей.СкладКомпании,
	               |	КомплектацияАвтомобилей.Номенклатура,
	               |	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
	               |	КомплектацияАвтомобилей.Партия,
	               |	КомплектацияАвтомобилей.Автомобиль,
	               |	КомплектацияАвтомобилей.СтатусПартии,
	               |	КомплектацияАвтомобилей.ГТД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокАвтомобилейКВозврату.Автомобиль КАК Автомобиль,
	               |	РеализацияАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсегоАвтомобиль,
	               |	РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля
	               |ПОМЕСТИТЬ СписокАвтомобилей
	               |ИЗ
	               |	СписокАвтомобилейКВозврату КАК СписокАвтомобилейКВозврату
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	               |		ПО СписокАвтомобилейКВозврату.Автомобиль = РеализацияАвтомобилейАвтомобили.Автомобиль
	               |			И (РеализацияАвтомобилейАвтомобили.Ссылка = &Регистратор)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СписокАвтомобилей.СуммаВсегоАвтомобиль) КАК СуммаВсегоАвтомобиль,
	               |	СУММА(ЕСТЬNULL(РеализацияАвтомобилейТовары.СуммаВсего, 0)) КАК СуммаВсегоКомплектации
	               |ИЗ
	               |	СписокАвтомобилей КАК СписокАвтомобилей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
	               |		ПО СписокАвтомобилей.ИдентификаторАвтомобиля = РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля
	               |			И (РеализацияАвтомобилейТовары.Ссылка = &Регистратор)";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Регистратор", Сделка);
	Запрос.УстановитьПараметр("СписокОснований", СписокОснований);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	Если ПакетЗапроса[5].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	// Регистр ПродажиАвтомобилей
	ПродажиАвтомобилей = ПакетЗапроса[1].Выбрать();
	
	// Регистр ОстаткиАвтомобилей
	ОстаткиАвтомобилей = ПакетЗапроса[2].Выбрать();
	
	Пока ОстаткиАвтомобилей.Следующий() Цикл
		НоваяЗапись = Движения.ОстаткиАвтомобилей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ОстаткиАвтомобилей);
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.ХозОперация = ХозОперация;
		НоваяЗапись.Проект      = Проект;
	КонецЦикла;
	
	Движения.ОстаткиАвтомобилей.Записать();
	
	Если НЕ РеализацияАвтомобилейКомиссия Тогда
		// Если среди возвращаемых автомобилей есть комиссионные, то отсторнируем реализованные автомобили.
		НаборЗаписейРеализованныеАвтомобили=Движения.РеализованныеАвтомобили;
		НаборЗаписейРеализованныеАвтомобили.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейРеализованныеАвтомобили.Сторно=Истина;
		Отказ=НЕ НаборЗаписейРеализованныеАвтомобили.Приход() ИЛИ Отказ;
	Иначе
		// автомобили возвращает комиссионер. отсторнируем передачу на комиссию
		НаборЗаписейАвтомобилиОтданные=Движения.АвтомобилиОтданные;
		НаборЗаписейАвтомобилиОтданные.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейАвтомобилиОтданные.Сторно=Истина;
		НаборЗаписейАвтомобилиОтданные.Контрагент=Контрагент;
		НаборЗаписейАвтомобилиОтданные.ДоговорВзаиморасчетов=ДоговорВзаиморасчетов;
		
		ЗапросПоАвтомобилям = Новый Запрос;
		ЗапросПоАвтомобилям.Текст = "ВЫБРАТЬ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		|	&ДокументРеализацияАвтомобилей КАК ДокументПередачи,
		|	СУММА(КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСПоДокументуРеализации) КАК СуммаНДС,
		|	СУММА(КорректировкаРеализацииАвтомобилейАвтомобили.СуммаПоДокументуРеализации) КАК Сумма,
		|	СУММА(КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоПоДокументуРеализации) КАК СуммаВсего,
		|	СУММА(1) КАК Количество
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница = -1
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль";
		ЗапросПоАвтомобилям.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросПоАвтомобилям.УстановитьПараметр("ДокументРеализацияАвтомобилей", Сделка);
		
		НаборЗаписейАвтомобилиОтданные.РезультатЗапросаПоАвтомобилям = ЗапросПоАвтомобилям.Выполнить();
		Отказ=НЕ НаборЗаписейАвтомобилиОтданные.Приход() ИЛИ отказ;
	КонецЕсли;
	
	// Регистр КомплектацияАвтомобилей
	КомплектацияАвтомобилей = ПакетЗапроса[3].Выбрать();
	
	Пока КомплектацияАвтомобилей.Следующий() Цикл
		НоваяЗапись = Движения.КомплектацияАвтомобилей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, КомплектацияАвтомобилей);
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.ХозОперация = ХозОперация;
	КонецЦикла;
	
	Движения.КомплектацияАвтомобилей.Записать();
	
	Если НЕ РеализацияАвтомобилейКомиссия Тогда
		// Если среди возвращенного товара есть комиссионный, то отсторнируем реализованные товары.
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Автомобиль,
		|	КомплектацияАвтомобилей.СкладКомпании,
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
		|	КомплектацияАвтомобилей.СтатусПартии,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.ГТД,
		|	КомплектацияАвтомобилей.Количество,
		|	КомплектацияАвтомобилей.Сумма,
		|	КомплектацияАвтомобилей.СуммаНДС,
		|	КомплектацияАвтомобилей.СуммаБезНДС,
		|	КомплектацияАвтомобилей.СуммаУпр,
		|	КомплектацияАвтомобилей.СуммаНДСУпр,
		|	КомплектацияАвтомобилей.СуммаБезНДСУпр,
		|	КомплектацияАвтомобилей.СуммаПродажи,
		|	КомплектацияАвтомобилей.СуммаПродажиУпр,
		|	КомплектацияАвтомобилей.ХозОперация,
		|	КомплектацияАвтомобилей.СтавкаНДС
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Регистратор
		|	И КомплектацияАвтомобилей.Номенклатура ССЫЛКА Справочник.Номенклатура";
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
		НаборЗаписейРеализованныеТовары.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейРеализованныеТовары.Сторно=Истина;
		НаборЗаписейРеализованныеТовары.ЕстьАвтомобиль = Истина;
		НаборЗаписейРеализованныеТовары.ПоБазовомуКоличеству=Ложь;
		НаборЗаписейРеализованныеТовары.РезультатЗапросаПоПартиям=Запрос.Выполнить().Выгрузить();
		НаборЗаписейРеализованныеТовары.РезультатЗапросаПоГТД=НаборЗаписейРеализованныеТовары.РезультатЗапросаПоПартиям.Скопировать();
		НаборЗаписейРеализованныеТовары.ШапкаДокумента=ЭтотОбъект;
		Отказ=НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
		// продажи
		Если НЕ Отказ Тогда
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	КомплектацияАвтомобилей.ВидДвижения,
			|	КомплектацияАвтомобилей.Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.СтатусПартии,
			|	КомплектацияАвтомобилей.Партия,
			|	КомплектацияАвтомобилей.ГТД,
			|	КомплектацияАвтомобилей.СтавкаНДС,
			|	КомплектацияАвтомобилей.Количество,
			|	КомплектацияАвтомобилей.Сумма,
			|	КомплектацияАвтомобилей.СуммаНДС,
			|	КомплектацияАвтомобилей.СуммаБезНДС,
			|	КомплектацияАвтомобилей.СуммаУпр,
			|	КомплектацияАвтомобилей.СуммаНДСУпр,
			|	КомплектацияАвтомобилей.СуммаБезНДСУпр
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор
			|	И КомплектацияАвтомобилей.Номенклатура ССЫЛКА Справочник.Номенклатура";
			Запрос.УстановитьПараметр("Регистратор",Ссылка);
			НаборЗаписейПродажи = Движения.Продажи;
			НаборЗаписейПродажи.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейПродажи.РезультатЗапросаПоПартиям = Запрос.Выполнить().Выгрузить();
			НаборЗаписейПродажи.СкладКомпании             = СкладКомпании;
			НаборЗаписейПродажи.Сторно                    = Истина;
			НаборЗаписейПродажи.ПоБазовомуКоличеству      = Ложь;
			НаборЗаписейПродажи.Покупатель                = Контрагент;
			НаборЗаписейПродажи.ДоговорВзаиморасчетов     = ДоговорВзаиморасчетов;
			НаборЗаписейПродажи.ПодразделениеКомпании     = ПодразделениеКомпании;
			НаборЗаписейПродажи.Комиссия                  = Ложь;
			НаборЗаписейПродажи.ШапкаДокумента            = ЭтотОбъект;
			НаборЗаписейПродажи.ЕстьАвтомобиль            = Истина;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
			|ПОМЕСТИТЬ СписокАвтомобилей
			|ИЗ
			|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
			|ГДЕ
			|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
			|	И КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
			|	РеализацияАвтомобилейТовары.Номенклатура КАК Номенклатура,
			|	РеализацияАвтомобилейТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СУММА(РеализацияАвтомобилейТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(РеализацияАвтомобилейТовары.СуммаВсего) КАК СуммаВсего,
			|	СУММА(РеализацияАвтомобилейТовары.Количество * РеализацияАвтомобилейТовары.Коэффициент) КАК Количество,
			|	СУММА(РеализацияАвтомобилейТовары.Сумма) КАК Сумма,
			|	РеализацияАвтомобилейТовары.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
			|	СУММА(РеализацияАвтомобилейТовары.СуммаСкидки) КАК СуммаСкидки,
			|	РеализацияАвтомобилейТовары.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
			|		ПО РеализацияАвтомобилейАвтомобили.Ссылка = РеализацияАвтомобилейТовары.Ссылка
			|			И РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля = РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля
			|			И (РеализацияАвтомобилейАвтомобили.Ссылка = &РеализацияАвтомобилей)
			|ГДЕ
			|	РеализацияАвтомобилейАвтомобили.Автомобиль В
			|			(ВЫБРАТЬ
			|				СписокАвтомобилей.Автомобиль КАК Автомобиль
			|			ИЗ
			|				СписокАвтомобилей КАК СписокАвтомобилей)
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияАвтомобилейТовары.ХарактеристикаНоменклатуры,
			|	РеализацияАвтомобилейАвтомобили.Автомобиль,
			|	РеализацияАвтомобилейТовары.Номенклатура,
			|	РеализацияАвтомобилейТовары.СтавкаНДС,
			|	РеализацияАвтомобилейТовары.Номенклатура.ВидНоменклатуры";
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("РеализацияАвтомобилей", Сделка);
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
			Запрос=Новый Запрос("
			|ВЫБРАТЬ
			|	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура КАК Номенклатура,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.Партия КАК Партия,
			|	КомплектацияАвтомобилей.ГТД КАК ГТД,
			|	СУММА(КомплектацияАвтомобилей.Сумма) КАК Сумма,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДС) КАК СуммаНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаУпр) КАК СуммаУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДСУпр) КАК СуммаБезНДСУпр
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &РеализацияТоваров И 
			|	КомплектацияАвтомобилей.Автомобиль                 В (&Автомобили) И 
			|	КомплектацияАвтомобилей.Партия                     В (&Партии) И 
			|	КомплектацияАвтомобилей.СтатусПартии               = &СтатусПартии И 
			|	КомплектацияАвтомобилей.Номенклатура               В (&Номенклатура) И 
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры) И 
			|	КомплектацияАвтомобилей.ВидДвижения = &ВидДвижения
			|СГРУППИРОВАТЬ ПО
			|	КомплектацияАвтомобилей.Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.Партия,
			|	КомплектацияАвтомобилей.ГТД,
			|	КомплектацияАвтомобилей.Регистратор");
			Запрос.УстановитьПараметр("ВидДвижения",                ВидДвиженияНакопления.Расход);
			Запрос.УстановитьПараметр("СтатусПартии",               Перечисления.СтатусыПартий.ТоварКупленный);
			Запрос.УстановитьПараметр("РеализацияТоваров",          Сделка);
			Запрос.УстановитьПараметр("Ссылка",                     Ссылка);
			Запрос.УстановитьПараметр("Автомобили",                 НаборЗаписейПродажи.РезультатЗапросаПоПартиям.ВыгрузитьКолонку("Автомобиль"));
			Запрос.УстановитьПараметр("Партии",                     НаборЗаписейПродажи.РезультатЗапросаПоПартиям.ВыгрузитьКолонку("Партия"));
			Запрос.УстановитьПараметр("Номенклатура",               НаборЗаписейПродажи.РезультатЗапросаПоПартиям.ВыгрузитьКолонку("Номенклатура"));
			Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", НаборЗаписейПродажи.РезультатЗапросаПоПартиям.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
			НаборЗаписейПродажи.КэшСебестоимостиПриКомиссии = Запрос.Выполнить().Выгрузить();
			НаборЗаписейПродажи.ДокументПродажи = Сделка;
			Отказ = НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
		КонецЕсли;
	Иначе
		// товар возвращает комиссионер. отсторнируем передачу на комиссию оборудования
		НаборЗаписейПартииОтданные = Движения.ПартииТоваровОтданные;
		НаборЗаписейПартииОтданные.ДокументОбъект        = ЭтотОбъект;
		НаборЗаписейПартииОтданные.Сторно                = Истина;
		НаборЗаписейПартииОтданные.Контрагент            = Контрагент;
		НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейПартииОтданные.ШапкаДокумента        = ШапкаДокумента;
		НаборЗаписейПартииОтданные.ПоБазовомуКоличеству  = Ложь;
		НаборЗаписейПартииОтданные.ЕстьАвтомобиль        = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ СписокАвтомобилей
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		|	РеализацияАвтомобилейТовары.Номенклатура КАК Номенклатура,
		|	РеализацияАвтомобилейТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РеализацияАвтомобилейТовары.Ссылка КАК ДокументПередачи,
		|	РеализацияАвтомобилейТовары.СуммаНДС КАК СуммаНДС,
		|	РеализацияАвтомобилейТовары.СуммаВсего КАК СуммаВсего,
		|	РеализацияАвтомобилейТовары.Количество * РеализацияАвтомобилейТовары.Коэффициент КАК Количество,
		|	РеализацияАвтомобилейАвтомобили.Сумма КАК Сумма
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
		|		ПО РеализацияАвтомобилейАвтомобили.Ссылка = РеализацияАвтомобилейТовары.Ссылка
		|			И РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля = РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля
		|			И (РеализацияАвтомобилейАвтомобили.Ссылка = &РеализацияАвтомобилей)
		|ГДЕ
		|	РеализацияАвтомобилейАвтомобили.Автомобиль В
		|			(ВЫБРАТЬ
		|				СписокАвтомобилей.Автомобиль КАК Автомобиль
		|			ИЗ
		|				СписокАвтомобилей КАК СписокАвтомобилей)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("РеализацияАвтомобилей", Сделка);
		НаборЗаписейПартииОтданные.РезультатЗапросаПоТоварам=Запрос.Выполнить();
		Отказ=НЕ НаборЗаписейПартииОтданные.Приход() ИЛИ Отказ;
		Если НЕ Отказ Тогда
			НаборЗаписейПартииОтданные.Записать();
		КонецЕсли; 
		// Товар возвращает комиссионер. отсторнируем передачу на комиссию опций, установленных производителем.
		Запрос=Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ ТаблицаАвтомобилей
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровОтданные.Автомобиль КАК Автомобиль,
		|	ПартииТоваровОтданные.Контрагент КАК Контрагент,
		|	ПартииТоваровОтданные.Номенклатура КАК Номенклатура,
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданные.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ПартииТоваровОтданные.ДокументПередачи КАК ДокументПередачи,
		|	ПартииТоваровОтданные.Партия КАК Партия,
		|	ПартииТоваровОтданные.ГТД КАК ГТД,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровОтданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ПартииТоваровОтданные.Количество
		|			ИНАЧЕ -ПартииТоваровОтданные.Количество
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровОтданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ПартииТоваровОтданные.Сумма
		|			ИНАЧЕ -ПартииТоваровОтданные.Сумма
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровОтданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ПартииТоваровОтданные.СуммаУпр
		|			ИНАЧЕ -ПартииТоваровОтданные.СуммаУпр
		|		КОНЕЦ) КАК СуммаУпр,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровОтданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ПартииТоваровОтданные.СуммаНДС
		|			ИНАЧЕ -ПартииТоваровОтданные.СуммаНДС
		|		КОНЕЦ) КАК СуммаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровОтданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ПартииТоваровОтданные.СуммаСебестоимостиУпр
		|			ИНАЧЕ -ПартииТоваровОтданные.СуммаСебестоимостиУпр
		|		КОНЕЦ) КАК СуммаСебестоимостиУпр,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровОтданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ПартииТоваровОтданные.СуммаСебестоимостиРегл
		|			ИНАЧЕ -ПартииТоваровОтданные.СуммаСебестоимостиРегл
		|		КОНЕЦ) КАК СуммаСебестоимостиРегл
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
		|ГДЕ
		|	ПартииТоваровОтданные.Период <= &НаДату
		|	И ПартииТоваровОтданные.Номенклатура = &ОпцияПроизводителя
		|	И ПартииТоваровОтданные.Регистратор = &РеализацияАвтомобилей
		|	И ПартииТоваровОтданные.Автомобиль В
		|			(ВЫБРАТЬ
		|				ТаблицаАвтомобилей.Автомобиль
		|			ИЗ
		|				ТаблицаАвтомобилей КАК ТаблицаАвтомобилей)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровОтданные.Автомобиль,
		|	ПартииТоваровОтданные.Контрагент,
		|	ПартииТоваровОтданные.Номенклатура,
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданные.ДоговорВзаиморасчетов,
		|	ПартииТоваровОтданные.ДокументПередачи,
		|	ПартииТоваровОтданные.Партия,
		|	ПартииТоваровОтданные.ГТД";
		Запрос.УстановитьПараметр("НаДату", МоментВремени().Дата);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ОпцияПроизводителя",Справочники.Номенклатура.ОпцияПроизводителя);
		Запрос.УстановитьПараметр("РеализацияАвтомобилей", Сделка);
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписейПартииОтданные=Движения.ПартииТоваровОтданные;
			НоваяЗапись=НаборЗаписейПартииОтданные.Добавить();
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период=Дата;
			НоваяЗапись.Регистратор=Ссылка;
			НоваяЗапись.Автомобиль=Выборка.Автомобиль;
			НоваяЗапись.Контрагент=Выборка.Контрагент;
			НоваяЗапись.Номенклатура=Выборка.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаНоменклатуры;
			НоваяЗапись.ДоговорВзаиморасчетов=Выборка.ДоговорВзаиморасчетов;
			НоваяЗапись.ДокументПередачи=Выборка.ДокументПередачи;
			НоваяЗапись.Партия=Выборка.Партия;
			НоваяЗапись.ГТД=Выборка.ГТД;
			НоваяЗапись.Количество=-Выборка.Количество;
			НоваяЗапись.Сумма=-Выборка.Сумма;
			НоваяЗапись.СуммаУпр=-Выборка.СуммаУпр;
			НоваяЗапись.СуммаНДС=-Выборка.СуммаНДС;
			НоваяЗапись.СуммаСебестоимостиУпр=-Выборка.СуммаСебестоимостиУпр;
			НоваяЗапись.СуммаСебестоимостиРегл=-Выборка.СуммаСебестоимостиРегл;
			НоваяЗапись.ХозОперация=ХозОперация;
		КонецЦикла;
	КонецЕсли;
	
	// определим необходимость формирования корректирующих проводок
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	// доходы и расходы
	// получим себестоимость
	Если НЕ РеализацияАвтомобилейКомиссия Тогда
		СебестоимостьАвтомобилейУпр  = 0;
		СебестоимостьОборудованияУпр = 0;
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ОстаткиАвтомобилей.СуммаУпр),0) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &Регистратор
		|	И (НЕ ОстаткиАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия))";
		Запрос.УстановитьПараметр("Регистратор",Ссылка);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СебестоимостьАвтомобилейУпр = -Выборка.СуммаУпр;
		КонецЕсли; 
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр),0) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Регистратор
		|	И (НЕ КомплектацияАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия))";
		Запрос.УстановитьПараметр("Регистратор",Ссылка);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СебестоимостьОборудованияУпр = - Выборка.СуммаУпр;
		КонецЕсли; 
		// Итоговая Себестоимость автомобилей
		Если СебестоимостьАвтомобилейУпр <> 0 Тогда
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДоходыИРасходы.Подразделение      = СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
			НаборЗаписейДоходыИРасходы.Расход                 = -СебестоимостьАвтомобилейУпр;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		Если СебестоимостьОборудованияУпр <> 0 Тогда
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДоходыИРасходы.Подразделение      = СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.Расход                 = -СебестоимостьОборудованияУпр;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// доходы и расходы
		НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
		НаборЗаписейРеализованныеТовары.Записать();
		НаборЗаписейРеализованныеАвтомобили.Записать();
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
		             |ПОМЕСТИТЬ СписокАвтомобилей
		             |ИЗ
		             |	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		             |ГДЕ
		             |	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Регистратор
		             |	И КорректировкаРеализацииАвтомобилейАвтомобили.Количество = 0
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ОбъединенныйЗапрос.Подразделение КАК Подразделение,
		             |	-СУММА(ОбъединенныйЗапрос.СуммаАвтомобилейУпр) КАК СуммаАвтомобилейУпр,
		             |	-СУММА(ОбъединенныйЗапрос.СуммаОборудованияУпр) КАК СуммаОборудованияУпр
		             |ИЗ
		             |	(ВЫБРАТЬ
		             |		РеализованныеАвтомобили.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК Подразделение,
		             |		ЕСТЬNULL(РеализованныеАвтомобили.СуммаУпр, 0) КАК СуммаАвтомобилейУпр,
		             |		0 КАК СуммаОборудованияУпр
		             |	ИЗ
		             |		РегистрНакопления.РеализованныеАвтомобили КАК РеализованныеАвтомобили
		             |	ГДЕ
		             |		РеализованныеАвтомобили.Регистратор = &Регистратор
		             |		И РеализованныеАвтомобили.Автомобиль В
		             |				(ВЫБРАТЬ
		             |					СписокАвтомобилей.Автомобиль КАК Автомобиль
		             |				ИЗ
		             |					СписокАвтомобилей КАК СписокАвтомобилей)
		             |	
		             |	ОБЪЕДИНИТЬ ВСЕ
		             |	
		             |	ВЫБРАТЬ
		             |		РеализованныеТовары.ДоговорВзаиморасчетов.ПодразделениеКомпании,
		             |		0,
		             |		ЕСТЬNULL(РеализованныеТовары.СуммаУпр, 0)
		             |	ИЗ
		             |		РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
		             |	ГДЕ
		             |		РеализованныеТовары.Регистратор = &Регистратор
		             |		И РеализованныеТовары.Автомобиль В
		             |				(ВЫБРАТЬ
		             |					СписокАвтомобилей.Автомобиль КАК Автомобиль
		             |				ИЗ
		             |					СписокАвтомобилей КАК СписокАвтомобилей)) КАК ОбъединенныйЗапрос
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ОбъединенныйЗапрос.Подразделение";
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		// В случае если ведется баланс по подразделению передадим подразделение соответствующее корреспонденции.
		Если БалансВедетсяПоПодразделениям Тогда
			Выборка=Запрос.Выполнить().Выбрать();
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			Пока Выборка.Следующий() Цикл
				СуммаАвтомобилейУпр  = Выборка.СуммаАвтомобилейУпр;
				СуммаОборудованияУпр = Выборка.СуммаОборудованияУпр;
				Если СуммаАвтомобилейУпр <> 0 Тогда
					НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.Подразделение  = Выборка.Подразделение;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
					НаборЗаписейДоходыИРасходы.Расход                 = -СуммаАвтомобилейУпр;
					Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
				КонецЕсли;
				Если СуммаОборудованияУпр <> 0 Тогда
					НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.Подразделение  = Выборка.Подразделение;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
					НаборЗаписейДоходыИРасходы.Расход                 = -СуммаОборудованияУпр;
					Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
				КонецЕсли;
			КонецЦикла; 
		Иначе
			ТаблицаСебестоимости = Запрос.Выполнить().Выгрузить();
			СуммаАвтомобилейУпр = ТаблицаСебестоимости.Итог("СуммаАвтомобилейУпр");
			СуммаОборудованияУпр = ТаблицаСебестоимости.Итог("СуммаОборудованияУпр");
			Если СуммаАвтомобилейУпр <> 0 Тогда
				НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Расход                 = -СуммаАвтомобилейУпр;
				Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
			Если СуммаОборудованияУпр <> 0 Тогда
				НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Расход                 = -СуммаОборудованияУпр;
				Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Возможно, что возврат производится на склад, на котором подразделение не совпадает с подразделением договора.
		ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, Дата);
		ПодразделениеДоговор = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговор<>ПодразделениеСклад);
		Если БалансВедетсяПоПодразделениям И БалансовыеПодразделенияНеРавны Тогда
			// получим себестоимость
			ОстаткиАвтомобилей=Движения.ОстаткиАвтомобилей;
			КомплектацияАвтомобилей=Движения.КомплектацияАвтомобилей;
			СебестоимостьАвтомобилей = -(ОстаткиАвтомобилей.Итог("СуммаУпр")+КомплектацияАвтомобилей.Итог("СуммаУпр"));
			
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение = СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			НаборЗаписейДиР.Доход = СебестоимостьАвтомобилей;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
			АвтомобилиОтданные=Движения.АвтомобилиОтданные;
			ПартииТоваровОтданные=Движения.ПартииТоваровОтданные;
			СебестоимостьАвтомобилейОтданные = -(АвтомобилиОтданные.Итог("СуммаСебестоимостиУпр")+ПартииТоваровОтданные.Итог("СуммаСебестоимостиУпр"));
			
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			НаборЗаписейДиР.Доход = СебестоимостьАвтомобилейОтданные;
			Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// Двигаем границу последовательности комплектации автомобилей.
	РаботаСГраницами.СдвинутьГраницуКомплектации(Ссылка, ДополнительныеСвойства, Движения);
	
	// Двигаем границу последовательности автомобилей.
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ВыполнитьДвиженияПоВозвратуАвтомобилей()

#КонецОбласти

Функция ХозОперацияУказанаНеВерно()
	
	ЭтоВосстановлениеПоследовательностей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	
	Если ЭтоВосстановлениеПоследовательностей Тогда
		
		Возврат	Ложь;
		
	КонецЕсли;
	
	КонтролироватьВидИсправительногоДокумента = ПраваИНастройкиПользователя.Значение("КонтролироватьВидИсправительногоДокумента");
	
	Если Не КонтролироватьВидИсправительногоДокумента Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЕстьИзмененияСуммовыхПоказателей = ЕстьИзмененияСуммовыхПоказателей();
	
	Если
		ЕстьИзмененияСуммовыхПоказателей
		И ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах
	Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В документе изменены суммовые показатели следует использовать хоз. операцию <Корректировка по согласованию сторон>'")
		);
		Возврат Истина;
		
	ИначеЕсли
		Не ЕстьИзмененияСуммовыхПоказателей
		И ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон
	Тогда 
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В документе нет изменений суммовых показателей следует использовать хоз. операцию <Исправление в первичных документах>'")
		);
		Возврат Истина;
	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьИзмененияСуммовыхПоказателей()
	
	Для Каждого Строка Из Автомобили Цикл
		Если
			Строка.КоличествоРазница <> 0
			Или Строка.СуммаВсегоРазница <> 0
			Или Строка.СуммаНДСРазница <> 0
		Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
