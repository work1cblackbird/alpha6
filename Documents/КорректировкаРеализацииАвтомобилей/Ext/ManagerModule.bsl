// Модуль менеджера документа "Корректировка реализации автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс    

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
// Возвращаемое значение:
//  Структура - значения итоговых показателей по операции в целом:
//    СуммаДокумента	- Число - сумма документа;
//    СуммаНДС			- Число - сумма НДС;
//    СуммаБезНДС		- Число - сумма без НДС.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаДокументаДоКорректировки", Объект.Автомобили.Итог("СуммаВсегоПоДокументуРеализации"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Автомобили.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка,
		ТекстВременнаяТаблица = "",
		Объединить = Ложь,
		ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции // ПолучитьТекстЗапросаПоКонтактам()

// Расчет разницы сумм по документу реализации и введенной суммы
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасчетРазницы(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Строка.СуммаРазница      = Строка.Сумма      - Строка.СуммаПоДокументуРеализации;
	Строка.СуммаНДСРазница   = Строка.СуммаНДС   - Строка.СуммаНДСПоДокументуРеализации;
	Строка.СуммаВсегоРазница = Строка.СуммаВсего - Строка.СуммаВсегоПоДокументуРеализации;
	Строка.КоличествоРазница = Строка.Количество - Строка.КоличествоПоДокументуРеализации;
	
КонецПроцедуры // РасчетРазницы()

// Движения документа выполненные по регистру ГТД
//
// Параметры:
// 	Сам - Документ.Ссылка - документ по которому выбираются движения регистра ГТД
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат запроса к регистру ГТД.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.ГТД,
		|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Сделка
		|
		|СГРУППИРОВАТЬ ПО
		|	КомплектацияАвтомобилей.ГТД,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры"
	);
	Запрос.УстановитьПараметр("Сделка", Сам.Сделка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Определяет возможен ли ввод корректировки на основании данного документа основания.
//
// Параметры:
//	Основание - документ реализации автомобилей или корректировки реализации автомобилей.
//
Функция КорректировкаНеДоступна(Основание) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК ЕстьВозврат
	|ИЗ
	|	Документ.ВозвратОтПокупателяАвтомобилей КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ДокументОснование = &Основание
	|	И ТаблицаОбъекта.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.ВозвратОтПокупателяАвтомобилей.Автомобили КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ДокументПродажи = &Основание
	|	И ТаблицаОбъекта.Ссылка.Проведен
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", Основание);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // КорректировкаНеДоступна()

// АПК:299-выкл

// Процедура заполнения реквизита "СуммаДокументаРазница"
//
Процедура ЗаполнитьСуммаДокументаРазница() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилей.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилей.СуммаДокументаРазница = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.Заблокировать();
		ДокументОбъект.СуммаДокументаРазница = ДокументОбъект.Автомобили.Итог("СуммаВсегоРазница");
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось перезаполнить сумму разницы в %1'"),
					СокрЛП(Строка(ДокументОбъект.Ссылка))
				)
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСуммаДокументаРазница()

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.КорректировкаРеализацииАвтомобилей - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Автомобили.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.УПД) КАК ВидДокумента,
		|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РеализацияТоваров) КАК КодОперации,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль.ГТД КАК РНПТ,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество КАК КоличествоПрослеживаемости,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего - КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС КАК СуммаБезНДС
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль.ГТД.РНПТ";
		Документ = Объект.Сделка;
		Если ЗначениеЗаполнено(Объект.Сделка) Тогда
			ДанныеРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Сделка, "Дата,Номер");
			ПериодОтчета = НачалоКвартала(ДанныеРеализации.Дата);
			НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Сделка);
			ДатаДокумента = ДанныеРеализации.Дата;
		Иначе
			ПериодОтчета = НачалоКвартала(Объект.Дата);
		КонецЕсли;
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.УКД) КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.УКДУвеличение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.УКДУменьшение)
		|	КОНЕЦ КАК КодОперации,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль.ГТД КАК РНПТ,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница * ВЫБОР
		|		КОГДА КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница < 0
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоличествоПрослеживаемости,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница * ВЫБОР
		|		КОГДА КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница < 0
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ - КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница * ВЫБОР
		|		КОГДА КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница < 0
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК СуммаБезНДС
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль.ГТД.РНПТ
		|	И КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница <> 0";
		Документ = Объект.Ссылка;
		ПериодОтчета = НачалоКвартала(Объект.Дата);
		НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
		ДатаДокумента = Объект.Дата;
	КонецЕсли;
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим есть РНПТ у документа
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = РезультатЗапроса.Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	КонтрагентОперации = Объект.Контрагент;
	
	// Для пересчета валюты в рубли
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
	
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.Контрагент = КонтрагентОперации;
		
		// Пересчет суммы
		Если ВалютаНеРегл Тогда
			НоваяСтрока.СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Получение документа, на основании которого была выполнена корректировка для исправления
//
// Параметры:
//  Основание	 - ДокументСсылка.КорректировкаРеализации - Текущий документ для проверки.
//  ХозОперация	 - СправочникСсылка.ХозОперация - Хозяйственная операция текущего документа.
//
Процедура ПолучитьДокументДоВнесенияКорректировки(Документ, Знач ХозОперация = Неопределено) Экспорт
	
	Если ХозОперация = Неопределено Тогда
		
		ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ХозОперация");
		
	КонецЕсли;
		
	Пока ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах Цикл
		
		ДанныеОснованиеКорректировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"ДокументОснование, ДокументОснование.ХозОперация");
		Документ = ДанныеОснованиеКорректировки.ДокументОснование;
		ХозОперация = ДанныеОснованиеКорректировки.ДокументОснованиеХозОперация;
		
	КонецЦикла;
	
	Если ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон Тогда
		
		Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//    (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//    вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Уникальные поля таблицы товаров
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// АПК:299-вкл

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Структура - Содержит перечень параметров действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ДокументОснование <> Неопределено И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если Объект.ДокументОснование = Объект.Ссылка Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Ввод корректировки реализации автомобилей на основании самой себя запрещен.'"),
				Объект.Ссылка
			);
			Возврат;
		КонецЕсли;

		Если КорректировкаНеДоступна(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На основании %1 введен возврат автомобилей. Ввод корректировки реализации автомобилей невозможен.'"), Объект.ДокументОснование);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ДокументОснование.Проведен Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Ввод корректировки реализации автомобилей возможен только на основании проведенного документа.'"),
				Объект.Ссылка
			);
			Объект.ДокументОснование=Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;

		Если Объект.ДокументОснование.ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Ввод корректировки реализации автомобилей невозможен на основании реализации автомобилей комиссия.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КорректировкаРеализацииАвтомобилей.Ссылка
			|ИЗ
			|	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
			|ГДЕ
			|	КорректировкаРеализацииАвтомобилей.ДокументОснование = &ДокументОснование
			|	И КорректировкаРеализацииАвтомобилей.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда
			Выборка = РезЗапроса.Выбрать();
			Выборка.Следующий();
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'На основании документа %1 уже введен %2'"),
					Объект.ДокументОснование,
					Выборка.Ссылка
				),
				Объект.Ссылка
			);
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах") Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
			
			Объект.НомерИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "НомерИсправления") + 1;
		Иначе
			Объект.НомерИсправления = 1;
		КонецЕсли;
	Иначе
		Объект.НомерИсправления = 0;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") И Не Объект.ДокументОснование.ДоступнаПечатьУКД
		Или ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда	
		Объект.ДоступнаПечатьУПД = Объект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах;
		Объект.ДоступнаПечатьУКД = Объект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон;
	КонецЕсли;
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КарточкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// подставим VIN
	Строка.VIN = Строка.Автомобиль.VIN;
	Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
		Строка.СтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
	КонецЕсли;
	
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // АвтомобилиКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.Сумма = Строка.Цена;
	АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Количество = 0 Тогда
		
		Строка.Сумма = 0;
		
	КонецЕсли;
	
	Если Строка.Сумма = 0 И Строка.Количество = 1 Тогда
		
		Строка.Сумма = Строка.Цена;
		
	КонецЕсли;
	
	Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	БазаРасчетаНДС = Строка.Сумма - Себестоимость;
	ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Истина);
	
	Если БазаРасчетаНДС <= 0 Тогда
		
		Строка.СуммаНДС = 0;
		Строка.СуммаВсего = 0;
		
	ИначеЕсли ЦенаВключаетНДС Тогда
		Строка.СуммаНДС   = БазаРасчетаНДС - 100 * БазаРасчетаНДС / (100 + Строка.СтавкаНДС.Ставка);
		Строка.СуммаВсего = Строка.Сумма;
	Иначе
		Строка.СуммаНДС   = БазаРасчетаНДС * Строка.СтавкаНДС.Ставка / 100;
		Строка.СуммаВсего = Строка.Сумма + Строка.СуммаНДС;
	КонецЕсли;
	
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.Количество = 0 Тогда
		Строка.СуммаВсего = 0;
	КонецЕсли;
	
	СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтавкаНДС, "Ставка");
	СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, 0);
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	СуммаНДС       = Окр((Макс(Строка.СуммаВсего - Себестоимость, 0) * СтавкаНДС) / (100 + СтавкаНДС), 2);
	ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Истина);
	СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего - СуммаНДС);
	Строка.Сумма = СуммаРасчетная;
	СуммаРасчетная = Макс(СуммаРасчетная - Себестоимость, 0);
	
	Если ЦенаВключаетНДС Тогда
		Строка.СуммаНДС = Окр((СуммаРасчетная * СтавкаНДС) / (100 + СтавкаНДС), 2);
	Иначе
		Строка.СуммаНДС = Окр(СуммаРасчетная * СтавкаНДС / 100,2);
	КонецЕсли;
	
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.КорректировкаРеализацииАвтомобилей",
		"РеализацияАвтомобилей",
		НСтр("ru = 'Расходная накладная'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьУПД", Истина);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУКД",
		"ПФ_MXL_УКД",
		НСтр("ru = 'Универсальный корректировочный документ'"),
		СсылкаНаДокумент);
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьУКД", Истина);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеализацияАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"РеализацияАвтомобилей",
															"Расходная накладная",
															ПечатьКорректировкаРеализацииАвтомобилей(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "РеализацияАвтомобилей"
// 
// Параметры:
//  МассивОбъектов - Массив - Массив документов для печати.
//  ОбъектыПечати    - Структура        - список областей печатной формы в разрезе документов
//
// Возвращаемое значение:
//	ТабличныйДокумент   - возвращает сформированный табличный документ.
//
Функция ПечатьКорректировкаРеализацииАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.КорректировкаРеализацииАвтомобилей.ПФ_MXL_РеализацияАвтомобилей");
		
		Если НЕ ЕстьРеквизит(Документ, "СуммаСкидки", "Автомобили") ИЛИ Документ.Автомобили.Итог("СуммаСкидки") = 0 Тогда
			// удалим область
			ОбластьСкидка = Макет.Область("Скидка");
			ОбластьТовар = Макет.Область("Товар");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
				
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// заполняем заголовок колонки НДС по типу цен
		Параметры = Новый Структура("НДС");
		Параметры.НДС = "НДС";
		Если Документ.ТипЦен.ЦенаВключаетНДС
			И НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда	// Если НДС включен
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Параметры.Заполнить(Параметры);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// 
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			Если СтрокаТЧ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ));
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// заполнение подвала и итогов
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего   = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаРеализацииАвтомобилей_КорректировкаРеализацииАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьКорректировкаРеализацииАвтомобилей()

// Функция получения данных для УПД  
//
// Параметры:
//  Объект - ДокументСсылка.КорректировкаРеализацииАвтомобилей - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - структура с данными документа.
//
Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Объект.Ссылка).СчетФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ЗначениеЗаполнено(ДокументФактура) Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		ТаблицаТоваров = ДокументОбъект.Товары.Выгрузить();
		ДанныеИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументФактура,
			"НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправления,Дата,НомерИсправленияИсходногоДокумента"
			+ ",ДатаИсправленияИсходногоДокумента,ПодразделениеКомпании,Исправление"
			+ ",НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента");
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
		
		// Получим по СФ таблицу товаров
		УстановитьПривилегированныйРежим(Истина);
		ДокументСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		ДокументСчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		УстановитьПривилегированныйРежим(Ложь);
		ДокументСчетФактура.Заполнить(Объект);
		
		ТаблицаТоваров = ДокументСчетФактура.Товары.Выгрузить();
		
		ДанныеИсходногоДокумента = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
		ДанныеИсходногоДокумента.ПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
		ДанныеИсходногоДокумента.Дата = ДокументОбъект.Дата;
		Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеИсходногоДокумента, Объект.Ссылка, Истина);
		
	КонецЕсли;
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"                   	, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект)); 
	ДанныеОбъекта.Вставить("Исправление"				, Истина);
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, ДокументОбъект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", Объект.Сделка);
	
	Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, ДанныеИсходногоДокумента);
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
		//@skip-check unknown-method-property
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УчетПрослеживаемыхТоваровСервер.РНПТВДокументе(Объект.Ссылка));
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДанныеОбъекта.Вставить("ДатаОтгрузки"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент));
  	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеДляПечатиУПД()

// Функция получения данных для УКД
//
// Параметры:
//  Объект - ДокументСсылка.КорректировкаРеализацииАвтомобилей - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - структура с данными документа.
//
Функция ПолучитьДанныеДляПечатиУКД(Объект) Экспорт
	
	ДокументФактура = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Объект.Ссылка).СчетФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ЗначениеЗаполнено(ДокументФактура) Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		ДанныеИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументФактура,
			"НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправления,Дата,НомерИсправленияИсходногоДокумента"
			+ ",ДатаИсправленияИсходногоДокумента,ПодразделениеКомпании,Исправление"
			+ ",НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента");
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
		ДанныеИсходногоДокумента = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
		ДанныеИсходногоДокумента.ПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
		ДанныеИсходногоДокумента.Дата = ДокументОбъект.Дата;
		Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеИсходногоДокумента, Объект.Ссылка, Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если Объект.ХозОперация =
			Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах Тогда
		// Найдем до корректировки документ
		ОснованиеИсправления = Объект.ДокументОснование;
		ПолучитьДокументДоВнесенияКорректировки(
			ОснованиеИсправления,
			Объект.ДокументОснование.ХозОперация);
		ТекстЗапроса = "ВЫБРАТЬ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество КАК Количество,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Сумма КАК Сумма,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ДоИзменения
		|ИЗ
		|	Документ.#ИмяДокумента.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &ОснованиеКорректировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Цена КАК Цена,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Сумма КАК Сумма,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаРазница КАК СуммаРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница КАК СуммаНДСРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница КАК СуммаВсегоРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество КАК Количество,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница КАК КоличествоРазница
		|ПОМЕСТИТЬ АвтомобилиКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоИзменения.Автомобиль КАК Номенклатура,
		|	ДоИзменения.СтавкаНДС КАК СтавкаНДСДоИзменения,
		|	ДоИзменения.СуммаНДС КАК СуммаНДСПоДокументуРеализации,
		|	ДоИзменения.СуммаВсего КАК СуммаВсегоПоДокументуРеализации,
		|	АвтомобилиКорректировки.Цена КАК Цена,
		|	АвтомобилиКорректировки.Сумма КАК Сумма,
		|	ЕСТЬNULL(АвтомобилиКорректировки.Сумма, 0) - ДоИзменения.Сумма КАК СуммаРазница,
		|	АвтомобилиКорректировки.СтавкаНДС КАК СтавкаНДС,
		|	ЕСТЬNULL(АвтомобилиКорректировки.СуммаНДС, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(АвтомобилиКорректировки.СуммаНДС, 0) - ДоИзменения.СуммаНДС КАК СуммаНДСРазница,
		|	ЕСТЬNULL(АвтомобилиКорректировки.СуммаВсего, 0) КАК СуммаВсего,
		|	ЕСТЬNULL(АвтомобилиКорректировки.СуммаВсего, 0) - ДоИзменения.СуммаВсего КАК СуммаВсегоРазница,
		|	ЕСТЬNULL(АвтомобилиКорректировки.Количество, 0) КАК Количество,
		|	ДоИзменения.Автомобиль.ГТД КАК ГТД,
		|	ЕСТЬNULL(АвтомобилиКорректировки.Количество, 0) - ДоИзменения.Количество КАК КоличествоРазница,
		|	ДоИзменения.Количество КАК КоличествоДо,
		|	ЕСТЬNULL(АвтомобилиКорректировки.Количество, 0) КАК КоличествоПосле,
		|	0 КАК НомерСтроки,
		|	0 КАК ИсходныйНомерСтроки,
		|	"""" КАК Содержание
		|ИЗ
		|	ДоИзменения КАК ДоИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ АвтомобилиКорректировки КАК АвтомобилиКорректировки
		|		ПО ДоИзменения.Автомобиль = АвтомобилиКорректировки.Автомобиль
		|ГДЕ
		|	ЕСТЬNULL(АвтомобилиКорректировки.Количество, 0) <> ДоИзменения.Количество
		|	ИЛИ ЕСТЬNULL(АвтомобилиКорректировки.СуммаВсего, 0) <> ДоИзменения.СуммаВсего
		|	ИЛИ АвтомобилиКорректировки.СтавкаНДС <> ДоИзменения.СтавкаНДС
		|	ИЛИ ЕСТЬNULL(АвтомобилиКорректировки.СуммаНДС, 0) <> ДоИзменения.СуммаНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоИзменения.НомерСтроки";
		Запрос.Текст = СтрЗаменить(
			ТекстЗапроса,
			"#ИмяДокумента",
			?(ТипЗнч(ОснованиеИсправления) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей"), 
			"КорректировкаРеализацииАвтомобилей",
			"РеализацияАвтомобилей"));
		Запрос.УстановитьПараметр("ОснованиеКорректировки", ОснованиеИсправления);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Цена КАК Цена,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Сумма КАК Сумма,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаРазница КАК СуммаРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСДоИзменения,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница КАК СуммаНДСРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница КАК СуммаВсегоРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество КАК Количество,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница КАК КоличествоРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСПоДокументуРеализации КАК СуммаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоПоДокументуРеализации КАК СуммаВсегоПоДокументуРеализации,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество - КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница КАК КоличествоДо,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество КАК КоличествоПосле,
		|	0 КАК НомерСтроки,
		|	0 КАК ИсходныйНомерСтроки,
		|	"""" КАК Содержание
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И (КорректировкаРеализацииАвтомобилейАвтомобили.Количество <> КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.Сумма <> КорректировкаРеализацииАвтомобилейАвтомобили.СуммаПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС <> КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС <> КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего <> КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоПоДокументуРеализации)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	АвтомобилиСервер.ДополнитьСебестоимостьюАвтомобилей(ТаблицаТоваров, Объект.Сделка.Дата);
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"					, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"					, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"			, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"		, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"		, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"			, Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"					, Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"				, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"				, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"			, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов",
		?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"									, ЗаполнитьНомераСтрокВТаблице(ТаблицаТоваров));
	ДанныеОбъекта.Вставить("Статус"									, Статус);
	ДанныеОбъекта.Вставить("Ссылка"									, ДокументОбъект.Ссылка);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта"	, Объект.ИдентификаторГосударственногоКонтракта);
	
	Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, ДанныеИсходногоДокумента);
	
	Если Статус = 1 Тогда
		Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, ДокументОбъект);
		//@skip-check unknown-method-property
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(
		ДокументОбъект, Истина, Истина, ИскомыеСвойства);
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
		
	ДанныеОбъекта.Вставить("Руководитель"     	     , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель")
	);
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 ,
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер")
	);
	ДанныеОбъекта.Вставить("Менеджер"         		 , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер")
	);
	ДанныеОбъекта.Вставить("ЭтоПродажа", Истина);
	Возврат ДанныеОбъекта;
	
КонецФункции

// Функция получения данных для ТОРГ 12
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - данные объекта для печати ТОРГ12.
//
Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КорректировкаРеализацииАвтомобили.НомерСтроки КАК НомерСтроки,
	               |	КорректировкаРеализацииАвтомобили.Автомобиль КАК Номенклатура,
	               |	"""" КАК ХарактеристикаНоменклатуры,
	               |	КорректировкаРеализацииАвтомобили.Автомобиль.Наименование КАК ТоварНаименование,
	               |	КорректировкаРеализацииАвтомобили.Автомобиль.VIN КАК Код,
	               |	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	               |	""796"" КАК КодЕдиницаИзмерения,
	               |	1 КАК Количество,
	               |	1 КАК Коэффициент,
	               |	1 КАК КоличествоБазовое,
	               |	КорректировкаРеализацииАвтомобили.Цена КАК Цена,
	               |	КорректировкаРеализацииАвтомобили.Сумма КАК Сумма,
	               |	КорректировкаРеализацииАвтомобили.СтавкаНДС КАК СтавкаНДС,
	               |	КорректировкаРеализацииАвтомобили.СуммаНДС КАК СуммаНДС,
	               |	КорректировкаРеализацииАвтомобили.СуммаВсего КАК СуммаВсего,
	               |	КорректировкаРеализацииАвтомобили.СуммаВсего - КорректировкаРеализацииАвтомобили.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобили,
	               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |ГДЕ
	               |	КорректировкаРеализацииАвтомобили.Ссылка = &Ссылка
	               |	И ЕдиницыИзмерения.Наименование = ""шт""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КорректировкаРеализацииАвтомобили.НомерСтроки,
	               |	КорректировкаРеализацииАвтомобили.Автомобиль,
	               |	КорректировкаРеализацииАвтомобили.Автомобиль.Наименование,
	               |	КорректировкаРеализацииАвтомобили.Автомобиль.VIN,
	               |	КорректировкаРеализацииАвтомобили.Цена,
	               |	КорректировкаРеализацииАвтомобили.Сумма,
	               |	КорректировкаРеализацииАвтомобили.СтавкаНДС,
	               |	КорректировкаРеализацииАвтомобили.СуммаНДС,
	               |	КорректировкаРеализацииАвтомобили.СуммаВсего";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ПодготовленнаяТЧ = Запрос.Выполнить().Выгрузить();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ПодготовленнаяТЧ);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" , "");
	ДанныеОбъекта.Вставить("ВидДеятельностиПоОКДП"  , Объект.Организация.КодПоОКДП);

	// свойства 
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик); 

	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);	
	ДанныеОбъекта.Вставить("ДатаОтгрузки"     , ?(НЕ ЗначениеЗаполнено(ДатаОтгрузки),"""___""____________ 20___",Формат(ДатаОтгрузки,"ДЛФ=D")));
	
   	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил")); 
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО"   , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"         , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"        , ДанныеОбъекта.Плательщик.КодПоОКПО);

	Возврат ДанныеОбъекта;
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства); 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей.ДополнительныеРеквизиты КАК КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаРеализацииАвтомобилей");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
						
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла; 
	
	Если ПеренесеныВсеСвойства  Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_КорректировкаРеализацииАвтомобилей""";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
			

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств (Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты.Свойство КАК Свойство,
	|	КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей.ДополнительныеРеквизиты КАК КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И КорректировкаРеализацииАвтомобилейДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполнения в ТЧ Автомобили колонки "Количество"
//
Процедура ЗаполнитьКоличествоАвтомобилейВКорректировкахРеализации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка КАК Ссылка,
	               |	КорректировкаРеализацииАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
	               |ГДЕ
	               |	КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоПоДокументуРеализации = 0
	               |	И КорректировкаРеализацииАвтомобилейАвтомобили.Количество = 0
	               |	И КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница = 0
	               |ИТОГИ ПО
	               |	Ссылка";
	
	ВыборкаДокумента = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумента.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		
		ВыборкаСтрокДокумента = ВыборкаДокумента.Выбрать();
		
		Пока ВыборкаСтрокДокумента.Следующий() Цикл
			СтрокаАвтомобиля = ДокументОбъект.Автомобили.Найти(ВыборкаСтрокДокумента.НомерСтроки, "НомерСтроки");
			Если НЕ СтрокаАвтомобиля = Неопределено Тогда
				СтрокаАвтомобиля.КоличествоПоДокументуРеализации = 1;
				СтрокаАвтомобиля.Количество = 1;
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось перезаполнить количество в ТЧ Автомобилей документа %1'"),
					СокрЛП(Строка(ДокументОбъект.Ссылка))
					)
				);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаРеализацииАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.КорректировкаРеализацииАвтомобилей);

КонецФункции

#КонецОбласти

#Область ЭДО

// Формирует коллекцию с описанием кодов маркировок проданых товаров в разрезе номенклатуры и характеристики
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по которой ведется учет по кодам маркировки;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры с кодом;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукцииСНоменклатурой(Сам) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Номенклатура");
	Таблица.Колонки.Добавить("ХарактеристикаНоменклатуры");
	Таблица.Колонки.Добавить("КодМаркировки");
	
	Возврат Таблица;
	
КонецФункции

// Формирует коллекцию с описанием кодов маркировок проданых товаров
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * ИдентификаторТовара - Строка - идентификатор строки товаров к которой относятся коды;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукции(Сам) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ИдентификаторТовара");
	Таблица.Колонки.Добавить("КодМаркировки");
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.КорерктировкаРеализацииАвтомобилей - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Автомобили");
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьНомераСтрокВТаблице(Знач Таблица)
	
	НомераСтрок = Новый Массив();
	НомерСтроки = 1;
	
	Пока НомерСтроки <= Таблица.Количество() Цикл
		
		НомераСтрок.Добавить(НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Таблица.ЗагрузитьКолонку(НомераСтрок, "НомерСтроки");
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	ДополнительныеПараметры.ДляПроведения.Вставить("Сделка", Объект.Сделка);
	ДополнительныеПараметры.ДляПроведения.Вставить("ХозОперацияСделки",
		?(ЗначениеЗаполнено(Объект.Сделка),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сделка, "ХозОперация"),
			Справочники.ХозОперации.ПустаяСсылка()));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилей.Организация КАК Организация,
	|	КорректировкаРеализацииАвтомобилей.Ссылка КАК Ссылка,
	|	КорректировкаРеализацииАвтомобилей.Дата КАК Дата,
	|	КорректировкаРеализацииАвтомобилей.ХозОперация КАК ХозОперация,
	|	КорректировкаРеализацииАвтомобилей.ДокументОснование КАК ДокументОснование,
	|	КорректировкаРеализацииАвтомобилей.Контрагент КАК Контрагент,
	|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	КорректировкаРеализацииАвтомобилей.Сделка КАК Сделка,
	|	КорректировкаРеализацииАвтомобилей.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализацииАвтомобилей.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаРеализацииАвтомобилей.КурсДокумента КАК КурсДокумента,
	|	КорректировкаРеализацииАвтомобилей.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилей.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница), 0) КАК СуммаКорректировки,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаРазницыКорректировки
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СуммаРазницыКорректировки.СуммаКорректировки) КАК СуммаКорректировки,
	|	СуммаРазницыКорректировки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаРазницыКорректировкиИтог
	|ИЗ
	|	СуммаРазницыКорректировки КАК СуммаРазницыКорректировки
	|ГДЕ
	|	СуммаРазницыКорректировки.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммаРазницыКорректировки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл,
	|	ЕСТЬNULL(СуммаРазницыКорректировкиИтог.СуммаКорректировки, 0) КАК СуммаКорректировки
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаРазницыКорректировкиИтог КАК СуммаРазницыКорректировкиИтог
	|		ПО ДанныеДокумента.Ссылка = СуммаРазницыКорректировкиИтог.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если ДвиженияДокумента.ДляПроведения.ХозОперацияСделки = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	ВЫБОР
	|		КОГДА Задолженность.СуммаКорректировки < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * Задолженность.СуммаКорректировки КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	Задолженность.СуммаКорректировки > 0 КАК УвеличениеДолга
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеОбОплате.Следующий()
		Или ДанныеОбОплате.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОбОплате.УвеличениеДолга Тогда
		
		Сумма = ДанныеОбОплате.Сумма;
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			ДанныеОбОплате.Сумма,
			ВидДвиженияНакопления.Приход,
			Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
			ДанныеОбОплате.Сделка,,
			Истина);
		
	Иначе
		
		РасчетыСКонтрагентамиСервер.ЗачестьОплатуПоСделке(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,,
			Истина);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли