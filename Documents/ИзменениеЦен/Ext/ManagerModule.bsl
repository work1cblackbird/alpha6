
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦен);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Переоценка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ИзменениеЦен);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

Функция ЗаполнитьПоЦеновойГруппе(Объект, ЦеноваяГруппа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЦеноваяГруппа = &ЦеноваяГруппа";
	Запрос.УстановитьПараметр("ЦеноваяГруппа", ЦеноваяГруппа);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпанииПолучатель");
	ОбязательныеРеквизиты.Добавить("ДатаНачалаДействия");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ТипЦен");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;

КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
		
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ТребуетсяУстановкаДатыНачала", Истина);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеЗаполнятьДоговорВзаиморасчетов", Истина);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеПерезаполнятьПоДоговоруВзаиморасчетов", Истина);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеЗаполнятьДоговорВзаиморасчетов", Ложь) Тогда
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Пройтись по параметрам расчета и заполнить где нужно измененное ДО
	
	ЗаполнитьБазовыеЦены(Объект);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение цены".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПолучательПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
КонецПроцедуры // ПодразделениеКомпанииПолучательПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ЕдиницаИзмерения =Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(Строка.Номенклатура);
	ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Строка.ПроцентНаценки = ?(Строка.ЦенаБазовая = 0, 0, ((Строка.Цена-Строка.ЦенаБазовая)/Строка.ЦенаБазовая)*100);
	Строка.СуммаНаценки   = Строка.Цена-Строка.ЦенаБазовая;
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ИзменениеЦен",
		"ПФ_MXL_ИзменениеЦен",
		НСтр("ru = 'Изменение цен'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИзменениеЦен") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ИзменениеЦен",
															НСтр("ru = 'Изменение цен'"),
															ПечатьИзменениеЦен(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "ИзменениеЦен"
//
Функция ПечатьИзменениеЦен(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеЦен_ИзменениеЦен";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Для Каждого ТекущийТипЦен Из Документ.ПараметрыРасчета Цикл
			Если ТекущийТипЦен.ТипЦен.Рассчитывается Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПервыйДокумент Тогда // Новый документ должен быть на отдельной странице.
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			ВалютаУчета = ТекущийТипЦен.ТипЦен.ВВалютеУчета;
			ВалютаТипаЦены = ТекущийТипЦен.ТипЦен.ВалютаЦены;
			АлгоритмПолученияПоЕдинице =
				ТекущийТипЦен.ТипЦен.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИзменениеЦен.ПФ_MXL_ИзменениеЦен");
			
			ОбластьТовар = Макет.Область("Товар");
			
			// Проверим нужно ли выводить код в печатных формах.
			ЕстьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах");
			Если НЕ ЕстьКод Тогда
				ОбластьКод = Макет.Область("Код");
				ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКод.ШиринаКолонки;
				Макет.УдалитьОбласть(ОбластьКод,ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			
			// Теперь запишем параметры шапки.
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			Если ЕстьКод Тогда
				КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
				ОбластьШапкаТаблицы.Параметры.ИмяКолонкиКод = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
			КонецЕсли;
			
			ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
			ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
			ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
			
			// Вывод заголовка документа.
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			ОбластьЗаголовок.Параметры.Заполнить(Документ);
			ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
			ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
			ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
			ДополнительныеПараметры.НаДату = Документ.Дата;
			ОбластьЗаголовок.Параметры.ПредставлениеОрганизации =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
			
			ОбластьЗаголовок.Параметры.ПредставлениеТипаЦен = ТекущийТипЦен.ТипЦен;
			ОбластьЗаголовок.
			Параметры.
			ПодразделениеКомпанииПолучательПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Документ.ПодразделениеКомпанииПолучатель, Документ.Дата);
			
			ОбластьЗаголовок.Параметры.ВалютаДокумента = ?(ВалютаУчета, НСтр("ru = 'В валюте товара'"), ВалютаТипаЦены);
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			// Готовим шапку
			НомерСтраницы = 2;
			НомерСтраницыПред = 2;
			СтруктураИтоговПоСтранице = Новый Структура();
			ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
			
			НомерСтроки = 1;
			// Готовим области строки.
			
			МоментВремени = ?(НЕ ЗначениеЗаполнено(Документ.ДатаНачалаДействия), Документ.Ссылка.МоментВремени(),
				Новый МоментВремени(Документ.ДатаНачалаДействия, Документ.Ссылка));
			МоментВремени = Новый Граница(МоментВремени, ВидГраницы.Исключая);
			
			ВыборкаТабличнойЧасти = Документ.Товары.НайтиСтроки(Новый Структура("ТипЦен", ТекущийТипЦен.ТипЦен));
			Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
				СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
				СтруктураСтроки.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтруктураСтроки);
				СтруктураСтроки.Цена = Формат(СтрокаТЧ.Цена, ФорматВыводаСуммы);
				// Найдем старую цену
				
				ВалютаЦеныНоменклатуры = ?(ВалютаУчета, СтрокаТЧ.Номенклатура.ВалютаУчета, ВалютаТипаЦены);
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЦеныНоменклатуры, Документ.Дата);
				КурсВалюты     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
				
				Если АлгоритмПолученияПоЕдинице Тогда
					ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
				Иначе
					ЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(СтрокаТЧ.Номенклатура);
				КонецЕсли;
				
				УстановкаЦенКомпании = (Документ.ХозОперация=Справочники.ХозОперации.УстановкаЦенКомпании);
				
				Контрагент = ?(УстановкаЦенКомпании ИЛИ Документ.Контрагент.Пустая(),
					Справочники.Контрагенты.ПустаяСсылка(), Документ.Контрагент);
				
				ДоговорВзаиморасчетов = ?(УстановкаЦенКомпании ИЛИ Документ.ДоговорВзаиморасчетов.Пустая(),
					Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка(), Документ.ДоговорВзаиморасчетов);
				
				ЦенаСтарая = ЦенообразованиеСервер.ПолучитьЦену(СтрокаТЧ.ТипЦен, СтрокаТЧ.Номенклатура, МоментВремени,
					Контрагент, ВалютаЦеныНоменклатуры, КурсВалюты, СтрокаТЧ.ХарактеристикаНоменклатуры, ЕдиницаИзмерения,
					Документ.ПодразделениеКомпанииПолучатель, Ложь, ДоговорВзаиморасчетов);
				
				СтруктураСтроки.Вставить("ЦенаСтарая", Формат(ЦенаСтарая, ФорматВыводаСуммы));
				СтруктураСтроки.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
				ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
				
				// Доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
					мсвДопОбластиПодвала);
				
				// Инициализация итогов по странице.
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура();
					НомерСтраницыПред   = НомерСтраницы;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
				// Добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
			КонецЦикла;
			
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Итоги
			ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'")
				+ Символы.НПП + ВыборкаТабличнойЧасти.Количество();
			ОбластьПодвал.Параметры.Заполнить(
				УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредседательКомиссии", "ПредседательКомиссии"));
			ОбластьПодвал.Параметры.Заполнить(
				УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер"));
			
			УправлениеПечатьюПлатформа.
			ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
			
			// Отметим конец области документа.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьИзменениеЦен()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзменениеЦенТовары.Номенклатура КАК Номенклатура,
	|	ИзменениеЦенТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ИзменениеЦенТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ИзменениеЦенТовары.НомерСтроки) КАК Порядок,
	|	СУММА(1) КАК Количество,
	|	МАКСИМУМ(ИзменениеЦенТовары.Цена) КАК Цена
	|ИЗ
	|	Документ.ИзменениеЦен.Товары КАК ИзменениеЦенТовары
	|ГДЕ
	|	ИзменениеЦенТовары.Ссылка В(&МассивДокументов)
	|	И ВЫБОР
	|			КОГДА (ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
	|					ИЛИ ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2)
	|					И ИзменениеЦенТовары.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзменениеЦенТовары.Номенклатура,
	|	ИзменениеЦенТовары.ХарактеристикаНоменклатуры,
	|	ИзменениеЦенТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзменениеЦен.ТипЦен КАК ТипЦен
	|ИЗ
	|	Документ.ИзменениеЦен.ПараметрыРасчета КАК ИзменениеЦен
	|ГДЕ
	|	ИзменениеЦен.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивТиповЦен = ТаблицаРеквизитыДокументов.ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьСклад",       Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1, МассивТиповЦен[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");

	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзменениеЦенТовары.Номенклатура КАК Номенклатура,
	|	ИзменениеЦенТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ИзменениеЦенТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ИзменениеЦенТовары.НомерСтроки) КАК Порядок,
	|	СУММА(1) КАК Количество,
	|	МАКСИМУМ(ИзменениеЦенТовары.Цена) КАК Цена
	|ИЗ
	|	Документ.ИзменениеЦен.Товары КАК ИзменениеЦенТовары
	|ГДЕ
	|	ИзменениеЦенТовары.Ссылка В(&МассивДокументов)
	|	И ВЫБОР
	|			КОГДА (ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
	|					ИЛИ ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2)
	|					И ИзменениеЦенТовары.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзменениеЦенТовары.Номенклатура,
	|	ИзменениеЦенТовары.ХарактеристикаНоменклатуры,
	|	ИзменениеЦенТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзменениеЦен.ТипЦен КАК ТипЦен
	|ИЗ
	|	Документ.ИзменениеЦен.ПараметрыРасчета КАК ИзменениеЦен
	|ГДЕ
	|	ИзменениеЦен.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивТиповЦен = ТаблицаРеквизитыДокументов.ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьСклад",       Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1, МассивТиповЦен[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");

	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСортировкиОбъекта

Процедура ДобавитьКомандыСортировкиТабличнойЧасти(Команды, НастройкиФормы) Экспорт

	Команда 				= СортировкаТабличнойЧастиДокумента.ДобавитьКоманду(Команды);
	Команда.Представление	= НСтр("ru = 'По кат. номеру (возрастание)'");
	Команда.Идентификатор	= "ЦеныТоваровАртикулПоВозрастанию";
	Команда.Порядок			= 1;
	Команда.Подменю			= "ЦеныТоваровПодменюСортировки";
	Команда.Картинка		= БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "ЦеныТоваров";
	
	Команда 				= СортировкаТабличнойЧастиДокумента.ДобавитьКоманду(Команды);
	Команда.Представление	= НСтр("ru = 'По кат. номеру (убывание)'");
	Команда.Идентификатор	= "ЦеныТоваровАртикулПоУбыванию";
	Команда.Порядок			= 2;
	Команда.Подменю			= "ЦеныТоваровПодменюСортировки";
	Команда.Картинка		= БиблиотекаКартинок.СортироватьСтрокиПоУбыванию;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "ЦеныТоваров";
	Команда.ДополнительныеПараметры.НаправлениеСортировки = "УБЫВ";

КонецПроцедуры

Процедура ЦеныТоваровАртикулПоВозрастанию(Ссылка, Обработчик) Экспорт
	
	СортировкаТабличнойЧастиДокумента.СортироватьТабличнуюЧасть(Ссылка, Обработчик);
	
КонецПроцедуры

Процедура ЦеныТоваровАртикулПоУбыванию(Ссылка, Обработчик) Экспорт
	
	СортировкаТабличнойЧастиДокумента.СортироватьТабличнуюЧасть(Ссылка, Обработчик);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	//// Устанавливаем параметры выполнения операции
	//ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	//
	//// Вызываем общий обработчик события
	//ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	//
	//ВалютаСтарая = Объект.ВалютаДокумента;
	//КурсСтарый   = Объект.КурсДокумента;
	//
	//Если НЕ Объект.ТипЦен.ВВалютеУчета Тогда
	//	ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(Объект.ТипЦен, Неопределено);
	//	КурсДокумента   = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	//КонецЕсли;
	//
	//ИзмениласьВалюта = (ВалютаСтарая<>ВалютаДокумента);
	//
	//// Если новый тип цен не поддерживает учет цен по характеристиками, то очистим данный реквизит в ТЧ.
	//ОчищатьХарактеристикуНоменклатуры = (Объект.ТипЦен.АлгоритмПолученияЦены<>Перечисления.АлгоритмПолученияЦены.ПоХарактеристике);
	//
	//ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	//
	//Для Каждого СтрокаТоваров Из Объект.Товары Цикл
	//	
	//	Если ОчищатьХарактеристикуНоменклатуры Тогда
	//		СтрокаТоваров.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
	//	КонецЕсли;
	//	
	//	//ЗаполнитьБазовуюЦену(Объект, СтрокаТоваров);
	//	
	//	Если СтрокаТоваров.Цена = 0 Тогда
	//		// Если цена была равной нулю, то пытаемся автоматически рассчитать цену от базовой цены.
	//		// Получим базовую цену.
	//		//ЗаполнитьБазовуюЦену(Объект, СтрокаТоваров);
	//		// Рассчитываем процент наценки.
	//		Если Объект.ПроцентНаценкиИзНоменклатуры И СтрокаТоваров.Номенклатура.ПроцентНаценки<>0 Тогда
	//			СтрокаТоваров.ПроцентНаценки = СтрокаТоваров.Номенклатура.ПроцентНаценки;
	//		ИначеЕсли (НЕ Объект.ПроцентНаценкиИзНоменклатуры) И Объект.ПроцентНаценки<>0 Тогда
	//			СтрокаТоваров.ПроцентНаценки = Объект.ПроцентНаценки;
	//		Иначе
	//			СтрокаТоваров.ПроцентНаценки = Объект.БазовыйТипЦен.ПроцентСкидкиНаценки;
	//		КонецЕсли;
	//		ТоварыПроцентНаценкиПриИзменении(Объект, СтрокаТоваров);
	//	Иначе
	//		Если ИзмениласьВалюта Тогда
	//			СтрокаТоваров.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.Цена,ВалютаСтарая,КурсСтарый,ВалютаДокумента,КурсДокумента);
	//			//ЗаполнитьБазовуюЦену(Объект, СтрокаТоваров);
	//			//Установка процента наценки
	//			Если СтрокаТоваров.ЦенаБазовая=0 Тогда
	//				СтрокаТоваров.ПроцентНаценки=0;
	//			Иначе
	//				СтрокаТоваров.ПроцентНаценки=((СтрокаТоваров.Цена-СтрокаТоваров.ЦенаБазовая)/СтрокаТоваров.ЦенаБазовая)*100;
	//			КонецЕсли;
	//			ТоварыПроцентНаценкиПриИзменении(Объект, СтрокаТоваров);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Округлять до".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОкруглятьДоПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры // ОкруглятьДоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Расчет цен от".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасчетЦенОтПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ЗаполнитьБазовыеЦены(Объект);
	
КонецПроцедуры // РасчетЦенОтПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки из номенклатуры".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроцентНаценкиИзНоменклатурыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры // ПроцентНаценкиИзНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Поставщик".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПоставщикПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ЗаполнитьБазовыеЦены(Объект);
	
КонецПроцедуры // ПоставщикПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Прайс-лист контрагента".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПрайсЛистКонтрагентаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ЗаполнитьБазовыеЦены(Объект);
	
КонецПроцедуры // ПрайсЛистКонтрагентаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Базовое подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура БазовоеПодразделениеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ЗаполнитьБазовыеЦены(Объект);
	
КонецПроцедуры // БазовоеПодразделениеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	//Строка.Цена         = Строка.ЦенаБазовая + ((Строка.ЦенаБазовая * Строка.ПроцентНаценки)/100);
	//Строка.СуммаНаценки = Строка.Цена - Строка.ЦенаБазовая;
	//
	////Округляем
	//НоваяЦена           = Строка.Цена;
	//ДельтаОкругления    = ?(Объект.ОкруглятьДо = 0, 0, НоваяЦена/Объект.ОкруглятьДо);
	//ДельтаОкругленияЦел = Цел(ДельтаОкругления);
	//
	//Если ДельтаОкругления<>ДельтаОкругленияЦел Тогда
	//	НоваяЦена = (ДельтаОкругленияЦел+1)*Объект.ОкруглятьДо;
	//КонецЕсли;
	//
	//Если НоваяЦена <> Строка.Цена Тогда
	//	Строка.Цена = НоваяЦена;
	//КонецЕсли;
	
КонецПроцедуры // ТоварыПроцентНаценкиПриИзменении()

Процедура УстановитьЦенуНоменклатурыПрайсЛиста(Объект, ТекущийТипЦен, СтрокаТовара) Экспорт
	
	// Сформируем данные для получения цены.
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ПрайсЛист",     Объект.ПрайсЛистКонтрагента);
	СтруктураДанных.Вставить("Номенклатура",  СтрокаТовара.Номенклатура);
	СтруктураДанных.Вставить("Цена",          0);
	ТегПозиции = ?(ЕстьРеквизит(СтрокаТовара, "ТегПозиции"), СтрокаТовара.ТегПозиции, "");
	СтруктураДанных.Вставить("ТегПозиции",    ТегПозиции);
	Производитель = ?(ЕстьРеквизит(СтрокаТовара, "Производитель"), СтрокаТовара.Производитель, Неопределено);
	СтруктураДанных.Вставить("Производитель", Производитель);
	
	Если НЕ ТекущийТипЦен.ТипЦен.ВВалютеУчета Тогда
		Валюта = ТекущийТипЦен.ТипЦен.ВалютаЦены;
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Объект.Дата);
		КурсВалюты     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		Валюта = СтрокаТовара.Номенклатура.ВалютаУчета;
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Объект.Дата);
		КурсВалюты     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ЦенаВВалютеДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		СтрокаТовара.Цена,
		СтрокаТовара.Валюта,
		Объект.Дата,
		Валюта,
		КурсВалюты
	);
	
	ДанныеРасчетаЦены = Новый Массив;
	
	СтруктураДанных.Цена = ЦенаВВалютеДокумента;
	
	// Запишем цены для товарной строки.
	
	ПараметрыОтбора = Новый Структура("ТипЦен,Номенклатура", ТекущийТипЦен.ТипЦен, СтрокаТовара.Номенклатура);
	НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеРасчетаЦены.Добавить(СтруктураДанных);
		ДанныеЦены = ЦенообразованиеСервер.РассчитатьЦеныПрайсЛиста(
			ДанныеРасчетаЦены,
			ТекущийТипЦен.ТипЦен,
			Объект.ПодразделениеКомпанииПолучатель,
			Объект.Контрагент,
			Объект.Дата
		);
		НайденныеСтроки[0].ЦенаБазовая = ДанныеЦены[0].ЦенаПокупки;
		Если ДанныеЦены[0].ЦенаПродажи = 0 Тогда
			НайденныеСтроки[0].Цена = ДанныеЦены[0].ЦенаПокупки;
		Иначе
			НайденныеСтроки[0].Цена = ДанныеЦены[0].ЦенаПродажи;
		КонецЕсли;
		
		ТоварыЦенаПриИзменении(Объект, НайденныеСтроки[0]);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦенуНоменклатуры

// Процедура заполнения базовых цен по прайс-листу контрагентов
//
Процедура ЗаполнитьБазовыеЦеныНоменклатурыПоПрайсЛисту(Объект, ТаблицаНоменклатуры)
	
	Если ТаблицаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим цены товаров
	Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
		РасчетПоПрайсЛисту = (ТекущийТипЦен.РасчетЦенОт = 4);
		
		Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
			
			Если РасчетПоПрайсЛисту Тогда
				
				УстановитьЦенуНоменклатурыПрайсЛиста(Объект, ТекущийТипЦен, ТекущаяСтрока);
				
			Иначе
				
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ТипЦен,Номенклатура", ТекущийТипЦен.ТипЦен, ТекущаяСтрока.Номенклатура));
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТоваров = НайденныеСтроки[0];
				БазоваяЦена(Объект, НайденныеСтроки[0], ТекущийТипЦен.ТипЦен, ТекущийТипЦен.РасчетЦенот);
				Если СтрокаТоваров.Цена <> 0 Тогда
					Если СтрокаТоваров.ЦенаБазовая = 0 Тогда
						СтрокаТоваров.ПроцентНаценки = 0;
						СтрокаТоваров.СуммаНаценки = 0;
					Иначе
						СтрокаТоваров.ПроцентНаценки = ((СтрокаТоваров.Цена-СтрокаТоваров.ЦенаБазовая)/СтрокаТоваров.ЦенаБазовая)*100;
						СтрокаТоваров.СуммаНаценки = СтрокаТоваров.Цена-СтрокаТоваров.ЦенаБазовая;
					КонецЕсли;
				Иначе
					// Если цена была равной нулю, то пытаемся автоматически рассчитать цену от базовой цены.
					// Рассчитываем процент наценки.
					Если ТекущийТипЦен.ПроцентНаценкиИзНоменклатуры И СтрокаТоваров.Номенклатура.ПроцентНаценки<>0 Тогда
						СтрокаТоваров.ПроцентНаценки = СтрокаТоваров.Номенклатура.ПроцентНаценки;
					ИначеЕсли (НЕ ТекущийТипЦен.ПроцентНаценкиИзНоменклатуры) И ТекущийТипЦен.ПроцентНаценки<>0 Тогда
						СтрокаТоваров.ПроцентНаценки = ТекущийТипЦен.ПроцентНаценки;
					Иначе
						СтрокаТоваров.ПроцентНаценки = Объект.БазовыйТипЦен.ПроцентСкидкиНаценки;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьБазовыеЦеныНоменклатурыПоПрайсЛисту()

// Устарела. Не используется
// Заполнение из прайс-листа контрагента
//
// Параметры;
//  Объект        						- ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ЗаполнитьНоменклатуройПоПрайсЛисту 	- Булево - признак заполнения по прайсу.
//
Функция ЗаполнениеПоПрайсЛистуКонтрагента(Объект, ПрайсЛистКонтрагента, ЗаполнитьНоменклатуройПоПрайсЛисту, СписокНоменклатуры = Неопределено, ТолькоТаблица = Ложь) Экспорт
	
	Если (ПрайсЛистКонтрагента.ХранитьДанныеЛокально
		ИЛИ ПрайсЛистКонтрагента.ФайлИсточникДанных
		ИЛИ ПрайсЛистКонтрагента.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.ВебПрайсЛист)
		И НЕ ПрайсЛистКонтрагента.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.КаталогПредложений Тогда
		// Проверим есть ли загруженный ПЛ
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрайсЛистыКонтрагентов.ПрайсЛист
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист";
		Запрос.УстановитьПараметр("ПрайсЛист",ПрайсЛистКонтрагента);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Возврат Неопределено;         
		КонецЕсли;
		
		// Грузим из регистра
		Запрос=Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Номенклатура,
		|	ПрайсЛистыКонтрагентов.Цена КАК Цена,
		|	ПрайсЛистыКонтрагентов.Валюта КАК Валюта,
		|	ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
		|	ПрайсЛистыКонтрагентов.ТегПозиции КАК ТегПозиции,
		|	ПрайсЛистыКонтрагентов.Производитель КАК Производитель
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Спр
		|		ПО ПрайсЛистыКонтрагентов.АртикулДляПоиска = Спр.АртикулДляПоиска
		|			И ПрайсЛистыКонтрагентов.Производитель = Спр.Производитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи КАК НедоступныеЗаписи
		|		ПО ПрайсЛистыКонтрагентов.ПрайсЛист = НедоступныеЗаписи.ПрайсЛист
		|			И ПрайсЛистыКонтрагентов.ДатаЗаписи = НедоступныеЗаписи.ДатаЗаписи
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист
		|	И ПрайсЛистыКонтрагентов.АртикулДляПоиска <> """"
		|	И НедоступныеЗаписи.ПрайсЛист ЕСТЬ NULL 
		|	"+?(ЗаполнитьНоменклатуройПоПрайсЛисту, "", "И Спр.Ссылка В (&Товары)")+"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура),
		|	ПрайсЛистыКонтрагентов.Цена,
		|	ПрайсЛистыКонтрагентов.Валюта,
		|	ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
		|	ПрайсЛистыКонтрагентов.ТегПозиции КАК ТегПозиции,
		|	ПрайсЛистыКонтрагентов.Производитель КАК Производитель
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|		ПО (ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика = (ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32))))
		|			И (ПрайсЛистыКонтрагентов.ПрайсЛист = ПравилаЗагрузки.ПрайсЛист)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи КАК НедоступныеЗаписи
		|		ПО (ПрайсЛистыКонтрагентов.ПрайсЛист = НедоступныеЗаписи.ПрайсЛист)
		|			И (ПрайсЛистыКонтрагентов.ДатаЗаписи = НедоступныеЗаписи.ДатаЗаписи)
		|ГДЕ
		|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
		|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
		|	И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = ""Номенклатура""
		|	И ПравилаЗагрузки.Значение ССЫЛКА Справочник.Номенклатура
		|	"+?(ЗаполнитьНоменклатуройПоПрайсЛисту, "", "И ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура).Ссылка В (&Товары)")+"
		|	И НедоступныеЗаписи.ПрайсЛист ЕСТЬ NULL 
		|";
		
		Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
		Если Не ЗаполнитьНоменклатуройПоПрайсЛисту Тогда
			Запрос.УстановитьПараметр("Товары", СписокНоменклатуры);
		КонецЕсли;
		
		ТЗПрайсЛиста = Запрос.Выполнить().Выгрузить();
		Если ТолькоТаблица  Тогда
			Возврат ТЗПрайсЛиста;
		КонецЕсли;
		
		Если ЗаполнитьНоменклатуройПоПрайсЛисту Тогда
			// Заполним таблицу товаров 
			Объект.Товары.Очистить();
			
			Для Каждого ТекущаяСтрока Из ТЗПрайсЛиста Цикл
				
				Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
					ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
					НоваяСтрока.ТипЦен       = ТекущийТипЦен.ТипЦен;
				КонецЦикла;
			КонецЦикла;
			
			ЗаполнитьБазовыеЦеныНоменклатурыПоПрайсЛисту(Объект, ТЗПрайсЛиста);
		Иначе
			
			Возврат ТЗПрайсЛиста;
			
		КонецЕсли;
		
	Иначе
		Возврат ЗаполнитьБазовыеЦеныПоПрайсЛисту(Объект, ПрайсЛистКонтрагента, ЗаполнитьНоменклатуройПоПрайсЛисту);
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область БазовыеЦены

// Заполнения базового типа цен в зависимости от источника базовых цен
//
Процедура ЗаполнитьБазовыеЦены(Объект) Экспорт
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если
		Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("РасчетЦенОт", 4)).Количество() > 0
		И ЗначениеЗаполнено(ЗначениеЗаполнено(Объект.ПрайсЛистКонтрагента))
	Тогда
		// От прайс-листа контрагента
		// Будем заполнять по собственному алгоритму
		// Сначала очистим все базовые цены и пересчитаем цену при необходимости
		// Затем установим цены по прайс-листу
		
		КопияТаблицыТоваров = Объект.Товары.Выгрузить();
		КопияТаблицыТоваров.Свернуть("Номенклатура");
		
		ТаблицаНоменклатуры = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(
			Объект.ПрайсЛистКонтрагента,
			КопияТаблицыТоваров.ВыгрузитьКолонку("Номенклатура")
		);
		
		ЗаполнитьБазовыеЦеныНоменклатурыПоПрайсЛисту(Объект, ТаблицаНоменклатуры);
		
	Иначе
		 
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			
			// Найдем тип цен с параметрами расчета
			НайденныеСтроки = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", СтрокаТоваров.ТипЦен));
			
			БазоваяЦена(Объект, СтрокаТоваров, НайденныеСтроки[0].ТипЦен, НайденныеСтроки[0].РасчетЦенОт);
			Если СтрокаТоваров.Цена <> 0 Тогда
				Если СтрокаТоваров.ЦенаБазовая = 0 Тогда
					СтрокаТоваров.ПроцентНаценки = 0;
					СтрокаТоваров.СуммаНаценки = 0;
				Иначе
					СтрокаТоваров.ПроцентНаценки = ((СтрокаТоваров.Цена-СтрокаТоваров.ЦенаБазовая)/СтрокаТоваров.ЦенаБазовая)*100;
					СтрокаТоваров.СуммаНаценки = СтрокаТоваров.Цена-СтрокаТоваров.ЦенаБазовая;
				КонецЕсли;
			Иначе
				// Если цена была равной нулю, то пытаемся автоматически рассчитать цену от базовой цены.
				// Рассчитываем процент наценки.
				Если НайденныеСтроки[0].ПроцентНаценкиИзНоменклатуры И СтрокаТоваров.Номенклатура.ПроцентНаценки<>0 Тогда
					СтрокаТоваров.ПроцентНаценки = СтрокаТоваров.Номенклатура.ПроцентНаценки;
				ИначеЕсли (НЕ НайденныеСтроки[0].ПроцентНаценкиИзНоменклатуры) И НайденныеСтроки[0].ПроцентНаценки<>0 Тогда
					СтрокаТоваров.ПроцентНаценки = НайденныеСтроки[0].ПроцентНаценки;
				Иначе
					СтрокаТоваров.ПроцентНаценки = Объект.БазовыйТипЦен.ПроцентСкидкиНаценки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьБазовыеЦены()

Функция БазоваяЦена(Сам, ЭлементТоваров, ТипЦен, ВидОснованияРасчета) Экспорт
	
	Если Не ЗначениеЗаполнено(Сам.ДатаНачалаДействия) Тогда

		ДатаНачалаДействия = Сам.Дата;

	Иначе
	 	
	 	ДатаНачалаДействия = Сам.ДатаНачалаДействия;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сам.Ссылка) Тогда
		
		Момент = Новый Граница(Новый МоментВремени(ДатаНачалаДействия, Сам.Ссылка), ВидГраницы.Исключая);
		
	Иначе
		
		Момент = Новый МоментВремени(КонецДня(ДатаНачалаДействия));
		
	КонецЕсли;
	
	Если ЕстьРеквизит(ЭлементТоваров, "Валюта") Тогда
		
		ВалютаЦены = ЭлементТоваров.Валюта;
		
	Иначе
		
		РеквизитыТипаЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТипЦен, "ВВалютеУчета,ВалютаЦены");
		
		Если Не РеквизитыТипаЦен.ВВалютеУчета Тогда
			
			ВалютаЦены = РеквизитыТипаЦен.ВалютаЦены;
			
		Иначе
			
			ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементТоваров.Номенклатура, "ВалютаУчета");
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЦены, Сам.Дата);
	КурсВалюты     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	УстановкаЦенКонтрагента = (Сам.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента);
	Результат = 0;
	
	Если ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().БазовыйТипЦен Тогда
		
		Результат = ЦенообразованиеСервер.ПолучитьЦену(
			Сам.БазовыйТипЦен,
			ЭлементТоваров.Номенклатура,
			Момент,
			?(УстановкаЦенКонтрагента, Сам.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
			ВалютаЦены,
			КурсВалюты,
			ЭлементТоваров.ХарактеристикаНоменклатуры,
			ЭлементТоваров.ЕдиницаИзмерения,
			Сам.ПодразделениеКомпанииПолучатель,
			Ложь,
			?(УстановкаЦенКонтрагента, Сам.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка())
		);
		
	ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().ДокументОснование Тогда 
		
		Попытка
		
			ЗначенияРеквизитовОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сам.ДокументОснование,
				"Товары,ВалютаДокумента,КурсДокумента");
			УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры", ЭлементТоваров.Номенклатура,
				ЭлементТоваров.ХарактеристикаНоменклатуры);
			НайденныеТовары = ЗначенияРеквизитовОснования
				.Товары
				.Выгрузить()
				.НайтиСтроки(УсловиеПоиска);
				
			Если НайденныеТовары.Количество() > 0 Тогда
				
				Результат = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					НайденныеТовары[0].Цена,
					ЗначенияРеквизитовОснования.ВалютаДокумента,
					ЗначенияРеквизитовОснования.КурсДокумента,
					ВалютаЦены,
					КурсВалюты
				);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Расчет базовой цены по документу-основанию'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().ЦенаПоставщика Тогда 
		
		Результат = ЦенообразованиеСервер.ПолучитьЦену(
			ТипЦен,
			ЭлементТоваров.Номенклатура,
			Момент,
			Сам.Поставщик,
			ВалютаЦены,
			КурсВалюты,
			ЭлементТоваров.ХарактеристикаНоменклатуры,
			ЭлементТоваров.ЕдиницаИзмерения,
			Сам.ПодразделениеКомпанииПолучатель,
			Ложь
		);
		
	ИначеЕсли ЦенообразованиеКлиентСервер.ЭтоВидРасчетаОтСебестоимости(ВидОснованияРасчета) Тогда 
	
		Если ТипЗнч(Момент) = Тип("Граница") Тогда
			Момент = Новый Граница(Сам.Ссылка.МоментВремени(), ВидГраницы.Включая);
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
			|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ПартииТоваровКомпанииОстатки.СуммаУпрОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток
			|	КОНЕЦ КАК СебестоимостьУпр,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ПартииТоваровКомпанииОстатки.СуммаОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток
			|	КОНЕЦ КАК СебестоимостьРегл,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ПартииТоваровКомпанииОстатки.СуммаБезНДСУпрОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток
			|	КОНЕЦ КАК СебестоимостьУпрБезНДС,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ПартииТоваровКомпанииОстатки.СуммаБезНДСОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток
			|	КОНЕЦ КАК СебестоимостьРеглБезНДС
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
			|			&НаМомент,
			|			Номенклатура = &Номенклатура
			|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			|				И (&СкладКомпании = ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка)
			|					ИЛИ СкладКомпании = &СкладКомпании)) КАК ПартииТоваровКомпанииОстатки"
		);
		Запрос.УстановитьПараметр("НаМомент", Момент);
		Запрос.УстановитьПараметр("Номенклатура", ЭлементТоваров.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ЭлементТоваров.ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("СкладКомпании", Сам.СкладКомпании);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Если ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().СебестоимостьРег Тогда
				
				Себестоимость       = РезультатЗапроса.Выгрузить()[0]["СебестоимостьРегл"];
				ВалютаСебестоимости = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
				
			ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().СебестоимостьУпр Тогда 
				 
				Себестоимость       = РезультатЗапроса.Выгрузить()[0]["СебестоимостьУпр"];
				ВалютаСебестоимости = Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
				
			ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().СебестоимостьУпрБезНДС Тогда
				
				Себестоимость       = РезультатЗапроса.Выгрузить()[0]["СебестоимостьУпрБезНДС"];
				ВалютаСебестоимости = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
				
			Иначе				
				
				Себестоимость       = РезультатЗапроса.Выгрузить()[0]["СебестоимостьРеглБезНДС"];
				ВалютаСебестоимости = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
			КонецЕсли;
			
			Результат = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Себестоимость,
				ВалютаСебестоимости,
				Сам.Дата,
				ВалютаЦены,
				КурсВалюты
			);
			
		КонецЕсли;
		
	ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().СебестоимостьПартии Тогда
		
		Если ТипЗнч(Момент) = Тип("Граница") Тогда
			Момент = Новый Граница(Сам.Ссылка.МоментВремени(), ВидГраницы.Включая);
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
			|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток = 0
			|		ТОГДА 0
			|		ИНАЧЕ ПартииТоваровКомпанииОстатки.СуммаУпрОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток
			|	КОНЕЦ КАК СебестоимостьУпр,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток = 0
			|		ТОГДА 0
			|		ИНАЧЕ ПартииТоваровКомпанииОстатки.СуммаОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток
			|	КОНЕЦ КАК СебестоимостьРегл
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
			|			&НаМомент,
			|			Номенклатура = &Номенклатура
			|			И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			|			И Партия = &Партия
			|		) КАК ПартииТоваровКомпанииОстатки"
		);
		Запрос.УстановитьПараметр("НаМомент", Момент);
		Запрос.УстановитьПараметр("Номенклатура", ЭлементТоваров.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ЭлементТоваров.ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("Партия", Сам.Партия);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Если ВалютаЦены = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
				
				Результат = РезультатЗапроса.Выгрузить()[0]["СебестоимостьРегл"];
				
			Иначе
				
				Результат = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					РезультатЗапроса.Выгрузить()[0]["СебестоимостьУпр"],
					Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
					Сам.Дата,
					ВалютаЦены,
					КурсВалюты
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().ПрайсЛистПоставщика Тогда 
		
		ТаблицаЦен = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(
			Сам.ПрайсЛистКонтрагента,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементТоваров.Номенклатура)
		);
		
		Если ТаблицаЦен.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		ДанныеРасчетаЦены = Новый Массив;
		СтруктураДанных = Новый Структура;
		СтрокаПрайсЛиста = ТаблицаЦен[0];
		СтруктураДанных.Вставить("ПрайсЛист",     Сам.ПрайсЛистКонтрагента);
		СтруктураДанных.Вставить("Номенклатура",  ЭлементТоваров.Номенклатура);
		СтруктураДанных.Вставить("Цена",          СтрокаПрайсЛиста.Цена);
		СтруктураДанных.Вставить("ТегПозиции",    СтрокаПрайсЛиста.ТегПозиции);
		СтруктураДанных.Вставить("Производитель", СтрокаПрайсЛиста.Производитель);
		ДанныеРасчетаЦены.Добавить(СтруктураДанных);
		
		ТаблицаЦен = ЦенообразованиеСервер.РассчитатьЦеныПрайсЛиста(
			ДанныеРасчетаЦены,
			ТипЦен,
			Сам.ПодразделениеКомпанииПолучатель,
			Сам.Контрагент,
			Сам.Дата
		);
		
		Если ТаблицаЦен.Количество() = 0 Тогда
			Результат = 0;
		Иначе
			СтрокаЦен = ТаблицаЦен[0];
			Если Сам.ХозОперация = Справочники.ХозОперации.УстановкаЦенКомпании Тогда
				Результат = СтрокаЦен.ЦенаПродажи;
			Иначе
				Если Сам.Контрагент = Сам.ПрайсЛистКонтрагента.Владелец Тогда
					Результат = СтрокаЦен.ЦенаПокупки;
				Иначе
					Результат = СтрокаЦен.ЦенаПродажи;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Результат = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Результат,
				Сам.ПрайсЛистКонтрагента.Валюта,
				Сам.Дата,
				ВалютаЦены,
				КурсВалюты
			);
			
	ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().Подразделение Тогда
		
		Результат = ЦенообразованиеСервер.ПолучитьЦену(
			ТипЦен,
			ЭлементТоваров.Номенклатура,
			Момент,
			?(УстановкаЦенКонтрагента, Сам.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
			ВалютаЦены,
			КурсВалюты,
			ЭлементТоваров.ХарактеристикаНоменклатуры,
			ЭлементТоваров.ЕдиницаИзмерения,
			Сам.БазовоеПодразделение,
			Ложь,
			?(УстановкаЦенКонтрагента, Сам.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка())
		);
		
	ИначеЕсли ВидОснованияРасчета = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен().ЕдиницаИзмерения Тогда
		
		Результат = ЦенообразованиеСервер.ПолучитьЦену(
			ТипЦен,
			ЭлементТоваров.Номенклатура,
			Момент,
			?(УстановкаЦенКонтрагента, Сам.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
			ВалютаЦены,
			КурсВалюты, 
			ЭлементТоваров.ХарактеристикаНоменклатуры,
			ЭлементТоваров.БазоваяЕдиницаИзмерения,
			Сам.ПодразделениеКомпанииПолучатель,
			Ложь,
			?(УстановкаЦенКонтрагента, Сам.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка())
		);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура заполнения базовых цен по прайс-листу контрагента
//
// Параметры;
//  Объект        			- ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ЗагрузитьНоменклатуру 	- Булево - признак загрузки номенклатуры.
//
Функция ЗаполнитьБазовыеЦеныПоПрайсЛисту(Объект, ПрайсЛистКонтрагента, ЗагрузитьНоменклатуру)
	
	ТЗПрайсЛиста = Новый ТаблицаЗначений;
	ТЗПрайсЛиста.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗПрайсЛиста.Колонки.Добавить("Цена",                 Новый ОписаниеТипов("Число"));
	ТЗПрайсЛиста.Колонки.Добавить("Валюта",               Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТЗПрайсЛиста.Колонки.Добавить("КлючСтрокиПоставщика", Новый ОписаниеТипов("Строка"));
	ТЗПрайсЛиста.Колонки.Добавить("Производитель",        Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ТЗПрайсЛиста.Колонки.Добавить("ТегПозиции",           Новый ОписаниеТипов("Строка"));
	
	Если НЕ ЗначениеЗаполнено(ПрайсЛистКонтрагента.СтрокаПодключения) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не заполнена строка подключения для прайс-листа <%1>'"), ПрайсЛистКонтрагента));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		
		Connection = Новый COMОбъект("ADODB.Connection");
		Коннект = Connection.Open(ПрайсЛистКонтрагента.СтрокаПодключения);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = '%1'"), ОписаниеОшибки()));
		Возврат Неопределено;
		
	КонецПопытки;
	
	Command = Новый  COMОбъект("ADODB.Command");
	Recordset = Новый  COMОбъект("ADODB.Recordset");
	Recordset.ActiveConnection = Connection;
	
	СтруктураФайлаПрайсЛиста = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.Выгрузить();
	
	СтрокаРеквизита = СтруктураФайлаПрайсЛиста.Найти("Артикул", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаРеквизита = Неопределено ИЛИ ПустаяСтрока(СтрокаРеквизита.ИмяПоляФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяПоляАртикул = СтрокаРеквизита.ИмяПоляФайла;
	
	СтрокаРеквизита = СтруктураФайлаПрайсЛиста.Найти("Цена", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаРеквизита = Неопределено ИЛИ ПустаяСтрока(СтрокаРеквизита.ИмяПоляФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяПоляЦены = СтрокаРеквизита.ИмяПоляФайла;
	
	СтрокаРеквизита = СтруктураФайлаПрайсЛиста.Найти("ТегПозиции", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаРеквизита = Неопределено ИЛИ ПустаяСтрока(СтрокаРеквизита.ИмяПоляФайла) Тогда
		ИмяПоляТегПозиции = Неопределено;
	Иначе
		ИмяПоляТегПозиции = СтрокаРеквизита.ИмяПоляФайла;
	КонецЕсли;
	
	СтрокаРеквизита = СтруктураФайлаПрайсЛиста.Найти("Производитель", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаРеквизита = Неопределено ИЛИ ПустаяСтрока(СтрокаРеквизита.ИмяПоляФайла) Тогда
		ИмяПоляПроизводитель = Неопределено;
		ИндексПроизводителя = 2;
	Иначе
		ИмяПоляПроизводитель = СтрокаРеквизита.ИмяПоляФайла;
		ИндексПроизводителя = ?(ИмяПоляТегПозиции = Неопределено, 1, 2);
	КонецЕсли;
	
	ПроизводительПрайсЛиста = ПрайсЛистКонтрагента.Производитель;
	
	ИмяТаблицы = ПрайсЛистКонтрагента.ИмяТаблицы;
	
	Если ЗагрузитьНоменклатуру Тогда
		Объект.Товары.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И Номенклатура.АртикулДляПоиска <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Ссылка";
		тзТовары = Запрос.Выполнить().Выгрузить();
	Иначе
		тзТовары = Объект.Товары.Выгрузить();
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПолучитьБазовуюЦену", Ложь);
	
	ВалютаПрайсЛиста = ПрайсЛистКонтрагента.Валюта;
	
	Для каждого СтрокаТоваров Из тзТовары Цикл
		
		// Формируем запрос по поиску номенклатуры во внешнем источнике.
		ТекстЗап = "
		|SELECT TOP 1 " + ИмяТаблицы + ".[" + ИмяПоляЦены + "]" + ?(ИмяПоляТегПозиции = Неопределено, "", ", " + ИмяТаблицы 
			+ ".[" + ИмяПоляТегПозиции + "] ") + ?(ИмяПоляПроизводитель = Неопределено, "", ", " + ИмяТаблицы + ".[" + 
				ИмяПоляПроизводитель + "] ") + "
		|FROM " + ИмяТаблицы + "
		|WHERE ((" + ИмяТаблицы + ".[" + ИмяПоляАртикул + "]) = '" + СтрокаТоваров.Номенклатура.Артикул + "')";
		Command.CommandText = ТекстЗап;
		Command.ActiveConnection = Connection;
		Попытка
			Recordset = Command.Execute();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = '%1
					|Обращайтесь к администратору базы данных.'"), ОписаниеОшибки()));
			Возврат Неопределено;
		КонецПопытки;
		Попытка
			Цена = Число(Recordset.Fields(0).Value);
			
			НоваяСтрока = ТЗПрайсЛиста.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТоваров.Номенклатура;
			НоваяСтрока.Валюта       = ВалютаПрайсЛиста;
			НоваяСтрока.Цена         = Цена;
			
			НоваяСтрока.ТегПозиции = "";
			Если ИмяПоляТегПозиции <> Неопределено Тогда
				Попытка
					НоваяСтрока.ТегПозиции = Строка(Recordset.Fields(1).Value);
				Исключение 
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения тега позиции'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
			
			Если ИмяПоляПроизводитель <> Неопределено Тогда
				Попытка
					НоваяСтрока.Производитель = Справочники.Производители.НайтиПроизводителяПоНаименованию(Строка(
							Recordset.Fields(ИндексПроизводителя).Value));
				Исключение
					НоваяСтрока.Производитель = ПроизводительПрайсЛиста;
				КонецПопытки;
			Иначе
				НоваяСтрока.Производитель = ПроизводительПрайсЛиста;
			КонецЕсли;
			
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения реквизитов'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;
	КонецЦикла;
	
	Если ЗагрузитьНоменклатуру Тогда
		// Заполним таблицу товаров 
		Объект.Товары.Очистить();
		
		Для Каждого ТекущаяСтрока Из ТЗПрайсЛиста Цикл
			Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
				ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
				НоваяСтрока.ТипЦен       = ТекущийТипЦен.ТипЦен;
			КонецЦикла;
		КонецЦикла;
		
		Возврат ТЗПрайсЛиста;
	Иначе
		
		Возврат ТЗПрайсЛиста;
		
	КонецЕсли;
	
КонецФункции

// Устарела. Следует использовать см.Документ.ИзменениеЦен.БазоваяЦена()
// Заполнения базового типа цен в зависимости от источника базовых цен
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура - Описание
// 	СтрокаТоваров
// 	КонтекстРасчета - Структура - с полями:
//		* РасчетЦенОт - Число                    - вид расчета базовой цены товара;
//		* ТипЦен      - СправочникСсылка.ТипыЦен - ссылка на тип цен для расчета;
//
Процедура ЗаполнитьБазовуюЦену(Объект, СтрокаТоваров, КонтекстРасчета) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		
		Объект.ДатаНачалаДействия = Объект.Дата;
		
	КонецЕсли;
	
	РасчетЦенОт = КонтекстРасчета.РасчетЦенОт;
	
	Момент = ?(
		Объект.Ссылка.Пустая(),
		Новый МоментВремени(КонецДня(Объект.ДатаНачалаДействия)),
		Новый Граница(Новый МоментВремени(Объект.ДатаНачалаДействия, Объект.Ссылка), ВидГраницы.Исключая)
	);
	
	Если ЕстьРеквизит(СтрокаТоваров, "Валюта") Тогда
		ВалютаЦены = СтрокаТоваров.Валюта;
	Иначе
		РеквизитыТипаЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтекстРасчета.ТипЦен, "ВВалютеУчета,ВалютаЦены");
		Если РеквизитыТипаЦен.ВВалютеУчета Тогда
			ВалютаЦены = РеквизитыТипаЦен.ВалютаЦены;
		Иначе
			ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.Номенклатура, "ВалютаУчета");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЦены, Объект.Дата);
	КурсВалюты     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	УстановкаЦенКонтрагента = (Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента);
	Если РасчетЦенОт = 0 Тогда
		// Расчет от базового типа цен.
		СтрокаТоваров.ЦенаБазовая = ЦенообразованиеСервер.ПолучитьЦену(Объект.БазовыйТипЦен,
																		СтрокаТоваров.Номенклатура,
																		Момент,
																		?(УстановкаЦенКонтрагента, Объект.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
																		ВалютаЦены,
																		КурсВалюты,
																		СтрокаТоваров.ХарактеристикаНоменклатуры,
																		СтрокаТоваров.ЕдиницаИзмерения,
																		Объект.ПодразделениеКомпанииПолучатель,
																		Ложь,
																		?(УстановкаЦенКонтрагента, Объект.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка()));
	ИначеЕсли РасчетЦенОт=1 Тогда
		// Расчет от документа основания.
		Попытка
			СтрокаТоваровОснования = Объект.ДокументОснование.Товары.Найти(СтрокаТоваров.Номенклатура, "Номенклатура");
			Если СтрокаТоваровОснования = Неопределено Тогда
				СтрокаТоваров.ЦенаБазовая = 0;
			Иначе
				СтрокаТоваров.ЦенаБазовая = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваровОснования.Цена, Объект.ДокументОснование.ВалютаДокумента, Объект.ДокументОснование.КурсДокумента, ВалютаЦены, КурсВалюты);
			КонецЕсли;
		Исключение
			СтрокаТоваров.ЦенаБазовая = 0;
		КонецПопытки;
	ИначеЕсли РасчетЦенОт = 2 Тогда
		// От цен поставщика
		СтрокаТоваров.ЦенаБазовая = ЦенообразованиеСервер.ПолучитьЦену(КонтекстРасчета.ТипЦен, СтрокаТоваров.Номенклатура, Момент, Объект.Поставщик, ВалютаЦены, КурсВалюты, СтрокаТоваров.ХарактеристикаНоменклатуры, СтрокаТоваров.ЕдиницаИзмерения, Объект.ПодразделениеКомпанииПолучатель, Ложь);
	ИначеЕсли РасчетЦенОт = 3 ИЛИ РасчетЦенОт = 5 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпанииОстатки.КоличествоОстаток КАК Количество,
		|	ПартииТоваровКомпанииОстатки.Сумма" + ?(РасчетЦенОт = 5, "Упр", "") + "Остаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(&НаМомент, Номенклатура=&Номенклатура"+?((НЕ ЗначениеЗаполнено(Объект.СкладКомпании)),""," И СкладКомпании=&СкладКомпании")+") КАК ПартииТоваровКомпанииОстатки";
		
		Запрос.УстановитьПараметр("НаМомент",      Момент);
		Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
		Запрос.УстановитьПараметр("Номенклатура",  СтрокаТоваров.Номенклатура);
		
		ВыборкаСебестоимости = Запрос.Выполнить().Выбрать();
		Если ВыборкаСебестоимости.Следующий() Тогда
			
			Если ВыборкаСебестоимости.Количество = NULL ИЛИ ВыборкаСебестоимости.Количество = 0 Тогда
				НоваяБазоваяЦена = 0;
			Иначе
				НоваяБазоваяЦена = ВыборкаСебестоимости.Сумма/ВыборкаСебестоимости.Количество;
			КонецЕсли;
			
			Если РасчетЦенОт = 3 Тогда
				ВалютаСебестоимости = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			Иначе
				ВалютаСебестоимости = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			КонецЕсли;
			
			СтрокаТоваров.ЦенаБазовая = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяБазоваяЦена, ВалютаСебестоимости, Объект.Дата, ВалютаЦены, КурсВалюты);
		Иначе
			СтрокаТоваров.ЦенаБазовая = 0;
		КонецЕсли;
		
	ИначеЕсли РасчетЦенОт=4 Тогда
		
		// От прайс-листа контрагента
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрайсЛистыКонтрагентов.Цена
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист
		|	И (ПрайсЛистыКонтрагентов.Номенклатура = &Номенклатура ИЛИ ПрайсЛистыКонтрагентов.Артикул = &Артикул)";
		
		Запрос.УстановитьПараметр("ПрайсЛист",    Объект.ПрайсЛистКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", СтрокаТоваров.Номенклатура);
		Запрос.УстановитьПараметр("Артикул",      СтрокаТоваров.Номенклатура.Артикул);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТоваров.ЦенаБазовая = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Цена, Объект.ПрайсЛистКонтрагента.Валюта, Объект.Дата, ВалютаЦены, КурсВалюты);
		Иначе
			ПрайсЛистыКонтрагента = Справочники.Номенклатура.ЗаполнитьИнформацию(СтрокаТоваров.Номенклатура.Артикул, Объект.ПрайсЛистКонтрагента, Справочники.Производители.ПустаяСсылка());
			
			Если ПрайсЛистыКонтрагента.Количество()>0 Тогда
				
				ПрайсЛистКонтрагентов = ПрайсЛистыКонтрагента[0];
				
				СтрокаТоваров.ЦенаБазовая = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ПрайсЛистКонтрагентов.Цена, ПрайсЛистКонтрагентов.ПрайсЛист.Валюта, Объект.Дата, ВалютаЦены, КурсВалюты);
			Иначе
				СтрокаТоваров.ЦенаБазовая=0;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли РасчетЦенОт=6 Тогда
		// Расчет от базового типа цен.
		СтрокаТоваров.ЦенаБазовая = ЦенообразованиеСервер.ПолучитьЦену(КонтекстРасчета.ТипЦен,
																		СтрокаТоваров.Номенклатура,
																		Момент,
																		?(УстановкаЦенКонтрагента, Объект.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
																		ВалютаЦены,
																		КурсВалюты,
																		СтрокаТоваров.ХарактеристикаНоменклатуры,
																		СтрокаТоваров.ЕдиницаИзмерения,
																		Объект.БазовоеПодразделение,
																		Ложь,
																		?(УстановкаЦенКонтрагента, Объект.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка()));
	ИначеЕсли РасчетЦенОт=7 Тогда
		// Расчет от базовой единицы измерения.
		СтрокаТоваров.ЦенаБазовая = ЦенообразованиеСервер.ПолучитьЦену(КонтекстРасчета.ТипЦен,
																		СтрокаТоваров.Номенклатура,
																		Момент,
																		?(УстановкаЦенКонтрагента, Объект.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
																		ВалютаЦены,
																		КурсВалюты, 
																		СтрокаТоваров.ХарактеристикаНоменклатуры,
																		СтрокаТоваров.БазоваяЕдиницаИзмерения,
																		Объект.ПодразделениеКомпанииПолучатель,
																		Ложь,
																		?(УстановкаЦенКонтрагента, Объект.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка()));
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьБазовуюЦену()
// Устарела. Не используется
// Заполнение из прайс-листа контрагента
//
// Параметры;
//  Объект        						- ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ЗаполнитьНоменклатуройПоПрайсЛисту 	- Булево - признак заполнения по прайсу.
//
Функция ПолучениеНоменклатурыПоПрайсЛистуКонтрагента(Объект, ПрайсЛистКонтрагента, ЗаполнитьНоменклатуройПоПрайсЛисту) Экспорт
	
	// Проверим есть ли загруженный ПЛ
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				 |	ПрайсЛистыКонтрагентов.ПрайсЛист
				 |ИЗ
				 |	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
				 |ГДЕ
				 |	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист";
				 
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
	Выборка			= Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		
		// Грузим из регистра
		Запрос			= Новый Запрос;
		Запрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					 |	ОбъединенныйЗапрос.Номенклатура КАК Номенклатура,
					 |	ОбъединенныйЗапрос.Артикул КАК Артикул,
					 |	ОбъединенныйЗапрос.Цена КАК Цена
					 |ИЗ
					 |	(ВЫБРАТЬ
					 |		ВЫБОР
					 |			КОГДА ПрайсЛистыКонтрагентов.Номенклатура = &ПустаяСсылка
					 |				ТОГДА ЕСТЬNULL(СправочникНоменклатура.Ссылка, &ПустаяСсылка)
					 |			ИНАЧЕ ПрайсЛистыКонтрагентов.Номенклатура
					 |		КОНЕЦ КАК Номенклатура,
					 |		ВЫБОР
					 |			КОГДА ПрайсЛистыКонтрагентов.Номенклатура = &ПустаяСсылка
					 |				ТОГДА СправочникНоменклатура.Артикул
					 |			ИНАЧЕ ПрайсЛистыКонтрагентов.Номенклатура.Артикул
					 |		КОНЕЦ КАК Артикул,
					 |		ПрайсЛистыКонтрагентов.Цена КАК Цена
					 |	ИЗ
					 |		РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
					 |	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
					 |	ПО
					 |		ПрайсЛистыКонтрагентов.Артикул = СправочникНоменклатура.Артикул
					 |	ГДЕ
					 |		ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист) КАК ОбъединенныйЗапрос
					 |ГДЕ
					 |	ОбъединенныйЗапрос.Номенклатура <> &ПустаяСсылка
					 |
					 |УПОРЯДОЧИТЬ ПО
					 |	ОбъединенныйЗапрос.Номенклатура";
					 
		Запрос.УстановитьПараметр("ПрайсЛист",		ПрайсЛистКонтрагента);
		Запрос.УстановитьПараметр("ПустаяСсылка",	Справочники.Номенклатура.ПустаяСсылка());
		ТЗПрайсЛиста	= Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ТЗПрайсЛиста = Неопределено Тогда
		
		Возврат ЗаполнитьБазовыеЦеныПоПрайсЛисту(Объект, ПрайсЛистКонтрагента, ЗаполнитьНоменклатуройПоПрайсЛисту);
		
	Иначе
		
		Счетчик 		= 0;
		КоличествоСтрок = ТЗПрайсЛиста.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Товары прайс-листа %1 не загружены в справочник ""Номенклатура"".'"),СокрЛП(Строка(ПрайсЛистКонтрагента)));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		КонецЕсли;
		
		ДопПараметры 	= Новый Структура("ПолучитьБазовуюЦену");
		
		Для каждого СтрокаПЛ Из ТЗПрайсЛиста Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаПЛ.Номенклатура) Тогда
				
				Если ЗначениеЗаполнено(СтрокаПЛ.Артикул) Тогда
					
					СтрокаПЛ.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрокаПЛ.Артикул);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаПЛ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли; 
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Возврат ТЗПрайсЛиста;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли


