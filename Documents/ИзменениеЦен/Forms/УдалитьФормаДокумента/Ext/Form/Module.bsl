///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Изменение цен"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТаблицаНоменклатурыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТаблицаНоменклатурыАртикул);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	
	ХозОперацияДокумента = Объект.ХозОперация;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьТаблицуПараметрыРасчета();
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();	// Сформируем начальный список типов цен
	Если Объект.Товары.Количество() = 0 Тогда
		Если Объект.ПараметрыРасчета.Количество() = 0 Тогда
			ТипЦенПродажи      = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи");
			НоваяСтрока        = Объект.ПараметрыРасчета.Добавить();
			НоваяСтрока.ТипЦен = ТипЦенПродажи;
			НоваяСтрока.РасчетЦенОт = ?(ЗначениеЗаполнено(Объект.ПрайсЛистКонтрагента), 4, 0);
			НоваяСтрока.ОкруглятьДо = 0.01;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ПрайсЛистКонтрагента) Тогда
			ТаблицаТоваров = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(Объект.ПрайсЛистКонтрагента, , Истина);
			Объект.Товары.Очистить();
			Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
				
				Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
					Документы.ИзменениеЦен.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
					НоваяСтрока.ТипЦен       = ТекущийТипЦен.ТипЦен;
				КонецЦикла;
			КонецЦикла;
			
			ЗаполнитьТаблицуТоварами(ТаблицаТоваров);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

	ЗаполнениеРеквизитовДокумента();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если
		ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Объект")
		И ТипЗнч(ВыбранноеЗначение.Объект) = Тип("СправочникСсылка.Номенклатура")
	Тогда
		Если ТолькоПросмотр ИЛИ Элементы.ТаблицаНоменклатуры.ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура", ВыбранноеЗначение.Объект);
		Если ВыбранноеЗначение.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ВыбранноеЗначение.ЕдиницаИзмерения) Тогда
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыбранноеЗначение.ЕдиницаИзмерения);
		КонецЕсли;
		Если ВыбранноеЗначение.Свойство("ХарактеристикаНоменклатуры")
			И ЗначениеЗаполнено(ВыбранноеЗначение.ХарактеристикаНоменклатуры) Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ВыбранноеЗначение.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		МассивСтрокТЧ = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = ТаблицаНоменклатуры.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение.Объект;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаТабличнойЧасти.НомерСтроки = ТаблицаНоменклатуры.Количество();
			СтрокаТабличнойЧасти.ВалютаУчета = СтрокаТабличнойЧасти.Номенклатура.ВалютаУчета;
			СтрокаТабличнойЧасти.ТипНоменклатуры = СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры;
			
			ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(СтрокаТабличнойЧасти.ТипНоменклатуры);
			ВладелецЕдиницыИзмерения = ?(ПараметрыТипаНоменклатуры.ИспользованиеЕдиницИзмерения = 1,
				СтрокаТабличнойЧасти.ТипНоменклатуры,
				СтрокаТабличнойЧасти.Номенклатура
			);
			
			СтрокаТабличнойЧасти.ОсновнаяЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(
				СтрокаТабличнойЧасти.Номенклатура,
				ВладелецЕдиницыИзмерения
			);
			СтрокаТабличнойЧасти.КоэффициентОсновнойЕдиницы = СтрокаТабличнойЧасти.ОсновнаяЕдиницаИзмерения.Коэффициент;
			
			Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
			ТаблицаНоменклатурыНоменклатураПриИзмененииНаСервере();
		КонецЕсли;
	ИначеЕсли НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	ЗаполнениеРеквизитовДокумента();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ИзменениеЦен", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
	Объект.Товары.Очистить();
	ЗаполнитьЦеныТоваров();
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	ОбновитьСтарыеЦены();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
	Если Объект.Проведен Тогда
		Оповестить("ЗаписаныЦены", Объект.Товары);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	КоличествоТиповЦенПоЕдинице = 0;
	
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если ТекущаяСтрока.ТипЦен.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			КоличествоТиповЦенПоЕдинице = КоличествоТиповЦенПоЕдинице + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим списки для накопления сведений о дублирующихся строках
	СписокНайденныхДублей = Новый Массив;
	ОбработанныеСтроки    = Новый Соответствие;
	// Создадим структуру отбора для проверки уникальности реквизитов
	ПоляПоискаДублей = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
	// Проверим таблицу номенклатуры
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущаяСтрока.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 таблицы ""Товары""'"),ТекущаяСтрока.НомерСтроки),
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ
			);
		КонецЕсли;
		
		ПараметрыНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(ТекущаяСтрока.ТипНоменклатуры);
		
		Если НЕ КоличествоТиповЦенПоЕдинице = 0 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) И ПараметрыНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ЕдиницаИзмерения");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Единица измерения"" в строке %1 таблицы ""Товары""'"),ТекущаяСтрока.НомерСтроки),
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ
			);
		КонецЕсли;
		
		ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
		ЦеныЗаполнены = Ложь;
		
		Для Каждого ТекущаяСтрокаЦены Из ЦеныНоменклатуры Цикл
			Если ЗначениеЗаполнено(ТекущаяСтрокаЦены.Цена) Тогда
				ЦеныЗаполнены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЦеныЗаполнены Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущаяСтрока.НомерСтроки, "Цена");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'В строке %1 таблицы ""Товары"" не заполнены цены ни для одного типа цен.'"),ТекущаяСтрока.НомерСтроки),
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ
			);
		КонецЕсли;
		// Уникальность
		// Пропустим строки уже попавшие в черный список
		Если НЕ ОбработанныеСтроки.Получить(ТекущаяСтрока)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Производим поиск строк удовлетворяющих структуре отбора
		ЗаполнитьЗначенияСвойств(ПоляПоискаДублей, ТекущаяСтрока);
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(ПоляПоискаДублей);
		// Если нашли и их больше 1, то строки не уникальные
		Если НайденныеСтроки.Количество() > 1 Тогда
			// Определим номера дублирующихся строк и занесем их в черный список
			НомераСтрокДублей = "";
			Для каждого НайденныйДубль Из НайденныеСтроки Цикл
				НомераСтрокДублей = НомераСтрокДублей + ", " + СокрЛП(НайденныйДубль.НомерСтроки);
				ОбработанныеСтроки.Вставить(НайденныйДубль, ИСТИНА);
			КонецЦикла;
			// Запоминаем номера найденных дублей
			СписокНайденныхДублей.Добавить(Сред(НомераСтрокДублей, 3));
		КонецЕсли;
	КонецЦикла;
	// Выводим сведения о найденных дублях по текущему ключу поиска
	Если СписокНайденныхДублей.Количество() > 0 Тогда
		// Произведем формирование заголовка сообщения об обнаруженных дублях
		ПредставленияПолей      = "Номенклатура, Ед., Характеристика";
		ПредставленияСтрок      = "";
		// Получим представление дублирующихся строк
		Для каждого НайденныеДубли Из СписокНайденныхДублей Цикл
			ПредставленияСтрок = ПредставленияСтрок + Символы.ПС + НСтр("ru = 'Строки:" + Символы.НПП + НайденныеДубли + "'");
		КонецЦикла;
		// Информируем пользователя о найденной коллизии
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Строки таблицы ""%1"" не уникальны по значению полей (%2)%3'"),
				"Товары",
				ПредставленияПолей,
				ПредставленияСтрок
				),
			,
			"ТаблицаНоменклатуры",,
			Отказ
		);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ВидимостьКолонок", ВидимостьКолонок);
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;

	НастройкаВидимостиКолонок = Настройки.Получить("ВидимостьКолонок");
	Если НЕ НастройкаВидимостиКолонок = Неопределено Тогда
		ВидимостьКолонок.ЗагрузитьЗначения(НастройкаВидимостиКолонок.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ВидимостьКолонок.НайтиПоЗначению("ЦенаНовая") = Неопределено Тогда
		ВидимостьКолонок.Добавить("ЦенаНовая");
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовЦен();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьКурсыВалют(, Истина);

	ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТребуетсяУстановкаДатыНачала", ЭтотОбъект, "ТребуетсяУстановкаДатыНачала");
	ТекстВопроса = НСтр("ru = 'Дата документа изменена. Сменить дату начала действия цен товаров?'");
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ИзменениеЦен.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	ПерерасчетРасчетныхЦен();

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);

	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаНачалаДействияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	СтарыеЦены.Очистить();
	ОбновитьСтарыеЦены();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаНачалаДействияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ИзменениеЦен.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", ТаблицаНоменклатуры.Количество() > 0);
	КонецЕсли;
	
	УстановитьКонтрагентаДокумента();
	ПерерасчетРасчетныхЦен();
	СтарыеЦены.Очистить();
	ОбновитьСтарыеЦены();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ИзменениеЦен.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	УстановитьКонтрагентаДокумента();
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", ТаблицаНоменклатуры.Количество() > 0);
	ПерерасчетРасчетныхЦен();
	СтарыеЦены.Очистить();
	ОбновитьСтарыеЦены();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ПодразделениеКомпанииПолучательПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ИзменениеЦен.ПодразделениеКомпанииПолучательПриИзменении(Объект, ПараметрыДействия);
	
	Для Каждого СтрокаТоваров Из ТаблицаТипыЦен Цикл
		Если СтрокаТоваров.Рассчитывается ИЛИ ПустаяСтрока(СтрокаТоваров.ИдентификаторСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТоваров.Цена<>0 Тогда
			// Установка процента наценки
			Если СтрокаТоваров.ЦенаБазовая = 0 Тогда
				СтрокаТоваров.ПроцентНаценки = 0;
			Иначе
				СтрокаТоваров.ПроцентНаценки = ((СтрокаТоваров.Цена-СтрокаТоваров.ЦенаБазовая)/СтрокаТоваров.ЦенаБазовая)*100;
			КонецЕсли;
			
			ПараметрыДействияНоменклатуры = Новый Структура("СтрокаНоменклатуры", СтрокаТоваров);
			ТаблицаТипыЦенПроцентНаценкиПриИзмененииНаСервере(ПараметрыДействияНоменклатуры);
		Иначе
			// Если цена была равной нулю, то пытаемся автоматически рассчитать цену от базовой цены.
			// Получим базовую цену.
			ПараметрыТипаЦен = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", СтрокаТоваров.ТипЦен))[0];
			
			СтруктураСтроки = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,БазоваяЕдиницаИзмерения,Валюта,ЦенаБазовая");
			СтрокаНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТоваров.ИдентификаторСтроки))[0];
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаНоменклатуры);
			
			Документы.ИзменениеЦен.БазоваяЦена(Объект, СтруктураСтроки, ПараметрыТипаЦен.ТипЦен, ПараметрыТипаЦен.РасчетЦенОт);
			СтрокаТоваров.ЦенаБазовая = СтруктураСтроки.ЦенаБазовая;
			
			// Рассчитываем процент наценки.
			Если ПараметрыТипаЦен.ПроцентНаценкиИзНоменклатуры И СтруктураСтроки.Номенклатура.ПроцентНаценки<>0 Тогда
				СтрокаТоваров.ПроцентНаценки = СтруктураСтроки.Номенклатура.ПроцентНаценки;
			ИначеЕсли (НЕ ПараметрыТипаЦен.ПроцентНаценкиИзНоменклатуры) И ПараметрыТипаЦен.ПроцентНаценки<>0 Тогда
				СтрокаТоваров.ПроцентНаценки = ПараметрыТипаЦен.ПроцентНаценки;
			Иначе
				СтрокаТоваров.ПроцентНаценки = Объект.БазовыйТипЦен.ПроцентСкидкиНаценки;
			КонецЕсли;
			ПараметрыДействияНоменклатуры = Новый Структура("СтрокаНоменклатуры", СтрокаТоваров);
			ТаблицаТипыЦенПроцентНаценкиПриИзмененииНаСервере(ПараметрыДействияНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьБазовойЦены();
	ПерерасчетРасчетныхЦен();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодразделениеКомпанииПолучательПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПодразделениеКомпанииПолучательПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодразделениеКомпанииПолучательРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании) Тогда
		ВыбранныеПодразделения = Новый Массив;
		Для Каждого Строка Из Объект.ПодчиненныеПодразделенияКомпании Цикл
			ВыбранныеПодразделения.Добавить(Строка.ПодразделениеКомпании);
		КонецЦикла;
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ВыбранныеПодразделения", Новый ФиксированныйМассив(ВыбранныеПодразделения));
		ПараметрыОткрытия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпанииПолучатель);
		
		ОбработкикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			"ВыборПодчиненныхПодразделений");
		
		ОткрытьФорму(
			"Документ.ИзменениеЦен.Форма.ВыборПодчиненныхПодразделенийКомпании",
			ПараметрыОткрытия,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОбработкикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНоменклатуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Если ТаблицаНоменклатуры.Количество() = 0 ИЛИ Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	Если НЕ ТекущийЭлемент.Имя = "ТаблицаТипыЦен" Тогда
		Элементы.ТаблицаТипыЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтроки,Рассчитывается", ТекущиеДанные.ИдентификаторСтроки, Ложь);
		Элементы.ТаблицаТипыЦен.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьСортировки = НЕ (Элемент.ТекущийЭлемент.Имя = "ТаблицаНоменклатурыКод" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТаблицаНоменклатурыАртикул")
		И ТаблицаНоменклатуры.Количество() > 0;
	Элементы.ТаблицаНоменклатурыСортироватьПоВозрастанию.Доступность = ДоступностьСортировки;
	Элементы.ТаблицаНоменклатурыСортироватьПоУбыванию.Доступность    = ДоступностьСортировки;
	
	ПодключитьОбработчикОжидания("УстановкаПоложенияТекущегоТипаЦен", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		ТаблицаНоменклатурыПриАктивизацииСтроки(Неопределено);
		ТекущиеДанные.НомерСтроки = ТаблицаНоменклатуры.Количество();
		ДобавитьТипыЦенНоменклатурыНаКлиенте(ТекущиеДанные.НомерСтроки - 1, Копирование);
	КонецЕсли;
	
	ЗаголовокТовары = ТаблицаНоменклатуры.Количество();
	Элементы.ТаблицаНоменклатурыПереместитьВверх.Доступность         = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыПереместитьВниз.Доступность          = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыСортироватьПоВозрастанию.Доступность = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыСортироватьПоУбыванию.Доступность    = ЗаголовокТовары > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипыЦенНоменклатурыНаКлиенте(СтрокаНоменклатура, Копирование = Ложь)
	
	Если СтрокаНоменклатура = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаНоменклатура) = Тип("Число") Тогда
		СтрокаНоменклатура = ТаблицаНоменклатуры[СтрокаНоменклатура];
	КонецЕсли;
	
	ИдентификаторНоменклатуры = СтрокаНоменклатура.ИдентификаторСтроки;
	// Проверим наличие типов цен для данной номенклатуры
	ТипыЦенНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторНоменклатуры));
	
	Номенклатура = СтрокаНоменклатура.Номенклатура;
	ПараметрыНоменклатуры = ПолучитьПараметрыНоменклатуры(Номенклатура);
	ВалютаУчета  = СтрокаНоменклатура.ВалютаУчета;
	
	УчетЦенТолькоВРазрезеДопПараметров = 
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыНоменклатуры, "УчетЦенТолькоВРазрезеДопПараметров", Ложь);
	
	НеЗаполненаХарактеристикаНоменклатуры = 
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыНоменклатуры, "НеЗаполненаХарактеристикаНоменклатуры", Ложь)
		И НЕ ЗначениеЗаполнено(СтрокаНоменклатура.ХарактеристикаНоменклатуры) 
		И СтрокаНоменклатура.РучноеСписаниеХарактеристик;
	
	НеЗаполненаЕдиницаИзмерения = НЕ ЗначениеЗаполнено(СтрокаНоменклатура.ЕдиницаИзмерения);
	
	Если ТипыЦенНоменклатуры.Количество() > 0 Тогда
		Для Каждого ТекущаяСтрока Из ТипыЦенНоменклатуры Цикл
			ТаблицаТипыЦен.Удалить(ТекущаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда
		ВидСтрокиНоменклатуры = 4;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНоменклатура.ХарактеристикаНоменклатуры)
		И СтрокаНоменклатура.ЕдиницаИзмерения = СтрокаНоменклатура.ОсновнаяЕдиницаИзмерения Тогда
		// Доступны все
		ВидСтрокиНоменклатуры = 1;
	ИначеЕсли ЗначениеЗаполнено(СтрокаНоменклатура.ХарактеристикаНоменклатуры) Тогда
		// Только характеристика
		ВидСтрокиНоменклатуры = 2;
	Иначе
		// Только по единице
		ВидСтрокиНоменклатуры = 3;
	КонецЕсли;
	
	Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
		НоваяСтрока = ТаблицаТипыЦен.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторНоменклатуры;
		НоваяСтрока.ТипЦен              = ТекущийТипЦен.ТипЦен;
		НоваяСтрока.Рассчитывается      = ТекущийТипЦен.Рассчитывается;
		
		ПредставлениеЦены = СтрЗаменить(ТекущийТипЦен.ТипЦен.УникальныйИдентификатор(),"-","_");
		
		Если НоваяСтрока.Рассчитывается Тогда
			// mikolv1
			ОбновитьКурсыВалютНаКлиенте(ТекущийТипЦен.ВалютаБазовойЦены);
			ОбновитьКурсыВалютНаКлиенте(ТекущийТипЦен.ВалютаЦены);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Валюта = ?(ТекущийТипЦен.ВВалютеУчета, ВалютаУчета, ТекущийТипЦен.ВалютаЦены);
		ОбновитьКурсыВалютНаКлиенте(НоваяСтрока.Валюта);
		
		ПараметрыРасчета = "";
		
		Если ТекущийТипЦен.РасчетЦенОт = 0 Тогда
			ПараметрыРасчета = НСтр("ru = 'От базового типа цен:'") + Символы.НПП            + Объект.БазовыйТипЦен;
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 1 Тогда
			ПараметрыРасчета = НСтр("ru = 'От документа основания'");
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 2 Тогда
			ПараметрыРасчета = НСтр("ru = 'От цен поставщика:'") + Символы.НПП               + Объект.Поставщик;
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 3 Тогда
			ПараметрыРасчета = НСтр("ru = 'От себестоимости в регл. валюте:'") + Символы.НПП + Объект.СкладКомпании;
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 5 Тогда
			ПараметрыРасчета = НСтр("ru = 'От себестоимости в упр. валюте:'") + Символы.НПП  + Объект.СкладКомпании;
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 4 Тогда
			ПараметрыРасчета = НСтр("ru = 'От прайс-листа контрагента:'") + Символы.НПП      + Объект.ПрайсЛистКонтрагента;
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 6 Тогда
			ПараметрыРасчета = НСтр("ru = 'От базового подразделения:'") + Символы.НПП       + Объект.БазовоеПодразделение;
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 7 Тогда
			ПараметрыРасчета = НСтр("ru = 'От базовой единицы измерения'");
		ИначеЕсли ТекущийТипЦен.РасчетЦенОт = 8 Тогда
			ПараметрыРасчета = НСтр("ru = 'По себестоимости выбранной партии:'") + Символы.НПП       + Объект.Партия;
		КонецЕсли;
		
		НоваяСтрока.ПараметрыРасчета = ПараметрыРасчета
			+ ";" + Символы.НПП + НСтр("ru = 'процент наценки:'") + Символы.НПП
			+ ?(ТекущийТипЦен.ПроцентНаценкиИзНоменклатуры, НСтр("ru = 'из номенклатуры'"), ТекущийТипЦен.ПроцентНаценки)
			+ ";" + Символы.НПП + НСтр("ru = 'округлять до:'") + Символы.НПП
			+ ТекущийТипЦен.ОкруглятьДо;
		
		НоваяСтрока.ИдентификаторТипаЦен = ПредставлениеЦены;
		Аналитика = "";
		Алгоритм = ТекущийТипЦен.АлгоритмПолученияЦены;
		Если Алгоритм = ПредопределенноеЗначение("Перечисление.АлгоритмПолученияЦены.ПоНоменклатуре") Тогда
			НоваяСтрока.Аналитика = 1;
		ИначеЕсли Алгоритм = ПредопределенноеЗначение("Перечисление.АлгоритмПолученияЦены.ПоХарактеристике") Тогда
			НоваяСтрока.Аналитика = 2;
			Аналитика = НСтр("ru = '(по характеристике)'");
		ИначеЕсли Алгоритм = ПредопределенноеЗначение("Перечисление.АлгоритмПолученияЦены.ПоЕдиницеИзмерения") Тогда
			НоваяСтрока.Аналитика = 3;
			Аналитика = НСтр("ru = '(по единице измерения)'");
		КонецЕсли;
		
		НоваяСтрока.ТолькоПросмотр = УчетЦенТолькоВРазрезеДопПараметров
			И ((НоваяСтрока.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры) ИЛИ (НоваяСтрока.Аналитика = 3 И НеЗаполненаЕдиницаИзмерения));
		ПоХарактеристике = УчетЦенТолькоВРазрезеДопПараметров И НоваяСтрока.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры;
		НоваяСтрока.Представление = "" + НоваяСтрока.ТипЦен + " " + Аналитика;
		НоваяСтрока.ВидСтрокиНоменклатуры = ВидСтрокиНоменклатуры;
		
		Если ЗначениеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда
			РасчетПоЕдинице              = НоваяСтрока.Аналитика = 3;
			НоваяСтрока.ЕдиницаИзмерения = ?(РасчетПоЕдинице, СтрокаНоменклатура.ЕдиницаИзмерения, СтрокаНоменклатура.ОсновнаяЕдиницаИзмерения);
			НоваяСтрока.Коэффициент      = ?(РасчетПоЕдинице, СтрокаНоменклатура.Коэффициент, СтрокаНоменклатура.КоэффициентОсновнойЕдиницы);
			
			СтрокаНоменклатура["ЕдиницаИзмерения" + ПредставлениеЦены] = НоваяСтрока.ЕдиницаИзмерения;
			СтрокаНоменклатура["Коэффициент" + ПредставлениеЦены]      = НоваяСтрока.Коэффициент;
			
			Если НоваяСтрока.ТолькоПросмотр Тогда
				ПараметрыУсловногоОформления = "";
				ПараметрыУсловногоОформления = "ТолькоПросмотр" + ПредставлениеЦены;
				ПараметрыУсловногоОформления = ПараметрыУсловногоОформления
					+ ?(ПоХарактеристике, "ПоХарактеристике", "ПоЕдиницеИзмерения")
					+ ПредставлениеЦены;
				СтрокаНоменклатура.ПараметрыУсловногоОформления = СтрокаНоменклатура.ПараметрыУсловногоОформления + ПараметрыУсловногоОформления;
			КонецЕсли;
		КонецЕсли;
		// Заполним представление цены при копировании строк
		Если Копирование Тогда
			НоваяСтрока.Цена           = СтрокаНоменклатура["ЦенаНовая"      + ПредставлениеЦены];
			НоваяСтрока.ЦенаСтарая     = СтрокаНоменклатура["ЦенаСтарая"     + ПредставлениеЦены];
			НоваяСтрока.ЦенаБазовая    = СтрокаНоменклатура["ЦенаБазовая"    + ПредставлениеЦены];
			НоваяСтрока.ПроцентНаценки = СтрокаНоменклатура["ПроцентНаценки" + ПредставлениеЦены];
			НоваяСтрока.СуммаНаценки   = СтрокаНоменклатура["СуммаНаценки"   + ПредставлениеЦены];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// удалим все связанные с номенклатурой элементы
	ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
	Для Каждого ТекущаяСтрока Из ЦеныНоменклатуры Цикл
		ТаблицаТипыЦен.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаНоменклатурыПослеУдаления(Элемент)
	
	НомерСтроки = 1;
	
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ЗаголовокТовары = ТаблицаНоменклатуры.Количество();
	Элементы.ТаблицаНоменклатурыПереместитьВверх.Доступность         = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыПереместитьВниз.Доступность          = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыСортироватьПоВозрастанию.Доступность = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыСортироватьПоУбыванию.Доступность    = ЗаголовокТовары > 0;
	// Если пустая ТЗ "Таблица номенклатуры", то выведем типы цен для настройки
	Если ЗаголовокТовары = 0 Тогда
		Элементы.ТаблицаТипыЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("Рассчитывается", Ложь);
		Элементы.ТаблицаТипыЦен.Обновить();
	КонецЕсли;
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТаблицаНоменклатуры

&НаСервере
Процедура ТаблицаНоменклатурыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	
	Если ТекущиеДанные.Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Набор Тогда
		СоставНабора       = ТекущиеДанные.Номенклатура.СоставНабора;
		НовыеСтроки        = Новый Массив();
		
		ТаблицаНоменклатуры.Удалить(ТекущиеДанные.НомерСтроки - 1);
		
		// Удалим связанные строки из ТЧ ТаблицаТипыЦен
		ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
		Для Каждого ТекущаяСтрока Из ЦеныНоменклатуры Цикл
			ТаблицаТипыЦен.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
		// Формируем структуру поиска существующей строки в таблице
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура");
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры");
		// теперь будем рекурсивно добавлять состав набора
		Для Каждого СтрокаСоставаНабора Из СоставНабора Цикл
			// Заполняем структуру поиска данными текущей позиции набора
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаСоставаНабора);
			// Поищем номенклатуру из набора в таблице товаров
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
			// Обработаем результат поиска
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Добавим строку и установим в ней показатели
				СтрокаТабличнойЧасти = ТаблицаНоменклатуры.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = СтрокаСоставаНабора.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаСоставаНабора.ХарактеристикаНоменклатуры;
				
				СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				СтрокаТабличнойЧасти.НомерСтроки         = ТаблицаНоменклатуры.Количество();
				СтрокаТабличнойЧасти.ТипНоменклатуры                  = СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры;
				
				ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(СтрокаТабличнойЧасти.ТипНоменклатуры);
				ВладелецЕдиницыИзмерения = ?(ПараметрыТипаНоменклатуры.ИспользованиеЕдиницИзмерения = 1, СтрокаТабличнойЧасти.ТипНоменклатуры, СтрокаТабличнойЧасти.Номенклатура);
				
				СтрокаТабличнойЧасти.ОсновнаяЕдиницаИзмерения           = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(СтрокаТабличнойЧасти.Номенклатура, ВладелецЕдиницыИзмерения);
				СтрокаТабличнойЧасти.КоэффициентОсновнойЕдиницы         = СтрокаТабличнойЧасти.ОсновнаяЕдиницаИзмерения.Коэффициент;
				
				СтрокаТабличнойЧасти.ВалютаУчета                        = СтрокаТабличнойЧасти.Номенклатура.ВалютаУчета;
				// Помещаем номер добавленной строки в коллекцию новых строк
				НовыеСтроки.Добавить(СтрокаТабличнойЧасти.НомерСтроки-1);
				Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
				// Вызываем обработчик изменения данных объекта
				ТаблицаНоменклатурыНоменклатураПриИзмененииНаСервере();
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	// Вызываем обработчик изменения данных объекта
	Документы.ИзменениеЦен.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ОсновнаяЕдиницаИзмерения   = ТекущиеДанные.ЕдиницаИзмерения;
	ТекущиеДанные.КоэффициентОсновнойЕдиницы = ТекущиеДанные.ОсновнаяЕдиницаИзмерения.Коэффициент;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И (НЕ ЗначениеЗаполнено(ТекущиеДанные.БазоваяЕдиницаИзмерения) ИЛИ НЕ ТекущиеДанные.БазоваяЕдиницаИзмерения.Владелец  = ТекущиеДанные.ВладелецЕдиницыИзмерения) Тогда
		ТекущиеДанные.БазоваяЕдиницаИзмерения = ТекущиеДанные.ОсновнаяЕдиницаИзмерения;
	КонецЕсли;
	
	ДобавитьТипыЦенНоменклатуры(ТекущиеДанные);
	ПолучениеСтаройБазовойЦены(ТекущиеДанные.ИдентификаторСтроки, Истина, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновлятьБазовыеЦены", Истина), ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновлятьСтарыеЦены", Истина));
	ЗаполнитьЕдиницыИзмеренияТипамЦен(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураПриИзменении(Элемент)
	
	ТаблицаНоменклатурыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТаблицаНоменклатурыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	ДобавитьТипыЦенНоменклатуры(ТекущиеДанные);
	ПолучениеСтаройБазовойЦены(ТекущиеДанные.ИдентификаторСтроки, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаНоменклатурыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТаблицаНоменклатурыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТаблицаНоменклатурыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	Документы.ИзменениеЦен.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ДобавитьТипыЦенНоменклатуры(ТекущиеДанные);
	ПолучениеСтаройБазовойЦены(ТекущиеДанные.ИдентификаторСтроки, Истина);
	ЗаполнитьЕдиницыИзмеренияТипамЦен(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаНоменклатурыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТаблицаНоменклатурыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТаблицаНоменклатурыБазоваяЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	ДобавитьТипыЦенНоменклатуры(ТекущиеДанные);
	ПолучениеСтаройБазовойЦены(ТекущиеДанные.ИдентификаторСтроки);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаНоменклатурыБазоваяЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТаблицаНоменклатурыБазоваяЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаНоменклатурыЦенаНоваяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	ПредставлениеЦены = СтрЗаменить(Элементы.ТаблицаНоменклатуры.ТекущийЭлемент.Имя, "ТаблицаНоменклатурыЦенаНовая", "");
	СтрокаТипЦены = Неопределено;
	// Найдем Тип цен по идентификатору
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если НЕ СтрНайти(СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_"), ПредставлениеЦены) = 0 Тогда
			СтрокаТипЦены = ТекущаяСтрока;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьРасчетныеЦеныНаСервере(ТекущиеДанные);
	ТекущиеДанные["ПроцентНаценки"+ПредставлениеЦены] = ?(ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены] = 0, 0, ((ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены]-ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены])/ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены])*100);
	ТекущиеДанные["СуммаНаценки"+ПредставлениеЦены]   = ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены]-ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены];
	// Обновим таблицу цен
	ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", ТекущиеДанные.ИдентификаторСтроки,СтрокаТипЦены.ТипЦен));
	Для Каждого ТекущаяСтрока Из ЦеныНоменклатуры Цикл
		ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
		ТекущаяСтрока.Цена           = ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены];
		ТекущаяСтрока.ПроцентНаценки = ТекущиеДанные["ПроцентНаценки"+ПредставлениеЦены];
		ТекущаяСтрока.СуммаНаценки   = ТекущиеДанные["СуммаНаценки"+ПредставлениеЦены];
	КонецЦикла;
	
	ЗаполнениеЦенНоменклатуры(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ТаблицаНоменклатурыЦенаНоваяПриИзменении(Элемент)
	
	ТаблицаНоменклатурыЦенаНоваяПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТаблицаНоменклатурыСуммаНаценкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	ПредставлениеЦены = СтрЗаменить(Элементы.ТаблицаНоменклатуры.ТекущийЭлемент.Имя, "ТаблицаНоменклатурыСуммаНаценки", "");
	
	СтрокаТипЦены = Неопределено;
	// Найдем Тип цен по идентификатору
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если НЕ СтрНайти(СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_"), ПредставлениеЦены) = 0 Тогда
			СтрокаТипЦены = ТекущаяСтрока;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены] = ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены] + ТекущиеДанные["СуммаНаценки"+ПредставлениеЦены];
	ТекущиеДанные["ПроцентНаценки"+ПредставлениеЦены] = ?(ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены] = 0, 0, ((ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены] - ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены])/ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены])*100);
	// округляем
	НоваяЦена           = ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены];
	ДельтаОкругления    = ?(СтрокаТипЦены.ОкруглятьДо=0, 0, НоваяЦена/СтрокаТипЦены.ОкруглятьДо);
	ДельтаОкругленияЦел = Цел(ДельтаОкругления);
	
	Если ДельтаОкругления<>ДельтаОкругленияЦел Тогда
		НоваяЦена = (ДельтаОкругленияЦел+1)*СтрокаТипЦены.ОкруглятьДо;
	КонецЕсли;
	
	Если НоваяЦена <> ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены] Тогда
		ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены] = НоваяЦена;
	КонецЕсли;
	
	ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", ТекущиеДанные.ИдентификаторСтроки, СтрокаТипЦены.ТипЦен));
	
	Для Каждого ТекущаяСтрока Из ЦеныНоменклатуры Цикл
		ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
		ТекущаяСтрока.Цена           = ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены];
		ТекущаяСтрока.ПроцентНаценки = ТекущиеДанные["ПроцентНаценки"+ПредставлениеЦены];
		ТекущаяСтрока.СуммаНаценки   = ТекущиеДанные["СуммаНаценки"+ПредставлениеЦены];
	КонецЦикла;
	
	ПересчитатьРасчетныеЦеныНаСервере(ТекущиеДанные);
	ЗаполнениеЦенНоменклатуры(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ТаблицаНоменклатурыСуммаНаценкиПриИзменении(Элемент)
	
	ТаблицаНоменклатурыСуммаНаценкиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТаблицаНоменклатурыПроцентНаценкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	ПредставлениеЦены = СтрЗаменить(Элементы.ТаблицаНоменклатуры.ТекущийЭлемент.Имя, "ТаблицаНоменклатурыПроцентНаценки", "");
	
	СтрокаТипЦены = Неопределено;
	// Найдем Тип цен по идентификатору
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если НЕ СтрНайти(СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_"), ПредставлениеЦены) = 0 Тогда
			СтрокаТипЦены = ТекущаяСтрока;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены]    = ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены] + ((ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены] * ТекущиеДанные["ПроцентНаценки"+ПредставлениеЦены])/100);
	ТекущиеДанные["СуммаНаценки"+ПредставлениеЦены] = ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены] - ТекущиеДанные["ЦенаБазовая"+ПредставлениеЦены];
	// округляем
	НоваяЦена           = ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены];
	ДельтаОкругления    = ?(СтрокаТипЦены.ОкруглятьДо=0, 0, НоваяЦена/СтрокаТипЦены.ОкруглятьДо);
	ДельтаОкругленияЦел = Цел(ДельтаОкругления);
	
	Если ДельтаОкругления<>ДельтаОкругленияЦел Тогда
		НоваяЦена = (ДельтаОкругленияЦел+1)*СтрокаТипЦены.ОкруглятьДо;
	КонецЕсли;
	
	Если НоваяЦена <> ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены] Тогда
		ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены] = НоваяЦена;
	КонецЕсли;
	
	ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", ТекущиеДанные.ИдентификаторСтроки,СтрокаТипЦены.ТипЦен));
	Для Каждого ТекущаяСтрока Из ЦеныНоменклатуры Цикл
		ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
		ТекущаяСтрока.Цена           = ТекущиеДанные["ЦенаНовая"+ПредставлениеЦены];
		ТекущаяСтрока.ПроцентНаценки = ТекущиеДанные["ПроцентНаценки"+ПредставлениеЦены];
		ТекущаяСтрока.СуммаНаценки   = ТекущиеДанные["СуммаНаценки"+ПредставлениеЦены];
	КонецЦикла;
	
	ПересчитатьРасчетныеЦеныНаСервере(ТекущиеДанные);
	ЗаполнениеЦенНоменклатуры(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ТаблицаНоменклатурыПроцентНаценкиПриИзменении(Элемент)
	
	ТаблицаНоменклатурыПроцентНаценкиПриИзмененииНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТипыЦен

&НаСервере
Процедура ТаблицаТипыЦенПроцентНаценкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("СтрокаНоменклатуры") Тогда
		ТекущиеДанные = ПараметрыДействия.СтрокаНоменклатуры;
	Иначе
		ТекущиеДанные = ТаблицаТипыЦен.НайтиПоИдентификатору(Элементы.ТаблицаТипыЦен.ТекущаяСтрока);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаНоменклатуры));
	
	Если СтрокаНоменклатуры.Количество() = 0 Тогда
		СтрокаНоменклатурыТипЦен = ТекущиеДанные.ИдентификаторСтроки;
	Иначе
		СтрокаНоменклатурыТипЦен = СтрокаНоменклатуры[0];
	КонецЕсли;
	
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, СтрокаНоменклатурыТипЦен, "ПроцентНаценки", ТекущиеДанные.ПроцентНаценки);
	
	ТекущиеДанные.Цена         = ТекущиеДанные.ЦенаБазовая + ((ТекущиеДанные.ЦенаБазовая * ТекущиеДанные.ПроцентНаценки)/100);
	ТекущиеДанные.СуммаНаценки = ТекущиеДанные.Цена - ТекущиеДанные.ЦенаБазовая;
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, СтрокаНоменклатурыТипЦен, "СуммаНаценки", ТекущиеДанные.СуммаНаценки);
	
	ЦенаОкруглятьДо = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", ТекущиеДанные.ТипЦен))[0].ОкруглятьДо;
	
	// округляем
	НоваяЦена           = ТекущиеДанные.Цена;
	ДельтаОкругления    = ?(ЦенаОкруглятьДо=0, 0, НоваяЦена/ЦенаОкруглятьДо);
	ДельтаОкругленияЦел = Цел(ДельтаОкругления);
	
	Если ДельтаОкругления<>ДельтаОкругленияЦел Тогда
		НоваяЦена = (ДельтаОкругленияЦел+1)*ЦенаОкруглятьДо;
	КонецЕсли;
	
	Если НоваяЦена <> ТекущиеДанные.Цена Тогда
		ТекущиеДанные.Цена = НоваяЦена;
	КонецЕсли;
	
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, СтрокаНоменклатурыТипЦен, "ЦенаНовая", ТекущиеДанные.Цена);
	НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ПересчитатьРасчетныеЦеныНаСервере(НайденныеСтроки[0]);
	КонецЕсли;
	
	ЗаполнениеЦенНоменклатуры(ТекущиеДанные, "ТаблицаТипыЦен");
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаТипыЦенПроцентНаценкиПриИзменении(Элемент)
	
	ТаблицаТипыЦенПроцентНаценкиПриИзмененииНаСервере()
	
КонецПроцедуры 

&НаСервере
Процедура ТаблицаТипыЦенСуммаНаценкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("СтрокаНоменклатуры") Тогда
		ТекущиеДанные = ПараметрыДействия.СтрокаНоменклатуры;
	Иначе
		ТекущиеДанные = ТаблицаТипыЦен.НайтиПоИдентификатору(Элементы.ТаблицаТипыЦен.ТекущаяСтрока);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, ТекущиеДанные.ИдентификаторСтроки, "СуммаНаценки", ТекущиеДанные.СуммаНаценки);
	
	ТекущиеДанные.Цена           = ТекущиеДанные.ЦенаБазовая + ТекущиеДанные.СуммаНаценки;
	ТекущиеДанные.ПроцентНаценки = ?(ТекущиеДанные.ЦенаБазовая = 0, 0, ((ТекущиеДанные.Цена - ТекущиеДанные.ЦенаБазовая)/ТекущиеДанные.ЦенаБазовая)*100);
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, ТекущиеДанные.ИдентификаторСтроки, "ПроцентНаценки", ТекущиеДанные.ПроцентНаценки);
	
	ЦенаОкруглятьДо = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", ТекущиеДанные.ТипЦен))[0].ОкруглятьДо;
	
	// округляем
	НоваяЦена           = ТекущиеДанные.Цена;
	ДельтаОкругления    = ?(ЦенаОкруглятьДо=0, 0, НоваяЦена/ЦенаОкруглятьДо);
	ДельтаОкругленияЦел = Цел(ДельтаОкругления);
	
	Если ДельтаОкругления<>ДельтаОкругленияЦел Тогда
		НоваяЦена = (ДельтаОкругленияЦел+1)*ЦенаОкруглятьДо;
	КонецЕсли;
	
	Если НоваяЦена <> ТекущиеДанные.Цена Тогда
		ТекущиеДанные.Цена = НоваяЦена;
	КонецЕсли;
	
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, ТекущиеДанные.ИдентификаторСтроки, "ЦенаНовая", ТекущиеДанные.Цена);
	НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
	ПересчитатьРасчетныеЦеныНаСервере(НайденныеСтроки[0]);
	
	ЗаполнениеЦенНоменклатуры(ТекущиеДанные, "ТаблицаТипыЦен");
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаТипыЦенСуммаНаценкиПриИзменении(Элемент)
	
	ТаблицаТипыЦенСуммаНаценкиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТаблицаТипыЦенНоваяЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("СтрокаНоменклатуры") Тогда
		ТекущиеДанные = ПараметрыДействия.СтрокаНоменклатуры;
	Иначе
		ТекущиеДанные = ТаблицаТипыЦен.НайтиПоИдентификатору(Элементы.ТаблицаТипыЦен.ТекущаяСтрока);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, ТекущиеДанные.ИдентификаторСтроки, "ЦенаНовая", ТекущиеДанные.Цена);
	
	ТекущиеДанные.ПроцентНаценки = ?(ТекущиеДанные.ЦенаБазовая = 0, 0, ((ТекущиеДанные.Цена-ТекущиеДанные.ЦенаБазовая)/ТекущиеДанные.ЦенаБазовая)*100);
	ТекущиеДанные.СуммаНаценки   = ТекущиеДанные.Цена-ТекущиеДанные.ЦенаБазовая;
	
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, ТекущиеДанные.ИдентификаторСтроки, "СуммаНаценки", ТекущиеДанные.СуммаНаценки);
	ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущиеДанные.ИдентификаторТипаЦен, ТекущиеДанные.ИдентификаторСтроки, "ПроцентНаценки", ТекущиеДанные.ПроцентНаценки);
	
	НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
	
	ПересчитатьРасчетныеЦеныНаСервере(НайденныеСтроки[0]);
	
	ЗаполнениеЦенНоменклатуры(ТекущиеДанные, "ТаблицаТипыЦен");
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаТипыЦенНоваяЦенаПриИзменении(Элемент)
	
	ТаблицаТипыЦенНоваяЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТипыЦен

&НаКлиенте
Процедура ТаблицаТипыЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаТипыЦен.ТекущиеДанные;
	
	Если НЕ ТолькоПросмотр И Элемент.ТекущийЭлемент.Имя = "ТаблицаТипыЦенПараметрыРасчета" И ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияИзменениеРасчетаЦен", ЭтотОбъект, Новый Структура("ТипЦен", ТекущиеДанные.ТипЦен));
		
		ПараметрыФормы = Новый Структура("ХозОперация,Контрагент,ТипЦен,РасчетЦенОт,БазовыйТипЦен,ДокументОснование,Поставщик,СкладКомпании,ПроцентНаценки,ОкруглятьДо,ПроцентНаценкиИзНоменклатуры,ПрайсЛистКонтрагента,БазовоеПодразделение,Партия");
		
		ПараметрыФормы.Вставить("ХозОперация", Объект.ХозОперация);
		ПараметрыФормы.Вставить("Контрагент",  Объект.Контрагент);
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
		
		НайденныеСтроки = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", ТекущиеДанные.ТипЦен));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, НайденныеСтроки[0]);
		КонецЕсли;
		
		ОткрытьФорму("Документ.ИзменениеЦен.Форма.ФормаПараметровГрупповогоРасчета", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаТипыЦенТипЦены" И ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ТипыЦен.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ТипЦен), ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТипыЦенПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановкаПоложенияТекущегоТипаЦенНоменклатуры", 0.1, Истина);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Переместить(Команда)
	
	Если Команда.Имя = "ПереместитьВверх" Тогда
		Смещение = -1;
	Иначе
		Смещение = 1;
	КонецЕсли;
	
	ПеремещениеСтрокиНоменклатуры(Смещение);
	// Пересчитаем номер строки
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура Сортировать(Команда)
	
	УсловиеСортировки = "" + СтрЗаменить(Элементы.ТаблицаНоменклатуры.ТекущийЭлемент.Имя, "ТаблицаНоменклатуры", "");
	
	Если Команда.Имя = "СортироватьПоУбыванию" Тогда
		УсловиеСортировки = УсловиеСортировки + " УБЫВ";
	КонецЕсли;
	
	СортировкаТаблицыНоменклатуры(УсловиеСортировки);
	// Пересчитаем номер строки
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТиповЦен(Команда)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияИзмененияНастроекТиповЦен", ЭтотОбъект);
	
	СписокТиповЦен = Новый СписокЗначений;
	
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		СписокТиповЦен.Добавить(ТекущаяСтрока.ТипЦен);
	КонецЦикла;
	
	ОткрытьФорму("Документ.ИзменениеЦен.Форма.ФормаНастройкиТиповЦен", Новый Структура("СписокВидимости,СписокТиповЦен", ВидимостьКолонок, СписокТиповЦен), ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПересчитатьЦенуНоменклатуры(Команда)
	
	ПересчитатьЦену(Истина, 2);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПересчитатьЦенуТипаЦены(Команда)
	
	ПересчитатьЦену(Истина, 3);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПересчитатьЦенуВДокументе(Команда)
	
	ПересчитатьЦену(Истина, 1);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,,,, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьКолонкуТипаЦен(ТипЦен, МассивСтарыхЦен = Неопределено)
	
	ИдентификаторТипаЦен = СтрЗаменить(ТипЦен.УникальныйИдентификатор(),"-","_");
	Если НЕ Элементы.Найти("ТаблицаНоменклатурыГруппа"+ИдентификаторТипаЦен) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Создадим новые колонки
	НоваяГруппаКолонок           = Элементы.Добавить("ТаблицаНоменклатурыГруппа"+ИдентификаторТипаЦен, Тип("ГруппаФормы"), Элементы.ТаблицаНоменклатуры);
	НоваяГруппаКолонок.Вид       = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонок.Заголовок = ТипЦен.Наименование;
	НоваяГруппаКолонок.ОтображатьВШапке = Истина;
	НоваяГруппаКолонок.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаКолонок.Подсказка = НСтр("ru = 'Тип цен ""'") + ТипЦен.Наименование + """";
	
	МассивРеквизитов = Новый Массив;
	
	НовыйРеквизит = Новый РеквизитФормы(
		"ЕдиницаИзмерения" + ИдентификаторТипаЦен,
		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"),
		"ТаблицаНоменклатуры",
		НСтр("ru = 'Ед.'")
	);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Коэффициент" + ИдентификаторТипаЦен,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)),
		"ТаблицаНоменклатуры",
		НСтр("ru = 'Коэфф.'")
	);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"ЦенаСтарая" + ИдентификаторТипаЦен,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)),
		"ТаблицаНоменклатуры",
		НСтр("ru = 'Старая цена'"));
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"ЦенаБазовая" + ИдентификаторТипаЦен,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)),
		"ТаблицаНоменклатуры",
		НСтр("ru = 'Базовая цена'"));
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"ПроцентНаценки" + ИдентификаторТипаЦен,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Любой) ),
		"ТаблицаНоменклатуры",
		НСтр("ru = '% наценки'"));
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"СуммаНаценки" + ИдентификаторТипаЦен,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2 , ДопустимыйЗнак.Любой)),
		"ТаблицаНоменклатуры",
		НСтр("ru = 'Наценка'"));
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"ЦенаНовая" + ИдентификаторТипаЦен,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)),
		"ТаблицаНоменклатуры",
		НСтр("ru = 'Новая цена'"));
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	Если МассивСтарыхЦен = Неопределено Тогда
		ИзменитьРеквизиты(МассивРеквизитов);
	Иначе
		ИзменитьРеквизиты(МассивРеквизитов, МассивСтарыхЦен);
	КонецЕсли;
	
	Для Индекс = 0 По МассивРеквизитов.Количество() - 1 Цикл
		Если Индекс = 0 Тогда
			НоваяГруппаКолонокЕдиница    = Элементы.Добавить("ТаблицаНоменклатурыГруппаЕдиницаКоэффициент"+ИдентификаторТипаЦен, Тип("ГруппаФормы"), НоваяГруппаКолонок);
			НоваяГруппаКолонокЕдиница.Вид       = ВидГруппыФормы.ГруппаКолонок;
			НоваяГруппаКолонокЕдиница.Заголовок = "";
			НоваяГруппаКолонокЕдиница.ОтображатьВШапке = Ложь;
			НоваяГруппаКолонокЕдиница.Группировка = ГруппировкаКолонок.ВЯчейке;
			
			НоваяГруппаКолонокЕдиница.Видимость = ВидимостьКолонок.НайтиПоЗначению("ЕдиницаИзмерения") <> Неопределено;
			
			// Создадим новые колонки
			ТекСтрока = МассивРеквизитов[0];
			НоваяКолонка = Элементы.Добавить("ТаблицаНоменклатуры"+ТекСтрока.Имя, Тип("ПолеФормы"), НоваяГруппаКолонокЕдиница);
			НоваяКолонка.Вид=ВидПоляФормы.ПолеВвода;
			НоваяКолонка.ПутьКДанным = "ТаблицаНоменклатуры."+ТекСтрока.Имя;
			НоваяКолонка.Ширина = 4;
			НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
			НоваяКолонка.ТолькоПросмотр = Истина;
			НоваяКолонка.Подсказка = НСтр("ru = 'Единица измерения'");
			
			// Создадим новые колонки
			ТекСтрока = МассивРеквизитов[1];
			НоваяКолонка = Элементы.Добавить("ТаблицаНоменклатуры"+ТекСтрока.Имя, Тип("ПолеФормы"), НоваяГруппаКолонокЕдиница);
			НоваяКолонка.Вид=ВидПоляФормы.ПолеВвода;
			НоваяКолонка.ПутьКДанным = "ТаблицаНоменклатуры."+ТекСтрока.Имя;
			НоваяКолонка.Ширина = 4;
			НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
			НоваяКолонка.ТолькоПросмотр = Истина;
			НоваяКолонка.Подсказка = "Коэффициент";
			
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		ТекСтрока = МассивРеквизитов[Индекс];
		// Создадим новые колонки
		НоваяКолонка = Элементы.Добавить("ТаблицаНоменклатуры"+ТекСтрока.Имя, Тип("ПолеФормы"), НоваяГруппаКолонок);
		НоваяКолонка.Вид=ВидПоляФормы.ПолеВвода;
		НоваяКолонка.ПутьКДанным = "ТаблицаНоменклатуры."+ТекСтрока.Имя;
		НоваяКолонка.Ширина = 11;
		НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
		
		Если СтрНайти(ТекСтрока.Имя, "ЦенаСтарая") ИЛИ СтрНайти(ТекСтрока.Имя, "ЦенаБазовая") Тогда
			НоваяКолонка.ТолькоПросмотр = Истина;
			Если СтрНайти(ТекСтрока.Имя, "ЦенаСтарая") Тогда
				НоваяКолонка.Подсказка = "Старая цена";
				НоваяКолонка.Подсказка = НСтр("ru = 'Старая цена'");
			ИначеЕсли СтрНайти(ТекСтрока.Имя, "ЦенаБазовая") Тогда
				НоваяКолонка.Подсказка = НСтр("ru = 'Базовая цена'");
			КонецЕсли;
		Иначе
			ИмяРеквизита = "";
			Если СтрНайти(ТекСтрока.Имя, "ЦенаНовая") Тогда
				ИмяРеквизита = "ЦенаНовая";
				НоваяКолонка.Подсказка = НСтр("ru = 'Новая цена'");
			ИначеЕсли СтрНайти(ТекСтрока.Имя, "СуммаНаценки") Тогда
				ИмяРеквизита = "СуммаНаценки";
				НоваяКолонка.Подсказка = НСтр("ru = 'Сумма наценки'");
			ИначеЕсли СтрНайти(ТекСтрока.Имя, "ПроцентНаценки") Тогда
				ИмяРеквизита = "ПроцентНаценки";
				НоваяКолонка.Подсказка = НСтр("ru = 'Процент наценки'");
			КонецЕсли;
			Если НЕ ИмяРеквизита = "" Тогда
				НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаНоменклатуры"+ИмяРеквизита+"ПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", ТекСтрока.ИдентификаторСтроки, ТипЦен));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекСтрока["ЕдиницаИзмерения"+ИдентификаторТипаЦен] = НайденныеСтроки[0].ЕдиницаИзмерения;
			ТекСтрока["Коэффициент"+ИдентификаторТипаЦен]      = НайденныеСтроки[0].Коэффициент;
			ТекСтрока["ЦенаНовая"+ИдентификаторТипаЦен]        = НайденныеСтроки[0].Цена;
			ТекСтрока["ЦенаСтарая"+ИдентификаторТипаЦен]       = НайденныеСтроки[0].ЦенаСтарая;
			ТекСтрока["ЦенаБазовая"+ИдентификаторТипаЦен]      = НайденныеСтроки[0].ЦенаБазовая;
			ТекСтрока["ПроцентНаценки"+ИдентификаторТипаЦен]   = НайденныеСтроки[0].ПроцентНаценки;
			ТекСтрока["СуммаНаценки"+ИдентификаторТипаЦен]     = НайденныеСтроки[0].СуммаНаценки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьКолонкиРасчетныхЦен(ТипЦен, МассивСтарыхЦен = Неопределено)
	
	БазовыйТипЦен = ТипЦен.БазовыйТипЦен;
	
	МассивНовыхЦен = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТипыЦен.Ссылка КАК ТипЦен,
	                      |	ТипыЦен.БазовыйТипЦен КАК БазовыйТипЦен,
	                      |	ТипыЦен.Наименование КАК Наименование,
	                      |	ТипыЦен.ПроцентСкидкиНаценки КАК Процент,
	                      |	ТипыЦен.ПроцентыСкидкиНаценки.(
	                      |		ЦеноваяГруппа КАК ЦеноваяГруппа,
	                      |		ПроцентСкидкиНаценки КАК Процент,
	                      |		БазовыйТипЦен КАК БазовыйТипЦен
	                      |	) КАК ПроцентыСкидкиНаценки,
	                      |	ТипыЦен.ВалютаЦены КАК ВалютаЦены,
	                      |	ТипыЦен.ВВалютеУчета КАК ВВалютеУчета
	                      |ИЗ
	                      |	Справочник.ТипыЦен КАК ТипыЦен
	                      |ГДЕ
	                      |	ТипыЦен.Ссылка = &ТипЦен");
	
	ЗаполнитьТаблицуРасчетныхЦен(Запрос, ТаблицаНаценокРасчетныхЦен, ТипЦен);
	
	РасчетныеТипыЦен = ТаблицаНаценокРасчетныхЦен.НайтиСтроки(Новый Структура("Имя", "Цена" + СтрЗаменить(ТипЦен.УникальныйИдентификатор(),"-","_")));
	Если РасчетныеТипыЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРеквизитТипаЦен = (МассивСтарыхЦен = Неопределено);
	РеквизитыФормы = Новый Массив;
	
	Для Каждого ТекущийРеквизит Из ПолучитьРеквизиты("ТаблицаНоменклатуры") Цикл
		РеквизитыФормы.Добавить(ТекущийРеквизит.Имя);
	КонецЦикла;
	
	// Заполним новые цены
	Для Каждого ТекСтрока Из РасчетныеТипыЦен Цикл
		НовыйРеквизит = Новый РеквизитФормы(ТекСтрока.Имя, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "ТаблицаНоменклатуры", ТекСтрока.Заголовок);
		
		Если ПроверитьРеквизитТипаЦен И НЕ РеквизитыФормы.Найти(НовыйРеквизит.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНовыхЦен.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	Если МассивНовыхЦен.Количество()>0 Тогда
		Если МассивСтарыхЦен = Неопределено Тогда
			ИзменитьРеквизиты(МассивНовыхЦен);
		Иначе
			ИзменитьРеквизиты(МассивНовыхЦен, МассивСтарыхЦен);
		КонецЕсли;
		
		// Создадим новые колонки
		Для Каждого ТекСтрока Из МассивНовыхЦен Цикл
			Если Элементы.Найти("ТаблицаНоменклатуры"+ТекСтрока.Имя) = Неопределено Тогда
				НоваяКолонка = Элементы.Добавить("ТаблицаНоменклатуры"+ТекСтрока.Имя, Тип("ПолеФормы"), Элементы.ТаблицаНоменклатуры);
				НоваяКолонка.ПутьКДанным = "ТаблицаНоменклатуры."+ТекСтрока.Имя;
				НоваяКолонка.Ширина = 11;
				НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
				НоваяКолонка.Подсказка = НСтр("ru = 'Тип цен ""'") + ТекСтрока.Заголовок + """";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьРеквизитовЦен()
	
	ВидимостьЕдиницыИзмерения = (НЕ ВидимостьКолонок.НайтиПоЗначению("ЕдиницаИзмерения") = Неопределено);
	ВидимостьЦенаСтарая       = (НЕ ВидимостьКолонок.НайтиПоЗначению("ЦенаСтарая") = Неопределено);
	ВидимостьЦенаБазовая      = (НЕ ВидимостьКолонок.НайтиПоЗначению("ЦенаБазовая") = Неопределено);
	ВидимостьПроцентНаценки   = (НЕ ВидимостьКолонок.НайтиПоЗначению("ПроцентНаценки") = Неопределено);
	ВидимостьСуммаНаценки     = (НЕ ВидимостьКолонок.НайтиПоЗначению("СуммаНаценки") = Неопределено);
	
	ВыводитьТолькоНовуюЦену = ВидимостьКолонок.Количество() = 1 И ВидимостьКолонок[0].Значение = "ЦенаНовая";
	
	// Обновим видимость колонок типов цен
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если ТекущаяСтрока.ТипЦен.Рассчитывается Тогда
			Продолжить;
		КонецЕсли;
		ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
		
		Элементы["ТаблицаНоменклатурыГруппаЕдиницаКоэффициент"+ПредставлениеЦены].Видимость = ВидимостьЕдиницыИзмерения;
		Элементы["ТаблицаНоменклатурыЦенаСтарая"+ПредставлениеЦены].Видимость               = ВидимостьЦенаСтарая;
		Элементы["ТаблицаНоменклатурыЦенаБазовая"+ПредставлениеЦены].Видимость              = ВидимостьЦенаБазовая;
		Элементы["ТаблицаНоменклатурыПроцентНаценки"+ПредставлениеЦены].Видимость           = ВидимостьПроцентНаценки;
		Элементы["ТаблицаНоменклатурыСуммаНаценки"+ПредставлениеЦены].Видимость             = ВидимостьСуммаНаценки;
		Элементы["ТаблицаНоменклатурыЦенаНовая"+ПредставлениеЦены].Видимость                = Истина;
		Элементы["ТаблицаНоменклатурыЦенаНовая"+ПредставлениеЦены].ОтображатьВШапке         = (НЕ ВыводитьТолькоНовуюЦену);
	КонецЦикла;
	
	УстановитьВидимостьБазовойЦены();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьБазовойЦены()
	
	// Проверим - установлена ли видимость колонки "Базовая цена"
	ВидимостьБазовойЦены = НЕ ВидимостьКолонок.НайтиПоЗначению("ЦенаБазовая") = Неопределено;
	
	БазоваяЦенаНеУстановлена = Истина;
	
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если ТекущаяСтрока.ТипЦен.Рассчитывается Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("ТипЦен", ТекущаяСтрока.ТипЦен);
		НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(СтруктураОтбора);
		
		БазоваяЦенаНеУстановленаДляТипаЦен = Истина;
		
		Для Каждого ТекущаяСтрокаЦены Из НайденныеСтроки Цикл
			Если ТекущаяСтрокаЦены.ЦенаБазовая <> 0 Тогда
				БазоваяЦенаНеУстановленаДляТипаЦен = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ БазоваяЦенаНеУстановленаДляТипаЦен Тогда
			БазоваяЦенаНеУстановлена = Ложь;
		КонецЕсли;
		
		Элементы["ТаблицаНоменклатурыЦенаБазовая"+СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_")].Видимость = НЕ БазоваяЦенаНеУстановленаДляТипаЦен И ВидимостьБазовойЦены;
	КонецЦикла;
	
	Элементы.ТаблицаТипыЦенБазоваяЦена.Видимость = НЕ БазоваяЦенаНеУстановлена;
	
КонецПроцедуры 

&НаСервере
Функция СформироватьСтрокуПараметровРасчета(ПараметрыРасчетаЦены)
	
	РасчетЦены = "";
	
	Если ПараметрыРасчетаЦены.РасчетЦенОт = 0 Тогда
		РасчетЦены = НСтр("ru = 'От базового типа цен:'") + Символы.НПП            + Объект.БазовыйТипЦен;
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 1 Тогда
		РасчетЦены = НСтр("ru = 'От документа основания'");
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 2 Тогда
		РасчетЦены = НСтр("ru = 'От цен поставщика:'") + Символы.НПП               + Объект.Поставщик;
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 3 Тогда
		РасчетЦены = НСтр("ru = 'От себестоимости в регл. валюте:'") + Символы.НПП + Объект.СкладКомпании;
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 5 Тогда
		РасчетЦены = НСтр("ru = 'От себестоимости в упр. валюте:'") + Символы.НПП  + Объект.СкладКомпании;
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 4 Тогда
		РасчетЦены = НСтр("ru = 'От прайс-листа контрагента:'") + Символы.НПП      + Объект.ПрайсЛистКонтрагента;
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 6 Тогда
		РасчетЦены = НСтр("ru = 'От базового подразделения:'") + Символы.НПП       + Объект.БазовоеПодразделение;
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 7 Тогда
		РасчетЦены = НСтр("ru = 'От базовой единицы измерения'");
	ИначеЕсли ПараметрыРасчетаЦены.РасчетЦенОт = 8 Тогда
		РасчетЦены = НСтр("ru = 'По себестоимости выбранной партии: '") + Символы.НПП + Объект.Партия;
	КонецЕсли;
	
	РасчетЦены = РасчетЦены + ";" + Символы.НПП+ НСтр("ru = 'процент наценки:'") + Символы.НПП 
					+ ?(ПараметрыРасчетаЦены.ПроцентНаценкиИзНоменклатуры, НСтр("ru = 'из номенклатуры'"), ПараметрыРасчетаЦены.ПроцентНаценки)
					+ ";" + Символы.НПП+ НСтр("ru = 'округлять до:'") + Символы.НПП + ПараметрыРасчетаЦены.ОкруглятьДо;
	
	Возврат РасчетЦены;
	
КонецФункции 

&НаСервере
Процедура ДобавитьТипыЦенНоменклатуры(Знач СтрокаНоменклатура, Копирование = Ложь, ПолноеЗаполнение = Ложь)
	
	Если СтрокаНоменклатура = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаНоменклатура) = Тип("Число") Тогда
		СтрокаНоменклатура = ТаблицаНоменклатуры[СтрокаНоменклатура];
	КонецЕсли;
	
	ИдентификаторНоменклатуры = СтрокаНоменклатура.ИдентификаторСтроки;
	// Проверим наличие типов цен для данной номенклатуры
	ТипыЦенНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторНоменклатуры));
	
	Номенклатура = СтрокаНоменклатура.Номенклатура;
	ВалютаУчета  = СтрокаНоменклатура.ВалютаУчета;
	
	УчетЦенТолькоВРазрезеДопПараметров = Номенклатура.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров;
	НеЗаполненаХарактеристикаНоменклатуры = НЕ ЗначениеЗаполнено(СтрокаНоменклатура.ХарактеристикаНоменклатуры)
		И НЕ СтрокаНоменклатура.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 3
		И СтрокаНоменклатура.РучноеСписаниеХарактеристик;
	НеЗаполненаЕдиницаИзмерения = НЕ ЗначениеЗаполнено(СтрокаНоменклатура.ЕдиницаИзмерения);
	
	Если ТипыЦенНоменклатуры.Количество() = Объект.ПараметрыРасчета.Количество() Тогда
		// Добавлять не надо
		СтрокаНоменклатура.ПараметрыУсловногоОформления = "";
		// Если цена в валюте номенклатуры, то установим данную валюту
		Для Каждого ТекущаяСтрока Из ТипыЦенНоменклатуры Цикл
			Если ТекущаяСтрока.ТипЦен.ВВалютеУчета Тогда
				ТекущаяСтрока.Валюта = ВалютаУчета;
			КонецЕсли;
			
			// пересчитаем параметры для условного оформления
			ТекущаяСтрока.ТолькоПросмотр = УчетЦенТолькоВРазрезеДопПараметров
				И ((ТекущаяСтрока.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры) ИЛИ (ТекущаяСтрока.Аналитика = 3 И НеЗаполненаЕдиницаИзмерения));
			Если ТекущаяСтрока.ТолькоПросмотр Тогда
				ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
				ПоХарактеристике  = УчетЦенТолькоВРазрезеДопПараметров
					И ТекущаяСтрока.Аналитика = 2
					И НеЗаполненаХарактеристикаНоменклатуры;
				ПараметрыУсловногоОформления = "";
				ПараметрыУсловногоОформления = "ТолькоПросмотр" + ПредставлениеЦены;
				ПараметрыУсловногоОформления = ПараметрыУсловногоОформления
					+ ?(ПоХарактеристике, "ПоХарактеристике", "ПоЕдиницеИзмерения")
					+ ПредставлениеЦены;
				СтрокаНоменклатура.ПараметрыУсловногоОформления = СтрокаНоменклатура.ПараметрыУсловногоОформления + ПараметрыУсловногоОформления;
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если ТипыЦенНоменклатуры.Количество() > 0 Тогда
		Для Каждого ТекущаяСтрока Из ТипыЦенНоменклатуры Цикл
			ТаблицаТипыЦен.Удалить(ТекущаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаНоменклатура.ПараметрыУсловногоОформления = "";
	
	Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда
		ВидСтрокиНоменклатуры = 4;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНоменклатура.ХарактеристикаНоменклатуры) И СтрокаНоменклатура.ЕдиницаИзмерения = СтрокаНоменклатура.ОсновнаяЕдиницаИзмерения Тогда
		// Доступны все
		ВидСтрокиНоменклатуры = 1;
	ИначеЕсли ЗначениеЗаполнено(СтрокаНоменклатура.ХарактеристикаНоменклатуры) Тогда
		// Только характеристика
		ВидСтрокиНоменклатуры = 2;
	Иначе
		// Только по единице
		ВидСтрокиНоменклатуры = 3;
	КонецЕсли;
	
	Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
		НоваяСтрока = ТаблицаТипыЦен.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторНоменклатуры;
		НоваяСтрока.ТипЦен         = ТекущийТипЦен.ТипЦен;
		НоваяСтрока.Рассчитывается = ТекущийТипЦен.ТипЦен.Рассчитывается;
		Если НоваяСтрока.Рассчитывается Тогда
			// mikolv1
			ОбновитьКурсыВалют(НоваяСтрока.ТипЦен.БазовыйТипЦен.ВалютаЦены);
			ОбновитьКурсыВалют(НоваяСтрока.ТипЦен.ВалютаЦены);
			Продолжить;
		КонецЕсли;
		ПредставлениеЦены = СтрЗаменить(НоваяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
		НоваяСтрока.Валюта = ?(НоваяСтрока.ТипЦен.ВВалютеУчета, ВалютаУчета, НоваяСтрока.ТипЦен.ВалютаЦены);
		ОбновитьКурсыВалют(НоваяСтрока.Валюта);
		НоваяСтрока.ПараметрыРасчета    = СформироватьСтрокуПараметровРасчета(ТекущийТипЦен);
		НоваяСтрока.ИдентификаторТипаЦен = ПредставлениеЦены;
		Аналитика = "";
		АлгоритмПолученияЦены = ТекущийТипЦен.ТипЦен.АлгоритмПолученияЦены;
		Если АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре Тогда
			НоваяСтрока.Аналитика = 1;
		ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			НоваяСтрока.Аналитика = 2;
			Аналитика = НСтр("ru = '(по характеристике)'");
		ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			НоваяСтрока.Аналитика = 3;
			Аналитика = НСтр("ru = '(по единице измерения)'");
		КонецЕсли;
		
		НоваяСтрока.ТолькоПросмотр = УчетЦенТолькоВРазрезеДопПараметров
			И ((НоваяСтрока.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры) ИЛИ (НоваяСтрока.Аналитика = 3 И НеЗаполненаЕдиницаИзмерения));
		ПоХарактеристике = УчетЦенТолькоВРазрезеДопПараметров И НоваяСтрока.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры;
		
		НоваяСтрока.Представление = "" + НоваяСтрока.ТипЦен + " " + Аналитика;
		НоваяСтрока.ВидСтрокиНоменклатуры = ВидСтрокиНоменклатуры;
		
		Если НоваяСтрока.ТолькоПросмотр Тогда
			ПараметрыУсловногоОформления = "";
			ПараметрыУсловногоОформления = "ТолькоПросмотр" + ПредставлениеЦены;
			ПараметрыУсловногоОформления = ПараметрыУсловногоОформления
				+ ?(ПоХарактеристике, "ПоХарактеристике", "ПоЕдиницеИзмерения")
				+ ПредставлениеЦены;
			СтрокаНоменклатура.ПараметрыУсловногоОформления = СтрокаНоменклатура.ПараметрыУсловногоОформления + ПараметрыУсловногоОформления;
		КонецЕсли;
		
		// Заполним цены при копировании строк
		Если Копирование Тогда
			НоваяСтрока.Цена           = СтрокаНоменклатура["ЦенаНовая"      + ПредставлениеЦены];
			НоваяСтрока.ЦенаСтарая     = СтрокаНоменклатура["ЦенаСтарая"     + ПредставлениеЦены];
			НоваяСтрока.ЦенаБазовая    = СтрокаНоменклатура["ЦенаБазовая"    + ПредставлениеЦены];
			НоваяСтрока.ПроцентНаценки = СтрокаНоменклатура["ПроцентНаценки" + ПредставлениеЦены];
			НоваяСтрока.СуммаНаценки   = СтрокаНоменклатура["СуммаНаценки"   + ПредставлениеЦены];
		КонецЕсли;
	КонецЦикла;
	
	Если ПолноеЗаполнение Тогда
		ЗаполнитьЕдиницыИзмеренияТипамЦен(СтрокаНоменклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеПараметровРасчетаТипаЦены(СтруктураПараметровРасчета, ЗаполнятьПроцентНаценки = Ложь)
	
	
	ДобавлениеТипаЦены(СтруктураПараметровРасчета.ТипЦен, СтруктураПараметровРасчета, ЗаполнятьПроцентНаценки, Истина);
	// Пересчет расчетных цен документа
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ПересчитатьРасчетныеЦеныНаСервере(ТекСтрока);
	КонецЦикла;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияИзменениеРасчетаЦен(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения.ПроцентНаценкиИзНоменклатуры Тогда
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПроцентНаценкиИзНоменклатуры", ЭтотОбъект, Новый Структура("ПараметрыРасчетаТипаЦен", РезультатОповещения));
		ТекстВопроса = НСтр("ru = 'Заполнить % наценки по типу цен согласно % наценки из справочника номенклатуры?'");
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ИзменениеПараметровРасчетаТипаЦены(РезультатОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияИзмененияНастроекТиповЦенНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	УправлениеДиалогомНаСервере();
	НовыйСписокЦен = РезультатОповещения;
	ИзменилсяСоставТиповЦен = (НЕ НовыйСписокЦен.Количество() = Объект.ПараметрыРасчета.Количество());
	
	Если НЕ ИзменилсяСоставТиповЦен Тогда
		Для Индекс = 0 По Объект.ПараметрыРасчета.Количество() - 1 Цикл
			Если НЕ НовыйСписокЦен[Индекс].Значение = Объект.ПараметрыРасчета[Индекс].ТипЦен Тогда
				ИзменилсяСоставТиповЦен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ИзменилсяСоставТиповЦен Тогда
			УстановитьВидимостьРеквизитовЦен();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокТиповЦен = Новый СписокЗначений;
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		СписокТиповЦен.Добавить(ТекущаяСтрока.ТипЦен);
	КонецЦикла;
	
	// Удалим неиспользуемые типы цен
	МассивСтарыхЦен          = Новый Структура;
	МассивСтарыхЦенЭлементы  = Новый Массив;
	МассивСтарыхЦенРасчетных = Новый Массив;
	МассивНовыхЦен           = Новый Массив;
	КоличествоТиповЦен       = Объект.ПараметрыРасчета.Количество();
	МассивСтарыхЦенРасчетныхЭлементов = Новый Массив;
	МассивРасчетныхТиповЦен = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		НайденныеСтроки = НовыйСписокЦен.НайтиПоЗначению(ТекущаяСтрока.ТипЦен);
		Если НайденныеСтроки = Неопределено Тогда
			СтруктураПоиска = Новый Структура("ТипЦен", ТекущаяСтрока.ТипЦен);
			НайденныеТипыЦен = ТаблицаТипыЦен.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ТекСтрока Из НайденныеТипыЦен Цикл
				ТаблицаТипыЦен.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
		ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
		
		Если ТекущаяСтрока.ТипЦен.Рассчитывается Тогда
			МассивРасчетныхТиповЦен = Новый Массив;
			МассивРасчетныхТиповЦен.Добавить("ТаблицаНоменклатуры.Цена"+ПредставлениеЦены);
			МассивСтарыхЦен.Вставить("ТипЦен"+СтрЗаменить(ПредставлениеЦены, "_", ""), МассивРасчетныхТиповЦен);
			МассивСтарыхЦенРасчетныхЭлементов.Добавить("ТаблицаНоменклатурыЦена"+ПредставлениеЦены);
		Иначе
			МассивДляУдаления = Новый Массив;
			МассивДляУдаления.Добавить("ТаблицаНоменклатуры.ЕдиницаИзмерения"+ПредставлениеЦены);
			МассивДляУдаления.Добавить("ТаблицаНоменклатуры.Коэффициент"+ПредставлениеЦены);
			МассивДляУдаления.Добавить("ТаблицаНоменклатуры.ЦенаСтарая"+ПредставлениеЦены);
			МассивДляУдаления.Добавить("ТаблицаНоменклатуры.ЦенаБазовая"+ПредставлениеЦены);
			МассивДляУдаления.Добавить("ТаблицаНоменклатуры.ПроцентНаценки"+ПредставлениеЦены);
			МассивДляУдаления.Добавить("ТаблицаНоменклатуры.СуммаНаценки"+ПредставлениеЦены);
			МассивДляУдаления.Добавить("ТаблицаНоменклатуры.ЦенаНовая"+ПредставлениеЦены);
			МассивСтарыхЦен.Вставить("ТипЦен"+СтрЗаменить(ПредставлениеЦены, "_", ""), МассивДляУдаления);
			
			МассивСтарыхЦенЭлементы.Добавить("ТаблицаНоменклатурыГруппа"+ПредставлениеЦены);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНаценокРасчетныхЦен.Очистить();
	
	ТаблицыТиповЦенНоменклатур = ТаблицаТипыЦен.Выгрузить();
	ОчиститьТаблицуТиповЦен(Истина);
	
	// Удалим старые колонки
	Для Каждого ТекущаяСтрока Из МассивСтарыхЦенЭлементы Цикл
		Если Элементы.Найти(ТекущаяСтрока) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элементы.Удалить(Элементы[ТекущаяСтрока]);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из МассивСтарыхЦенРасчетныхЭлементов Цикл
		Если Элементы.Найти(ТекущаяСтрока) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элементы.Удалить(Элементы[ТекущаяСтрока]);
	КонецЦикла;
	
	СтарыйСписокТиповЦен = Новый СписокЗначений;
	СтарыйСписокТиповЦен.ЗагрузитьЗначения(СписокТиповЦен.ВыгрузитьЗначения());
	СписокТиповЦен.Очистить();
	
	СписокТиповЦен.ЗагрузитьЗначения(НовыйСписокЦен.ВыгрузитьЗначения());
	
	Для каждого ТекущийТипЦен Из СтарыйСписокТиповЦен Цикл
		НайденныеТипыЦен = СписокТиповЦен.НайтиПоЗначению(ТекущийТипЦен.Значение);
		Если НайденныеТипыЦен = Неопределено Тогда
			ПредставлениеЦены = СтрЗаменить(ТекущийТипЦен.Значение.УникальныйИдентификатор(),"-","_");
			ИзменитьРеквизиты(, МассивСтарыхЦен["ТипЦен"+СтрЗаменить(ПредставлениеЦены, "_", "")]);
			ПараметрРасчетаЦены = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", ТекущийТипЦен.Значение));
			Объект.ПараметрыРасчета.Удалить(ПараметрРасчетаЦены[0]);
		КонецЕсли;
	КонецЦикла;
	
	ВремТаблицаПараметровРасчета = Объект.ПараметрыРасчета.Выгрузить();
	Объект.ПараметрыРасчета.Очистить();
	
	Для Каждого ТекущаяСтрока Из СписокТиповЦен Цикл
		НайденныеСтроки = СтарыйСписокТиповЦен.НайтиПоЗначению(ТекущаяСтрока.Значение);
		
		Если НайденныеСтроки = Неопределено Тогда
			Если ТекущаяСтрока.Значение.Рассчитывается Тогда
				УстановитьКолонкиРасчетныхЦен(ТекущаяСтрока.Значение);
			Иначе
				СоздатьКолонкуТипаЦен(ТекущаяСтрока.Значение);
			КонецЕсли;
		Иначе
			ИмяТипаЦены = СтрЗаменить(ТекущаяСтрока.Значение.Наименование, " ", "");
			ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.Значение.УникальныйИдентификатор(),"-","_");
			
			Если ТекущаяСтрока.Значение.Рассчитывается Тогда
				УстановитьКолонкиРасчетныхЦен(ТекущаяСтрока.Значение, МассивСтарыхЦен["ТипЦен"+СтрЗаменить(ПредставлениеЦены, "_", "")]);
			Иначе
				СоздатьКолонкуТипаЦен(ТекущаяСтрока.Значение, МассивСтарыхЦен["ТипЦен"+СтрЗаменить(ПредставлениеЦены, "_", "")]);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ТипЦен", ТекущаяСтрока.Значение);
		
		// Для сохранения порядка последовательности типов цен перезапишем ТЧ Параметры расчета.
		СтрокаПараметровРасчета = ВремТаблицаПараметровРасчета.НайтиСтроки(СтруктураПоиска);
		НоваяСтрока        = Объект.ПараметрыРасчета.Добавить();
		Если СтрокаПараметровРасчета.Количество() = 0 Тогда
			НоваяСтрока.ТипЦен = ТекущаяСтрока.Значение;
			НоваяСтрока.РасчетЦенОт = 0;
			НоваяСтрока.ОкруглятьДо = 0.01;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметровРасчета[0]);
		КонецЕсли;
		
		НайденныеТипыЦен = ТаблицыТиповЦенНоменклатур.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеТипыЦен.Количество() = 0 Тогда
			ДобавлениеТипаЦены(ТекущаяСтрока.Значение, НоваяСтрока,,, Ложь);
		Иначе
			Для Каждого ТекущаяСтрокаТипаЦен Из НайденныеТипыЦен Цикл
				НоваяСтрока = ТаблицаТипыЦен.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаТипаЦен);
				НоваяСтрока.Рассчитывается = НоваяСтрока.ТипЦен.Рассчитывается;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТаблицуПараметрыРасчета();
	ПерерасчетРасчетныхЦен();
	УстановитьВидимостьРеквизитовЦен();
	УстановитьУсловноеОформление();
	
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		ЗаполнитьЕдиницыИзмеренияТипамЦен(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияИзмененияНастроекТиповЦен(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменилсяСоставВидимостиКолонок = Ложь;
	
	ТекущийСоставКолонок = ВидимостьКолонок.ВыгрузитьЗначения();
	НовыйСоставКолонок   = РезультатОповещения.РезультатКолонки;
	
	Для Каждого ТекущаяСтрока Из ТекущийСоставКолонок Цикл
		Если НовыйСоставКолонок.Найти(ТекущаяСтрока) = Неопределено Тогда
			ИзменилсяСоставВидимостиКолонок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ИзменилсяСоставВидимостиКолонок Тогда
		Для Каждого ТекущаяСтрока Из НовыйСоставКолонок Цикл
			Если ТекущийСоставКолонок.Найти(ТекущаяСтрока) = Неопределено Тогда
				ИзменилсяСоставВидимостиКолонок = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилсяСоставВидимостиКолонок Тогда
		ВидимостьКолонок.Очистить();
		ВидимостьКолонок.ЗагрузитьЗначения(РезультатОповещения.РезультатКолонки);
		СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияИзмененияНастроекТиповЦенНаСервере(РезультатОповещения.ТекущийСписокТипЦен, ДополнительныеПараметры);
	
	ТекущиеДанныеТипаЦен = Элементы.ТаблицаТипыЦен.ТекущиеДанные;
	Если ТекущиеДанныеТипаЦен = Неопределено Тогда
		Элементы.ТаблицаНоменклатурыПересчитатьЦенуТипаЦены.Заголовок = НСтр("ru = 'Для типа цен'");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЦеныНоменклатурыПоТипуЦен(ТипЦены, СтрокаПараметровРасчета, ЗаполнятьПроцентНаценки)
	
	РасчетЦены = СформироватьСтрокуПараметровРасчета(СтрокаПараметровРасчета);
	
	ВалютаТипаЦены  = СтрокаПараметровРасчета.ТипЦен.ВалютаЦены;
	ВВалютеУчета    = СтрокаПараметровРасчета.ТипЦен.ВВалютеУчета;
	
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		ОсновнаяЕдиницаИзмеренияНоменклатуры = ТекущаяСтрока.ОсновнаяЕдиницаИзмерения;
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ВидСтрокиНоменклатуры = 4;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНоменклатуры) И ТекущаяСтрока.ЕдиницаИзмерения = ОсновнаяЕдиницаИзмеренияНоменклатуры Тогда
			// Доступны все
			ВидСтрокиНоменклатуры = 1;
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНоменклатуры) Тогда
			// Только характеристика
			ВидСтрокиНоменклатуры = 2;
		Иначе
			// Только по единице
			ВидСтрокиНоменклатуры = 3;
		КонецЕсли;
		
		Если НЕ ВидСтрокиНоменклатуры = 4 Тогда
			ОсновнаяЕдиницаИзмерения   = ОсновнаяЕдиницаИзмеренияНоменклатуры;
			КоэффициентОсновнойЕдиницы = ТекущаяСтрока.КоэффициентОсновнойЕдиницы;
		Иначе
			ОсновнаяЕдиницаИзмерения   = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			КоэффициентОсновнойЕдиницы = 1;
		КонецЕсли;
		
		ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(ТекущаяСтрока.ТипНоменклатуры);
		УчетЦенТолькоВРазрезеДопПараметров = ПараметрыТипаНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров;
		НеЗаполненаХарактеристикаНоменклатуры = НЕ ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНоменклатуры) И НЕ ПараметрыТипаНоменклатуры.ИспользованиеХарактеристик = 3 И ТекущаяСтрока.РучноеСписаниеХарактеристик;
		НеЗаполненаЕдиницаИзмерения           = НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения);
		
		СтруктураСтроки = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,БазоваяЕдиницаИзмерения,Валюта,ЦенаБазовая,ЦенаСтарая");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущаяСтрока);
		
		ТипЦенНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ТипЦен,ИдентификаторСтроки", СтрокаПараметровРасчета.ТипЦен, ТекущаяСтрока.ИдентификаторСтроки));
		Если ТипЦенНоменклатуры.Количество() > 0 Тогда
			СтрокаТипаЦеныНоменклатуры = ТипЦенНоменклатуры[0];
			СтрокаТипаЦеныНоменклатуры.ВидСтрокиНоменклатуры = ВидСтрокиНоменклатуры;
		Иначе
			СтрокаТипаЦеныНоменклатуры = ТаблицаТипыЦен.Добавить();
			СтрокаТипаЦеныНоменклатуры.ИдентификаторСтроки = ТекущаяСтрока.ИдентификаторСтроки;
			СтрокаТипаЦеныНоменклатуры.ТипЦен = ТипЦены;
			СтрокаТипаЦеныНоменклатуры.Валюта = ?(ВВалютеУчета, ТекущаяСтрока.Номенклатура.ВалютаУчета, ВалютаТипаЦены);
			ОбновитьКурсыВалют(СтрокаТипаЦеныНоменклатуры.Валюта);
			СтрокаТипаЦеныНоменклатуры.ВидСтрокиНоменклатуры = ВидСтрокиНоменклатуры;
			СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен = СтрЗаменить(ТипЦены.УникальныйИдентификатор(),"-","_");
			Аналитика = "";
			АлгоритмПолученияЦены = ТипЦены.АлгоритмПолученияЦены;
			Если АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре Тогда
				СтрокаТипаЦеныНоменклатуры.Аналитика = 1;
			ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
				СтрокаТипаЦеныНоменклатуры.Аналитика = 2;
				Аналитика = НСтр("ru = '(по характеристике)'");
			ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
				СтрокаТипаЦеныНоменклатуры.Аналитика = 3;
				Аналитика = НСтр("ru = '(по единице измерения)'");
			КонецЕсли;
			СтрокаТипаЦеныНоменклатуры.Представление = "" + СтрокаТипаЦеныНоменклатуры.ТипЦен + " " + Аналитика;
		КонецЕсли;
		
		ПоЕдинице = СтрокаТипаЦеныНоменклатуры.Аналитика = 3;
		СтрокаТипаЦеныНоменклатуры.ЕдиницаИзмерения = ?(ПоЕдинице, ТекущаяСтрока.ЕдиницаИзмерения, ОсновнаяЕдиницаИзмерения);
		СтрокаТипаЦеныНоменклатуры.Коэффициент      = ?(ПоЕдинице, ТекущаяСтрока.Коэффициент,      КоэффициентОсновнойЕдиницы);
		
		СтрокаТипаЦеныНоменклатуры.Рассчитывается = СтрокаПараметровРасчета.ТипЦен.Рассчитывается;
		
		Если СтрокаТипаЦеныНоменклатуры.Рассчитывается Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТипаЦеныНоменклатуры.ТолькоПросмотр = УчетЦенТолькоВРазрезеДопПараметров
				И ((СтрокаТипаЦеныНоменклатуры.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры) ИЛИ (СтрокаТипаЦеныНоменклатуры.Аналитика = 3 И НеЗаполненаЕдиницаИзмерения));
		Если СтрокаТипаЦеныНоменклатуры.ТолькоПросмотр Тогда
			ПредставлениеЦены = СтрЗаменить(СтрокаТипаЦеныНоменклатуры.ТипЦен.УникальныйИдентификатор(),"-","_");
			ПоХарактеристике  = УчетЦенТолькоВРазрезеДопПараметров
				И СтрокаТипаЦеныНоменклатуры.Аналитика = 2
				И НеЗаполненаХарактеристикаНоменклатуры;
			ПараметрыУсловногоОформления = "";
			ПараметрыУсловногоОформления = "ТолькоПросмотр" + ПредставлениеЦены;
			ПараметрыУсловногоОформления = ПараметрыУсловногоОформления
				+ ?(ПоХарактеристике, "ПоХарактеристике", "ПоЕдиницеИзмерения")
				+ ПредставлениеЦены;
			ТекущаяСтрока.ПараметрыУсловногоОформления = ТекущаяСтрока.ПараметрыУсловногоОформления + ПараметрыУсловногоОформления;
		КонецЕсли;
		СтруктураСтроки.Валюта = СтрокаТипаЦеныНоменклатуры.Валюта;
		
		СтрокаТипаЦеныНоменклатуры.ПараметрыРасчета = РасчетЦены;
		
		Если УчетЦенТолькоВРазрезеДопПараметров И (СтрокаТипаЦеныНоменклатуры.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры) ИЛИ (СтрокаТипаЦеныНоменклатуры.Аналитика = 3 И НеЗаполненаЕдиницаИзмерения) Тогда
			СтрокаТипаЦеныНоменклатуры.ЦенаСтарая = 0;
			СтрокаТипаЦеныНоменклатуры.ЦенаБазовая = 0;
			ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен, ТекущаяСтрока, "ЦенаБазовая", СтрокаТипаЦеныНоменклатуры.ЦенаБазовая);
			ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен, ТекущаяСтрока, "ЦенаСтарая",  СтрокаТипаЦеныНоменклатуры.ЦенаСтарая);
			СтрокаТипаЦеныНоменклатуры.Цена = 0;
			ПараметрыДействия = Новый Структура("СтрокаНоменклатуры", СтрокаТипаЦеныНоменклатуры);
			ТаблицаТипыЦенНоваяЦенаПриИзмененииНаСервере(ПараметрыДействия);
			Продолжить;
		КонецЕсли;
		
		Документы.ИзменениеЦен.БазоваяЦена(
			Объект,
			СтруктураСтроки,
			СтрокаПараметровРасчета.ТипЦен,
			СтрокаПараметровРасчета.РасчетЦенОт
		);
		СтрокаТипаЦеныНоменклатуры.ЦенаБазовая = СтруктураСтроки.ЦенаБазовая;
		СтрокаТипаЦеныНоменклатуры.ЦенаСтарая  = СтруктураСтроки.ЦенаСтарая;
		
		ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен, ТекущаяСтрока, "ЦенаБазовая", СтрокаТипаЦеныНоменклатуры.ЦенаБазовая);
		ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен, ТекущаяСтрока, "ЦенаСтарая",  СтрокаТипаЦеныНоменклатуры.ЦенаСтарая);
		
		Если СтрокаТипаЦеныНоменклатуры.Цена = 0 Тогда
			ПараметрыДействия = Новый Структура("СтрокаНоменклатуры", СтрокаТипаЦеныНоменклатуры);
			ТаблицаТипыЦенПроцентНаценкиПриИзмененииНаСервере(ПараметрыДействия);
		КонецЕсли;
		
		Если ЗаполнятьПроцентНаценки Тогда
			СтрокаТипаЦеныНоменклатуры.ПроцентНаценки = ?(НЕ СтрокаПараметровРасчета.ПроцентНаценкиИзНоменклатуры, СтрокаПараметровРасчета.ПроцентНаценки, ТекущаяСтрока.Номенклатура.ПроцентНаценки);
		КонецЕсли;
		
		Если СтрокаТипаЦеныНоменклатуры.ЦенаБазовая > 0 Тогда
			СтрокаТипаЦеныНоменклатуры.Цена = СтрокаТипаЦеныНоменклатуры.ЦенаБазовая+СтрокаТипаЦеныНоменклатуры.ЦенаБазовая*СтрокаТипаЦеныНоменклатуры.ПроцентНаценки/100;
			ПараметрыДействия = Новый Структура("СтрокаНоменклатуры", СтрокаТипаЦеныНоменклатуры);
			ТаблицаТипыЦенНоваяЦенаПриИзмененииНаСервере(ПараметрыДействия);
		КонецЕсли;
		
		СтрокаТипаЦеныНоменклатуры.СуммаНаценки	= СтрокаТипаЦеныНоменклатуры.Цена-СтрокаТипаЦеныНоменклатуры.ЦенаБазовая;
		НоваяЦена 				= СтрокаТипаЦеныНоменклатуры.Цена;
		ДельтаОкругления 		= ?(СтрокаПараметровРасчета.ОкруглятьДо=0,0,НоваяЦена/СтрокаПараметровРасчета.ОкруглятьДо);
		ДельтаОкругленияЦел 	= Цел(ДельтаОкругления);
		
		Если ДельтаОкругления <> ДельтаОкругленияЦел Тогда
			НоваяЦена = (ДельтаОкругленияЦел+1)*СтрокаПараметровРасчета.ОкруглятьДо;
		КонецЕсли;
		
		Если НоваяЦена <> СтрокаТипаЦеныНоменклатуры.Цена Тогда
			СтрокаТипаЦеныНоменклатуры.Цена = НоваяЦена;
			
			ЗаполнениеРеквизитовТаблицыНоменклатуры(
				СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен,
				СтрокаТипаЦеныНоменклатуры.ИдентификаторСтроки,
				"ЦенаНовая",
				СтрокаТипаЦеныНоменклатуры.Цена
			);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСтарыеЦены(Ложь, ТипЦены);
	// Заполним тип цен без привязки к номенклатуре
	ТипЦенНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ТипЦен,ИдентификаторСтроки", СтрокаПараметровРасчета.ТипЦен, ""));
	
	СтрокаТипаЦеныНоменклатуры = Неопределено;
	
	Если НЕ СтрокаПараметровРасчета.ТипЦен.Рассчитывается Тогда
		Если ТипЦенНоменклатуры.Количество() = 0 Тогда
			СтрокаТипаЦеныНоменклатуры = ТаблицаТипыЦен.Добавить();
		Иначе
			СтрокаТипаЦеныНоменклатуры = ТипЦенНоменклатуры[0];
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаТипаЦеныНоменклатуры = Неопределено Тогда
		СтрокаТипаЦеныНоменклатуры.ТипЦен = ТипЦены;
		СтрокаТипаЦеныНоменклатуры.Валюта = ?(ТипЦены.ВВалютеУчета, Неопределено, ТипЦены.ВалютаЦены);
		СтрокаТипаЦеныНоменклатуры.ПараметрыРасчета     = РасчетЦены;
		СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен = СтрЗаменить(ТипЦены.УникальныйИдентификатор(),"-","_");
		СтрокаТипаЦеныНоменклатуры.Рассчитывается = Ложь;
		Аналитика = "";
		АлгоритмПолученияЦены = ТипЦены.АлгоритмПолученияЦены;
		Если АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре Тогда
			СтрокаТипаЦеныНоменклатуры.Аналитика = 1;
		ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			СтрокаТипаЦеныНоменклатуры.Аналитика = 2;
			Аналитика = НСтр("ru = '(по характеристике)'");
		ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			СтрокаТипаЦеныНоменклатуры.Аналитика = 3;
			Аналитика = НСтр("ru = '(по единице измерения)'");
		КонецЕсли;
		СтрокаТипаЦеныНоменклатуры.Представление = "" + СтрокаТипаЦеныНоменклатуры.ТипЦен + " " + Аналитика;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавлениеТипаЦены(ТипЦены, СтруктураПараметровРасчета, ЗаполнятьПроцентНаценки = Ложь, ПерезаполнитьТипыЦен = Ложь, УстановкаВидимостиБазовойЦены = Истина)
	
	Если ТипЗнч(СтруктураПараметровРасчета) = Тип("Структура") Тогда
		Если СтруктураПараметровРасчета.РасчетЦенОт = 0 Тогда
			Объект.БазовыйТипЦен = СтруктураПараметровРасчета.БазовыйТипЦен;
		ИначеЕсли СтруктураПараметровРасчета.РасчетЦенОт = 1 Тогда
			Объект.ДокументОснование = СтруктураПараметровРасчета.ДокументОснование;
		ИначеЕсли СтруктураПараметровРасчета.РасчетЦенОт = 2 Тогда
			Объект.Поставщик = СтруктураПараметровРасчета.Поставщик;
		ИначеЕсли СтруктураПараметровРасчета.РасчетЦенОт = 3 ИЛИ СтруктураПараметровРасчета.РасчетЦенОт = 5 Тогда
			Объект.СкладКомпании = СтруктураПараметровРасчета.СкладКомпании;
		ИначеЕсли СтруктураПараметровРасчета.РасчетЦенОт = 4 Тогда
			Объект.ПрайсЛистКонтрагента = СтруктураПараметровРасчета.ПрайсЛистКонтрагента;
		ИначеЕсли СтруктураПараметровРасчета.РасчетЦенОт = 6 Тогда
			Объект.БазовоеПодразделение = СтруктураПараметровРасчета.БазовоеПодразделение;
		ИначеЕсли СтруктураПараметровРасчета.РасчетЦенОт = 8 Тогда
			Объект.Партия = СтруктураПараметровРасчета.Партия;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", СтруктураПараметровРасчета.ТипЦен));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаПараметровРасчета = Объект.ПараметрыРасчета.Добавить();
	Иначе
		СтрокаПараметровРасчета = Объект.ПараметрыРасчета[Объект.ПараметрыРасчета.Индекс(НайденныеСтроки[0])];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПараметровРасчета, СтруктураПараметровРасчета);
	
	// Перезаполним товары по указанной партии.
	Если ПолучитьЗначениеПараметраСтруктуры(СтруктураПараметровРасчета, "ТребуетсяПерезаполнитьНоменклатуруПартии", Ложь) Тогда
		ПерезаполнитьТоварыПоПартии();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЦеныНоменклатурыПоТипуЦен(ТипЦены, СтрокаПараметровРасчета, ЗаполнятьПроцентНаценки);
	
	// Проверим необходимость перезаполнить базовую цену для остальных типов цен с таким же расчетом.
	Если ПерезаполнитьТипыЦен Тогда
		НайденныеСтроки = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("РасчетЦенОт", СтруктураПараметровРасчета.РасчетЦенОт));
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			Если ТекущаяСтрока.ТипЦен = СтрокаПараметровРасчета.ТипЦен Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЦеныНоменклатурыПоТипуЦен(ТекущаяСтрока.ТипЦен, ТекущаяСтрока, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	Если УстановкаВидимостиБазовойЦены Тогда
		УстановитьВидимостьБазовойЦены();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УстановитьКоэффициентСкидкиНаценки(СтрокаТаблицы, БазовыйКоэффициент, ПроцентСкидкиНаценки)
	
	Если ПроцентСкидкиНаценки = 0 Тогда
		СтрокаТаблицы.Коэффициент = БазовыйКоэффициент;
	Иначе
		СтрокаТаблицы.Коэффициент = БазовыйКоэффициент+(БазовыйКоэффициент*(ПроцентСкидкиНаценки/100));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуРасчетныхЦен(Запрос, ТаблицаНаценокРасчетныхЦен, ТипЦен, Знач БазовыйКоэффициент = 1)
	
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаНаценокРасчетныхЦен.Добавить();
		НоваяСтрока.Имя           = "Цена" + СтрЗаменить(Выборка.ТипЦен.УникальныйИдентификатор(),"-","_");
		НоваяСтрока.Заголовок     = Выборка.Наименование;
		НоваяСтрока.БазовыйТипЦен = Выборка.БазовыйТипЦен;
		НоваяСтрока.ТипЦен        = Выборка.ТипЦен;
		НоваяСтрока.Валюта        = Выборка.ВалютаЦены;
		НоваяСтрока.ВВалютеУчета  = Выборка.ВВалютеУчета;
		
		УстановитьКоэффициентСкидкиНаценки(НоваяСтрока, БазовыйКоэффициент, Выборка.Процент);
		
		Пока НоваяСтрока.БазовыйТипЦен.Рассчитывается Цикл
			НоваяСтрока.БазовыйТипЦен = НоваяСтрока.БазовыйТипЦен.БазовыйТипЦен;
			УстановитьКоэффициентСкидкиНаценки(НоваяСтрока, НоваяСтрока.Коэффициент, НоваяСтрока.БазовыйТипЦен.ПроцентСкидкиНаценки);
		КонецЦикла;
		
		ВыборкаПоТипам = Выборка.ПроцентыСкидкиНаценки.Выбрать();
		Пока ВыборкаПоТипам.Следующий() Цикл
			НоваяСтрокаПоТипам = НоваяСтрока.ПроцентыСкидкиНаценки.Добавить();
			БазовыйТипЦен      = ВыборкаПоТипам.БазовыйТипЦен;
			ЦеноваяГруппа      = ВыборкаПоТипам.ЦеноваяГруппа;
			УстановитьКоэффициентСкидкиНаценки(НоваяСтрокаПоТипам, БазовыйКоэффициент, ВыборкаПоТипам.Процент);
			
			Пока БазовыйТипЦен.Рассчитывается Цикл
				Отбор = Новый Структура("ЦеноваяГруппа", ЦеноваяГруппа);
				БазовыеТипыЦен = БазовыйТипЦен.ПроцентыСкидкиНаценки.НайтиСтроки(Отбор);
				Если БазовыеТипыЦен.Количество() > 0 Тогда
					БазовыйТипЦен = БазовыеТипыЦен[0].БазовыйТипЦен;
					Процент = БазовыеТипыЦен[0].ПроцентСкидкиНаценки;
				Иначе
					Процент = БазовыйТипЦен.ПроцентСкидкиНаценки;
				КонецЕсли;
				УстановитьКоэффициентСкидкиНаценки(НоваяСтрокаПоТипам, НоваяСтрокаПоТипам.Коэффициент, Процент);
			КонецЦикла;
			
			НоваяСтрокаПоТипам.БазовыйТипЦен = БазовыйТипЦен;
			НоваяСтрокаПоТипам.ЦеноваяГруппа = ЦеноваяГруппа;
		КонецЦикла;
		//ЗаполнитьТаблицуРасчетныхЦен(Запрос, ТаблицаНаценокРасчетныхЦен, Выборка.ТипЦен, ТипЦен, НоваяСтрока.Коэффициент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРасчетныеЦеныНаСервере(Строка)
	
	Для Каждого СтрокаНаценки Из ТаблицаНаценокРасчетныхЦен Цикл
		СтруктураОтбор       = Новый Структура("ЦеноваяГруппа", Строка.Номенклатура.ЦеноваяГруппа);
		НайденныеСтроки      = СтрокаНаценки.ПроцентыСкидкиНаценки.НайтиСтроки(СтруктураОтбор);
		
		СтруктураОтбор       = Новый Структура("ЦеноваяГруппа", Справочники.ЦеновыеГруппы.ПустаяСсылка());
		НайденныеСтрокиОбщие = СтрокаНаценки.ПроцентыСкидкиНаценки.НайтиСтроки(СтруктураОтбор);
		
		Если СтрокаНаценки.ВВалютеУчета Тогда
			ВалютаЦены = Строка.ВалютаУчета;
		Иначе
			ВалютаЦены = СтрокаНаценки.Валюта;
		КонецЕсли;
		
		ОбновитьКурсыВалют(ВалютаЦены);
		
		КурсВалюты = ТаблицаВалют
			.НайтиСтроки(Новый Структура("Валюта", ВалютаЦены))[0]
			.Курс;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если НайденныеСтрокиОбщие.Количество() = 0 Тогда
				Если Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", СтрокаНаценки.БазовыйТипЦен)).Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныйТипЦенНоменклтуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", Строка.ИдентификаторСтроки, СтрокаНаценки.БазовыйТипЦен));
				ВалютаБазовойЦены = НайденныйТипЦенНоменклтуры[0].Валюта;
				КурсВалютыБазовой = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаБазовойЦены))[0].Курс;
				ЦенаТипацен = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка["ЦенаНовая"+СтрЗаменить(СтрокаНаценки.БазовыйТипЦен.УникальныйИдентификатор(),"-","_")], ВалютаБазовойЦены, КурсВалютыБазовой, ВалютаЦены, КурсВалюты);
				Строка[СтрокаНаценки.Имя] = ЦенаТипаЦен * СтрокаНаценки.Коэффициент;
			Иначе
				Если Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", НайденныеСтрокиОбщие[0].БазовыйТипЦен)).Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныйТипЦенНоменклтуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", Строка.ИдентификаторСтроки, НайденныеСтрокиОбщие[0].БазовыйТипЦен));
				ВалютаБазовойЦены = НайденныйТипЦенНоменклтуры[0].Валюта;
				КурсВалютыБазовой = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаБазовойЦены))[0].Курс;
				ЦенаТипацен = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка["ЦенаНовая"+СтрЗаменить(НайденныеСтрокиОбщие[0].БазовыйТипЦен.УникальныйИдентификатор(),"-","_")], ВалютаБазовойЦены, КурсВалютыБазовой, ВалютаЦены, КурсВалюты);
				Строка[СтрокаНаценки.Имя] = ЦенаТипаЦен * НайденныеСтрокиОбщие[0].Коэффициент;
			КонецЕсли;
		Иначе
			Если Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", НайденныеСтроки[0].БазовыйТипЦен)).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныйТипЦенНоменклтуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", Строка.ИдентификаторСтроки, НайденныеСтроки[0].БазовыйТипЦен));
			ВалютаБазовойЦены = НайденныйТипЦенНоменклтуры[0].Валюта;
			КурсВалютыБазовой = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаБазовойЦены))[0].Курс;
			ЦенаТипацен = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка["ЦенаНовая"+СтрЗаменить(НайденныеСтроки[0].БазовыйТипЦен.УникальныйИдентификатор(),"-","_")], ВалютаБазовойЦены, КурсВалютыБазовой, ВалютаЦены, КурсВалюты);
			Строка[СтрокаНаценки.Имя] = ЦенаТипацен * НайденныеСтроки[0].Коэффициент;
		КонецЕсли;
		
		СтруктураОтбор = Новый Структура("ИдентификаторСтроки,ТипЦен", Строка.ИдентификаторСтроки, СтрокаНаценки.ТипЦен);
		НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(СтруктураОтбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Цена = Строка[СтрокаНаценки.Имя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПолучениеСтаройБазовойЦены(ИдентификаторНоменклатуры, ИзмененаНоменклатура = Ложь, ИзменитьВыводБазовойЦены = Истина, ЗаполнятьСтарыеЦены = Истина)
	
	Если ИдентификаторНоменклатуры = Неопределено ИЛИ ПустаяСтрока(ИдентификаторНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторНоменклатуры))[0];
	
	//// Проверим наличие типов цен для данной номенклатуры
	//СтрокаТипаЦен = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторНоменклатуры));
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ВидСтрокиНоменклатуры = 4;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаНоменклатуры) И ТекущиеДанные.ЕдиницаИзмерения = ТекущиеДанные.ОсновнаяЕдиницаИзмерения Тогда
		// Доступны все
		ВидСтрокиНоменклатуры = 1;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаНоменклатуры) Тогда
		// Только характеристика
		ВидСтрокиНоменклатуры = 2;
	Иначе
		// Только по единице
		ВидСтрокиНоменклатуры = 3;
	КонецЕсли;
	
	ПараметрыНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(ТекущиеДанные.ТипНоменклатуры);
	
	УчетЦенТолькоВРазрезеДопПараметров = ПараметрыНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров;
	НеЗаполненаХарактеристикаНоменклатуры = НЕ ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаНоменклатуры) И НЕ ПараметрыНоменклатуры.ИспользованиеХарактеристик = 3 И ТекущиеДанные.РучноеСписаниеХарактеристик;
	НеЗаполненаЕдиницаИзмерения           = НЕ ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения);
	
	ОсновнаяЕдиницаНоменклатуры = Неопределено;
	Если НЕ ВидСтрокиНоменклатуры = 4 Тогда
		ОсновнаяЕдиницаНоменклатуры = ТекущиеДанные.ОсновнаяЕдиницаИзмерения;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		СтруктураСтроки = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,БазоваяЕдиницаИзмерения,Валюта,ЦенаБазовая,ЦенаСтарая");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
		
		СтрокиТипаЦен = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ТипЦен,ИдентификаторСтроки", ТекущаяСтрока.ТипЦен, ТекущиеДанные.ИдентификаторСтроки));
		// Заполним в таблицу типов цен
		Если СтрокиТипаЦен.Количество() > 0 Тогда
			СтрокаТипаЦен = СтрокиТипаЦен[0];
			
			Если НЕ ТекущаяСтрока.ТипЦен.ВВалютеУчета Тогда
				ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТекущаяСтрока.ТипЦен, Неопределено);
			Иначе
				ВалютаТипаЦены = СтрокаТипаЦен.Валюта;
			КонецЕсли;
			
			СтруктураСтроки.ЕдиницаИзмерения = ?(НЕ СтрокаТипаЦен.Аналитика = 3 И НЕ ОсновнаяЕдиницаНоменклатуры = Неопределено, ОсновнаяЕдиницаНоменклатуры, ТекущиеДанные.ЕдиницаИзмерения);
			
			ИзмениласьВалюта = ВалютаТипаЦены <> СтрокаТипаЦен.Валюта;
			ВалютаТипаЦеныСтарая = СтрокаТипаЦен.Валюта;
			СтруктураСтроки.Валюта = ВалютаТипаЦены;
			СтрокаТипаЦен.Валюта   = ВалютаТипаЦены;
			СтрокаТипаЦен.ВидСтрокиНоменклатуры = ВидСтрокиНоменклатуры;
			
			Если УчетЦенТолькоВРазрезеДопПараметров И (СтрокаТипаЦен.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры) ИЛИ (СтрокаТипаЦен.Аналитика = 3 И НеЗаполненаЕдиницаИзмерения) Тогда
				СтрокаТипаЦен.ЦенаСтарая = 0;
				СтрокаТипаЦен.ЦенаБазовая = 0;
				ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "ЦенаБазовая", СтрокаТипаЦен.ЦенаБазовая);
				ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "ЦенаСтарая",  СтрокаТипаЦен.ЦенаСтарая);
				СтрокаТипаЦен.Цена = 0;
				ПараметрыДействия = Новый Структура("СтрокаНоменклатуры", СтрокаТипаЦен);
				ТаблицаТипыЦенНоваяЦенаПриИзмененииНаСервере(ПараметрыДействия);
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТипаЦен.Рассчитывается ИЛИ ПустаяСтрока(СтрокаТипаЦен.ИдентификаторСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИзмененаНоменклатура Тогда
				// Попробуем найти товар и подставить с него цены
				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
				Если СтрокаТипаЦен.Аналитика = 2 Тогда
					СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.ХарактеристикаНоменклатуры);
				ИначеЕсли СтрокаТипаЦен.Аналитика = 3 Тогда
					СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
				КонецЕсли;
				
				НайденныйТовар = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
				
				Если НайденныйТовар.Количество() > 1 Тогда
					Для Каждого ТекущаяСтрокаТовара Из НайденныйТовар Цикл
						Если ТекущаяСтрокаТовара.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки Тогда
							Продолжить;
						КонецЕсли;
						
						НайденныеТипыЦен = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", ТекущаяСтрокаТовара.ИдентификаторСтроки, СтрокаТипаЦен.ТипЦен));
						
						Если НайденныеТипыЦен.Количество() > 0 Тогда
							ЗаполнитьЗначенияСвойств(СтрокаТипаЦен, НайденныеТипыЦен[0], "Цена,ПроцентНаценки,СуммаНаценки", "ИдентификаторСтроки");
							ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "ЦенаНовая",      СтрокаТипаЦен.Цена);
							ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "ПроцентНаценки", СтрокаТипаЦен.ПроцентНаценки);
							ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "СуммаНаценки",   СтрокаТипаЦен.СуммаНаценки);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаполнятьБазовыеЦены Тогда
				Документы.ИзменениеЦен.БазоваяЦена(
					Объект,
					СтруктураСтроки,
					ТекущаяСтрока.ТипЦен,
					ТекущаяСтрока.РасчетЦенОт
				);
				
				СтрокаТипаЦен.ЦенаБазовая = СтруктураСтроки.ЦенаБазовая;
				
				Если СтрокаТипаЦен.Цена = 0 Тогда
					Если ТекущаяСтрока.ПроцентНаценкиИзНоменклатуры И СтруктураСтроки.Номенклатура.ПроцентНаценки<>0 Тогда
						СтрокаТипаЦен.ПроцентНаценки = СтруктураСтроки.Номенклатура.ПроцентНаценки;
					ИначеЕсли (НЕ ТекущаяСтрока.ПроцентНаценкиИзНоменклатуры) И ТекущаяСтрока.ПроцентНаценки<>0 Тогда
						СтрокаТипаЦен.ПроцентНаценки = ТекущаяСтрока.ПроцентНаценки;
					Иначе
						СтрокаТипаЦен.ПроцентНаценки = Объект.БазовыйТипЦен.ПроцентСкидкиНаценки;
					КонецЕсли;
					ПараметрыДействия = Новый Структура("СтрокаНоменклатуры", СтрокаТипаЦен);
					ТаблицаТипыЦенПроцентНаценкиПриИзмененииНаСервере(ПараметрыДействия);
				Иначе
					Если ИзмениласьВалюта Тогда
						// СтрокаТипаЦен.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТипаЦен.Цена,ВалютаСтарая,КурсСтарый,ВалютаДокумента,КурсДокумента);
						// Установка процента наценки.
						Если СтрокаТипаЦен.ЦенаБазовая=0 Тогда
							СтрокаТипаЦен.ПроцентНаценки=0;
						Иначе
							СтрокаТипаЦен.ПроцентНаценки=((СтрокаТипаЦен.Цена-СтрокаТипаЦен.ЦенаБазовая)/СтрокаТипаЦен.ЦенаБазовая)*100;
						КонецЕсли;
						ПараметрыДействия = Новый Структура("СтрокаНоменклатуры", СтрокаТипаЦен);
						ТаблицаТипыЦенПроцентНаценкиПриИзмененииНаСервере(ПараметрыДействия);
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Базовая цена в ТЧ Товары
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ТипЦен,Номенклатура", ТекущаяСтрока.ТипЦен, СтруктураСтроки.Номенклатура));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТипаЦен, НайденныеСтроки[0], "ЦенаБазовая,Цена,ПроцентНаценки,СуммаНаценки");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаполнятьСтарыеЦены Тогда
				ПолучитьСтаруюЦену(СтруктураСтроки, ТекущаяСтрока.ТипЦен);
				СтрокаТипаЦен.ЦенаСтарая            = СтруктураСтроки.ЦенаСтарая;
				ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "ЦенаСтарая",  СтрокаТипаЦен.ЦенаСтарая);
			КонецЕсли;
			
			ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "ЦенаБазовая", СтрокаТипаЦен.ЦенаБазовая);
			ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "ПроцентНаценки", СтрокаТипаЦен.ПроцентНаценки);
			ЗаполнениеРеквизитовТаблицыНоменклатуры(СтрокаТипаЦен.ИдентификаторТипаЦен, ТекущиеДанные, "СуммаНаценки",  СтрокаТипаЦен.СуммаНаценки);
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнятьБазовыеЦены = Истина;
	
	Если ИзменитьВыводБазовойЦены Тогда
		УстановитьВидимостьБазовойЦены();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеРеквизитовТаблицыНоменклатуры(ИдентификаторТипаЦен, СтрокаНоменклатуры, ИмяРекизита, Значение)
	
	Если ТипЗнч(СтрокаНоменклатуры) = Тип("Строка") Тогда
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаНоменклатуры));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНоменклатурыТипаЦены = НайденныеСтроки[0];
	Иначе
		СтрокаНоменклатурыТипаЦены = СтрокаНоменклатуры;
	КонецЕсли;
	
	СтрокаНоменклатурыТипаЦены[ИмяРекизита+ИдентификаторТипаЦен] = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДаннымиПоДокументу()
	
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если ТекущаяСтрока.ТипЦен.Рассчитывается Тогда
			УстановитьКолонкиРасчетныхЦен(ТекущаяСтрока.ТипЦен);
		Иначе
			СоздатьКолонкуТипаЦен(ТекущаяСтрока.ТипЦен);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаполнитьТаблицуНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыеЦены(ПерезаполнитьЦены = Истина, ТипЦены = Неопределено)
	
	Если ПерезаполнитьЦены Тогда
		СтарыеЦены.Очистить();
	КонецЕсли;
	
	ТаблицаТиповЦенНоменклатуры = Новый ТаблицаЗначений();
	КолонкиТаблицы = ТаблицаТиповЦенНоменклатуры.Колонки;
	КолонкиТаблицы.Добавить("ТипЦен", Новый ОписаниеТипов("СправочникСсылка.ТипыЦен"));
	КолонкиТаблицы.Добавить("АлгоритмРасчетаЦены", Новый ОписаниеТипов("ПеречислениеСсылка.АлгоритмПолученияЦены"));
	КолонкиТаблицы.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КолонкиТаблицы.Добавить(
		"ХарактеристикаНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры")
	);
	КолонкиТаблицы.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	КолонкиТаблицы.Добавить("УчетЦенТолькоВРазрезеДопПараметров", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекущаяСтрока Из ТаблицаТипыЦен Цикл
		Если
			ТекущаяСтрока.Рассчитывается
			ИЛИ ТекущаяСтрока.ИдентификаторСтроки = ""
			ИЛИ (ТипЦены <> Неопределено И ТипЦены <> ТекущаяСтрока.ТипЦен)
		Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаНоменклатуры.НайтиСтроки(
			Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки)
		);
		
		Если НайденнаяСтрока.Количество() > 0  Тогда
			НайденнаяСтрока = НайденнаяСтрока[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТиповЦенНоменклатуры.Добавить();
		НоваяСтрока.ТипЦен = ТекущаяСтрока.ТипЦен;
		НоваяСтрока.АлгоритмРасчетаЦены = ?(
			ТекущаяСтрока.Аналитика = 0,
			Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре,
			Перечисления.АлгоритмПолученияЦены.Получить(ТекущаяСтрока.Аналитика - 1)
		);
		НоваяСтрока.Номенклатура = НайденнаяСтрока.Номенклатура;
		ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(НайденнаяСтрока.ТипНоменклатуры);
		НоваяСтрока.УчетЦенТолькоВРазрезеДопПараметров = ПараметрыТипаНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров;
		НоваяСтрока.ХарактеристикаНоменклатуры = НайденнаяСтрока.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмерения;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		Объект.ДатаНачалаДействия = Объект.Дата;
	КонецЕсли;
	
	Момент = ?(
		Объект.Ссылка.Пустая(),
		Новый МоментВремени(КонецДня(Объект.ДатаНачалаДействия)),
		Новый Граница(Новый МоментВремени(Объект.ДатаНачалаДействия, Объект.Ссылка), ВидГраницы.Исключая)
	);
	ПараметрыЗаполненияСтарыхЦен = Новый Структура();
	ПараметрыЗаполненияСтарыхЦен.Вставить("НаМомент", Момент);
	ПараметрыЗаполненияСтарыхЦен.Вставить("Контрагент", КонтрагентЦеныНоменклатуры);
	ПараметрыЗаполненияСтарыхЦен.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ПараметрыЗаполненияСтарыхЦен.Вставить("ДоговорВзаиморасчетов", ДоговорЦеныНоменклатуры);
	ЦенообразованиеСервер.ЗаполнитьСтарыеЦены(ТаблицаТиповЦенНоменклатуры, ПараметрыЗаполненияСтарыхЦен);
	
	Для Каждого ТекущаяСтрока Из ТаблицаТиповЦенНоменклатуры Цикл
		НоваяСтрока = СтарыеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Контрагент            = КонтрагентЦеныНоменклатуры;
		НоваяСтрока.ПодразделениеКомпании = Объект.ПодразделениеКомпании;
		НоваяСтрока.ДоговорВзаиморасчетов = ДоговорЦеныНоменклатуры;
		
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(
			Новый Структура(
				"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения",
				ТекущаяСтрока.Номенклатура,
				ТекущаяСтрока.ХарактеристикаНоменклатуры,
				ТекущаяСтрока.ЕдиницаИзмерения
			)
		);
		
		Если СтрокиНоменклатуры.Количество() > 0 Тогда
			СтрокаНоменклатуры = СтрокиНоменклатуры[0];
			СтрокаТипаЦен = ТаблицаТипыЦен.НайтиСтроки(
				Новый Структура("ИдентификаторСтроки,ТипЦен", СтрокаНоменклатуры.ИдентификаторСтроки, ТекущаяСтрока.ТипЦен)
			);
			СтрокаТипаЦен[0].ЦенаСтарая = ТекущаяСтрока.Цена;
			ЗаполнениеРеквизитовТаблицыНоменклатуры(
				СтрокаТипаЦен[0].ИдентификаторТипаЦен,
				СтрокаНоменклатуры,
				"ЦенаСтарая",
				СтрокаТипаЦен[0].ЦенаСтарая
			);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатуры()
	
	ЗначенияРеквизитовТоваров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"),
		"ВалютаУчета,ТипНоменклатуры,ОсновнаяЕдиницаИзмерения"
	);
	
	Для Каждого ЭлементТоваров Из Объект.Товары Цикл
		Если Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", ЭлементТоваров.ТипЦен)).Количество() = 0 Тогда
			НоваяСтрока        = Объект.ПараметрыРасчета.Добавить();
			НоваяСтрока.ТипЦен = ЭлементТоваров.ТипЦен;
			НоваяСтрока.РасчетЦенОт = 0;
			НоваяСтрока.ОкруглятьДо = 0.01;
			СоздатьКолонкуТипаЦен(ЭлементТоваров.ТипЦен);
		КонецЕсли;
		// найдем строку для данной номенклатуры
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(
			Новый Структура(
				"Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры",
				ЭлементТоваров.Номенклатура,
				ЭлементТоваров.ЕдиницаИзмерения,
				ЭлементТоваров.ХарактеристикаНоменклатуры
			)
		);
		
		Если СтрокиНоменклатуры.Количество() > 0 Тогда
			СтрокаНоменклатуры = СтрокиНоменклатуры[0];
		Иначе
			СтрокаНоменклатуры = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, ЭлементТоваров);
			
			СтрокаНоменклатуры.ИдентификаторСтроки = Новый УникальныйИдентификатор();
			СтрокаНоменклатуры.НомерСтроки         = ТаблицаНоменклатуры.Количество();
			
			ЗначенияРеквизитовТовара = ЗначенияРеквизитовТоваров.Получить(СтрокаНоменклатуры.Номенклатура);
			СтрокаНоменклатуры.ВалютаУчета     = ЗначенияРеквизитовТовара.ВалютаУчета;
			СтрокаНоменклатуры.ТипНоменклатуры = ЗначенияРеквизитовТовара.ТипНоменклатуры;
			
			ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(СтрокаНоменклатуры.ТипНоменклатуры);
			
			СтрокаНоменклатуры.ОсновнаяЕдиницаИзмерения   = ЗначенияРеквизитовТовара.ОсновнаяЕдиницаИзмерения;
			СтрокаНоменклатуры.КоэффициентОсновнойЕдиницы = СтрокаНоменклатуры.ОсновнаяЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		ДобавитьТипыЦенНоменклатуры(СтрокаНоменклатуры);
		
		ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(
			Новый Структура("ИдентификаторСтроки,ТипЦен", СтрокаНоменклатуры.ИдентификаторСтроки, ЭлементТоваров.ТипЦен)
		);
		
		Для Каждого ТекущаяСтрокаЦены Из ЦеныНоменклатуры Цикл
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЦены, ЭлементТоваров);
			
			Если ТекущаяСтрокаЦены.Рассчитывается Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыСтрокиТоваровКЗаполнению = Новый Структура();
			РеквизитыСтрокиТоваровКЗаполнению.Вставить("ЦенаБазовая", "ЦенаБазовая");
			РеквизитыСтрокиТоваровКЗаполнению.Вставить("ПроцентНаценки", "ПроцентНаценки");
			РеквизитыСтрокиТоваровКЗаполнению.Вставить("СуммаНаценки", "СуммаНаценки");
			РеквизитыСтрокиТоваровКЗаполнению.Вставить("ЦенаНовая", "Цена");
			
			Для Каждого КлючЗначение Из РеквизитыСтрокиТоваровКЗаполнению Цикл
				ЗаполнениеРеквизитовТаблицыНоменклатуры(
					ТекущаяСтрокаЦены.ИдентификаторТипаЦен,
					СтрокаНоменклатуры,
					КлючЗначение.Ключ,
					ТекущаяСтрокаЦены[КлючЗначение.Значение]
				);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементТоваров Из ТаблицаНоменклатуры Цикл
		ЗаполнитьЕдиницыИзмеренияТипамЦен(ЭлементТоваров);
	КонецЦикла;
	
	УстановитьВидимостьРеквизитовЦен();
	ПерерасчетРасчетныхЦен();
	
КонецПроцедуры

&НаСервере
Процедура ПеремещениеСтрокиНоменклатуры(Смещение)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	
	ИндексСтроки = ТекущиеДанные.НомерСтроки - 1;
	Если (ИндексСтроки = ТаблицаНоменклатуры.Количество() - 1 И Смещение = 1) ИЛИ (ИндексСтроки = 0 И Смещение = -1) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНоменклатуры.Сдвинуть(ИндексСтроки, Смещение);
	
КонецПроцедуры 

&НаСервере
Процедура СортировкаТаблицыНоменклатуры(УсловиеСортировки)
	
	ТаблицаНоменклатуры.Сортировать(УсловиеСортировки);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуНаСервере(ОбновитьПроцентНаценки, Номенклатура, ТипЦен)
	
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		Если НЕ Номенклатура = Неопределено И НЕ Номенклатура = ТекущаяСтрока.Номенклатура Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем связанную с данной номенклатурой цены
		
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки,Рассчитывается", ТекущаяСтрока.ИдентификаторСтроки,Ложь);
		
		Если НЕ ТипЦен = Неопределено Тогда
			СтруктураОтбора.Вставить("ТипЦен", ТипЦен);
		КонецЕсли;
		
		ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(ТекущаяСтрока.ТипНоменклатуры);
		
		УчетЦенТолькоВРазрезеДопПараметров = ПараметрыТипаНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров;
		НеЗаполненаХарактеристикаНоменклатуры = НЕ ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНоменклатуры) И НЕ ПараметрыТипаНоменклатуры.ИспользованиеХарактеристик = 3 И ТекущаяСтрока.РучноеСписаниеХарактеристик;
		НеЗаполненаЕдиницаИзмерения           = НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения);
		
		ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекущаяСтрокаЦены Из ЦеныНоменклатуры Цикл
			// Проверим доступность редактирования цены
			Если УчетЦенТолькоВРазрезеДопПараметров И (ТекущаяСтрокаЦены.Аналитика = 2 И НеЗаполненаХарактеристикаНоменклатуры) ИЛИ (ТекущаяСтрокаЦены.Аналитика = 3 И НеЗаполненаЕдиницаИзмерения) Тогда
				Продолжить;
			КонецЕсли;
			// установим параметры расчета
			ПараметрыТипаЦен = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", ТекущаяСтрокаЦены.ТипЦен))[0];
			
			Если ОбновитьПроцентНаценки Тогда
				Если ПараметрыТипаЦен.ПроцентНаценкиИзНоменклатуры Тогда
					ТекущаяСтрокаЦены.ПроцентНаценки = ПолучитьПроцентНаценкиНаСеревере(ТекущаяСтрока.Номенклатура);
				Иначе
					ТекущаяСтрокаЦены.ПроцентНаценки = ПараметрыТипаЦен.ПроцентНаценки;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяСтрокаЦены.ЦенаБазовая > 0 Тогда
				ТекущаяСтрокаЦены.Цена = ТекущаяСтрокаЦены.ЦенаБазовая
					+ (ТекущаяСтрокаЦены.ЦенаБазовая*ТекущаяСтрокаЦены.ПроцентНаценки)/100;
			КонецЕсли;
			
			ТекущаяСтрокаЦены.СуммаНаценки = ТекущаяСтрокаЦены.Цена - ТекущаяСтрокаЦены.ЦенаБазовая;
			
			// Цена округлять до
			НоваяЦена = ТекущаяСтрокаЦены.Цена;
			ДельтаОкругления    = ?(ПараметрыТипаЦен.ОкруглятьДо = 0, 0, НоваяЦена/ПараметрыТипаЦен.ОкруглятьДо);
			ДельтаОкругленияЦел = Цел(ДельтаОкругления);
			Если ДельтаОкругления <> ДельтаОкругленияЦел Тогда
				НоваяЦена = (ДельтаОкругленияЦел + 1)*ПараметрыТипаЦен.ОкруглятьДо;
			КонецЕсли;
			
			Если НоваяЦена <> ТекущаяСтрокаЦены.Цена Тогда
				ТекущаяСтрокаЦены.Цена = НоваяЦена;
			КонецЕсли;
			
			ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущаяСтрокаЦены.ИдентификаторТипаЦен,
				ТекущаяСтрока,
				"ЦенаНовая",
				ТекущаяСтрокаЦены.Цена);
			ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущаяСтрокаЦены.ИдентификаторТипаЦен,
				ТекущаяСтрока,
				"СуммаНаценки",
				ТекущаяСтрокаЦены.СуммаНаценки);
			ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущаяСтрокаЦены.ИдентификаторТипаЦен,
				ТекущаяСтрока,
				"ПроцентНаценки",
				ТекущаяСтрокаЦены.ПроцентНаценки);
			
		КонецЦикла;
		
		ПересчитатьРасчетныеЦеныНаСервере(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену(ОбновитьПроцентНаценки, ТипПересчета = 1)
	
	ТекущаяНоменклатура = Неопределено;
	ТекущийТипЦен       = Неопределено;
	
	Если ТипПересчета = 2 Тогда
		ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана номенклатура для пересчета цен.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		ТекущаяНоменклатура = ТекущиеДанные.Номенклатура;
	ИначеЕсли ТипПересчета = 3 Тогда
		ТекущиеДанные = Элементы.ТаблицаТипыЦен.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран тип цен для пересчета цен.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		ТекущийТипЦен = ТекущиеДанные.ТипЦен;
	КонецЕсли;
	
	ПересчитатьЦенуНаСервере(ОбновитьПроцентНаценки, ТекущаяНоменклатура, ТекущийТипЦен);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтаруюЦену(ТекСтрока,ТипЦен)
	
	// Найдем товар в таблице кеша цен.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ТипЦен",                     ТипЦен);
	СтруктураОтбора.Вставить("Номенклатура",               ТекСтрока.Номенклатура);
	СтруктураОтбора.Вставить("Контрагент",                 КонтрагентЦеныНоменклатуры);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов",      ДоговорЦеныНоменклатуры);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ТекСтрока.ХарактеристикаНоменклатуры);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ТекСтрока.ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ПодразделениеКомпании",      Объект.ПодразделениеКомпанииПолучатель);
	
	СтрокиТаблицы = СтарыеЦены.НайтиСтроки(СтруктураОтбора);
	// если нашли выведем
	Если СтрокиТаблицы.Количество()=0 Тогда
		
		НайденныеСтрокиВалют = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ТекСтрока.Валюта));
		
		ВалютаУчета = НайденныеСтрокиВалют[0].Валюта;
		КурсВалюты  = НайденныеСтрокиВалют[0].Курс;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
			Объект.ДатаНачалаДействия = Объект.Дата;
		КонецЕсли;
		Момент = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.ДатаНачалаДействия)), Новый Граница(Новый МоментВремени(Объект.ДатаНачалаДействия, Объект.Ссылка),ВидГраницы.Исключая));
		ЦенаСтарая = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен,
			ТекСтрока.Номенклатура,
			Момент,
			КонтрагентЦеныНоменклатуры,
			ВалютаУчета,
			КурсВалюты,
			ТекСтрока.ХарактеристикаНоменклатуры,
			ТекСтрока.ЕдиницаИзмерения,
			Объект.ПодразделениеКомпанииПолучатель,
			Ложь,
			ДоговорЦеныНоменклатуры);
		
		// Сохраним в таблице кеша новое полученное значение.
		СтрокаЦен = СтарыеЦены.Добавить();
		СтрокаЦен.ТипЦен                     = ТипЦен;
		СтрокаЦен.Номенклатура               = ТекСтрока.Номенклатура;
		СтрокаЦен.Контрагент                 = КонтрагентЦеныНоменклатуры;
		СтрокаЦен.ДоговорВзаиморасчетов      = ДоговорЦеныНоменклатуры;
		СтрокаЦен.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
		СтрокаЦен.ЕдиницаИзмерения           = ТекСтрока.ЕдиницаИзмерения;
		СтрокаЦен.ПодразделениеКомпании      = Объект.ПодразделениеКомпанииПолучатель;
		СтрокаЦен.Цена                       = ЦенаСтарая;
	Иначе
		ЦенаСтарая = СтрокиТаблицы[0].Цена;
	КонецЕсли;
	
	ТекСтрока.ЦенаСтарая = ЦенаСтарая;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПроцентНаценкиИзНоменклатуры(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ИзменениеПараметровРасчетаТипаЦены(ДополнительныеПараметры.ПараметрыРасчетаТипаЦен, ?(РезультатОповещения = КодВозвратаДиалога.Да, Истина, Ложь));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТребуетсяУстановкаДатыНачала(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Объект.ДатаНачалаДействия = Объект.Дата;
		ДатаНачалаДействияПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияПодбораНоменклатурыНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПодобраннаяНоменклатура = ПолучитьИзВременногоХранилища(РезультатОповещения.Корзина);
	
	ТекущаяСтрока = ?(ТаблицаНоменклатуры.Количество() = 0, -1, Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаТоваров Из ПодобраннаяНоменклатура Цикл
		ПараметрыОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТоваров);
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество()=0 Тогда
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
			
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаТабличнойЧасти.НомерСтроки = ТаблицаНоменклатуры.Количество();
			СтрокаТабличнойЧасти.ВалютаУчета                      = СтрокаТабличнойЧасти.Номенклатура.ВалютаУчета;
			СтрокаТабличнойЧасти.ТипНоменклатуры                  = СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры;
			
			ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(СтрокаТабличнойЧасти.ТипНоменклатуры);
			ВладелецЕдиницыИзмерения = ?(ПараметрыТипаНоменклатуры.ИспользованиеЕдиницИзмерения = 1, СтрокаТабличнойЧасти.ТипНоменклатуры, СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокаТабличнойЧасти.ОсновнаяЕдиницаИзмерения           = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(СтрокаТабличнойЧасти.Номенклатура, ВладелецЕдиницыИзмерения);
			СтрокаТабличнойЧасти.КоэффициентОсновнойЕдиницы         = СтрокаТабличнойЧасти.ОсновнаяЕдиницаИзмерения.Коэффициент;
			
			Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
			ТаблицаНоменклатурыНоменклатураПриИзмененииНаСервере();
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = ?(ТекущаяСтрока = -1, ТаблицаНоменклатуры[0].ПолучитьИдентификатор(), ТекущаяСтрока);
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьЦеныТоваров()
	
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки);
		НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекущаяСтрокаТипаЦен Из НайденныеСтроки Цикл
			ПредставлениеЦены = СтрЗаменить(ТекущаяСтрокаТипаЦен.ТипЦен.УникальныйИдентификатор(),"-","_");
			НоваяСтрока        = Объект.Товары.Добавить();
			НоваяСтрока.ТипЦен = ТекущаяСтрокаТипаЦен.ТипЦен;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			Если ТекущаяСтрокаТипаЦен.Рассчитывается Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока.Цена           = ТекущаяСтрока["ЦенаНовая"+ПредставлениеЦены];
			НоваяСтрока.ЦенаБазовая    = ТекущаяСтрока["ЦенаБазовая"+ПредставлениеЦены];
			НоваяСтрока.ПроцентНаценки = ТекущаяСтрока["ПроцентНаценки"+ПредставлениеЦены];
			НоваяСтрока.СуммаНаценки   = ТекущаяСтрока["СуммаНаценки"+ПредставлениеЦены];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ПерерасчетРасчетныхЦен()
	
	// Заполним расчетные цены по документу, базовый тип цен которых в документе
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ПересчитатьРасчетныеЦеныНаСервере(ТекСтрока);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Рассчитывается", Истина);
	НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		БазовыйТипЦен = ТекущаяСтрока.ТипЦен.БазовыйТипЦен;
		Если Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("ТипЦен", БазовыйТипЦен)).Количество() = 0 Тогда
			// Заполним расчетную цену из регистра
			СтрокаНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
			АлгоритмПолученияЦены = БазовыйТипЦен.АлгоритмПолученияЦены;
			СтруктураОтбораЦены = Новый Структура;
			СтруктураОтбораЦены.Вставить("ТипЦен", БазовыйТипЦен);
			СтруктураОтбораЦены.Вставить("Номенклатура", СтрокаНоменклатуры[0].Номенклатура);
			Если АлгоритмПолученияЦены = 2 Тогда
				СтруктураОтбораЦены.Вставить("ХарактеристикаНоменклатуры", СтрокаНоменклатуры[0].ХарактеристикаНоменклатуры);
			ИначеЕсли АлгоритмПолученияЦены = 3 Тогда
				СтруктураОтбораЦены.Вставить("ЕдиницаИзмерения", СтрокаНоменклатуры[0].ЕдиницаИзмерения);
			КонецЕсли;
			СтруктураОтбораЦены.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпанииПолучатель);
			Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента Тогда
				СтруктураОтбораЦены.Вставить("Контрагент", Объект.Контрагент);
			КонецЕсли;
			СтруктураЦенНоменклатуры = РегистрыСведений.Цены.ПолучитьПоследнее(?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса()), СтруктураОтбораЦены);
			Если НЕ СтруктураЦенНоменклатуры = Неопределено Тогда
				НайденныеСтроки = ТаблицаНаценокРасчетныхЦен.НайтиСтроки(Новый Структура("ТипЦен", ТекущаяСтрока.ТипЦен));
				СтруктураОтбор = Новый Структура("ЦеноваяГруппа", СтрокаНоменклатуры[0].Номенклатура.ЦеноваяГруппа);
				НайденныеСтрокиПроцент = НайденныеСтроки[0].ПроцентыСкидкиНаценки.НайтиСтроки(СтруктураОтбор);
				// mikolv1
				// КурсВалюты = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ТекущаяСтрока.Валюта))[0].Курс;
				КурсВалюты = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ТекущаяСтрока.ТипЦен.ВалютаЦены))[0].Курс;
				Если БазовыйТипЦен.ВВалютеУчета Тогда
					ВалютаБазовойЦены = СтрокаНоменклатуры[0].ВалютаУчета;
				Иначе
					ВалютаБазовойЦены = БазовыйТипЦен.ВалютаЦены;
				КонецЕсли;
				
				НайденныеСтрокиВалюта = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаБазовойЦены));
				Если НайденныеСтрокиВалюта.Количество() > 0 Тогда
					КурсВалютыБазовой = НайденныеСтрокиВалюта[0].Курс;
				Иначе
					КурсВалютыБазовой = Неопределено;
				КонецЕсли;
				
				ЦенаТипацен = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтруктураЦенНоменклатуры.Цена, ВалютаБазовойЦены, КурсВалютыБазовой, ТекущаяСтрока.Валюта, КурсВалюты);
				
				Если НайденныеСтрокиПроцент.Количество() = 0 Тогда
					ПроцентСкидкиНаценки = ЦенаТипацен * НайденныеСтроки[0].Коэффициент;
				Иначе
					ПроцентСкидкиНаценки = ЦенаТипацен * НайденныеСтрокиПроцент[0].Коэффициент;
				КонецЕсли;
				ТекущаяСтрока.Цена =  ПроцентСкидкиНаценки;
				СтрокаНоменклатуры[0]["Цена"+СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_")] = ЦенаТипацен;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЦенНоменклатуры(СтрокаИзменений, ИмяТаблицы = "ТаблицаНоменклатуры")
	
	Цена = 0;
	ПроцентНаценки = 0;
	СуммаНаценки = 0;
	
	Если ИмяТаблицы = "ТаблицаНоменклатуры" Тогда
		НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,Рассчитывается", СтрокаИзменений.ИдентификаторСтроки,Ложь));
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаИзменений.Номенклатура);
			
			Если ТекущаяСтрока.Аналитика = 2 Тогда
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаИзменений.ХарактеристикаНоменклатуры);
			ИначеЕсли ТекущаяСтрока.Аналитика = 3 Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаИзменений.ЕдиницаИзмерения);
			КонецЕсли;
			
			НайденныеНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаНоменклатуры Из НайденныеНоменклатуры Цикл
				СтрокаНоменклатуры["ЦенаНовая"+ПредставлениеЦены]      = СтрокаИзменений["ЦенаНовая"+ПредставлениеЦены];
				СтрокаНоменклатуры["ПроцентНаценки"+ПредставлениеЦены] = СтрокаИзменений["ПроцентНаценки"+ПредставлениеЦены];
				СтрокаНоменклатуры["СуммаНаценки"+ПредставлениеЦены]   = СтрокаИзменений["СуммаНаценки"+ПредставлениеЦены];
				
				ПересчитатьРасчетныеЦеныНаСервере(СтрокаНоменклатуры);
				// Обновим таблицу цен
				ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", СтрокаНоменклатуры.ИдентификаторСтроки,ТекущаяСтрока.ТипЦен));
				
				Для Каждого ТекущаяСтрокаТипаЦен Из ЦеныНоменклатуры Цикл
					ТекущаяСтрокаТипаЦен.Цена           = СтрокаНоменклатуры["ЦенаНовая"+ПредставлениеЦены];
					ТекущаяСтрокаТипаЦен.ПроцентНаценки = СтрокаНоменклатуры["ПроцентНаценки"+ПредставлениеЦены];
					ТекущаяСтрокаТипаЦен.СуммаНаценки   = СтрокаНоменклатуры["СуммаНаценки"+ПредставлениеЦены];
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Если СтрокаИзменений.Рассчитывается ИЛИ СтрокаИзменений.ИдентификаторСтроки = "" Тогда
			Возврат;
		КонецЕсли;
		
		СтрокиНоменклатурыЦены = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаИзменений.ИдентификаторСтроки));
		СтрокаНоменклатурыЦены = СтрокиНоменклатурыЦены[0];
		// Найдем все строки с данной номенклатурой
		СтруктураОтбора = Новый Структура;
		ПредставлениеЦены = СтрЗаменить(СтрокаИзменений.ТипЦен.УникальныйИдентификатор(),"-","_");
		СтруктураОтбора.Вставить("Номенклатура", СтрокаНоменклатурыЦены.Номенклатура);
		
		Если СтрокаИзменений.Аналитика = 2 Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаНоменклатурыЦены.ХарактеристикаНоменклатуры);
		ИначеЕсли СтрокаИзменений.Аналитика = 3 Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаНоменклатурыЦены.ЕдиницаИзмерения);
		КонецЕсли;
		
		НайденныеНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаНоменклатуры Из НайденныеНоменклатуры Цикл
			СтрокаНоменклатуры["ЦенаНовая"+ПредставлениеЦены]      = СтрокаИзменений.Цена;
			СтрокаНоменклатуры["ПроцентНаценки"+ПредставлениеЦены] = СтрокаИзменений.ПроцентНаценки;
			СтрокаНоменклатуры["СуммаНаценки"+ПредставлениеЦены]   = СтрокаИзменений.СуммаНаценки;
			
			ПересчитатьРасчетныеЦеныНаСервере(СтрокаНоменклатуры);
			// Обновим таблицу цен
			ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", СтрокаНоменклатуры.ИдентификаторСтроки,СтрокаИзменений.ТипЦен));
			
			Для Каждого ТекущаяСтрокаТипаЦен Из ЦеныНоменклатуры Цикл
				ТекущаяСтрокаТипаЦен.Цена           = СтрокаНоменклатуры["ЦенаНовая"+ПредставлениеЦены];
				ТекущаяСтрокаТипаЦен.ПроцентНаценки = СтрокаНоменклатуры["ПроцентНаценки"+ПредставлениеЦены];
				ТекущаяСтрокаТипаЦен.СуммаНаценки   = СтрокаНоменклатуры["СуммаНаценки"+ПредставлениеЦены];
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаПоложенияТекущегоТипаЦен()
	
	Если Элементы.ТаблицаНоменклатуры.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = Элементы.ТаблицаНоменклатуры.ТекущийЭлемент.Имя;
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ИдентификаторНоменклатуры = ТекущиеДанные.ИдентификаторСтроки;
		
		Если СтрНайти(ИмяЭлемента, "Цена") > 0 ИЛИ СтрНайти(ИмяЭлемента, "Наценки") > 0 Тогда
			Для Каждого ТекущаяСтрокаТипаЦен Из ТаблицаТипыЦен Цикл
				Если ТекущаяСтрокаТипаЦен.ИдентификаторСтроки = ИдентификаторНоменклатуры И СтрНайти(ИмяЭлемента, СтрЗаменить(ТекущаяСтрокаТипаЦен.ТипЦен.УникальныйИдентификатор(),"-","_")) И НЕ ТекущаяСтрокаТипаЦен.Рассчитывается Тогда
					Элементы.ТаблицаТипыЦен.ТекущаяСтрока = ТекущаяСтрокаТипаЦен.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанныеТипаЦен = Элементы.ТаблицаТипыЦен.ТекущиеДанные;
	Если ТекущиеДанныеТипаЦен <> Неопределено Тогда
		Элементы.ТаблицаНоменклатурыПересчитатьЦенуТипаЦены.Заголовок = НСтр("ru = 'Для типа цен ""'")+ ТекущиеДанныеТипаЦен.ТипЦен + """";
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановкаПоложенияТекущегоТипаЦенНоменклатуры()
	
	ТекущиеДанные = Элементы.ТаблицаТипыЦен.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущийЭлемент.Имя = "ТаблицаТипыЦен" Тогда
		Элементы.ТаблицаНоменклатуры.ТекущийЭлемент = Элементы["ТаблицаНоменклатурыЦенаНовая"+СтрЗаменить(ТекущиеДанные.ТипЦен.УникальныйИдентификатор(),"-","_")];
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЕдиницыИзмеренияТипамЦен(СтрокаНоменклатуры)
	
	Если СтрокаНоменклатуры = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,Рассчитывается", СтрокаНоменклатуры.ИдентификаторСтроки, Ложь));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		РасчетПоЕдинице = ТекущаяСтрока.Аналитика = 3;
		ТекущаяСтрока.ЕдиницаИзмерения = ?(РасчетПоЕдинице, СтрокаНоменклатуры.ЕдиницаИзмерения, СтрокаНоменклатуры.ОсновнаяЕдиницаИзмерения);
		ТекущаяСтрока.Коэффициент      = ?(РасчетПоЕдинице, СтрокаНоменклатуры.Коэффициент, СтрокаНоменклатуры.КоэффициентОсновнойЕдиницы);
		
		ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущаяСтрока.ИдентификаторТипаЦен, СтрокаНоменклатуры, "ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмерения);
		ЗаполнениеРеквизитовТаблицыНоменклатуры(ТекущаяСтрока.ИдентификаторТипаЦен, СтрокаНоменклатуры, "Коэффициент",      ТекущаяСтрока.Коэффициент);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуТоварами(ТаблицаТоваров)
	
	Если ТаблицаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ?(ТаблицаНоменклатуры.Количество() = 0, -1, Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбновлятьБазовыеЦены", Ложь);
	ДополнительныеПараметры.Вставить("ОбновлятьСтарыеЦены",  Ложь);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		НоваяСтрока.НомерСтроки = ТаблицаНоменклатуры.Количество();
		Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		НоваяСтрока.ТипНоменклатуры                  = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		
		ПараметрыТипаНоменклатуры = ПолучитьПараметрыТипаНоменклатуры(НоваяСтрока.ТипНоменклатуры);
		ВладелецЕдиницыИзмерения = ?(ПараметрыТипаНоменклатуры.ИспользованиеЕдиницИзмерения = 1, НоваяСтрока.ТипНоменклатуры, НоваяСтрока.Номенклатура);
		
		НоваяСтрока.ОсновнаяЕдиницаИзмерения           = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(НоваяСтрока.Номенклатура, ВладелецЕдиницыИзмерения);
		НоваяСтрока.КоэффициентОсновнойЕдиницы         = НоваяСтрока.ОсновнаяЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.ВалютаУчета                        = НоваяСтрока.Номенклатура.ВалютаУчета;
		
		ТаблицаНоменклатурыНоменклатураПриИзмененииНаСервере(ДополнительныеПараметры);
	КонецЦикла;
	
	ОбновитьСтарыеЦены(Истина);
	УстановитьВидимостьБазовойЦены();
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = ?(ТекущаяСтрока = -1, ТаблицаНоменклатуры[0].ПолучитьИдентификатор(), ТекущаяСтрока);
		Элементы.ТаблицаТипыЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтроки,Рассчитывается", ТаблицаНоменклатуры[0].ИдентификаторСтроки, Ложь);
		Элементы.ТаблицаТипыЦен.Обновить();
	КонецЕсли;
	// mikolv1
	// ОбработатьТаблицуТоварыПоТипуЦен();
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуПараметрыРасчета()
	
	Для Каждого Строка Из Объект.ПараметрыРасчета Цикл
		Строка.Рассчитывается        = Строка.ТипЦен.Рассчитывается;
		Строка.ВВалютеУчета          = Строка.ТипЦен.ВВалютеУчета;
		Строка.ВалютаЦены            = Строка.ТипЦен.ВалютаЦены;
		Строка.АлгоритмПолученияЦены = Строка.ТипЦен.АлгоритмПолученияЦены;
		Строка.ВалютаБазовойЦены     = Строка.ТипЦен.БазовыйТипЦен.ВалютаЦены;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьПараметрыНоменклатуры(Номенклатура)
	
	Результат = Новый Структура;
	Результат.Вставить("ВалютаУчета", Номенклатура.ВалютаУчета);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ОсновнаяЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(Номенклатура);
		Результат.Вставить("ОсновнаяЕдиницаИзмерения", ОсновнаяЕдиницаИзмерения);
		Результат.Вставить("Коэффициент", ОсновнаяЕдиницаИзмерения.Коэффициент);
		Результат.Вставить("УчетЦенТолькоВРазрезеДопПараметров", Номенклатура.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров);
		НеЗаполненаХарактеристикаНоменклатуры = НЕ Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 3;
		Результат.Вставить("НеЗаполненаХарактеристикаНоменклатуры", НеЗаполненаХарактеристикаНоменклатуры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПроцентНаценкиНаСеревере(Номенклатура)
	
	Возврат Номенклатура.ПроцентНаценки;
	
КонецФункции  

&НаСервере
Процедура УстановитьНачальныеПредставлениеТиповЦен(УстановитьТекущийЭлемент = Ложь)
	
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		Если ТекущаяСтрока.ТипЦен.Рассчитывается Тогда
			Продолжить;
		КонецЕсли;
		Если УстановитьТекущийЭлемент Тогда
			ПредставлениеТипаЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
			Элементы.ТаблицаНоменклатуры.ТекущийЭлемент = Элементы["ТаблицаНоменклатурыЦенаНовая"+ПредставлениеТипаЦены];
			УстановитьТекущийЭлемент = Ложь;
		КонецЕсли;
		
		ТипЦены = ТекущаяСтрока.ТипЦен;
		
		// Добавим типы цен без привязки к номенклатуре для настройки до заполнения ТЧ товарами
		Если НЕ ТипЦены.Рассчитывается И ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ТипЦен,ИдентификаторСтроки", ТипЦены, "")).Количество() = 0 Тогда
			СтрокаТипаЦеныНоменклатуры = ТаблицаТипыЦен.Добавить();
			СтрокаТипаЦеныНоменклатуры.ТипЦен = ТипЦены;
			СтрокаТипаЦеныНоменклатуры.Валюта = ?(ТипЦены.ВВалютеУчета, Неопределено, ТипЦены.ВалютаЦены);
			ОбновитьКурсыВалют(СтрокаТипаЦеныНоменклатуры.Валюта);
			СтрокаТипаЦеныНоменклатуры.ПараметрыРасчета = СформироватьСтрокуПараметровРасчета(ТекущаяСтрока);
			СтрокаТипаЦеныНоменклатуры.ИдентификаторТипаЦен = СтрЗаменить(ТипЦены.УникальныйИдентификатор(),"-","_");
			СтрокаТипаЦеныНоменклатуры.Рассчитывается = Ложь;
			Аналитика = "";
			АлгоритмПолученияЦены = ТипЦены.АлгоритмПолученияЦены;
			Если АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре Тогда
				СтрокаТипаЦеныНоменклатуры.Аналитика = 1;
			ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
				СтрокаТипаЦеныНоменклатуры.Аналитика = 2;
				Аналитика = "(по харакетристике)";
			ИначеЕсли АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
				СтрокаТипаЦеныНоменклатуры.Аналитика = 3;
				Аналитика = "(по единице измерения)";
			КонецЕсли;
			СтрокаТипаЦеныНоменклатуры.Представление = "" + СтрокаТипаЦеныНоменклатуры.ТипЦен + " " + Аналитика;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОчиститьТаблицуТиповЦен(УдалятьВсеТипыЦен = Ложь)
	
	// Найдем все типы цен, которые выводятся при пустой ТЧ Товары
	НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ""));
	
	ТаблицаТипыЦен.Очистить();
	
	Если УдалятьВсеТипыЦен Тогда
		Возврат;
	КонецЕсли;
	// Вернем обратно настройку типов цен
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаТипыЦен.Добавить(), ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнениеРеквизитовДокумента()
	
	ЗаполнениеДаннымиПоДокументу();
	ЗаполнитьТаблицуПараметрыРасчета();
	ПерерасчетРасчетныхЦен();
	ОбновитьСтарыеЦены();
	
	НовыйДокумент = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	УстановитьНачальныеПредставлениеТиповЦен(НовыйДокумент);
	
	УстановитьКонтрагентаДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьКонтрагентаДокумента()
	
	КонтрагентЦеныНоменклатуры = ?(Объект.ХозОперация=Справочники.ХозОперации.УстановкаЦенКомпании ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент),Справочники.Контрагенты.ПустаяСсылка(),Объект.Контрагент);
	ДоговорЦеныНоменклатуры    = ?(Объект.ХозОперация=Справочники.ХозОперации.УстановкаЦенКомпании ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов),Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка(),Объект.ДоговорВзаиморасчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКурсыВалют(ТекущаяВалюта = Неопределено, Обновить = Ложь)
	
	Если Обновить Тогда
		ТаблицаВалют.Очистить();
		СписокВалют = ТаблицаТипыЦен.Выгрузить().Свернуть("Валюта");
		Для Каждого ТекущаяСтрока Из СписокВалют Цикл
			НоваяСтрока = ТаблицаВалют.Добавить();
			НоваяСтрока.Валюта = ТекущаяСтрока.Валюта;
			СтруктураКурса   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрока.Валюта, Объект.Дата);
			НоваяСтрока.Курс = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЦикла;
	Иначе
		НайденныеСтроки = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ТекущаяВалюта));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаВалют.Добавить();
			НоваяСтрока.Валюта = ТекущаяВалюта;
			СтруктураКурса   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрока.Валюта, Объект.Дата);
			НоваяСтрока.Курс = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьКурсыВалютНаКлиенте(ТекущаяВалюта = Неопределено, Обновить = Ложь)
	
	Если Обновить Тогда
		ТаблицаВалют.Очистить();
		СписокВалют = ТаблицаТипыЦен.Выгрузить().Свернуть("Валюта");
		Для Каждого ТекущаяСтрока Из СписокВалют Цикл
			НоваяСтрока = ТаблицаВалют.Добавить();
			НоваяСтрока.Валюта = ТекущаяСтрока.Валюта;
			СтруктураКурса   = ПолучитьКурсВалюты(НоваяСтрока.Валюта, Объект.Дата);
			НоваяСтрока.Курс = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЦикла;
	Иначе
		НайденныеСтроки = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ТекущаяВалюта));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаВалют.Добавить();
			НоваяСтрока.Валюта = ТекущаяВалюта;
			СтруктураКурса   = ПолучитьКурсВалюты(НоваяСтрока.Валюта, Объект.Дата);
			НоваяСтрока.Курс = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, Дата)
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыТипаНоменклатуры(ТипНоменклатуры)
	
	НайденныеСтроки = ТаблицаТиповНоменклатуры.НайтиСтроки(Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Добавим новый тип номенклатуры в ТЗ
		НоваяСтрока = ТаблицаТиповНоменклатуры.Добавить();
		НоваяСтрока.ТипНоменклатуры                    = ТипНоменклатуры;
		НоваяСтрока.УчетЦенТолькоВРазрезеДопПараметров = ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров;
		НоваяСтрока.ИспользованиеХарактеристик         = ТипНоменклатуры.ИспользованиеХарактеристик;
		НоваяСтрока.ИспользованиеЕдиницИзмерения       = ТипНоменклатуры.ИспользованиеЕдиницИзмерения;
		
		Возврат НоваяСтрока;
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
КонецФункции 

&НаСервере
Процедура ОбработатьТаблицуТоварыПоТипуЦен()
	
	ПоНоменклатуре = Ложь;
	ПоХарактеристике = Ложь;
	ПоЕдиницыИзмерения = ложь;
	Для Каждого ТекСтрока Из ТаблицаТипыЦен Цикл
		Если ТекСтрока.ТипЦен.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре Тогда
			ПоНоменклатуре = Истина;
		КонецЕсли;
		
		Если ТекСтрока.ТипЦен.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			ПоХарактеристике = Истина;
		КонецЕсли;
		
		Если ТекСтрока.ТипЦен.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			ПоЕдиницыИзмерения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если (ПоНоменклатуре И ПоХарактеристике И ПоЕдиницыИзмерения) Или (Не ПоНоменклатуре И Не ПоХарактеристике И Не ПоЕдиницыИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоНоменклатуре И Не ПоХарактеристике И Не ПоЕдиницыИзмерения Тогда
		МассивУдаляемыхСтрок  = Новый Массив;
		Для Каждого ТекСтрока Из  ТаблицаНоменклатуры Цикл
			ТекСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			ТекСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			ТекСтрока.Коэффициент = 0;
			
			РезультатПоиска = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			КоличествоСтрок = РезультатПоиска.Количество();
			Если КоличествоСтрок > 1 Тогда
				Индекс = 1;
				Пока Индекс <> КоличествоСтрок Цикл
					Если МассивУдаляемыхСтрок.Найти(РезультатПоиска[Индекс].НомерСтроки) = Неопределено Тогда
						МассивУдаляемыхСтрок.Добавить(РезультатПоиска[Индекс].НомерСтроки);
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		 // Удалим строки
		Для Каждого ТекСтрока Из МассивУдаляемыхСтрок Цикл
			ТаблицаНоменклатуры.Удалить(ТекСтрока-1);
		КонецЦикла;
	ИначеЕсли (Не ПоНоменклатуре И ПоХарактеристике И Не ПоЕдиницыИзмерения) Или (ПоНоменклатуре И ПоХарактеристике И Не ПоЕдиницыИзмерения) Тогда
		МассивУдаляемыхСтрок  = Новый Массив;
		Для Каждого ТекСтрока Из  ТаблицаНоменклатуры Цикл
			ТекСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			ТекСтрока.Коэффициент = 0;
			
			РезультатПоиска = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура, "ХарактеристикаНоменклатуры",ТекСтрока.ХарактеристикаНоменклатуры));
			КоличествоСтрок = РезультатПоиска.Количество();
			Если КоличествоСтрок > 1 Тогда
				Индекс = 1;
				Пока Индекс <> КоличествоСтрок Цикл
					Если МассивУдаляемыхСтрок.Найти(РезультатПоиска[Индекс].НомерСтроки) = Неопределено Тогда
						МассивУдаляемыхСтрок.Добавить(РезультатПоиска[Индекс].НомерСтроки);
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		 // Удалим строки
		Для Каждого ТекСтрока Из МассивУдаляемыхСтрок Цикл
			ТаблицаНоменклатуры.Удалить(ТекСтрока-1);
		КонецЦикла;
	ИначеЕсли (Не ПоНоменклатуре И Не ПоХарактеристике И ПоЕдиницыИзмерения) Или (ПоНоменклатуре И Не ПоХарактеристике И ПоЕдиницыИзмерения) Тогда
		МассивУдаляемыхСтрок  = Новый Массив;
		Для Каждого ТекСтрока Из  ТаблицаНоменклатуры Цикл
			ТекСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
			РезультатПоиска = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура, "ЕдиницаИзмерения",ТекСтрока.ЕдиницаИзмерения));
			КоличествоСтрок = РезультатПоиска.Количество();
			Если КоличествоСтрок > 1 Тогда
				Индекс = 1;
				Пока Индекс <> КоличествоСтрок Цикл
					Если МассивУдаляемыхСтрок.Найти(РезультатПоиска[Индекс].НомерСтроки) = Неопределено Тогда
						МассивУдаляемыхСтрок.Добавить(РезультатПоиска[Индекс].НомерСтроки);
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Удалим строки
		Для Каждого ТекСтрока Из МассивУдаляемыхСтрок Цикл
			ТаблицаНоменклатуры.Удалить(ТекСтрока-1);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиАлгоритмРасчетаВТипахЦен(Таблица, Алгоритм)
	
	Для каждого СтрокаТабл Из Таблица  Цикл
		Если СтрокаТабл.ТипЦен.АлгоритмПолученияЦены = Алгоритм Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьПодсказкуПодразделенияКомпании()
	
	ЭлементПодсказки = Элементы.ПодразделениеКомпанииПолучательРасширеннаяПодсказка;
	Элементы.ПодразделениеКомпанииПолучатель.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеКомпании) Тогда
		Элементы.ПодразделениеКомпанииПолучатель.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		
		ЭлементПодсказки.Заголовок = НСтр("ru = 'Подразделение для которого устанавливаются цены.
		|Цены будут распространяться на подчиненные подразделения если не будут переназначены.'");
	Иначе
		Если Объект.ПодчиненныеПодразделенияКомпании.Количество() = 0 Тогда
			ЭлементПодсказки.Заголовок = НСтр("ru = 'Цены не будут обновлены в подчиненных подразделения'");
		Иначе
			ЭлементыСтроки = Новый Массив;
			ЭлементыСтроки.Добавить(НСтр("ru = 'Цены будут обновлены в'"));
			
			КатегорииЧисла = Новый Массив;
			КатегорииЧисла.Добавить("");
			КатегорииЧисла.Добавить(НСтр("ru = '%1 подчиненном подразделении'"));
			КатегорииЧисла.Добавить(НСтр("ru = '%1 подчиненных подразделениях'"));
			КатегорииЧисла.Добавить(НСтр("ru = '%1 подчиненных подразделениях'"));
			КатегорииЧисла.Добавить(НСтр("ru = '%1 подчиненных подразделениях'"));
			КатегорииЧисла.Добавить("");
			
			ЭлементыСтроки.Добавить(СтрокаСЧислом(
			СтрСоединить(КатегорииЧисла,";"),
			Объект.ПодчиненныеПодразделенияКомпании.Количество(),
			ВидЧисловогоЗначения.Количественное));
			
			ЭлементПодсказки.Заголовок = СтрСоединить(ЭлементыСтроки, " ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТоварыПоПартии()
	
	ТаблицаНоменклатуры.Очистить();
	ОчиститьТаблицуТиповЦен();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровКомпании.Остатки(&МоментВремени, Партия = &Партия) КАК ПартииТоваровКомпанииОстатки";
	Запрос.УстановитьПараметр("МоментВремени", ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)), Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Партия",        Объект.Партия);
	
	ЗаполнятьБазовыеЦены = Истина;
	
	ЗаполнитьТаблицуТоварами(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Ответ, Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	Если Не Элементы.Найти("ТаблицаНоменклатурыНоменклатура")=Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТаблицаНоменклатурыНоменклатура.ПараметрыВыбора, "Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не Элементы.Найти("ДоговорВзаиморасчетов")=Неопределено Тогда
		УправлениеДиалогомСервер.УдалитьПараметрВыбора(Элементы.ДоговорВзаиморасчетов.ПараметрыВыбора,   "Отбор.ВидДоговора");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Доступ = (Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента);
	Элементы.Контрагент.Видимость                 = Доступ;
	Элементы.Контрагент.АвтоОтметкаНезаполненного = Доступ;
	Элементы.ДоговорВзаиморасчетов.Видимость      = Доступ;
	
	Элементы.ТаблицаНоменклатурыНоменклатура.ОтметкаНезаполненного     = Истина;
	Элементы.ТаблицаНоменклатурыНоменклатура.АвтоОтметкаНезаполненного = Истина;
	
	ИспользоватьХарактеристики             = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьКоэффициентЕдиницИзмерения = ПолучитьФункциональнуюОпцию("ИспользоватьКоэффициентЕдиницИзмерения");
	ОтображатьЕдиницуИзмерения             = ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмерения");
	
	Элементы.ТаблицаНоменклатурыЕдиницаИзмерения.Видимость = ОтображатьЕдиницуИзмерения;
	Элементы.ТаблицаНоменклатурыКоэффициент.Видимость      = ИспользоватьКоэффициентЕдиницИзмерения;
	Элементы.ТаблицаНоменклатурыХарактеристикаНоменклатуры.Видимость = ИспользоватьХарактеристики;
	
	ЗаголовокТовары = ТаблицаНоменклатуры.Количество();
	
	Элементы.ТаблицаНоменклатурыПереместитьВверх.Доступность         = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыПереместитьВниз.Доступность          = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыСортироватьПоВозрастанию.Доступность = ЗаголовокТовары > 0;
	Элементы.ТаблицаНоменклатурыСортироватьПоУбыванию.Доступность    = ЗаголовокТовары > 0;
	
	ИмеетсяТипЦенПоЕдинице = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("Рассчитывается,Аналитика", Ложь, 3)).Количество() > 0;
	
	Элементы.ТаблицаНоменклатурыБазоваяЕдиницаКоэффициент.Видимость = ИмеетсяТипЦенПоЕдинице;
	
	ОбновитьПодсказкуПодразделенияКомпании();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект, "ТаблицаНоменклатурыХарактеристикаНоменклатуры", "ТаблицаНоменклатуры.ВладелецХарактеристики");
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект, "ТаблицаНоменклатурыХарактеристикаНоменклатуры", "ТаблицаНоменклатуры");
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТипыЦен.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.ЦенаСтарая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.Цена");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.ИдентификаторСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(83, 106, 194));
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТипыЦен.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.ЦенаСтарая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.Цена");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.ИдентификаторСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РольБезИсполнителей);
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТипыЦен.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.ИдентификаторСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	// Установить запрет редактирования следующих полей
	МассивТипыЦен = Новый Массив();
	МассивТипыЦен.Добавить("ТаблицаТипыЦенЕдиницаИзмерения");
	МассивТипыЦен.Добавить("ТаблицаТипыЦенКоэффициент");
	МассивТипыЦен.Добавить("ТаблицаТипыЦенСтараяЦена");
	МассивТипыЦен.Добавить("ТаблицаТипыЦенБазоваяЦена");
	МассивТипыЦен.Добавить("ТаблицаТипыЦенПроцентНаценки");
	МассивТипыЦен.Добавить("ТаблицаТипыЦенСуммаНаценки");
	МассивТипыЦен.Добавить("ТаблицаТипыЦенНоваяЦена");
	
	Для Каждого Элемент Из МассивТипыЦен Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[Элемент].Имя);
				
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.ИдентификаторСтроки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЦикла;
	
	СписокАналитик = Новый СписокЗначений();
	СписокАналитик.Добавить(1);
	СписокАналитик.Добавить(2);
	СписокАналитик.Добавить(3);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТипыЦенТипЦены.Имя);
				
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.Аналитика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокАналитик;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Элементы.ТаблицаТипыЦенПредставление);
	// для начала очистим и все заполним заново
	КоличествоОформлений = УсловноеОформление.Элементы.Количество() - 1;
	Индекс = 7;
	Для Счетчик = 7 По КоличествоОформлений Цикл
		УсловноеОформление.Элементы.Удалить(УсловноеОформление.Элементы.Получить(Индекс));
	КонецЦикла;
	
	МассивТиповЦен = Новый Массив;
	МассивТиповЦен.Добавить("ТаблицаНоменклатурыЦенаСтарая");
	МассивТиповЦен.Добавить("ТаблицаНоменклатурыЦенаБазовая");
	МассивТиповЦен.Добавить("ТаблицаНоменклатурыПроцентНаценки");
	МассивТиповЦен.Добавить("ТаблицаНоменклатурыСуммаНаценки");
	МассивТиповЦен.Добавить("ТаблицаНоменклатурыЦенаНовая");
	
	МассивТиповЦен1 = Новый Массив;
	МассивТиповЦен1.Добавить("ТаблицаНоменклатурыЦенаНовая");
	МассивТиповЦен1.Добавить("ТаблицаНоменклатурыПроцентНаценки");
	МассивТиповЦен1.Добавить("ТаблицаНоменклатурыСуммаНаценки");
	// сформируем массив цен, для которых запрещено редактирование
	Для Каждого ТекущаяСтрока Из Объект.ПараметрыРасчета Цикл
		ПредставлениеЦены = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ЦенаСтараяБольшеЦеныНовой"+ПредставлениеЦены;
		Для Каждого Строка Из МассивТиповЦен Цикл
			ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Строка + ПредставлениеЦены);
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЦенаСтарая"+ПредставлениеЦены);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЦенаНовая"+ПредставлениеЦены);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РольБезИсполнителей);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ЦенаСтараяМеньшеЦеныНовой"+ПредставлениеЦены;
		Для Каждого Строка Из МассивТиповЦен Цикл
			ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Строка + ПредставлениеЦены);
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЦенаСтарая"+ПредставлениеЦены);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЦенаНовая"+ПредставлениеЦены);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветФонаВыделенияПоля);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ЦенаСтараяБольшеЦеныНовой"+ПредставлениеЦены;
		Для Каждого Строка Из МассивТиповЦен Цикл
			ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Строка + ПредставлениеЦены);
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЦенаНовая"+ПредставлениеЦены);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ТаблицаНоменклатурыТолькоПросмотр" + ПредставлениеЦены;
		Для Каждого ТекущееПоле Из МассивТиповЦен1 Цикл
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТекущееПоле + ПредставлениеЦены);
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ПараметрыУсловногоОформления");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
		ОтборЭлемента.ПравоеЗначение = "ТолькоПросмотр"+ ПредставлениеЦены;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ТаблицаНоменклатурыПоХарактеристике" + ПредставлениеЦены;
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыЦенаНовая" + ПредставлениеЦены);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ПараметрыУсловногоОформления");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
		ОтборЭлемента.ПравоеЗначение = "ПоХарактеристике" + ПредставлениеЦены;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<по характеристике>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ТаблицаНоменклатурыПоЕдиницеИзмерения" + ПредставлениеЦены;
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыЦенаНовая" + ПредставлениеЦены);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ПараметрыУсловногоОформления");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
		ОтборЭлемента.ПравоеЗначение = "ПоЕдиницеИзмерения" + ПредставлениеЦены;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<по единице измерения>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = "ТаблицаТипыЦен_ТолькоПросмотрТекст";
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаТипыЦен.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаКомандыФормыНаСервере(ИмяКоманды, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаКомандыФормы(ЭтотОбъект, ИмяКоманды, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыФормы(Команда) Экспорт
	
	ПараметрыДействия = Новый Структура;

	Если ЛЕВ(Команда.Имя, 17)="КомандаЗаполнения" ИЛИ Команда.Имя = "НастроитьПараметрыДокумента" Тогда
		// заполним ТЧ актуальными данными
		Объект.Товары.Очистить();
		ЗаполнитьЦеныТоваров();
	КонецЕсли;
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект, Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомандыФормыНаСервере(Команда.Имя, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если ЛЕВ(ДополнительныеПараметры, 17)="КомандаЗаполнения" Тогда
		Если Тип(РезультатОповещения) = Тип("Структура")
			 И РезультатОповещения.Свойство("ПараметрыЗаполнения")
			 И РезультатОповещения.ПараметрыЗаполнения.Свойство("ОчиститьТабличнуюЧасть")
			 И РезультатОповещения.ПараметрыЗаполнения.ОчиститьТабличнуюЧасть Тогда
			ТаблицаНоменклатуры.Очистить();
			ОчиститьТаблицуТиповЦен();
		КонецЕсли;
		
		ТаблицаТоваров = Неопределено;
		
		Если ДополнительныеПараметры = "КомандаЗаполненияТоварыЗаполнитьСкладскимиОстатками" Тогда
			ТаблицаНоменклатуры.Очистить();
			ОчиститьТаблицуТиповЦен();
			ТаблицаТоваров = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, РезультатОповещения.ПараметрыЗаполнения);
			//ТаблицаТоваров = Объект.Товары.Выгрузить();
			ЗаполнятьБазовыеЦены = Ложь;
		ИначеЕсли ДополнительныеПараметры = "КомандаЗаполненияТоварыЗаполнитьПоПрайсЛистуКонтрагентаЦены" Тогда
			// Найдем типы цен, где базовые цены расчитываются по прайс-листу контрагента
			НайденныеСтроки = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("РасчетЦенОт", 4));
			
			// Получим номенклатуру из ТЧ
			КопияТаблицыТоваров = Объект.Товары.Выгрузить();
			КопияТаблицыТоваров.Свернуть("Номенклатура");
			
			ТаблицаНоменклатурыПрайсЛиста = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(
				Объект.ПрайсЛистКонтрагента,
				КопияТаблицыТоваров.ВыгрузитьКолонку("Номенклатура")
			);
			
			Если НЕ ТаблицаНоменклатурыПрайсЛиста = Неопределено Тогда
				Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
					ИдентификаторТипаЦен = СтрЗаменить(ТекущаяСтрока.ТипЦен.УникальныйИдентификатор(),"-","_");
					
					Для Каждого ТекущаяСтрокаТоваров Из ТаблицаНоменклатурыПрайсЛиста Цикл
						Документы.ИзменениеЦен.УстановитьЦенуНоменклатурыПрайсЛиста(Объект, ТекущаяСтрока, ТекущаяСтрокаТоваров);
						// Занесем изменения в текущую ТЗ номенклатуры и типа цен
						СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура",  ТекущаяСтрокаТоваров.Номенклатура));
						СтрокаТоваров      = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,ТипЦен", ТекущаяСтрокаТоваров.Номенклатура, ТекущаяСтрока.ТипЦен));
						
						Если СтрокиНоменклатуры.Количество() > 0 Тогда 
							СтрокаНоменклатуры = СтрокиНоменклатуры[0];
							СтрокаНоменклатуры["ЦенаБазовая" + ИдентификаторТипаЦен]    = СтрокаТоваров[0].ЦенаБазовая;
							СтрокаНоменклатуры["ЦенаНовая" + ИдентификаторТипаЦен]      = СтрокаТоваров[0].Цена;
							СтрокаНоменклатуры["СуммаНаценки" + ИдентификаторТипаЦен]   = СтрокаТоваров[0].СуммаНаценки;
							СтрокаНоменклатуры["ПроцентНаценки" + ИдентификаторТипаЦен] = СтрокаТоваров[0].ПроцентНаценки;
							
							// Обновим таблицу цен
							ЦеныНоменклатуры = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ТипЦен", СтрокаНоменклатуры.ИдентификаторСтроки,ТекущаяСтрока.ТипЦен));
							
							Для Каждого ТекущаяСтрокаТипаЦен Из ЦеныНоменклатуры Цикл
								ТекущаяСтрокаТипаЦен.ЦенаБазовая    = СтрокаНоменклатуры["ЦенаБазовая"+ИдентификаторТипаЦен];
								ТекущаяСтрокаТипаЦен.Цена           = СтрокаНоменклатуры["ЦенаНовая"+ИдентификаторТипаЦен];
								ТекущаяСтрокаТипаЦен.ПроцентНаценки = СтрокаНоменклатуры["ПроцентНаценки"+ИдентификаторТипаЦен];
								ТекущаяСтрокаТипаЦен.СуммаНаценки   = СтрокаНоменклатуры["СуммаНаценки"+ИдентификаторТипаЦен];
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаТоваров = Неопределено;
		ИначеЕсли ДополнительныеПараметры = "КомандаЗаполненияТоварыЗаполнитьНоменклатуройПоПрайсЛистуКонтрагента" Тогда
			ТаблицаНоменклатуры.Очистить();
			ОчиститьТаблицуТиповЦен();
			Объект.Товары.Очистить();
			ПрайсЛистКонтрагента = РезультатОповещения.ПараметрыЗаполнения.ПрайсЛистКонтрагента;
			Если Объект.ПрайсЛистКонтрагента <> ПрайсЛистКонтрагента Тогда
				Объект.ПрайсЛистКонтрагента = ПрайсЛистКонтрагента;
			КонецЕсли;
			// Получили всю номенклатуру из прайслиста. Цены как в прайслисте
			ТаблицаТоваров = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(ПрайсЛистКонтрагента, , Истина);
			Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
				
				Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
					Документы.ИзменениеЦен.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
					НоваяСтрока.ТипЦен       = ТекущийТипЦен.ТипЦен;
				КонецЦикла;
			КонецЦикла;
			
			ЗаполнитьТаблицуНоменклатуры();
			ТаблицаТоваров = Новый ТаблицаЗначений;
			ЗаполнятьБазовыеЦены = Ложь;
		ИначеЕсли ДополнительныеПараметры = "КомандаЗаполненияТоварыЗаполнитьПоОснованию" И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.Товары.Очистить();
			ТаблицаНоменклатуры.Очистить();
			ОчиститьТаблицуТиповЦен();
			// mikolv1
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Комплектация") Тогда
				ТаблицаПолученнойНоменклатуры = Новый ТаблицаЗначений;
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("Количество");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("Коэффициент");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("Номенклатура");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("Сумма");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("СуммаРозничная");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("ХарактеристикаНоменклатуры");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("Цена");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("ЦенаРозничная");
				ТаблицаПолученнойНоменклатуры.Колонки.Добавить("Ячейка");
				НоваяСтрока = ТаблицаПолученнойНоменклатуры.Добавить();
				Если НайтиАлгоритмРасчетаВТипахЦен(Объект.ПараметрыРасчета, Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения) Тогда
					НоваяСтрока.Коэффициент = Объект.ДокументОснование.КомплектЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.ЕдиницаИзмерения = Объект.ДокументОснование.КомплектЕдиницаИзмерения;
				ИначеЕсли НайтиАлгоритмРасчетаВТипахЦен(Объект.ПараметрыРасчета, Перечисления.АлгоритмПолученияЦены.ПоХарактеристике) Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = Объект.ДокументОснование.ХарактеристикаКомплекта;
				КонецЕсли;
				НоваяСтрока.Номенклатура = Объект.ДокументОснование.Комплект;
				НоваяСтрока.Цена = Объект.ДокументОснование.ЦенаКомплекта;
				НоваяСтрока.ЦенаРозничная = Объект.ДокументОснование.ЦенаКомплектаРозничная;
				НоваяСтрока.Количество = Объект.ДокументОснование.КоличествоКомплектов;
				НоваяСтрока.Сумма = Объект.ДокументОснование.СуммаДокумента;
				НоваяСтрока.Ячейка = Объект.ДокументОснование.Ячейка;
			Иначе
				ТаблицаПолученнойНоменклатуры = Объект.ДокументОснование.Товары.Выгрузить();
			КонецЕсли;
			// ТаблицаПолученнойНоменклатуры = Объект.ДокументОснование.Товары.Выгрузить();
			ВалютаДокументаОснования = Объект.ДокументОснование.ВалютаДокумента;
			КурсДокументаОснования   = Объект.ДокументОснование.КурсДокумента;
			Для Каждого ТекущаяСтрока Из ТаблицаПолученнойНоменклатуры Цикл
				ВалютаЦены = ТекущаяСтрока.Номенклатура.ВалютаУчета;
				ОбновитьКурсыВалют(ВалютаЦены);
				Для Каждого ТекущийТипЦен Из Объект.ПараметрыРасчета Цикл
					ВалютаЦеныРасчета   = ?(ТекущийТипЦен.ТипЦен.ВВалютеУчета, ВалютаЦены, ТекущийТипЦен.ТипЦен.ВалютаЦены);
					КурсЦеныРасчета     = ТаблицаВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаЦеныРасчета))[0].Курс;
					НоваяСтрока = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.ТипЦен = ТекущийТипЦен.ТипЦен;
					НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекущаяСтрока.Цена, ВалютаДокументаОснования, КурсДокументаОснования, ВалютаЦеныРасчета, КурсЦеныРасчета);
				КонецЦикла;
			КонецЦикла;
			
			Документы.ИзменениеЦен.ЗаполнитьБазовыеЦены(Объект);
			ЗаполнитьТаблицуНоменклатуры();
			ТаблицаТоваров = Новый ТаблицаЗначений;
			ЗаполнятьБазовыеЦены = Ложь;
		ИначеЕсли ДополнительныеПараметры = "КомандаЗаполненияТоварыЗаполнитьПоДокументу" Тогда
			ДокументЗаполнения = РезультатОповещения.ПараметрыЗаполнения.ЗаполнитьПоДокументуВыборСсылки;
			// mikolv1
			Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.Комплектация") Тогда
				ТаблицаТоваров = Новый ТаблицаЗначений;
				ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
				ТаблицаТоваров.Колонки.Добавить("Количество");
				ТаблицаТоваров.Колонки.Добавить("Коэффициент");
				ТаблицаТоваров.Колонки.Добавить("Номенклатура");
				ТаблицаТоваров.Колонки.Добавить("Сумма");
				ТаблицаТоваров.Колонки.Добавить("СуммаРозничная");
				ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
				ТаблицаТоваров.Колонки.Добавить("Цена");
				ТаблицаТоваров.Колонки.Добавить("ЦенаРозничная");
				ТаблицаТоваров.Колонки.Добавить("Ячейка");
				НоваяСтрока = ТаблицаТоваров.Добавить();
				Если НайтиАлгоритмРасчетаВТипахЦен(Объект.ПараметрыРасчета, Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения) Тогда
					НоваяСтрока.Коэффициент = ДокументЗаполнения.КомплектЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.ЕдиницаИзмерения = ДокументЗаполнения.КомплектЕдиницаИзмерения;
				ИначеЕсли НайтиАлгоритмРасчетаВТипахЦен(Объект.ПараметрыРасчета, Перечисления.АлгоритмПолученияЦены.ПоХарактеристике) Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = ДокументЗаполнения.ХарактеристикаКомплекта;
				КонецЕсли;
				
				НоваяСтрока.Номенклатура = ДокументЗаполнения.Комплект;
				НоваяСтрока.Цена = ДокументЗаполнения.ЦенаКомплекта;
				НоваяСтрока.ЦенаРозничная = ДокументЗаполнения.ЦенаКомплектаРозничная;
				НоваяСтрока.Количество = ДокументЗаполнения.КоличествоКомплектов;
				НоваяСтрока.Сумма = ДокументЗаполнения.СуммаДокумента;
				НоваяСтрока.Ячейка = ДокументЗаполнения.Ячейка;
			ИначеЕсли ЕстьРеквизит(ДокументЗаполнения,, "Товары") Тогда
				ТаблицаТоваров = ДокументЗаполнения.Товары.Выгрузить();
			КонецЕсли;
			// ТаблицаТоваров = ДокументЗаполнения.Товары.Выгрузить();
		ИначеЕсли ДополнительныеПараметры = "КомандаЗаполненияТоварыЗагрузкаИзФайла" Тогда
			// Получим параметры работы
			АдресТаблицаЗагрузкаИЗФайлаВХранилище = РезультатОповещения.ПараметрыЗаполнения.ЗагрузкаИзФайла.АдресТаблицаЗагрузкаИЗФайлаВХранилище;
			// Производим заполнение таблицы объекта
			Если ЗначениеЗаполнено(АдресТаблицаЗагрузкаИЗФайлаВХранилище) Тогда
				ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТаблицаЗагрузкаИЗФайлаВХранилище);
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры = "КомандаЗаполненияТоварыЗаполнитьНоменклатуройПоЦеновойГруппе" Тогда
			ЦеноваяГруппа = РезультатОповещения.ПараметрыЗаполнения.ЦеноваяГруппа;
			ТаблицаТоваров = Документы.ИзменениеЦен.ЗаполнитьПоЦеновойГруппе(Объект,ЦеноваяГруппа);
		КонецЕсли;
		
		ЗаполнитьТаблицуТоварами(ТаблицаТоваров);
	ИначеЕсли ДополнительныеПараметры = "РазрешенияДляПересчета" И РезультатОповещения.Свойство("ТребуетсяУстановкаЦен") И РезультатОповещения.ТребуетсяУстановкаЦен Тогда
		РезультатОповещения.ТребуетсяУстановкаЦен = Ложь;
		Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
			ПолучениеСтаройБазовойЦены(ТекущаяСтрока.ИдентификаторСтроки,,, Ложь);
		КонецЦикла;
	ИначеЕсли ДополнительныеПараметры = "ВыборПодчиненныхПодразделений" Тогда
		Объект.ПодчиненныеПодразделенияКомпании.Очистить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(
			Объект.ПодчиненныеПодразделенияКомпании,
			РезультатОповещения,
			"ПодразделениеКомпании");
		
		ОбновитьПодсказкуПодразделенияКомпании();
		
		Возврат;
	Иначе
		// Вызываем общий обработчик события
		Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "РазрешенияДляПересчета" Тогда
		// Пересчет расчетных цен документа
		Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ПересчитатьРасчетныеЦеныНаСервере(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеПараметры="ПараметрыДокумента" И Тип(РезультатОповещения) = Тип("Структура") И РезультатОповещения.Свойство("ИзмененныеРеквизиты") И РезультатОповещения.ИзмененныеРеквизиты.Свойство("ДокументОснование") Тогда
		// Найдем типы цен, которые рассчитываются от документа основания и перезаполним базовые цены.
		НайденныеТипыЦен = Объект.ПараметрыРасчета.НайтиСтроки(Новый Структура("РасчетЦенОт", 1));
		
		Для Каждого ТекущаяСтрока Из НайденныеТипыЦен Цикл
			// Найдем описанные типы цен
			НайденныеСтроки = ТаблицаТипыЦен.НайтиСтроки(Новый Структура("ТипЦен,Рассчитывается", ТекущаяСтрока.ТипЦен, Ложь));
			
			Для Каждого ТекущийТипЦен Из НайденныеСтроки Цикл
				ПолучениеСтаройБазовойЦены(ТекущийТипЦен.ИдентификаторСтроки,,, Ложь);
			КонецЦикла;
		КонецЦикла;
		// Пересчет расчетных цен документа
		ПерерасчетРасчетныхЦен();
		УстановитьВидимостьБазовойЦены();
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
		Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ПодборНоменклатуры" Тогда
		ОбработкаРезультатаОповещенияПодбораНоменклатурыНаСервере(РезультатОповещения);
	Иначе
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДополнительныеПараметры="ПараметрыДокумента" Тогда
		Если Тип(РезультатОповещения) = Тип("Структура") И РезультатОповещения.Свойство("ТребуетсяУстановкаДатыНачала") И РезультатОповещения.ТребуетсяУстановкаДатыНачала Тогда
			ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТребуетсяУстановкаДатыНачала", ЭтотОбъект, "ТребуетсяУстановкаДатыНачала");
			ТекстВопроса = НСтр("ru = 'Дата документа изменена. Сменить дату начала действия цен товаров?'");
			ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		ТаблицаНоменклатурыПослеУдаления(Элементы.ТаблицаНоменклатуры);
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
