
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УстановитьУсловноеОформлениеДерева();
	ЗаполнитьДеревоПодразделенийКомпании();
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
	Элементы.ВыбранныеТипыЦенПредставлениеПараметровРасчета.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ИзменениеЦен);	
	
	Если Объект.ПараметрыРасчета.Количество() > 0
		И Объект.Ссылка.Пустая() Тогда
		
		ИнициализироватьСлужебныеРеквизитыТиповЦен(); 
		ЗагрузитьТипыЦен(Объект.ПараметрыРасчета.Выгрузить());  
		ОбновитьРеквизитыДляТиповЦен(Объект.ПараметрыРасчета.Выгрузить().ВыгрузитьКолонку("ТипЦен"));
		ЗаполнитьЦеныТоваровПоДаннымИзБазы(Объект.Товары.Выгрузить());
		НастроитьФорму(); 
		Возврат;
		
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСлужебныеРеквизитыТиповЦен();
	ЗагрузитьТипыЦен();
	НастроитьФорму();
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДиалогомДокументаКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Выбор типов цен важен для новых документов
	// Для уже созданных открывать будем сразу список товаров с ценами, так удобнее 
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	
	Если ТипЗнч(ИнформацияОРеквизитахТиповЦен) <> Тип("ФиксированноеСоответствие") Тогда
		ИнициализироватьСлужебныеРеквизитыТиповЦен();	
	КонецЕсли;
	ЭтотОбъект.ВыбранныеТипыЦен.Очистить();
	ЭтотОбъект.ЦеныТоваров.Очистить();  
	
	ЗагрузитьТипыЦен();
	ОбновитьРеквизитыДляТиповЦен(ВыбранныеТипыЦен());
	ЗаполнитьЦеныТоваровПоДаннымИзБазы();
	НастроитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СохранитьТипыЦен(Объект, ВыбранныеТипыЦен);
	СохранитьТоварыИУслуги(Объект, ЦеныТоваров, ИнформацияОРеквизитахТиповЦен);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Все проверки выполняются в форме
	// Для интерактивной записи выключим выполнение проверок в документе 
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаЗаполнения", Ложь);
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ОчиститьНеиспользуемыеГлобальныеПараметрыРасчета();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыОповещения = Новый Структура();
	Оповестить("ИзмененыДанныеЦен", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.УстановитьЗаголовокФормыДокумента(ЭтотОбъект, Объект);	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ВыбранныеТипыЦен().Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбраны типы цен для данного документа.'"), Объект.Ссылка,,, Отказ);
		
	КонецЕсли;
	
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	ОбработкаСобытийОбъектаСервер.ПроверитьСоответствиеОрганизацииПодразделения(Объект, Отказ, Новый Структура());
	Отказ = Отказ ИЛИ ЕстьОшибкиСоответствияВидаНоменклатурыХозОперации();
	Отказ = Отказ ИЛИ ЕстьОщибкиВЗаполненииТаблицыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияКомпанииВыбранПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбработчикВопроса = Новый ОписаниеОповещения("ТребуетсяУстановкаДатыНачалаОтвет", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Дата документа изменена. Сменить дату начала действия цен товаров?'");
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ИзменениеЦен.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();	
	НастроитьФорму();                        
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКонтрагента 
		Или Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКомпании Тогда
		ОбнулитьЦеновыеПоказателиТоваров();
	Иначе
	    АвтоПересчетЦен();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ИзменениеЦен.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	АвтоПересчетЦен();
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура АвтоПересчетЦен()

	Если ПравоПользователя("ВариантОтображенияТекущейЦеныИзмененияЦен") = 
			Перечисления.ВариантОтображенияТекущейЦены.ОбновлятьАвтоматически Тогда
			
		ПерезаполнитьСтарыеЦеныНаСервере();  
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	АвтоПересчетЦен();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ИзменениеЦен.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	АвтоПересчетЦен();
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКомпанииПолучательПриИзменении(Элемент)

	ПоказатьВопрос(Новый ОписаниеОповещения("ПодразделениеКомпанииПолучательПриИзмененииЗавершение", 
	    ЭтотОбъект), Нстр("ru='Пересчитать цены в документе?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКомпанииПолучательПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОбновитьРеквизитыДляТиповЦен(ВыбранныеТипыЦен());
		ПересчитатьЦену(Истина, 1);
		АвтоПересчетЦен();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеТипыЦен

&НаКлиенте
Процедура ВыбранныеТипыЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ВыбранныеТипыЦенПредставлениеПараметровРасчета Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	НачатьРедактированиеПараметровРасчетаТипаЦен(ВыбранныеТипыЦен.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеТипыЦенВыбранПриИзменении(Элемент)
	
	Элементы.ВыбранныеТипыЦен.ТекущиеДанные.ИзмененыПараметрыРасчета
		= Элементы.ВыбранныеТипыЦен.ТекущиеДанные.Выбран; 

	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦеныТоваров

&НаКлиенте
Процедура ЦеныТоваровНоменклатураПриИзменении(Элемент)
	
	ЦеныТоваровНоменклатураПриИзмененииНаСервере(Элементы.ЦеныТоваров.ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаСервере
Процедура ЦеныТоваровНоменклатураПриИзмененииНаСервере(ВыбраннаяСтрока)
	
	ТекущиеДанные = ЦеныТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ДанныеНоменклатуры = ДанныеНоменклатурыДляЗаполнения(ТекущиеДанные);
	
	Если ДанныеНоменклатуры.ЭтоНабор Тогда
		
		ЦеныТоваров.Удалить(ТекущиеДанные);
		
		Для Каждого ЭлементСостава Из ДанныеНоменклатуры.СоставНабора Цикл
			
			УсловиеПоиска = Новый Структура(
				"Номенклатура,ХарактеристикаНоменклатуры",
				ЭлементСостава.Номенклатура,
				ЭлементСостава.ХарактеристикаНоменклатуры
			);
			
			Если ЦеныТоваров.НайтиСтроки(УсловиеПоиска).Количество() = 0 Тогда
			
				ПодставитьДанныеНоменклатурыВСтроку(ЦеныТоваров.Добавить(), ЭлементСостава, ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПодставитьДанныеНоменклатурыВСтроку(ТекущиеДанные, ДанныеНоменклатуры, ЭтотОбъект);
		
	КонецЕсли;
	
	ЗаполнитьБазовыеЦеныТоваров(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные),	
		ВыбранныеТипыЦен()
	);
	ЗаполнитьПроцентНаценкиТоваров(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные),	
		ВыбранныеТипыЦен()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныТоваровХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ОбработатьИзменениеПараметраРасчетаЦеныНаСервере(Элементы.ЦеныТоваров.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныТоваровЕдиницаИзмеренияПриИзменении(Элемент)
	
	ОбработатьИзменениеПараметраРасчетаЦеныНаСервере(Элементы.ЦеныТоваров.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПараметраРасчетаЦеныНаСервере(ВыбраннаяСтрока)
	
	ТекущиеДанные = ЦеныТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ТекущиеДанные.Коэффициент = ТекущиеДанные.ЕдиницаИзмерения.Коэффициент;
	ЗаполнитьБазовыеЦеныТоваров(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные),	
		ВыбранныеТипыЦен()
	);
	ЗаполнитьПроцентНаценкиТоваров(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные),	
		ВыбранныеТипыЦен()
	);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ЦеныТоваровПроцентНаценкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЦеныТоваров.ТекущиеДанные;
	
	ИнформацияОРеквизитахТипаЦены = НайтиИнформациюОРеквизитахТипаЦеныПоРеквизиту(Элемент.Имя, ЭтотОбъект);
	
	УсловиеПоиска = Новый Структура("ТипЦен", ИнформацияОРеквизитахТипаЦены.Ключ);
	ПараметрыРасчетаТипаЦен = ВыбранныеТипыЦен.НайтиСтроки(УсловиеПоиска)[0];
	
	ПересчитатьЦенуИНаценку(ТекущиеДанные, ИнформацияОРеквизитахТипаЦены.Значение, ПараметрыРасчетаТипаЦен);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ЦеныТоваровСуммаНаценкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЦеныТоваров.ТекущиеДанные;
	
	ИнформацияОРеквизитахТипаЦены = НайтиИнформациюОРеквизитахТипаЦеныПоРеквизиту(Элемент.Имя, ЭтотОбъект);
	
	УсловиеПоиска = Новый Структура("ТипЦен", ИнформацияОРеквизитахТипаЦены.Ключ);
	ПараметрыРасчетаТипаЦен = ВыбранныеТипыЦен.НайтиСтроки(УсловиеПоиска)[0];
	
	ПересчитатьЦенуИПроцентНаценки(ТекущиеДанные, ИнформацияОРеквизитахТипаЦены.Значение, ПараметрыРасчетаТипаЦен);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ЦеныТоваровЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЦеныТоваров.ТекущиеДанные;
	
	ИнформацияОРеквизитахТипаЦены = НайтиИнформациюОРеквизитахТипаЦеныПоРеквизиту(Элемент.Имя, ЭтотОбъект);
	
	УсловиеПоиска = Новый Структура("ТипЦен", ИнформацияОРеквизитахТипаЦены.Ключ);
	ПараметрыРасчетаТипаЦен = ВыбранныеТипыЦен.НайтиСтроки(УсловиеПоиска)[0];
	
	ПересчитатьПроцентИСуммуНаценки(ТекущиеДанные, ИнформацияОРеквизитахТипаЦены.Значение, ПараметрыРасчетаТипаЦен);

	Если ПараметрыРасчетаТипаЦен.АлгоритмПолученияЦены = 
			ПредопределенноеЗначение("Перечисление.АлгоритмПолученияЦены.ПоНоменклатуре") Тогда
		УсловиеПоиска = Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура);
		СтрокиНоменклатуры = ЦеныТоваров.НайтиСтроки(УсловиеПоиска);
		Для каждого Стр Из СтрокиНоменклатуры Цикл  
			Если ТекущиеДанные[ИнформацияОРеквизитахТипаЦены.Значение.Цена] <> 
				Стр[ИнформацияОРеквизитахТипаЦены.Значение.Цена] Тогда
			
				Стр[ИнформацияОРеквизитахТипаЦены.Значение.Цена] = 	ТекущиеДанные[ИнформацияОРеквизитахТипаЦены.Значение.Цена];
				ПересчитатьПроцентИСуммуНаценки(Стр, ИнформацияОРеквизитахТипаЦены.Значение, ПараметрыРасчетаТипаЦен);
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВсеТипыЦен(Команда)
	
	УстановитьФлажкиВТаблице(ВыбранныеТипыЦен, "Выбран", Истина);
	
	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборВсехТиповЦен(Команда)
	
	УстановитьФлажкиВТаблице(ВыбранныеТипыЦен, "Выбран", Ложь);
	
	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереходКТипамЦенНажатие(Элемент)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТипыЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыЦенПереходКЦенамНажатие(Элемент)
	
	Если ВыбранныеТипыЦен.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для дальнейшей работы необходимо выбрать хотя бы один тип цен.'"));
		Возврат;
		
	КонецЕсли;
	
	ПереходКЦенамНаСервере();
	
	АвтоПересчетЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВСтаройФорме(Команда)
	
	Если Модифицированность Тогда
		
		Записать();
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ИзменениеЦен.ФормаОбъекта",
		Новый Структура("Ключ,ОткрыватьСтаруюВерсиюФормы", Объект.Ссылка, Истина),
		,
		"ОткрываемВСтаройФорме"
	);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЦеныТоваров(Команда)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеТабличнойЧасти", ЭтотОбъект),
		НСтр("ru = 'Очистить табличную часть?'"),
		РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладскимиОстатками(Команда)
	
	ОткрытьФорму(
		"Справочник.СкладыКомпании.ФормаВыбора",
		Новый Структура("РежимВыбора", Истина),
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ВыборСкладаЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиСкладскимиОстатками(Команда)
	
	ЗаполнитьСкладскимиОстаткамиНаСервере(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо указать документ-основание'"));
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьПоГруппеНоменклатуры(Команда)
	
	ДополнительныеПараметры = Новый Структура("ТребуетсяОчисткаТабличнойЧасти", Ложь);
	
	Если ЦеныТоваров.Количество() > 0 Тогда
		
		ВопросОбОчисткеТабличнойЧасти = ВопросАсинх(
			НСтр("ru = 'Очистить табличную часть перед заполнением?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
		ОтветНаВопросОбОчисткеТабличнойЧасти = Ждать ВопросОбОчисткеТабличнойЧасти;
		
		Если ОтветНаВопросОбОчисткеТабличнойЧасти = КодВозвратаДиалога.Да Тогда
		
			ДополнительныеПараметры.ТребуетсяОчисткаТабличнойЧасти = Истина;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаВыбораГруппы",
		Новый Структура("РежимВыбора", Истина),
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ВыборГруппыНоменклатурыЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(
		ЭтотОбъект,
		ЗначениеЗаполнено(Объект.Контрагент),
		"ЦеныТоваров",
		,
		,
		ПараметрыДействия,
		Объект
	);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуНоменклатуры(Команда)
	
	ПересчитатьЦену(Истина, 2);

КонецПроцедуры // ПересчитатьЦенуНоменклатуры()

// Обработчик команды "Пересчитать цены типа цены"
//
&НаКлиенте
Процедура ПересчитатьЦенуТипаЦены(Команда)
	
	ПересчитатьЦену(Истина, 3);
	
КонецПроцедуры // ПересчитатьЦенуТипаЦены()

// Обработчик команды "Пересчитать цены в документе"
//
&НаКлиенте
Процедура ПересчитатьЦенуВДокументе(Команда)
	
	ПересчитатьЦену(Истина, 1);
	
КонецПроцедуры // ПересчитатьЦенуВДокументе()

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиВДереве(ПодразделенияКомпании, Ложь, "Выбран");
	ПодразделенияКомпанииПриИзмененииНаСервере(); 
	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	ОбщегоНазначенияАвтосалонКлиентСервер.УстановитьЗначениеКолонкиВДереве(ПодразделенияКомпании, Истина, "Выбран");
	
	ПодразделенияКомпании.ПолучитьЭлементы()[0].Выбран = Ложь;
	ПодразделенияКомпанииПриИзмененииНаСервере();  
	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияКомпанииПриИзменении(Элемент)
	ПодразделенияКомпанииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦеновойГруппе(Команда)
	ОткрытьФорму(
		"Справочник.ЦеновыеГруппы.ФормаСписка",
		Новый Структура("РежимВыбора", Истина),
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ВыборЦеновойГруппыЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПрайсЛистуКонтрагента(Команда)
		ОткрытьФорму(
		"Справочник.ПрайсЛистыКонтрагентов.ФормаСписка",
		Новый Структура("РежимВыбора", Истина),
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		Новый ОписаниеОповещения("ВыборПрайсЛистаЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзДокументаТовары(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ОписаниеКоманды = Новый Структура("ДополнительныеПараметры", Новый Структура);
	ПараметрыЗаполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ПараметрыЗаполнения.Вставить("Форма", ЭтотОбъект);
	
	ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзДокумента(ЭтотОбъект, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПерезаполнитьСтарыеЦены(Команда)
	ПерезаполнитьСтарыеЦеныНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ЦеныТоваровНоменклатура.ПараметрыВыбора,
		"Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	
КонецПроцедуры

#Область ВнешнийВидФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОформитьПоляДляТоваровБезХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПоляДляТоваровБезХарактеристик()
	
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	НовыйЭлементОформления.Поля.Элементы.Добавить().Поле =
		Новый ПолеКомпоновкиДанных(Элементы.ЦеныТоваровХарактеристикаНоменклатуры.Имя);
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",
		НСтр("ru = '<характеристики не используются>'"));
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	НовыйЭлементОтбора = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦеныТоваров.ВладелецХарактеристики");
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ЭтоЦеныПоставщиков = (Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента 
		Или Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКонтрагента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Видимость", ЭтоЦеныПоставщиков);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорВзаиморасчетов", "Видимость",
		ЭтоЦеныПоставщиков);
	МаксимальноеКоличествоСтрокТоваровДляОткрытияВСтаройФорме = 1000;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьВСтаройФорме",
		"Видимость",
		Объект.Товары.Количество() < МаксимальноеКоличествоСтрокТоваровДляОткрытияВСтаройФорме
	);
	
	НастроитьКолонкиДопИнформацииНоменклатуры(); 
	УправлениеДиалогомДокументаСервер.ОбработкаПолученияПредставления(Неопределено, Объект, ЭтотОбъект.Заголовок);
	
	Если ПравоПользователя("ВариантОтображенияТекущейЦеныИзмененияЦен") = 
			Перечисления.ВариантОтображенияТекущейЦены.ОбновлятьВручную Тогда
		Элементы.ЦеныТоваровПерезаполнитьСтарыеЦены.Видимость = Истина;
	Иначе
		Элементы.ЦеныТоваровПерезаполнитьСтарыеЦены.Видимость = Ложь;
	КонецЕсли;
	
	ЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЦеныТоваровЗаполнитьПоЦеновойГруппе",
		"Видимость",
		ЦеновыеГруппы
	);
	
	Элементы.ЦеныТоваровЗаполнитьПоПрайсЛистуКонтрагента.Видимость = ЭтоЦеныПоставщиков;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиДопИнформацииНоменклатуры()
	
	РежимыВыводаКодаВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьАртикул");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЦеныТоваровНоменклатураАртикул",
		"Видимость",
		РежимыСОтображениемАртикула().Найти(РежимыВыводаКодаВДокументах) <> Неопределено
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЦеныТоваровНоменклатураКод",
		"Видимость",
		РежимыСОтображениемКода().Найти(РежимыВыводаКодаВДокументах) <> Неопределено
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЦеныТоваровНоменклатураПроизводитель",
		"Видимость",
		РежимыСОтображениемПроизводителя().Найти(РежимыВыводаКодаВДокументах) <> Неопределено
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РежимыСОтображениемАртикула()
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.Артикул);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РежимыСОтображениемКода()
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.Код);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РежимыСОтображениемПроизводителя()
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель);
	Результат.Добавить(Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСпособаРасчетаЦены(ТипЦен)   
	
	Отбор = Новый Структура("ТипЦен", ТипЦен);
	СтрокиПредставления = ВыбранныеТипыЦен.НайтиСтроки(Отбор);
	
	Если СтрокиПредставления.Количество()  = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокиПредставления[0].ПредставлениеПараметровРасчета;

КонецФункции


#КонецОбласти

#Область РаботаСВыбраннымиТипамиЦен

&НаСервере
Процедура ЗагрузитьТипыЦен(ТаблицаЦен = Неопределено)
	
	Если ТаблицаЦен = Неопределено Тогда
		ОсновныеТипыЦенСПараметрамиРасчета = ОсновныеТипыЦенСПараметрамиРасчета(Объект.Ссылка);	
	Иначе
		ОсновныеТипыЦенСПараметрамиРасчета = ОсновныеТипыЦенСПараметрамиРасчетаПриКопировании(ТаблицаЦен);
	КонецЕсли;

	ВыбранныеТипыЦен.Загрузить(ОсновныеТипыЦенСПараметрамиРасчета);
	
	Для Каждого СтрокаТипаЦены Из ВыбранныеТипыЦен Цикл
		
		СтрокаТипаЦены.ПредставлениеПараметровРасчета = ПредставлениеПараметровРасчетаТипаЦен(СтрокаТипаЦены, Объект);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьТипыЦен(ТекущийОбъект, ВыбранныеТипыЦен)
	
	 ТипыЦенКСохранению = ВыбранныеТипыЦен.НайтиСтроки(Новый Структура("Выбран", Истина));
	 ТекущийОбъект.ПараметрыРасчета.Очистить();
	 
	 Для Каждого СтрокаТипаЦен Из ТипыЦенКСохранению Цикл
	 	
	 	НовыйПараметрРасчета = ТекущийОбъект.ПараметрыРасчета.Добавить();
	 	ЗаполнитьЗначенияСвойств(НовыйПараметрРасчета, СтрокаТипаЦен);
	 	НовыйПараметрРасчета.ПроцентНаценкиИзНоменклатуры = СтрокаТипаЦен.БратьПроцентНаценкиИзНоменклатуры; 
	 	
	 КонецЦикла;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьТоварыИУслуги(ТекущийОбъект, ЦеныТоваров, ИнформацияОРеквизитахТиповЦен)
	
	ТекущийОбъект.Товары.Очистить();
	
	Для Каждого Товар Из ЦеныТоваров Цикл
		
		Для Каждого ОписаниеТипаЦен Из ИнформацияОРеквизитахТиповЦен Цикл 
			
			НоваяЦена        = ТекущийОбъект.Товары.Добавить();
			НоваяЦена.ТипЦен = ОписаниеТипаЦен.Ключ;
			
			ЗаполнитьЗначенияСвойств(НоваяЦена, Товар,
				"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент");
			НоваяЦена.Цена             = Товар[ОписаниеТипаЦен.Значение.Цена];
			НоваяЦена.ЦенаБазовая      = Товар[ОписаниеТипаЦен.Значение.ЦенаБазовая];
			НоваяЦена.ПроцентНаценки   = Товар[ОписаниеТипаЦен.Значение.ПроцентНаценки];
			НоваяЦена.СуммаНаценки     = Товар[ОписаниеТипаЦен.Значение.СуммаНаценки];
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеиспользуемыеГлобальныеПараметрыРасчета()
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.УстановкаЦенКонтрагента
		Или Объект.ХозОперация <> Справочники.ХозОперации.ОтменаЦенКонтрагента Тогда
		
		Объект.Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		
	КонецЕсли;
		
	ЕстьРасчетОтСебестоимости = Ложь;
		
	Для Каждого СтрокаТипаЦены Из ВыбранныеТипыЦен Цикл
		
		Если
			СтрокаТипаЦены.Выбран
			И ЦенообразованиеКлиентСервер.ЭтоВидРасчетаОтСебестоимости(СтрокаТипаЦены.РасчетЦенОт)
		Тогда
		
			ЕстьРасчетОтСебестоимости = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если Не ЕстьРасчетОтСебестоимости Тогда
		
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновныеТипыЦенСПараметрамиРасчета(УстановкаЦен)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзменениеЦенПараметрыРасчета.ТипЦен,
		|	ИзменениеЦенПараметрыРасчета.РасчетЦенОт,
		|	ИзменениеЦенПараметрыРасчета.ПроцентНаценки,
		|	ИзменениеЦенПараметрыРасчета.ПроцентНаценкиИзНоменклатуры,
		|	ИзменениеЦенПараметрыРасчета.ОкруглятьДо
		|ПОМЕСТИТЬ ТипыЦенВДокументе
		|ИЗ
		|	Документ.ИзменениеЦен.ПараметрыРасчета КАК ИзменениеЦенПараметрыРасчета
		|ГДЕ
		|	ИзменениеЦенПараметрыРасчета.Ссылка = &УстановкаЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕ ТипыЦенВДокументе.РасчетЦенОт ЕСТЬ NULL КАК Выбран,
		|	ТипыЦен.Ссылка КАК ТипЦен,
		|	ТипыЦен.ЦенаВключаетНДС КАК ВключаетНДС,
		|	ТипыЦен.ВалютаЦены КАК Валюта,
		|	ТипыЦен.ДляРабот КАК ДляРабот,
		|	ТипыЦен.ДляТоваров КАК ДляТоваров,
		|	ТипыЦен.ДляАвтомобилей КАК ДляАвтомобилей,
		|	ТипыЦен.АлгоритмПолученияЦены КАК АлгоритмПолученияЦены,
		|	ЕСТЬNULL(ТипыЦенВДокументе.РасчетЦенОт, 0) КАК РасчетЦенОт,
		|	ЕСТЬNULL(ТипыЦенВДокументе.ПроцентНаценкиИзНоменклатуры, ЛОЖЬ) КАК БратьПроцентНаценкиИзНоменклатуры,
		|	ЕСТЬNULL(ТипыЦенВДокументе.ПроцентНаценки, 0) КАК ПроцентНаценки,
		|	ЕСТЬNULL(ТипыЦенВДокументе.ОкруглятьДо, 0.01) КАК ОкруглятьДо
		|ИЗ
		|	Справочник.ТипыЦен КАК ТипыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТипыЦенВДокументе КАК ТипыЦенВДокументе
		|		ПО ТипыЦен.Ссылка = ТипыЦенВДокументе.ТипЦен
		|ГДЕ
		|	НЕ ТипыЦен.Рассчитывается"
	);
	Запрос.УстановитьПараметр("УстановкаЦен", УстановкаЦен);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОсновныеТипыЦенСПараметрамиРасчетаПриКопировании(ТаблицаЦен)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзменениеЦенПараметрыРасчета.ТипЦен,
		|	ИзменениеЦенПараметрыРасчета.РасчетЦенОт,
		|	ИзменениеЦенПараметрыРасчета.ПроцентНаценки,
		|	ИзменениеЦенПараметрыРасчета.ПроцентНаценкиИзНоменклатуры,
		|	ИзменениеЦенПараметрыРасчета.ОкруглятьДо,
		|	ИСТИНА КАК Выбран
		|ПОМЕСТИТЬ ТипыЦенВДокументе
		|ИЗ
		|	&ТаблицаЦен КАК ИзменениеЦенПараметрыРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипыЦенВДокументе.Выбран КАК Выбран,
		|	ТипыЦен.Ссылка КАК ТипЦен,
		|	ТипыЦен.ЦенаВключаетНДС КАК ВключаетНДС,
		|	ТипыЦен.ВалютаЦены КАК Валюта,
		|	ТипыЦен.ДляРабот КАК ДляРабот,
		|	ТипыЦен.ДляТоваров КАК ДляТоваров,
		|	ТипыЦен.ДляАвтомобилей КАК ДляАвтомобилей,
		|	ТипыЦен.АлгоритмПолученияЦены КАК АлгоритмПолученияЦены,
		|	ЕСТЬNULL(ТипыЦенВДокументе.РасчетЦенОт, 0) КАК РасчетЦенОт,
		|	ЕСТЬNULL(ТипыЦенВДокументе.ПроцентНаценкиИзНоменклатуры, ЛОЖЬ) КАК БратьПроцентНаценкиИзНоменклатуры,
		|	ЕСТЬNULL(ТипыЦенВДокументе.ПроцентНаценки, 0) КАК ПроцентНаценки,
		|	ЕСТЬNULL(ТипыЦенВДокументе.ОкруглятьДо, 0.01) КАК ОкруглятьДо
		|ИЗ
		|	Справочник.ТипыЦен КАК ТипыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТипыЦенВДокументе КАК ТипыЦенВДокументе
		|		ПО ТипыЦен.Ссылка = ТипыЦенВДокументе.ТипЦен
		|ГДЕ
		|	НЕ ТипыЦен.Рассчитывается"
	);
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПараметровРасчетаТипаЦен(СтрокаТипаЦены, Объект)
	
	ЧастиПредставления = Новый Массив();
	ВидыОснованийДляРасчетаЦен = ЦенообразованиеКлиентСервер.ВидыОснованийДляРасчетаЦен();
		
	Если СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.БазовыйТипЦен Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От базового типа цен:'"));
		ЧастиПредставления.Добавить(Строка(Объект.БазовыйТипЦен));
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.ДокументОснование Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От документа основания'"));
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.ЦенаПоставщика Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От цен поставщика:'"));
		ЧастиПредставления.Добавить(Строка(Объект.Поставщик));
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.СебестоимостьРег Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От себестоимости в регл. валюте (с НДС):'"));
		ЧастиПредставления.Добавить(Строка(Объект.СкладКомпании));
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.СебестоимостьУпр Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От себестоимости в упр. валюте (с НДС):'"));
		ЧастиПредставления.Добавить(Строка(Объект.СкладКомпании));    
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.СебестоимостьРегБезНДС Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От себестоимости в регл. валюте (без НДС):'"));
		ЧастиПредставления.Добавить(Строка(Объект.СкладКомпании));
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.СебестоимостьУпрБезНДС Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От себестоимости в упр. валюте (без НДС):'"));
		ЧастиПредставления.Добавить(Строка(Объект.СкладКомпании));
	
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.ПрайсЛистПоставщика Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От прайс-листа контрагента:'"));
		ЧастиПредставления.Добавить(Строка(Объект.ПрайсЛистКонтрагента));
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.Подразделение Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От базового подразделения:'"));
		ЧастиПредставления.Добавить(Строка(Объект.БазовоеПодразделение));
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.ЕдиницаИзмерения Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'От базовой единицы измерения'")); 
		
	ИначеЕсли СтрокаТипаЦены.РасчетЦенОт = ВидыОснованийДляРасчетаЦен.СебестоимостьПартии Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'По себестоимости выбранной партии:'"));
		ЧастиПредставления.Добавить(Строка(Объект.Партия));

		
	КонецЕсли;
	
	ЧастиПредставления.Добавить("|");
	ЧастиПредставления.Добавить(НСтр("ru = 'процент наценки:'"));
	
	Если СтрокаТипаЦены.БратьПроцентНаценкиИзНоменклатуры	Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = 'из номенклатуры'"));
		
	Иначе
		
		ЧастиПредставления.Добавить(Строка(СтрокаТипаЦены.ПроцентНаценки));
		
	КонецЕсли;
	
	ЧастиПредставления.Добавить("|");
	ЧастиПредставления.Добавить(НСтр("ru = 'округлять до:'"));
	ЧастиПредставления.Добавить(Строка(СтрокаТипаЦены.ОкруглятьДо));
	Возврат СтрСоединить(ЧастиПредставления, Символы.НПП);
	
КонецФункции

&НаСервере
Функция ВыбранныеТипыЦен()
	
	Возврат ВыбранныеТипыЦен
		.Выгрузить(Новый Структура("Выбран", Истина), "ТипЦен")
		.ВыгрузитьКолонку("ТипЦен");
	
КонецФункции

&НаСервере
Функция ТипыЦенСИзмененымиПараметрамиРасчета()
	
	Возврат ВыбранныеТипыЦен.Выгрузить(
	Новый Структура("ИзмененыПараметрыРасчета, Выбран", Истина, Истина), "ТипЦен")
	.ВыгрузитьКолонку("ТипЦен");
	
КонецФункции

&НаКлиенте
Процедура НачатьРедактированиеПараметровРасчетаТипаЦен(СтрокаТипаЦен)
	
	ПараметрыФормы = Новый Структура(
		"ХозОперация,
		|Контрагент,
		|ТипЦен,
		|РасчетЦенОт,
		|БазовыйТипЦен,
		|ДокументОснование,
		|Поставщик,
		|СкладКомпании,
		|ПроцентНаценки,
		|ОкруглятьДо,
		|ПроцентНаценкиИзНоменклатуры,
		|ПрайсЛистКонтрагента,
		|БазовоеПодразделение,
		|Партия"
	);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаТипаЦен);
	
	РучкаРезультат = Новый ОписаниеОповещения(
		"РедактированиеПараметровРасчетаТипаЦенЗавершение",
		ЭтотОбъект,
		Новый Структура("ТипЦен", СтрокаТипаЦен.ТипЦен)
	);
	ОткрытьФорму(
		"Документ.ИзменениеЦен.Форма.ФормаПараметровГрупповогоРасчета",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		РучкаРезультат
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПараметровРасчетаТипаЦенЗавершение(ПараметрыРасчета, Контекст) Экспорт
	
	Если ПараметрыРасчета = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТипаЦен = ВыбранныеТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", Контекст.ТипЦен))[0];
	ЗаполнитьЗначенияСвойств(СтрокаТипаЦен, ПараметрыРасчета);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыРасчета);
	СтрокаТипаЦен.БратьПроцентНаценкиИзНоменклатуры = ПараметрыРасчета.ПроцентНаценкиИзНоменклатуры;
	СтрокаТипаЦен.ИзмененыПараметрыРасчета          = Истина;
	
	СтрокаТипаЦен.ПредставлениеПараметровРасчета = ПредставлениеПараметровРасчетаТипаЦен(СтрокаТипаЦен, Объект);
	
	ОбновитьРеквизитыДляТиповЦен(ВыбранныеТипыЦен());
	ОбновитьПараметрыТоваровДляТиповЦен(ТипыЦенСИзмененымиПараметрамиРасчета());
	УстановитьФлажкиВТаблице(ВыбранныеТипыЦен, "ИзмененыПараметрыРасчета", Ложь);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПодразделениямиКомпании

&НаСервере
Процедура ЗаполнитьДеревоПодразделенийКомпании()
	
	// получим подчиненные подразделения
	ЭлементыДерева = ПодразделенияКомпании.ПолучитьЭлементы();
	Строка = ЭлементыДерева.Добавить();
	Строка.ПодразделениеКомпании = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
	Строка.ЭтоОсновноеПодразделение = Истина;
	
	ТекРодитель = Строка;
	СписокПодразделений = Объект.ПодчиненныеПодразделенияКомпании.Выгрузить(,"ПодразделениеКомпании").ВыгрузитьКолонку("ПодразделениеКомпании");
	
	Выборка = Справочники.ПодразделенияКомпании.ВыбратьИерархически(Справочники.ПодразделенияКомпании.ОсновноеПодразделение);
	Пока Выборка.Следующий() Цикл
		Пока Выборка.Родитель <> ТекРодитель.ПодразделениеКомпании Цикл
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
		ТекРодитель = ТекРодитель.ПолучитьЭлементы().Добавить();
		ТекРодитель.ПодразделениеКомпании = Выборка.Ссылка;
		ТекРодитель.Выбран = (СписокПодразделений.Найти(Выборка.Ссылка) <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДерева()
	
	// настроим строку корневого подразделения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделенияКомпании.ЭтоОсновноеПодразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодразделенияКомпанииВыбран.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодразделенияКомпанииПодразделениеКомпании.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
КонецПроцедуры

&НаСервере
Процедура ПодразделенияКомпанииПриИзмененииНаСервере()
	Результат = ПланированиеРесурсовКлиентСервер.НайтиВДеревеОбъектов(
		ПодразделенияКомпании,
		Новый Структура("Выбран", Истина));
	Объект.ПодчиненныеПодразделенияКомпании.Очистить();	
	Для Каждого Элемент Из Результат Цикл
		НовСтрока = Объект.ПодчиненныеПодразделенияКомпании.Добавить();
		НовСтрока.ПодразделениеКомпании = Элемент.ПодразделениеКомпании;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСоСлужебнымиРеквизитамиТиповЦен

&НаСервере
Процедура ПереходКЦенамНаСервере()
	
	ОбновитьРеквизитыДляТиповЦен(ВыбранныеТипыЦен());
	ОбновитьПараметрыТоваровДляТиповЦен(ТипыЦенСИзмененымиПараметрамиРасчета());
	УстановитьФлажкиВТаблице(ВыбранныеТипыЦен, "ИзмененыПараметрыРасчета", Ложь);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизитыТиповЦен()
	
	ИнформацияОРеквизитахТиповЦен = Новый ФиксированноеСоответствие(Новый Соответствие());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыДляТиповЦен(АктуальныеТипыЦен)
	
	НовыеРеквизиты = Новый Массив();
	НовыеТипыЦен = Новый Массив();
	
	Для Каждого АктуальныйТипыЦен Из АктуальныеТипыЦен Цикл
		
		Если ЕстьРеквизитДляТипаЦен(АктуальныйТипыЦен) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИменаРеквизитовИЭлементов = ИменаНовыхРеквизитовТипаЦен(АктуальныйТипыЦен);
		ЗапомнитьВФорме(АктуальныйТипыЦен, ИменаРеквизитовИЭлементов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НовыеРеквизиты,
			ОписаниеНовыхРеквизитовТипаЦен(ИменаРеквизитовИЭлементов)
		);
		НовыеТипыЦен.Добавить(АктуальныйТипыЦен);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(НовыеРеквизиты, РеквизитыТиповЦенКУдалению(АктуальныеТипыЦен));
	
	Для Каждого НовыйТипЦен Из НовыеТипыЦен Цикл
	
		ДобавитьЭлементыТипаЦен(НовыйТипЦен);
		
	КонецЦикла;
	
	УдалитьЛишниеРеквизитыТиповЦен(АктуальныеТипыЦен);
	
КонецПроцедуры

&НаСервере
Функция ЕстьРеквизитДляТипаЦен(ТипЦен)
	
	Возврат ИнформацияОРеквизитахТиповЦен.Получить(ТипЦен) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаНовыхРеквизитовТипаЦен(ТипЦен)
	
	Ключ = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("Ключ",           Ключ);
	Реквизиты.Вставить("Цена",           "Цена" + Ключ);
	Реквизиты.Вставить("ЦенаБазовая",    "ЦенаБазовая" + Ключ);
	Реквизиты.Вставить("ЦенаТекущая",    "ЦенаТекущая" + Ключ);
	Реквизиты.Вставить("ПроцентНаценки", "ПроцентНаценки" + Ключ);
	Реквизиты.Вставить("СуммаНаценки",   "СуммаНаценки" + Ключ);
	Реквизиты.Вставить("_ГруппаТипЦен",  "ЦеныТоваровГруппаТипЦен" + Ключ);
	
	Возврат Новый ФиксированнаяСтруктура(Реквизиты);
	
КонецФункции

&НаСервере
Процедура ЗапомнитьВФорме(ТипЦен, ИнфорамцияОТипеЦен)
	
	ИнформацияОРеквизитахТиповЦенВрем = Новый Соответствие(ИнформацияОРеквизитахТиповЦен);
	ИнформацияОРеквизитахТиповЦенВрем.Вставить(ТипЦен, ИнфорамцияОТипеЦен);
	ИнформацияОРеквизитахТиповЦен = Новый ФиксированноеСоответствие(ИнформацияОРеквизитахТиповЦенВрем);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеНовыхРеквизитовТипаЦен(ИменаРеквизитов)
	
	Результат = Новый Массив();
	НовыйРеквизит = Новый РеквизитФормы(
		ИменаРеквизитов.Цена,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный),
		"ЦеныТоваров",
		НСтр("ru = 'Цена'")
	);
	Результат.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		ИменаРеквизитов.ЦенаБазовая,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный),
		"ЦеныТоваров",
		НСтр("ru = 'Цена (базовая)'")
	);
	Результат.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		ИменаРеквизитов.ЦенаТекущая,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный),
		"ЦеныТоваров",
		НСтр("ru = 'Цена (текущая)'")
	);
	Результат.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		ИменаРеквизитов.ПроцентНаценки,
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 2),
		"ЦеныТоваров",
		НСтр("ru = '%'")
	);
	Результат.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		ИменаРеквизитов.СуммаНаценки,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный),
		"ЦеныТоваров",
		НСтр("ru = 'Наценка'")
	);
	Результат.Добавить(НовыйРеквизит);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитыТиповЦенКУдалению(АктуальныеТипыЦен)
	
	Результат = Новый Массив();
	
	Для Каждого РеквизитТипаЦен Из ИнформацияОРеквизитахТиповЦен Цикл
		
		Если АктуальныеТипыЦен.Найти(РеквизитТипаЦен.Ключ) = Неопределено Тогда
			
			Для Каждого КлючЗначение Из РеквизитТипаЦен.Значение Цикл
				
				Если Не СтрНачинаетсяС(КлючЗначение.Ключ, "_") И КлючЗначение.Ключ <> "Ключ" Тогда
			
					Результат.Добавить("ЦеныТоваров." + КлючЗначение.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьЛишниеРеквизитыТиповЦен(АктуальныеТипыЦен)
	
	ТипыЦенДляЗабывания = Новый Массив();
	
	Для Каждого РеквизитТипаЦен Из ИнформацияОРеквизитахТиповЦен Цикл
		
		Если АктуальныеТипыЦен.Найти(РеквизитТипаЦен.Ключ) = Неопределено Тогда
			
			ТипыЦенДляЗабывания.Добавить(РеквизитТипаЦен.Ключ);
			
			Для Каждого КлючЗначение Из РеквизитТипаЦен.Значение Цикл
				
				Элемент = Элементы.Найти(КлючЗначение.Значение);
				
				Если Элемент <> Неопределено Тогда
			
					Элементы.Удалить(Элемент);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТипЦены Из ТипыЦенДляЗабывания Цикл
	
		ЗабытьВФорме(ТипЦены);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗабытьВФорме(ТипЦен)
	
	ИнформацияОРеквизитахТиповЦенВрем = Новый Соответствие(ИнформацияОРеквизитахТиповЦен);
	ИнформацияОРеквизитахТиповЦенВрем.Удалить(ТипЦен);
	ИнформацияОРеквизитахТиповЦен = Новый ФиксированноеСоответствие(ИнформацияОРеквизитахТиповЦенВрем);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыТипаЦен(ТипЦен)
	
	ОписаниеРеквизитовИЭлементовТипаЦен = ИнформацияОРеквизитахТиповЦен.Получить(ТипЦен);
	
	ГруппаТипаЦен = ДобавитьГруппуТипаЦен(ТипЦен, ОписаниеРеквизитовИЭлементовТипаЦен._ГруппаТипЦен);
	РасчетЦенОтПредставление = ПолучитьПредставлениеСпособаРасчетаЦены(ТипЦен);
	
	ДобавитьКолонкуТекущаяЦена(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаТекущая, ГруппаТипаЦен);
	ДобавитьКолонкуБазоваяЦена(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаБазовая, ГруппаТипаЦен, РасчетЦенОтПредставление);
	ДобавитьКолонкуПроцентНаценки(ОписаниеРеквизитовИЭлементовТипаЦен.ПроцентНаценки, ГруппаТипаЦен);
	ДобавитьКолонкуСуммаНаценки(ОписаниеРеквизитовИЭлементовТипаЦен.СуммаНаценки, ГруппаТипаЦен);
	ДобавитьКолонкуЦена(ОписаниеРеквизитовИЭлементовТипаЦен.Цена, ГруппаТипаЦен);

    // ---
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.Цена);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаТекущая);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаБазовая);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ПроцентНаценки);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.СуммаНаценки);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦеныТоваров." + ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаТекущая);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЦеныТоваров." + ОписаниеРеквизитовИЭлементовТипаЦен.Цена);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(83, 106, 194));
	// ---
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.Цена);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаТекущая);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаБазовая);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ПроцентНаценки);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.СуммаНаценки);
	         
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦеныТоваров." + ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаТекущая);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЦеныТоваров." + ОписаниеРеквизитовИЭлементовТипаЦен.Цена); 

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РольБезИсполнителей);
	
	// ---
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.Цена);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаТекущая);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ЦенаБазовая);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.ПроцентНаценки);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();   
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитовИЭлементовТипаЦен.СуммаНаценки);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦеныТоваров." + ОписаниеРеквизитовИЭлементовТипаЦен.Цена);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуТипаЦен(Знач ТипЦен, Знач ИмяЭлемента)
	
	ВключаетНДС = ?(ТипЦен.ЦенаВключаетНДС, " (с НДС)", " (без НДС)"); 
	
	Результат = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ЦеныТоваров);
	Результат.Вид                      = ВидГруппыФормы.ГруппаКолонок;
	Результат.ОтображатьВШапке         = Истина;
	Результат.РастягиватьПоГоризонтали = Ложь;
	Результат.Заголовок                = Строка(ТипЦен) + ВключаетНДС;
	Результат.Группировка              = ГруппировкаКолонок.Горизонтальная;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуТекущаяЦена(Знач ИмяЭлемента, Знач Группа)
	
	НоваяКолонка = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НоваяКолонка.ПутьКДанным              = "ЦеныТоваров." + ИмяЭлемента;
	НоваяКолонка.Вид                      = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Ширина                   = 11;
	НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
	НоваяКолонка.ТолькоПросмотр           = Истина;
	Если ПравоПользователя("ВариантОтображенияТекущейЦеныИзмененияЦен") = 
			Перечисления.ВариантОтображенияТекущейЦены.НеОтображать Тогда
		
		НоваяКолонка.Видимость                = Ложь;
		
	Иначе
		
		НоваяКолонка.Видимость                = Истина;
	
	КонецЕсли;
	НоваяКолонка.Заголовок                = НСтр("ru = 'Старая цена'");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуБазоваяЦена(Знач ИмяЭлемента, Знач Группа, РасчетЦенОтПредставление)
		
	НоваяКолонка = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НоваяКолонка.ПутьКДанным              = "ЦеныТоваров." + ИмяЭлемента;
	НоваяКолонка.Вид                      = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Ширина                   = 11;
	НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
	НоваяКолонка.ТолькоПросмотр           = Истина;
	НоваяКолонка.Заголовок                = НСтр("ru = 'База'"); 
	НоваяКолонка.Подсказка 				  = РасчетЦенОтПредставление;
	НоваяКолонка.ОтображениеПодсказки	  = ОтображениеПодсказки.Всплывающая;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуПроцентНаценки(Знач ИмяЭлемента, Знач Группа)
	
	НоваяКолонка = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НоваяКолонка.ПутьКДанным              = "ЦеныТоваров." + ИмяЭлемента;
	НоваяКолонка.Вид                      = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Ширина                   = 6;
	НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
	НоваяКолонка.Заголовок                = НСтр("ru = '%'");
	НоваяКолонка.ЦветТекста               = ЦветаСтиля.НедоступныеДанныеЦвет;
	НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ЦеныТоваровПроцентНаценкиПриИзменении");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуСуммаНаценки(Знач ИмяЭлемента, Знач Группа)
	
	НоваяКолонка = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НоваяКолонка.ПутьКДанным              = "ЦеныТоваров." + ИмяЭлемента;
	НоваяКолонка.Вид                      = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Ширина                   = 8;
	НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
	НоваяКолонка.Заголовок                = НСтр("ru = 'Разница'");
	НоваяКолонка.ЦветТекста               = ЦветаСтиля.НедоступныеДанныеЦвет;
	НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ЦеныТоваровСуммаНаценкиПриИзменении");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуЦена(Знач ИмяЭлемента, Знач Группа)
	
	НоваяКолонка = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НоваяКолонка.ПутьКДанным              = "ЦеныТоваров." + ИмяЭлемента;
	НоваяКолонка.Вид                      = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Ширина                   = 11;
	НоваяКолонка.РастягиватьПоГоризонтали = Ложь;
	НоваяКолонка.Заголовок                = НСтр("ru = 'Цена'");
	НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ЦеныТоваровЦенаПриИзменении");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиИнформациюОРеквизитахТипаЦеныПоРеквизиту(ИмяРеквизита, Форма)
	
	Для Каждого КлючЗначение Из Форма.ИнформацияОРеквизитахТиповЦен Цикл
		
		Для Каждого Реквизит Из КлючЗначение.Значение Цикл
			
			Если Реквизит.Значение = ИмяРеквизита Тогда
				
				Возврат КлючЗначение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область РаботаСЦенамиТоваров

&НаСервере
Процедура ЗаполнитьЦеныТоваровПоДаннымИзБазы(ТаблицаТоваров = Неопределено)
	
	Если ТаблицаТоваров = Неопределено Тогда
		ДанныеДляЗаполненияНомеклатура = ДанныеДокументаИзменениеЦен();	
	Иначе
		ДанныеДляЗаполненияНомеклатура = ДанныеДокументаИзменениеЦенПриКопировании(ТаблицаТоваров);
	КонецЕсли;
	
	ЦеныТоваров.Очистить();
	
	Пока ДанныеДляЗаполненияНомеклатура.Следующий() Цикл
		
		ДанныеДляЗаполненияХарактеристика = ДанныеДляЗаполненияНомеклатура
			.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		Пока ДанныеДляЗаполненияХарактеристика.Следующий() Цикл
			
			ДанныеДляЗаполненияЕдиницыИзменения = ДанныеДляЗаполненияХарактеристика
				.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			Пока ДанныеДляЗаполненияЕдиницыИзменения.Следующий() Цикл
			
				ДанныеДляЗаполненияТипЦены = ДанныеДляЗаполненияЕдиницыИзменения
					.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
				НоваяСтрокаЦеныТовара = ЦеныТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЦеныТовара, ДанныеДляЗаполненияЕдиницыИзменения);
				
				Пока ДанныеДляЗаполненияТипЦены.Следующий() Цикл
					
					ЗаполнитьЗначенияВСтрокеДляТиповЦен(НоваяСтрокаЦеныТовара, ДанныеДляЗаполненияТипЦены);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДокументаИзменениеЦен()
	
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКомпании
		Или Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКомпании Тогда
		УсловиеДоговора = "Истина";
	Иначе
		УсловиеДоговора = "Контрагент = &Контрагент И ДоговорВзаиморасчетов = &Договор";
	КонецЕсли;
	Запрос = Новый Запрос(   
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныСрезПоследних.Цена КАК Цена,
	|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
	|	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ СтарыеЦены
	|ИЗ
	|	РегистрСведений.Цены.СрезПоследних(
	|			&МоментВремени,
	|			Номенклатура В (&Номенклатура)
	|				И ПодразделениеКомпании = &ПодразделениеКомпании
	|				И " + УсловиеДоговора + ") КАК ЦеныСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменениеЦенТовары.Номенклатура КАК Номенклатура,
	|	ИзменениеЦенТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИзменениеЦенТовары.ТипЦен КАК ТипЦен,
	|	ИзменениеЦенТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1
	|			ТОГДА ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры
	|		ИНАЧЕ ИзменениеЦенТовары.Номенклатура
	|	КОНЕЦ КАК ВладелецЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
	|			ТОГДА ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры
	|		КОГДА ИзменениеЦенТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
	|			ТОГДА ИзменениеЦенТовары.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВладелецХарактеристики,
	|	ИзменениеЦенТовары.ЦенаБазовая КАК ЦенаБазовая,
	|	ИзменениеЦенТовары.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ИзменениеЦенТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИзменениеЦенТовары.Коэффициент КАК Коэффициент,
	|	ИзменениеЦенТовары.ПроцентНаценки КАК ПроцентНаценки,
	|	ИзменениеЦенТовары.СуммаНаценки КАК СуммаНаценки,
	|	СтарыеЦены.Цена КАК ТекущаяЦена
	|ИЗ
	|	Документ.ИзменениеЦен.Товары КАК ИзменениеЦенТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЦены КАК СтарыеЦены
	|		ПО (ИзменениеЦенТовары.ТипЦен = СтарыеЦены.ТипЦен
	|				И ИзменениеЦенТовары.Номенклатура = СтарыеЦены.Номенклатура
	|				И ИзменениеЦенТовары.ХарактеристикаНоменклатуры = СтарыеЦены.ХарактеристикаНоменклатуры)
	|ГДЕ
	|	ИзменениеЦенТовары.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента 
		Или Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКонтрагента Тогда
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент); 
		Запрос.УстановитьПараметр("Договор", Объект.ДоговорВзаиморасчетов);
	КонецЕсли;                               
	Момент = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.ДатаНачалаДействия)),
		Новый Граница(Новый МоментВремени(Объект.ДатаНачалаДействия, Объект.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("МоментВремени", Момент); 
	ТЗНоменклатуры = Объект.Товары.Выгрузить(, "Номенклатура"); 
	ТЗНоменклатуры.Свернуть("Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", ТЗНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпанииПолучатель);
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

&НаСервере
Функция ДанныеДокументаИзменениеЦенПриКопировании(ТаблицаТоваров)
	
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКомпании
		Или Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКомпании Тогда
		УсловиеДоговора = "Истина";
	Иначе
		УсловиеДоговора = "Контрагент = &Контрагент И ДоговорВзаиморасчетов = &Договор";
	КонецЕсли;
	Запрос = Новый Запрос(   
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныСрезПоследних.Цена КАК Цена,
	|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
	|	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ СтарыеЦены
	|ИЗ
	|	РегистрСведений.Цены.СрезПоследних(
	|			&МоментВремени,
	|			Номенклатура В (&Номенклатура)
	|				И ПодразделениеКомпании = &ПодразделениеКомпании
	|				И " + УсловиеДоговора + ") КАК ЦеныСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменениеЦенТовары.Номенклатура КАК Номенклатура,
	|	ИзменениеЦенТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИзменениеЦенТовары.ТипЦен КАК ТипЦен,
	|	ИзменениеЦенТовары.Цена КАК Цена,
	|	ИзменениеЦенТовары.ЦенаБазовая КАК ЦенаБазовая,
	|	ИзменениеЦенТовары.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ИзменениеЦенТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИзменениеЦенТовары.Коэффициент КАК Коэффициент,
	|	ИзменениеЦенТовары.ПроцентНаценки КАК ПроцентНаценки,
	|	ИзменениеЦенТовары.СуммаНаценки КАК СуммаНаценки
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаТоваров КАК ИзменениеЦенТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ.ТипЦен КАК ТипЦен,
	|	ВТ.Цена КАК Цена,
	|	ВТ.ЦенаБазовая КАК ЦенаБазовая,
	|	ВТ.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ВТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ.Коэффициент КАК Коэффициент,
	|	ВТ.ПроцентНаценки КАК ПроцентНаценки,
	|	ВТ.СуммаНаценки КАК СуммаНаценки, 
	|СтарыеЦены.Цена КАК ТекущаяЦена
	|ИЗ
	|	ВТ КАК ВТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЦены КАК СтарыеЦены
	|		ПО (ВТ.ТипЦен = СтарыеЦены.ТипЦен
	|				И ВТ.Номенклатура = СтарыеЦены.Номенклатура
	|				И ВТ.ХарактеристикаНоменклатуры = СтарыеЦены.ХарактеристикаНоменклатуры)
	|ИТОГИ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения");
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);  
	Если Объект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКонтрагента
		Или Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКонтрагента Тогда
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент); 
		Запрос.УстановитьПараметр("Договор", Объект.ДоговорВзаиморасчетов);
	КонецЕсли;                               
	Момент = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.ДатаНачалаДействия)),
		Новый Граница(Новый МоментВремени(Объект.ДатаНачалаДействия, Объект.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("МоментВремени", Момент); 
	ТЗНоменклатуры = ТаблицаТоваров.Скопировать(, "Номенклатура"); 
	ТЗНоменклатуры.Свернуть("Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", ТЗНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпанииПолучатель);

	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияВСтрокеДляТиповЦен(СтрокаЦенТовара, ДанныеДляЗаполненияТипЦены)
	
	СтрокаЦенТовара.Коэффициент = ДанныеДляЗаполненияТипЦены.Коэффициент;
					
	ОписаниеРеквизитовТипаЦен = ИнформацияОРеквизитахТиповЦен.Получить(ДанныеДляЗаполненияТипЦены.ТипЦен);
	
	Если ОписаниеРеквизитовТипаЦен <> Неопределено Тогда
	
		СтрокаЦенТовара[ОписаниеРеквизитовТипаЦен.Цена]           = ДанныеДляЗаполненияТипЦены.Цена;
		СтрокаЦенТовара[ОписаниеРеквизитовТипаЦен.ЦенаБазовая]    = ДанныеДляЗаполненияТипЦены.ЦенаБазовая;
		СтрокаЦенТовара[ОписаниеРеквизитовТипаЦен.ПроцентНаценки] = ДанныеДляЗаполненияТипЦены.ПроцентНаценки;
		СтрокаЦенТовара[ОписаниеРеквизитовТипаЦен.СуммаНаценки]   = ДанныеДляЗаполненияТипЦены.СуммаНаценки;
		СтрокаЦенТовара[ОписаниеРеквизитовТипаЦен.ЦенаТекущая]    = ДанныеДляЗаполненияТипЦены.ТекущаяЦена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуНаСервере(ОбновитьПроцентНаценки, Номенклатура, ТипЦен)
	Для Каждого ТипЦены Из ВыбранныеТипыЦен() Цикл
		Если ЗначениеЗаполнено(ТипЦен) 
			И ТипЦен <> ТипЦены Тогда
		
			Продолжить;	
		
		КонецЕсли; 
		
		ПараметрыРасчетаТипаЦен = ВыбранныеТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", ТипЦены))[0];
		ИнформацияОРеквизитахТипаЦены = ИнформацияОРеквизитахТиповЦен.Получить(ТипЦены);
		
		Для Каждого ЭлементТоваров Из ЦеныТоваров Цикл
			Если ЗначениеЗаполнено(Номенклатура) 
				И Номенклатура <> ЭлементТоваров.Номенклатура Тогда
			
				Продолжить;	
			
			КонецЕсли; 
			
			ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ЦенаБазовая] = Документы.ИзменениеЦен.БазоваяЦена(
				Объект,
				ЭлементТоваров,
				ТипЦены,
				ПараметрыРасчетаТипаЦен.РасчетЦенОт
			);
			
			// сбросим процент наценки при перерасчете. он должен устанавливаться стандартным методом.
			ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = 0;
			
			Если ЗначениеЗаполнено(ЭлементТоваров.Номенклатура) Тогда
				
				ПроцентНаценкиВНоменклатуре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементТоваров.Номенклатура,
					"ПроцентНаценки");
				
			Иначе
				
				ПроцентНаценкиВНоменклатуре = 0;
					
			КонецЕсли;
			
			Если ПараметрыРасчетаТипаЦен.БратьПроцентНаценкиИзНоменклатуры И ПроцентНаценкиВНоменклатуре <> 0 Тогда
				
				ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = ПроцентНаценкиВНоменклатуре;
				
			ИначеЕсли ПараметрыРасчетаТипаЦен.ПроцентНаценки <> 0 Тогда
				
				ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = ПараметрыРасчетаТипаЦен.ПроцентНаценки;
				
			ИначеЕсли ЗначениеЗаполнено(Объект.БазовыйТипЦен) Тогда
				
				ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = ОбщегоНазначения
					.ЗначениеРеквизитаОбъекта(Объект.БазовыйТипЦен, "ПроцентСкидкиНаценки");
				
			КонецЕсли;
			
			ПересчитатьЦенуИНаценку(ЭлементТоваров, ИнформацияОРеквизитахТипаЦены, ПараметрыРасчетаТипаЦен);
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Пересчет цены документа на клиенте
//
&НаКлиенте
Процедура ПересчитатьЦену(ОбновитьПроцентНаценки, ТипПересчета = 1)
	
	ТекущаяНоменклатура = Неопределено;
	ТекущийТипЦен       = Неопределено;
	
	Если ТипПересчета = 2 Тогда
		ТекущиеДанные = Элементы.ЦеныТоваров.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не выбрана номенклатура для пересчета цен.'")
			);
			Возврат;
		КонецЕсли;
		ТекущаяНоменклатура = ТекущиеДанные.Номенклатура;
	ИначеЕсли ТипПересчета = 3 Тогда
		ТекущиеДанные = Элементы.ВыбранныеТипыЦен.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не выбран тип цен для пересчета цен.'")
			);
			Возврат;
		КонецЕсли;
		ТекущийТипЦен = ТекущиеДанные.ТипЦен;
	КонецЕсли;
	
	ПересчитатьЦенуНаСервере(ОбновитьПроцентНаценки, ТекущаяНоменклатура, ТекущийТипЦен);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСтарыеЦеныНаСервере()  
	
	СохранитьТипыЦен(Объект, ВыбранныеТипыЦен);
	СохранитьТоварыИУслуги(Объект, ЦеныТоваров, ИнформацияОРеквизитахТиповЦен);

	ЗаполнитьЦеныТоваровПоДаннымИзБазы(Объект.Товары.Выгрузить());	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьЦеновыеПоказателиТоваров()

	ТаблицаТовары = Объект.Товары.Выгрузить();
	ТаблицаТовары.ЗаполнитьЗначения(0, "Цена, ЦенаБазовая, ПроцентНаценки, СуммаНаценки");
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ТаблицаТовары);
	
	ЗаполнитьЦеныТоваровПоДаннымИзБазы(Объект.Товары.Выгрузить());

КонецПроцедуры

#КонецОбласти

#Область Товары

&НаСервере
Функция ДанныеНоменклатурыДляЗаполнения(Товар)
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Товар.Номенклатура, "ВидНоменклатуры");
	
	Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
		
		Возврат ДанныеНабора(Товар);
		
	Иначе
		
		Возврат ДанныеНоменклатуры(Товар);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДанныеНабора(Товар)
	
	СоставНабора = РазложитьНаборДоНоменклатур(Товар.Номенклатура);
	
	НоменклатурыВСоставе = Новый Массив();
	
	Для Каждого ЭлементНабора Из СоставНабора Цикл
		
		НоменклатурыВСоставе.Добавить(ЭлементНабора.Номенклатура);
		
	КонецЦикла;
	
	ЗначенияРеквизитовНоменклатуры = ЗначенияРеквизитовНоменклатур(НоменклатурыВСоставе);
	
	Для Каждого ЭлементНабора Из СоставНабора Цикл
		
		РеквизитыНоменклатуры = ЗначенияРеквизитовНоменклатуры.Получить(ЭлементНабора.Номенклатура);
		ЭлементНабора.Вставить("ЕдиницаИзмерения"        , РеквизитыНоменклатуры.ЕдиницаИзмерения);
		ЭлементНабора.Вставить("Коэффициент"             , РеквизитыНоменклатуры.Коэффициент);
		ЭлементНабора.Вставить("ВладелецХарактеристики"  , РеквизитыНоменклатуры.ВладелецХарактеристики);
		ЭлементНабора.Вставить("ВладелецЕдиницыИзмерения", РеквизитыНоменклатуры.ВладелецЕдиницыИзмерения);
		
	КонецЦикла; 
	
	Возврат Новый Структура("ЭтоНабор,СоставНабора", Истина, СоставНабора);
	
КонецФункции

&НаСервереБезКонтекста
Функция РазложитьНаборДоНоменклатур(Набор)
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСоставНабора.Номенклатура КАК Номенклатура,
		|	НоменклатураСоставНабора.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НоменклатураСоставНабора.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Набор) КАК ЭтоНабор
		|ИЗ
		|	Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
		|ГДЕ
		|	НоменклатураСоставНабора.Ссылка = &Набор"
	);
	Запрос.УстановитьПараметр("Набор", Набор);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	СоставНабора = РезультатЗапроса.Выбрать();
	
	Пока СоставНабора.Следующий() Цикл
		
		Если СоставНабора.ЭтоНабор Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Результат,
				РазложитьНаборДоНоменклатур(СоставНабора.Номенклатура),
				Истина
			);
			
		Иначе
			
			Результат.Добавить(
				Новый Структура(
					"Номенклатура,ХарактеристикаНоменклатуры",
					СоставНабора.Номенклатура,
					СоставНабора.ХарактеристикаНоменклатуры
				)
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовНоменклатур(СписокНоменклатуры)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1
		|			ТОГДА Номенклатура.ТипНоменклатуры
		|		ИНАЧЕ Номенклатура.Ссылка
		|	КОНЕЦ КАК ВладелецЕдиницыИзмерения,
		|	ВЫБОР
		|		КОГДА Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
		|			ТОГДА Номенклатура.ТипНоменклатуры
		|		КОГДА Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
		|			ТОГДА Номенклатура.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристики,
		|	Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&Номенклатура)"
	);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Соответствие();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		РеквизитыНоменклатуры = РезультатЗапроса.Выбрать();
	
		Пока РеквизитыНоменклатуры.Следующий() Цикл
			
			ЗначенияРеквизитов = Новый Структура(
				"ЕдиницаИзмерения,
				|Коэффициент,
				|ВладелецХарактеристики,
				|ВладелецЕдиницыИзмерения"
			);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, РеквизитыНоменклатуры);
			Результат.Вставить(РеквизитыНоменклатуры.Номенклатура, ЗначенияРеквизитов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеНоменклатуры(Товар)
	
	Результат = Новый Структура(
		"ЭтоНабор,
		|ЕдиницаИзмерения,
		|Коэффициент,
		|ВладелецХарактеристики,
		|ВладелецЕдиницыИзмерения,
		|БазовыеТипыЦенТоваров"
	);
	Результат.ЭтоНабор = Ложь;
	
	ЗначенияРеквизитовНоменклатуры = ЗначенияРеквизитовНоменклатур(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Товар.Номенклатура)
	);
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры) Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитовНоменклатуры.Получить(Товар.Номенклатура));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПодставитьДанныеНоменклатурыВСтроку(СтрокаТаблицы,
                                              ДанныеНоменклатуры,
                                              Форма,
                                              ОбновляемыеТипыЦен = Неопределено)
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыТоваровДляТиповЦен(ТипыЦен)
	
	ТоварыКОбновлению = ЦеныТоваров.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ЗначенияРеквизитовТоваров = ЗначенияРеквизитовНоменклатур(ТоварыКОбновлению);
	
	Для Каждого Товар Из ЦеныТоваров Цикл
		
		ПодставитьДанныеНоменклатурыВСтроку(
			Товар,
			ЗначенияРеквизитовТоваров.Получить(Товар.Номенклатура),
			ЭтотОбъект,
			ТипыЦен
		);
				
	КонецЦикла;
	
	ЗаполнитьБазовыеЦеныТоваров(ЦеныТоваров, ТипыЦен);
	ЗаполнитьПроцентНаценкиТоваров(ЦеныТоваров, ТипыЦен);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазовыеЦеныТоваров(Товары, ТипыЦен)
	НужнаСтараяЦена = ПравоПользователя("ВариантОтображенияТекущейЦеныИзмененияЦен") = 
			Перечисления.ВариантОтображенияТекущейЦены.ОбновлятьАвтоматически;
			
	Для Каждого ТипЦены Из ТипыЦен Цикл
		
		ПараметрыРасчетаТипаЦен = ВыбранныеТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", ТипЦены))[0];
		ИнформацияОРеквизитахТипаЦены = ИнформацияОРеквизитахТиповЦен.Получить(ТипЦены);
		
		Для Каждого ЭлементТоваров Из Товары Цикл
			
			ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ЦенаБазовая] = Документы.ИзменениеЦен.БазоваяЦена(
				Объект,
				ЭлементТоваров,
				ТипЦены,
				ПараметрыРасчетаТипаЦен.РасчетЦенОт
				);
			Если НужнаСтараяЦена Тогда
				Момент = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.ДатаНачалаДействия)), 
				Новый Граница(Новый МоментВремени(Объект.ДатаНачалаДействия, Объект.Ссылка),ВидГраницы.Исключая));
				ЦенаТекущая = ЦенообразованиеСервер.ПолучитьЦену(ТипЦены,
				ЭлементТоваров.Номенклатура,
				Момент,
				Объект.Контрагент,
				,
				,
				ЭлементТоваров.ХарактеристикаНоменклатуры,
				ЭлементТоваров.ЕдиницаИзмерения,
				Объект.ПодразделениеКомпанииПолучатель,
				Ложь,
				Объект.ДоговорВзаиморасчетов);
				
				ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ЦенаТекущая] = ЦенаТекущая;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроцентНаценкиТоваров(Товары, ТипыЦен, РасчетОтЦены = Ложь)
	
	Для Каждого ТипЦены Из ТипыЦен Цикл
		
		ПараметрыРасчетаТипаЦен = ВыбранныеТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", ТипЦены))[0];
		ИнформацияОРеквизитахТипаЦены = ИнформацияОРеквизитахТиповЦен.Получить(ТипЦены);
		
		Для Каждого ЭлементТоваров Из Товары Цикл
			
			Если ЗначениеЗаполнено(ЭлементТоваров.Номенклатура) Тогда
					
				ПроцентНаценкиВНоменклатуре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементТоваров.Номенклатура,
					"ПроцентНаценки");
				
			Иначе
				
				ПроцентНаценкиВНоменклатуре = 0;
					
			КонецЕсли;
			
			Если ПараметрыРасчетаТипаЦен.БратьПроцентНаценкиИзНоменклатуры И ПроцентНаценкиВНоменклатуре <> 0 Тогда
				
				ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = ПроцентНаценкиВНоменклатуре;
				
			ИначеЕсли ПараметрыРасчетаТипаЦен.ПроцентНаценки <> 0 Тогда
					
				ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = ПараметрыРасчетаТипаЦен.ПроцентНаценки;
				
			ИначеЕсли ЗначениеЗаполнено(Объект.БазовыйТипЦен) Тогда
				
				ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = ОбщегоНазначения
					.ЗначениеРеквизитаОбъекта(Объект.БазовыйТипЦен, "ПроцентСкидкиНаценки");
				
			КонецЕсли;
			
			Если РасчетОтЦены Тогда
				ПересчитатьПроцентИСуммуНаценки(ЭлементТоваров, ИнформацияОРеквизитахТипаЦены, ПараметрыРасчетаТипаЦен);
			Иначе
				ПересчитатьЦенуИНаценку(ЭлементТоваров, ИнформацияОРеквизитахТипаЦены, ПараметрыРасчетаТипаЦен);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьЦенуИНаценку(ЭлементТоваров, ИнформацияОРеквизитахТипаЦены, ПараметрыРасчетаТипаЦены)
	
	ЦенаБазовая    = ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ЦенаБазовая];
	ПроцентНаценки = ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки];
	
	ЦенаДоОкругления = ЦенаБазовая + ЦенаБазовая / 100 * ПроцентНаценки; // BSLLS-off
	ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.Цена] = ЦенообразованиеКлиентСервер.ОкруглитьЦену(ЦенаДоОкругления,
		ПараметрыРасчетаТипаЦены.ОкруглятьДо);
	
	ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.СуммаНаценки] = ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.Цена]
		- ЦенаБазовая;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьЦенуИПроцентНаценки(ЭлементТоваров, ИнформацияОРеквизитахТипаЦены, ПараметрыРасчетаТипаЦены)
	
	ЦенаБазовая = ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ЦенаБазовая];
	
	Если ЦенаБазовая = 0 Тогда
		
		ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.Цена] = 0;
		ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = 0;
		Возврат;
		
	КонецЕсли;
	
	СуммаНаценки = ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.СуммаНаценки];
	ЦенаДоОкругления = ЦенаБазовая + СуммаНаценки;
	ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.Цена] = Окр(ЦенаДоОкругления, ПараметрыРасчетаТипаЦены.ОкруглятьДо);
	ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = СуммаНаценки / ЦенаБазовая * 100; // BSLLS-off
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьПроцентИСуммуНаценки(ЭлементТоваров, ИнформацияОРеквизитахТипаЦены, ПараметрыРасчетаТипаЦены)
	
	ЦенаБазовая = ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ЦенаБазовая];
	Цена        = ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.Цена]; 
	
	Если ЦенаБазовая = 0 Тогда
		
		ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = 0;
		ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.СуммаНаценки] = 0;
		Возврат;
		
	КонецЕсли;
	
	СуммаНаценки = Цена - ЦенаБазовая;
	ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.СуммаНаценки]   = СуммаНаценки;
	ЭлементТоваров[ИнформацияОРеквизитахТипаЦены.ПроцентНаценки] = СуммаНаценки / ЦенаБазовая * 100; // BSLLS-off
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиПриЗаписи

&НаСервере
Функция ЕстьОщибкиВЗаполненииТаблицыТоваров()
	
	Результат = Ложь;
	
	СтрокиСПустойНоменклатурой = ЦеныТоваров.НайтиСтроки(
		Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())
	);
	
	Для Каждого Строка Из СтрокиСПустойНоменклатурой Цикл
	
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить номенклатуру'"),
			,
			СтрШаблон("ЦеныТоваров[%1].Номенклатура", ЦеныТоваров.Индекс(Строка) - 1),
			,
			Результат
		);
		
	КонецЦикла;
	
	СтрокиСПустойЕдиницей = ЦеныТоваров.НайтиСтроки(
		Новый Структура("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка())
	);
	
	Для Каждого Строка Из СтрокиСПустойЕдиницей Цикл
	
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить единицу измерения'"),
			,
			СтрШаблон("ЦеныТоваров[%1].ЕдиницаИзмерения", Формат(ЦеныТоваров.Индекс(Строка), "ЧГ=;")),
			,
			Результат
		);
		
	КонецЦикла;
	
	ОтменаЦен = Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКомпании Или
				Объект.ХозОперация = Справочники.ХозОперации.ОтменаЦенКонтрагента;
	
	Для Каждого Товар Из ЦеныТоваров Цикл
		
		ВсеЦеныНулевые = Истина;
		
		Для Каждого ОписаниеТипаЦен Из ИнформацияОРеквизитахТиповЦен Цикл 
			
			ВсеЦеныНулевые = ВсеЦеныНулевые И (Товар[ОписаниеТипаЦен.Значение.Цена] = 0);
			
		КонецЦикла;
		
		Если ВсеЦеныНулевые И Не ОтменаЦен Тогда
		
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Необходимо указать значение цены хотя бы для одного типа цен'"),
				,
				СтрШаблон("ЦеныТоваров[%1].Номенклатура", Формат(ЦеныТоваров.Индекс(Товар), "ЧГ=;")),
				,
				Результат
			);
			
		ИначеЕсли Не ВсеЦеныНулевые И ОтменаЦен Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Необходимо указывать нулевое значение цены'"),
				,
				СтрШаблон("ЦеныТоваров[%1].Номенклатура", Формат(ЦеныТоваров.Индекс(Товар), "ЧГ=;")),
				,
				Результат
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиСоответствияВидаНоменклатурыХозОперации()
	
	УникальнаяНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ЦеныТоваров.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	
	Если УникальнаяНоменклатура.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВидыНоменклатуры,
		ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Набор"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Номенклатура.Ссылка) КАК НоменклатураПредставление
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ Номенклатура.ВидНоменклатуры В (&ВидНоменклатуры)");
	Запрос.УстановитьПараметр("СписокНоменклатуры", УникальнаяНоменклатура);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидыНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПлохаяНоменклатура = РезультатЗапроса.Выгрузить();
	ХозОперацияПредставление = Строка(Объект.ХозОперация);
	
	Для Каждого Строка Из ПлохаяНоменклатура Цикл
		
		НайденныеТовары = ЦеныТоваров.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Если НайденныеТовары.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Товар Из НайденныеТовары Цикл
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Вид номенклатуры ""%1"" недопустим для выбранной операции ""%2""'"),
				Строка.НоменклатураПредставление,
				ХозОперацияПредставление
			);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				СтрШаблон("ЦеныТоваров[%1].Номенклатура", ЦеныТоваров.Индекс(Товар))
			);
				
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлажкиВТаблице(Таблица, ИмяКолонки, Значение)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтрокаТаблицы[ИмяКолонки] = Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
                                                     ДополнительныеПараметры = Неопределено) Экспорт
	
	ПрерватьВыполнение = Не УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	
	Если ПрерватьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ПодборНоменклатуры" Тогда
		
		ЗаполнитьИзКорзины(РезультатОповещения.Корзина);
		
	ИначеЕсли ДополнительныеПараметры = "ЗагрузкаИзДокумента" Тогда
		
		ЗаполнитьИзКорзины(РезультатОповещения.Корзина, РезультатОповещения.Свойство("ЗагружатьЦены"));
		
	Иначе
	
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПрерватьВыполнение = Не УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект,
		РезультатОповещения, ДополнительныеПараметры);
	
	Если ПрерватьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяУстановкаДатыНачалаОтвет(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ДатаНачалаДействия = Объект.Дата;
		
		АвтоПересчетЦен();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура ОтветНаВопросОбОчисткеТабличнойЧасти(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЦеныТоваров.Очистить();
		Объект.Товары.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладаЗавершение(Склад, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ЗаполнитьСкладскимиОстаткамиНаСервере(Склад);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦеновойГруппыЗавершение(ЦеноваяГруппа, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ЦеноваяГруппа) Тогда
		
		ЗаполнитьПоЦеновойГруппеНаСервере(ЦеноваяГруппа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборГруппыНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТребуетсяОчисткаТабличнойЧасти = 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры,
		"ТребуетсяОчисткаТабличнойЧасти",
		Ложь
	);
	
	Если Результат <> Неопределено Тогда
		
		Если ТребуетсяОчисткаТабличнойЧасти Тогда
			ЦеныТоваров.Очистить();
			Объект.Товары.Очистить();
		КонецЕсли;
		
		ЗаполнитьПоГруппеНоменклатурыНаСервере(Результат);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать группу номенклатуры'"), Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПрайсЛистаЗавершение(ПрайсЛист, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ПрайсЛист) Тогда
		
		ЗаполнитьПоПрайсЛистуКонтрагентаНаСервере(ПрайсЛист);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладскимиОстаткамиНаСервере(СкладОстатков)
	
	Если СкладОстатков = Неопределено Тогда
	
		ОстаткиТоваров = ОстаткиТоваровВсе().Выбрать();
		
	Иначе
		
		ОстаткиТоваров = ОстаткиТоваров(СкладОстатков).Выбрать();
		
	КонецЕсли;
	
	Объект.Товары.Очистить();
	ЦеныТоваров.Очистить();
	
	Пока ОстаткиТоваров.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЦеныТоваров.Добавить(), ОстаткиТоваров);
		
	КонецЦикла;
	
	ЗаполнитьБазовыеЦеныТоваров(ЦеныТоваров, ВыбранныеТипыЦен());
	ЗаполнитьПроцентНаценкиТоваров(ЦеныТоваров,	ВыбранныеТипыЦен());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЦеновойГруппеНаСервере(ЦеноваяГруппа)
	ТаблицаТоваров = Документы.ИзменениеЦен.ЗаполнитьПоЦеновойГруппе(Объект, ЦеноваяГруппа);
	ЦеныТоваров.Очистить();
	Объект.Товары.Очистить();
	Для каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		НоваяСтрока = ЦеныТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		ЗаполнитьВладельцев(НоваяСтрока);
	КонецЦикла; 
	ЗаполнитьБазовыеЦеныТоваров(ЦеныТоваров, ВыбранныеТипыЦен());
	ЗаполнитьПроцентНаценкиТоваров(ЦеныТоваров,	ВыбранныеТипыЦен());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГруппеНоменклатурыНаСервере(ГруппаНоменклатуры)
	
	ТаблицаТоваров = ПолучитьНоменклатуруВГруппе(ГруппаНоменклатуры);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		НоваяСтрока = ЦеныТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		ЗаполнитьВладельцев(НоваяСтрока);
		
	КонецЦикла;
	
	ВыбТипыЦен = ВыбранныеТипыЦен();
	ЗаполнитьБазовыеЦеныТоваров(ЦеныТоваров, ВыбТипыЦен);
	ЗаполнитьПроцентНаценкиТоваров(ЦеныТоваров, ВыбТипыЦен);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруВГруппе(ГруппаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|	И НЕ Номенклатура.ЭтоГруппа";
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПрайсЛистуКонтрагентаНаСервере(ПрайсЛистКонтрагента)
	ЦеныТоваров.Очистить();
	Объект.Товары.Очистить();

	Если Объект.ПрайсЛистКонтрагента <> ПрайсЛистКонтрагента Тогда
		Объект.ПрайсЛистКонтрагента = ПрайсЛистКонтрагента;
	КонецЕсли;
	
	ТаблицаТоваров = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(ПрайсЛистКонтрагента, , Истина);
	
	// Приведем цены таблицы товаров
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		
		Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийТипЦен Из ВыбранныеТипыЦен() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
			Документы.ИзменениеЦен.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.ТипЦен = ТекущийТипЦен;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			НоваяСтрока = ЦеныТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			ЗаполнитьВладельцев(НоваяСтрока);
		КонецЦикла; 
		ЗаполнитьБазовыеЦеныТоваров(ЦеныТоваров, ВыбранныеТипыЦен());
		ЗаполнитьПроцентНаценкиТоваров(ЦеныТоваров,	ВыбранныеТипыЦен());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВладельцев(СтрокаЦены)
	Если СтрокаЦены.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1 Тогда
		СтрокаЦены.ВладелецЕдиницыИзмерения = СтрокаЦены.Номенклатура.ТипНоменклатуры;
	Иначе
		СтрокаЦены.ВладелецЕдиницыИзмерения = СтрокаЦены.Номенклатура;
	КонецЕсли; 
	Если СтрокаЦены.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1 Тогда
		СтрокаЦены.ВладелецХарактеристики = СтрокаЦены.Номенклатура.ТипНоменклатуры;
	ИначеЕсли СтрокаЦены.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2 Тогда
		СтрокаЦены.ВладелецХарактеристики = СтрокаЦены.Номенклатура;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстаткиТоваровВсе()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры
		|		ИНАЧЕ ОстаткиТоваровКомпанииОстатки.Номенклатура
		|	КОНЕЦ КАК ВладелецЕдиницыИзмерения,
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры
		|		КОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристики,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(,
		|		Номенклатура.ВидНоменклатуры В
		|			(ВЫБРАТЬ
		|				ХозОперацииВидыНоменклатуры.ВидНоменклатуры
		|			ИЗ
		|				Справочник.ХозОперации.ВидыНоменклатуры КАК ХозОперацииВидыНоменклатуры
		|			ГДЕ
		|				ХозОперацииВидыНоменклатуры.Ссылка = ЗНАЧЕНИЕ(Справочник.ХозОперации.УстановкаЦенКомпании))
		|	) КАК ОстаткиТоваровКомпанииОстатки"
	);
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОстаткиТоваров(СкладОстатков)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры
		|		ИНАЧЕ ОстаткиТоваровКомпанииОстатки.Номенклатура
		|	КОНЕЦ КАК ВладелецЕдиницыИзмерения,
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры
		|		КОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.Номенклатура
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристики,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, СкладКомпании = &СкладОстатков
		|		И Номенклатура.ВидНоменклатуры В
		|			(ВЫБРАТЬ
		|				ХозОперацииВидыНоменклатуры.ВидНоменклатуры
		|			ИЗ
		|				Справочник.ХозОперации.ВидыНоменклатуры КАК ХозОперацииВидыНоменклатуры
		|			ГДЕ
		|				ХозОперацииВидыНоменклатуры.Ссылка = ЗНАЧЕНИЕ(Справочник.ХозОперации.УстановкаЦенКомпании))
		|	) КАК ОстаткиТоваровКомпанииОстатки"
	);
	Запрос.УстановитьПараметр("СкладОстатков", СкладОстатков);
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	ТоварыВДокументеОсновании = ТоварыДокументаОснования(Объект.ДокументОснование).Выбрать();
	
	Объект.Товары.Очистить();
	ЦеныТоваров.Очистить();
	
	Пока ТоварыВДокументеОсновании.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЦеныТоваров.Добавить(), ТоварыВДокументеОсновании);
		
	КонецЦикла;
	
	ЗаполнитьБазовыеЦеныТоваров(ЦеныТоваров, ВыбранныеТипыЦен());
	ЗаполнитьПроцентНаценкиТоваров(ЦеныТоваров,	ВыбранныеТипыЦен());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварыДокументаОснования(ДокументОснование)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Комплектация") Тогда
		
		Возврат ТоварыИзШапкиКомплектации(ДокументОснование);
	
	Иначе
		
		Возврат ТоварыИзТабличнойЧастиОснования(ДокументОснование);
		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ТоварыИзШапкиКомплектации(ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Комплектация.Комплект КАК Номенклатура,
		|	Комплектация.ХарактеристикаКомплекта КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА Комплектация.Комплект.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1
		|			ТОГДА Комплектация.Комплект.ТипНоменклатуры
		|		ИНАЧЕ Комплектация.Комплект
		|	КОНЕЦ КАК ВладелецЕдиницыИзмерения,
		|	ВЫБОР
		|		КОГДА Комплектация.Комплект.ТипНоменклатуры.ИспользованиеХарактеристик = 1
		|			ТОГДА Комплектация.Комплект.ТипНоменклатуры
		|		КОГДА Комплектация.Комплект.ТипНоменклатуры.ИспользованиеХарактеристик = 2
		|			ТОГДА Комплектация.Комплект
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристики,
		|	Комплектация.КомплектЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Комплектация.КомплектЕдиницаИзмерения.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.Комплектация КАК Комплектация
		|ГДЕ
		|	Комплектация.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТоварыИзТабличнойЧастиОснования(ДокументОснование)
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1
	|			ТОГДА ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры
	|		ИНАЧЕ ПоступлениеТоваровТовары.Номенклатура
	|	КОНЕЦ КАК ВладелецЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
	|			ТОГДА ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры
	|		КОГДА ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
	|			ТОГДА ПоступлениеТоваровТовары.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВладелецХарактеристики,
	|	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровТовары.Коэффициент КАК Коэффициент
	|ИЗ
	|	&ТоварыОснования КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &Ссылка";
	ПутьКТчТовары = СтрШаблон("Документ.%1.Товары", ДокументОснование.Метаданные().Имя);
	Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "&ТоварыОснования", ПутьКТчТовары));
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзКорзины(ПутьККорзине, ЦеныВКорзине = Ложь)
	
	Корзина = ПолучитьИзВременногоХранилища(ПутьККорзине);
	НовыеТовары = Новый Массив();
	
	Для Каждого Товар Из Корзина Цикл
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Товар);
		
		Если ЦеныТоваров.НайтиСтроки(УсловиеПоиска).Количество() > 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ЦеныТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
		
		Если ЦеныВКорзине Тогда
			Для Каждого ТипЦены Из ВыбранныеТипыЦен() Цикл
				ИнформацияОРеквизитахТипаЦены = ИнформацияОРеквизитахТиповЦен.Получить(ТипЦены);
				НоваяСтрока[ИнформацияОРеквизитахТипаЦены.Цена] = Товар.Цена;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеНоменклатуры = ДанныеНоменклатурыДляЗаполнения(НоваяСтрока);
		
		Если ДанныеНоменклатуры.ЭтоНабор Тогда
			
			ЦеныТоваров.Удалить(НоваяСтрока);
			
			Для Каждого ЭлементСостава Из ДанныеНоменклатуры.СоставНабора Цикл
				
				УсловиеПоиска = Новый Структура(
					"Номенклатура,ХарактеристикаНоменклатуры",
					ЭлементСостава.Номенклатура,
					ЭлементСостава.ХарактеристикаНоменклатуры
				);
				
				Если ЦеныТоваров.НайтиСтроки(УсловиеПоиска).Количество() = 0 Тогда
					
					НоваяСтрокаЭлементаНабора = ЦеныТоваров.Добавить();
					ПодставитьДанныеНоменклатурыВСтроку(НоваяСтрокаЭлементаНабора, ЭлементСостава, ЭтотОбъект);
					НовыеТовары.Добавить(НоваяСтрока);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ПодставитьДанныеНоменклатурыВСтроку(НоваяСтрока, ДанныеНоменклатуры, ЭтотОбъект);
			НовыеТовары.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьБазовыеЦеныТоваров(НовыеТовары, ВыбранныеТипыЦен());
	ЗаполнитьПроцентНаценкиТоваров(НовыеТовары, ВыбранныеТипыЦен(), ЦеныВКорзине);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти