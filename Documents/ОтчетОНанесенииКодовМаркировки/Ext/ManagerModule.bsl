// Модуль менеджера документа "Отчет о нанесении кодов маркировки".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект		 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  Расширенные	 - Булево				 - Признак получения расширенных сведений об итогах операци.
// 
// Возвращаемое значение:
//  Структура - Данные с итогами показателей
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получим товарные группы, которым необходимо формировать отчет о нанесении.
// 
// Возвращаемое значение:
//  Массив - Доступные товарные группы.
//
Функция ТоварныеГруппыДляОтчетаОНанесении(ВКавычки = Истина) Экспорт
	
	ДоступныеТоварныеГруппы = Новый Массив;
	ДоступныеТоварныеГруппы.Добавить("milk");
	ДоступныеТоварныеГруппы.Добавить("water");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ДоступныеТоварныеГруппы,
		МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции());
	
	Если ВКавычки Тогда
		Для Индекс = 0 По ДоступныеТоварныеГруппы.Количество() - 1 Цикл
			ДоступныеТоварныеГруппы[Индекс] = СтрШаблон("""%1""", ДоступныеТоварныеГруппы[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДоступныеТоварныеГруппы;
	
КонецФункции // ТоварныеГруппыДляОтчетаОНанесении()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Статус");
	ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
	
	ТоварнаяГруппа = Объект.ТоварнаяГруппа.ТоварнаяГруппа;
	Если МаркировкаТоваровКлиентСервер.ЭтоТоварнаяГруппаМолочнаяПродукция(ТоварнаяГруппа) Тогда
		ОбязательныеРеквизиты.Добавить("ДатаОкончанияСрокаГодности");
	ИначеЕсли МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции().Найти(ТоварнаяГруппа) <> Неопределено Тогда
		ОбязательныеРеквизиты.Добавить("ИдентификаторПроизводственнойЛинии");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.КодМаркировки");
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("КодМаркировки");
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение данных документа для отчета о нанесении кодов маркировки.
//
// Параметры:
//  Объект		 - ДокументСсылка.ОтчетОНанесенииКодовМаркировки - Документ, для которого получаем данные
// 
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ДанныеОтчетаОНанесенииКодовМаркировки(Объект) Экспорт
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтчетОНанесенииКодовМаркировки.Организация.ИНН КАК ОрганизацияИНН,
	               |	ОтчетОНанесенииКодовМаркировки.ТоварнаяГруппа КАК ТоварнаяГруппа,
	               |	ОтчетОНанесенииКодовМаркировки.ТоварнаяГруппа.ТоварнаяГруппа КАК ВидПродукции,
	               |	ОтчетОНанесенииКодовМаркировки.ДатаОкончанияСрокаГодности КАК ДатаОкончанияСрокаГодности,
	               |	ОтчетОНанесенииКодовМаркировки.БылиИспользованыНаПроизводстве КАК БылиИспользованыНаПроизводстве,
	               |	ОтчетОНанесенииКодовМаркировки.СтрокГодностиМеньше72Часов КАК СтрокГодностиМеньше72Часов,
	               |	ОтчетОНанесенииКодовМаркировки.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии,
	               |	ОтчетОНанесенииКодовМаркировки.НомерПроизводственногоЗаказа КАК НомерПроизводственногоЗаказа,
	               |	ОтчетОНанесенииКодовМаркировки.НаименованиеБрендаПродукции КАК НаименованиеБрендаПродукции,
	               |	ОтчетОНанесенииКодовМаркировки.ИдентификаторОтчетаОНанесенииАСУТП КАК ИдентификаторОтчетаОНанесенииАСУТП
	               |ИЗ
	               |	Документ.ОтчетОНанесенииКодовМаркировки КАК ОтчетОНанесенииКодовМаркировки
	               |ГДЕ
	               |	ОтчетОНанесенииКодовМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтчетОНанесенииКодовМаркировкиТовары.КодМаркировки КАК КодМаркировки
	               |ИЗ
	               |	Документ.ОтчетОНанесенииКодовМаркировки.Товары КАК ОтчетОНанесенииКодовМаркировкиТовары
	               |ГДЕ
	               |	ОтчетОНанесенииКодовМаркировкиТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ШапкаДокумента = ПакетЗапроса[0].Выбрать();
	ШапкаДокумента.Следующий();
	
	СтрокиКМ = ПакетЗапроса[1].Выгрузить().ВыгрузитьКолонку("КодМаркировки");
	
	ПолныеКодыМаркировкиДляСоответствия = РегистрыСведений.КодыМаркировки.КодыМаркировкиВBASE64(СтрокиКМ);
	
	ПолныеКодыМаркировки = Новый Массив;
	
	Для Каждого КодМаркировки Из ПолныеКодыМаркировкиДляСоответствия Цикл
		ПолныеКодыМаркировки.Добавить(МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(КодМаркировки.Значение));
	КонецЦикла;
	
	ТекстСообщения.Вставить("sntins", ПолныеКодыМаркировки);
	
	// По умолчанию
	ТекстСообщения.Вставить("usageType", "VERIFIED");
	
	Если МаркировкаТоваровКлиентСервер.ЭтоТоварнаяГруппаМолочнаяПродукция(ШапкаДокумента.ВидПродукции) Тогда
		Если ШапкаДокумента.СтрокГодностиМеньше72Часов Тогда
			ТекстСообщения.Вставить("expDate72", Формат(ШапкаДокумента.ДатаОкончанияСрокаГодности, "ДФ=ггММддЧЧмм"));
		Иначе
			ТекстСообщения.Вставить("expDate", Формат(ШапкаДокумента.ДатаОкончанияСрокаГодности, "ДФ=ггММдд"));
		КонецЕсли;
		ТекстСообщения.Вставить("usedInProduction", ?(ШапкаДокумента.БылиИспользованыНаПроизводстве, "1", "0"));
		ТекстСообщения.Вставить("cisType", "UNIT");
	ИначеЕсли МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции().
			Найти(ШапкаДокумента.ВидПродукции) <> Неопределено Тогда
		ТекстСообщения.Вставить("productionLineId", ШапкаДокумента.ИдентификаторПроизводственнойЛинии);
		Если ЗначениеЗаполнено(ШапкаДокумента.НомерПроизводственногоЗаказа) Тогда
			ТекстСообщения.Вставить("productionOrderId", ШапкаДокумента.НомерПроизводственногоЗаказа);
		КонецЕсли;
		Если ЗначениеЗаполнено(ШапкаДокумента.НаименованиеБрендаПродукции) Тогда
			ТекстСообщения.Вставить("brandcode", ШапкаДокумента.НаименованиеБрендаПродукции);
		КонецЕсли;
		Если ЗначениеЗаполнено(ШапкаДокумента.ИдентификаторОтчетаОНанесенииАСУТП) Тогда
			ТекстСообщения.Вставить("sourceReportId", ШапкаДокумента.ИдентификаторОтчетаОНанесенииАСУТП);
		КонецЕсли;
		ТекстСообщения.Вставить("cisType", "UNIT");
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Получение данных документа для списания кодов маркировки
//
// Параметры:
//  Объект		 - ДокументСсылка.СписаниеКодовМаркировки - Документ, для которого получаем данные
//  ПараметрыОбмена - Структура - Параметры, с которыми выполняется команда.
//  Сообщение - Строка - причина отказа. 
//
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ЗапросДокумента(Объект, ПараметрыОбмена, Сообщение) Экспорт
	
	СтруктураСообщения = ДанныеОтчетаОНанесенииКодовМаркировки(Объект);
	
	Возврат СтруктураСообщения;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ОтчетОНанесенииКодовМаркировки);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли