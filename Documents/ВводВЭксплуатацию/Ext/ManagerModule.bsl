// Модуль менеджера документа "Ввод в эксплуатацию"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда 
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("БалансоваяСтоимость"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Обработка реквизитов ТЧ для получения расчетной балансовой стоимости
//
// Параметры:
//  ТекСтрока  - строка табличного поля - текущая строка,
//  ТекКолонка - строка - имя текущей колонки.
//
Процедура ВывестиРасчетнуюБалансовуюСтоимостьАктива(Объект, Строка, РассчитыватьСтоимостьАктива = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладКомпании) ИЛИ НЕ ЗначениеЗаполнено(Строка.Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(Строка.Коэффициент) Тогда
		Строка.БалансоваяСтоимость = 0;
		Возврат;
	КонецЕсли;
	
	Если Строка.Актив.ПервоначальнаяСтоимость = 0 Тогда
		РасчетнаяБалансоваяСтоимость = РассчитатьБалансовуюСтоимостьАктиваПоПартиям(Объект, Строка);
		Если РасчетнаяБалансоваяСтоимость.ОстатокТовара = 0 Тогда
			Строка.БалансоваяСтоимость = 0;
			Возврат;
		КонецЕсли;
		Строка.Количество = РасчетнаяБалансоваяСтоимость.ОстатокТовара / Строка.Коэффициент;
		Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			РасчетнаяБалансоваяСтоимость = РасчетнаяБалансоваяСтоимость.БалансоваяСтоимость;
			ТребуетсяПересчет = Ложь;
		Иначе
			РасчетнаяБалансоваяСтоимость = РасчетнаяБалансоваяСтоимость.БалансоваяСтоимостьУпр;
			ТребуетсяПересчет = Истина;
		КонецЕсли;
	Иначе
		РасчетнаяБалансоваяСтоимость = Строка.Актив.ПервоначальнаяСтоимость;
		ТребуетсяПересчет = Истина;
	КонецЕсли;
	
	// пересчитаем балансовую стоимость в валюту документа
	Если ТребуетсяПересчет Тогда
		Строка.БалансоваяСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(РасчетнаяБалансоваяСтоимость, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
	Иначе
		Строка.БалансоваяСтоимость = РасчетнаяБалансоваяСтоимость;
	КонецЕсли;
	
КонецПроцедуры // ВывестиРасчетнуюБалансовуюСтоимостьАктива()

// Рассчитывает балансовую стоимость актива исходя из партий товара (по умолчанию)
//
// Параметры
//  ТекСтрока - текущая строка ТЧ "Товары".
//
// Возвращаемое значение:
//   ВозвращаемоеЗначение - Структура(ОстатокТовара - остаток товара по которому была рассчитана балансовая стоимость,
//                                    БалансоваяСтоимость - рассчитанная балансовая стоимость).
//
Функция РассчитатьБалансовуюСтоимостьАктиваПоПартиям(Объект, Строка)
	
	ВозвращаемоеЗначение = Новый Структура("ОстатокТовара, БалансоваяСтоимость, БалансоваяСтоимостьУпр", 0, 0, 0);
	
	// получим стратегию списания товаров
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(Объект.СкладКомпании, Объект.Организация, ТекущаяДатаСеанса());
	
	// получаем таблицу партий для заданных параметров номенклатуры
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпанииОстатки.Партия                        КАК Партия,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток,0) КАК Количество,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаОстаток,0)      КАК Сумма,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаУпрОстаток,0)   КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки(&Момент, Номенклатура = &Номенклатура"
	+ ?(Строка.ХарактеристикаНоменклатуры.Пустая(), "", " И ХарактеристикаНоменклатуры = &Характеристика")
	+ " И СтатусПартии = &СтатусПартии И СкладКомпании = &Склад) КАК ПартииТоваровКомпанииОстатки
	|УПОРЯДОЧИТЬ ПО
	|	Партия.Дата"+?(СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО, " Убыв", "");
	Запрос.УстановитьПараметр("Момент"         , ?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Ссылка.МоментВремени(),Объект.Дата));
	Запрос.УстановитьПараметр("Номенклатура"   , Строка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика" , Строка.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СтатусПартии"   , Перечисления.СтатусыПартий.ТоварКупленный);
	Запрос.УстановитьПараметр("Склад"          , Объект.СкладКомпании);
	ТаблПартий = Запрос.Выполнить().Выгрузить();
	
	ВозвращаемоеЗначение.ОстатокТовара = Мин(ТаблПартий.Итог("Количество"), Строка.Количество*Строка.Коэффициент);
	Количество = ВозвращаемоеЗначение.ОстатокТовара;
	
	Если ВозвращаемоеЗначение.ОстатокТовара = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
		ВозвращаемоеЗначение.БалансоваяСтоимость = ?(ТаблПартий.Итог("Количество") = (Строка.Количество*Строка.Коэффициент),
													ТаблПартий.Итог("Сумма"),
													ТаблПартий.Итог("Сумма")/ВозвращаемоеЗначение.ОстатокТовара*Строка.Количество*Строка.Коэффициент);
													
		ВозвращаемоеЗначение.БалансоваяСтоимостьУпр = ?(ТаблПартий.Итог("Количество") = (Строка.Количество*Строка.Коэффициент),
														ТаблПартий.Итог("СуммаУпр"),
														ТаблПартий.Итог("СуммаУпр")/ТаблПартий.Итог("Количество")*Строка.Количество*Строка.Коэффициент);
	Иначе
		БалансСтоим = 0; БалансСтоимУпр = 0;
		Для каждого Партия Из ТаблПартий Цикл
			Если Количество <= 0 Тогда
				Прервать;
			КонецЕсли;
			БалансСтоим    = БалансСтоим + ?(Количество < Партия.Количество, Партия.Сумма/Партия.Количество*Количество, Партия.Сумма);
			БалансСтоимУпр = БалансСтоимУпр + ?(Количество < Партия.Количество, Партия.СуммаУпр/Партия.Количество*Количество, Партия.СуммаУпр);
			Количество = Количество - Партия.Количество;
		КонецЦикла;
		ВозвращаемоеЗначение.БалансоваяСтоимость    = БалансСтоим;
		ВозвращаемоеЗначение.БалансоваяСтоимостьУпр = БалансСтоимУпр;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // РассчитатьБалансовуюСтоимостьАктиваПоПартиям()

// Проверяет документ на соответствие условиям выгрузки документа 
//
// Параметры:
//  Объект                  - ДокументОбъект - Объект, для которого выполняется проверка  
//
// Возвращаемое значение:
//  Булево - признак того что документ может быть выгружен
//
Функция РазрешитьРегистрациюДокумента(Объект) Экспорт
	
	ПрочиеАктивы = Объект.Товары.Выгрузить(, "Актив, ТипЭксплуатации");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ПрочиеАктивы.Актив КАК Справочник.ПрочиеАктивы) КАК Актив,
		|	ВЫРАЗИТЬ(ПрочиеАктивы.ТипЭксплуатации КАК Справочник.ТипыЭксплуатации) КАК ТипЭксплуатации
		|ПОМЕСТИТЬ ПрочиеАктивы
		|ИЗ
		|	&ПрочиеАктивы КАК ПрочиеАктивы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрочиеАктивы.Актив КАК Актив
		|ИЗ
		|	ПрочиеАктивы КАК ПрочиеАктивы
		|ГДЕ
		|	(ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.СпецОснастка)
		|			ИЛИ ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Спецодежда)
		|			ИЛИ ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Инструменты)
		|			ИЛИ ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы))
		|	И ПрочиеАктивы.ТипЭксплуатации.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизации.СтопроцентныйПриВводе)";
		
	Запрос.УстановитьПараметр("ПрочиеАктивы", ПрочиеАктивы);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;  
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции


#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("МОЛ");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеПолучатель");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.Актив");
	ОбязательныеРеквизиты.Добавить("Товары.ТипЭксплуатации");
	ОбязательныеРеквизиты.Добавить("Товары.БалансоваяСтоимость");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("Актив");
	УникальныеТовары.Добавить("МОЛ");

	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	Если ТребуетсяПересчетЦен Тогда
		
		ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ТекстСообщения = НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс = НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		ЭтоФорма = ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура");
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.БалансоваяСтоимость = Окр(СтрокаТовары.БалансоваяСтоимость * КоэффициентСоотношенияКурсов, 2);
			Если ЭтоФорма Тогда
				СтрокаТовары.СуммаСписания = Окр(СтрокаТовары.СуммаСписания * КоэффициентСоотношенияКурсов, 2);
				СтрокаТовары.СуммаСписанияБезНДС = Окр(СтрокаТовары.СуммаСписанияБезНДС * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Проверка склада
	Если (Объект.СкладКомпании.Розничный) Тогда
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Номенклатура) И (НЕ ЗначениеЗаполнено(Строка.Актив) ИЛИ НЕ Строка.Актив.Номенклатура=Строка.Номенклатура) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрочиеАктивы.Ссылка КАК Актив
		|ИЗ
		|	Справочник.ПрочиеАктивы КАК ПрочиеАктивы
		|ГДЕ
		|	ПрочиеАктивы.Номенклатура = &Номенклатура";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Строка.Актив = Выборка.Актив;
			ТоварыАктивПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.МОЛ) Тогда
		Строка.МОЛ = Объект.МОЛ;
	КонецЕсли;
	
	ВывестиРасчетнуюБалансовуюСтоимостьАктива(Объект, Строка);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ВывестиРасчетнуюБалансовуюСтоимостьАктива(Объект, Строка);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ВывестиРасчетнуюБалансовуюСтоимостьАктива(Объект, Строка);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Актив" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыАктивПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.Актив) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Актив.ОсновнойТипЭксплуатации) Тогда
		Строка.ТипЭксплуатации = Строка.Актив.ОсновнойТипЭксплуатации;
		ТоварыТипЭксплуатацииПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	Если НЕ Строка.Актив.Номенклатура=Строка.Номенклатура Тогда
		Строка.Номенклатура = Строка.Актив.Номенклатура;
		ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	Если НЕ(Строка.Актив.ВидПрочегоАктива=Перечисления.ВидыПрочихАктивов.Спецодежда 
		ИЛИ Строка.Актив.ВидПрочегоАктива=Перечисления.ВидыПрочихАктивов.Спецоснастка
		ИЛИ Строка.Актив.ВидПрочегоАктива=Перечисления.ВидыПрочихАктивов.Инструменты
		ИЛИ Строка.Актив.ВидПрочегоАктива=Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы) Тогда
			Строка.Количество = 1;
	КонецЕсли;  
	
	ВывестиРасчетнуюБалансовуюСтоимостьАктива(Объект, Строка); 
	
КонецПроцедуры // ТоварыАктивПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип эксплуатации" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыТипЭксплуатацииПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЕстьРеквизит(Объект, "СпособНачисленияАмортизации", "Товары") Тогда
		Строка.СпособНачисленияАмортизации = Строка.ТипЭксплуатации.СпособНачисленияАмортизации;
	КонецЕсли;
	
	Если Строка.ТипЭксплуатации.СпособНачисленияАмортизации=Перечисления.СпособыНачисленияАмортизации.СтопроцентныйПриВводе Тогда
		Строка.СтатьяРасходовПоАмортизации = Строка.ТипЭксплуатации.СтатьяРасходовПоАмортизации;
	Иначе
		Строка.СтатьяРасходовПоАмортизации = Справочники.СтатьиДоходовИРасходов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ТоварыТипЭксплуатацииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Зарезервировано для корректного пересчета табличной части
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВводВЭксплуатацию");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	ВыборСклада		 				= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад отгрузки.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить остатками (склад отгрузки)'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа остатками
//
Функция ТоварыЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Дата = Объект.Дата;
		
	Иначе
		
		Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	МоментВремени = Новый МоментВремени(Дата);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	|			&Момент,
	|			СкладКомпании = &СкладКомпании
	|				И Номенклатура.ВидНоменклатуры = &ПрочийАктив) КАК ОстаткиТоваровКомпанииОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры.Сортировка
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ПрочийАктив", Перечисления.ВидыНоменклатуры.ПрочиеАктивы);
	Запрос.УстановитьПараметр("СкладКомпании",Объект.СкладКомпании);
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого ТекСтрока Из Объект.Товары Цикл
		ТоварыНоменклатураПриИзменении(Объект, ТекСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстатками()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВводВЭксплуатацию",
		"ПФ_MXL_ВводВЭксплуатацию",
		НСтр("ru = 'Ввод в эксплуатацию'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВводВЭксплуатацию",
		"ПФ_MXL_ОС1",
		НСтр("ru = 'ОС-1 (Акт приема-передачи ОС)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВводВЭксплуатацию",
		"ПФ_MXL_МБ7",
		НСтр("ru = 'МБ-7'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМ11",
		"ПФ_MXL_М11",
		НСтр("ru = 'М-11 (Требование-накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ВводВЭксплуатацию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ВводВЭксплуатацию",
															"ВводВЭксплуатацию",
															ПечатьВводВЭксплуатацию(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОС1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ОС1",
															НСтр("ru = 'ОС-1 (Акт приема-передачи ОС)'"),
															ПечатьОС1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_МБ7") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_МБ7",
															"МБ-7",
															ПечатьМБ7(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;													
КонецПроцедуры // Печать()

// Формирует печатную форму "МБ-7"
//
Функция ПечатьМБ7(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводВЭксплуатацию_МБ7";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Зададим параметры документа
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатацию.ПФ_MXL_МБ7");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьРазделителя 	   = Макет.ПолучитьОбласть("Разделитель");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВводВЭксплуатациюТовары.НомерСтроки КАК НомерПП,
		|	ВводВЭксплуатациюТовары.Номенклатура.Код КАК НоменклатурныйНомер,
		|	ВводВЭксплуатациюТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ВводВЭксплуатациюТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ВводВЭксплуатациюТовары.Количество КАК Количество,
		|	ВводВЭксплуатациюТовары.МОЛ КАК Сотрудник,
		|	ВводВЭксплуатациюТовары.МОЛ.ТабельныйНомер КАК ТабельныйНомер,
		|	ВводВЭксплуатациюТовары.Ссылка.Дата КАК ДатаДокумента,
		|	ВводВЭксплуатациюТовары.Актив.СрокПолезногоИспользования КАК СрокСлужбы,
		|	ВводВЭксплуатациюТовары.Актив КАК Актив
		|ИЗ
		|	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
		|ГДЕ
		|	ВводВЭксплуатациюТовары.Ссылка = &ТекущийДокумент
		|	И ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива = &ВидПрочегоАктива
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПП";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТекущийДокумент", Документ.Ссылка);
		Запрос.УстановитьПараметр("ВидПрочегоАктива", Перечисления.ВидыПрочихАктивов.Спецодежда);
		ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// выводим заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.Заголовок = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(
			Документ, "ВЕДОМОСТЬ");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, ДатаДокумента);
		ОбластьЗаголовок.Параметры.ОрганизацияПоОКПО = Документ.Организация.КодПоОКПО;
		ОбластьЗаголовок.Параметры.ДатаСоставления   = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		мМОЛ 		 = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ", "МОЛ");
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
		
		// выводим подвал
		ОбластьПодвал.Параметры.Заполнить(мМОЛ);
		ОбластьПодвал.Параметры.Заполнить(Руководитель);
		ТабДокументПодвал = Новый ТабличныйДокумент;
		ТабДокументПодвал.Вывести(ОбластьПодвал);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// выводим заголовок таблицы
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
		
		СтруктураИтоговПоСтранице = Новый Структура;
		ИтогКоличествоПоСтранице = 0;
		
		// выводим многострочную часть документа
		Для Каждого Строка Из ВыборкаСтрок Цикл
			
			ОбластьСтрока.Параметры.Заполнить(Строка);
			ОбластьСтрока.Параметры.Количество = Формат(Строка.Количество,ФорматВыводаКоличества);
	 		ОбластьСтрока.Параметры.ТоварНаименование	= Строка.Актив;
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаСтрок.Индекс(Строка) = ВыборкаСтрок.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ТабДокументПодвал);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			СтруктураИтоговПоСтранице.Вставить("ИтогКоличествоПоСтранице", ИтогКоличествоПоСтранице);
			ИтогКоличествоПоСтранице = ИтогКоличествоПоСтранице + Строка.Количество;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
		КонецЦикла; // конец многострочной части
		
		ТабличныйДокумент.Вывести(ТабДокументПодвал); // конец подвала
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьМБ7()

Функция ПолучитьДанныеДляПечатиМ11(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	// получим списываемые товары
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПартииТоваровКомпанииОбороты.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ПартииТоваровКомпанииОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	<НоменклатурныйНомер> КАК НоменклатурныйНомер,
		|	ПартииТоваровКомпанииОбороты.Номенклатура.СтавкаНДС.Ставка КАК СтавкаНДС,
		|	ПартииТоваровКомпанииОбороты.КоличествоРасход КАК Количество,
		|	ПартииТоваровКомпанииОбороты.СуммаРасход - ПартииТоваровКомпанииОбороты.СуммаНДСРасход КАК Сумма,
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпанииОбороты.КоличествоРасход = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ПартииТоваровКомпанииОбороты.СуммаРасход - ПартииТоваровКомпанииОбороты.СуммаНДСРасход)
		|					/ПартииТоваровКомпанииОбороты.КоличествоРасход 
		|	КОНЕЦ КАК Цена,
		|	ДокументТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|
		|	ДокументТовары.Ссылка.СкладКомпании.МОЛ.Должность КАК МОЛДолжностьОтправитель,
		|	ДокументТовары.Ссылка.СкладКомпании.МОЛ КАК МОЛПредставлениеОтправитель,
		|	ДокументТовары.Ссылка.МОЛ.Должность КАК МОЛДолжностьПолучатель,
		|	ДокументТовары.Ссылка.МОЛ КАК МОЛПредставлениеПолучатель
		|
		|ИЗ Документ.ВводВЭксплуатацию.Товары КАК ДокументТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании.Обороты(
		|		,
		|		,
		|		Регистратор,
		|		Номенклатура В (&СписокНоменклатуры)
		|			И ХарактеристикаНоменклатуры В (&СписокХарактеристик)
		|			И СкладКомпании = &Склад) КАК ПартииТоваровКомпанииОбороты
		|ПО ДокументТовары.Ссылка = ПартииТоваровКомпанииОбороты.Регистратор
		|	И ДокументТовары.Номенклатура = ПартииТоваровКомпанииОбороты.Номенклатура
		|	И ДокументТовары.ХарактеристикаНоменклатуры = ПартииТоваровКомпанииОбороты.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ДокументТовары.Ссылка = &Документ";
		
	РежимВыводаКодаВДокументах = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	Если РежимВыводаКодаВДокументах= "Артикул" Тогда
		СтрокаЗамены="ПартииТоваровКомпанииОбороты.Номенклатура.Артикул";
	ИначеЕсли РежимВыводаКодаВДокументах= "КодИАртикул" Тогда
		СтрокаЗамены="ПартииТоваровКомпанииОбороты.Номенклатура.Код+"" / ""+ПартииТоваровКомпанииОбороты.Номенклатура.Артикул";
	Иначе
		СтрокаЗамены="ПартииТоваровКомпанииОбороты.Номенклатура.Код";
	КонецЕсли; 
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"<НоменклатурныйНомер>",СтрокаЗамены);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СписокНоменклатуры", Объект.Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СписокХарактеристик", Объект.Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("Склад", Объект.СкладКомпании);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	ВыборкаСтрок = Запрос.Выполнить().Выгрузить();

	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ВыборкаСтрок);
	ДанныеОбъекта.Вставить("ЦенаВключаетНДС"        , Истина);
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Грузополучатель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Грузоотправитель);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель"      	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Грузоотправитель", ЗначенияСвойствОбъекта,Объект.СкладКомпании));
	ДанныеОбъекта.Вставить("Грузополучатель"       	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Грузополучатель",  ЗначенияСвойствОбъекта,Объект.ПодразделениеПолучатель));
	
	ДанныеОбъекта.Вставить("Отпустил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));

	Возврат ДанныеОбъекта;
КонецФункции

// Формирует печатную форму "ОС-1 / ОС1б"
//
Функция ПечатьОС1(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводВЭксплуатацию_ОС1";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВводВЭксплуатациюТовары.Ссылка.Дата КАК ДатаВвода,
		|	ВводВЭксплуатациюТовары.Ссылка.МОЛ КАК Ответственный,
		|	ВводВЭксплуатациюТовары.Ссылка.ПодразделениеКомпании КАК ПодразделениеОрганизации,
		|	ВводВЭксплуатациюТовары.Ссылка.СкладКомпании КАК Склад,
		|
		|	ВводВЭксплуатациюТовары.Актив КАК Актив,
		|	ВводВЭксплуатациюТовары.Актив.ДатаВыбытия КАК ДатаВыбытия,
		|	ВводВЭксплуатациюТовары.Актив.ИнвентарныйНомер КАК ИнвНомер,
		|	ВводВЭксплуатациюТовары.Актив.ПервоначальнаяСтоимость КАК НачСтоимость,
		|	ВводВЭксплуатациюТовары.Актив.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
		|	ВводВЭксплуатациюТовары.Актив.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		|	ВводВЭксплуатациюТовары.БалансоваяСтоимость КАК БалансоваяСтоимость,
		|
		|	ВводВЭксплуатациюТовары.ТипЭксплуатации.СпособНачисленияАмортизации КАК СпособАмортизации,
		|	ВводВЭксплуатациюТовары.ТипЭксплуатации.АмортизационнаяГруппа КАК АмортизационнаяГруппа
		|ИЗ
		|	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
		|ГДЕ
		|	ВводВЭксплуатациюТовары.Ссылка = &Ссылка";
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		ВыборкаАктивы = Запрос.Выполнить().Выбрать();
		ВыборкаАктивы.Следующий();
		
		ОрганизацияСдатчик    = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ОрганизацияСдатчик", Документ, Документ.Организация);
		ОрганизацияПолучатель = Документ.Организация;
		СдатчикНашаОрганизация = (ОрганизацияСдатчик = ОрганизацияПолучатель);
		
		// Чтение значение для адреса
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		СтруктураПредставления = Новый Структура;
		СтруктураПредставления.Вставить("ТелефонРабочий", "тел.: ");
		СтруктураПредставления.Вставить("АдресЮридический", "");
		СтруктураПредставления.Вставить("Факс",             "Факс ");
		АдресТелефоныСдатчика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОрганизацияСдатчик,
			СтруктураПредставления,
			ДополнительныеПараметры
		);
		
		Если СдатчикНашаОрганизация Тогда
			АдресТелефоныПолучателя = АдресТелефоныСдатчика;
		Иначе
			ДополнительныеПараметры.Удалить("ПодразделениеКомпании");
			ДополнительныеПараметры.ИспользоватьКИПодразделения = Ложь;
			АдресТелефоныПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				ОрганизацияПолучатель,
				СтруктураПредставления,
				ДополнительныеПараметры
			);
		КонецЕсли;
		
		// Получим ответственных
		Руководитель 			= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель","Руководитель");
		ГлавныйБухгалтер  		= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ГлавныйБухгалтер","ГлавныйБухгалтер");
		мМОЛ					= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"МОЛ","МОЛ");
		ПодразделениеСдатчика	= ?(СдатчикНашаОрганизация,УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, Документ.Дата),"");
		Отпустил 				= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Отпустил","Отпустил");
		Получил  				= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Получил","Получил");
		// Получим членов комиссии
		ПредседательКомиссии 	= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ПредседательКомиссии","ПредседательКомиссии");
		ЧленКомиссии1 			= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ЧленКомиссии1","ЧленКомиссии1");
		ЧленКомиссии2 			= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ЧленКомиссии2","ЧленКомиссии2");
		
		Если ВыборкаАктивы.Количество() = 1 Тогда //актив один - печать ОС-1
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатацию.ПФ_MXL_ОС1");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			
			ОбластьМакета.Параметры.РуководительСдатчикПредставление    	= ?(СдатчикНашаОрганизация,Руководитель.РуководительПредставление,"");
			ОбластьМакета.Параметры.РуководительСдатчикДолжность   		 	= ?(СдатчикНашаОрганизация,Руководитель.РуководительДолжность,"");		
			ОбластьМакета.Параметры.РуководительСдатчик				    	= ?(СдатчикНашаОрганизация,Руководитель.Руководитель,"");		
			ОбластьМакета.Параметры.РуководительПолучатель					= Руководитель.Руководитель;		
			ОбластьМакета.Параметры.РуководительПолучательПредставление  	= Руководитель.РуководительПредставление;
			ОбластьМакета.Параметры.РуководительПолучательДолжность	     	= Руководитель.РуководительДолжность;
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчикаПредставление   = ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтерПредставление,"");
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчика				= ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтер,"");		
			
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			ОбластьМакета.Параметры.Заполнить(мМОЛ);
			ОбластьМакета.Параметры.Заполнить(ПредседательКомиссии);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии1);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии2);
			ОбластьМакета.Параметры.Заполнить(Отпустил);
			ОбластьМакета.Параметры.Заполнить(Получил);
			
			// сдатчик номенклатуры
			ОбластьМакета.Параметры.ПредставлениеОрганизацииСдатчика	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияСдатчик, Документ.Дата);
			ОбластьМакета.Параметры.ОрганизацияСдатчик					= ОрганизацияСдатчик;
			ОбластьМакета.Параметры.АдресСдатчика						= АдресТелефоныСдатчика;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияСдатчик);
			ОбластьМакета.Параметры.РеквизитыСдатчика					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеСдатчика				= ПодразделениеСдатчика;
			
			// получатель актива
			ОбластьМакета.Параметры.ПредставлениеОрганизацииПолучателя	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияПолучатель, Документ.Дата);
			ОбластьМакета.Параметры.ОрганизацияПолучатель				= ОрганизацияПолучатель;
			ОбластьМакета.Параметры.АдресПолучателя						= АдресТелефоныПолучателя;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияПолучатель);
			ОбластьМакета.Параметры.РеквизитыПолучателя					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеПолучателя				= Документ.ПодразделениеПолучатель;
			
			ОбластьМакета.Параметры.КодПоОКПОСдатчик    = ОрганизацияСдатчик.КодПоОКПО;
			ОбластьМакета.Параметры.КодПоОКПОПолучатель = ОрганизацияПолучатель.КодПоОКПО;
			ОбластьМакета.Параметры.ДатаВвода    = ВыборкаАктивы.ДатаВвода;
			
			ОбластьМакета.Параметры.ДатаПередачи = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаПередачи", Документ, ВыборкаАктивы.ДатаВыбытия);
			ОбластьМакета.Параметры.НомерГруппы		= ВыборкаАктивы.АмортизационнаяГруппа;
			ОбластьМакета.Параметры.ИнвНомер		= ВыборкаАктивы.ИнвНомер;
			ОбластьМакета.Параметры.НаименованиеОС	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ВыборкаАктивы.Актив);
			ОбластьМакета.Параметры.КарточкаОС		= ВыборкаАктивы.Актив;
			ОбластьМакета.Параметры.НомерАкта = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
			ОбластьМакета.Параметры.ДатаАкта  = Документ.Дата;
			ОбластьМакета.Параметры.ДатаДок   = Документ.Дата;
			
			ОбластьМакета.Параметры.СрокЭкспл            = 0;
			ОбластьМакета.Параметры.СрокПолезнИспПриПер  = 0;
			ОбластьМакета.Параметры.НачАмортизация       = Формат(0,ФорматВыводаСуммы);
			ОбластьМакета.Параметры.ОстСтоимость         = Формат(0,ФорматВыводаСуммы);
			ОбластьМакета.Параметры.ЦенаПродажи          = Формат(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.БалансоваяСтоимость, Документ.ВалютаДокумента, Документ.КурсДокумента, 
																	Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата),ФорматВыводаСуммы);
			ОбластьМакета.Параметры.НачСтоимость         = Формат(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.НачСтоимость, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), 
																	?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), Документ.Дата, Документ.КурсВалютыУпр), 
																	Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата),ФорматВыводаСуммы);
			ОбластьМакета.Параметры.СрокПолезнИспПриПост = ВыборкаАктивы.СрокПолезногоИспользования;
			ОбластьМакета.Параметры.СпособАмортизации    = ВыборкаАктивы.СпособАмортизации;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		
		Иначе //активов много - групповая печать (ОС-1б)
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатацию.ПФ_MXL_ОС1б");
			
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка1");
			
			ОбластьМакета.Параметры.РуководительСдатчикПредставление     = ?(СдатчикНашаОрганизация,Руководитель.РуководительПредставление,"");
			ОбластьМакета.Параметры.РуководительСдатчикДолжность   		 = ?(СдатчикНашаОрганизация,Руководитель.РуководительДолжность,"");		
			ОбластьМакета.Параметры.РуководительСдатчик				     = ?(СдатчикНашаОрганизация,Руководитель.Руководитель,"");		
			ОбластьМакета.Параметры.РуководительПолучатель				 = Руководитель.Руководитель;		
			ОбластьМакета.Параметры.РуководительПолучательПредставление  = Руководитель.РуководительПредставление;
			ОбластьМакета.Параметры.РуководительПолучательДолжность	     = Руководитель.РуководительДолжность;
			
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			ОбластьМакета.Параметры.Заполнить(мМОЛ);
			
			// сдатчик номенклатуры
			ОбластьМакета.Параметры.ПредставлениеОрганизацииСдатчика	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияСдатчик, Документ.Дата);
			ОбластьМакета.Параметры.ОрганизацияСдатчик					= ОрганизацияСдатчик;
			ОбластьМакета.Параметры.АдресСдатчика						= АдресТелефоныСдатчика;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияСдатчик);
			ОбластьМакета.Параметры.РеквизитыСдатчика					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеСдатчика				= ПодразделениеСдатчика;
			
			// получатель актива
			ОбластьМакета.Параметры.ПредставлениеОрганизацииПолучателя	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияПолучатель, Документ.Дата);
			ОбластьМакета.Параметры.ОрганизацияПолучатель				= ОрганизацияПолучатель;
			ОбластьМакета.Параметры.АдресПолучателя						= АдресТелефоныПолучателя;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияПолучатель);
			ОбластьМакета.Параметры.РеквизитыПолучателя					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеПолучателя				= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеПолучатель);
			
			ОбластьМакета.Параметры.КодОКПОСдатчик          = ОрганизацияСдатчик.КодПоОКПО;
			ОбластьМакета.Параметры.КодОКПОПолучатель       = ОрганизацияПолучатель.КодПоОКПО;		
			ОбластьМакета.Параметры.ДатаАктаВВода = ВыборкаАктивы.ДатаВвода;
			ОбластьМакета.Параметры.ДатаПередачи  = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаПередачи", Документ, ВыборкаАктивы.ДатаВыбытия);
			ОбластьМакета.Параметры.НомерДок      = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
			ОбластьМакета.Параметры.ДатаДок       = Документ.Дата;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка2");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка2");
			НомСтр = 1;
			ВыборкаАктивы.Сбросить();
			Пока ВыборкаАктивы.Следующий() Цикл
				ОбластьМакета.Параметры.НомерСтроки		= НомСтр;
				ОбластьМакета.Параметры.НаименованиеОС	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ВыборкаАктивы.Актив);
				ОбластьМакета.Параметры.КарточкаОС		= ВыборкаАктивы.Актив;
				ОбластьМакета.Параметры.НомерГруппы		= ВыборкаАктивы.АмортизационнаяГруппа;
				ОбластьМакета.Параметры.ИнвНомер		= ВыборкаАктивы.ИнвНомер;
				ОбластьМакета.Параметры.ДатаВвода		= ВыборкаАктивы.ДатаВвода;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				НомСтр = НомСтр + 1;
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка2П");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал2");
			ОбластьМакета.Параметры.Заполнить(ПредседательКомиссии);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии1);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии2);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка3");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка3");
			ИтогЦенаПродажи  = 0;
			ИтогНачСтоимость = 0;
			ВыборкаАктивы.Сбросить();
			Пока ВыборкаАктивы.Следующий() Цикл
				ЦенаПродажи  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.БалансоваяСтоимость, Документ.ВалютаДокумента, Документ.КурсДокумента, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата);
				НачСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.НачСтоимость, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), 
											Документ.Дата, Документ.КурсВалютыУпр), Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата);
				
				ОбластьМакета.Параметры.НачАмортизация       = Формат(0,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ОстСтоимость         = Формат(0,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ЦенаПродажи          = Формат(ЦенаПродажи,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.НачСтоимость         = Формат(НачСтоимость,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.СрокПолезнИспПриПост = ВыборкаАктивы.СрокПолезногоИспользования;
				ОбластьМакета.Параметры.СпособАмортизации    = ВыборкаАктивы.СпособАмортизации;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ИтогЦенаПродажи  = ИтогЦенаПродажи  + ЦенаПродажи;
				ИтогНачСтоимость = ИтогНачСтоимость + НачСтоимость;
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка3П");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал3");
			ОбластьМакета.Параметры.ИтогЦенаПродажи  = Формат(ИтогЦенаПродажи,ФорматВыводаСуммы);
			ОбластьМакета.Параметры.ИтогНачСтоимость = Формат(ИтогНачСтоимость,ФорматВыводаСуммы); 
			ОбластьМакета.Параметры.Заполнить(Отпустил);
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчикаПредставление    = ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтерПредставление,"");
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчика				 = ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтер,"");		
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка4");
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			ОбластьМакета.Параметры.Заполнить(мМОЛ);
			ОбластьМакета.Параметры.Заполнить(Получил);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		КонецЕсли;
		
		// параметры табличного документа
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		ТабличныйДокумент.ОтображатьСетку     = Ложь;
		ТабличныйДокумент.ТолькоПросмотр      = Истина;		
				
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьОС1()

// Формирует печатную форму "ВводВЭксплуатацию"
//
Функция ПечатьВводВЭксплуатацию(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводВЭксплуатацию_ВводВЭксплуатацию";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатацию.ПФ_MXL_ВводВЭксплуатацию");

		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, ДатаДокумента);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		ОбластьЗаголовок.Параметры.ПредставлениеМОЛ =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.МОЛ);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделенияПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеПолучатель, ДатаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,БалансоваяСтоимость", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			ОбластьСтрока.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
			ОбластьСтрока.Параметры.Актив = СтрокаТЧ.Актив;
			ОбластьСтрока.Параметры.АктивНаименование =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Актив);
			ОбластьСтрока.Параметры.Код = СтрокаТЧ.Актив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.ТипЭксплуатации = СтрокаТЧ.ТипЭксплуатации;
			ОбластьСтрока.Параметры.БалансоваяСтоимость = Формат(СтрокаТЧ.БалансоваяСтоимость, ФорматВыводаСуммы);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			// Инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,БалансоваяСтоимость", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("БалансоваяСтоимость");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
	
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьВводВЭксплуатацию()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВЭксплуатациюТовары.Актив КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ВводВЭксплуатациюТовары.НомерСтроки) КАК Порядок,
	|	СУММА(1) КАК Количество,
	|	СУММА(0) КАК Цена,
	|	МАКСИМУМ(ВводВЭксплуатациюТовары.Актив.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(0) КАК СуммаНДС
	|ИЗ
	|	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
	|ГДЕ
	|	ВводВЭксплуатациюТовары.Ссылка В(&МассивДокументов)
	|	И ВводВЭксплуатациюТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводВЭксплуатациюТовары.Актив,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВводВЭксплуатацию.Организация КАК Организация,
	|	ВводВЭксплуатацию.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ВводВЭксплуатацию.СкладКомпании КАК СкладКомпании,
	|	ВводВЭксплуатацию.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ВводВЭксплуатацию КАК ВводВЭксплуатацию
	|ГДЕ
	|	ВводВЭксплуатацию.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	Активы = Товары.ВыгрузитьКолонку("Номенклатура");
	ПараметрыЦены = Новый Структура;
	ПараметрыЦены.Вставить("Актив", Активы);
	ТаблицаАктивов = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(ПараметрыЦены);
	УсловиеПоиска = Новый Структура("Номенклатура");
	Для Каждого ТекущаяСтрока Из ТаблицаАктивов Цикл
		УсловиеПоиска.Номенклатура = ТекущаяСтрока.Актив;
		НайденныеСтроки = Товары.НайтиСтроки(УсловиеПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Цена = ТекущаяСтрока.БалансоваяСтоимостьРегл - ТекущаяСтрока.АмортизацияРегл;
			Строка.СуммаНДС = Окр(Строка.Цена * Строка.СтавкаНДС.Ставка / 100, 2);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВЭксплуатациюТовары.Актив КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ВводВЭксплуатациюТовары.НомерСтроки) КАК Порядок,
	|	СУММА(1) КАК Количество,
	|	СУММА(0) КАК Цена,
	|	МАКСИМУМ(ВводВЭксплуатациюТовары.Актив.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(0) КАК СуммаНДС
	|ИЗ
	|	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
	|ГДЕ
	|	ВводВЭксплуатациюТовары.Ссылка В(&МассивДокументов)
	|	И ВводВЭксплуатациюТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводВЭксплуатациюТовары.Актив,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВводВЭксплуатацию.Организация КАК Организация,
	|	ВводВЭксплуатацию.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ВводВЭксплуатацию.СкладКомпании КАК СкладКомпании,
	|	ВводВЭксплуатацию.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ВводВЭксплуатацию КАК ВводВЭксплуатацию
	|ГДЕ
	|	ВводВЭксплуатацию.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	Активы = Товары.ВыгрузитьКолонку("Номенклатура");
	ПараметрыЦены = Новый Структура;
	ПараметрыЦены.Вставить("Актив", Активы);
	ТаблицаАктивов = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(ПараметрыЦены);
	УсловиеПоиска = Новый Структура("Номенклатура");
	Для Каждого ТекущаяСтрока Из ТаблицаАктивов Цикл
		УсловиеПоиска.Номенклатура = ТекущаяСтрока.Актив;
		НайденныеСтроки = Товары.НайтиСтроки(УсловиеПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Цена = ТекущаяСтрока.БалансоваяСтоимостьРегл - ТекущаяСтрока.АмортизацияРегл;
			Строка.СуммаНДС = Окр(Строка.Цена * Строка.СтавкаНДС.Ставка / 100, 2);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияАктивов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОбслуживаниеАктива);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеАктивов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СписаниеАктивов);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВводВЭксплуатацию);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
