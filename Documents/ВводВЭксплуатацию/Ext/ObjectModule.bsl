// Модуль документа "Ввод в эксплуатацию"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) =  Тип("ДокументСсылка.ПоступлениеТоваров") И СкладКомпании.Розничный Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения количества для активов c уникальными номерами
	ОбработкаТабличнойЧастиАктивы.ПроверитьКоличествоУникальныхНомеров(ЭтотОбъект, Отказ, "Товары", "Актив");
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);

КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим реквизиты СуммаСписания и СуммаСписанияБезНДС.
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "", Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеПолучательБаланса = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеПолучатель, Дата);
	БалансовыеПодразделенияНеРавны = ПодразделениеСклад<>ПодразделениеПолучательБаланса;
	
	// спишем товар со склада
	РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект).Выгрузить();
	РезультатЗапросаПоТоварамСвернутый = РезультатЗапросаПоТоварам.Скопировать();
	РезультатЗапросаПоТоварамСвернутый.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании = СкладКомпании;
	НаборЗаписейОстатки.ДвиженияПоРознице=Ложь;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамСвернутый;
	Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	
	// закинем в "Активы в эксплуатации"
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеПолучатель;
	НаборЗаписейЭксплуатация.ЭтоПервыйВвод             = Истина;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоТоварам;
	Отказ = НЕ НаборЗаписейЭксплуатация.Приход() ИЛИ Отказ;
	
	ДополнительныеСвойства.Вставить(
		"БалансоваяСтоимостьУпр",
		Движения.ПрочиеАктивыВЭксплуатации.Итог("БалансоваяСтоимостьУпр")
	);
		// проведем партии товаров
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	Если ВедетсяБалансПоПодразделению Тогда
		// БАЛАНС: Возможно что подразделения склада и получателя не равны в этом случае
		// увеличиваем доход на подразделении получателе.
		Если БалансовыеПодразделенияНеРавны Тогда
			// Получим себестоимости по прочим активам
			ПрочиеАктивыВЭксплуатации=Движения.ПрочиеАктивыВЭксплуатации;
			СебестоимостьПрочиеАктивыВЭксплуатации = ПрочиеАктивыВЭксплуатации.Итог("БалансоваяСтоимостьУпр");
			// Увеличиваем доход
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение  = ПодразделениеПолучательБаланса;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			НаборЗаписейДиР.Доход = СебестоимостьПрочиеАктивыВЭксплуатации;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// Если тут же начисляется амортизация (100 процентный способ начисления), начисляем расходы.
	Если НаборЗаписейЭксплуатация.СуммаАмортизацииУпр100 > 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		РезультатЗапросПоСтатьям = ПолучитьРезультатЗапросаПоСтатьям(ЭтотОбъект).Выгрузить();
		Для Каждого Строка Из РезультатЗапросПоСтатьям Цикл
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Строка.СтатьяРасходовПоАмортизации;
			НаборЗаписейДиР.Подразделение          = ПодразделениеПолучатель;
			НаборЗаписейДиР.ВУпрВалюте             = Ложь;
			НаборЗаписейДиР.Расход                 = Строка.БалансоваяСтоимость;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним реквизиты СуммаСписания и СуммаСписанияБезНДС.
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "");
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, НСтр("ru = 'Ввод в эксплуатацию на основании поступления товаров комиссии невозможен.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < Товары.Количество() Цикл
		Если Товары[Сч].Количество = 0 Тогда
			Товары.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОстатковПоступления = Новый ТаблицаЗначений;
	ТаблицаОстатковПоступления.Колонки.Добавить("Номенклатура");
	ТаблицаОстатковПоступления.Колонки.Добавить("Количество");
	ТаблицаОстатковПоступления.Колонки.Добавить("Актив");
	ТаблицаОстатковПоступления.Колонки.Добавить("Характеристика");
	ТаблицаОстатковПоступления.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаОстатковПоступления.Колонки.Добавить("Коэффициент");
	
	ВремЯчейка = Неопределено;
	
	Для каждого ТекСтрока Из Товары Цикл
		
		КоличествоОстаток 	= ТекСтрока.Количество - 1;
		ВремЯчейка 			= ТекСтрока.Ячейка;
		Документы.ВводВЭксплуатацию.ТоварыНоменклатураПриИзменении(ЭтотОбъект, ТекСтрока, ДополнительныеСвойства.ПараметрыДействия);
		ТекСтрока.Ячейка 	= ВремЯчейка;
		
		Если НЕ ТекСтрока.Актив.Пустая() И КоличествоОстаток > 0 Тогда
			
			Если НЕ (ТекСтрока.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецодежда 
				ИЛИ ТекСтрока.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка 
				ИЛИ ТекСтрока.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Инструменты
				ИЛИ ТекСтрока.Актив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы) Тогда
				
				НоваяСтрока = ТаблицаОстатковПоступления.Добавить();
				НоваяСтрока.Номенклатура     = ТекСтрока.Номенклатура;
				НоваяСтрока.Количество       = КоличествоОстаток;
				НоваяСтрока.Актив            = ТекСтрока.Актив;
				НоваяСтрока.Характеристика   = ТекСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.Коэффициент      = ТекСтрока.Коэффициент;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаОстатковПоступления Цикл
		
		ПоискСтроки = Товары.Найти(ТекСтрока.Актив);
		НоваяСтрока = Товары.Вставить(ПоискСтроки.НомерСтроки);
		НоваяСтрока.Номенклатура               = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество                 = ТекСтрока.Количество;
		НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрока.Характеристика;
		НоваяСтрока.Коэффициент                = ТекСтрока.Коэффициент;
		НоваяСтрока.ЕдиницаИзмерения           = ТекСтрока.ЕдиницаИзмерения;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Авансовый отчет"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АвансовыйОтчет(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по поступлению
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_АвансовыйОтчет()

// Производит заполнение объекта на основании документа "Перемещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по поступлению
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеТоваров()

// Производит заполнение объекта на основании справочника "Прочие активы"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПрочиеАктивы(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Товары.Добавить();
	СтрокаТабличнойЧасти.Актив = ДанныеЗаполнения.Ссылка;
	Документы.ВводВЭксплуатацию.ТоварыАктивПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПрочиеАктивы()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
// Режим - число, 0-возвращает излишки, 1-недостачи.
//
// Параметры:
//  ШапкаДокумента - выборка по шапке документа.
//
Функция ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента)
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВводВЭксплуатациюТовары.Номенклатура,
	               |	ВводВЭксплуатациюТовары.ХарактеристикаНоменклатуры,
	               |	ВводВЭксплуатациюТовары.Количество * ВводВЭксплуатациюТовары.Коэффициент КАК Количество,
	               |	0 КАК Резерв,
	               |	ВЫБОР
	               |		КОГДА ВводВЭксплуатациюТовары.МОЛ = &ПустойМОЛ
	               |			ТОГДА ВводВЭксплуатациюТовары.Ссылка.МОЛ
	               |		ИНАЧЕ ВводВЭксплуатациюТовары.МОЛ
	               |	КОНЕЦ КАК МОЛ,
	               |	ВводВЭксплуатациюТовары.Актив КАК Актив,
	               |	ВводВЭксплуатациюТовары.ТипЭксплуатации КАК ТипЭксплуатации,
	               |	ВводВЭксплуатациюТовары.БалансоваяСтоимость КАК БалансоваяСтоимость,
	               |	0 КАК Амортизация,
	               |	0 КАК СуммаОбслуживания,
	               |	ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива КАК ВидПрочегоАктива
	               |ИЗ
	               |	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
	               |ГДЕ
	               |	ВводВЭксплуатациюТовары.Ссылка = &Ссылка";
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустойМОЛ", Справочники.Сотрудники.ПустаяСсылка());
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// Возвращает суммы амортизации сгруппированные по
// статьям доходов и расходов из ТЧ Товары.
//
// Возвращаемое значение:
// возвращает таблицу значений
Функция ПолучитьРезультатЗапросаПоСтатьям(ШапкаДокумента)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации = &ПустаяСсылка
	               |			ТОГДА &Амортизация
	               |		ИНАЧЕ ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации
	               |	КОНЕЦ КАК СтатьяРасходовПоАмортизации,
	               |	СУММА(ВводВЭксплуатациюТовары.БалансоваяСтоимость) КАК БалансоваяСтоимость
	               |ИЗ
	               |	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
	               |ГДЕ
	               |	ВводВЭксплуатациюТовары.Ссылка = &Ссылка
	               |	И ВводВЭксплуатациюТовары.ТипЭксплуатации.СпособНачисленияАмортизации = &СпособНачисления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации = &ПустаяСсылка
	               |			ТОГДА &Амортизация
	               |		ИНАЧЕ ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации
	               |	КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("СпособНачисления", Перечисления.СпособыНачисленияАмортизации.СтопроцентныйПриВводе);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.СтатьиДоходовИРасходов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Амортизация", Справочники.СтатьиДоходовИРасходов.Амортизация);
	
	Возврат Запрос.Выполнить()
КонецФункции //ПолучитьРезультатЗапросаПоСтатьям()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все в порядке, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Проверим, если подразделение проводиться по партиям "отложено", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеПолучательБаланса = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеПолучатель, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = ПодразделениеСклад<>ПодразделениеПолучательБаланса;
	
	// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
	РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента);
	РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	РезультатЗапросаПоТоварамСвернутый = РезультатЗапросаПоТоварам.Скопировать();
	РезультатЗапросаПоТоварамСвернутый.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");
	
	// списываем с партий
	НаборЗаписейПартии                           = Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейПартии.ШапкаДокумента			 = ШапкаДокумента;
	НаборЗаписейПартии.СкладКомпании             = ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация				 = ШапкаДокумента.Организация;
	НаборЗаписейПартии.СтатусПартии              = Перечисления.СтатусыПартий.ТоварКупленный;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамСвернутый;
	Отказ = НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	
	Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
		// БАЛАНС: Возможно что подразделения склада и получателя не равны в этом случае
		// уменьшаем доход на подразделении склада.
		
		// Получим себестоимости по партиям
		ПартииТоваровКомпании = Движения.ПартииТоваровКомпании;
		СебестоимостьПартий = ПартииТоваровКомпании.Итог("СуммаУпр");
		// уменьшаем доход
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.Подразделение  = ПодразделениеСклад;
		НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте = Истина;
		НаборЗаписейДиР.Доход = СебестоимостьПартий;
		Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
		
	Иначе
		// Доходы и расходы (по отклонению списания товаров от ввода активов)
		
		// БАЛАНС: Движение по отклонению списания товаров от ввода активов делаем 
		// в случае, если способ ведения баланса - не ведется по подразделениям.
		
		ИтогБалансоваяСтоимостьУпр = ДополнительныеСвойства.БалансоваяСтоимостьУпр;
		ИтогСписаннаяСтоимостьУпр = НаборЗаписейПартии.Итог("СуммаУпр");
		
		Если Окр(УправлениеДиалогомСервер.ПолучитьМодульЧисла(ИтогБалансоваяСтоимостьУпр - ИтогСписаннаяСтоимостьУпр), 2, РежимОкругления.Окр15как20) >= 0.01 Тогда
			НаборЗаписейДиР                = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ОтклонениеСтоимостиАктиваПриВводеВЭксплуатацию;
			                 			
			// В случае, если ведется баланс по подразделению, передадим подразделение соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			
			НаборЗаписейДиР.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если ИтогБалансоваяСтоимостьУпр > ИтогСписаннаяСтоимостьУпр Тогда
				НаборЗаписейДиР.Доход  = ИтогБалансоваяСтоимостьУпр - ИтогСписаннаяСтоимостьУпр;
			Иначе
				НаборЗаписейДиР.Расход = ИтогСписаннаяСтоимостьУпр - ИтогБалансоваяСтоимостьУпр;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда НаборЗаписейПартии.Записать(); КонецЕсли; 	
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	// Все ОК
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
