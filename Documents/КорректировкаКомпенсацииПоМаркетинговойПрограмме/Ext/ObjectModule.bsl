// Модуль объекта документа "Корректировка компенсации по маркетинговой программе".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
			ЭтотОбъект,
			ДанныеЗаполнения,
			ТекстЗаполнения,
			СтандартнаяОбработка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// запись суммовых показателей компенсации
	РеквизитСуммы = Неопределено;
	Если КорректировкаОтвета Тогда
		РеквизитСуммы = "Получено";
	Иначе
		РеквизитСуммы = "Заявлено";
	КонецЕсли;
	
	Если РеквизитСуммы <> Неопределено Тогда
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Дата);
		КурсВалютыРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		Движения.КомпенсацииПоМаркетинговымПрограммам.Записывать = Истина;
		Для Каждого Строка Из СоставКомпенсации Цикл
			Запись = Движения.КомпенсацииПоМаркетинговымПрограммам.Добавить();
			Запись.Регистратор = Ссылка;
			Запись.Период = Дата;
			Запись.Контрагент = Контрагент;
			Запись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			Запись.Источник = Строка.Источник;
			Запись.Автомобиль = Строка.Автомобиль;
			Запись.МаркетинговаяПрограмма = Строка.МаркетинговаяПрограмма;
			
			СуммаВВалютеДокумента = ?(Строка.Активность, Строка.СуммаКорректировки - Строка.Сумма, Строка.Сумма);
			
			Запись[РеквизитСуммы] = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаВВалютеДокумента,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаРегл,
				КурсВалютыРегл
			);
			
			Запись[РеквизитСуммы + "Упр"] = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаВВалютеДокумента,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаУпр,
				КурсВалютыУпр
			);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоследнийДокумент(ДанныеЗаполнения)
	ТекущийДокумент = ДанныеЗаполнения; НайденыйДокумент = Неопределено;
	
	Пока СледующаяКорректировка(ТекущийДокумент, НайденыйДокумент) Цикл
		ТекущийДокумент = НайденыйДокумент;
	КонецЦикла;
	
	Возврат Новый Структура("Документ,Тип", ТекущийДокумент, ТипЗнч(ТекущийДокумент));
КонецФункции

Функция СледующаяКорректировка(ТекущийДокумент, НайденыйДокумент)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаКомпенсацииПоМаркетинговойПрограмме"
	);
	
	Запрос.УстановитьПараметр("Основание", ТекущийДокумент);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(); Выборка.Следующий();
	НайденыйДокумент = Выборка.Документ;
	
	Возврат Истина;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заявка на компенсацию по маркетинговой программе"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаКомпенсациюПоМаркетинговойПрограмме(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// получим последний документ корректировки
	ДанныеПоследнегоДокумента = ПоследнийДокумент(ДанныеЗаполнения);
	Если ДанныеПоследнегоДокумента.Тип = Тип("ДокументСсылка.КорректировкаКомпенсацииПоМаркетинговойПрограмме") Тогда
		ОбработкаЗаполнения_КорректировкаКомпенсацииПоМаркетинговойПрограмме(
			ДанныеПоследнегоДокумента.Документ,
			ТекстЗаполнения,
			СтандартнаяОбработка
		);
	Иначе
		КорректировкаОтвета = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ХозОперация") =
			Справочники.ХозОперации.ОтветДистрибьютораНаКомпенсациюПоМаркетинговойПрограмме);
		
		Для Каждого Строка Из СоставКомпенсации Цикл
			Строка.Активность = Истина;
			Строка.СуммаКорректировки = Строка.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Корректировка компенсации по маркетинговой программе"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаКомпенсацииПоМаркетинговойПрограмме(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ДанныеПоследнегоДокумента = ПоследнийДокумент(ДанныеЗаполнения);
	Если ДанныеЗаполнения = ДанныеПоследнегоДокумента.Документ Тогда
		Для Каждого Строка Из СоставКомпенсации Цикл
			Строка.Активность = Истина;
			Строка.Сумма = Строка.СуммаКорректировки;
		КонецЦикла;
	Иначе
		ОбработкаЗаполнения_КорректировкаКомпенсацииПоМаркетинговойПрограмме(
			ДанныеПоследнегоДокумента.Документ,
			ТекстЗаполнения,
			СтандартнаяОбработка
		);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
