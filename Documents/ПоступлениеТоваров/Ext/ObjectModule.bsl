// Модуль объекта документа "Поступление товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует движения документа по партионным регистрам.
//
// Параметры:
//  Режим           - РежимПроведенияДокумента - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ДокументСсылка.ПоступлениеТоваров - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Булево - Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// Получим шапку документа.
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		ПолучитьЗначениеПараметраСтруктуры(
			ДополнительныеСвойства,
			"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов));
			
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
			ЭтотОбъект,
			ШапкаДокумента);
			
		УсловиеОтбора = Новый Структура;
		УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
		УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
		СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
			РасчетыСКонтрагентами,
			УсловиеОтбора);
	КонецЕсли;
	
	// Посчитаем суммы товаров и услуг.
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=&Услуга И ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&НаДоходыРасходы ТОГДА &Услуга ИНАЧЕ &Товар КОНЕЦ КАК ВидНоменклатуры,
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=&Услуга ТОГДА ДокументТовары.Номенклатура.СтатьяДопРасходов ИНАЧЕ NULL КОНЕЦ КАК СтатьяДопРасходов,
	|	СУММА(ДокументТовары.СуммаВсего) КАК СуммаВсего
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары 	КАК ДокументТовары
	|
	|ГДЕ  
	|	ДокументТовары.Ссылка = &ДокументСсылка И ДокументТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=&Услуга И ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&НаДоходыРасходы ТОГДА &Услуга ИНАЧЕ &Товар КОНЕЦ,
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=&Услуга ТОГДА ДокументТовары.Номенклатура.СтатьяДопРасходов ИНАЧЕ NULL КОНЕЦ
	|
	|ИТОГИ ПО ВидНоменклатуры
	|");
	Запрос.УстановитьПараметр("ДокументСсылка",ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("Товар",Перечисления.ВидыНоменклатуры.Товар);
	Запрос.УстановитьПараметр("НаДоходыРасходы",Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы);
	ДеревоДоходовИРасходов=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Перезапишем сумму с учетом расчетов с контрагентами
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		СтрокаТоваров = ДеревоДоходовИРасходов.Строки.Добавить();
		СтрокаТоваров.СуммаВсего = СуммаДокумента - ДеревоДоходовИРасходов.Строки.Итог("СуммаВсего");
		
		Если ХозОперация <> Справочники.ХозОперации.ПоступлениеТоваровКомиссия
			И ХозОперация <> Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
			ОбработкаСобытийДокументаСервер.РаспределитьСуммуПоТаблице(
				СуммыПоРасчетамСКонтрагентом.СуммаУпр,
				ДеревоДоходовИРасходов.Строки,
				"СуммаВсего");
				
			ДеревоДоходовИРасходов.Строки.Удалить(СтрокаТоваров);
			
			Для Каждого СтрокаВидаНоменклатуры Из ДеревоДоходовИРасходов.Строки Цикл
				ОбработкаСобытийДокументаСервер.РаспределитьСуммуПоТаблице(
					СтрокаВидаНоменклатуры.СуммаВсего,
					СтрокаВидаНоменклатуры.Строки,
					"СуммаВсего");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		НайденнаяСтрокаТоваров=ДеревоДоходовИРасходов.Строки.Найти(Перечисления.ВидыНоменклатуры.Товар,"ВидНоменклатуры");
		НайденнаяСтрокаУслуг=ДеревоДоходовИРасходов.Строки.Найти(Перечисления.ВидыНоменклатуры.Услуга,"ВидНоменклатуры");
		Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ПоступлениеТоваровКомиссия 
			И ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ПоступлениеБезвозмездное
			И (НайденнаяСтрокаТоваров<>Неопределено 
			ИЛИ НайденнаяСтрокаУслуг<>Неопределено) Тогда
			// Доходы и расходы на себестоимость не оприходованных партий
			СуммаВсего=?(НайденнаяСтрокаТоваров<>Неопределено,НайденнаяСтрокаТоваров.СуммаВсего,0)+?(НайденнаяСтрокаУслуг<>Неопределено,НайденнаяСтрокаУслуг.СуммаВсего,0);
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДоходыИРасходы.Расход = СуммаВсего;
			НаборЗаписейДоходыИРасходы.Приход();
		КонецЕсли;
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// Определим необходимость формирования корректирующих проводок.
	
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокТовары.СтавкаНДС КАК СтавкаНДС,
		|	ДокТовары.ГТД КАК ГТД,
		|	СУММА(ДокТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ДокТовары.Сумма) КАК Сумма,
		|	СУММА(ДокТовары.СуммаВсего) КАК СуммаВсего,
		|	СУММА(ДокТовары.Номенклатура.Вес * ДокТовары.Количество) КАК Вес,
		|	СУММА(ДокТовары.КоличествоБазовое) КАК Количество,
		|	ДокТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ДокТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК ДокТовары
		|ГДЕ
		|	ДокТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокТовары.Номенклатура,
		|	ДокТовары.Номенклатура.ВидНоменклатуры,
		|	ДокТовары.ХарактеристикаНоменклатуры,
		|	ДокТовары.ГТД,
		|	ДокТовары.СтавкаНДС";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
	НаборЗаписейПартии.ЕстьСтавкаНДС=Истина;
	Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
	Иначе
		НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
	КонецЕсли;
	НаборЗаписейПартии.ПоБазовомуКоличеству=Истина;
	НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;	
	НаборЗаписейПартии.РежимДопРасходы	= 1;
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
		НаборЗаписейПартии.РасчетыСКонтрагентами = РасчетыСКонтрагентами;
	КонецЕсли;
	Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
	
	// Запишем в ДоходыИРасходы услуги стоимость которых не распределяется на себестоимость поступления.
	НайденнаяСтрокаУслуг=ДеревоДоходовИРасходов.Строки.Найти(Перечисления.ВидыНоменклатуры.Услуга,"ВидНоменклатуры");
	Если НайденнаяСтрокаУслуг<>Неопределено Тогда
		СуммаУслуг = 0;
		Для Каждого СтрокаУслуги Из НайденнаяСтрокаУслуг.Строки Цикл
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = СтрокаУслуги.СтатьяДопРасходов;
			НаборЗаписейДиР.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам
				ИЛИ (ШапкаДокумента.ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
			НаборЗаписейДиР.Расход = СтрокаУслуги.СуммаВсего;
			СуммаУслуг = СуммаУслуг+СтрокаУслуги.СуммаВсего;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЦикла;
		
		// Способ ведения не по подразделениям то ничего не будем корректировать.
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны И СуммаУслуг<>0 Тогда	
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДиР.Доход = СуммаУслуг;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
		КонецЕсли;	
	КонецЕсли;
	
	// При безвозмездном поступлении сумму на доходы и расходы.
	Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
		НайденнаяСтрокаТоваров=ДеревоДоходовИРасходов.Строки.Найти(Перечисления.ВидыНоменклатуры.Товар,"ВидНоменклатуры");
		СуммаСебестоимости = 0;
		Если НайденнаяСтрокаТоваров<>Неопределено Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Доход                  = НайденнаяСтрокаТоваров.СуммаВсего;
			СуммаСебестоимости                     = СуммаСебестоимости+НайденнаяСтрокаТоваров.СуммаВсего;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

// Возвращает выборку по шапке.
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.ПоступлениеТоваров - ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке.
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.СуммаДокумента КАК СуммаДокумента,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.ДокументОснование КАК ДокументОснование
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции // ПолучитьШапкуДокумента()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	ИменаИсключаемыхРеквизитов = "";
	ЗаполнятьПоСтуктуре = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ИменаИсключаемыхРеквизитов = "Контрагент, ДоговорВзаиморасчетов";
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнятьПоСтуктуре = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ЗаполнятьПоСтуктуре", Ложь);
		
	КонецЕсли;
	
	ПродолжатьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		ИменаИсключаемыхРеквизитов,
		ЗаполнятьПоСтуктуре
	);
	
	Если Не ПродолжатьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Если введен отдельным документом по строке Авторабот ЗаказНаряда - заполнить ДокументОснование.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			ДокументОснование = ДанныеЗаполнения.ДокументОснование;
			
		КонецЕсли;
		
		ЗаполнитьПоСубподряду(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если
		ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций
		ИЛИ ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду
	Тогда
		
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
		
	КонецЕсли;

	// Заполним доп. поля
	
	СпособРаспределенияЗаказовПоУмолчанию = Перечисления.СпособыРаспределенияЗаказов.СпособРаспределенияЗаказовПоУмолчанию(ПодразделениеКомпании);
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекущаяСтрока.СпособРаспределенияЗаказов) Тогда
			
			ТекущаяСтрока.СпособРаспределенияЗаказов = СпособРаспределенияЗаказовПоУмолчанию;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МаркировкаТоваровСервер.ОчиститьНеиспользуемыеКодыМаркировки(ЭтотОбъект);
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДоговорВзаиморасчетов,
			"ВидДоговора, ПризнакАгента, ИННПоставщика"
		);
		Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеДоговора.ПризнакАгента) Или Не ЗначениеЗаполнено(ДанныеДоговора.ИННПоставщика)Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'В договоре не заполнены данные поставщика'"),
					ЭтотОбъект,
					"ДоговорВзаиморасчетов",
					, 
					Отказ
				);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Отказ Или ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	Отказ = Отказ Или ЕстьТоварыВнеАссортиментаПодразделения();
	
	Если ДляОперацииПредусмотренныеТолькоУслуги() Тогда
		
		Отказ = Отказ Или ЕстьУслугиОтносящиесяНеНаДоходыИРасходы();
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		
		СтратегияСписанияПартийПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация, Дата);
		
		Если СтратегияСписанияПартийПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'При стратегии списания партий по среднему нельзя приходовать комиссионный товар.'"),
				ЭтотОбъект 
			);
				
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	ПоставщикЧастноеЛицо = (Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо);
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ,,, НЕ ПоставщикЧастноеЛицо);
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	ПроверитьЗаполненностьРНПТПрослеживаемогоТовара(Отказ);
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// корректируем сумму документа
	ТекСуммаДокумента = 0;
	Для Каждого ТекСтрока Из Товары Цикл
		Если ТекСтрока.Количество > 0 Тогда
			ТекСуммаДокумента = ТекСуммаДокумента + ТекСтрока.СуммаВсего;
		КонецЕсли; 
	КонецЦикла;
	СуммаДокумента = ТекСуммаДокумента;
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	СуммаДокумента = ТекСуммаДокумента;
	
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем пометку удаления, если это отрицательная партия (константа).
	Если ПометкаУдаления И Ссылка = Константы.ПартияТоваровОтрицательныхОстатков.Получить() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Невозможно пометить на удаление документ партий отрицательных остатков.'"),
			ЭтотОбъект,
			, ,
			Отказ
		);
		Возврат;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций
		ИЛИ ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	Если (НЕ ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду)
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Для каждого СтрокаТоваров Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТоваров.ЗаказНаряд) Тогда
				СтрокаТоваров.ЗаказНаряд = Документы.ЗаказНаряд.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Почистим распределения товаров по заказам
	СтрокиУдаления = Новый Массив;
	СтруктураОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	Для Каждого СтрокаРаспределения Из РаспределениеТовара Цикл
		СтруктураОтбора.Номенклатура               = СтрокаРаспределения.Номенклатура;
		СтруктураОтбора.ХарактеристикаНоменклатуры = СтрокаРаспределения.ХарактеристикаНоменклатуры;
		НайденныеСтроки = Товары.НайтиСтроки(СтруктураОтбора);
		УдалитьРаспределение = Истина;
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Если ТекСтрока.СпособРаспределенияЗаказов = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Выборочное") И (НЕ ЗначениеЗаполнено(СтрокаРаспределения.ЗаказПокупателя)) Тогда
				Продолжить;
			ИначеЕсли ТекСтрока.СпособРаспределенияЗаказов<>ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое") Тогда
				УдалитьРаспределение = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если УдалитьРаспределение Тогда 
			СтрокиУдаления.Добавить(СтрокаРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтрокиУдаления Цикл
		РаспределениеТовара.Удалить(ТекСтрока);
	КонецЦикла;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.ПоступлениеТоваров.ВозможенВводСчетФактурыПолученной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
	Если Ссылка = Константы.ПартияТоваровОтрицательныхОстатков.Получить() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Документ является документом партии отрицательных остатках и не может быть удален.'"),
			ЭтотОбъект
		);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураПолученный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
		СкладКомпании.ПодразделениеКомпании,
		Дата
	);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
		ДоговорВзаиморасчетов.ПодразделениеКомпании,
		Дата
	);
	ПодразделениеПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
		ПодразделениеКомпании,
		Дата
	);
	Если ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций
		ИЛИ ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду Тогда
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеПодразделениеКомпании);
	Иначе	
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	КонецЕсли;
	
	ФлагУпрВалюты = (ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	СписокТоваров = Товары.ВыгрузитьКолонку("Номенклатура");
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
	// Проведем взаиморасчеты если поступление не комиссионное
	Если ХозОперация <> Справочники.ХозОперации.ПоступлениеТоваровКомиссия
		И ХозОперация <> Справочники.ХозОперации.ПоступлениеБезвозмездное
		И Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			НаборЗаписейВзаиморасчеты.Сделка = ДокументОснование;
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
		КонецЕсли; 
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
		НаборЗаписейВзаиморасчеты.Сумма = СуммаДокумента;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
		
		// Доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		
		Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	ОказаниеУслуг = (ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций)
		ИЛИ (ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду);
	
	Если НЕ ОказаниеУслуг Тогда
		
		// Закрытие распределений заказов поставщику
		НаборЗаписейРаспределения=Движения.ЗаказыРаспределение;
		НаборЗаписейРаспределения.РежимПроведения=РежимПроведения;
		НаборЗаписейРаспределения.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейРаспределения.РезультатЗапросаПоТоварам=ПолучитьТаблицуТоваровЗаказыРаспределение();
		НаборЗаписейРаспределения.ЗаказПокупателя=Неопределено;
		НаборЗаписейРаспределения.ЗаказПоставщика=Неопределено;
		НаборЗаписейРаспределения.Контрагент=Контрагент;
		НаборЗаписейРаспределения.ДвиженияПоРознице=Истина;
		НаборЗаписейРаспределения.ПоБазовомуКоличеству=Истина;
		Отказ=НЕ НаборЗаписейРаспределения.ЗакрытиеРаспределенийЗаказовПоставщику() ИЛИ Отказ;
		
		// Резервирование товаров по заказам покупателей
		НаборЗаписейЗаказыПокупателей=Движения.ЗаказыПокупателей;
		НаборЗаписейЗаказыПокупателей.РежимПроведения=РежимПроведения;
		НаборЗаписейЗаказыПокупателей.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам=НаборЗаписейРаспределения.ТаблицаЗакрытияРаспределений;
		НаборЗаписейЗаказыПокупателей.Контрагент=Неопределено;
		НаборЗаписейЗаказыПокупателей.Заказ=Неопределено;
		НаборЗаписейЗаказыПокупателей.СкладКомпании=СкладКомпании;
		НаборЗаписейЗаказыПокупателей.Заказывать=Ложь;
		НаборЗаписейЗаказыПокупателей.Резервировать=Истина;
		НаборЗаписейЗаказыПокупателей.ПоБазовомуКоличеству=Истина;
		Отказ=НЕ НаборЗаписейЗаказыПокупателей.Приход() ИЛИ Отказ;
		
		// Закрытие нераспределенных заказов покупателей
		ЗакрыватьНераспределенныеЗаказыПокупателей = УчетныеПолитикиСервер.Значение(
			"ЗакрыватьНераспределенныеЗаказыПокупателей",
			Дата,
			ПодразделениеКомпании
		);
		Если ЗакрыватьНераспределенныеЗаказыПокупателей Тогда
			НаборЗаписейЗаказыПокупателей.РежимПроведения=РежимПроведения;
			НаборЗаписейЗаказыПокупателей.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам=НаборЗаписейРаспределения.РезультатЗапросаПоТоварам;
			НаборЗаписейЗаказыПокупателей.Контрагент=Неопределено;
			НаборЗаписейЗаказыПокупателей.Заказ=Неопределено;
			НаборЗаписейЗаказыПокупателей.СкладКомпании=СкладКомпании;
			НаборЗаписейЗаказыПокупателей.Заказывать=Ложь;
			НаборЗаписейЗаказыПокупателей.Резервировать=Истина;
			НаборЗаписейЗаказыПокупателей.ПоБазовомуКоличеству=Истина;
			Отказ=НЕ НаборЗаписейЗаказыПокупателей.ЗакрытиеНераспределенныхЗаказов() ИЛИ Отказ;
		КонецЕсли; 
		
		// Закрытие заказов поставщику
		НаборЗаписейЗаказыПоставщикам=Движения.ЗаказыПоставщикам;
		НаборЗаписейЗаказыПоставщикам.РежимПроведения=РежимПроведения;
		НаборЗаписейЗаказыПоставщикам.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЗаказыПоставщикам.РезультатЗапросаПоТоварам=Неопределено;
		НаборЗаписейЗаказыПоставщикам.Контрагент=Контрагент;
		НаборЗаписейЗаказыПоставщикам.ПоБазовомуКоличеству=Истина;
		НаборЗаписейЗаказыПоставщикам.ЗаказОснование=Неопределено;
		НаборЗаписейЗаказыПоставщикам.ЗаказПоставщику=Неопределено;
		
		Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			НаборЗаписейЗаказыПоставщикам.ЗаказОснование = ДокументОснование;
		КонецЕсли;
		
		ЗаблокироватьЗаказыПоставщикам();
		
		ДополнительныеСвойства.Вставить("ЗаказОснование", НаборЗаписейЗаказыПоставщикам.ЗаказОснование);
		НаборЗаписейЗаказыПоставщикам.РезультатЗапросаПоЗаказам = ЗаказыСервер
			.ЗаказыПоставщикамКЗакрытию(
				ЭтотОбъект,
				НаборЗаписейРаспределения.Выгрузить())
			.Выгрузить();
		Отказ=НЕ НаборЗаписейЗаказыПоставщикам.ЗакрытиеЗаказовПоставщику() ИЛИ Отказ;
		
		// Проведем остатки товаров
		НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам=НаборЗаписейРаспределения.РезультатЗапросаПоТоварам;
		НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
		НаборЗаписейОстатки.Приходовать=Истина;
		НаборЗаписейОстатки.Резервировать=Истина;
		НаборЗаписейОстатки.Контрагент=Контрагент;
		НаборЗаписейОстатки.ПоБазовомуКоличеству=Истина;
		НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
		Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		
	КонецЕсли;
	
	Документы.ПоступлениеТоваров.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ПоступлениеТоваров.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	ЕстьРасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами.Количество() > 0;
	УсловиеОтбора = Новый Структура;
	УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
	УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
	СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
		ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
		УсловиеОтбора);
	
	Если Не ОказаниеУслуг Тогда
		
		// Проведем партии товаров
		Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
		
		// Способ ведения не по подразделениям или балансовые подразделения равны, то ничего не будем корректировать.
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда	
			Если ХозОперация<>Справочники.ХозОперации.ПоступлениеТоваровКомиссия
				И ХозОперация<>Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
				СуммаПартий = Движения.ПартииТоваровКомпании.Итог("СуммаУпр");
				Если СуммаПартий<>0 Тогда
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение = СкладКомпании.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Истина;
					НаборЗаписейДиР.Доход = СуммаПартий;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
				КонецЕсли;			
				
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				
				Если ЕстьРасчетыСКонтрагентами Тогда
					НаборЗаписейДиР.ВУпрВалюте = Истина;
					НаборЗаписейДиР.Расход = СуммыПоРасчетамСКонтрагентом.СуммаУпр;
				Иначе
					НаборЗаписейДиР.ВУпрВалюте = Ложь;
					НаборЗаписейДиР.Расход = СуммаДокумента;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ХозОперация=Справочники.ХозОперации.УслугиПоСубподряду Тогда
			НаборЗаписейСубподряд=Движения.Субподряд;
			НаборЗаписейСубподряд.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейСубподряд.ДатаВыполнения=Неопределено;
			Запрос=Новый Запрос("ВЫБРАТЬ
								|	ВЫБОР
								|		КОГДА ПоступлениеТоваровТовары.Ссылка.ДокументОснование ССЫЛКА Документ.ЗаказНаряд
								|				И НЕ ПоступлениеТоваровТовары.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка)
								|			ТОГДА ПоступлениеТоваровТовары.Ссылка.ДокументОснование
								|		ИНАЧЕ ПоступлениеТоваровТовары.ЗаказНаряд
								|	КОНЕЦ КАК ЗаказНаряд,
								|	ПоступлениеТоваровТовары.Номенклатура КАК Работа,
								|	ПоступлениеТоваровТовары.Ссылка.Контрагент КАК Контрагент,
								|	ПоступлениеТоваровТовары.Ссылка.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
								|	СУММА(ПоступлениеТоваровТовары.СуммаВсего) КАК Сумма,
								|	СУММА(ПоступлениеТоваровТовары.СуммаНДС) КАК СуммаНДС,
								|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС
								|ИЗ
								|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
								|ГДЕ
								|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
								|
								|СГРУППИРОВАТЬ ПО
								|	ВЫБОР
								|		КОГДА ПоступлениеТоваровТовары.Ссылка.ДокументОснование ССЫЛКА Документ.ЗаказНаряд
								|				И НЕ ПоступлениеТоваровТовары.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка)
								|			ТОГДА ПоступлениеТоваровТовары.Ссылка.ДокументОснование
								|		ИНАЧЕ ПоступлениеТоваровТовары.ЗаказНаряд
								|	КОНЕЦ,
								|	ПоступлениеТоваровТовары.Номенклатура,
								|	ПоступлениеТоваровТовары.Ссылка.Контрагент,
								|	ПоступлениеТоваровТовары.Ссылка.ДоговорВзаиморасчетов,
								|	ПоступлениеТоваровТовары.СтавкаНДС");
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			НаборЗаписейСубподряд.РезультатЗапросаПоРаботам=Запрос.Выполнить().Выгрузить();
			НаборЗаписейСубподряд.РасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами;
			Отказ=НЕ НаборЗаписейСубподряд.Движение(Ложь) ИЛИ Отказ;
		КонецЕсли;
		
		// Проведем услуги по доходам и расходам
		Запрос=Новый Запрос("ВЫБРАТЬ 
		| ПоступлениеТовары.Номенклатура.СтатьяДопРасходов КАК СтатьяРасходов,
		| ПоступлениеТовары.СуммаВсего
		| ПОМЕСТИТЬ ТаблицаТоваров
		| ИЗ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТовары
		| ГДЕ ПоступлениеТовары.Ссылка = &ТекДок И ПоступлениеТовары.Номенклатура.ВидНоменклатуры = &Услуга;
		|
		| ВЫБРАТЬ
		|	ТаблицаТоваров.СтатьяРасходов КАК СтатьяРасходов,
		|	Сумма(ТаблицаТоваров.СуммаВсего) КАК СуммаУслуг
		|
		| ИЗ ТаблицаТоваров КАК ТаблицаТоваров
		|
		| СГРУППИРОВАТЬ ПО ТаблицаТоваров.СтатьяРасходов");
		
		Запрос.УстановитьПараметр("ТекДок",Ссылка);
		Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
		УслугиДокумента = Запрос.Выполнить().Выгрузить();
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			
			РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
				УслугиДокумента,
				СуммыПоРасчетамСКонтрагентом.СуммаУпр,
				СуммаДокумента,
				"СуммаУслуг");
			
		КонецЕсли;
		
		СуммаУслуг = 0;
		Для Каждого СтрокаУслуги Из УслугиДокумента Цикл
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = (ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = СтрокаУслуги.СтатьяРасходов;
			НаборЗаписейДоходыИРасходы.Расход = СтрокаУслуги.СуммаУслуг;//
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = ЕстьРасчетыСКонтрагентами
				ИЛИ (ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
			СуммаУслуг = СуммаУслуг + СтрокаУслуги.СуммаУслуг; 
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЦикла;

		// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = ЕстьРасчетыСКонтрагентами;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Расход=СуммаУслуг;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение = ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = ЕстьРасчетыСКонтрагентами
				ИЛИ (ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Доход=СуммаУслуг;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если приходуем товар на розничный склад, то установим розничные цены на этот товар.
	Если НЕ Отказ И ХозОперация=Справочники.ХозОперации.ПоступлениеТоваров И СкладКомпании.Розничный И ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ТипЦен=СкладКомпании.ТипЦенРозничнойТорговли;
		НаборЗаписейЦены.ПодразделениеКомпании = СкладКомпании.ПодразделениеКомпании;
		НаборЗаписейЦены.УстанавливатьЦеныУслуг=Ложь;
		НаборЗаписейЦены.ИмяРеквизитаЦена="ЦенаРозничная";
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Установим цены контрагентов
	Если НЕ Отказ И ХозОперация=Справочники.ХозОперации.ПоступлениеТоваров И ТипЦен.РегистрироватьЦеныПоПриходу И (ЗначениеЗаполнено(Контрагент)) И НЕ ТипЦен.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Контрагент;
		НаборЗаписейЦены.ТипЦен=ТипЦен;
		НаборЗаписейЦены.УстанавливатьЦеныУслуг=Истина;
		НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Установим закупочные цены компании
	Если НЕ Отказ И ПодразделениеКомпании.ФормироватьЗакупочнуюЦену И НЕ Справочники.ТипыЦен.ОсновнойТипЦенЗакупки.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
		НаборЗаписейЦены.ТипЦен=Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Установим нормативные цены компании
	Если НЕ Отказ И ПодразделениеКомпании.ФормироватьНормативнуюЦену И НЕ Справочники.ТипыЦен.НормативнаяЦена.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
		НаборЗаписейЦены.ТипЦен=Справочники.ТипыЦен.НормативнаяЦена;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Изменим состояние маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
	НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборот;
	НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
	НаборЗаписейСостоянияКодовМаркировки.ПроверятьВводВОборот = Истина;
	Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления.
	// Возникшую разницу необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// Запись ячеек в РС ЯчейкиХраненияПоУмолчанию.
	Если НЕ Отказ И ПолучитьФункциональнуюОпцию("ИспользоватьЯчейкиХранения") Тогда
		
		РегистрыСведений.ЯчейкиХраненияПоУмолчанию.ЗаполнитьЯчейкиХранения(
			Товары.Выгрузить(, "Номенклатура,Ячейка"),
			СкладКомпании,
			Дата
		);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
	// Зафиксируем новые штрихкоды товара из кода маркировки
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		МаркировкаТоваровСервер.ПроверитьИДобавитьГТИННоменклатуры(Ссылка);
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	ТаблицаПрослеживаемыхТоваров = Документы.ПоступлениеТоваров.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФПолученный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Приходный складской ордер".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты.
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ВладелецТовара) 
		И ТипЗнч(ДанныеЗаполнения.ВладелецТовара) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Контрагент = ДанныеЗаполнения.ВладелецТовара;
		Документы.ПоступлениеТоваров.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Документы.ПоступлениеТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти,
																		ДополнительныеСвойства.ПараметрыДействия);
		СтрокаТабличнойЧасти.КоличествоПоНакладной = СтрокаТабличнойЧасти.Количество;
	КонецЦикла;
	
	ВхДокНомер = ДанныеЗаполнения.Номер;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Заказ поставщику".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, 
			СтандартнаяОбработка) Тогда
			
		Возврат Истина;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток,
	|	ЗаказыПоставщикамОстатки.СуммаОстаток КАК Сумма,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент, 1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.ЕдиницаИзмерения, Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Коэффициент, 1) КАК Коэффициент,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.СтавкаНДС, ЗаказыПоставщикамОстатки.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.НомерСтроки, 1000000) КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				&Момент,
	|				ЗаказПоставщику = &ВыбЗаказПоставщику
	|					И Контрагент = &ВыбКонтрагент) КАК ЗаказыПоставщикамОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ЗаказПоставщикуТовары.Ссылка
	|		 И ЗаказыПоставщикамОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|		 И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(ЗаказаноОстаток),
	|	МАКСИМУМ(Сумма)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент",             Новый МоментВремени(КонецДня(Дата)));
	Запрос.УстановитьПараметр("ВыбКонтрагент",      Контрагент);
	Запрос.УстановитьПараметр("ВыбЗаказПоставщику", ДокументОснование);
	
	// Нужные только скорректированные позиции.
	Товары.Очистить();
	
	ВалютаЗаказа   = ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа,Дата);
	КурсЗаказа     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристик.Следующий() Цикл
			ВсегоОсталось = ВыборкаХарактеристик.ЗаказаноОстаток;
			КоличествоБазовоеПоЗаказу = ВыборкаХарактеристик.КоличествоБазовое;
			СуммаОсталось = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаХарактеристик.Сумма, ВалютаЗаказа, КурсЗаказа, 
								ВалютаДокумента, КурсДокумента);
			ВыборкаДетали = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
			НоваяСтрока   = Неопределено;
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВсегоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
				Если ВыборкаДетали.ЗаказаноОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если КоличествоБазовоеПоЗаказу = 1 Тогда
					КоличествоСтроки = ВыборкаДетали.ЗаказаноОстаток;
				Иначе
					КоличествоСтроки = ВыборкаДетали.ЗаказаноОстаток * (ВыборкаДетали.КоличествоБазовое / КоличествоБазовоеПоЗаказу);
				КонецЕсли;
				ТекущееКоличество = Мин(ВсегоОсталось, КоличествоСтроки);
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ВыборкаДетали.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаДетали.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения           = ВыборкаДетали.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ВыборкаДетали.Коэффициент;
				Документы.ПоступлениеТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия);
				НоваяСтрока.СтавкаНДС                  = ВыборкаДетали.СтавкаНДС;
				НоваяСтрока.Количество                 = ТекущееКоличество
					/ ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент), 1, НоваяСтрока.Коэффициент);
				НоваяСтрока.КоличествоБазовое          = ТекущееКоличество;
				НоваяСтрока.КоличествоПоНакладной      = НоваяСтрока.Количество; 
				
				ТекСумма = СуммаОсталось / ВсегоОсталось * ТекущееКоличество;
				
				СуммаОсталось = СуммаОсталось - ТекСумма;
				НоваяСтрока.СуммаВсего = ТекСумма;
				Документы.ПоступлениеТоваров.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия);
				
				ВсегоОсталось = ВсегоОсталось - ТекущееКоличество;
			КонецЦикла;
			Если ВсегоОсталось > 0 ИЛИ СуммаОсталось > 0 Тогда
				Если НЕ НоваяСтрока = Неопределено Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + (ВсегоОсталось / НоваяСтрока.Коэффициент);
					НоваяСтрока.КоличествоПоНакладной = НоваяСтрока.Количество;
					НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + ВсегоОсталось;
					Документы.ПоступлениеТоваров.ТоварыКоличествоПриИзменении(ЭтотОбъект, НоваяСтрока,
						ДополнительныеСвойства.ПараметрыДействия);
					НоваяСтрока.СуммаВсего        = НоваяСтрока.СуммаВсего + СуммаОсталось;
				ИначеЕсли ВсегоОсталось > 0 Тогда
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Номенклатура               = ВыборкаХарактеристик.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
					Документы.ПоступлениеТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока,
						ДополнительныеСвойства.ПараметрыДействия);
					НоваяСтрока.СтавкаНДС                  = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(Новый Структура());
					НоваяСтрока.Количество                 = ВсегоОсталось / НоваяСтрока.Коэффициент;
					НоваяСтрока.КоличествоПоНакладной      = НоваяСтрока.Количество;
					НоваяСтрока.КоличествоБазовое          = ВсегоОсталось;
					Документы.ПоступлениеТоваров.ТоварыКоличествоПриИзменении(ЭтотОбъект, НоваяСтрока,
						ДополнительныеСвойства.ПараметрыДействия);
					НоваяСтрока.СуммаВсего                 = СуммаОсталось;
				КонецЕсли;
				Документы.ПоступлениеТоваров.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

// Производит заполнение объекта на основании документа "Реализация товаров".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки");
	
	// Способ ведения не по организации или не прошла предыдущая проверка, то и проверять ничего не будем.
	Если БалансВедетсяПоОрганизациям(ТекущаяДатаСеанса()) Тогда
		Организация           = ПараметрыСеанса.Организация;
		ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
		СкладКомпании         = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", ЭтотОбъект);
		Контрагент            = ПраваИНастройкиПользователя.Значение("ОсновнойПоставщик", ЭтотОбъект);
		ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Контрагент,
			Перечисления.ВидыДоговоров.Покупка, ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		Документы.ПоступлениеТоваров.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	КонецЕсли;
	
	// Заполним количеств по накладной.
	Для Каждого ТекСтрока Из Товары Цикл
		ТекСтрока.КоличествоПоНакладной = ТекСтрока.Количество;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Корректировка заказа поставщику".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаЗаказаПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты.
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДокументОснование.ДоговорВзаиморасчетов;
	
	// Очистим табличную часть "Товары".
	Товары.Очистить();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток) КАК ЗаказаноОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|		&Момент,
	|		ЗаказПоставщику = &ВыбЗаказПоставщику
	|			И Контрагент = &ВыбКонтрагент) КАК ЗаказыПоставщикамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры";
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", Новый МоментВремени(КонецДня(Дата)));
	Запрос.УстановитьПараметр("ВыбКонтрагент", Контрагент);
	Запрос.УстановитьПараметр("ВыбЗаказПоставщику", ДанныеЗаполнения.ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Документы.ПоступлениеТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект,
			НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
		НоваяСтрока.Количество                 = Выборка.ЗаказаноОстаток;
		НоваяСтрока.КоличествоПоНакладной      = НоваяСтрока.Количество;
		Документы.ПоступлениеТоваров.ТоварыКоличествоПриИзменении(ЭтотОбъект,
			НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаЗаказаПоставщику()

// Производит заполнение объекта на основании документа "Заказ-наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки");
	
	// Заполняем специфические для данной операции реквизиты
	ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду;
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Документы.ПоступлениеТоваров.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Счет от поставщика"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщика(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Товары Цикл
		ТекСтрока.КоличествоПоНакладной = ТекСтрока.Количество;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщика()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьТоварыВнеАссортиментаПодразделения()

	// Если выполняется восстановление последовательностей, то отключим проверку
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтролироватьАссортимент = ПраваИНастройкиПользователя.Значение("КонтролироватьАссортиментПодразделения", ЭтотОбъект);
	
	Если КонтролироватьАссортимент = Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтсутствуютВАссортименте = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОграничениеАссортиментаПодразделенияСрезПоследних.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ОграничениеАссортиментаПодразделения.СрезПоследних(
		|			&Дата,
		|			ПодразделениеКомпании = &ПодразделениеКомпании
		|				И Номенклатура В (&Номенклатура)) КАК ОграничениеАссортиментаПодразделенияСрезПоследних
		|ГДЕ
		|	ОграничениеАссортиментаПодразделенияСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияТовараВАссортименте.Введен)"
	);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ПодразделениеПроверки = ПодразделениеКомпании;
	
	Пока ЗначениеЗаполнено(ПодразделениеПроверки) Цикл
		
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеПроверки);
		Запрос.УстановитьПараметр("Номенклатура",          ОтсутствуютВАссортименте);
		
		ТоварыВАссортименте = Запрос.Выполнить().Выбрать();
		
		Пока ТоварыВАссортименте.Следующий() Цикл
			
			ПозицияНайденого = ОтсутствуютВАссортименте.Найти(ТоварыВАссортименте.Номенклатура);
			
			Если ПозицияНайденого <> Неопределено Тогда
				
				ОтсутствуютВАссортименте.Удалить(ПозицияНайденого);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтсутствуютВАссортименте.Количество() = 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		ПодразделениеПроверки = ПодразделениеПроверки.Родитель;
		
	КонецЦикла;
	
	Для Каждого ОтсутствуетВАссортименте Из ОтсутствуютВАссортименте Цикл
		ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ОтсутствуетВАссортименте);	
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='[%1] Номенклатура %2 не входит в ассортимент подразделения.'"), ЗначениеКолонкиКода, ОтсутствуетВАссортименте),
			ЭтотОбъект			
		);
	КонецЦикла;

	Если
		ОтсутствуютВАссортименте.Количество() > 0
		И КонтролироватьАссортимент = Перечисления.ВидыКонтроля.Запрещать
	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДляОперацииПредусмотренныеТолькоУслуги()
	
	Возврат ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций
		Или ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду;
	
КонецФункции

Функция ЕстьУслугиОтносящиесяНеНаДоходыИРасходы()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	&ЭтотДокумент КАК ПоступлениеТоваровТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ТЧ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_ТЧ КАК ВТ_ТЧ
	|ГДЕ
	|	(ВТ_ТЧ.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|			ИЛИ ВТ_ТЧ.Номенклатура.СпособРаспределенияДопРасходов <> ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы))"
	);
	Запрос.УстановитьПараметр("ЭтотДокумент", Товары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УслугиСОшибкой = РезультатЗапроса.Выбрать();
	
	Пока УслугиСОшибкой.Следующий() Цикл
		ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(УслугиСОшибкой.Номенклатура);	
		
		ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(
		НСтр("ru = '[%1] Номенклатура %2 не является услугой, относящейся на доходы и расходы.'"),
		ЗначениеКолонкиКода,
		УслугиСОшибкой.Номенклатура
		),
		ЭтотОбъект,
		СтрШаблон("Товары[%1].Номенклатура", УслугиСОшибкой.НомерСтроки)
		);
		
	КонецЦикла;
	
	Возврат Истина;
	 
КонецФункции

// Возвращает результат запроса по таблице товаров поставщика.
Функция ПолучитьТаблицуТоваровЗаказыРаспределение()
	// Формируем запрос к табличной части документа.
	Запрос=Новый Запрос();
	
	// Текст запроса
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокументТовары.ЦенаРозничная КАК ЦенаРозничная,
	|	ДокументТовары.КоличествоБазовое КАК КоличествоБазовое,
	|	ВЫБОР
	|		КОГДА ДокументТовары.СпособРаспределенияЗаказов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.ВыборочноеИАвтоматическое)
	|			ТОГДА 1
	|		КОГДА ДокументТовары.СпособРаспределенияЗаказов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.Выборочное)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СпособРаспределенияЗаказовЧисло
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры <> &Услуга
	|	И ДокументТовары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТаблицаТоваров.ЦенаРозничная * ТаблицаТоваров.КоличествоБазовое) / СУММА(ТаблицаТоваров.КоличествоБазовое) КАК ЦенаРозничная,
	|	СУММА(ТаблицаТоваров.КоличествоБазовое) КАК Количество,
	|	СУММА(0) КАК Резерв,
	|	МАКСИМУМ(ТаблицаТоваров.СпособРаспределенияЗаказовЧисло) КАК СпособРаспределенияЗаказовЧисло
	|ПОМЕСТИТЬ ТаблицаТоваровСвернутая
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСвернутая.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСвернутая.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваровСвернутая.ЦенаРозничная КАК ЦенаРозничная,
	|	ТаблицаТоваровСвернутая.Количество КАК Количество,
	|	ТаблицаТоваровСвернутая.Резерв КАК Резерв,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровСвернутая.СпособРаспределенияЗаказовЧисло = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.ВыборочноеИАвтоматическое)
	|		КОГДА ТаблицаТоваровСвернутая.СпособРаспределенияЗаказовЧисло = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.Выборочное)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.Автоматическое)
	|	КОНЕЦ КАК СпособРаспределенияЗаказов
	|ИЗ
	|	ТаблицаТоваровСвернутая КАК ТаблицаТоваровСвернутая";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
	Возврат Запрос.Выполнить();
КонецФункции

// Накладывает блокировку на регистр заказы поставщиков.
//
Процедура ЗаблокироватьЗаказыПоставщикам()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ СтрокиДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &Документ
	|	И ПоступлениеТоваровТовары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиДокумента.Номенклатура КАК Номенклатура,
	|	СтрокиДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	СтрокиДокумента КАК СтрокиДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиДокумента.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|ИЗ
	|	СтрокиДокумента КАК СтрокиДокумента");
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
	
	Если Контрагент <> Неопределено Тогда
		ЗначенияБлокировки.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы,ИмяТаблицы", "РегистрНакопления", "ЗаказыПоставщикам");
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", Запрос.Выполнить().Выгрузить());
	
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	
	ОбработкаСобытийДокументаСервер
		.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
КонецПроцедуры // ЗаблокироватьЗаказыПоставщикам()

Процедура ЗаполнитьПоСубподряду(ДанныеЗаполнения)
	
	Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Документы.ПоступлениеТоваров.КонтрагентПриИзменении(ЭтотОбъект);
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	Документы.ПоступлениеТоваров.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("Предупреждать", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

Процедура ПроверитьЗаполненностьРНПТПрослеживаемогоТовара(Отказ = Ложь) Экспорт
	
	// Документы с РНПТ начали действовать с 01.07.2021
	Если ЭтотОбъект.Дата < Дата("20210701000000") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка права для дальнейшего выполнения
	Если Не ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что нет признака восстановления последовательностей.
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ЭтотОбъект.ДополнительныеСвойства,
		"ЭтоВосстановлениеПоследовательностей",
		Ложь
	);
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьЗаполненностьРНПТПриПоступлении = Константы.ПроверятьЗаполненностьРНПТПриПоступлении.Получить();
	
	Если НЕ ПроверятьЗаполненностьРНПТПриПоступлении ИЛИ ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровИмпорт Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ЭтотОбъект.Товары Цикл
		
		Если ТекущаяСтрока.Номенклатура.Прослеживаемый И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ГТД) Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 табличной части ""%2"" у прослеживаемого товара не указан номер ГТД / РНПТ'");
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ГТД");			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, ТекущаяСтрока.НомерСтроки, "Товары"),	
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
