// Модуль менеджера документа "Поступление товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров.КодыМаркировки КАК ПоступлениеТоваровКодыМаркировки
	|ГДЕ
	|	ПоступлениеТоваровКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПоступлениеТоваров - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

// Начальное заполнение реквизита "СпособРаспределенияЗаказов" 
// данными из старого реквизита "УдалитьСпособРаспределения" с другим типом данных
Процедура ЗаполнитьСпособРаспределенияЗаказов() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровТовары.УдалитьСпособРаспределения КАК УдалитьСпособРаспределения
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|ГДЕ
		|	ПоступлениеТоваровТовары.СпособРаспределенияЗаказов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.ПустаяСсылка)
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		ДокументОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Выборка = ВыборкаСсылка.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			СтрТовары = ДокументОбъект.Товары.Найти(Выборка.НомерСтроки,"НомерСтроки");
			Если Выборка.УдалитьСпособРаспределения = 0 Тогда
				СтрТовары.СпособРаспределенияЗаказов = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое");
			ИначеЕсли Выборка.УдалитьСпособРаспределения = 1 Тогда
				СтрТовары.СпособРаспределенияЗаказов = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.ВыборочноеИАвтоматическое");
			ИначеЕсли Выборка.УдалитьСпособРаспределения = 2 Тогда
				СтрТовары.СпособРаспределенияЗаказов = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Выборочное");
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления документа Поступление товаров'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;		
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовПоступления();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров.ДополнительныеРеквизиты КАК ПоступлениеТоваровДополнительныеРеквизиты
	|ГДЕ
	|	ПоступлениеТоваровДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.ОтпустилКонтрагент,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Получил,"Свойство");
				
				Если СвойствоПолучил <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоПолучил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучил.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтОрганизации;
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ПоступлениеТоваров""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ПоступлениеТоваровДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ПоступлениеТоваров.ДополнительныеРеквизиты КАК ПоступлениеТоваровДополнительныеРеквизиты
	|ГДЕ
	|	ПоступлениеТоваровДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И ПоступлениеТоваровДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаПоступления);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеДопРасходов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ТаможеннаяДекларацияИмпорт);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦен);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОтчетКомитенту);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СписаниеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Переоценка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПлатежноеПоручение);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетОтПоставщика);
	ОбъектыВводимыеНаОсновании.Добавить(Справочники.ПодтверждающиеДокументы);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатацию);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС); 
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.УведомлениеОВвозеПрослеживаемыхТоваров);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПоступлениеТоваров);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
// Возвращаемое значение:
//  Структура - Итоги операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Производим добавление сведений о розничной сумме только в случае, если выбран розничный склад.
	Если Объект.СкладКомпании.Розничный Тогда
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		ИтогиОперации.Вставить("ПроцентНаценки", ?(ИтогиОперации.СуммаДокумента=0, 0, Окр(ИтогиОперации.СуммаРозничная/ИтогиОперации.СуммаДокумента-1, 2)*100));
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка,
		ТекстВременнаяТаблица = "",
		Объединить = Ложь,
		ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Формирование состава табличной части без учета строк с нулевым количеством.
//
// Параметры:
//
// Возвращаемое значение:
//	- ТЧТовары                  - Таблица значений               - табличная часть товаров без строк с 0-м количеством.
//
Функция ПолучитьТабличнуюЧастьБезСтрокСНулевымКоличеством(Объект)
	// выгружает табличную часть
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтроки,
	               |	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПоступлениеТоваровТовары.Количество КАК Количество,
	               |	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПоступлениеТоваровТовары.Коэффициент КАК Коэффициент,
	               |	ПоступлениеТоваровТовары.КоличествоБазовое КАК КоличествоБазовое,
	               |	ПоступлениеТоваровТовары.Цена КАК Цена,
	               |	ПоступлениеТоваровТовары.Сумма КАК Сумма,
	               |	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ПоступлениеТоваровТовары.СуммаВсего КАК СуммаВсего,
	               |	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
	               |	ПоступлениеТоваровТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	               |	ПоступлениеТоваровТовары.ГТД КАК ГТД,
	               |	ПоступлениеТоваровТовары.ПроцентНаценки КАК ПроцентНаценки,
	               |	ПоступлениеТоваровТовары.ЦенаРозничная КАК ЦенаРозничная,
	               |	ПоступлениеТоваровТовары.СуммаРозничная КАК СуммаРозничная,
	               |	ПоступлениеТоваровТовары.СпособРаспределенияЗаказов КАК СпособРаспределенияЗаказов,
	               |	ПоступлениеТоваровТовары.Ячейка КАК Ячейка,
	               |	ПоступлениеТоваровТовары.ЗаказНаряд КАК ЗаказНаряд,
	               |	ПоступлениеТоваровТовары.КоличествоПоНакладной КАК КоличествоПоНакладной,
	               |	ПоступлениеТоваровТовары.УдалитьНоменклатураПоставщика КАК УдалитьНоменклатураПоставщика,
	               |	ПоступлениеТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	               |	ПоступлениеТоваровТовары.НеПересчитыватьСтроку КАК НеПересчитыватьСтроку,
	               |	ПоступлениеТоваровТовары.Номенклатура.Артикул КАК Код,
	               |	ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	               |ГДЕ
	               |	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	               |	И ПоступлениеТоваровТовары.Количество <> 0";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
   	
	// вернем результат
	Возврат Товары;
КонецФункции

Функция ЯвляетсяЯчейкойПоУмолчанию(Объект, Строка, ПараметрыДействия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЯчейкиХраненияПоУмолчанию.Номенклатура КАК Номенклатура,
		|	ЯчейкиХраненияПоУмолчанию.Номенклатура.Артикул КАК Артикул
		|ИЗ
		|	РегистрСведений.ЯчейкиХраненияПоУмолчанию КАК ЯчейкиХраненияПоУмолчанию
		|ГДЕ
		|	ЯчейкиХраненияПоУмолчанию.СкладКомпании = &СкладКомпании
		|	И ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения = &ЯчейкаХранения
		|	И ЯчейкиХраненияПоУмолчанию.Номенклатура <> &Номенклатура";
	
	Запрос.УстановитьПараметр("СкладКомпании" , Объект.СкладКомпании);
	Запрос.УстановитьПараметр("ЯчейкаХранения", Строка.Ячейка);
	Запрос.УстановитьПараметр("Номенклатура"  , Строка.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПараметрыДействия.Вставить("НесколькоСовпадений", ВыборкаДетальныеЗаписи.Количество() > 1);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПараметрыДействия.Вставить("НоменклатураВЯчейке", ВыборкаДетальныеЗаписи.Номенклатура);
		ПараметрыДействия.Вставить("Артикул", ВыборкаДетальныеЗаписи.Артикул);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОстатокТовараПоЯчейке(Объект, ЯчейкаХранения, ПараметрыДействия)
	
	Номенклатура = ПараметрыДействия.НоменклатураВЯчейке;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Момент = Новый МоментВремени(Дата);
	
	Запрос = Новый Запрос;
	
	// Если ведется учет единиц измерения по складу, добавим измерение "ЕдиницаИзмерения".
	Если Объект.СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
		ТекстЗапроса = " ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент,0) = 0 ТОГДА
		|		ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток
		|	ИНАЧЕ
		|		ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток/ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
		|			&Момент,
		|			Номенклатура = &Номенклатура
		|				И СкладКомпании = &СкладКомпании
		|				И Ячейка = &Ячейка) КАК ОстаткиТоваровОрдерныйСкладОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
		|			&Момент,
		|			Номенклатура = &Номенклатура
		|				И СкладКомпании = &СкладКомпании) КАК ОстаткиТоваровКомпанииОстатки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Момент"       , Момент);
	Запрос.УстановитьПараметр("Номенклатура" , Номенклатура);
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	Запрос.УстановитьПараметр("Ячейка"       , ЯчейкаХранения);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	// Сначала получим по складу, а потом по ордеру
	РезультатЗапросаСклад = ПакетЗапроса[1];
	РезультатЗапросаОрдер = ПакетЗапроса[0];
	
	Если НЕ РезультатЗапросаОрдер.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапросаОрдер.Выбрать();
	ИначеЕсли НЕ РезультатЗапросаСклад.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапросаСклад.Выбрать();
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Количество = 0;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Количество = ВыборкаДетальныеЗаписи.Количество;
		
		ПараметрыДействия.Вставить("ЕдиницаИзмерения", ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Очистить от заполнения реквизиты в зависимости от выбранной хоз. операции документа
//
// Параметры:
//  Объект	 - ДокументСсылка.ПоступлениеТовров, ДокументОбъект.ПоступлениеТоваров - Объект,
//				для которого выполняется обработка события.
//
Процедура ОчиститьРеквизитыПоХозОперации(Объект, Строка = Неопределено) Экспорт
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровИмпорт Тогда
		Если Строка = Неопределено Тогда
			Для Каждого СтрокаТоваров Из Объект.Товары Цикл
				СтрокаТоваров.СуммаНДС = 0;
				СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
				ТоварыСтавкаНДСПриИзменении(Объект, СтрокаТоваров);
				СтрокаТоваров.ГТД = Справочники.ГТД.ПустаяСсылка();
			КонецЦикла;
		Иначе
			Строка.СуммаНДС = 0;
			Строка.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			ТоварыСтавкаНДСПриИзменении(Объект, Строка);
			Строка.ГТД = Справочники.ГТД.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОчиститьРеквизитыПоХозОперации()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ПоступлениеТоваров - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	
	// Для контрагентов из ЕАЭС другая форма отчетности
	Если ДанныеКонтрагента.СтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;

	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент) КАК КоличествоПрослеживаемости,
	|	ПоступлениеТоваровТовары.ГТД КАК РНПТ,
	|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС) КАК СуммаБезНДС
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровТовары.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровТовары.Номенклатура,
	|	ПоступлениеТоваровТовары.ГТД,
	|	ПоступлениеТоваровТовары.СтавкаНДС";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим, что в документе есть РНПТ
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = Запрос.Выполнить().Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	Если Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
		КодОперации = Справочники.КодыОперацийПрослеживаемости.БезвозмездноеПолучение;
	Иначе
		КодОперации = Справочники.КодыОперацийПрослеживаемости.ПоступлениеТоваров;
	КонецЕсли;
	Документ = Объект.Ссылка;
	НомерДокумента = Объект.ВхДокНомер;
	ДатаДокумента = Объект.ВхДокДата;
	КонтрагентОперации = Объект.Контрагент;
	
	// Для пересчета валюты в рубли
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
	
	// Сформируем таблицу
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.КодОперации = КодОперации;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.Контрагент = КонтрагентОперации;
		
		Если ВалютаНеРегл Тогда
			НоваяСтрока.СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Проверка на наличие ограничения на формирование расчетов с контрагентом.
//
// Параметры:
//  Обеъект	 - ДокуменОбъект, ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Булево - Расчеты с контрагентом формируются или нет.
//
Функция ДоступноФормированиеРасчетовСКонтрагентами(Объект) Экспорт
	
	ДоступныеОперации = Новый Массив;
	ДоступныеОперации.Добавить(Справочники.ХозОперации.ПоступлениеТоваровИмпорт);
	ДоступныеОперации.Добавить(Справочники.ХозОперации.ПоступлениеТоваров);
	ДоступныеОперации.Добавить(Справочники.ХозОперации.УслугиПоСубподряду);
	ДоступныеОперации.Добавить(Справочники.ХозОперации.УслугиСтороннихОрганизаций);
	
	Возврат ДоступныеОперации.Найти(Объект.ХозОперация) <> Неопределено;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	Если НЕ (Объект.ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций)
		И НЕ (Объект.ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду) Тогда
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	Если НЕ (Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровИмпорт) Тогда
		ОбязательныеРеквизиты.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
		КонецЕсли;
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ГТД");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	// TODO: тут запрос на получение заказов из запроса
	Если Объект.Движения.ЗаказыПоставщикам.Количество() = 0 Тогда
		НаборЗаписейЗаказов = РегистрыНакопления.ЗаказыПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписейЗаказов.Отбор.Регистратор.Установить(Объект.Ссылка);
		НаборЗаписейЗаказов.Прочитать();
		ЗаказыДокумента = НаборЗаписейЗаказов.Выгрузить();
	Иначе
		ЗаказыДокумента = Объект.Движения.ЗаказыПоставщикам.Выгрузить();
	КонецЕсли;
	ДополнительныеПараметры.ДляПроведения.Вставить("Заказы", ЗаказыДокумента);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваров.Организация КАК Организация,
	|	ПоступлениеТоваров.Ссылка КАК Ссылка,
	|	ПоступлениеТоваров.Дата КАК Дата,
	|	ПоступлениеТоваров.ХозОперация КАК ХозОперация,
	|	ПоступлениеТоваров.ДокументОснование КАК ДокументОснование,
	|	ПоступлениеТоваров.Контрагент КАК Контрагент,
	|	ПоступлениеТоваров.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ПоступлениеТоваров.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПоступлениеТоваров.Ссылка КАК Сделка,
	|	ПоступлениеТоваров.СуммаДокумента КАК Сумма,
	|	ПоступлениеТоваров.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ПоступлениеТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеТоваров.КурсДокумента КАК КурсДокумента,
	|	ПоступлениеТоваров.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ПоступлениеТоваров.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровЗачетАвансов.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ПоступлениеТоваровЗачетАвансов.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.ПоступлениеТоваров.ЗачетАвансов КАК ПоступлениеТоваровЗачетАвансов
	|ГДЕ
	|	ПоступлениеТоваровЗачетАвансов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если Не ДоступноФормированиеРасчетовСКонтрагентами(ДвиженияДокумента.ДляПроведения) Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАванса.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАванса.ДокументАванса";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	КопияЗаказов = ДвиженияДокумента.ДляПроведения.Заказы.Скопировать();
	КопияЗаказов.Свернуть("ЗаказПоставщику");
	СписокЗаказов = КопияЗаказов.ВыгрузитьКолонку("ЗаказПоставщику");
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,
		Ложь,
		СписокЗаказов);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("РасчетыСПокупателем", Ложь);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	ОчиститьРеквизитыПоХозОперации(Объект);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Проверка склада
	Если (Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия) И (Объект.СкладКомпании.Розничный) Тогда
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеПересчитыватьСтроку", Строка.НеПересчитыватьСтроку);
	
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПараметрыДействия.Удалить("НеПересчитыватьСтроку");
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.СпособРаспределенияЗаказов) Тогда
		
		Строка.СпособРаспределенияЗаказов = Перечисления.СпособыРаспределенияЗаказов.СпособРаспределенияЗаказовПоУмолчанию(Объект.ПодразделениеКомпании);
		
	КонецЕсли;
	
	ОчиститьРеквизитыПоХозОперации(Объект, Строка);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеПересчитыватьСтроку", Строка.НеПересчитыватьСтроку);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	ПараметрыДействия.Удалить("НеПересчитыватьСтроку");
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеПересчитыватьСтроку", Строка.НеПересчитыватьСтроку);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПараметрыДействия.Удалить("НеПересчитыватьСтроку");
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентНаценкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

Процедура ТоварыЯчейкаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Ячейка = Строка.Ячейка;
	
	Если Не ЗначениеЗаполнено(Ячейка) 
		ИЛИ НЕ УчетныеПолитикиСервер.Значение("ЗапретПриходаРазныхТоваровВОднуЯчейку", Объект.Дата, Объект.СкладКомпании)
		ИЛИ ЯчейкаПоУмолчаниюДляНоменклатуры(Объект.СкладКомпании, Строка.Номенклатура, Ячейка)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// проверим на наличие одинаковых ячеек.
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если Строка = СтрокаТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Ячейка = Строка.Ячейка И СтрокаТаблицы.Номенклатура <> Строка.Номенклатура Тогда
			
			Строка.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
			АртикулНоменклатуры = "";
			
			Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				АртикулНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "Артикул");
			КонецЕсли;
			
			ТекстПредупреждения = НСтр(
			"ru = 'Ячейка <%1> уже указана в строке %2. Нельзя приходовать номенклатуру <%3 %4> на эту ячейку.'"
			);
			
			ТекстПредупреждения = СтрШаблон(
			ТекстПредупреждения,
			СокрЛП(Ячейка.Код),
			СтрокаТаблицы.НомерСтроки,
			АртикулНоменклатуры,
			Строка.Номенклатура
			);
			
			ПараметрыДействия.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если НЕ ЯвляетсяЯчейкойПоУмолчанию(Объект, Строка, ПараметрыДействия) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыДействия.НесколькоСовпадений Тогда
		
		Строка.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
		
		АртикулНоменклатуры = "";
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			АртикулНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "Артикул");
		КонецЕсли;
		
		ТекстПредупреждения = НСтр("ru = 'Ячейка <%1> уже указана ячейкой по умолчанию для нескольких номенклатур.
			| Нельзя приходовать номенклатуру <%2 %3> на эту ячейку.'");
		
		ТекстПредупреждения = СтрШаблон(
			ТекстПредупреждения,
			СокрЛП(Ячейка.Код),
			АртикулНоменклатуры,
			Строка.Номенклатура
		);
		
		ПараметрыДействия.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	ОстатокНаСкладе = ПолучитьОстатокТовараПоЯчейке(Объект, Ячейка, ПараметрыДействия);
	
	Если ОстатокНаСкладе > 0 Тогда
		
		Строка.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
		
		АртикулНоменклатуры = "";
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			АртикулНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "Артикул");
		КонецЕсли;
		
		ТекстПредупреждения = НСтр("ru = 'Ячейка <%1> уже указана для номенклатуры <%2 %3>,
			|имеются остатки на складе в количестве <%4 %5>. Нельзя приходовать номенклатуру <%6 %7> на эту ячейку.'");
		
		ТекстПредупреждения = СтрШаблон(
			ТекстПредупреждения,
			СокрЛП(Ячейка.Код),
			ПараметрыДействия.Артикул,
			ПараметрыДействия.НоменклатураВЯчейке,
			ОстатокНаСкладе,
			ПараметрыДействия.ЕдиницаИзмерения,
			АртикулНоменклатуры,
			Строка.Номенклатура
		);
		
		ПараметрыДействия.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Ячейка <%1> указана для номенклатуры <%2 %3>.
			|Остатков на складе нет. Очистить ячейку в карточке номенклатуры <%2 %3>?'");
		
		ТекстВопроса = СтрШаблон(
			ТекстВопроса,
			СокрЛП(Ячейка.Код),
			ПараметрыДействия.Артикул,
			ПараметрыДействия.НоменклатураВЯчейке);
		
		ПараметрыДействия.Вставить("ТекстВопроса", ТекстВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Обработчик = ?(
		ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента"),
		"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати",
		""
	);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПоступлениеТоваров",
		"ПФ_MXL_ПоступлениеТоваров",
		НСтр("ru = 'Приходная накладная'"),
		СсылкаНаДокумент,
		Обработчик
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПоступлениеТоваров",
		"ПФ_MXL_РаскладочныйЛист",
		НСтр("ru = 'Раскладочный лист'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ1",
		НСтр("ru = 'ТОРГ-1 (Акт о приемке товара)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ2",
		НСтр("ru = 'ТОРГ-2 (Акт о расхождении по количеству и качеству)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ4",
		НСтр("ru = 'ТОРГ-4 (Акт о приемке товаров без счета поставщика)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная за поставщика)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ13",
		НСтр("ru = 'ТОРГ-13 (Накладная на внутреннее перемещение)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМ11",
		"ПФ_MXL_М4",
		НСтр("ru = 'М-4 (Приходный ордер)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент
	);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПоступлениеТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПоступлениеТоваров",
															НСтр("ru = 'Приходная накладная'"),
															ПечатьПоступлениеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РаскладочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РаскладочныйЛист",
															НСтр("ru = 'Раскладочный лист'"),
															ПечатьРаскладочныйЛист(МассивОбъектов, ОбъектыПечати));
															
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьПоступлениеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваров_ПоступлениеТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваров.ПФ_MXL_ПоступлениеТоваров");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент,, ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
			
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладКомпании,, ДополнительныеПараметры);
		
		// Выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;КоличествоПозиций = 0;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Заполняем ТЧ
		ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
		// Пересчет сумм по выбранной валюте.
		Если ВыборкаТабличнойЧасти.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
			ДокументОбъектСтруктура.Документ = Документ;
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Выводим только строки, где количество единиц номенклатурной позиции больше 0.
			Если СтрокаТЧ.Количество > 0 Тогда
				ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
					УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
				
				// Доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество()-1 Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
					ТабличныйДокумент,
					ОбластьСтрока,
					ОбластьШапкаТаблицы,
					ОбластьИтогоПоСтранице,
					НомерСтраницы,
					СтруктураИтоговПоСтранице,
					Документ,
					мсвДопОбластиПодвала);
				
				// Инициализация итогов по странице.
				Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
					СтруктураИтоговПоСтранице = Новый Структура;
					СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
					СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
					СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
					НомерСтраницыПредыдущий   = НомерСтраницы;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
				// Добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
				
				// Увеличиваем счетчик номенклатурных позиций.
				КоличествоПозиций = КоличествоПозиций + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(
				ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Заполнение подвала и итогов.
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП + КоличествоПозиций
			+ Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, ВалютаПечатногоДокумента);
		
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ОтпустилКонтрагент", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьРаскладочныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваров_РаскладочныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		// Новый документ должен быть на отдельной странице.
		Если НЕ ПервыйДокумент Тогда 
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваров.ПФ_MXL_РаскладочныйЛист");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = Новый Структура("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		
		// Вывод заголовка документа.
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Раскладочный лист'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент,, ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
			
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладКомпании,, ДополнительныеПараметры);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		// Перебор строк
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Номенклатурные позиции, где количество = 0, не выводим.
			Если СтрокаТЧ.Количество > 0 Тогда
				// Заполняем данные строки.
				СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
				СтруктураСтроки.Вставить("Ячейка");
				// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
				ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
				СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
				ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
				
				// Доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
					мсвДопОбластиПодвала);
				
				// Инициализация итогов по странице.
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура();
					НомерСтраницыПред		  = НомерСтраницы;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
				// Добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
			КонецЕсли;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Заполнение подвала и итогов.
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ОтпустилКонтрагент", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
	
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРаскладочныйЛист()

Функция ПолучитьДанныеДляПечатиТОРГ1(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	     
	// данные документа
	ДанныеОбъекта.Вставить("Организация"       		, Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("СкладКомпании"  		, Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Контрагент"  			, Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ПолучитьТабличнуюЧастьДокумента(Объект));
	ДанныеОбъекта.Вставить("НеВыводитьНоменклатуруСНулевымКоличеством", Истина);
	ДанныеОбъекта.Вставить("ВхДокНомер");
	ДанныеОбъекта.Вставить("ВхДокДата");
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Производитель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СпособДоставки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтправления);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МОЛ);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель"       	, ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Производитель"            	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Производитель", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("СтраховаяКомпания"  		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("СопроводительныеДокументы" 	, "");
	ДанныеОбъекта.Вставить("СпособДоставки"            	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СпособДоставки", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ДатаОтправления"         	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтправления", ЗначенияСвойствОбъекта));	
	ДанныеОбъекта.Вставить("МОЛ"						, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("МОЛ", ЗначенияСвойствОбъекта,Объект.СкладКомпании.МОЛ));
	ДанныеОбъекта.Вставить("ПредседательКомиссии" 		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Руководитель"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;	 
КонецФункции 

Функция ПолучитьДанныеДляПечатиТОРГ2(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	     
	// данные документа
	ДанныеОбъекта.Вставить("Организация"       		, Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("СкладКомпании"  		, Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Поставщик"  			, Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"                 , Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("НомерДоговора"          , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("ДатаДоговора"           , Объект.ДоговорВзаиморасчетов.ДатаНачала);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Объект.Товары);
	ДанныеОбъекта.Вставить("ВхДокНомер");
	ДанныеОбъекта.Вставить("ВхДокДата");
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Производитель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СпособДоставки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтправления);
		
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель"       , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("СтраховаяКомпания"      , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Производитель"       	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Производитель", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("СпособДоставки"       	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СпособДоставки", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ДатаОтправления"       	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтправления", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Руководитель"        	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер"     	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("ПредседательКомиссии" 	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1"     		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2"     		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;	 
КонецФункции 

Функция ПолучитьДанныеДляПечатиТОРГ4(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	     
	// данные документа
	ДанныеОбъекта.Вставить("Организация"       		, Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("СкладКомпании"  		, Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Поставщик"  			, Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ПолучитьТабличнуюЧастьДокумента(Объект));
	ДанныеОбъекта.Вставить("НеВыводитьНоменклатуруСНулевымКоличеством", Истина);
	ДанныеОбъекта.Вставить("ВхДокНомер");
	ДанныеОбъекта.Вставить("ВхДокДата");
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МОЛ);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель"       	, ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("МОЛ"						, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("МОЛ", ЗначенияСвойствОбъекта,Объект.СкладКомпании.МОЛ));
	ДанныеОбъекта.Вставить("ПредседательКомиссии" 		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("Руководитель"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции 

Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"           , Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"       , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"         , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                  , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"     , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ПолучитьТабличнуюЧастьДокумента(Объект));
	ДанныеОбъекта.Вставить("НеВыводитьНоменклатуруСНулевымКоличеством", Истина);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании" , Неопределено);
	ДанныеОбъекта.Вставить("ОснованиеДата"         , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"        , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"             , Объект.Контрагент.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента", "");
	ДанныеОбъекта.Вставить("ВхДокДата"             , Объект.ВхДокДата);
	ДанныеОбъекта.Вставить("ВхДокНомер"            , Объект.ВхДокНомер);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
		
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Поставщик", УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
		"ПоставщикКонтрагент", ЗначенияСвойствОбъекта, Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("Плательщик",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта, Объект.Организация));

	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Организация)); 
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО"   , ?(ТипЗнч(ДанныеОбъекта.Грузополучатель) = Тип("СправочникСсылка.ПодразделенияКомпании"),
				ДанныеОбъекта.Грузополучатель.Организация.КодПоОКПО, ДанныеОбъекта.Грузополучатель.КодПоОКПО));
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"         , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"        , ДанныеОбъекта.Плательщик.КодПоОКПО);
	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил")); 
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиТОРГ13(Объект) Экспорт
	// получаем табличную часть товаров
	ТЧТовары  = ПолучитьТабличнуюЧастьДокумента(Объект);
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"        	, Объект.КурсДокумента); 
	ДанныеОбъекта.Вставить("КурсВалютыУпр"       	, Объект.КурсВалютыУпр); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("Розничный"       		, Ложь);
	ДанныеОбъекта.Вставить("ТребуетсяПересчет"      , Ложь);
	ДанныеОбъекта.Вставить("НеВыводитьНоменклатуруСНулевымКоличеством", Истина);
	
	// Заполним сумму
	Для Каждого СтрокаТовара Из ТЧТовары Цикл
		СтрокаТовара.Сумма = СтрокаТовара.СуммаВсего;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("КоличествоСтрок"  		, ТЧТовары.Количество());
	ДанныеОбъекта.Вставить("ТаблицаСуммСписания"  	, ТЧТовары);	
	ДанныеОбъекта.Вставить("Грузоотправитель"       , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Грузополучатель"        , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.СкладКомпании));
	ДанныеОбъекта.Вставить("Отпустил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ПоступлениеТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ПоступлениеТоваровТовары.Количество) КАК Количество,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоступлениеТоваровТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ПоступлениеТоваровТовары.СуммаРозничная
	|			ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего
	|		КОНЕЦ) КАК Цена,
	|	МАКСИМУМ(ПоступлениеТоваровТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоступлениеТоваровТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ПоступлениеТоваровТовары.СуммаРозничная * ПоступлениеТоваровТовары.СтавкаНДС.Ставка / (100 + ПоступлениеТоваровТовары.СтавкаНДС.Ставка)
	|			ИНАЧЕ ПоступлениеТоваровТовары.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка В(&МассивДокументов)
	|	И ПоступлениеТоваровТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровТовары.Номенклатура,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваров.Организация КАК Организация,
	|	ПоступлениеТоваров.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПоступлениеТоваров.СкладКомпании КАК СкладКомпании,
	|	ПоступлениеТоваров.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ПоступлениеТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ПоступлениеТоваровТовары.Количество) КАК Количество,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоступлениеТоваровТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ПоступлениеТоваровТовары.СуммаРозничная
	|			ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего
	|		КОНЕЦ) КАК Цена,
	|	МАКСИМУМ(ПоступлениеТоваровТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоступлениеТоваровТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ПоступлениеТоваровТовары.СуммаРозничная * ПоступлениеТоваровТовары.СтавкаНДС.Ставка / (100 + ПоступлениеТоваровТовары.СтавкаНДС.Ставка)
	|			ИНАЧЕ ПоступлениеТоваровТовары.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка В(&МассивДокументов)
	|	И ПоступлениеТоваровТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровТовары.Номенклатура,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваров.Организация КАК Организация,
	|	ПоступлениеТоваров.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПоступлениеТоваров.СкладКомпании КАК СкладКомпании,
	|	ПоступлениеТоваров.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

Функция ПолучитьДанныеДляПечатиМ4(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);	
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВхДокНомер"             , Объект.ВхДокНомер);
	ДанныеОбъекта.Вставить("Контрагент"        		, Объект.Контрагент); 
	ДанныеОбъекта.Вставить("СкладКомпании"       	, Объект.СкладКомпании); 
	ДанныеОбъекта.Вставить("ЦенаВключаетНДС"  		, Объект.ТипЦен.ЦенаВключаетНДС);
	ДанныеОбъекта.Вставить("Товары"  				, ПолучитьТабличнуюЧастьДокумента(Объект));
	ДанныеОбъекта.Вставить("НеВыводитьНоменклатуруСНулевымКоличеством", Истина);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	ДанныеОбъекта.Вставить("СтраховаяКомпания"      , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Отпустил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));

	Возврат ДанныеОбъекта;

КонецФункции // ПечатьМ4()

Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДокументФактура = Документы.СчетФактураПолученный.НайтиПоРеквизиту("ДокументОснование", Объект.Ссылка);
	// Сформируем статус документа
	Если ДокументФактура <> Документы.СчетФактураПолученный.ПустаяСсылка() И НЕ ДокументФактура.ПометкаУдаления Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
	КонецЕсли;

	ДанныеОбъекта.Вставить("Номер"                 , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("Организация"           , Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"       , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"         , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                  , ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"     , ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов" , ДокументОбъект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("Статус"				   , Статус);   
	ДанныеОбъекта.Вставить("ТипЦен"				   , Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Товары" 			   , Объект.Товары.Выгрузить());
	ДанныеОбъекта.Вставить("ХозОперация"		   , ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("Покупатель"		   	   , ДокументОбъект.Организация); 
	ДанныеОбъекта.Вставить("ДокументОтгрузки", Объект.Ссылка);
	
	ДанныеОбъекта.Вставить("ПодразделениеКомпании" , ДокументОбъект.ПодразделениеКомпании);
	
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УчетПрослеживаемыхТоваровСервер.РНПТВДокументе(Объект.Ссылка));

	ДанныеОбъекта.Вставить("Менеджер", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "МенеджерКонтрагента", "Менеджер", Объект.Контрагент));
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил")); 
	
	ДанныеОбъекта.Вставить("Грузополучатель" , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.ПодразделениеКомпании));
	ДанныеОбъекта.Вставить("Грузоотправитель", ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить(
			"НомерИсправления", 
			?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта" , "" );
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
		
	ДанныеОбъекта.Вставить(
		"Поставщик", 
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
			"ПоставщикКонтрагент", 
			ЗначенияСвойствОбъекта, 
			Объект.Контрагент
		)
	);
	ДанныеОбъекта.Вставить(
		"Плательщик"
		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
			"Плательщик", 
			ЗначенияСвойствОбъекта, 
			Объект.Организация
		)
	);
	ДанныеОбъекта.Вставить(
		"Доверенность", 
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
			"Доверенность", 
			ЗначенияСвойствОбъекта
		)
	);
	ДанныеОбъекта.Вставить(
		"ДатаОтгрузки", 
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
			"ДатаОтгрузки", 
			ЗначенияСвойствОбъекта
		)
	);
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции 

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПоступлениеТоваров");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ВыборКонтрагента = ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборКонтрагента.ВыборСсылки = "Справочник.Контрагенты.ФормаСписка";
	ВыборКонтрагента.Обязательный = Истина;
	ВыборКонтрагента.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать контрагента.'");
	
	Команда = ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить заказами поставщику'");
	Команда.Идентификатор	= "ТоварыЗаполнитьЗаказамиПоставщику";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", ВыборКонтрагента);
	
	ВыборГруппыНоменклатуры = ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборГруппыНоменклатуры.ВыборСсылки = "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборГруппыНоменклатуры.Обязательный = Истина;
	ВыборГруппыНоменклатуры.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");

	Команда = ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление = НСтр("ru = 'Заполнить по группе номенклатуры'");
	Команда.Идентификатор = "ТоварыЗаполнитьПоГруппеНоменклатуры";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборГруппыНоменклатуры);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЗаказамиПоставщику.Видимость",    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЗаказамиПоставщику.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция ТоварыЗаполнитьЗаказамиПоставщику(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Контрагент = ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток) КАК ЗаказаноОстаток,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	               |	СУММА(ЗаказыПоставщикамОстатки.СуммаОстаток) КАК СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	               |			&Момент,
	               |			Контрагент = &Контрагент
	               |				И ЗаказПоставщику.ПодразделениеКомпании = &ПодразделениеКомпании) КАК ЗаказыПоставщикамОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыПоставщикамОстатки.Номенклатура,
	               |	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент",                ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("Контрагент",            Объект.Контрагент);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	Выборка    = Запрос.Выполнить().Выбрать();
	ВсегоСтрок = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                            = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество=Выборка.ЗаказаноОстаток;
		ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.СуммаВсего = Выборка.СуммаОстаток;
		ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьЗаказамиПоставщику()

// Обработчик заполнения документа по группе номенклатуры
//
Функция ТоварыЗаполнитьПоГруппеНоменклатуры(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ЗаполнениеДокументовСервер.ПолучитьТоварыПоГруппеНоменклатуры(Объект, ПараметрыЗаполнения);
	
	Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовар Из Результат Цикл
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовар.Номенклатура;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоГруппеНоменклатуры()

#КонецОбласти

Функция ЯчейкаПоУмолчаниюДляНоменклатуры(СкладКомпании, Номенклатура, Ячейка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЯчейкиХраненияПоУмолчанию.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ЯчейкиХраненияПоУмолчанию КАК ЯчейкиХраненияПоУмолчанию
	|ГДЕ
	|	ЯчейкиХраненияПоУмолчанию.СкладКомпании = &СкладКомпании
	|	И ЯчейкиХраненияПоУмолчанию.Номенклатура = &Номенклатура
	|	И ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения = &Ячейка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПоступлениеТоваров - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
	
КонецФункции

// Формирование состава табличной части.
//
// Параметры:
//
// Возвращаемое значение:
//	- ТЧТовары                  - Таблица значений               - табличная часть товаров без строк с 0-м количеством.
//
Функция ПолучитьТабличнуюЧастьДокумента(Объект)
	// выгружает табличную часть
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтроки,
	               |	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
				   |	ПоступлениеТоваровТовары.Содержание КАК Содержание,
	               |	ПоступлениеТоваровТовары.Количество КАК Количество,
	               |	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПоступлениеТоваровТовары.Коэффициент КАК Коэффициент,
	               |	ПоступлениеТоваровТовары.КоличествоБазовое КАК КоличествоБазовое,
	               |	ПоступлениеТоваровТовары.Цена КАК Цена,
	               |	ПоступлениеТоваровТовары.Сумма КАК Сумма,
	               |	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ПоступлениеТоваровТовары.СуммаВсего КАК СуммаВсего,
	               |	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
	               |	ПоступлениеТоваровТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	               |	ПоступлениеТоваровТовары.ГТД КАК ГТД,
	               |	ПоступлениеТоваровТовары.ПроцентНаценки КАК ПроцентНаценки,
	               |	ПоступлениеТоваровТовары.ЦенаРозничная КАК ЦенаРозничная,
	               |	ПоступлениеТоваровТовары.СуммаРозничная КАК СуммаРозничная,
	               |	ПоступлениеТоваровТовары.СпособРаспределенияЗаказов КАК СпособРаспределенияЗаказов,
	               |	ПоступлениеТоваровТовары.Ячейка КАК Ячейка,
	               |	ПоступлениеТоваровТовары.ЗаказНаряд КАК ЗаказНаряд,
	               |	ПоступлениеТоваровТовары.КоличествоПоНакладной КАК КоличествоПоНакладной,
	               |	ПоступлениеТоваровТовары.УдалитьНоменклатураПоставщика КАК УдалитьНоменклатураПоставщика,
	               |	ПоступлениеТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	               |	ПоступлениеТоваровТовары.НеПересчитыватьСтроку КАК НеПересчитыватьСтроку,
	               |	ПоступлениеТоваровТовары.Номенклатура.Артикул КАК Код,
	               |	ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	               |ГДЕ
	               |	ПоступлениеТоваровТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
   	
	// вернем результат
	Возврат Товары;
КонецФункции

#КонецОбласти

#КонецЕсли

