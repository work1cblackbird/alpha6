///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Поступление товаров"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Заполним из параметров элементы формы
	Контрагент                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Контрагент",                 Справочники.Контрагенты.ПустаяСсылка());
	СпособРаспределенияЗаказов = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособРаспределенияЗаказов", ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.ВыборочноеИАвтоматическое"));
	Номенклатура               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Номенклатура",               Справочники.Номенклатура.ПустаяСсылка());
	ХарактеристикаНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПодразделениеКомпании      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании",      Справочники.ПодразделенияКомпании.ПустаяСсылка());
	Организация                = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Организация",                Справочники.Организации.ПустаяСсылка());
	ДокументОснование          = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументОснование",          Неопределено);
	РаспределениеТовара        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РаспределениеТовара",        Неопределено);
	Товары                     = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Товары",                     Неопределено);
	Проведен                   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Проведен",                   Ложь);
	ДатаДокумента              = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДатаДокумента",              ТекущаяДатаСеанса());
	
	Если Проведен Тогда
		Момент = Новый МоментВремени(ДатаДокумента);
	Иначе
		Момент = Новый Граница(ДатаДокумента, ВидГраницы.Исключая);
	КонецЕсли;
	
	Если РаспределениеТовара <> Неопределено И Товары <> Неопределено Тогда
		КопияРаспределениеТовара = РаспределениеТовара.Выгрузить(,"ЗаказПоставщика, ЗаказПокупателя, Количество");
		КопияРаспределениеТовара.Очистить();
		ОтборСтрок = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Номенклатура, ХарактеристикаНоменклатуры);
		НайденныеСтроки = РаспределениеТовара.НайтиСтроки(ОтборСтрок);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = КопияРаспределениеТовара.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		НайденныеОдинаковыеСтроки = Товары.НайтиСтроки(ОтборСтрок);
		КоличествоБазовое = 0;
		Для Каждого ТекСтрока Из НайденныеОдинаковыеСтроки Цикл
			КоличествоБазовое = КоличествоБазовое + ТекСтрока.КоличествоБазовое;
		КонецЦикла;
		Количество            = КоличествоБазовое;
		РаспределениеРезервов.Загрузить(КопияРаспределениеТовара);
	КонецЕсли;
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВладелецФормы = Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Запрещен самостоятельный вызов.'"),,
			НСтр("ru = 'Данная форма используется другими объектами конфигурации.'"),
			БиблиотекаКартинок.Предупреждение32,
			СтатусОповещенияПользователя.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.Заказы.                        ТолькоПросмотр = (СпособРаспределенияЗаказов=ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	Элементы.ДеревоРаспределений.           ТолькоПросмотр = (СпособРаспределенияЗаказов=ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	Элементы.ДеревоРаспределенийСнятьВсе.   Доступность    = (СпособРаспределенияЗаказов<>ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	Элементы.ДеревоРаспределенийПометитьВсе.Доступность    = (СпособРаспределенияЗаказов<>ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	
	ОтобразитьИтоговоеКоличествоПоЗаказам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвтоматическоеРаспределениеПриИзменении(Элемент)
	
	Элементы.Заказы.                        ТолькоПросмотр = (СпособРаспределенияЗаказов=ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	Элементы.ДеревоРаспределений.           ТолькоПросмотр = (СпособРаспределенияЗаказов=ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	Элементы.ДеревоРаспределенийСнятьВсе.   Доступность    = (СпособРаспределенияЗаказов<>ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	Элементы.ДеревоРаспределенийПометитьВсе.Доступность    = (СпособРаспределенияЗаказов<>ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое"));
	
	Если СпособРаспределенияЗаказов = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Выборочное") Тогда
		Для Каждого ТекСтрока Из ДеревоРаспределений.ПолучитьЭлементы() Цикл
			КоличествоВключенных = 0;
			Для Каждого ТекЗаказПокупателя Из ТекСтрока.ПолучитьЭлементы() Цикл
				Если ТекЗаказПокупателя.Использование = 1 Тогда
					КоличествоВключенных = КоличествоВключенных + 1;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоВключенных=0 Тогда
				ТекСтрока.Использование = 0;
			КонецЕсли;
		КонецЦикла;
		
		ПересчитатьРаспределениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ДеревоРаспределенийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтобразитьИтоговоеКоличествоПоЗаказам();
	ПересчитатьРаспределениеНаКлиенте(, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенийПриИзмененииФлажка(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРаспределений.ТекущиеДанные;
	ТекущиеДанные.Использование = ?(ТекущиеДанные.Использование = 2, 0, ТекущиеДанные.Использование);
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Использование = ТекущиеДанные.Использование = 1;
		РаспределитьОсталось = Количество - Распределено;
		Для Каждого ТекСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			Если Использование Тогда
				ТекСтрока.Количество = Мин(ТекСтрока.Заказано, РаспределитьОсталось);
				ТекСтрока.Использование = (ТекСтрока.Количество <> 0);
				РаспределитьОсталось = РаспределитьОсталось - ТекСтрока.Количество;
			Иначе
				ТекСтрока.Использование = ТекущиеДанные.Использование;
			КонецЕсли;
		КонецЦикла;
		Элементы.ДеревоРаспределений.Развернуть(Элементы.ДеревоРаспределений.ТекущаяСтрока, Истина);
	Иначе
		КоличествоВключенных = 0;
		Для Каждого ТекСтрока Из  ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если ТекСтрока.Использование = 1 Тогда
				КоличествоВключенных = КоличествоВключенных + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоВключенных=0 Тогда
			ТекущиеДанные.ПолучитьРодителя().Использование = 0;
		ИначеЕсли ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = КоличествоВключенных Тогда
			ТекущиеДанные.ПолучитьРодителя().Использование = 1;
		Иначе
			ТекущиеДанные.ПолучитьРодителя().Использование = 2;
		КонецЕсли;
		// Расчитаем количество для строки
		Если ТекущиеДанные.Использование = 1 Тогда
			ТекущиеДанные.Количество = 
				Мин(ТекущиеДанные.Заказано, Количество - Распределено);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьРаспределениеНаКлиенте(, Ложь);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаКлиенте
Процедура ДеревоРаспределенийКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРаспределений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установим количество в соответствии с логикой работы
	РаспределеноБезТекущейСтроки = 0;
	Для Каждого СтрокаЗаказаПоставщика Из ДеревоРаспределений.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаЗаказаПокупателя Из СтрокаЗаказаПоставщика.ПолучитьЭлементы() Цикл
			Если СтрокаЗаказаПокупателя = ТекущиеДанные Тогда
				Продолжить;
			КонецЕсли;;
			РаспределеноБезТекущейСтроки = РаспределеноБезТекущейСтроки + СтрокаЗаказаПокупателя.Количество;
		КонецЦикла;
	КонецЦикла;
	
	ТекущиеДанные.Количество = 
		Мин(ТекущиеДанные.Количество, ТекущиеДанные.Заказано, Количество - РаспределеноБезТекущейСтроки);
	
	// Пересчитаем только распределено
	ПересчитатьРаспределениеНаКлиенте(, Ложь);
	ОтобразитьИтоговоеКоличествоПоЗаказам();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельДеревоРаспределенийПометитьВсе(Кнопка)
	
	Использование = ?(СтрНайти(Кнопка.Имя, "ПометитьВсе"), 1, 0);
	Для Каждого ТекПоля Из ДеревоРаспределений.ПолучитьЭлементы() Цикл
		Если Использование = 1 Тогда
			ТекПоля.Использование = 1;
		Иначе
			ТекПоля.Использование = 0;
		КонецЕсли;
		Для Каждого ТекПоле Из ТекПоля.ПолучитьЭлементы() Цикл
			ТекПоле.Использование = Использование;
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьРаспределениеНаКлиенте(Использование = 1);
	ОтобразитьИтоговоеКоличествоПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Кнопка)
	
	Результат = Новый Структура;
	Результат.Вставить("СпособРаспределенияЗаказов", СпособРаспределенияЗаказов);
	Если СпособРаспределенияЗаказов <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое") Тогда
		Для Каждого ТекЗаказаПоставщика Из ДеревоРаспределений.ПолучитьЭлементы() Цикл
			Если ТекЗаказаПоставщика.Использование = 0 Тогда
				Продолжить;
			КонецЕсли;
			Счетчик = 0;
			Для Каждого ТекСтрока Из ТекЗаказаПоставщика.ПолучитьЭлементы() Цикл
				Если ТекСтрока.Использование = 0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = РаспределениеТоваров.Добавить();
				НоваяСтрока.ЗаказПоставщика = ТекЗаказаПоставщика.Заказ;
				НоваяСтрока.ЗаказПокупателя = ТекСтрока.Заказ;
				НоваяСтрока.Количество      = ТекСтрока.Количество;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			Если Счетчик = 0 Тогда
				НоваяСтрока = РаспределениеТоваров.Добавить();
				НоваяСтрока.ЗаказПоставщика = ТекЗаказаПоставщика.Заказ;
				НоваяСтрока.Количество      = ТекЗаказаПоставщика.Количество;
			КонецЕсли;
		КонецЦикла;
		Результат.Вставить("РаспределениеТовара", РаспределениеТоваров);
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Настройка условного оформления формы
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоРаспределений");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределений.ЭтоЗаказПокупателя");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,,Ложь));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240, 248, 255));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоРаспределенийКоличество");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределений.Количество");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРаспределений.Заказано");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоРаспределений.КоличествоТекст"));
	
КонецПроцедуры // УстановитьУсловноеОформление()

&НаКлиенте
Процедура ОтобразитьИтоговоеКоличествоПоЗаказам()
	
	ШаблонТекста = НСтр("ru = '%1 из %2'");
	Для Каждого ТекСтрока Из ДеревоРаспределений.ПолучитьЭлементы() Цикл
		ТекСтрока.КоличествоТекст = СтрШаблон(ШаблонТекста, Строка(ТекСтрока.Заказано), Строка(ТекСтрока.Количество));
		Для Каждого ТекСтрокаГруппы Из ТекСтрока.ПолучитьЭлементы() Цикл
			ТекСтрокаГруппы.КоличествоТекст = СтрШаблон(ШаблонТекста, Строка(ТекСтрокаГруппы.Количество), Строка(ТекСтрокаГруппы.Заказано));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура ПересчитатьРаспределение()
	Распределено = 0;
	Для Каждого ТекСтрокаРодитель Из ДеревоРаспределений.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтрокаРодитель.Использование Тогда
			Продолжить;
		КонецЕсли;
		Счетчик = 0;
		ТекСтрокаРодитель.Заказано = 0;
		Для Каждого ТекСтрока Из ТекСтрокаРодитель.ПолучитьЭлементы() Цикл
			Если НЕ ТекСтрока.Использование Тогда
				Продолжить;
			КонецЕсли;
			Распределено = Распределено + ТекСтрока.Количество;
			ТекСтрокаРодитель.Заказано = ТекСтрокаРодитель.Заказано + ТекСтрока.Количество;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		Если Счетчик = 0 Тогда
			Распределено = Распределено + ТекСтрокаРодитель.Количество;
			ТекСтрокаРодитель.Заказано = ТекСтрокаРодитель.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРаспределениеНаКлиенте(СнятиеПометки = Ложь, ПересчетКоличества = Истина)
	Распределено = 0;
	Для Каждого ТекСтрокаРодитель Из ДеревоРаспределений.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтрокаРодитель.Использование Тогда
			ТекСтрокаРодитель.Заказано = 0;
			
			Для Каждого ТекСтрока Из ТекСтрокаРодитель.ПолучитьЭлементы() Цикл
				ТекСтрока.Количество	= 0;
				ТекСтрока.Использование = Ложь;
			КонецЦикла;

			Продолжить;
		КонецЕсли;
		Счетчик = 0;
		ТекСтрокаРодитель.Заказано = 0;
		ВсеЗаказыНеРаспределены = Истина;
		Для Каждого ТекСтрока Из ТекСтрокаРодитель.ПолучитьЭлементы() Цикл
			Если НЕ ТекСтрока.Использование Тогда
				ТекСтрока.Количество = 0;
				Продолжить;
			ИначеЕсли СнятиеПометки И Распределено >= Количество Тогда
				ТекСтрока.Количество = 0;
				ТекСтрока.Использование = Ложь;
				Продолжить;
			КонецЕсли;
			ВсеЗаказыНеРаспределены = Ложь;
			Если ПересчетКоличества Тогда
				НеРаспределено = Количество - Распределено;
				ТекСтрока.Количество 			= Мин(НеРаспределено, ТекСтрока.Заказано);
			КонецЕсли;
			ТекСтрокаРодитель.Заказано 		= ТекСтрокаРодитель.Заказано + ТекСтрока.Количество;
			
			Распределено 					= Распределено + ТекСтрока.Количество;
			Счетчик 						= Счетчик + 1;
		КонецЦикла;
		Если Счетчик = 0 Тогда
			Распределено = Распределено + ТекСтрокаРодитель.Количество;
			ТекСтрокаРодитель.Заказано = ТекСтрокаРодитель.Количество;
		КонецЕсли;
		
		Если СнятиеПометки И ВсеЗаказыНеРаспределены Тогда
			ТекСтрокаРодитель.Использование = Ложь;
		КонецЕсли;
		Если Распределено > Количество Тогда
			ТекСтрокаРодитель.Заказано 		= 0;
			ТекСтрокаРодитель.Использование = Ложь;
			
			Для Каждого ТекСтрока Из ТекСтрокаРодитель.ПолучитьЭлементы() Цикл
				ТекСтрока.Количество	= 0;
				ТекСтрока.Использование = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	
	ЗакрытиеЗаказовПоПодразделению = УчетныеПолитикиСервер.Значение(
		"ЗакрытиеЗаказовПоПодразделению",
		?(ТипЗнч(Момент)= Тип("МоментВремени"),Момент.Дата, Момент.Значение),	
		ПодразделениеКомпании
	);
	
	ТекстОтбора = ?(ЗакрытиеЗаказовПоПодразделению, "
		|	И (ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказПоставщику).ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании))
		|	И (ЗаказыРаспределениеОстатки.ЗаказПокупателя.ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании))", "");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
		|	РаспределениеРезервов.ЗаказПоставщика КАК ЗаказПоставщика,
		|	РаспределениеРезервов.ЗаказПокупателя КАК ЗаказПокупателя,
		|	РаспределениеРезервов.Количество КАК Количество
		|ПОМЕСТИТЬ РаспределениеРезервов
		|ИЗ
		|	&РаспределениеРезервов КАК РаспределениеРезервов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъединенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ОбъединенныйЗапрос.ЗаказПокупателя.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ОбъединенныйЗапрос.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
		|			ТОГДА ОбъединенныйЗапрос.ЗаказПокупателя.Контрагент
		|		ИНАЧЕ ОбъединенныйЗапрос.ЗаказПокупателя.ПодразделениеПолучатель
		|	КОНЕЦ КАК Контрагент,
		|	ОбъединенныйЗапрос.ЗаказПоставщика КАК ЗаказПоставщика,
		|	ВЫБОР
		|		КОГДА ОбъединенныйЗапрос.ЗаказПоставщика = &ДокументОснование
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет,
		|	МАКСИМУМ(ОбъединенныйЗапрос.ЗаказПоставщикаДата) КАК ЗаказПоставщикаДата,
		|	МАКСИМУМ(ОбъединенныйЗапрос.Использование) КАК Использование,
		|	СУММА(ОбъединенныйЗапрос.Количество) КАК Количество,
		|	СУММА(ОбъединенныйЗапрос.Заказано) КАК Заказано
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИСТИНА КАК Использование,
		|		РаспределениеРезервов.ЗаказПокупателя КАК ЗаказПокупателя,
		|		РаспределениеРезервов.ЗаказПоставщика КАК ЗаказПоставщика,
		|		ДАТАВРЕМЯ(1, 1, 1) КАК ЗаказПоставщикаДата,
		|		РаспределениеРезервов.Количество КАК Количество,
		|		0 КАК Заказано
		|	ИЗ
		|		РаспределениеРезервов КАК РаспределениеРезервов
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		ЗаказыРаспределениеОстатки.ЗаказПокупателя,
		|		ЗаказыРаспределениеОстатки.ЗаказПоставщика,
		|		ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказПоставщику).Дата,
		|		0,
		|		ЗаказыРаспределениеОстатки.КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.ЗаказыРаспределение.Остатки(
		|				&Момент,
		|				ЗаказПоставщика ССЫЛКА Документ.ЗаказПоставщику
		|					И Номенклатура = &Номенклатура
		|					И (ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|						ИЛИ ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ЗаказыРаспределениеОстатки
		|	ГДЕ
		|		ВЫРАЗИТЬ(ЗаказыРаспределениеОстатки.ЗаказПоставщика КАК Документ.ЗаказПоставщику).Контрагент = &Контрагент) КАК ОбъединенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединенныйЗапрос.ЗаказПокупателя,
		|	ОбъединенныйЗапрос.ЗаказПоставщика,
		|	ВЫБОР
		|		КОГДА ОбъединенныйЗапрос.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
		|			ТОГДА ОбъединенныйЗапрос.ЗаказПокупателя.Контрагент
		|		ИНАЧЕ ОбъединенныйЗапрос.ЗаказПокупателя.ПодразделениеПолучатель
		|	КОНЕЦ,
		|	ОбъединенныйЗапрос.ЗаказПокупателя.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	ЗаказПоставщикаДата
		|ИТОГИ
		|	МАКСИМУМ(Приоритет),
		|	МАКСИМУМ(ЗаказПоставщикаДата),
		|	МАКСИМУМ(Использование),
		|	СУММА(Заказано)
		|ПО
		|	ЗаказПоставщика";
	
	Запрос.УстановитьПараметр("Момент",                     Момент);
	Запрос.УстановитьПараметр("Номенклатура",               Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Контрагент",                 Контрагент);
	Запрос.УстановитьПараметр("РаспределениеРезервов",      РаспределениеРезервов.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОснование",          ДокументОснование);
	Запрос.УстановитьПараметр("ПодразделениеКомпании",      ПодразделениеКомпании);
	
	ВыборкаЗаказов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказов.Следующий() Цикл
		СтрокаЗаказа = ДеревоРаспределений.ПолучитьЭлементы().Добавить();
		СтрокаЗаказа.Использование      = ВыборкаЗаказов.Использование;
		СтрокаЗаказа.Заказ              = ВыборкаЗаказов.ЗаказПоставщика;
		СтрокаЗаказа.Количество         = ВыборкаЗаказов.Заказано;
		СтрокаЗаказа.ЭтоЗаказПокупателя = Ложь;
		СтрокаЗаказа.КоличествоТекст    = Строка(СтрокаЗаказа.Заказано) + " из " + Строка(СтрокаЗаказа.Количество);
		СтрокаЗаказа.НомерКартинки      = БиблиотекаКартинок.ЗаказПоставщику;
		Выборка = ВыборкаЗаказов.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СтрокаЗаказа.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Использование      = Выборка.Использование;
			НоваяСтрока.Заказ              = Выборка.ЗаказПокупателя;
			НоваяСтрока.Количество         = Выборка.Количество;
			НоваяСтрока.Заказано           = Выборка.Заказано;
			НоваяСтрока.ДокументОснование  = Выборка.ДокументОснование;
			НоваяСтрока.Контрагент         = Выборка.Контрагент;
			НоваяСтрока.ЭтоЗаказПокупателя = Истина;
			НоваяСтрока.КоличествоТекст    = Строка(НоваяСтрока.Количество) + " из " + Строка(НоваяСтрока.Заказано);
			НоваяСтрока.НомерКартинки      = БиблиотекаКартинок.ЗаказПокупателя;
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьРаспределение();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

