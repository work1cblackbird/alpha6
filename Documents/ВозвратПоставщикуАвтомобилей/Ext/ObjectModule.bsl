// Модуль объекта документа "Возврат поставщику автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ХозОперация) Тогда
		ХозОперация=Справочники.ХозОперации.ВозвратАвтомобилейПоставщику;
	КонецЕсли;
	
	// определим ХО.
	Если ДанныеЗаполнения = Неопределено Тогда
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
	Иначе
		// проставим партию
		Для Каждого СтрокаТЧ Из Автомобили Цикл
			СтрокаТЧ.Партия = ДанныеЗаполнения;
		КонецЦикла;
	КонецЕсли; 
	
	Товары.Очистить();
	Для каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаАвтомобиля.ИдентификаторАвтомобиля) Тогда
			СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
		КонецЕсли;
		Документы.ВозвратПоставщикуАвтомобилей.ДобавитьОборудованиеАвтомобиля(ЭтотОбъект, 
																	СтрокаАвтомобиля.Автомобиль, Истина);
	КонецЦикла; 
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// проверим заполненность ТЧ Автомобили
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если ПустаяСтрока(СтрокаАвтомобиля.ИдентификаторАвтомобиля) Тогда
			СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) И (ТипЗнч(ЭтотОбъект.ДокументОснование) <> Тип("СправочникСсылка.Контрагенты")) Тогда
		Если ЭтотОбъект.ДокументОснование.Контрагент <> ЭтотОбъект.Контрагент Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Контрагент документа основания отличается от контрагента текущего документа.'"), ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
		Если ЭтотОбъект.ДокументОснование.ДоговорВзаиморасчетов <> ЭтотОбъект.ДоговорВзаиморасчетов Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Договор взаиморасчетов документа основания отличается от договора взаиморасчетов текущего документа.'"), ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(
		ЭтотОбъект,
		Отказ,
		"Автомобили",
		"Автомобиль",
		Ложь
	);
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);

	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);   
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	//++ПЕРЕНОС ИЗ АЛЬФА5
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	//--ПЕРЕНОС ИЗ АЛЬФА5
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	// Обновим оборудование автомобилей
	Для каждого СтрокаАвтомобилей Из Автомобили Цикл
		Документы.ВозвратПоставщикуАвтомобилей.ДобавитьОборудованиеАвтомобиля(ЭтотОбъект,СтрокаАвтомобилей.Автомобиль,Ложь);
	КонецЦикла; 
	
	// Проверим корректность склада
	Если НЕ Отказ Тогда
		Если ЗначениеЗаполнено(СкладКомпании) Тогда
			Если СкладКомпании.Розничный Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Выбранный склад: ""%1"" является розничным! Выберите оптовый склад.'"),
						ЭтотОбъект.СкладКомпании
					),
					ЭтотОбъект
				);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;

	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	// Определим необходимость корректирующих проводок, для поддержания баланса по подразделениям.
	ПодразделениеСклад                 = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	БалансовыеПодразделенияНеРавны     = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// проведем взаиморасчеты
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			НаборЗаписейВзаиморасчеты.Сделка = ДокументОснование;
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
		Если ХозОперация=Справочники.ХозОперации.ВозвратАвтомобилейПоставщику Тогда
			// По взаиморасчетам всю сумму документа
			НаборЗаписейВзаиморасчеты.Сумма = Автомобили.Итог("СуммаВсего") + Товары.Итог("СуммаВсего");
		Иначе
			// Иначе "продадим" поставщику то оборудование, которое мы установили
			НаборЗаписейВзаиморасчеты.Сумма = Товары.Итог("СуммаВсего");
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
		Если НЕ Отказ Тогда
			НаборЗаписейВзаиморасчеты.Записать();
		КонецЕсли; 
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	Документы.ВозвратПоставщикуАвтомобилей.ИнициализироватьДанныеДокументаДляПроведения(
		ЭтотОбъект,
		ДополнительныеСвойства);
	Документы.ВозвратПоставщикуАвтомобилей.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	СуммаСписанияТоваров = Товары.Итог("СуммаВсего");
	Если СуммаСписанияТоваров <> 0
		И ВалютаДокумента <> Константы.ВалютаУправленческогоУчетаКомпании.Получить()
		И СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
			ЭтотОбъект,
			ЭтотОбъект);
		УсловиеОтбора = Новый Структура;
		УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
		УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
		СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
			РасчетыСКонтрагентами,
			УсловиеОтбора);
		СуммаТоваров = Новый ТаблицаЗначений;
		СуммаТоваров.Колонки.Добавить("СуммаВсего");
		НоваяСтрока = СуммаТоваров.Добавить();
		НоваяСтрока.СуммаВсего = СуммаСписанияТоваров;
		РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
			СуммаТоваров,
			СуммыПоРасчетамСКонтрагентом.СуммаУпр,
			СуммаДокумента);
		СуммаСписанияТоваров = НоваяСтрока.СуммаВсего;
	КонецЕсли;
	
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	// В случае если ведется баланс по подразделению передадим подразделение соответствующее корреспонденции.
	Если БалансВедетсяПоПодразделениям Тогда
		НаборЗаписейДоходыИРасходы.Подразделение=ДоговорВзаиморасчетов.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
	НаборЗаписейДоходыИРасходы.Доход = СуммаСписанияТоваров;
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	Отказ = ПроверитьЗаказыНаАвтомобиль() ИЛИ Отказ;
	
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	НаборЗаписейОстаткиАвтомобилей=Движения.ОстаткиАвтомобилей;
	НаборЗаписейОстаткиАвтомобилей.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстаткиАвтомобилей.СкладКомпании=СкладКомпании;
	НаборЗаписейОстаткиАвтомобилей.ШапкаДокумента = ШапкаДокумента;
	НаборЗаписейОстаткиАвтомобилей.Партия="Партия";
	// НаборЗаписейОстаткиАвтомобилей.Сторно=Истина;
	Если ХозОперация=Справочники.ХозОперации.ВозвратАвтомобилейПоставщикуКомиссия Тогда
		НаборЗаписейОстаткиАвтомобилей.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
	ИначеЕсли ХозОперация=Справочники.ХозОперации.ВозвратАвтомобилейСОтветственногоХранения Тогда
		НаборЗаписейОстаткиАвтомобилей.СтатусПартии=Перечисления.СтатусыПартий.ТоварОтветственноеХранение;
	Иначе
		НаборЗаписейОстаткиАвтомобилей.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
	КонецЕсли; 
	Отказ=НЕ НаборЗаписейОстаткиАвтомобилей.ВозвратАвтомобилей(ВидДвиженияНакопления.Приход) ИЛИ Отказ;
	НаборЗаписейОстаткиАвтомобилей.Записать();
	
	// проведем партии товаров
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// Способ ведения не по подразделениям или балансовые подразделения равны то ничего не будем корректировать.
	Если БалансВедетсяПоПодразделениям И БалансовыеПодразделенияНеРавны Тогда
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ОбъединенныйЗапрос.СуммаУпр),0) КАК СуммаУпр
		|ИЗ (
		|ВЫБРАТЬ
		|	ЕСТЬNULL(-СУММА(ОстаткиАвтомобилей.СуммаУпр),0) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &Регистратор
		|	И ОстаткиАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр),0)
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Регистратор
		// |	И (НЕ КомплектацияАвтомобилей.Номенклатура ССЫЛКА Справочник.Номенклатура)
		|	И КомплектацияАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
		|) КАК ОбъединенныйЗапрос";
		Запрос.УстановитьПараметр("Регистратор",Ссылка);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаАвтомобилей = Выборка.СуммаУпр;
		Иначе
			СуммаАвтомобилей = 0;
		КонецЕсли; 
		// СуммаАвтомобилей = -(Движения.ОстаткиАвтомобилей.Итог("СуммаУпр")-
		// Движения.КомплектацияАвтомобилей.Итог("СуммаУпр"));
		Если СуммаАвтомобилей<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение = СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			НаборЗаписейДиР.Доход = СуммаАвтомобилей;
			Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;	
		КонецЕсли;
		
		Если ХозОперация=Справочники.ХозОперации.ВозвратАвтомобилейПоставщику Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Ложь;
			НаборЗаписейДиР.Доход = СуммаДокумента;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
		КонецЕсли;
	КонецЕсли;	
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	ТаблицаПрослеживаемыхТоваров = Документы.ВозвратПоставщикуАвтомобилей.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	Если НЕ Отказ Тогда
		
		// Запишем историю владельцев автомобилей
		Для Каждого ТекСтрока Из Автомобили Цикл
			
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				ТекСтрока.Автомобиль,
				Неопределено,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
				Дата,
				Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ВозвратПоставщикуАвтомобиля);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// двигаем границу последовательности автомобилей
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейПоставщикуКомиссия;
	ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейСОтветственногоХранения;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполненияНаОсновании_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Ввод остатков автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейПринятыхНаКомиссию Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейПоставщикуКомиссия;
	ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковАвтомобилейНаОтветственномХранении Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейСОтветственногоХранения;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Проверка наличия резервов на автомобиль
//
// Параметры
// Возвращаемое значение:
//   <Булево>   - Заказов на данный автомобиль нет.
//
Функция ПроверитьЗаказыНаАвтомобиль()
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("МоментВремени", МоментВремени());
	ДокументОбъектСтруктура.Вставить("Автомобили", Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.РезервыАвтомобиляПроверитьЗаказыНаАвтомобиль(ДокументОбъектСтруктура);
КонецФункции // ПроверитьЗаказыНаАвтомобиль()

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.Ссылка КАК ДокументПродажи,
	|	Док.СуммаДокумента КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей КАК Док
	|
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

// Формирует движения документа по партионным регистрам
// Возвращает Истина - все хорошо, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		
	// Определим необходимость корректирующих проводок для поддержания баланса по подразделениям.
	ПодразделениеСклад                 = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны     = (ПодразделениеДоговорВзаиморасчетов <> ПодразделениеСклад);
		
	// Если было отложенное проведение по партиям, то :
	// Очистим возможные движения по регистру комплектации автомобилей. 
	НаборЗаписейПартионногоРегистра=РегистрыНакопления.КомплектацияАвтомобилей.СоздатьНаборЗаписей();
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение = ШапкаДокумента.Ссылка;
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование = Истина;
	НаборЗаписейПартионногоРегистра.Записать();
	
	// Проверим, если подразделение проводиться по партиям "отложено", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям = Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ШапкаДокумента;
	Отказ = НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	// Спишем оборудование автомобиля
	НаборЗаписейКомплектацияАвтомобилей=Движения.КомплектацияАвтомобилей;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.ИдентификаторАвтомобиля,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Количество,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Цена,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Сумма,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Партия
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей.Автомобили КАК ВозвратПоставщикуАвтомобилейАвтомобили
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	РезультатАвтомобили = Запрос.Выполнить();
	ВыборкаАвтомобили = РезультатАвтомобили.Выбрать();
	Пока ВыборкаАвтомобили.Следующий() Цикл
		// Спишем оборудование по документу
		НаборЗаписейКомплектацияАвтомобилей.РежимПроведения = Режим;
		НаборЗаписейКомплектацияАвтомобилей.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейКомплектацияАвтомобилей.РезультатЗапросаПоТоварам = Неопределено;
		НаборЗаписейКомплектацияАвтомобилей.Автомобиль = ВыборкаАвтомобили.Автомобиль;
		НаборЗаписейКомплектацияАвтомобилей.СкладКомпании = ШапкаДокумента.СкладКомпании;
		НаборЗаписейКомплектацияАвтомобилей.ПериодДвижения = ШапкаДокумента.МоментВремени;
		НаборЗаписейКомплектацияАвтомобилей.ШапкаДокумента = ШапкаДокумента;
		Отказ=НЕ НаборЗаписейКомплектацияАвтомобилей.Расход() ИЛИ Отказ;
	КонецЦикла;
	Если НЕ Отказ Тогда
		НаборЗаписейКомплектацияАвтомобилей.Записать();
	КонецЕсли; 
	
	// двигаем границу последовательности комплектаций автомобилей
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуКомплектации(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(РасчетыСКонтрагентами.СуммаУпр) КАК СуммаУпр
		|ПОМЕСТИТЬ ДолгКонтрагента
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
		|ГДЕ
		|	РасчетыСКонтрагентами.Регистратор = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыКомпании.СуммаУпр
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
		|ГДЕ
		|	ВзаиморасчетыКомпании.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ДолгКонтрагента.СуммаУпр) КАК СуммаУпр
		|ИЗ
		|	ДолгКонтрагента КАК ДолгКонтрагента";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.СуммаУпр <> 0 Тогда
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
				НаборЗаписейДоходыИРасходы.Доход = Выборка.СуммаУпр;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли; 
		КонецЕсли; 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					 |	ЕСТЬNULL(СУММА(ОстаткиАвтомобилей.СуммаУпр), 0) КАК СуммаУпр
					 |ИЗ
					 |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
					 |ГДЕ
					 |	ОстаткиАвтомобилей.Регистратор = &Регистратор
					 |	И ОстаткиАвтомобилей.СтатусПартии = &СтатусПартии";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартий.ТоварКупленный);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.СуммаУпр <> 0 Тогда
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
				НаборЗаписейДоходыИРасходы.Доход = Выборка.СуммаУпр;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли; 
		КонецЕсли; 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					 |	ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр), 0) КАК СуммаУпр
					 |ИЗ
					 |	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
					 |ГДЕ
					 |	КомплектацияАвтомобилей.Регистратор = &Регистратор
					 |	И КомплектацияАвтомобилей.СтатусПартии = &СтатусПартии";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартий.ТоварКупленный);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.СуммаУпр <> 0 Тогда
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
				НаборЗаписейДоходыИРасходы.Расход = Выборка.СуммаУпр;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли; 
		КонецЕсли; 
		Возврат НЕ Отказ;
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(); 
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, ШапкаДокумента.МоментВремени);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ШапкаДокумента.МоментВремени);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ШапкаДокумента.КурсВалютыУпр;
	КонецЕсли;	
	
	// спишем реализованное оборудование
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КомплектацияАвтомобилей.Период,
	|	КомплектацияАвтомобилей.Регистратор,
	|	КомплектацияАвтомобилей.НомерСтроки КАК НомерСтроки,
	|	КомплектацияАвтомобилей.Активность,
	|	КомплектацияАвтомобилей.ВидДвижения,
	|	КомплектацияАвтомобилей.Автомобиль,
	|	КомплектацияАвтомобилей.СкладКомпании,
	|	КомплектацияАвтомобилей.Номенклатура,
	|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
	|	КомплектацияАвтомобилей.СтатусПартии,
	|	КомплектацияАвтомобилей.Партия,
	|	КомплектацияАвтомобилей.ГТД,
	|	КомплектацияАвтомобилей.Количество,
	|	КомплектацияАвтомобилей.Сумма,
	|	КомплектацияАвтомобилей.СуммаНДС,
	|	КомплектацияАвтомобилей.СуммаУпр,
	|	КомплектацияАвтомобилей.СуммаНДСУпр,
	|	КомплектацияАвтомобилей.СуммаПродажи,
	|	КомплектацияАвтомобилей.СуммаПродажиУпр,
	|	КомплектацияАвтомобилей.ХозОперация,
	|	КомплектацияАвтомобилей.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	|ГДЕ
	|	КомплектацияАвтомобилей.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
	РезультатКомплектацияАвтомобилей = Запрос.Выполнить();
	ВыборкаКомплектацияАвтомобилей = РезультатКомплектацияАвтомобилей.Выбрать();
	НаборЗаписейРеализованныеТовары = Движения.РеализованныеТовары;
	НаборЗаписейПродажи = Движения.Продажи;
	Пока ВыборкаКомплектацияАвтомобилей.Следующий() Цикл
		Если ТипЗнч(ВыборкаКомплектацияАвтомобилей.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ВыборкаКомплектацияАвтомобилей.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
				НоваяЗапись = НаборЗаписейРеализованныеТовары.Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период                     = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
				НоваяЗапись.Контрагент                 = ШапкаДокумента.Контрагент;
				НоваяЗапись.ДоговорВзаиморасчетов      = ШапкаДокумента.ДоговорВзаиморасчетов;
				НоваяЗапись.Автомобиль                 = ВыборкаКомплектацияАвтомобилей.Автомобиль;
				НоваяЗапись.Номенклатура               = ВыборкаКомплектацияАвтомобилей.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаКомплектацияАвтомобилей.ХарактеристикаНоменклатуры;
				НоваяЗапись.ДокументПередачи           = ВыборкаКомплектацияАвтомобилей.Партия;
				НоваяЗапись.ГТД                        = ВыборкаКомплектацияАвтомобилей.ГТД;
				НоваяЗапись.Количество                 = ВыборкаКомплектацияАвтомобилей.Количество;
				НоваяЗапись.СуммаУпр                   = ВыборкаКомплектацияАвтомобилей.СуммаУпр;
				НоваяЗапись.СуммаНДСУпр                = ВыборкаКомплектацияАвтомобилей.СуммаНДСУпр;
				НоваяЗапись.СуммаБезНДСУпр             = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				НоваяЗапись.СуммаРегл                  = ВыборкаКомплектацияАвтомобилей.Сумма;
				НоваяЗапись.СуммаНДС                   = ВыборкаКомплектацияАвтомобилей.СуммаНДС;
				НоваяЗапись.СуммаБезНДС                = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
				НоваяЗапись.СуммаПродажиРегл           = ВыборкаКомплектацияАвтомобилей.СуммаПродажи;
				НоваяЗапись.СуммаПродажи               = ВыборкаКомплектацияАвтомобилей.СуммаПродажиУпр;
				// Себестоимость равна продаже.
				Если НЕ НоваяЗапись.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж Тогда
					НоваяЗапись.СуммаРегл      = НоваяЗапись.СуммаПродажиРегл;
					НоваяЗапись.СуммаНДС       = Окр((НоваяЗапись.СуммаРегл * ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка) 
																	/ (100 + ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка), 2);
					НоваяЗапись.СуммаБезНДС    = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
					НоваяЗапись.СуммаУпр       = НоваяЗапись.СуммаПродажи;
					НоваяЗапись.СуммаНДСУпр    = Окр(НоваяЗапись.СуммаПродажи * ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка 
																	/ (100 + ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка), 2);
					НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				КонецЕсли;
				НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
			КонецЕсли;
			НоваяЗапись = НаборЗаписейПродажи.Добавить();
			НоваяЗапись.Период                     = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
			НоваяЗапись.ПодразделениеКомпании      = ШапкаДокумента.ПодразделениеКомпании;
			НоваяЗапись.Автомобиль                 = ВыборкаКомплектацияАвтомобилей.Автомобиль;
			НоваяЗапись.Номенклатура               = ВыборкаКомплектацияАвтомобилей.Номенклатура;
			НоваяЗапись.ДокументПродажи			   = ШапкаДокумента.Ссылка;
			Если ЕстьРеквизит(ВыборкаКомплектацияАвтомобилей.Партия, "Контрагент") Тогда
				НоваяЗапись.Поставщик              = ВыборкаКомплектацияАвтомобилей.Партия.Контрагент;
			КонецЕсли;
			НоваяЗапись.Покупатель                 = ШапкаДокумента.Контрагент;
			НоваяЗапись.СтатусПартии               = ВыборкаКомплектацияАвтомобилей.СтатусПартии;
			НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ДоговорВзаиморасчетов      = ШапкаДокумента.ДоговорВзаиморасчетов;
			НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаКомплектацияАвтомобилей.ХарактеристикаНоменклатуры;
			НоваяЗапись.СкладКомпании              = ШапкаДокумента.СкладКомпании;
			ВыборкаАвтомобили.Сбросить();
			Если ВыборкаАвтомобили.НайтиСледующий(Новый Структура("Автомобиль", ВыборкаКомплектацияАвтомобилей.Автомобиль)) Тогда
				НоваяЗапись.СтавкаНДС              = ВыборкаАвтомобили.СтавкаНДС;
			КонецЕсли; 
			НоваяЗапись.Партия                     = ВыборкаКомплектацияАвтомобилей.Партия;
			НоваяЗапись.ГТД                        = ВыборкаКомплектацияАвтомобилей.ГТД;
			НоваяЗапись.Количество                 = ВыборкаКомплектацияАвтомобилей.Количество;
			НоваяЗапись.Сумма                      = ВыборкаКомплектацияАвтомобилей.СуммаПродажи;
			НоваяЗапись.СуммаНДС                   = Окр(НоваяЗапись.Сумма * НоваяЗапись.СтавкаНДС.Ставка / 100, 2);
			НоваяЗапись.СуммаУпр                   = ВыборкаКомплектацияАвтомобилей.СуммаПродажиУпр;
			НоваяЗапись.СуммаНДСУпр                = Окр(НоваяЗапись.СуммаУпр * НоваяЗапись.СтавкаНДС.Ставка / 100, 2);
			НоваяЗапись.СебестоимостьУпр           = ВыборкаКомплектацияАвтомобилей.СуммаУпр;
			НоваяЗапись.Себестоимость              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаКомплектацияАвтомобилей.СуммаУпр, 
																									ВалютаУпр, КурсУпр, ВалютаРегл, КурсРегл), 2);
			НоваяЗапись.СуммаНДСВходящий           = ВыборкаКомплектацияАвтомобилей.СуммаНДС;
			НоваяЗапись.СуммаНДСВходящийУпр        = ВыборкаКомплектацияАвтомобилей.СуммаНДСУпр;
			НоваяЗапись.СебестоимостьБезНДС        = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
			НоваяЗапись.СебестоимостьБезНДСУпр     = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
			НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС 
													- Окр(НоваяЗапись.СуммаСкидки * НоваяЗапись.СтавкаНДС.Ставка / (100 + НоваяЗапись.СтавкаНДС.Ставка), 2);
			НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
			НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр 
													- Окр(НоваяЗапись.СуммаСкидкиУпр * НоваяЗапись.СтавкаНДС.Ставка / (100 + НоваяЗапись.СтавкаНДС.Ставка), 2);
			НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
		КонецЕсли;
	КонецЦикла; 
	
	Если ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейПоставщику Тогда
		Если (НЕ БалансВедетсяПоПодразделениям ИЛИ НЕ БалансовыеПодразделенияНеРавны) Тогда	
			// Движения по Доходам и Расходам
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаВсего),0) КАК СуммаВсего
			|ИЗ
			|	Документ.ВозвратПоставщикуАвтомобилей.Товары КАК ВозвратПоставщикуАвтомобилейТовары
			|ГДЕ
			|	ВозвратПоставщикуАвтомобилейТовары.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СуммаОборудования = Выборка.СуммаВсего;
			Иначе
				СуммаОборудования = 0;
			КонецЕсли; 
			СуммаАвтомобилей = РезультатАвтомобили.Выгрузить().Итог("СуммаВсего");
			СуммаАвтомобилей = СуммаАвтомобилей + СуммаОборудования;
			СуммаАвтомобилей = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаАвтомобилей, 
										ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр);
			
			СебестоимостьАвтомобилей = 0;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ОстаткиАвтомобилей.СуммаУпр),0) КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|ГДЕ
			|	ОстаткиАвтомобилей.Регистратор = &Регистратор";
			Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СебестоимостьАвтомобилей = СебестоимостьАвтомобилей + (-Выборка.СуммаУпр);
			КонецЕсли; 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр),0) КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор";
			Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СебестоимостьАвтомобилей = СебестоимостьАвтомобилей + Выборка.СуммаУпр;
			КонецЕсли; 
			
			СуммаДоходовИРасходов = СуммаАвтомобилей - СебестоимостьАвтомобилей;
			Если СуммаДоходовИРасходов <> 0 Тогда
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ОтклонениеСтоимостиВозврата;
				Если БалансВедетсяПоПодразделениям Тогда
					НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыИРасходы.Доход = СуммаДоходовИРасходов;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		             |	ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр), 0) КАК СуммаУпр
		             |ИЗ
		             |	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		             |ГДЕ
		             |	КомплектацияАвтомобилей.Регистратор = &Регистратор
		             |	И КомплектацияАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СебестоимостьКомплектации = Выборка.СуммаУпр;
			Если СебестоимостьКомплектации <> 0 Тогда
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ОтклонениеСтоимостиВозврата;
				НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыИРасходы.Расход = СебестоимостьКомплектации;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
