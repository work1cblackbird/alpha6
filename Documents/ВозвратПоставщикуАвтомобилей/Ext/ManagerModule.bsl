// Модуль менеджера документа "Возврат поставщику автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Движения документа выполненные по регистру ГТД
//
// Параметры:
// 	Сам - Документ.Ссылка - документ по которому выбираются движения регистра ГТД
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат запроса к регистру ГТД.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.ГТД,
		|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Сам
		|
		|СГРУППИРОВАТЬ ПО
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.ГТД,
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры"
	);
	Запрос.УстановитьПараметр("Сам", Сам);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей.ДополнительныеРеквизиты КАК ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ВозвратПоставщикуАвтомобилей");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			// заполнение реквизита ГлавныйБухгалтер
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			// заполнение реквизита Отпустил
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 
			// перенос реквизита доверенность в ПОлучилКонтрагент
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			// Реквизит принял из доверенности
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
	
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла; 
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ВозвратПоставщикуАвтомобилей""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	
	
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//	Параметры - Структура - параметры выполнения операции.
//
// Возвращаемое значение:
//	Булево - Результат проверки.
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей.ДополнительныеРеквизиты КАК ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И ВозвратПоставщикуАвтомобилейДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего") + Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Автомобили.Итог("СуммаНДС") + Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Добавим оборудование автомобиля
Процедура ДобавитьОборудованиеАвтомобиля(Объект, Знач Автомобиль,ИзменятьЦену) Экспорт
	ДокументОбъектСтруктура=Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка",Объект.Ссылка);
	ДокументОбъектСтруктура.Вставить("Дата",Объект.Дата);
	ДокументОбъектСтруктура.Вставить("Автомобили",Объект.Автомобили.Выгрузить());
	ДокументОбъектСтруктура.Вставить("Товары",Объект.Товары.Выгрузить());
	ЗащищенныеФункцииАльфаАвтоСервер.РеализацияАвтомобилейДобавитьОборудованиеАвтомобиля(ДокументОбъектСтруктура,Автомобиль);
	
	Если НЕ ДокументОбъектСтруктура.Свойство("ТаблицаТоваров") Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ДокументОбъектСтруктура.Товары);
	
	Если ИзменятьЦену Тогда
		ВалютаРегламентированногоУчетаОрганизаций=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		Если Объект.ВалютаДокумента<>ВалютаРегламентированногоУчетаОрганизаций Тогда
			ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
			Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,Объект.Дата);
				КурсУпр		   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			Иначе
				КурсУпр        = Объект.КурсВалютыУпр;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	Для каждого СтрокаТоваров Из ДокументОбъектСтруктура.ТаблицаТоваров Цикл
		СтрокиОборудования=Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля,Номенклатура,ХарактеристикаНоменклатуры",ДокументОбъектСтруктура.ИдентификаторАвтомобиля,СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
		Если СтрокиОборудования.Количество()=0 Тогда 
			НоваяСтрокаТоваров=Объект.Товары.Добавить();
			НоваяСтрокаТоваров.ИдентификаторАвтомобиля=ДокументОбъектСтруктура.ИдентификаторАвтомобиля;
			НоваяСтрокаТоваров.Номенклатура=СтрокаТоваров.Номенклатура;
			НоваяСтрокаТоваров.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрокаТоваров);
		Иначе
			НоваяСтрокаТоваров=СтрокиОборудования[0];
		КонецЕсли; 
		НоваяСтрокаТоваров.Количество = СтрокаТоваров.Количество/?(НЕ ЗначениеЗаполнено(НоваяСтрокаТоваров.Коэффициент),1,НоваяСтрокаТоваров.Коэффициент);
		Если ИзменятьЦену Тогда
			Если Объект.ВалютаДокумента=ВалютаРегламентированногоУчетаОрганизаций Тогда
				НоваяСтрокаТоваров.СуммаВсего=СтрокаТоваров.СуммаПродажи;
			Иначе
				НоваяСтрокаТоваров.СуммаВсего=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаПродажиУпр,ВалютаУпр,КурсУпр,Объект.ВалютаДокумента,Объект.КурсДокумента);
			КонецЕсли; 
		КонецЕсли;
		ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрокаТоваров);
		//ОбработкаРеквизита("Товары.СуммаВсего",НоваяСтрокаТоваров);
	КонецЦикла;
КонецПроцедуры

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ВозвратПоставщикуАвтомобилей - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	
	// Для контрагентов из ЕАЭС другая форма отчетности
	Если ДанныеКонтрагента.СтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Автомобили.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	СУММА(ВозвратПоставщикуАвтомобилейАвтомобили.Количество) КАК КоличествоПрослеживаемости,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.ГТД КАК РНПТ,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего - ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС) КАК СуммаБезНДС
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей.Автомобили КАК ВозвратПоставщикуАвтомобилейАвтомобили
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.ГТД,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим, что в документе есть РНПТ
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = Запрос.Выполнить().Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	КодОперации = Справочники.КодыОперацийПрослеживаемости.ПолученнаяКорректировочннаяСчетФактураУменьшение;
	Документ = Объект.Ссылка;
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
	ДатаДокумента = Объект.Дата;
	КонтрагентОперации = Объект.Контрагент;
	
	// Для пересчета валюты в рубли
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
	
	// Сформируем таблицу
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.КодОперации = КодОперации;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.Контрагент = КонтрагентОперации;
		
		Если ВалютаНеРегл Тогда
			НоваяСтрока.СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобиль.ИдентификаторАвтомобиля");
	ОбязательныеРеквизиты.Добавить("Автомобиль.Количество");
	
	ОбязательныеРеквизиты.Добавить("Товары.ЗаказНаряд");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ИдентификаторАвтомобиля");
	
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	УникальныеАвтомобили.Добавить("Партия");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.СкладКомпании) Тогда
		Если Объект.СкладКомпании.Розничный Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Выбранный склад: ""%1"" является розничным!Выберите оптовый склад'"),
					Объект.СкладКомпании
				),
				Объект.Ссылка
			);
			Объект.СкладКомпании = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ДоговорВзаиморасчетов.Пустая() Тогда
		ИначеЕсли Объект.ХозОперация=Справочники.ХозОперации.ВозвратАвтомобилейПоставщикуКомиссия Тогда
			Если Объект.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.СКомитентом И
				 Объект.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.Прочее Тогда
				Объект.ДоговорВзаиморасчетов=Неопределено;
			КонецЕсли;
		Иначе
			Если Объект.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.Покупка И
				 Объект.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.Прочее Тогда
				Объект.ДоговорВзаиморасчетов=Неопределено;
			КонецЕсли; 
		КонецЕсли;

КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Если Строка.Количество=0 Тогда Строка.Количество=1 КонецЕсли;
		// Заполним ставку НДС
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ОсвобожденОтНДС Тогда
				Запрос=Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1 СпрСтавкиНДС.Ссылка КАК СтавкаБезНДС
				|ИЗ Справочник.СтавкиНДС КАК СпрСтавкиНДС
				|ГДЕ СпрСтавкиНДС.Ставка=0");
				РезультатСтавкаБезНДС=Запрос.Выполнить();
				Если РезультатСтавкаБезНДС.Пустой() Тогда
					Строка.СтавкаНДС=Неопределено;
				Иначе
					Строка.СтавкаНДС=РезультатСтавкаБезНДС.Выгрузить().Получить(0).СтавкаБезНДС;
				КонецЕсли;
			Иначе
				Строка.СтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
			КонецЕсли;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Строка.Партия) Тогда
			Строка.Партия = Объект.ДокументОснование;
		КонецЕсли; 
		//Рез=ОбработкаРеквизита("Автомобили.Партия",ТекСтрока,ЭтаФорма,ДопПараметры);
		ДобавитьОборудованиеАвтомобиля(Объект, Строка.Автомобиль,Истина);

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Строка.Сумма=Строка.Цена*Строка.Количество;
		Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ЦенаВключаетНДС=Истина;
		Иначе
			ЦенаВключаетНДС=Объект.ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
		Попытка
			НеРассчитыватьСуммуВсего=ПараметрыДействия.НеРассчитыватьСуммуВсего;
		Исключение
			НеРассчитыватьСуммуВсего=Ложь;
		КонецПопытки; 
		Если ЦенаВключаетНДС Тогда
			// Цена уже содержит НДС
			// Сумма всего равна сумме
			Строка.СуммаНДС=Окр((Строка.Сумма*Строка.СтавкаНДС.Ставка)/(100+Строка.СтавкаНДС.Ставка),2);
			Если НЕ НеРассчитыватьСуммуВсего Тогда
				Строка.СуммаВсего=Строка.Сумма;
			КонецЕсли; 
		Иначе
			// НДС в цену не включен
			// Получим сумму НДС
			Строка.СуммаНДС=Окр((Строка.Сумма*Строка.СтавкаНДС.Ставка)/100,2);
			Если НЕ НеРассчитыватьСуммуВсего Тогда
				Строка.СуммаВсего=Строка.Сумма+Строка.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Если Строка.Количество<>0 Тогда
		Строка.Цена=Окр(Строка.Сумма/Строка.Количество,2);
	КонецЕсли;
	
	АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	// Получим новую сумму НДС как процент от суммы всего
		Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ЦенаВключаетНДС=Истина;
		Иначе
			ЦенаВключаетНДС=Объект.ТипЦен.ЦенаВключаетНДС;
		КонецЕсли; 
		Если ЦенаВключаетНДС Тогда
			// Цена уже содержит НДС
			Строка.Сумма=Строка.СуммаВсего;
		Иначе
			// НДС в цену не включен
			Строка.Сумма=Окр((100*Строка.СуммаВсего)/(100+Строка.СтавкаНДС.Ставка),2);
		КонецЕсли;
		Если ПараметрыДействия=Неопределено Тогда
			ПараметрыДействия=Новый Структура;
		КонецЕсли;
		ПараметрыДействия.Вставить("НеРассчитыватьСуммуВсего",Истина);

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Партия"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиПартияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Партия) Тогда
		СтрокаДокументаОснования=Строка.Партия.Автомобили.Найти(Строка.Автомобиль,"Автомобиль");
		Если СтрокаДокументаОснования<>Неопределено Тогда
			Строка.Цена=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДокументаОснования.Цена,Строка.Партия.ВалютаДокумента,Строка.Партия.КурсДокумента,Объект.ВалютаДокумента,Объект.КурсДокумента);
			АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли; 
	КонецЕсли; 
	// Поищем автомобиль в документе продажи из шапки
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СтрокаДокументаОснования=Объект.ДокументОснование.Автомобили.Найти(Строка.Автомобиль,"Автомобиль");
		Если СтрокаДокументаОснования<>Неопределено Тогда
			Строка.Партия=Объект.ДокументОснование;
			Строка.Цена=СтрокаДокументаОснования.Цена;
			Строка.Цена=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДокументаОснования.Цена,Объект.ДокументОснование.ВалютаДокумента,Объект.ДокументОснование.КурсДокумента,Объект.ВалютаДокумента,Объект.КурсДокумента);
			АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли; 
	КонецЕсли; 
	АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАвтомобиля=Объект.Автомобили.Найти(Строка.ИдентификаторАвтомобиля,"ИдентификаторАвтомобиля");
	// А вот тут мы загрузим те цены, которые указаны в регистре комплектации
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
					 |	СУММА(КомплектацияАвтомобилейОстатки.КоличествоОстаток) КАК Количество,
					 |	СУММА(КомплектацияАвтомобилейОстатки.СуммаПродажиОстаток) КАК СуммаПродажи,
					 |	СУММА(КомплектацияАвтомобилейОстатки.СуммаПродажиУпрОстаток) КАК СуммаПродажиУпр
					 |ИЗ
					 |	РегистрНакопления.КомплектацияАвтомобилей.Остатки(
					 |		&НаДату,
					 |		Автомобиль = &Автомобиль
					 |		    И Номенклатура = &Номенклатура
					 |		    И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК КомплектацияАвтомобилейОстатки";
	Запрос.УстановитьПараметр("НаДату",?(Объект.Ссылка.Пустая(),Новый МоментВремени(КонецДня(Объект.Дата)),Новый Граница(Объект.Дата,ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Автомобиль",СтрокаАвтомобиля.Автомобиль);
	Запрос.УстановитьПараметр("Номенклатура",Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",Строка.ХарактеристикаНоменклатуры);
	ОстаткиОборудования=Запрос.Выполнить().Выгрузить();
	Строка.Количество=ОстаткиОборудования.Итог("Количество");
	Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
		Строка.Количество=0;
	КонецЕсли; 
	ВалютаРегламентированногоУчетаОрганизаций=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Если Объект.ВалютаДокумента=ВалютаРегламентированногоУчетаОрганизаций Тогда
		ОстатокСуммы=ОстаткиОборудования.Итог("СуммаПродажи");
	Иначе
		ОстатокСуммы=ОстаткиОборудования.Итог("СуммаПродажиУпр");
		ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,Объект.Дата);
		КурсУпр		   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ОстатокСуммы) Тогда
		ОстатокСуммы=0;
	КонецЕсли; 
	Если Объект.ВалютаДокумента<>ВалютаРегламентированногоУчетаОрганизаций Тогда
		ОстатокСуммы=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ОстатокСуммы,ВалютаУпр,КурсУпр,Объект.ВалютаДокумента,Объект.КурсДокумента);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС=Истина;
	Иначе
		ЦенаВключаетНДС=Объект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли; 
	Если НЕ ЦенаВключаетНДС Тогда
		// НДС в цену не включен
		ОстатокСуммы=(100*ОстатокСуммы)/(100+Строка.СтавкаНДС.Ставка);
	КонецЕсли; 
	Строка.Сумма=ОстатокСуммы;
	ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
///  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
///
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентНаценкиПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВозвратПоставщикуАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по документу поставки'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоДокументуПоставки";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
		
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуПоставки.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуПоставки.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по документу отгрузки
//
Функция АвтомобилиЗаполнитьПоДокументуПоставки(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран документ поставки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка);
	Иначе
		// перезаполняем
		Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ВозвратПоставщикуАвтомобилей"));
		Документ.Заполнить(Объект.ДокументОснование);
		ЗначениеВДанныеФормы(Документ,Объект);
	КонецЕсли;
	
КонецФункции // АвтомобилиЗаполнитьПоДокументуОтгрузки()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВозвратПоставщикуАвтомобилей",
		"ПФ_MXL_ВозвратПоставщикуАвтомобилей",
		НСтр("ru = 'Возвратная накладная'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМХ",
		"ПФ_MXL_МХ3",
		НСтр("ru = 'МХ-3 (Акт о возврате ТМЦ)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ВозвратПоставщикуАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ВозвратПоставщикуАвтомобилей",
															"Возвратная накладная",
															ПечатьВозвратПоставщикуАвтомобилей(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ВозвратПоставщикуАвтомобилей"
// Возвращает сформированный табличный документ:
Функция ПечатьВозвратПоставщикуАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ВозвратПоставщикуАвтомобилей.ПФ_MXL_ВозвратПоставщикуАвтомобилей");
	
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		// для начала настроим макет
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
		// вывод заголовка документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ТекстЗаголовка = Строка(Документ);
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьМакета.Параметры.ПредставлениеОтправителя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьМакета.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьМакета.Параметры.ПредставлениеПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// заполняем заголовок колонки НДС по типу цен
		Параметры = Новый Структура("НДС");
		Параметры.НДС = "НДС";
		Если Документ.ТипЦен.ЦенаВключаетНДС
			И НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда	// Если НДС включен
				Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Параметры.Заполнить(Параметры);
		
		// теперь выводим шапку
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим области строки
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакетаИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		// подготовим дополнительную таблицу
		ТаблицаТоваровПоАвтомобилям = Документ.Товары.Выгрузить();
		ТаблицаТоваровПоАвтомобилям.Свернуть("ИдентификаторАвтомобиля", "Сумма,СуммаНДС,СуммаВсего");
		
		// перебор строк
		ВыборкаТабличнойЧасти = Документ.Автомобили.Выгрузить();
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// предварительная обработка
			СтрокаТабличнойЧастиТовары = ТаблицаТоваровПоАвтомобилям.Найти(СтрокаТабличнойЧасти.ИдентификаторАвтомобиля, 
				"ИдентификаторАвтомобиля");
			Если СтрокаТабличнойЧастиТовары <> Неопределено Тогда
				СтрокаТабличнойЧасти.Сумма		= СтрокаТабличнойЧасти.Сумма		+ СтрокаТабличнойЧастиТовары.Сумма;
				СтрокаТабличнойЧасти.СуммаНДС	= СтрокаТабличнойЧасти.СуммаНДС		+ СтрокаТабличнойЧастиТовары.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаВсего	= СтрокаТабличнойЧасти.СуммаВсего	+ СтрокаТабличнойЧастиТовары.СуммаВсего;
			КонецЕсли;
			
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТабличнойЧасти,
				Документ);
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТабличнойЧасти) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета,
				ОбластьШапкаТаблицы, ОбластьМакетаИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			// добавляем итоги
			
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьМакетаИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(Документ.Автомобили.Итог("СуммаВсего"), ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(Документ.Автомобили.Итог("СуммаНДС"), ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		// Выводим представления и расшифровки подписей
		Отпустил = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил");
		Отпустил.ОтпустилПредставление = ?(ЗначениеЗаполнено(Отпустил.Отпустил), "/ "+ Отпустил.ОтпустилПредставление, "");
		ОбластьПодвал.Параметры.Заполнить(Отпустил);
		Получил  = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент");
		Получил.ПолучилКонтрагентПредставление =
			?(ЗначениеЗаполнено(Получил.ПолучилКонтрагент), "/ " + Получил.ПолучилКонтрагентПредставление, "");
		ОбластьПодвал.Параметры.Заполнить(Получил);
		
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , ,
			НомерСтраницы, , Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратПоставщикуАвтомобилей_ВозвратПоставщикуАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "МХ-3" Акт о возврате ТМЦ
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
Функция ПолучитьДанныеДляПечатиМХ3(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"          , Объект.Организация);
	ДанныеОбъекта.Вставить("Дата"                 , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ВладелецТовара"       , Объект.Контрагент);
	
	// ПодготовкаТЧ
	Товары = Объект.Автомобили.Выгрузить();
	Товары.Колонки.Автомобиль.Имя = "Номенклатура";
	Оборудование = Объект.Товары.Выгрузить();
	Оборудование.Свернуть("ИдентификаторАвтомобиля", "Цена,Сумма,СуммаВсего,СуммаНДС");
	Для Каждого Строка Из Товары Цикл
		ОборудованиеАвтомобиля = Оборудование.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля", Строка.ИдентификаторАвтомобиля));
		Если ОборудованиеАвтомобиля.Количество() > 0 Тогда
			Строка.Цена       = Строка.Цена +       ОборудованиеАвтомобиля[0].Цена;
			Строка.Сумма      = Строка.Сумма +      ОборудованиеАвтомобиля[0].Сумма;
			Строка.СуммаВсего = Строка.СуммаВсего + ОборудованиеАвтомобиля[0].СуммаВсего;
			Строка.СуммаНДС   = Строка.СуммаНДС +   ОборудованиеАвтомобиля[0].СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	ДанныеОбъекта.Вставить("Товары", Товары);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина);
	ДанныеОбъекта.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил",  УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил",  "ПолучилПредставление"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПечатьМХ3

// Формирует печатную форму "ТОРГ-12"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратПоставщикуАвтомобилейТовары.ИдентификаторАвтомобиля,
	               |	СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаВсего) КАК СуммаВсего
	               |ПОМЕСТИТЬ ОборудованиеАвтомобиля
	               |ИЗ
	               |	Документ.ВозвратПоставщикуАвтомобилей.Товары КАК ВозвратПоставщикуАвтомобилейТовары
	               |ГДЕ
	               |	ВозвратПоставщикуАвтомобилейТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратПоставщикуАвтомобилейТовары.ИдентификаторАвтомобиля
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	               |	"""" КАК ХарактеристикаНоменклатуры,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.Наименование КАК ТоварНаименование,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.VIN КАК Код,
	               |	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	               |	""796"" КАК КодЕдиницаИзмерения,
	               |	1 КАК Количество,
	               |	1 КАК Коэффициент,
	               |	1 КАК КоличествоБазовое,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) КАК СуммаВсего,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)) КАК СуммаБезНДС,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)) КАК ЦенаБезНДС,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0) КАК СуммаНДС,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Цена
	               |ИЗ
	               |	Документ.ВозвратПоставщикуАвтомобилей.Автомобили КАК ВозвратПоставщикуАвтомобилейАвтомобили
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОборудованиеАвтомобиля КАК ОборудованиеАвтомобиля
	               |		ПО ВозвратПоставщикуАвтомобилейАвтомобили.ИдентификаторАвтомобиля = ОборудованиеАвтомобиля.ИдентификаторАвтомобиля,
	               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |ГДЕ
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Ссылка = &Ссылка
	               |	И ЕдиницыИзмерения.Наименование = ""шт""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.НомерСтроки,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.Наименование,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.VIN,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.Цена,
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0),
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)),
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0),
	               |	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Контрагент.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" ,"");
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);

	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		?(НЕ ЗначениеЗаполнено(ДатаОтгрузки), """___""____________ 20___", Формат(ДатаОтгрузки, "ДЛФ=DD"))
	);
	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
		
	ДанныеОбъекта.Вставить("Грузоотправитель"      , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"       , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"       , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"      , ДанныеОбъекта.Плательщик.КодПоОКПО);
	
	ДанныеОбъекта.Вставить("Руководитель"     	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Принял"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	
	ДанныеОбъекта.Вставить("ИмяТабличнойЧасти", "Автомобили");
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);

	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВозвратПоставщикуАвтомобилей);

КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВозвратПоставщикуАвтомобилей - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);  
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Автомобили, Товары");
		
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратПоставщикуАвтомобилей.Организация КАК Организация,
	|	ВозвратПоставщикуАвтомобилей.Ссылка КАК Ссылка,
	|	ВозвратПоставщикуАвтомобилей.Дата КАК Дата,
	|	ВозвратПоставщикуАвтомобилей.ХозОперация КАК ХозОперация,
	|	ВозвратПоставщикуАвтомобилей.ДокументОснование КАК ДокументОснование,
	|	ВозвратПоставщикуАвтомобилей.Контрагент КАК Контрагент,
	|	ВозвратПоставщикуАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВозвратПоставщикуАвтомобилей.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ВЫБОР
	|		КОГДА ВозвратПоставщикуАвтомобилей.ДокументОснование = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВозвратПоставщикуАвтомобилей.Ссылка
	|		ИНАЧЕ ВозвратПоставщикуАвтомобилей.ДокументОснование
	|	КОНЕЦ КАК Сделка,
	|	ВозвратПоставщикуАвтомобилей.СуммаДокумента КАК Сумма,
	|	ВозвратПоставщикуАвтомобилей.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ВозвратПоставщикуАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
	|	ВозвратПоставщикуАвтомобилей.КурсДокумента КАК КурсДокумента,
	|	ВозвратПоставщикуАвтомобилей.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей КАК ВозвратПоставщикуАвтомобилей
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилей.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Ссылка КАК Ссылка,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Количество КАК Количество,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Цена КАК Цена,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Сумма КАК Сумма,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Партия КАК Партия
	|ПОМЕСТИТЬ АвтомобилиДляВозврата
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей.Автомобили КАК ВозвратПоставщикуАвтомобилейАвтомобили
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилейАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратПоставщикуАвтомобилейТовары.Ссылка КАК Ссылка,
	|	ВозвратПоставщикуАвтомобилейТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратПоставщикуАвтомобилейТовары.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|	ВозвратПоставщикуАвтомобилейТовары.Номенклатура КАК Номенклатура,
	|	ВозвратПоставщикуАвтомобилейТовары.Количество КАК Количество,
	|	ВозвратПоставщикуАвтомобилейТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратПоставщикуАвтомобилейТовары.Коэффициент КАК Коэффициент,
	|	ВозвратПоставщикуАвтомобилейТовары.Цена КАК Цена,
	|	ВозвратПоставщикуАвтомобилейТовары.Сумма КАК Сумма,
	|	ВозвратПоставщикуАвтомобилейТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратПоставщикуАвтомобилейТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратПоставщикуАвтомобилейТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВозвратПоставщикуАвтомобилейТовары.СуммаВсего КАК СуммаВсего
	|ПОМЕСТИТЬ КомплектацииАвтомобилей
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей.Товары КАК ВозвратПоставщикуАвтомобилейТовары
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилейТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтомобилиДляВозврата.СуммаВсего КАК Сумма
	|ИЗ
	|	АвтомобилиДляВозврата КАК АвтомобилиДляВозврата
	|ГДЕ
	|	АвтомобилиДляВозврата.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВозвратАвтомобилейПоставщику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомплектацииАвтомобилей.СуммаВсего
	|ИЗ
	|	КомплектацииАвтомобилей КАК КомплектацииАвтомобилей";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	Если ПакетЗапроса[0].Пустой() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(ПакетЗапроса[0]);
	СуммаДляОплаты = ПакетЗапроса[0].Выгрузить().Итог("Сумма");
	
	Если Не ЗначениеЗаполнено(СуммаДляОплаты) Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате.Сумма = СуммаДляОплаты;
	
	Если ДанныеОбОплате.Сделка <> ДанныеОбОплате.Ссылка Тогда
		
		РасчетыСКонтрагентамиСервер.ЗачестьОплатуПоСделке(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,
			Ложь);
		
	Иначе
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			ДанныеОбОплате.Сумма,
			ВидДвиженияНакопления.Приход,
			Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
			ДанныеОбОплате.Ссылка,
			Перечисления.ТипыРасчетов.Аванс,
			Истина);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли