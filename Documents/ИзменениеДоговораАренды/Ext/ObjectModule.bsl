// Модуль документа "Изменение договора аренды"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)

	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект,
			ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВступленияВСилу = ТекущаяДатаСеанса();
	
	Если ВидПериодаДляПродления.Пустая() Тогда
		ВидПериодаДляПродления = ПланыВидовРасчета.ВидыПериодовАренды.Использование;
	КонецЕсли;
	
	Если ВидПериодаДляСокращения.Пустая() Тогда
		ВидПериодаДляСокращения = ПланыВидовРасчета.ВидыПериодовАренды.Отмена;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ИзменениеСроков
			ИЛИ ИзменениеДополнительныхУсловий
			ИЛИ ИзменениеДополнительныхУслуг
			ИЛИ ИзменениеВодителей
			ИЛИ ИзменениеСтоимости) Тогда
			
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для записи укажите один из признаков изменения условий договора.'"),
			ЭтотОбъект,
			,
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаВступленияВСилу < ДатаНачала
		ИЛИ ДатаВступленияВСилу > ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Дата вступления в силу изменения договора аренды должна находиться
			|между датой начала и датой окончания договора.'"), 
			ЭтотОбъект, "ДатаВступленияВСилу",
			,
			Отказ);
	КонецЕсли;
	
	Если Ссылка.Проведен
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		
		АрендаАвтомобилей.ПроверитьВозможностьПроведения(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
	СуммаЗаАренду            = Автомобили.Итог("СуммаВсего");
	СуммаДепозита            = Автомобили.Итог("СуммаДепозита");
	СуммаДополнительныхУслуг = Товары.Итог("СуммаВсего");
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
		
	Если ИзменениеСроков Тогда
		
		Параметры = Новый Структура("ТолькоДоговоры", Истина);
		
		МассивАвтомобилей = Автомобили.ВыгрузитьКолонку("Автомобиль");
		
		ТаблицаИнтерваловАренды = АрендаАвтомобилей.ТаблицаИнтерваловАренды(МассивАвтомобилей,
			ДатаНачала,
			ДатаОкончания,
			Параметры);
		
		Для Каждого СтрокаИнтервала Из ТаблицаИнтерваловАренды Цикл
			
			Если СтрокаИнтервала.Документ <> ДокументОснование Тогда 
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСТР("ru = 'Автомобиль %1 используется с %2 по %3 согласно документу %4. Проведение договора невозможно.'"),
						СтрокаИнтервала.Автомобиль,
						Формат(СтрокаИнтервала.ДатаНачала, НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''")), 
						Формат(СтрокаИнтервала.ДатаОкончания, НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''")),
						СтрокаИнтервала.Документ
					),
					ЭтотОбъект,
					,
					,
					Отказ
				);
			КонецЕсли;
				
		КонецЦикла;
		
		АрендаАвтомобилей.ПроверитьАвтомобилиВЭксплуатации(МассивАвтомобилей, ДатаНачала, ДатаОкончания, Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ И (ИзменениеСроков ИЛИ ИзменениеСтоимости)  Тогда
		АрендаАвтомобилей.ПровестиПоРегиструРасчета(ЭтотОбъект, Отказ);
	КонецЕсли;
		
	РегистрыСведений.АрендаДействующиеСоглашения.ЗаписатьСоглашение(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Договор аренды"
//
// Параметры:
//  Договор аренды       - ДокументСсылка.ДоговорАренды - документ, который используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ДоговорАренды(ДоговорАренды, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДоговорАренды) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДоговорАренды, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Документы.ИзменениеДоговораАренды.ДанныеЗаполнения(ДоговорАренды);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,, "Автомобили,Товары,Водители,Тарификация");
	
	Автомобили.Загрузить(Выборка.Автомобили.Выгрузить());
	Товары.Загрузить(Выборка.Товары.Выгрузить());
	Водители.Загрузить(Выборка.Водители.Выгрузить());
	Тарификация.Загрузить(Выборка.Тарификация.Выгрузить());
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли