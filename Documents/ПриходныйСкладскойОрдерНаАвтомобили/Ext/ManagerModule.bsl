// Модуль менеджера документа "Приходный складской ордер на автомобили"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили.Ячейка");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		УникальныеАвтомобили.Добавить("Ячейка");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	ПараметрыДействия.Вставить("ПересчетСуммы",  Ложь);

	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	//ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры // АвтомобилиАвтомобильПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПриходныйСкладскойОрдерНаАвтомобили",
		"ПриходныйСкладскойОрдерНаАвтомобили",
		НСтр("ru = 'Приходный ордер'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМ11",
		"ПФ_MXL_М4",
		НСтр("ru = 'Форма М-4'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМХ",
		"ПФ_MXL_МХ1",
		НСтр("ru = 'МХ-1 (Акт о приеме-передаче ТМЦ)'"),
		СсылкаНаДокумент);
	// !!!_antsyu доработать когда будет реализован отчет КартаСкладаАвтомобилей
	// СтруктураМакетов.Вставить("КартаСклада", "Карта склада");
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходныйСкладскойОрдерНаАвтомобили") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПриходныйСкладскойОрдерНаАвтомобили",
															"Приходный ордер",
															ПечатьПриходныйСкладскойОрдерНаАвтомобили(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ПриходныйСкладскойОрдерНаАвтомобили"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьПриходныйСкладскойОрдерНаАвтомобили(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ПриходныйСкладскойОрдерНаАвтомобили.ПФ_MXL_ПриходныйСкладскойОрдерНаАвтомобили");
			
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Для начала настроим макет
		// Произведем преобразование макета в зависимости от типа ячеистого склада.
		ЭтоЯчеистыйСклад = (Документ.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый
			ИЛИ Документ.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый);
		Если НЕ ЭтоЯчеистыйСклад Тогда
			ОбластьТовар				= Макет.Область("Автомобиль");
			ОбластьЯчейка				= Макет.Область("Ячейка");
			ОбластьТовар.ШиринаКолонки	= ОбластьТовар.ШиринаКолонки + ОбластьЯчейка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейка, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.СкладКомпании);
		
		
		Если ЗначениеЗаполнено(Документ.ВладелецТовара) Тогда
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.НаДату = ДатаДокумента;
			ОбластьЗаголовок.Параметры.ПредставлениеВладельца = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.ВладелецТовара, , ДополнительныеПараметры);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьЗаголовок.Параметры.Заполнить(Документ.ДокументОснование);
			ОбластьЗаголовок.Параметры.ПредставлениеДокументаОснования =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			Попытка
				ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
				ДополнительныеПараметры.НаДату = ДатаДокумента;
				ОбластьЗаголовок.Параметры.ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.ДокументОснование.Контрагент,, ДополнительныеПараметры);
				ОбластьЗаголовок.Параметры.ПредставлениеДоговора = 
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ДокументОснование.ДоговорВзаиморасчетов);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения параметров'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ОбластьЗаголовок.Параметры.ДокументОснование = Документ.ДокументОснование;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если НЕ ЗначениеЗаполнено(Документ.ВладелецТовара) Тогда
			ОбластьВладелецТовара = Макет.Область("Владелец");
			ТабличныйДокумент.УдалитьОбласть(ОбластьВладелецТовара, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьДокументОснование = Макет.Область("ДокументОснование");
			ТабличныйДокумент.УдалитьОбласть(ОбластьДокументОснование, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("НомерСтроки", СтрокаТЧ.НомерСтроки);
			СтруктураСтроки.Вставить("Автомобиль", СтрокаТЧ.Автомобиль);
			СтруктураСтроки.Вставить("АвтомобильНаименование",
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Автомобиль));
			СтруктураСтроки.Вставить("VIN", СтрокаТЧ.Автомобиль.VIN);
			СтруктураСтроки.Вставить("Количество", Формат(1, ФорматВыводаКоличества));
			СтруктураСтроки.Вставить("Ячейка", СтрокаТЧ.Ячейка);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйСкладскойОрдерНаАвтомобили_ПриходныйСкладскойОрдерНаАвтомобили";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПриходныйСкладскойОрдерНаАвтомобили()

// Формирует печатную форму "Приходный ордер М-4"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПолучитьДанныеДляПечатиМ4(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);	
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВхДокНомер"             , ?(ЕстьРеквизит(Объект.ДокументОснование,"ВхДокНомер"), Объект.ДокументОснование.ВхДокНомер, Неопределено));
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ЕстьРеквизит(Объект.ДокументОснование, "Контрагент") Тогда
		ДанныеОбъекта.Вставить("Контрагент"        	,Объект.ДокументОснование.Контрагент);
	Иначе
		ДанныеОбъекта.Вставить("Контрагент"        	, Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	ДанныеОбъекта.Вставить("СкладКомпании"       	, Объект.СкладКомпании); 
	ДанныеОбъекта.Вставить("ЦенаВключаетНДС"  		, Ложь);
	ДанныеОбъекта.Вставить("ВыводитьСуммуТоваров"	, Ложь);
	
	// перебор строк
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили.НомерСтроки КАК НомерСтроки,
	               |	ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили.Автомобиль КАК Номенклатура,
	               |	"""" КАК ХарактеристикаНоменклатуры,
	               |	ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили.Автомобиль.VIN КАК Код,
	               |	""Штука"" КАК ЕдиницаИзмерения,
	               |	796 КАК КодЕдиницаИзмерения,
	               |	1 КАК Количество,
	               |	1 КАК КоличествоПоДокументу,
	               |	1 КАК Коэффициент,
	               |	0 КАК СуммаВсего,
	               |	0 КАК Сумма,
	               |	0 КАК Цена,
	               |	0 КАК СуммаНДС,
	               |	0 КАК СтавкаНДС
	               |ИЗ
	               |	Документ.ПриходныйСкладскойОрдерНаАвтомобили.Автомобили КАК ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили
	               |ГДЕ
	               |	ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("Товары"  				, Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	ДанныеОбъекта.Вставить("СтраховаяКомпания"      , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Отпустил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПечатьМ4()

// Формирует печатную форму "МХ-1" Акт о приеме-передаче ТМЦ
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
Функция ПолучитьДанныеДляПечатиМХ1(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегУчета,Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	ДанныеОбъекта.Вставить("КурсДокумента"        	, КурсРегл); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ВладелецТовара"      	, Объект.ВладелецТовара);
	ДанныеОбъекта.Вставить("СкладКомпании"      	, Объект.СкладКомпании);
	
	// ПодготовкаТЧ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили.НомерСтроки,
		|	ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили.Автомобиль КАК Номенклатура,
		|	1 КАК Количество,
		|	0 КАК Цена,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ПриходныйСкладскойОрдерНаАвтомобили.Автомобили КАК ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили
		|ГДЕ
		|	ПриходныйСкладскойОрдерНаАвтомобилиАвтомобили.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка); 
	ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
		
	ДанныеОбъекта.Вставить("Товары"      		, ВыборкаСтрок);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина);
	ДанныеОбъекта.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил" , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПечатьМХ1

// !!!_antsyu доработать когда будет реализован отчет КартаСкладаАвтомобилей
// Печатает отчет "Карта склада".
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьКартаСклада(ТабДокумент) Экспорт
	//ОтчетКартаСклада = Отчеты.КартаСкладаАвтомобилей.Создать();
	//ОтчетКартаСклада.Склад = СкладКомпании;
	//ОтчетКартаСклада.ИсточникМаршрута = ЭтотОбъект.Ссылка;
	//ФормаКартаСклада = ОтчетКартаСклада.ПолучитьФорму();
	//ФормаКартаСклада.РежимОтчетаПереданный = 1;
	//ФормаКартаСклада.Открыть();
	//ФормаКартаСклада.НарисоватьМаршрутДокумента(ЭтотОбъект);
	//ТабДокумент = Неопределено;
	//Возврат ТабДокумент;
КонецФункции // ПечатьКартаСклада()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПереразмещениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПриходныйСкладскойОрдерНаАвтомобили);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли