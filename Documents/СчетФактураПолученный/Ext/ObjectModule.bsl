// Модуль документа "Счет фактура полученный"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	ВыполнятьПроверкуВозможностиВВода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства,
		"ВыполнятьПроверкуВозможностиВВода", Истина);
	
	Если ВыполнятьПроверкуВозможностиВВода И Не ВводСчетФактурыВозможен(ДанныеЗаполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// сдвиг даты при перезаполнении
	Если ЗначениеЗаполнено(Ссылка)
		И Дата < ДанныеЗаполнения.Дата Тогда
		Дата = ДанныеЗаполнения.Дата + 1;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ВхДокНомер,ВхДокДатаВрем"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;

	Если ЕстьРеквизит(ДанныеЗаполнения, "ЭтоУниверсальныйДокумент") 
			И ДанныеЗаполнения.ЭтоУниверсальныйДокумент Тогда 
			
		ВхДокНомер = ДанныеЗаполнения.ВхДокНомер;
		ВхДокДата  = ДанныеЗаполнения.ВхДокДата;
		
	КонецЕсли;
	
	ЗаполненНаОснованииДокумента = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства,
		"ВыполненоЗаполнениеНаОсновании",
		""
	);
	Если НЕ (ЗаполненНаОснованииДокумента = "Выписка"
		ИЛИ ЗаполненНаОснованииДокумента = "ОтчетКомиссионера"
		ИЛИ ЗаполненНаОснованииДокумента = "ОтчетКомиссионераЗаАвтомобили"
		ИЛИ ЗаполненНаОснованииДокумента = "РасходныйКассовыйОрдер"
		ИЛИ ЗаполненНаОснованииДокумента = "ОтчетКомитенту"
		ИЛИ ЗаполненНаОснованииДокумента = "ВозвратОтПокупателя")
	Тогда
		
		Если Товары.Количество() > 0 Тогда
			СуммаДокумента    = Товары.Итог("СуммаВсего");
			СуммаНДСДокумента = Товары.Итог("СуммаНДС");
		КонецЕсли;
		
	КонецЕсли;
	
	// Если вводим на основании поступления товаров, то удалим в случае наличия строки с 0-м количеством.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		Сч = 0;
		Пока Сч < Товары.Количество() Цикл
			Если Товары[Сч].Количество = 0 Тогда
				Товары.Удалить(Сч);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим, а есть ли НДС в табличной части, отличный от БезНДС
	Если НЕ ПраваИНастройкиПользователя.Значение("СоздаватьСчетФактуруБезНДС", ДанныеЗаполнения) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
			Если Не Менеджер = Неопределено Тогда
				Если Не Менеджер.ВозможенВводСчетФактурыПолученной(ДанныеЗаполнения) Тогда
					ТекстСообщения = НСтр("ru = 'Для данного документа счет-фактура не применяется.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Грузоотправитель) Тогда
		
		Грузоотправитель = Контрагент;
		
	КонецЕсли;
	
	ИдентификаторГосударственногоКонтракта = ?(
		ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта
	);
	
	ЗаполнитьИсходныеНомераСтрок();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСФБезПроведенияОснования = УчетныеПолитикиСервер.Значение(
		"ПроведениеСФБезПроведенияОснования", ,ПодразделениеКомпании);
	
	Если НЕ ПроведениеСФБезПроведенияОснования И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если НЕ ДокументОснование.Проведен Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проведение документа невозможно. Проведите документ-основание.'" ));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда
		ХозОперация = Справочники.ХозОперации.СчетФактураПолученныйКорректировка;
	Иначе
		ХозОперация = Справочники.ХозОперации.СчетФактураПолученный;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Выписка".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Выписка(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, 
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполнение таблицы приходов
	Состав 			= ДанныеЗаполнения.Состав;
	СписокРасходов 	= Новый ТаблицаЗначений;
	СписокРасходов.Колонки.Добавить("Контрагент", , "Контрагент", 25);
	СписокРасходов.Колонки.Добавить("Договор", , "Договор", 25);
	СписокРасходов.Колонки.Добавить("Сумма", , НСтр("ru = 'Сумма аванса'"), 12);
	СписокРасходов.Колонки.Добавить("СтавкаНДС", , НСтр("ru = 'Ставка НДС'"), 9);
	СписокРасходов.Колонки.Добавить("СуммаНДС", , НСтр("ru = 'Сумма НДС'"), 9);
	
	Для Каждого Строка Из Состав Цикл
		
		Если Строка.СуммаРасход > 0 Тогда
			
			СтрокаРасхода 				= СписокРасходов.Добавить();
			СтрокаРасхода.Контрагент 	= Строка.Контрагент;
			СтрокаРасхода.Договор    	= Строка.ДоговорВзаиморасчетов;
			СтрокаРасхода.Сумма      	= Строка.СуммаРасход;
			СтрокаРасхода.СуммаНДС   	= Строка.СуммаНДС;
			СтрокаРасхода.СтавкаНДС  	= Строка.СтавкаНДС;	
			
		КонецЕсли; 
		
	КонецЦикла;  
	
	Если СписокРасходов.Количество() = 0 Тогда  
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Документ <%1> не содержит авансов.'"), ДанныеЗаполнения);
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли; 
	
	ЗаполнятьШапку = Истина;
	Если СписокРасходов.Количество() > 1 Тогда  
		ТекстСообщения	= НСтр("ru='Выписка содержит несколько авансов. Необходимо заполнить данные документа вручную.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		ЗаполнятьШапку = Ложь;
	КонецЕсли;
	ВыбСтрока = СписокРасходов[0];
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		НаДату = ТекущаяДатаСеанса();
	Иначе
		НаДату = Дата;
	КонецЕсли; 
	
	// Заполним шапку СФ и одну строку.
	СтрокаТоваров 					= Товары.Добавить();
	СтрокаТоваров.Номенклатура 		= Справочники.Номенклатура.Предоплата;
	СтрокаТоваров.Количество  		= 1;
	СтрокаТоваров.ЕдиницаИзмерения	= СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения;
	СтрокаТоваров.Коэффициент		= СтрокаТоваров.ЕдиницаИзмерения.Коэффициент;
	Документы.СчетФактураПолученный.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТоваров, 
		ДополнительныеСвойства.ПараметрыДействия);
	
	Если ЗаполнятьШапку Тогда
		СтрокаТоваров.Сумма				= ВыбСтрока.Сумма;
		СтрокаТоваров.СтавкаНДС         = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(ВыбСтрока.СтавкаНДС);
		СтрокаТоваров.СуммаВсего		= ВыбСтрока.Сумма;
		Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТоваров,
			ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	Если ЗаполнятьШапку Тогда
		Контрагент			  = ВыбСтрока.Контрагент;
		ДоговорВзаиморасчетов  = ВыбСтрока.Договор; 
		ВалютаДокумента		  =	ВыбСтрока.Договор.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Документы.СчетФактураПолученный.ВалютаДокументаПриИзменении(ЭтотОбъект, 
		ДополнительныеСвойства.ПараметрыДействия);
	
	СуммаДокумента    				= Товары.Итог("СуммаВсего");
	СуммаНДСДокумента 				= Товары.Итог("СуммаНДС");
	
	СтатьяДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "СтатьяДДС");
	Если Не СтатьяДДС.РазрешитьВводАвансовойСчетФактуры Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Поступление денежных средств не является авансом. Счет-фактура выданная не нужна.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Выписка()

// Производит заполнение объекта на основании документа "Отчет комиссионера".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомиссионера(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Для отчета комиссионера только 1 строка с комиссионным вознаграждением.
	Товары.Очистить();
	НоваяСтрока					= Товары.Добавить();
	НоваяСтрока.Номенклатура	= Справочники.Номенклатура.КомиссионноеВознаграждение;
	Документы.СчетФактураПолученный.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		НоваяСтрока.СуммаВсего = ДанныеЗаполнения.Товары.Итог("Вознаграждение");
	Иначе
		НоваяСтрока.СуммаВсего = ДанныеЗаполнения.Товары.Итог("Вознаграждение") + ДанныеЗаполнения.Автомобили.Итог("Вознаграждение");
	КонецЕсли;
	Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомиссионера()

// Производит заполнение объекта на основании документа "Расходный кассовый ордер".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// При вводе на основании РКО добавляем только одну строку в ТЧ.
	СтрокаТоваров					= Товары.Добавить();
	СтрокаТоваров.Номенклатура		= Справочники.Номенклатура.Предоплата;
	СтрокаТоваров.Количество		= 1;
	СтрокаТоваров.ЕдиницаИзмерения	= СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения;
	СтрокаТоваров.Коэффициент		= СтрокаТоваров.ЕдиницаИзмерения.Коэффициент;
	СтрокаТоваров.СтавкаНДС			= РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(ДанныеЗаполнения.СтавкаНДС);
	СтрокаТоваров.СуммаВсего		= ДанныеЗаполнения.СуммаДокумента;
	Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТоваров, ДополнительныеСвойства.ПараметрыДействия);
	СуммаДокумента    				= Товары.Итог("СуммаВсего");
	СуммаНДСДокумента 				= Товары.Итог("СуммаНДС");
	СтрокаТоваров.СуммаНДС 			= ДанныеЗаполнения.СуммаНДС;
	
	СтатьяДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "СтатьяДДС");
	Если Не СтатьяДДС.РазрешитьВводАвансовойСчетФактуры Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Поступление денежных средств не является авансом. Счет-фактура выданная не нужна.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РасходныйКассовыйОрдер()

// Производит заполнение объекта на основании документа "Отчет комитенту".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитенту(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетКомитентуТовары.Номенклатура,
	|	СУММА(ОтчетКомитентуТовары.Количество) КАК Количество,
	|	СУММА(ОтчетКомитентуТовары.СуммаВсего) КАК Сумма,
	|	ОтчетКомитентуТовары.СтавкаНДС,
	|	СУММА(ОтчетКомитентуТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(ОтчетКомитентуТовары.Количество) КАК КоличествоОсталось,
	|	СУММА(ОтчетКомитентуТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОтчетКомитентуТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	ОтчетКомитентуТовары.ХарактеристикаНоменклатуры,
	|	ОтчетКомитентуТовары.ГТД
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ОтчетКомитентуТовары
	|ГДЕ
	|	ОтчетКомитентуТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомитентуТовары.Номенклатура,
	|	ОтчетКомитентуТовары.СтавкаНДС,
	|	ОтчетКомитентуТовары.ХарактеристикаНоменклатуры,
	|	ОтчетКомитентуТовары.ГТД";
	ТабТоваров = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализованныеТовары.Номенклатура,
	|	РеализованныеТовары.ХарактеристикаНоменклатуры,
	|	РеализованныеТовары.ГТД,
	|	СУММА(РеализованныеТовары.Количество) КАК Количество,
	|	СУММА(РеализованныеТовары.Количество) КАК КоличествоОсталось
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
	|ГДЕ
	|	РеализованныеТовары.Регистратор = &Основание
	|	И РеализованныеТовары.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТовары.ГТД,
	|	РеализованныеТовары.ХарактеристикаНоменклатуры,
	|	РеализованныеТовары.Номенклатура";
	
	ТабГТД = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ТабТоваров) Тогда
		Документы.СчетФактураПолученный.ЗаполнитьДаннымОтчетаКомитента(ЭтотОбъект, ТабТоваров, ТабГТД);
	КонецЕсли;
	
	// Подсчет новой суммы документа назначения.
	СуммаДокумента    = Товары.Итог("СуммаВсего");
	СуммаНДСДокумента = Товары.Итог("СуммаНДС");
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомитенту()

// Производит заполнение объекта на основании документа "Возврат от покупателя".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратОтПокупателяТовары.Номенклатура,
	|	СУММА(ВозвратОтПокупателяТовары.Количество) КАК Количество,
	|	СУММА(ВозвратОтПокупателяТовары.СуммаВсего) КАК Сумма,
	|	ВозвратОтПокупателяТовары.СтавкаНДС,
	|	СУММА(ВозвратОтПокупателяТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(ВозвратОтПокупателяТовары.Количество) КАК КоличествоОсталось,
	|	СУММА(ВозвратОтПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВозвратОтПокупателяТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	ВозвратОтПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ВозвратОтПокупателяТовары.ГТД
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары КАК ВозвратОтПокупателяТовары
	|ГДЕ
	|	ВозвратОтПокупателяТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратОтПокупателяТовары.Номенклатура,
	|	ВозвратОтПокупателяТовары.СтавкаНДС,
	|	ВозвратОтПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ВозвратОтПокупателяТовары.ГТД";
	ТабТоваров = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	СУММА(-ГТДПартийТоваровКомпании.Количество) КАК КоличествоОсталось,
	|	СУММА(-ГТДПартийТоваровКомпании.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД";
	
	ТабГТД = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ТабТоваров) Тогда
		Документы.СчетФактураПолученный.ЗаполнитьДаннымОтчетаКомитента(ЭтотОбъект, ТабТоваров, ТабГТД);
	КонецЕсли;
	
	// Подсчет новой суммы документа назначения.
	СуммаДокумента    = Товары.Итог("СуммаВсего");
	СуммаНДСДокумента = Товары.Итог("СуммаНДС");
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателя()

// Производит заполнение объекта на основании документа "Возврат автомобилей от покупателя".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателяАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// получим автомобили из документа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратОтПокупателяАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	ВозвратОтПокупателяАвтомобилейАвтомобили.Количество КАК Количество,
	|	ВозвратОтПокупателяАвтомобилейАвтомобили.Сумма КАК Сумма,
	|	ВозвратОтПокупателяАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратОтПокупателяАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ВозвратОтПокупателяАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка) КАК Партия,
	|	Автомобили.ГТД КАК ГТД
	|ИЗ
	|	Документ.ВозвратОтПокупателяАвтомобилей.Автомобили КАК ВозвратОтПокупателяАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Автомобили КАК Автомобили
	|		ПО ВозвратОтПокупателяАвтомобилейАвтомобили.Автомобиль = Автомобили.Ссылка
	|ГДЕ
	|	ВозвратОтПокупателяАвтомобилейАвтомобили.Ссылка = &Основание";
	РезультатЗапросаПоАвто = Запрос.Выполнить().Выгрузить();
	
	// Дополним табличную часть товаров автомобилями
	Для Каждого СтрокаАвто Из РезультатЗапросаПоАвто Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаАвто.Номенклатура;
		Документы.СчетФактураПолученный.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАвто);
		НоваяСтрока.СуммаНДС = СтрокаАвто.СуммаНДС;
		НоваяСтрока.Цена = НоваяСтрока.Сумма;
		НоваяСтрока.ГТД = СтрокаАвто.ГТД;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателяАвтомобилей()

// Производит заполнение объекта на основании документа "Корректировка поступления".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗаполнитьНомера(ДанныеЗаполнения);
	
	ХозОперация = Справочники.ХозОперации.СчетФактураПолученныйКорректировка;
	Товары.Очистить();
	
	Для Каждого стрОснования Из ДанныеЗаполнения.Товары Цикл
		Если стрОснования.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если стрОснования.Подтверждение = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), стрОснования);
	КонецЦикла;
	
	// Закроем дальнейшее заполнение.
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаПоступления()

// Производит заполнение объекта на основании документа "Отчет комиссионера за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомиссионераЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// обработаем заполнение по отчету комиссионера
	Возврат ОбработкаЗаполнения_ОтчетКомиссионера(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомиссионераЗаАвтомобили()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Грузоотправитель = ДанныеЗаполнения.Контрагент;
	
	Для Каждого Строка Из ДанныеЗаполнения.Автомобили Цикл
		
		СтрокаТоваров                  = Товары.Добавить();
		СтрокаТоваров.Номенклатура     = Строка.Автомобиль;
		СтрокаТоваров.Количество       = Строка.Количество;
		СтрокаТоваров.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		СтрокаТоваров.Коэффициент      = 1;
		СтрокаТоваров.Цена             = Строка.Цена;
		СтрокаТоваров.Сумма            = Строка.Сумма;
		СтрокаТоваров.СтавкаНДС        = Строка.СтавкаНДС;
		СтрокаТоваров.СуммаНДС         = Строка.СуммаНДС;
		СтрокаТоваров.СуммаВсего       = Строка.СуммаВсего;
		СтрокаТоваров.ГТД              = Строка.ГТД;
		
	КонецЦикла;
	
	// Подсчет новой суммы документа назначения
	СуммаДокумента = Товары.Итог("СуммаВсего");
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Корректировка поступления автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступленияАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоИсправление = (ДанныеЗаполнения.ХозОперация =
					  Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейИсправлениеВПервичныхДокументах);
	ЕстьКорректировка = Ложь;
	Корректировка     = Неопределено;
	ОригиналОснование = Неопределено;
	ПервоеИсправление = Неопределено;
	ИсправлениеОснования = Неопределено;
	
	// Получим документ оригинал и корректировку
	Попытка
		ДокДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Исключение
		ДокДокументОснование = Неопределено;
	КонецПопытки;
	
	КорректировкаПоСогласованию = Ложь;
	НайденаКорректировка = Ложь;
	Пока Истина Цикл
		Если ДокДокументОснование = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КорректировкаПоСогласованию = (ДокДокументОснование.ХозОперация =
			Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон);
		КорректировкаИсправления = (ДокДокументОснование.ХозОперация =
				Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейИсправлениеВПервичныхДокументах);
		НайденаКорректировка = НайденаКорректировка ИЛИ КорректировкаПоСогласованию;
		
		Если КорректировкаИсправления
			И ИсправлениеОснования = Неопределено
			И ОригиналОснование = Неопределено Тогда
			ИсправлениеОснования = ДокДокументОснование;
		КонецЕсли;
		
		Если КорректировкаПоСогласованию И ЭтоИсправление И Корректировка = Неопределено Тогда
			ЕстьКорректировка = Истина;
			Корректировка = ДокДокументОснование;
		КонецЕсли;
		Если КорректировкаИсправления И ПервоеИсправление = Неопределено И (НЕ НайденаКорректировка) Тогда
			ПервоеИсправление = ДокДокументОснование;
			ЕстьИсправление = Истина;
		КонецЕсли;
		Если ОригиналОснование = Неопределено
			И Корректировка <> ДокДокументОснование
			И КорректировкаПоСогласованию
		Тогда
			ОригиналОснование = ДокДокументОснование;
		КонецЕсли;
		Если ТипЗнч(ДокДокументОснование) <> Тип("ДокументСсылка.КорректировкаПоступления")
			И ТипЗнч(ДокДокументОснование) <> Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда
			Если ОригиналОснование = Неопределено Тогда
				ОригиналОснование = ДокДокументОснование;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Если ОригиналОснование = Неопределено И КорректировкаПоСогласованию Тогда
			ИсправлениеОснования = Неопределено;
		КонецЕсли;
		
		ДокДокументОснование = ДокДокументОснование.ДокументОснование;
	КонецЦикла;
	
	ЕстьОснование = (ОригиналОснование <> Неопределено);
	// получим счет фактуру для документов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование В (&Док)";
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Корректировка);
	МассивДокументов.Добавить(ОригиналОснование);
	МассивДокументов.Добавить(ПервоеИсправление);
	МассивДокументов.Добавить(ИсправлениеОснования);
	Запрос.УстановитьПараметр("Док", МассивДокументов);
	
	ТаблСФ = Запрос.Выполнить().Выгрузить();
	
	Исправление = ЭтоИсправление;
	Если ЭтоИсправление Тогда
		Если ПервоеИсправление = Неопределено Тогда
			НомерИсправления = 1;
			УчитыватьИсправлениеИсходногоДокумента = Ложь;
		Иначе
			МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование", ПервоеИсправление));
			Если МассивСФ.Количество() = 0 Тогда
				Если ЭтоИсправление Тогда
					НомерИсправления = 1;
				Иначе
					НомерИсправления = 0;
				КонецЕсли;
				УчитыватьИсправлениеИсходногоДокумента = Истина;
			Иначе
				УчитыватьИсправлениеИсходногоДокумента = Истина;
				НомерИсправления = МассивСФ[0].Ссылка.НомерИсправления + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьКорректировка Тогда
		МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование",Корректировка));
		Если МассивСФ.Количество() > 0 Тогда
			НомерИсправляемогоКорректировочногоДокумента = ?(НЕ ЗначениеЗаполнено(МассивСФ[0].Ссылка.ВхДокНомер),
																МассивСФ[0].Ссылка.Номер,МассивСФ[0].Ссылка.ВхДокНомер);
			ДатаИсправляемогоКорректировочногоДокумента  = ?(НЕ ЗначениеЗаполнено(МассивСФ[0].Ссылка.ВхДокДата),
																МассивСФ[0].Ссылка.Дата,МассивСФ[0].Ссылка.ВхДокДата);
		КонецЕсли;
	КонецЕсли;
	
	Если ОригиналОснование <> Неопределено Тогда
		МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование",ОригиналОснование));
		Если МассивСФ.Количество() > 0 Тогда
			НомерИсходногоДокумента = ?(НЕ ЗначениеЗаполнено(МассивСФ[0].Ссылка.ВхДокНомер),
															 МассивСФ[0].Ссылка.Номер, МассивСФ[0].Ссылка.ВхДокНомер);
			ДатаИсходногоДокумента  = ?(НЕ ЗначениеЗаполнено(МассивСФ[0].Ссылка.ВхДокДата),
															 МассивСФ[0].Ссылка.Дата, МассивСФ[0].Ссылка.ВхДокДата);
		КонецЕсли;
		Если ИсправлениеОснования <> Неопределено Тогда
			МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование", ИсправлениеОснования));
			Если МассивСФ.Количество() > 0 Тогда
				НомерИсправленияИсходногоДокумента =
					?(НЕ ЗначениеЗаполнено(МассивСФ[0].Ссылка.ВхДокНомер),
						МассивСФ[0].Ссылка.НомерИсправления,
						МассивСФ[0].Ссылка.ВхДокНомер);
				ДатаИсправленияИсходногоДокумента =
					?(НЕ ЗначениеЗаполнено(МассивСФ[0].Ссылка.ВхДокДата),
						МассивСФ[0].Ссылка.Дата,
						МассивСФ[0].Ссылка.ВхДокДата);
				УчитыватьИсправлениеИсходногоДокумента = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.СчетФактураПолученныйКорректировка;
	ЭтотОбъект.Товары.Очистить();
	
	Для Каждого Строка Из ДанныеЗаполнения.Автомобили Цикл
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Номенклатура = Строка.Автомобиль;
		НоваяСтрока.Количество   = 1;
		НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		НоваяСтрока.Коэффициент = 1;
	КонецЦикла;
	
	// закроем дальнейшее заполнение
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаПоступленияАвтомобилей()

#КонецОбласти

Функция ВводСчетФактурыВозможен(Документ)
	
	Возврат НЕ ДляОснованияУжеВведенСчетФактура(Документ) И ЕстьСчетФактураОснованияДокументаОснования(Документ);
	
КонецФункции

Функция ДляОснованияУжеВведенСчетФактура(Документ)
	
	ОтборПоСсылке = "";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ОтборПоСсылке = "И СчетФактураПолученный.Ссылка <> &ЭтотДокумент";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СчетФактураПолученный.Ссылка) КАК ДокументПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ДокументОснование) КАК ОснованиеПредставление
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
	|	И НЕ СчетФактураПолученный.ПометкаУдаления
	|	%1", ОтборПоСсылке));
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
		Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru='На основании документа <%1> уже введен <%2>.'"),
		Выборка.ОснованиеПредставление,
		Выборка.ДокументПредставление
	);
	
	УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Выборка.Документ, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьСчетФактураОснованияДокументаОснования(Документ)
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если НЕ (ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей")) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
	|	И НЕ СчетФактураПолученный.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Не обнаружен исходный счет-фактура к исправлению.%1Введите счет-фактуру к документу %2, а затем введите исправленный счет-фактуру'"),
			Символы.ПС,
			Строка(Основание)
		);
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьИсходныеНомераСтрок()	
	
	Если ХозОперация = Справочники.ХозОперации.СчетФактураПолученныйКорректировка Тогда
		
		ОснованиеДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
		
		// Такая ситуация возможна при получении документа оп ЭДО. Обрабатываться должно корректно
		Если Не ЗначениеЗаполнено(ОснованиеДокументаОснования) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ОснованиеДокументаОснования);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураПолученныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетФактураПолученныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетФактураПолученныйТовары.ГТД КАК ГТД,
		|	СчетФактураПолученныйТовары.ИсходныйНомерСтрокиТовара КАК ИсходныйНомерСтроки
		|ИЗ
		|	Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
		|ГДЕ
		|	СчетФактураПолученныйТовары.Ссылка.ДокументОснование = &ДокументОснование
		|	И НЕ СчетФактураПолученныйТовары.Ссылка.ПометкаУдаления";
		
		ТоварыИсходногоСчетаФактуры = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			
			ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ГТД");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТекущаяСтрока);
			Результат = ТоварыИсходногоСчетаФактуры.НайтиСтроки(ПараметрыОтбора);
			Если Результат.Количество() > 0 Тогда
				ТекущаяСтрока.ИсходныйНомерСтрокиТовара = Результат[0].ИсходныйНомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			ТекущаяСтрока.ИсходныйНомерСтрокиТовара = ТекущаяСтрока.НомерСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНомера(Основание)
	
	Если НЕ ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоИсправление = Истина;
	
	Корректировка     = Неопределено;
	ОригиналОснование = Неопределено;
	
	// Получим документ оригинал и корректировку.
	УстановитьПривилегированныйРежим(Истина);
	ДокДокументОснование = Основание.ДокументОснование;
	КорректировкаПоСогласованию = Ложь;
	НайденаКорректировка = Ложь;
	
	Пока Истина Цикл
		
		Если ДокДокументОснование = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КорректировкаПоСогласованию =
			ДокДокументОснование.ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон
			ИЛИ ДокДокументОснование.ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон;
		КорректировкаИсправления =
			ДокДокументОснование.ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах
			ИЛИ ДокДокументОснование.ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейИсправлениеВПервичныхДокументах;
		НайденаКорректировка = НайденаКорректировка ИЛИ КорректировкаПоСогласованию;
		
		Если КорректировкаПоСогласованию И Корректировка = Неопределено Тогда
			ЕстьКорректировка = Истина;
			Корректировка = ДокДокументОснование;
		КонецЕсли;
		
		Если ОригиналОснование = Неопределено И Корректировка <> ДокДокументОснование И КорректировкаПоСогласованию Тогда
			ОригиналОснование = ДокДокументОснование;
		КонецЕсли;
		
		Если НЕ (ТипЗнч(ДокДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(ДокДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей")) Тогда
			Если ОригиналОснование = Неопределено Тогда
				ОригиналОснование = ДокДокументОснование;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		ДокДокументОснование = ДокДокументОснование.ДокументОснование;
		
	КонецЦикла;
	
	ЕстьОснование = (ОригиналОснование <> Неопределено);
	
	// Получим счет фактуру для документов.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование В (&Док)";
	ДокументыОснования = Новый Массив;
	ДокументыОснования.Добавить(Корректировка);
	ДокументыОснования.Добавить(ОригиналОснование);
	Запрос.УстановитьПараметр("Док", ДокументыОснования);
	
	ТаблСФ = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьКорректировка Тогда
		МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование", Корректировка));
		Если МассивСФ.Количество() > 0 Тогда
			НомерИсправляемогоКорректировочногоДокумента = МассивСФ[0].Ссылка.Номер;
			ДатаИсправляемогоКорректировочногоДокумента  = МассивСФ[0].Ссылка.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если ОригиналОснование <> Неопределено Тогда
		МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование", ОригиналОснование));
		Если МассивСФ.Количество() > 0 Тогда
			НомерИсходногоДокумента = МассивСФ[0].Ссылка.Номер;
			ДатаИсходногоДокумента  = МассивСФ[0].Ссылка.Дата;
		КонецЕсли;
	КонецЕсли;

	ОперацияИсправление = ПредопределенноеЗначение(
		"Справочник.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах"
	);
	ОперацияИсправлениеАвтомобилей = ПредопределенноеЗначение(
		"Справочник.ХозОперации.КорректировкаПоступленияАвтомобилейИсправлениеВПервичныхДокументах"
	);
	Если Основание.ХозОперация = ОперацияИсправление ИЛИ Основание.ХозОперация = ОперацияИсправлениеАвтомобилей Тогда
		
		Исправление = Истина;
		НомерИсправления = Основание.НомерИсправления;
		
		Если 
			ЗначениеЗаполнено(Основание.ДокументОснование)
			И (Основание.ДокументОснование.ХозОперация = ОперацияИсправление
				ИЛИ Основание.ДокументОснование.ХозОперация = ОперацияИсправлениеАвтомобилей)
		Тогда
			
			НомерДата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Основание.ДокументОснование,
				"НомерИсправления, Дата"
			);
			УчитыватьИсправлениеИсходногоДокумента = Истина;
			НомерИсправленияИсходногоДокумента = НомерДата.НомерИсправления;
			ДатаИсправленияИсходногоДокумента = НомерДата.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", Истина);

#КонецОбласти

#КонецЕсли
