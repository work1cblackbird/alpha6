// Модуль менеджера документа "Счет фактура полученный"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СчетФактураПолученный);

КонецФункции

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
	Результат.Добавить("Товары");
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("ДокументОснование");
	Результат.Добавить("ПараметрыДокумента");
	Результат.Добавить("Грузоотправитель");
	Результат.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	Результат.Добавить("Исправление");
	Результат.Добавить("НомерИсправления");
	Результат.Добавить("НомерИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("НомерИсправленияИсходногоДокумента");
	Результат.Добавить("ДатаИсправленияИсходногоДокумента");
	Результат.Добавить("НомерИсходногоДокумента");
	Результат.Добавить("ДатаИсходногоДокумента");
    Возврат Результат;
    
КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовПоступления();
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);

	ПеренесеныВсеСвойства = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученныйДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДополнительныеРеквизиты КАК СчетФактураПолученныйДополнительныеРеквизиты
	|ГДЕ
	|	СчетФактураПолученныйДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураПолученный");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
		
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_СчетФактураПолученный""";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	
	
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияДополнительныеРеквизиты.Свойство КАК Свойство,
	|	КорректировкаПоступленияДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.КорректировкаПоступления.ДополнительныеРеквизиты КАК КорректировкаПоступленияДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаПоступленияДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И КорректировкаПоступленияДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполнения документа по переданным данным из отчета комитента.
//
// Параметры:
//  ЭтотОбъект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТабТоваров		- ТаблицаЗначений      - Таблица данных о товарах.
//  ТабГТД   		- ТаблицаЗначений      - Таблица данных о ГТД.
//
Процедура ЗаполнитьДаннымОтчетаКомитента(Форма, ТабТоваров, ТабГТД) Экспорт
	
	Для Каждого стрМассива Из ТабТоваров Цикл
		
		Если ТабГТД <> Неопределено Тогда
			
			Если стрМассива.КоличествоОсталось = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор 			= Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",стрМассива.Номенклатура,стрМассива.ХарактеристикаНоменклатуры);
			МассивПоиска 	= ТабГТД.НайтиСтроки(Отбор);
			
			Для Каждого ТекСтрока Из МассивПоиска Цикл
				
				Если стрМассива.КоличествоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекСтрока.КоличествоОсталось = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СписываемКоличество = Мин(стрМассива.КоличествоОсталось,ТекСтрока.КоличествоОсталось);
				СписываемСумма      = ?(стрМассива.КоличествоОсталось = СписываемКоличество, стрМассива.СуммаОсталось, Окр((стрМассива.Сумма/стрМассива.Количество)*СписываемКоличество,2));
				СписываемСуммаНДС   = ?(стрМассива.КоличествоОсталось = СписываемКоличество, стрМассива.СуммаНДСОсталось, Окр((стрМассива.СуммаНДС/стрМассива.Количество)*СписываемКоличество,2));
				
				НоваяСтрока 				= Форма.Товары.Добавить();
				НоваяСтрока.Номенклатура 	= стрМассива.Номенклатура;
				ТоварыНоменклатураПриИзменении(Форма, НоваяСтрока);
				
				НоваяСтрока.ХарактеристикаНоменклатуры = стрМассива.ХарактеристикаНоменклатуры;
				НоваяСтрока.Количество                 = СписываемКоличество;
				НоваяСтрока.ГТД                        = ТекСтрока.ГТД;
				НоваяСтрока.СтавкаНДС                  = стрМассива.СтавкаНДС;
				НоваяСтрока.СуммаВсего                 = СписываемСумма;
				ТоварыСуммаВсегоПриИзменении(Форма, НоваяСтрока);
				
				НоваяСтрока.СуммаНДС                   = СписываемСуммаНДС;
				ТоварыСуммаНДСПриИзменении(Форма, НоваяСтрока);
				
				// Уменьшим нераспределенное количество.
				стрМассива.КоличествоОсталось = стрМассива.КоличествоОсталось - СписываемКоличество;
				ТекСтрока.КоличествоОсталось  = ТекСтрока.КоличествоОсталось - СписываемКоличество;
				стрМассива.СуммаОсталось      = стрМассива.СуммаОсталось - СписываемСумма;
				стрМассива.СуммаНДСОсталось   = стрМассива.СуммаНДСОсталось - СписываемСуммаНДС;
			КонецЦикла;
		КонецЕсли;
		
		// Если осталось еще допишем без гтд.
		Если стрМассива.КоличествоОсталось > 0 Тогда
			НоваяСтрока 				= Форма.Товары.Добавить();
			НоваяСтрока.Номенклатура 	= стрМассива.Номенклатура;
			ТоварыНоменклатураПриИзменении(Форма, НоваяСтрока);
			
			НоваяСтрока.ХарактеристикаНоменклатуры = стрМассива.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество                 = стрМассива.КоличествоОсталось;
			НоваяСтрока.ГТД                        = Справочники.ГТД.ПустаяСсылка();
			НоваяСтрока.СтавкаНДС                  = стрМассива.СтавкаНДС;
			НоваяСтрока.СуммаВсего                 = стрМассива.СуммаОсталось;
			ТоварыСуммаВсегоПриИзменении(Форма, НоваяСтрока);
			
			НоваяСтрока.СуммаНДС                   = стрМассива.СуммаНДСОсталось;
			ТоварыСуммаНДСПриИзменении(Форма, НоваяСтрока);
			// Если расхождения по сумма кинем их на последнюю строку.
		ИначеЕсли стрМассива.СуммаОсталось <> 0 ИЛИ стрМассива.СуммаНДСОсталось <> 0 Тогда
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + стрМассива.СуммаОсталось;
			СтараяСуммаНДС         = НоваяСтрока.СуммаНДС;
			ТоварыСуммаВсегоПриИзменении(Форма, НоваяСтрока);
			
			НоваяСтрока.СуммаНДС   = СтараяСуммаНДС + стрМассива.СуммаНДСОсталось;
			ТоварыСуммаНДСПриИзменении(Форма, НоваяСтрока)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВыборку(ДокументОснование) Экспорт
	Запрос = Новый Запрос;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КорректировкаПоступленияТовары.Количество КАК Количество,
		|	КорректировкаПоступленияТовары.КоличествоПоДокументуПоступления КАК КоличествоПоДокументуПоступления,
		|	КорректировкаПоступленияТовары.КоличествоРазница КАК КоличествоРазница,
		|	КорректировкаПоступленияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КорректировкаПоступленияТовары.ЕдиницаИзмеренияПоДокументуПоступления КАК ЕдиницаИзмеренияПоДокументуПоступления,
		|	КорректировкаПоступленияТовары.Коэффициент КАК Коэффициент,
		|	КорректировкаПоступленияТовары.КоэффициентПоДокументуПоступления КАК КоэффициентПоДокументуПоступления,
		|	КорректировкаПоступленияТовары.Цена КАК Цена,
		|	КорректировкаПоступленияТовары.Сумма КАК Сумма,
		|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаПоступленияТовары.СуммаНДС КАК СуммаНДС,
		|	КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления КАК СуммаНДСПоДокументуПоступления,
		|	КорректировкаПоступленияТовары.СуммаНДСРазница КАК СуммаНДСРазница,
		|	КорректировкаПоступленияТовары.СуммаВсего КАК СуммаВсего,
		|	КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления КАК СуммаВсегоПоДокументуПоступления,
		|	КорректировкаПоступленияТовары.СуммаВсегоРазница КАК СуммаВсегоРазница,
		|	КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления КАК СтавкаНДСДоИзменения
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
		|	И (КорректировкаПоступленияТовары.Количество <> КорректировкаПоступленияТовары.КоличествоПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияТовары.ЕдиницаИзмерения <> КорректировкаПоступленияТовары.ЕдиницаИзмеренияПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияТовары.Коэффициент <> КорректировкаПоступленияТовары.КоэффициентПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияТовары.СтавкаНДС <> КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияТовары.СуммаНДС <> КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияТовары.СуммаРозничная <> КорректировкаПоступленияТовары.СуммаРозничнаяПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияТовары.СуммаВсего <> КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления)";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаПоступленияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	"""" КАК ХарактеристикаНоменклатуры,
		|	1 КАК Количество,
		|	1 КАК КоличествоПоДокументуПоступления,
		|	0 КАК КоличествоРазница,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.Цена КАК Цена,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.Сумма КАК Сумма,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСПоДокументуПоступления КАК СуммаНДСПоДокументуПоступления,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСРазница КАК СуммаНДСРазница,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоПоДокументуПоступления КАК СуммаВсегоПоДокументуПоступления,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоРазница КАК СуммаВсегоРазница,
		|	КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДСПоДокументуПоступления КАК СтавкаНДСДоИзменения
		|ИЗ
		|	Документ.КорректировкаПоступленияАвтомобилей.Автомобили КАК КорректировкаПоступленияАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаПоступленияАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И (КорректировкаПоступленияАвтомобилейАвтомобили.Сумма <> КорректировкаПоступленияАвтомобилейАвтомобили.СуммаПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДС <> КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДСПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДС <> КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСПоДокументуПоступления
		|			ИЛИ КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсего <> КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоПоДокументуПоступления)";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка",ДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции.
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 		Объект.Товары.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаНДСДокумента",    	Объект.Товары.Итог("СуммаНДС"));
	
	// Производим установку полученных значений в итоговые показатели объекта.
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции.
	ИтогиОперации.Вставить("СуммаНДС",    ИтогиОперации.СуммаНДСДокумента);
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции.
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получим признак авансового счет-фактуры
//
Функция ЭтоАвансовыйСчетФактура(Объект)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ДокументОснование");
	
	СписокОснований = Новый Массив();
	СписокОснований.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	СписокОснований.Добавить(Тип("ДокументСсылка.Выписка"));
	СписокОснований.Добавить(Тип("ДокументСсылка.ЧекНаОплату"));
	
	Возврат СписокОснований.Найти(ТипЗнч(ДокументОснование)) <> Неопределено;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("Грузоотправитель");
	ОбязательныеРеквизиты.Добавить("ВхДокНомер");
	ОбязательныеРеквизиты.Добавить("ВхДокДата");
	
	Если НЕ (Объект.ХозОперация = Справочники.ХозОперации.СчетФактураПолученныйКорректировка
		И ПолучитьСуммуКорректировки(Объект).СуммаКорректировки <> 0)
		И НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки.
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров.
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ГТД");
	УникальныеТовары.Добавить("Цена");
	
	// Структура уникальных реквизитов табличных частей.
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки.
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта.
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки.
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Товары");
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("ДокументОснование");
	Результат.Добавить("Грузоотправитель");
	Результат.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	Результат.Добавить("Исправление");
	Результат.Добавить("НомерИсправления");
	Результат.Добавить("НомерИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("НомерИсправленияИсходногоДокумента");
	Результат.Добавить("ДатаИсправленияИсходногоДокумента");
	Результат.Добавить("НомерИсходногоДокумента");
	Результат.Добавить("ДатаИсходногоДокумента");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия.
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		// Если имеем дело с автомобилем - обработаем локально
		// Установим количество.
		Строка.Количество = 1;
		Строка.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		Строка.Коэффициент = 1;
		
		// Заполним ставку НДС
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
			ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;
			Если ОсвобожденОтНДС Тогда
				Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			Иначе
				Строка.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС);
			КонецЕсли;
		КонецЕсли;
		
		НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
		Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, Строка.Номенклатура,, НаМомент,
			Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		// Расчет сумм по строке
		ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
	
		// Устанавливаем параметры выполнения операции.
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
		Если Строка.Номенклатура = Неопределено Тогда
			Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		// Вызываем общий обработчик события.
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
		
		// Проверим, имеют ли смысл дальнейшие действия.
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		Строка.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		Строка.Коэффициент      = 1;
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		// Если имеем дело с автомобилем. Количество всегда = 1
		Строка.Количество = 1;
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СчетФактураПолученный");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по документу-основанию'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуОснование";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением  = Ложь;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть не доступны в зависимости от параметров объекта.
	ДоступностьКоманд = Новый Соответствие;
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Видимость",   Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Доступность", Истина);
	
	// Возвращаем сформированные параметры доступности команд проверки.
	Возврат ДоступностьКоманд;
	
КонецФункции // ПолучитьДоступностьКомандЗаполнения()

// Обработчик заполнения документа на основании документа.
//
Функция ТоварыЗаполнитьПоДокументуОснование(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен документ основание.'"), Ссылка);
	Иначе
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Истина);
		ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоДокументуОснование()

Функция ПолучитьСуммуКорректировки(Объект) Экспорт
	
	Результат = Новый Структура();
	
	СуммаКорректировки = 0;
	СуммаКорректировкиБезНДС = 0;
	
	Если Объект.Хозоперация = Справочники.ХозОперации.СчетФактураПолученныйКорректировка
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			ТаблицаТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Товары").Выгрузить();
			
			СуммаКорректировки       = ТаблицаТовары.Итог("СуммаВсегоРазница");
			СуммаКорректировкиБезНДС = СуммаКорректировки - ТаблицаТовары.Итог("СуммаНДСРазница");
			
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда
			
			ТаблицаАвтомобили = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Автомобили").Выгрузить();
			
			СуммаКорректировки       = ТаблицаАвтомобили.Итог("СуммаВсегоРазница");
			СуммаКорректировкиБезНДС = СуммаКорректировки - ТаблицаАвтомобили.Итог("СуммаНДСРазница");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("СуммаКорректировки", СуммаКорректировки);
	Результат.Вставить("СуммаКорректировкиБезНДС", СуммаКорректировкиБезНДС);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСуммуКорректировки()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СчетФактураПолученный",
		"СчетФактураПолученный",
		НСтр("ru = 'Счет-фактура полученный'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СчетФактураПолученный",
		"КорректировочныйСчетФактура",
		НСтр("ru = 'Корректировочный счет-фактура'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ХозОперация", Справочники.ХозОперации.СчетФактураПолученныйКорректировка); 
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУКД",
		"ПФ_MXL_УКД",
		НСтр("ru = 'Универсальный корректировочный документ'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ХозОперация", Справочники.ХозОперации.СчетФактураПолученныйКорректировка);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа.
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураПолученный") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"СчетФактураПолученный",
															НСтр("ru = 'Счет-фактура полученный'"),
															ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати,ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КорректировочныйСчетФактура") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"КорректировочныйСчетФактура",
															НСтр("ru = 'Корректировочный счет-фактура'"),
															ПечатьКорректировочныйСчетФактура(МассивОбъектов, ОбъектыПечати,ПараметрыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Формирует печатную форму "СчетФактура".
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Если Документ.Дата >= Дата('20210701') Тогда
			ПечатьСчетФактура2021(Документ, ТабличныйДокумент, ПараметрыПечати, ОбъектыПечати);
			Продолжить;
		КонецЕсли;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыводитьКодТНВЭД = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
		ВыводитьКодВидаТовара = (Документ.Дата >= Дата('20171001'));
		
		// Валюта печати
		ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
		
		// Пересчет сумм по выбранной валюте.
		Если ВыборкаТабличнойЧасти.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура_24_01_2012");
		
		// Зададим параметры макета.
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		КоличествоСтрок = ВыборкаТабличнойЧасти.Количество();
		
		ОбластьШапка           = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтого           = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		Если СокрЛП(Документ.ВхДокНомер) = "" Тогда
			НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		Иначе
			НомерДляПечати = СокрЛП(Документ.ВхДокНомер);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Документ.ВхДокДата) Тогда
			ДатаДляПечати = Документ.Дата;
		Иначе
			ДатаДляПечати = Документ.ВхДокДата;
		КонецЕсли;
		
		Если ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ТекстЗаголовкаОтчета    = НСтр("ru = 'Счет-фактура №'") + " " + НомерДляПечати
				+" от " + Формат(ДатаДляПечати, "ДЛФ=DD");
			ТекстЗаголовкаИзменения = НСтр("ru = 'Исправление  №'") + " " + "----" + " " + "от" + " " + "----";
		Иначе
			ТекстЗаголовкаИзменения = "Исправление  № " 
				+ ?(ЗначениеЗаполнено(Документ.НомерИсправления), Документ.НомерИсправления, "----")
				+" от " + Формат(Документ.Дата, "ДЛФ=DD");
			
			// Найдем изначальную счет фактуру.
			ДокументОсн = Документ.ДокументОснование;
			Пока ТипЗнч(ДокументОсн) = Тип("ДокументСсылка.КорректировкаПоступления") Цикл
				ДокументОсн = ДокументОсн.ДокументОснование;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетФактураПолученный.Ссылка
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &ДокументОсн";
			Запрос.УстановитьПараметр("ДокументОсн", ДокументОсн);
			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗапроса.Следующий() Тогда
				ТекстЗаголовкаОтчета = НСтр("ru = 'Счет-фактура №'") + " "
					+ ?(ПустаяСтрока(ВыборкаЗапроса.Ссылка.ВхДокНомер),
						УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ВыборкаЗапроса.Ссылка.ПолучитьОбъект()),
						СокрЛП(ВыборкаЗапроса.Ссылка.ВхДокНомер))
					+ " " + "от" + " "
					+ Формат(
						?(НЕ ЗначениеЗаполнено(ВыборкаЗапроса.Ссылка.ВхДокДата), ВыборкаЗапроса.Ссылка.Дата,
						ВыборкаЗапроса.Ссылка.ВхДокДата),
					"ДЛФ=DD");
			Иначе
				ТекстЗаголовкаОтчета = НСтр("ru = 'Счет-фактура  №'") + " " + "----" + " " + "от" + " " + "----";
			КонецЕсли;
		КонецЕсли;
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		ОбластьШапка.Параметры.ТекстЗаголовка 			= ТекстЗаголовкаОтчета;
		ОбластьШапка.Параметры.ТекстЗаголовкаИсправление = ТекстЗаголовкаИзменения;
		
		ДанныеПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
			"ФормаСобственности,ГоловнойКонтрагент");
		ПокупательОбособленноеПодразделение = Ложь;
		Если ДанныеПоставщика.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			Поставщик = ДанныеПоставщика.ГоловнойКонтрагент;
			ПокупательОбособленноеПодразделение = Истина;
		Иначе
			Поставщик = Документ.Контрагент;
		КонецЕсли;
		
		ОбластьШапка.Параметры.Поставщик = Поставщик;
		ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОбластьШапка.Параметры.Поставщик, ДатаДокумента);
		ОбластьШапка.Параметры.ПредставлениеПоставщика	= "Продавец:" + " " + ПредставлениеПоставщика;
		
		ОбластьШапка.Параметры.АдресПоставщика	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Поставщик, Новый Структура("АдресЮридический", "Адрес:" + " "));
		
		ОбластьШапка.Параметры.ИННПоставщика	= НСтр("ru = 'ИНН/КПП продавца:'") + " " 
			+ ОбластьШапка.Параметры.Поставщик.ИНН + "/" 
			+ РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
		
		ОбластьШапка.Параметры.Грузоотправитель	= Документ.Грузоотправитель;
		Если Поставщик = ОбластьШапка.Параметры.Грузоотправитель Тогда
			ОбластьШапка.Параметры.ГрузоотправительПредставление	= НСтр("ru = 'Грузоотправитель и его адрес: он же'");
		Иначе
			ОбластьШапка.Параметры.ГрузоотправительПредставление	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				ОбластьШапка.Параметры.Грузоотправитель,
				Новый Структура("Наименование,АдресФактический", НСтр("ru = 'Грузоотправитель и его адрес:'") + " ", ""));
		КонецЕсли;
		ОбластьШапка.Параметры.ВалютаШапка = НСтр("ru = 'Валюта: наименование, код'") + " "
			+ ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное), ВалютаПечатногоДокумента.НаименованиеПолное,
				ВалютаПечатногоДокумента.Наименование)
			+ ", " + ВалютаПечатногоДокумента.Код;
		
		ОбластьШапка.Параметры.Грузополучатель	= ?(ЗначениеЗаполнено(Документ.Грузополучатель), Документ.Грузополучатель, Документ.ПодразделениеКомпании);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ГрузополучательПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Грузополучатель,
			Новый Структура("Наименование,АдресФактический", НСтр("ru = 'Грузополучатель и его адрес:'") + " ", ""),
			ДополнительныеПараметры);
		
		Если КоличествоСтрок > 0 Тогда
			ЕстьТовары = Ложь;
			Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
						ЕстьТовары = Истина;
						Прервать;
					КонецЕсли; 
				ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
					ЕстьТовары = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьТовары Тогда
				ОбластьШапка.Параметры.ГрузоотправительПредставление= НСтр("ru = 'Грузоотправитель и его адрес:'") + " ----";
				ОбластьШапка.Параметры.ГрузополучательПредставление= НСтр("ru = 'Грузополучатель и его адрес:'") + " ----";
			КонецЕсли; 
		КонецЕсли; 
		
		Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.Выписка") Тогда
			ОбластьШапка.Параметры.ПредставлениеПоДокументу = НСтр("ru = 'К платежно-расчетному документу №'") 
				+ " " + Документ.ДокументОснование.Номер + " " + "от:" + " " + Формат(Документ.ДокументОснование.Дата, "ДЛФ=D");
			ОбластьШапка.Параметры.ПоДокументу = Документ.ДокументОснование;
		Иначе
			ОбластьШапка.Параметры.ПредставлениеПоДокументу	= НСтр("ru = 'К платежно-расчетному документу №'")
				+ "          " + "от:";
		КонецЕсли;
		
		ОбластьШапка.Параметры.Покупатель = Документ.Организация;
		
		ОбластьШапка.Параметры.АдресПокупателя	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании,
			Новый Структура("АдресЮридический", "Адрес:" + " "),
			ДополнительныеПараметры);
		
		ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ОбластьШапка.Параметры.Покупатель, ДатаДокумента);
		ОбластьШапка.Параметры.ПредставлениеПокупателя = "Покупатель:" + " " + ПредставлениеПокупателя;
		
		КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(ОбластьШапка.Параметры.Покупатель,
			Документ.ПодразделениеКомпании, ДатаДокумента);
		
		ОбластьШапка.Параметры.ИННПокупателя	= НСтр("ru = 'ИНН/КПП покупателя:'") + " "
			+ ОбластьШапка.Параметры.Покупатель.ИНН + "/" + КПП;
		
		// Если дата документа позднее 01.07.2017.
		Если ВыводитьКодВидаТовара Тогда
			ОбластьШапка.Параметры.Редакция =
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 19 августа 2017 № 981)'");
		ИначеЕсли Документ.Дата >= Дата('20170701') Тогда
			ОбластьШапка.Параметры.Редакция =
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 25 мая 2017 г. № 625)'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Если дата документа позднее 01.07.2017.
		Если Документ.Дата >= Дата('20170701') Тогда
			ОбластьШапкаИдГосКонтракта = Макет.ПолучитьОбласть("ШапкаИдГосКонтракта");
			ЗаголовокИдентификатораГосударственногоКонтракта =
				НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения)'") 
				+ ?(ВыводитьКодВидаТовара, " (" + НСтр("ru = 'при наличии'") + ")", "") + ": ";
			ОбластьШапкаИдГосКонтракта.Параметры.ИдентификаторГосударственногоКонтракта =
				ЗаголовокИдентификатораГосударственногоКонтракта + Документ.ИдентификаторГосударственногоКонтракта;
			ТабличныйДокумент.Вывести(ОбластьШапкаИдГосКонтракта);
		КонецЕсли;
		
		// Уберем колонку, вывод которой утвержден с 1 октября 2017 г.
		Если НЕ ВыводитьКодВидаТовара Тогда
			
			ОбластьКодВидаТовара = Макет.Область("КодВидаТовара");
			
			НовыйТекст = ОбластьШапкаТаблицы.Область(2, ОбластьКодВидаТовара.Лево - 11, 3, ОбластьКодВидаТовара.Лево - 1).Текст;
			
			ОбластьВыреза = ОбластьШапкаТаблицы.Область(2, ОбластьКодВидаТовара.Лево - 11, 3, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Текст = НовыйТекст;
			
			ОбластьВыреза = ОбластьШапкаТаблицы.Область(4, ОбластьКодВидаТовара.Лево - 11, 4, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			
			НовыйПараметр = ОбластьСтрока.Область(1, ОбластьКодВидаТовара.Лево - 11, 1, ОбластьКодВидаТовара.Лево - 1).Параметр;
			ОбластьВыреза = ОбластьСтрока.Область(1, ОбластьКодВидаТовара.Лево - 11, 1, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Параметр = НовыйПараметр;
			
			ОбластьШапкаТаблицы.Параметры.ТекстНомерТаможеннойДекларации = НСтр("ru = 'Номер таможенной декларации'");
			
		Иначе
			
			ОбластьШапкаТаблицы.Параметры.ТекстНомерТаможеннойДекларации = 
				НСтр("ru = 'Регистрационный номер таможенной декларации'");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		СтруктураИтоговПоСтранице = Новый Структура("Сумма, СуммаНДС, СуммаВсего", 0, 0, 0);
		
		// Заполним параметры шапки таблицы для следующего листа.
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовкаОтчета;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы	 = "Страница:" + " " + НомерСтраницы;
		
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		мсвДопОбластиПодвала.Добавить(ОбластьИтого);
		
		Ном=1;
		СуммаВсегоБезНДС = 0;
		ЕстьСодержание = ЕстьРеквизит(ВыборкаТабличнойЧасти, "Содержание");
		Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаТоваров);
			Если СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата Тогда
				ОбластьСтрока.Параметры.Количество = "----";	
			Иначе
				ОбластьСтрока.Параметры.Количество = Формат(СтрокаТоваров.Количество,ФорматВыводаКоличества);
			КонецЕсли;
			КоличествоТовара = СтрокаТоваров.Количество;
			Если ЕстьСодержание И ЗначениеЗаполнено(СтрокаТоваров.Содержание) Тогда
				ОбластьСтрока.Параметры.ТоварНаименование = СтрокаТоваров.Содержание;
			Иначе
				ОбластьСтрока.Параметры.ТоварНаименование =
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
			КонецЕсли;
			
			Если СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата Тогда 
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = "----";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "----";
				Если ВыводитьКодВидаТовара Тогда
					КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
					Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
						ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
					Иначе
						ОбластьСтрока.Параметры.КодВидаТовара = "----";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = СтрокаТоваров.ЕдиницаИзмерения.Код;
				Если ВыводитьКодВидаТовара Тогда
					ОбластьСтрока.Параметры.КодВидаТовара = "--";
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
					КоличествоТовара = СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент;
					ОбластьСтрока.Параметры.Количество = КоличествоТовара;
					ОбластьСтрока.Параметры.ЕдиницаИзмерения = "ч";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "356";
				КонецЕсли;
				Если ВыводитьКодВидаТовара Тогда
					ОбластьСтрока.Параметры.КодВидаТовара = "--";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмерения) Тогда
					Если СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					Иначе
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "-";
					КонецЕсли;
				КонецЕсли;
				Если ВыводитьКодВидаТовара Тогда
					КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
					Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
						ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
					Иначе
						ОбластьСтрока.Параметры.КодВидаТовара = "-";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.СтавкаНДС = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСтавкиНДС(
				СтрокаТоваров.СтавкаНДС, "%");
			
			Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
				ОбластьСтрока.Параметры.ПредставлениеГТД	= "-----";
				ОбластьСтрока.Параметры.ПредставлениеСтраны	= "-----";
				ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "-----";
			Иначе
				
				СтранаИмпортер = СтрокаТоваров.ГТД.Страна;
				ЕстьВКлассификаторе = УправлениеКонтактнойИнформацией
					.ДанныеКлассификатораСтранМираПоКоду(СтранаИмпортер.Код) <> Неопределено;
				
				ОбластьСтрока.Параметры.ПредставлениеГТД =
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТД);
				ОбластьСтрока.Параметры.ПредставлениеСтраны	= СтрокаТоваров.ГТД.Страна.Наименование;
				
				Если ЕстьВКлассификаторе Тогда
					
					ОбластьСтрока.Параметры.ПредставлениеСтраныКод = СтранаИмпортер.Код;
					
				Иначе
					
					ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "--";
					
				КонецЕсли;
				
			КонецЕсли;
			
			СуммаБезНДС = СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС;
			ЦенаБезНДС = СуммаБезНДС / КоличествоТовара;
			ОбластьСтрока.Параметры.Сумма = Формат(СуммаБезНДС, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.Цена = Формат(ЦенаБезНДС, ФорматВыводаСуммы);
			СуммаВсегоБезНДС = СуммаВсегоБезНДС + СуммаБезНДС;
			ОбластьСтрока.Параметры.Акциз = НСтр("ru = 'без акциза'");
			ОбластьСтрока.Параметры.СуммаНДС = ?(СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС, НСтр("ru = 'Без НДС'"),
				Формат(СтрокаТоваров.СуммаНДС, ФорматВыводаСуммы));
			ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТоваров.СуммаВсего, ФорматВыводаСуммы);
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогиПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				?(КоличествоСтрок = Ном, мсвДопОбластиПодвала, Неопределено));
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("Сумма,СуммаНДС,СуммаВсего", 0, 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТоваров, СтруктураИтоговПоСтранице);
			СтруктураИтоговПоСтранице.Сумма = СтруктураИтоговПоСтранице.Сумма - СтрокаТоваров.Сумма + СуммаБезНДС;
			Ном = Ном + 1;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогиПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		ОбластьИтого.Параметры.ИтогоСумма	= Формат(СуммаВсегоБезНДС,ФорматВыводаСуммы);
		ОбластьИтого.Параметры.ИтогоСуммаНДС	= Формат(ВыборкаТабличнойЧасти.Итог("СуммаНДС"), ФорматВыводаСуммы);
		ОбластьИтого.Параметры.ИтогоВсего		= Формат(ВыборкаТабличнойЧасти.Итог("СуммаВсего"), ФорматВыводаСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Заполним информацию о руководителях организации.
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
		
		ЭтоИП = Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		Если Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			ОбластьПодвал.Параметры.Заполнить(Руководитель);
			ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
				Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер");
			ОбластьПодвал.Параметры.Заполнить(ГлавныйБухгалтер);
		ИначеЕсли ЭтоИП Тогда
			ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
			ОбластьПодвал.Параметры.Свидетельство =
				Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Контрагент,
					Перечисления.ВидыДокументов.Свидетельство);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ТекстИндивидуальныйПредприниматель = ?(ВыводитьКодВидаТовара,
			НСтр("ru = 'Индивидуальный предприниматель или иное уполномоченное лицо'"),
			НСтр("ru = 'Индивидуальный предприниматель'"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		// Отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСчетФактура()

// Формирует печатную форму "КорректировочныйСчетФактура".
//
Функция ПечатьКорректировочныйСчетФактура(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Если Документ.Дата >= Дата("20210701000000") Тогда
			
			ПечатьКорректировочныйСчетФактура2021(Документ, ТабличныйДокумент, ОбъектыПечати, ПараметрыПечати);
			Продолжить;
			
		КонецЕсли;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыводитьКодВидаТовара = (Документ.Дата >= Дата('20171001'));
		ВыводитьКодТНВЭД      = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
		
		// Валюта печати
		ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		// Зададим параметры макета.
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура");
		
		ОбластьШапка               = Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовокТаблицы    = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока              = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого               = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал              = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		// Выводим шапку
		ОбластьШапка.Параметры.НомерИсправленияКорректировочного = 
			?(НЕ ЗначениеЗаполнено(Документ.НомерИсправления), Документ.Номер, Документ.НомерИсправления);
		ОбластьШапка.Параметры.ДатаИсправленияКорректировочного = Формат(Документ.Дата,"ДЛФ=DD");
		
		ХозОперация = Документ.ДокументОснование.ХозОперация;
		Если ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон
			ИЛИ ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон Тогда
			
			ОбластьШапка.Параметры.Номер = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсправляемогоКорректировочногоДокумента),
				Документ.Номер, Документ.НомерИсправляемогоКорректировочногоДокумента);
			ОбластьШапка.Параметры.Дата  = Формат(
				?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправляемогоКорректировочногоДокумента),
					Документ.Дата, Документ.ДатаИсправляемогоКорректировочногоДокумента),
				"ДЛФ=DD");
			ОбластьШапка.Параметры.НомерИсправленияКорректировочного = "-";
			ОбластьШапка.Параметры.ДатаИсправленияКорректировочного = "-";
		Иначе
			ОбластьШапка.Параметры.Номер = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсправляемогоКорректировочногоДокумента),
				"-", Документ.НомерИсправляемогоКорректировочногоДокумента);
			ОбластьШапка.Параметры.Дата  = Формат(
				?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправляемогоКорректировочногоДокумента),
					"-", Документ.ДатаИсправляемогоКорректировочногоДокумента),
				"ДЛФ=DD");
		КонецЕсли;
		ОбластьШапка.Параметры.НомерСчетаФактуры = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсходногоДокумента),
			"--", Документ.НомерИсходногоДокумента);
		ОбластьШапка.Параметры.ДатаСчетаФактуры = Формат(
			?(НЕ ЗначениеЗаполнено(Документ.ДатаИсходногоДокумента), "--", Документ.ДатаИсходногоДокумента), "ДЛФ=DD");
		ОбластьШапка.Параметры.НомерИсправления = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсправленияИсходногоДокумента),
			"--", Документ.НомерИсправленияИсходногоДокумента);
		ОбластьШапка.Параметры.ДатаИсправления   = Формат(
			?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправленияИсходногоДокумента),
				"--", Документ.ДатаИсправленияИсходногоДокумента),
			"ДЛФ=DD");
		
		ОбластьШапка.Параметры.Покупатель = Документ.Организация;
		ОбластьШапка.Параметры.ПредставлениеПокупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ОбластьШапка.Параметры.Покупатель, ДатаДокумента);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьШапка.Параметры.АдресПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
		
		КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(Документ.Организация,
			Документ.ПодразделениеКомпании, ДатаДокумента);
		ОбластьШапка.Параметры.ИННПокупателя = Документ.Организация.ИНН + "/" + КПП;
		
		ДанныеПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
			"ФормаСобственности,ГоловнойКонтрагент");
		Если ДанныеПоставщика.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			Поставщик = ДанныеПоставщика.ГоловнойКонтрагент;
		Иначе
			Поставщик = Документ.Контрагент;
		КонецЕсли;
		
		ОбластьШапка.Параметры.Поставщик = Поставщик;
		ОбластьШапка.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ОбластьШапка.Параметры.Поставщик, ДатаДокумента);
		ОбластьШапка.Параметры.АдресПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Поставщик, Новый Структура("АдресЮридический", ""), ДополнительныеПараметры);
		ОбластьШапка.Параметры.ИННПоставщика = Поставщик.ИНН + "/"
			+ РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
		
		ОбластьШапка.Параметры.Валюта = НСтр("ru = 'Валюта: наименование, код'") + " "
			+ ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное), ВалютаПечатногоДокумента.НаименованиеПолное,
				ВалютаПечатногоДокумента.Наименование)
			+ ", " + ВалютаПечатногоДокумента.Код;
		
		// Если дата документа позднее 01.07.2017.
		Если ВыводитьКодВидаТовара Тогда
			ОбластьШапка.Параметры.Редакция =
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 19 августа 2017 № 981)'");
		ИначеЕсли Документ.Дата >= Дата('20170701') Тогда
			ОбластьШапка.Параметры.Редакция =
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 25 мая 2017 г. № 625)'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Если дата документа позднее 01.07.2017.
		Если Документ.Дата >= Дата('20170701') Тогда
			ОбластьШапкаИдГосКонтракта = Макет.ПолучитьОбласть("ШапкаИдГосКонтракта");
			ЗаголовокИдентификатораГосударственногоКонтракта =
				НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения)'")
				+ ?(ВыводитьКодВидаТовара, " (" + НСтр("ru = 'при наличии'") + ")", "") + ": ";
			ОбластьШапкаИдГосКонтракта.Параметры.ИдентификаторГосударственногоКонтракта =
				ЗаголовокИдентификатораГосударственногоКонтракта + Документ.ИдентификаторГосударственногоКонтракта;
			ТабличныйДокумент.Вывести(ОбластьШапкаИдГосКонтракта);
		КонецЕсли;
		
		// Уберем колонку, вывод которой утвержден с 1 октября 2017 г.
		Если НЕ ВыводитьКодВидаТовара Тогда
			
			ОбластьКодВидаТовара = Макет.Область("КодВидаТовара");
			НовыйТекст =
				ОбластьЗаголовокТаблицы.Область(1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Лево - 1).Текст;
			
			ОбластьВыреза = ОбластьЗаголовокТаблицы.Область( 1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Текст = НовыйТекст;
			
			ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(4, ОбластьКодВидаТовара.Лево - 4, 4, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			
			ОбластьКодВидаТовара = Макет.Область("СтрокаКодВидаТовара");
			НомерСтроки = 1;
			Пока НомерСтроки < 5 Цикл
				ТекстЯчейки = ОбластьСтрока.Область(
					НомерСтроки, ОбластьКодВидаТовара.Лево - 4, НомерСтроки, ОбластьКодВидаТовара.Лево - 1).Текст;
				ОбластьВыреза = ОбластьСтрока.Область(
					НомерСтроки, ОбластьКодВидаТовара.Лево - 4, НомерСтроки, ОбластьКодВидаТовара.Право);
				ОбластьВыреза.Объединить();
				ОбластьВыреза.Текст = ТекстЯчейки;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
		СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
		СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
		СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
		СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
		СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);

		СтруктураИтоговПоСтраницеИтого = Новый Структура();
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУвеличение", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУменьшение", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУменьшение",    0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУвеличение",    0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУменьшение",   0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУвеличение",   0);
		
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		мсвДопОбластиПодвала.Добавить(ОбластьИтого);
		
		Ном=1;
		СуммаВсегоБезНал = 0;
		ВыборкаТабличнойЧасти = ПолучитьВыборку(Документ.ДокументОснование);
		
		// Пересчет сумм по выбранной валюте.
		Если ВыборкаТабличнойЧасти.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.Документ = Документ.ДокументОснование;
			ДокументОбъектСтруктура.ЭтоПродажа = Ложь;
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
				ДокументОбъектСтруктура, ВалютаПечатногоДокумента);
		КонецЕсли;
		
		ЕстьСодержание = ЕстьРеквизит(ВыборкаТабличнойЧасти, "Содержание");
		Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
			
			Если ЕстьСодержание И ЗначениеЗаполнено(СтрокаТоваров.Содержание) Тогда
				ОбластьСтрока.Параметры.НаименованиеНоменклатуры = СтрокаТоваров.Содержание;
			Иначе
				ОбластьСтрока.Параметры.НаименованиеНоменклатуры = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
					СтрокаТоваров.Номенклатура);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмерения = СтрокаТоваров.ЕдиницаИзмерения;
				Если ВыводитьКодВидаТовара Тогда
					КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
					Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
						ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
					Иначе
						ОбластьСтрока.Параметры.КодВидаТовара = "-";
					КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = "796";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмерения = "шт";
				Если ВыводитьКодВидаТовара Тогда
					ОбластьСтрока.Параметры.КодВидаТовара = "-";
				КонецЕсли;
				КонецЕсли;
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = "-";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмерения = "-";
				Если ВыводитьКодВидаТовара Тогда
					ОбластьСтрока.Параметры.КодВидаТовара = "-";
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.КоличествоДоИзменения    = Формат(
				СтрокаТоваров.КоличествоПоДокументуПоступления, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.КоличествоПослеИзменения = Формат(СтрокаТоваров.Количество, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.КоличествоДоИзменения    = Формат(
				СтрокаТоваров.КоличествоПоДокументуПоступления, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.СтавкаНДС = СтрокаТоваров.СтавкаНДС;
			
			
			ОбластьСтрока.Параметры.СтоимостьСНДСДоИзменения    = Формат(
				СтрокаТоваров.СуммаВсегоПоДокументуПоступления, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СтоимостьСНДСПослеИзменения = Формат(СтрокаТоваров.СуммаВсего, ФорматВыводаСуммы);
			СуммаВсегоРазница = СтрокаТоваров.СуммаВсегоПоДокументуПоступления - СтрокаТоваров.СуммаВсего;
			ОбластьСтрока.Параметры.РазницаСНДСУвеличение       = Формат(
				?(СуммаВсегоРазница > 0, СуммаВсегоРазница, 0), ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаСНДСУменьшение       = Формат(
				?(СуммаВсегоРазница < 0, - СуммаВсегоРазница, 0), ФорматВыводаСуммы);
			
			ОбластьСтрока.Параметры.СуммаНДСДоИзменения     = Формат(
				СтрокаТоваров.СуммаНДСПоДокументуПоступления, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДСПослеИзменения  = Формат(СтрокаТоваров.СуммаНДС, ФорматВыводаСуммы);
			СуммаНДСРазница = СтрокаТоваров.СуммаНДСПоДокументуПоступления - СтрокаТоваров.СуммаНДСПослеИзменения;
			ОбластьСтрока.Параметры.РазницаНДСУвеличение    = Формат(
				?(СуммаНДСРазница > 0, СуммаНДСРазница, 0), ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаНДСУменьшение    = Формат(
				?(СуммаНДСРазница < 0, - СуммаНДСРазница, 0), ФорматВыводаСуммы);
			
			ОбластьСтрока.Параметры.СтоимостьБезНДСДоИзменения    = Формат(
				(СтрокаТоваров.СуммаВсегоПоДокументуПоступления - СтрокаТоваров.СуммаНДСПоДокументуПоступления),
				ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СтоимостьБезНДСПослеИзменения = Формат(
				(СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС), ФорматВыводаСуммы);
			РазницаБезНДС = (СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС)
				- (СтрокаТоваров.СуммаВсегоПоДокументуПоступления - СтрокаТоваров.СуммаНДСПоДокументуПоступления);
			ОбластьСтрока.Параметры.РазницаБезНДСУвеличение = Формат(?(РазницаБезНДС > 0, РазницаБезНДС, 0), ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаБезНДСУменьшение = Формат(
				?(РазницаБезНДС < 0, - РазницаБезНДС, 0), ФорматВыводаСуммы);
			
			Если НЕ СтрокаТоваров.КоличествоПоДокументуПоступления = 0 Тогда
				ОбластьСтрока.Параметры.ЦенаДоИзменения = Формат(
					(СтрокаТоваров.СуммаВсегоПоДокументуПоступления - СтрокаТоваров.СуммаНДСПоДокументуПоступления)
						/ СтрокаТоваров.КоличествоПоДокументуПоступления,
					ФорматВыводаСуммы);
			Иначе
				ОбластьСтрока.Параметры.ЦенаДоИзменения = Формат(0,ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьСтрока.Параметры.ЦенаПослеИзменения = Формат(
				?(СтрокаТоваров.Количество = 0, 0, (СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС) / СтрокаТоваров.Количество),
				ФорматВыводаСуммы);
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьЗаголовокТаблицы, , НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
				СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
				СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
				СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
				СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
				СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);
				НомерСтраницыПред = НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение = СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение
				+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение = СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение
				+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
			СтруктураИтоговПоСтранице.РазницаНДСУменьшение    = СтруктураИтоговПоСтранице.РазницаНДСУменьшение
				+ ?(СуммаНДСРазница < 0, - СуммаНДСРазница, 0);
			СтруктураИтоговПоСтранице.РазницаНДСУвеличение    = СтруктураИтоговПоСтранице.РазницаНДСУвеличение
				+ ?(СуммаНДСРазница > 0, СуммаНДСРазница, 0);
			СтруктураИтоговПоСтранице.РазницаСНДСУменьшение   = СтруктураИтоговПоСтранице.РазницаСНДСУменьшение
				+ ?(СуммаВсегоРазница < 0, - СуммаВсегоРазница, 0);
			СтруктураИтоговПоСтранице.РазницаСНДСУвеличение   = СтруктураИтоговПоСтранице.РазницаСНДСУвеличение
				+ ?(СуммаВсегоРазница > 0, СуммаВсегоРазница, 0);
			
			// Итого
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение
				+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение
				+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение
				+ ?(СуммаНДСРазница < 0, - СуммаНДСРазница, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение
				+ ?(СуммаНДСРазница > 0, СуммаНДСРазница, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение
				+ ?(СуммаВсегоРазница < 0, - СуммаВсегоРазница, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение
				+ ?(СуммаВсегоРазница > 0, СуммаВсегоРазница, 0);
			Ном = Ном + 1;
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтого, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		ОбластьИтого.Параметры.РазницаБезНДСУвеличение = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаБезНДСУменьшение = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаНДСУменьшение    = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение,    ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаНДСУвеличение    = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение,    ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаСНДСУменьшение   = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение,   ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаСНДСУвеличение   = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение,   ФорматВыводаСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Заполним информацию о руководителях организации.
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
		
		Если Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			ОбластьПодвал.Параметры.Заполнить(Руководитель);
			ОбластьПодвал.Параметры.Заполнить(
				УправлениеПечатьюПлатформа.
				ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтерПредставление"));
		КонецЕсли;
		
		Если Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
			ОбластьПодвал.Параметры.Свидетельство =
				Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Организация,
					Перечисления.ВидыДокументов.Свидетельство);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ТекстИндивидуальныйПредприниматель = ?(ВыводитьКодВидаТовара,
			НСтр("ru = 'Индивидуальный предприниматель или иное уполномоченное лицо'"),
			НСтр("ru = 'Индивидуальный предприниматель'"));
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_КорректировочныйСчетФактура";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьКорректировочныйСчетФактура()

// Функция получения данных для УКД.
//
Функция ПолучитьДанныеДляПечатиУКД(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Если НЕ Объект.ХозОперация = Справочники.ХозОперации.СчетФактураПолученныйКорректировка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = ОбщегоНазначения
		.МенеджерОбъектаПоСсылке(Объект.ДокументОснование)
		.ПолучитьДанныеДляПечатиУКД(Объект.ДокументОснование.ПолучитьОбъект())
		.Товары;
		
	// Данные документа
	ДанныеОбъекта.Вставить("Дата"                                  , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                                 , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ХозОперация"                           , Объект.ХозОперация);
	ДанныеОбъекта.Вставить("НомерИсправления"                      , ?(ЗначениеЗаполнено(Объект.НомерИсправления), Объект.НомерИсправления, "--"));
	ДанныеОбъекта.Вставить("ДатаИсправления"                       , ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, "--"));
	ДанныеОбъекта.Вставить("ДокументОснование"                     , Объект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"                       , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"                         , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"                                , Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"                             , Объект.Контрагент);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"                 , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы"            , Неопределено);
	ДанныеОбъекта.Вставить("Покупатель"                            , Объект.Организация);
	ДанныеОбъекта.Вставить("Организация"                           , Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"                 , ?(ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"                                , ТаблицаТоваров);
	ДанныеОбъекта.Вставить("Статус"                                , 1);
	ДанныеОбъекта.Вставить("Исправление"                           , Объект.Исправление);
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента"               , ?(ЗначениеЗаполнено(Объект.НомерИсходногоДокумента), Объект.НомерИсходногоДокумента, "--"));
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента"   			   , ?(ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента), Объект.ДатаИсходногоДокумента, "--"));
	ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента"	   , ?(ЗначениеЗаполнено(Объект.НомерИсправленияИсходногоДокумента), Объект.НомерИсправленияИсходногоДокумента, "--"));
	ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента"     , ?(ЗначениеЗаполнено(Объект.ДатаИсправленияИсходногоДокумента), Объект.ДатаИсправленияИсходногоДокумента, "--"));
	ДанныеОбъекта.Вставить("Ссылка"                                , Объект.Ссылка);
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
		
	// свойства
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта));
		
	ДанныеОбъекта.Вставить("Руководитель"     	     , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель")
	);
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 ,
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер")
	);
	ДанныеОбъекта.Вставить("Менеджер"         		 , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер")
	);
	Возврат ДанныеОбъекта;
		
КонецФункции

Функция ПечатьСчетФактура2021(Документ, ТабличныйДокумент, ПараметрыПечати, ОбъектыПечати)
	
	ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ВыводитьКодТНВЭД = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
	
	// Валюта печати
	ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
	
	// Пересчет сумм по выбранной валюте.
	Если ВыборкаТабличнойЧасти.Количество() > 0
		И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
		
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
		ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
		
		ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
		ДокументОбъектСтруктура,
		ВалютаПечатногоДокумента);
	КонецЕсли;
	
	ЕстьРНПТ = ЕстьПрослеживаемыйТовар(ВыборкаТабличнойЧасти);
	ЕстьСтоимостьТовараПрослеживания = Ложь;
	
	Если ЕстьРНПТ Тогда
		Если Документ.Дата >= Дата('20231001') Тогда
			ЕстьСтоимостьТовараПрослеживания = Истина;
			ИмяМакета = "ОбщийМакет.ПФ_MXL_СчетФактура_01_10_2023_Прослеж";
		Иначе
			ИмяМакета = "ОбщийМакет.ПФ_MXL_СчетФактура_02_04_2021_Прослеж";
		КонецЕсли;
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	Иначе
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура_02_04_2021");
	КонецЕсли;

	Исправление = Ложь;
	Если ЕстьРеквизит(Документ, "Исправление") Тогда 
		Исправление = Документ.Исправление И Документ.ДатаИсходногоДокумента >= Дата('20241001');
	Иначе
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда 
			Если Документ.Дата >= Дата('20241001') Тогда 
				Исправление = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Документ.Дата >= Дата('20241001') ИЛИ Исправление Тогда
		НомерРедакции = 1096;
	Иначе
		НомерРедакции = 534;
	КонецЕсли;
	
	// Зададим параметры макета.
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	КоличествоСтрок = ВыборкаТабличнойЧасти.Количество();
	
	ОбластьШапка           = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
	ОбластьИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтого           = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
	
	Если СокрЛП(Документ.ВхДокНомер) = "" Тогда
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
	Иначе
		НомерДляПечати = СокрЛП(Документ.ВхДокНомер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Документ.ВхДокДата) Тогда
		ДатаДляПечати = Документ.Дата;
	Иначе
		ДатаДляПечати = Документ.ВхДокДата;
	КонецЕсли;
	
	Если ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		НомерДокумента =  НомерДляПечати;
		ДатаДокумента  = Формат(ДатаДляПечати, "ДЛФ=DD");
		НомерИсправления = "----";
		ДатаИсправления = "----";
		
	Иначе
		
		НомерИсправления = ?(ЗначениеЗаполнено(Документ.НомерИсправления), Документ.НомерИсправления, "----");
		ДатаИсправления = Формат(Документ.Дата, "ДЛФ=DD");
		
		// Найдем изначальную счет фактуру.
		ДокументОсн = Документ.ДокументОснование;
		Пока ТипЗнч(ДокументОсн) = Тип("ДокументСсылка.КорректировкаПоступления") Цикл
			ДокументОсн = ДокументОсн.ДокументОснование;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ДокументОсн";
		Запрос.УстановитьПараметр("ДокументОсн", ДокументОсн);
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗапроса.Следующий() Тогда
			
			НомерДокумента =  ?(ПустаяСтрока(ВыборкаЗапроса.Ссылка.ВхДокНомер),
						УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ВыборкаЗапроса.Ссылка.ПолучитьОбъект()),
						СокрЛП(ВыборкаЗапроса.Ссылка.ВхДокНомер));
			ДатаДокумента  = Формат(?(НЕ ЗначениеЗаполнено(ВыборкаЗапроса.Ссылка.ВхДокДата), ВыборкаЗапроса.Ссылка.Дата,
						ВыборкаЗапроса.Ссылка.ВхДокДата),
					"ДЛФ=DD");
			
		Иначе
			
			НомерДокумента = "----";
			ДатаДокумента = "----";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗаголовкаОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счет-фактура №%1 от %2'"),
		НомерДокумента,
		ДатаДокумента);
	
	Если НомерРедакции = 1096 Тогда 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 16 августа 2024 г. № 1096)'");
	Иначе 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 2 апреля 2021 г. № 534)'");
	КонецЕсли;
	ОбластьШапка.Параметры.Номер = НомерДокумента;
	ОбластьШапка.Параметры.Дата = ДатаДокумента;
	ОбластьШапка.Параметры.НомерИсправления = НомерИсправления;
	ОбластьШапка.Параметры.ДатаИсправления = ДатаИсправления;
	
	// Дата документа
	ДатаДокумента = Документ.Дата;
	
	ДанныеПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
		"ФормаСобственности,ГоловнойКонтрагент");
	ПокупательОбособленноеПодразделение = Ложь;
	Если ДанныеПоставщика.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		Поставщик = ДанныеПоставщика.ГоловнойКонтрагент;
		ПокупательОбособленноеПодразделение = Истина;
	Иначе
		Поставщик = Документ.Контрагент;
	КонецЕсли;
	
	ОбластьШапка.Параметры.Поставщик = Поставщик;
	ПредставлениеПоставщика =
		УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОбластьШапка.Параметры.Поставщик, ДатаДокумента);
	ОбластьШапка.Параметры.ПредставлениеПоставщика	= ПредставлениеПоставщика;
	
	ОбластьШапка.Параметры.АдресПоставщика	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		ОбластьШапка.Параметры.Поставщик, Новый Структура("АдресЮридический", ""));
	ОбластьШапка.Параметры.АдресПоставщика = 
		?(ЗначениеЗаполнено(ОбластьШапка.Параметры.АдресПоставщика), ОбластьШапка.Параметры.АдресПоставщика, "--");
	
	ИННПоставщика = ОбластьШапка.Параметры.Поставщик.ИНН;
	КПППоставщика = РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
	ОбластьШапка.Параметры.ИННПоставщика	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1/%2'"),
		?(ЗначениеЗаполнено(ИННПоставщика), ИННПоставщика, "--"),
		?(ЗначениеЗаполнено(КПППоставщика), КПППоставщика, "--"));
	
	ОбластьШапка.Параметры.Грузоотправитель	= Документ.Грузоотправитель;
	Если Поставщик = ОбластьШапка.Параметры.Грузоотправитель Тогда
		ОбластьШапка.Параметры.ГрузоотправительПредставление	= НСтр("ru = 'он же'");
	Иначе
		ОбластьШапка.Параметры.ГрузоотправительПредставление	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		ОбластьШапка.Параметры.Грузоотправитель,
		Новый Структура("Наименование,АдресФактический", "", ""));
	КонецЕсли;
	ОбластьШапка.Параметры.ВалютаШапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1, %2'"), 
		?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное),
			ВалютаПечатногоДокумента.НаименованиеПолное, ВалютаПечатногоДокумента.Наименование),
		ВалютаПечатногоДокумента.Код);
	
	ОбластьШапка.Параметры.Грузополучатель	= ?(ЗначениеЗаполнено(Документ.Грузополучатель), Документ.Грузополучатель, Документ.ПодразделениеКомпании);
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.ДляПечати = Истина;
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьШапка.Параметры.ГрузополучательПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
	ОбластьШапка.Параметры.Грузополучатель,
	Новый Структура("Наименование,АдресФактический", "", ""),
	ДополнительныеПараметры);
	
	Если КоличествоСтрок > 0 Тогда
		ЕстьТовары = Ложь;
		Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
			Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
					ЕстьТовары = Истина;
					Прервать;
				КонецЕсли; 
			ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				ЕстьТовары = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьТовары Тогда
			ОбластьШапка.Параметры.ГрузоотправительПредставление= " ----";
			ОбластьШапка.Параметры.ГрузополучательПредставление= " ----";
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.Выписка") Тогда
		ОбластьШапка.Параметры.ПредставлениеПоДокументу = 
			Документ.ДокументОснование.Номер + " " + "от:" + " " + Формат(Документ.ДокументОснование.Дата, "ДЛФ=D");
		ОбластьШапка.Параметры.ПоДокументу = Документ.ДокументОснование;
	Иначе
		ОбластьШапка.Параметры.ПредставлениеПоДокументу	= 
		"          " + "от:";
	КонецЕсли;
	
	ДокументОтгрузки = Документ.ДокументОснование;
	Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		
		Если ЕстьРеквизит(ДокументОтгрузки, "ВхДокНомер")
			И ЕстьРеквизит(ДокументОтгрузки, "ВхДокДата") Тогда
			
			НомерДокументаОтгрузки = ?(ЗначениеЗаполнено(ДокументОтгрузки.ВхДокНомер), ДокументОтгрузки.ВхДокНомер, "       ");
			ДатаДокументаОтгрузки = Формат(ДокументОтгрузки.ВхДокДата, "ДЛФ=D");
			
		Иначе
			
			НомерДокументаОтгрузки = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОтгрузки.ПолучитьОбъект());
			ДатаДокументаОтгрузки = Формат(ДокументОтгрузки.Дата, "ДЛФ=D");
			
		КонецЕсли;
		
	Иначе
		
		НомерДокументаОтгрузки = "       ";
		ДатаДокументаОтгрузки = "";
		
	КонецЕсли;
	
	Если НЕ ЭтоАвансовыйСчетФактура(Документ) Тогда

		НомераСтрок = "";
		НаименованиеДокумента = "";
		
		Если НомерРедакции = 1096 Тогда 

			ШаблонПодстрокиДокументаОбОтгрузке = "%1, № %2 от %3 г.";
			НаименованиеДокумента = Документы.СчетФактураВыданный.ПолучитьНаименованиеДокументаОтгрузки(Ложь, ВыборкаТабличнойЧасти);

		Иначе

			ШаблонПодстрокиДокументаОбОтгрузке = "№ п/п %1 № %2 от %3 г.";
			Если ВыборкаТабличнойЧасти.Количество() = 1  Тогда
				НомераСтрок = "1";
			Иначе 
				НомераСтрок = "1 - " + Строка(ВыборкаТабличнойЧасти.Количество());
			КонецЕсли;

		КонецЕсли;

		ОбластьШапка.Параметры.ДокументыОбОтгрузке = СтрШаблон(ШаблонПодстрокиДокументаОбОтгрузке,
			?(НомерРедакции = 1096, НаименованиеДокумента, НомераСтрок),
			?(ЗначениеЗаполнено(НомерДокументаОтгрузки), НомерДокументаОтгрузки, "      "),
			?(ЗначениеЗаполнено(ДатаДокументаОтгрузки), ДатаДокументаОтгрузки, "      "));
		
	КонецЕсли;
	
	ОбластьШапка.Параметры.Покупатель = Документ.Организация;
	
	ОбластьШапка.Параметры.АдресПокупателя	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.ПодразделениеКомпании,
		Новый Структура("АдресЮридический", ""),
		ДополнительныеПараметры);
	ОбластьШапка.Параметры.АдресПокупателя =
		?(ЗначениеЗаполнено(ОбластьШапка.Параметры.АдресПокупателя), ОбластьШапка.Параметры.АдресПокупателя, "--");
	
	ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
	ОбластьШапка.Параметры.Покупатель, ДатаДокумента);
	ОбластьШапка.Параметры.ПредставлениеПокупателя = ПредставлениеПокупателя;
	
	КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(ОбластьШапка.Параметры.Покупатель,
		Документ.ПодразделениеКомпании, ДатаДокумента);
	ИНН = ОбластьШапка.Параметры.Покупатель.ИНН;
	
	ОбластьШапка.Параметры.ИННПокупателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1/%2'"),
		?(ЗначениеЗаполнено(ИНН), ИНН, "--"),
		?(ЗначениеЗаполнено(КПП), КПП, "--"));
	ОбластьШапка.Параметры.ИдентификаторГосударственногоКонтракта = Документ.ИдентификаторГосударственногоКонтракта;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если ЕстьСтоимостьТовараПрослеживания Тогда 
		Если НомерРедакции = 1096 Тогда 
			ОбластьШапкаТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога на добавленную стоимость, в рублях'");
		Иначе 
			ОбластьШапкаТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога'");
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	НомерСтраницы = 2;
	НомерСтраницыПред = НомерСтраницы;
	
	СтруктураИтоговПоСтранице = Новый Структура("Сумма, СуммаНДС, СуммаВсего", 0, 0, 0);
	
	// Заполним параметры шапки таблицы для следующего листа.
	ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовкаОтчета;
	ОбластьШапкаТаблицы.Параметры.НомерСтраницы	 = "Страница:" + " " + НомерСтраницы;
	
	мсвДопОбластиПодвала = Новый Массив;
	мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
	мсвДопОбластиПодвала.Добавить(ОбластьИтого);
	
	Ном=1;
	СуммаВсегоБезНДС = 0;
	ЕстьСодержание = ЕстьРеквизит(ВыборкаТабличнойЧасти, "Содержание");
	Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаТоваров);
		Если СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата Тогда
			ОбластьСтрока.Параметры.Количество = "----";	
		Иначе
			ОбластьСтрока.Параметры.Количество = Формат(СтрокаТоваров.Количество,ФорматВыводаКоличества);
		КонецЕсли;
		КоличествоТовара = СтрокаТоваров.Количество;
		Если ЕстьСодержание И ЗначениеЗаполнено(СтрокаТоваров.Содержание) Тогда
			ОбластьСтрока.Параметры.ТоварНаименование =СтрокаТоваров.Содержание;
		Иначе
			ОбластьСтрока.Параметры.ТоварНаименование =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
		КонецЕсли;
		Если СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата Тогда 
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = "----";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "----";
			КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
			Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
				ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
			Иначе
				ОбластьСтрока.Параметры.КодВидаТовара = "--";
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = СтрокаТоваров.ЕдиницаИзмерения.Код;
			КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
			Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
				ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
			Иначе
				ОбластьСтрока.Параметры.КодВидаТовара = "----";
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = "--";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
			Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
				КоличествоТовара = СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент;
				ОбластьСтрока.Параметры.Количество = КоличествоТовара;
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = "ч";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "356";
			КонецЕсли;
			ОбластьСтрока.Параметры.КодВидаТовара = "--";
		Иначе
			Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмерения) Тогда
				Если СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
					
					Если ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							СтрокаТоваров.ЕдиницаИзмерения,
							"ЕдиницаПоКлассификатору.Код"
						);
						
					ИначеЕсли ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
						
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							СтрокаТоваров.ЕдиницаИзмерения,
							"Код"
						);

					Иначе
						
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
						
					КонецЕсли;
					
				Иначе
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "-";
				КонецЕсли;
			КонецЕсли;
			КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
			Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
				ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
			Иначе
				ОбластьСтрока.Параметры.КодВидаТовара = "-";
			КонецЕсли;
		КонецЕсли;
		ОбластьСтрока.Параметры.СтавкаНДС = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСтавкиНДС(
		СтрокаТоваров.СтавкаНДС, "%");
		
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
			ОбластьСтрока.Параметры.ПредставлениеГТД	= "-----";
			ОбластьСтрока.Параметры.ПредставлениеСтраны	= "-----";
			ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "-----";
		Иначе
			
			СтранаИмпортер = СтрокаТоваров.ГТД.Страна;
			ЕстьВКлассификаторе = УправлениеКонтактнойИнформацией
			.ДанныеКлассификатораСтранМираПоКоду(СтранаИмпортер.Код) <> Неопределено;
			
			ОбластьСтрока.Параметры.ПредставлениеГТД =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТД);
			ОбластьСтрока.Параметры.ПредставлениеСтраны	= СтрокаТоваров.ГТД.Страна.Наименование;
			
			Если ЕстьВКлассификаторе Тогда
				
				ОбластьСтрока.Параметры.ПредставлениеСтраныКод = СтранаИмпортер.Код;
				
			Иначе
				
				ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "--";
				
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаБезНДС = СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС;
		ЦенаБезНДС = СуммаБезНДС / КоличествоТовара;
		ОбластьСтрока.Параметры.Сумма = Формат(СуммаБезНДС, ФорматВыводаСуммы);
		ОбластьСтрока.Параметры.Цена = Формат(ЦенаБезНДС, ФорматВыводаСуммы);
		СуммаВсегоБезНДС = СуммаВсегоБезНДС + СуммаБезНДС;
		ОбластьСтрока.Параметры.Акциз = НСтр("ru = 'без акциза'");
		ОбластьСтрока.Параметры.СуммаНДС = ?(СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС, НСтр("ru = 'Без НДС'"),
		Формат(СтрокаТоваров.СуммаНДС, ФорматВыводаСуммы));
		ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТоваров.СуммаВсего, ФорматВыводаСуммы);
		
		// Получим Количество прослеживаемого товара в единицах прослеживаемости
		Если ЕстьРНПТ Тогда
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) И СтрокаТоваров.ГТД.РНПТ Тогда
				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
					ОбластьСтрока.Параметры.КоличествоПрослеж = Окр(СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент, 3);
					Если ЕстьСтоимостьТовараПрослеживания Тогда 
						ОбластьСтрока.Параметры.СтоимПрослеж = СуммаБезНДС;
					КонецЕсли;
				ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура)=Тип("СправочникСсылка.Автомобили") Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = "796";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = "шт";
					ОбластьСтрока.Параметры.КоличествоПрослеж = 1;
					Если ЕстьСтоимостьТовараПрослеживания Тогда 
						ОбластьСтрока.Параметры.СтоимПрослеж = СуммаБезНДС;
					КонецЕсли;
				Иначе
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = "--";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = "--";
					ОбластьСтрока.Параметры.КоличествоПрослеж = "----";
					Если ЕстьСтоимостьТовараПрослеживания Тогда 
						ОбластьСтрока.Параметры.СтоимПрослеж = "----";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = "--";
				ОбластьСтрока.Параметры.КоличествоПрослеж = "----";
				Если ЕстьСтоимостьТовараПрослеживания Тогда 
					ОбластьСтрока.Параметры.СтоимПрослеж = "----";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим строку, делая проверку попадания на лист.
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
		ОбластьШапкаТаблицы, ОбластьИтогиПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
		?(КоличествоСтрок = Ном, мсвДопОбластиПодвала, Неопределено));
		
		// Инициализация итогов по странице.
		Если НомерСтраницы <> НомерСтраницыПред Тогда
			СтруктураИтоговПоСтранице = Новый Структура("Сумма,СуммаНДС,СуммаВсего", 0, 0, 0);
			НомерСтраницыПред = НомерСтраницы;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		КонецЕсли;
		
		// Добавляем итоги
		УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТоваров, СтруктураИтоговПоСтранице);
		СтруктураИтоговПоСтранице.Сумма = СтруктураИтоговПоСтранице.Сумма - СтрокаТоваров.Сумма + СуммаБезНДС;
		Ном = Ном + 1;
	КонецЦикла;
	
	// Выводим последний подвал, если страниц больше единицы.
	Если НомерСтраницы > 2 Тогда
		УправлениеПечатьюПлатформа.
		ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогиПоСтранице, СтруктураИтоговПоСтранице, Документ);
	КонецЕсли;
	ОбластьИтого.Параметры.ИтогоСумма	= Формат(СуммаВсегоБезНДС,ФорматВыводаСуммы);
	ОбластьИтого.Параметры.ИтогоСуммаНДС	= Формат(ВыборкаТабличнойЧасти.Итог("СуммаНДС"), ФорматВыводаСуммы);
	ОбластьИтого.Параметры.ИтогоВсего		= Формат(ВыборкаТабличнойЧасти.Итог("СуммаВсего"), ФорматВыводаСуммы);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	// Заполним информацию о руководителях организации.
	Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
	
	ЭтоИП = Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	Если Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		ОбластьПодвал.Параметры.Заполнить(Руководитель);
		ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
		Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер");
		ОбластьПодвал.Параметры.Заполнить(ГлавныйБухгалтер);
	ИначеЕсли ЭтоИП Тогда
		ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
		ОбластьПодвал.Параметры.Свидетельство =
		Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Контрагент,
		Перечисления.ВидыДокументов.Свидетельство);
	КонецЕсли;
	
	УправлениеПечатьюПлатформа.
	ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Отметим конец области документа
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	
КонецФункции

Функция ПечатьКорректировочныйСчетФактура2021(Документ, ТабличныйДокумент, ОбъектыПечати, ПараметрыПечати)
	
	ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
	Если СтрНайти(ФорматВыводаСуммы, "ЧН") = 0 Тогда
		
		ФорматВыводаСуммы = ФорматВыводаСуммы + ";ЧН=0.00";
		
	КонецЕсли;
	
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ВыводитьКодВидаТовара = Документ.Дата >= Дата('20171001');
	ВыводитьКодТНВЭД      = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
	
	// Зададим параметры макета.
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ДанныеДляПечати = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ).ПолучитьДанныеДляПечатиУКД(Документ);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ВыборкаТабличнойЧасти = ДанныеДляПечати.Товары;
	
	ЕстьПрослеживаемость = ЕстьПрослеживаемыйТовар(ВыборкаТабличнойЧасти);
	ЕстьСтоимостьТовараПрослеживания = Ложь;
	
	Если ЕстьПрослеживаемость Тогда
		
		Если Документ.Дата >= Дата('20231001') Тогда
			ЕстьСтоимостьТовараПрослеживания = Истина;
			ИмяМакета = "ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура_01_10_2023_Прослеживаемость";
		Иначе
			ИмяМакета = "ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура_02_04_2021_Прослеживаемость";
		КонецЕсли;
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
		
	Иначе
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура_02_04_2021");
		
	КонецЕсли;
	
	ОбластьШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтого            = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
	
	// Валюта печати
	ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// Дата документа
 	ДатаДокумента = Документ.Дата;

	Исправление = Ложь;
	Если ЕстьРеквизит(Документ, "Исправление") Тогда 
		Исправление = Документ.Исправление И Документ.ДатаИсходногоДокумента >= Дата('20241001');
	Иначе
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда 
			Если Документ.Дата >= Дата('20241001') Тогда 
				Исправление = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Документ.Дата >= Дата('20241001') ИЛИ Исправление Тогда
		НомерРедакции = 1096;
	Иначе
		НомерРедакции = 534;
	КонецЕсли;

	Если НомерРедакции = 1096 Тогда 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 16 августа 2024 г. № 1096)'");
	Иначе 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 2 апреля 2021 г. № 534)'");
	КонецЕсли;

	Если ЕстьСтоимостьТовараПрослеживания Тогда 
		Если НомерРедакции = 1096 Тогда 
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога на добавленную стоимость, в рублях'");
		Иначе 
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога'");
		КонецЕсли;
	КонецЕсли;
	
	// Выводим шапку
	ОбластьШапка.Параметры.НомерИсправленияКорректировочного = 
		?(НЕ ЗначениеЗаполнено(Документ.НомерИсправления), Документ.Номер, Документ.НомерИсправления);
	ОбластьШапка.Параметры.ДатаИсправленияКорректировочного = Формат(Документ.Дата,"ДЛФ=DD");
	
	ХозОперация = Документ.ДокументОснование.ХозОперация;
	Если ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон
		ИЛИ ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон Тогда
		
		ОбластьШапка.Параметры.Номер = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсправляемогоКорректировочногоДокумента),
			Документ.Номер, Документ.НомерИсправляемогоКорректировочногоДокумента);
		ОбластьШапка.Параметры.Дата  = Формат(
			?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправляемогоКорректировочногоДокумента),
				Документ.Дата, Документ.ДатаИсправляемогоКорректировочногоДокумента),
			"ДЛФ=DD");
		ОбластьШапка.Параметры.НомерИсправленияКорректировочного = "-";
		ОбластьШапка.Параметры.ДатаИсправленияКорректировочного = "-";
	Иначе
		ОбластьШапка.Параметры.Номер = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсправляемогоКорректировочногоДокумента),
			"-", Документ.НомерИсправляемогоКорректировочногоДокумента);
		ОбластьШапка.Параметры.Дата  = Формат(
			?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправляемогоКорректировочногоДокумента),
				"-", Документ.ДатаИсправляемогоКорректировочногоДокумента),
			"ДЛФ=DD");
	КонецЕсли;
	ОбластьШапка.Параметры.НомерСчетаФактуры = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсходногоДокумента),
		"--", Документ.НомерИсходногоДокумента);
	ОбластьШапка.Параметры.ДатаСчетаФактуры = Формат(
		?(НЕ ЗначениеЗаполнено(Документ.ДатаИсходногоДокумента), "--", Документ.ДатаИсходногоДокумента), "ДЛФ=DD");
	ОбластьШапка.Параметры.НомерИсправления = ?(НЕ ЗначениеЗаполнено(Документ.НомерИсправленияИсходногоДокумента),
		"--", Документ.НомерИсправленияИсходногоДокумента);
	ОбластьШапка.Параметры.ДатаИсправления   = Формат(
		?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправленияИсходногоДокумента),
			"--", Документ.ДатаИсправленияИсходногоДокумента),
		"ДЛФ=DD");
	
	ОбластьШапка.Параметры.Покупатель = Документ.Организация;
	ОбластьШапка.Параметры.ПредставлениеПокупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
		ОбластьШапка.Параметры.Покупатель, ДатаДокумента);
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.ДляПечати = Истина;
	ДополнительныеПараметры.НаДату = ДатаДокумента;
	ОбластьШапка.Параметры.АдресПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.ПодразделениеКомпании, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
	
	КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(Документ.Организация,
		Документ.ПодразделениеКомпании, ДатаДокумента);
	ОбластьШапка.Параметры.ИННПокупателя = Документ.Организация.ИНН + "/" + КПП;
	
	ДанныеПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
		"ФормаСобственности,ГоловнойКонтрагент");
	Если ДанныеПоставщика.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		Поставщик = ДанныеПоставщика.ГоловнойКонтрагент;
	Иначе
		Поставщик = Документ.Контрагент;
	КонецЕсли;
	
	ОбластьШапка.Параметры.Поставщик = Поставщик;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
		ОбластьШапка.Параметры.Поставщик, ДатаДокумента);
	ОбластьШапка.Параметры.АдресПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Поставщик, Новый Структура("АдресЮридический", ""), ДополнительныеПараметры);
	ОбластьШапка.Параметры.ИННПоставщика = Поставщик.ИНН + "/"
		+ РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
	
	ОбластьШапка.Параметры.Валюта = НСтр("ru = 'Валюта: наименование, код'") + " "
		+ ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное), ВалютаПечатногоДокумента.НаименованиеПолное,
			ВалютаПечатногоДокумента.Наименование)
		+ ", " + ВалютаПечатногоДокумента.Код;
		
	ТабличныйДокумент.Вывести(ОбластьШапка);	
	
	// Если дата документа позднее 01.07.2017.
	Если Документ.Дата >= Дата('20170701') Тогда
		ОбластьШапкаИдГосКонтракта = Макет.ПолучитьОбласть("ШапкаИдГосКонтракта");
		
		ЗаголовокИдентификатораГосударственногоКонтракта =
			НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения)'")
			+ ?(ВыводитьКодВидаТовара, " (" + НСтр("ru = 'при наличии'") + ")", "")+": ";
		
		ОбластьШапкаИдГосКонтракта.Параметры.ИдентификаторГосударственногоКонтракта =
			ЗаголовокИдентификатораГосударственногоКонтракта + Документ.ИдентификаторГосударственногоКонтракта;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаИдГосКонтракта);
	КонецЕсли;
	
	// Уберем колонку, вывод которой утвержден с 1 октября 2017 г.
	Если НЕ ВыводитьКодВидаТовара Тогда
		
		ОбластьКодВидаТовара = Макет.Область("КодВидаТовара");
		НовыйТекст =
			ОбластьЗаголовокТаблицы.Область(1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Лево - 1).Текст;
		
		ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Право);
		ОбластьВыреза.Объединить();
		ОбластьВыреза.Текст = НовыйТекст;
		
		ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(4, ОбластьКодВидаТовара.Лево - 4, 4, ОбластьКодВидаТовара.Право);
		ОбластьВыреза.Объединить();
		
		ОбластьКодВидаТовара = Макет.Область("СтрокаКодВидаТовара");
		НомерСтроки = 1;
		Пока НомерСтроки < 5 Цикл
			ТекстЯчейки   = ОбластьСтрока.Область(НомерСтроки, ОбластьКодВидаТовара.Лево - 4,
				НомерСтроки, ОбластьКодВидаТовара.Лево - 1).Текст;
			ОбластьВыреза =
				ОбластьСтрока.Область(НомерСтроки, ОбластьКодВидаТовара.Лево - 4, НомерСтроки, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Текст = ТекстЯчейки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
	
	// Готовим шапку
	НомерСтраницы = 2; НомерСтраницыПред = 2;
	СтруктураИтоговПоСтранице = Новый Структура();
	СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
	СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
	СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
	СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
	СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
	СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);

	СтруктураИтоговПоСтраницеИтого = Новый Структура();
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУвеличение", 0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУменьшение", 0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУменьшение",    0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУвеличение",    0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУменьшение",   0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУвеличение",   0);
	
	Если ЕстьПрослеживаемость Тогда
		
		СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУменьшениеВсего", 0);
		
		СтруктураИтоговПоСтраницеИтого.Вставить("КоличествоПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("КоличествоПрослежУменьшениеВсего", 0);
		
	КонецЕсли;

	Если ЕстьСтоимостьТовараПрослеживания Тогда
		
		СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУменьшениеВсего", 0);
		
		СтруктураИтоговПоСтраницеИтого.Вставить("СтоимПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("СтоимПрослежУменьшениеВсего", 0);
		
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Дата", Документ.Дата);
	СтруктураДокумента.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
	СтруктураДокумента.Вставить("КурсДокумента", ?(ВалютаПечатногоДокумента = Документ.ВалютаДокумента,
		Документ.КурсДокумента, Документ.Дата));
		
	МассивАвтомобилей = Новый Массив;
	
	Если ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.РеализацияАктивов") Тогда 
		Для Каждого ТекущаяСтрока Из ВыборкаТабличнойЧасти Цикл
			Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				МассивАвтомобилей.Добавить(ТекущаяСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Только для автомобилей
	СебестоимостьАвтомобилей = Новый Соответствие;
	Если МассивАвтомобилей.Количество() > 0 Тогда
		СебестоимостьАвтомобилей = АвтомобилиСервер.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(
			МассивАвтомобилей, СтруктураДокумента);
	КонецЕсли;
	
	// Пересчет сумм по выбранной валюте.
	Если ВыборкаТабличнойЧасти.Количество() > 0
		И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
		ДокументОбъектСтруктура.Документ = Документ.ДокументОснование;
		ДокументОбъектСтруктура.ЭтоПродажа = Ложь;
		
		ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
			ДокументОбъектСтруктура,
			ВалютаПечатногоДокумента);
	КонецЕсли;
	
	мсвДопОбластиПодвала = Новый Массив;
	мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
	мсвДопОбластиПодвала.Добавить(ОбластьИтого);
	
	Ном=1;
	СуммаВсегоБезНал = 0;
	ЕдиницаИзмеренияАвтоработВПечатныхФормах = Документ.ДоговорВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах;
	
	ЕстьРеквизит_ГТДПослеИзменения = ЕстьРеквизит(ВыборкаТабличнойЧасти, "ГТДПослеИзменения");
	
	ЕстьСодержание = ЕстьРеквизит(ВыборкаТабличнойЧасти, "Содержание");
	Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
		
		Если ЕстьСодержание И ЗначениеЗаполнено(СтрокаТоваров.Содержание) Тогда
			ОбластьСтрока.Параметры.НаименованиеНоменклатуры = СтрокаТоваров.Содержание;
		Иначе
			ОбластьСтрока.Параметры.НаименованиеНоменклатуры = УправлениеПечатьюПлатформа
				.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
		КонецЕсли;
		ОбластьСтрока.Параметры.НомерСтроки = СтрокаТоваров.ИсходныйНомерСтроки;
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.ИсходныйНомерСтроки) Тогда
			ОбластьСтрока.Параметры.НомерСтроки = "--";
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Автоработы") Тогда
				
			Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо          = "796";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = "шт";
				ОбластьСтрока.Параметры.КодВидаТовара                  = "--";
				
				Если СтрокаТоваров.Количество = 0 Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле          = "--";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = "--";
					ОбластьСтрока.Параметры.КодВидаТовара                     = "--";
					
				Иначе
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле          = "796";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = "шт";
					ОбластьСтрока.Параметры.КодВидаТовара                     = "--";
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
								
				Если СтрокаТоваров.ЕдиницаИзмерения <> "" Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = СтрокаТоваров.ЕдиницаИзмерения;
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = СтрокаТоваров.ЕдиницаИзмерения;
					
				Иначе
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = "--";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = "--";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле = "--";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = "--";
					
				КонецЕсли;

				КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
				
				Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
					
					ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
					
				Иначе
					
					ОбластьСтрока.Параметры.КодВидаТовара = "--";
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо          = "--";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо= "--";
				ОбластьСтрока.Параметры.КодВидаТовара = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле          = "--";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле= "--";
				ОбластьСтрока.Параметры.КодВидаТовара = "--";
				
			КонецЕсли;
			
		Иначе 
			
			ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = ЕдиницаИзмеренияАвтоработВПечатныхФормах;
			ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = ЕдиницаИзмеренияАвтоработВПечатныхФормах;
			
			Если ЕдиницаИзмеренияАвтоработВПечатныхФормах = Перечисления.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияЧас Тогда
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = "365";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодпосле = "365";

				
			Иначе
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле = "--";
			
			КонецЕсли;
			
			ОбластьСтрока.Параметры.КодВидаТовара = "--";

		КонецЕсли;
		
		Если ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Автоработы") Тогда
			
			КоличествоДоИзменения = СтрокаТоваров.Количество - СтрокаТоваров.КоличествоРазница;
			КоличествоПослеИзменения = СтрокаТоваров.Количество;
			
		ИначеЕсли ЕстьРеквизит(ВыборкаТабличнойЧасти, "Коэффициент") Тогда
				
			КоличествоДоИзменения = (СтрокаТоваров.Количество - СтрокаТоваров.КоличествоРазница)
				* (СтрокаТоваров.Коэффициент - СтрокаТоваров.КоэффициентРазница);
			КоличествоПослеИзменения = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
			
		КонецЕсли;
		
		ОбластьСтрока.Параметры.КоличествоПослеИзменения = Формат(
			КоличествоПослеИзменения, 
			?(КоличествоПослеИзменения = 0, "ЧН=-", ФорматВыводаКоличества)
		);
		ОбластьСтрока.Параметры.КоличествоДоИзменения = Формат(
			КоличествоДоИзменения,
			?(КоличествоДоИзменения = 0, "ЧН=-", ФорматВыводаКоличества)
		);
		
		ФорматНоль = Формат(0, ФорматВыводаСуммы);
		
		СтоимостьСНДСДоИзменения = СтрокаТоваров.СуммаВсегоПоДокументуПоступления;
		СтоимостьСНДСПослеИзменения = СтрокаТоваров.СуммаВсего;
		
		СуммаНДСДоИзменения = СтрокаТоваров.СуммаНДСПоДокументуПоступления;
		СуммаНДСПослеИзменения = СтрокаТоваров.СуммаНДС;
		
		ОбластьСтрока.Параметры.СтавкаНДСДоИзменения = СтрокаТоваров.СтавкаНДСДоИзменения;
		ОбластьСтрока.Параметры.СтоимостьСНДСДоИзменения  = Формат(СтоимостьСНДСДоИзменения, ФорматВыводаСуммы);
		ОбластьСтрока.Параметры.СуммаНДСДоИзменения = Формат(СуммаНДСДоИзменения, ФорматВыводаСуммы);
		
		ОбластьСтрока.Параметры.СтавкаНДСПосле = СтрокаТоваров.СтавкаНДС;
		ОбластьСтрока.Параметры.СтоимостьСНДСПослеИзменения = Формат(СтоимостьСНДСПослеИзменения, ФорматВыводаСуммы);
		ОбластьСтрока.Параметры.СуммаНДСПослеИзменения  = Формат(СуммаНДСПослеИзменения, ФорматВыводаСуммы);
		
		СуммаВсегоРазница = СтоимостьСНДСПослеИзменения - СтоимостьСНДСДоИзменения;
		Если СуммаВсегоРазница > 0 Тогда 
		
			ОбластьСтрока.Параметры.РазницаСНДСУвеличение = Формат(СуммаВсегоРазница, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаСНДСУменьшение = ФорматНоль;
			
		Иначе
			
			ОбластьСтрока.Параметры.РазницаСНДСУвеличение = ФорматНоль;
			ОбластьСтрока.Параметры.РазницаСНДСУменьшение = Формат(-СуммаВсегоРазница, ФорматВыводаСуммы);
			
		КонецЕсли;
		
		СуммаНДСРазница = СуммаНДСПослеИзменения - СуммаНДСДоИзменения;
		Если СуммаНДСРазница > 0 Тогда
			
			ОбластьСтрока.Параметры.РазницаНДСУвеличение = Формат(СуммаНДСРазница, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаНДСУменьшение = ФорматНоль;
			
		Иначе
			
			ОбластьСтрока.Параметры.РазницаНДСУвеличение = ФорматНоль;
			ОбластьСтрока.Параметры.РазницаНДСУменьшение = Формат(-СуммаНДСРазница, ФорматВыводаСуммы);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
			
			ОбластьСтрока.Параметры.ПредставлениеГТДДо	= УправлениеПечатьюПлатформа
				.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТД);
			ОбластьСтрока.Параметры.ПредставлениеСтраныДо	= СтрокаТоваров.ГТД.Страна.Наименование;
			ОбластьСтрока.Параметры.СтранаПроисхожденияКодДо = СтрокаТоваров.ГТД.Страна.Код;
			
		Иначе
			
			ОбластьСтрока.Параметры.ПредставлениеГТДДо = "--";
			ОбластьСтрока.Параметры.ПредставлениеСтраныДо = "--";
			ОбластьСтрока.Параметры.СтранаПроисхожденияКодДо = "--";
				
		КонецЕсли;
		
		Если ЕстьРеквизит_ГТДПослеИзменения Тогда
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ГТДПослеИзменения) Тогда
				
				ОбластьСтрока.Параметры.ПредставлениеГТДПосле = УправлениеПечатьюПлатформа
					.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТДПослеИзменения);
				ОбластьСтрока.Параметры.ПредставлениеСтраныПосле = СтрокаТоваров.ГТДПослеИзменения.Страна.Наименование;
				ОбластьСтрока.Параметры.СтранаПроисхожденияКодПосле = СтрокаТоваров.ГТДПослеИзменения.Страна.Код;
				
			Иначе
				
				ОбластьСтрока.Параметры.ПредставлениеГТДПосле = "--";
				ОбластьСтрока.Параметры.ПредставлениеСтраныПосле = "--";
				ОбластьСтрока.Параметры.СтранаПроисхожденияКодПосле = "--";
				
			КонецЕсли;
			
		Иначе
			
			ОбластьСтрока.Параметры.ПредставлениеГТДПосле = ОбластьСтрока.Параметры.ПредставлениеГТДДо;
			ОбластьСтрока.Параметры.ПредставлениеСтраныПосле = ОбластьСтрока.Параметры.ПредставлениеСтраныДо;
			ОбластьСтрока.Параметры.СтранаПроисхожденияКодПосле = ОбластьСтрока.Параметры.СтранаПроисхожденияКодДо;
			
		КонецЕсли;	
		
		Себестоимость = СебестоимостьАвтомобилей.Получить(СтрокаТоваров.Номенклатура);
		
		Если Себестоимость <> Неопределено И Себестоимость > 0 Тогда
			
			СтоимостьБезНДСДоИзменения = СтоимостьСНДСДоИзменения - Себестоимость;
			СтоимостьБезНДСДоИзменения = ?(СтоимостьБезНДСДоИзменения > 0, СтоимостьБезНДСДоИзменения, 0);
			ОбластьСтрока.Параметры.СтоимостьБезНДСДоИзменения = Формат(СтоимостьБезНДСДоИзменения, ФорматВыводаСуммы);
			
			СтоимостьБезНДСПослеИзменения = СтоимостьСНДСПослеИзменения - Себестоимость;
			СтоимостьБезНДСПослеИзменения = ?(СтоимостьБезНДСПослеИзменения > 0,СтоимостьБезНДСПослеИзменения, 0);
			ОбластьСтрока.Параметры.СтоимостьБезНДСПослеИзменения = Формат(СтоимостьБезНДСПослеИзменения, ФорматВыводаСуммы);
			
			РазницаБезНДС = СтоимостьБезНДСПослеИзменения - СтоимостьБезНДСДоИзменения;
			РазницаБезНДСУвеличение = ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУвеличение = Формат(РазницаБезНДСУвеличение, ФорматВыводаСуммы);
			РазницаБезНДСУменьшение = ?(РазницаБезНДС < 0, -РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУменьшение = Формат(РазницаБезНДСУменьшение, ФорматВыводаСуммы);
			
		Иначе
			
			СтоимостьБезНДСДоИзменения = СтоимостьСНДСДоИзменения - СуммаНДСДоИзменения;
			ОбластьСтрока.Параметры.СтоимостьБезНДСДоИзменения = Формат(
				СтоимостьБезНДСДоИзменения,
				ФорматВыводаСуммы
			);
			
			СтоимостьБезНДСПослеИзменения = СтоимостьСНДСПослеИзменения - СуммаНДСПослеИзменения;
			ОбластьСтрока.Параметры.СтоимостьБезНДСПослеИзменения = Формат(
				СтоимостьБезНДСПослеИзменения,
				ФорматВыводаСуммы
			);
			
			РазницаБезНДС = СтоимостьБезНДСПослеИзменения - СтоимостьБезНДСДоИзменения;
			РазницаБезНДСУвеличение = ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУвеличение = Формат(РазницаБезНДСУвеличение, ФорматВыводаСуммы);
			РазницаБезНДСУменьшение = ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУменьшение = Формат(РазницаБезНДСУменьшение,ФорматВыводаСуммы);
			
		КонецЕсли;
		
		КоличествоДоИзменения = СтрокаТоваров.Количество - СтрокаТоваров.КоличествоРазница;
		КоличествоПослеИзменения = СтрокаТоваров.Количество;
		
		ОбластьСтрока.Параметры.ЦенаДоИзменения = ?(
			КоличествоДоИзменения <> 0, 
			СтоимостьБезНДСДоИзменения / КоличествоДоИзменения, 
			0
		);
		ОбластьСтрока.Параметры.ЦенаПослеИзменения = ?(
			КоличествоПослеИзменения <> 0, 
			СтоимостьБезНДСПослеИзменения / КоличествоПослеИзменения, 
			0
		);
		
		КоличествоПрослеж = 0;
		
		Если ЕстьПрослеживаемость Тогда
			
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодДо    = "--";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежДо       = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежДо             = "--";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = "--";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле    = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежПосле          = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежУвеличение     = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежУменьшение     = "--";
			Если НомерРедакции = 1096 Тогда 
				ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение	= "";
				ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение	= "";
			Иначе 
				ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение	= "Х";
				ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение	= "Х";
			КонецЕсли;
            Если ЕстьСтоимостьТовараПрослеживания Тогда 
				ОбластьСтрока.Параметры.СтоимПрослежДо		        = "--";
				ОбластьСтрока.Параметры.СтоимПрослежПосле		    = "--";
				ОбластьСтрока.Параметры.СтоимПрослежУвеличение	    = "--";
				ОбластьСтрока.Параметры.СтоимПрослежУменьшение	    = "--";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) И СтрокаТоваров.ГТД.РНПТ Тогда
				
				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодДо = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежДо = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
					ОбластьСтрока.Параметры.КоличествоПрослежДо = СтрокаТоваров.КоличествоДо;
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
					ОбластьСтрока.Параметры.КоличествоПрослежПосле = СтрокаТоваров.КоличествоПосле;
					
					КоличествоПрослеж =  СтрокаТоваров.КоличествоПосле - СтрокаТоваров.КоличествоДо;
					
					ОбластьСтрока.Параметры.КоличествоПрослежУвеличение = ?(КоличествоПрослеж > 0,КоличествоПрослеж, "--");
					ОбластьСтрока.Параметры.КоличествоПрослежУменьшение = ?(КоличествоПрослеж < 0,- КоличествоПрослеж,"--");
					
				ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодДо = "796" ;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежДо = "шт";
					ОбластьСтрока.Параметры.КоличествоПрослежДо =  1;
					
					Если  СтрокаТоваров.Количество = 0 Тогда
						
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = "--";
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле = "--";
						ОбластьСтрока.Параметры.КоличествоПрослежПосле = 0;
						
						КоличествоПрослеж = -1;
						
						ОбластьСтрока.Параметры.КоличествоПрослежУвеличение = ?(КоличествоПрослеж > 0,КоличествоПрослеж, "--");
						ОбластьСтрока.Параметры.КоличествоПрослежУменьшение = ?(КоличествоПрослеж < 0,- КоличествоПрослеж,"--");
						
						
					Иначе
						
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = "796";
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле = "шт";
						ОбластьСтрока.Параметры.КоличествоПрослежПосле = 1;
						
					КонецЕсли;
					
				КонецЕсли;

				Если НомерРедакции = 1096 Тогда 

					Если ТипЗнч(ОбластьСтрока.Параметры.СтоимПрослежУвеличение) = Тип("Число") Тогда 
						СтоимПрослежУвеличение = ОбластьСтрока.Параметры.СтоимПрослежУвеличение;
					Иначе 
						СтоимПрослежУвеличение = 0;
					КонецЕсли;
					Если ТипЗнч(ОбластьСтрока.Параметры.КоличествоПрослежУвеличение) = Тип("Число") Тогда 
						КоличествоПрослежУвеличение = ОбластьСтрока.Параметры.КоличествоПрослежУвеличение;
					Иначе 
						КоличествоПрослежУвеличение = 0;
					КонецЕсли;
					Если СтоимПрослежУвеличение > 0 ИЛИ КоличествоПрослежУвеличение > 0 Тогда 
						ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение = ОбластьСтрока.Параметры.ПредставлениеГТДПосле;
					Иначе
						ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение = "";
					КонецЕсли;

					Если ТипЗнч(ОбластьСтрока.Параметры.СтоимПрослежУменьшение) = Тип("Число") Тогда 
						СтоимПрослежУменьшение = ОбластьСтрока.Параметры.СтоимПрослежУменьшение;
					Иначе 
						СтоимПрослежУменьшение = 0;
					КонецЕсли;
					Если ТипЗнч(ОбластьСтрока.Параметры.КоличествоПрослежДо) = Тип("Число") Тогда 
						КоличествоПрослежДо = ОбластьСтрока.Параметры.КоличествоПрослежДо;
					Иначе 
						КоличествоПрослежДо = 0;
					КонецЕсли;
					Если СтоимПрослежУменьшение > 0 ИЛИ КоличествоПрослежДо > 0 Тогда 
						ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение = ОбластьСтрока.Параметры.ПредставлениеГТДДо;
					Иначе
						ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение = "";
					КонецЕсли;
					
				КонецЕсли;
				
	            Если ЕстьСтоимостьТовараПрослеживания Тогда 
					ОбластьСтрока.Параметры.СтоимПрослежДо		        = СтоимостьБезНДСДоИзменения;
					ОбластьСтрока.Параметры.СтоимПрослежПосле		    = СтоимостьБезНДСПослеИзменения;
					ОбластьСтрока.Параметры.СтоимПрослежУвеличение	    = РазницаБезНДСУвеличение;
					ОбластьСтрока.Параметры.СтоимПрослежУменьшение	    = РазницаБезНДСУменьшение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим строку, делая проверку попадания на лист.
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент,
			ОбластьСтрока,
			ОбластьЗаголовокТаблицы,
			,
			НомерСтраницы,
			СтруктураИтоговПоСтранице,
			Документ,
			мсвДопОбластиПодвала
		);
		
		// Инициализация итогов по странице.
		Если НомерСтраницы <> НомерСтраницыПред Тогда
			
			СтруктураИтоговПоСтранице = Новый Структура();
			СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
			СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
			СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
			СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
			СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
			СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);
			
			Если ЕстьПрослеживаемость Тогда
				
				СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУвеличениеВсего", 0);
				СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУменьшениеВсего", 0);
				
			КонецЕсли;

			Если ЕстьСтоимостьТовараПрослеживания Тогда
				
				СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУвеличениеВсего", 0);
				СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУменьшениеВсего", 0);
				
			КонецЕсли;
			
			НомерСтраницыПред = НомерСтраницы;
			
		КонецЕсли;
		
		// Добавляем итоги
		СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение = СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение
			+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
		СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение = СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение
			+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
		СтруктураИтоговПоСтранице.РазницаНДСУменьшение    = СтруктураИтоговПоСтранице.РазницаНДСУменьшение
			+ ?(СуммаНДСРазница < 0, - СуммаНДСРазница, 0);
		СтруктураИтоговПоСтранице.РазницаНДСУвеличение    = СтруктураИтоговПоСтранице.РазницаНДСУвеличение
			+ ?(СуммаНДСРазница > 0, СуммаНДСРазница, 0);
		СтруктураИтоговПоСтранице.РазницаСНДСУменьшение   = СтруктураИтоговПоСтранице.РазницаСНДСУменьшение
			+ ?(СуммаВсегоРазница < 0, - СуммаВсегоРазница, 0);
		СтруктураИтоговПоСтранице.РазницаСНДСУвеличение   = СтруктураИтоговПоСтранице.РазницаСНДСУвеличение
			+ ?(СуммаВсегоРазница > 0, СуммаВсегоРазница, 0);
		
		// Итого
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение
			+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение
			+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение
			+ ?(СуммаНДСРазница < 0, - СуммаНДСРазница, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение
			+ ?(СуммаНДСРазница > 0, СуммаНДСРазница, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение
			+ ?(СуммаВсегоРазница < 0, - СуммаВсегоРазница, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение
			+ ?(СуммаВсегоРазница > 0, СуммаВсегоРазница, 0);
			
		Если ЕстьПрослеживаемость Тогда
			
			СтруктураИтоговПоСтранице.КоличествоПрослежУвеличениеВсего =
				СтруктураИтоговПоСтранице.КоличествоПрослежУвеличениеВсего
				+ ?(КоличествоПрослеж > 0,  КоличествоПрослеж, 0);
					
			СтруктураИтоговПоСтранице.КоличествоПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтранице.КоличествоПрослежУменьшениеВсего
				+ ?(КоличествоПрослеж < 0,  - КоличествоПрослеж, 0);

		 	СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУвеличениеВсего = 
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУвеличениеВсего
				+ ?(КоличествоПрослеж > 0,  КоличествоПрослеж, 0);
					
			СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУменьшениеВсего
				+ ?(КоличествоПрослеж < 0,  - КоличествоПрослеж, 0);
			
		КонецЕсли;

		Если ЕстьСтоимостьТовараПрослеживания Тогда
			
			СтруктураИтоговПоСтранице.СтоимПрослежУвеличениеВсего =
				СтруктураИтоговПоСтранице.СтоимПрослежУвеличениеВсего
				+ ?(РазницаБезНДСУвеличение > 0,  РазницаБезНДСУвеличение, 0);
					
			СтруктураИтоговПоСтранице.СтоимПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтранице.СтоимПрослежУменьшениеВсего
				+ ?(РазницаБезНДСУменьшение < 0,  - РазницаБезНДСУменьшение, 0);

		 	СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего = 
				СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего
				+ ?(РазницаБезНДСУвеличение > 0,  РазницаБезНДСУвеличение, 0);
					
			СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего
				+ ?(РазницаБезНДСУменьшение < 0,  - РазницаБезНДСУменьшение, 0);
			
		КонецЕсли;
		
		Ном = Ном + 1;
		
	КонецЦикла;
	
	Если НомерСтраницы > 2 Тогда
		
		УправлениеПечатьюПлатформа.
		ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтого, СтруктураИтоговПоСтранице, Документ);
		
	КонецЕсли;
	
	ОбластьИтого.Параметры.РазницаБезНДСУвеличение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаБезНДСУменьшение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаНДСУменьшение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаНДСУвеличение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаСНДСУменьшение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаСНДСУвеличение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение,
		ФорматВыводаСуммы
	);
	Если ЕстьПрослеживаемость Тогда
		Если НомерРедакции = 1096 Тогда 
			ОбластьИтого.Параметры.КоличествоПрослежУменьшениеВсего = "Х";
			ОбластьИтого.Параметры.КоличествоПрослежУвеличениеВсего = "Х";
        Иначе
			ОбластьИтого.Параметры.КоличествоПрослежУменьшениеВсего =
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУменьшениеВсего;
			ОбластьИтого.Параметры.КоличествоПрослежУвеличениеВсего =
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУвеличениеВсего;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьСтоимостьТовараПрослеживания Тогда 
		Если НомерРедакции = 1096 Тогда 
			ОбластьИтого.Параметры.СтоимПрослежУвеличениеВсего =  "Х";
			ОбластьИтого.Параметры.СтоимПрослежУменьшениеВсего =  "Х";
        Иначе
			ОбластьИтого.Параметры.СтоимПрослежУвеличениеВсего = СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего;
			ОбластьИтого.Параметры.СтоимПрослежУменьшениеВсего = СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего;
		КонецЕсли;
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	// Заполним информацию о руководителях организации.
	Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель", "Руководитель");
	ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	
	Если Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		
		ОбластьПодвал.Параметры.Заполнить(Руководитель);
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа
			.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер"));
		
	ИначеЕсли ЭтоИП Тогда
			
		ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
		ОбластьПодвал.Параметры.Свидетельство = Справочники
			.ПодтверждающиеДокументы
			.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Организация, Перечисления.ВидыДокументов.Свидетельство);
		
	КонецЕсли;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
		ТабличныйДокумент,
		ОбластьПодвал,
		,
		,
		НомерСтраницы,
		,
		Документ
	);
	
	// Отметим конец области документа
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	
КонецФункции

Функция ЕстьПрослеживаемыйТовар(Товары)
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.ГТД) И ТекущаяСтрока.ГТД.РНПТ Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли