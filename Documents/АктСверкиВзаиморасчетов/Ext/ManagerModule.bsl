// Модуль менеджера документа "Акт свертки взаиморасчетов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПоступлениеТоваров);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции	
	Объект.СуммаДокументаПриход = 0;
	Объект.СуммаДокументаРасход = 0;
	ИспользоватьДоговорТЧ = НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов);
	Для Каждого ТекСтрока Из Объект.ПоДаннымОрганизации Цикл
		ТекВалюта = ?(ИспользоватьДоговорТЧ, ТекСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов);
		Объект.СуммаДокументаПриход = Объект.СуммаДокументаПриход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТекСтрока.УвеличениеДолга, ТекВалюта, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
		Объект.СуммаДокументаРасход = Объект.СуммаДокументаРасход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТекСтрока.УменьшениеДолга, ТекВалюта, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЦикла;
	
	Объект.СуммаДокументаПриходК = 0;
	Объект.СуммаДокументаРасходК = 0;
	Для Каждого ТекСтрока Из Объект.ПоДаннымКонтрагента Цикл
		ТекВалюта = ?(ИспользоватьДоговорТЧ, ТекСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов);
		Объект.СуммаДокументаПриходК = Объект.СуммаДокументаПриходК + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТекСтрока.УвеличениеДолга, ТекВалюта, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
		Объект.СуммаДокументаРасходК = Объект.СуммаДокументаРасходК + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТекСтрока.УменьшениеДолга, ТекВалюта, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЦикла;
	
	СуммаДокумента = Объект.СуммаДокументаПриход - Объект.СуммаДокументаРасход;
	ОстатокНаКонец = Объект.СуммаДокументаПриход - Объект.СуммаДокументаРасход + Объект.ОстатокНаНачало;
	ОстатокНаКонецКонтрагент = Объект.СуммаДокументаПриходК - Объект.СуммаДокументаРасходК - Объект.ОстатокНаНачало;
	ИтогоЗаПериод = СуммаДокумента;
	ИтогоЗаПериодКонтрагент = Объект.СуммаДокументаПриходК - Объект.СуммаДокументаРасходК;
	Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	ИтогиОперации.Вставить("ОстатокНаКонец", ОстатокНаКонец);
	ИтогиОперации.Вставить("ОстатокНаКонецКонтрагент", ОстатокНаКонецКонтрагент);
	ИтогиОперации.Вставить("ИтогоЗаПериод", ИтогоЗаПериод);
	ИтогиОперации.Вставить("ИтогоЗаПериодКонтрагент", ИтогоЗаПериодКонтрагент);
	ИтогиОперации.Вставить("Расхождение", Расхождение);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// обработчик изменения документа в таблице
Процедура ОбработатьИзменениеДокумента(Объект, Строка)
	// пропишем приват
	Если НЕ  ЗначениеЗаполнено(Строка.Документ) Тогда
		Строка.Представление = "";
		Строка.Дата = Дата('00010101');
	Иначе		
		Если ЕстьРеквизит(Строка.Документ, "ВхДокНомер") И ЗначениеЗаполнено(Строка.Документ.ВхДокНомер) Тогда
			НомерДокумента = Строка.Документ.ВхДокНомер;
		Иначе
			НомерДокумента = Строка.Документ.Номер;
		КонецЕсли;
		
		Если ЕстьРеквизит(Строка.Документ, "ВхДокДата") И ЗначениеЗаполнено(Строка.Документ.ВхДокДата) Тогда
			Строка.ДатаДокумента = Строка.Документ.ВхДокДата;
		ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			Строка.ДатаДокумента = Строка.Документ.ДатаЗакрытия; 		
		Иначе
			Строка.ДатаДокумента = Строка.Документ.Дата;
		КонецЕсли;
					
		Если ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			Строка.Дата = Строка.Документ.ДатаЗакрытия; 
		Иначе
			Строка.Дата = Строка.Документ.Дата;	
		КонецЕсли;  
		
		Строка.Представление = Строка.Документ.Метаданные().Синоним + " № " + НомерДокумента + " от " + Формат(Строка.ДатаДокумента, "ДЛФ=ДД");
		
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) И НЕ ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) И ЕстьРеквизит(Строка.Документ, "ДоговорВзаиморасчетов") Тогда
			Строка.ДоговорВзаиморасчетов = Строка.Документ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
		Если Объект.ЭтоЭлектронныйДокумент Тогда
			Строка.НаименованиеДокумента = Строка(ТипЗнч(Строка.Документ));
			Строка.НаименованиеОперации = НаименованиеОперацииДокумента(Строка);
			Строка.НомерДокумента = ?(ЕстьРеквизит(Строка.Документ, "ВхДокНомер"),
				?(ЗначениеЗаполнено(Строка.Документ.ВхДокНомер), Строка.Документ.ВхДокНомер, НСтр("ru = 'б/н'")),
				УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Строка.Документ, Истина));
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Заполнение взаиморасчетов с контрагентом по данным учета информационной базы.
//
// Параметры:
//  Объект				 - ДокументСсылка.АктСверкиВзаиморасчетов	 - Документ, для которого выполняется заполнение.
//  ПараметрыДействия	 - Структура	 - Дополнительные параметры.
//
Процедура ЗаполнитьВзаиморасчетыПоДаннымОрганизации(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ИспользоватьДоговорТЧ = НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов);
	ДоговорЗаполнения = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ДоговорВзаиморасчетов",
		Объект.ДоговорВзаиморасчетов);
	ЕстьДоговорЗаполнения = ЗначениеЗаполнено(ДоговорЗаполнения);
	
	ПараметрКоманды = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ПараметрКоманды",
		"");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    			Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 			КонецДня(Объект.ДатаОкончания));
	Если ПараметрКоманды = "ПоОбособленнымПодразделениям" Тогда 
		ИспользоватьДоговорТЧ = Ложь;
		ЕстьДоговорЗаполнения = Ложь;
		Запрос.УстановитьПараметр("Контрагент", ПолучитьОбособленныеПодразделения(Объект.Контрагент).Выгрузить());
	Иначе
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент); 
	КонецЕсли;
	Если ЕстьДоговорЗаполнения Тогда
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорЗаполнения);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",  			Объект.Организация);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взаиморасчеты.ЭтоОбороты КАК ЭтоОбороты,
		|	Взаиморасчеты.Период КАК Дата,
		|	Взаиморасчеты.Документ КАК Документ,
		|	"+?(ИспользоватьДоговорТЧ,"Взаиморасчеты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,","")+"
		|	Взаиморасчеты.Сделка КАК Сделка,
		|	СУММА(Взаиморасчеты.УвеличениеДолга) КАК УвеличениеДолга,
		|	СУММА(Взаиморасчеты.УменьшениеДолга) КАК УменьшениеДолга,
		|	СУММА(Взаиморасчеты.ОстатокНаНачало) КАК ОстатокНаНачало
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛОЖЬ КАК ЭтоОбороты,
		|		ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|		ЗНАЧЕНИЕ(Документ.АвансовыйОтчет.ПустаяСсылка) КАК Документ,
		|		ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка) КАК ДоговорВзаиморасчетов,
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСделок.ПустаяСсылка) КАК Сделка,
		|		0 КАК УвеличениеДолга,
		|		0 КАК УменьшениеДолга,
		|		Остатки.СуммаОстаток КАК ОстатокНаНачало                 
		|	ИЗ
		|		РегистрНакопления.РасчетыСКонтрагентами.Остатки(
		|			&ДатаНачала,
		|			ДоговорВзаиморасчетов.Организация=&Организация
		|			И Контрагент В (&Контрагент)" + ?(ЕстьДоговорЗаполнения, " И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов", "") + ") КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|		ЛОЖЬ,
		|		ДАТАВРЕМЯ(1, 1, 1),
		|		ЗНАЧЕНИЕ(Документ.АвансовыйОтчет.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСделок.ПустаяСсылка),
		|		0 КАК УвеличениеДолга,
		|		0 КАК УменьшениеДолга,
		|		Остатки.СуммаОстаток КАК ОстатокНаНачало
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
		|			&ДатаНачала,
		|			ДоговорВзаиморасчетов.Организация=&Организация
		|			И Контрагент В (&Контрагент)" + ?(ЕстьДоговорЗаполнения, " И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов", "") + ") КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИСТИНА,
		|		Обороты.Период,
		|		Обороты.Регистратор,
		|		Обороты.ДоговорВзаиморасчетов,
		|		Обороты.ДокументРасчетов,
		|		ВЫБОР
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И Обороты.Сумма > 0
		|				ТОГДА Обороты.Сумма
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И Обороты.Сумма < 0
		|				ТОГДА -Обороты.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И Обороты.Сумма > 0
		|				ТОГДА Обороты.Сумма
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И Обороты.Сумма < 0
		|				ТОГДА -Обороты.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		РегистрНакопления.РасчетыСКонтрагентами КАК Обороты
		|	ГДЕ
		|		Обороты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И ДоговорВзаиморасчетов.Организация=&Организация
		|		И Обороты.Контрагент В (&Контрагент)" + ?(ЕстьДоговорЗаполнения, " И Обороты.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов", "") + "
		|		И НЕ (Обороты.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Оплата) И Обороты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаиморасчетов.ЗачетАванса))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИСТИНА,
		|		Обороты.Период,
		|		Обороты.Регистратор,
		|		Обороты.ДоговорВзаиморасчетов,
		|		Обороты.Сделка,
		|		ВЫБОР
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И Обороты.Сумма > 0
		|				ТОГДА Обороты.Сумма
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И Обороты.Сумма < 0
		|				ТОГДА -Обороты.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И Обороты.Сумма > 0
		|				ТОГДА Обороты.Сумма
		|			КОГДА Обороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И Обороты.Сумма < 0
		|				ТОГДА -Обороты.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыКомпании КАК Обороты
		|	ГДЕ
		|		Обороты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И ДоговорВзаиморасчетов.Организация=&Организация
		|		И Обороты.Контрагент В (&Контрагент)" + ?(ЕстьДоговорЗаполнения," И Обороты.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов", "") + ") КАК Взаиморасчеты
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаиморасчеты.ЭтоОбороты,
		|	Взаиморасчеты.Период,
		|	Взаиморасчеты.Документ,
		|	" + ?(ИспользоватьДоговорТЧ, "Взаиморасчеты.ДоговорВзаиморасчетов,", "") + "
		|	Взаиморасчеты.Сделка
		|
		|ИМЕЮЩИЕ 
		|	СУММА(Взаиморасчеты.УвеличениеДолга)<>0 ИЛИ СУММА(Взаиморасчеты.УменьшениеДолга)<>0 ИЛИ Взаиморасчеты.ЭтоОбороты = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоОбороты,
		|	Дата,
		|	Документ,
		|	" + ?(ИспользоватьДоговорТЧ, "ДоговорВзаиморасчетов,", "") + "
		|	Сделка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объект.ОстатокНаНачало = 0;
	ОстатокНаКонец  = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ЭтоОбороты Тогда
			Объект.ОстатокНаНачало = Выборка.ОстатокНаНачало;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ПоДаннымОрганизации.Добавить();
		НоваяСтрока.Дата					= Выборка.Дата;
		НоваяСтрока.ДоговорВзаиморасчетов	= ?(ИспользоватьДоговорТЧ,Выборка.ДоговорВзаиморасчетов,Неопределено);
		НоваяСтрока.Документ				= Выборка.Документ;
		НоваяСтрока.УвеличениеДолга			= Выборка.УвеличениеДолга;
		НоваяСтрока.УменьшениеДолга			= Выборка.УменьшениеДолга;
		Документы.АктСверкиВзаиморасчетов.ПоДаннымОрганизацииДокументПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Сделка          		= Выборка.Сделка;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВзаиморасчетыПоДаннымОрганизации()

Функция ПолучитьОбособленныеПодразделения(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.Ссылка = &Контрагент
		|			ИЛИ Контрагенты.ГоловнойКонтрагент = &Контрагент)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьОбособленныеПодразделения()

// Сопоставление данных по организации и контрагента
//
// Параметры:
//  Объект	 - ДокументСсылка.АктСверкиВзаиморасчетов	 - Документ, для которого выполняется заполнение.
//
Процедура СопоставитьДанныеОрганизацииИКонтрагента(Объект) Экспорт
	
	Объект.Сверка.Очистить();
	СверкаАкта = Объект.Сверка.Выгрузить();
	СверкаАкта.Колонки.Добавить("НомерПорядка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	ПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Выгрузить();
	ПоДаннымОрганизации.Колонки.Добавить(
		"НомерПорядка",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ПоДаннымОрганизации.Колонки.Добавить(
		"ИсходныйНомерСтрокиПоДаннымОрганизации",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ПоДаннымКонтрагента = Объект.ПоДаннымКонтрагента.Выгрузить();
	ПоДаннымКонтрагента.Колонки.Добавить(
		"ИсходныйНомерСтрокиПоДаннымКонтрагента",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ПоДаннымКонтрагента.Колонки.Добавить(
		"НаименованиеОперацииИнвертированное",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(500)));
	
	СменитьНаименованиеОперации(ПоДаннымКонтрагента);
	
	// Начальное сальдо
	СтрокаИтога = СверкаАкта.Добавить();
	СтрокаИтога.Документ = НСтр("ru='Сальдо начальное'");
	
	Если Объект.ОстатокНаНачало > 0 Тогда
		СтрокаИтога.УвеличениеДолгаПоДаннымОрганизации  = Объект.ОстатокНаНачало;
		СтрокаИтога.УменьшениеДолгаПоДаннымОрганизации = 0;
	Иначе
		СтрокаИтога.УвеличениеДолгаПоДаннымОрганизации  = 0;
		СтрокаИтога.УменьшениеДолгаПоДаннымОрганизации = - Объект.ОстатокНаНачало;
	КонецЕсли;
	
	Если Объект.ОстатокНаНачалоПоКонтрагенту > 0 Тогда
		СтрокаИтога.УвеличениеДолгаПоДаннымКонтрагента  = Объект.ОстатокНаНачалоПоКонтрагенту;
		СтрокаИтога.УменьшениеДолгаПоДаннымКонтрагента = 0;
	Иначе
		СтрокаИтога.УвеличениеДолгаПоДаннымКонтрагента  = 0;
		СтрокаИтога.УменьшениеДолгаПоДаннымКонтрагента = - Объект.ОстатокНаНачалоПоКонтрагенту;
	КонецЕсли;
	
	СтрокаИтога.ЕстьРасхождения = Объект.ОстатокНаНачало <> - Объект.ОстатокНаНачалоПоКонтрагенту;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПоДаннымОрганизации", ПоДаннымОрганизации);
	Запрос.УстановитьПараметр("ТаблицаПоДаннымКонтрагента", ПоДаннымКонтрагента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоДаннымОрганизации.Представление КАК Представление,
	|	ТаблицаПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	ТаблицаПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаПоДаннымОрганизации.УвеличениеДолга КАК УвеличениеДолга,
	|	ТаблицаПоДаннымОрганизации.УменьшениеДолга КАК УменьшениеДолга,
	|	ТаблицаПоДаннымОрганизации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаПоДаннымОрганизации.Документ КАК Документ,
	|	ТаблицаПоДаннымОрганизации.Дата КАК Дата,
	|	ТаблицаПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации
	|ПОМЕСТИТЬ ТаблицаПервойОрганизации
	|ИЗ
	|	&ТаблицаПоДаннымОрганизации КАК ТаблицаПоДаннымОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерДокумента,
	|	ДатаДокумента,
	|	УвеличениеДолга,
	|	УменьшениеДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоДаннымКонтрагента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоДаннымКонтрагента.Представление КАК Представление,
	|	ТаблицаПоДаннымКонтрагента.НомерДокумента КАК НомерДокумента,
	|	ТаблицаПоДаннымКонтрагента.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаПоДаннымКонтрагента.УвеличениеДолга КАК УвеличениеДолга,
	|	ТаблицаПоДаннымКонтрагента.УменьшениеДолга КАК УменьшениеДолга,
	|	ТаблицаПоДаннымКонтрагента.НаименованиеОперацииИнвертированное КАК НаименованиеОперацииИнвертированное,
	|	ТаблицаПоДаннымКонтрагента.НаименованиеОперации КАК НаименованиеОперации
	|ПОМЕСТИТЬ ТаблицаВторойОрганизации
	|ИЗ
	|	&ТаблицаПоДаннымКонтрагента КАК ТаблицаПоДаннымКонтрагента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерДокумента,
	|	ДатаДокумента,
	|	УвеличениеДолга,
	|	УменьшениеДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПервойОрганизации.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаПервойОрганизации.НомерДокумента КАК НомерДокумента,
	|	ТаблицаПервойОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	СУММА(1) КАК КоличествоОдинаковыхСтрок,
	|	ТаблицаПервойОрганизации.НаименованиеОперации КАК НаименованиеОперации
	|ПОМЕСТИТЬ ДублиПервойОрганизацииПредвартельная
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|ГДЕ
	|	ТаблицаПервойОрганизации.НомерДокумента <> """"
	|	И ТаблицаПервойОрганизации.ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПервойОрганизации.ДатаДокумента,
	|	ТаблицаПервойОрганизации.НомерДокумента,
	|	ТаблицаПервойОрганизации.НаименованиеОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВторойОрганизации.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаВторойОрганизации.НомерДокумента КАК НомерДокумента,
	|	ТаблицаВторойОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	СУММА(1) КАК КоличествоОдинаковыхСтрок,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное КАК НаименованиеОперацииИнвертированное
	|ПОМЕСТИТЬ ДублиВторойОрганизацииПредвартельная
	|ИЗ
	|	ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|ГДЕ
	|	ТаблицаВторойОрганизации.НомерДокумента <> """"
	|	И ТаблицаВторойОрганизации.ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВторойОрганизации.ДатаДокумента,
	|	ТаблицаВторойОрганизации.НомерДокумента,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублиПервойОрганизацииПредвартельная.НомерСтроки КАК НомерСтроки,
	|	ДублиПервойОрганизацииПредвартельная.ДатаДокумента КАК ДатаДокумента,
	|	ДублиПервойОрганизацииПредвартельная.НомерДокумента КАК НомерДокумента,
	|	ДублиПервойОрганизацииПредвартельная.НаименованиеОперации КАК НаименованиеОперации
	|ИЗ
	|	ДублиПервойОрганизацииПредвартельная КАК ДублиПервойОрганизацииПредвартельная
	|ГДЕ
	|	ДублиПервойОрганизацииПредвартельная.КоличествоОдинаковыхСтрок > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублиВторойОрганизацииПредвартельная.НомерСтроки КАК НомерСтроки,
	|	ДублиВторойОрганизацииПредвартельная.ДатаДокумента КАК ДатаДокумента,
	|	ДублиВторойОрганизацииПредвартельная.НомерДокумента КАК НомерДокумента,
	|	ДублиВторойОрганизацииПредвартельная.НаименованиеОперацииИнвертированное КАК НаименованиеОперации
	|ИЗ
	|	ДублиВторойОрганизацииПредвартельная КАК ДублиВторойОрганизацииПредвартельная
	|ГДЕ
	|	ДублиВторойОрганизацииПредвартельная.КоличествоОдинаковыхСтрок > 1";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПредельнаяПорцияДанныхБезИндексации = 1000;
	МассивНомеровДублейПервойОрганизации = Новый Массив;
	Если Не РезультатЗапроса[4].Пустой() Тогда
		// Проверяем дубли по первой организации.
		УсловиеПоиска = Новый Структура("НомерДокумента, ДатаДокумента, НаименованиеОперации");
		Если ПоДаннымОрганизации.Количество() > ПредельнаяПорцияДанныхБезИндексации Тогда
			// Дополним индексовые поля.
			ПоДаннымОрганизации.Индексы.Добавить("НомерДокумента");
			ПоДаннымОрганизации.Индексы.Добавить("ДатаДокумента");
			ПоДаннымОрганизации.Индексы.Добавить("НаименованиеОперации");
		КонецЕсли;
		ДублиОрганизации = РезультатЗапроса[4].Выгрузить();
		Для Каждого ДубльСтроки Из ДублиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, ДубльСтроки);
			УсловиеПоиска.НомерДокумента = СокрЛП(УсловиеПоиска.НомерДокумента);
			НайденныеСтроки = ПоДаннымОрганизации.НайтиСтроки(УсловиеПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ПоДаннымОрганизации.Добавить();
			ЭтоПерваяСтрока = Истина;
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНомеровДублейПервойОрганизации.Добавить(НайденнаяСтрока.НомерСтроки);
				Если ЭтоПерваяСтрока = Истина Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
					НоваяСтрока.ИсходныйНомерСтрокиПоДаннымОрганизации = Строка(НайденнаяСтрока.НомерСтроки);
					НоваяСтрока.НомерПорядка = Число(НайденнаяСтрока.НомерСтроки);
					ЭтоПерваяСтрока = Ложь;
					ПоДаннымОрганизации.Удалить(НайденнаяСтрока);
					Продолжить;
				КонецЕсли;
				НоваяСтрока.ИсходныйНомерСтрокиПоДаннымОрганизации = СтрШаблон(
					"%1;%2",
					Строка(НоваяСтрока.ИсходныйНомерСтрокиПоДаннымОрганизации),
					Строка(НайденнаяСтрока.НомерСтроки));
				НоваяСтрока.УвеличениеДолга  = НоваяСтрока.УвеличениеДолга + НайденнаяСтрока.УвеличениеДолга;
				НоваяСтрока.УменьшениеДолга = НоваяСтрока.УменьшениеДолга + НайденнаяСтрока.УменьшениеДолга;
				ПоДаннымОрганизации.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МассивНомеровДублейВторойОрганизации = Новый Массив;
	Если Не РезультатЗапроса[5].Пустой() Тогда
		// Обработаем дубли второй организации.
		УсловиеПоиска = Новый Структура("НомерДокумента, ДатаДокумента, НаименованиеОперацииИнвертированное");
		Если ПоДаннымКонтрагента.Количество() > ПредельнаяПорцияДанныхБезИндексации Тогда
			// Добавим дополнительные индексы для поиска.
			ПоДаннымКонтрагента.Индексы.Добавить("НомерДокумента");
			ПоДаннымКонтрагента.Индексы.Добавить("ДатаДокумента");
			ПоДаннымКонтрагента.Индексы.Добавить("НаименованиеОперацииИнвертированное");
		КонецЕсли;
		ДублиКонтрагента = РезультатЗапроса[5].Выгрузить();
		Для Каждого ДубльСтроки Из ДублиКонтрагента Цикл
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, ДубльСтроки);
			УсловиеПоиска.НомерДокумента   = СокрЛП(УсловиеПоиска.НомерДокумента);
			УсловиеПоиска.НаименованиеОперацииИнвертированное = ДубльСтроки.НаименованиеОперации;
			НайденныеСтроки = ПоДаннымКонтрагента.НайтиСтроки(УсловиеПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ПоДаннымКонтрагента.Добавить();
			ЭтоПерваяСтрока = Истина;
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНомеровДублейВторойОрганизации.Добавить(НайденнаяСтрока.НомерСтроки);
				Если ЭтоПерваяСтрока = Истина Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
					НоваяСтрока.ИсходныйНомерСтрокиПоДаннымКонтрагента = Строка(НайденнаяСтрока.НомерСтроки);
					ЭтоПерваяСтрока = Ложь;
					ПоДаннымКонтрагента.Удалить(НайденнаяСтрока);
					Продолжить;
				КонецЕсли;
				НоваяСтрока.ИсходныйНомерСтрокиПоДаннымКонтрагента = СтрШаблон(
					"%1;%2",
					Строка(НоваяСтрока.ИсходныйНомерСтрокиПоДаннымКонтрагента),
					Строка(НайденнаяСтрока.НомерСтроки));
				НоваяСтрока.УвеличениеДолга  = НоваяСтрока.УвеличениеДолга + НайденнаяСтрока.УвеличениеДолга;
				НоваяСтрока.УменьшениеДолга = НоваяСтрока.УменьшениеДолга + НайденнаяСтрока.УменьшениеДолга;
				ПоДаннымКонтрагента.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивНомеровДублейПервойОрганизации", МассивНомеровДублейПервойОрганизации);
	Запрос.УстановитьПараметр("МассивНомеровДублейВторойОрганизации", МассивНомеровДублейВторойОрганизации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтроки КАК НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.Представление КАК ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокумента КАК НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокумента КАК ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УвеличениеДолга КАК УвеличениеДолгаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УменьшениеДолга КАК УменьшениеДолгаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НаименованиеОперации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаПервойОрганизации.Дата КАК Дата,
	|	ТаблицаПервойОрганизации.Документ КАК Документ,
	|	ТаблицаВторойОрганизации.НомерСтроки КАК НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.Представление КАК ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокумента КАК НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокумента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УвеличениеДолга КАК УвеличениеДолгаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УменьшениеДолга КАК УменьшениеДолгаПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.НомерСтроки КАК НомерПорядка,
	|	ТаблицаВторойОрганизации.НаименованиеОперации КАК НаименованиеОперацииПоДаннымКонтрагента
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.НомерДокумента = ТаблицаВторойОрганизации.НомерДокумента
	|			И ТаблицаПервойОрганизации.ДатаДокумента = ТаблицаВторойОрганизации.ДатаДокумента
	|			И ТаблицаПервойОрганизации.УвеличениеДолга = ТаблицаВторойОрганизации.УменьшениеДолга
	|			И ТаблицаПервойОрганизации.УменьшениеДолга = ТаблицаВторойОрганизации.УвеличениеДолга
	|			И ТаблицаПервойОрганизации.НаименованиеОперации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|ГДЕ
	|	НЕ ТаблицаПервойОрганизации.НомерСтроки В (&МассивНомеровДублейПервойОрганизации)
	|	И НЕ ТаблицаВторойОрганизации.НомерСтроки В (&МассивНомеровДублейВторойОрганизации)";
	
	ТочноеСовпадение = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТочногоСовпадения Из ТочноеСовпадение Цикл
		ИсходнаяСтрокаПервойОрганизации = ПоДаннымОрганизации.Найти(СтрокаТочногоСовпадения.НомерСтрокиПоДаннымОрганизации, "НомерСтроки");
		ИсходнаяСтрокаВторойОрганизации = ПоДаннымКонтрагента.Найти(СтрокаТочногоСовпадения.НомерСтрокиПоДаннымКонтрагента, "НомерСтроки");
		Если ЗначениеЗаполнено(ИсходнаяСтрокаПервойОрганизации)
			И ЗначениеЗаполнено(ИсходнаяСтрокаВторойОрганизации) Тогда
			СтрокаСовпадения = СверкаАкта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСовпадения, СтрокаТочногоСовпадения);
			СтрокаСовпадения.Документ = СтрокаТочногоСовпадения.Документ;
			// Удалим сопоставленные строки.
			ПоДаннымОрганизации.Удалить(ИсходнаяСтрокаПервойОрганизации);
			ПоДаннымКонтрагента.Удалить(ИсходнаяСтрокаВторойОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	// Соединим таблицы по разным реквизитам, объединим и отранжируем по максимальному совпадению.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоДаннымОрганизации.ИсходныйНомерСтрокиПоДаннымОрганизации КАК НомерСтрокиПоДаннымОрганизации,
	|	ПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ПоДаннымОрганизации.Представление КАК ПредставлениеПоДаннымОрганизации,
	|	ПоДаннымОрганизации.НомерДокумента КАК НомерДокументаПоДаннымОрганизации,
	|	ПоДаннымОрганизации.ДатаДокумента КАК ДатаДокументаПоДаннымОрганизации,
	|	ПоДаннымОрганизации.УвеличениеДолга КАК УвеличениеДолгаПоДаннымОрганизации,
	|	ПоДаннымОрганизации.УменьшениеДолга КАК УменьшениеДолгаПоДаннымОрганизации,
	|	ВЫБОР
	|		КОГДА ПоДаннымОрганизации.НомерПорядка <> 0
	|			ТОГДА ПоДаннымОрганизации.НомерПорядка
	|		ИНАЧЕ ПоДаннымОрганизации.НомерСтроки
	|	КОНЕЦ КАК НомерПорядка,
	|	ПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ПоДаннымОрганизации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ПоДаннымОрганизации.Дата КАК Дата,
	|	ПоДаннымОрганизации.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаПервойОрганизации
	|ИЗ
	|	&ПоДаннымОрганизации КАК ПоДаннымОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДаннымКонтрагента.ИсходныйНомерСтрокиПоДаннымКонтрагента КАК НомерСтрокиПоДаннымКонтрагента,
	|	ПоДаннымКонтрагента.НомерСтроки КАК НомерСтроки,
	|	ПоДаннымКонтрагента.Представление КАК ПредставлениеПоДаннымКонтрагента,
	|	ПоДаннымКонтрагента.НомерДокумента КАК НомерДокументаПоДаннымКонтрагента,
	|	ПоДаннымКонтрагента.ДатаДокумента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ПоДаннымКонтрагента.УвеличениеДолга КАК УвеличениеДолгаПоДаннымКонтрагента,
	|	ПоДаннымКонтрагента.УменьшениеДолга КАК УменьшениеДолгаПоДаннымКонтрагента,
	|	ПоДаннымКонтрагента.НаименованиеОперации КАК НаименованиеОперацииПоДаннымКонтрагента,
	|	ПоДаннымКонтрагента.НаименованиеОперацииИнвертированное КАК НаименованиеОперацииИнвертированное
	|ПОМЕСТИТЬ ТаблицаВторойОрганизации
	|ИЗ
	|	&ПоДаннымКонтрагента КАК ПоДаннымКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтрокиПоДаннымОрганизации КАК НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерСтроки КАК НомерСтроки1,
	|	ТаблицаПервойОрганизации.ПредставлениеПоДаннымОрганизации КАК ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации КАК НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации КАК ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УвеличениеДолгаПоДаннымОрганизации КАК УвеличениеДолгаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УменьшениеДолгаПоДаннымОрганизации КАК УменьшениеДолгаПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НомерСтрокиПоДаннымКонтрагента КАК НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерСтроки КАК НомерСтроки2,
	|	ТаблицаВторойОрганизации.ПредставлениеПоДаннымКонтрагента КАК ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента КАК НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УвеличениеДолгаПоДаннымКонтрагента КАК УвеличениеДолгаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УменьшениеДолгаПоДаннымКонтрагента КАК УменьшениеДолгаПоДаннымКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента
	|				И ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|			ТОГДА 5
	|		КОГДА ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента
	|				ИЛИ ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК КоличествоСовпадений,
	|	ТаблицаПервойОрганизации.НомерПорядка КАК НомерПорядка,
	|	ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииПоДаннымКонтрагента КАК НаименованиеОперацииПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаблицаПервойОрганизации.Дата КАК Дата,
	|	ТаблицаПервойОрганизации.Документ КАК Документ
	|ПОМЕСТИТЬ ПредварирительноеСопоставление
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.УвеличениеДолгаПоДаннымОрганизации = ТаблицаВторойОрганизации.УменьшениеДолгаПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.УменьшениеДолгаПоДаннымОрганизации = ТаблицаВторойОрганизации.УвеличениеДолгаПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерСтроки,
	|	ТаблицаПервойОрганизации.ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УвеличениеДолгаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УменьшениеДолгаПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерСтроки,
	|	ТаблицаВторойОрганизации.ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УвеличениеДолгаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УменьшениеДолгаПоДаннымКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = """"
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|					ТОГДА 3
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ТаблицаПервойОрганизации.НомерПорядка,
	|	ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.ДоговорВзаиморасчетов,
	|	ТаблицаПервойОрганизации.Дата,
	|	ТаблицаПервойОрганизации.Документ
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПервойОрганизации.НомерСтрокиПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерСтроки,
	|	ТаблицаПервойОрганизации.ПредставлениеПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.НомерДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УвеличениеДолгаПоДаннымОрганизации,
	|	ТаблицаПервойОрганизации.УменьшениеДолгаПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НомерСтрокиПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерСтроки,
	|	ТаблицаВторойОрганизации.ПредставлениеПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.НомерДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УвеличениеДолгаПоДаннымКонтрагента,
	|	ТаблицаВторойОрганизации.УменьшениеДолгаПоДаннымКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ТаблицаПервойОрганизации.НомерПорядка,
	|	ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации,
	|	ТаблицаВторойОрганизации.НаименованиеОперацииПоДаннымКонтрагента,
	|	ТаблицаПервойОрганизации.ДоговорВзаиморасчетов,
	|	ТаблицаПервойОрганизации.Дата,
	|	ТаблицаПервойОрганизации.Документ
	|ИЗ
	|	ТаблицаПервойОрганизации КАК ТаблицаПервойОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВторойОрганизации КАК ТаблицаВторойОрганизации
	|		ПО ТаблицаПервойОрганизации.ДатаДокументаПоДаннымОрганизации = ТаблицаВторойОрганизации.ДатаДокументаПоДаннымКонтрагента
	|			И ТаблицаПервойОрганизации.НаименованиеОперацииПоДаннымОрганизации = ТаблицаВторойОрганизации.НаименованиеОперацииИнвертированное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки1
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации
	|	КОНЕЦ КАК НомерСтрокиПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НомерСтроки1 КАК НомерСтроки1,
	|	ПредварирительноеСопоставление.НомерСтроки2 КАК НомерСтроки2,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымОрганизации КАК ПредставлениеПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымОрганизации КАК НомерДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымОрганизации КАК ДатаДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.УвеличениеДолгаПоДаннымОрганизации КАК УвеличениеДолгаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.УменьшениеДолгаПоДаннымОрганизации КАК УменьшениеДолгаПоДаннымОрганизации,
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки2
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента
	|	КОНЕЦ КАК НомерСтрокиПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымКонтрагента КАК ПредставлениеПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымКонтрагента КАК НомерДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымКонтрагента КАК ДатаДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.УвеличениеДолгаПоДаннымКонтрагента КАК УвеличениеДолгаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.УменьшениеДолгаПоДаннымКонтрагента КАК УменьшениеДолгаПоДаннымКонтрагента,
	|	МАКСИМУМ(ПредварирительноеСопоставление.КоличествоСовпадений) КАК КоличествоСовпадений,
	|	ПредварирительноеСопоставление.НомерПорядка КАК НомерПорядка,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымОрганизации КАК НаименованиеОперацииПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымКонтрагента КАК НаименованиеОперацииПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ПредварирительноеСопоставление.Дата КАК Дата,
	|	ПредварирительноеСопоставление.Документ КАК Документ
	|ИЗ
	|	ПредварирительноеСопоставление КАК ПредварирительноеСопоставление
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки1
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымОрганизации
	|	КОНЕЦ,
	|	ПредварирительноеСопоставление.НомерСтроки1,
	|	ПредварирительноеСопоставление.НомерСтроки2,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.УвеличениеДолгаПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.УменьшениеДолгаПоДаннымОрганизации,
	|	ВЫБОР
	|		КОГДА ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента = """"
	|			ТОГДА ПредварирительноеСопоставление.НомерСтроки2
	|		ИНАЧЕ ПредварирительноеСопоставление.НомерСтрокиПоДаннымКонтрагента
	|	КОНЕЦ,
	|	ПредварирительноеСопоставление.ПредставлениеПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.НомерДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДатаДокументаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.УвеличениеДолгаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.УменьшениеДолгаПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.НомерПорядка,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымОрганизации,
	|	ПредварирительноеСопоставление.НаименованиеОперацииПоДаннымКонтрагента,
	|	ПредварирительноеСопоставление.ДоговорВзаиморасчетов,
	|	ПредварирительноеСопоставление.Дата,
	|	ПредварирительноеСопоставление.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСовпадений УБЫВ";
	
	Запрос.УстановитьПараметр("ПоДаннымОрганизации", ПоДаннымОрганизации);
	Запрос.УстановитьПараметр("ПоДаннымКонтрагента", ПоДаннымКонтрагента);
	ТаблицаСопоставленныхСтрок = Запрос.Выполнить().Выгрузить();
	
	КоличествоПоисковыхПолей = 5;
	МинимальноеРеквизитовДляСопоставления = 2;
	
	Для Каждого СтрокаСопоставленныхСтрок Из ТаблицаСопоставленныхСтрок Цикл
		Если СтрокаСопоставленныхСтрок.КоличествоСовпадений < МинимальноеРеквизитовДляСопоставления Тогда
			Прервать;
		КонецЕсли;
		ИсходнаяСтрокаПервойОрганизации = ПоДаннымОрганизации.Найти(СтрокаСопоставленныхСтрок.НомерСтроки1, "НомерСтроки");
		ИсходнаяСтрокаВторойОрганизации = ПоДаннымКонтрагента.Найти(СтрокаСопоставленныхСтрок.НомерСтроки2, "НомерСтроки");
		Если ЗначениеЗаполнено(ИсходнаяСтрокаПервойОрганизации)
			И ЗначениеЗаполнено(ИсходнаяСтрокаВторойОрганизации) Тогда
			СтрокаСверки = СверкаАкта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСверки, СтрокаСопоставленныхСтрок);
			СтрокаСверки.НомерПорядка = Число(СтрокаСопоставленныхСтрок.НомерПорядка);
			СтрокаСверки.ЕстьРасхождения    = СтрокаСопоставленныхСтрок.КоличествоСовпадений < КоличествоПоисковыхПолей;
			СтрокаСверки.Документ  = СтрокаСопоставленныхСтрок.Документ;
			ПоДаннымОрганизации.Удалить(ИсходнаяСтрокаПервойОрганизации);
			ПоДаннымКонтрагента.Удалить(ИсходнаяСтрокаВторойОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	СверкаАкта.Сортировать("НомерПорядка");
	
	Объект.Сверка.Загрузить(СверкаАкта);
	
	// Остальные строки для сверки без совпадений.
	Для Каждого СтрокаПервойОрганизации Из ПоДаннымОрганизации Цикл
		СтрокаРезультата = Объект.Сверка.Добавить();
		СтрокаРезультата.НомерСтрокиПоДаннымОрганизации          = СтрокаПервойОрганизации.НомерСтроки;
		СтрокаРезультата.ПредставлениеПоДаннымОрганизации        = СтрокаПервойОрганизации.Представление;
		СтрокаРезультата.НомерДокументаПоДаннымОрганизации       = СтрокаПервойОрганизации.НомерДокумента;
		СтрокаРезультата.ДатаДокументаПоДаннымОрганизации        = СтрокаПервойОрганизации.ДатаДокумента;
		СтрокаРезультата.УвеличениеДолгаПоДаннымОрганизации      = СтрокаПервойОрганизации.УвеличениеДолга;
		СтрокаРезультата.УменьшениеДолгаПоДаннымОрганизации      = СтрокаПервойОрганизации.УменьшениеДолга;
		СтрокаРезультата.НаименованиеОперацииПоДаннымОрганизации = СтрокаПервойОрганизации.НаименованиеОперации;
		СтрокаРезультата.ДоговорВзаиморасчетов                   = СтрокаПервойОрганизации.ДоговорВзаиморасчетов;
		СтрокаРезультата.Дата                                    = СтрокаПервойОрганизации.Дата;
		СтрокаРезультата.Документ                                = СтрокаПервойОрганизации.Документ;
		СтрокаРезультата.ДоговорВзаиморасчетов                   = СтрокаПервойОрганизации.ДоговорВзаиморасчетов;
		СтрокаРезультата.ЕстьРасхождения                         = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаВторойОрганизации Из ПоДаннымКонтрагента Цикл
		СтрокаРезультата = Объект.Сверка.Добавить();
		СтрокаРезультата.НомерСтрокиПоДаннымКонтрагента          = СтрокаВторойОрганизации.НомерСтроки;
		СтрокаРезультата.ПредставлениеПоДаннымКонтрагента        = СтрокаВторойОрганизации.Представление;
		СтрокаРезультата.НомерДокументаПоДаннымКонтрагента       = СтрокаВторойОрганизации.НомерДокумента;
		СтрокаРезультата.ДатаДокументаПоДаннымКонтрагента        = СтрокаВторойОрганизации.ДатаДокумента;
		СтрокаРезультата.УвеличениеДолгаПоДаннымКонтрагента      = СтрокаВторойОрганизации.УвеличениеДолга;
		СтрокаРезультата.УменьшениеДолгаПоДаннымКонтрагента      = СтрокаВторойОрганизации.УменьшениеДолга;
		СтрокаРезультата.НаименованиеОперацииПоДаннымКонтрагента = СтрокаВторойОрганизации.НаименованиеОперации;
		СтрокаРезультата.ДоговорВзаиморасчетов                   = СтрокаВторойОрганизации.ДоговорВзаиморасчетов;
		СтрокаРезультата.ЕстьРасхождения                         = Истина;
		СтрокаРезультата.Документ                                = НСтр("ru='Отсутствует в информационной базе'");
	КонецЦикла;
	
	ОстатокНаКонец = Объект.ОстатокНаНачало
		+ Объект.ПоДаннымОрганизации.Итог("УвеличениеДолга")
		- Объект.ПоДаннымОрганизации.Итог("УменьшениеДолга");
		
	ОстатокНаКонецКонтрагент = Объект.ОстатокНаНачалоПоКонтрагенту
		+ Объект.ПоДаннымКонтрагента.Итог("УвеличениеДолга")
		- Объект.ПоДаннымКонтрагента.Итог("УменьшениеДолга");
	
	// Обороты за период
	СтрокаРезультата = Объект.Сверка.Добавить();
	СтрокаРезультата.Документ = НСтр("ru='Обороты за период'");

	СтрокаРезультата.УвеличениеДолгаПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Итог("УвеличениеДолга");
	СтрокаРезультата.УменьшениеДолгаПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Итог("УменьшениеДолга");
	СтрокаРезультата.УвеличениеДолгаПоДаннымКонтрагента = Объект.ПоДаннымКонтрагента.Итог("УвеличениеДолга");
	СтрокаРезультата.УменьшениеДолгаПоДаннымКонтрагента = Объект.ПоДаннымКонтрагента.Итог("УменьшениеДолга");
	СтрокаРезультата.ЕстьРасхождения =
		СтрокаРезультата.УвеличениеДолгаПоДаннымОрганизации <> СтрокаРезультата.УменьшениеДолгаПоДаннымКонтрагента
		Или СтрокаРезультата.УменьшениеДолгаПоДаннымОрганизации <> СтрокаРезультата.УвеличениеДолгаПоДаннымКонтрагента;
	
	// Конечное сальдо
	СтрокаРезультата = Объект.Сверка.Добавить();
	СтрокаРезультата.Документ = НСтр("ru='Сальдо конечное'");

	Если ОстатокНаКонец > 0 Тогда
		СтрокаРезультата.УвеличениеДолгаПоДаннымОрганизации  = ОстатокНаКонец;
		СтрокаРезультата.УменьшениеДолгаПоДаннымОрганизации = 0;
	Иначе
		СтрокаРезультата.УвеличениеДолгаПоДаннымОрганизации  = 0;
		СтрокаРезультата.УменьшениеДолгаПоДаннымОрганизации = - ОстатокНаКонец;
	КонецЕсли;
	
	Если ОстатокНаКонецКонтрагент > 0 Тогда
		СтрокаРезультата.УвеличениеДолгаПоДаннымКонтрагента  = ОстатокНаКонецКонтрагент;
		СтрокаРезультата.УменьшениеДолгаПоДаннымКонтрагента = 0;
	Иначе
		СтрокаРезультата.УвеличениеДолгаПоДаннымКонтрагента  = 0;
		СтрокаРезультата.УменьшениеДолгаПоДаннымКонтрагента = - ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	
	СтрокаРезультата.ЕстьРасхождения = ОстатокНаКонец <> - ОстатокНаКонецКонтрагент;
	
	Объект.ЕстьРасхождения = Ложь;
	
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл
		Если СтрокаСверки.ЕстьРасхождения Тогда
			Объект.ЕстьРасхождения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СменитьНаименованиеОперации(ПоДаннымКонтрагента)
	
	ИнвертныеНаименованияОпераций = НаименованияОперацийОбратно();
	Для Каждого СтрокаТаблицы Из ПоДаннымКонтрагента Цикл
		
		НаименованиеОперацииИнвертированное = ИнвертныеНаименованияОпераций.Получить(
			СтрокаТаблицы.НаименованиеОперации);
		Если Не ЗначениеЗаполнено(НаименованиеОперацииИнвертированное) Тогда
			СтрокаТаблицы.НаименованиеОперацииИнвертированное = СтрокаТаблицы.НаименованиеОперации;
		Иначе
			СтрокаТаблицы.НаименованиеОперацииИнвертированное = ИнвертныеНаименованияОпераций.Получить(
				СтрокаТаблицы.НаименованиеОперации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованиеОперацииДокумента(Строка)
	
	Реализация = Новый Массив();
	Реализация.Добавить(Тип("ДокументСсылка.РеализацияАктивов"));
	Реализация.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	Реализация.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
	Реализация.Добавить(Тип("ДокументСсылка.РеализацияТоваров"));
	
	ОтчетКомиссионера = Новый Массив();
	ОтчетКомиссионера.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	ОтчетКомиссионера.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераЗаАвтомобили"));
	
	Поступление = Новый Массив();
	Поступление.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	Поступление.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
	Поступление.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	
	ОтчетКомитенту = Новый Массив();
	ОтчетКомитенту.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	ОтчетКомитенту.Добавить(Тип("ДокументСсылка.ОтчетКомитентуЗаАвтомобили"));
	
	КорректировкаРеализации = Новый Массив();
	КорректировкаРеализации.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	КорректировкаРеализации.Добавить(Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей"));
	КорректировкаРеализации.Добавить(Тип("ДокументСсылка.АктРазногласий"));
	
	КорректировкаПоступления = Новый Массив();
	КорректировкаПоступления.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	КорректировкаПоступления.Добавить(Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей"));
	
	ВозвратПоставщику = Новый Массив();
	ВозвратПоставщику.Добавить(Тип("ДокументСсылка.ВозвратПоставщику"));
	ВозвратПоставщику.Добавить(Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей"));
	
	ВозвратОтПокупателя = Новый Массив();
	ВозвратОтПокупателя.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
	ВозвратОтПокупателя.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателя"));
	
	УвеличениеДолга = Строка.УвеличениеДолга > 0;
	УменьшениеДолга = Строка.УменьшениеДолга > 0;
	ТипДокумента = ТипЗнч(Строка.Документ);
	Если ЕстьРеквизит(Строка.Документ, "ХозОперация") Тогда
		ПредставлениеДокумента = Строка(Строка.Документ.ХозОперация);
	Иначе
		ПредставлениеДокумента = Строка.Документ.Метаданные().Синоним;
	КонецЕсли;
	
	Если Реализация.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Реализация'");
	ИначеЕсли Поступление.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Поступление'");
	ИначеЕсли КорректировкаРеализации.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Корректировка реализации'");
	ИначеЕсли КорректировкаПоступления.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Корректировка поступления'");
	ИначеЕсли ОтчетКомиссионера.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Отчет комиссионера'");
	ИначеЕсли ОтчетКомитенту.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Отчет комитенту'");
	ИначеЕсли ВозвратПоставщику.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Возврат поставщику'");
	ИначеЕсли ВозвратОтПокупателя.Найти(ТипДокумента) <> Неопределено Тогда
		Возврат НСтр("ru='Возврат от покупателя'");
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

Функция НаименованияОперацийОбратно()
	
	Операции = Новый Соответствие;
	
	Операции.Вставить(НСтр("ru='Реализация'"), НСтр("ru='Поступление'"));
	Операции.Вставить(НСтр("ru='Поступление'"), НСтр("ru='Реализация'"));

	Операции.Вставить(НСтр("ru='Корректировка реализации'"), НСтр("ru='Корректировка поступления'"));
	Операции.Вставить(НСтр("ru='Корректировка поступления'"), НСтр("ru='Корректировка реализации'"));
	
	Операции.Вставить(НСтр("ru='Оплата поставщику'"), НСтр("ru='Оплата от покупателя'"));
	Операции.Вставить(НСтр("ru='Оплата от покупателя'"), НСтр("ru='Оплата поставщику'"));
	
	Операции.Вставить(НСтр("ru='Возврат средств от поставщика'"), НСтр("ru='Возврат средств покупателю'"));
	Операции.Вставить(НСтр("ru='Возврат средств покупателю'"), НСтр("ru='Возврат средств от поставщика'"));
	
	Операции.Вставить(НСтр("ru='Поступление средств прочее'"), НСтр("ru='Оплата прочая'"));
	Операции.Вставить(НСтр("ru='Оплата прочая'"), НСтр("ru='Поступление средств прочее'"));
	
	Операции.Вставить(НСтр("ru='Передано'"), НСтр("ru='Принято'"));
	Операции.Вставить(НСтр("ru='Принято'"), НСтр("ru='Передано'"));
	
	Операции.Вставить(НСтр("ru='Отчет комиссионера'"), НСтр("ru='Отчет комитенту'"));
	Операции.Вставить(НСтр("ru='Отчет комитенту'"), НСтр("ru='Отчет комиссионера'"));
	
	Операции.Вставить(НСтр("ru='Возврат поставщику'"), НСтр("ru='Возврат от покупателя'"));
	Операции.Вставить(НСтр("ru='Возврат от покупателя'"), НСтр("ru='Возврат поставщику'"));
	
	Операции.Вставить(НСтр("ru='Сторно: передано'"), НСтр("ru='Сторно: принято'"));
	Операции.Вставить(НСтр("ru='Сторно: принято'"), НСтр("ru='Сторно: передано'"));
	
	Операции.Вставить(НСтр("ru='Расходный кассовый ордер'"), НСтр("ru='Приходный кассовый ордер'"));
	Операции.Вставить(НСтр("ru='Приходный кассовый ордер'"), НСтр("ru='Расходный кассовый ордер'"));
	
	Возврат Операции;
	
КонецФункции

Функция ДанныеКонтрагентаПоДаннымОрганизации(ПоДаннымОрганизации) Экспорт
	
	ПоДаннымКонтрагента = ПоДаннымОрганизации.СкопироватьКолонки();
	НаименованияОпераций = НаименованияОперацийОбратно();
	
	Для Каждого СтрокаПоДаннымОрганизации Из ПоДаннымОрганизации Цикл
		СтрокаПоДаннымКонтрагента = ПоДаннымКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДаннымКонтрагента, СтрокаПоДаннымОрганизации);
		НаименованиеОперации = НаименованияОпераций.Получить(
			СтрокаПоДаннымОрганизации.НаименованиеОперации);
		Если ЗначениеЗаполнено(НаименованиеОперации) Тогда
			СтрокаПоДаннымКонтрагента.НаименованиеОперации = НаименованиеОперации;
		Иначе
			СтрокаПоДаннымКонтрагента.НаименованиеОперации = СтрокаПоДаннымОрганизации.НаименованиеОперации;
		КонецЕсли;
		СтрокаПоДаннымКонтрагента.УвеличениеДолга  = СтрокаПоДаннымОрганизации.УменьшениеДолга;
		СтрокаПоДаннымКонтрагента.УменьшениеДолга = СтрокаПоДаннымОрганизации.УвеличениеДолга;
	КонецЦикла;
	
	Возврат ПоДаннымКонтрагента;
	
КонецФункции

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияДокументовАктаСверки(ОбластьСтрока, Выборка, ПечататьНомераУПД = Ложь)
	
	Документ = Выборка.Документ;
	ДокументКонтр = Выборка.ДокументКонтр;
	
	ОбластьСтрока.Параметры.ДокументПредставление = ПолучитьПредставлениеДокументаДляПечатиАктаСверки(Выборка.Документ, ПечататьНомераУПД);
	ОбластьСтрока.Параметры.ДокументПредставлениеКонтр = ПолучитьПредставлениеДокументаДляПечатиАктаСверки(Выборка.ДокументКонтр, ПечататьНомераУПД);
	
КонецПроцедуры

Функция ПолучитьПредставлениеДокументаДляПечатиАктаСверки(Документ, ПечататьНомераУПД = Ложь)
	
	ДокументПредставление = "";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Номер, Дата, ВхДокНомер, ВхДокДата, ХозОперация.Наименование");
		
		ДокументПредставление = СтруктураРеквизитов.ХозОперацияНаименование
			+ " № "
			+ СтруктураРеквизитов.Номер
			+ " от "
			+ Формат(СтруктураРеквизитов.Дата, "ДЛФ=D");
		
		Если СокрП(СтруктураРеквизитов.ВхДокНомер) <> "" Тогда
			
			ДокументПредставление = ДокументПредставление
				+ " (вх. № "
				+ СтруктураРеквизитов.ВхДокНомер
				+ " от "
				+ Формат(СтруктураРеквизитов.ВхДокДата, "ДЛФ=D")
				+ ")";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		Если ПечататьНомераУПД Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
			|	И НЕ СчетФактураВыданный.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ДокументОснование", Документ);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				
				ДокументПредставление = "УПД (СчФ) № "
					+ УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект())
					+ " от "
					+ Формат(ВыборкаДетальныеЗаписи.Ссылка.Дата, "ДЛФ=D");
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияАвтомобилей") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваров") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратПоставщику")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеАвтомобилей")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияАвтомобилей")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		
		Если ПечататьНомераУПД Тогда
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияАвтомобилей")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваров")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратПоставщику")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияАвтомобилей")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваров")Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
				|	И НЕ СчетФактураВыданный.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ДокументОснование", Документ);
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					
					ДокументПредставление = "УПД (СчФ) № "
					+ УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект())
					+ " от "
					+ Формат(ВыборкаДетальныеЗаписи.Ссылка.Дата, "ДЛФ=D");
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
				|	И НЕ СчетФактураВыданный.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ДокументОснование", Документ.ДокументОснование);
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					
					ДокументПредставление = "УКД (СчФ) № "
					+ УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект())
					+ " от "
					+ Формат(ВыборкаДетальныеЗаписи.Ссылка.Дата, "ДЛФ=D");
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СокрП(ДокументПредставление) = "" И ЗначениеЗаполнено(Документ) Тогда  
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда  
			ДатаДокумента = Документ.ДатаЗакрытия
		Иначе
			ДатаДокумента = Документ.Дата;
		КонецЕсли;
			
		ДокументПредставление = "" + Документ.Метаданные().Представление() + " № " + Документ.Номер + " от " + Формат(ДатаДокумента, "ДЛФ=Д");
		
	КонецЕсли;
	
	Возврат ДокументПредставление;
	
КонецФункции

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ДатаОкончания");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("ПоДаннымОрганизации");
		ОбязательныеРеквизиты.Добавить("ПоДаннымКонтрагента");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("ПоДаннымОрганизации.Дата");
	ОбязательныеРеквизиты.Добавить("ПоДаннымОрганизации.Документ");
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		ОбязательныеРеквизиты.Добавить("ПоДаннымОрганизации.ДоговорВзаиморасчетов");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("ПоДаннымКонтрагента.Дата");
	Если Не Объект.ЭтоЭлектронныйДокумент Тогда
		ОбязательныеРеквизиты.Добавить("ПоДаннымКонтрагента.Документ");
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			ОбязательныеРеквизиты.Добавить("ПоДаннымКонтрагента.ДоговорВзаиморасчетов");
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	ЭтоЭлектронныйДокумент = Объект.ЭтоЭлектронныйДокумент;
	Уникальные = Новый Массив;
	Уникальные.Добавить("Дата");
	Если ЭтоЭлектронныйДокумент Тогда
		Уникальные.Добавить("НаименованиеОперации");
		Уникальные.Добавить("НомерДокумента");
		Уникальные.Добавить("ДатаДокумента");
	Иначе
		Уникальные.Добавить("Документ");
		Уникальные.Добавить("Представление");
	КонецЕсли;
	Уникальные.Добавить("Сделка");
	Уникальные.Добавить("ДоговорВзаиморасчетов");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("ПоДаннымОрганизации", Уникальные);
	
	Если Не ЭтоЭлектронныйДокумент Тогда
		УникальныеРеквизиты.Вставить("ПоДаннымКонтрагента", Уникальные);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("ПоДаннымОрганизации", КонтролируемыеРеквизитыТЧ);
	КонтролируемыеРеквизиты.Вставить("ПоДаннымКонтрагента", КонтролируемыеРеквизитыТЧ);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ ДАННЫХ ОБЪЕКТА

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
	// выполним пересчет доп сумм
	ЗаполнитьЗначенияСвойств(Объект, РассчитатьИтогиОперации(Объект, Истина));
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Объект.ПоДаннымКонтрагента.Очистить();
	Объект.ПоДаннымОрганизации.Очистить();
	
	Если Объект.ЭтоЭлектронныйДокумент Тогда
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		
		Для Каждого СтрокаПоДаннымОрганизации Из Объект.ПоДаннымОрганизации Цикл
			СтрокаПоДаннымОрганизации.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		КонецЦикла;
		
		Для Каждого СтрокаПоДаннымКонтрагента Из Объект.ПоДаннымКонтрагента Цикл
			СтрокаПоДаннымКонтрагента.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОстатокНаНачалоПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

КонецПроцедуры // ОстатокНаНачалоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СверкаСогласованаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

КонецПроцедуры //СверкаСогласованаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоДаннымОрганизации

// Обработчик события возникающего при изменении данных реквизита "Документ" в таблице "По данным организации".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ПоДаннымОрганизацииДокументПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработатьИзменениеДокумента(Объект, Строка);
	
КонецПроцедуры // ПоДаннымОрганизацииДокументПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоДаннымКонтрагента

// Обработчик события возникающего при изменении данных реквизита "Документ" в таблице "По данным контрагента".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ПоДаннымКонтрагентаДокументПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработатьИзменениеДокумента(Объект, Строка);

КонецПроцедуры // ПоДаннымКонтрагентаДокументПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ТабличныеЧастиСКомандами = Новый Массив();
	ТабличныеЧастиСКомандами.Добавить("ПоДаннымОрганизации");
	ТабличныеЧастиСКомандами.Добавить("ПоДаннымКонтрагента");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "АктСверкиВзаиморасчетов");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСКомандами Цикл
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, ТабличнаяЧасть);
		
		Если ОтображатьЗаполнитьИзФайла Тогда
			ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, ТабличнаяЧасть);
		КонецЕсли;
	КонецЦикла;

	ВыборОрганизации 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборОрганизации.ВыборСсылки 		= "Справочник.Организации.ФормаСписка";
	ВыборОрганизации.Обязательный 		= Истина;
	ВыборОрганизации.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать организацию.'");
	
	ВыборДоговора 						= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки 			= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	
	МассивВидовДоговоров 	= Новый ФиксированныйМассив(Справочники.ХозОперации.ПолучитьВидыДоговоров(Справочники.ХозОперации.АктСверкиВзаиморасчетов));
	ВыборДоговора.Параметры = Новый Структура("РежимВыбора,Отбор", Истина, Новый Структура("ВидДоговора", МассивВидовДоговоров));

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПоДаннымОрганизацииПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по взаиморасчетам'");
	Команда.Идентификатор	= "ПоДаннымОрганизацииЗаполнитьПоВзаиморасчетам";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "ПоДаннымОрганизации";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Организация", ВыборОрганизации);  
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПоДаннымОрганизацииПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по взаиморасчетам с учетом обособленных подразделений контрагента'");
	Команда.Идентификатор	= "ПоДаннымОрганизацииЗаполнитьПоВзаиморасчетам";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "ПоДаннымОрганизации";
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ПоОбособленнымПодразделениям";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Организация", ВыборОрганизации);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПоДаннымКонтрагентаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по данным организации'");
	Команда.Идентификатор	= "ПоДаннымКонтрагентаЗаполнитьПоДаннымОрганизации";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "ПоДаннымКонтрагента";
	
	Для Каждого Команда Из КомандыЗаполнения Цикл
		Команда.УсловияВидимости.Добавить(
			Новый Структура("Реквизит, ВидСравнения, Значение", "СверкаСогласована", ВидСравненияКомпоновкиДанных.Равно, Ложь));	
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ПоДаннымОрганизацииЗаполнитьПоВзаиморасчетам.Видимость",       Истина);
	ПараметрыКоманд.Вставить("ПоДаннымОрганизацииЗаполнитьПоВзаиморасчетам.Доступность",     Истина);
	ПараметрыКоманд.Вставить("ПоДаннымКонтрагентаЗаполнитьПоДаннымОрганизации.Видимость",    Истина);
	ПараметрыКоманд.Вставить("ПоДаннымКонтрагентаЗаполнитьПоДаннымОрганизации.Доступность",
		Не (Объект.СверкаСогласована ИЛИ Объект.ЭтоЭлектронныйДокумент));
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Заполняет табличную часть "ПоДаннымОрганизации" по взаиморасчету
//
Функция ПоДаннымОрганизацииЗаполнитьПоВзаиморасчетам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Объект.Организация = ПараметрыЗаполнения.Организация Тогда
		Объект.Организация = ПараметрыЗаполнения.Организация;
		ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли; 
	
	Если ПараметрыЗаполнения.ПараметрКоманды = "ПоОбособленнымПодразделениям" Тогда
		
		ПараметрыДействия.Вставить("ПараметрКоманды", "ПоОбособленнымПодразделениям");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбрана дата окончания периода сверки.'"));
	ИначеЕсли Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверно задан период сверки расчетов.'"));
	Иначе
		
		ЗаполнитьВзаиморасчетыПоДаннымОрганизации(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецФункции // ПоДаннымОрганизацииЗаполнитьВыданныеАвансы()

// Заполняет табличную часть "ПоДаннымКонтрагента" по неоплаченным сделкам
//
Функция ПоДаннымКонтрагентаЗаполнитьПоДаннымОрганизации(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТабЗнач = Объект.ПоДаннымОрганизации.Выгрузить();
	ТабЗнач.Колонки.УвеличениеДолга.Имя  = "УменьшениеДолгаК";
	ТабЗнач.Колонки.УменьшениеДолга.Имя  = "УвеличениеДолга";
	ТабЗнач.Колонки.УменьшениеДолгаК.Имя = "УменьшениеДолга";
	Объект.ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецФункции // ПоДаннымКонтрагентаЗаполнитьПоДаннымОрганизации()

#КонецОбласти

#Область Печать

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"",
		"ПФ_MXL_АктСверки",
		НСтр("ru = 'Акт сверки'"),
		СсылкаНаДокумент,
		"УправлениеПечатьюАвтосалонКлиент.ПечатьАктСверки",,,,,
		Ложь
	);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.АктСверкиВзаиморасчетов",
		"ПФ_MXL_АктСверки_По_Договорам",
		НСтр("ru = 'Акт сверки (по договорам)'"),
		СсылкаНаДокумент,,,,,,
		Ложь
	);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктСверки") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_АктСверки",
			"АктСверки",
			ПечатьАктСверки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктСверки_По_Договорам") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_АктСверки_По_Договорам",
			"АктСверки",
			ПечатьАктСверкиПоДоговорам(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму "АктСверки"
//
Функция ПечатьАктСверки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПечататьНомераУПД = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати, "ПечататьНомераУПД", Ложь);
	РазбиватьПоСделкам = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати, "РазбиватьПоСделкам", Ложь);
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
		
		// Установим ориентацию страницы для нормального разбиения на страницы
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// Настроим макет 
		ОтобразитьСделку = РазбиватьПоСделкам;
		ОтобразитьСделкуКонтрагента = РазбиватьПоСделкам;
		
		МассивПустыхСсылок = Новый Массив;
		МассивПустыхСсылок.Добавить(ПланыВидовХарактеристик.ТипыСделок.ПустаяСсылка());
		МассивПустыхСсылок.Добавить(Неопределено);
		
		Для Каждого Документ1 Из Документы Цикл
			МассивПустыхСсылок.Добавить(Документ1.ПустаяСсылка());
		КонецЦикла;
		
		Если РазбиватьПоСделкам Тогда
			
			// Определяем есть ли сделки по организации
			ЗапросПоСделке = Новый Запрос;
			ЗапросПоСделке.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(АктСверкиВзаиморасчетовПоДаннымОрганизации.Сделка, 0) КАК Сделка
			|ИЗ
			|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
			|ГДЕ
			|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &ДокументСсылка
			|	И НЕ АктСверкиВзаиморасчетовПоДаннымОрганизации.Сделка В (&МассивПустыхСсылок)";
			
			ЗапросПоСделке.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
			ЗапросПоСделке.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
			РезультатЗапроса = ЗапросПоСделке.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ОбластьСделка = Макет.Область("СделкаПоОрганизации");
				ОтобразитьСделку = Ложь; 
				ОбластьДокумент = Макет.Область("ДокументПоОрганизации"); 
				ОбластьДокумент.ШиринаКолонки = ОбластьДокумент.ШиринаКолонки + ОбластьСделка.ШиринаКолонки;
				Макет.УдалитьОбласть(ОбластьСделка, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			
			// Определяем есть ли сделки по контрагенту
			ЗапросПоСделке.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Сделка КАК Сделка
			|ИЗ
			|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК АктСверкиВзаиморасчетовПоДаннымКонтрагента
			|ГДЕ
			|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Ссылка = &ДокументСсылка
			|	И НЕ АктСверкиВзаиморасчетовПоДаннымКонтрагента.Сделка В (&МассивПустыхСсылок)";
			
			ЗапросПоСделке.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
			ЗапросПоСделке.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
			РезультатЗапроса = ЗапросПоСделке.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ОбластьСделка = Макет.Область("СделкаПоКонтрагенту");
				ОтобразитьСделкуКонтрагента = Ложь;
				ОбластьДокумент = Макет.Область("ДокументПоКонтрагенту"); 
				ОбластьДокумент.ШиринаКолонки = ОбластьДокумент.ШиринаКолонки + ОбластьСделка.ШиринаКолонки;
				Макет.УдалитьОбласть(ОбластьСделка, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			
		Иначе
			
			ОбластьСделка = Макет.Область("СделкаПоОрганизации");
			ОбластьДокумент = Макет.Область("ДокументПоОрганизации"); 
			ОбластьДокумент.ШиринаКолонки = ОбластьДокумент.ШиринаКолонки + ОбластьСделка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСделка, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			ОбластьСделка = Макет.Область("СделкаПоКонтрагенту"); 
			ОбластьДокумент = Макет.Область("ДокументПоКонтрагенту"); 
			ОбластьДокумент.ШиринаКолонки = ОбластьДокумент.ШиринаКолонки + ОбластьСделка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСделка, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		КонецЕсли;
		
		// форматы вывода
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки      = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьОборотыИтог     = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки      = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		
		// Заголовок
		НазваниеОрганизации = УправлениеПечатьюПлатформа.
		ПолучитьПредставлениеСправочника(Документ.Организация,, ДополнительныеПараметры);
		НаименованиеКонтрагента = УправлениеПечатьюПлатформа.
		ПолучитьПредставлениеСправочника(Документ.Контрагент,, ДополнительныеПараметры);
		
		ПредставительОрганизации = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредставительОрганизации");
		ПредставительКонтрагента = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредставительКонтрагента");
		
		Если НЕ ЗначениеЗаполнено(ПредставительОрганизации.ПредставительОрганизации) Тогда
			ДолжностьПредставителяОрганизации = "";
			ИмяПредставителяОрганизации = "";
		Иначе
			ДолжностьПредставителяОрганизации = ПредставительОрганизации.ПредставительОрганизацииДолжность;
			ИмяПредставителяОрганизации = ПредставительОрганизации.ПредставительОрганизацииПредставление;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПредставительКонтрагента.ПредставительКонтрагента) Тогда
			ДолжностьПредставителяКонтрагента = "";
			ИмяПредставителяКонтрагента = "";
		Иначе
			ДолжностьПредставителяКонтрагента = ПредставительКонтрагента.ПредставительКонтрагентаДолжность;
			ИмяПредставителяКонтрагента = ПредставительКонтрагента.ПредставительКонтрагентаПредставление;
		КонецЕсли;
		
		ДатаНачалаПериода = ?(НЕ ЗначениеЗаполнено(Документ.ДатаНачала) И Документ.ПоДаннымОрганизации.Количество() > 0,
			Документ.ПоДаннымОрганизации[0].Дата, Документ.ДатаНачала);
		
		ТекстЗаголовка = НСтр("ru = 'взаимных расчетов за период с'") + Символы.НПП + Формат(ДатаНачалаПериода, "ДЛФ=D")
			+ " по " + Формат(Документ.ДатаОкончания, "ДЛФ=D") + " между " + НазваниеОрганизации
			+ " и " + НаименованиеКонтрагента;
		
		Если ЗначениеЗаполнено(Документ.ДоговорВзаиморасчетов) Тогда
			ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + Символы.НПП + НСтр("ru ='по договору'")
				+ Символы.НПП + СокрЛП(Документ.ДоговорВзаиморасчетов.Наименование);
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
			+ ?(ДолжностьПредставителяОрганизации <> "", ДолжностьПредставителяОрганизации,"_______________________") + " "
			+ НазваниеОрганизации
			+ " " + ?(ИмяПредставителяОрганизации <> "", ИмяПредставителяОрганизации, "__________________________________________")
			+ НСтр("ru = ', с одной стороны,'") + Символы.НПП
			+ "и " + ?(ДолжностьПредставителяКонтрагента <> "", ДолжностьПредставителяКонтрагента, "___________________________")
			+ " " + НаименованиеКонтрагента + " "
			+ ?(НЕ ЗначениеЗаполнено(ИмяПредставителяКонтрагента), "_____________________________________________",
				ИмяПредставителяКонтрагента)
			+ НСтр("ru = ', с другой стороны,'") + Символы.НПП
			+ НСтр("ru = 'составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:'");
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// теперь выводим шапку
		НаименованиеПолноеОрганизации = СокрЛП(
			РеквизитыСИсторией.ПолучитьНаименованияНаДату(Документ.Организация, ДатаДокумента,
			"НаименованиеДляПечатныхФорм"));
		НаименованиеПолноеКонтрагента = СокрЛП(РеквизитыСИсторией.ПолучитьНаименованияНаДату(Документ.Контрагент,
			ДатаДокумента, "НаименованиеДляПечатныхФорм"));
		
		ОбластьШапкаТаблицы.Параметры.НазваниеОрганизации = НаименованиеПолноеОрганизации;
		ОбластьШапкаТаблицы.Параметры.НаименованиеКонтрагента = НаименованиеПолноеКонтрагента;
		ОбластьШапкаТаблицы.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ?(Документ.ОстатокНаНачало > 0, Документ.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = ?(Документ.ОстатокНаНачало < 0, -Документ.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхОрганизации.Дата КАК Дата,
		|	ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ТаблицаДанныхОрганизации.Документ КАК Документ,
		|	ТаблицаДанныхОрганизации.Представление КАК ДокументПредставление,
		|	ТаблицаДанныхОрганизации.Сделка КАК Сделка,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|	КОНЕЦ КАК Валюта,
		|	ТаблицаДанныхОрганизации.УвеличениеДолга КАК СуммаОборотДт,
		|	ТаблицаДанныхОрганизации.УменьшениеДолга КАК СуммаОборотКт,
		|	ТаблицаДанныхОрганизации.НомерСтроки КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаКонтр,
		|	"""" КАК ДоговорВзаиморасчетовКонтр,
		|	"""" КАК ДокументКонтр,
		|	"""" КАК ДокументПредставлениеКонтр,
		|	"""" КАК СделкаКонтр,
		|	"""" КАК ВалютаКонтр,
		|	0 КАК СуммаОборотДтКонтр,
		|	0 КАК СуммаОборотКтКонтр,
		|	ИСТИНА КАК Выводить
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТаблицаДанныхОрганизации
		|ГДЕ
		|	ТаблицаДанныхОрганизации.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	0,
		|	0,
		|	ТаблицаДанныхКонтрагента.НомерСтроки,
		|	ТаблицаДанныхКонтрагента.Дата,
		|	ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов,
		|	ТаблицаДанныхКонтрагента.Документ,
		|	ТаблицаДанныхКонтрагента.Представление,
		|	ТаблицаДанныхКонтрагента.Сделка,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|	КОНЕЦ,
		|	ТаблицаДанныхКонтрагента.УвеличениеДолга,
		|	ТаблицаДанныхКонтрагента.УменьшениеДолга,
		|	ИСТИНА
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТаблицаДанныхКонтрагента
		|ГДЕ
		|	ТаблицаДанныхКонтрагента.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(ДоговорВзаиморасчетов),
		|	МАКСИМУМ(Документ),
		|	МАКСИМУМ(ДокументПредставление),
		|	МАКСИМУМ(Сделка),
		|	МАКСИМУМ(Валюта),
		|	СУММА(СуммаОборотДт),
		|	СУММА(СуммаОборотКт),
		|	МАКСИМУМ(ДатаКонтр),
		|	МАКСИМУМ(ДоговорВзаиморасчетовКонтр),
		|	МАКСИМУМ(ДокументКонтр),
		|	МАКСИМУМ(ДокументПредставлениеКонтр),
		|	МАКСИМУМ(СделкаКонтр),
		|	МАКСИМУМ(ВалютаКонтр),
		|	СУММА(СуммаОборотДтКонтр),
		|	СУММА(СуммаОборотКтКонтр)
		|ПО
		|	НомерСтроки";
		
		// доп. области
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьОборотыИтог);
		мсвДопОбластиПодвала.Добавить(ОбластьКонОстатки);
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		СтруктураИтоговПоСтранице = Новый Структура("СуммаОборотДт, СуммаОборотКт, СуммаОборотДтКонтр, СуммаОборотКтКонтр");
		СтруктураИтоговПоСтранице.СуммаОборотДт      = 0;
		СтруктураИтоговПоСтранице.СуммаОборотКт      = 0;
		СтруктураИтоговПоСтранице.СуммаОборотДтКонтр = 0;
		СтруктураИтоговПоСтранице.СуммаОборотКтКонтр = 0;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ДеревоЗапроса = Результат.Выгрузить();
		ТаблицаСДанными = Новый ТаблицаЗначений;
		Для Каждого Колонка Из ДеревоЗапроса.Колонки Цикл
			ТаблицаСДанными.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
		// заполним её результатом запроса
		Пока Выборка.Следующий() Цикл
			НовСтр = ТаблицаСДанными.Добавить();
			НовСтр.Дата = Выборка.Дата;
			НовСтр.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НовСтр.Документ = Выборка.Документ;
			НовСтр.ДокументПредставление = Выборка.ДокументПредставление;
			НовСтр.Сделка = Выборка.Сделка;
			НовСтр.Валюта = Выборка.Валюта;
			НовСтр.СуммаОборотДт = Выборка.СуммаОборотДт;
			НовСтр.СуммаОборотКт = Выборка.СуммаОборотКт;
			НовСтр.НомерСтроки = Выборка.НомерСтроки;
			НовСтр.ДатаКонтр = Выборка.ДатаКонтр;
			НовСтр.ДоговорВзаиморасчетовКонтр = Выборка.ДоговорВзаиморасчетовКонтр;
			НовСтр.ДокументКонтр = Выборка.ДокументКонтр;
			НовСтр.ДокументПредставлениеКонтр = Выборка.ДокументПредставлениеКонтр;
			НовСтр.СделкаКонтр = Выборка.СделкаКонтр;
			НовСтр.ВалютаКонтр = Выборка.ВалютаКонтр;
			НовСтр.СуммаОборотДтКонтр = Выборка.СуммаОборотДтКонтр;
			НовСтр.СуммаОборотКтКонтр = Выборка.СуммаОборотКтКонтр;
			НовСтр.Выводить = Истина;
		КонецЦикла;
		
		Если Не РазбиватьПоСделкам Тогда
			
			// Отметим строки, которые надо пропустить при печати; поправим суммы итогового документа
			НомерСтроки = 0;
			ВсегоСтрок = ТаблицаСДанными.Количество();
			
			Для Каждого СтрокаТаблицы Из ТаблицаСДанными Цикл
				
				НомерСтроки = НомерСтроки + 1;
				Если НомерСтроки < ВсегоСтрок Тогда
					Если СтрокаТаблицы.Документ = ТаблицаСДанными[НомерСтроки].Документ Тогда // сравним с документом следующей строки
						
						ТаблицаСДанными[НомерСтроки].СуммаОборотДт = ТаблицаСДанными[НомерСтроки].СуммаОборотДт + СтрокаТаблицы.СуммаОборотДт;
						ТаблицаСДанными[НомерСтроки].СуммаОборотКт = ТаблицаСДанными[НомерСтроки].СуммаОборотКт + СтрокаТаблицы.СуммаОборотКт;
						ТаблицаСДанными[НомерСтроки].СуммаОборотДтКонтр = ТаблицаСДанными[НомерСтроки].СуммаОборотДтКонтр + СтрокаТаблицы.СуммаОборотДтКонтр;
						ТаблицаСДанными[НомерСтроки].СуммаОборотКтКонтр = ТаблицаСДанными[НомерСтроки].СуммаОборотКтКонтр + СтрокаТаблицы.СуммаОборотКтКонтр;
						
						СтрокаТаблицы.Выводить = Ложь;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		КоличествоСтрок = Выборка.Количество();
		НомерСтроки = 1;
		
		Для Каждого Выборка Из ТаблицаСДанными Цикл
			
			Если Выборка.Выводить Тогда
				
				ОбластьСтрока.Параметры.Заполнить(Выборка);
				
				Если РазбиватьПоСделкам Тогда
					
					Если ОтобразитьСделку И ЗначениеЗаполнено(ОбластьСтрока.Параметры.Сделка) Тогда
						Если ТипЗнч(Выборка.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
							СделкаДата = Выборка.Сделка.ДатаЗакрытия;
						Иначе
							СделкаДата = Выборка.Сделка.Дата;
						КонецЕСли; 
						
						ОбластьСтрока.Параметры.Сделка = "№" + Выборка.Сделка.Номер + Символы.ПС
							+ "от " + Формат(СделкаДата, "ДЛФ=D");
					КонецЕсли;
					
					Если ОтобразитьСделкуКонтрагента И ЗначениеЗаполнено(ОбластьСтрока.Параметры.СделкаКонтр) Тогда
						Если ТипЗнч(Выборка.СделкаКонтр) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
							СделкаКонтрДата = Выборка.СделкаКонтр.ДатаЗакрытия;
						Иначе
							СделкаКонтрДата = Выборка.СделкаКонтр.Дата;
						КонецЕсли; 
						
						ОбластьСтрока.Параметры.СделкаКонтр= "№"
							+ Выборка.СделкаКонтр.Номер
							+ Символы.ПС + "от "
							+ Формат(СделкаКонтрДата, "ДЛФ=D");
					КонецЕсли;
					
				КонецЕсли;
				
				ОбластьСтрока.Параметры.СуммаОборотДт = Формат(Выборка.СуммаОборотДТ,ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СуммаОборотДтКонтр = Формат(Выборка.СуммаОборотДТКонтр,ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СуммаОборотКТ = Формат(Выборка.СуммаОборотКТ,ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СуммаОборотКтКонтр = Формат(Выборка.СуммаОборотКТКонтр,ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=D");
				ОбластьСтрока.Параметры.ДатаКонтр = Формат(Выборка.ДатаКонтр, "ДЛФ=D");
				
				ЗаполнитьПредставленияДокументовАктаСверки(ОбластьСтрока, Выборка, ПечататьНомераУПД);
				
				// выводим строку, делая проверку попадания на лист
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,
					ОбластьСтрока,
					ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице,
					НомерСтраницы, СтруктураИтоговПоСтранице,
					Документ,
					?(НомерСтроки = КоличествоСтрок, мсвДопОбластиПодвала, Неопределено)
				);
				
				// увеличим итоги по странице
				СтруктураСтрокиИтогов = Новый Структура("СуммаОборотДт, СуммаОборотКт, СуммаОборотДтКонтр, СуммаОборотКтКонтр");
				СтруктураСтрокиИтогов.СуммаОборотДт      = Выборка.СуммаОборотДт;
				СтруктураСтрокиИтогов.СуммаОборотКт      = Выборка.СуммаОборотКт;
				СтруктураСтрокиИтогов.СуммаОборотДтКонтр = Выборка.СуммаОборотДтКонтр;
				СтруктураСтрокиИтогов.СуммаОборотКтКонтр = Выборка.СуммаОборотКтКонтр;
				
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					НомерСтраницыПред = НомерСтраницы;
					СтруктураИтоговПоСтранице = Новый Структура("СуммаОборотДт, СуммаОборотКт, СуммаОборотДтКонтр, СуммаОборотКтКонтр");
					СтруктураИтоговПоСтранице.СуммаОборотДт      = 0;
					СтруктураИтоговПоСтранице.СуммаОборотКт      = 0;
					СтруктураИтоговПоСтранице.СуммаОборотДтКонтр = 0;
					СтруктураИтоговПоСтранице.СуммаОборотКтКонтр = 0;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				// добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтруктураСтрокиИтогов, СтруктураИтоговПоСтранице);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,
				ОбластьИтогоПоСтранице,
				СтруктураИтоговПоСтранице,
				Документ
			);
			
		КонецЕсли;
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт = Формат(Документ.СуммаДокументаПриход, ФорматВыводаСуммы);
		ОбластьОборотыИтог.Параметры.СуммаОборотКт = Формат(Документ.СуммаДокументаРасход, ФорматВыводаСуммы);
		ОбластьОборотыИтог.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		Если Документ.СверкаСогласована Тогда 
			
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = Формат(Документ.СуммаДокументаПриходК, ФорматВыводаСуммы);
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = Формат(Документ.СуммаДокументаРасходК, ФорматВыводаСуммы);			
			ОбластьОборотыИтог.Параметры.ВалютаДокументаКонтр = Документ.ВалютаДокумента;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		ОстатокНаКонец  = Документ.ОстатокНаНачало + Документ.СуммаДокументаПриход - Документ.СуммаДокументаРасход;
		ОстатокНаКонецК = Документ.СуммаДокументаПриходК - Документ.СуммаДокументаРасходК - Документ.ОстатокНаНачало;		
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = Формат(?(ОстатокНаКонец > 0, ОстатокНаКонец, 0), ФорматВыводаСуммы);
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = Формат(?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0), ФорматВыводаСуммы);
		ОбластьКонОстатки.Параметры.ВалютаДокумента        = Документ.ВалютаДокумента;
		
		Если Документ.СверкаСогласована Тогда
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = Формат(?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0), ФорматВыводаСуммы);
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = Формат(?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0), ФорматВыводаСуммы);
			ОбластьКонОстатки.Параметры.ВалютаДокументаКонтр = Документ.ВалютаДокумента;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
		Если Документ.ПоДаннымОрганизации.Количество() = 0 И Документ.ОстатокНаНачало = 0 Тогда
			РезультатыСверки = НСтр("ru = '<сверка не проведена>'");
		ИначеЕсли НЕ ЗначениеЗаполнено(Документ.ДатаОкончания) Тогда
			РезультатыСверки = НСтр("ru = '<не указана дата сверки>'");
		ИначеЕсли НЕ ЗначениеЗаполнено(Документ.Контрагент) Тогда
			РезультатыСверки = НСтр("ru = '<не указан контрагент>'");
		Иначе
			РезультатыСверки = "на " + Формат(Документ.ДатаОкончания, "ДЛФ=D") + " задолженность ";
			
			Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП
					+ НаименованиеПолноеОрганизации + " "
					+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(ОстатокНаКонец, Документ.ВалютаДокумента);
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП
					+ НаименованиеПолноеКонтрагента + " "
					+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(-ОстатокНаКонец, Документ.ВалютаДокумента);
			Иначе
				РезультатыСверки = РезультатыСверки + НСтр("ru = 'отсутствует.'");
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если Документ.СверкаСогласована Тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = НСтр("ru = 'По данным'") + Символы.НПП + СокрЛП(Документ.Контрагент);
			
			Если Документ.ПоДаннымКонтрагента.Количество() = 0 И Документ.ОстатокНаНачало = 0 Тогда
				РезультатыСверки = НСтр("ru = '<сверка не проведена>'");
			ИначеЕсли НЕ ЗначениеЗаполнено(Документ.ДатаОкончания) Тогда
				РезультатыСверки = НСтр("ru = '<не указана дата сверки>'");
			ИначеЕсли НЕ ЗначениеЗаполнено(Документ.Контрагент) Тогда
				РезультатыСверки = НСтр("ru = '<не указан контрагент>'");
			Иначе
				РезультатыСверки = "на " + Формат(Документ.ДатаОкончания, "ДЛФ=D") + " задолженность ";
				Если ОстатокНаКонецК < 0 Тогда
					РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП + НаименованиеПолноеОрганизации + 
					" " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(-ОстатокНаКонецК, Документ.ВалютаДокумента);
				ИначеЕсли ОстатокНаКонецК > 0 Тогда
					РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП + НаименованиеПолноеКонтрагента + 
					" " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(ОстатокНаКонецК, Документ.ВалютаДокумента);
				Иначе
					РезультатыСверки = РезультатыСверки + НСтр("ru = 'отсутствует.'");
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			Если ОстатокНаКонец + ОстатокНаКонецК <> 0 Тогда
				ИтогСверки = НСтр("ru = 'В результате сверки выявлено расхождение информации о состоянии расчетов в размере'")
					+ Символы.НПП + РаботаСКурсамиВалют.СформироватьСуммуПрописью(?
						(ОстатокНаКонец + ОстатокНаКонецК > 0, 1, -1) * (ОстатокНаКонец+ОстатокНаКонецК),
					Документ.ВалютаДокумента);
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки + Символы.ПС + " ";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.НазваниеОрганизации     = НаименованиеПолноеОрганизации;
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = НаименованиеПолноеКонтрагента;
		ОбластьПодвал.Параметры.Организация             = НаименованиеПолноеОрганизации;
		ОбластьПодвал.Параметры.Контрагент              = НаименованиеПолноеКонтрагента;
		ОбластьПодвал.Параметры.ДолжностьПредставление  = ?(НЕ ЗначениеЗаполнено(ДолжностьПредставителяОрганизации),
			"________________", СокрЛП(ДолжностьПредставителяОрганизации));
		ОбластьПодвал.Параметры.Должность               = ДолжностьПредставителяОрганизации;
		ОбластьПодвал.Параметры.ДолжностьПредставлениеК = ?(НЕ ЗначениеЗаполнено(ДолжностьПредставителяКонтрагента),
			"________________", СокрЛП(ДолжностьПредставителяКонтрагента));
		ОбластьПодвал.Параметры.ДолжностьК              = ДолжностьПредставителяКонтрагента;
		ОбластьПодвал.Параметры.ФИОПредставителя        = "(" + ?(НЕ ЗначениеЗаполнено(ИмяПредставителяОрганизации),
			"_______________________", ИмяПредставителяОрганизации)+")";
		ОбластьПодвал.Параметры.Представитель           = ПредставительОрганизации.ПредставительОрганизации;
		ОбластьПодвал.Параметры.ФИОПредставителяК       = "(" + ?(НЕ ЗначениеЗаполнено(ИмяПредставителяКонтрагента),
			"_______________________", ИмяПредставителяКонтрагента) + ")";
		ОбластьПодвал.Параметры.ПредставительК          = ПредставительКонтрагента.ПредставительКонтрагента;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);

		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "АктСверки"
//
Функция ПечатьАктСверкиПоДоговорам(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверкиПоДоговорам";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
		
		// Установим ориентацию страницы для нормального разбиения на страницы
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// Настроим макет
		МассивПустыхСсылок = Новый Массив;
		МассивПустыхСсылок.Добавить(ПланыВидовХарактеристик.ТипыСделок.ПустаяСсылка());
		МассивПустыхСсылок.Добавить(Неопределено);
		
		Для Каждого Документ1 Из Документы Цикл
			МассивПустыхСсылок.Добавить(Документ1.ПустаяСсылка());
		КонецЦикла;
		
		// форматы вывода
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицыДоговоры");
		ОбластьНачОстатки      = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьСтрока          = Макет.ПолучитьОбласть("СтрокаДоговор");
		ОбластьОборотыИтог     = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки      = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// получаем дату документа
		ДатаДокумента = Документ.Дата;
		
		// Заголовок
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		НазваниеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация,,
			ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		НаименованиеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент,,
			ДополнительныеПараметры);
		
		ПредставительОрганизации = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредставительОрганизации");
		ПредставительКонтрагента = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредставительКонтрагента");
		
		Если НЕ ЗначениеЗаполнено(ПредставительОрганизации.ПредставительОрганизации) Тогда
			ДолжностьПредставителяОрганизации = "";
			ИмяПредставителяОрганизации = "";
		Иначе
			ДолжностьПредставителяОрганизации = ПредставительОрганизации.ПредставительОрганизацииДолжность;
			ИмяПредставителяОрганизации = ПредставительОрганизации.ПредставительОрганизацииПредставление;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПредставительКонтрагента.ПредставительКонтрагента) Тогда
			ДолжностьПредставителяКонтрагента = "";
			ИмяПредставителяКонтрагента = "";
		Иначе
			ДолжностьПредставителяКонтрагента = ПредставительКонтрагента.ПредставительКонтрагентаДолжность;
			ИмяПредставителяКонтрагента = ПредставительКонтрагента.ПредставительКонтрагентаПредставление;
		КонецЕсли;
		
		ДатаНачалаПериода = ?(НЕ ЗначениеЗаполнено(Документ.ДатаНачала) И Документ.ПоДаннымОрганизации.Количество() > 0,
		Документ.ПоДаннымОрганизации[0].Дата,
		Документ.ДатаНачала);
		
		ТекстЗаголовка = НСтр("ru = 'взаимных расчетов за период с'") + Формат(ДатаНачалаПериода, "ДЛФ=D") + " по "
			+ Формат(Документ.ДатаОкончания, "ДЛФ=D") + " между " + НазваниеОрганизации + " и " + НаименованиеКонтрагента;
		Если ЗначениеЗаполнено(Документ.ДоговорВзаиморасчетов) Тогда
			ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + НСтр("ru = 'по договору'") + Символы.НПП
				+ СокрЛП(Документ.ДоговорВзаиморасчетов.Наименование);
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
			+ ?(ДолжностьПредставителяОрганизации <> "", ДолжностьПредставителяОрганизации, "_______________________") + " "
			+ НазваниеОрганизации 
			+ " " + ?(ИмяПредставителяОрганизации <> "", ИмяПредставителяОрганизации, "__________________________________________")
			+ НСтр("ru = ', с одной стороны,'") + Символы.НПП + "и "
			+ ?(ДолжностьПредставителяКонтрагента <> "", ДолжностьПредставителяКонтрагента, "___________________________")
			+ " " + НаименованиеКонтрагента + " "
			+ ?(НЕ ЗначениеЗаполнено(ИмяПредставителяКонтрагента),
			"_____________________________________________",
			ИмяПредставителяКонтрагента)
			+ НСтр("ru = ', с другой стороны,'") + Символы.НПП
			+ НСтр("ru = 'составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:'");
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// теперь выводим шапку
		НаименованиеПолноеОрганизации = СокрЛП(РеквизитыСИсторией.ПолучитьНаименованияНаДату(Документ.Организация,
		ДатаДокумента, "НаименованиеДляПечатныхФорм"));
		НаименованиеПолноеКонтрагента = СокрЛП(РеквизитыСИсторией.ПолучитьНаименованияНаДату(Документ.Контрагент,
		ДатаДокумента, "НаименованиеДляПечатныхФорм"));
		
		ОбластьШапкаТаблицы.Параметры.НазваниеОрганизации = НаименованиеПолноеОрганизации;
		ОбластьШапкаТаблицы.Параметры.НаименованиеКонтрагента = НаименованиеПолноеКонтрагента;
		ОбластьШапкаТаблицы.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ?(Документ.ОстатокНаНачало > 0, Документ.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = ?(Документ.ОстатокНаНачало < 0, -Документ.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ КАК ДоговорВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|	КОНЕЦ КАК Валюта,
		|	СУММА(ТаблицаДанныхОрганизации.УвеличениеДолга) КАК СуммаОборотДт,
		|	СУММА(ТаблицаДанныхОрганизации.УменьшениеДолга) КАК СуммаОборотКт,
		|	"""" КАК ДоговорВзаиморасчетовКонтр,
		|	"""" КАК ВалютаКонтр,
		|	0 КАК СуммаОборотДтКонтр,
		|	0 КАК СуммаОборотКтКонтр,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ КАК Договор
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТаблицаДанныхОрганизации
		|ГДЕ
		|	ТаблицаДанныхОрганизации.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхОрганизации.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхОрганизации.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"""",
		|	"""",
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|	КОНЕЦ,
		|	СУММА(ТаблицаДанныхКонтрагента.УвеличениеДолга),
		|	СУММА(ТаблицаДанныхКонтрагента.УменьшениеДолга),
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТаблицаДанныхКонтрагента
		|ГДЕ
		|	ТаблицаДанныхКонтрагента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
		|			ТОГДА ТаблицаДанныхКонтрагента.ДоговорВзаиморасчетов
		|		ИНАЧЕ ТаблицаДанныхКонтрагента.Ссылка.ДоговорВзаиморасчетов
		|	КОНЕЦ
		|ИТОГИ
		|	МАКСИМУМ(ДоговорВзаиморасчетов),
		|	МАКСИМУМ(Валюта),
		|	СУММА(СуммаОборотДт),
		|	СУММА(СуммаОборотКт),
		|	МАКСИМУМ(ДоговорВзаиморасчетовКонтр),
		|	МАКСИМУМ(ВалютаКонтр),
		|	СУММА(СуммаОборотДтКонтр),
		|	СУММА(СуммаОборотКтКонтр)
		|ПО
		|	Договор";
		
		// доп. области
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьОборотыИтог);
		мсвДопОбластиПодвала.Добавить(ОбластьКонОстатки);
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		СтруктураИтоговПоСтранице = Новый Структура("СуммаОборотДт, СуммаОборотКт, СуммаОборотДтКонтр, СуммаОборотКтКонтр");
		СтруктураИтоговПоСтранице.СуммаОборотДт      = 0;
		СтруктураИтоговПоСтранице.СуммаОборотКт      = 0;
		СтруктураИтоговПоСтранице.СуммаОборотДтКонтр = 0;
		СтруктураИтоговПоСтранице.СуммаОборотКтКонтр = 0;
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		КоличествоСтрок = Выборка.Количество();
		НомерСтроки = 1;
		
		Пока Выборка.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ОбластьСтрока.Параметры.СуммаОборотДт = Формат(Выборка.СуммаОборотДТ,ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаОборотДтКонтр = Формат(Выборка.СуммаОборотДТКонтр,ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаОборотКТ = Формат(Выборка.СуммаОборотКТ,ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаОборотКтКонтр = Формат(Выборка.СуммаОборотКТКонтр,ФорматВыводаСуммы);
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				?(НомерСтроки = КоличествоСтрок, мсвДопОбластиПодвала, Неопределено));
			
			// увеличим итоги по странице
			СтруктураСтрокиИтогов = Новый Структура("СуммаОборотДт, СуммаОборотКт, СуммаОборотДтКонтр, СуммаОборотКтКонтр");
			СтруктураСтрокиИтогов.СуммаОборотДт      = Выборка.СуммаОборотДт;
			СтруктураСтрокиИтогов.СуммаОборотКт      = Выборка.СуммаОборотКт;
			СтруктураСтрокиИтогов.СуммаОборотДтКонтр = Выборка.СуммаОборотДтКонтр;
			СтруктураСтрокиИтогов.СуммаОборотКтКонтр = Выборка.СуммаОборотКтКонтр;
			
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				СтруктураИтоговПоСтранице = Новый Структура("СуммаОборотДт, СуммаОборотКт, СуммаОборотДтКонтр, СуммаОборотКтКонтр");
				СтруктураИтоговПоСтранице.СуммаОборотДт      = 0;
				СтруктураИтоговПоСтранице.СуммаОборотКт      = 0;
				СтруктураИтоговПоСтранице.СуммаОборотДтКонтр = 0;
				СтруктураИтоговПоСтранице.СуммаОборотКтКонтр = 0;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтруктураСтрокиИтогов, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице,
			СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт   = Формат(Документ.СуммаДокументаПриход,ФорматВыводаСуммы);
		ОбластьОборотыИтог.Параметры.СуммаОборотКт   = Формат(Документ.СуммаДокументаРасход,ФорматВыводаСуммы);
		ОбластьОборотыИтог.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		Если Документ.СверкаСогласована Тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр   = Формат(Документ.СуммаДокументаПриходК, ФорматВыводаСуммы);
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр   = Формат(Документ.СуммаДокументаРасходК, ФорматВыводаСуммы);
			ОбластьОборотыИтог.Параметры.ВалютаДокументаКонтр = Документ.ВалютаДокумента;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		ОстатокНаКонец  = Документ.ОстатокНаНачало + Документ.СуммаДокументаПриход - Документ.СуммаДокументаРасход;
		ОстатокНаКонецК = Документ.СуммаДокументаПриходК - Документ.СуммаДокументаРасходК - Документ.ОстатокНаНачало;
		
		СуммаКонечныйОстатокДт = Формат(?(ОстатокНаКонец > 0, ОстатокНаКонец, 0), ФорматВыводаСуммы);
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = СуммаКонечныйОстатокДт;
		
		СуммаКонечныйОстатокКт = Формат(?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0), ФорматВыводаСуммы);
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = СуммаКонечныйОстатокКт;
		
		ОбластьКонОстатки.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		Если Документ.СверкаСогласована Тогда
			
			СуммаКонечныйОстатокДтКонтр = Формат(?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0), ФорматВыводаСуммы);
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = СуммаКонечныйОстатокДтКонтр;
			
			СуммаКонечныйОстатокКтКонтр = Формат(?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0), ФорматВыводаСуммы);
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = СуммаКонечныйОстатокКтКонтр;
			
			ОбластьКонОстатки.Параметры.ВалютаДокументаКонтр = Документ.ВалютаДокумента;
			
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
		Если Документ.ПоДаннымОрганизации.Количество() = 0 И Документ.ОстатокНаНачало = 0 Тогда
			РезультатыСверки = НСтр("ru = '<сверка не проведена>'");
		ИначеЕсли НЕ ЗначениеЗаполнено(Документ.ДатаОкончания) Тогда
			РезультатыСверки = НСтр("ru = '<не указана дата сверки>'");
		ИначеЕсли НЕ ЗначениеЗаполнено(Документ.Контрагент) Тогда
			РезультатыСверки = НСтр("ru = '<не указан контрагент>'");
		Иначе
			РезультатыСверки = НСтр("ru = 'на'") + Символы.НПП + Формат(Документ.ДатаОкончания, "ДЛФ=D")
			+ Символы.НПП + НСтр("ru = 'задолженность'") + Символы.НПП;
			
			Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП + НаименованиеПолноеОрганизации
				+ " " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(ОстатокНаКонец, Документ.ВалютаДокумента);
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП + НаименованиеПолноеКонтрагента + " "
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(-ОстатокНаКонец, Документ.ВалютаДокумента);
			Иначе
				РезультатыСверки = РезультатыСверки + НСтр("ru = 'отсутствует.'");
			КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если Документ.СверкаСогласована Тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = НСтр("ru = 'По данным'") + Символы.НПП + СокрЛП(Документ.Контрагент);
			
			Если Документ.ПоДаннымКонтрагента.Количество() = 0 И Документ.ОстатокНаНачало = 0 Тогда
				РезультатыСверки = НСтр("ru = '<сверка не проведена>'");
			ИначеЕсли НЕ ЗначениеЗаполнено(Документ.ДатаОкончания) Тогда
				РезультатыСверки = НСтр("ru = '<не указана дата сверки>'");
			ИначеЕсли НЕ ЗначениеЗаполнено(Документ.Контрагент) Тогда
				РезультатыСверки = НСтр("ru = '<не указан контрагент>'");
			Иначе
				РезультатыСверки = НСтр("ru = 'на'") + Символы.НПП + Формат(Документ.ДатаОкончания, "ДЛФ=D") + " задолженность ";
				Если ОстатокНаКонецК < 0 Тогда
					РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП + НаименованиеПолноеОрганизации
					+ " " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(-ОстатокНаКонецК, Документ.ВалютаДокумента);
				ИначеЕсли ОстатокНаКонецК > 0 Тогда
					РезультатыСверки = РезультатыСверки + НСтр("ru = 'в пользу'") + Символы.НПП + НаименованиеПолноеКонтрагента
					+ " " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(ОстатокНаКонецК, Документ.ВалютаДокумента);
				Иначе
					РезультатыСверки = РезультатыСверки + НСтр("ru = 'отсутствует.'");
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
				ИтогСверки = НСтр("ru = 'В результате сверки выявлено расхождение информации о состоянии расчетов в размере'") 
				+ Символы.НПП 
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				?(ОстатокНаКонец + ОстатокНаКонецК > 0, 1, -1) * (ОстатокНаКонец + ОстатокНаКонецК), Документ.ВалютаДокумента);
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки + Символы.ПС + " ";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.НазваниеОрганизации     = НаименованиеПолноеОрганизации;
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = НаименованиеПолноеКонтрагента;
		ОбластьПодвал.Параметры.Организация             = НаименованиеПолноеОрганизации;
		ОбластьПодвал.Параметры.Контрагент              = НаименованиеПолноеКонтрагента;
		ОбластьПодвал.Параметры.ДолжностьПредставление  = ?(НЕ ЗначениеЗаполнено(ДолжностьПредставителяОрганизации),
			"________________", СокрЛП(ДолжностьПредставителяОрганизации));
		ОбластьПодвал.Параметры.Должность               = ДолжностьПредставителяОрганизации;
		ОбластьПодвал.Параметры.ДолжностьПредставлениеК = ?(НЕ ЗначениеЗаполнено(ДолжностьПредставителяКонтрагента),
			"________________", СокрЛП(ДолжностьПредставителяКонтрагента));
		ОбластьПодвал.Параметры.ДолжностьК              = ДолжностьПредставителяКонтрагента;
		ОбластьПодвал.Параметры.ФИОПредставителя        = "(" + ?(НЕ ЗначениеЗаполнено(ИмяПредставителяОрганизации),
			"_______________________", ИмяПредставителяОрганизации) + ")";
		ОбластьПодвал.Параметры.Представитель           = ПредставительОрганизации.ПредставительОрганизации;
		ОбластьПодвал.Параметры.ФИОПредставителяК       = "(" + ?(НЕ ЗначениеЗаполнено(ИмяПредставителяКонтрагента),
			"_______________________", ИмяПредставителяКонтрагента) + ")";
		ОбластьПодвал.Параметры.ПредставительК          = ПредставительКонтрагента.ПредставительКонтрагента;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли