// Модуль менеджера документа "Возврат в оборот кодов маркировки".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект		 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  Расширенные	 - Булево				 - Признак получения расширенных сведений об итогах операци.
// 
// Возвращаемое значение:
//  Структура - Данные с итогами показателей
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Полчаем необюходимость ввода первичного документа.
//
// Параметры:
//  ВидВозврата	 - ПеречислениеСсылка.ВидыВозвратов - Вид возврата, который указан в документе.
// 
// Возвращаемое значение:
//  Булево - Признак, по которому можно определелить вывод и проверку дополнительных полей.
//
Функция НеНужноВыводитьДоплнительныеПоля(ВидВозврата) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидВозврата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПричиныВозврата = Новый Массив;
	ПричиныВозврата.Добавить(Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаДляСобственныхНужд);
	ПричиныВозврата.Добавить(Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаДляПроизводственныхЦелей);
	ПричиныВозврата.Добавить(Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаЧерезВендинговыйАппарат);
	
	Возврат ПричиныВозврата.Найти(ВидВозврата) <> Неопределено;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ВидВозврата");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Статус");
	Если Не НеНужноВыводитьДоплнительныеПоля(Объект.ВидВозврата) Тогда
		ОбязательныеРеквизиты.Добавить("ДатаПервичногоДокумента");
		ОбязательныеРеквизиты.Добавить("НомерПервичногоДокумента");
		ОбязательныеРеквизиты.Добавить("ВидПервичногоДокумента");
	КонецЕсли;
	
	Если Объект.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
		ОбязательныеРеквизиты.Добавить("НаименованиеПервичногоДокумента");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.КодМаркировки");
	ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("КодМаркировки");
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратВОборотКодовМаркировкиТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратВОборотКодовМаркировки.Товары КАК ВозвратВОборотКодовМаркировкиТовары
	|ГДЕ
	|	ВозвратВОборотКодовМаркировкиТовары.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВозвратВОборотКодовМаркировки - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

// Получение данных документа для списания кодов маркировки
//
// Параметры:
//  Объект		 - ДокументСсылка.СписаниеКодовМаркировки - Документ, для которого получаем данные
// 
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ДанныеВозвратаВОборотКодовМаркировки(Объект) Экспорт
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратВОборотКодовМаркировки.Организация.ИНН КАК ОрганизацияИНН,
	               |	ВозвратВОборотКодовМаркировки.ВидВозврата КАК ВидВозврата,
	               |	ВозвратВОборотКодовМаркировки.ДатаДокументаСоответствия КАК ДатаДокументаСоответствия,
	               |	ВозвратВОборотКодовМаркировки.НомерДокументаСоответствия КАК НомерДокументаСоответствия,
	               |	ВозвратВОборотКодовМаркировки.ВидДокументаРегистрации КАК ВидДокументаРегистрации,
	               |	ВозвратВОборотКодовМаркировки.ТоварОплачен КАК ТоварОплачен,
	               |	ВозвратВОборотКодовМаркировки.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	               |	ВозвратВОборотКодовМаркировки.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	               |	ВозвратВОборотКодовМаркировки.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	               |	ВозвратВОборотКодовМаркировки.ВидПервичногоДокумента КАК ВидПервичногоДокумента
	               |ИЗ
	               |	Документ.ВозвратВОборотКодовМаркировки КАК ВозвратВОборотКодовМаркировки
	               |ГДЕ
	               |	ВозвратВОборотКодовМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратВОборотКодовМаркировкиТовары.КодМаркировки КАК КодМаркировки,
	               |	ВозвратВОборотКодовМаркировкиТовары.ДатаДокументаСоответствия КАК ДатаДокументаСоответствия,
	               |	ВозвратВОборотКодовМаркировкиТовары.НомерДокументаСоответствия КАК НомерДокументаСоответствия,
	               |	ВозвратВОборотКодовМаркировкиТовары.ВидДокументаРегистрации КАК ВидДокументаРегистрации,
	               |	ВозвратВОборотКодовМаркировкиТовары.ТоварОплачен КАК ТоварОплачен,
	               |	ВозвратВОборотКодовМаркировкиТовары.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	               |	ВозвратВОборотКодовМаркировкиТовары.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	               |	ВозвратВОборотКодовМаркировкиТовары.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	               |	ВозвратВОборотКодовМаркировкиТовары.ВидПервичногоДокумента КАК ВидПервичногоДокумента
	               |ИЗ
	               |	Документ.ВозвратВОборотКодовМаркировки.Товары КАК ВозвратВОборотКодовМаркировкиТовары
	               |ГДЕ
	               |	ВозвратВОборотКодовМаркировкиТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ШапкаДокумента = ПакетЗапроса[0].Выбрать();
	ШапкаДокумента.Следующий();
	
	СтрокаТоваров = ПакетЗапроса[1].Выбрать();
	
	ВидДокументаРегистрации =
		ОбменССистемойМаркировкиСервер.ВидДокументаСоответствия(ШапкаДокумента.ВидДокументаРегистрации);
	
	Если ЗначениеЗаполнено(ШапкаДокумента.ТоварОплачен) Тогда
		ТоварОплачен = (ШапкаДокумента.ТоварОплачен = "Да");
		ТекстСообщения.Вставить("paid", ?(ТоварОплачен, "true", "false"));
	КонецЕсли;
	
	НаименованиеПервичногоДокумента = "";
	Если ШапкаДокумента.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
		НаименованиеПервичногоДокумента = СокрЛП(ШапкаДокумента.НаименованиеПервичногоДокумента);
	КонецЕсли;
	
	ВидПервичногоДокумента = ОбменССистемойМаркировкиСервер.ВидПервичногоДокумента(ШапкаДокумента.ВидПервичногоДокумента);
	ТекстСообщения.Вставить("primary_document_type", ВидПервичногоДокумента);
	ТекстСообщения.Вставить("primary_document_custom_name", НаименованиеПервичногоДокумента);
	ТекстСообщения.Вставить("primary_document_number", СокрЛП(ШапкаДокумента.НомерПервичногоДокумента));
	ТекстСообщения.Вставить("primary_document_date", Формат(ШапкаДокумента.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy"));
	
	ТекстСообщения.Вставить("certificate_type", ВидДокументаРегистрации);
	ТекстСообщения.Вставить("certificate_number", СокрЛП(ШапкаДокумента.НомерДокументаСоответствия));
	ТекстСообщения.Вставить("certificate_date", Формат(ШапкаДокумента.ДатаДокументаСоответствия, "ДФ=dd.MM.yyyy"));
	
	ТекстСообщения.Вставить("products_list", Новый Массив);
	
	// Заполним табличную часть
	Пока СтрокаТоваров.Следующий() Цикл
		
		ТекстОшибки = "";
		КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
			СтрокаТоваров.КодМаркировки,
			ТекстОшибки,
			Ложь);
		
		// Проверим, что это КМ
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаКМ = Новый Структура;
		СтрокаКМ.Вставить("ki", КодМаркировки);
		
		ВидДокументаРегистрацииСтроки =
			ОбменССистемойМаркировкиСервер.ВидДокументаСоответствия(СтрокаТоваров.ВидДокументаРегистрации);
		
		Если НЕ ЗначениеЗаполнено(ВидДокументаРегистрацииСтроки) Тогда
			ВидДокументаРегистрацииСтроки = ВидДокументаРегистрации;
		КонецЕсли;
		
		ДатаДокументаСоответствияСтроки = СтрокаТоваров.ДатаДокументаСоответствия;
		Если НЕ ЗначениеЗаполнено(ДатаДокументаСоответствияСтроки) Тогда
			ДатаДокументаСоответствияСтроки = ШапкаДокумента.ДатаДокументаСоответствия;
		КонецЕсли;
		
		НомерДокументаСоответствияСтроки = СтрокаТоваров.НомерДокументаСоответствия;
		Если НЕ ЗначениеЗаполнено(НомерДокументаСоответствияСтроки) Тогда
			НомерДокументаСоответствияСтроки = ШапкаДокумента.НомерДокументаСоответствия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ТоварОплачен) Тогда
			ТоварОплачен = (СтрокаТоваров.ТоварОплачен = "Да");
			СтрокаКМ.Вставить("paid", ?(ТоварОплачен, "true", "false"));
		ИначеЕсли ТекстСообщения.Свойство("paid") Тогда
			СтрокаКМ.Вставить("paid", ТекстСообщения.paid);
		КонецЕсли;
		
		НаименованиеПервичногоДокументаСтроки = СокрЛП(СтрокаТоваров.НаименованиеПервичногоДокумента);
		Если НЕ ЗначениеЗаполнено(НаименованиеПервичногоДокументаСтроки) Тогда
			НаименованиеПервичногоДокументаСтроки = НаименованиеПервичногоДокумента;
		КонецЕсли;
		
		ВидПервичногоДокументаСтроки =
			ОбменССистемойМаркировкиСервер.ВидПервичногоДокумента(СтрокаТоваров.ВидПервичногоДокумента);
		
		Если НЕ ЗначениеЗаполнено(ВидПервичногоДокументаСтроки) Тогда
			ВидПервичногоДокументаСтроки = ВидПервичногоДокумента;
		КонецЕсли;
		
		ДатаПервичногоДокументаСтроки = СтрокаТоваров.ДатаПервичногоДокумента;
		Если НЕ ЗначениеЗаполнено(ДатаПервичногоДокументаСтроки) Тогда
			ДатаПервичногоДокументаСтроки = ШапкаДокумента.ДатаПервичногоДокумента;
		КонецЕсли;
		
		НомерПервичногоДокументаСтроки = СтрокаТоваров.НомерПервичногоДокумента;
		Если НЕ ЗначениеЗаполнено(НомерПервичногоДокументаСтроки) Тогда
			НомерПервичногоДокументаСтроки = ШапкаДокумента.НомерПервичногоДокумента;
		КонецЕсли;
		
		СтрокаКМ.Вставить("primary_document_type", ВидПервичногоДокументаСтроки);
		СтрокаКМ.Вставить("primary_document_custom_name", НаименованиеПервичногоДокументаСтроки);
		СтрокаКМ.Вставить("primary_document_number", СокрЛП(НомерПервичногоДокументаСтроки));
		СтрокаКМ.Вставить("primary_document_date", Формат(ДатаПервичногоДокументаСтроки, "ДФ=dd.MM.yyyy"));
		
		СтрокаКМ.Вставить("certificate_type", ВидДокументаРегистрацииСтроки);
		СтрокаКМ.Вставить("certificate_number", СокрЛП(НомерДокументаСоответствияСтроки));
		СтрокаКМ.Вставить("certificate_date", Формат(ДатаДокументаСоответствияСтроки, "ДФ=dd.MM.yyyy"));
		
		ТекстСообщения.products_list.Добавить(СтрокаКМ);
		
	КонецЦикла;
	
	ВидВозвратаВОборот = ОбменССистемойМаркировкиСервер.ВидВозвратаВОборот(ШапкаДокумента.ВидВозврата);
	
	ТекстСообщения.Вставить("return_type", ВидВозвратаВОборот);
	ТекстСообщения.Вставить("trade_participant_inn", СокрЛП(ШапкаДокумента.ОрганизацияИНН));
	
	Возврат ТекстСообщения;
	
КонецФункции

// Получение данных документа для списания кодов маркировки
//
// Параметры:
//  Объект		 - ДокументСсылка.СписаниеКодовМаркировки - Документ, для которого получаем данные
//  ПараметрыОбмена - Структура - Параметры, с которыми выполняется команда.
//  Сообщение - Строка - причина отказа. 
//
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ЗапросДокумента(Объект, ПараметрыОбмена, Сообщение) Экспорт
	
	СтруктураСообщения = ДанныеВозвратаВОборотКодовМаркировки(Объект);
	
	Возврат СтруктураСообщения;
	
КонецФункции

// Обновление статусов кодов маркировок
//
// Параметры:
//  Ссылка - ДокументСсылка.ВозвратВОборотКодовМаркировки - документ для заполнения кодов маркировки;
//  Отказ - Булево - признак отказа;
//  СтатусДокумента - ПеречислениеСсылка.СтатусыДокументовМаркировки - статус документа
//
Процедура ЗаполнитьСтатусыКодовМаркировки(Ссылка, Отказ, СтатусДокумента = Неопределено) Экспорт

	Если СтатусДокумента = Неопределено Тогда
		
		ДанныеСтатусаДокумента = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
		СтатусДокумента = ДанныеСтатусаДокумента.Статус;
		
	КонецЕсли;
	
	Если НЕ Отказ И СтатусДокумента = Перечисления.СтатусыДокументовМаркировки.Выполнен Тогда
		ЭтотОбъект = Ссылка.ПолучитьОбъект();
		
		ТаблицаМаркировки = Ссылка.Товары.Выгрузить();
		// Получим актуальные статусы
		ТаблицаМаркировки.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаМаркировки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
		// Разберем маркировку на состовляющие для поиска
		Для Каждого ТекущийКодМаркировки Из ТаблицаМаркировки Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(
				ТекущийКодМаркировки.КодМаркировки
			);
			
			// Это не маркировка товара
			Если СтруктураМаркировки.ТипИдентификатораТовара
				<> ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийКодМаркировки.GTIN = СтруктураМаркировки.GTIN;
			ТекущийКодМаркировки.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
			
		КонецЦикла;
		
		ТекущиеСтатусыМаркировки =
			РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(ТаблицаМаркировки, Ссылка.МоментВремени());
		
		ВыведенныеТовары = Новый Массив;
		СостоянияВОбороте = Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
		
		Для Каждого ТекущаяСтрока Из ТекущиеСтатусыМаркировки Цикл
			Если СостоянияВОбороте.Найти(ТекущаяСтрока.Состояние) <> Неопределено Тогда
				ВыведенныеТовары.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из ВыведенныеТовары Цикл
			ТекущиеСтатусыМаркировки.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
		// Изменим состояние маркировки, которые ранее не были выведены
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Организация = Ссылка.Организация;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТекущиеСтатусыМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборотПриВозврате;
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		Отказ = НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() ИЛИ Отказ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВозвратВОборотКодовМаркировки);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли