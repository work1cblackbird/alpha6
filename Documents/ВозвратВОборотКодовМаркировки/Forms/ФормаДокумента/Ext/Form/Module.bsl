///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Списание кодов маркировки".
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыНоменклатураАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыНоменклатураКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыНоменклатураАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		
		// Маркировка
		МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
		МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
		// Конец Маркировка
		
		ЗаполнитьСтатусИИдентификаторДокумента();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	МаркировкаТоваровСервер.УстановитьРедактированиеКодовМаркировки(
		ЭтотОбъект,
		Объект.Ссылка,
		Элементы.ТоварыКодМаркировки.Имя
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	УправлениеДиалогомАльфаАвтоКлиент.ПриОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Объект")
		И ВыбранноеЗначение.Свойство("КодМаркировки") И НЕ ПустаяСтрока(ВыбранноеЗначение.КодМаркировки) Тогда
		
		Если ТипЗнч(ВыбранноеЗначение.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если ТолькоПросмотр ИЛИ Элементы.Товары.ТолькоПросмотр Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("КодМаркировки", ВыбранноеЗначение.КодМаркировки);
			
			Если Объект.Товары.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данный код маркировки ранее был добавлен'"));
				Возврат;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыбранноеЗначение.Объект;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВводДоступен() И ИмяСобытия = "ScanData" Тогда
		Штрихкод = ШтрихкодированиеКлиент.ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр);
		ПараметрыДействия = Новый Структура;
		ШтрихкодированиеКлиент.ОбработатьПолныйШтрихкод(Штрихкод, ПараметрыДействия);
		
		// ШК не считан.
		Если ПараметрыДействия.ШтрихКод = "" Тогда
			Возврат;
		КонецЕсли;
		// Проверим, что считана именно маркировка.
		ТекстСообщения = "";
		Если НЕ ЭтоКодМаркировки(ПараметрыДействия.ШтрихКод, ТекстСообщения) Тогда
			// Это не маркировка.
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;
		// Проверим наличие данной маркировки в списке.
		ПараметрыОтбора = Новый Структура("КодМаркировки", ПараметрыДействия.ШтрихКод);
		Если Объект.Товары.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Код маркировки уже присутствует.'"));
			Возврат;
		КонецЕсли;
		// Добавим новый код маркировки.
		ДобавитьКодМаркировки(ПараметрыДействия.Штрихкод, Истина);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	// Конец Маркировка

	УправлениеДиалогомАльфаАвтоСервер.ПриЧтенииНаСервере(ЭтотОбъект);
	ЗаполнитьСтатусИИдентификаторДокумента();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ВозвратВОборотКодовМаркировки", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Статус", Статус);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
    РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ВозвратВОборотКодовМаркировки.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ВозвратВОборотКодовМаркировки.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтатусПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ВозвратВОборотКодовМаркировки.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРасширеннаяПодсказкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Ошибка при отправке запроса'"));
	ПараметрыФормы.Вставить("Сообщение", ОписаниеОшибки);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСообщенияПользователю",
		ПараметрыФормы,
		ЭтотОбъект,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервере
Процедура ТоварнаяГруппаПриИзмененииНаСервере()
	
	НастроитьПараметрыВыбораЭлементовФормы();
	МаркировкаТоваровСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяГруппаПриИзменении(Элемент)
	
	ТоварнаяГруппаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидВозвратаПриИзмененииНаСервере()
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВозвратаПриИзменении(Элемент)
	
	ВидВозвратаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования,
		, ,
		""
	);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено
		И ТекущиеДанные.МаркируемыйТовар
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.КодМаркировки) Тогда
		
		ОбработкаОповещения = Новый ОписаниеОповещения(
			"Подключаемый_СканированиеМаркировкиЗавершение",
			ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		
		ОткрытаяФорма = ОткрытьФорму(
			"ОбщаяФорма.ФормаСканированияМаркировки",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОбработкаОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И НЕ ТекущиеДанные.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка Тогда
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущиеДанные.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В таблицу нельзя вводить номенклатуру по которой не ведется учет по маркировке'"),
				,
				ПутьКТабличнойЧасти,
				"Объект"
		);
		
		ТекущиеДанные.Номенклатура = Неопределено;
		
	КонецЕсли;
	
	Документы.ВозвратВОборотКодовМаркировки.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы
	.ВозвратВОборотКодовМаркировки
	.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодМаркировкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ТекущиеДанные.КодМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ИмяДействия = "ОтправкаЗапросаВозвратаВОборотКодовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("Документ", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект, ИмяДействия));
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьДокумент(
		ЭтотОбъект,
		Объект,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	ТекущийСтатус = Статус;
	ЗаполнитьСтатусИИдентификаторДокумента();
	Если Статус = ТекущийСтатус Тогда
		МаркировкаТоваровКлиент.ОбновитьСтатусДокумента(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(РезультатОбмена, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСтатусИИдентификаторДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Конец Ядро
#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(МаркировкаТоваровСервер.РазрешенныеСтатусыДокументовМаркировки(Объект.Ссылка));
	
	СписокВыбора = Элементы.ТоварнаяГруппа.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(МаркировкаТоваровСервер.СписокТоварныхГрупп(Объект.Ссылка));
	
	ТоварнаяГруппаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТоварнаяГруппа, "ТоварнаяГруппа");
	
	ВидыВозвратов = Новый Массив;
	Если Не МаркировкаТоваровКлиентСервер.ЭтоТоварнаяГруппаМолочнаяПродукция(ТоварнаяГруппаДокумента) Тогда
		ВидыВозвратов.Добавить(Перечисления.ВидыВозвратов.ВозвратПриРозничнойРеализации);
	КонецЕсли;
	ВидыВозвратов.Добавить(Перечисления.ВидыВозвратов.ВозвратПриДистанционномСпособе);
	
	Если Объект.ВидВозврата = Перечисления.ВидыВозвратов.ЧекВозврата Тогда
		ВидыВозвратов.Добавить(Перечисления.ВидыВозвратов.ЧекВозврата);
	КонецЕсли;
	
	Если Не МаркировкаТоваровКлиентСервер.ЭтоТоварнаяГруппаМолочнаяПродукция(ТоварнаяГруппаДокумента) Тогда
		ВидыВозвратов.Добавить(Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаДляСобственныхНужд);
		Если ИспользуетсяДляПроизводственныхЦелей(ТоварнаяГруппаДокумента) Тогда
			ВидыВозвратов.Добавить(Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаДляПроизводственныхЦелей);
		КонецЕсли;
		ВидыВозвратов.Добавить(Перечисления.ВидыВозвратов.ВозвратПокупателяНеСвязанныхСПоследующейРеализацией);
	КонецЕсли;
	
	Если ИспользуетсяДляПродажиЧерезВендинговыйАппарат(ТоварнаяГруппаДокумента) Тогда
		ВидыВозвратов.Добавить(Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаЧерезВендинговыйАппарат);
	КонецЕсли;
	
	Элементы.ВидВозврата.СписокВыбора.ЗагрузитьЗначения(ВидыВозвратов);
	
	МаркировкаТоваровСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ВидыПервичногоДокумента = Новый Массив;
	
	Если Объект.ВидВозврата <> Перечисления.ВидыВозвратов.ВозвратПокупателяНеСвязанныхСПоследующейРеализацией Тогда
		ВидыПервичногоДокумента.Добавить(Перечисления.ВидыПервичныхДокументов.КассовыйЧек);
		ВидыПервичногоДокумента.Добавить(Перечисления.ВидыПервичныхДокументов.ТоварныйЧек);
	КонецЕсли;
	
	ВидыПервичногоДокумента.Добавить(Перечисления.ВидыПервичныхДокументов.Прочее);
	
	Элементы.ВидПервичногоДокумента.СписокВыбора.ЗагрузитьЗначения(ВидыПервичногоДокумента);
	Элементы.ТоварыВидПервичногоДокумента.СписокВыбора.ЗагрузитьЗначения(ВидыПервичногоДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.Статус.ОтображениеПодсказки = ?(
		ЗначениеЗаполнено(ОписаниеОшибки),
		ОтображениеПодсказки.ОтображатьСправа,
		ОтображениеПодсказки.Нет
	);
	
	ЧерезAPI =
		ЭтотОбъект.РежимОбменаСЧестнымЗнаком = ПредопределенноеЗначение("Перечисление.СпособыОбменаСЧестнымЗнаком.ЧерезAPI");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИдентификаторДокумента",
		"Видимость",
		ЧерезAPI
	);
	
	Если ЧерезAPI Тогда
		ЭтотОбъект.ТолькоПросмотр = Статус = Перечисления.СтатусыДокументовМаркировки.ОжидаетОбработки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОбновитьСтатус",
		"Видимость",
		ЧерезAPI
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Статус",
		"ТолькоПросмотр",
		ЭтотОбъект.ТолькоПросмотр
	);
	
	НеНужныДополнительныеПоля =
		Документы.ВозвратВОборотКодовМаркировки.НеНужноВыводитьДоплнительныеПоля(Объект.ВидВозврата);
	ЭтоВозвратПокупателяНеСвязанныхСРеализацией =
		Объект.ВидВозврата = Перечисления.ВидыВозвратов.ВозвратПокупателяНеСвязанныхСПоследующейРеализацией;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДокументРегистрации",
		"Видимость",
		Не НеНужныДополнительныеПоля И Не ЭтоВозвратПокупателяНеСвязанныхСРеализацией
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПервичныйДокумент",
		"Видимость",
		Не НеНужныДополнительныеПоля
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварОплачен",
		"Видимость",
		Не НеНужныДополнительныеПоля И Не ЭтоВозвратПокупателяНеСвязанныхСРеализацией
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыТоварОплачен",
		"Видимость",
		Не НеНужныДополнительныеПоля И Не ЭтоВозвратПокупателяНеСвязанныхСРеализацией
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыГруппаПервичныйДокумент",
		"Видимость",
		Не НеНужныДополнительныеПоля
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыГруппаДокументРегистрации",
		"Видимость",
		Не НеНужныДополнительныеПоля И Не ЭтоВозвратПокупателяНеСвязанныхСРеализацией
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеДиалогомДокументаКлиент.ПриИзмененииДополнительногоРеквизита(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

// Обработка сканирования кода маркировки
//
// Параметры:
//  КодМаркировки			 - Строка	 - Считанный код маркировки.
//  ДополнительныеПараметры	 - Структура - Полученные параметры.
//
&НаКлиенте
Процедура Подключаемый_СканированиеМаркировкиЗавершение(КодМаркировки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.КодМаркировки = КодМаркировки;
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСтатусИИдентификаторДокумента()
	
	Запись = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Объект.Ссылка);
	Статус = Запись.Статус;
	ИдентификаторДокумента = Запись.ИдентификаторДокумента;
	ОписаниеОшибки = Запись.ОписаниеОшибки;
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоКодМаркировки(ШтрихКод, ТекстСообщения)
	
	ШтрихКод = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ШтрихКод, ТекстСообщения);
	Возврат ПустаяСтрока(ТекстСообщения);
	
КонецФункции

&НаСервере
Процедура ДобавитьКодМаркировки(КодМаркировки, НоваяСтрока = Ложь)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено ИЛИ НоваяСтрока Тогда
		ТекущиеДанные = Объект.Товары.Добавить();
	Иначе
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
	
	ТекущиеДанные.КодМаркировки = КодМаркировки;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(ТекущиеДанные.КодМаркировки, , Истина);
		
		Если ОбъектыПоШтрихкоду.Количество() > 0 Тогда
			ТекущийОбъект = ОбъектыПоШтрихкоду[0];
			ТекущиеДанные.Номенклатура = ТекущийОбъект.Объект;
			ПараметрыДействия = Новый Структура;
			Документы.ВозвратВОборотКодовМаркировки.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
			УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
			ТекущиеДанные.ХарактеристикаНоменклатуры = ТекущийОбъект.ХарактеристикаНоменклатуры;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ИспользуетсяДляПроизводственныхЦелей(ТоварнаяГруппа)
	
	Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТоварныеГруппы = Новый Массив;
	ТоварныеГруппы.Добавить("water");
	
	Возврат ТоварныеГруппы.Найти(НРег(ТоварнаяГруппа)) <> Неопределено;
	
КонецФункции

&НаСервере
Функция ИспользуетсяДляПродажиЧерезВендинговыйАппарат(ТоварнаяГруппа)
	
	Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТоварныеГруппы = Новый Массив;
	ТоварныеГруппы.Добавить("water");
	ТоварныеГруппы.Добавить("milk");
	
	Возврат ТоварныеГруппы.Найти(НРег(ТоварнаяГруппа)) <> Неопределено;
	
КонецФункции

#КонецОбласти