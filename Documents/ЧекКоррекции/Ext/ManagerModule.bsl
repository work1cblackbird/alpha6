// Модуль менеджера документа "Чек коррекции"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет возможность создания чека коррекции на основании переданного документа.
//
// Параметры:
//  ДанныеЗаполнения - произвольный - данные для заполнения на основании.
//  ВызовИзОбработки - Булево - признак вызова из обработки.
//  Объект - ДокументСсылка.ЧекКоррекции - (необязательное) объект, из которого происходит вызов.
//
// Возвращаемое значение:
//  Строка - возможные ошибки при создании документа.
//
Функция ПроверитьВозможностьСозданияНаОсновании(ДанныеЗаполнения, ВызовИзОбработки = Истина, Объект = Неопределено) Экспорт
	
	ТекстОшибки = "";
	ТипДокументаОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) ИЛИ ТипДокументаОснования = Тип("Структура") Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ДокументПробит = ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ДатаФР"));
	
	// Проверим, а есть ли уже введенные чеки коррекции для даннного документа.
	Если ЕстьЧекКоррекции(ДанныеЗаполнения) ИЛИ ДокументПробит И ЕстьСторнирующийЧекКоррекции(ДанныеЗаполнения, Объект) Тогда
		ТекстОшибки = НСтр("ru = 'Для данного документа уже есть введенный чек коррекции. Повторная операция невозможна.'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если ТипДокументаОснования = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		
		Если ДанныеЗаполнения.ЭтоСторно Тогда
			Возврат НСтр("ru = 'Запрещено вводить документ на основании сторнирующего чека коррекции.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Проведен, ПометкаУдаления");
	
	Если НЕ ДанныеДокументаОснования.Проведен И ПравоПользователя("ВводНаОснованииПроведенныхДокументов", "ЧекКоррекции") Тогда
		Возврат НСтр("ru = 'Ввод на основании непроведенного документа запрещен. Процедура заполнения прервана.'");
	КонецЕсли;
	
	Если ДанныеДокументаОснования.ПометкаУдаления Тогда
		Возврат НСтр("ru = 'Запрещено вводить документы на основании помеченных на удаление объектов. Процедура заполнения прервана.'");
	КонецЕсли;
	
КонецФункции

// Проверка наличия подчиненного сторнирующего документа чек коррекции.
//
// Параметры:
//  Основание - ДокументСсылка - документ, для которого производится обработка.
//  Объект - ДокументСсылка.ЧекКоррекции - (необязательное) объект, из которого происходит вызов.
//
// Возвращаемое значение:
//  Булево - Истина, если есть введенный сторнирующий чек коррекции на основании переданного документа.
//
Функция ЕстьСторнирующийЧекКоррекции(Основание, Объект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекКоррекции.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекКоррекции КАК ЧекКоррекции
	|ГДЕ
	|	ЧекКоррекции.ДокументОснование = &Основание
	|	И НЕ ЧекКоррекции.ПометкаУдаления
	|	И ЧекКоррекции.ЭтоСторно";
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ЧекКоррекции.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Проверка наличия подчиненного документа чек коррекции.
//
// Параметры:
//  Основание - ДокументСсылка - документ, для которого производится обработка.
//  Объект - ДокументСсылка.ЧекКоррекции - (необязательное) объект, из которого происходит вызов.
//
// Возвращаемое значение:
//  Булево - Истина, если есть введенный сторнирующий чек коррекции на основании переданного документа.
//
Функция ЕстьЧекКоррекции(Основание, Объект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекКоррекции.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекКоррекции КАК ЧекКоррекции
	|ГДЕ
	|	ЧекКоррекции.ДокументОснование = &Основание
	|	И НЕ ЧекКоррекции.ПометкаУдаления
	|	И НЕ ЧекКоррекции.ЭтоСторно";
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ЧекКоррекции.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает фискальный признак пробитого документа
//
// Параметры:
//  Ссылка - ДокументСсылка - документ, для которого получаем фискальный признак.
//
// Возвращаемое значение:
//  Строка, Неопределено - фискальный признак документа.
//
Функция ПолучитьФискальныйПризнак(Ссылка) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		// Последняя фискальная операция по документу расчетов
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ДокументОснование = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ФискальныйПризнак;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт

	Документы.ЧекКоррекции.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 СтрокаТаблицыЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЧекКоррекции) Тогда
	
		Результат = КомандыСоздатьНаОсновании.Добавить();
		Результат.Менеджер = "СозданиеНаОснованииАльфаАвтоКлиент";
		Результат.Обработчик = "ОткрытьПомощникСозданияЧековКоррекции";
		Результат.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.ЧекКоррекции);
		Результат.РежимЗаписи = "Проводить";
		
		Возврат Результат;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ИмяРеквизита Из Метаданные.Документы.ЧекНаОплату.ТабличныеЧасти.Товары.Реквизиты Цикл
		
		Если ИмяРеквизита.Имя = "ДоговорВзаиморасчетов" Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить("Товары." + ИмяРеквизита.Имя);
		
	КонецЦикла;
	
	ЭлементыКомандноеПанели = ";ТоварыДобавить,ТоварыСкопировать,ТоварыИзменить,ТоварыУдалить,ТоварыЗакончитьРедактирование,ТоварыПоискПоТекущемуЗначению1,"
								+ "ТоварыНайти1,ТоварыОтменитьПоиск1,ТоварыПереместить,ТоварыСортировка,ТоварыПодборНоменклатуры";
	
	ЭлементыКомандноеПанели = ЭлементыКомандноеПанели + " ТоварыКонтекстноеМенюДобавить, ТоварыКонтекстноеМенюСкопировать,"
								+ " ТоварыКонтекстноеМенюУдалить, ТоварыКонтекстноеМенюПереместить";
		
	Результат.Добавить(ЭлементыКомандноеПанели);
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("Карточка");
	Результат.Добавить("ПараметрыДокумента");
	Результат.Добавить("СпособЗачетаАвансов");
	Результат.Добавить("КассаККМ");
	Результат.Добавить("ФР");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции.
	ИтогиОперации = Новый Структура();
	НеПересчитыватьСуммуДокумента = ТипЗнч(Объект)= Тип("ДокументОбъект.ЧекКоррекции")
		И Объект.ДополнительныеСвойства.Свойство("НеПересчитыватьСуммуДокумента")
		И Объект.ДополнительныеСвойства.НеПересчитыватьСуммуДокумента;
	
	СуммаДокумента = ?(НеПересчитыватьСуммуДокумента, Объект.СуммаДокумента, Объект.Товары.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
		
	// Производим установку полученных значений в итоговые показатели объекта.
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции.
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	Возврат ИтогиОперации;
	
КонецФункции

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки =
		Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки")
		+ Объект.Товары.Итог("СуммаСкидкиБонусами");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Процедура для расчета суммы оплаты.
Процедура ПроизвестиРаспределениеСуммыОплаты(СуммаДокумента, Товары) Экспорт
	
	Если СуммаДокумента = 0 ИЛИ Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаибольшаяСуммаВсего = 0;
	ИндексСтроки = -1;
	
	КоэффициентРаспределения = ?(Товары.Итог("СуммаВсего") = 0, 0, СуммаДокумента / Товары.Итог("СуммаВсего"));
	
	Для Каждого Строка Из Товары Цикл
		Строка.СуммаОплаты = Окр(Строка.СуммаВсего * КоэффициентРаспределения, 2);
		Если Строка.СуммаВсего > НаибольшаяСуммаВсего Тогда
			НаибольшаяСуммаВсего = Строка.СуммаВсего;
			ИндексСтроки = Товары.Индекс(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексСтроки > -1 Тогда
		ОшибкаОкругления = СуммаДокумента - Товары.Итог("СуммаОплаты");
		Товары[ИндексСтроки].СуммаОплаты = Товары[ИндексСтроки].СуммаОплаты + ОшибкаОкругления;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения Фискальных реквизитов. Перенос из дополнительных сведений.
//
Процедура ЗаполнитьФискальныеРеквизиты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Свойство.Наименование КАК СвойствоНаименование
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) В (&ТипыДокументов)
	               |	И ДополнительныеСведения.Свойство.Наименование В(&ФискальныеРеквизиты)";	
	ФискальныеРеквизиты = Новый Массив;
	ФискальныеРеквизиты.Добавить(НСтр("ru='Телефон или электронный адрес покупателя'"));
	ФискальныеРеквизиты.Добавить(НСтр("ru='Дополнительный реквизит чека'"));
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.Чек"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ЧекНаОплату"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.Выписка"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ЧекКоррекции"));
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ФискальныеРеквизиты", ФискальныеРеквизиты);
	ВыборкаДокумента = Запрос.Выполнить().Выбрать();
	
	Свойства = Новый СписокЗначений();
	
	// Перенесем данные в реквизиты документов
	Пока ВыборкаДокумента.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокумента.Объект.ПолучитьОбъект();
		
		Если ВыборкаДокумента.СвойствоНаименование = НСтр("ru='Телефон или электронный адрес покупателя'") Тогда
			ДокументОбъект.ТелефонEmailПокупателя = ВыборкаДокумента.Значение;	
		ИначеЕсли ВыборкаДокумента.СвойствоНаименование = НСтр("ru='Дополнительный реквизит чека'") Тогда
			ДокументОбъект.ДополнительныйРеквизитЧека = ВыборкаДокумента.Значение;	
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Свойства.НайтиПоЗначению(ВыборкаДокумента.Свойство) = Неопределено Тогда
			Свойства.Добавить(ВыборкаДокумента.Свойство,ВыборкаДокумента.Свойство);
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось перезаполнить фискальные реквизиты документа %1'"),
					СокрЛП(Строка(ДокументОбъект.Ссылка))
				)
			);
		КонецПопытки;
		
	КонецЦикла;
	
	// Удалим лишние записи
	Для Каждого Строка Из Свойства Цикл
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Свойство.Установить(Строка.Значение);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения табличной части "Товары" документа "Чек коррекции"
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура, ДокументОбъект - Объект, для которого выполняется заполнение.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Функция ЗаполнитьТовары(Объект, ЗаполнитьПоОснованию = Истина, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Проверим заполнена сделка и какого она типа.
	ДокументЗаполнения = Неопределено;
	Если НЕ ЗаполнитьПоОснованию И ЗначениеЗаполнено(Объект.Сделка)
		И Метаданные.Документы.ЧекКоррекции.ВводитсяНаОсновании.Содержит(Объект.Сделка.Метаданные())
	Тогда
		ДокументЗаполнения = Объект.Сделка;
	Иначе
		ДокументЗаполнения = Объект.ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаполнения)
		ИЛИ НЕ ОбщегоНазначения.ЭтоДокумент(ДокументЗаполнения.Метаданные()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗаполнитьНоменклатурой(Объект, ДокументЗаполнения, ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Заполним ТЧ Коды маркировки
	МаркировкаТоваровСервер.ЗаполнитьКодыМаркировкиТоваров(Объект, ДокументЗаполнения);
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьНоменклатурой(Объект, ДокументЗаполнения, ПараметрыДействия)
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДокументЗаполнения, , "Товары") И Объект.Товары.Количество() = 0 Тогда
		ТоварыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "Товары").Выгрузить();
		Объект.Товары.Загрузить(ТоварыОснования);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа.
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СуммаДокумента");
	ОбязательныеРеквизиты.Добавить("ПризнакСпособаРасчета");
	ОбязательныеРеквизиты.Добавить("ТипРасчета");
	ОбязательныеРеквизиты.Добавить("ТипКоррекции");
	ОбязательныеРеквизиты.Добавить("ДатаКоррекции");
	
	Если Объект.ТипКоррекции = Перечисления.ТипыЧековКоррекции.ПоПредписанию Тогда
		ОбязательныеРеквизиты.Добавить("НомерПредписания");
	КонецЕсли;
	
	Если Константы.ИспользоватьПодключаемоеОборудование.Получить() Тогда
		ОбязательныеРеквизиты.Добавить("КассаККМ");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	// ТЧ товары
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	Если ПравоПользователя("ЗапретитьПодарки", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары.СуммаВсего");
	КонецЕсли;
	
	// ТЧ оплаты
	ОбязательныеРеквизиты.Добавить("Оплаты.ТипОплаты");
	ОбязательныеРеквизиты.Добавить("Оплаты.Сумма");
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	// Возвращаем сформированные параметры проверки.
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров.
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ГТД");
	УникальныеТовары.Добавить("ДоговорВзаиморасчетов");
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТипОснования = ТипЗнч(Объект.ДокументОснование);
		ОснованиеОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ДокументОснование");
		ТипОснованияОснования = ТипЗнч(ОснованиеОснования);
		
		Если (ТипОснования = Тип("ДокументСсылка.ЧекНаОплату") ИЛИ ТипОснования = Тип("ДокументСсылка.СчетНаОплату"))
			И ТипОснованияОснования = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			УникальныеТовары.Добавить("КлючСтроки");
		КонецЕсли;
	КонецЕсли;
	
	// Уникальные поля таблицы оплат.
	УникальныеОплаты = Новый Массив;
	УникальныеОплаты.Добавить("ТипОплаты");
	УникальныеОплаты.Добавить("ТипПлатежнойКарты");
	УникальныеОплаты.Добавить("Карточка");
	УникальныеОплаты.Добавить("ДоговорВзаиморасчетов");
	
	// Структура уникальных реквизитов табличных частей.
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("Оплаты", УникальныеОплаты);
	
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта.
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("КассаККМ", Ложь);
	
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Товары");
	Результат.Добавить("Оплаты");
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("Карточка");
	Результат.Добавить("СпособЗачетаАвансов");
	
	Результат.Добавить("НомерЧека");
	Результат.Добавить("НомерСмены");
	Результат.Добавить("ДатаФР");
	Результат.Добавить("ФР");
	
	Результат.Добавить("ПризнакСпособаРасчета");
	Результат.Добавить("ТипРасчета");
	Результат.Добавить("ТипКоррекции");
	Результат.Добавить("ДатаКореркции");

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта.
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", ЛОЖЬ);
	СуммаДокумента       = Объект.СуммаДокумента;
	
	// Вызываем общий обработчик действия.
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	// Пересчитаем сумму к оплате отдельно от таблицы товаров.
	Если ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 ИЛИ СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		Объект.СуммаДокумента = Окр(СуммаДокумента*СтарыйКурс/НовыйКурс, 2);
		Для каждого СтрокаТаблицыОплат Из Объект.Оплаты Цикл
			СтрокаТаблицыОплат.Сумма = Окр(СтрокаТаблицыОплат.Сумма*СтарыйКурс/НовыйКурс, 2);
		КонецЦикла;
		СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
		
		Для Каждого СтрокаТаблицыТовары Из Объект.Товары Цикл
			СтрокаТаблицыТовары.СебестоимостьАвтомобиля = Окр(СтрокаТаблицыТовары.СебестоимостьАвтомобиля*СтарыйКурс/НовыйКурс, 2);
			СтрокаТаблицыТовары.СуммаСкидкиБонусами     = Окр(СтрокаТаблицыТовары.СуммаСкидкиБонусами*СтарыйКурс/НовыйКурс, 2);
			СтавкаНДС = СтрокаТаблицыТовары.СтавкаНДС.Ставка;
			Если НЕ СтрокаТаблицыТовары.СебестоимостьАвтомобиля = 0 Тогда
				СтрокаТаблицыТовары.СуммаНДС = (СтрокаТаблицыТовары.СуммаВсего - СтрокаТаблицыТовары.СебестоимостьАвтомобиля) * СтавкаНДС / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
		
		ПроизвестиРаспределениеСуммыОплаты(Объект.СуммаДокумента, Объект.Товары);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(Объект.Карточка)
		И ЗначениеЗаполнено(Объект.Карточка.Объект)
		И Объект.Контрагент <> Объект.Карточка.Объект Тогда
		
		Объект.Карточка = Справочники.Карточки.ПустаяСсылка();
		КарточкаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Касса ККМ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаККМПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КассаККМПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Карточка)
		И Объект.Карточка.ВидКарточки <> Перечисления.ВидыКарточек.ДисконтнаяКарта Тогда
		Объект.Карточка = Справочники.Карточки.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Вид оплаты".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СделкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		Если ЕстьРеквизит(Объект.Сделка, "Контрагент") Тогда
			
			Объект.Контрагент = Объект.Сделка.Контрагент;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
			
			Если ЕстьРеквизит(Объект.Сделка, "ДоговорВзаиморасчетов") Тогда
				
				Объект.ДоговорВзаиморасчетов = Объект.Сделка.ДоговорВзаиморасчетов;
				ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			Объект.СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Объект.Сделка.СуммаДокумента,
				Объект.Сделка.ВалютаДокумента,
				Объект.Дата,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.СуммаДокумента <> Объект.Товары.Итог("СуммаВсего") Тогда
		// Вызываем общий обработчик действия.
		ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	Иначе
		Объект.СуммаНДС = Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	// Выполним пересчет суммы сдачи в каждой строке таблицы оплат.
	Для Каждого СтрокаТаблицыОплат Из Объект.Оплаты Цикл
		СтрокаТаблицыОплат.Сдача = 0;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыОплат Из Объект.Оплаты Цикл
		ОплатыСуммаПриИзменении(Объект, СтрокаТаблицыОплат, ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплаты

// Обработчик события возникающего при изменении данных реквизита "ТипОплаты" в таблице "Оплаты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОплатыТипОплатыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
		
	Если Строка.ТипОплаты=Перечисления.ТипыОплатыККТ.Электронно И Не ЗначениеЗаполнено(Строка.ТипПлатежнойКарты) Тогда 
		Строка.ТипПлатежнойКарты = Справочники.ТипыПлатежныхКарт.ОсновнойТипПлатежнойКарты();
	КонецЕсли;

	ОплатыСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	УправлениеДиалогомКлиентСервер.УстановитьПризнакНеобходимостиЭТ(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Оплаты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОплатыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
		Строка.Сдача = (Объект.Оплаты.Итог("Сумма") - (Объект.Оплаты.Итог("Сдача") - Строка.Сдача)) - Объект.СуммаДокумента;
		Строка.Сдача = МИН(Строка.Сумма, Строка.Сдача);
	Иначе
		Строка.Сдача = 0;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов" в таблице "Оплаты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОплатыДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ Строка.ДоговорВзаиморасчетов.Пустая()
		И Не Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия.
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Номенклатура = Справочники.Номенклатура.Автомобиль Тогда
		Строка.Количество = 1;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Расчет скидок по строке.
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли