// Модуль документа "Чек коррекции"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

// Процедура - обработчик ввода на основании
// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения = Неопределено, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// проверим возможность создания 
	ТекстСообщения = Документы.ЧекКоррекции.ПроверитьВозможностьСозданияНаОсновании(ДанныеЗаполнения);
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
	КонецЕсли;
	
	// заполним контрагента по умолчанию
	Контрагент = ПравоПользователя("ОсновнойПокупатель");
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ДатаКоррекции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ДатаФР");
		Если НЕ ЗначениеЗаполнено(ДатаКоррекции) Тогда
			ДатаКоррекции = ДанныеЗаполнения.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипКоррекции) Тогда
		ТипКоррекции = Перечисления.ТипыЧековКоррекции.Самостоятельно;
	КонецЕсли;
	
	// Заполним дополнительный реквизит чека
	ДополнительныйРеквизитЧека = Документы.ЧекКоррекции.ПолучитьФискальныйПризнак(ДокументОснование);
	
	// Заполним доп. поля
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	// заполним адрес для контрагента с формой собственности ЮрЛицо и ИП
	ЗаполнитьАдресПокупателя();
	
	ПечататьАртикулНоменклатуры = Организация.ПечататьАртикулНоменклатурыВЧеках;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаДокумента < 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сумма к оплате не должна быть отрицательной'"),
			,
			"СуммаДокумента",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ПроверкаСоответствияКонтрагентаДоговораПоСделке(
		Сделка, Контрагент, ДоговорВзаиморасчетов, ДополнительныеСвойства) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Контрагент и договор взаиморасчетов документа Сделка не соответствуют указанным в шапке документа'"),
			,
			"Сделка",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ЭтоСторно И Документы.ЧекКоррекции.ЕстьСторнирующийЧекКоррекции(ДокументОснование, Ссылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для документа-основания уже существует введеный отменяющий чек коррекции.'"),,,,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ЭтоСторно И Документы.ЧекКоррекции.ЕстьЧекКоррекции(ДокументОснование, Ссылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для документа-основания уже существует введеный чек коррекции.'"),,,,
			Отказ
		);
	КонецЕсли;
	
	// Проводим инициализацию основных 
	ОплатыВсего = Оплаты.Итог("Сумма");
	ОплатыСдача = Оплаты.Итог("Сдача");
	ОплатыНалом = 0;
	ОплатыБезнал= 0;
	
	// Выполним проверку корректности заполнения реквизит таблицы оплат
	Для Каждого ТекОплата Из Оплаты Цикл
		
		Если ТекОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			ОплатыНалом = ОплатыНалом + ТекОплата.Сумма - ТекОплата.Сдача;
		Иначе
			ОплатыБезнал = ОплатыБезнал + ТекОплата.Сумма - ТекОплата.Сдача; 
		КонецЕсли;
				
	КонецЦикла;
	
	// Проводим контроль сумм оплат
	КонтролироватьЗаполнениеОплат = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства,
		"КонтролироватьЗаполнениеОплат",
		Истина
	);
	
	Если КонтролироватьЗаполнениеОплат И СуммаДокумента < ОплатыВсего Тогда
		// Определим причину превышения оплаты
		Если (ОплатыВсего = ОплатыБезнал) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сумма безналичной оплаты не может превышать сумму документа.'"),
				ЭтотОбъект,
				, ,
				Отказ
			);
		ИначеЕсли (ОплатыБезнал >= СуммаДокумента) И (ОплатыНалом > 0) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сумма безналичной оплаты полностью закрывает сумму чека. Оплата наличными не допустима.'"),
				ЭтотОбъект,
				, ,
				Отказ
			);
		ИначеЕсли (ОплатыВсего - СуммаДокумента) > ОплатыСдача Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Общая сумма оплат не может быть больше суммы к оплате.'"),
				ЭтотОбъект,
				, ,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = УправлениеДиалогомДокументаСервер.ПроверитьКорректностьЗаполненияТелефонEmail(ТелефонEmailПокупателя);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ТелефонEmailПокупателя", , Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//// Вызываем общий обработчик события
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНаличными = 0;
	Для Каждого СтрокаОплат Из Оплаты Цикл
		Если СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			СуммаНаличными = СуммаНаличными + СтрокаОплат.Сумма;
		КонецЕсли;
	КонецЦикла;
	СуммаПрочие = Оплаты.Итог("Сумма") - СуммаНаличными;
	
	ТекстСообщения = "";
	
	Если НЕ ЭтоСторно Тогда
		
		ПризнакСпособаРасчетаПоТабличнойЧасти = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(
			ЭтотОбъект,
			Товары,
			ПризнакСпособаРасчета,
			ТекстСообщения
		);
		Если НЕ ПризнакСпособаРасчета = ПризнакСпособаРасчетаПоТабличнойЧасти Тогда
			ТекстСообщения = НСтр("ru='Неверно заполнен ""Способ расчета"".'") + " " + ТекстСообщения;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ПризнакСпособаРасчета", , Отказ);
		КонецЕсли;
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
				
			Если СуммаДокумента <> Товары.Итог("СуммаВсего") Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Сумма товарных позиций больше суммы оплат'"),
					, , , Отказ
				);
			ИначеЕсли СуммаДокумента < СуммаПрочие Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Неверно заполнена колонка ""Сумма"" в табличной части оплаты, сумма безналичных платежей больше суммы оплаты'"),
					, , ,
					Отказ
				);
			ИначеЕсли СуммаДокумента > Оплаты.Итог("Сумма") Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Неверно заполнена колонка ""Сумма"" в табличной части оплаты'"),
					, , , Отказ
				);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаДокумента > 0 И Товары.Итог("СуммаОплаты") = 0 И Товары.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Необходимо произвести пропорциональное распределение суммы вносимой оплаты между предметами платежа'"),
				, , ,
				Отказ
			);
		ИначеЕсли СуммаДокумента <> Товары.Итог("СуммаОплаты") И Товары.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Неверно заполнена колонка ""Сумма оплаты"" в табличной части товары, необходимо распределить сумму оплаты'"),
				, , ,
				Отказ
			);
		ИначеЕсли СуммаДокумента <> (Оплаты.Итог("Сумма") - Оплаты.Итог("Сдача")) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Неверно заполнена колонка ""Сумма"" в табличной части оплаты'"),
				, , , Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	// Очистим результаты проверки кодов маркировки
	МаркировкаТоваровСервер.ОчиститьДанныеПроверкиКодовМаркировки(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат проверки соответствия Контрагента и Договора в Документе и Сделке.
//
// Параметры:
//  Сделка					 - ДокументСсылка	 - документ, для которого производится проверка;
//  Контрагент				 - СправочникСсылка	 - контрагент из документа;
//  ДоговорВзаиморасчетов	 - СправочникСсылка	 - договор из документа;
//  ДополнительныеСвойства	 - Структура		 - дополнительные свойства объекта.
// 
// Возвращаемое значение:
//  Истина - если соответствует, в противном случае - Ложь.
//
Функция ПроверкаСоответствияКонтрагентаДоговораПоСделке(Сделка,
			Контрагент,
			ДоговорВзаиморасчетов,
			ДополнительныеСвойства)
	
	Результат = Истина;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЕстьРеквизит(Сделка, "Контрагент") Тогда
		
		Результат = НЕ (ЗначениеЗаполнено(Сделка.Контрагент) И Сделка.Контрагент <> Контрагент);
		Если ЕстьРеквизит(Сделка, "ДоговорВзаиморасчетов") Тогда
			Результат = Результат
						И НЕ (ЗначениеЗаполнено(Сделка.ДоговорВзаиморасчетов)
						И Сделка.ДоговорВзаиморасчетов <> ДоговорВзаиморасчетов);
		КонецЕсли;
		// Аренда автомобилей
		Если НЕ Результат И ЕстьРеквизит(Сделка, "ДоговорДепозита") Тогда
			Результат = НЕ (ЗначениеЗаполнено(Сделка.Контрагент) И Сделка.Контрагент <> Контрагент)
				И НЕ (ЗначениеЗаполнено(Сделка.ДоговорДепозита)
				И Сделка.ДоговорДепозита <> ДоговорВзаиморасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверкаСоответствияКонтрагентаДоговораПоСделке()

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Выписка"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Выписка(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Товары.Количество()= 0 Тогда
		Товары.Загрузить(УправлениеДиалогомДокументаСервер.ПодготовитьТаблицуТоваров(ДанныеЗаполнения, Ложь));
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	Для Каждого Строка Из Товары Цикл
		ЗаполнитьЕдиницуИзмеренияДляАвтомобилей(Строка);
	КонецЦикла;
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	
	// Заполним оплату
	НоваяСтрока = Оплаты.Добавить();
	НоваяСтрока.Сумма = СуммаДокумента;
	НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
	
	Если ЭтоСторно Тогда
		ТипРасчета = ОбратнаяОперацияТипаРасчета(ТипРасчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		КассаККМ = ДанныеЗаполнения.КассаККМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФР) Тогда
		ФР = ДанныеЗаполнения.ФР;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = ДокументОснование.ПризнакСпособаРасчета;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

// Производит заполнение объекта на основании документа "Чек на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Товары.Количество()= 0 Тогда
		Товары.Загрузить(УправлениеДиалогомДокументаСервер.ПодготовитьТаблицуТоваров(ДанныеЗаполнения, Ложь));
	КонецЕсли;
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	
	Если ЭтоСторно Тогда
		ТипРасчета = ОбратнаяОперацияТипаРасчета(ТипРасчета);
	КонецЕсли;
	
	// Заполним оплату
	НоваяСтрока = Оплаты.Добавить();
	НоваяСтрока.Сумма = СуммаДокумента;
	НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		КассаККМ = ДанныеЗаполнения.КассаККМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФР) Тогда
		ФР = ДанныеЗаполнения.ФР;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = ДокументОснование.ПризнакСпособаРасчета;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

// Производит заполнение объекта на основании документа "Чек на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Товары.Количество()= 0 Тогда
		Товары.Загрузить(УправлениеДиалогомДокументаСервер.ПодготовитьТаблицуТоваров(ДанныеЗаполнения, Ложь));
	КонецЕсли;
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	
	Если ЭтоСторно Тогда
		ТипРасчета = ОбратнаяОперацияТипаРасчета(ТипРасчета);
	КонецЕсли;
	
	// Заполним оплату
	НоваяСтрока = Оплаты.Добавить();
	НоваяСтрока.Сумма = СуммаДокумента;
	НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		КассаККМ = ДанныеЗаполнения.КассаККМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФР) Тогда
		ФР = ДанныеЗаполнения.ФР;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = ДокументОснование.ПризнакСпособаРасчета;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

// Производит заполнение объекта на основании документа "Чек на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Чек(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Документы.ЧекКоррекции.КонтрагентПриИзменении(ЭтотОбъект);
	
	// Перезаполним ТЧ Товары из документа-основания
	Товары.Загрузить(ДанныеЗаполнения.Товары.Выгрузить());
	ТипРасчета = УправлениеДиалогомДокументаСервер.ТипРасчетаЧека(ДанныеЗаполнения);
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС = Товары.Итог("СуммаНДС");
	
	Если ЭтоСторно Тогда
		ТипРасчета = ОбратнаяОперацияТипаРасчета(ТипРасчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		КассаККМ = ДанныеЗаполнения.КассаККМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФР) Тогда
		ФР = ДанныеЗаполнения.ФР;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

// Производит заполнение объекта на основании документа "Чек на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЧекКоррекции(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИменаИсключаемыхРеквизитов = "ЭтоСторно";
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		ИменаИсключаемыхРеквизитов
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ЭтоСторно Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			,
			НСтр("ru = 'Запрещено вводить Чек коррекции на основании сторнирующего чека коррекции '")
		);
	КонецЕсли;
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	
	Если ЭтоСторно Тогда
		ТипРасчета = ОбратнаяОперацияТипаРасчета(ТипРасчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		КассаККМ = ДанныеЗаполнения.КассаККМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФР) Тогда
		ФР = ДанныеЗаполнения.ФР;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = ДокументОснование.ПризнакСпособаРасчета;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

// Производит заполнение объекта на основании документа "Чек на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЧекНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипРасчета = УправлениеДиалогомДокументаСервер.ТипРасчетаЧека(ДанныеЗаполнения);
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	
	Если ЭтоСторно Тогда 
		ТипРасчета = ОбратнаяОперацияТипаРасчета(ТипРасчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		КассаККМ = ДанныеЗаполнения.КассаККМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФР) Тогда
		ФР = ДанныеЗаполнения.ФР;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = ДокументОснование.ПризнакСпособаРасчета;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

// Производит заполнение объекта пот передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		Если ДанныеЗаполнения.Свойство("ЭтоСторно") Тогда
			ЭтоСторно = ДанныеЗаполнения.ЭтоСторно;
		КонецЕсли;
		ДанныеЗаполнения = ДокументОснование;
	КонецЕсли;
	
	Заполнить(ДанныеЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

#КонецОбласти

Процедура ЗаполнитьАдресПокупателя()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобственности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ФормаСобственности");
	
	Если НЕ (ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
		ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо)
	Тогда
		Возврат;
	КонецЕсли;
	
	СписокАдресов = УправлениеДиалогомДокументаСервер.АдресаКонтрагента(
		Контрагент,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
	);
	Если СписокАдресов.Количество() > 0 Тогда
		АдресПокупателя = СписокАдресов[0];
	КонецЕсли;
	
КонецПроцедуры

Функция ОбратнаяОперацияТипаРасчета(Операция)
	
	Если Операция = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	ИначеЕсли Операция = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
	ИначеЕсли Операция = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли Операция = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Процедура ЗаполнитьЕдиницуИзмеренияДляАвтомобилей(Строка)
	
	ИспользованиеЕдиницИзмерения = Строка.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения;
	Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
		Если (ИспользованиеЕдиницИзмерения = 1 И Строка.ЕдиницаИзмерения.Владелец <> Строка.Номенклатура.ТипНоменклатуры)
			ИЛИ (ИспользованиеЕдиницИзмерения = 2 И Строка.ЕдиницаИзмерения.Владелец <> Строка.Номенклатура) Тогда
			Строка.ЕдиницаИзмерения = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения;
		КонецЕсли;
	Иначе
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
