// Модуль менеджера документа "Инвентаризация ордерного склада"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область ОбновлениеВерсииИБ

// Заполняет новые реквизиты данными из неактуального реквизита и из доп. сведений
//
Процедура ЗаполнитьДанныеИнвентаризации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияОрдерногоСклада.Ссылка КАК Ссылка,
	               |	""ПричинаПроведенияИнвентаризации"" КАК Реквизит,
	               |	ИнвентаризацияОрдерногоСклада.УдалитьОснование КАК ЗначениеРеквизита
	               |ИЗ
	               |	Документ.ИнвентаризацияОрдерногоСклада КАК ИнвентаризацияОрдерногоСклада
	               |ГДЕ
	               |	НЕ ИнвентаризацияОрдерногоСклада.УдалитьОснование = """"
	               |	И ИнвентаризацияОрдерногоСклада.ПричинаПроведенияИнвентаризации <> ИнвентаризацияОрдерногоСклада.УдалитьОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект,
	               |	ДополнительныеСведения.Свойство,
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект ССЫЛКА Документ.ИнвентаризацияОрдерногоСклада
	               |	И НЕ ДополнительныеСведения.Значение = НЕОПРЕДЕЛЕНО
	               |	И НЕ ДополнительныеСведения.Значение = ДАТАВРЕМЯ(1, 1, 1)
	               |	И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаНачала)
	               |				И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ИнвентаризацияОрдерногоСклада).ДатаНачалаИнвентаризации = ДополнительныеСведения.Значение
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаКонца)
	               |				И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ИнвентаризацияОрдерногоСклада).ДатаОкончанияИнвентаризации = ДополнительныеСведения.Значение)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект,
	               |	ДополнительныеСведения.Свойство,
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОрдерногоСклада.ИнвентаризационнаяКомиссия КАК ИнвентаризацияОрдерногоСкладаИнвентаризационнаяКомиссия
	               |		ПО ДополнительныеСведения.Объект = ИнвентаризацияОрдерногоСкладаИнвентаризационнаяКомиссия.Ссылка
	               |			И ДополнительныеСведения.Значение = ИнвентаризацияОрдерногоСкладаИнвентаризационнаяКомиссия.ЧленКомиссии
	               |			И (ДополнительныеСведения.Значение ССЫЛКА Справочник.Сотрудники)
	               |			И (НЕ ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	               |			И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии1)
	               |				ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии2)
	               |				ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПредседательКомиссии))
	               |ГДЕ
	               |	ДополнительныеСведения.Объект ССЫЛКА Документ.ИнвентаризацияОрдерногоСклада
	               |	И ДополнительныеСведения.Значение ССЫЛКА Справочник.Сотрудники
	               |	И НЕ ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии1)
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии2)
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПредседательКомиссии))
	               |	И ИнвентаризацияОрдерногоСкладаИнвентаризационнаяКомиссия.Ссылка ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДопСведенияМенеджер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения; 
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Реквизит = "ПричинаПроведенияИнвентаризации" Тогда
				
				ДокументОбъект.ПричинаПроведенияИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;				
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ДатаНачала Тогда 
				
				ДокументОбъект.ДатаНачалаИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ДатаКонца Тогда
				
				ДокументОбъект.ДатаОкончанияИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ЧленКомиссии1
				ИЛИ ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ЧленКомиссии2 Тогда
				
				СтрокаТЧ = ДокументОбъект.ИнвентаризационнаяКомиссия.Найти(ВыборкаДетальныеЗаписи.ЗначениеРеквизита, "ЧленКомиссии"); 
				Если НЕ СтрокаТЧ = Неопределено Тогда  
					Продолжить;					
				КонецЕсли;	
				
				НоваяСтрока = ДокументОбъект.ИнвентаризационнаяКомиссия.Добавить();
				НоваяСтрока.ЧленКомиссии = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ПредседательКомиссии Тогда
				
				СтрокаТЧ = ДокументОбъект.ИнвентаризационнаяКомиссия.Найти(ВыборкаДетальныеЗаписи.ЗначениеРеквизита, "ЧленКомиссии"); 
				Если НЕ СтрокаТЧ = Неопределено Тогда  
					НоваяСтрока.Председатель = Истина;
					Продолжить;
				КонецЕсли;	
				
				НоваяСтрока = ДокументОбъект.ИнвентаризационнаяКомиссия.Добавить();
				НоваяСтрока.ЧленКомиссии = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;
				НоваяСтрока.Председатель = Истина;
				
			КонецЕсли;	
						
		КонецЦикла;	
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления документа Инвентаризация ордерного склада'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
        КонецПопытки;
		
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Заполнение количества по остаткам
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ЗаполнитьРасчетноеКоличество(Объект, Строка)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("СкладКомпании,Номенклатура,ХарактеристикаНоменклатуры");
	СтруктураОтбора.СкладКомпании              = Объект.СкладКомпании;
	СтруктураОтбора.Номенклатура               = Строка.Номенклатура;
	СтруктураОтбора.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Если (Объект.СкладКомпании.ВидСклада  = Перечисления.ВидыСкладов.Ячеистый ИЛИ Объект.СкладКомпании.ВидСклада  = Перечисления.ВидыСкладов.ОрдерныйЯчеистый) И ЗначениеЗаполнено(Строка.Ячейка) Тогда
		СтруктураОтбора.Вставить("Ячейка", Строка.Ячейка);
	КонецЕсли; 
	Если НЕ Объект.СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);
	КонецЕсли;
	МоментВремени 		= ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)), Объект.Ссылка.МоментВремени());
	ТаблицаОстатков 	= РегистрыНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(МоментВремени, СтруктураОтбора,, "Количество");
	КоличествоОстаток	= ТаблицаОстатков.Итог("Количество");
	
	Если НЕ ЗначениеЗаполнено(Строка.Количество) Или Строка.Количество <> КоличествоОстаток Тогда
		Если ТаблицаОстатков.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				КоличествоОстаток = ?(Строка.ЕдиницаИзмерения.Коэффициент = 0, 0, КоличествоОстаток / Строка.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли; 
			Строка.Количество = КоличествоОстаток;
		Иначе
			Строка.Количество = 0;
		КонецЕсли;
		// пересчет
		ТоварыКоличествоПриИзменении(Объект, Строка);
	КонецЕсли;
	
	Если Строка.КоличествоУчет = 0 Тогда 
		Строка.КоличествоУчет = Строка.Количество; 
	КонецЕсли;
	ТоварыКоличествоУчетПриИзменении(Объект, Строка);
		
КонецПроцедуры

// Функция возвращает запрос для заполнения
//
Функция ПолучитьЗапросДляЗаполнения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
	|			ТОГДА ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток
	|		ИНАЧЕ ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток / ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
	|			ТОГДА ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток
	|		ИНАЧЕ ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток / ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК КоличествоУчет
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
	|			&Момент,
	|			СкладКомпании = &СкладКомпании
	|				И НЕ Номенклатура.ВидНоменклатуры = &Услуга
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ОстаткиТоваровОрдерныйСкладОстатки";
	
	Возврат Запрос;
	
КонецФункции

Процедура ЗаполнитьКоличествоРазница(Строка) 
	
	Строка.КоличествоРазница = Строка.КоличествоУчет - Строка.Количество;
	
КонецПроцедуры

Процедура ОбновитьОтображениеРазницы(Объект) Экспорт
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьКоличествоРазница(Строка);
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	Если Объект.СкладКомпании.ВидСклада  = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		ОбязательныеРеквизиты.Добавить("Товары.Ячейка");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("ИнвентаризационнаяКомиссия.ЧленКомиссии");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		УникальныеТовары.Добавить("Ячейка");
	КонецЕсли;
	
	УникальныеЧленыКомиссии = Новый Массив();
	УникальныеЧленыКомиссии.Добавить("ЧленКомиссии");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("ИнвентаризационнаяКомиссия", УникальныеЧленыКомиссии);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("ПересчетСуммы", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия  = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРасчетноеКоличество(Объект, Строка);
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРасчетноеКоличество(Объект, Строка);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьРасчетноеКоличество(Объект, Строка);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьРасчетноеКоличество(Объект, Строка);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьКоличествоРазница(Строка);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоУчетПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьКоличествоРазница(Строка);
	
КонецПроцедуры // ТоварыКоличествоУчетПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ячейка" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЯчейкаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьРасчетноеКоличество(Объект, Строка);
	
КонецПроцедуры // ЯчейкаПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ИнвентаризацияОрдерногоСклада");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	//
	ВыборГруппыНоменклатуры 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборГруппыНоменклатуры.ВыборСсылки 		= "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборГруппыНоменклатуры.Обязательный 		= Истина;
	ВыборГруппыНоменклатуры.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по группе'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 		ВыборСклада);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборГруппыНоменклатуры);
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по группе номенклатуры'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоГруппеНоменклатуры";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборГруппыНоменклатуры);
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить всей номенклатурой'");
	Команда.Идентификатор	= "ЗаполнитьДокументНоменклатурой";
	Команда.Порядок			= 53;
	//
	ВыборЯчейки 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЯчейки.ВыборСсылки 		= "Справочник.ЯчейкиХранения.ФормаСписка";
	ВыборЯчейки.Обязательный 		= Истина;
	ВыборЯчейки.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать массив ячеек.'"); 
	
	Отбор 							= Новый Структура("Владелец", "СкладКомпании");
	ВыборЯчейки.Параметры			= Новый Структура("РежимВыбора,МножественныйВыбор,Отбор", Истина, Истина, Отбор);
		
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по ячейке'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке";
	Команда.Порядок			= 54;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 	ВыборСклада);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("МассивЯчеек", 	ВыборЯчейки);
	//	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Свернуть одинаковые строки'");
	Команда.Идентификатор	= "ТоварыСвернутьОдинаковыеСтроки";
	Команда.Порядок			= 55;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
	//	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Обнулить фактическое количество'");
	Команда.Идентификатор	= "ТоварыОбнулитьКоличествоФакт";
	Команда.Порядок			= 56;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить фактическое количество расчетным'");
	Команда.Идентификатор	= "ТоварыСравнятьРасчетФакт";
	Команда.Порядок			= 57;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",                    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность",                  Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Видимость",            Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Доступность",          Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоГруппеНоменклатуры.Видимость",                   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоГруппеНоменклатуры.Доступность",                 Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьВсейНоменклатурой.Видимость",                      Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьВсейНоменклатурой.Доступность",                    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа складскими остатками
//
Функция ТоварыЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ИмяРегистра", "ОстаткиТоваровОрдерныйСклад");
	Результат = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	
	ЗаполнитьТЧСкладскимиОстатками(Объект, ПараметрыДействия, Результат)	
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстатками()

// Обработчик заполнения документа складскими остатками по группе номенклатуры
//
Функция ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ИмяРегистра", "ОстаткиТоваровОрдерныйСклад");

	Результат = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);

	ЗаполнитьТЧСкладскимиОстатками(Объект, ПараметрыДействия, Результат)

КонецФункции // ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе()

// Обработчик заполнения документа складскими остатками по выбранной ячейке
//
Функция ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		Результат = ЗаполнениеДокументовСервер.ЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке(Объект, ПараметрыЗаполнения);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Заполнение возможно только для ячеистого склада .'"), Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьТЧСкладскимиОстатками(Объект, ПараметрыДействия, Результат)
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке()

Функция ЗаполнитьТЧСкладскимиОстатками(Объект, ПараметрыДействия, Результат)
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ЯчеистыйСклад = (Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ 
						Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый);	

	Для Каждого СтрокаТЧ Из Результат Цикл
		НоваяСтрока 				= Объект.Товары.Добавить();
		
		НоваяСтрока.Номенклатура	= СтрокаТЧ.Номенклатура;
		
		Если ЯчеистыйСклад Тогда
			НоваяСтрока.Ячейка	= СтрокаТЧ.Ячейка;
			ПараметрыДействия.Вставить("НеПерезаполнятьЯчейку", Истина);
		КонецЕсли;
		
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
		Если Объект.СкладКомпании.УчетЕдиницИзмерения <> Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
				КоэффициентПересчета         = СтрокаТЧ.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент / СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.Количество       = СтрокаТЧ.Количество * КоэффициентПересчета;
			КонецЕсли;
		Иначе
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Количество       = СтрокаТЧ.Количество * СтрокаТЧ.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия); 
		
		Если НоваяСтрока.КоличествоУчет = 0 Тогда 
			НоваяСтрока.КоличествоУчет = НоваяСтрока.Количество; 
		КонецЕсли;
		ТоварыКоличествоУчетПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
					
	КонецЦикла;
	
КонецФункции

// Обработчик заполнения документа группой номенклатуры из справочника
//
Функция ТоварыЗаполнитьПоГруппеНоменклатуры(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Выборка = Справочники.Номенклатура.ВыбратьИерархически(ПараметрыЗаполнения.ГруппаНоменклатуры);
	Товары 	= Объект.Товары.Выгрузить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Услуга ИЛИ Выборка.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Набор Тогда
			Продолжить;
		КонецЕсли;
		
		Если Товары.Найти(Выборка.Ссылка,"Номенклатура")<>Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 				= Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура 	= Выборка.Ссылка;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
	КонецЦикла;
	
КонецФункции // ЗаполнитьДокументНоменклатурой()

// Обработчик заполнения документа номенклатурой из справочника
//
Функция ЗаполнитьДокументНоменклатурой(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Выборка = Справочники.Номенклатура.ВыбратьИерархически();
	Товары 	= Объект.Товары.Выгрузить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Услуга ИЛИ Выборка.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Набор Тогда
			Продолжить;
		КонецЕсли;
		
		Если Товары.Найти(Выборка.Ссылка,"Номенклатура")<>Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 				= Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура 	= Выборка.Ссылка;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
	КонецЦикла;
	
КонецФункции // ЗаполнитьДокументНоменклатурой()

// Обработчик сворачивания строк товаров
//
Функция ТоварыСвернутьОдинаковыеСтроки(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ТаблицаТоваров 		= Объект.Товары.Выгрузить();
	
	Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ Объект.СкладКомпании.ВидСклада  = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		ТаблицаТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,Ячейка,ХарактеристикаНоменклатуры","КоличествоУчет,Количество");
	Иначе
		ТаблицаТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,ХарактеристикаНоменклатуры","КоличествоУчет,Количество");
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
КонецФункции // ТоварыСвернутьОдинаковыеСтроки()

// Обработчик обнуления фактического количества
//
Функция ТоварыОбнулитьКоличествоФакт(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		МассивНолей = Новый Массив(Объект.Товары.Количество());
		
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		ТаблицаТоваров.ЗагрузитьКолонку(МассивНолей,"КоличествоУчет");
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			ТоварыКоличествоУчетПриИзменении(Объект, СтрокаТовар);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ТоварыОбнулитьКоличествоФакт()

// Обработчик заполнения расчетного количества фактическим
//
Функция ТоварыСравнятьРасчетФакт(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Количество"),"КоличествоУчет");		
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			ТоварыКоличествоУчетПриИзменении(Объект, СтрокаТовар);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ТоварыСравнятьРасчетФакт()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ИнвентаризацияОрдерногоСклада",
		"ПФ_MXL_ИнвентаризацияОрдерногоСклада",
		НСтр("ru = 'Инвентаризация ордерного склада'"),
		СсылкаНаДокумент );
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ3",
		НСтр("ru = 'ИНВ3 (Инвентаризационная опись)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ19",
		НСтр("ru = 'ИНВ19 (Сличительная ведомость)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ22",
		НСтр("ru = 'ИНВ22 (Приказ о проведении инвентаризации)'"),
		СсылкаНаДокумент);	
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИнвентаризацияОрдерногоСклада") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ИнвентаризацияОрдерногоСклада",
															НСтр("ru = 'Инвентаризация ордерного склада'"),
															ПечатьИнвентаризацияОрдерногоСклада(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьИнвентаризацияОрдерногоСклада(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОрдерногоСклада_ИнвентаризацияОрдерногоСклада";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ИнвентаризацияОрдерногоСклада.ПФ_MXL_ИнвентаризацияОрдерногоСклада");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Инвентаризация ордерного склада'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладКомпании);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("Ячейка", СтрокаТЧ.Ячейка);
			СтруктураСтроки.Количество = СтрокаТЧ.КоличествоУчет;
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред	      = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьИнвентаризацияОрдерногоСклада()

Функция ПолучитьДанныеДляПечатиИНВ3(Объект) Экспорт
	
	
	ДанныеОбъекта = Новый Структура();
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИнвентаризацияОрдерногоСкладаТовары.Ссылка,
	               |	ИнвентаризацияОрдерногоСкладаТовары.НомерСтроки,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Номенклатура,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Количество КАК КоличествоКнижн,
	               |	ИнвентаризацияОрдерногоСкладаТовары.КоличествоУчет КАК КоличествоФакт,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Коэффициент,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Ячейка,
	               |	ИнвентаризацияОрдерногоСкладаТовары.ХарактеристикаНоменклатуры,
	               |	0 КАК Цена,
	               |	0 КАК СуммаФакт,
	               |	0 КАК СуммаКнижн
	               |ИЗ
	               |	Документ.ИнвентаризацияОрдерногоСклада.Товары КАК ИнвентаризацияОрдерногоСкладаТовары
	               |ГДЕ
	               |	ИнвентаризацияОрдерногоСкладаТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ПодготовленнаяТЧ = Запрос.Выполнить().Выгрузить();
	Валюта = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	// данные документа
	ДанныеОбъекта.Вставить("Организация"             	, Объект.Организация);
	ДанныеОбъекта.Вставить("Валюта"        				, Валюта);
	ДанныеОбъекта.Вставить("Дата"                   	, Объект.Дата);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти" 		, ПодготовленнаяТЧ);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, Объект.ПодразделениеКомпании); 
	ДанныеОбъекта.Вставить("Основание"     				, Объект.ОснованиеВид);
	ДанныеОбъекта.Вставить("ОснованиеДата"         		, Объект.ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер"         	, Объект.ОснованиеНомер);
	
	ДанныеОбъекта.Вставить("ДатаНачалаИнвентаризации"   , Объект.ДатаНачалаИнвентаризации); 
	ДанныеОбъекта.Вставить("ДатаОкончанияИнвентаризации", Объект.ДатаОкончанияИнвентаризации);  
	ДанныеОбъекта.Вставить("МОЛ"						, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект.СкладКомпании,"МОЛ")
	); 
	ДанныеОбъекта.Вставить("ИнвентаризационнаяКомиссия"	, Объект.ИнвентаризационнаяКомиссия.Выгрузить());
	
Возврат  ДанныеОбъекта; 

КонецФункции

Функция ПолучитьДанныеДляПечатиИНВ19(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИнвентаризацияОрдерногоСкладаТовары.Ссылка,
	               |	ИнвентаризацияОрдерногоСкладаТовары.НомерСтроки,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Номенклатура,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Количество КАК КоличествоКнижн,
	               |	ИнвентаризацияОрдерногоСкладаТовары.КоличествоУчет КАК КоличествоФакт,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Коэффициент,
	               |	ИнвентаризацияОрдерногоСкладаТовары.Ячейка,
	               |	ИнвентаризацияОрдерногоСкладаТовары.ХарактеристикаНоменклатуры,
	               |	0 КАК Цена,
	               |	0 КАК СуммаФакт,
	               |	0 КАК СуммаКнижн
	               |ИЗ
	               |	Документ.ИнвентаризацияОрдерногоСклада.Товары КАК ИнвентаризацияОрдерногоСкладаТовары
	               |ГДЕ
	               |	ИнвентаризацияОрдерногоСкладаТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ПодготовленнаяТЧ = Запрос.Выполнить().Выгрузить();
	
	Валюта = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	// данные документа
	ДанныеОбъекта.Вставить("Организация"             	, Объект.Организация);
	ДанныеОбъекта.Вставить("Валюта"        				, Валюта);
	ДанныеОбъекта.Вставить("Дата"                   	, Объект.Дата);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти" 		, ПодготовленнаяТЧ);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Основание"         			, Объект.ОснованиеВид);
	ДанныеОбъекта.Вставить("ОснованиеДата"         		, Объект.ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер"         	, Объект.ОснованиеНомер);
	ДанныеОбъекта.Вставить("ЕстьДвиженияПоРегистру"     , Ложь);
	ДанныеОбъекта.Вставить("ПростоеСписание"    		, Ложь);
	
	ДанныеОбъекта.Вставить("ДатаНачалаИнвентаризации"   , Объект.ДатаНачалаИнвентаризации); 
	ДанныеОбъекта.Вставить("ДатаОкончанияИнвентаризации", Объект.ДатаОкончанияИнвентаризации);  
	ДанныеОбъекта.Вставить("МОЛ"						, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект.СкладКомпании,"МОЛ")
	); 
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"ГлавныйБухгалтер")
	);
	
	Возврат ДанныеОбъекта;
КонецФункции

// Формирует печатную форму "Приказ (постановление, распоряжение) о проведении инвентаризации (ИНВ-22)"
//
Функция ПолучитьДанныеДляПечатиИНВ22(Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОрдерногоСклада.Ссылка КАК Ссылка,
	|	ИнвентаризацияОрдерногоСклада.Номер КАК Номер,
	|	ИнвентаризацияОрдерногоСклада.Дата КАК Дата,
	|	ИнвентаризацияОрдерногоСклада.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОрдерногоСклада.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОрдерногоСклада.ОснованиеВид КАК ОснованиеВид,
	|	ИнвентаризацияОрдерногоСклада.ОснованиеДата КАК ОснованиеДата,
	|	ИнвентаризацияОрдерногоСклада.ОснованиеНомер КАК ОснованиеНомер,
	|	ИнвентаризацияОрдерногоСклада.Организация КАК Организация,
	|	ИнвентаризацияОрдерногоСклада.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	ИнвентаризацияОрдерногоСклада.СкладКомпании.Представление КАК ПредставлениеСклада,
	|	ИнвентаризацияОрдерногоСклада.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ИнвентаризацияОрдерногоСклада.ИнвентаризационнаяКомиссия.(
	|		НомерСтроки КАК НомерСтроки,
	|		ЧленКомиссии КАК ЧленКомиссии,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ИнвентаризацияОрдерногоСклада.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияОрдерногоСклада КАК ИнвентаризацияОрдерногоСклада
	|ГДЕ
	|	ИнвентаризацияОрдерногоСклада.Ссылка = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвентаризацияОрдерногоСклада.Дата,
	|	Ссылка,
	|	Председатель УБЫВ";

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Инвентаризация);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ИнвентаризацияОрдерногоСклада);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли