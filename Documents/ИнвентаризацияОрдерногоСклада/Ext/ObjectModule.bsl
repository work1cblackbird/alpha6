// Модуль документа "Инвентаризация ордерного склада"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если (СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ордерный)
			И (СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый) Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, НСтр("ru = 'Склад, указанный в документе основании не ордерный, ввод на основании не возможен.'"));
			Возврат;	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// на всякий случай проверим тип склада, его могли поменять в самом справочнике
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Обычный ИЛИ СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Склад документа имеет вид <%1>. Проведение возможно только для ""Ордерного"" или ""Ордерного и ячеистого"" склада.'"),СкладКомпании.ВидСклада);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
		Возврат;
	КонецЕсли; 
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем таблицу признаков ведения учета для по товарам табличной части
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.РучноеСписание)
	|				ИЛИ Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РучноеСписаниеХарактеристик,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
	|				ИЛИ Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетВедется
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНоменклатуры",Товары.ВыгрузитьКолонку("Номенклатура"));
	ПараметрыУчета = Запрос.Выполнить().Выгрузить();
	
	// Выполняем проверку корректности заполнения
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		// Проверять нужно только те строки у которых заполнена номенклатура и не заполнена характеристика.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		// получим параметры ведения учета по текущей номенклатуре
		ПараметрыУчетаНоменклатуры = ПараметрыУчета.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
		
		Если ПараметрыУчетаНоменклатуры.РучноеСписаниеХарактеристик Тогда
			Продолжить;
		КонецЕсли;
		
		// Установим признак запрета автоматического списания
		ТоварыЗапретАвтоСписанияХарактеристик = СтрокаТабличнойЧасти.КоличествоУчет > СтрокаТабличнойЧасти.Количество;
		
		// Проверим и сообщим пользователю если что-то не так
		Если ПараметрыУчетаНоменклатуры.УчетВедется И ТоварыЗапретАвтоСписанияХарактеристик Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТабличнойЧасти.НомерСтроки, "ХарактеристикаНоменклатуры");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Поле ""%1"" строки %2 таблицы ""%3"" не заполнено'"),
					"ХарактеристикаНоменклатуры", 
					СтрокаТабличнойЧасти.НомерСтроки,
					"Товары"
				),
				,
				ПутьКТабличнойЧасти, 
				"Объект",
				Отказ
			);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОрдерномуУчетуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// на всякий случай проверим тип склада, его могли поменять в самом справочнике
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Обычный ИЛИ СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Склад документа имеет вид  ""<%1>"". Проведение возможно только для ""Ордерного"" или ""Ордерного и Ячеистого"" склада.'"),СкладКомпании.ВидСклада);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
		Возврат;
	КонецЕсли; 
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
	РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоТоварам();	 
	ТаблицаЗаявкаНаХранениеШин = ПолучитьЗаявкиНаХранениеШин(РезультатЗапросаПоТоварам);
	НаборЗаписейОстатки = Движения.ОстаткиТоваровОрдерныйСклад;
	
	Для Каждого Заявка Из ТаблицаЗаявкаНаХранениеШин Цикл
		
		Если ХозОперация=Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин Тогда
			ЗаявкаНаХранениеШин = ?(ЗначениеЗаполнено(ДокументОснование),ДокументОснование, Заявка.ЗаявкаНаХранениеШин);
		Иначе
			ЗаявкаНаХранениеШин = Неопределено;
		КонецЕсли;
		
		РезультатЗапросаПоТоварамНедостачи =	ПолучитьРезультатЗапросаИзТаблицыТоваров(РезультатЗапросаПоТоварам, Заявка.ЗаявкаНаХранениеШин, 1);		
		РезультатЗапросаПоТоварамИзлишки =		ПолучитьРезультатЗапросаИзТаблицыТоваров(РезультатЗапросаПоТоварам, Заявка.ЗаявкаНаХранениеШин);
		
		// 1. Списываем недостачи
		НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейОстатки.СкладКомпании  = СкладКомпании;
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин=ЗаявкаНаХранениеШин; 
		НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамНедостачи; 
		Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
		Если Отказ Тогда
			Возврат; // дальше смысла не имеет
		КонецЕсли;
		
		// 2. Приходуем излишки
		НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейОстатки.СкладКомпании  = СкладКомпании;
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин = ЗаявкаНаХранениеШин; 
		НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамИзлишки;
		Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		
	КонецЦикла;
	
	ХранениеШинКомплектами = ПолучитьУчетнуюПолитикуХранениеШинКомплектами();
	Если ХранениеШинКомплектами = Неопределено Тогда
		ХранениеШинКомплектами = Истина;
	КонецЕсли;
	
	Если (НЕ Отказ) И (ХозОперация=Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин) И (ХранениеШинКомплектами)Тогда
		// Контроль остатка шин на хранении
		НаборЗаписейОстатки.Записать();
		
		СтруктураОтбора = Новый Структура;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			СтруктураОтбора.Вставить("ЗаявкаНаХранениеШин", ДокументОснование);
		КонецЕсли;
		
		ОтборПоПустойЗаявке = Новый Структура("ЗаявкаНаХранениеШин",Документы.ЗаявкаНаХранениеШин.ПустаяСсылка());
		ПустыеЗаявкиНаХранениеШин = РезультатЗапросаПоТоварам.НайтиСтроки(ОтборПоПустойЗаявке);
		
		Для Каждого ПустаяЗаявка Из ПустыеЗаявкиНаХранениеШин Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для номенклатуры <%1> не определена заявка на хранение шин'"),ПустаяЗаявка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаОстатковТоваров = ПолучитьОстатокШинНаОрдерномСкладе(ТаблицаЗаявкаНаХранениеШин);
		СписокЗаявокНаХранениеШин=Новый СписокЗначений;
		ТаблицаОстатковПоЯчейкам=ТаблицаОстатковТоваров.Скопировать();
		ТаблицаОстатковПоЯчейкам.Свернуть("ЗаявкаНаХранениеШин,Ячейка","Количество");
		Для каждого СтрокаОстатков Из ТаблицаОстатковТоваров Цикл
			Если СписокЗаявокНаХранениеШин.НайтиПоЗначению(СтрокаОстатков.ЗаявкаНаХранениеШин)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СписокЗаявокНаХранениеШин.Добавить(СтрокаОстатков.ЗаявкаНаХранениеШин);
			
			ЯчейкиЗаявкиНаХранениеШин=ТаблицаОстатковПоЯчейкам.НайтиСтроки(Новый Структура("ЗаявкаНаХранениеШин",СтрокаОстатков.ЗаявкаНаХранениеШин));
			Если ЯчейкиЗаявкиНаХранениеШин.Количество()>1  Тогда
				ЯчейкиЗаявкиНаХранениеШин=ТаблицаОстатковТоваров.НайтиСтроки(Новый Структура("ЗаявкаНаХранениеШин",СтрокаОстатков.ЗаявкаНаХранениеШин));
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Остатки товаров ордерного склада: Хранение шин допускается только покомплектно.'"),ЭтотОбъект,,,Отказ);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Шины из комплекта <%1> должны хранится в одной ячейке'"),СтрокаОстатков.ЗаявкаНаХранениеШин);
                ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
						
				Для каждого СтрокаОстатковЗаявкиНаХранениеШин Из ЯчейкиЗаявкиНаХранениеШин Цикл
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '<%1>: в ячейке <%2>'"),СтрокаОстатковЗаявкиНаХранениеШин.Номенклатура, СокрЛП(СтрокаОстатковЗаявкиНаХранениеШин.Ячейка));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// двигаем границу последовательности ордерного склада
	РаботаСГраницами.СдвинутьГраницуОрдерногоУчета(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Инвентаризация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Инвентаризация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин Тогда
		 ХозОперация = Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин;
	КонецЕсли; 
	
	Запрос = Документы.ИнвентаризацияОрдерногоСклада.ПолучитьЗапросДляЗаполнения();
	Запрос.УстановитьПараметр("Момент",				ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Услуга", 			Перечисления.ВидыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("СкладКомпании",		ДанныеЗаполнения.СкладКомпании);
	Запрос.УстановитьПараметр("СписокНоменклатуры",	ДанныеЗаполнения.Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Если ХозОперация = Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин Тогда
		ЗаявкаНаХранениеШин = Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(ДокументОснование);
		Если ТипЗнч(ЗаявкаНаХранениеШин) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин",ЗаявкаНаХранениеШин);
		Иначе
			Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин",Документы.ЗаявкаНаХранениеШин.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин",Документы.ЗаявкаНаХранениеШин.ПустаяСсылка());
	КонецЕсли; 
	
	ТЧОснования = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТЧОснования);
	
	Если ХозОперация <> Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин Тогда
	// теперь посмотрим что у нас добавилось, а что нет
	Для Каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
		МассСтрДок = Товары.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрока.Номенклатура));
		Если МассСтрДок.Количество() = 0 Тогда
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество = 0;
			НоваяСтрока.КоличествоУчет = 0;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = ТекСтрока.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	КонецЕсли; 
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Инвентаризация()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин;
	
	Запрос = Документы.ИнвентаризацияОрдерногоСклада.ПолучитьЗапросДляЗаполнения();
	Запрос.УстановитьПараметр("Момент",				ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Услуга", 			Перечисления.ВидыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("СкладКомпании",		ДанныеЗаполнения.СкладКомпании);
	Запрос.УстановитьПараметр("СписокНоменклатуры",	ДанныеЗаполнения.Шины.ВыгрузитьКолонку("Номенклатура"));
	
	Если ХозОперация = Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин Тогда
		ЗаявкаНаХранениеШин = Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин",ЗаявкаНаХранениеШин);
	Иначе
		Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин",Документы.ЗаявкаНаХранениеШин.ПустаяСсылка());
	КонецЕсли; 
	
	ТЧОснования = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТЧОснования);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоТоварам()
    ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияТовары.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИнвентаризацияТовары.Ссылка КАК Партия,
	|	&ЗаявкаНаХранениеШин КАК ЗаявкаНаХранениеШин,
	|	ИнвентаризацияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения";
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	ИнвентаризацияТовары.Ячейка КАК Ячейка";
	КонецЕсли; 
		
	ТекстЗапроса=ТекстЗапроса+",
	|	(ИнвентаризацияТовары.КоличествоУчет-ИнвентаризацияТовары.Количество)*ИнвентаризацияТовары.Коэффициент КАК Количество,
	|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	Документ.ИнвентаризацияОрдерногоСклада.Товары КАК ИнвентаризацияТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(, СкладКомпании = &Склад) КАК ОстаткиТоваровОрдерныйСкладОстатки
	|	ПО ИнвентаризацияТовары.Номенклатура = ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура
	|	И ИнвентаризацияТовары.Ячейка = ОстаткиТоваровОрдерныйСкладОстатки.Ячейка
    |ГДЕ
	|	ИнвентаризацияТовары.Ссылка=&Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаХранениеШин УБЫВ";

	Запрос=Новый Запрос();
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин",ДокументОснование)
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаявкаНаХранениеШин", "ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.ЗаявкаНаХранениеШин, ЗНАЧЕНИЕ(Документ.ЗаявкаНаХранениеШин.ПустаяСсылка))");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Склад",СкладКомпании);
	Запрос.Текст=ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// Получает остатки на ордерном складе по комплектам (Заявка на хранение шин)
//
// Параметры:
//  ЗаявкиНаХранениеШин - список значений, получает остатки по комплектам.
//
// Возвращаемое значение:
//  Возвращает таблицу значений результата запроса.
//
Функция ПолучитьОстатокШинНаОрдерномСкладе(ЗаявкиНаХранениеШин)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
	|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК Количество,
	|	ОстаткиТоваровОрдерныйСкладОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ЗаявкаНаХранениеШин КАК ЗаявкаНаХранениеШин
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
	|			&МоментВремени,
	|			ЗаявкаНаХранениеШин В (&МассивЗаявкаНаХранениеШин)
	|				И СкладКомпании = &Склад
	|				И НЕ ЗаявкаНаХранениеШин = ЗНАЧЕНИЕ(Документ.ЗаявкаНаХранениеШин.ПустаяСсылка)) КАК ОстаткиТоваровОрдерныйСкладОстатки";
	
	Склад = ЭтотОбъект.СкладКомпании; 
	
	МоментВремени = Новый Граница(МоментВремени(),ВидГраницы.Включая); 
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("МассивЗаявкаНаХранениеШин", ЗаявкиНаХранениеШин);
	
	Возврат Запрос.Выполнить().Выгрузить();		
	
КонецФункции // ПолучитьОстатокШинНаОрдерномСкладе()

// Получает значение учетной политики ХранениеШинКомплектами по подразделению
//
// Возвращаемое значение:
//  Возвращает булево, значение учетной политики ХранениеШинКомплектами.
//
Функция ПолучитьУчетнуюПолитикуХранениеШинКомплектами()

	ПодразделениеКомпании = ?(ЗначениеЗаполнено(ДокументОснование), ДокументОснование.ПодразделениеКомпании, ПараметрыСеанса.ПодразделениеКомпании);
	
	Возврат УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами", Дата, ПодразделениеКомпании);
	
КонецФункции // ПолучитьУчетнуюПолитикуХранениеШинКомплектами()

// Формирует таблицу значений с распределением количества по заявкам на хранение
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса, результат запроса по товарам.
//
// Возвращаемое значение:
//  Возвращает таблицу значений по заявкам на хранение шин.
//
Функция ПолучитьЗаявкиНаХранениеШин(РезультатЗапросаПоТоварам)
	
	РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если НЕ (ХозОперация=Справочники.ХозОперации.ИнвентаризацияОрдерногоСкладаШин) ИЛИ НЕ ПолучитьУчетнуюПолитикуХранениеШинКомплектами() Тогда
		
		ТЗРезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Скопировать();
		ТЗРезультатЗапросаПоТоварам.Свернуть("ЗаявкаНаХранениеШин");
		
		Возврат ТЗРезультатЗапросаПоТоварам;
	КонецЕсли;
	
	Количество = 0;
	Для Каждого ЭлементТЗ Из РезультатЗапросаПоТоварам Цикл
		
		Если ЭлементТЗ.Количество >= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗаявкуНаХранениеШин(ЭлементТЗ, РезультатЗапросаПоТоварам, Количество);
		РаспределитьКоличествоПоЗаявкамНаХранение(ЭлементТЗ, РезультатЗапросаПоТоварам);
				
	КонецЦикла;
	
	УдалитьНулевыеСтроки(РезультатЗапросаПоТоварам);
	
	ТЗРезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Скопировать();
	ТЗРезультатЗапросаПоТоварам.Свернуть("ЗаявкаНаХранениеШин");
	
	Возврат ТЗРезультатЗапросаПоТоварам;			
	
КонецФункции // ПолучитьЗаявкиНаХранениеШин()

// Формирует результат запроса из таблицы товаров для формирования движения
//
// Параметры:
//	РезультатЗапросаПоТоварам - результат запроса по товарам.
//	ЗаявкаНаХранениеШин - ДокументСсылка.ЗаявкаНаХранениеШин.
//  Режим - число, 0 - возвращает излишки, 1 - недостачи.
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаИзТаблицыТоваров(РезультатЗапросаПоТоварам, ЗаявкаНаХранениеШин = Неопределено, Режим = 0)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатЗапросаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РезультатЗапросаПоТоварам.ЗаявкаНаХранениеШин КАК ЗаявкаНаХранениеШин,
		|	РезультатЗапросаПоТоварам.Количество КАК Количество,
		|	РезультатЗапросаПоТоварам.Номенклатура КАК Номенклатура,
		|	РезультатЗапросаПоТоварам.Партия КАК Партия,
		|	РезультатЗапросаПоТоварам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РезультатЗапросаПоТоварам.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ ВТ_РезультатЗапросаПоТоварам
		|ИЗ
		|	&РезультатЗапросаПоТоварам КАК РезультатЗапросаПоТоварам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РезультатЗапросаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_РезультатЗапросаПоТоварам.ЗаявкаНаХранениеШин КАК ЗаявкаНаХранениеШин,
		|	ВТ_РезультатЗапросаПоТоварам.Количество*"+?(Режим=1,"(-1)","1")+" КАК Количество,
		|	ВТ_РезультатЗапросаПоТоварам.Номенклатура КАК Номенклатура,
		|	ВТ_РезультатЗапросаПоТоварам.Партия КАК Партия,
		|	ВТ_РезультатЗапросаПоТоварам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_РезультатЗапросаПоТоварам.Ячейка КАК Ячейка
		|ИЗ
		|	ВТ_РезультатЗапросаПоТоварам КАК ВТ_РезультатЗапросаПоТоварам
		|ГДЕ
		|	ВТ_РезультатЗапросаПоТоварам.Количество*"+?(Режим=1,"(-1)","1")+">0
		|&ЗаявкаНаХранениеШин";	
	
	Запрос.УстановитьПараметр("РезультатЗапросаПоТоварам", РезультатЗапросаПоТоварам);
	Если НЕ ЗаявкаНаХранениеШин = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаявкаНаХранениеШин", "И ВТ_РезультатЗапросаПоТоварам.ЗаявкаНаХранениеШин = &ЗаявкаНаХранениеШин");
		Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин", ЗаявкаНаХранениеШин); 
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаявкаНаХранениеШин", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьРезультатЗапросаИзТаблицыТоваров()

// Удаляет строки из таблицы значений с количеством - 0.
//
// Параметры:
//  ТаблицаЗначенийПоТоварам - таблица значений.
//
Процедура УдалитьНулевыеСтроки(ТаблицаЗначенийПоТоварам)
	
	НулевыеСтроки = ТаблицаЗначенийПоТоварам.НайтиСтроки(Новый Структура("Количество",0));	
	
	Для каждого СтрокаТаблицы Из НулевыеСтроки Цикл
		
		ТаблицаЗначенийПоТоварам.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьНулевыеСтроки()

// Заполняет пустые заявки на хранение шин при распределения количества
//
// Параметры:
//  ЭлементТЗ - СтрокаТаблицыЗначений.
//  РезультатЗапросаПоТоварам - ТаблицаЗначений.
//	Количество - Число.
//
Процедура ЗаполнитьЗаявкуНаХранениеШин(ЭлементТЗ, РезультатЗапросаПоТоварам, Количество)
	
	Количество = - ЭлементТЗ.Количество + Количество;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаявкаНаХранениеШин", Документы.ЗаявкаНаХранениеШин.ПустаяСсылка());
	НайденныеСтроки = РезультатЗапросаПоТоварам.НайтиСтроки(Отбор);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если Количество < НайденнаяСтрока.Количество Тогда
			Продолжить;
		КонецЕсли;
		Количество = Количество - НайденнаяСтрока.Количество;
		Если Количество < 0 Тогда
			Прервать;
		КонецЕсли;
		НайденнаяСтрока.ЗаявкаНаХранениеШин = ЭлементТЗ.ЗаявкаНаХранениеШин; 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗаявкуНаХранениеШин()

// Распределяет количество по заявкам в случае, если в одной ячейке хранится одна номенклатура с разных комплектов
//
// Параметры:
//  ЭлементТЗ - СтрокаТаблицыЗначений.
//	РезультатЗапросаПоТоварам - ТаблицаЗначений	
//
Процедура РаспределитьКоличествоПоЗаявкамНаХранение(ЭлементТЗ, РезультатЗапросаПоТоварам)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ЭлементТЗ.Номенклатура);
	НайденныеСтроки = РезультатЗапросаПоТоварам.НайтиСтроки(Отбор);
	КоличествоОстаток = 0;
	ПерваяСтрока= Истина;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если ПерваяСтрока Тогда
			КоличествоОстаток = -НайденнаяСтрока.Количество;
			ПерваяСтрока = Ложь;
		КонецЕсли;
		Если НайденнаяСтрока.КоличествоОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.Количество = Макс(-КоличествоОстаток, -НайденнаяСтрока.КоличествоОстаток);		
		КоличествоОстаток = КоличествоОстаток - Мин(НайденнаяСтрока.КоличествоОстаток, КоличествоОстаток);
		НайденнаяСтрока.КоличествоОстаток = 0;
		
	КонецЦикла;
КонецПроцедуры // РаспределитьКоличествоПоЗаявкамНаХранение()

#КонецОбласти

#КонецОбласти

#КонецЕсли
