// Модуль объекта документа "Заказ кодов маркировки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Автор.Сотрудник;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовМаркировки.Новый");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПроизводственногоЗаказа) Тогда
		ИдентификаторПроизводственногоЗаказа = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Товары.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		               |	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		               |ИЗ
		               |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		               |ГДЕ
		               |	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		               |	И ЗаказПоставщикуТовары.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
		
		Товары.Загрузить(ТаблицаТоваров);
		
		СпособВыпускаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.ИмпортВРФ");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВводВОборотКодовМаркировки") Тогда
		
		Если ДанныеЗаполнения.СпособВводаВОборот = Перечисления.СпособыВводаВОборот.МаркировкаОстатков Тогда
			СпособВыпускаВОборот = Перечисления.СпособыВыпускаВОборот.МаркировкаОстатков;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Перемаркировка") Тогда
		
		СпособВыпускаВОборот = Перечисления.СпособыВыпускаВОборот.Перемаркировка;
		
		Товары.Очистить();
		
		Для Каждого ТекущаяСтрока Из ДанныеЗаполнения.Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировкиНовый) Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура = ТекущаяСтрока.НоменклатураНовая;
				НоваяСтрока.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатурыНовая;
				НоваяСтрока.Количество = 1;
			КонецЕсли;
		КонецЦикла;
		
		Товары.Свернуть("Номенклатура,ХарактеристикаНоменклатуры", "Количество");
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторСтроки) Тогда
			ТекущаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СпособЗаполненияСерийногоНомера) Тогда
			ТекущаяСтрока.СпособЗаполненияСерийногоНомера = Перечисления.СпособыЗаполненияСерийногоНомера.Автоматически;
		КонецЕсли;
		Документы.ЗаказКодовМаркировки.ТоварыНоменклатураПриИзменении(ЭтотОбъект, ТекущаяСтрока);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		ТоварнаяГруппа = МаркировкаТоваровСервер.ТоварнаяГруппа(Товары.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	
	// Если больше 10 строк номенклатур, то сформируем несколько заказов
	ДопустимоеЧислоСтрок = 10;
	Если НЕ ДополнительныеСвойства.Свойство("НеПроверятьОграничениеСтрок")
		И Товары.Количество() > ДопустимоеЧислоСтрок Тогда
		
		Документы.ЗаказКодовМаркировки.СформироватьЗаказыНаКодыМаркировки(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипОплаты) Тогда
		ТипОплаты = Перечисления.ТипыОплатыЗаказаКодовМаркировки.ОплатаПоНанесению;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Статус = Перечисления.СтатусыДокументовМаркировки.Новый;
	ИдентификаторПроизводственногоЗаказа = Новый УникальныйИдентификатор;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	МаркировкаТоваровСервер.НоменклатураСоответствуетТоварнойГруппе(ЭтотОбъект, Отказ);
	
	// Органичения по отправке данных
	ДопустимоеЧислоСтрок = 10;
	Если Товары.Количество() > ДопустимоеЧислоСтрок Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Допускается ввод не более 10 строк.'"), ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	ЭтоМаркировкаОстатков = 
		СпособВыпускаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.МаркировкаОстатков");
	
	РазныйСпособФормированияНомеров = Ложь;
	ДублированиеGTIN = Новый Массив;
	СписокGTIN  = Новый Массив;
	
	ТекущийСпособГенерацииСерийныхНомеров = Неопределено;
	
	// Проверим количество кодов маркировки в товарах
	ДопустимоеЧислоКодовВСтроке = 150000;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		Если ТекущаяСтрока.Количество > ДопустимоеЧислоКодовВСтроке Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Количество");
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Превышено допустимое количество в строке. Указано больше 150000 кодов.'"),
				ЭтотОбъект,
				ПутьКТабличнойЧасти,
				,
				Отказ
			);
		КонецЕсли;
		
		Если ТекущийСпособГенерацииСерийныхНомеров = Неопределено Тогда
			ТекущийСпособГенерацииСерийныхНомеров = ТекущаяСтрока.СпособЗаполненияСерийногоНомера;
		ИначеЕсли ТекущийСпособГенерацииСерийныхНомеров <> ТекущаяСтрока.СпособЗаполненияСерийногоНомера Тогда
			РазныйСпособФормированияНомеров = Истина;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки);
		НайденныеСтроки = СерийныеНомераКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
		
		Если
			ТекущаяСтрока.СпособЗаполненияСерийногоНомера = Перечисления.СпособыЗаполненияСерийногоНомера.Ручной
			И ТекущаяСтрока.Количество <> НайденныеСтроки.Количество()
		Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Количество");
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Несоответствие количества заказываемых кодов маркировки и количества серийных номеров.'"),
				ЭтотОбъект,
				ПутьКТабличнойЧасти,
				,
				Отказ
			);
			
		КонецЕсли;
		
		ДлинаШтрихкода = 14;
		Если НЕ ПустаяСтрока(ТекущаяСтрока.GTIN) И СтрДлина(СокрЛП(ТекущаяСтрока.GTIN)) < ДлинаШтрихкода Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "GTIN");
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'GTIN должен состоять из 14 символов. Дополните недостающие символы нулями слева'"),
				ЭтотОбъект,
				ПутьКТабличнойЧасти,
				,
				Отказ
			);
		КонецЕсли;
		
		Если ЭтоМаркировкаОстатков Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.GTIN)
				И СписокGTIN.Найти(ТекущаяСтрока.GTIN) = Неопределено Тогда
				
				НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("GTIN", ТекущаяСтрока.GTIN));
				
				Если НайденныеСтроки.Количество() > 1 Тогда
					Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
						ДублированиеGTIN.Добавить(СтрокаТовара.НомерСтроки);
					КонецЦикла;
					СписокGTIN.Добавить(ТекущаяСтрока.GTIN);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазныйСпособФормированияНомеров Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Указаны различные способы генерации серийных номеров. Необходимо привести к одному способу.'"),
			ЭтотОбъект,
			, ,
			Отказ
		);
	КонецЕсли;
	
	Если ДублированиеGTIN.Количество() > 0 Тогда
		Результат = Ложь;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Строки таблицы ""Товары"" не уникальны по значению полей (GTIN). Строки:%1'"),
			СтрСоединить(ДублированиеGTIN, ", ")
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	ПроверкаКодовМаркировкиОстатковЛегкойПромышленности(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Пока заполним серийные номера автоматически
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СпособЗаполненияСерийногоНомера) Тогда
			ТекущаяСтрока.СпособЗаполненияСерийногоНомера = Перечисления.СпособыЗаполненияСерийногоНомера.Автоматически;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления
		И (Статус = Перечисления.СтатусыДокументовМаркировки.Отправлен
		ИЛИ Статус = Перечисления.СтатусыДокументовМаркировки.Выполнен) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Заказ на эмиссию кодов маркировки выполнен или отправлен. Данный заказ нельзя удалять.'")
		);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(Ссылка, Статус);
		ЗаписатьНовыеШтрихкоды();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент) КАК Количество
	               |ИЗ
	               |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	               |ГДЕ
	               |	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	               |	И ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровТовары.Номенклатура,
	               |	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Товары.Загрузить(ТаблицаТоваров);
	ТоварнаяГруппа = МаркировкаТоваровСервер.ТоварнаяГруппа(Товары.ВыгрузитьКолонку("Номенклатура"));
	
	ДанныеКонтрагента =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеЗаполнения,
			"Контрагент.ФормаСобственности,Контрагент.Иностранный");
	
	Если Документы.ЗаказКодовМаркировки.ДоступенСпособПринятНаКомиссиюОтФизическогоЛица(ТоварнаяГруппа)
		И ДанныеКонтрагента.КонтрагентФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		И ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		СпособВыпускаВОборот =
			ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.ПринятНаКомиссиюОтФизическогоЛица");
	ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровИмпорт
		ИЛИ ДанныеКонтрагента.КонтрагентИностранный = Истина Тогда
		СпособВыпускаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.ИмпортВРФ");
	Иначе
		СпособВыпускаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.ПроизводствоРФ");
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Корректировка поступления товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	               |	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	КорректировкаПоступленияТовары.Количество * КорректировкаПоступленияТовары.Коэффициент КАК Количество,
	               |	КорректировкаПоступленияТовары.ИдентификаторТовара КАК ИдентификаторТовара
	               |ИЗ
	               |	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	               |ГДЕ
	               |	КорректировкаПоступленияТовары.Ссылка = &Основание
	               |	И КорректировкаПоступленияТовары.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КорректировкаПоступленияКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара
	               |ИЗ
	               |	Документ.КорректировкаПоступления.КодыМаркировки КАК КорректировкаПоступленияКодыМаркировки
	               |ГДЕ
	               |	НЕ КорректировкаПоступленияКодыМаркировки.Возврат
	               |	И КорректировкаПоступленияКодыМаркировки.Ссылка = &Основание";
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = ПакетЗапроса[0].Выгрузить();
	ТаблицаКоличестваКодов = ПакетЗапроса[1].Выгрузить();
	
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		
		СтрокиМаркировки = ТаблицаКоличестваКодов.НайтиСтроки(
			Новый Структура("ИдентификаторТовара,", ТекущаяСтрока.ИдентификаторТовара));
		НужноЗаказать = ТекущаяСтрока.Количество - СтрокиМаркировки.Количество();
		Если НужноЗаказать > 0 Тогда
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Количество = НужноЗаказать;
		КонецЕсли;
		
	КонецЦикла;
	
	ТоварнаяГруппа = МаркировкаТоваровСервер.ТоварнаяГруппа(Товары.ВыгрузитьКолонку("Номенклатура"));
	
	ДанныеКонтрагента =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеЗаполнения,
			"Контрагент.ФормаСобственности,Контрагент.Иностранный");
	СделкаКорректировки = Документы.КорректировкаПоступления.ПолучитьСделку(ДанныеЗаполнения);
	ХозОперацияСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СделкаКорректировки,
		"ХозОперация");
	
	Если Документы.ЗаказКодовМаркировки.ДоступенСпособПринятНаКомиссиюОтФизическогоЛица(ТоварнаяГруппа)
		И ДанныеКонтрагента.КонтрагентФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		И ХозОперацияСделки = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		СпособВыпускаВОборот =
			ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.ПринятНаКомиссиюОтФизическогоЛица");
	ИначеЕсли ХозОперацияСделки = Справочники.ХозОперации.ПоступлениеТоваровИмпорт
		ИЛИ ДанныеКонтрагента.КонтрагентИностранный = Истина Тогда
		СпособВыпускаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.ИмпортВРФ");
	Иначе
		СпособВыпускаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВыпускаВОборот.ПроизводствоРФ");
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

#КонецОбласти

Процедура ЗаписатьНовыеШтрихкоды()
	
	НовыеШтрихкоды = Товары.Выгрузить(, "Номенклатура,GTIN,ХарактеристикаНоменклатуры");
	УдалитьСтроки = Новый Массив;
	Для Каждого Строка Из НовыеШтрихкоды Цикл
		Если ЗначениеЗаполнено(Строка.GTIN) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Строка.GTIN) Тогда
			СтрокаGTIN = Строка(Число(Строка.GTIN));
			Строка.GTIN = СтрЗаменить(СтрокаGTIN, Символы.НПП, "");
		Иначе
			УдалитьСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из УдалитьСтроки Цикл
		НовыеШтрихкоды.Удалить(Строка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	НовыеШтрихкоды.GTIN КАК Штрихкод,
	|	НовыеШтрихкоды.Номенклатура КАК Номенклатура,
	|	НовыеШтрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&НовыеШтрихкоды КАК НовыеШтрихкоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод КАК Штрихкод,
	|	ТаблицаШтрихкодов.Номенклатура КАК Номенклатура,
	|	ТаблицаШтрихкодов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ТаблицаШтрихкодов.Штрихкод = Штрихкоды.Штрихкод
	|			И ТаблицаШтрихкодов.Номенклатура = Штрихкоды.Объект
	|ГДЕ
	|	ЕСТЬNULL(Штрихкоды.GTIN, ИСТИНА)
	|	И Штрихкоды.Объект ЕСТЬ NULL
	|";
	Запрос.УстановитьПараметр("НовыеШтрихкоды", НовыеШтрихкоды);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
			НоваяЗапись.Штрихкод = Выборка.Штрихкод;
			НоваяЗапись.Объект = Выборка.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			НоваяЗапись.GTIN = Истина;
			НоваяЗапись.Запрет = Ложь;
			НоваяЗапись.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаКодовМаркировкиОстатковЛегкойПромышленности(Отказ)
	
	Если НЕ (СпособВыпускаВОборот = Перечисления.СпособыВыпускаВОборот.МаркировкаОстатков
		И ТоварнаяГруппа = Справочники.ТипыМаркировки.ЛегкаяПромышленность) Тогда
		Возврат;
	КонецЕсли;
	
	СписокКодовТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Товары.ВыгрузитьКолонку("КодТНВЭД"), "Код");
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		КодТНВЭД = СписокКодовТНВЭД.Получить(ТекущаяСтрока.КодТНВЭД);
		
		Если СтрНачинаетсяС(КодТНВЭД, "63")
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВозрастнаяКатегория) Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ВозрастнаяКатегория");
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Табличная часть Товары. Строка: %1. Не заполнена возрастная категория.'"),
				ЭтотОбъект,
				ПутьКТабличнойЧасти,
				,
				Отказ);
			
		ИначеЕсли (СтрНачинаетсяС(КодТНВЭД, "42") ИЛИ СтрНачинаетсяС(КодТНВЭД, "61")
			ИЛИ СтрНачинаетсяС(КодТНВЭД, "62") ИЛИ СтрНачинаетсяС(КодТНВЭД, "64"))
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЦелевойПол) Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ЦелевойПол");
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Табличная часть Товары. Строка: %1. Не заполнен целевой пол.'"),
				ЭтотОбъект,
				ПутьКТабличнойЧасти,
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
