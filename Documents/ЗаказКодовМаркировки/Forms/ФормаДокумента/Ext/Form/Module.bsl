
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	СписокВыбора = Элементы.ТоварнаяГруппа.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(
		МаркировкаТоваровСервер.СписокТоварныхГрупп(Объект.Ссылка, "ТипыМаркировки.КодТоварнойГруппы <> """""));
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		
		// Маркировка
		МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
		МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
		// Конец Маркировка
		
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

	УправлениеДиалогомАльфаАвтоКлиент.ПриОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	// Конец Маркировка
	
	УправлениеДиалогомАльфаАвтоСервер.ПриЧтенииНаСервере(ЭтотОбъект);
	ЗаполнитьЭмитировано();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаказКодовМаркировки", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
    РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	НастроитьПараметрыВыбораЭлементовФормы();
	ЗаполнитьЭмитировано();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказКодовМаркировки.ДатаПриИзменении(Объект, ПараметрыДействия);	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказКодовМаркировки.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроизводственногоЗаказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ИдентификаторПроизводственногоЗаказа = Новый УникальныйИдентификатор;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяГруппаПриИзменении(Элемент)
	
	ТоварнаяГруппаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварнаяГруппаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УстановитьДоступность();
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыпускаВОборотПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаКлиенте
Процедура СтатусРасширеннаяПодсказкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Ошибка при отправке запроса'"));
	ПараметрыФормы.Вставить("Сообщение", Объект.ОписаниеОшибки);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСообщенияПользователю",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования,
		, ,
		""
	);
	
	Если НоваяСтрока И (НЕ ОтменаРедактирования) Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.СпособЗаполненияСерийногоНомера =
			ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСерийногоНомера.Автоматически");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И НЕ ТекущиеДанные.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка Тогда
		    
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",ТекущиеДанные.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В таблицу нельзя вводить номенклатуру по которой не ведется учет по маркировке'"),
				,
				ПутьКТабличнойЧасти
			);
			ТекущиеДанные.Номенклатура = Неопределено;
		КонецЕсли;
		
	Документы.ЗаказКодовМаркировки.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказКодовМаркировки.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере()

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СписокШтрихкодовНоменклатуры = ШтрихКодыНоменклатуры(ТекущиеДанные.Номенклатура);
	
	Если СписокШтрихкодовНоменклатуры.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
		
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_ТоварыGTINНачалоВыборИзСпискаЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ПоказатьВыборИзСписка(Обработчик, СписокШтрихкодовНоменклатуры, Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапросКодовМаркировки(Команда)
	
	ИмяДействия = "ОтправкаЗапросаНаПолучениеКодовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("Документ", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("КлючСессииСУЗ", Истина);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект, ИмяДействия));
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьДокумент(
		ЭтотОбъект,
		Объект,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКодовМаркировки(Команда)
	
	ИмяДействия = "ЗагрузкаКодовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("Документ", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ТоварнаяГруппа", ТоварнаяГруппаДокумента(Объект.ТоварнаяГруппа));
	ДополнительныеПараметры.Вставить("КлючСессииСУЗ", Истина);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект, ИмяДействия));
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьДокумент(
		ЭтотОбъект,
		Объект,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Устарела. Удалить процедуру
&НаКлиенте
Процедура ЗаполнитьGTIN(Команда)
	
	ОчиститьСообщения();
	
	// Проверим, что есть с незаполненными GTIN товары
	Если Объект.Товары.НайтиСтроки(Новый Структура("GTIN", "")).Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для всех товарных строк указаны GTIN. Операция отменена.'"), Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Документ", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("ЗаполнитьКодыТоваровОстатковЗавершение", ЭтотОбъект));
	
	ОбменССистемойМаркировкиКлиент.ПолучитьКодыТоваровОстатков(
		ЭтотОбъект,
		Объект,
		ДополнительныеПараметры
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(РезультатОбмена, ДополнительныеПараметры) Экспорт
	
	Если ЭтотОбъект.РежимОбменаСЧестнымЗнаком = 
		ПредопределенноеЗначение("Перечисление.СпособыОбменаСЧестнымЗнаком.Файловый")
		И РезультатОбмена = Истина 
		И ДополнительныеПараметры = "ОтправкаЗапросаНаПолучениеКодовМаркировки" Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовМаркировки.Отправлен");
		ЗаполнитьЭмитировано();
	Иначе
		// Обновить отображение документа
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКодыТоваровОстатковЗавершение(РезультатЗапроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ошибка в результате получения GTIN %1%2'"),
				Символы.ПС,
				РезультатЗапроса.ПодробноеПредставлениеОшибки
			)
		);
	ИначеЕсли РезультатЗапроса.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗапроса = ПолучитьИзВременногоХранилища(РезультатЗапроса.АдресРезультата);
	
	Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
		Если ДанныеЗапроса.УспешныйПоиск Тогда
			Прочитать();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Получение GTIN завершено.'"
				)
			);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'При получении GTIN возникли ошибки. Операция отменена. %1%2'"),
					Символы.ПС,
					ДанныеЗапроса.ТекстОшибки
				)
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКодыТоваровЗавершение()

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	СписокВыбора = Элементы.СпособВыпускаВОборот.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.СпособыВыпускаВОборот.ПроизводствоРФ);
	СписокВыбора.Добавить(Перечисления.СпособыВыпускаВОборот.ИмпортВРФ);
	ТоварнаяГруппа = ТоварнаяГруппаДокумента(Объект.ТоварнаяГруппа);
	ТабачнаяПродукция = МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции();
	ЭтоМолочнаяПродукция = МаркировкаТоваровКлиентСервер.ЭтоТоварнаяГруппаМолочнаяПродукция(ТоварнаяГруппа);
	Если ТабачнаяПродукция.Найти(ТоварнаяГруппа) = Неопределено
		И Не ЭтоМолочнаяПродукция Тогда
		Если Не Документы.ЗаказКодовМаркировки.НеДоступенСпособМаркировкаОстатков(Объект.ТоварнаяГруппа) Тогда
			СписокВыбора.Добавить(Перечисления.СпособыВыпускаВОборот.МаркировкаОстатков);
		КонецЕсли;
		СписокВыбора.Добавить(Перечисления.СпособыВыпускаВОборот.Перемаркировка);
		Если Документы.ЗаказКодовМаркировки.ДоступенСпособПринятНаКомиссиюОтФизическогоЛица(Объект.ТоварнаяГруппа) Тогда
			СписокВыбора.Добавить(Перечисления.СпособыВыпускаВОборот.ПринятНаКомиссиюОтФизическогоЛица);
		КонецЕсли;
	КонецЕсли;
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.СтатусыДокументовМаркировки.Новый);
	СписокВыбора.Добавить(Перечисления.СтатусыДокументовМаркировки.ОтправленЗапросGTIN);
	СписокВыбора.Добавить(Перечисления.СтатусыДокументовМаркировки.ЧастичноЗаполненGTIN);
	СписокВыбора.Добавить(Перечисления.СтатусыДокументовМаркировки.ПолностьюЗаполненGTIN);
	СписокВыбора.Добавить(Перечисления.СтатусыДокументовМаркировки.Отправлен);
	СписокВыбора.Добавить(Перечисления.СтатусыДокументовМаркировки.Выполнен);
	СписокВыбора.Добавить(Перечисления.СтатусыДокументовМаркировки.Отменен);
	
	МаркировкаТоваровСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	УстановитьДоступность();
	
	Элементы.Статус.ОтображениеПодсказки = ?(
		ЗначениеЗаполнено(Объект.ОписаниеОшибки),
		ОтображениеПодсказки.ОтображатьСправа,
		ОтображениеПодсказки.Нет
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИдентификаторЗаказа",
		"Видимость",
		ЭтотОбъект.РежимОбменаСЧестнымЗнаком = ПредопределенноеЗначение("Перечисление.СпособыОбменаСЧестнымЗнаком.ЧерезAPI")
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	// раскрасим эмитировано
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Товары");
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Эмитировано");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.НоменклатураНеЭмитированаЦветТекста
	);
	
	// установим доступность параметров легкой промышленности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыЦелевойПол");
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодТНВЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = 42;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодТНВЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = 61;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодТНВЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = 62;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодТНВЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = 64;
	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ТолькоПросмотр",
		Истина
	);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.НоменклатураНеЭмитированаЦветТекста
	);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст",
		НСтр("ru = '<не заполняется>'")
	);
	
	// установим доступность параметров легкой промышленности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыВозрастнаяКатегория");
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодТНВЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = 63;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ТолькоПросмотр",
		Истина
	);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.НоменклатураНеЭмитированаЦветТекста
	);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст",
		НСтр("ru = '<не заполняется>'")
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПродолжитьВыполнение = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьДоступность()
	
	ЭтоМаркировкаОстатков = (Объект.СпособВыпускаВОборот = Перечисления.СпособыВыпускаВОборот.МаркировкаОстатков);
	ЭтоМаркировкаОстатковШин = ЭтоМаркировкаОстатков
		И Объект.ТоварнаяГруппа = Справочники.ТипыМаркировки.ШиныИАвтопокрышки;
	ЭтоМаркировкаОстатковЛегкойПром = ЭтоМаркировкаОстатков
		И Объект.ТоварнаяГруппа = Справочники.ТипыМаркировки.ЛегкаяПромышленность;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗапроситьGTIN",
		"Доступность",
		ЭтоМаркировкаОстатков
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыТоварныйЗнак",
		"Видимость",
		ЭтоМаркировкаОстатков
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыКодТНВЭД",
		"Видимость",
		ЭтоМаркировкаОстатков
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыМодель",
		"Видимость",
		ЭтоМаркировкаОстатковШин
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыЦелевойПол",
		"Видимость",
		ЭтоМаркировкаОстатковЛегкойПром
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыВозрастнаяКатегория",
		"Видимость",
		ЭтоМаркировкаОстатковЛегкойПром
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСпособВыпускаТоваровВОборот",
		"Видимость",
		ЭтоМаркировкаОстатковЛегкойПром
	);
	
	ОтправленЗаказ = (Объект.Статус = Перечисления.СтатусыДокументовМаркировки.Отправлен
		ИЛИ Объект.Статус = Перечисления.СтатусыДокументовМаркировки.Выполнен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИдентификаторПроизводственногоЗаказа",
		"ТолькоПросмотр",
		ОтправленЗаказ
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗапросКодовМаркировки",
		"Доступность",
		НЕ (ОтправленЗаказ И ЭтотОбъект.РежимОбменаСЧестнымЗнаком = Перечисления.СпособыОбменаСЧестнымЗнаком.ЧерезAPI)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПредупреждение",
		"Видимость",
		ЭтоМаркировкаОстатковШин ИЛИ ЭтоМаркировкаОстатковЛегкойПром
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВвозПослеДатыОбязательнойМаркировки",
		"Видимость",
		ЭтоМаркировкаОстатковЛегкойПром
	);
	
	Если Элементы.ГруппаПредупреждение.Видимость Тогда
		
		СообщениеОПрекращении = Новый Массив;
		СообщениеОПрекращении.Добавить(НСтр("ru = 'На основании Постановления Правительства РФ'"));
		СообщениеОПрекращении.Добавить(НСтр("ru = 'N %1 от 31 декабря 2019 года прекращается регистрация остатков'"));
		СообщениеОПрекращении.Добавить(НСтр("ru = 'нереализованных товаров с %2'"));
		
		НомерПриказа = "";
		ДатаЗавершения = "";
		Если ЭтоМаркировкаОстатковШин Тогда
			НомерПриказа = "1958";
			ДатаЗавершения = "1.03.2021";
		ИначеЕсли ЭтоМаркировкаОстатковЛегкойПром Тогда
			НомерПриказа = "1956";
			ДатаЗавершения = "1.02.2021";
		КонецЕсли;
		
		Элементы.НадписьОстатка.Заголовок =
			СтрШаблон(СтрСоединить(СообщениеОПрекращении, " "), НомерПриказа, ДатаЗавершения);
	КонецЕсли;
	
	ТоварнаяГруппаДокумента = Объект.ТоварнаяГруппа.ТоварнаяГруппа;
	ЭтоТабачнаяПродукция =
		МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции()
			.Найти(ТоварнаяГруппаДокумента) <> Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыМаксимальнаяРозничнаяЦена",
		"Видимость",
		ЭтоТабачнаяПродукция
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПроизводстваЛево",
		"Видимость",
		ЭтоТабачнаяПродукция
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПроизводстваПраво",
		"Видимость",
		ЭтоТабачнаяПродукция
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТипОплаты",
		"Видимость",
		МаркировкаТоваровКлиентСервер.ЭтоТоварнаяГруппаУпакованнойВоды(ТоварнаяГруппаДокумента)
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШтрихКодыНоменклатуры(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ШтрихКоды.ШтрихКод КАК ШтрихКод
	               |ИЗ
	               |	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	               |ГДЕ
	               |	ШтрихКоды.Объект = &Объект
	               |	И ШтрихКоды.GTIN";
	Запрос.УстановитьПараметр("Объект", Номенклатура);
	
	МассивШК = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШтрихКод");
	
	Для Инд = 0 По МассивШК.Количество() - 1 Цикл
		
		ПреобразоватьШтрихкод(МассивШК[Инд]);
		
	КонецЦикла;
	
	СписокШК = Новый СписокЗначений;
	СписокШК.ЗагрузитьЗначения(МассивШК);
	
	Возврат СписокШК;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТоварыGTINНачалоВыборИзСпискаЗавершение(Результат,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	ТекущиеДанные.GTIN = Результат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭмитировано()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКодовМаркировки = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияКодовМаркировки.GTIN КАК GTIN,
	               |	СУММА(1) КАК Количество
	               |ИЗ
	               |	РегистрСведений.СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
	               |ГДЕ
	               |	СостоянияКодовМаркировки.ДокументОснование = &ДокументОснование
	               |	И СостоянияКодовМаркировки.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияКодовМаркировки.Эмитирован), ЗНАЧЕНИЕ(Перечисление.СостоянияКодовМаркировки.ЭмитированВыпущен))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияКодовМаркировки.GTIN";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаКодовМаркировки = РезультатЗапроса.Выгрузить();
	Иначе
		ТаблицаКодовМаркировки = Неопределено;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("GTIN");
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ТекущаяСтрока.Эмитировано = 0;
		Если ЗначениеЗаполнено(ТекущаяСтрока.GTIN)
			И ТаблицаКодовМаркировки <> Неопределено Тогда
			
			СтруктураПоиска.GTIN = ТекущаяСтрока.GTIN;
			НайденныеСтроки = ТаблицаКодовМаркировки.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекущаяСтрока.Эмитировано = НайденныеСтроки[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварнаяГруппаДокумента(ТоварнаяГруппа)
	
	Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТоварнаяГруппа,
		"ТоварнаяГруппа");
	
КонецФункции

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения.Свойство("Действие") И НЕ ТолькоПросмотр Тогда
		ОбработатьШтрихкод(РезультатОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПреобразоватьШтрихкод(Штрихкод)
	
	ДлинаШтрихкода = 14;
	Пока СтрДлина(Штрихкод) < ДлинаШтрихкода Цикл
		Штрихкод = "0" + Штрихкод;
	КонецЦикла;
	
	Если СтрДлина(Штрихкод) > ДлинаШтрихкода Тогда
		Штрихкод = Лев(Штрихкод, ДлинаШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкод(ПараметрыДействия)
	
	// Найдем такой же по GTIN 
	Штрихкод = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ШтрихКод", "");
	СтруктураШтрихкода = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(Штрихкод);
	Штрихкод = СтруктураШтрихкода.GTIN;
	ПреобразоватьШтрихкод(Штрихкод);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("GTIN", Штрихкод);
	СтрокаПоиска = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокаПоиска.Количество() > 0 Тогда
		СтрокаПоиска[0].Количество = СтрокаПоиска[0].Количество + 1;
		Возврат;
	КонецЕсли;
	
	СтруктураНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НайденныйОбъект", Неопределено);
	
	НоваяСтрока = Объект.Товары.Добавить();
	
	Если ЗначениеЗаполнено(СтруктураНоменклатуры)
		И ТипЗнч(СтруктураНоменклатуры.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		НоваяСтрока.Номенклатура = СтруктураНоменклатуры.Объект;
		Документы.ЗаказКодовМаркировки.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
		
		Если СтруктураНоменклатуры.Свойство("ХарактеристикаНоменклатуры") Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = СтруктураНоменклатуры.ХарактеристикаНоменклатуры;
			Документы.ЗаказКодовМаркировки.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, НоваяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.GTIN = Штрихкод;
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.СпособЗаполненияСерийногоНомера = Перечисления.СпособыЗаполненияСерийногоНомера.Автоматически;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти