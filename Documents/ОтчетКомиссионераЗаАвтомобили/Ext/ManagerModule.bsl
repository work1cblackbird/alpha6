// Модуль менеджера документа "Отчет комиссионера за автомобиль"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Движения документа выполненные по регистру ГТД
//
// Параметры:
// 	Сам - Документ.Ссылка - документ по которому выбираются движения регистра ГТД
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат запроса к регистру ГТД.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПартииТоваровОтданные.Номенклатура,
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданные.ГТД,
		|	ПартииТоваровОтданные.Партия,
		|	СУММА(ПартииТоваровОтданные.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
		|ГДЕ
		|	ПартииТоваровОтданные.Регистратор = &Сам
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровОтданные.ГТД,
		|	ПартииТоваровОтданные.Партия,
		|	ПартииТоваровОтданные.Номенклатура,
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры"
	);
	Запрос.УстановитьПараметр("Сам", Сам);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина; 
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетКомиссионераЗаАвтомобили.ДополнительныеРеквизиты КАК ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты
	|ГДЕ
	|	ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОтчетКомиссионераЗаАвтомобили");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;  
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();  
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ОтчетКомиссионераЗаАвтомобили""";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
			Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств (Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ОтчетКомиссионераЗаАвтомобили.ДополнительныеРеквизиты КАК ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты
	|ГДЕ
	|	ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И ОтчетКомиссионераЗаАвтомобилиДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Автомобили.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Добавим оборудование автомобиля
Процедура ДобавитьОборудованиеАвтомобиля(Объект, Знач Автомобиль,ДокументПередачи,ИзменятьЦену) Экспорт
	ДокументОбъектСтруктура=Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка",Объект.Ссылка);
	ДокументОбъектСтруктура.Вставить("Дата",Объект.Дата);
	ДокументОбъектСтруктура.Вставить("Автомобили",Объект.Автомобили.Выгрузить());
	ДокументОбъектСтруктура.Вставить("Товары",Объект.Товары.Выгрузить());
	ЗащищенныеФункцииАльфаАвтоСервер.ОтчетКомиссионераЗаАвтомобилиДобавитьОборудованиеАвтомобиля(ДокументОбъектСтруктура,Автомобиль,ДокументПередачи);
	
	Если НЕ ДокументОбъектСтруктура.Свойство("ТаблицаТоваров") Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ДокументОбъектСтруктура.Товары);
	
	Если ИзменятьЦену Тогда
		ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,Объект.Дата);
		КурсУпр		   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	Для Каждого СтрокаТоваров Из ДокументОбъектСтруктура.ТаблицаТоваров Цикл
		СтрокиОборудования = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля,Номенклатура,ХарактеристикаНоменклатуры",ДокументОбъектСтруктура.ИдентификаторАвтомобиля,СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
		Если СтрокиОборудования.Количество()=0 Тогда 
			НоваяСтрокаТоваров = Объект.Товары.Добавить();
			НоваяСтрокаТоваров.ИдентификаторАвтомобиля = ДокументОбъектСтруктура.ИдентификаторАвтомобиля;
			НоваяСтрокаТоваров.Номенклатура = СтрокаТоваров.Номенклатура;
			НоваяСтрокаТоваров.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрокаТоваров);
		Иначе
			НоваяСтрокаТоваров = СтрокиОборудования[0];
		КонецЕсли; 
		НоваяСтрокаТоваров.Количество = СтрокаТоваров.Количество/?(Не ЗначениеЗаполнено(НоваяСтрокаТоваров.Коэффициент),1,НоваяСтрокаТоваров.Коэффициент);
		Если ИзменятьЦену Тогда
			НоваяСтрокаТоваров.СуммаВсего=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаПродажиУпр,ВалютаУпр,КурсУпр,Объект.ВалютаДокумента,Объект.КурсДокумента);
		КонецЕсли;
		ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрокаТоваров);
	КонецЦикла;
КонецПроцедуры

// Расчитать вознаграждения
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасчитатьВознаграждение(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Если Объект.ДоговорВзаиморасчетов.ТипСуммыКомиссии = 0 Тогда
			Строка.Вознаграждение=(Строка.СуммаВсего*Объект.ДоговорВзаиморасчетов.ПроцентКомиссионногоВознаграждения)/100;
		ИначеЕсли Объект.ДоговорВзаиморасчетов.ТипСуммыКомиссии = 1 Тогда
			Строка.Вознаграждение = Мин(Объект.ДоговорВзаиморасчетов.СуммаКомиссионногоВознаграждения, Строка.СуммаВсего); 
		КонецЕсли;
	Иначе
		Строка.Вознаграждение=0;
	КонецЕсли;
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.ИдентификаторАвтомобиля");
	ОбязательныеРеквизиты.Добавить("Автомобили.Количество");
	
	ОбязательныеРеквизиты.Добавить("Товары.ИдентификаторАвтомобиля");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ИдентификаторАвтомобиля");
	
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");

	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	//
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДокументПередачи", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("Автомобили", КонтролируемыеРеквизитыТЧ);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыИ

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ДоговорВзаиморасчетов.Пустая() Тогда
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Если Объект.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.СКомиссионером И
			Объект.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.Прочее Тогда
			Объект.ДоговорВзаиморасчетов=Неопределено;
		КонецЕсли; 
	КонецЕсли;
	
	Если  (НЕ Объект.ДоговорВзаиморасчетов.Пустая()) И
			 (Объект.ДоговорВзаиморасчетов.ВидДоговора=Перечисления.ВидыДоговоров.СКомиссионером) Тогда
			Если Объект.Автомобили.Количество()>0 Тогда
				// Если Вопрос("Перерассчитать сумму комиссионного вознаграждения?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					// Пройдемся по ТЧ и рассчитаем сумму комиссионного вознаграждения.
					Для Каждого СтрокаТЧ Из Объект.Автомобили Цикл
						РасчитатьВознаграждение(Объект, СтрокаТЧ, ПараметрыДействия);
					КонецЦикла;
					Для Каждого СтрокаТЧ Из Объект.Товары Цикл
						РасчитатьВознаграждение(Объект, СтрокаТЧ, ПараметрыДействия);
					КонецЦикла;
				// КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
		Строка.СтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	АвтомобилиОтданныеОстатки.ДокументПередачи
	|ИЗ
	|	РегистрНакопления.АвтомобилиОтданные.Остатки(&НаМомент) КАК АвтомобилиОтданныеОстатки
	|ГДЕ
	|	АвтомобилиОтданныеОстатки.Автомобиль = &Автомобиль
	|	И АвтомобилиОтданныеОстатки.Контрагент = &Контрагент
	|	И АвтомобилиОтданныеОстатки.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов");
	Запрос.УстановитьПараметр("НаМомент",
		?(Объект.Ссылка.Пустая(),
			Новый МоментВремени(КонецДня(Объект.Дата)),
			Новый Граница(Объект.Дата, ВидГраницы.Исключая))
	);
	Запрос.УстановитьПараметр("Автомобиль", Строка.Автомобиль);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Строка.ДокументПередачи = Выборка.ДокументПередачи;
		ДобавитьОборудованиеАвтомобиля(Объект, Строка.Автомобиль, Строка.ДокументПередачи, Истина);
	Иначе
		Строка.ДокументПередачи = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	АвтомобилиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Если Строка.Количество<>0 Тогда
		Строка.Цена=Строка.Сумма/Строка.Количество;
	КонецЕсли;
	
	РасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС=Истина;
	Иначе
		ЦенаВключаетНДС=Объект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли; 
	Если ЦенаВключаетНДС Тогда
		// Цена уже содержит НДС
		Строка.Сумма=Строка.СуммаВсего;
	Иначе
		// НДС в цену не включен
		Строка.Сумма=(100*Строка.СуммаВсего)/(100+Строка.СтавкаНДС.Ставка);;
	КонецЕсли;
	
	РасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	Строка.Сумма=Строка.Цена*Строка.Количество;
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС=Истина;
	Иначе
		ЦенаВключаетНДС=Объект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли; 
	Если ЦенаВключаетНДС Тогда
		// Цена уже содержит НДС - Сумма всего равна сумме
		Строка.СуммаНДС=(Строка.Сумма*Строка.СтавкаНДС.Ставка)/(100+Строка.СтавкаНДС.Ставка);
		Строка.СуммаВсего=Строка.Сумма;
	Иначе
		// НДС в цену не включен - Получим сумму НДС
		Строка.СуммаНДС=(Строка.Сумма*Строка.СтавкаНДС.Ставка)/100;
		Строка.СуммаВсего=Строка.Сумма+Строка.СуммаНДС;
	КонецЕсли;
	
	РасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ передачи"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиДокументПередачи(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	Если ЗначениеЗаполнено(Строка.ДокументПередачи) Тогда
		СтруктураОтбора=Новый Структура("Автомобиль");
		СтруктураОтбора.Автомобиль=Строка.Автомобиль;
		ПоискПоДокументуПередачи=Строка.ДокументПередачи.Автомобили.НайтиСтроки(СтруктураОтбора);
		Если ПоискПоДокументуПередачи.Количество()>0 Тогда
			Если ТипЗнч(Строка.ДокументПередачи)=Тип("ДокументСсылка.ИнвентаризацияАвтомобилей") Тогда
				СуммаПередачи=ПоискПоДокументуПередачи[0].Сумма;
			Иначе
				СуммаПередачи=ПоискПоДокументуПередачи[0].СуммаВсего;
			КонецЕсли;
			Если ТипЗнч(Строка.ДокументПередачи)=Тип("ДокументСсылка.ВводОстатковАвтомобилей") Тогда
				СтруктураОтбора=Новый Структура("ИдентификаторАвтомобиля",ПоискПоДокументуПередачи[0].ИдентификаторАвтомобиля);
				ПоискПоДокументуПередачи=Строка.ДокументПередачи.Опции.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаОпций Из ПоискПоДокументуПередачи Цикл
					СуммаПередачи=СуммаПередачи+СтрокаОпций.СуммаВсего;
				КонецЦикла; 
			КонецЕсли; 
			СуммаПередачи=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПередачи,Строка.ДокументПередачи.ВалютаДокумента,Строка.ДокументПередачи.КурсДокумента,Объект.ВалютаДокумента,Объект.КурсДокумента);
			Если Строка.СуммаВсего<>СуммаПередачи Тогда
				Строка.СуммаВсего=СуммаПередачи;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	ДобавитьОборудованиеАвтомобиля(Объект, Строка.Автомобиль,Строка.ДокументПередачи,Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		// Если имеем дело с автомобилем - обработаем локально
		// Установим количество.
		Строка.Количество = 1;
		Строка.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		Строка.Коэффициент = 1;
		// Заполним ставку НДС
		Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда 
			Строка.СтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
		КонецЕсли;
	Иначе
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	// А вот тут мы загрузим те цены, по которым оборудование было отдано на комиссию
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ПартииТоваровОтданные.СуммаУпр),0) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
	|ГДЕ
	|	ПартииТоваровОтданные.ВидДвижения = &ВидДвиженияПриход
	|	И ПартииТоваровОтданные.ДокументПередачи = &ДокументПередачи
	|	И ПартииТоваровОтданные.Номенклатура = &Номенклатура
	|	И ПартииТоваровОтданные.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("ВидДвиженияПриход",ВидДвиженияНакопления.Приход);
	// Найдем документ, согласно которого был продан автомобиль
	ПараметрыОтбора = Новый Структура("ИдентификаторАвтомобиля", Строка.ИдентификаторАвтомобиля);
	СтрокиАвтомобиля = Объект.Автомобили.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиАвтомобиля.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("ДокументПередачи", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("ДокументПередачи", СтрокиАвтомобиля[0].ДокументПередачи);
	КонецЕсли; 
	Запрос.УстановитьПараметр("Номенклатура",Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",Строка.ХарактеристикаНоменклатуры);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
		Если Не ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,Объект.Дата);
			КурсУпр		   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр        = Объект.КурсВалютыУпр;
		КонецЕсли;
		Строка.СуммаВсего=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаУпр,ВалютаУпр,КурсУпр,Объект.ВалютаДокумента,Объект.КурсДокумента);
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РасчитатьВознаграждение(Объект, Строка, ПараметрыДействия);
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ОтчетКомиссионераЗаАвтомобили");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;

	ВыборДоговора 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговора.Обязательный 		= Истина;
	ВыборДоговора.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать договор взаиморасчетов.'");
	ВыборДоговора.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Новый Структура("ХозОперация", "ХозОперация")); 
	
	Команда 						= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 				= "АвтомобилиПодменюЗаполнения";
	Команда.Представление			= НСтр("ru = 'Заполнить по договору комиссии'");
	Команда.Идентификатор			= "АвтомобилиЗаполнитьПоДоговоруКомиссии";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговора);

КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДоговоруКомиссии.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДоговоруКомиссии.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по договору комиссии
//
Функция АвтомобилиЗаполнитьПоДоговоруКомиссии(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	АвтомобилиОтданныеОстатки.Автомобиль КАК Автомобиль,
	|	АвтомобилиОтданныеОстатки.ДокументПередачи КАК ДокументПередачи,
	|	АвтомобилиОтданныеОстатки.КоличествоОстаток КАК Количество,
	|	АвтомобилиОтданныеОстатки.СуммаУпрОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.АвтомобилиОтданные.Остатки(&Момент,Контрагент=&Контрагент И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов) КАК АвтомобилиОтданныеОстатки"
	);
	МоментВремени = ?(ЗначениеЗаполнено(Объект.Дата),
						Новый Граница(Новый МоментВремени(Объект.Дата), ВидГраницы.Исключая),
						Новый Граница(Новый МоментВремени(ТекущаяДатаСеанса()), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ТаблицаАвтомобилей = Запрос.Выполнить().Выгрузить();
	
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
	Если Не ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,Объект.Дата);
		КурсУпр		   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр        = Объект.КурсВалютыУпр;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из ТаблицаАвтомобилей Цикл
		НоваяСтрока                         = Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль              = СтрокаТЧ.Автомобиль;
		НоваяСтрока.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество              = СтрокаТЧ.Количество;
		НоваяСтрока.СуммаВсего              = ?(СтрокаТЧ.Сумма=NULL,0,РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.Сумма,ВалютаУпр,КурсУпр,Объект.ВалютаДокумента,Объект.КурсДокумента));
		АвтомобилиСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.ДокументПередачи        = СтрокаТЧ.ДокументПередачи;
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			НоваяСтрока.Вознаграждение = НоваяСтрока.СуммаВсего * Объект.ДоговорВзаиморасчетов.ПроцентКомиссионногоВознаграждения/100;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьПоДоговоруКомиссии()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ОтчетКомиссионераЗаАвтомобили",
		"ОтчетКомиссионераЗаАвтомобили",
		НСтр("ru = 'Отчет комиссионера за автомобили'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетКомиссионераЗаАвтомобили") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ОтчетКомиссионераЗаАвтомобили",
															"Отчет комиссионера за автомобили",
															ПечатьОтчетКомиссионераЗаАвтомобили(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ОтчетКомиссионераЗаАвтомобили"
// Возвращает сформированный табличный документ:
Функция ПечатьОтчетКомиссионераЗаАвтомобили(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ОтчетКомиссионераЗаАвтомобили.ПФ_MXL_ОтчетКомиссионераЗаАвтомобили");
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеКомитента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеКомиссионера = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// заполняем заголовок колонки НДС по типу цен
		Параметры = Новый Структура("НДС");
		Параметры.НДС = "НДС";
		Если Документ.ТипЦен.ЦенаВключаетНДС
			 И НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда	// Если НДС включен
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Параметры.Заполнить(Параметры);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим области строки
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// подготовим дополнительную таблицу
		ТаблицаТоваровПоАвтомобилям = Документ.Товары.Выгрузить();
		ТаблицаТоваровПоАвтомобилям.Свернуть("ИдентификаторАвтомобиля", "Сумма,СуммаНДС,СуммаВсего");
		
		// перебор строк
		ВыборкаТабличнойЧасти = Документ.Автомобили.Выгрузить();
		Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// предварительная обработка строки ТЧ
			СтрокаТабличнойЧастиТовары = ТаблицаТоваровПоАвтомобилям.Найти(СтрокаТабличнойЧасти.ИдентификаторАвтомобиля,
				"ИдентификаторАвтомобиля");
			Если СтрокаТабличнойЧастиТовары <> Неопределено Тогда
				СтрокаТабличнойЧасти.Сумма		= СтрокаТабличнойЧасти.Сумма		+ СтрокаТабличнойЧастиТовары.Сумма;
				СтрокаТабличнойЧасти.СуммаНДС	= СтрокаТабличнойЧасти.СуммаНДС		+ СтрокаТабличнойЧастиТовары.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаВсего	= СтрокаТабличнойЧасти.СуммаВсего	+ СтрокаТабличнойЧастиТовары.СуммаВсего;
			КонецЕсли;
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТабличнойЧасти,
				Документ);
			СтруктураСтроки.Вставить("Вознаграждение", Формат(СтрокаТабличнойЧасти.Вознаграждение, ФорматВыводаСуммы));
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТабличнойЧасти) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомиссионераЗаАвтомобили_ОтчетКомиссионераЗаАвтомобили";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ТОРГ-12"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" , "");
	ДанныеОбъекта.Вставить("ВидДеятельностиПоОКДП"  , Объект.Организация.КодПоОКДП);
	
	// перебор строк
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетКомиссионераЗаАвтомобилиТовары.ИдентификаторАвтомобиля,
	               |	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.СуммаВсего) КАК СуммаВсего
	               |ПОМЕСТИТЬ ОборудованиеАвтомобиля
	               |ИЗ
	               |	Документ.ОтчетКомиссионераЗаАвтомобили.Товары КАК ОтчетКомиссионераЗаАвтомобилиТовары
	               |ГДЕ
	               |	ОтчетКомиссионераЗаАвтомобилиТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтчетКомиссионераЗаАвтомобилиТовары.ИдентификаторАвтомобиля
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.НомерСтроки КАК НомерСтроки,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль КАК Номенклатура,
	               |	"""" КАК ХарактеристикаНоменклатуры,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль.Наименование КАК ТоварНаименование,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль.VIN КАК Код,
	               |	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	               |	""796"" КАК КодЕдиницаИзмерения,
	               |	1 КАК Количество,
	               |	1 КАК Коэффициент,
	               |	1 КАК КоличествоБазовое,
	               |	0 КАК Сумма,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) КАК СуммаВсего,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)) КАК СуммаБезНДС,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)) КАК ЦенаБезНДС,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0) КАК СуммаНДС,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СтавкаНДС КАК СтавкаНДС,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Цена
	               |ИЗ
	               |	Документ.ОтчетКомиссионераЗаАвтомобили.Автомобили КАК ОтчетКомиссионераЗаАвтомобилиАвтомобили
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОборудованиеАвтомобиля КАК ОборудованиеАвтомобиля
	               |		ПО ОтчетКомиссионераЗаАвтомобилиАвтомобили.ИдентификаторАвтомобиля = ОборудованиеАвтомобиля.ИдентификаторАвтомобиля,
	               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |ГДЕ
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.НомерСтроки,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль.VIN,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СтавкаНДС,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль.Наименование,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0),
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)),
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0),
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Цена,
	               |	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0))";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);

	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		?(НЕ ЗначениеЗаполнено(ДатаОтгрузки), """___""____________ 20___", Формат(ДатаОтгрузки, "ДЛФ=DD"))
	);
	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
		
	ДанныеОбъекта.Вставить("Грузоотправитель"      , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"       , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" ,  ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"       , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"      , ?(ТипЗнч(ДанныеОбъекта.Плательщик) = Тип("СправочникСсылка.ПодразделенияКомпании"), ДанныеОбъекта.Плательщик.Организация.КодПоОКПО, ДанныеОбъекта.Плательщик.КодПоОКПО));
	
	ДанныеОбъекта.Вставить("Руководитель"     	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Принял"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("ИмяТабличнойЧасти", "Автомобили");
	ДанныеОбъекта.Вставить("ПропуститьПересчетПоВзаиморасчетам", Истина);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ОтчетКомиссионераЗаАвтомобили);

КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВозвратПоставщикуАвтомобилей - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;

	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Автомобили, Товары");
	
КонецФункции

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОтчетКомиссионераЗаАвтомобили - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары, Автомобили");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
		|	ОтчетКомиссионераЗаАвтомобили.Организация КАК Организация,
		|	ОтчетКомиссионераЗаАвтомобили.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ОтчетКомиссионераЗаАвтомобили.Ссылка КАК Ссылка,
		|	ОтчетКомиссионераЗаАвтомобили.Дата КАК Дата,
		|	ОтчетКомиссионераЗаАвтомобили.ХозОперация КАК ХозОперация,
		|	ОтчетКомиссионераЗаАвтомобили.ДокументОснование КАК ДокументОснование,
		|	ОтчетКомиссионераЗаАвтомобили.Контрагент КАК Контрагент,
		|	ОтчетКомиссионераЗаАвтомобили.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ОтчетКомиссионераЗаАвтомобили.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
		|	ОтчетКомиссионераЗаАвтомобили.Ссылка КАК Сделка,
		|	ОтчетКомиссионераЗаАвтомобили.СуммаДокумента КАК Сумма,
		|	ОтчетКомиссионераЗаАвтомобили.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ОтчетКомиссионераЗаАвтомобили.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
		|	ОтчетКомиссионераЗаАвтомобили.ВалютаДокумента КАК ВалютаДокумента,
		|	ОтчетКомиссионераЗаАвтомобили.КурсДокумента КАК КурсДокумента,
		|	ОтчетКомиссионераЗаАвтомобили.КурсВалютыУпр КАК КурсВалютыУпр,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
		|	&ВалютаРегл КАК ВалютаРегл,
		|	&ВалютаУпр КАК ВалютаУпр
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ОтчетКомиссионераЗаАвтомобили КАК ОтчетКомиссионераЗаАвтомобили
		|ГДЕ
		|	ОтчетКомиссионераЗаАвтомобили.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.ХозОперация КАК ХозОперация,
		|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
		|	ДанныеДокумента.Сделка КАК Сделка,
		|	ДанныеДокумента.Сумма КАК Сумма,
		|	ДанныеДокумента.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
		|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
		|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
		|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
		|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
		|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
		|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
		|	КОНЕЦ КАК КурсВалютыУпр,
		|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
		|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
		|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
		|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
		|ПОМЕСТИТЬ Задолженность
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
		|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
		|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
		|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма - Задолженность.СуммаВознаграждения КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	Запрос.УстановитьПараметр("Ссылка", ДвиженияДокумента.ДляПроведения.Ссылка);
	
	ДанныеОбОплате = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеОбОплате.Следующий()
		ИЛИ ДанныеОбОплате.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	НоваяЗапись = РасчетыСКонтрагентами.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОбОплате);
	НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяЗапись.Период = ДанныеОбОплате.Дата;
	НоваяЗапись.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
	НоваяЗапись.ДокументРасчетов = ДанныеОбОплате.Сделка;
	
	НоваяЗапись.Сумма = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ДанныеОбОплате.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаДоговора,
			ДанныеОбОплате.КурсВалютыВзаиморасчетов),
		2);
	НоваяЗапись.СуммаУпр = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ДанныеОбОплате.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаУпр,
			ДанныеОбОплате.КурсВалютыУпр),
		2);
	НоваяЗапись.СуммаБаз = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ДанныеОбОплате.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаРегл,
			ДанныеОбОплате.КурсВалютыРегл),
		2);
	
	НоваяЗапись.Курс = ДанныеОбОплате.КурсДокумента;
	НоваяЗапись.ВалютаПлатежа = ДанныеОбОплате.ВалютаДокумента;
	НоваяЗапись.СпособЗачета = ДанныеОбОплате.СпособЗачетаАвансов;
	НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности;
	НоваяЗапись.Активность = Истина;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли