// Модуль менеджера документа "Перемещение товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатацию);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦен);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Переоценка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеДопРасходов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПеремещениеТоваров);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	Если Объект.ИспользоватьТоварыВПути Тогда
		
		СуммаДокумента = 0;
		
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		СуммаДокумента = Объект.Товары.Итог("СуммаВсего");
		
	ИначеЕсли ЕстьРеквизит(Объект, "СуммаСписания", "Товары") Тогда
		
		СуммаДокумента = Объект.Товары.Итог("СуммаСписания");
		
	ИначеЕсли Объект.Проведен Тогда
		
		СуммаДокумента = Объект.СуммаДокумента;
		
	Иначе
		
		СуммаДокумента = 0;
		
	КонецЕсли;
	
	ИтогиОперации = Новый Структура("СуммаДокумента", СуммаДокумента);
	
	Если Не Расширенные Тогда
		
		Возврат ИтогиОперации;
		
	КонецЕсли;
	
	// Производим добавление сведений о розничной сумме только в случае если выбран розничный склад.
	Если
		ЗначениеЗаполнено(Объект.СкладКомпании)
		И ТипЗнч(Объект.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании")
		И Объект.СкладКомпании.Розничный
		И Не Объект.ИспользоватьТоварыВПути
	Тогда
		
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		
		ПроцентНаценки = 0;
		
		Если ИтогиОперации.СуммаДокумента <> 0 Тогда
			
			ПроцентНаценки = Окр((ИтогиОперации.СуммаРозничная / ИтогиОперации.СуммаДокумента) - 1, 2) * 100;
			
		КонецЕсли;
		
		ИтогиОперации.Вставить("ПроцентНаценки", ПроцентНаценки);
		
	КонецЕсли;

	Возврат ИтогиОперации;
	
КонецФункции

Функция ОстаткиЗаказовДляЗакрытиеЗаказовПокупателя(ДокументОбъект, Товары, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	ТекстПорядка = "";
	ТекстОтбора = "(Контрагент=&Контрагент)";
	
	Если ЕстьРеквизит(ДокументОбъект, "ДокументОснование") Тогда
		
		ДокументОснование = ДокументОбъект.ДокументОснование;
		
	КонецЕсли;
	
	ДоступныеТипыОснований = Новый Массив();
	ДоступныеТипыОснований.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	ДоступныеТипыОснований.Добавить(Тип("ДокументСсылка.ЗаказВнутренний"));
	
	Если
		ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
		И ДоступныеТипыОснований.Найти(ТипЗнч(ДокументОбъект.ДокументОснование)) <> Неопределено
	Тогда
		
		ТекстПорядка =
			"	ВЫБОР
			|		КОГДА ЗаказПокупателя = &ДокументОснование
			|		ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ ВОЗР,";
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
	КонецЕсли;
	
	ДокументОбъектПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
	ЗакрытиеЗаказовПоПодразделению = ПолучитьЗначениеУчетнойПолитики("ЗакрытиеЗаказовПоПодразделению",
		ДокументОбъектПодразделениеКомпании, ДокументОбъект.Дата);
	
	Если ЗакрытиеЗаказовПоПодразделению Тогда
		
		ТекстОтбора = ТекстОтбора
			+ "И (Заказ.ПодразделениеКомпании В ИЕРАРХИИ(&ДокументОбъектПодразделениеКомпании))";
		
	КонецЕсли;
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Контрагент КАК Контрагент,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Заказано КАК Заказано,
	|	ЗаказыПокупателейОстатки.Сумма    КАК Сумма,
	|	ЗаказыПокупателейОстатки.СуммаУпр КАК СуммаУпр,
	|	ЗаказыПокупателейОстатки.Количество КАК Количество,
	|	ЗаказыПокупателейОстатки.Резерв КАК Резерв,
	|	ЗаказыПокупателейОстатки.РезервСвободный КАК РезервСвободный,
	|	ЗаказыПокупателейОстатки.СкладЗаказа КАК СкладЗаказа,
	|	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладКомпании,
	|	ЗаказыПокупателейОстатки.Приоритет КАК Приоритет,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата КАК ЗаказПокупателяДата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Контрагент КАК Контрагент,
	|		ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Заказано,
	|		СУММА(ЗаказыПокупателейОстатки.СуммаОстаток)    КАК Сумма,
	|		СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) КАК СуммаУпр,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|				ЗаказыПокупателейОстатки.РезервОстаток
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК Количество,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|				ЗаказыПокупателейОстатки.РезервОстаток
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК Резерв,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|				ЗаказыПокупателейОстатки.РезервСвободныйОстаток
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК РезервСвободный,
	|		ЗаказыПокупателейОстатки.Заказ.СкладКомпании КАК СкладЗаказа,
	|		&СкладКомпании КАК СкладКомпании,
	|		1 КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,
	|			("+ТекстОтбора+")
	|			И Номенклатура В (&Номенклатура) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) ИЛИ ХарактеристикаНоменклатуры=&ПустаяХарактеристика)
	|		) КАК ЗаказыПокупателейОстатки
	|	ГДЕ
	|		((ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании
	|		И ЗаказыПокупателейОстатки.РезервОстаток > 0)
	|		ИЛИ ЗаказыПокупателейОстатки.Заказ.СкладКомпании = ЗаказыПокупателейОстатки.СкладКомпании)
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателейОстатки.Контрагент,
	|		ЗаказыПокупателейОстатки.Заказ,
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Контрагент,
	|		ЗаказыПокупателейОстатки.Заказ,
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|		ЗаказыПокупателейОстатки.СуммаОстаток,
	|		ЗаказыПокупателейОстатки.СуммаУпрОстаток,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток,
	|		0,
	|		0,
	|		ЗаказыПокупателейОстатки.Заказ.СкладКомпании,
	|		ЗаказыПокупателейОстатки.Заказ.СкладКомпании,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(&Момент,
	|			("+ТекстОтбора+")
	|			И Номенклатура В (&Номенклатура) И (ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) ИЛИ ХарактеристикаНоменклатуры=&ПустаяХарактеристика)
	|		) КАК ЗаказыПокупателейОстатки
	|	ГДЕ
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток > 0
	|
	|) КАК ЗаказыПокупателейОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	"+ТекстПорядка+"
	|	Приоритет УБЫВ,
	|	ЗаказПокупателяДата
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ДополнительныеСвойства.ДляПроведения.РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		Запрос.УстановитьПараметр("Момент", Неопределено);
		
	Иначе
		
		Запрос.УстановитьПараметр("Момент", ДокументОбъект.МоментВремени());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель);
	Запрос.УстановитьПараметр("ДокументОбъектПодразделениеКомпании", ДокументОбъектПодразделениеКомпании);
	Запрос.УстановитьПараметр("СкладКомпании", ДокументОбъект.СкладКомпании);
	Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДокументОбъект.Дата));
	ЗначенияБлокировки.Вставить("Контрагент", ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель);
	
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", Товары);
	
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Заполняет резервами подразделения
//
// Параметры:
//	Объект - заполняемый документ перемещения товаров
//  ЗаказВнутренний - ДокументСсылка - ДокументОснование.
//
Процедура ЗаполнитьРезервамиПодразделения(Объект, ЗаказВнутренний) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	МоментВремени = Новый МоментВремени(Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				 |		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
				 |		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				 |		ЗаказыПокупателейОстатки.РезервОстаток/ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Количество
				 |	ИЗ
				 |		РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Объект.Ссылка.Пустая(),"","&НаМомент")+",
				 |		Заказ.ПодразделениеКомпании = &ПодразделениеКомпании"+?(ЗаказВнутренний=Неопределено,""," И Заказ = &Заказ")
				 		+ ?(ТипЗнч(Объект.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании")," И СкладКомпании = &СкладКомпании ","") + "
				 |	) КАК ЗаказыПокупателейОстатки ";
				 
	Запрос.УстановитьПараметр("НаМомент",				МоментВремени);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", 	Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Заказ", 					ЗаказВнутренний);
	Запрос.УстановитьПараметр("СкладКомпании",			Объект.СкладКомпании);
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если ЗаказВнутренний <> Неопределено Тогда

		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателей.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателей.ЗаказаноОстаток КАК Заказано,
		|	ЗаказыПокупателей.СуммаУпрОстаток КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Объект.Ссылка.Пустая(),"","&НаМомент")+", Заказ = &Заказ) КАК ЗаказыПокупателей";
		
		ВыборкаЗаказа = Запрос.Выполнить().Выбрать();
		ВалютаУпр     = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		
	Иначе
		
		ВыборкаЗаказа = Неопределено;
		
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Документы.ПеремещениеТоваров.ТоварыНоменклатураПриИзменении(Объект, СтрокаТоваров);
		
		Если ВыборкаЗаказа <> Неопределено Тогда
			
			ВыборкаЗаказа.Сбросить();
			
			Если ВыборкаЗаказа.НайтиСледующий(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТоваров.Номенклатура, СтрокаТоваров.ХарактеристикаНоменклатуры)) Тогда
				
				СтрокаТоваров.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.Количество*ВыборкаЗаказа.СуммаУпр/ВыборкаЗаказа.Заказано, ВалютаУпр, Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
				Документы.ПеремещениеТоваров.ТоварыСуммаВсегоПриИзменении(Объект, СтрокаТоваров);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРезервамиПодразделения()

// Заполняет резервами под заказ покупателя
//
// Параметры:
//	Объект - заполняемый документ перемещения товаров
//  ЗаказПокупателя - ДокументСсылка - ДокументОснование.
//
Процедура ЗаполнитьРезервамиПодЗаказ(Объект, ЗаказПокупателя = Неопределено) Экспорт
	
	// Очистим таблицу товаров
	Объект.Товары.Очистить();
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ТоварыЗаказа = ЗаказПокупателя.Товары;
	Иначе
		ТоварыЗаказа = Неопределено;
	КонецЕсли;
	
	ЕстьЗаказ = ЗначениеЗаполнено(ЗаказПокупателя);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	МоментВремени = Новый МоментВремени(Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
				|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
				|	ЗаказыПокупателейОстатки.РезервОстаток КАК Количество,
				|	ЕСТЬNULL(ЗаказыПокупателей.ЗаказаноОстаток, 0) КАК Заказано,
				|	ЕСТЬNULL(ЗаказыПокупателей.СуммаОстаток,    0) КАК Сумма,
				|	ЕСТЬNULL(ЗаказыПокупателей.СуммаУпрОстаток, 0) КАК СуммаУпр
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Объект.Ссылка.Пустая(),"","&НаМомент")+", " + ?(ЕстьЗаказ, "Заказ = &Заказ И ", "") + "СкладКомпании = &СкладКомпании) КАК ЗаказыПокупателейОстатки
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Объект.Ссылка.Пустая(),"","&НаМомент")+", " + ?(ЕстьЗаказ, "Заказ = &Заказ", "") + ") КАК ЗаказыПокупателей
				|ПО
				|	ЗаказыПокупателейОстатки.Заказ                      = ЗаказыПокупателей.Заказ
				|	И ЗаказыПокупателейОстатки.Номенклатура               = ЗаказыПокупателей.Номенклатура
				|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|";
	
	Запрос.УстановитьПараметр("НаМомент",      МоментВремени);
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	Запрос.УстановитьПараметр("Заказ",         ЗаказПокупателя);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Выборка   = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Коэффициент = Выборка.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
		СтрокаТоваров 							 = Объект.Товары.Добавить();
		СтрокаТоваров.Номенклатура               = Выборка.Номенклатура;
		СтрокаТоваров.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТоваров.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		СтрокаТоваров.Количество                 = Цел(Выборка.Количество/?(Коэффициент = 0, 1, Коэффициент));
		Документы.ПеремещениеТоваров.ТоварыНоменклатураПриИзменении(Объект, СтрокаТоваров);
		
		Если Выборка.Заказано>0 Тогда
			
			СуммаСтроки    = 0;
			
			Если ТипЗнч(СтрокаТоваров.ЗаказПокупателя)=Тип("ДокументСсылка.ЗаказПокупателя") И СтрокаТоваров.ЗаказПокупателя.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				СуммаСтроки = Выборка.Сумма;
			Иначе
				СуммаСтроки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаУпр, ВалютаУпр, Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
			КонецЕсли;
			
			Если СуммаСтроки > 0 Тогда
				СтрокаТоваров.СуммаВсего = Выборка.Количество*СуммаСтроки/Выборка.Заказано;
				Документы.ПеремещениеТоваров.ТоварыСуммаВсегоПриИзменении(Объект, СтрокаТоваров);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыЗаказа) Тогда
			МассивЯчеек = ТоварыЗаказа.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",Выборка.Номенклатура,Выборка.ХарактеристикаНоменклатуры));
			Если МассивЯчеек.Количество() <> 0 Тогда
				СтрокаТоваров.ЯчейкаОтправитель = МассивЯчеек[0].Ячейка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРезервамиПодЗаказ()

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпанииОтправитель");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("СкладПолучатель");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	ИначеЕсли Объект.ХозОперация=Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	УникальныеТовары.Добавить("ЗаказПокупателя");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Параметры проверки полей таблицы товаров
	КонтролируемыеРеквизитыТовары = Новый Структура();
	КонтролируемыеРеквизитыТовары.Вставить("Партия", ЛОЖЬ);
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	Если ТипЗнч(Объект.СкладКомпании)=Тип("СправочникСсылка.СкладыКомпании") Тогда
		КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонецЕсли;
	
	КонтролируемыеРеквизиты.Вставить("Товары", КонтролируемыеРеквизитыТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("СкладКомпании",  Объект.СкладПолучатель);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("Ячейка",             "ЯчейкаОтправитель");
	ПараметрыДействия.Вставить("ЗапретИзмененияЦен", Истина);
	
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад получатель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладПолучательПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("СкладКомпании", Объект.СкладПолучатель);
	ПараметрыДействия.Вставить("Ячейка",        "ЯчейкаПолучатель");
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		РезервыДляКонтрагента=Неопределено;
	Иначе
		Если ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") Тогда
			РезервыДляКонтрагента=Объект.СкладПолучатель.ПодразделениеКомпании;
		Иначе
			РезервыДляКонтрагента=Объект.СкладПолучатель;
		КонецЕсли; 
	КонецЕсли; 

	ПараметрыДействия.Вставить("РезервыДляКонтрагента",РезервыДляКонтрагента);
	
	// Перезаполним розничную цену
	Если ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") И
		НЕ  Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
			
			ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЦенаРозничная(Объект, ПараметрыДействия); 
		
	КонецЕсли;
		
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		Возврат;
	КонецЕсли;
	
	// Перезаполним ячейки склада
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЯчейка(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладПолучательПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	СкладыКомпанииТип = ?(ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании"), 
														Объект.СкладПолучатель.Розничный, Ложь);	
	Если (ЗначениеЗаполнено(Объект.СкладПолучатель) И СкладыКомпанииТип) 
		И НЕ Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
		ПараметрыДействия.Вставить("СкладКомпании", Объект.СкладПолучатель);
		ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЦенаРозничная(Объект, ПараметрыДействия);
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал И ЗначениеЗаполнено(Объект.СкладКомпании) И Объект.СкладКомпании.Розничный Тогда
		ПараметрыДействия.СкладКомпании = Объект.СкладКомпании;
		ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЦенаРозничная(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыОбработатьЯчейки(Объект, Строка, ПараметрыДействия);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработка ячеек
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыОбработатьЯчейки(Объект, Строка, ПараметрыДействия = Неопределено)
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		
		Строка.ЯчейкаОтправитель = Справочники.ЯчейкиХранения.ПустаяСсылка();
		Строка.ЯчейкаПолучатель  = Справочники.ЯчейкиХранения.ПустаяСсылка();
		Возврат;
		
	Иначе
		
		ЯчейкаСсылка             = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Строка.Номенклатура, Объект.СкладКомпании);
		Строка.ЯчейкаОтправитель = ЯчейкаСсылка;
		ЯчейкаСсылка             =  Справочники.Номенклатура.ПолучитьЯчейкуХранения(Строка.Номенклатура, Объект.СкладПолучатель);
		Строка.ЯчейкаПолучатель  = ЯчейкаСсылка;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыОбработатьЯчейки()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентНаценкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
		ПараметрыДействия.СкладКомпании = Объект.СкладКомпании;
		ПараметрыДействия.Вставить("ИзменилсяПроцентНаценки", Ложь);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал  ИЛИ Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров Тогда
		ПараметрыДействия.СкладКомпании = Объект.СкладКомпании;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПеремещениеТоваров");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад, с которого списываются товары.'");
	
	Отбор 							= Новый Структура("Организация,ПодразделениеКомпании", "Организация", "ПодразделениеКомпании");
	ВыборСклада.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ЗаполнитьОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", 
		Справочники.ХозОперации.ПеремещениеТоваровИзФилиала, ВидСравненияКомпоновкиДанных.НеРавно); 
	//
	Отбор = Новый Структура(
		"Розничный,Организация,ПодразделениеКомпании",
		Истина,
		"Организация",
		"ПодразделениеКомпании"
	);
	ВыборСклада.Параметры = Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 	
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить розничные цены'");
	Команда.Идентификатор	= "ТоварыЗаполнитьРозничныеЦены";
	Команда.Порядок 		= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", 
		Справочники.ХозОперации.ПеремещениеТоваровИзФилиала, ВидСравненияКомпоновкиДанных.НеРавно); 
	//
	Отбор 							= Новый Структура("Организация,ПодразделениеКомпании", "Организация", "ПодразделениеКомпании");
	ВыборСклада.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить резервами подразделения'");
	Команда.Идентификатор	= "ТоварыЗаполнитьРезервамиПодразделения";
	Команда.Порядок 		= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить резервами по заказу'");
	Команда.Идентификатор	= "ЗаполнитьРезервами";
	Команда.Порядок 		= 53;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",      Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность",    (НЕ Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРозничныеЦены.Видимость",            Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРозничныеЦены.Доступность",          (НЕ Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервамиПодразделения.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервамиПодразделения.Доступность", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервамиПоЗаказу.Видимость",        Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервамиПоЗаказу.Доступность",      Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по остаткам
//
Функция ЗаполнитьОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;           
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Результат = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	
	// Добавим остатки в табличную часть
	Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
		
		Для Каждого СтрокаТовар Из Результат Цикл
			
			КоличествоБезРезерва = СтрокаТовар.Количество - СтрокаТовар.Резерв;
			
			Если КоличествоБезРезерва <= 0 Тогда
			
				Продолжить;	
			
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовар.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество = КоличествоБезРезерва;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьОстатками()

// Обработчик заполнения документа по розничным ценам
//
Функция ТоварыЗаполнитьРозничныеЦены(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;           
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// если перемещение из филиала, то отобразим усе как положено
	Доступ=(Объект.ХозОперация=Справочники.ХозОперации.ПеремещениеТоваровИзФилиала);
	Если ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		ЭтоПодразделениеПолучатель = Ложь;
		СкладПолучательРозничный = Объект.СкладПолучатель.Розничный;
	Иначе
		ЭтоПодразделениеПолучатель  = Истина;
		СкладПолучательРозничный = Ложь;
	КонецЕсли;

	Если ТипЗнч(Объект.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		ЭтоПодразделениеОтправитель = Ложь;
		СкладОтправительРозничный = Истина;
	Иначе
		ЭтоПодразделениеОтправитель  = Истина;
		СкладОтправительРозничный = Ложь;
	КонецЕсли;
	СкладКомпанииТип = ?(ЭтоПодразделениеОтправитель,Ложь,Объект.СкладКомпании.Розничный);
	СкладПолучательТип = ?(ЭтоПодразделениеПолучатель,Ложь,Объект.СкладПолучатель.Розничный);
	Если (НЕ ЗначениеЗаполнено(Объект.СкладКомпании) ИЛИ НЕ СкладКомпанииТип) 
		И (НЕ Объект.СкладПолучатель <> Неопределено ИЛИ НЕ СкладПолучательТип) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указано ни одного розничного склада.'"), Ссылка); 
	Иначе
		Если НЕ Объект.Товары.Количество() <> 0 Тогда    
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не добавлено ни одной позиции.'"), Ссылка); 
		Иначе
			Если Объект.Товары.Количество() > 0 Тогда
				
				Если ЭтоПодразделениеПолучатель Тогда
					ТипЦенДляРасчета  = Объект.СкладКомпании.ТипЦенРозничнойТорговли; //???
					ПодразделениеЦены = Объект.СкладПолучатель;
				Иначе
					Если Объект.СкладПолучатель.Розничный Тогда
						ТипЦенДляРасчета  = Объект.СкладПолучатель.ТипЦенРозничнойТорговли;	
						ПодразделениеЦены = Объект.СкладПолучатель.ПодразделениеКомпании;
					Иначе
						ТипЦенДляРасчета  = Объект.СкладКомпании.ТипЦенРозничнойТорговли;
						ПодразделениеЦены = Объект.СкладКомпании.ПодразделениеКомпании;
					КонецЕсли;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(Ссылка) Тогда
					Дата = Объект.Дата;
				Иначе
					Дата = ТекущаяДатаСеанса();
				КонецЕсли;
				МоментВремени = Новый МоментВремени(Дата);
				
				Для Каждого ТекСтрока Из Объект.Товары Цикл
					ТекСтрока.Цена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦенДляРасчета, ТекСтрока.Номенклатура, МоментВремени,, Объект.ВалютаДокумента, Объект.КурсДокумента, ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения, ПодразделениеЦены);	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьРозничныеЦены()

// Обработчик заполнения документа резервами подразделения
//
Функция ТоварыЗаполнитьРезервамиПодразделения(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;           
	
	Если НЕ Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
		Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
			Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
			СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРезервамиПодразделения(Объект, Неопределено);
	
КонецФункции // ТоварыЗаполнитьРезервамиПодразделения()

// Обработчик заполнения документа резервами по заказу 
//
Функция ЗаполнитьРезервами(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;           
	
	Если НЕ Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
			ЗаполнитьРезервамиПодразделения(Объект, Объект.ДокументОснование);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда		
			ЗаполнитьРезервамиПодЗаказ(Объект, Объект.ДокументОснование);
		Иначе
			ЗаполнитьРезервамиПодЗаказ(Объект);
		КонецЕсли;
	Иначе
		ЗаполнитьРезервамиПодЗаказ(Объект);
	КонецЕсли;
	
КонецФункции // ЗаполнитьРезервами()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеТоваров",
		"ПФ_MXL_ПеремещениеТоваров",
		НСтр("ru = 'Перемещение товаров'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеТоваров",
		"ПФ_MXL_ПодборочныйЛист",
		НСтр("ru = 'Подборочный лист'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ13",
		НСтр("ru = 'ТОРГ-13 (Накладная на внутреннее перемещение)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН30122011_Приложение4",
		НСтр("ru = 'Приложение №4 (Транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН",
		НСтр("ru = 'Т-1 (Товарно-транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМ11",
		"ПФ_MXL_М11",
		НСтр("ru = 'М-11 (Требование-накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПеремещениеТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПеремещениеТоваров",
															НСтр("ru = 'Перемещение товаров'"),
															ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодборочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПодборочныйЛист",
															НСтр("ru = 'Подборочный лист'"),
															ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ПеремещениеТоваров"
//
Функция ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ПеремещениеТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_ПеремещениеТоваров");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
	
		// Настройка макета отчета
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за ее счет колонку "Товар".
		ЕстьЯчейкиХранения=Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ЯчейкаОтправитель) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.ЯчейкаПолучатель) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения,ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Удаляем колонку с розничной ценой и увеличиваем ширину колонки "Товар" за счет ширины удаленной колонки.
		ПечататьРозничныеЦены = ?(ТипЗнч(Документ.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании"), Документ.СкладПолучатель.Розничный,Ложь) И (Документ.ХозОперация<>Справочники.ХозОперации.ПеремещениеТоваровВФилиал);
		
		Если НЕ ПечататьРозничныеЦены Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЦенаРозничная = Макет.Область("ЦенаРозничная");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЦенаРозничная.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЦенаРозничная,ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;

		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, НСтр("ru = 'Перемещение товаров'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка				 = ТекстЗаголовка;
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			ПредставлениеСкладаСОрганизацией(Документ.СкладКомпании, ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеСкладаПолучателя =
			ПредставлениеСкладаСОрганизацией(Документ.СкладПолучатель, ДополнительныеПараметры);
		
		// Розничные цены всегда идут в регламентированной валюте.
		Если ПечататьРозничныеЦены Тогда
			ОбластьЗаголовок.Параметры.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		КонецЕсли;
			
		// Выведем или удалим ШК.
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки.
			СтруктураСтроки 		= УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ,Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его.
			СтруктураСтроки.Вставить("Ячейка");
			СтруктураСтроки.Вставить("ЯчейкаПолуч");
			СтруктураСтроки.Цена 	= Формат(СтрокаТЧ.ЦенаРозничная,ФорматВыводаСуммы);
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.ЯчейкаОтправитель.Код);
			СтруктураСтроки.Ячейка 	= ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати)," ",ЯчейкаДляПечати);
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.ЯчейкаПолучатель.Код);
			СтруктураСтроки.ЯчейкаПолуч = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати)," ",ЯчейкаДляПечати);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;

		// Итоги
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП 
													+ ВыборкаТабличнойЧасти.Количество();
	
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Отпустил","ОтпустилПредставление"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Получил","ПолучилПредставление"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьПеремещениеТоваров()

Функция ПредставлениеСкладаСОрганизацией(СкладКомпании, ДополнительныеПараметры)
	
	ПредставлениеСклада = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(СкладКомпании,, ДополнительныеПараметры);
	ПараметрыПредставления = Новый Структура();
	ПараметрыПредставления.Вставить("Наименование");
	ОрганизацияСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладКомпании, "Организация");
	ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(ОрганизацияСклада, ПараметрыПредставления);
	
	ЧастиПредставленияСклада = СтрРазделить(ПредставлениеСклада, ",");
	ЧастиПредставленияСклада.Вставить(1, СтрШаблон(" %1", ПредставлениеОрганизации));
	
	Возврат СтрСоединить(ЧастиПредставленияСклада, ",");
	
КонецФункции // ПредставлениеСкладаСОрганизацией()

// функция печати подборочного лист
//
Функция ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ПодборочныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получим макет печатной формы
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПодборочныйЛист");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		
		// Настроим макет отчета.
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за ее счет колонку "Товар".
		ЕстьЯчейкиХранения=Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ЯчейкаОтправитель) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения,ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Получение необходимых областей.
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет,Документ);
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры,Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, НСтр("ru = 'Подборочный лист'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// * //
		ОбластьЗаголовок.Параметры.Склад      = НСтр("ru = 'Склад отправитель:'");
		ОбластьЗаголовок.Параметры.Покупатель = НСтр("ru = 'Склад получатель:'");
		
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладПолучатель);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада     = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		// * //
		
		// Выведем или удалим ШК.
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",Документ.ВалютаДокумента,0,0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
		
		// Заполняем ТЧ
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ,Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его.
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.ЯчейкаОтправитель.Код);
			СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати)," ",ЯчейкаДляПечати);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",Документ.ВалютаДокумента,0,0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
					
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ПолучилКонтрагент","Получил"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует печатную форму "М-11"
// 
Функция ПолучитьДанныеДляПечатиМ11(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Объект.Товары);
	ДанныеОбъекта.Вставить("ЦенаВключаетНДС"        , Объект.ТипЦен.ЦенаВключаетНДС);	
	ДанныеОбъекта.Вставить("Грузоотправитель"       , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.СкладКомпании));
	ДанныеОбъекта.Вставить("Грузополучатель"        , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.СкладПолучатель));	
	ДанныеОбъекта.Вставить("Отпустил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));

	Возврат ДанныеОбъекта;
КонецФункции

// Формирует печатную форму "ТОРГ13"
// 
Функция ПолучитьДанныеДляПечатиТОРГ13(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	Розничный = ?(ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании"),Объект.СкладПолучатель.Розничный,Ложь) И (Объект.ХозОперация<>Справочники.ХозОперации.ПеремещениеТоваровВФилиал);
	ВалютаРегл		= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр		= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаОтчета	= ?(Розничный, ВалютаРегл, Объект.ВалютаДокумента);
	СтрокаКолонокСвертки = "Количество, КоличествоБазовое,СуммаНДС";
	Если Розничный Тогда
		ЕстьПартии = Ложь;
		ИмяРегистра = "ОстаткиТоваровКомпании";
		ИспользуемыеРесурсы = Новый Структура("СуммаРозн");
		СтрокаКолонокСвертки = СтрокаКолонокСвертки+",СуммаРозн";
	Иначе
		ЕстьПартии = Истина;
		ИмяРегистра = "ПартииТоваровКомпании";
		ИспользуемыеРесурсы = Новый Структура(",Сумма,СуммаНДС");
		СтрокаКолонокСвертки = СтрокаКолонокСвертки+",Сумма,СуммаНДС";
	КонецЕсли;
	
	ВидДвиженияПриход = ?(Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	// передаем свой текст запроса, т.к. нужна колонка СуммаНДС
	ТекстЗапроса = "
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ДокТовары.Номенклатура КАК Номенклатура,
	 |	ДокТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	 |	ДокТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	 |	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Сумма"+?(Розничный,"Розн","")+",
	 |	СУММА(ДокТовары.Количество) КАК Количество,
	 |	СУММА(ДокТовары.КоличествоБазовое) КАК КоличествоБазовое,
	 |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	 |	ДокТовары.СтавкаНДС КАК СтавкаНДС,
	 |	ДокТовары.Партия
	 |ИЗ
	 |	Документ.ПеремещениеТоваров.Товары КАК ДокТовары
	 |ГДЕ
	 |	ДокТовары.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ДокТовары.Номенклатура,
	 |	ДокТовары.ЕдиницаИзмерения,
	 |	ДокТовары.ЗаказПокупателя,
	 |	ДокТовары.ХарактеристикаНоменклатуры,
	 |	ДокТовары.СтавкаНДС,
	 |	ДокТовары.Партия
	 |";
	
	ПараметрыПолучения            = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
	ПараметрыПолучения.ИмяРегистра         = ИмяРегистра;
	ПараметрыПолучения.ИспользуемыеРесурсы = ИспользуемыеРесурсы;
	ПараметрыПолучения.ВидДвиженияПриход   = ВидДвиженияПриход;
	ПараметрыПолучения.ТекстЗапроса        = ТекстЗапроса;
	
	ТаблицаСуммСписания = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Объект.Ссылка, ПараметрыПолучения);
	
	ТаблицаСуммСписания.Свернуть("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СтавкаНДС", СтрокаКолонокСвертки);
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , ВалютаРегл);
	ДанныеОбъекта.Вставить("ВалютаРегл"        		, ВалютаРегл);
	ДанныеОбъекта.Вставить("ВалютаУпр"        		, ВалютаУпр);
	ДанныеОбъекта.Вставить("КурсДокумента"        	, Объект.КурсДокумента); 
	ДанныеОбъекта.Вставить("КурсВалютыУпр"       	, Объект.КурсВалютыУпр); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("Розничный"       		, Розничный);
	ДанныеОбъекта.Вставить("ТребуетсяПересчет"      , Истина);
	ДанныеОбъекта.Вставить("КоличествоСтрок"  		, Объект.Товары.Количество());
	ДанныеОбъекта.Вставить("ТаблицаСуммСписания"  	, ТаблицаСуммСписания);	
	ДанныеОбъекта.Вставить("Грузоотправитель"       , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.СкладКомпании));
	ДанныеОбъекта.Вставить("Грузополучатель"        , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.СкладПолучатель));
	ДанныеОбъекта.Вставить("Отпустил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));

	Возврат ДанныеОбъекта;
КонецФункции

// Формирует печатную форму Т-1 "Товарно-транспортная накладная"
// 
Функция ПолучитьДанныеДляПечатиТ1(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл  = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	
	// данные документа
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , ВалютаРегл);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	
	ВыборкаТабличнойЧасти = Объект.Товары.Выгрузить();
	
	Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
		СтрокаТоваров.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СтрокаТоваров.СуммаВсего,
			ВалютаДокумента,
			КурсДокумента,
			ВалютаРегл,
			КурсРегл,
			РежимОкругления.Окр15как20);
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти", ВыборкаТабличнойЧасти);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Заказчик);
  	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель"       	, ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.СкладКомпании));
	ДанныеОбъекта.Вставить("Грузополучатель"       		, ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.СкладПолучатель));
	ДанныеОбъекта.Вставить("Плательщик"            		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Заказчик"            		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Заказчик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ЛицензионнаяКарточка"  		, "");
	ДанныеОбъекта.Вставить("СрокДоставки"          		, "");
	ДанныеОбъекта.Вставить("Перевозчик"            		, Объект.Перевозчик);
	ДанныеОбъекта.Вставить("МаркаАвтомобиля"            , Объект.МодельАвтомобиля);
	ДанныеОбъекта.Вставить("ГосНомерАвтомобиля"         , Объект.ГосНомерАвтомобиля);
	ДанныеОбъекта.Вставить("Водитель"           		, Объект.Водитель);
	ДанныеОбъекта.Вставить("ВодительскоеУдостоверение"  , Объект.НомерВодительскогоУдостоверения);
	ДанныеОбъекта.Вставить("ВидПеревозки"           	, "");
	ДанныеОбъекта.Вставить("ПунктПогрузки"            	, "");
	ДанныеОбъекта.Вставить("ПунктРазгрузки"             , Объект.АдресДоставки);
	ДанныеОбъекта.Вставить("МаркаПрицепа"            	, Объект.МодельПрицепа);
	ДанныеОбъекта.Вставить("ГосНомерПрицепа"            , Объект.ГосНомерПрицепа);
	ДанныеОбъекта.Вставить("ОписаниеГруза"            	, Объект.ОписаниеГруза);	
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"      , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Отпустил"         			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил", "Получил"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Руководитель"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Руководитель"));
	
	Возврат ДанныеОбъекта;
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПеремещениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ПеремещениеТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	|	МАКСИМУМ(ПеремещениеТоваровТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(ПеремещениеТоваровТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ПеремещениеТоваровТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры,
	|	ПеремещениеТоваровТовары.ЕдиницаИзмерения,
	|	ПеремещениеТоваровТовары.Ссылка.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Организация КАК Организация,
	|	ПеремещениеТоваров.СкладПолучатель.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПеремещениеТоваров.СкладПолучатель КАК Склад,
	|	ПеремещениеТоваров.СкладПолучатель.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов     = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивТиповЦен    = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПеремещениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ПеремещениеТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	|	МАКСИМУМ(ПеремещениеТоваровТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(ПеремещениеТоваровТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ПеремещениеТоваровТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры,
	|	ПеремещениеТоваровТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Организация КАК Организация,
	|	ПеремещениеТоваров.СкладПолучатель.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПеремещениеТоваров.СкладПолучатель КАК Склад,
	|	ПеремещениеТоваров.СкладПолучатель.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов     			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

