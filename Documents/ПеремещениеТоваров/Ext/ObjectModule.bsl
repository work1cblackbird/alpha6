// Модуль документа "Перемещение товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
		Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
			
			Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
				
				ЗаполнитьЗначенияСвойств(
					Товары.Добавить(),
					Строка,
					"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество,Коэффициент"
				);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если
		ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
		И ДанныеЗаполнения.ХозОперация <> Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт
	Тогда
		
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Ввод возможен только на основании документа с хоз. операцией Таможенная декларация(импорт)'")
		);
		Возврат;
		
	КонецЕсли;
	
	ПрерватьЗаполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДанныеЗаполнения, "Грузополучатель") И  
		ЗначениеЗаполнено(ДанныеЗаполнения.Грузополучатель) Тогда 
		
		Грузоотправитель = ДанныеЗаполнения.Грузополучатель;
	КонецЕсли;
	Грузополучатель = Неопределено;
	
	ТипыДокументовБезОбработкиКоличества = Новый Массив();
	ТипыДокументовБезОбработкиКоличества.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
	ТипыДокументовБезОбработкиКоличества.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	
	Если ТипыДокументовБезОбработкиКоличества.Найти(ТипЗнч(ДанныеЗаполнения)) = Неопределено Тогда
		
		Для Каждого СтрТовар Из Товары Цикл
			
			Если СтрТовар.Количество = 0 Тогда
				
				СтрТовар.Количество = 1;
				
			КонецЕсли;
			
			Документы.ПеремещениеТоваров.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрТовар,
				ДополнительныеСвойства.ПараметрыДействия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Есть ли возможность указания партии и ГТД
	ВыборочноеСписаниеПартий = ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", ЭтотОбъект);
	
	Если Не ВыборочноеСписаниеПартий Тогда
		
		Для Каждого СтрокаТовар Из Товары Цикл
			
			СтрокаТовар.Партия = Неопределено;
			СтрокаТовар.ГТД    = Неопределено;
			
		КонецЦикла;
		
		Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,ХарактеристикаНоменклатуры,СтавкаНДС,ЗаказПокупателя,ЯчейкаОтправитель,ЯчейкаПолучатель","Количество,КоличествоБазовое,СуммаРозничная,Сумма,СуммаВсего,СуммаНДС");
		
		Для Каждого СтрокаТовар Из Товары Цикл
			
			СуммаНДС       = СтрокаТовар.СуммаНДС;
			СуммаРозничная = СтрокаТовар.СуммаРозничная;
			Документы.ПеремещениеТоваров.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект,
				СтрокаТовар,ДополнительныеСвойства.ПараметрыДействия);
			
			СтрокаТовар.СуммаРозничная = СуммаРозничная;
			Документы.ПеремещениеТоваров.ТоварыСуммаРозничнаяПриИзменении(ЭтотОбъект,
				СтрокаТовар,ДополнительныеСвойства.ПараметрыДействия);
			СтрокаТовар.СуммаНДС = СуммаНДС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИспользоватьТоварыВПути = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПути");
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ДополнительныеСвойства.Вставить(
		"ПроверкаЗаполненияПартииПоГТД",
		ХозОперация <> Справочники.ХозОперации.ПеремещениеТоваровИзФилиала
	);
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ Или ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
	Если СкладПолучатель = СкладКомпании Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Склад-отправитель равен складу-получателю. Перемещение невозможно.'"),
			ЭтотОбъект,
			,
			,
			Отказ
		);
		Возврат;
		
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// Установим для новых документов признак, для корректного проведения перемещения по заказу
	Если ЭтоНовый() Тогда
		РежимПереносаЗаказов = Истина;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов    
	Если ТипЗнч(СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") Тогда 
		
		Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
			
			Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
				
				СтрокаТабличнойЧасти.ЦенаРозничная = 0;
				СтрокаТабличнойЧасти.СуммаРозничная = 0;
				СтрокаТабличнойЧасти.ПроцентНаценки = 0;
				
			КонецЦикла;
			
		Иначе 
			
			ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладПолучатель); 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров Тогда
		
		ИспользоватьТоварыВПути = Ложь;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ХозОперация <> Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ,,, Истина);
		ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодготовитьДанныеДляПроведения(РежимПроведения);
	
	ОстаткиТоваровКомпанииПередПроведением = 
		ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании.Скопировать();
	ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании = 
		ОбщегоНазначенияАвтосалон.ВыгрузитьТаблицуЗначений(ОстаткиТоваровКомпанииПередПроведением,
			Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход));
	
	Отказ = Отказ Или СписатьЗаказы_ПеремещаемыеЗаказы();
	Отказ = Отказ Или СписатьЗаказы();
	Отказ = Отказ Или СписатьРаспределение();
	Отказ = Отказ Или СписатьСоСклада();
	Отказ = Отказ Или СписатьЗаказыВПути();
	Отказ = Отказ Или СписатьТоварыВПути();
	
	ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании =
		ОбщегоНазначенияАвтосалон.ВыгрузитьТаблицуЗначений(ОстаткиТоваровКомпанииПередПроведением,
			Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход));
	
	Отказ = Отказ Или ОприходоватьЗаказы();
	Отказ = Отказ Или ОприходоватьНаСклад();
	Отказ = Отказ Или ОприходоватьЗаказыВПути();
	Отказ = Отказ Или ОприходоватьТоварыВПути();
	
	ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании = ОстаткиТоваровКомпанииПередПроведением;
	
	Отказ = Отказ Или Не ПровестиПоПартиям(РежимПроведения, Ссылка);
	
	// Если перемещение товаров в розницу, нужно установить разничные цены для товаров
	Отказ = Отказ Или УстановитьРазничныеЦены();
	
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка, ДополнительныеСвойства, Движения);
	
	Если ИспользоватьТоварыВПути И ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(
			ЭтотОбъект,
			Отказ,
			"ТоварыВПутиПартии"
		);
		ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "ТоварыВПутиПартии");
		
	ИначеЕсли ХозОперация <> Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(
			ЭтотОбъект,
			Отказ,
			"ПартииТоваровКомпании"
		);
		ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

#Область ИнициализацияПроведения

Процедура ПодготовитьДанныеДляПроведения(РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура());
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения", РежимПроведения);
	
	Если ТипЗнч(СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		
		ДополнительныеСвойства.ДляПроведения.Вставить("ПодразделениеПолучатель",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "ПодразделениеКомпании"));
		
	Иначе
		
		ДополнительныеСвойства.ДляПроведения.Вставить("ПодразделениеПолучатель", СкладПолучатель);
		
	КонецЕсли;
	
	Если ТипЗнч(СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		
		ДополнительныеСвойства.ДляПроведения.Вставить("ПодразделениеОтправитель",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладКомпании, "ПодразделениеКомпании"));
		
	Иначе
		
		ДополнительныеСвойства.ДляПроведения.Вставить("ПодразделениеОтправитель", СкладКомпании);
		
	КонецЕсли;
	
	ТоварыВДокументе();	
	
КонецПроцедуры

Процедура ТоварыВДокументе()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры,
		|	ПеремещениеТоваровТовары.ЗаказПокупателя,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваровТовары.ЗаказПокупателя ССЫЛКА Документ.ЗаказВнутренний
		|			ТОГДА ВЫРАЗИТЬ(ПеремещениеТоваровТовары.ЗаказПокупателя КАК Документ.ЗаказВнутренний).ПодразделениеПолучатель
		|		ИНАЧЕ ВЫРАЗИТЬ(ПеремещениеТоваровТовары.ЗаказПокупателя КАК Документ.ЗаказПокупателя).Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ПеремещениеТоваровТовары.ЗаказПокупателя В (ЗНАЧЕНИЕ(Документ.ЗаказВнутренний.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка), НЕОПРЕДЕЛЕНО) КАК ЗаказПокупателяЗаполнен,
		|	ПеремещениеТоваровТовары.КоличествоБазовое КАК Количество,
		|	ПеремещениеТоваровТовары.ЦенаРозничная КАК ЦенаРозничная,
		|	ПеремещениеТоваровТовары.СуммаРозничная КАК Сумма
		|ПОМЕСТИТЬ ТоварыВДокументе
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВДокументе.Номенклатура КАК Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МАКСИМУМ(ТоварыВДокументе.ЦенаРозничная) КАК ЦенаРозничная,
		|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
		|	СУММА(0) КАК Резерв,
		|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма
		|ИЗ
		|	ТоварыВДокументе КАК ТоварыВДокументе
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВДокументе.Номенклатура КАК Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыВДокументе.ЗаказПокупателя КАК Заказ,
		|	МАКСИМУМ(ТоварыВДокументе.ЦенаРозничная) КАК ЦенаРозничная,
		|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
		|	СУММА(0) КАК Резерв,
		|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма
		|ИЗ
		|	ТоварыВДокументе КАК ТоварыВДокументе
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры,
		|	ТоварыВДокументе.ЗаказПокупателя
		|УПОРЯДОЧИТЬ ПО
		|	Заказ УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВДокументе.Номенклатура КАК Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МАКСИМУМ(ТоварыВДокументе.ЦенаРозничная) КАК ЦенаРозничная,
		|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
		|	СУММА(0) КАК Резерв,
		|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма
		|ИЗ
		|	ТоварыВДокументе КАК ТоварыВДокументе
		|ГДЕ
		|	ТоварыВДокументе.ЗаказПокупателяЗаполнен
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВДокументе.Номенклатура КАК Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.Автоматическое) КАК СпособРаспределенияЗаказов,
		|	МАКСИМУМ(ТоварыВДокументе.ЦенаРозничная) КАК ЦенаРозничная,
		|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
		|	СУММА(0) КАК Резерв,
		|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма
		|ИЗ
		|	ТоварыВДокументе КАК ТоварыВДокументе
		|ГДЕ
		|	ТоварыВДокументе.ЗаказПокупателяЗаполнен
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры,
		|	ТоварыВДокументе.ЗаказПокупателя КАК Заказ,
		|	ТоварыВДокументе.Контрагент,
		|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
		|	СУММА(0) КАК Резерв,
		|	МАКСИМУМ(ТоварыВДокументе.ЦенаРозничная) КАК ЦенаРозничная,
		|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма
		|ИЗ
		|	ТоварыВДокументе КАК ТоварыВДокументе
		|ГДЕ
		|	НЕ ТоварыВДокументе.ЗаказПокупателяЗаполнен
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры,
		|	ТоварыВДокументе.ЗаказПокупателя,
		|	ТоварыВДокументе.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры,
		|	ТоварыВДокументе.ЗаказПокупателя КАК Заказ,
		|	ТоварыВДокументе.Контрагент,
		|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
		|	СУММА(-1) КАК КоличествоРасход,
		|	СУММА(ТоварыВДокументе.Количество) КАК Резерв,
		|	МАКСИМУМ(ТоварыВДокументе.ЦенаРозничная) КАК ЦенаРозничная,
		|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма
		|ИЗ
		|	ТоварыВДокументе КАК ТоварыВДокументе
		|ГДЕ
		|	НЕ ТоварыВДокументе.ЗаказПокупателяЗаполнен
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВДокументе.Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры,
		|	ТоварыВДокументе.ЗаказПокупателя,
		|	ТоварыВДокументе.Контрагент"
	);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТоварыВДокументе = 1;
	ТоварыВДокументеСЗаказами = 2;
	ТоварыСписание = 3;
	ТоварыОприходывание = 4;
	ТоварыСписание_ПеремещениеЗаказов = 5;
	ТоварыОприходывание_ПеремещениеЗаказов = 6; 
	
	ДополнительныеСвойства.ДляПроведения.Вставить("ТоварыВДокументе", РезультатыЗапроса[ТоварыВДокументе]);
	ДополнительныеСвойства.ДляПроведения.Вставить("ТоварыВДокументеСЗаказами",
		РезультатыЗапроса[ТоварыВДокументеСЗаказами]);
	ДополнительныеСвойства.ДляПроведения.Вставить("ТоварыСписание", РезультатыЗапроса[ТоварыСписание].Выгрузить());
	ДополнительныеСвойства.ДляПроведения.Вставить("ТоварыОприходывание", РезультатыЗапроса[ТоварыОприходывание]);
	ДополнительныеСвойства.ДляПроведения.Вставить("ТоварыСписание_ПеремещениеЗаказов", 
		РезультатыЗапроса[ТоварыСписание_ПеремещениеЗаказов].Выгрузить());
	ДополнительныеСвойства.ДляПроведения.Вставить("ТоварыОприходывание_ПеремещениеЗаказов",
		РезультатыЗапроса[ТоварыОприходывание_ПеремещениеЗаказов]);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПроведения

#Область Списание

Функция СписатьЗаказы_ПеремещаемыеЗаказы()
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Движения.ЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	Движения.ЗаказыПокупателей.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
	Движения.ЗаказыПокупателей.РезультатЗапросаПоТоварам = ДополнительныеСвойства
		.ДляПроведения
		.ТоварыСписание_ПеремещениеЗаказов;
	Движения.ЗаказыПокупателей.Контрагент = Неопределено;
	Движения.ЗаказыПокупателей.Заказ = Неопределено;
	Движения.ЗаказыПокупателей.СкладКомпании = СкладКомпании;
	Движения.ЗаказыПокупателей.Заказывать = Ложь;
	Движения.ЗаказыПокупателей.Резервировать = Истина;
	Движения.ЗаказыПокупателей.ПоБазовомуКоличеству = Истина;
	Движения.ЗаказыПокупателей.ПеремещениеТоваров = РежимПереносаЗаказов
		И (ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров
			Или ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал И ИспользоватьТоварыВПути);
	
	Результат = Ложь;
	
	Если Не Движения.ЗаказыПокупателей.Расход() Тогда
		
		Результат = Истина;
		
	КонецЕсли;
		
	ДополнительныеСвойства.ДляПроведения.Вставить("ПеремещенныеЗаказы",
		Движения.ЗаказыПокупателей.РезультатЗапросаПоТоварам);
	ДополнительныеСвойства.ДляПроведения.Вставить("ПеремещенныеЗаказыССуммами",
		Движения.ЗаказыПокупателей.Выгрузить());
		
	Возврат Результат;
	
КонецФункции

Функция СписатьЗаказы()
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Движения.ЗаказыПокупателей.ДокументОбъект  = ЭтотОбъект;
	Движения.ЗаказыПокупателей.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
	Движения.ЗаказыПокупателей.РезультатЗапросаПоТоварам = ДополнительныеСвойства
		.ДляПроведения
		.ТоварыСписание;
	Движения.ЗаказыПокупателей.Контрагент = ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель; 
	Движения.ЗаказыПокупателей.Заказ = Неопределено;
	Движения.ЗаказыПокупателей.СкладКомпании = СкладКомпании;
	Движения.ЗаказыПокупателей.Заказывать = Истина;         
	Движения.ЗаказыПокупателей.Резервировать = Истина;
	Движения.ЗаказыПокупателей.ПоБазовомуКоличеству = Истина;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("СписанныеЗаказы",
		Движения.ЗаказыПокупателей.РезультатЗапросаПоТоварам);
	
	Возврат Не Движения.ЗаказыПокупателей.ЗакрытиеЗаказовПокупателя(
		Документы.ПеремещениеТоваров.ОстаткиЗаказовДляЗакрытиеЗаказовПокупателя(
			ЭтотОбъект,
			ДополнительныеСвойства.ДляПроведения.ТоварыСписание,
			ДополнительныеСвойства
		)
	);
	
КонецФункции

Функция СписатьРаспределение()
	
		НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
		
		// Снимаем распределение заказов покупателя
		РезультатЗакрытияЗаказов=НаборЗаписейЗаказыПокупателей.Выгрузить();
		КолонкаКоличества=РезультатЗакрытияЗаказов.Колонки.Найти("Заказано");
		КолонкаКоличества.Имя="Количество"; КолонкаКоличества.Заголовок="Количество";
		РезультатЗакрытияЗаказов.Свернуть("Заказ,Контрагент,Номенклатура,ХарактеристикаНоменклатуры","Количество,Резерв");
		Для каждого СтрокаЗаказа Из РезультатЗакрытияЗаказов Цикл
			СтрокаЗаказа.Количество=-СтрокаЗаказа.Количество;
		КонецЦикла; 
		НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
		НаборЗаписейРаспределениеЗаказов.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
		НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗакрытияЗаказов;
		НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = "Заказ";
		НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = Неопределено;
		НаборЗаписейРаспределениеЗаказов.Контрагент = ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель;
		НаборЗаписейРаспределениеЗаказов.ПоБазовомуКоличеству=Истина;
		Возврат НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения();
	
КонецФункции

Функция СписатьСоСклада()
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПеремещенныеЗаказы = ОбщегоНазначенияКлиентСервер
		.СвойствоСтруктуры(ДополнительныеСвойства.ДляПроведения, "ПеремещенныеЗаказы");
	СписанныеЗаказы = ОбщегоНазначенияКлиентСервер
		.СвойствоСтруктуры(ДополнительныеСвойства.ДляПроведения, "СписанныеЗаказы");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПеремещенныеЗаказы, СписанныеЗаказы);
	
	Движения.ОстаткиТоваровКомпании.ДокументОбъект = ЭтотОбъект;
	Движения.ОстаткиТоваровКомпании.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
	Движения.ОстаткиТоваровКомпании.РезультатЗапросаПоТоварам = ДополнительныеСвойства
		.ДляПроведения
		.СписанныеЗаказы;
	Движения.ОстаткиТоваровКомпании.СкладКомпании = СкладКомпании;
	Движения.ОстаткиТоваровКомпании.Приходовать = Истина;
	Движения.ОстаткиТоваровКомпании.ПоБазовомуКоличеству = Истина;
	Движения.ОстаткиТоваровКомпании.ДвиженияПоРознице = СкладКомпании.Розничный;
	Движения.ОстаткиТоваровКомпании.Резервировать = Движения
		.ЗаказыПокупателей
		.РезультатЗапросаПоТоварам <> Неопределено;
	
	Результат = Не Движения.ОстаткиТоваровКомпании.Расход();
	
	Если Не Результат Тогда
		
		СохранитьСписанныеТоварыДляОприходывания(Движения.ОстаткиТоваровКомпании.Выгрузить());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьСписанныеТоварыДляОприходывания(Знач СписанияСоСкладаОтправителя)
	
	СписанияСоСкладаОтправителя = СписанияСоСкладаОтправителя.Скопировать(,
		"Номенклатура,ХарактеристикаНоменклатуры,Количество");
	СписанияСоСкладаОтправителя.Свернуть("Номенклатура,ХарактеристикаНоменклатуры", "Количество");
	
	СписанияСоСкладаОтправителя.Колонки.Добавить("ЦенаРозничная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписанияСоСкладаОтправителя.Колонки.Добавить("СпособРаспределенияЗаказов", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРаспределенияЗаказов"));
	СписанияСоСкладаОтправителя.Колонки.Добавить("Резерв", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	СписанияСоСкладаОтправителя.ЗаполнитьЗначения(0, "Резерв");
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	Для Каждого СписанныйТовар Из СписанияСоСкладаОтправителя Цикл
		
		СписанныйТовар.СпособРаспределенияЗаказов = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое");
		
		УсловиеПоиска = Новый Структура(
			"Номенклатура,ХарактеристикаНоменклатуры",
			СписанныйТовар.Номенклатура,
			СписанныйТовар.ХарактеристикаНоменклатуры
		);
		
		НайденныеСтроки = Товары.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() = 0 И СписанныйТовар.ХарактеристикаНоменклатуры <> ПустаяХарактеристика Тогда
			
			УсловиеПоиска.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
			НайденныеСтроки = Товары.НайтиСтроки(УсловиеПоиска);
			
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СписанныйТовар.ЦенаРозничная =  НайденныеСтроки[0].ЦенаРозничная;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("СписанияСоСкладаОтправителя", СписанияСоСкладаОтправителя);
	
КонецПроцедуры

Функция СписатьЗаказыВПути()
	
	
	Если
		ХозОперация <> Справочники.ХозОперации.ПеремещениеТоваровИзФилиала
		Или Не ИспользоватьТоварыВПути
	Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТоварыВДокументе = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства.ДляПроведения,
		"ТоварыОприходывание_ПеремещениеЗаказов"
	); // РезультатЗапроса
	
	Если ТоварыВДокументе.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТоварыВДокументе = ТоварыВДокументе.Выгрузить();
	
	Отборы = Новый Структура();
	Отборы.Вставить("НаМомент", МоментВремени());
	Отборы.Вставить("Организация", Организация);
	Отборы.Вставить("Отправитель", ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель);
	Отборы.Вставить("Получатель", ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель);
	Отборы.Вставить("СписокНоменклатуры", ТоварыВДокументе.ВыгрузитьКолонку("Номенклатура"));
	
	ОстаткиЗаказовВПути = ОстаткиЗаказовВПути(Отборы); // ТаблицаЗначений
	Результат = Ложь;
	
	Для Каждого ТоварнаяПозиция Из ТоварыВДокументе Цикл
		
		УсловиеПоиска = Новый Структура("Номенклатура", ТоварнаяПозиция.Номенклатура);
		
		Если ЗначениеЗаполнено(ТоварнаяПозиция.Заказ) Тогда
			
			УсловиеПоиска.Вставить("Заказ", ТоварнаяПозиция.Заказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварнаяПозиция.ХарактеристикаНоменклатуры) Тогда
			
			УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", ТоварнаяПозиция.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
		ОстаткиТовараВПути = ОстаткиЗаказовВПути.НайтиСтроки(УсловиеПоиска);
		ТребуетсяСписать = ТоварнаяПозиция.Количество;
		
		Для Каждого ЗаписьОстатка Из ОстаткиТовараВПути Цикл
			
			Если ТребуетсяСписать = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			СписываемРезерв = Мин(ЗаписьОстатка.ОстатокРезерв, ТребуетсяСписать);
			Списываем = Мин(ЗаписьОстатка.Остаток, СписываемРезерв);
			СписываемРезервСвободный = Мин(ЗаписьОстатка.ОстатокРезервСвободный, СписываемРезерв);
			
			Если Списываем = ЗаписьОстатка.Остаток Тогда
				
				СписываемСумма = ЗаписьОстатка.СуммаОстаток;
				СписываемСуммаУпр = ЗаписьОстатка.СуммаУпрОстаток;
				
			ИначеЕсли ЗаписьОстатка.Остаток <> 0 Тогда
				
				СписываемСумма = ЗаписьОстатка.СуммаОстаток * Списываем / ЗаписьОстатка.Остаток;
				СписываемСуммаУпр = ЗаписьОстатка.СуммаУпрОстаток * Списываем / ЗаписьОстатка.Остаток;
				
			Иначе
				
				СписываемСумма = 0;
				СписываемСуммаУпр = 0;
				
			КонецЕсли;
			
			ЗаписьОстатка.Остаток = ЗаписьОстатка.Остаток - Списываем;
			ЗаписьОстатка.ОстатокРезерв = ЗаписьОстатка.ОстатокРезерв - СписываемРезерв;
			ЗаписьОстатка.ОстатокРезервСвободный = ЗаписьОстатка.ОстатокРезервСвободный - СписываемРезервСвободный;
			ЗаписьОстатка.СуммаОстаток = ЗаписьОстатка.СуммаОстаток - СписываемСумма;
			ЗаписьОстатка.СуммаУпрОстаток = ЗаписьОстатка.СуммаУпрОстаток - СписываемСуммаУпр;
			
			ТребуетсяСписать = ТребуетсяСписать - СписываемРезерв;
			
			НоваяЗапись                 = Движения.ТоварыВПутиЗаказыКлиентов.ДобавитьРасход();
			НоваяЗапись.Период          = Дата;
			НоваяЗапись.Регистратор     = Ссылка;
			НоваяЗапись.Организация     = Организация;
			НоваяЗапись.Отправитель     = ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель;
			НоваяЗапись.Получатель      = ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель;
			НоваяЗапись.Номенклатура    = ЗаписьОстатка.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры  = ЗаписьОстатка.ХарактеристикаНоменклатуры;
			НоваяЗапись.Заказ           = ЗаписьОстатка.Заказ;
			НоваяЗапись.Контрагент      = ЗаписьОстатка.Контрагент;
			НоваяЗапись.Заказано        = Списываем;
			НоваяЗапись.Резерв          = СписываемРезерв;
			НоваяЗапись.РезервСвободный = СписываемРезервСвободный; 
			НоваяЗапись.Сумма           = СписываемСумма;
			НоваяЗапись.СуммаУпр        = СписываемСуммаУпр;
						
		КонецЦикла;
		
		Если ТребуетсяСписать > 0 И ЗначениеЗаполнено(ТоварнаяПозиция.Заказ) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					ТоварыВПути.ОшибкаНеХватаетТовараСЗаказом(),
					ТоварнаяПозиция.Номенклатура,
					ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель,
					ТоварнаяПозиция.Заказ,
					ТребуетсяСписать
				)
			);
			Результат = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Результат Тогда

			
		ДополнительныеСвойства.ДляПроведения.Вставить("ПеремещенныеЗаказыССуммами",
			Движения.ТоварыВПутиЗаказыКлиентов.Выгрузить());
		
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОстаткиЗаказовВПути(Отборы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыВПутиЗаказыКлиентовОстатки.Номенклатура,
		|	ТоварыВПутиЗаказыКлиентовОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВПутиЗаказыКлиентовОстатки.Заказ,
		|	ТоварыВПутиЗаказыКлиентовОстатки.Контрагент,
		|	ТоварыВПутиЗаказыКлиентовОстатки.ЗаказаноОстаток КАК Остаток,
		|	ТоварыВПутиЗаказыКлиентовОстатки.РезервОстаток КАК ОстатокРезерв,
		|	ТоварыВПутиЗаказыКлиентовОстатки.РезервСвободныйОстаток КАК ОстатокРезервСвободный,
		|	ТоварыВПутиЗаказыКлиентовОстатки.СуммаОстаток,
		|	ТоварыВПутиЗаказыКлиентовОстатки.СуммаУпрОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыВПутиЗаказыКлиентов.Остатки(
		|		&НаМомент,
		|		Организация = &Организация
		|		И Отправитель = &Отправитель
		|		И Получатель = &Получатель
		|		И Номенклатура В (&СписокНоменклатуры)
		|	) КАК ТоварыВПутиЗаказыКлиентовОстатки"
	);
	Запрос.УстановитьПараметр("НаМомент", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отборы, "НаМомент"));
	Запрос.УстановитьПараметр("Организация", Отборы.Организация);
	Запрос.УстановитьПараметр("Отправитель", Отборы.Отправитель);
	Запрос.УстановитьПараметр("Получатель", Отборы.Получатель);
	Запрос.УстановитьПараметр("СписокНоменклатуры", Отборы.СписокНоменклатуры);
	// TODO: Блокировки
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СписатьТоварыВПути()
	
	Если
		ХозОперация <> Справочники.ХозОперации.ПеремещениеТоваровИзФилиала
		Или Не ИспользоватьТоварыВПути
	Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
		
	ТоварыВДокументе = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства.ДляПроведения,
		"ТоварыВДокументе"
	); // РезультатЗапроса
	
	Если ТоварыВДокументе.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТоварыВДокументе = ТоварыВДокументе.Выгрузить();
	
	Отборы = Новый Структура();
	Отборы.Вставить("НаМомент", МоментВремени());
	Отборы.Вставить("Организация", Организация);
	Отборы.Вставить("Отправитель", ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель);
	Отборы.Вставить("Получатель", ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель);
	Отборы.Вставить("СписокНоменклатуры", ТоварыВДокументе.ВыгрузитьКолонку("Номенклатура"));
			
	ОстаткиТоваровВПути = ОстаткиТоваровВПути(Отборы); // ТаблицаЗначений
	РежимыСписанияХарактеристик = РежимыСписанияХарактеристик(ТоварыВДокументе.ВыгрузитьКолонку("Номенклатура"));
	
	Результат = Ложь;
	
	Для Каждого ТоварнаяПозиция Из ТоварыВДокументе Цикл
		
		УсловиеПоиска = Новый Структура("Номенклатура", ТоварнаяПозиция.Номенклатура);
		ПараметрыХарактеристик = РежимыСписанияХарактеристик.Получить(ТоварнаяПозиция.Номенклатура);
		
		Если
			ЗначениеЗаполнено(ТоварнаяПозиция.ХарактеристикаНоменклатуры)
			Или ПараметрыХарактеристик = Перечисления.РежимыАвтоСписанияХарактеристик.РучноеСписание
		Тогда
			
			УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", ТоварнаяПозиция.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
		ОстаткиТовараВПути = ОстаткиТоваровВПути.НайтиСтроки(УсловиеПоиска);
		
		ТребуетсяСписать = ТоварнаяПозиция.Количество;
		
		Для Каждого ЗаписьОстатка Из ОстаткиТовараВПути Цикл
			
			Если ТребуетсяСписать = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Списываем = Мин(ЗаписьОстатка.Остаток, ТребуетсяСписать);
			ЗаписьОстатка.Остаток = ЗаписьОстатка.Остаток - Списываем;
			ТребуетсяСписать = ТребуетсяСписать - Списываем;
			
			НоваяЗапись = Движения.ТоварыВПути.ДобавитьРасход();
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.Отправитель = ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель;
			НоваяЗапись.Получатель = ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель;
			НоваяЗапись.Номенклатура = ЗаписьОстатка.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ЗаписьОстатка.ХарактеристикаНоменклатуры;
			НоваяЗапись.Количество = Списываем; 
						
		КонецЦикла;
		
		Если ТребуетсяСписать > 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					ТоварыВПути.ОшибкаНеХватаетТовара(),
					ТоварнаяПозиция.Номенклатура,
					ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель,
					ТребуетсяСписать
				)
			);
			Результат = Истина;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если Не Результат Тогда
		
		СохранитьСписанныеТоварыДляОприходывания(Движения.ТоварыВПути.Выгрузить());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОстаткиТоваровВПути(Отборы)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыВПутиОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВПутиОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыВПутиОстатки.КоличествоОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.ТоварыВПути.Остатки(
		|		&НаМомент,
		|		Организация = &Организация
		|		И Отправитель = &Отправитель
		|		И Получатель = &Получатель
		|		И Номенклатура В (&СписокНоменклатуры)
		|	) КАК ТоварыВПутиОстатки"
	);
	Запрос.УстановитьПараметр("НаМомент", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отборы, "НаМомент"));
	Запрос.УстановитьПараметр("Организация", Отборы.Организация);
	Запрос.УстановитьПараметр("Отправитель", Отборы.Отправитель);
	Запрос.УстановитьПараметр("Получатель", Отборы.Получатель);
	Запрос.УстановитьПараметр("СписокНоменклатуры", Отборы.СписокНоменклатуры);
	// TODO: Блокировки
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РежимыСписанияХарактеристик(ПереченьНоменклатуры)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.РучноеСписание)
		|		ИНАЧЕ Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик
		|	КОНЕЦ КАК РежимСписания
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&ПереченьНоменклатуры)"
	);
	Запрос.УстановитьПараметр("ПереченьНоменклатуры", ПереченьНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Соответствие();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Результат.Вставить(Выборка.Номенклатура, Выборка.РежимСписания);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Оприходывание

Функция ОприходоватьЗаказы()
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Товары обязательно разделить на две группы.
	// Товары по которым перемещается резерв и товары которые могут быть использованы для закрытия заказов клиентов
	
	ТоварыДляОприходывания = ТоварыДляОприходывания();
	
	// Закрываем заказы клиентов
	
	Движения.ЗаказыРаспределение.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
	Движения.ЗаказыРаспределение.ДокументОбъект = ЭтотОбъект;
	Движения.ЗаказыРаспределение.РезультатЗапросаПоТоварам = ТоварыДляОприходывания.НужноРаспределить;
	Движения.ЗаказыРаспределение.ЗаказПокупателя = Неопределено;
	Движения.ЗаказыРаспределение.ЗаказПоставщика = Неопределено;
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров Тогда
		
		Движения.ЗаказыРаспределение.СкладКомпании = СкладКомпании;
		
	КонецЕсли;
	
	Движения.ЗаказыРаспределение.ПоБазовомуКоличеству = Истина;
	Движения.ЗаказыРаспределение.ДвиженияПоРознице = Истина;
	Движения.ЗаказыРаспределение.Контрагент = ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель;
	
	Результат = Ложь;
	
	Если Не Движения.ЗаказыРаспределение.ЗакрытиеРаспределенийЗаказовПоставщику() Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	ЗакрытиеРаспределений = Движения.ЗаказыРаспределение.ТаблицаЗакрытияРаспределений;
	ЗакрытиеРаспределений.Колонки.Добавить("СуммаЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ЗакрытиеРаспределений.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Движения.ЗаказыПокупателей.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
	Движения.ЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	Движения.ЗаказыПокупателей.РезультатЗапросаПоТоварам = ЗакрытиеРаспределений;
	Движения.ЗаказыПокупателей.Контрагент = Неопределено;
	Движения.ЗаказыПокупателей.Заказ = Неопределено;
	Движения.ЗаказыПокупателей.СкладКомпании = СкладПолучатель;
	Движения.ЗаказыПокупателей.Заказывать = Ложь;
	Движения.ЗаказыПокупателей.Резервировать = Истина;
	Движения.ЗаказыПокупателей.ПоБазовомуКоличеству = Истина;
	
	Если Не Движения.ЗаказыПокупателей.Приход() Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	// Если есть товары для перемещения оприходуем их
	
	Если ЗначениеЗаполнено(ТоварыДляОприходывания.УжеРаспределенны) Тогда
		
		Движения.ЗаказыПокупателей.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
		Движения.ЗаказыПокупателей.ВидОперации = Перечисления.ВидыОперацийЗаказов.ПеремещениеРезерва;
		Движения.ЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
		Движения.ЗаказыПокупателей.РезультатЗапросаПоТоварам = ТоварыДляОприходывания.УжеРаспределенны;
		Движения.ЗаказыПокупателей.Контрагент = Неопределено;
		Движения.ЗаказыПокупателей.Заказ = Неопределено;
		Движения.ЗаказыПокупателей.СкладКомпании = СкладПолучатель;
		Движения.ЗаказыПокупателей.Заказывать = Ложь;
		Движения.ЗаказыПокупателей.Резервировать = Истина;
		Движения.ЗаказыПокупателей.ПоБазовомуКоличеству = Истина;
		
		Если Не Движения.ЗаказыПокупателей.Приход() Тогда
			
			Результат = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезервыЗаказов = Движения.ЗаказыПокупателей.Выгрузить();
	РезервыЗаказов = РезервыЗаказов.Скопировать(
		РезервыЗаказов.НайтиСтроки(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход))
	);
	РезервыЗаказов.Свернуть("Номенклатура,ХарактеристикаНоменклатуры", "Резерв");
	ДополнительныеСвойства.ДляПроведения.Вставить("РезервыЗаказов", РезервыЗаказов);
	
	Возврат Результат;
	
КонецФункции

Функция ТоварыДляОприходывания()
	
	СписанияСоСкладаОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства.ДляПроведения,
		"СписанияСоСкладаОтправителя",
		ДополнительныеСвойства.ДляПроведения.ТоварыВДокументе.Выгрузить()
	);
	СписанияСоСкладаОтправителя = СписанияСоСкладаОтправителя.Скопировать();
	
	Если Не ЕстьРеквизит(СписанияСоСкладаОтправителя, "СпособРаспределенияЗаказов") Тогда
		
		СписанияСоСкладаОтправителя.Колонки.Добавить("СпособРаспределенияЗаказов", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРаспределенияЗаказов"));
		
	КонецЕсли;
	
	СписанияСоСкладаОтправителя.Колонки.Добавить("Контрагент");
	СписанияСоСкладаОтправителя.Колонки.Добавить("Заказ");
	СписанияСоСкладаОтправителя.Колонки.Добавить("РезервСвободный", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СписанияСоСкладаОтправителя.Колонки.Добавить("СуммаЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СписанияСоСкладаОтправителя.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ПеремещенныеЗаказыССуммами = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства.ДляПроведения,
		"ПеремещенныеЗаказыССуммами");
	
	Результат = Новый Структура(
		"УжеРаспределенны,НужноРаспределить",
		СписанияСоСкладаОтправителя.СкопироватьКолонки(),
		СписанияСоСкладаОтправителя.СкопироватьКолонки()
	);
	
	Если Не ЗначениеЗаполнено(ПеремещенныеЗаказыССуммами) Тогда
		
		Результат.НужноРаспределить = СписанияСоСкладаОтправителя;
		Возврат Результат;
		
	КонецЕсли;
	
	Для Каждого Строка Из СписанияСоСкладаОтправителя Цикл
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
		
		НайденныеСтроки = ПеремещенныеЗаказыССуммами.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			УсловиеПоиска.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НайденныеСтроки = ПеремещенныеЗаказыССуммами.НайтиСтроки(УсловиеПоиска);
			
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НоваяСтрока = Результат.УжеРаспределенны.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Заказ = НайденнаяСтрока.Заказ;
				НоваяСтрока.Контрагент = НайденнаяСтрока.Контрагент;
				НоваяСтрока.Количество = НайденнаяСтрока.Заказано;
				НоваяСтрока.Резерв = НайденнаяСтрока.Резерв;
				НоваяСтрока.РезервСвободный = НайденнаяСтрока.РезервСвободный;
				НоваяСтрока.СуммаЗаказа = НайденнаяСтрока.Сумма;
				НоваяСтрока.СуммаУпр    = НайденнаяСтрока.СуммаУпр;
				НоваяСтрока.СпособРаспределенияЗаказов = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Выборочное");
				Строка.Количество = Строка.Количество - НайденнаяСтрока.Резерв
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Строка.Количество > 0 Тогда
		
			ЗаполнитьЗначенияСвойств(Результат.НужноРаспределить.Добавить(), Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОприходоватьЗаказыВПути()
	
	Если
		ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал
		И ИспользоватьТоварыВПути
	Тогда
		
		ПеремещенныеЗаказыССуммами = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеСвойства.ДляПроведения, "ПеремещенныеЗаказыССуммами");
			
		Если Не ЗначениеЗаполнено(ПеремещенныеЗаказыССуммами) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для Каждого ПеремещеннаяПозиция Из ПеремещенныеЗаказыССуммами Цикл
			
			НоваяЗапись = Движения.ТоварыВПутиЗаказыКлиентов.ДобавитьПриход();
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.Отправитель = ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель;
			НоваяЗапись.Получатель = ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель;
			НоваяЗапись.Номенклатура = ПеремещеннаяПозиция.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ПеремещеннаяПозиция.ХарактеристикаНоменклатуры;
			НоваяЗапись.Заказ = ПеремещеннаяПозиция.Заказ;
			НоваяЗапись.Контрагент = ПеремещеннаяПозиция.Контрагент;
			НоваяЗапись.Заказано = ПеремещеннаяПозиция.Заказано;
			НоваяЗапись.Резерв = ПеремещеннаяПозиция.Резерв;
			НоваяЗапись.РезервСвободный = ПеремещеннаяПозиция.РезервСвободный;
			НоваяЗапись.Сумма = ПеремещеннаяПозиция.Сумма;
			НоваяЗапись.СуммаУпр = ПеремещеннаяПозиция.СуммаУпр;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОприходоватьНаСклад()
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СписанияСоСкладаОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства.ДляПроведения,
		"СписанияСоСкладаОтправителя",
		ДополнительныеСвойства.ДляПроведения.ТоварыВДокументе.Выгрузить()
	);
	
	СписанияСоСкладаОтправителя = ДополнитьДаннымиОРезервахПоЗаказам(СписанияСоСкладаОтправителя);
			
	Движения.ОстаткиТоваровКомпании.РежимПроведения = ДополнительныеСвойства.ДляПроведения.РежимПроведения;
	Движения.ОстаткиТоваровКомпании.ДокументОбъект = ЭтотОбъект;
	Движения.ОстаткиТоваровКомпании.РезультатЗапросаПоТоварам = СписанияСоСкладаОтправителя;
	Движения.ОстаткиТоваровКомпании.СкладКомпании = СкладПолучатель;
	Движения.ОстаткиТоваровКомпании.Приходовать = Истина;
	Движения.ОстаткиТоваровКомпании.Резервировать = Истина;
	Движения.ОстаткиТоваровКомпании.ДвиженияПоРознице = ЭтоПеремещениеВРозницу();
	Движения.ОстаткиТоваровКомпании.ПоБазовомуКоличеству = Истина;
	
	Возврат Не Движения.ОстаткиТоваровКомпании.Приход();
		
КонецФункции

Функция ДополнитьДаннымиОРезервахПоЗаказам(Знач СписанияСоСкладаОтправителя)

	РезервыЗаказов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства.ДляПроведения,
		"РезервыЗаказов");
	
	Если ЗначениеЗаполнено(РезервыЗаказов) Тогда
		
		Для Каждого СписаноСоСклада Из СписанияСоСкладаОтправителя Цикл
			
			ТребуетсяДополнить = СписаноСоСклада.Количество - СписаноСоСклада.Резерв;
			
			УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, СписаноСоСклада);
			РезервыТовара = РезервыЗаказов.НайтиСтроки(УсловиеПоиска);
			
			Если ЗначениеЗаполнено(РезервыТовара) И ЗначениеЗаполнено(СписаноСоСклада.ХарактеристикаНоменклатуры) Тогда
				
				УсловиеПоиска = Новый Структура("Номенклатура", СписаноСоСклада.Номенклатура);
				РезервыТовара = РезервыЗаказов.НайтиСтроки(УсловиеПоиска);
				
			КонецЕсли;
			
			Для Каждого РезервТоваров Из РезервыТовара Цикл
				
				Если РезервТоваров.Резерв = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ТребуетсяДополнить = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				Дополняем = Мин(ТребуетсяДополнить, РезервТоваров.Резерв);
				СписаноСоСклада.Резерв = СписаноСоСклада.Резерв + Дополняем;
				РезервТоваров.Резерв = РезервТоваров.Резерв - Дополняем;
				ТребуетсяДополнить = ТребуетсяДополнить - Дополняем;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписанияСоСкладаОтправителя;
	
КонецФункции

Функция ОприходоватьТоварыВПути()

	Если
		ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал
		И ИспользоватьТоварыВПути
	Тогда
		
		СписанияСоСкладаОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеСвойства.ДляПроведения, "СписанияСоСкладаОтправителя");
		
		Если Не ЗначениеЗаполнено(СписанияСоСкладаОтправителя) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для Каждого СписаннаяПозиция Из СписанияСоСкладаОтправителя Цикл
			
			НоваяЗапись                = Движения.ТоварыВПути.ДобавитьПриход();
			НоваяЗапись.Период         = Дата;
			НоваяЗапись.Регистратор    = Ссылка;
			НоваяЗапись.Организация    = Организация;
			НоваяЗапись.Отправитель    = ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель;
			НоваяЗапись.Получатель     = ДополнительныеСвойства.ДляПроведения.ПодразделениеПолучатель;
			НоваяЗапись.Номенклатура   = СписаннаяПозиция.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СписаннаяПозиция.ХарактеристикаНоменклатуры;
			НоваяЗапись.Количество     = СписаннаяПозиция.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция УстановитьРазничныеЦены()
	
	Если
		Не ЭтоПеремещениеВРозницу()
		Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеКомпании, "УстановкаЦенДокументамиПоступления")
	Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РеквизитыСклада = Новый Структура("Рассчитывается", "ТипЦенРозничнойТорговли.Рассчитывается");
	РеквизитыСклада.Вставить("ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговли");
	РеквизитыСклада.Вставить("ПодразделениеКомпании", "ПодразделениеКомпании");
	ПараметрыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкладПолучатель, РеквизитыСклада);
		
	Если Не ПараметрыСклада.Рассчитывается Тогда
		
		Движения.Цены.ДокументОбъект            = ЭтотОбъект;
		Движения.Цены.Контрагент                = Неопределено;
		Движения.Цены.ТипЦен                    = ПараметрыСклада.ТипЦенРозничнойТорговли;
		Движения.Цены.ПодразделениеКомпании     = ПараметрыСклада.ПодразделениеКомпании;
		Движения.Цены.РезультатЗапросаПоТоварам = Неопределено;
		
		Если Не Движения.Цены.УстановитьЦены() Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала И Не ТипЦен.Рассчитывается Тогда
		
		Движения.Цены.ДокументОбъект            = ЭтотОбъект;
		Движения.Цены.Контрагент                = Неопределено;
		Движения.Цены.ТипЦен                    = ТипЦен;
		Движения.Цены.ИмяРеквизитаЦена          = "Цена";
		Движения.Цены.ПодразделениеКомпании     = ПодразделениеКомпании;
		Движения.Цены.РезультатЗапросаПоТоварам = Неопределено;
		
		Если Не Движения.Цены.УстановитьЦены() Тогда
			
			Возврат Истина;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПеремещениеВРозницу()
	
	Если ТипЗнч(СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") И ЗначениеЗаполнено(СкладПолучатель) Тогда
	
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "Розничный");
		
	КонецЕсли;  
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроведениеПоПартиям

// Формирует движения документа по партионным регистрам.
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка) Экспорт
	
	Отказ = Ложь;
	
	ПодготовитьДанныеДляПроведенияПоПартиям(Режим, ДокументСсылка);
	
	ШапкаДокумента = ДополнительныеСвойства.Шапка;
	
	Если ИспользуетсяОтложенноеПроведение(Отказ) Тогда
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	ДобавлятьКорректирующиеЗаписи = ДополнительныеСвойства.ДляПроведенияПоПартиям.ДобавлятьКорректирующиеЗаписи;
	
	// Если перемещаем из филиала, то оприходуем товар на склад получателя и все
	Если ШапкаДокумента.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		Если ДополнительныеСвойства.Шапка.ИспользоватьТоварыВПути Тогда
			
			СписатьПартииВПуть(Отказ);
			
		КонецЕсли;
		
		ОприходыватьПартии_ПеремещениеТоваровИзФилиала(Отказ);
		
	Иначе
		
		ПереместитьПартии(Отказ);
		
		Если
			ДополнительныеСвойства.Шапка.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал
			И ДополнительныеСвойства.Шапка.ИспользоватьТоварыВПути
		Тогда
			
			ОприходоватьПартииВПути(Отказ);
			
		КонецЕсли;
		
		Если ДобавлятьКорректирующиеЗаписи Или ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
			
			ВыполнитьБалансировкуДоходовИРасходов(Отказ);
						
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Движения.ПартииТоваровКомпании.Записать();
		Движения.ТоварыВПутиПартии.Записать();
	
	КонецЕсли; 	
	
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат Не Отказ;
	
КонецФункции

#Область ИнициализацияПроведенияПоПартиям

Процедура ПодготовитьДанныеДляПроведенияПоПартиям(РежимПроведения, Документ)
	
	Шапка = ПолучитьШапкуДокумента(Документ);
	ДополнительныеСвойства.Вставить("Шапка", Шапка);
	ДляПроведенияПоПартиям = Новый Структура();
	
	// БАЛАНС: Если происходит перемещение товаров между складами подразделений, принадлежащих
	// различным балансовым "веткам", то возможен разрыв баланса.
	ДобавлятьКорректирующиеЗаписи = БалансВедетсяПоПодразделениям(Дата);
	
	Если ДобавлятьКорректирующиеЗаписи Тогда
		
		ПодразделениеОтправителя = Справочники
			.ПодразделенияКомпании
			.ПолучитьБалансовоеПодразделение(Шапка.ПодразделениеОтправителя, Шапка.Дата);
		ПодразделениеПолучатель = Справочники
			.ПодразделенияКомпании
			.ПолучитьБалансовоеПодразделение(Шапка.ПодразделениеПолучателя, Шапка.Дата);
			
		ДобавлятьКорректирующиеЗаписи = ДобавлятьКорректирующиеЗаписи
    		И ПодразделениеОтправителя <> ПодразделениеПолучатель
    		И Шапка.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров;
		
	КонецЕсли;
	
	ДляПроведенияПоПартиям.Вставить("ДобавлятьКорректирующиеЗаписи", ДобавлятьКорректирующиеЗаписи);
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(
		Шапка.СкладКомпании,
		Шапка.Организация,
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, Шапка.Дата)
	); 
	ДляПроведенияПоПартиям.Вставить("СтратегияСписанияПартийТоваровПоДатам", СтратегияСписанияПартийТоваровПоДатам);
	ДляПроведенияПоПартиям.Вставить(
		"ПоСреднему",
		СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя
	);
	
	ДляПроведенияПоПартиям.Вставить("ПартияТоваровОтрицательныхОстатков",
		Константы.ПартияТоваровОтрицательныхОстатков.Получить());
	
	ДляПроведенияПоПартиям.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДляПроведенияПоПартиям.ВалютаРегл, Шапка.Дата);
	ДляПроведенияПоПартиям.Вставить(
		"КурсРегл",
		СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность)
	);
	
	ДляПроведенияПоПартиям.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	
	Если Не ЗначениеЗаполнено(Шапка.КурсВалютыУпр) Тогда
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДляПроведенияПоПартиям.ВалютаУпр, Шапка.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
	Иначе
		
		КурсУпр = Шапка.КурсВалютыУпр;
		
	КонецЕсли;
	
	ДляПроведенияПоПартиям.Вставить("КурсУпр", КурсУпр);
	
	ДополнительныеСвойства.Вставить("ДляПроведенияПоПартиям", ДляПроведенияПоПартиям);
	
КонецПроцедуры

// Если подразделение проводиться по партиям "отложенно", то зафиксируем документ.
//
Функция ИспользуетсяОтложенноеПроведение(Отказ)
	
	НаборЗаписейДопроведениеПоПартиям = Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ДополнительныеСвойства.Шапка;
	Отказ = Не НаборЗаписейДопроведениеПоПартиям.Зафиксировать() Или Отказ;
	Возврат НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии;
	
КонецФункции

#КонецОбласти

#Область СписаниеПартий

Процедура ПереместитьПартии(Отказ)
	
	Движения.ПартииТоваровКомпании.ДокументОбъект            = ЭтотОбъект;
	Движения.ПартииТоваровКомпании.СкладКомпании             = ДополнительныеСвойства.Шапка.СкладКомпании;
	Движения.ПартииТоваровКомпании.Организация               = ДополнительныеСвойства.Шапка.Организация;
	Движения.ПартииТоваровКомпании.ИмяРеквизитаДокумент      = ?(ВДокументеУказаныПартии(), "Партия", "");
	Движения.ПартииТоваровКомпании.СкладКомпанииКуда         = ДополнительныеСвойства.Шапка.СкладПолучатель;
	Движения.ПартииТоваровКомпании.ШапкаДокумента            = ДополнительныеСвойства.Шапка;
	Движения.ПартииТоваровКомпании.РезультатЗапросаПоТоварам = РезультатЗапросаКТоварамДляПартий(
		ДополнительныеСвойства.Шапка);
	Движения.ПартииТоваровКомпании.ПоБазовомуКоличеству      = Истина;
	
	// Если перемещение в филиал, то не будем приходовать
	Если ДополнительныеСвойства.Шапка.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
		
		Движения.ПартииТоваровКомпании.СкладКомпанииКуда = Неопределено;
		
	КонецЕсли;
	
	Отказ = Не Движения.ПартииТоваровКомпании.Расход() Или Отказ;
	Движения.ПартииТоваровКомпании.ГраницаРасчетаОстатков = Неопределено;
	
КонецПроцедуры

Функция ВДокументеУказаныПартии()
	
	Для Каждого СтрокаТовар Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыполнитьБалансировкуДоходовИРасходов(Отказ)
	
	Партии = Движения.ПартииТоваровКомпании.Выгрузить();
	Партии.Свернуть("СтатусПартии, ВидДвижения","СуммаУпр");
	
	Для Каждого СтрокаПартии Из Партии Цикл
		  	
		Если СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаПартии.СуммаУпр <> 0 Тогда
			
			Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				
				НаборЗаписейДоходыРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
				
				Если БалансВедетсяПоПодразделениям(Дата) Тогда
					
					НаборЗаписейДоходыРасходы.Подразделение = ДополнительныеСвойства.Шапка.ПодразделениеОтправителя;
					
				Иначе
					
					НаборЗаписейДоходыРасходы.Подразделение = Неопределено;
					
				КонецЕсли;
				
				НаборЗаписейДоходыРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
				НаборЗаписейДоходыРасходы.ШапкаДокумента = ДополнительныеСвойства.Шапка;
				НаборЗаписейДоходыРасходы.Расход         = СтрокаПартии.СуммаУпр;
				Отказ = Не НаборЗаписейДоходыРасходы.Приход() Или Отказ;
				
			Иначе
				
				НаборЗаписейДоходыРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыРасходы.Подразделение  = ДополнительныеСвойства.Шапка.ПодразделениеПолучателя; 
				НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
				НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники
					.СтатьиДоходовИРасходов
					.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДоходыРасходы.ШапкаДокумента = ДополнительныеСвойства.Шапка;
				НаборЗаписейДоходыРасходы.Доход          = СтрокаПартии.СуммаУпр;
				Отказ = Не НаборЗаписейДоходыРасходы.Приход() Или Отказ;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СписатьПартииВПуть(Отказ)
	
	ДанныеПартийВПути = ДанныеПартийВПути();
	ПеремещаемыеТовары = ДанныеПартийВПути.ПеремещаемыеТовары;
	
	Пока ПеремещаемыеТовары.Следующий() Цикл
		
		НужноСписать = ПеремещаемыеТовары.Количество;
		
		УсловиеПоиска = Новый Структура("Номенклатура", ПеремещаемыеТовары.Номенклатура);
		
		Если ЗначениеЗаполнено(ПеремещаемыеТовары.ХарактеристикаНоменклатуры) Тогда
			
			УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", ПеремещаемыеТовары.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПеремещаемыеТовары.Партия) Тогда
			
			УсловиеПоиска.Вставить("Партия", ПеремещаемыеТовары.Партия);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПеремещаемыеТовары.ГТД) Тогда
			
			УсловиеПоиска.Вставить("ГТД", ПеремещаемыеТовары.ГТД);
			
		КонецЕсли;
		
		НайденныеСтроки = ДанныеПартийВПути.ОстаткиПартийВПути.НайтиСтроки(УсловиеПоиска);
		
		Для Каждого Остаток Из НайденныеСтроки Цикл
			
			Если НужноСписать = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Списываем = Мин(НужноСписать, Остаток.Количество);
			
			Если Списываем = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяЗапись = Движения.ТоварыВПутиПартии.ДобавитьРасход();
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Организация = ДополнительныеСвойства.Шапка.Организация;
			НоваяЗапись.Отправитель = ДополнительныеСвойства.Шапка.ПодразделениеОтправителя;
			НоваяЗапись.Получатель = ДополнительныеСвойства.Шапка.ПодразделениеПолучателя;
			НоваяЗапись.Номенклатура = Остаток.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = Остаток.ХарактеристикаНоменклатуры;
			НоваяЗапись.СтатусПартии = Остаток.СтатусПартии;
			НоваяЗапись.Партия = Остаток.Партия;
			НоваяЗапись.ГТД = Остаток.ГТД;
			НоваяЗапись.Количество = Списываем;
			
			Если Остаток.Количество = Списываем Тогда
				
				НоваяЗапись.Сумма = Остаток.Сумма;
				НоваяЗапись.СуммаУпр = Остаток.СуммаУпр;
				НоваяЗапись.СуммаНДС = Остаток.СуммаНДС;
				НоваяЗапись.СуммаНДСУпр = Остаток.СуммаНДСУпр;
				НоваяЗапись.СуммаБезНДС = Остаток.СуммаБезНДС;
				НоваяЗапись.СуммаБезНДСУпр = Остаток.СуммаБезНДСУпр;
								
			Иначе
				
				НоваяЗапись.Сумма = Остаток.Сумма / Остаток.Количество * Списываем;
				НоваяЗапись.СуммаУпр = Остаток.СуммаУпр / Остаток.Количество * Списываем;
				НоваяЗапись.СуммаНДС = Остаток.СуммаНДС / Остаток.Количество * Списываем;
				НоваяЗапись.СуммаНДСУпр = Остаток.СуммаНДСУпр / Остаток.Количество * Списываем;
				НоваяЗапись.СуммаБезНДС = Остаток.СуммаБезНДС / Остаток.Количество * Списываем;
				НоваяЗапись.СуммаБезНДСУпр = Остаток.СуммаБезНДСУпр / Остаток.Количество * Списываем;
				
				Остаток.Сумма = Остаток.Сумма - НоваяЗапись.Сумма;
				Остаток.СуммаУпр = Остаток.СуммаУпр - НоваяЗапись.СуммаУпр;
				Остаток.СуммаНДС = Остаток.СуммаНДС - НоваяЗапись.СуммаНДС;
				Остаток.СуммаНДСУпр = Остаток.СуммаНДСУпр - НоваяЗапись.СуммаНДСУпр;
				Остаток.СуммаБезНДС = Остаток.СуммаБезНДС - НоваяЗапись.СуммаБезНДС;
				Остаток.СуммаБезНДСУпр = Остаток.СуммаБезНДСУпр - НоваяЗапись.СуммаБезНДСУпр;
				
			КонецЕсли;
			 
			 НужноСписать = НужноСписать - Списываем;
			 Остаток.Количество = Остаток.Количество  - Списываем;
			
		КонецЦикла;
		
		Если НужноСписать > 0 Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					ТоварыВПути.ОшибкаНеХватаетТовара(),
					ПеремещаемыеТовары.Номенклатура,
					ДополнительныеСвойства.ДляПроведения.ПодразделениеОтправитель,
					НужноСписать
				)
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		
		СписанныеПартии = Движения.ТоварыВПутиПартии.Выгрузить();
		СписанныеПартии.Свернуть(
			"Номенклатура,ХарактеристикаНоменклатуры,СтатусПартии,Партия",
			"Количество,Сумма,СуммаУпр,СуммаНДС,СуммаНДСУпр,СуммаБезНДС,СуммаБезНДСУпр" 
		);
		
		СписанныеГТД = Движения.ТоварыВПутиПартии.Выгрузить();
		СписанныеГТД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ГТД,Партия", "Количество");
		
		ДополнительныеСвойства.Вставить("СписанныеПартии", СписанныеПартии);
		ДополнительныеСвойства.Вставить("СписанныеГТД", СписанныеГТД);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПартийВПути()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПеремещениеТоваровТовары.КоличествоБазовое КАК Количество,
		|	ПеремещениеТоваровТовары.Партия КАК Партия,
		|	ПеремещениеТоваровТовары.ГТД КАК ГТД
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &ЭтотДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВПутиПартииОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВПутиПартииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыВПутиПартииОстатки.СтатусПартии КАК СтатусПартии,
		|	ТоварыВПутиПартииОстатки.Партия КАК Партия,
		|	ТоварыВПутиПартииОстатки.ГТД КАК ГТД,
		|	ТоварыВПутиПартииОстатки.КоличествоОстаток КАК Количество,
		|	ТоварыВПутиПартииОстатки.СуммаОстаток КАК Сумма,
		|	ТоварыВПутиПартииОстатки.СуммаУпрОстаток КАК СуммаУпр,
		|	ТоварыВПутиПартииОстатки.СуммаНДСОстаток КАК СуммаНДС,
		|	ТоварыВПутиПартииОстатки.СуммаНДСУпрОстаток КАК СуммаНДСУпр,
		|	ТоварыВПутиПартииОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	ТоварыВПутиПартииОстатки.СуммаБезНДСУпрОстаток КАК СуммаБезНДСУпр
		|ИЗ
		|	РегистрНакопления.ТоварыВПутиПартии.Остатки(&Момент, Организация = &Организация
		|	И Отправитель = &Отправитель
		|	И Получатель = &Получатель
		|	И Номенклатура В
		|		(ВЫБРАТЬ
		|			ПеремещениеТоваровТовары.Номенклатура
		|		ИЗ
		|			Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ГДЕ
		|			ПеремещениеТоваровТовары.Ссылка = &ЭтотДокумент)) КАК ТоварыВПутиПартииОстатки"
	);
	Запрос.УстановитьПараметр("Момент", ДополнительныеСвойства.Шапка.МоментВремени);
	Запрос.УстановитьПараметр("ЭтотДокумент", ДополнительныеСвойства.Шапка.Ссылка);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.Шапка.Организация);
	Запрос.УстановитьПараметр("Отправитель", ДополнительныеСвойства.Шапка.ПодразделениеОтправителя);
	Запрос.УстановитьПараметр("Получатель", ДополнительныеСвойства.Шапка.ПодразделениеПолучателя);
	
	ПеремещаемыеТовары = 0;
	ОстаткиПартийВПути = 1;
	РезультатыЗапроса =  Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура(
		"ПеремещаемыеТовары,ОстаткиПартийВПути",
		РезультатыЗапроса[ПеремещаемыеТовары].Выбрать(),
		РезультатыЗапроса[ОстаткиПартийВПути].Выгрузить()
	);
	
КонецФункции

#КонецОбласти

#Область ОприходываниеПартий

Процедура ОприходыватьПартии_ПеремещениеТоваровИзФилиала(Отказ)
	
	Шапка = ДополнительныеСвойства.Шапка;
	
	НаборЗаписейПартии = Движения.ПартииТоваровКомпании;
	НаборЗаписейГТД = Движения.ГТДПартийТоваровКомпании;
		
	ТоварыДляОприходывания = ТоварыДляОприходывания_ПеремещениеТоваровИзФилиала();
	
	ПартииДляОприходывания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "СписанныеПартии");
	
	Если Не ЗначениеЗаполнено(ПартииДляОприходывания) Тогда
		
		ПартииДляОприходывания = ПартииДляОприходывания_ПеремещениеТоваровИзФилиала();
		
	КонецЕсли;
	
	ГТДДляОприходывания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "СписанныеГТД");
	
	Если Не ЗначениеЗаполнено(ГТДДляОприходывания) Тогда
		
		ГТДДляОприходывания = ГТДДляОприходывания_ПеремещениеТоваровИзФилиала();
		
	КонецЕсли;
	
	ВалютаРегл = ДополнительныеСвойства.ДляПроведенияПоПартиям.ВалютаРегл;
	КурсРегл = ДополнительныеСвойства.ДляПроведенияПоПартиям.КурсРегл;
	ВалютаУпр = ДополнительныеСвойства.ДляПроведенияПоПартиям.ВалютаУпр;
	КурсУпр = ДополнительныеСвойства.ДляПроведенияПоПартиям.КурсУпр;
	
	Пока ТоварыДляОприходывания.Следующий() Цикл
		
		НадоОприходовать = ТоварыДляОприходывания.Количество;
		НадоОприходоватьГТД = ТоварыДляОприходывания.Количество;
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, ТоварыДляОприходывания);
		
		Если Не ЗначениеЗаполнено(ТоварыДляОприходывания.ХарактеристикаНоменклатуры) Тогда
			
			УсловиеПоиска.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыДляОприходывания.Партия) Тогда
			
			УсловиеПоиска.Вставить("Партия", ТоварыДляОприходывания.Партия);
			
		КонецЕсли;
		
		НайденныеПартии = ПартииДляОприходывания.НайтиСтроки(УсловиеПоиска);
		
		Для Сч = 0 По НайденныеПартии.ВГраница() Цикл
			
			ТекСтрока=НайденныеПартии[Сч];
			КоличествоПартииВсего=ТекСтрока.Количество;
			НоваяЗапись=НаборЗаписейПартии.Добавить();
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период=Шапка.Дата;
			НоваяЗапись.Регистратор=Шапка.Ссылка;
			НоваяЗапись.Партия = ТекСтрока.Партия;
			НоваяЗапись.СтатусПартии=ТекСтрока.СтатусПартии;
			НоваяЗапись.СкладКомпании=Шапка.СкладПолучатель;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				Шапка.Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период,
			);
			НоваяЗапись.Номенклатура=ТоварыДляОприходывания.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры=ТоварыДляОприходывания.ХарактеристикаНоменклатуры;
			НоваяЗапись.ХозОперация=Шапка.ХозОперация;
			НоваяЗапись.СтавкаНДС = ТоварыДляОприходывания.СтавкаНДС;
			НоваяЗапись.Количество=Мин(ТекСтрока.Количество,НадоОприходовать);
			НоваяЗапись.Сумма=Окр(ТекСтрока.Сумма*НоваяЗапись.Количество/КоличествоПартииВсего,2);
			НоваяЗапись.СуммаНДС=Окр(ТекСтрока.СуммаНДС*НоваяЗапись.Количество/КоличествоПартииВсего,2);
			НоваяЗапись.СуммаБезНДС=НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр=Окр(ТекСтрока.СуммаУпр*НоваяЗапись.Количество/КоличествоПартииВсего,2);
			НоваяЗапись.СуммаНДСУпр=Окр(ТекСтрока.СуммаНДСУпр*НоваяЗапись.Количество/КоличествоПартииВсего,2);
			НоваяЗапись.СуммаБезНДСУпр=НоваяЗапись.СуммаУпр-НоваяЗапись.СуммаНДСУпр;
			
			// Уменьшаем приходуемое количество
			НадоОприходовать=НадоОприходовать-НоваяЗапись.Количество;
			НадоОприходоватьПоПартии=НоваяЗапись.Количество;
			
			// Оприходуем ГТД партий
			УсловиеПоиска.Вставить("Партия", ТекСтрока.Партия);
			
			Если ЗначениеЗаполнено(ТоварыДляОприходывания.ГТД) Тогда
				
				УсловиеПоиска.Вставить("ГТД",ТоварыДляОприходывания.ГТД);
				
			КонецЕсли;
			 
			МассивНайденныхГТД = ГТДДляОприходывания.НайтиСтроки(УсловиеПоиска);
			
			Для СчГТД = 0 По МассивНайденныхГТД.ВГраница() Цикл
				
				Если НадоОприходоватьПоПартии = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				 
				ТекСтрокаГТД = МассивНайденныхГТД[СчГТД];
				НоваяЗаписьГТД=НаборЗаписейГТД.Добавить();
				НоваяЗаписьГТД.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяЗаписьГТД.Период=Шапка.Дата;
				НоваяЗаписьГТД.Регистратор=Шапка.Ссылка;
				НоваяЗаписьГТД.Партия=ТекСтрокаГТД.Партия;
				НоваяЗаписьГТД.ГТД=ТекСтрокаГТД.ГТД;
				НоваяЗаписьГТД.СкладКомпании=Шапка.СкладПолучатель;
				НоваяЗаписьГТД.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Шапка.Организация,
					НоваяЗаписьГТД.СкладКомпании,
					НоваяЗаписьГТД.Период
				);
				НоваяЗаписьГТД.Номенклатура=ТекСтрокаГТД.Номенклатура;
				НоваяЗаписьГТД.ХарактеристикаНоменклатуры=ТекСтрокаГТД.ХарактеристикаНоменклатуры;
				НоваяЗаписьГТД.ХозОперация=Шапка.ХозОперация;
				НоваяЗаписьГТД.Количество=Мин(ТекСтрокаГТД.Количество,НадоОприходоватьПоПартии);
				НадоОприходоватьПоПартии=НадоОприходоватьПоПартии-НоваяЗаписьГТД.Количество;
				НадоОприходоватьГТД=НадоОприходоватьГТД-НоваяЗаписьГТД.Количество;
				ТекСтрокаГТД.Количество=ТекСтрокаГТД.Количество-НоваяЗаписьГТД.Количество;
				Если ТекСтрокаГТД.Количество=0 Тогда
					// Удалим за ненадобностью
					ГТДДляОприходывания.Удалить(ТекСтрокаГТД);
				КонецЕсли; 
			КонецЦикла;
			// Если указана ГТД, то оприходуем и ее
			Если (ЗначениеЗаполнено(ТоварыДляОприходывания.ГТД)) И НадоОприходоватьПоПартии>0 Тогда
				НоваяЗаписьГТД=НаборЗаписейГТД.Добавить();
				НоваяЗаписьГТД.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяЗаписьГТД.Период=Шапка.Дата;
				НоваяЗаписьГТД.Регистратор=Шапка.Ссылка;
				НоваяЗаписьГТД.Партия=ТекСтрока.Партия;
				НоваяЗаписьГТД.ГТД=ТоварыДляОприходывания.ГТД;
				НоваяЗаписьГТД.СкладКомпании=Шапка.СкладПолучатель;
				НоваяЗаписьГТД.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					Шапка.Организация,
					НоваяЗаписьГТД.СкладКомпании,
					НоваяЗаписьГТД.Период
				);
				НоваяЗаписьГТД.Номенклатура=ТоварыДляОприходывания.Номенклатура;
				НоваяЗаписьГТД.ХарактеристикаНоменклатуры=ТоварыДляОприходывания.ХарактеристикаНоменклатуры;
				НоваяЗаписьГТД.ХозОперация=Шапка.ХозОперация;
				НоваяЗаписьГТД.Количество=НадоОприходоватьПоПартии;
				НадоОприходоватьГТД=НадоОприходоватьГТД-НоваяЗаписьГТД.Количество;
			КонецЕсли; 
			ТекСтрока.Количество=ТекСтрока.Количество-НоваяЗапись.Количество;
			ТекСтрока.Сумма=ТекСтрока.Сумма - НоваяЗапись.Сумма;
			ТекСтрока.СуммаНДС=ТекСтрока.СуммаНДС - НоваяЗапись.СуммаНДС;
			ТекСтрока.СуммаБезНДС=ТекСтрока.СуммаБезНДС - НоваяЗапись.СуммаБезНДС;
			ТекСтрока.СуммаУпр=ТекСтрока.СуммаУпр - НоваяЗапись.СуммаУпр;
			ТекСтрока.СуммаНДСУпр=ТекСтрока.СуммаНДСУпр - НоваяЗапись.СуммаНДСУпр;
			ТекСтрока.СуммаБезНДСУпр=ТекСтрока.СуммаБезНДСУпр - НоваяЗапись.СуммаБезНДСУпр;
			Если ТекСтрока.Количество=0 Тогда
				// Удалим за ненадобностью
				ПартииДляОприходывания.Удалить(ТекСтрока);
			КонецЕсли; 
			// Надо ли дальше приходовать
			Если НадоОприходовать<=0 Тогда Прервать; КонецЕсли;
		КонецЦикла;
		
		// Если остался не оприходованный товар, то оприходуем на себя или на указанную партию.
		Если НадоОприходовать>0 Тогда
			НоваяЗапись=НаборЗаписейПартии.Добавить();
			НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период        = Шапка.Дата;
			НоваяЗапись.Регистратор   = Шапка.Ссылка;
			НоваяЗапись.Партия        = ?(НЕ ЗначениеЗаполнено(ТоварыДляОприходывания.Партия),Шапка.Ссылка,ТоварыДляОприходывания.Партия);
			Если НЕ ЗначениеЗаполнено(ТоварыДляОприходывания.Партия) Тогда
				НоваяЗапись.СтатусПартии  = Перечисления.СтатусыПартий.ТоварКупленный;
			Иначе
				УсловиеПоиска=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Партия");
				УсловиеПоиска.Номенклатура=ТоварыДляОприходывания.Номенклатура; 
				УсловиеПоиска.Партия=ТоварыДляОприходывания.Партия;
				Если ЗначениеЗаполнено(ТоварыДляОприходывания.ХарактеристикаНоменклатуры) Тогда
					УсловиеПоиска.ХарактеристикаНоменклатуры=ТоварыДляОприходывания.ХарактеристикаНоменклатуры;
				Иначе
					УсловиеПоиска.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				КонецЕсли;
				НайденныеПартии=ПартииДляОприходывания.НайтиСтроки(УсловиеПоиска);
				Если НайденныеПартии.Количество() > 0 Тогда
					НоваяЗапись.СтатусПартии = НайденныеПартии[0].СтатусПартии;
				Иначе
					НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
				КонецЕсли;
			КонецЕсли;
			НоваяЗапись.СкладКомпании = Шапка.СкладПолучатель;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				Шапка.Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период
			);
			НоваяЗапись.Номенклатура  = ТоварыДляОприходывания.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ТоварыДляОприходывания.ХарактеристикаНоменклатуры;
			НоваяЗапись.ХозОперация = Шапка.ХозОперация;
			НоваяЗапись.Количество  = НадоОприходовать;
			НоваяЗапись.СтавкаНДС   = ТоварыДляОприходывания.СтавкаНДС;
			НоваяЗапись.Сумма       = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТоварыДляОприходывания.СуммаВсего*НоваяЗапись.Количество/ТоварыДляОприходывания.Количество,Шапка.ВалютаДокумента,Шапка.КурсДокумента,ВалютаРегл,КурсРегл),2);
			НоваяЗапись.СуммаНДС    = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТоварыДляОприходывания.СуммаНДС*НоваяЗапись.Количество/ТоварыДляОприходывания.Количество,Шапка.ВалютаДокумента,Шапка.КурсДокумента,ВалютаРегл,КурсРегл),2);
			НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр    = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТоварыДляОприходывания.СуммаВсего*НоваяЗапись.Количество/ТоварыДляОприходывания.Количество,Шапка.ВалютаДокумента,Шапка.КурсДокумента,ВалютаУпр,КурсУпр),2);
			НоваяЗапись.СуммаНДСУпр = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТоварыДляОприходывания.СуммаНДС*НоваяЗапись.Количество/ТоварыДляОприходывания.Количество,Шапка.ВалютаДокумента,Шапка.КурсДокумента,ВалютаУпр,КурсУпр),2);
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр-НоваяЗапись.СуммаНДСУпр;
		КонецЕсли;
		
		// Если указана ГТД, то оприходуем и ее
		Если (ЗначениеЗаполнено(ТоварыДляОприходывания.ГТД)) И НадоОприходоватьГТД>0 Тогда
			НоваяЗаписьГТД=НаборЗаписейГТД.Добавить();
			НоваяЗаписьГТД.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗаписьГТД.Период=Шапка.Дата;
			НоваяЗаписьГТД.Регистратор=Шапка.Ссылка;
			НоваяЗаписьГТД.Партия=ТоварыДляОприходывания.Партия;
			НоваяЗаписьГТД.ГТД=ТоварыДляОприходывания.ГТД;
			НоваяЗаписьГТД.СкладКомпании=Шапка.СкладПолучатель;
			НоваяЗаписьГТД.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				Шапка.Организация,
				НоваяЗаписьГТД.СкладКомпании,
				НоваяЗаписьГТД.Период
			);
			НоваяЗаписьГТД.Номенклатура=ТоварыДляОприходывания.Номенклатура;
			НоваяЗаписьГТД.ХарактеристикаНоменклатуры=ТоварыДляОприходывания.ХарактеристикаНоменклатуры;
			НоваяЗаписьГТД.ХозОперация=Шапка.ХозОперация;
			НоваяЗаписьГТД.Количество=НадоОприходоватьГТД;
		КонецЕсли;
	КонецЦикла;
	
	// ДоходыИРасходы
	
	Движения.ДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
	Движения.ДоходыИРасходы.Подразделение          = Шапка.ПодразделениеПолучателя;
	Движения.ДоходыИРасходы.ВУпрВалюте             = Истина;
	Движения.ДоходыИРасходы.ШапкаДокумента         = Шапка;
	Движения.ДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
	Движения.ДоходыИРасходы.Доход			       = 0;
	
	Для Каждого ЗаписьПартий Из Движения.ПартииТоваровКомпании Цикл
		
		Если ЗаписьПартий.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный Тогда
			
			Движения.ДоходыИРасходы.Доход = Движения.ДоходыИРасходы.Доход + ЗаписьПартий.СуммаУпр;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Не Движения.ДоходыИРасходы.Приход() Или Отказ;
	
	// Конец ДоходыИРасходы
	
КонецПроцедуры

Функция ТоварыДляОприходывания_ПеремещениеТоваровИзФилиала()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокТовары.Номенклатура КАК Номенклатура,
		|	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокТовары.СтавкаНДС КАК СтавкаНДС,
		|	ДокТовары.Партия КАК Партия,
		|	ДокТовары.ГТД КАК ГТД,
		|	СУММА(ДокТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ДокТовары.Сумма) КАК Сумма,
		|	СУММА(ДокТовары.СуммаВсего) КАК СуммаВсего,
		|	СУММА(ДокТовары.Количество * ДокТовары.Коэффициент) КАК Количество
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ДокТовары
		|ГДЕ
		|	ДокТовары.Ссылка = &Ссылка
		|	И ДокТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		|СГРУППИРОВАТЬ ПО
		|	ДокТовары.Номенклатура,
		|	ДокТовары.ХарактеристикаНоменклатуры,
		|	ДокТовары.СтавкаНДС,
		|	ДокТовары.Партия,
		|	ДокТовары.ГТД"
	);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеСвойства.Шапка.Ссылка);
	
	Если ДополнительныеСвойства.ДляПроведенияПоПартиям.ПоСреднему Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокТовары.Партия КАК Партия",
			"&ПартияТоваровОтрицательныхОстатков КАК Партия");
		Запрос.УстановитьПараметр("ПартияТоваровОтрицательныхОстатков",
			ДополнительныеСвойства.ДляПроведенияПоПартиям.ПартияТоваровОтрицательныхОстатков);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПартииДляОприходывания_ПеремещениеТоваровИзФилиала()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
		|	ПартииТоваровКомпании.Партия КАК Партия,
		|	СУММА(ПартииТоваровКомпании.Количество) КАК Количество,
		|	СУММА(ПартииТоваровКомпании.Сумма) КАК Сумма,
		|	СУММА(ПартииТоваровКомпании.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ПартииТоваровКомпании.СуммаБезНДС) КАК СуммаБезНДС,
		|	СУММА(ПартииТоваровКомпании.СуммаУпр) КАК СуммаУпр,
		|	СУММА(ПартииТоваровКомпании.СуммаНДСУпр) КАК СуммаНДСУпр,
		|	СУММА(ПартииТоваровКомпании.СуммаБезНДСУпр) КАК СуммаБезНДСУпр
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровКомпании.Номенклатура,
		|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпании.СтатусПартии,
		|	ПартииТоваровКомпании.Партия"
	);
	Запрос.УстановитьПараметр("Регистратор", ДополнительныеСвойства.Шапка.Ссылка);
	
	Если ДополнительныеСвойства.ДляПроведенияПоПартиям.ПоСреднему Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартииТоваровКомпании.Партия КАК Партия",
			"&ПартияТоваровОтрицательныхОстатков КАК Партия");
		Запрос.УстановитьПараметр("ПартияТоваровОтрицательныхОстатков",
			ДополнительныеСвойства.ДляПроведенияПоПартиям.ПартияТоваровОтрицательныхОстатков);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ГТДДляОприходывания_ПеремещениеТоваровИзФилиала()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.Партия КАК Партия,
		|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
		|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.Партия,
		|	ГТДПартийТоваровКомпании.ГТД"
	);	
	Запрос.УстановитьПараметр("Регистратор", ДополнительныеСвойства.Шапка.ДокументОснование);
	
	Если ДополнительныеСвойства.ДляПроведенияПоПартиям.ПоСреднему Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГТДПартийТоваровКомпании.Партия КАК Партия",
			"&ПартияТоваровОтрицательныхОстатков КАК Партия");
		Запрос.УстановитьПараметр("ПартияТоваровОтрицательныхОстатков",
			ДополнительныеСвойства.ДляПроведенияПоПартиям.ПартияТоваровОтрицательныхОстатков);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОприходоватьПартииВПути(Отказ)
	
	ПартииТоваровКомпании = Движения.ПартииТоваровКомпании.Выгрузить();
	ГТДПартийТоваровКомпании = Движения.ГТДПартийТоваровКомпании.Выгрузить();
	
	ПоляСумм = Новый Массив();
	ПоляСумм.Добавить("Сумма");
	ПоляСумм.Добавить("СуммаУпр");
	ПоляСумм.Добавить("СуммаНДС");
	ПоляСумм.Добавить("СуммаНДСУпр");
	ПоляСумм.Добавить("СуммаБезНДС");
	ПоляСумм.Добавить("СуммаБезНДСУпр"); 
	
	Для Каждого СтрокаПартии Из ПартииТоваровКомпании Цикл
		
		УсловиеПоиска = Новый Структура("СкладКомпании,Номенклатура,ХарактеристикаНоменклатуры,Партия");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаПартии);
		
		НайденныеСтрокиСГТД = ГТДПартийТоваровКомпании.НайтиСтроки(УсловиеПоиска);
		
		Для Каждого СтрокаСГТД Из НайденныеСтрокиСГТД Цикл
			
			Если СтрокаПартии.Количество = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			НоваяЗапись = Движения.ТоварыВПутиПартии.Добавить();
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Регистратор = ДополнительныеСвойства.Шапка.Ссылка;
			НоваяЗапись.Организация = ДополнительныеСвойства.Шапка.Организация;
			НоваяЗапись.Отправитель = ДополнительныеСвойства.Шапка.ПодразделениеОтправителя;
			НоваяЗапись.Получатель = ДополнительныеСвойства.Шапка.ПодразделениеПолучателя;
			ЗаполнитьЗначенияСвойств(
				НоваяЗапись,
				СтрокаПартии,
				"Номенклатура,ХарактеристикаНоменклатуры,СтатусПартии,Партия"
			);	
			НоваяЗапись.ГТД = СтрокаСГТД.ГТД;
			НоваяЗапись.Количество = Мин(СтрокаПартии.Количество, СтрокаСГТД.Количество);
			
			Если НоваяЗапись.Количество = СтрокаПартии.Количество Тогда
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПартии, СтрСоединить(ПоляСумм, ","));
				
				Для Каждого Поле Из ПоляСумм Цикл
					
					СтрокаПартии[Поле] = 0;
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого Поле Из ПоляСумм Цикл
					
					НоваяЗапись[Поле] = СтрокаПартии[Поле] * НоваяЗапись.Количество / СтрокаПартии.Количество;
					СтрокаПартии[Поле] = СтрокаПартии[Поле]- НоваяЗапись[Поле];
					
				КонецЦикла;
				 
			КонецЕсли;
			
			СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяЗапись.Количество;
			
		КонецЦикла;
		
		Если СтрокаПартии.Количество > 0 Тогда
			
			НоваяЗапись = Движения.ТоварыВПутиПартии.Добавить();
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Регистратор = ДополнительныеСвойства.Шапка.Ссылка;
			НоваяЗапись.Организация = ДополнительныеСвойства.Шапка.Организация;
			НоваяЗапись.Отправитель = ДополнительныеСвойства.Шапка.ПодразделениеОтправителя;
			НоваяЗапись.Получатель = ДополнительныеСвойства.Шапка.ПодразделениеПолучателя;
			ЗаполнитьЗначенияСвойств(
				НоваяЗапись,
				СтрокаПартии,
				"Номенклатура,ХарактеристикаНоменклатуры,СтатусПартии,Партия"
			);	
			НоваяЗапись.Количество = СтрокаПартии.Количество;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПартии, СтрСоединить(ПоляСумм, ","));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  ШапкаДокумента - выборка.
//
Функция РезультатЗапросаКТоварамДляПартий(ШапкаДокумента)
   
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПеремещениеТоваровТовары.Партия КАК Партия,
		|	ПеремещениеТоваровТовары.ГТД КАК ГТД,
		|	СУММА(ПеремещениеТоваровТовары.КоличествоБазовое) КАК Количество,
		|	СРЕДНЕЕ(ПеремещениеТоваровТовары.ЦенаРозничная) КАК ЦенаНовая,
		|	СРЕДНЕЕ(ПеремещениеТоваровТовары.ЦенаРозничная) КАК ЦенаРозничная,
	  |	СУММА(0) КАК СуммаРозн
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	  |ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка=&Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры,
		|	ПеремещениеТоваровТовары.Партия,
		|	ПеремещениеТоваровТовары.ГТД"
	);
	
	Если
		ТипЗнч(ШапкаДокумента.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании")
		И ЗначениеЗаполнено(ШапкаДокумента.СкладПолучатель)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШапкаДокумента.СкладПолучатель, "Розничный")
	Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СУММА(0) КАК СуммаРозн",
			"СУММА(ПеремещениеТоваровТовары.ЦенаРозничная * ПеремещениеТоваровТовары.КоличествоБазовое) КАК СуммаРозн"
		);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	Возврат Запрос.Выполнить();
	
КонецФункции

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Документ.Ссылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - возвращает выборку по шапке.
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Если ТипЗнч(ДокументСсылка.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		СтрокаПодразделениеОтправителя = "Док.СкладКомпании.ПодразделениеКомпании";
	Иначе
		СтрокаПодразделениеОтправителя = "Док.СкладКомпании";
	КонецЕсли;
	Если ТипЗнч(ДокументСсылка.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		СтрокаПодразделениеПолучателя = "Док.СкладПолучатель.ПодразделениеКомпании";
	Иначе
		СтрокаПодразделениеПолучателя = "Док.СкладПолучатель";
	КонецЕсли;
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании   КАК СкладКомпании,
	|	Док.СкладПолучатель КАК СкладПолучатель,
	|	Док.ИспользоватьТоварыВПути КАК ИспользоватьТоварыВПути,
	|	"+СтрокаПодразделениеОтправителя+" КАК ПодразделениеОтправителя,
	|	"+СтрокаПодразделениеПолучателя+" КАК ПодразделениеПолучателя, 
	|	Док.ДокументОснование КАК ДокументОснование
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Приходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения.СкладКомпании)=Тип("СправочникСсылка.СкладыКомпании") И ДанныеЗаполнения.СкладКомпании.Розничный Тогда
		СкладПолучатель = ДанныеЗаполнения.СкладКомпании;
	Иначе
		ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров;
		СкладПолучатель = ДанныеЗаполнения.СкладКомпании;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Документы.ПеремещениеТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// заполняем ячейки
	Для Каждого стрТовар Из Товары Цикл
		Если стрТовар.Номенклатура = ДанныеЗаполнения.Товары[стрТовар.НомерСтроки - 1].Номенклатура Тогда
			стрТовар.ЯчейкаПолучатель  = ДанныеЗаполнения.Товары[стрТовар.НомерСтроки - 1].Ячейка;
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Расходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,  ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании")
		И ДанныеЗаполнения.СкладКомпании.Розничный Тогда
		СкладКомпании = ДанныеЗаполнения.СкладКомпании;
	Иначе
		ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров;
		СкладКомпании = ДанныеЗаполнения.СкладКомпании;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Документы.ПеремещениеТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Заполняем ячейки
	Для Каждого стрТовар Из Товары Цикл
		Если стрТовар.Номенклатура = ДанныеЗаполнения.Товары[стрТовар.НомерСтроки - 1].Номенклатура Тогда
			стрТовар.ЯчейкаОтправитель = ДанныеЗаполнения.Товары[стрТовар.НомерСтроки - 1].Ячейка;
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РасходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,  ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < Товары.Количество() Цикл
		СтрТовар = Товары[Сч];
		Если СтрТовар.Количество > 0 Тогда
			Сч = Сч + 1;
		Иначе
			Товары.Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(СкладКомпании)) И (СкладКомпании.Розничный)
		И (ТипЦен <> СкладКомпании.ТипЦенРозничнойТорговли) Тогда
		ТипЦен = СкладКомпании.ТипЦенРозничнойТорговли;
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Неопределено, Истина);
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		Для Каждого СтрТовар Из Товары Цикл
			СтрТовар.Цена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрТовар.Номенклатура,
				?(Ссылка.Пустая(), Дата, МоментВремени()), , ВалютаДокумента, КурсДокумента,
				СтрТовар.ХарактеристикаНоменклатуры, СтрТовар.ЕдиницаИзмерения, ПодразделениеКомпании);
			Документы.ПеремещениеТоваров.ТоварыЦенаПриИзменении(ЭтотОбъект, СтрТовар,ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБазовоеКоличество") Тогда
		Для Каждого стрТовар Из Товары Цикл
			стрТовар.Количество = Окр(стрТовар.КоличествоБазовое / ?(стрТовар.Коэффициент = 0, 1, стрТовар.Коэффициент), 3);
			Документы.ПеремещениеТоваров.ТоварыКоличествоПриИзменении(ЭтотОбъект, стрТовар, ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
	// заполняем ячейки
	Для Каждого стрТовар Из Товары Цикл
		ЯчейкаСсылка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(стрТовар.Номенклатура,СкладКомпании);
		стрТовар.ЯчейкаОтправитель = ЯчейкаСсылка;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Авансовый отчет"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АвансовыйОтчет(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "ПоступлениеТоваров"
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,  ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_АвансовыйОтчет()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,  ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Документы.ПеремещениеТоваров.ЗаполнитьРезервамиПодразделения(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,  ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
		СкладКомпании = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", ЭтотОбъект);
	КонецЕсли;
	Документы.ПеремещениеТоваров.ЗаполнитьРезервамиПодЗаказ(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Возврат от покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,  ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем ячейки
	Для Каждого стрТовар Из Товары Цикл
		Если стрТовар.Номенклатура = ДанныеЗаполнения.Товары[стрТовар.НомерСтроки - 1].Номенклатура Тогда
			стрТовар.ЯчейкаОтправитель = ДанныеЗаполнения.Товары[стрТовар.НомерСтроки - 1].Ячейка;
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателя()

// Производит заполнение объекта на основании документа "Перемещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеТоваров(ДанныеЗаполнения,
                                               ТекстЗаполнения = "",
                                               СтандартнаяОбработка = Истина) Экспорт
											   
	ПрерватьЗаполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
												   
		Возврат Истина;
		
	КонецЕсли; 
	
		
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал ИЛИ 
		ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		
		СкладКомпании	= ДанныеЗаполнения.СкладКомпании;
		СкладПолучатель	= ДанныеЗаполнения.СкладПолучатель;
		
		Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал Тогда
			
			ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала;
			ПараметрыДействия = Новый Структура;
			ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЦенаРозничная(ЭтотОбъект, ПараметрыДействия);

		ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
			
			ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал;
			
		КонецЕсли;
		
	Иначе
			
		ПараметрыДействия = Новый Структура;
		ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЦенаРозничная(ЭтотОбъект, ПараметрыДействия);
	
		СкладКомпании	= ДанныеЗаполнения.СкладПолучатель;
		СкладПолучатель	= ДанныеЗаполнения.СкладКомпании;
		
		Для Каждого Товар Из Товары Цикл
				
			ЯчейкаОтправитель       = Товар.ЯчейкаОтправитель;
			Товар.ЯчейкаОтправитель = Товар.ЯчейкаПолучатель;
			Товар.ЯчейкаПолучатель  = ЯчейкаОтправитель;
			
		КонецЦикла;
					
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеТоваров()

// Производит заполнение объекта на основании документа "Пересортица товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПересортицаТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока 							= Товары.Добавить();
		НоваяСтрока.Номенклатура 				= СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТЧ.ХарактеристикаНоменклатуры;
		Документы.ПеремещениеТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока,ДополнительныеСвойства.ПараметрыДействия);
		НоваяСтрока.КоличествоБазовое 			= СтрокаТЧ.Количество;
		Документы.ПеремещениеТоваров.ТоварыКоличествоБазовоеПриИзменении(ЭтотОбъект, НоваяСтрока,ДополнительныеСвойства.ПараметрыДействия);
		НоваяСтрока.ЦенаРозничная 				= СтрокаТЧ.ЦенаРозничная;
		Документы.ПеремещениеТоваров.ТоварыЦенаРозничнаяПриИзменении(ЭтотОбъект, НоваяСтрока,ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,ЦенаРозничная,ХарактеристикаНоменклатуры,Цена,СтавкаНДС",
		"Количество,КоличествоБазовое,СуммаРозничная,Сумма,СуммаВсего,СуммаНДС");

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПересортицаТоваров()

// Производит заполнение объекта на основании документа "Заказ-наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
		"ВЫБРАТЬ
		|	ЗаказНарядТовары.Ссылка КАК Ссылка,
		|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
		|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ЗаказНарядТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_ЗаказНаряд
		|ИЗ
		|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
		|ГДЕ
		|	ЗаказНарядТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНарядТовары.Номенклатура,
		|	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
		|	ЗаказНарядТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказНаряд.Номенклатура КАК Номенклатура,
		|	ВТ_ЗаказНаряд.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВТ_ЗаказНаряд.Количество > ЕСТЬNULL(ТоварыВПроизводствеОстатки.КоличествоОстаток, 0)
		|			ТОГДА ВТ_ЗаказНаряд.Количество - ЕСТЬNULL(ТоварыВПроизводствеОстатки.КоличествоОстаток, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	ВТ_ЗаказНаряд КАК ВТ_ЗаказНаряд
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &Ссылка) КАК ТоварыВПроизводствеОстатки
		|		ПО ВТ_ЗаказНаряд.Ссылка = ТоварыВПроизводствеОстатки.ЗаказНаряд
		|			И ВТ_ЗаказНаряд.Номенклатура = ТоварыВПроизводствеОстатки.Номенклатура
		|			И ВТ_ЗаказНаряд.ХарактеристикаНоменклатуры = ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры";

	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		НоваяСтрока 							= Товары.Добавить();
		НоваяСтрока.Номенклатура 				= Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
		Документы.ПеремещениеТоваров.ТоварыНоменклатураПриИзменении(
			ЭтотОбъект, НоваяСтрока,ДополнительныеСвойства.ПараметрыДействия);
		НоваяСтрока.Количество		 			= Выборка.Количество;
		Документы.ПеремещениеТоваров.ТоварыКоличествоПриИзменении(
			ЭтотОбъект, НоваяСтрока,ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("Предупреждать", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// Установим параметры проверки заказов
ДополнительныеСвойства.Вставить("ИзменятьЗаказы", Истина);

#КонецОбласти

#КонецЕсли
