#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ТипЦен          = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, , Ложь);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
	// Прочтем признак приобретения автомобиля от физ. лица
	АвтомобилиСервер.ЗаполнитьПризнакиПриобретенияАвтомобилейУФизЛица(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ВхДокНомер = "";
	ВхДокДата = ТекущаяДата();
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда
		
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДоговорВзаиморасчетов,
			"ВидДоговора, ПризнакАгента, ИННПоставщика"
		);
		Если ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеДоговора.ПризнакАгента) Или Не ЗначениеЗаполнено(ДанныеДоговора.ИННПоставщика)Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'В договоре не заполнены данные поставщика'"),
					ЭтотОбъект,
					"ДоговорВзаиморасчетов",
					, 
					Отказ
				);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаАвтомобиля.ЗаказНаАвтомобиль) И СтрокаАвтомобиля.АвтомобильБезЗаказа = Ложь Тогда
			
			ТекстСообщения = НСтр(
				"ru = 'Автомобиль <%1> поступает без заказа. Установите признак поступления автомобиля без заказа.'"
			);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, СокрЛП(СтрокаАвтомобиля.Автомобиль)),
				ЭтотОбъект,
				"Автомобили",
				, 
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если
		ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РабочийЛистВыкупаАвтомобиля")
		И Автомобили.Количество() > 1
	Тогда
		
		ТекстСообщения = НСтр(
			"ru = 'Поступление автомобиля на основании рабочего листа выкупа может содержать только один автомобиль'"
		);
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			Ссылка,
			"Автомобили",
			"Автомобили",
			Отказ
		);
		
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(
		ЭтотОбъект,
		Отказ,
		"Автомобили",
		"Автомобиль",
		Ложь
	);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект, "Автомобили", "Автомобиль");
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.ПоступлениеАвтомобилей.ВозможенВводСчетФактурыПолученной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
	Отказ = Отказ ИЛИ ОбновитьДанныеАвтомобилей() ИЛИ ОбновитьСтатусАвтомобилей();
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураПолученный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, Режим) Тогда
		Возврат;
	КонецЕсли;
	
	// проверим, что автомобиль отсутствует на остатках по различным регистрам
	Если ХозОперация <> Справочники.ХозОперации.ПереходВСобственностьАвтомобилей Тогда
		Если НЕ РегистрыНакопления.ОстаткиАвтомобилей.ПроверитьОстаткиАвтомобилей(ЭтотОбъект,Отказ) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФлагУпрВалюты = (ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	
	СписаниеСОтветственногоХранения(Отказ, Режим);
	
	ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Режим);
	
	Документы.ПоступлениеАвтомобилей.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ПоступлениеАвтомобилей.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	Отказ = ПроверитьЗаказыНаАвтомобиль() ИЛИ Отказ;
	
	ТаблицаАвтомобилей = Автомобили.Выгрузить(,"Автомобиль");
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ
	|	ТаблицаАвтомобилей
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка И 
	|	ПоступлениеАвтомобилейАвтомобили.АвтомобильБезЗаказа = ЛОЖЬ
	|ИНДЕКСИРОВАТЬ ПО
	|	Автомобиль
	|;
	|
	|ВЫБРАТЬ
	|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	ЗаказыАвтомобилейОстатки.ЗаказПоставщику КАК Заказ,
	|	ЗаказыАвтомобилейОстатки.ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказыАвтомобилейОстатки.ЗаказПоставщику.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(
	|			&НаГраницу,
	|			Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ ТаблицаАвтомобилей)) КАК ЗаказыАвтомобилейОстатки
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.КоличествоОстаток, 0) <> 0";
	
	Запрос.УстановитьПараметр("НаГраницу" , Новый Граница(МоментВремени(),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ссылка"    , Ссылка);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПоставщикамНаАвтомобили");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
	
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаАвтомобилей);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Автомобиль", "Автомобиль");
	ОбработкаСобытийДокументаСервер
		.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаЗаказовНаАвтомобили = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаказовНаАвтомобили.Индексы.Добавить("Автомобиль");
	
	// Закроем заказы поставщикам
	НаборЗаписейЗаказыПоставщикам = Движения.ЗаказыПоставщикамНаАвтомобили;
	Для Каждого ТекСтрока Из Автомобили Цикл
		Если ТекСтрока.АвтомобильБезЗаказа Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаказа = ТаблицаЗаказовНаАвтомобили.Найти(ТекСтрока.Автомобиль, "Автомобиль");
		
		Если СтрокаЗаказа = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль %1 не заказывался. Закрытие заказа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения,СокрЛП(ТекСтрока.Автомобиль)), ЭтотОбъект,,, Отказ);
			Продолжить;
			
		ИначеЕсли СтрокаЗаказа.Заказ <> ТекСтрока.ЗаказНаАвтомобиль Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль %1 заказан документом %2. Закрытие чужого заказа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения,СокрЛП(ТекСтрока.Автомобиль),СокрЛП(СтрокаЗаказа.Заказ)),ЭтотОбъект,,, Отказ);
			Продолжить;
			
		ИначеЕсли СтрокаЗаказа.Контрагент <> Контрагент Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль %1 заказан у контрагента %2. Закрытие чужого заказа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, СокрЛП(ТекСтрока.Автомобиль), СокрЛП(СтрокаЗаказа.Контрагент)),ЭтотОбъект,,, Отказ);
			Продолжить;
			
		ИначеЕсли СтрокаЗаказа.ДоговорВзаиморасчетов<>ДоговорВзаиморасчетов Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль %1 заказан у контрагента согласно договора %2. Закрытие заказа по другому договору невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, СокрЛП(ТекСтрока.Автомобиль),СокрЛП(СтрокаЗаказа.ДоговорВзаиморасчетов)),ЭтотОбъект,,, Отказ);
			Продолжить;
			
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейЗаказыПоставщикам.Добавить();
		НоваяЗапись.ВидДвижения     = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период          = Дата;
		НоваяЗапись.Регистратор     = Ссылка;
		НоваяЗапись.ЗаказПоставщику = ТекСтрока.ЗаказНаАвтомобиль;
		НоваяЗапись.Автомобиль      = ТекСтрока.Автомобиль;
		НоваяЗапись.Количество      = СтрокаЗаказа.Количество;
		НоваяЗапись.Сумма           = СтрокаЗаказа.Сумма;
		НоваяЗапись.СуммаУпр        = СтрокаЗаказа.СуммаУпр;
		НоваяЗапись.ХозОперация     = ХозОперация;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейЗаказыПоставщикам.Записать();
	
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
		ЭтотОбъект,
		ШапкаДокумента);
		
	УсловиеОтбора = Новый Структура;
	УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
	УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
	СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
		РасчетыСКонтрагентами,
		УсловиеОтбора);
	ЕстьРасчетыСКонтрагентами = (РасчетыСКонтрагентами.Количество() > 0);
	
	НаборЗаписейОстатки                                         = Движения.ОстаткиАвтомобилей;
	НаборЗаписейОстатки.РежимПроведения                         = Режим;
	НаборЗаписейОстатки.ДокументОбъект                          = ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоАвтомобилям           = Автомобили.Выгрузить();
	НаборЗаписейОстатки.СкладКомпании                           = СкладКомпании;
	НаборЗаписейОстатки.ШапкаДокумента                          = ШапкаДокумента;

	Если ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда
		НаборЗаписейОстатки.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
	ИначеЕсли ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
		НаборЗаписейОстатки.СтатусПартии = Перечисления.СтатусыПартий.ТоварОтветственноеХранение;
	Иначе
		НаборЗаписейОстатки.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
	КонецЕсли;
	Если ХозОперация = Справочники.ХозОперации.ПереходВСобственностьАвтомобилей Тогда
		НаборЗаписейОстатки.ГраницаРасчетаОстатков = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	КонецЕсли;
	
	НаборЗаписейОстатки.Партия = Ссылка;
	НаборЗаписейОстатки.РасчетыСКонтрагентами = РасчетыСКонтрагентами;
	
	Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	
	НаборЗаписейОстатки.ГраницаРасчетаОстатков = Неопределено;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	Если ВедетсяБалансПоПодразделению И ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилей Тогда
		ПодразделениеСклад                 = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании,Дата);
		ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании,Дата);
		
		// Способ ведения не по подразделениям или балансовые подразделения равны то ничего не будем корректировать.
		Если ПодразделениеДоговорВзаиморасчетов <> ПодразделениеСклад Тогда
			СуммаАвтомобилей = Движения.ОстаткиАвтомобилей.Итог("СуммаУпр") + Движения.КомплектацияАвтомобилей.Итог("СуммаУпр");
			Если СуммаАвтомобилей <> 0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение  = СкладКомпании.ПодразделениеКомпании;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДиР.ВУпрВалюте             = Истина;
				НаборЗаписейДиР.Доход                  = СуммаАвтомобилей;
				
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение          = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = ЕстьРасчетыСКонтрагентами;
			НаборЗаписейДиР.Расход                 = ?(ЕстьРасчетыСКонтрагентами, СуммыПоРасчетамСКонтрагентом.СуммаУпр, СуммаДокумента);
			
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли; 
	
	// если необходимо, то установим цены на автомобили
	Если НЕ Отказ И НЕ ТипЦен.Рассчитывается И ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилей И ПодразделениеКомпании.ФормироватьЗакупочнуюЦену Тогда
		НаборЗаписейЦены                = Движения.ЦеныАвтомобилей;
		НаборЗаписейЦены.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЦены.ТипЦен         = ТипЦен;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДокументАвтомобили.Автомобиль КАК Автомобиль,
		|	ДокументАвтомобили.Автомобиль.ВариантКомплектации КАК ВариантКомплектации,
		|	МАКСИМУМ(ДокументАвтомобили.Цена) КАК НоваяЦена
		|ПОМЕСТИТЬ
		|	ТаблицаАвтомобилей
		|ИЗ
		|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ДокументАвтомобили
		|ГДЕ
		|	ДокументАвтомобили.Ссылка = &Ссылка И 
		|	ДокументАвтомобили.Цена > 0
		|СГРУППИРОВАТЬ ПО
		|	ДокументАвтомобили.Автомобиль,
		|	ДокументАвтомобили.Автомобиль.ВариантКомплектации
		|ИНДЕКСИРОВАТЬ ПО
		|	Автомобиль,
		|	ВариантКомплектации
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаАвтомобилей.Автомобиль КАК Автомобиль,
		|	ТаблицаАвтомобилей.ВариантКомплектации КАК ВариантКомплектации,
		|	ТаблицаАвтомобилей.НоваяЦена КАК НоваяЦена,
		|	ЕСТЬNULL(ЦеныВБазе.Цена, 0) КАК ЦенаВБазе
		|ИЗ
		|	ТаблицаАвтомобилей КАК ТаблицаАвтомобилей
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАвтомобилей.СрезПоследних(&Момент, ТипЦен = &ТипЦен И Автомобиль Ссылка Справочник.Модели И
		|		ВариантКомплектации В (ВЫБРАТЬ ВариантКомплектации ИЗ ТаблицаАвтомобилей)) КАК ЦеныВБазе
		|ПО
		|	ТаблицаАвтомобилей.Автомобиль = ЦеныВБазе.Автомобиль И 
		|	ТаблицаАвтомобилей.ВариантКомплектации = ЦеныВБазе.ВариантКомплектации");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("Момент", МоментВремени());
		
		НаборЗаписейЦены.РезультатЗапросаПоАвтомобилям = Запрос.Выполнить();
		
		НаборЗаписейЦены.ПроверятьОдинаковыеЦены = Ложь;
		
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	ТаблицаПрослеживаемыхТоваров = Документы.ПоступлениеАвтомобилей.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуЗаказовАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуКомплектации(Ссылка, ДополнительныеСвойства, Движения);

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФПолученный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует коллекцию реквизитов шапки документа
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПоступлениеАвтомобилей - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * Ссылка
//   * Дата
//   * ВалютаДокумента
//   * КурсДокумента
//   * ТипЦен
//   * ХозОперация
//   * КурсВалютыУпр
//   * КурсВалютыВзаиморасчетов
//   * МоментВремени
//   * ПодразделениеКомпании
//   * СкладКомпании
//   * Контрагент
//   * ДоговорВзаиморасчетов
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	
	Реквизиты = "Ссылка,
				|Дата,
				|ВалютаДокумента,
				|КурсДокумента,
				|ТипЦен,
				|ХозОперация,
				|КурсВалютыУпр,
				|КурсВалютыВзаиморасчетов,
				|МоментВремени,
				|ПодразделениеКомпании,
				|СкладКомпании,
				|Контрагент,
				|ДоговорВзаиморасчетов";
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Реквизиты);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СписаниеСОтветственногоХранения(Отказ, Режим)
	
	Если ХозОперация <> Справочники.ХозОперации.ПереходВСобственностьАвтомобилей Тогда
		Возврат;
	КонецЕсли;
	
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	// Для перехода автомобиля в собственность сначала спишем его со склада
	НаборЗаписейОстаткиАвтомобилей = Движения.ОстаткиАвтомобилей;
	НаборЗаписейОстаткиАвтомобилей.РежимПроведения = Режим;
	НаборЗаписейОстаткиАвтомобилей.ДокументОбъект  = ЭтотОбъект;
	НаборЗаписейОстаткиАвтомобилей.ШапкаДокумента  = ШапкаДокумента;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ДокументАвтомобили.Автомобиль КАК Автомобиль,
	|	СУММА(ДокументАвтомобили.Количество) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ДокументАвтомобили
	|ГДЕ
	|	ДокументАвтомобили.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДокументАвтомобили.Автомобиль";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НаборЗаписейОстаткиАвтомобилей.РезультатЗапросаПоАвтомобилям = Запрос.Выполнить().Выгрузить();
	НаборЗаписейОстаткиАвтомобилей.СтатусПартии                  = Перечисления.СтатусыПартий.ТоварОтветственноеХранение;
	НаборЗаписейОстаткиАвтомобилей.СкладКомпании                 = СкладКомпании;
	НаборЗаписейОстаткиАвтомобилей.СторноПриход                  = Истина;
	
	Отказ = НЕ НаборЗаписейОстаткиАвтомобилей.Расход() ИЛИ Отказ;
	НаборЗаписейОстаткиАвтомобилей.ГраницаРасчетаОстатков = Неопределено;
	
	Если НЕ Отказ Тогда
		НаборЗаписейОстаткиАвтомобилей.Записать();
	КонецЕсли;
	
	// Спишем оборудование автомобиля
	НаборЗаписейКомплектацияАвтомобилей = Движения.КомплектацияАвтомобилей;
	Для Каждого СтрокаТЧ Из Автомобили Цикл
		// Спишем оборудование по документу
		НаборЗаписейКомплектацияАвтомобилей.РежимПроведения           = Режим;
		НаборЗаписейКомплектацияАвтомобилей.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейКомплектацияАвтомобилей.РезультатЗапросаПоТоварам = Неопределено;
		НаборЗаписейКомплектацияАвтомобилей.Автомобиль                = СтрокаТЧ.Автомобиль;
		НаборЗаписейКомплектацияАвтомобилей.СкладКомпании             = СкладКомпании;
		НаборЗаписейКомплектацияАвтомобилей.ШапкаДокумента            = ПолучитьШапкуДокумента(Ссылка);
		НаборЗаписейКомплектацияАвтомобилей.СторноПриход              = Истина;
		Отказ = НЕ НаборЗаписейКомплектацияАвтомобилей.Расход() ИЛИ Отказ;
	КонецЦикла;
	
КонецПроцедуры // СписаниеСОтветственногоХранения() 

Функция ОбновитьДанныеАвтомобилей()
	
	РежимЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РежимЗаписи");
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	АвтомобилиСсылки = Автомобили.ВыгрузитьКолонку("Автомобиль");
	РеквизитыАвтомобилей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(АвтомобилиСсылки, "VIN,ГТД");
	ОшибкаЗаполненияДанных = Ложь;
	АвтомобилиКОбновления = Новый Соответствие;
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		
		ЗаполнитьРеквизиты = Новый Структура();
		РеквизитыАвтомобиля = РеквизитыАвтомобилей.Получить(СтрокаАвтомобиля.Автомобиль);
		
		Если РеквизитыАвтомобиля = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаАвтомобиля.ГТД) И СтрокаАвтомобиля.ГТД <> РеквизитыАвтомобиля.ГТД Тогда
			
			ЗаполнитьРеквизиты.Вставить("ГТД", СтрокаАвтомобиля.ГТД);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыАвтомобиля.VIN) Тогда
			
			Если ПустаяСтрока(СтрокаАвтомобиля.VIN) Тогда
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Автомобили",СтрокаАвтомобиля.НомерСтроки, "VIN");
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'У автомобиля <%1> не задан VIN. Заполните VIN автомобиля.'"),
						СтрокаАвтомобиля.Автомобиль
					),
					,
					ПутьКТабличнойЧасти,
					"Объект",
					ОшибкаЗаполненияДанных 
				);
				Продолжить;
				
			КонецЕсли;
			
			ДанныеАвтомобиляКПроверке = АвтомобилиСервер.ПроверкаНомеровОписаниеАвтомобиля();
			ДанныеАвтомобиляКПроверке.Ссылка = СтрокаАвтомобиля.Автомобиль;
			ДанныеАвтомобиляКПроверке.VIN = СтрокаАвтомобиля.VIN;
			РезультатПроверки = АвтомобилиСервер.НомераАвтомобиляКорректны(ДанныеАвтомобиляКПроверке, "VIN", Ложь);
			
			Если РезультатПроверки.Ошибка Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ошибка ввода VIN в автомобиле <%1>. VIN автомобиля содержит недопустимые символы: [%2]'"),
					СтрокаАвтомобиля.Автомобиль,
					РезультатПроверки.ЗапрещенныеСимволы.VIN
				);
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Автомобили", 
					СтрокаАвтомобиля.НомерСтроки, 
					"VIN"
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПутьКТабличнойЧасти, "Объект", ОшибкаЗаполненияДанных);
				Продолжить;
				
			КонецЕсли;
			
			РезультатПроверки = АвтомобилиСервер.НомераАвтомобиляУникальны(ДанныеАвтомобиляКПроверке, "VIN", Ложь);
			
			Если РезультатПроверки.Ошибка Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ошибка ввода VIN в автомобиле <%1>. VIN автомобиля не уникальный.'"),
					СтрокаАвтомобиля.Автомобиль
				);
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Автомобили", 
					СтрокаАвтомобиля.НомерСтроки, 
					"VIN"
				);

				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПутьКТабличнойЧасти, "Объект", ОшибкаЗаполненияДанных);
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьРеквизиты.Вставить("VIN", СтрокаАвтомобиля.VIN);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаполнитьРеквизиты) Тогда
			
			АвтомобилиКОбновления.Вставить(СтрокаАвтомобиля.Автомобиль, ЗаполнитьРеквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкаЗаполненияДанных Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючЗначение Из АвтомобилиКОбновления Цикл
		
		Попытка
			
			Автомобиль = КлючЗначение.Ключ.ПолучитьОбъект();
			Автомобиль.Заблокировать();
			ЗаполнитьЗначенияСвойств(Автомобиль, КлючЗначение.Значение);
			Справочники.Автомобили.СформироватьНаименованиеПоУмолчанию(Автомобиль);
			Автомобиль.ОбменДанными.Загрузка = Истина;
			Автомобиль.Записать();
			
		Исключение
			
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось обновить информацию автомобиля %1'"), Автомобиль.Наименование), ЭтотОбъект);
			СобытиеЖурнала = НСтр("ru = 'Обновление информации об автомобиле из поступления'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Ошибка,, КлючЗначение.Ключ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Истина;
			
		КонецПопытки
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ложь;
	
КонецФункции

Функция ОбновитьСтатусАвтомобилей()
	
	РежимЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РежимЗаписи");
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		
		ОшибкаЗаписиВидаАвтомобиля = Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			СтрокаАвтомобиля.Автомобиль,
			Перечисления.ВидАвтомобиля[?(СтрокаАвтомобиля.АвтомобильБУ, "АвтомобильСПробегом", "Новый")],
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля,
			Дата,
			Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПоступлениеАвтомобиля);
		
		ОшибкаЗаписиХозяинаАвтомобиля = Ложь;	
		Если НЕ ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия 
			И НЕ ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
			ОшибкаЗаписиХозяинаАвтомобиля = Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				СтрокаАвтомобиля.Автомобиль,
				Организация,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
				Дата,
				Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПоступлениеАвтомобиля);
        КонецЕсли;
		
		ОшибкаЗаписиПриобретенияАвтомобиляУФизлица = Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			СтрокаАвтомобиля.Автомобиль,
			СтрокаАвтомобиля.ПриобретенУФизЛица,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
			Дата,
			Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПоступлениеАвтомобиля);
		
		Если ОшибкаЗаписиВидаАвтомобиля
			ИЛИ ОшибкаЗаписиХозяинаАвтомобиля
			ИЛИ ОшибкаЗаписиПриобретенияАвтомобиляУФизлица Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
		ХозОперация = Справочники.ХозОперации.ПереходВСобственностьАвтомобилей;
		
		// найдем документ корректировку поступления автомобилей
		ДокументКорректировки = Документы.КорректировкаПоступленияАвтомобилей.НайтиПоРеквизиту("ДокументОснование", ДанныеЗаполнения.Ссылка);
		Если ДокументКорректировки <> Неопределено Тогда
			
			Для Каждого Строка Из ДокументКорректировки.Автомобили Цикл
				СтрокаАвтомобиля = Автомобили.Найти(Строка.Автомобиль, "Автомобиль");
				Если СтрокаАвтомобиля <> Неопределено Тогда
					СтрокаАвтомобиля.Цена       = Строка.Цена;
					СтрокаАвтомобиля.Сумма      = Строка.Сумма;
					СтрокаАвтомобиля.СуммаВсего = Строка.СуммаВсего;
					СтрокаАвтомобиля.СтавкаНДС  = Строка.СтавкаНДС;
					СтрокаАвтомобиля.СуммаНДС   = Строка.СуммаНДС;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Документы.ПоступлениеАвтомобилей.ПерезаполнитьЗаказы(ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Счет от поставщика за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили()

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Автомобили") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили.Очистить();
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Автомобиль) Тогда
		СтрокаАвтомобиля                         = Автомобили.Добавить();
		СтрокаАвтомобиля.Автомобиль              = ДанныеЗаполнения.Автомобиль;
		СтрокаАвтомобиля.ЗаказНаАвтомобиль       = ДанныеЗаполнения;
		
		Документы.ПоступлениеАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, СтрокаАвтомобиля);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Модель.Контрагент.Пустая() Тогда
		Контрагент            = ДанныеЗаполнения.Модель.Контрагент;
		ДоговорВзаиморасчетов = ДанныеЗаполнения.Модель.ДоговорВзаиморасчетов;
	Иначе
		Контрагент            = ПраваИНастройкиПользователя.Значение("ОсновнойПоставщик");
		ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
			Контрагент,
			Перечисления.ВидыДоговоров.Покупка,
			ЭтотОбъект,
			,
			Истина
		);
		
		ПараметрыДействия = Новый Структура;
		Документы.ПоступлениеАвтомобилей.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, ПараметрыДействия);
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей");
	НоваяСтрока = Автомобили.Добавить();
	НоваяСтрока.Автомобиль = ДанныеЗаполнения.Автомобиль;
	
	Документы.ПоступлениеАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Рабочий лист выкупа"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛистВыкупаАвтомобиля(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДляОснованияУжеВведеноПоступление(ДанныеЗаполнения);
	
	ПродолжатьЗаполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если НЕ ПродолжатьЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Автомобиль,Контрагент,ХозОперация");
	
	// получим документ установки цены
	ДокументУстановкиЦены = АвтомобилиСПробегомЗащищенныеФункцииСервер.ПолучитьДокументСогласованияЦены(ДанныеЗаполнения);
	
	Если ДокументУстановкиЦены = Неопределено ИЛИ НЕ ДокументУстановкиЦены.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Запрещено вводить на основании рабочего листа выкупа без согласования цены.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ДанныеЗаполнения, ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
		
		Контрагент = Реквизиты.Контрагент;
		Документы.ПоступлениеАвтомобилей.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	TradeIn = 
		Реквизиты.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РабочийЛистВыкупаАвтомобиляTradeIn");
	
	Если ЗначениеЗаполнено(Реквизиты.Автомобиль) Тогда
		
		НоваяСтрока = Автомобили.Добавить();
		НоваяСтрока.Автомобиль = Реквизиты.Автомобиль;
		Документы.ПоступлениеАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
		НоваяСтрока.АвтомобильБУ = Истина;
		НоваяСтрока.АвтомобильБезЗаказа = Истина;
		ДополнительныеСвойства.Вставить("ТребуетсяЗаполнениеЗаказаНаАвтомобиль", TradeIn);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛистВыкупаАвтомобиля()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	ПараметрыДействия = Новый Структура;    
	
	Если ДанныеЗаполнения.Свойство("Организация")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
		
		Организация = ДанныеЗаполнения.Организация;
		Документы.ПоступлениеАвтомобилей.ОрганизацияПриИзменении(ЭтотОбъект, ПараметрыДействия);
		
	КонецЕсли;                                                                                  
	
	Если ДанныеЗаполнения.Свойство("ПодразделениеКомпании")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ПодразделениеКомпании) Тогда
		
		ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеКомпании;
		Документы.ПоступлениеАвтомобилей.ПодразделениеКомпанииПриИзменении(ЭтотОбъект, ПараметрыДействия);
		
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Контрагент")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		
	ИначеЕсли ДанныеЗаполнения.Свойство("ЗаказНаАвтомобиль") Тогда
		
		Контрагент = ДанныеЗаполнения.ЗаказНаАвтомобиль.Контрагент;
		
	КонецЕсли;
	
	Документы.ПоступлениеАвтомобилей.КонтрагентПриИзменении(ЭтотОбъект, ПараметрыДействия);
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей");
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Оптовый заказ поставщику на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказПоставщикуНаАвтомобили(ДанныеЗаполнения,
                                                               ТекстЗаполнения = "",
                                                               СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Автомобили"
	);
	
	Если Не ПродолжитьВыполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Автомобили.Очистить();
	
	НепоступившиеАвтомобили = Документы.ОптовыйЗаказПоставщикуНаАвтомобили.НепоступившиеАвтомобили(ДанныеЗаполнения);
	НепоступившиеАвтомобили = НепоступившиеАвтомобили.Выбрать();
	
	Пока НепоступившиеАвтомобили.Следующий() Цикл
		
		НоваяСтрока = Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НепоступившиеАвтомобили);
		НоваяСтрока.ЗаказНаАвтомобиль = ДанныеЗаполнения;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции

// Производит заполнение объекта на основании документа "Оптовый заказ клиента на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказКлиентаНаАвтомобили(ДанныеЗаполнения,
                                                            ТекстЗаполнения = "",
                                                            СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Автомобили"
	);
	
	Если Не ПродолжитьВыполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Автомобили.Очистить();
	
	НепоступившиеАвтомобили = Документы.ОптовыйЗаказКлиентаНаАвтомобили.НепоступившиеАвтомобили(ДанныеЗаполнения);
	НепоступившиеАвтомобили = НепоступившиеАвтомобили.Выбрать();
	
	Пока НепоступившиеАвтомобили.Следующий() Цикл
		
		НоваяСтрока = Автомобили.Добавить();
		НоваяСтрока.Автомобиль = НепоступившиеАвтомобили.Автомобиль;
		Документы.ПоступлениеАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

Функция ПроверитьЗаказыНаАвтомобиль()
	
	ДокументОбъектСтруктура = Новый Структура("Ссылка,МоментВремени",Ссылка,МоментВремени());
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.ПоступлениеАвтомобилейПроверитьЗаказыНаАвтомобиль(ДокументОбъектСтруктура);
	
КонецФункции // ПроверитьЗаказыНаАвтомобиль()

Процедура ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Режим)
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеХО = Новый Массив;
	ДоступныеХО.Добавить(Справочники.ХозОперации.ПоступлениеАвтомобилей);
	ДоступныеХО.Добавить(Справочники.ХозОперации.ПереходВСобственностьАвтомобилей);
	ДоступныеХО.Добавить(Справочники.ХозОперации.ПоступлениеАвтомобилейИмпорт);
	
	Если ДоступныеХО.Найти(ХозОперация) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
	
	// получим данные для проведения по регисрам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.ЗаказНаАвтомобиль КАК Сделка,
	|	СУММА(ПоступлениеАвтомобилейАвтомобили.СуммаВсего) КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ПоступлениеАвтомобилейАвтомобили.АвтомобильБезЗаказа = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеАвтомобилейАвтомобили.ЗаказНаАвтомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПоступлениеАвтомобилейАвтомобили.СуммаВсего) КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ПоступлениеАвтомобилейАвтомобили.АвтомобильБезЗаказа = ИСТИНА");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения       = Режим;
			НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.Сделка                = Выборка.Сделка;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
				СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Ложь;
			НаборЗаписейВзаиморасчеты.Сумма                            = Выборка.Сумма;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			
			Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
			
			// доходы и расходы по суммовым разницам
			СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
				НаборЗаписейДиР                        = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте             = Истина;
				
				Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		Выборка = РезультатыЗапроса[1].Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Сумма <> Null Тогда
			НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения       = Режим;
			НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
				СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Ложь;
			НаборЗаписейВзаиморасчеты.Сумма                            = Выборка.Сумма;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			
			Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
			
			// доходы и расходы по суммовым разницам
			СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
				НаборЗаписейДиР                        = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте             = Истина;
				
				Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура ДляОснованияУжеВведеноПоступление(Документ)
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РабочийЛистВыкупаАвтомобиля") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборПоСсылке = "";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ОтборПоСсылке = "И ПоступлениеАвтомобилей.Ссылка <> &ЭтотДокумент";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеАвтомобилей.Ссылка КАК Документ,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПоступлениеАвтомобилей.Ссылка) КАК ДокументПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ДокументОснование) КАК ОснованиеПредставление
		|ИЗ
		|	Документ.ПоступлениеАвтомобилей КАК ПоступлениеАвтомобилей
		|ГДЕ
		|	ПоступлениеАвтомобилей.ДокументОснование = &ДокументОснование
		|	И НЕ ПоступлениеАвтомобилей.ПометкаУдаления
		|	%1",
		ОтборПоСсылке)
	);
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ТекстСообщения = СтрШаблон(НСтр("ru='На основании документа <%1> уже введен <%2>.'"),
		Выборка.ОснованиеПредставление, Выборка.ДокументПредставление);
	УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Выборка.Документ, ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
