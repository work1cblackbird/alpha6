// Модуль менеджера документа "Поступление автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
 
#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовПоступления();
	ПеренесеныВсеСвойства = Истина; 
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.ДополнительныеРеквизиты КАК ПоступлениеАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	ПоступлениеАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеАвтомобилей");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.ОтпустилКонтрагент,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Получил,"Свойство");
				
				Если СвойствоПолучил <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоПолучил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучил.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтОрганизации;
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства  Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ПоступлениеАвтомобилей""";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ПоступлениеАвтомобилейДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.ДополнительныеРеквизиты КАК ПоступлениеАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	ПоступлениеАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И ПоступлениеАвтомобилейДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта.
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	ИтогиОперации.Вставить("СуммаНДС"    , Объект.Автомобили.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС" , ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Процедура проверяет заказы на авто и если найдены несоответствия то подставляет подходящий
// или устанавливает без заказа.
Процедура ПерезаполнитьЗаказы(Объект) Экспорт
	
	ДокументОбъектСтруктура = Новый Структура("Автомобили", Объект.Автомобили.Выгрузить());
	
	ЗащищенныеФункцииАльфаАвтоСервер.ПоступлениеАвтомобилейПерезаполнитьЗаказы(ДокументОбъектСтруктура);
	
	Объект.Автомобили.Загрузить(ДокументОбъектСтруктура.Автомобили);
	
КонецПроцедуры

// Функция производит поиск заказа по заданному автомобилю
Функция НайтиЗаказАвтомобиля(Объект, Автомобиль) Экспорт
	
	ДокументОбъектСтруктура=Новый Структура();
	ДокументОбъектСтруктура.Вставить("ЭтоНовый", (Объект.Ссылка.Пустая()));
	ДокументОбъектСтруктура.Вставить("МоментВремени", Новый МоментВремени(Объект.Дата));
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.ПоступлениеАвтомобилейНайтиЗаказАвтомобиля(ДокументОбъектСтруктура,Автомобиль);
	
КонецФункции

// Очистить от заполнения реквизиты в зависимости от выбранной хоз. операции документа
//
// Параметры:
//  Объект	 - ДокументСсылка.ПоступлениеТовров, ДокументОбъект.ПоступлениеТоваров - Объект,
//				для которого выполняется обработка события.
//
Процедура ОчиститьРеквизитыПоХозОперации(Объект, Строка = Неопределено) Экспорт
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейИмпорт Тогда
		Если Строка = Неопределено Тогда
			Для Каждого СтрокаАвтомобилей Из Объект.Автомобили Цикл
				СтрокаАвтомобилей.СуммаНДС = 0;
				СтрокаАвтомобилей.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
				АвтомобилиСтавкаНДСПриИзменении(Объект, СтрокаАвтомобилей);
				СтрокаАвтомобилей.ГТД = Справочники.ГТД.ПустаяСсылка();
			КонецЦикла;
		Иначе
			Строка.СуммаНДС = 0;
			Строка.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			АвтомобилиСтавкаНДСПриИзменении(Объект, Строка);
			Строка.ГТД = Справочники.ГТД.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОчиститьРеквизитыПоХозОперации()

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ПоступлениеАвтомобили - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	
	// Для контрагентов из ЕАЭС другая форма отчетности
	Если ДанныеКонтрагента.СтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Автомобили.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	СУММА(ПоступлениеАвтомобилейАвтомобили.Количество) КАК КоличествоПрослеживаемости,
	|	ПоступлениеАвтомобилейАвтомобили.ГТД КАК РНПТ,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоступлениеАвтомобилейАвтомобили.СуммаВсего - ПоступлениеАвтомобилейАвтомобили.СуммаНДС) КАК СуммаБезНДС
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ПоступлениеАвтомобилейАвтомобили.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.ГТД,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим, что в документе есть РНПТ
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = Запрос.Выполнить().Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	КодОперации = Справочники.КодыОперацийПрослеживаемости.ПоступлениеТоваров;
	Документ = Объект.Ссылка;
	НомерДокумента = Объект.ВхДокНомер;
	ДатаДокумента = Объект.ВхДокДата;
	КонтрагентОперации = Объект.Контрагент;
	
	// Для пересчета валюты в рубли
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
	
	// Сформируем таблицу
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.КодОперации = КодОперации;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.Контрагент = КонтрагентОперации;
		
		Если ВалютаНеРегл Тогда
			НоваяСтрока.СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Проверка на наличие ограничения на формирование расчетов с контрагентом.
//
// Параметры:
//  Обеъект	 - ДокуменОбъект, ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Булево - Расчеты с контрагентом формируются или нет.
//
Функция ДоступноФормированиеРасчетовСКонтрагентами(Объект) Экспорт
	
	ДоступныеОперации = Новый Массив;
	ДоступныеОперации.Добавить(Справочники.ХозОперации.ПоступлениеАвтомобилей);
	ДоступныеОперации.Добавить(Справочники.ХозОперации.ПереходВСобственностьАвтомобилей);
	ДоступныеОперации.Добавить(Справочники.ХозОперации.ПоступлениеАвтомобилейИмпорт);
	
	Возврат ДоступныеОперации.Найти(Объект.ХозОперация) <> Неопределено;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	//// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.VIN");
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.Количество");

	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
		КонецЕсли;
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы автомобили
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("VIN");
	УникальныеАвтомобили.Добавить("Автомобиль");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили" , УникальныеАвтомобили);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании"        , Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеАвтомобилей.Организация КАК Организация,
	|	ПоступлениеАвтомобилей.Ссылка КАК Ссылка,
	|	ПоступлениеАвтомобилей.Дата КАК Дата,
	|	ПоступлениеАвтомобилей.ХозОперация КАК ХозОперация,
	|	ПоступлениеАвтомобилей.ДокументОснование КАК ДокументОснование,
	|	ПоступлениеАвтомобилей.Контрагент КАК Контрагент,
	|	ПоступлениеАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ПоступлениеАвтомобилей.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПоступлениеАвтомобилей.Ссылка КАК Сделка,
	|	ПоступлениеАвтомобилей.СуммаДокумента КАК Сумма,
	|	ПоступлениеАвтомобилей.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ПоступлениеАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеАвтомобилей.КурсДокумента КАК КурсДокумента,
	|	ПоступлениеАвтомобилей.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ПоступлениеАвтомобилей.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей КАК ПоступлениеАвтомобилей
	|ГДЕ
	|	ПоступлениеАвтомобилей.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеАвтомобилейЗачетАвансов.Ссылка КАК Ссылка,
	|	ПоступлениеАвтомобилейЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ПоступлениеАвтомобилейЗачетАвансов.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.ЗачетАвансов КАК ПоступлениеАвтомобилейЗачетАвансов
	|ГДЕ
	|	ПоступлениеАвтомобилейЗачетАвансов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка КАК Ссылка,
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.Количество КАК Количество,
	|	ПоступлениеАвтомобилейАвтомобили.Цена КАК Цена,
	|	ПоступлениеАвтомобилейАвтомобили.Сумма КАК Сумма,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.ГТД КАК ГТД,
	|	ПоступлениеАвтомобилейАвтомобили.АвтомобильБезЗаказа КАК АвтомобильБезЗаказа,
	|	ПоступлениеАвтомобилейАвтомобили.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.АвтомобильБУ КАК АвтомобильБУ,
	|	ПоступлениеАвтомобилейАвтомобили.VIN КАК VIN
	|ПОМЕСТИТЬ СписокАвтомобилей
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если Не ДоступноФормированиеРасчетовСКонтрагентами(ДвиженияДокумента.ДляПроведения) Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАванса.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАванса.ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокАвтомобилей.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
	|ИЗ
	|	СписокАвтомобилей КАК СписокАвтомобилей
	|ГДЕ
	|	НЕ СписокАвтомобилей.АвтомобильБезЗаказа";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	СписокЗаказов = ПакетЗапроса[2].Выгрузить().ВыгрузитьКолонку("ЗаказНаАвтомобиль");
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,
		Ложь,
		СписокЗаказов);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	ПараметрыДействия.Вставить("ЗаказПоставщика", Истина);
	ПараметрыДействия.Вставить("РасчетыСПокупателем", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	ОчиститьРеквизитыПоХозОперации(Объект);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.ГТД = Строка.Автомобиль.ГТД;
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(Объект, Строка, ПараметрыДействия);
	ОчиститьРеквизитыПоХозОперации(Объект, Строка);
	
	Строка.АвтомобильБезЗаказа = Не ЗначениеЗаполнено(Строка.ЗаказНаАвтомобиль);
	
	Строка.АвтомобильБУ = АвтомобилиСервер.ЭтоАвтомобильСПробегом(
		Строка.Автомобиль,
		?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Ссылка.МоментВремени())
	);
	АвтомобилиСервер.ЗаполнитьПризнакПриобретенияУФизЛица(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "заказ на автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЗаказНаАвтомобиль(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ЗаказНаАвтомобиль) Тогда
		
		Если ТипЗнч(Строка.ЗаказНаАвтомобиль) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль") Тогда
			
			Если
				Строка.Автомобиль = Строка.ЗаказНаАвтомобиль.Автомобиль
				И Строка.ЗаказНаАвтомобиль.ЦенаАвтомобиля <> 0
			Тогда
				
				Строка.СуммаВсего = Документы
					.ЗаказПоставщикуНаАвтомобиль
					.РассчитатьИтогиОперации(Строка.ЗаказНаАвтомобиль)
					.СуммаДокумента;
				Строка.СтавкаНДС  = Строка.ЗаказНаАвтомобиль.СтавкаНДСНаАвтомобиль;
				Строка.АвтомобильБезЗаказа = Ложь;
				
				АвтомобилиСуммаВсегоПриИзменении(Объект, Строка);
				
			Иначе
				
				Строка.Автомобиль = Строка.ЗаказНаАвтомобиль.Автомобиль;
				
				ПараметрыДействия.Вставить("ИскатьЗаказ", Ложь);
				ПараметрыДействия.Вставить("ИзменилсяЗаказ", Истина);
				Строка.АвтомобильБезЗаказа = Ложь;
				
				АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия);
				
			КонецЕсли;
			
		Иначе
			
			СуммовыеПоказателиАвтомобиля = ОбщегоНазначения
				.МенеджерОбъектаПоСсылке(Строка.ЗаказНаАвтомобиль)
				.СуммовыеПоказателиАвтомобиля(Строка.ЗаказНаАвтомобиль, Строка.Автомобиль);
			Строка.СуммаВсего = СуммовыеПоказателиАвтомобиля.Сумма;
			Строка.СтавкаНДС  = СуммовыеПоказателиАвтомобиля.СтавкаНДС;
			Строка.АвтомобильБезЗаказа = Ложь;
			
			АвтомобилиСуммаВсегоПриИзменении(Объект, Строка);
			
		КонецЕсли;
		
	Иначе
		
		Строка.АвтомобильБезЗаказа = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автомобиль без заказа"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильБезЗаказа(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ЗаказНаАвтомобиль) Тогда
		Строка.ЗаказНаАвтомобиль = Неопределено;
		АвтомобилиЗаказНаАвтомобиль(Объект, СТрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПоступлениеАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Распределить по заказам'");
	Команда.Идентификатор	= "АвтомобилиРаспределитьПоЗаказам";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь; 
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиРаспределитьПоЗаказам.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АвтомобилиРаспределитьПоЗаказам.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам 
//
Функция АвтомобилиРаспределитьПоЗаказам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого СтрокаАвто Из Объект.Автомобили Цикл
		СтрокаАвто.ЗаказНаАвтомобиль = НайтиЗаказАвтомобиля(Объект, СтрокаАвто.Автомобиль);
		АвтомобилиАвтомобильПриИзменении(Объект, СтрокаАвто, ПараметрыДействия);
	КонецЦикла;

КонецФункции // АвтомобилиРаспределитьПоЗаказам()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПоступлениеАвтомобилей",
		"ПоступлениеАвтомобилей",
		НСтр("ru = 'Приходная накладная'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ПоступлениеАвтомобилей",
		"ДоговораВыкупа",
		НСтр("ru = 'Договор выкупа автомобиля'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ПоступлениеАвтомобилей",
		"ПФ_MXL_ЗаявлениеНаЗачетДС",
		НСтр("ru = 'Заявление на зачет ДС в стоимость нового автомобиля'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ПоступлениеАвтомобилей",
		"ПФ_MXL_АктПриемаПередачиТСВыкуп",
		НСтр("ru = 'Акт приема-передачи ТС (выкуп)'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ПоступлениеАвтомобилей",
		"ПФ_MXL_АктПриемаПередачиТСКомиссия",
		НСтр("ru = 'Акт приема-передачи ТС (комиссия)'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПоступлениеАвтомобилей",
		"АктПриема",
		НСтр("ru = 'Акт приема на комиссию'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПоступлениеАвтомобилей",
		"ДоговорКомиссии",
		НСтр("ru = 'Договор комиссии'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ1",
		НСтр("ru = 'ТОРГ-1 (Акт о приемке товара)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ2",
		НСтр("ru = 'ТОРГ-2 (Акт о расхождении по количеству и качеству)'"),
		СсылкаНаДокумент);
   УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ4",
		НСтр("ru = 'ТОРГ-4 (Акт о приемке товаров без счета поставщика)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная за поставщика)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ13",
		НСтр("ru = 'ТОРГ-13 (Накладная на внутреннее перемещение)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМ11",
		"ПФ_MXL_М4",
		НСтр("ru = 'М-4 (Приходный ордер)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМХ",
		"ПФ_MXL_МХ1",
		НСтр("ru = 'МХ-1 (Акт о приеме-передаче ТМЦ)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПоступлениеАвтомобилей") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПоступлениеАвтомобилей",
			НСтр("ru = 'Приходная накладная'"),
			ПечатьПоступлениеАвтомобилей(МассивОбъектов, ОбъектыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПриема") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктПриема",
			НСтр("ru = 'Акт приема на комиссию'"),
			ПечатьАктПриема(МассивОбъектов, ОбъектыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорКомиссии") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДоговорКомиссии",
			НСтр("ru = 'Договор комиссии'"),
			ПечатьДоговорКомиссии(МассивОбъектов, ОбъектыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговораВыкупа") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДоговораВыкупа",
			НСтр("ru = 'Договора выкупа'"),
			ПечатьДоговораВыкупа(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаявлениеНаЗачетДС") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ЗаявлениеНаЗачетДС",
			НСтр("ru = 'Заявление на зачет ДС в стоимость нового автомобиля'"),
			ПечатьЗаявлениеНаЗачетДС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктПриемаПередачиТСВыкуп") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктПриемаПередачиТСВыкуп",
			НСтр("ru = 'Акт приема-передачи ТС (выкуп)'"),
			ПечатьАктПриемаПередачиТС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, "Выкуп")
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктПриемаПередачиТСКомиссия") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктПриемаПередачиТСКомиссия",
			НСтр("ru = 'Акт приема-передачи ТС (комиссия)'"),
			ПечатьАктПриемаПередачиТС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, "Комиссия")
		);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ПоступлениеАвтомобилей"
// Возвращает сформированный табличный документ:
Функция ПечатьПоступлениеАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеАвтомобилей.ПФ_MXL_ПоступлениеАвтомобилей");
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = Новый Структура("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		
		// заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(
			Документ, НСтр("ru = 'Приходная накладная (автомобили)'"));
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада = 
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
				
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		// заполняем заголовок колонки НДС по типу цен
		Параметры = Новый Структура("НДС");
		Параметры.НДС = "НДС";
		Если Документ.ТипЦен.ЦенаВключаетНДС
			И НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда // Если НДС включен
				Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Параметры.Заполнить(Параметры);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// 
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
				ТабличныйДокумент,
				ОбластьСтрока,
				ОбластьШапкаТаблицы,
				ОбластьИтогоПоСтранице,
				НомерСтраницы,
				СтруктураИтоговПоСтранице,
				Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ОтпустилКонтрагент", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеАвтомобилей_ПоступлениеАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Акт приема"
// Возвращает сформированный табличный документ:
Функция ПечатьАктПриема(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	ФорматГодаВыпуска = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Неопределено);
	
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеАвтомобилей.ПФ_MXL_АктПриема");
		
		ОбластьШапка    = Макет.ПолучитьОбласть("Шапка");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.Ссылка, Истина);
		
		Для Каждого Строка Из Документ.Автомобили Цикл
			ОбластьШапка.Параметры.ЗаголовокПФ = "приема автомобиля на комиссию";
			ОбластьШапка.Параметры.Номер       = НомерДляПечати;
			ОбластьШапка.Параметры.Дата        = Формат(Документ.Дата,"ДЛФ=DD");
			
			Если ЗначениеЗаполнено(Строка.Автомобиль) Тогда
				ДанныеАвтомобиля = АвтомобилиСервер.ДанныеАвтомобиля(
					Строка.Автомобиль, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата")
				);
				
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ДанныеАвтомобиля);
				
				// дозаполним остальные поля
				ОбластьШапка.Параметры.МодельНаименование = Автосервис.МаркаМодельАвтомобиля(ДанныеАвтомобиля);
				ОбластьШапка.Параметры.ГодВыпуска     = Формат(ДанныеАвтомобиля.ГодВыпуска, ФорматГодаВыпуска);
				ОбластьШапка.Параметры.Комплектация   = ДанныеАвтомобиля.ВариантКомплектации;
				ОбластьШапка.Параметры.ОбъемДвигателя = ДанныеАвтомобиля.Объем;
			КонецЕсли;
			
			ОбластьШапка.Параметры.ОписаниеКомитента    = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
			ОбластьШапка.Параметры.ОписаниеКомиссионера = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеАвтомобилей_АктПриема";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Договор комиссии"
// Возвращает сформированный табличный документ:
Функция ПечатьДоговорКомиссии(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		НомерДокумента=УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.Ссылка, Истина);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеАвтомобилей.ПФ_MXL_ДоговорКомиссии");
		
		Для Каждого Строка Из Документ.Автомобили Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			
			// заполнение параметров шапки печатной формы
			
			ОбластьМакета.Параметры.Номер = НомерДокумента;
			// ОбластьМакета.Параметры.Город = УправлениеПечатьюПлатформа.ПолучитьГород(Документ.ПодразделениеКомпании,Справочники.ВидыКонтактнойИнформации.АдресФактический);
			ФактическийАдрес = Документ.ПодразделениеКомпании.КонтактнаяИнформация.Выгрузить(); //НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.АдресФактический));
			Если ФактическийАдрес <> Неопределено И ФактическийАдрес.Количество() > 0 Тогда
				Инд = 0;
				Пока Инд < ФактическийАдрес.Количество() Цикл
					Если ФактическийАдрес[Инд].Вид.ИмяПредопределенныхДанных = "ФактАдресПодразделенияКомпании" Тогда
						Если ЗначениеЗаполнено(ФактическийАдрес[Инд].Город) Тогда
							Город = ФактическийАдрес[Инд].Город;
							Город = ?(Лев(Город, 1) = "г", Город, "г. " + Город);
						Иначе
							Город = "";
						КонецЕсли;
						ОбластьМакета.Параметры.Город = Город;
					КонецЕсли;
					Инд = Инд+1;
				КонецЦикла;
			КонецЕсли;
			ОбластьМакета.Параметры.Дата = Формат(Документ.Дата, "ДЛФ=DD");
			
			// заполнение параметров комитента
			
			ОбластьМакета.Параметры.Контрагент = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
			Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Документ.Контрагент, Перечисления.ВидыДокументов.Паспорт);
			Если ЗначениеЗаполнено(Паспорт) Тогда
				ПаспортныеДанные = Символы.НПП + СтрШаблон(НСтр("ru = 'паспорт серии %1 № %2 выдан %3 %4'"), Паспорт.Серия,
					Паспорт.Номер, Паспорт.КемВыдан, Формат(Паспорт.ДатаВыдачи, "ДЛФ=DD"));
				ОбластьМакета.Параметры.ПаспортныеДанные = " (" + ПаспортныеДанные + ")";
			КонецЕсли;
			Доверенность = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Документ.Контрагент, Перечисления.ВидыДокументов.Доверенность);
			Если ЗначениеЗаполнено(Доверенность) Тогда
				ОбластьМакета.Параметры.Доверенность = НСтр("ru = ', действующего на основании'") + Символы.НПП + Доверенность;
			КонецЕсли;
			
			// заполнение параметров комиссионера
			
			ОбластьМакета.Параметры.Организация = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
			Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель");
			Если ЗначениеЗаполнено(Руководитель) И ТипЗнч(Руководитель) = Тип("Структура") Тогда
				Должность = ", в лице";
				Если ЗначениеЗаполнено(Руководитель.РуководительДолжность) Тогда
					Должность = Должность + " " + СокрЛП(НРег(Руководитель.РуководительДолжность));
				КонецЕсли;
				ОбластьМакета.Параметры.РуководительДолжность = Должность;
				РуководительПредставление = Руководитель.РуководительПредставление;
				Если РуководительПредставление <> "" Тогда
					Сдвиг = 2;
					РуководительПредставление = Лев(Прав(РуководительПредставление, СтрДлина(РуководительПредставление) - 1),
						СтрДлина(РуководительПредставление) - Сдвиг);
				КонецЕсли;
				ДоверенностьРуководителя = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
					Руководитель.Руководитель, Перечисления.ВидыДокументов.Доверенность);
				Если ЗначениеЗаполнено(ДоверенностьРуководителя) Тогда
					РуководительПредставление = РуководительПредставление + НСтр("ru = ', действующего  на основании Доверенности №'")
						+ ДоверенностьРуководителя.Номер + " от " + Формат(ДоверенностьРуководителя.ДатаВыдачи, "ДЛФ=D");
				Иначе
					РуководительПредставление = РуководительПредставление + НСтр("ru = ', действующего  на основании Устава'");
				КонецЕсли;
				ОбластьМакета.Параметры.РуководительПредставление = РуководительПредставление;
			КонецЕсли;
			
			// заполнение параметров автомобиля
			
			Автомобиль = Строка.Автомобиль;
			ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.Дата);
			ГосНомер = СокрЛП(ГосНомер);
			
			Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, Документ.Дата);
			Пробег = СокрЛП(Пробег);
			
			ПТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Автомобиль, Перечисления.ВидыДокументов.ПТС);
							
			ПредставлениеПТС = "ПТС " + ПТС.Серия + " № "+ ПТС.Номер + " выдан " + ПТС.КемВыдан + " " 
				+ Формат(ПТС.ДатаВыдачи, "ДЛФ=DD") + " ";
				
			Если Не ЗначениеЗаполнено(ПТС) Тогда	
				ПТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
					Автомобиль, Перечисления.ВидыДокументов.ЭлектронныйПТС);
					
				ПредставлениеПТС = "Электронный ПТС" + " № " + ПТС.Номер + " создан " + Формат(ПТС.ДатаВыдачи, "ДЛФ=DD") + " ";
			КонецЕсли;
			
			СтрАвто = "";
			СтрАвто = СтрАвто 
				+ ?(ЗначениеЗаполнено(Автомобиль.Модель), 
					"модели" + " " + УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Автомобиль.Модель) + ", ", "");
			СтрАвто = СтрАвто + ?(ЗначениеЗаполнено(Автомобиль.Цвет), "цвет: " + Автомобиль.Цвет + ", ", "");
			СтрАвто = СтрАвто + ?(ЗначениеЗаполнено(ГосНомер), "государственный номер: " + ГосНомер + ", ", "");
			СтрАвто = СтрАвто + ?(ЗначениеЗаполнено(Автомобиль.VIN), "VIN: " + Автомобиль.VIN + ", ", "");
			СтрАвто = СтрАвто + ?(ЗначениеЗаполнено(Пробег), "пробег: " + Пробег + ", ", "");
			СтрАвто = СтрАвто
				+ ?(ЗначениеЗаполнено(Автомобиль.ГодВыпуска),
					СтрШаблон(НСтр("ru = 'год выпуска: %1,'"), Формат(Автомобиль.ГодВыпуска, "ДФ=гггг")) + " ",
					"");
			СтрАвто = СтрАвто
				+ ?(ЗначениеЗаполнено(Автомобиль.НомерДвигателя),
					СтрШаблон(НСтр("ru = 'номер двигателя: %1,'"), Автомобиль.НомерДвигателя) + " ",
					"");
			СтрАвто = СтрАвто
				+ ?(ЗначениеЗаполнено(Автомобиль.НомерКузова),
					СтрШаблон(НСтр("ru = 'номер кузова: %1,'"), Автомобиль.НомерКузова) + " ",
					"");
			СтрАвто = СтрАвто + ?(ЗначениеЗаполнено(ПТС), ПредставлениеПТС + ", ", "");
			СтрАвто = ?(Прав(СтрАвто, 2) = ", ", Лев(СтрАвто, СтрДлина(СтрАвто) - 2), СтрАвто); //удаление лишней запятой справа
			ОбластьМакета.Параметры.Автомобиль = СтрАвто;
			
			// заполнение параметров договора - различные сроки, суммы, проценты
			
			ЦенаАвтомобиля = Строка.СуммаВсего;
			ОбластьМакета.Параметры.ЦенаАвтомобиля = Формат(Окр(ЦенаАвтомобиля),"ЧДЦ=2; ЧН=0") + " " + Документ.ВалютаДокумента
				+ " (" + РаботаСКурсамиВалют.СформироватьСуммуПрописью(ЦенаАвтомобиля, Документ.ВалютаДокумента) + ")";
			
			Если ЗначениеЗаполнено(Документ.ДоговорВзаиморасчетов) Тогда
				ПроцентВознаграждения = Документ.ДоговорВзаиморасчетов.ПроцентКомиссионногоВознаграждения;
				СуммаВознаграждения = Документ.ДоговорВзаиморасчетов.СуммаКомиссионногоВознаграждения; 
				Если ЗначениеЗаполнено(ПроцентВознаграждения) Тогда
					СуммаВознаграждения = ЦенаАвтомобиля*ПроцентВознаграждения/100;
				ИначеЕсли ЗначениеЗаполнено(СуммаВознаграждения) И ЗначениеЗаполнено(ЦенаАвтомобиля) Тогда
					ПроцентВознаграждения = СуммаВознаграждения/ЦенаАвтомобиля;
				КонецЕсли;
				ОбластьМакета.Параметры.РазмерВознаграждения = Формат(Окр(СуммаВознаграждения),"ЧДЦ=2; ЧН=0") + " "
					+ Документ.ВалютаДокумента + " (" 
					+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВознаграждения, Документ.ВалютаДокумента) + ")";
				ОбластьМакета.Параметры.ПроцентВознаграждения = Строка(
					Формат(ПроцентВознаграждения, "ЧЦ=8; ЧДЦ=4; ЧН=0")) + "% ";
				ОбластьМакета.Параметры.ПроцентОтПолученнойВыгоды = Строка(
					Формат(ПроцентВознаграждения, "ЧЦ=8; ЧДЦ=4; ЧН=0")) + "% ";
			КонецЕсли;
			
			// свойства
			ИскомыеСвойства = Новый Массив();
			ИскомыеСвойства.Добавить(
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СрокПриобретенияАвтомобиляКомиссионером);
			ИскомыеСвойства.Добавить(
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СрокПередачиАвтомобиляКомитенту);
			ИскомыеСвойства.Добавить(
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СрокПеречисленияВознагражденияКомиссионеру);
			ИскомыеСвойства.Добавить(
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СуммаНеустойкиЗаДеньПросрочкиКомиссионером);
			ИскомыеСвойства.Добавить(
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПроцентНеустойкиЗаПросрочкуКомитентом);
			
			ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ, Истина, Истина, ИскомыеСвойства);
			
			СрокПриобретения = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СрокПриобретенияАвтомобиляКомиссионером",
				ЗначенияСвойствОбъекта, 0);
			ОбластьМакета.Параметры.СрокПриобретенияЗначение = Строка(СрокПриобретения) + " " +  "("
				+ СокрЛП(ЧислоПрописью(СрокПриобретения, "Л=ru_RU", " , , , , , , , , 0")) + ")" + " "
				+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(СрокПриобретения);
			
			СрокПередачи = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СрокПередачиАвтомобиляКомитенту",
				ЗначенияСвойствОбъекта, 0);
			ОбластьМакета.Параметры.СрокПередачиЗначение = Строка(СрокПередачи) + " " +  "("
				+ СокрЛП(ЧислоПрописью(СрокПередачи, "Л=ru_RU", " , , , , , , , , 0")) + ")" + " "
				+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(СрокПередачи);
			
			СрокПеречисления = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
				"СрокПеречисленияВознагражденияКомиссионеру", ЗначенияСвойствОбъекта, 0);
			ОбластьМакета.Параметры.СрокПеречисленияЗначение = Строка(СрокПеречисления) + " " + "(" 
				+ СокрЛП(ЧислоПрописью(СрокПеречисления, "Л=ru_RU", " , , , , , , , , 0")) + ")" + " "
				+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(СрокПеречисления);
			
			СуммаНеустойки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
				"СуммаНеустойкиЗаДеньПросрочкиКомиссионером", ЗначенияСвойствОбъекта, 0);
			ОбластьМакета.Параметры.СуммаНеустойкиЗаДеньПросрочкиКомиссионером = Строка(Формат(СуммаНеустойки, "ЧН=0"))
				+ " руб. ("
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаНеустойки, Справочники.Валюты.НайтиПоКоду("643")) + ")";
			
			ПроцентНеустойки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПроцентНеустойкиЗаПросрочкуКомитентом",
				ЗначенияСвойствОбъекта, 0);
			ОбластьМакета.Параметры.ПроцентНеустойкиЗаПросрочкуКомитентом = Строка(ПроцентНеустойки) + "% " + "("
				+ СокрЛП(ЧислоПрописью(ПроцентНеустойки, "Л=ru_RU", "процент,процента,процентов,м,,,,,0")) + ")";
			
			// заполнение параметров подвала договора
			
			СтруктураПредставления1 = Новый Структура;
			СтруктураПредставления1.Вставить("Наименование",     "");
			СтруктураПредставления1.Вставить("ИНН",              "ИНН ");
			СтруктураПредставления1.Вставить("КПП",              "КПП ");
			СтруктураПредставления1.Вставить("АдресЮридический", "");
			СтруктураПредставления1.Вставить("ТелефонРабочий",   "тел.: ");
			СтруктураПредставления1.Вставить("БанковскийСчет",   "р/с ");
			СтруктураПредставления1.Вставить("Банк",             НСтр("ru = 'в банке'") + Символы.НПП);
			СтруктураПредставления1.Вставить("БИК",              "БИК ");
			СтруктураПредставления1.Вставить("КоррСчет",         "к/с ");
			
			СтруктураПредставления2 = Новый Структура;
			СтруктураПредставления2.Вставить("Наименование",     "");
			СтруктураПредставления2.Вставить("ИНН",              "ИНН ");
			СтруктураПредставления2.Вставить("КПП",              "КПП ");
			СтруктураПредставления2.Вставить("АдресФактический", "");
			СтруктураПредставления2.Вставить("ТелефонРабочий",   "тел.: ");
			СтруктураПредставления2.Вставить("БанковскийСчет",   "р/с ");
			СтруктураПредставления2.Вставить("Банк",             НСтр("ru = 'в банке'") + Символы.НПП);
			СтруктураПредставления2.Вставить("БИК",              "БИК ");
			СтруктураПредставления2.Вставить("КоррСчет",         "к/с ");
			
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
			ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
			ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
			ДополнительныеПараметры.ДляПечати = Истина;
			ДополнительныеПараметры.НаДату = Документ.Дата;
			ОбластьМакета.Параметры.ОписаниеКомиссионера = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.Организация, СтруктураПредставления1, ДополнительныеПараметры);
			
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.ДляПечати = Истина;
			ДополнительныеПараметры.НаДату = Документ.Дата;
			ОбластьМакета.Параметры.ОписаниеКомитента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.Контрагент, СтруктураПредставления2, ДополнительныеПараметры);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеАвтомобилей_ДоговорКомиссии";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ТОРГ-1"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ1(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"          , Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("СкладКомпании"        , Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"        , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                 , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВхДокНомер");
	ДанныеОбъекта.Вставить("ВхДокДата");
	
	// Формирование данных для вывода в табличной части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК ТоварКод,
	|	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	|	""796"" КАК КодЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоБазовое,
	|	ПоступлениеАвтомобилейАвтомобили.Количество,
	|	ПоступлениеАвтомобилейАвтомобили.Цена,
	|	ПоступлениеАвтомобилейАвтомобили.Сумма,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили,
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Наименование = ""шт""
	|	И ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN,
	|	ПоступлениеАвтомобилейАвтомобили.Цена,
	|	ПоступлениеАвтомобилейАвтомобили.Сумма,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Производитель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СпособДоставки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НомерТранспортногоСредства);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтправления);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МОЛ);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель",
	    ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Производитель",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Производитель", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("СтраховаяКомпания",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("СопроводительныеДокументы", "");
	ДанныеОбъекта.Вставить("СпособДоставки",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СпособДоставки", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("НомерТранспортногоСредства",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("НомерТранспортногоСредства", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ДатаОтправления",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтправления", ЗначенияСвойствОбъекта));
		
	ДанныеОбъекта.Вставить("МОЛ",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("МОЛ", ЗначенияСвойствОбъекта, Объект.СкладКомпании.МОЛ));
	ДанныеОбъекта.Вставить("ПредседательКомиссии",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("Руководитель",  УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("Этопродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиТОРГ2(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	     
	// данные документа
	ДанныеОбъекта.Вставить("Организация"       		, Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("СкладКомпании"  		, Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Поставщик"  			, Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"                 , Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("НомерДоговора"          , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("ДатаДоговора"           , Объект.ДоговорВзаиморасчетов.ДатаНачала);
	ДанныеОбъекта.Вставить("ВхДокНомер");
	ДанныеОбъекта.Вставить("ВхДокДата");
	
	// перебор строк
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	"""" КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.Наименование КАК ТоварНаименование,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК Артикул,
	|	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	|	""796"" КАК КодЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоБазовое,
	|	ПоступлениеАвтомобилейАвтомобили.Количество КАК КоличествоПоНакладной,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего - ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаБезНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего - ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК ЦенаБезНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.Цена КАК Цена,
	|	ПоступлениеАвтомобилейАвтомобили.Количество КАК Количество
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили,
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ЕдиницыИзмерения.Наименование = ""шт""
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.Наименование,
	|	ПоступлениеАвтомобилейАвтомобили.Цена,
	|	ПоступлениеАвтомобилейАвтомобили.Количество";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);

	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Производитель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СпособДоставки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтправления);
		
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель"       , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("СтраховаяКомпания"      , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Производитель"       	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Производитель", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("СпособДоставки"       	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СпособДоставки", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ДатаОтправления"       	, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтправления", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Руководитель"        	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер"     	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("ПредседательКомиссии" 	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1"     		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2"     		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;	 
КонецФункции 

// Формирует печатную форму "ТОРГ-4"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ4(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"          , Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("СкладКомпании"        , Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Поставщик"            , Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"        , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                 , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВхДокНомер");
	ДанныеОбъекта.Вставить("ВхДокДата");
	
	// Формирование данных для вывода в табличной части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК ТоварКод,
	|	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	|	""796"" КАК КодЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоБазовое,
	|	ПоступлениеАвтомобилейАвтомобили.Количество,
	|	ПоступлениеАвтомобилейАвтомобили.Цена,
	|	ПоступлениеАвтомобилейАвтомобили.Сумма,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили,
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Наименование = ""шт""
	|	И ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN,
	|	ПоступлениеАвтомобилейАвтомобили.Цена,
	|	ПоступлениеАвтомобилейАвтомобили.Сумма,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти", Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Грузоотправитель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Грузополучатель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МОЛ);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель",
		?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("МОЛ",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("МОЛ", ЗначенияСвойствОбъекта, Объект.СкладКомпании.МОЛ));
	ДанныеОбъекта.Вставить("ПредседательКомиссии",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("Руководитель" , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму "ТОРГ-12"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Неопределено);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Контрагент.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" ,"");
	ДанныеОбъекта.Вставить("ВхДокДата"              , Объект.ВхДокДата);
	ДанныеОбъекта.Вставить("ВхДокНомер"             , Объект.ВхДокНомер);
	
	// перебор строк
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	"""" КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.Наименование КАК ТоварНаименование,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК Код,
	|	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	|	""796"" КАК КодЕдиницаИзмерения,
	|	1 КАК Количество,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоБазовое,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего - ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаБезНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего - ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК ЦенаБезНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.Цена КАК Цена
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили,
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ЕдиницыИзмерения.Наименование = ""шт""
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.Наименование,
	|	ПоступлениеАвтомобилейАвтомобили.Цена";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);

	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		?(НЕ ЗначениеЗаполнено(ДатаОтгрузки), """___""____________ 20___", Формат(ДатаОтгрузки, "ДЛФ=DD"))
	);
	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Контрагент));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Организация));
		
	ДанныеОбъекта.Вставить("Грузоотправитель"      , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Грузополучатель"       , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Организация));
	
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" , ?(ТипЗнч(ДанныеОбъекта.Грузополучатель) = Тип("СправочникСсылка.ПодразделенияКомпании"), ДанныеОбъекта.Грузополучатель.Организация.КодПоОКПО, ДанныеОбъекта.Грузополучатель.КодПоОКПО));
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"       , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"      , ?(ТипЗнч(ДанныеОбъекта.Плательщик) = Тип("СправочникСсылка.ПодразделенияКомпании"), ДанныеОбъекта.Плательщик.Организация.КодПоОКПО, ДанныеОбъекта.Плательщик.КодПоОКПО));
	
	ДанныеОбъекта.Вставить("Руководитель"     	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Принял"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	
	ДанныеОбъекта.Вставить("ИмяТабличнойЧасти", "Автомобили");
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму "ТОРГ13"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ13(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"      , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"  , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"    , Объект.КурсДокумента); 
	ДанныеОбъекта.Вставить("КурсВалютыУпр"    , Объект.КурсВалютыУпр); 
	ДанныеОбъекта.Вставить("Дата"             , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"            , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("Розничный"        , Ложь);
	ДанныеОбъекта.Вставить("ТребуетсяПересчет", Ложь);
	
	ДанныеОбъекта.Вставить("Грузоотправитель", 
		?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Грузополучатель",
		?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.СкладКомпании));	
	ДанныеОбъекта.Вставить("Отпустил",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил", "ПолучилПредставление"));
	
	// форматы вывода
	ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Объект);
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Объект);
	
	ВалютаТек		= Объект.ВалютаДокумента;
	КурсТек			= Объект.КурсДокумента;
	ВалютаПересч	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если Не ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПересч,Объект.Дата);
		КурсПересч		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсПересч		= Объект.КурсВалютыУпр;
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК ТоварКод,
	|	"""" КАК ХарактеристикаНоменклатуры,
	|	1 КАК Количество,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего КАК Сумма,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.Цена КАК Цена
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили,
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ЕдиницыИзмерения.Наименование = ""шт""
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	|	ПоступлениеАвтомобилейАвтомобили.Цена";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТаблицаСуммСписания = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("КоличествоСтрок"  		, ТаблицаСуммСписания.Количество());
	ДанныеОбъекта.Вставить("ТаблицаСуммСписания"  	, ТаблицаСуммСписания);
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму "М-4"
// Возвращает сформированный табличный документ.
Функция ПолучитьДанныеДляПечатиМ4(Объект) Экспорт
	
		ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);	
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВхДокНомер"             , Объект.ВхДокНомер);
	ДанныеОбъекта.Вставить("Контрагент"        		, Объект.Контрагент); 
	ДанныеОбъекта.Вставить("СкладКомпании"       	, Объект.СкладКомпании); 
	ДанныеОбъекта.Вставить("ЦенаВключаетНДС"  		, Объект.ТипЦен.ЦенаВключаетНДС);
	
	
	// перебор строк
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	               |	"""" КАК ХарактеристикаНоменклатуры,
	               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК Код,
	               |	""шт"" КАК ЕдиницаИзмерения,
	               |	""796"" КАК КодЕдиницаИзмерения,
	               |	1 КАК Количество,
	               |	ПоступлениеАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	               |	ПоступлениеАвтомобилейАвтомобили.Сумма КАК Сумма,
	               |	ПоступлениеАвтомобилейАвтомобили.Сумма КАК Цена,
	               |	ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	               |	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	               |ГДЕ
	               |	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("Товары"  				, Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	ДанныеОбъекта.Вставить("СтраховаяКомпания"      , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Отпустил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму "МХ-1" Акт о приеме-передаче ТМЦ
// 
// Параметры:
//  
//
Функция ПолучитьДанныеДляПечатиМХ1(Объект) Экспорт
	Если Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
		
		ДанныеОбъекта = Новый Структура();
	
		// данные документа
		ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
		ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
		ДанныеОбъекта.Вставить("КурсДокумента"        	, Объект.КурсДокумента); 
		ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
		ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
		ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
		ДанныеОбъекта.Вставить("ВладелецТовара"      	, Объект.Контрагент);
		ДанныеОбъекта.Вставить("СкладКомпании"      	, Объект.СкладКомпании);
		
		// ПодготовкаТЧ
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоступлениеАвтомобилейАвтомобили.Ссылка,
			|	ПоступлениеАвтомобилейАвтомобили.НомерСтроки,
			|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
			|	ПоступлениеАвтомобилейАвтомобили.Количество,
			|	ПоступлениеАвтомобилейАвтомобили.Цена,
			|	ПоступлениеАвтомобилейАвтомобили.Сумма,
			|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
			|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
			|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
			|	ПоступлениеАвтомобилейАвтомобили.ГТД,
			|	ПоступлениеАвтомобилейАвтомобили.АвтомобильБезЗаказа,
			|	ПоступлениеАвтомобилейАвтомобили.ЗаказНаАвтомобиль,
			|	ПоступлениеАвтомобилейАвтомобили.АвтомобильБУ,
			|	ПоступлениеАвтомобилейАвтомобили.VIN
			|ИЗ
			|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
			|ГДЕ
			|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка";
			
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка); 
		ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТоваров Из ВыборкаСтрок Цикл
			ВалютаРегУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			Если Не Объект.ВалютаДокумента = ВалютаРегУчета Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегУчета,Объект.Дата);
				КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
				СтрокаТоваров.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.Цена,Объект.ВалютаДокумента,Объект.КурсДокумента,ВалютаРегУчета,КурсРегл);
				СтрокаТоваров.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.Сумма,Объект.ВалютаДокумента,Объект.КурсДокумента,ВалютаРегУчета,КурсРегл);
				СтрокаТоваров.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаВсего,Объект.ВалютаДокумента,Объект.КурсДокумента,ВалютаРегУчета,КурсРегл);
			КонецЕсли;
		КонецЦикла;
		ДанныеОбъекта.Вставить("Товары"      		, ВыборкаСтрок);
		
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина);
		ДанныеОбъекта.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
		ДанныеОбъекта.Вставить("Получил" , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
		
		Возврат ДанныеОбъекта;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Печать акта о приеме-передаче товарно-материальных ценностей на хранение возможна только для документов с хозяйственной операцией ""Поступление автомобилей на ответственное хранение""'"));
	КонецЕсли;

КонецФункции // ПечатьМХ1

// Формирует печатную форму договора выкупа автомобиля
//
// Параметры:
//  ДляПечати     - Массив из ДокументСсылка.ПоступлениеАвтомоиблей - печатаемые документы поступления автомобилей;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
// 
// Возвращаемое значение:
//  ТабличныйДокумент
//
Функция ПечатьДоговораВыкупа(ДляПечати, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Обработки.ПечатьДоговорКуплиПродажи
		.Создать()
		.ПечатаемДокументы(ДляПечати)
		.СПараметрами(ПараметрыПечати)
		.СохранятьСвязьОбластейИОбъектовВ(ОбъектыПечати)
		.Печать();
	
КонецФункции

// Формирует печатную форму заявления на зачет ДС в стоимость нового автомобиля.
//
Функция ПечатьЗаявлениеНаЗачетДС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеАвтомобилей.ПФ_MXL_ЗаявлениеНаЗачетДС");
		
		ЮрЛицо = Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
		
		ОбластьШапка      = Макет.ПолучитьОбласть(?(ЮрЛицо, "ШапкаЮр", "ШапкаФиз"));
		ОбластьТело       = Макет.ПолучитьОбласть("Тело");
		ОбластьПодвал     = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		Организация = Документ.Организация;
		ОбластьШапка.Параметры.НаименованиеОрганизации = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Организация, ДатаДокумента);
		
		// Получим руководителя организации.
		СтруктураОтбора = Новый Структура(
			"Организация, Объект",
			Организация,
			Перечисления.ВидыОбъектовСведений.Руководитель
		);
		
		СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(НачалоДня(ДатаДокумента), СтруктураОтбора);
		РуководительОрганизации = СтруктураСведений.Значение;
		
		ФИОДиректора = НСтр("ru = 'НЕ ЗАПОЛНЕНО'");
		Если ЗначениеЗаполнено(РуководительОрганизации) Тогда
			
			ФИОДиректора = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				РуководительОрганизации.Наименование,
				3,
				РуководительОрганизации
			);
			
		КонецЕсли;
		ОбластьШапка.Параметры.ФИОДиректора = ФИОДиректора;
		
		ФИОКонтрагента = НСтр("ru = 'НЕ ЗАПОЛНЕНО'");
		Если НЕ ЮрЛицо Тогда
			
			// После объдинения с А6 заменить на АрендаАвтомобилей.ПолучитьДанныеПаспорта(Документ.Контрагент);
			ДанныеКонтрагента = ПолучитьДанныеПаспорта(Документ.Контрагент);
			ОбластьШапка.Параметры.Заполнить(ДанныеКонтрагента);
			
		Иначе
			ОбластьШапка.Параметры.Контрагент = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, ДатаДокумента);
		КонецЕсли;
		
		// Сумма с валютой в правильном падеже.
		Валюта = Документ.ВалютаДокумента;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		МассивПараметров  = СтрРазделить(Валюта.ПараметрыПрописи, ",");
		МинимальноеКоличествоПараметровПрописи = 2;
		
		Если МассивПараметров.Количество() > МинимальноеКоличествоПараметровПрописи Тогда
			
			СтрокаПодстановки = СтрШаблон(
				";%4 %1 ;; %4 %2 ; %4 %3 ;",
				МассивПараметров[0],
				МассивПараметров[1],
				МассивПараметров[2],
				"%1"
			);
			СуммаСВалютой = СтрокаСЧислом(СтрокаПодстановки, Документ.СуммаДокумента, ВидЧисловогоЗначения.Количественное);
			
		Иначе
			
			СуммаСВалютой = Документ.СуммаДокумента;
			
		КонецЕсли;
		
		СуммаСВалютойВМассив = СтрРазделить(СуммаСВалютой, " ");
		Если СуммаСВалютойВМассив.Количество() > 2 Тогда
			ВалютаСуммы = " " + СуммаСВалютойВМассив[2];
		Иначе
			ВалютаСуммы = "";
		КонецЕсли;
		
		ОбластьТело.Параметры.СуммаВВалюте = Формат(Документ.СуммаДокумента, ФорматВыводаСуммы) + ВалютаСуммы;
		
		ДоговорПоступления = Документ.ДоговорВзаиморасчетов;
		ОбластьТело.Параметры.НомерДоговора = ДоговорПоступления.НомерДоговора;
		ОбластьТело.Параметры.ДатаДоговора  = Формат(ДоговорПоступления.ДатаСоздания, "ДЛФ=D");
		
		ЗаказНаАвтомобиль = АвтомобилиСПробегомСервер.СвязанныйЗаказ(Документ);
		Если ЗначениеЗаполнено(ЗаказНаАвтомобиль) Тогда
			
			ДоговорТрейдИн = ЗаказНаАвтомобиль.ДоговорВзаиморасчетов;
			ОбластьТело.Параметры.НомерДоговораТрейдИн = ДоговорТрейдИн.НомерДоговора;
			ОбластьТело.Параметры.ДатаДоговораТрейдИн  = Формат(ДоговорТрейдИн.ДатаСоздания, "ДЛФ=D");
			
		КонецЕсли;
	
		// Выводим все области.
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьТело);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеАвтомобилей_ЗаявлениеНаЗачетДС";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму акта приема-передачи ТС выкупа.
//
Функция ПечатьАктПриемаПередачиТС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, Вид)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Вид = "Выкуп" Тогда
		ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеАвтомобилей_АктПриемаПередачиТСВыкуп";
		ИмяМакета = "ПФ_MXL_АктПриемаПередачиТСВыкуп";
	ИначеЕсли Вид = "Комиссия" Тогда
		ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеАвтомобилей_АктПриемаПередачиТСКомиссия";
		ИмяМакета = "ПФ_MXL_АктПриемаПередачиТСКомиссия";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеАвтомобилей.ДоговорВзаиморасчетов.ДатаСоздания КАК ДатаДоговора,
		|	ПоступлениеАвтомобилей.Дата КАК Дата,
		|	ПоступлениеАвтомобилей.Организация КАК Организация,
		|	ПоступлениеАвтомобилей.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ПоступлениеАвтомобилей.Контрагент КАК Контрагент,
		|	ПоступлениеАвтомобилей.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ПоступлениеАвтомобилей.Автомобили.(
		|		Автомобиль КАК Автомобиль
		|	) КАК Автомобили,
		|	ПоступлениеАвтомобилей.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеАвтомобилей КАК ПоступлениеАвтомобилей
		|ГДЕ
		|	ПоступлениеАвтомобилей.Ссылка В(&СписокДокументов)";
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТаблицаАвтомобилей = ВыборкаДетальныеЗаписи.Автомобили.Выгрузить();
		
		Если ТаблицаАвтомобилей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДатаДокумента = ВыборкаДетальныеЗаписи.Дата;
		Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		Если Контрагент.ФормаСобственности <> Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			
			// После объдинения с А6 заменить на АрендаАвтомобилей.ПолучитьДанныеПаспорта(Контрагент);
			ДанныеКонтрагента = ПолучитьДанныеПаспорта(Контрагент);
			Шаблон = НСтр("ru = '%1, паспорт %2 %3 выдан %4 %5'");
			
			ПредставлениеКонтрагента = СтрШаблон(
				Шаблон,
				Контрагент.Наименование,
				ДанныеКонтрагента.ПаспортСерия,
				ДанныеКонтрагента.ПаспортНомер,
				ДанныеКонтрагента.ПаспортДатаВыдачи,
				ДанныеКонтрагента.ПаспортКемВыдан
			);
			
		Иначе
			
			ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Контрагент, ДатаДокумента);
			
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("ДатаДоговора" , Формат(ВыборкаДетальныеЗаписи.ДатаДоговора, "ДЛФ=D"));
		СтруктураДокумента.Вставить("ДатаДокумента", Формат(ДатаДокумента                      , "ДЛФ=D"));
		СтруктураДокумента.Вставить("Контрагент"   , ПредставлениеКонтрагента);
		СтруктураДокумента.Вставить("Организация"  , УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ВыборкаДетальныеЗаписи.Организация, ДатаДокумента));
		
		ПервыйАвтомобиль = Истина;
		
		Для Каждого ТекСтрока Из ТаблицаАвтомобилей Цикл
			
			Автомобиль = ТекСтрока.Автомобиль;
			
			// Печатаем Акт для каждого автомобиля на новом листе.
			Если Не ПервыйАвтомобиль Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйАвтомобиль = Ложь;
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеАвтомобилей." + ИмяМакета);
			
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьТело  = Макет.ПолучитьОбласть("Тело");
			
			ОбластьШапка.Параметры.Заполнить(СтруктураДокумента);
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			ДанныеАвтомобиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Автомобиль,
				"Марка, Модель, VIN, НомерДвигателя, Цвет.Наименование, ГодВыпуска"
			);
			
			ДанныеАвтомобиля.Вставить(
				"МаркаНаименованиеПолное",
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ДанныеАвтомобиля.Марка));
			
			ДанныеАвтомобиля.Вставить(
				"МодельНаименованиеПолное",
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ДанныеАвтомобиля.Модель));
			
			ДанныеАвтомобиля.ГодВыпуска = ?(
				ЗначениеЗаполнено(ДанныеАвтомобиля.ГодВыпуска),
				Формат(ДанныеАвтомобиля.ГодВыпуска, НСтр("ru = 'ДФ = ''yyyy'''")),
				""
			);
			
			ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,
				ДатаДокумента
			);
			
			ДанныеАвтомобиля.Вставить("ГосНомер", ГосНомер);
			
			СРТС = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.СвидетельствоОРегистрацииТС,
				ДатаДокумента
			);
			
			ПредставлениеСРТС = "";
			Если ЗначениеЗаполнено(СРТС) Тогда
				ПредставлениеСРТС = СтрШаблон(НСтр("ru = '№ %1 выдан %2 %3'"), СРТС.Номер,
					Формат(СРТС.ДатаВыдачи, "ДЛФ=D"), СРТС.КемВыдан);
			КонецЕсли;
			ДанныеАвтомобиля.Вставить("СТС", ПредставлениеСРТС);
			
			ПТС = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт,
				ДатаДокумента
			);
			
			ПредставлениеПТС = "";
			Если ЗначениеЗаполнено(ПТС) Тогда
				ПредставлениеПТС = СтрШаблон(НСтр("ru = '№ %1 выдан %2 %3'"), ПТС.Номер,
					Формат(ПТС.ДатаВыдачи, "ДЛФ=D"), ПТС.КемВыдан);
					
				Если ПТС.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.ЭлектронныйПТС Тогда	
					ПредставлениеПТС = СтрЗаменить(ПредставлениеПТС, "выдан", "создан");    
				КонецЕсли;
			КонецЕсли;
			ДанныеАвтомобиля.Вставить("ПТС", ПредставлениеПТС);
			
			Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
				ДатаДокумента
			);
			
			ДанныеАвтомобиля.Вставить("Пробег", Пробег);
			
			ОбластьТело.Параметры.Заполнить(ДанныеАвтомобиля);
			
			ТабличныйДокумент.Вывести(ОбластьТело);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

// Возвращает данные паспорта для объекта (организации, контрагента, сотрудника,
// контактного лица).
//
// Параметры:
//  Объект  - СправочникСсылка                         - Владелец подтверждающего документа.
//  Паспорт - СправочникСсылка.ПодтверждающиеДокументы - Паспорт объекта.
//  Падеж   - Число                                    - Номер падежа, для склонения.
//
// Возвращаемое значение:
//   Структура - Набор паспортных данных.
//
Функция ПолучитьДанныеПаспорта(Объект, Паспорт = Неопределено, Падеж = 2)
	
	Если Паспорт = Неопределено Тогда
		
		Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
					Объект,
					Перечисления.ВидыДокументов.Паспорт
		);
		
	КонецЕсли;
	
	ПаспортСерия      = "";
	ПаспортНомер      = "";
	ПаспортДатаВыдачи = "";
	ПаспортКемВыдан   = "";
	
	Если ЗначениеЗаполнено(Паспорт) Тогда
		
		ДанныеПаспорта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Паспорт, "Серия, Номер, ДатаВыдачи, КемВыдан");
		
		ПаспортСерия      = ДанныеПаспорта.Серия;
		ПаспортНомер      = ДанныеПаспорта.Номер;
		ПаспортДатаВыдачи = ДанныеПаспорта.ДатаВыдачи;
		ПаспортКемВыдан   = ДанныеПаспорта.КемВыдан;
		
	КонецЕсли;
	
	ФИОКонтрагентаРП = СклонениеПредставленийОбъектов.ПросклонятьФИО(Объект.Наименование, Падеж, Объект);
	АдресРегистрации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		
	Результат = Новый Структура;
	Результат.Вставить("ПаспортСерия",
		?(ПустаяСтрока(ПаспортСерия), "НЕ ЗАПОЛНЕНО", ПаспортСерия));
	Результат.Вставить("ПаспортНомер",
		?(ПустаяСтрока(ПаспортНомер), "НЕ ЗАПОЛНЕНО", ПаспортНомер));
	Результат.Вставить("ПаспортДатаВыдачи",
		?(ЗначениеЗаполнено(ПаспортДатаВыдачи), Формат(ПаспортДатаВыдачи, "ДЛФ=D"), "НЕ ЗАПОЛНЕНО"));
	Результат.Вставить("ПаспортКемВыдан",
		?(ПустаяСтрока(ПаспортКемВыдан), "НЕ ЗАПОЛНЕНО", ПаспортКемВыдан));
	Результат.Вставить("ФИО",
		?(ПустаяСтрока(ФИОКонтрагентаРП), "НЕ ЗАПОЛНЕНО", ФИОКонтрагентаРП));
	Результат.Вставить("АдресРегистрации",
		?(ПустаяСтрока(АдресРегистрации), "НЕ ЗАПОЛНЕНО", АдресРегистрации));
	
	Возврат Результат;
	
КонецФункции

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаПоступленияАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатациюАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Взаимозачет);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратПоставщикуАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ДефектовочнаяВедомость);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦенАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОтчетКомитентуЗаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПереоценкаАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПлатежноеПоручение);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеДопРасходов); 
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетОтПоставщикаЗаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ТаможеннаяДекларацияИмпорт);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦенОпций);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.УведомлениеОВвозеПрослеживаемыхТоваров);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПоступлениеАвтомобилей);

КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПоступлениеАвтомобилей - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Автомобили");
	
КонецФункции

#КонецОбласти

#КонецЕсли