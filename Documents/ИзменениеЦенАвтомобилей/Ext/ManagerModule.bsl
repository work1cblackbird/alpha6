// Модуль менеджера документа "Изменение цен автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ИзменениеЦенАвтомобилей);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Получим полное имя объекта метаданных
	ИмяТаблицы = ПолучитьСсылку().Метаданные().ПолноеИмя();
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(ИмяТаблицы, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Заполнение базовой цены в строке табличной части
//
// Параметры:
//	Объект - Документ объект или объект формы - объект заполнения
//	Строка - Строка табличной части в которой заполняется базовая цена.
//
Процедура ЗаполнитьБазовуюЦену(Объект, Строка) Экспорт
	
	ДокументОбъектСтруктура = Новый Структура();
	
	ДокументОбъектСтруктура.Вставить("Ссылка"            , Объект.Ссылка);
	ДокументОбъектСтруктура.Вставить("Дата"              , Объект.Дата);
	ДокументОбъектСтруктура.Вставить("МоментВремени"     , ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени()));
	ДокументОбъектСтруктура.Вставить("ВалютаДокумента"   , Объект.ВалютаДокумента);
	ДокументОбъектСтруктура.Вставить("КурсДокумента"     , Объект.КурсДокумента);
	ДокументОбъектСтруктура.Вставить("РасчетЦенОт"       , Объект.РасчетЦенОт);
	ДокументОбъектСтруктура.Вставить("БазовыйТипЦен"     , Объект.БазовыйТипЦен);
	ДокументОбъектСтруктура.Вставить("ДокументОснование" , Объект.ДокументОснование);
	ДокументОбъектСтруктура.Вставить("СкладКомпании"     , Объект.СкладКомпании);
	
	ДокументОбъектСтрока = Новый Структура();
	Для каждого РеквизитТабличнойЧасти Из Объект.Ссылка.Метаданные().ТабличныеЧасти.Автомобили.Реквизиты Цикл
		ДокументОбъектСтрока.Вставить(РеквизитТабличнойЧасти.Имя,Строка[РеквизитТабличнойЧасти.Имя]);
	КонецЦикла;
	
	ЗащищенныеФункцииАльфаАвтоСервер.ИзменениеЦенАвтомобилейЗаполнитьБазовуюЦену(ДокументОбъектСтруктура,ДокументОбъектСтрока);
	
	Для каждого РеквизитТабличнойЧасти Из ДокументОбъектСтрока Цикл
		Строка[РеквизитТабличнойЧасти.Ключ] = РеквизитТабличнойЧасти.Значение;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьБазовуюЦену()

Процедура ЗаполнитьВариантамиКомплектацииМодели(Объект, Модель, ПараметрыДействия)
	
	Если Модель.ЭтоГруппа Тогда
		ВыборкаВариантовКомплектации = Справочники.Модели.Выбрать(Модель);
		Пока ВыборкаВариантовКомплектации.Следующий() Цикл
			ЗаполнитьВариантамиКомплектацииМодели(Объект, ВыборкаВариантовКомплектации.Ссылка, ПараметрыДействия);
		КонецЦикла; 
	Иначе
		ВыборкаВариантовКомплектации = Справочники.ВариантыКомплектации.Выбрать(,Модель);
		Пока ВыборкаВариантовКомплектации.Следующий() Цикл
			СтрокиВариантаКомплектации = Объект.Автомобили.НайтиСтроки(Новый Структура("Автомобиль,ВариантКомплектации",Модель,ВыборкаВариантовКомплектации.Ссылка));
			Если СтрокиВариантаКомплектации.Количество()=0 Тогда
				НоваяСтрока = Объект.Автомобили.Добавить();
				НоваяСтрока.Автомобиль = Модель;
				НоваяСтрока.ВариантКомплектации = ВыборкаВариантовКомплектации.Ссылка;
				СтрокиВариантаКомплектации.Добавить(НоваяСтрока);
			КонецЕсли;
			Для каждого СтрокаТЧ Из СтрокиВариантаКомплектации Цикл
				АвтомобилиВариантКомплектацииПриИзменении(Объект, СтрокаТЧ, ПараметрыДействия);
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры 

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ДатаНачалаДействия");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.Цена");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы автомобилей
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	УникальныеАвтомобили.Добавить("ВариантКомплектации");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	Если Объект.РасчетЦенОт > 1 Тогда 
		КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	Если ТребуетсяУстановкаЦен ИЛИ ТребуетсяПересчетЦен Тогда
		
		Если ТребуетсяУстановкаЦен И Не ТребуетсяПересчетЦен Тогда
			 ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
		ИначеЕсли ТребуетсяПересчетЦен И НЕ ТребуетсяУстановкаЦен Тогда
			ПараметрыДействия.ТребуетсяПересчетЦен	 = Ложь;
		Иначе 
			 ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
			 ПараметрыДействия.ТребуетсяПересчетЦен	 = Ложь;
		КонецЕсли;
		
		Для Каждого Строка Из Объект.Автомобили Цикл
			ЗаполнитьБазовуюЦену(Объект, Строка);
			АвтомобилиПроцентНаценкиПриИзменении(Объект, Строка);
		КонецЦикла;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);

КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Тип цен не должен быть рассчитываемым 
	Если Объект.ТипЦен.Рассчитывается Тогда
		Объект.ТипЦен = Справочники.ТипыЦен.ПустаяСсылка();
		ТекстСообщения = НСтр("ru = 'Тип цен не должен быть рассчитываемым.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// получим список параметров действий
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Автомобиль) Тогда
		
		Если ТипЗнч(Строка.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
			
			Строка.ВариантКомплектации = Неопределено;
			
		ИначеЕсли ТипЗнч(Строка.Автомобиль) = Тип("СправочникСсылка.Модели") И
				  (ЗначениеЗаполнено(Строка.ВариантКомплектации)) И
				  (Строка.ВариантКомплектации.Владелец <> Строка.Автомобиль) Тогда
			
			Строка.ВариантКомплектации = Неопределено;
			
		КонецЕсли;
		
		// получим базовую цену
		ЗаполнитьБазовуюЦену(Объект, Строка);
		
		Если Объект.ПроцентНаценки = 0 Тогда
			Строка.ПроцентНаценки = Объект.БазовыйТипЦен.ПроцентСкидкиНаценки;
		Иначе
			Строка.ПроцентНаценки = Объект.ПроцентНаценки;
		КонецЕсли;
		
		Строка.Цена         = Строка.ЦенаБазовая + ((Строка.ЦенаБазовая*Строка.ПроцентНаценки)/100);
		Строка.СуммаНаценки = Строка.Цена - Строка.ЦенаБазовая;
		
	КонецЕсли;
	
КонецПроцедуры // АвтомобилиАвтомобильПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вариант комплектации" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтомобилиВариантКомплектацииПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.ПроцентНаценки = ?(Строка.ЦенаБазовая = 0, 0, ((Строка.Цена - Строка.ЦенаБазовая)/Строка.ЦенаБазовая)*100);
	Строка.СуммаНаценки   = Строка.Цена - Строка.ЦенаБазовая;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтомобилиПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.Цена         = Строка.ЦенаБазовая + ((Строка.ЦенаБазовая*Строка.ПроцентНаценки)/100);
	Строка.СуммаНаценки = Строка.Цена - Строка.ЦенаБазовая;
	
	//округляем
	НоваяЦена = Строка.Цена;
	ДельтаОкругления    = ?(Объект.ОкруглятьДо = 0, 0, НоваяЦена/Объект.ОкруглятьДо);
	ДельтаОкругленияЦел = Цел(ДельтаОкругления);
	Если ДельтаОкругления <> ДельтаОкругленияЦел Тогда
		НоваяЦена = (ДельтаОкругленияЦел + 1)*Объект.ОкруглятьДо;
	КонецЕсли;
	Если НоваяЦена <> Строка.Цена Тогда
		Строка.Цена = НоваяЦена;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма наценки" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтомобилиСуммаНаценкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.Цена           = Строка.ЦенаБазовая + Строка.СуммаНаценки;
	Строка.ПроцентНаценки = ?(Строка.ЦенаБазовая = 0, 0, ((Строка.Цена - Строка.ЦенаБазовая)/Строка.ЦенаБазовая)*100);
	
	//округляем
	НоваяЦена = Строка.Цена;
	ДельтаОкругления    = ?(Объект.ОкруглятьДо=0, 0, НоваяЦена/Объект.ОкруглятьДо);
	ДельтаОкругленияЦел = Цел(ДельтаОкругления);
	
	Если ДельтаОкругления <> ДельтаОкругленияЦел Тогда
		НоваяЦена = (ДельтаОкругленияЦел + 1)*Объект.ОкруглятьДо;
	КонецЕсли;
	
	Если НоваяЦена <> Строка.Цена Тогда
		Строка.Цена = НоваяЦена;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ИзменениеЦенАвтомобилей",
		"ИзменениеЦенАвтомобилей",
		НСтр("ru = 'Изменение цен на автомобили'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИзменениеЦенАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ИзменениеЦенАвтомобилей",
															"Изменение цен на автомобили",
															ПечатьИзменениеЦенАвтомобилей(МассивОбъектов, ОбъектыПечати));
															
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует печатную форму "ИзменениеЦенАвтомобилей"
// Возвращает сформированный табличный документ:
Функция ПечатьИзменениеЦенАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИзменениеЦенАвтомобилей.ПФ_MXL_ИзменениеЦенАвтомобилей");
		
		МассивАвтомобилей = Документ.Автомобили.ВыгрузитьКолонку("Автомобиль");
		ТипАвтомобиль = Тип("СправочникСсылка.Автомобили");
		ЕстьАвтомобили = Ложь;
		Для Каждого СтрокаАвтомобиль Из МассивАвтомобилей Цикл
			ЕстьАвтомобили = ТипЗнч(СтрокаАвтомобиль)=ТипАвтомобиль;
			Если ЕстьАвтомобили Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьАвтомобили Тогда
			ОбластьАвтомобиль = Макет.Область("Товар");
			ОбластьVIN = Макет.Область("VIN");
			ОбластьАвтомобиль.ШиринаКолонки = ОбластьАвтомобиль.ШиринаКолонки + ОбластьVIN.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьVIN, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = 
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеТипаЦен =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ТипЦен);
				
		// выведем или удалим ШК
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		МоментВремени = ?(НЕ ЗначениеЗаполнено(Документ.ДатаНачалаДействия), Документ.Ссылка.МоментВремени(),
			Новый МоментВремени(Документ.ДатаНачалаДействия, Документ.Ссылка));
		МоментВремени = Новый Граница(МоментВремени, ВидГраницы.Исключая);
		
		ВыборкаТабличнойЧасти = Документ.Автомобили.Выгрузить();
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ);
			// найдём старую цену
			
			СтруктураОтбора = Новый Структура("ТипЦен,Автомобиль,ВариантКомплектации",
				Документ.ТипЦен, СтрокаТЧ.Автомобиль, СтрокаТЧ.ВариантКомплектации);
			
			СтруктураЦен = РегистрыСведений.ЦеныАвтомобилей.ПолучитьПоследнее(МоментВремени, СтруктураОтбора);
			ЦенаСтарая = СтруктураЦен.Цена;
			
			ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(Документ.ТипЦен, СтрокаТЧ.Автомобиль);
			Если НЕ ВалютаТипаЦены = Документ.ВалютаДокумента Тогда
				ЦенаСтарая = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ЦенаСтарая, ВалютаТипаЦены, Документ.Дата,
					Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			
			СтруктураСтроки.Вставить("ЦенаСтарая", Формат(ЦенаСтарая, ФорматВыводаСуммы));
			
			Если ТипЗнч(СтрокаТЧ.Автомобиль) = ТипАвтомобиль Тогда
				СтруктураСтроки.Вставить("ВариантКомплектации", СтрокаТЧ.Автомобиль.ВариантКомплектации);
			Иначе
				СтруктураСтроки.Вставить("ВариантКомплектации", СтрокаТЧ.ВариантКомплектации);
				Если ЕстьАвтомобили Тогда 
					ОбластьСтрока.Параметры.VIN = "";
				КонецЕсли;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				НомерСтраницыПредыдущий = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		//итоги
		ОбластьПодвал.Параметры.СуммаПрописью = "Всего наименований " + ВыборкаТабличнойЧасти.Количество();
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПредседательКомиссии"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеЦенАвтомобилей_ИзменениеЦенАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ИзменениеЦенАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли; 
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	ВыборСклада.Параметры			= Новый Структура("МножественныйВыбор,РежимВыбора,ЗакрыватьПриВыборе", Истина, Истина, Истина);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладыКомпании", ВыборСклада);
	
	ВыборМодели 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборМодели.ВыборСсылки 		= "Справочник.Модели.ФормаСписка";
	ВыборМодели.Обязательный 		= Истина;
	ВыборМодели.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать модель автомобиля.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить вариантами комплектации'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьВариантамиКомплектации";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Модель",	ВыборМодели);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Видимость",        Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Доступность",      Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьВариантамиКомплектации.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьВариантамиКомплектации.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа складскими остатками
//
Функция АвтомобилиЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Запрос=Новый Запрос();
	ТестЗапроса="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&Момент, СкладКомпании В (&ВыбСклады)) КАК ОстаткиАвтомобилейОстатки";
	Запрос.Текст  = ТестЗапроса;
	МоментВремени = ?(Ссылка.Пустая(),ТекущаяДатаСеанса(), Новый МоментВремени(Объект.Дата));
	Запрос.УстановитьПараметр("Момент",    МоментВремени);
	Запрос.УстановитьПараметр("ВыбСклады", ПараметрыЗаполнения.СкладыКомпании);
	ВыборкаАвтомобили = Запрос.Выполнить().Выбрать();
	Пока ВыборкаАвтомобили.Следующий() Цикл
		СтрокаАвтомобилей             = Объект.Автомобили.Добавить();
		СтрокаАвтомобилей.Автомобиль = ВыборкаАвтомобили.Автомобиль;
		АвтомобилиАвтомобильПриИзменении(Объект, СтрокаАвтомобилей, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьСкладскимиОстатками()

// Обработчик заполнения документа по вариантами комплектации
//
Функция АвтомобилиЗаполнитьВариантамиКомплектации(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьВариантамиКомплектацииМодели(Объект, ПараметрыЗаполнения.Модель, ПараметрыДействия);
	
КонецФункции // АвтомобилиЗаполнитьВариантамиКомплектации()

#КонецОбласти

#КонецОбласти

#КонецЕсли

