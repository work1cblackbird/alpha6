// Модуль документа "Снятие резервов заказов покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаказНаряд") Тогда
		Если ТипЗнч(ДанныеЗаполнения.ЗаказНаряд) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			ДополнительныеСвойства.Вставить("ТоварыИМатериалы", ДанныеЗаполнения.ТоварыИМатериалы);
			
			// Вызываем общий обработчик заполнения
			Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
				ЭтотОбъект,
				ДанныеЗаполнения.ЗаказНаряд,
				ТекстЗаполнения,
				СтандартнаяОбработка
			);
			Если НЕ Продолжать Тогда
				Возврат;
			КонецЕсли;
			
			КорректировкаЗаказа = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "КорректировкаЗаказа", Ложь);
			
			// Оставим в ТЧ "Товары" только те, которые хотим снять с резерва из заказ-наряда
			ТабТовары = ЭтотОбъект.Товары.Выгрузить();
			Если ДанныеЗаполнения.Свойство("ТоварыИМатериалы") Тогда
				НоменклатураЗН = ДанныеЗаполнения.ТоварыИМатериалы.Товары;
				Для Каждого СтрокаТовары Из ТабТовары Цикл
					Найдено = НоменклатураЗН.НайтиПоЗначению(СтрокаТовары.Номенклатура);
					Если Найдено = Неопределено Тогда
						ТабТовары.Удалить(СтрокаТовары);
					Иначе
						СтрокаТовары.Количество = Мин(Число(Найдено.Представление), СтрокаТовары.Количество);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЭтотОбъект.Товары.Загрузить(ТабТовары);
			
		КонецЕсли;
	ИначеЕсли НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения,
			ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;    
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда 
		Подписант = ОрганизацииАльфаАвто.Руководитель(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		
		Если ЗначениеЗаполнено(Подписант)Тогда
			Исполнитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Проверим корректность заполнения табличной части
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Если ТипЗнч(СтрокаТоваров.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка <%1>: Вид заказа не соответствует контрагенту.'"),
					СокрЛП(СтрокаТоваров.НомерСтроки)
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
			Иначе
				Если Контрагент <> СтрокаТоваров.ЗаказПокупателя.Контрагент Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Строка <%1>: Контрагент заказа не соответствует контрагенту документа.'"),
						СокрЛП(СтрокаТоваров.НомерСтроки)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
			
			Если ТипЗнч(СтрокаТоваров.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказВнутренний") Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка <%1>: Вид заказа не соответствует контрагенту.'"),
					СокрЛП(СтрокаТоваров.НомерСтроки)
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
			Иначе
				Если Контрагент <> СтрокаТоваров.ЗаказПокупателя.ПодразделениеПолучатель Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Строка <%1>: Контрагент заказа не соответствует контрагенту документа.'"),
						СокрЛП(СтрокаТоваров.НомерСтроки)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по табличной части товаров
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокументТовары.ЗаказПокупателя КАК Заказ,
	|	ДокументТовары.МестоРазмещения КАК СкладКомпании,
	|	(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Резерв
	|ИЗ
	|	Документ.СнятиеРезервовЗаказовПокупателя.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка=&Ссылка
	|	И ДокументТовары.Количество>0
	|");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	
	// Снимаем резервы по заказам в табличной части документа (если таковые были).
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейЗаказыПокупателей.Заказ = Неопределено;
	НаборЗаписейЗаказыПокупателей.Заказывать = КорректировкаЗаказа;
	НаборЗаписейЗаказыПокупателей.СкладКомпании = Неопределено;
	Отказ = НЕ НаборЗаписейЗаказыПокупателей.СнятиеРезервовЗаказовПокупателей() ИЛИ Отказ;
		
	Если КорректировкаЗаказа Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПокупателя КАК Заказ,
		|	ДокументТовары.ЗаказПокупателя.СкладКомпании КАК СкладЗаказа,
		|	СУММА(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Количество
		|ИЗ
		|	Документ.СнятиеРезервовЗаказовПокупателя.Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПокупателя
		|";
		
		// Снимаем резервы по заказам (если таковые были)
		НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
		НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
		НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Запрос.Выполнить();
		НаборЗаписейЗаказыПокупателей.Заказ = Неопределено;
		НаборЗаписейЗаказыПокупателей.ВидОперации = Перечисления.ВидыОперацийЗаказов.КорректировкаЗаказа;
		НаборЗаписейЗаказыПокупателей.СкладКомпании = Неопределено;
		Отказ = НЕ НаборЗаписейЗаказыПокупателей.КорректировкаСписаниемЗаказаПокупателя() ИЛИ Отказ;
		
	КонецЕсли;
	
	// Корректировка резервирования товаров на складе
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейОстатки.СкладКомпании = Неопределено;
	НаборЗаписейОстатки.Приходовать = Ложь;
	НаборЗаписейОстатки.ДвиженияПоРознице = Ложь;
	НаборЗаписейОстатки.Резервировать = Истина;
	Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	Документы.СнятиеРезервовЗаказовПокупателя.СкорректироватьТабличнуюЧастьПриЗаполнении(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент  = ДанныеЗаполнения.ПодразделениеПолучатель;
	ХозОперация = Справочники.ХозОперации.СнятиеРезерваВнутреннего;
	
	Документы.СнятиеРезервовЗаказовПокупателя.СкорректироватьТабличнуюЧастьПриЗаполнении(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Заказ-наряд находится в состоянии ""Заявка"". Вводить заказы на основании заказ-нарядов в состоянии ""Заявка"" запрещено.'")
		);
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Контрагент          = ДанныеЗаполнения.Контрагент;
	ХозОперация         = Справочники.ХозОперации.СнятиеРезерваПокупателя;
	КорректировкаЗаказа = Ложь;
	
	ОснованиеСводногоРемонтногоЗаказа = ДанныеЗаполнения.СводныйРемонтныйЗаказ.ДокументОснование;
	
	// фильтр по заказу
	ДопОтбор = "";
	ОснованиеЗН = ДанныеЗаполнения.ДокументОснование;
	Если ТипЗнч(ОснованиеЗН) = Тип("ДокументСсылка.ЗаказПокупателя") И ЗначениеЗаполнено(ОснованиеЗН) Тогда
		ДопОтбор = " ИЛИ Заказ = &ЗаказОснование";
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеСводногоРемонтногоЗаказа) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(ОснованиеСводногоРемонтногоЗаказа) Тогда
		ДопОтбор = " ИЛИ Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа";
	КонецЕсли;
	
	Товары.Очистить();
	// А теперь откорректируем ТЧ на предмет того, что в ней должны остаться только текущие резервы.
	РазрешениеСнятияРезервов = ПраваИНастройкиПользователя.Значение("РазрешениеСнятияРезервов", ЭтотОбъект);
	Если НЕ РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Запрещено Тогда
		ИмяРезерва = ?(РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Разрешено,
			"РезервОстаток",
			"РезервСвободныйОстаток"
		);
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.СкладКомпании КАК МестоРазмещения,
		|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки."+ИмяРезерва+", 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент,Заказ.ДокументОснование = &ЗаказНаряд"
		+ ДопОтбор + ") КАК ЗаказыПокупателейОстатки
		|";
		Запрос.УстановитьПараметр("НаМомент",                          ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ЗаказНаряд",                        ДокументОснование);
		Запрос.УстановитьПараметр("ЗаказОснование",                    ОснованиеЗН);
		Запрос.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", ОснованиеСводногоРемонтногоЗаказа);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
		
		Если ДополнительныеСвойства.Свойство("ТоварыИМатериалы") И ДополнительныеСвойства.ТоварыИМатериалы.Количество() Тогда	
			ТаблицаТоваров = ДополнительныеСвойства.ТоварыИМатериалы.Товары;
			
			Для Каждого Элемент Из ТаблицаТоваров Цикл
				НайденнаяСтрока = РезультатЗапроса.Найти(Элемент.Значение, "Номенклатура");
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			КонецЦикла;
		Иначе
			Товары.Загрузить(РезультатЗапроса);
		КонецЕсли;
		
		Для Каждого СтрокаТоваров Из Товары Цикл
			Документы.СнятиеРезервовЗаказовПокупателя.ТоварыНоменклатураПриИзменении(
				ЭтотОбъект,
				СтрокаТоваров,
				ДополнительныеСвойства.ПараметрыДействия
			);
		КонецЦикла;
	КонецЕсли;
	
	Основание = Неопределено;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент          = ДанныеЗаполнения.Контрагент;
	ХозОперация         = Справочники.ХозОперации.СнятиеРезерваПокупателя;
	КорректировкаЗаказа = Ложь;
	
	Товары.Очистить();
	// А теперь откорректируем ТЧ на предмет того, что в ней должны остаться только текущие резервы.
	РазрешениеСнятияРезервов = ПраваИНастройкиПользователя.Значение("РазрешениеСнятияРезервов", ЭтотОбъект);
	Если НЕ РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Запрещено Тогда
		ИмяРезерва = ?(РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Разрешено,
			"РезервОстаток",
			"РезервСвободныйОстаток"
		);
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.СкладКомпании КАК МестоРазмещения,
		|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки."+ИмяРезерва+", 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент,Заказ.ДокументОснование = &ЗаявкаНаРемонт) КАК ЗаказыПокупателейОстатки
		|";
		Запрос.УстановитьПараметр("НаМомент",       ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ЗаявкаНаРемонт", ДокументОснование);
		
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		Для Каждого СтрокаТоваров Из Товары Цикл
			Документы.СнятиеРезервовЗаказовПокупателя.ТоварыНоменклатураПриИзменении(
				ЭтотОбъект,
				СтрокаТоваров,
				ДополнительныеСвойства.ПараметрыДействия
			);
		КонецЦикла;
	КонецЕсли;
	
	Основание = Неопределено;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРемонт()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
