// Модуль документа "План поступления ДС"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
		УстановитьПривилегированныйРежим(Истина);
	
	// Присвоим тип данных Касс или Банковских счетов в зависимости от хоз операции.
	Если ХозОперация = Справочники.ХозОперации.ПланПоступленияВКассу Тогда
		СтруктурнаяЕдиница = Новый(Тип("СправочникСсылка.КассыКомпании"));
	Иначе
		СтруктурнаяЕдиница = Новый(Тип("СправочникСсылка.БанковскиеСчета"));
		СтруктурнаяЕдиница = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Организация);
	КонецЕсли;
	
	Сделка = ДокументОснование;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтруктурнаяЕдиница = ПроверяемыеРеквизиты.Найти("СтруктурнаяЕдиница");
	ПроверяемыеРеквизиты.Удалить(ИндексСтруктурнаяЕдиница);

	// Запретим запись с невыбранным сценарием планирования
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбрана валюта планируемого поступления денежных средств.'"),ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран банковский счет планируемого поступления денежных средств.'"),ЭтотОбъект,,,Отказ);
		ИначеЕсли ВалютаДокумента <> СтруктурнаяЕдиница.ВалютаДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Валюта документа (<%1>) не соответствует валюте банковского счета (<%2>).'"),
					ВалютаДокумента,
					СтруктурнаяЕдиница.ВалютаДенежныхСредств
				),
				ЭтотОбъект,
				,, Отказ
			);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбрана касса планируемого поступления денежных средств.'"),ЭтотОбъект,,,Отказ);
		ИначеЕсли НЕ СтруктурнаяЕдиница.МноговалютнаяКасса И ВалютаДокумента <> СтруктурнаяЕдиница.ВалютаДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Валюта документа (<%1>) не соответствует валюте кассы компании (<%2>).'"),
					ВалютаДокумента,
					СтруктурнаяЕдиница.ВалютаДенежныхСредств
				),
				ЭтотОбъект,
				,, Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если не заполнен Договор Взаимозачетов, уберем проверку Валюты и Курса Взаиморасчета.
	Если НЕ ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("ВалютаВзаиморасчетов");
		Если НЕ ИндексЭлемента=Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("КурсВалютыВзаиморасчетов");
		Если НЕ ИндексЭлемента=Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Собственно само проведение
	НаборЗаписей = Движения.ПлатежныйКалендарь;
	НаборЗаписей.ДокументОбъект = Ссылка;
	НаборЗаписей.Поступление	= Истина;
	
	Отказ = Не НаборЗаписей.План();
	
	// если модифицировали документ, то запишем его
	Если НЕ Отказ И Модифицированность() Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктурнаяЕдиница 	= ДанныеЗаполнения.РасчетныйСчетОрганизации;
	СтатьяДДС 			= Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж 			= Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            	= ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов 	= ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплату()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж 			= Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗаказыПокупателей.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.Период <= &Момент
	|	И НЕ ЗаказыПокупателей.Регистратор ССЫЛКА Документ.РеализацияТоваров
	|	И ЗаказыПокупателей.Контрагент = &Контрагент
	|	И ЗаказыПокупателей.Заказ = &Заказ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", КонецДня(Дата));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СуммаЗаказа = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Иначе
		СуммаЗаказа = 0;
	КонецЕсли;

	НовыйПлатеж.Сумма = СуммаЗаказа;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж 			= Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	
	НовыйПлатеж.Сумма = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;

КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Счет на оплату за автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по счету от поставщика
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
