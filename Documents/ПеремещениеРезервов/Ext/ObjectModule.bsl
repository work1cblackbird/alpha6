// Модуль документа "Перемещение резервов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Процедура - обработчик ввода на основании
// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		// А теперь откорректируем ТЧ на предмет того, что в ней должны остаться только текущие резервы.
		Товары.Очистить();
		РазрешениеСнятияРезервов = ПраваИНастройкиПользователя.Значение("РазрешениеСнятияРезервов", ЭтотОбъект);
		
		Если НЕ РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Запрещено Тогда
			
			ИмяРезерва = ?(РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Разрешено, "РезервОстаток", "РезервСвободныйОстаток");
			Запрос = Новый Запрос;
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
			|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
			|ГДЕ
			|	(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток) > 0";
			
			Запрос.УстановитьПараметр("НаМомент", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("Заказ",    ДанныеЗаполнения);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока 				= Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Документы.ПеремещениеРезервов.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
				
				Если НЕ НоваяСтрока.Коэффициент = 0 И НЕ НоваяСтрока.Коэффициент = 1 Тогда
					НоваяСтрока.Количество 	= НоваяСтрока.Количество/НоваяСтрока.Коэффициент;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по табличной части товаров
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокументТовары.ЗаказПокупателя КАК Заказ,
	|	ДокументТовары.Ссылка.Контрагент КАК Контрагент,
	|	ДокументТовары.МестоРазмещения КАК СкладКомпании,
	|	(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Резерв
	|ИЗ
	|	Документ.ПеремещениеРезервов.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка=&Ссылка
	|	И ДокументТовары.Количество>0
	|");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// Снимаем резервы по заказам (если таковые были)
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения           = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейЗаказыПокупателей.Заказ                     = Неопределено;
	НаборЗаписейЗаказыПокупателей.Заказывать                = КорректировкаЗаказа;
	НаборЗаписейЗаказыПокупателей.СкладКомпании             = Неопределено;
	Отказ = НЕ НаборЗаписейЗаказыПокупателей.СнятиеРезервовЗаказовПокупателей() ИЛИ Отказ;
	
	Если КорректировкаЗаказа Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПокупателя КАК Заказ,
		|	ДокументТовары.ЗаказПокупателя.СкладКомпании КАК СкладЗаказа,
		|	СУММА(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Количество
		|ИЗ
		|	Документ.ПеремещениеРезервов.Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПокупателя
		|";
		
		// Снимаем резервы по заказам (если таковые были)
		НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
		НаборЗаписейЗаказыПокупателей.РежимПроведения           = РежимПроведения;
		НаборЗаписейЗаказыПокупателей.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Запрос.Выполнить();
		НаборЗаписейЗаказыПокупателей.Заказ                     = Неопределено;
		НаборЗаписейЗаказыПокупателей.ВидОперации               = Перечисления.ВидыОперацийЗаказов.КорректировкаЗаказа;
		НаборЗаписейЗаказыПокупателей.СкладКомпании             = Неопределено;
		Отказ = НЕ НаборЗаписейЗаказыПокупателей.КорректировкаСписаниемЗаказаПокупателя() ИЛИ Отказ;
	КонецЕсли;
	
	// Резервирование товаров по заказам покупателей
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения           = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейЗаказыПокупателей.Контрагент                = Контрагент;
	НаборЗаписейЗаказыПокупателей.Заказ                     = ДокументОснование;
	НаборЗаписейЗаказыПокупателей.СкладКомпании             = Неопределено;
	НаборЗаписейЗаказыПокупателей.Заказывать                = Ложь;
	НаборЗаписейЗаказыПокупателей.Резервировать             = Истина;
	НаборЗаписейЗаказыПокупателей.ПоБазовомуКоличеству      = Истина;
	Отказ = НЕ НаборЗаписейЗаказыПокупателей.Приход() ИЛИ Отказ;
	
	// Снимаем распределение заказов покупателя
	Если НЕ Отказ Тогда
		РезультатЗапросаПоТоварам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Резерв");
		Запрос=Новый Запрос;
		Запрос.Текст="
		|ВЫБРАТЬ
		|	РезультатЗакрытияЗаказов.Номенклатура КАК Номенклатура,
		|	РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РезультатЗакрытияЗаказов.Резерв
		|ПОМЕСТИТЬ
		|	РезультатЗакрытияЗаказов
		|ИЗ
		|	&РезультатЗакрытияЗаказов КАК РезультатЗакрытияЗаказов
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РезультатЗакрытияЗаказов.Номенклатура КАК Номенклатура,
		|	РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	((ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток,0)
		|		 - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток,0))
		|		 - РезультатЗакрытияЗаказов.Резерв)
		|	 - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток,0) КАК Количество
		|ИЗ
		|	РезультатЗакрытияЗаказов КАК РезультатЗакрытияЗаказов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент,
		|		Заказ = &Заказ
		|		И Номенклатура В (&Номенклатура)
		|		И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
		|	) КАК ЗаказыПокупателейОстатки
		|ПО
		|	РезультатЗакрытияЗаказов.Номенклатура               = ЗаказыПокупателейОстатки.Номенклатура
		|	И РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыРаспределение.Остатки(&НаМомент,
		|		ЗаказПокупателя = &Заказ
		|		И Номенклатура В (&Номенклатура)
		|		И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
		|	) КАК ЗаказыРаспределениеОстатки
		|ПО
		|	РезультатЗакрытияЗаказов.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
		|	И РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
		|";
		
		Запрос.УстановитьПараметр("НаМомент",                   МоментВремени());
		Запрос.УстановитьПараметр("Заказ",                      ДокументОснование);
		Запрос.УстановитьПараметр("Номенклатура",               РезультатЗапросаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", РезультатЗапросаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		Запрос.УстановитьПараметр("РезультатЗакрытияЗаказов",   РезультатЗапросаПоТоварам);
		
		НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
		НаборЗаписейРаспределениеЗаказов.РежимПроведения                  = РежимПроведения;
		НаборЗаписейРаспределениеЗаказов.ДокументОбъект                   = ЭтотОбъект;
		НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам        = Запрос.Выполнить().Выгрузить();
		НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя                  = ДокументОснование;
		НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика                  = Неопределено;
		НаборЗаписейРаспределениеЗаказов.Контрагент                       = Контрагент;
		НаборЗаписейРаспределениеЗаказов.ПоБазовомуКоличеству             = Истина;
		НаборЗаписейРаспределениеЗаказов.ПорядокЗакрытияЗаказовПоставщику = "ЗаказыРаспределениеОстатки.ЗаказПокупателя.Дата ВОЗР";
		Отказ=НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
		
	КонецЕсли;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьРезервамиПоЗаказу(Заказ)
	
	Товары.Очистить();
	
	// проверим возможность снятия резервов
	РазрешениеСнятияРезервов = ПраваИНастройкиПользователя.Значение("РазрешениеСнятияРезервов", ЭтотОбъект);
	Если РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Запрещено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаМомент", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаМомент, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	(ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток) > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Документы.ПеремещениеРезервов.ТоварыНоменклатураПриИзменении(
			ЭтотОбъект,
			НоваяСтрока,
			ДополнительныеСвойства.ПараметрыДействия);
		
		Если НЕ НоваяСтрока.Коэффициент = 0 И НЕ НоваяСтрока.Коэффициент = 1 Тогда
			НоваяСтрока.Количество 	= НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	ЗаполнитьРезервамиПоЗаказу(ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.ПодразделениеПолучатель;
	
	ЗаполнитьРезервамиПоЗаказу(ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
