// Модуль менеджера документа "Перемещение денежных средств"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.  
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И (ЗначениеРазрешено(КассаКомпанииОтправитель)
		|	Или ЗначениеРазрешено(КассаКомпанииПолучатель));
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ЗначениеРазрешено(КассаКомпанииОтправитель)
		|	И ЗначениеРазрешено(КассаКомпанииПолучатель)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

  #Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Установка банковского счета в соответствии с организацией
//
Процедура УстановитьБанковскийСчет(Объект, ПараметрыДействия)
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеДенежныхСредствНаРасчетныйСчет Тогда
		
		Если Объект.КассаКомпанииПолучатель.Пустая() Тогда
			Объект.КассаКомпанииПолучатель = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
		Иначе
			Результат = ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(
				Объект.КассаКомпанииПолучатель,
				Объект.Организация,
				Объект.ПодразделениеКомпании
			);
			Если НЕ Результат Тогда
				Объект.КассаКомпанииПолучатель = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
				КассаКомпанииПолучательПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Результат = ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(
			Объект.КассаКомпанииОтправитель,
			Объект.Организация,
			Объект.ПодразделениеКомпании
		);
		Если НЕ Результат Тогда
			Объект.КассаКомпанииОтправитель = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
			КассаКомпанииОтправительПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		Результат = ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(
			Объект.КассаКомпанииПолучатель,
			Объект.Организация, Объект.ПодразделениеКомпании);
		Если НЕ Результат Тогда
			Объект.КассаКомпанииПолучатель = Справочники.БанковскиеСчета.ПустаяСсылка();
			КассаКомпанииПолучательПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьБанковскийСчет()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,СтрНайти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

Функция ПолучитьНомерДляПечати(Документ);
	
	СтрНомер = СокрЛП(Документ.Номер);
	Длина    = СтрДлина(СтрНомер);
	ЧисловойНомер = "";
	Для ин=1 По Длина Цикл
		Символ = Сред(СтрНомер,Длина-ин+1,1);
		Если СтрНайти("0123456789", Символ) Тогда
			ЧисловойНомер = Символ + ЧисловойНомер;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// удаление ведущих нулей
	Пока Лев(ЧисловойНомер, 1)="0" Цикл
		ЧисловойНомер = Сред(ЧисловойНомер, 2);
	КонецЦикла;
	
	Возврат ЧисловойНомер;
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("КассаКомпанииОтправитель");
	ОбязательныеРеквизиты.Добавить("КассаКомпанииПолучатель");
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СуммаДокумента");
	ОбязательныеРеквизиты.Добавить("СтатьяДДС");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	КонтролируемыеРеквизиты.Вставить(
		"КассаКомпанииОтправитель",
		ТипЗнч(Объект.КассаКомпанииОтправитель) = Тип("СправочникСсылка.БанковскиеСчета")
	);
	КонтролируемыеРеквизиты.Вставить("КассаКомпанииПолучатель");
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	// Присвоим тип данных Касс или Банковских счетов в зависимости от хоз операции.
	Если Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеДенежныхСредств Тогда
		Объект.КассаКомпанииОтправитель = Новый(Тип("СправочникСсылка.КассыКомпании"));
		Объект.КассаКомпанииПолучатель = Новый(Тип("СправочникСсылка.КассыКомпании"));
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеДенежныхСредствНаРасчетныйСчет Тогда
		Объект.КассаКомпанииОтправитель = Новый(Тип("СправочникСсылка.КассыКомпании"));
		Объект.КассаКомпанииПолучатель = Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	Иначе
		Объект.КассаКомпанииОтправитель = Новый(Тип("СправочникСсылка.БанковскиеСчета"));
		Объект.КассаКомпанииПолучатель = Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	КонецЕсли;

КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса-отправитель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаКомпанииОтправительПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	КассаКомпанииОтправитель = Объект.КассаКомпанииОтправитель;
	КассаКомпанииПолучатель  = Объект.КассаКомпанииПолучатель;
	ВалютаДокумента          = Объект.ВалютаДокумента;
	
	Если НЕ ЗначениеЗаполнено(КассаКомпанииОтправитель)Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(КассаКомпанииОтправитель) = Тип("СправочникСсылка.КассыКомпании") Тогда
		
		Если КассаКомпанииОтправитель.МноговалютнаяКасса Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Объект.ВалютаДокумента = КассаКомпанииОтправитель.ВалютаДенежныхСредств;
	ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КассаКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса-получатель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаКомпанииПолучательПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	КассаКомпанииОтправитель = Объект.КассаКомпанииОтправитель;
	КассаКомпанииПолучатель  = Объект.КассаКомпанииПолучатель;
	ВалютаДокумента          = Объект.ВалютаДокумента;

	Если НЕ ЗначениеЗаполнено(КассаКомпанииПолучатель)Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КассаКомпанииПолучатель) = Тип("СправочникСсылка.КассыКомпании") Тогда
		
	ИначеЕсли ТипЗнч(КассаКомпанииПолучатель) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) В (ТИП(Справочник.Организации), ТИП(Справочник.ПодразделенияКомпании))";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		РасчетныйСчетОрганизаций = Новый Массив;
		РасчетныйСчетОрганизаций = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
		ПроверкаСчета = РасчетныйСчетОрганизаций.Найти(КассаКомпанииПолучатель);
		Если ПроверкаСчета = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расчетный счет <%1> не относится к организации или подразделению.'"),
				КассаКомпанииПолучатель
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КассаКомпанииПолучатель", "Объект");
			Объект.КассаКомпанииПолучатель = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КассаКомпанииПолучательПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтатьяДДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СтатьяДДСПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ПеремещениеДенежныхСредств",
		"ПФ_MXL_ПеремещениеДенежныхСредств",
		НСтр("ru = 'Перемещение денежных средств'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ПеремещениеДенежныхСредств",
		"ПФ_MXL_ПеремещениеДенежныхСредствНаРасчетныйСчет",
		НСтр("ru = 'Перемещение денежных средств на расчетный счет'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ПеремещениеДенежныхСредств",
		"ПФ_MXL_ПлатежноеПоручение",
		НСтр("ru = 'Перемещение денежных средств между расчетными счетами'"),
		СсылкаНаДокумент
	);	
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПеремещениеДенежныхСредств") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПеремещениеДенежныхСредств",
			НСтр("ru = 'Перемещение денежных средств'"),
			ПечатьПеремещениеДенежныхСредств(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПеремещениеДенежныхСредствНаРасчетныйСчет") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПеремещениеДенежныхСредствНаРасчетныйСчет",
			НСтр("ru = 'Перемещение денежных средств на расчетный счет'"),
			ПечатьРасходныйКассовыйОрдер(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПлатежноеПоручение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПлатежноеПоручение",
			НСтр("ru = 'Перемещение денежных средств между расчетными счетами'"),
			ПечатьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Перемещение денежных средств на расчетный счет"
// 
Функция ПечатьРасходныйКассовыйОрдер(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеДенежныхСредств_ПеремещениеДенежныхСредствНаРасчетныйСчет";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеДенежныхСредств.ПФ_MXL_ПеремещениеДенежныхСредствНаРасчетныйСчет");
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Если Не Документ.ХозОперация = Справочники.ХозОперации.ПеремещениеДенежныхСредствНаРасчетныйСчет Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Печать <Перемещение денежных средств на расчетный счет> не разрешена для хозяйственной операции <'") + Документ.ХозОперация.Наименование + ">");
		Иначе
		
			// Получаем область шапки документа
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Документ);
			ОбластьМакета.Параметры.СуммаДокумента = Формат(Документ.СуммаДокумента,ФорматВыводаСуммы);
			
			ОбластьМакета.Параметры.ОрганизацияПоОКПО	= Документ.Организация.КодПоОКПО;
			ОбластьМакета.Параметры.КодПодразделения	= Документ.ПодразделениеКомпании.Код;
			
			ОбластьМакета.Параметры.КредитСубСчет		= ?(Документ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),"50.1","50.2");
			ОбластьМакета.Параметры.ДебетСубСчет		= Документ.СтатьяДДС.КоррСчет.Код;

			ОбластьМакета.Параметры.СуммаПрописью		= РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаДокумента, Документ.ВалютаДокумента);
		
			Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, Перечисления.ВидыОбъектовСведений.Руководитель);
			ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер);
			Кассир = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, Перечисления.ВидыОбъектовСведений.Кассир);
			ОбластьМакета.Параметры.Заполнить(Руководитель);
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			ОбластьМакета.Параметры.Заполнить(Кассир);
			
			ОбластьМакета.Параметры.Номер = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
			ОбластьМакета.Параметры.Подразделение = Документ.ПодразделениеКомпании;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// отметим конец области документа
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРасходныйКассовыйОрдер()

// Формирует печатную форму "Перемещение денежных средств"
// 
Функция ПечатьПеремещениеДенежныхСредств(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеДенежныхСредств_ПеремещениеДенежныхСредств";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеДенежныхСредств.ПФ_MXL_ПеремещениеДенежныхСредств");
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Если Не Документ.ХозОперация = Справочники.ХозОперации.ПеремещениеДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Печать <Перемещение денежных средств> не разрешена для хозяйственной операции <'")
					+ Документ.ХозОперация.Наименование + ">"
			);
		Иначе
		
			// Получаем область шапки документа
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаДокумента");
			ОбластьМакета.Параметры.Заполнить(Документ);
			ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
			ОбластьМакета.Параметры.ТекстЗаголовка	= ТекстЗаголовка;
			ОбластьМакета.Параметры.КассаКомпании = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.КассаКомпанииОтправитель);
			ОбластьМакета.Параметры.КассаПолучатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.КассаКомпанииПолучатель);
			
			// Получим остаток
			СтруктураОтбораДляКассыКомпании	            = Новый Структура("Валюта, СтруктурнаяЕдиница", Документ.ВалютаДокумента, Документ.КассаКомпанииОтправитель);
			СтруктураОтбораДляКассыКомпанииПолучателя	= Новый Структура("Валюта, СтруктурнаяЕдиница", Документ.ВалютаДокумента, Документ.КассаКомпанииПолучатель);
			ОстатокКомпании			                    = РегистрыНакопления.ДенежныеСредстваКомпании.Остатки(, СтруктураОтбораДляКассыКомпании,, "Сумма").Итог("Сумма");
			ОстатокКомпанииПолучателя			        = РегистрыНакопления.ДенежныеСредстваКомпании.Остатки(, СтруктураОтбораДляКассыКомпанииПолучателя,, "Сумма").Итог("Сумма");
			
			ОбластьМакета.Параметры.ОстатокВКассеКомпании           = Формат(ОстатокКомпании, "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + СокрЛП(Документ.ВалютаДокумента.Наименование);
			ОбластьМакета.Параметры.ОстатокВКассеКомпанииПолучателя = Формат(ОстатокКомпанииПолучателя, "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + СокрЛП(Документ.ВалютаДокумента.Наименование);
			
			ОбластьМакета.Параметры.Сумма       = Формат(Документ.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + СокрЛП(Документ.ВалютаДокумента.Наименование);
			ОбластьМакета.Параметры.СтатьяДДС   = Документ.СтатьяДДС.Наименование;
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаДокумента,Документ.ВалютаДокумента);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);

			// отметим конец области документа
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПеремещениеДенежныхСредств()

 // Формирует печатную форму "ПлатежноеПоручениеИсх"

Функция ПечатьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		Если Не Документ.ХозОперация = 
			       Справочники.ХозОперации.ПеремещениеДенежныхСредствМеждуРасчетнымиСчетамиОрганизации Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Печать <Перемещение денежных средств между расчетными счетами> не разрешена для хозяйственной операции <'")
					+ Документ.ХозОперация.Наименование + ">"
			);
		Иначе

		// проверка заполнения
		Если Документ.Организация.Пустая() Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана организация.'"));
			Возврат Неопределено;
		КонецЕсли;
	
		НомерПечать = ПолучитьНомерДляПечати(Документ);
	
		Если Прав(НомерПечать,3)="000" Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Номер платежного поручения не может оканчиваться на ""000"".'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеДенежныхСредств.ПФ_MXL_ПлатежноеПоручение");
		
		ОбластьЗаголовок       	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		МесяцПрописью	= Документ.КассаКомпанииОтправитель.МесяцПрописью;
		СуммаБезКопеек	= Документ.КассаКомпанииОтправитель.СуммаБезКопеек;

		ФорматДаты		= "ДФ=" + ?(МесяцПрописью = 1, НСтр("ru = ''дд ММММ гггг''"),"'дд.ММ.гггг'");
		БанкОрганизации	= Документ.КассаКомпанииОтправитель.Банк;
		БанкКонтрагента	= Документ.КассаКомпанииПолучатель.Банк;
		
		ОбластьЗаголовок.Параметры.НаименованиеНомер	= "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № "+ НомерПечать;
		ОбластьЗаголовок.Параметры.ДатаДокумента		= Формат(Документ.Дата,ФорматДаты);
		ОбластьЗаголовок.Параметры.ВидПлатежа			= "Не указывать";
		ОбластьЗаголовок.Параметры.СуммаЧислом			= ФорматироватьСумму(Документ.СуммаДокумента,СуммаБезКопеек);
		ОбластьЗаголовок.Параметры.СуммаПрописью		= РаботаСКурсамиВалют.СформироватьСуммуПрописью(
		                                                        Документ.СуммаДокумента,Документ.ВалютаДокумента);
		
		ОбластьЗаголовок.Параметры.ПлательщикИНН		= "ИНН " + ?(ПустаяСтрока(Документ.КассаКомпанииОтправитель.Владелец.ИНН),
														Документ.Организация.ИНН, 
														Документ.КассаКомпанииОтправитель.Владелец.ИНН);
		
		ОбластьЗаголовок.Параметры.ПлательщикКПП		= "КПП " + ?(ПустаяСтрока(Документ.КассаКомпанииОтправитель.Владелец.КПП),
														Документ.Организация.ИНН, 
														Документ.КассаКомпанииОтправитель.Владелец.КПП);
		
				
		НаименованиеПолноеОрганизации = СокрЛП(РеквизитыСИсторией.ПолучитьНаименованияНаДату
											(Документ.КассаКомпанииОтправитель.Владелец,
												Документ.Дата,
												"НаименованиеДляПечатныхФорм"));
											
		НаименованиеПолноеКонтрагента = СокрЛП(РеквизитыСИсторией.ПолучитьНаименованияНаДату
											(Документ.КассаКомпанииПолучатель.Владелец,
												Документ.Дата,
												"НаименованиеДляПечатныхФорм"));
		                             
		
		ОбластьЗаголовок.Параметры.Плательщик			= НаименованиеПолноеОрганизации;
		ОбластьЗаголовок.Параметры.БанкПлательщика		= "" + БанкОрганизации + " " + БанкОрганизации.Город;
		
		ОбластьЗаголовок.Параметры.НомерСчетаПлательщика	= Документ.КассаКомпанииОтправитель.НомерСчета;
		
		ОбластьЗаголовок.Параметры.БикБанкаПлательщика	= БанкОрганизации.Код;
		ОбластьЗаголовок.Параметры.СчетБанкаПлательщика	= БанкОрганизации.КоррСчет;
		
		ОбластьЗаголовок.Параметры.ПолучательИНН = "ИНН " + 
													?(ПустаяСтрока(Документ.КассаКомпанииПолучатель.Владелец.ИНН),
														Документ.Организация.ИНН, 
														Документ.КассаКомпанииПолучатель.Владелец.ИНН);
		
		
		ОбластьЗаголовок.Параметры.ПолучательКПП		= ?(ПустаяСтрока(Документ.КассаКомпанииПолучатель.Владелец.КПП),
														Документ.Организация.КПП, 
														Документ.КассаКомпанииПолучатель.Владелец.КПП);
		
		ОбластьЗаголовок.Параметры.Получатель			= НаименованиеПолноеКонтрагента;
		
		ОбластьЗаголовок.Параметры.БанкПолучателя		= "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
		ОбластьЗаголовок.Параметры.БикБанкаПолучателя	= БанкКонтрагента.Код;
		ОбластьЗаголовок.Параметры.СчетБанкаПолучателя	= БанкКонтрагента.КоррСчет;
		
		ОбластьЗаголовок.Параметры.НомерСчетаПолучателя	= Документ.КассаКомпанииПолучатель.НомерСчета;
		
		ОбластьЗаголовок.Параметры.НазначениеПлатежа		= "Перевод денежных средств в пределах организации для пополнения" + 
		                                                          " оборотных средств на расчетном счете. НДС не облагается";
		ОбластьЗаголовок.Параметры.Очередность			= "5";
		ОбластьЗаголовок.Параметры.СрокПлатежа			= " ";
		
		ОбластьЗаголовок.Параметры.КодУИН				= "0";
				
			
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		КонецЕсли;
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции //ПечатьПлатежноеПоручение()


#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПеремещениеДенежныхСредств);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли