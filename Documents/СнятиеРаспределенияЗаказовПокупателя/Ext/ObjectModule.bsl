// Модуль документа "Снятие распределения заказов покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения табличной части
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		Если ТипЗнч(Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
			Если ТипЗнч(СтрокаТоваров.ЗаказПоставщика)<>Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка <%1>: Вид заказа не соответствует контрагенту.'"),СокрЛП(СтрокаТоваров.НомерСтроки)
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Иначе
				Если Контрагент<>СтрокаТоваров.ЗаказПоставщика.Контрагент Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Строка <%1>: Контрагент заказа не соответствует контрагенту документа.'"),СокрЛП(СтрокаТоваров.НомерСтроки)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Контрагент)=Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
			Если ТипЗнч(СтрокаТоваров.ЗаказПоставщика)<>Тип("ДокументСсылка.ЗаказВнутренний") Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка <%1>: Вид заказа не соответствует контрагенту.'"),СокрЛП(СтрокаТоваров.НомерСтроки)
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Иначе
				Если Контрагент<>СтрокаТоваров.ЗаказПоставщика.ПодразделениеПолучатель Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Строка <%1>: Контрагент заказа не соответствует контрагенту документа.'"),СокрЛП(СтрокаТоваров.НомерСтроки)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
	НаборЗаписейРаспределениеЗаказов.РежимПроведения           = РежимПроведения;
	НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейРаспределениеЗаказов.ДокументОбъект            = ЭтотОбъект;
	Отказ = НЕ НаборЗаписейРаспределениеЗаказов.СнятиеРаспределения() ИЛИ Отказ;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Если КорректировкаЗаказа Тогда
		
		Если ХозОперация = Справочники.ХозОперации.СнятиеРаспределенияПоставщика Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументТовары.Номенклатура КАК Номенклатура,
			|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ДокументТовары.ЗаказПоставщика КАК ЗаказПоставщику,
			|	СУММА(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Количество
			|ИЗ
			|	Документ.СнятиеРаспределенияЗаказовПокупателя.Товары КАК ДокументТовары
			|ГДЕ
			|	ДокументТовары.Ссылка=&Ссылка
			|	И ДокументТовары.Количество>0
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.ХарактеристикаНоменклатуры,
			|	ДокументТовары.ЗаказПоставщика
			|";
			
			// Снимаем резервы по заказам (если таковые были)
			НаборЗаписейЗаказыПоставщикам = Движения.ЗаказыПоставщикам;
			НаборЗаписейЗаказыПоставщикам.РежимПроведения           = РежимПроведения;
			НаборЗаписейЗаказыПоставщикам.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейЗаказыПоставщикам.РезультатЗапросаПоТоварам = Запрос.Выполнить();
			НаборЗаписейЗаказыПоставщикам.ЗаказПоставщику           = Неопределено;
			Отказ = НЕ НаборЗаписейЗаказыПоставщикам.КорректировкаСписаниемЗаказаПоставщика() ИЛИ Отказ;
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументТовары.Номенклатура КАК Номенклатура,
			|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ДокументТовары.ЗаказПоставщика КАК Заказ,
			|	ДокументТовары.ЗаказПоставщика.СкладКомпании КАК СкладЗаказа,
			|	СУММА(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Количество
			|ИЗ
			|	Документ.СнятиеРаспределенияЗаказовПокупателя.Товары КАК ДокументТовары
			|ГДЕ
			|	ДокументТовары.Ссылка = &Ссылка
			|	И ДокументТовары.Количество>0
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.ХарактеристикаНоменклатуры,
			|	ДокументТовары.ЗаказПоставщика
			|";
			
			// Снимаем резервы по заказам (если таковые были)
			НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
			НаборЗаписейЗаказыПокупателей.РежимПроведения           = РежимПроведения;
			НаборЗаписейЗаказыПокупателей.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Запрос.Выполнить();
			НаборЗаписейЗаказыПокупателей.Заказ                     = Неопределено;
			НаборЗаписейЗаказыПокупателей.ВидОперации               = Перечисления.ВидыОперацийЗаказов.КорректировкаЗаказа;
			НаборЗаписейЗаказыПокупателей.СкладКомпании             = Неопределено;
			Отказ = НЕ НаборЗаписейЗаказыПокупателей.КорректировкаСписаниемЗаказаПокупателя() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании справочника "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент  = ДанныеЗаполнения;
	ХозОперация = Справочники.ХозОперации.СнятиеРаспределенияПоставщика;
	
	Документы.СнятиеРаспределенияЗаказовПокупателя.ЗаполнитьТабличнуюЧасть(ЭтотОбъект,ДанныеЗаполнения);

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Контрагенты()

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент  = ДанныеЗаполнения.Контрагент;
	ХозОперация = Справочники.ХозОперации.СнятиеРаспределенияПоставщика;
	
	Документы.СнятиеРаспределенияЗаказовПокупателя.ЗаполнитьТабличнуюЧасть(ЭтотОбъект, ДанныеЗаполнения);

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент  = Справочники.Контрагенты.ПустаяСсылка();
	ХозОперация = Справочники.ХозОперации.СнятиеРаспределенияПоставщика;
	
	Документы.СнятиеРаспределенияЗаказовПокупателя.ЗаполнитьТабличнуюЧасть(ЭтотОбъект, ДанныеЗаполнения);

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент  = ДанныеЗаполнения.ПодразделениеПолучатель;
	ХозОперация = Справочники.ХозОперации.СнятиеРаспределенияВнутреннего;
	
	Документы.СнятиеРаспределенияЗаказовПокупателя.ЗаполнитьТабличнуюЧасть(ЭтотОбъект, ДанныеЗаполнения);

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
