// Модуль документа "Отчет комитенту"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	ЭтоРеализацияАгентскихУслуг	= ЗначениеЗаполнено(ДанныеЗаполнения) И (ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") И ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Контрагенты")) 
								И ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг;
	// Необходимо указать соответствующую хоз. операцию для корректного
	// заполнения договора из основания.
	Если (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров"))
		И (ЗначениеЗаполнено(ДанныеЗаполнения))
		И (ЭтоРеализацияАгентскихУслуг) Тогда
		ХозОперация				= Справочники.ХозОперации.ОтчетАгента;
		Контрагент				= ДанныеЗаполнения.Комитент;
		ДоговорВзаиморасчетов	= ДанныеЗаполнения.ДоговорКомитента;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ДанныеЗаполнения))
		И (ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		И ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Контрагенты"))
		И (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия
			ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию
			ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхИПроданных) Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ДокументПоступления = ДанныеЗаполнения;
		КонецЦикла;
		
	ИначеЕсли (ЗначениеЗаполнено(ДанныеЗаполнения)) И (ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") И ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Контрагенты")) И (ЭтоРеализацияАгентскихУслуг) Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ДокументРеализации = ДанныеЗаполнения;
		КонецЦикла;	
		
	КонецЕсли;
	
	// посчитаем вознаграждение
	Для Каждого СтрокаТЧ Из Товары Цикл
		Документы.ОтчетКомитенту.УстановитьВознаграждение(ЭтотОбъект, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим договор документов поступления, он должен совпадать с договором шапки
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ХозОперация = Справочники.ХозОперации.ОтчетАгента Тогда
			ДокументДляПроверки			= СтрокаТовар.ДокументРеализации;
			Если ЗначениеЗаполнено(ДокументДляПроверки) Тогда
				ДоговорДокументаПоступления = ДокументДляПроверки.ДоговорКомитента;
			КонецЕсли;
			ТекстТипаДокумента	= "реализации";
		Иначе
			ДокументДляПроверки			= СтрокаТовар.ДокументПоступления;
			Если ЗначениеЗаполнено(ДокументДляПроверки) Тогда
				ДоговорДокументаПоступления = ДокументДляПроверки.ДоговорВзаиморасчетов;
			КонецЕсли;
			ТекстТипаДокумента	= "поступления";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументДляПроверки) Тогда
			
			Если ДоговорДокументаПоступления <> ДоговорВзаиморасчетов Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка <%1>: Договор документов <%2> <%3>  должен быть равен договору в шапке документа.'"),
					СтрокаТовар.НомерСтроки,
					ТекстТипаДокумента, 
					СокрЛП(ДоговорДокументаПоступления.Наименование)
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, СтрокаТовар.НомерСтроки,, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаВознаграждения = Товары.Итог("Вознаграждение");
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	// проведем взаиморасчеты
	НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
	НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
	
	ЭтоОтчетАгента	= (ХозОперация=Справочники.ХозОперации.ОтчетАгента);
	
	ТаблицаТоваров=Товары.Выгрузить();
	Если ЭтоОтчетАгента Тогда
		ТаблицаТоваров.Свернуть("ДокументРеализации,СпособЗачетаАвансов","СуммаВсего,Вознаграждение");
	Иначе	
		ТаблицаТоваров.Свернуть("ДокументПоступления,СпособЗачетаАвансов","СуммаВсего,Вознаграждение");
	КонецЕсли;
	Для каждого СтрокаВзаиморасчетов Из ТаблицаТоваров Цикл
		Если ЭтоОтчетАгента Тогда
			ДокументПоступленияРеализации	= СтрокаВзаиморасчетов.ДокументРеализации;
		Иначе
			ДокументПоступленияРеализации	= СтрокаВзаиморасчетов.ДокументПоступления;
		КонецЕсли;
		
		Если ЕстьРеквизит(ДокументПоступленияРеализации, "ДоговорВзаиморасчетов")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДокументПоступленияРеализации,
				"ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов") = 
				Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
				
				Продолжить;
				
		КонецЕсли;
		
		НаборЗаписейВзаиморасчеты.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения           = РежимПроведения;
		Если ЭтоОтчетАгента Тогда
			НаборЗаписейВзаиморасчеты.Контрагент                = ДокументПоступленияРеализации.Комитент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов     = ДокументПоступленияРеализации.ДоговорКомитента;
		Иначе
			НаборЗаписейВзаиморасчеты.Контрагент                = ДокументПоступленияРеализации.Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов     = ДокументПоступленияРеализации.ДоговорВзаиморасчетов;
		КонецЕсли;	
		НаборЗаписейВзаиморасчеты.Сделка                    = ДокументПоступленияРеализации;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок		= 
			(СтрокаВзаиморасчетов.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
		НаборЗаписейВзаиморасчеты.Сумма                     = СтрокаВзаиморасчетов.СуммаВсего-СтрокаВзаиморасчетов.Вознаграждение;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
	КонецЦикла; 
	
	Документы.ОтчетКомитенту.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ОтчетКомитенту.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// партии
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.РеализацияТоваров
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
		
		Товары.Очистить();
		Запрос			= Новый Запрос;
		Запрос.Текст	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализованныеТовары.Контрагент КАК Контрагент,
		|	РеализованныеТовары.Номенклатура КАК Номенклатура,
		|	РеализованныеТовары.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	РеализованныеТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РеализованныеТовары.ДокументПередачи КАК ДокументПередачи,
		|	РеализованныеТовары.ГТД КАК ГТД,
		|	СУММА(РеализованныеТовары.Количество) КАК Количество,
		|	СУММА(РеализованныеТовары.СуммаПродажи) КАК СуммаПродажи,
		|	СУММА(РеализованныеТовары.СуммаПродажиРегл) КАК СуммаПродажиРегл,
		|	СУММА(РеализованныеТовары.СуммаУпр) КАК СуммаУпр,
		|	СУММА(РеализованныеТовары.СуммаРегл) КАК СуммаРегл,
		|	isnull(РеализацияТоваровТовары.Содержание, """") КАК Содержание
		|ИЗ
		|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|		ПО РеализованныеТовары.Номенклатура = РеализацияТоваровТовары.Номенклатура
		|			И РеализованныеТовары.ХарактеристикаНоменклатуры = РеализацияТоваровТовары.ХарактеристикаНоменклатуры
		|ГДЕ
		|	РеализованныеТовары.Регистратор = &Регистратор
		|	И РеализацияТоваровТовары.Ссылка = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализованныеТовары.ДоговорВзаиморасчетов,
		|	РеализованныеТовары.ДокументПередачи,
		|	РеализованныеТовары.ГТД,
		|	РеализованныеТовары.ХарактеристикаНоменклатуры,
		|	РеализованныеТовары.Номенклатура,
		|	РеализованныеТовары.Номенклатура,
		|	РеализованныеТовары.Контрагент,
		|	РеализацияТоваровТовары.Содержание";
		
		Запрос.УстановитьПараметр("Регистратор", ДанныеЗаполнения);
		РезультатЗапроса	= Запрос.Выполнить();
		Выборка				= РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Контрагент				= Выборка.Контрагент;
			ДоговорВзаиморасчетов	= Выборка.ДоговорВзаиморасчетов;
		КонецЕсли;
		
		ВалютаУпр	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл	= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрокаТоваров								= Товары.Добавить();
			НоваяСтрокаТоваров.Номенклатура					= Выборка.Номенклатура;
			Документы.ОтчетКомитенту.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			НоваяСтрокаТоваров.Содержание					= Выборка.Содержание;
			НоваяСтрокаТоваров.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
			
			Если ХозОперация = Справочники.ХозОперации.ОтчетАгента Тогда
				НоваяСтрокаТоваров.ДокументРеализации	= Выборка.ДокументПередачи;
			Иначе
				НоваяСтрокаТоваров.ДокументПоступления	= Выборка.ДокументПередачи;
				НоваяСтрокаТоваров.ГТД					= Выборка.ГТД;
			КонецЕсли;	
			
			НоваяСтрокаТоваров.Количество				= Выборка.Количество / ?(НоваяСтрокаТоваров.Коэффициент = 0, 1, НоваяСтрокаТоваров.Коэффициент);;
			
			Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
				ТекущаяКомиссияОтчетНаОснованииПродаж	= ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
			Иначе
				ТекущаяКомиссияОтчетНаОснованииПродаж	= Истина;
			КонецЕсли;
			
			Если ВалютаДокумента = ВалютаУпр Тогда
				НоваяСтрокаТоваров.Сумма		= Выборка.СуммаУпр;
				НоваяСтрокаТоваров.СуммаПродажи	= Выборка.СуммаПродажи;
			ИначеЕсли ВалютаДокумента = ВалютаРегл Тогда
				НоваяСтрокаТоваров.Сумма		= Выборка.СуммаРегл;
				НоваяСтрокаТоваров.СуммаПродажи	= Выборка.СуммаПродажиРегл;
			Иначе
				НоваяСтрокаТоваров.Сумма		= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаУпр, ВалютаУпр, КурсВалютыУпр, ВалютаДокумента, КурсДокумента);	
				НоваяСтрокаТоваров.СуммаПродажи	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаПродажи,ВалютаУпр, КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
			КонецЕсли;				
			
			Если ТекущаяКомиссияОтчетНаОснованииПродаж И НоваяСтрокаТоваров.Сумма > 0 Тогда
				НоваяСтрокаТоваров.СуммаВсего	= НоваяСтрокаТоваров.Сумма;
				Документы.ОтчетКомитенту.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			ИначеЕсли НЕ ТекущаяКомиссияОтчетНаОснованииПродаж И НоваяСтрокаТоваров.СуммаПродажи > 0 Тогда
				НоваяСтрокаТоваров.СуммаВсего	= НоваяСтрокаТоваров.СуммаПродажи;
				Документы.ОтчетКомитенту.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			КонецЕсли;		
		КонецЦикла;		
	КонецЕсли;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		
		Контрагент				= ДанныеЗаполнения.Контрагент;
		ДоговорВзаиморасчетов	= ДанныеЗаполнения.ДоговорВзаиморасчетов;
		Товары.Очистить();
		Запрос					= Новый Запрос;
		Запрос.Текст			=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализованныеТоварыОстатки.Номенклатура,
		|	РеализованныеТоварыОстатки.ХарактеристикаНоменклатуры,
		|	РеализованныеТоварыОстатки.ДокументПередачи,
		|	РеализованныеТоварыОстатки.ГТД,
		|	РеализованныеТоварыОстатки.КоличествоОстаток КАК Количество,
		|	РеализованныеТоварыОстатки.СуммаПродажиОстаток КАК СуммаПродажи,
		|	РеализованныеТоварыОстатки.СуммаПродажиРеглОстаток КАК СуммаПродажиРегл,
		|	РеализованныеТоварыОстатки.СуммаУпрОстаток КАК СуммаУпр,
		|	РеализованныеТоварыОстатки.СуммаРеглОстаток КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.РеализованныеТовары.Остатки(
		|			&Момент,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &Договор) КАК РеализованныеТоварыОстатки";
		
		Запрос.УстановитьПараметр("Момент"     , ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Контрагент" , Контрагент);
		Запрос.УстановитьПараметр("Договор"    , ДоговорВзаиморасчетов);
		РезультатЗапроса	= Запрос.Выполнить();
		Выборка				= РезультатЗапроса.Выбрать();
		
		ВалютаУпр	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл	= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();			
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаТоваров								= Товары.Добавить();
			НоваяСтрокаТоваров.Номенклатура					= Выборка.Номенклатура;
			Документы.ОтчетКомитенту.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			НоваяСтрокаТоваров.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрокаТоваров.ДокументПоступления			= Выборка.ДокументПередачи;
			НоваяСтрокаТоваров.ГТД							= Выборка.ГТД;
			НоваяСтрокаТоваров.Количество					= Выборка.Количество/НоваяСтрокаТоваров.Коэффициент;
			
			Если ВалютаДокумента = ВалютаУпр Тогда
				НоваяСтрокаТоваров.Сумма		= Выборка.СуммаУпр;
			ИначеЕсли ВалютаДокумента = ВалютаРегл Тогда
				НоваяСтрокаТоваров.Сумма		= Выборка.СуммаРегл;
			Иначе
				НоваяСтрокаТоваров.Сумма		= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаУпр, ВалютаУпр, КурсВалютыУпр, ВалютаДокумента, КурсДокумента);	
			КонецЕсли;			
			Документы.ОтчетКомитенту.ТоварыСуммаПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			
			Если ВалютаДокумента = ВалютаУпр Тогда
				НоваяСтрокаТоваров.СуммаПродажи = Выборка.СуммаПродажи;
			ИначеЕсли ВалютаДокумента = ВалютаРегл Тогда
				НоваяСтрокаТоваров.СуммаПродажи = Выборка.СуммаПродажиРегл;
			Иначе
				НоваяСтрокаТоваров.СуммаПродажи = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаПродажи, ВалютаУпр, КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
			КонецЕсли;
			Документы.ОтчетКомитенту.ТоварыСуммаПродажиПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			
			Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
				ТекущаяКомиссияОтчетНаОснованииПродаж	= ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
			Иначе
				ТекущаяКомиссияОтчетНаОснованииПродаж	= Истина;
			КонецЕсли;				
			
			Если ТекущаяКомиссияОтчетНаОснованииПродаж И НоваяСтрокаТоваров.Сумма > 0 Тогда
				НоваяСтрокаТоваров.СуммаВсего	= НоваяСтрокаТоваров.Сумма;
				Документы.ОтчетКомитенту.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			ИначеЕсли НЕ ТекущаяКомиссияОтчетНаОснованииПродаж И НоваяСтрокаТоваров.СуммаПродажи > 0 Тогда	
				НоваяСтрокаТоваров.СуммаВсего	= НоваяСтрокаТоваров.СуммаПродажи;
				Документы.ОтчетКомитенту.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрокаТоваров);
			КонецЕсли;				
		КонецЦикла;
	Иначе
		Сч = 0;
		Пока Сч < Товары.Количество() Цикл
			Если Товары[Сч].Количество = 0 Тогда
				Товары.Удалить(Сч);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Ввод остатков товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем обработку по поступлению
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковТоваров()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ЕСТЬNULL(СУММА(ОтчетКомитентуТовары.СуммаВсего), 0) КАК СуммаВсего,
	                    |	ЕСТЬNULL(СУММА(ОтчетКомитентуТовары.Вознаграждение), 0) КАК Вознаграждение
	                    |ПОМЕСТИТЬ ДокТовары
	                    |ИЗ
	                    |	Документ.ОтчетКомитенту.Товары КАК ОтчетКомитентуТовары
	                    |ГДЕ
	                    |	ОтчетКомитентуТовары.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Док.Ссылка КАК Ссылка,
	                    |	Док.Дата КАК Дата,
	                    |	Док.ВалютаДокумента КАК ВалютаДокумента,
	                    |	Док.КурсДокумента КАК КурсДокумента,
	                    |	Док.ТипЦен КАК ТипЦен,
	                    |	Док.ХозОперация КАК ХозОперация,
	                    |	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	                    |	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	                    |	Док.МоментВремени КАК МоментВремени,
	                    |	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	                    |	Док.Контрагент КАК Контрагент,
	                    |	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                    |	ДокТовары.СуммаВсего КАК СуммаВсего,
	                    |	ДокТовары.Вознаграждение КАК Вознаграждение
	                    |ИЗ
	                    |	Документ.ОтчетКомитенту КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	                    |		ПО (ИСТИНА)
	                    |ГДЕ
	                    |	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям= БалансВедетсяПоПодразделениям(Дата);

	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	Попытка
		ЭтоОтчетАгента	= (ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ОтчетАгента);
	Исключение
		ЭтоОтчетАгента	= Ложь;
	КонецПопытки;
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = Ложь;
		НаборЗаписейДоходыИРасходы.Расход = ШапкаДокумента.СуммаВсего-ШапкаДокумента.Вознаграждение;
		НаборЗаписейДоходыИРасходы.Приход();
		Возврат НЕ Отказ;
	КонецЕсли;
	
	НаборЗаписейРеализованныеТовары					= Движения.РеализованныеТовары;
	НаборЗаписейРеализованныеТовары.ДокументОбъект	= ЭтотОбъект;
	НаборЗаписейРеализованныеТовары.Контрагент		= ШапкаДокумента.Контрагент;
	НаборЗаписейРеализованныеТовары.ДоговорВзаиморасчетов	= ШапкаДокумента.ДоговорВзаиморасчетов;
	НаборЗаписейРеализованныеТовары.ШапкаДокумента	= ШапкаДокумента;
	Отказ = НЕ НаборЗаписейРеализованныеТовары.Расход() ИЛИ Отказ;	
	
	Если НЕ Отказ Тогда
		// доходы и расходы
		ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ШапкаДокумента.Дата);
			КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр = ШапкаДокумента.КурсВалютыУпр;
		КонецЕсли;
		
		СуммаУпр = НаборЗаписейРеализованныеТовары.Итог("СуммаУпр");
		СуммаДиР = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ШапкаДокумента.СуммаВсего, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр)-СуммаУпр, 2);
		Если СуммаДиР<>0 Тогда
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДоходыИРасходы.Подразделение      = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Расход                 = СуммаДиР;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход();
		КонецЕсли;
	КонецЕсли;
	
	// Итог Вознаграждение
	Если ШапкаДокумента.Вознаграждение<>0 Тогда
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Вознаграждение;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.Доход                  = ШапкаДокумента.Вознаграждение;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
