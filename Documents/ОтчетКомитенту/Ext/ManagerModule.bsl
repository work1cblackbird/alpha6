// Модуль менеджера документа "Отчет комитенту"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПлатежноеПоручение);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ОтчетКомитенту);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Устанавливаем вознаграждение согласно договору.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура УстановитьВознаграждение(Объект, Строка) Экспорт
	
	// расчет вознаграждения по реализованному товару
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Если Объект.ДоговорВзаиморасчетов.ТипСуммыКомиссии = 0 Тогда
			Строка.Вознаграждение = (Строка.СуммаВсего*Объект.ДоговорВзаиморасчетов.ПроцентКомиссионногоВознаграждения)/100;
		ИначеЕсли Объект.ДоговорВзаиморасчетов.ТипСуммыКомиссии = 1 Тогда
			Строка.Вознаграждение = Мин(Объект.ДоговорВзаиморасчетов.СуммаКомиссионногоВознаграждения, Строка.СуммаВсего);
		КонецЕсли;
	Иначе
		Строка.Вознаграждение = 0;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВознаграждение()

// Пересчет суммы продажи из регистра Реализованные товары.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ПересчитатьСуммуПродажи(Объект, Строка)
	
	ЭтоОтчетАгента = (Объект.ХозОперация=Справочники.ХозОперации.ОтчетАгента);
	
	Если ЭтоОтчетАгента Тогда
		ДокументПоступленияРеализации = Строка.ДокументРеализации;
	Иначе
		ДокументПоступленияРеализации = Строка.ДокументПоступления;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступленияРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЭтоОтчетАгента Тогда
		Запрос.Текст= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(РеализованныеТоварыОстатки.Количество), 0) КАК Количество,
		|	ЕСТЬNULL(СУММА(РеализованныеТоварыОстатки.СуммаПродажи), 0) КАК СуммаПродажи,
		|	ЕСТЬNULL(СУММА(РеализованныеТоварыОстатки.СуммаПродажиРегл), 0) КАК СуммаПродажиРегл,
		|	ЕСТЬNULL(СУММА(РеализованныеТоварыОстатки.СуммаУпр), 0) КАК СуммаУпр,
		|	ЕСТЬNULL(СУММА(РеализованныеТоварыОстатки.СуммаРегл), 0) КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТоварыОстатки
		|ГДЕ
		|	РеализованныеТоварыОстатки.Регистратор = &ДокументПередачи
		|	И РеализованныеТоварыОстатки.Номенклатура = &Номенклатура
		|	И РеализованныеТоварыОстатки.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализованныеТоварыОстатки.КоличествоОстаток КАК Количество,
		|	РеализованныеТоварыОстатки.СуммаПродажиОстаток КАК СуммаПродажи,
		|	РеализованныеТоварыОстатки.СуммаПродажиРеглОстаток КАК СуммаПродажиРегл,
		|	РеализованныеТоварыОстатки.СуммаУпрОстаток КАК СуммаУпр,
		|	РеализованныеТоварыОстатки.СуммаРеглОстаток КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.РеализованныеТовары.Остатки(,
		|			"+?(ЗначениеЗаполнено(Строка.ГТД),"ГТД = &ГТД И","")+" ДокументПередачи = &ДокументПередачи
		|			И Номенклатура     = &Номенклатура
		|			И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК РеализованныеТоварыОстатки";
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументПередачи",           ДокументПоступленияРеализации);
	Запрос.УстановитьПараметр("Номенклатура",               Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	
	Если ЗначениеЗаполнено(Строка.ГТД) Тогда
		Запрос.УстановитьПараметр("ГТД", Строка.ГТД);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		КомиссияОтчетНаОснованииПродаж = Объект.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
	Иначе
		КомиссияОтчетНаОснованииПродаж = Истина;
	КонецЕсли;
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	ВалютаУпр       = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл      = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсДокумента   = Объект.КурсДокумента;
	КурсВалютыУпр   = Объект.КурсВалютыУпр;
	ТипЦен          = Объект.ТипЦен;
	
	Если Выборка.Количество = 0 Тогда
		Строка.Цена = 0;
		ТоварыЦенаПриИзменении(Объект, Строка);
	Иначе
		// получим сумму для расчета
		Если ВалютаДокумента = ВалютаУпр Тогда
			Строка.Сумма        = Выборка.СуммаУпр;
			Строка.СуммаПродажи = Выборка.СуммаПродажи;
		ИначеЕсли ВалютаДокумента = ВалютаРегл Тогда
			Строка.Сумма        = Выборка.СуммаРегл;
			Строка.СуммаПродажи = Выборка.СуммаПродажиРегл;
		Иначе
			Строка.Сумма        = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаУпр, ВалютаУпр, КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
			Строка.СуммаПродажи = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаПродажи, ВалютаУпр, КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
		
		Если КомиссияОтчетНаОснованииПродаж Тогда
			СуммаРасчет = Строка.Сумма;
		Иначе
			СуммаРасчет = Строка.СуммаПродажи;
		КонецЕсли;
		
		СтавкаНДС = Строка.СтавкаНДС.Ставка;
		Если НЕ ТипЦен.ЦенаВключаетНДС Тогда
			СуммаРасчет = Окр((СуммаРасчет*100)/(100+СтавкаНДС),2);
		КонецЕсли;
		
		Строка.Цена = Окр(СуммаРасчет/Выборка.Количество, 2);
		
		Если КомиссияОтчетНаОснованииПродаж И Строка.Сумма>0 Тогда
			Строка.СуммаВсего = Строка.Сумма;
			ТоварыСуммаВсегоПриИзменении(Объект, Строка);
		ИначеЕсли НЕ КомиссияОтчетНаОснованииПродаж И Строка.СуммаПродажи>0 Тогда
			Строка.СуммаВсего = Строка.СуммаПродажи;
			ТоварыСуммаВсегоПриИзменении(Объект, Строка);
		Иначе
			ТоварыЦенаПриИзменении(Объект, Строка);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента Тогда
		ОбязательныеРеквизиты.Добавить("Товары.ДокументРеализации");
	Иначе
		ОбязательныеРеквизиты.Добавить("Товары.ДокументПоступления");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если Объект.ХозОперация=Справочники.ХозОперации.ОтчетАгента Тогда
		УникальныеТовары.Добавить("ДокументРеализации");
	Иначе
		УникальныеТовары.Добавить("ДокументПоступления");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	Если Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента Тогда
		КонтролируемыеРеквизитыТЧ.Вставить("ДокументРеализации", КонтрольПоПодразделению);
	Иначе
		КонтролируемыеРеквизитыТЧ.Вставить("ДокументПоступления", КонтрольПоПодразделению);
	КонецЕсли;	
	
	КонтролируемыеРеквизиты.Вставить("Товары", КонтролируемыеРеквизитыТЧ);

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	
	// Получим признаки необходимости пересчет суммы вознаграждения
	ТребуетсяПересчетВознаграждения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетВознаграждения", ИСТИНА);
	
	// Сбрасываем признак пересчета
	Если ПараметрыДействия.Свойство("ТребуетсяПересчетВознаграждения") Тогда
		ПараметрыДействия.ТребуетсяПересчетВознаграждения = ЛОЖЬ;
	КонецЕсли;
	
	Если ТребуетсяПересчетВознаграждения Тогда
		ТекущаяКомиссияОтчетНаОснованииПродаж = Объект.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если ТекущаяКомиссияОтчетНаОснованииПродаж Тогда
				ТоварыСуммаПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
			Иначе
				ТоварыСуммаПродажиПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия.ОбъектЗаполнен И (НЕ Объект.ДоговорВзаиморасчетов.Пустая()) И Объект.ДоговорВзаиморасчетов.ВидДоговора=Перечисления.ВидыДоговоров.СКомитентом Тогда
		ПараметрыДействия.Вставить("ТребуетсяПересчетВознаграждения", ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип Цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма вознаграждения".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаВознагражденияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаВознагражденияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента Тогда
		Если ЗначениеЗаполнено(Строка.ДокументРеализации) Тогда
			Строка.ДокументРеализации = Объект.ДокументОснование;
			ТоварыДокументРеализацииПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Строка.ДокументПоступления) Тогда
			Строка.ДокументПоступления = Объект.ДокументОснование;
			ТоварыДокументПоступленияПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента Тогда
		Если ЗначениеЗаполнено(Строка.ДокументРеализации) Тогда
			Строка.ДокументРеализации = Объект.ДокументОснование;
		КонецЕсли;
		ТоварыДокументРеализацииПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		Если ЗначениеЗаполнено(Строка.ДокументПоступления) Тогда
			Строка.ДокументПоступления = Объект.ДокументОснование;
		КонецЕсли;
		ТоварыДокументПоступленияПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаПоступления = Строка.Сумма;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Строка.Сумма        = СуммаПоступления;
	
	ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаПоступления = Строка.Сумма;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Строка.Сумма        = СуммаПоступления;
	
	ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		КомиссияОтчетНаОснованииПродаж = Объект.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
	Иначе
		КомиссияОтчетНаОснованииПродаж = Истина;
	КонецЕсли;
	
	СуммаПоступления = Строка.Сумма;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Т.к. работаем от суммы продажи, а не от суммы поступления
	// то сумму поступления следует оставить прежней, а рассчитанную сумму перенести в сумму продажи.
	Если НЕ КомиссияОтчетНаОснованииПродаж Тогда
		Строка.СуммаПродажи = Строка.Сумма;
		Строка.Сумма        = СуммаПоступления;
	КонецЕсли;
	
	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);

	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		КомиссияОтчетНаОснованииПродаж = Объект.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
	Иначе
		КомиссияОтчетНаОснованииПродаж = Истина;
	КонецЕсли;
	
	СуммаПоступления = Строка.Сумма;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Т.к. работаем от суммы продажи, а не от суммы поступления
	// то сумму поступления следует оставить прежней, а рассчитанную сумму перенести в сумму продажи.
	Если НЕ КомиссияОтчетНаОснованииПродаж Тогда
		Строка.СуммаПродажи = Строка.Сумма;
		Строка.Сумма        = СуммаПоступления;
	КонецЕсли;
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		КомиссияОтчетНаОснованииПродаж = Объект.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
	Иначе
		КомиссияОтчетНаОснованииПродаж = Истина;
	КонецЕсли;
	
	СуммаПоступления = Строка.Сумма;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Т.к. работаем от суммы продажи, а не от суммы поступления
	// то сумму поступления следует оставить прежней, а рассчитанную сумму перенести в сумму продажи.
	Если НЕ КомиссияОтчетНаОснованииПродаж Тогда
		Строка.СуммаПродажи = Строка.Сумма;
		Строка.Сумма        = СуммаПоступления;
	КонецЕсли;
	
	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма продажи" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПродажиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЭтоОтчетАгента = (Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента);
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		КомиссияОтчетНаОснованииПродаж = Объект.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
	Иначе
		КомиссияОтчетНаОснованииПродаж = Истина;
	КонецЕсли;
	
	Если ЭтоОтчетАгента И (НЕ КомиссияОтчетНаОснованииПродаж) Тогда
		СуммаПоступления    = Строка.Сумма;
		Строка.Сумма        = Строка.СуммаПродажи;
		
		ТоварыСуммаПриИзменении(Объект, Строка);
		
		Строка.СуммаПродажи = Строка.Сумма;
		Строка.Сумма        = СуммаПоступления;
	КонецЕсли;
	
	УстановитьВознаграждение(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаПродажиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПересчитатьСуммуПродажи(Объект, Строка);
	
КонецПроцедуры // ТоварыГТДПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ поступления" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыДокументПоступленияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ДокументПоступления)
		И ЗначениеЗаполнено(Строка.ДокументПоступления.ДоговорВзаиморасчетов) Тогда
		
		Если Строка.ДокументПоступления.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов
				= Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
			Строка.СпособЗачетаАвансов = Неопределено;
		Иначе
			Строка.СпособЗачетаАвансов = Строка.ДокументПоступления.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьСуммуПродажи(Объект, Строка);
	
КонецПроцедуры // ТоварыДокументПоступленияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ реализации" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыДокументРеализацииПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Строка.ДокументРеализации.Пустая()
		И НЕ Строка.ДокументРеализации.ДоговорВзаиморасчетов.Пустая() Тогда
		
		Если Строка.ДокументРеализации.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов
				= Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
			Строка.СпособЗачетаАвансов = Неопределено;
		Иначе
			Строка.СпособЗачетаАвансов = Строка.ДокументРеализации.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьСуммуПродажи(Объект, Строка);
	
КонецПроцедуры // ТоварыДокументРеализацииПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ОтчетКомитенту");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	ВыборДоговора 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговора.Обязательный 		= Истина;
	ВыборДоговора.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать договор взаиморасчетов.'");

	Отбор = Новый Структура("Организация,ПодразделениеКомпании,ХозОперация", "Организация", "ПодразделениеКомпании", "ХозОперация");

	ВыборДоговора.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить на основании продаж'");
	Команда.Идентификатор	= "ТоварыЗаполнитьНаОснованииПродаж";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговора);
	//	
	ВыборПоступления 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПоступления.ВыборСсылки 		= "Документ.ПоступлениеТоваров.ФормаСписка";
	ВыборПоступления.Обязательный 		= Истина;
	ВыборПоступления.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать документ поставки.'");

	Отбор 								= Новый Структура("ДоговорВзаиморасчетов", "ДоговорВзаиморасчетов");
	ВыборПоступления.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить на основании документа поступления товаров'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуПоставки";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ВыбДок", ВыборПоступления);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", Справочники.ХозОперации.ОтчетАгента, ВидСравненияКомпоновкиДанных.НеРавно); 
	//	
	ВыборВводаОстатков 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборВводаОстатков.ВыборСсылки 		= "Документ.ВводОстатковТоваров.ФормаСписка";
	ВыборВводаОстатков.Обязательный 	= Истина;
	ВыборВводаОстатков.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать документ поставки.'");

	Отбор 								= Новый Структура("ДоговорВзаиморасчетов", "ДоговорВзаиморасчетов");
	ВыборВводаОстатков.Параметры		= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить на основании документа ввода остатков товаров'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуПоставки";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ВыбДок", ВыборВводаОстатков);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", Справочники.ХозОперации.ОтчетАгента, ВидСравненияКомпоновкиДанных.НеРавно); 
	//
	ВыборРеализации 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборРеализации.ВыборСсылки 		= "Документ.РеализацияТоваров.ФормаСписка";
	ВыборРеализации.Обязательный 		= Истина;
	ВыборРеализации.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать документ поставки.'");

	Отбор 								= Новый Структура("ДоговорКомитента,ХозОперация", "ДоговорВзаиморасчетов", 
											Справочники.ХозОперации.РеализацияАгентскихУслуг);
	ВыборРеализации.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить на основании документа реализации товаров'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуПоставки";
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ВыбДок", ВыборРеализации);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", Справочники.ХозОперации.ОтчетАгента); 
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьНаОснованииПродаж.Видимость",                Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьНаОснованииПродаж.Доступность",              Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуПоступленияТоваров.Видимость",   (НЕ Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуПоступленияТоваров.Доступность", (НЕ Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуВводаОстатков.Видимость",        (НЕ Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуВводаОстатков.Доступность",      (НЕ Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуРеализацииТоваров.Видимость",    (Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуРеализацииТоваров.Доступность",  (Объект.ХозОперация = Справочники.ХозОперации.ОтчетАгента));
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа на основании продаж
//
Функция ТоварыЗаполнитьНаОснованииПродаж(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ПараметрыЗаполнения.ДоговорВзаиморасчетов.Владелец;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧасть(Объект, ПараметрыЗаполнения, ПараметрыДействия);
	
КонецФункции // ТоварыЗаполнитьНаОснованииПродаж()

// Обработчик заполнения документа на основании документа
//
Функция ТоварыЗаполнитьПоДокументуПоставки(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ ПараметрыЗаполнения.ВыбДок = Неопределено Тогда
		ЗаполнитьТабличнуюЧасть(Объект, ПараметрыЗаполнения, ПараметрыДействия);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоДокументуПоставки()

// Обработчик заполнения документа по заказам контрагенту
//
Процедура ЗаполнитьТабличнуюЧасть(Объект, ПараметрыЗаполнения, ПараметрыДействия=Неопределено) Экспорт
	
	ВыбДок = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения,"ВыбДок", Неопределено);
	
	ЭтоОтчетАгента = (Объект.ХозОперация=Справочники.ХозОперации.ОтчетАгента);
	
	// Заполним таблицу реализованными комиссионными товарами, за которые мы еще не отчитались.
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализованныеТоварыОстатки.Номенклатура КАК Номенклатура,
	|	РеализованныеТоварыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РеализованныеТоварыОстатки.ДокументПередачи КАК ДокументПоступления,
	|	РеализованныеТоварыОстатки.КоличествоОстаток КАК Количество,
	|	РеализованныеТоварыОстатки.СуммаУпрОстаток КАК СуммаПоступления,
	|	РеализованныеТоварыОстатки.СуммаРеглОстаток КАК СуммаПоступленияРегл,
	|	РеализованныеТоварыОстатки.СуммаПродажиОстаток КАК Сумма,
	|   РеализованныеТоварыОстатки.СуммаПродажиРеглОстаток КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Остатки(,Контрагент = &Контрагент И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов) КАК РеализованныеТоварыОстатки
	|ГДЕ
	|	РеализованныеТоварыОстатки.ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов 
	|	И НЕ РеализованныеТоварыОстатки.КоличествоОстаток ЕСТЬ NULL
	|	И РеализованныеТоварыОстатки.КоличествоОстаток <> 0";
	Если ЭтоОтчетАгента Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И РеализованныеТоварыОстатки.Номенклатура.ВидНоменклатуры=&Услуга";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	И РеализованныеТоварыОстатки.Номенклатура.ВидНоменклатуры<>&Услуга";
	КонецЕсли;
	Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
	Если ЗначениеЗаполнено(ВыбДок) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И РеализованныеТоварыОстатки.ДокументПередачи=&ДокументПередачи";
		Запрос.УстановитьПараметр("ДокументПередачи", ВыбДок);
	Иначе
		Если ЭтоОтчетАгента Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И РеализованныеТоварыОстатки.ДокументПередачи ССЫЛКА Документ.РеализацияТоваров
			|	И РеализованныеТоварыОстатки.ДокументПередачи.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияАгентскихУслуг)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	И (РеализованныеТоварыОстатки.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
			|	ИЛИ РеализованныеТоварыОстатки.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	МоментВремени = ?(ЗначениеЗаполнено(Объект.Дата),
						Новый Граница(Новый МоментВремени(Объект.Дата), ВидГраницы.Исключая),
						Новый Граница(Новый МоментВремени(ТекущаяДатаСеанса()), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Момент",                МоментВремени);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Контрагент",            Объект.Контрагент);
	// Заполним таблицу
	ВалютаУпр	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл	= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ПроцентКомиссионногоВознаграждения = ?(ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов.ПроцентКомиссионногоВознаграждения, 0);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		ТекущаяКомиссияОтчетНаОснованииПродаж	= Объект.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж;
	Иначе
		ТекущаяКомиссияОтчетНаОснованииПродаж	= Истина;
	КонецЕсли;		
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// номенклатура
		НоваяСтрока								= Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура				= Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры	= Выборка.ХарактеристикаНоменклатуры;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);;
		// количество и суммы
		НоваяСтрока.Количество					= ?(НоваяСтрока.Коэффициент=0, 0, Выборка.Количество / НоваяСтрока.Коэффициент);
		
		Если Объект.ВалютаДокумента = ВалютаРегл Тогда
			НоваяСтрока.Сумма			= ?(Выборка.СуммаПоступленияРегл = NULL, 0, Выборка.СуммаПоступленияРегл);
			НоваяСтрока.СуммаПродажи	= ?(Выборка.СуммаРегл = NULL, 0, Выборка.СуммаРегл);
		ИначеЕсли Объект.ВалютаДокумента = ВалютаУпр Тогда
			НоваяСтрока.Сумма			= ?(Выборка.СуммаПоступления = NULL, 0, Выборка.СуммаПоступления);
			НоваяСтрока.СуммаПродажи	= ?(Выборка.Сумма = NULL, 0, Выборка.Сумма);
		Иначе
			Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
				ДатаДокументаПередачи	= Выборка.ДокументПоступления.Дата;
			Иначе
				ДатаДокументаПередачи	= Дата(1,1,1);
			КонецЕсли;
			НоваяСтрока.Сумма			= ?(Выборка.СуммаПоступления = NULL, 0, РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаПоступления, ВалютаУпр, Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента));	
			НоваяСтрока.СуммаПродажи	= ?(Выборка.Сумма = NULL, 0, РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Сумма, ВалютаУпр, Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента));					
		КонецЕсли;
		
		Если ТекущаяКомиссияОтчетНаОснованииПродаж И НоваяСтрока.Сумма>0 Тогда
			НоваяСтрока.СуммаВсего = НоваяСтрока.Сумма;
			ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		ИначеЕсли НЕ ТекущаяКомиссияОтчетНаОснованииПродаж И НоваяСтрока.СуммаПродажи>0 Тогда
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаПродажи;	
			ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЕсли;
		
		Если ЭтоОтчетАгента Тогда
			НоваяСтрока.ДокументРеализации = Выборка.ДокументПоступления;	
		Иначе
			НоваяСтрока.ДокументПоступления = Выборка.ДокументПоступления;
		КонецЕсли;
		
		// вознаграждение
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			Если Объект.ДоговорВзаиморасчетов.ТипСуммыКомиссии  =0 Тогда
				НоваяСтрока.Вознаграждение= НоваяСтрока.СуммаВсего * ПроцентКомиссионногоВознаграждения / 100;
			Иначе
				НоваяСтрока.Вознаграждение= Объект.ДоговорВзаиморасчетов.СуммаКомиссионногоВознаграждения;
			КонецЕсли;
		Иначе
			НоваяСтрока.Вознаграждение = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ОтчетКомитенту",
		"ПФ_MXL_АктОбУслугах",
		НСтр("ru = 'Акт об услугах'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ОтчетКомитенту",
		"ПФ_MXL_ОтчетКомитенту",
		НСтр("ru = 'Отчет комитенту'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОтчетКомитенту") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ОтчетКомитенту",
															НСтр("ru = 'Отчет комитенту'"),
															ПечатьОтчетКомитенту(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктОбУслугах") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_АктОбУслугах",
															НСтр("ru = 'Акт об услугах'"),
															ПечатьАктОбУслугах(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;													
КонецПроцедуры // Печать()

// Формирует печатную форму "АктОбУслугах"
//
Функция ПечатьАктОбУслугах(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитенту_АктОбУслугах";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетКомитенту.ПФ_MXL_АктОбУслугах");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		// Вывод заголовка документа.
		ОбластьШапка.Параметры.Заполнить(Документ);
		ОбластьШапка.Параметры.ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Акт об оказании услуг'"));
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ТекстОСуммеПрописью = НСтр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаВознаграждения, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		ОбластьШапка.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Исполнитель", "Исполнитель"));
		ОбластьШапка.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Заказчик", "Заказчик"));
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьАктОбУслугах()

// Формирует печатную форму "ОтчетКомитенту"
//
Функция ПечатьОтчетКомитенту(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитенту_ОтчетКомитенту";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало      = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Документ.Проведен Тогда
			ЭтоОтчетАгента = (Документ.ХозОперация = Справочники.ХозОперации.ОтчетАгента);
			ДокументПередачи = ?(ЭтоОтчетАгента, "ДокументРеализации", "ДокументПоступления");
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура               КАК Номенклатура,
			|	ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	" + ДокументПередачи + "   КАК ДокументПередачи
			|	ПОМЕСТИТЬ ТабДокумента
			|	ИЗ
			|		&ТабДокумента КАК Таб
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеализованныеТовары.Номенклатура               КАК Номенклатура,
			|	РеализованныеТовары.ДоговорВзаиморасчетов      КАК ДоговорВзаиморасчетов,
			|	РеализованныеТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	РеализованныеТовары.ДокументПередачи           КАК ДокументПередачи,
			|	РеализованныеТовары.СуммаУпр                   КАК СуммаУпр,
			|	РеализованныеТовары.СуммаПродажи               КАК СуммаПродажи,
			|	РеализованныеТовары.СуммаРегл                  КАК СуммаРегл,
			|	РеализованныеТовары.СуммаПродажиРегл           КАК СуммаПродажиРегл		
			|ИЗ
			|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
			|ГДЕ
			|	РеализованныеТовары.Регистратор = &Регистратор
			|	И РеализованныеТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РеализованныеТовары.ДоговорВзаиморасчетов = &Договор
			|	И (Номенклатура,ХарактеристикаНоменклатуры,ДокументПередачи) В 
			|(ВЫБРАТЬ
			|	ТабДокумента.Номенклатура,
			|	ТабДокумента.ХарактеристикаНоменклатуры,
			|	ТабДокумента.ДокументПередачи
			|	ИЗ
			|		ТабДокумента КАК ТабДокумента)";
			Запрос.УстановитьПараметр("Регистратор" , Документ.Ссылка);
			Запрос.УстановитьПараметр("Договор"     , Документ.ДоговорВзаиморасчетов);
			Запрос.УстановитьПараметр("ТабДокумента",
				Документ.Товары.Выгрузить(, "Номенклатура,ХарактеристикаНоменклатуры," + ДокументПередачи));
			ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетКомитенту.ПФ_MXL_ОтчетКомитенту");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, НСтр("ru = 'Отчет комитенту'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеКомиссионера = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеКомитента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаВсего,Вознаграждение",
			Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки.
		ВыборкаТабличнойЧасти = Документ.Товары;
		ВалютаУпр	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл	= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ДокументПередачи");
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки.
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			Если Документ.Проведен Тогда
				Отбор.Номенклатура               = СтрокаТЧ.Номенклатура;
				Отбор.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
				Если ЭтоОтчетАгента Тогда
					Отбор.ДокументПередачи = СтрокаТЧ.ДокументРеализации;
				Иначе
					Отбор.ДокументПередачи = СтрокаТЧ.ДокументПоступления;
				КонецЕсли;
				МассивСтрок = ТаблицаРезультатаЗапроса.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 0 И СтрокаТЧ.Коэффициент <> 0 Тогда
					СтрокаПоступления   = МассивСтрок[0];
					Если Документ.ВалютаДокумента = ВалютаУпр Тогда
						СуммаПоступления    = СтрокаПоступления.СуммаУпр;
						ЦенаПоступления     = СтрокаПоступления.СуммаУпр / (СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент);
						СуммаПродажи		= СтрокаПоступления.СуммаПродажи;
						ЦенаПродажи			= СтрокаПоступления.СуммаПродажи / (СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент);
					ИначеЕсли Документ.ВалютаДокумента = ВалютаРегл Тогда
						СуммаПоступления    = СтрокаПоступления.СуммаРегл;
						ЦенаПоступления     = СтрокаПоступления.СуммаРегл / (СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент);
						СуммаПродажи		= СтрокаПоступления.СуммаПродажиРегл;
						ЦенаПродажи			= СтрокаПоступления.СуммаПродажиРегл / (СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент);
					Иначе
						СуммаПоступления    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаПоступления.СуммаУпр, ВалютаУпр, 
							Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
						ЦенаПоступления     = СтрокаПоступления.СуммаУпр / (СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент);
						ЦенаПоступления     = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ЦенаПоступления, ВалютаУпр,
							Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
						СуммаПродажи		= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаПоступления.СуммаПродажи, ВалютаУпр,
							Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
						ЦенаПродажи         = СтрокаПоступления.СуммаПродажи / (СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент);
						ЦенаПродажи			= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ЦенаПродажи, ВалютаУпр,
							Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
					КонецЕсли;
				Иначе
					ЦенаПоступления     = 0;
					СуммаПоступления    = 0;
					ЦенаПродажи			= 0;
					СуммаПродажи		= 0;
				КонецЕсли;
			Иначе 
				ЦенаПоступления     = 0;
				СуммаПоступления    = 0;
				ЦенаПродажи			= 0;
				СуммаПродажи		= 0;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("ЦенаПоступления",  Формат(ЦенаПоступления,         ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("СуммаПоступления", Формат(СуммаПоступления,        ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("Цена",             Формат(ЦенаПродажи,             ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("СуммаВсего",       Формат(СуммаПродажи,            ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("Вознаграждение",   Формат(СтрокаТЧ.Вознаграждение, ФорматВыводаСуммы));
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		Если Документ.Проведен Тогда
			Если Документ.ВалютаДокумента=ВалютаУпр Тогда
				СуммаВсего = ТаблицаРезультатаЗапроса.Итог("СуммаПродажи");
			ИначеЕсли Документ.ВалютаДокумента=ВалютаРегл Тогда
				СуммаВсего = ТаблицаРезультатаЗапроса.Итог("СуммаПродажиРегл")
			Иначе
				РасчетнаяСуммаВсего = ТаблицаРезультатаЗапроса.Итог("СуммаПродажи");
				СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(РасчетнаяСуммаВсего, ВалютаУпр, Документ.КурсВалютыУпр,
					Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
		Иначе
			СуммаВсего = 0;
		КонецЕсли;
		Вознаграждение = ВыборкаТабличнойЧасти.Итог("Вознаграждение"); 
		ОбластьПодвал.Параметры.СуммаВсего     = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.Вознаграждение = Формат(Вознаграждение, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью  = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "ОтпустилПредставление"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил", "ПолучилПредставление"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьОтчетКомитенту()

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОтчетКомитенту - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
	
КонецФункции

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОтчетКомиссионера - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
		Запрос.Текст = "ВЫБРАТЬ
		|	ОтчетКомитенту.Организация КАК Организация,
		|	ОтчетКомитенту.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ОтчетКомитенту.Ссылка КАК Ссылка,
		|	ОтчетКомитенту.Дата КАК Дата,
		|	ОтчетКомитенту.ХозОперация КАК ХозОперация,
		|	ОтчетКомитенту.ДокументОснование КАК ДокументОснование,
		|	ОтчетКомитенту.Контрагент КАК Контрагент,
		|	ОтчетКомитенту.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ОтчетКомитенту.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
		|	ОтчетКомитенту.Ссылка КАК Сделка,
		|	ОтчетКомитенту.СуммаДокумента КАК Сумма,
		|	ОтчетКомитенту.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
		|	ОтчетКомитенту.ВалютаДокумента КАК ВалютаДокумента,
		|	ОтчетКомитенту.КурсДокумента КАК КурсДокумента,
		|	ОтчетКомитенту.КурсВалютыУпр КАК КурсВалютыУпр,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
		|	&ВалютаРегл КАК ВалютаРегл,
		|	&ВалютаУпр КАК ВалютаУпр
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
		|ГДЕ
		|	ОтчетКомитенту.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.ХозОперация КАК ХозОперация,
		|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
		|	ДанныеДокумента.Сделка КАК Сделка,
		|	ДанныеДокумента.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
		|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
		|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
		|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
		|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
		|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
		|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
		|	КОНЕЦ КАК КурсВалютыУпр,
		|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
		|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
		|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
		|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
		|ПОМЕСТИТЬ Задолженность
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
		|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
		|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
		|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ОтчетКомитентуТовары.СуммаВсего - ОтчетКомитентуТовары.Вознаграждение), 0) КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ОтчетКомитентуТовары
	|ГДЕ
	|	ОтчетКомитентуТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДвиженияДокумента.ДляПроведения.Ссылка);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	РаспределениеОплаты = ПакетЗапроса[1].Выбрать();
	
	Если Не ДанныеОбОплате.Следующий()
		ИЛИ Не РаспределениеОплаты.Следующий()
		ИЛИ РаспределениеОплаты.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	НоваяЗапись = РасчетыСКонтрагентами.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОбОплате);
	НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяЗапись.Период = ДанныеОбОплате.Дата;
	НоваяЗапись.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
	НоваяЗапись.ДокументРасчетов = ДанныеОбОплате.Сделка;
	
	НоваяЗапись.Сумма = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			РаспределениеОплаты.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаДоговора,
			ДанныеОбОплате.КурсВалютыВзаиморасчетов),
		2);
	НоваяЗапись.СуммаУпр = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			РаспределениеОплаты.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаУпр,
			ДанныеОбОплате.КурсВалютыУпр),
		2);
	НоваяЗапись.СуммаБаз = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			РаспределениеОплаты.Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаРегл,
			ДанныеОбОплате.КурсВалютыРегл),
		2);
	
	НоваяЗапись.Курс = ДанныеОбОплате.КурсДокумента;
	НоваяЗапись.ВалютаПлатежа = ДанныеОбОплате.ВалютаДокумента;
	НоваяЗапись.СпособЗачета = ДанныеОбОплате.СпособЗачетаАвансов;
	НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
	НоваяЗапись.Активность = Истина;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли