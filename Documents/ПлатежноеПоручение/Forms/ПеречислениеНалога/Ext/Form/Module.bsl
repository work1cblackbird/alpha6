///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Перечисление налога"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ТипДокумента") ИЛИ НЕ Параметры.ТипДокумента = "ПлатежноеПоручение" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Эта форма предназначена для открытия только из формы платежного поручения.'"));
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВладелецФормы = Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Запрещен самостоятельный вызов.'"),,
			НСтр("ru = 'Данная форма используется другими объектами конфигурации.'"),
			БиблиотекаКартинок.Предупреждение32,
			СтатусОповещенияПользователя.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПолучениеСпискаВведенныхКодов();
	
	МассивСписковВыбора = СформироватьСписокВыбораПлатежа(ВладелецФормы.Объект.Дата);
	
	Для Индекс = 0 По МассивСписковВыбора[0].Количество() - 1 Цикл
		Элементы.СтатусСоставителя.СписокВыбора.Добавить(МассивСписковВыбора[0][Индекс].Значение, МассивСписковВыбора[0][Индекс].Представление);
	КонецЦикла;
	
	Для Индекс = 0 По МассивСписковВыбора[1].Количество() - 1 Цикл
		Элементы.ОснованиеПлатежа.СписокВыбора.Добавить(МассивСписковВыбора[1][Индекс].Значение, МассивСписковВыбора[1][Индекс].Представление);
	КонецЦикла;
	
	Для Индекс = 0 По МассивСписковВыбора[2].Количество() - 1 Цикл
		Элементы.ТипПлатежа.СписокВыбора.Добавить(МассивСписковВыбора[2][Индекс].Значение, МассивСписковВыбора[2][Индекс].Представление);
	КонецЦикла;
	
	СпПериодичностьУплаты = Элементы.ПериодичностьУплаты1.СписокВыбора;
	СпПериодичностьУплаты.Очистить();
	Если ВладелецФормы.Объект.Дата < '20050101' Тогда
		СпПериодичностьУплаты.Добавить("Д1",НСтр("ru = 'Д1, Платеж за первую декаду месяца'"));
		СпПериодичностьУплаты.Добавить("Д2",НСтр("ru = 'Д2, Платеж за вторую декаду месяца'"));
		СпПериодичностьУплаты.Добавить("Д3",НСтр("ru = 'Д3, Платеж за третью декаду месяца'"));
	КонецЕсли;
	СпПериодичностьУплаты.Добавить("МС", НСтр("ru = 'МС - месячный платеж'"));
	СпПериодичностьУплаты.Добавить("КВ", НСтр("ru = 'КВ - квартальный платеж'"));
	СпПериодичностьУплаты.Добавить("ПЛ", НСтр("ru = 'ПЛ - полугодовой платеж'"));
	СпПериодичностьУплаты.Добавить("ГД", НСтр("ru = 'ГД - годовой платеж'")); 
	СпПериодичностьУплаты.Добавить("-",  НСтр("ru = 'Платеж по конкретной дате'"));
	
	Для Индекс = 0 По Элементы.ПериодичностьУплаты1.СписокВыбора.Количество() - 1 Цикл
		Элементы.ПериодичностьУплаты2.СписокВыбора.Добавить(Элементы.ПериодичностьУплаты1.СписокВыбора[Индекс].Значение, Элементы.ПериодичностьУплаты1.СписокВыбора[Индекс].Представление);
	КонецЦикла;
	
	Если ВладелецФормы.Объект.Дата >= '20050101' Тогда
		
		ВидДатыДокументаПлатежа = Новый СписокЗначений;
		
		// Значение - номер строки списка "Основание платежа", представление - 
		// текст, выдаваемый к качестве подсказки к полю для указания даты.
		ВидДатыДокументаПлатежа.Добавить( 0,  НСтр("ru = 'Дата декларации (расчета), представленной в налоговый орган:'"));
		ВидДатыДокументаПлатежа.Добавить( 1,  "");
		ВидДатыДокументаПлатежа.Добавить( 2,  НСтр("ru = 'Дата представления декларации, либо дата отправки почтового отправления:'"));
		ВидДатыДокументаПлатежа.Добавить( 3,  НСтр("ru = 'Дата требования об уплате налогов (сборов) от налогового органа:'"));
		ВидДатыДокументаПлатежа.Добавить( 4,  НСтр("ru = 'Дата решения о рассрочке:'"));
		ВидДатыДокументаПлатежа.Добавить( 5,  НСтр("ru = 'Дата решения об отсрочке:'"));
		ВидДатыДокументаПлатежа.Добавить( 6,  НСтр("ru = 'Дата решения о реструктуризации:'"));
		ВидДатыДокументаПлатежа.Добавить( 7,  НСтр("ru = 'Дата принятия арбитражным судом решения о введении внешнего управления:'"));
		ВидДатыДокументаПлатежа.Добавить( 8,  НСтр("ru = 'Дата решения о приостановлении взыскания:'")); 
		ВидДатыДокументаПлатежа.Добавить( 9,  НСтр("ru = 'Дата акта проверки:'"));
		ВидДатыДокументаПлатежа.Добавить( 10, НСтр("ru = 'Дата вынесения исполнительного документа:'")); 
		ВидДатыДокументаПлатежа.Добавить( 11, НСтр("ru = 'Показатель даты налогового документа:'"));
		
		ВидНомераДокументаПлатежа = Новый СписокЗначений;
		
		// Значение - номер строки списка "Основание платежа", представление - 
		// текст, выдаваемый к качестве подсказки к полю для указания номера.
		ВидНомераДокументаПлатежа.Добавить( 0, "");
		ВидНомераДокументаПлатежа.Добавить( 1, "");
		ВидНомераДокументаПлатежа.Добавить( 2, НСтр("ru = 'Значение реквизита ""Индекс документа"" из извещения, заполненного налоговым органом:'"));
		ВидНомераДокументаПлатежа.Добавить( 3, НСтр("ru = 'Номер требования об уплате налогов (сборов) от налогового органа:'"));
		ВидНомераДокументаПлатежа.Добавить( 4, НСтр("ru = 'Номер решения о рассрочке:'"));
		ВидНомераДокументаПлатежа.Добавить( 5, НСтр("ru = 'Номер решения об отсрочке:'"));
		ВидНомераДокументаПлатежа.Добавить( 6, НСтр("ru = 'Номер решения о реструктуризации:'"));
		ВидНомераДокументаПлатежа.Добавить( 7, НСтр("ru = 'Номер дела или материала, рассмотренного арбитражным судом:'"));
		ВидНомераДокументаПлатежа.Добавить( 8, НСтр("ru = 'Номер решения о приостановлении взыскания:'")); 
		ВидНомераДокументаПлатежа.Добавить( 9, НСтр("ru = 'Номер акта проверки:'"));
		ВидНомераДокументаПлатежа.Добавить( 10,НСтр("ru = 'Номер исполнительного документа:'"));
		ВидНомераДокументаПлатежа.Добавить( 11,НСтр("ru = 'Показатель номера налогового документа:'"));
		
		ВидДатыОснованияПлатежа = Новый СписокЗначений;
		
		// Значение - номер строки списка "Основание платежа", представление - 
		// текст, выдаваемый к качестве подсказки к полю для указания даты.
		ВидДатыОснованияПлатежа.Добавить( 3, НСтр("ru = 'Срок уплаты, установленный в требовании об уплате налогов (сборов):'"));
		ВидДатыОснованияПлатежа.Добавить( 4, НСтр("ru = 'Дата уплаты части рассроченной суммы налога в соответствии с графиком:'"));
		ВидДатыОснованияПлатежа.Добавить( 5, НСтр("ru = 'Дата завершения отсрочки:'"));
		ВидДатыОснованияПлатежа.Добавить( 6, НСтр("ru = 'Дата уплаты части реструктурируемой задолженности в соответствии с графиком:'"));
		ВидДатыОснованияПлатежа.Добавить( 7, НСтр("ru = 'Дата завершения внешнего управления:'"));
		ВидДатыОснованияПлатежа.Добавить( 8, НСтр("ru = 'Дата завершения приостановления взыскания:'")); 
		ВидДатыОснованияПлатежа.Добавить( 9,  "");
		ВидДатыОснованияПлатежа.Добавить( 10, "");
		ВидДатыОснованияПлатежа.Добавить( 11, НСтр("ru = 'Показатель налогового периода'"));
		
	Иначе
		
		ВидДатыДокументаПлатежа = Новый СписокЗначений;
		
		// Значение - номер строки списка "Основание платежа", представление - 
		// текст, выдаваемый к качестве подсказки к полю для указания даты.
		ВидДатыДокументаПлатежа.Добавить( 0, НСтр("ru = 'Дата декларации (расчета), представленной в налоговый орган:'"));
		ВидДатыДокументаПлатежа.Добавить( 1, "");
		ВидДатыДокументаПлатежа.Добавить( 2, НСтр("ru = 'Дата требования об уплате налогов (сборов) от налогового органа:'"));
		ВидДатыДокументаПлатежа.Добавить( 3, НСтр("ru = 'Дата решения о рассрочке:'"));
		ВидДатыДокументаПлатежа.Добавить( 4, НСтр("ru = 'Дата решения об отсрочке:'"));
		ВидДатыДокументаПлатежа.Добавить( 5, НСтр("ru = 'Дата решения о реструктуризации:'"));
		ВидДатыДокументаПлатежа.Добавить( 6, НСтр("ru = 'Дата принятия арбитражным судом решения о введении внешнего управления:'"));
		ВидДатыДокументаПлатежа.Добавить( 7, НСтр("ru = 'Дата решения о приостановлении взыскания:'")); 
		ВидДатыДокументаПлатежа.Добавить( 8, НСтр("ru = 'Дата акта проверки:'"));
		ВидДатыДокументаПлатежа.Добавить( 9, НСтр("ru = 'Дата вынесения исполнительного документа:'")); 
		ВидДатыДокументаПлатежа.Добавить( 10,НСтр("ru = 'Показатель даты налогового документа:'"));
		
		ВидНомераДокументаПлатежа = Новый СписокЗначений;
		
		// Значение - номер строки списка "Основание платежа", представление - 
		// текст, выдаваемый к качестве подсказки к полю для указания номера.
		ВидНомераДокументаПлатежа.Добавить( 0, "");
		ВидНомераДокументаПлатежа.Добавить( 1, "");
		ВидНомераДокументаПлатежа.Добавить( 2, НСтр("ru = 'Номер требования об уплате налогов (сборов) от налогового органа:'"));
		ВидНомераДокументаПлатежа.Добавить( 3, НСтр("ru = 'Номер решения о рассрочке:'"));
		ВидНомераДокументаПлатежа.Добавить( 4, НСтр("ru = 'Номер решения об отсрочке:'"));
		ВидНомераДокументаПлатежа.Добавить( 5, НСтр("ru = 'Номер решения о реструктуризации:'"));
		ВидНомераДокументаПлатежа.Добавить( 6, НСтр("ru = 'Номер дела или материала, рассмотренного арбитражным судом:'"));
		ВидНомераДокументаПлатежа.Добавить( 7, НСтр("ru = 'Номер решения о приостановлении взыскания:'")); 
		ВидНомераДокументаПлатежа.Добавить( 8, НСтр("ru = 'Номер акта проверки:'"));
		ВидНомераДокументаПлатежа.Добавить( 9, НСтр("ru = 'Номер исполнительного документа:'"));
		ВидНомераДокументаПлатежа.Добавить( 10,НСтр("ru = 'Показатель номера налогового документа:'"));
		
		ВидДатыОснованияПлатежа = Новый СписокЗначений;
		
		// Значение - номер строки списка "Основание платежа", представление - 
		// текст, выдаваемый к качестве подсказки к полю для указания даты.
		ВидДатыОснованияПлатежа.Добавить( 2, НСтр("ru = 'Срок уплаты, установленный в требовании об уплате налогов (сборов):'"));
		ВидДатыОснованияПлатежа.Добавить( 3, НСтр("ru = 'Дата уплаты части рассроченной суммы налога в соответствии с графиком:'"));
		ВидДатыОснованияПлатежа.Добавить( 4, НСтр("ru = 'Дата завершения отсрочки:'"));
		ВидДатыОснованияПлатежа.Добавить( 5, НСтр("ru = 'Дата уплаты части реструктурируемой задолженности в соответствии с графиком:'"));
		ВидДатыОснованияПлатежа.Добавить( 6, НСтр("ru = 'Дата завершения внешнего управления:'"));
		ВидДатыОснованияПлатежа.Добавить( 7, НСтр("ru = 'Дата завершения приостановления взыскания:'")); 
		ВидДатыОснованияПлатежа.Добавить( 8, "");
		ВидДатыОснованияПлатежа.Добавить( 9,"");
		ВидДатыОснованияПлатежа.Добавить( 10,НСтр("ru = 'Показатель налогового периода'"));
		
	КонецЕсли;
	
	П101 = ВладелецФормы.Объект.СтатусСоставителя;
	П104 = ВладелецФормы.Объект.КодБК;
	П105 = ВладелецФормы.Объект.КодОКТМО;
	П106 = ВладелецФормы.Объект.ПоказательОснования;
	П107 = ВладелецФормы.Объект.ПоказательПериода;
	П108 = ВладелецФормы.Объект.ПоказательНомера;
	П109 = Строка(Формат(ВладелецФормы.Объект.ПоказательДаты,"ДЛФ=D"));
	П110 = ВладелецФормы.Объект.ПоказательТипа;
	
	СписокСтатусовСоставителя = Элементы.СтатусСоставителя.СписокВыбора;
	НачальныйСтатусСоставителя = СписокСтатусовСоставителя.НайтиПоЗначению(П101);
	Если НЕ(НачальныйСтатусСоставителя = Неопределено) Тогда
		СтатусСоставителя = НачальныйСтатусСоставителя.Значение;
	Иначе
		СтатусСоставителя = СписокСтатусовСоставителя[1].Значение;
	КонецЕсли; 
	ОбработкаИзмененияСтатусСоставителя();
	
	КодБК    = П104;
	КодОКТМО = П105;
	
	СпОснованиеПлатежа = Элементы.ОснованиеПлатежа.СписокВыбора;
	НачЗнОснованиеПлатежа = СпОснованиеПлатежа.НайтиПоЗначению(П106);
	Если НЕ(НачЗнОснованиеПлатежа = Неопределено) Тогда
		ОснованиеПлатежа = НачЗнОснованиеПлатежа.Значение;
	Иначе
		ОснованиеПлатежа = СпОснованиеПлатежа[0].Значение;
	КонецЕсли;
	ПериодичностьУплаты = Элементы.ПериодичностьУплаты1.СписокВыбора[0].Значение;
	ОбработкаИзмененияОснованияПлатежа();
	
	ДД = Сред(СокрЛП(П107), 1, 2); 
	ММ = Сред(СокрЛП(П107), 4, 2);
	ГГ = Сред(СокрЛП(П107), 7, 4);
	
	СпПериодичностьУплаты     = Элементы.ПериодичностьУплаты1.СписокВыбора;
	НачЗнПериодичностьУплаты  = СпПериодичностьУплаты.НайтиПоЗначению(ДД);
	Если НЕ(НачЗнПериодичностьУплаты = Неопределено) Тогда
		ПериодичностьУплаты = НачЗнПериодичностьУплаты.Значение;
		ПериодПлатежа       = ММ;
		Если ЗначениеЗаполнено (ГГ) Тогда
			ГодПлатежа          = Дата(ГГ+"0101"); 
		КонецЕсли;
	ИначеЕсли  СтрНайти("ТП, ЗД", П106) > 0 Тогда
		Если ПустаяСтрока(ГГ) ИЛИ ПустаяСтрока(ММ) ИЛИ ПустаяСтрока(ДД) Тогда
			ДатаПлатежа = "";
		Иначе	
			ДатаПлатежа = Дата(Число(ГГ),Число(ММ),Число(ДД));
		КонецЕсли;
		ПериодичностьУплаты = ?(Элементы.ПериодичностьУплаты1.СписокВыбора.Количество() = 8, Элементы.ПериодичностьУплаты1.СписокВыбора[7].Значение, Элементы.ПериодичностьУплаты1.СписокВыбора[4].Значение);
	Иначе 
		Если ПустаяСтрока(ГГ) ИЛИ ПустаяСтрока(ММ) ИЛИ ПустаяСтрока(ДД) Тогда
			ДатаПлатежа = "";
		Иначе	
			ДатаПлатежа = Дата(Число(ГГ),Число(ММ),Число(ДД));
		КонецЕсли;	
		ПериодичностьУплаты = Элементы.ПериодичностьУплаты1.СписокВыбора[0].Значение;
	КонецЕсли;
	ОбработкаИзмененияПериодичностьУплаты();
	
	НомерДокумента = П108;
	ДД = Сред(СокрЛП(П109), 1, 2); 
	ММ = Сред(СокрЛП(П109), 4, 2);
	ГГ = Сред(СокрЛП(П109), 7, 4);
	Если ПустаяСтрока(ДД) ИЛИ ПустаяСтрока(ММ) ИЛИ ПустаяСтрока(ГГ) Тогда
		ДатаДокумента = "";
	Иначе	
		ДатаДокумента = Дата(Число(ГГ),Число(ММ),Число(ДД));
	КонецЕсли;	
	
	СпТипПлатежа1   = Элементы.ТипПлатежа.СписокВыбора;
	НачЗнТипПлатежа = СпТипПлатежа1.НайтиПоЗначению(П110);
	Если НЕ(НачЗнТипПлатежа = Неопределено) Тогда
		ТипПлатежа = НачЗнТипПлатежа.Значение;
	Иначе
		ТипПлатежа = СпТипПлатежа1[0].Значение;
	КонецЕсли;
	
	СформироватьТекстыПолей();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "СтатусСоставителя".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СтатусСоставителяПриИзменении(Элемент)
	
	ОбработкаИзмененияСтатусСоставителя();
	ОбработкаИзмененияОснованияПлатежа();
	СформироватьТекстыПолей();
	
КонецПроцедуры // СтатусСоставителяПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ОснованиеПлатежа".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОснованиеПлатежаПриИзменении(Элемент)
	
	ОбработкаИзмененияОснованияПлатежа();
	СформироватьТекстыПолей();
	
КонецПроцедуры // ОснованиеПлатежаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПериодичностьУплаты1".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодичностьУплаты1ПриИзменении(Элемент)
	
	ОбработкаИзмененияПериодичностьУплаты();
	СформироватьТекстыПолей();
	
КонецПроцедуры // ПериодичностьУплаты1ПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПериодичностьУплаты2".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПериодичностьУплаты2ПриИзменении(Элемент)
	
	ОбработкаИзмененияПериодичностьУплатыБФ();
	СформироватьТекстыПолей();
	
КонецПроцедуры // ПериодичностьУплаты2ПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ГодПлатежа1".
//
// Параметры:
//  Элемент - ЭлементФормы - Элемент, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГодПлатежа1ПриИзменении(Элемент)
	
	СформироватьТекстыПолей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик действия команды "Выгрузить"
//
&НаКлиенте
Процедура Выгрузить(Команда)
	
	СформироватьТекстыПолей();
	
	Объект = ВладелецФормы.Объект;
	Объект.СтатусСоставителя = П101; 
	Объект.КодБК               = П104;
	Объект.КодОКТМО            = ?(П105="0","",П105);
	Объект.ПоказательОснования = ?(П106="0","",П106);;
	Объект.ПоказательПериода   = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(П107,"."," "))),"",П107);
	Объект.ПоказательНомера    = ?(П108="0","",П108);;
	Объект.ПоказательДаты      = ?(ПустаяСтрока(П109),'00010101000000',Дата(Сред(П109,7,4) + Сред(П109,4,2) + Сред(П109,1,2)));
	Объект.ПоказательТипа      = ?(П110="0","",П110);
	
	ЗагрузкаСпискаВведенныхКодов();
	
	Закрыть();
	
КонецПроцедуры // Выгрузить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет состояние формы при изменении
// реквизита "ОснованиеПлатежа".
//
&НаКлиенте
Процедура ОбработкаИзмененияОснованияПлатежа()
	
	ВыбПериодичностьУплаты = ПериодичностьУплаты;
	ВыбОснованиеПлатежа    = ОснованиеПлатежа;
	СпОснованияПлатежа     = Элементы.ОснованиеПлатежа.СписокВыбора;
	ИндВыбОснованиеПлатежа = СпОснованияПлатежа.Индекс(СпОснованияПлатежа.НайтиПоЗначению(ОснованиеПлатежа));
	
	ЗнВидНомераДокументаПлатежа = ВидНомераДокументаПлатежа.НайтиПоЗначению(ИндВыбОснованиеПлатежа);
	Элементы.НомерДокумента1.Заголовок = ?(ЗнВидНомераДокументаПлатежа = Неопределено,"", СтрЗаменить(ЗнВидНомераДокументаПлатежа.Представление, ":", ""));
	Элементы.НомерДокумента2.Заголовок = Элементы.НомерДокумента1.Заголовок;
	
	ЗнВидДатыДокументаПлатежа  = ВидДатыДокументаПлатежа.НайтиПоЗначению(ИндВыбОснованиеПлатежа);
	Элементы.ДатаДокумента1.Заголовок = ?(ЗнВидДатыДокументаПлатежа = Неопределено,"", СтрЗаменить(ЗнВидДатыДокументаПлатежа.Представление, ":", ""));
	Элементы.ДатаДокумента2.Заголовок = Элементы.ДатаДокумента1.Заголовок;
	Элементы.ДатаДокумента3.Заголовок = Элементы.ДатаДокумента1.Заголовок;
	
	Если СтатусСоставителя = "15" Тогда
		Элементы.СтраницыПоказательНалоговогоПериода.ТекущаяСтраница = Элементы.Страница4;
	Иначе
		
		Если СтрНайти("ТП", ВыбОснованиеПлатежа) > 0 Тогда
			
			Если СтрНайти("-", ВыбПериодичностьУплаты) > 0 Тогда
				ТекущаяПанельСтраница = Элементы.Страница1;
				РекДатыДокумента  = "ДатаДокумента1";
				Элементы.СтраницыПлатежей.ТекущаяСтраница = Элементы.СтраницаДатаПоказателя;
			Иначе
				ТекущаяПанельСтраница = Элементы.Страница1;
				РекДатыДокумента  = "ДатаДокумента1";
				Элементы.СтраницыПлатежей.ТекущаяСтраница = Элементы.СтраницаПериодИГодПлатежа;
			КонецЕсли;
			Элементы.СтраницыПоказательНалоговогоПериода.ТекущаяСтраница = ТекущаяПанельСтраница;
			Элементы[РекДатыДокумента].Видимость = Истина;
			
		ИначеЕсли СтрНайти("БФ", ВыбОснованиеПлатежа) > 0 Тогда
			
			Если СтрНайти("-", ВыбПериодичностьУплаты) > 0 Тогда
				ТекущаяПанельСтраница = Элементы.Страница3;
				РекДатыДокумента  = "ДатаДокумента3";
				Элементы.СтраницыПлатежей1.ТекущаяСтраница = Элементы.СтраницаДатаПоказателя1;
			Иначе
				ТекущаяПанельСтраница = Элементы.Страница3;
				РекДатыДокумента  = "ДатаДокумента3";
				Элементы.СтраницыПлатежей1.ТекущаяСтраница = Элементы.СтраницаПериодИГодПлатежа1;
			КонецЕсли;
			Элементы.СтраницыПоказательНалоговогоПериода.ТекущаяСтраница = ТекущаяПанельСтраница;
			Элементы[РекДатыДокумента].Видимость = Ложь;
			
		ИначеЕсли СтрНайти("ЗД", ВыбОснованиеПлатежа) > 0 Тогда
			
			Если СтрНайти("-", ВыбПериодичностьУплаты) > 0 Тогда
				ТекущаяПанельСтраница = Элементы.Страница1;
				РекДатыДокумента  = "ДатаДокумента1";
				Элементы.СтраницыПлатежей.ТекущаяСтраница = Элементы.СтраницаДатаПоказателя;
			Иначе
				ТекущаяПанельСтраница = Элементы.Страница1;
				РекДатыДокумента  = "ДатаДокумента1";
				Элементы.СтраницыПлатежей.ТекущаяСтраница = Элементы.СтраницаПериодИГодПлатежа;
			КонецЕсли;
			Элементы.СтраницыПоказательНалоговогоПериода.ТекущаяСтраница = ТекущаяПанельСтраница;
			Элементы[РекДатыДокумента].Видимость = Ложь;
			
		ИначеЕсли СтрНайти("АП, АР", ВыбОснованиеПлатежа) > 0 Тогда
			
			ЗнВидДатыОснованияПлатежа = ВидДатыОснованияПлатежа.НайтиПоЗначению(ИндВыбОснованиеПлатежа);
			Элементы.ДатаПлатежа1.Заголовок = ?(ЗнВидДатыОснованияПлатежа = Неопределено,"", СтрЗаменить(ЗнВидДатыОснованияПлатежа.Представление, ":", ""));
			
			ТекущаяПанельСтраница = Элементы.Страница2;
			Элементы.СтраницыПоказательНалоговогоПериода.ТекущаяСтраница = ТекущаяПанельСтраница;
			Элементы.ДатаПлатежа1.Видимость  = Ложь;
			
		Иначе
			
			ЗнВидДатыОснованияПлатежа = ВидДатыОснованияПлатежа.НайтиПоЗначению(ИндВыбОснованиеПлатежа);
			Элементы.ДатаПлатежа1.Заголовок = ?(ЗнВидДатыОснованияПлатежа = Неопределено,"", СтрЗаменить(ЗнВидДатыОснованияПлатежа.Представление, ":", ""));
			
			ТекущаяПанельСтраница = Элементы.Страница2;
			Элементы.СтраницыПоказательНалоговогоПериода.ТекущаяСтраница = ТекущаяПанельСтраница;
			Элементы.ДатаПлатежа1.Видимость  = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияОснованияПлатежа()

// Определяет состояние формы при изменении
// реквизита "СтатусСоставителя".
//
&НаКлиенте
Процедура ОбработкаИзмененияСтатусСоставителя()
	
	СписокОснованиеПлатежа = Элементы.ОснованиеПлатежа.СписокВыбора;
	ЗначениеОснования0     = СписокОснованиеПлатежа.НайтиПоЗначению("0");
	СписокТипПлатежа       = Элементы.ТипПлатежа.СписокВыбора;
	ЗначениеТип0           = СписокТипПлатежа.НайтиПоЗначению("0");
	ВыбСтатусСоставителя   = СтатусСоставителя;
	
	Если СтрНайти("06, 07",ВыбСтатусСоставителя) > 0  Тогда
		Если ЗначениеОснования0 = Неопределено Тогда
			СписокОснованиеПлатежа.Добавить("0", НСтр("ru = '0 - Конкретное значение указать невозможно'"));
			СписокТипПлатежа.Добавить("0", НСтр("ru = '0 - Конкретное значение указать невозможно'"));
		КонецЕсли;
	Иначе
		Если НЕ (ЗначениеОснования0 = Неопределено) Тогда
			Если П106 = "0" Тогда
				ОснованиеПлатежа = СписокТипПлатежа[1];
				ОбработкаИзмененияОснованияПлатежа();
			КонецЕсли;
			СписокОснованиеПлатежа.Удалить(ЗначениеОснования0);
			Если П110 = "0" Тогда
				ТипПлатежа = СписокТипПлатежа[1];
			КонецЕсли;
			Если НЕ(ЗначениеТип0 = Неопределено) Тогда
				СписокТипПлатежа.Удалить(ЗначениеТип0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаИзмененияСтатусСоставителя()

// Определяет состояние формы при изменении
// реквизита "ПериодичностьУплаты".
//
&НаКлиенте
Процедура ОбработкаИзмененияПериодичностьУплаты()

	ВыбПериодичностьУплаты = ПериодичностьУплаты;
	Если СтрНайти("Д1, Д2, Д3, МС", ВыбПериодичностьУплаты) > 0 Тогда
		Элементы.ПериодПлатежа1.Заголовок = "Месяц";
		Элементы.ПериодПлатежа1.Видимость = Истина;
		Элементы.ПериодПлатежа2.Заголовок = "Месяц";
		Элементы.ПериодПлатежа2.Видимость = Истина;
		СформироватьСписокВыбораПериодаПлатежа("МС");
	ИначеЕсли СтрНайти("КВ", ВыбПериодичностьУплаты) > 0 Тогда
		Элементы.ПериодПлатежа1.Заголовок = "Квартал";
		Элементы.ПериодПлатежа1.Видимость = Истина;
		Элементы.ПериодПлатежа2.Заголовок = "Квартал";
		Элементы.ПериодПлатежа2.Видимость = Истина;
		СформироватьСписокВыбораПериодаПлатежа("КВ");
	ИначеЕсли СтрНайти("ПЛ", ВыбПериодичностьУплаты) > 0 Тогда
		Элементы.ПериодПлатежа1.Заголовок = "Полугодие";
		Элементы.ПериодПлатежа1.Видимость = Истина;
		Элементы.ПериодПлатежа2.Заголовок = "Полугодие";
		Элементы.ПериодПлатежа2.Видимость = Истина;
		СформироватьСписокВыбораПериодаПлатежа("ПЛ");
	Иначе
		Элементы.ПериодПлатежа1.Видимость = Ложь;
		Элементы.ПериодПлатежа2.Видимость = Ложь;
		СформироватьСписокВыбораПериодаПлатежа("Год");
		ПериодПлатежа = 00;
	КонецЕсли;
	Если СтрНайти("ТП, ЗД", П106) > 0 Тогда
		Если СтрНайти("-", ВыбПериодичностьУплаты) > 0 Тогда
			ТекущаяПанельСтраница = Элементы.Страница1;
			Элементы.СтраницыПлатежей.ТекущаяСтраница = Элементы.СтраницаДатаПоказателя;
		Иначе
			ТекущаяПанельСтраница = Элементы.Страница1;
			Элементы.СтраницыПлатежей.ТекущаяСтраница = Элементы.СтраницаПериодИГодПлатежа;
		КонецЕсли;
		Элементы.СтраницыПоказательНалоговогоПериода.ТекущаяСтраница = ТекущаяПанельСтраница;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияПериодичностьУплаты()

// обработка изменения периодичности уплаты БФ
//
&НаКлиенте
Процедура ОбработкаИзмененияПериодичностьУплатыБФ()

	ВыбПериодичностьУплаты = ПериодичностьУплаты;
	Если СтрНайти("МС", ВыбПериодичностьУплаты) > 0 Тогда
		Элементы.ПериодПлатежа1.Заголовок = "Месяц";
		Элементы.ПериодПлатежа2.Заголовок = "Месяц";
		Элементы.ПериодПлатежа2.Доступность = Истина;
	ИначеЕсли СтрНайти("КВ", ВыбПериодичностьУплаты) > 0 Тогда
		Элементы.ПериодПлатежа1.Заголовок = "Квартал";
		Элементы.ПериодПлатежа2.Заголовок = "Квартал";
		Элементы.ПериодПлатежа2.Доступность = Истина;
	ИначеЕсли СтрНайти("ПЛ", ВыбПериодичностьУплаты) > 0 Тогда
		Элементы.ПериодПлатежа1.Заголовок = "Полугодие";
		Элементы.ПериодПлатежа2.Заголовок = "Полугодие";
		Элементы.ПериодПлатежа2.Доступность = Истина;
	Иначе
		Элементы.ПериодПлатежа2.Доступность = Ложь;
		ПериодПлатежа = 00;
	КонецЕсли;
	
	Если СтрНайти("-", ВыбПериодичностьУплаты) > 0 Тогда
		Элементы.СтраницыПлатежей1.ТекущаяСтраница = Элементы.СтраницаДатаПоказателя1;
	Иначе
		Элементы.СтраницыПлатежей1.ТекущаяСтраница = Элементы.СтраницаПериодИГодПлатежа1;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияПериодичностьУплаты()

// Процедура, которая заполняет список выбора у реквизитов
//
&НаСервере
Функция СформироватьСписокВыбораПлатежа(Период)
	
	МассивСписковВидовПлатежей = Новый Массив;
	
	МассивСписковВидовПлатежей.Добавить(Документы.ПлатежноеПоручение.СтатусыОтправителя(Период));
	МассивСписковВидовПлатежей.Добавить(Документы.ПлатежноеПоручение.ОснованияПлатежа(Период));
	МассивСписковВидовПлатежей.Добавить(Документы.ПлатежноеПоручение.ПоказателиТипа(Период));
	
	Возврат МассивСписковВидовПлатежей;
	
КонецФункции // СформироватьСписокВыбораПлатежа()

// Обработчик для получения списка ранее введенных кодов ОКТМО и БК
//
&НаСервере
Процедура ПолучениеСпискаВведенныхКодов()
	
	СписокКодовБК    = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Документы.ПлатежноеПоручение.Формы.ПеречислениеНалога", "СписокКодовБК", Неопределено);
	СписокКодовОКТМО = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Документы.ПлатежноеПоручение.Формы.ПеречислениеНалога", "СписокКодовОКТМО", Неопределено);
	
	Если ТипЗнч(СписокКодовБК) <> Тип("СписокЗначений") Тогда
		СписокКодовБК	 = Новый СписокЗначений;
	Иначе
		Для Индекс = 0 По СписокКодовБК.Количество() - 1 Цикл
			Элементы.КодБК.СписокВыбора.Добавить(СписокКодовБК[Индекс].Значение, СписокКодовБК[Индекс].Представление);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(СписокКодовОКТМО) <> Тип("СписокЗначений") Тогда
		СписокКодовОКТМО = Новый СписокЗначений;
	Иначе
		Для Индекс = 0 По СписокКодовОКТМО.Количество() - 1 Цикл
			Элементы.КодОКТМО.СписокВыбора.Добавить(СписокКодовОКТМО[Индекс].Значение, СписокКодовОКТМО[Индекс].Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПолучениеСпискаВведенныхКодов()

// Обработчик для сохранения списка ранее введенных кодов ОКТМО и БК
//
&НаСервере
Процедура ЗагрузкаСпискаВведенныхКодов()
	
	// Запоминаем введенный код бюджетной классификации
	Если НЕ ПустаяСтрока(П104) Тогда
		ЗнПоиска = СписокКодовБК.НайтиПоЗначению(СокрЛП(П104));
		Если ЗнПоиска = Неопределено Тогда
			СписокКодовБК.Вставить(0, СокрЛП(П104));
			
			Если СписокКодовБК.Количество() > 10 Тогда
				СписокКодовБК.Удалить(СписокКодовБК.Количество() - 1);
			КонецЕсли;
			
			ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("Документы.ПлатежноеПоручение.Формы.ПеречислениеНалога", "СписокКодовБК", СписокКодовБК);
			
		КонецЕсли;
	КонецЕсли;
	
	// Запоминаем введенный код ОКТМО
	Если НЕ ПустаяСтрока(П105) Тогда
		ЗнПоиска = СписокКодовОКТМО.НайтиПоЗначению(СокрЛП(П105));
		Если ЗнПоиска = Неопределено Тогда
			СписокКодовОКТМО.Вставить(0, СокрЛП(П105));
			
			Если СписокКодовОКТМО.Количество() > 10 Тогда
				СписокКодовОКТМО.Удалить(СписокКодовОКТМО.Количество() - 1);
			КонецЕсли;
			
			ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("Документы.ПлатежноеПоручение.Формы.ПеречислениеНалога", "СписокКодовОКТМО", СписокКодовОКТМО);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучениеСпискаВведенныхКодов()

// Формирует список выбора значения периода платежа
//
&НаКлиенте
Процедура СформироватьСписокВыбораПериодаПлатежа(Периодичность)
	
	Элементы.ПериодПлатежа1.СписокВыбора.Очистить();
	Элементы.ПериодПлатежа2.СписокВыбора.Очистить();
	
	Если Периодичность = "МС" Тогда
		
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("01", "Январь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("02", "Февраль");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("03", "Март");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("04", "Апрель");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("05", "Май");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("06", "Июнь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("07", "Июль");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("08", "Август");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("09", "Сентябрь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("10", "Октябрь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("11", "Ноябрь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("12", "Декабрь");
		
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("01", "Январь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("02", "Февраль");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("03", "Март");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("04", "Апрель");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("05", "Май");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("06", "Июнь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("07", "Июль");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("08", "Август");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("09", "Сентябрь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("10", "Октябрь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("11", "Ноябрь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("12", "Декабрь");
		
	ИначеЕсли Периодичность = "КВ" Тогда
		
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("01", "Январь - Март");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("02", "Апрель - Июнь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("03", "Июль - Сентябрь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("04", "Октябрь - Декабрь");
		
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("01", "Январь - Март");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("02", "Апрель - Июнь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("03", "Июль - Сентябрь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("04", "Октябрь - Декабрь");
		
	ИначеЕсли Периодичность = "ПЛ" Тогда
		
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("01", "Январь - Июнь");
		Элементы.ПериодПлатежа1.СписокВыбора.Добавить("02", "Июль - Декабрь");
		
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("01", "Январь - Июнь");
		Элементы.ПериодПлатежа2.СписокВыбора.Добавить("02", "Июль - Декабрь");
		
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

// Формирует строковые значения параметров П101, П104
// П105,П106,П107,П108,П109,П110,
//
&НаКлиенте
Процедура СформироватьТекстыПолей()
	
	П101 = СтатусСоставителя;
	П104 = КодБК;
	П105 = КодОКТМО;
	Если П101 = "08" Тогда
		П106 = "0";
		П107 = "";
		П108 = "0";
		П109 = "";
		П110 = "0";
	Иначе
		П106 = ОснованиеПлатежа; 
		Если СтрНайти("ТП,БФ", П106) > 0 Тогда
			
			Если ПериодичностьУплаты = "-" Тогда
				П107 = Строка(Формат(ДатаПоказателя,"ДЛФ=D"));
			Иначе
				СтрПериодПл = ?(СтрДлина(СокрЛП(ПериодПлатежа)) = 1,"0" + ПериодПлатежа,ПериодПлатежа);
				П107 = ПериодичностьУплаты + "." + СтрПериодПл + "." +  Формат(ГодПлатежа,"ДФ=гггг");
			КонецЕсли;
			Если П106 = "БФ" Тогда
				П108 = Строка(НомерДокумента);
				Если ПустаяСтрока(П108) Тогда
					П108 = "0";
				КонецЕсли;
				
			Иначе
				П108 = "0";
			КонецЕсли;
			
			П109 = Строка(Формат(ДатаДокумента,"ДЛФ=D"));
			
		ИначеЕсли СтрНайти("ЗД", П106) > 0 Тогда
			Если ПериодичностьУплаты = "-" Тогда
				П107 = Строка(Формат(ДатаПоказателя,"ДЛФ=D"));
			Иначе
				СтрПериодПл = ?(СтрДлина(СокрЛП(ПериодПлатежа)) = 1,"0" + СокрЛП(ПериодПлатежа),СокрЛП(ПериодПлатежа));
				П107 = ПериодичностьУплаты + "." + СтрПериодПл + "." 
				+ Формат(ГодПлатежа,"ЧЦ=4");
			КонецЕсли;
			П108 = "0";
			П109 = "";
		ИначеЕсли СтрНайти("АП, АР", П106) > 0 Тогда
			П107 = "";
			П108 = Строка(НомерДокумента);
			П109 = Строка(Формат(ДатаДокумента,"ДЛФ=D"));
		Иначе
			П107 = Строка(Формат(ДатаПлатежа,"ДЛФ=D"));
			П108 = Строка(НомерДокумента); 
			П109 = Строка(Формат(ДатаДокумента,"ДЛФ=D"));
		КонецЕсли;
		П110 = ТипПлатежа;
	КонецЕсли;
	
	ТекстПоказателяПериода = П107;
КонецПроцедуры // СформироватьТекстыПолей()

#КонецОбласти

