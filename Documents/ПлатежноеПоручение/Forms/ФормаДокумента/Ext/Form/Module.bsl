///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Платежное поручение"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	НастроитьСписокВыбораКодВидаДохода();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СформироватьСпискиВыбора();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ПлатежноеПоручение.Форма.ВводПериода" Тогда
		Объект.ПоказательПериода = ВыбранноеЗначение;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ПлатежноеПоручение", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
    	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура("ПоказательПериода, ПоказательОснования",
	Объект.ПоказательПериода,
	Объект.ПоказательОснования);
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ВводПериода", ПараметрыПодбора,ЭтотОбъект,,,,, 
													РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.ДатаПриИзменении(Объект, ПараметрыДействия);
	УстановитьВидимостьКодаВидаДохода(ЭтотОбъект);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.ХозОперацияПриИзменении(Объект, ПараметрыДействия);

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.СчетОрганизацииПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры 

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СчетОрганизацииПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ПеречислениеНалогаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.ПеречислениеНалогаПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПеречислениеНалогаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПеречислениеНалогаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры  

#Область ОбработчикиСобытийЭлементовСтраницыОсновная

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры 

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.СуммаНДСПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)

	СуммаНДСПриИзмененииНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СтатьяДДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПлатежноеПоручение.СтатьяДДСПриИзменении(Объект, ПараметрыДействия); 
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере(); 
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)

	ПараметрыДействия = Новый Структура;
	СтатьяДДСПриИзмененииНаСервере(ПараметрыДействия);
			
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	СписокВидов = ПолучитьВидыДокументов();
	// выбираем вид
	ВыбранныйВидДокумента = Неопределено;
	Если СписокВидов.Количество() > 1 Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ВыбратьДокументПоВиду", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОбработчикОповещения, СписокВидов, Команда);
	ИначеЕсли СписокВидов.Количество() = 1 Тогда
		ВыбратьДокументПоВиду(СписокВидов[0]);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПеречислениеНалога(Команда)
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ПеречислениеНалога", 
			Новый Структура("ТипДокумента", "ПлатежноеПоручение"), 
				ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьВидыДокументов()
	
	МассивВидов = ПланыВидовХарактеристик.ТипыСделок.ПолучитьРазрешенныеТипыСделок(Ложь, Истина);
	СписокТиповСделок = Новый СписокЗначений;
	
	Для Счетчик = 0 По МассивВидов.ВГраница() Цикл
		ПустоеЗначение = Новый (МассивВидов[Счетчик]);
		Если СписокТиповСделок.НайтиПоЗначению(ПустоеЗначение.Метаданные().Имя) = Неопределено Тогда
			СписокТиповСделок.Добавить(ПустоеЗначение.Метаданные().Имя, ПустоеЗначение.Метаданные().Синоним);
		КонецЕсли;
	КонецЦикла;
	
	СписокТиповСделок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокТиповСделок;
	
КонецФункции 

&НаКлиенте
Процедура ВыбратьДокументПоВиду(ВидДокумента, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВидДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Установим отбор на формы списка выбора документа
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Отбор.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Отбор.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	КонецЕсли;
	// Инициализируем параметры
	ПараметрыФормы = Новый Структура("РежимВыбора, Отбор", Истина, Отбор);
	ОбработчикОповещения = Новый ОписаниеОповещения("ФормированиеНачисленияПлатежаПоДокументу", 
					ЭтотОбъект, Новый Структура("ВидДокумента", ВидДокумента.Значение));
	// Откроем форму выбора
	ОткрытьФорму("Документ." + ВидДокумента.Значение + ".ФормаСписка", ПараметрыФормы, 
					ЭтотОбъект,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФормированиеНачисленияПлатежаПоДокументу(Документ, ДополнительныеПараметры) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеНачисленияПлатежаПоДокументуНаСервере(Документ, ДополнительныеПараметры.ВидДокумента);
	
КонецПроцедуры 

&НаСервере
Процедура ФормированиеНачисленияПлатежаПоДокументуНаСервере(Документ, ВидДокумента)
	
	// Определяем строку с НДС - ставки НДС и суммы НДС
	СтрокаНДС = "";
	
	Если ЕстьРеквизит(Документ, , "Товары") И ЕстьРеквизит(Документ, "СтавкаНДС", "Товары") 
												И ЕстьРеквизит(Документ, "СуммаНДС", "Товары") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ДокументТовары.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
		|	СУММА(ДокументТовары.СуммаНДС)  КАК СуммаНДС
		|ИЗ
		|	Документ." + СокрЛП(ВидДокумента) + ".Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &Ссылка
		|   И СуммаНДС <> 0
		|СГРУППИРОВАТЬ ПО
		|   ЕСТЬNULL(ДокументТовары.СтавкаНДС.Ставка,0)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сумма  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаНДС, Документ.ВалютаДокумента, 
												Документ.КурсДокумента, Объект.ВалютаДокумента, Объект.КурсДокумента);
			СтрокаНДС = СтрокаНДС + " НДС(" + СокрЛП(Выборка.СтавкаНДС) + "%) " 
									+ Формат(Выборка.СуммаНДС, "ЧЦ=10; ЧДЦ=2") + " " + СокрЛП(Объект.ВалютаДокумента);
		КонецЦикла;
	КонецЕсли;
	
	Объект.НазначениеПлатежа = Объект.НазначениеПлатежа
						+ Символы.ПС + СокрЛП(Документ.Метаданные().Синоним) 
						+ " №" + СокрЛП(Документ.Номер)
						+ " от " + Формат(Документ.Дата, "ДФ=дд") + "."
						+ Формат(Документ.Дата, "ДФ=ММ") + "."
						+ Формат(Документ.Дата, "ДФ=гггг")
						+ СтрокаНДС;
	
КонецПроцедуры 

&НаКлиенте
Процедура СформироватьСпискиВыбора()
	
	Элементы.ПоказательТипа.СписокВыбора.Очистить();
	Элементы.ПоказательТипа.СписокВыбора.Добавить("НС", НСтр("ru = 'НС - уплата налога или сбора'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("ПЛ", НСтр("ru = 'ПЛ - уплата платежа'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("ГП", НСтр("ru = 'ГП - уплата пошлины'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("ВЗ", НСтр("ru = 'ВЗ - уплата взноса'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("АВ", НСтр("ru = 'АВ - уплата аванса или предоплата (в том числе декадные платежи)'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("ПЕ", НСтр("ru = 'ПЕ - уплата пени'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("ПЦ", НСтр("ru = 'ПЦ - уплата процентов'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("СА", НСтр("ru = 'СА - налоговые санкции, установленные Налоговым кодексом РФ'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("АШ", НСтр("ru = 'АШ - административные штрафы'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("ИШ", НСтр("ru = 'ИШ - иные штрафы, установленные соответствующими нормативными актами'"));
	Элементы.ПоказательТипа.СписокВыбора.Добавить("0",  НСтр("ru = '0 - Конкретное значение указать невозможно'"));
	
	Элементы.ПоказательОснования.СписокВыбора.Очистить();
	СписокОснований = СформироватьСписокОснований(Объект.Дата);
	
	Для Индекс = 0 По СписокОснований.Количество() - 1 Цикл
		Элементы.ПоказательОснования.СписокВыбора.Добавить(СписокОснований[Индекс].Значение, СписокОснований[Индекс].Представление);
	КонецЦикла;
	
	Элементы.СтатусСоставителя.СписокВыбора.Очистить(); 	
	СписокСтатусов = СформироватьСписокСтатусов(Объект.Дата);

	Для Индекс = 0 По СписокСтатусов.Количество() - 1 Цикл
		Элементы.СтатусСоставителя.СписокВыбора.Добавить(СписокСтатусов[Индекс].Значение, СписокСтатусов[Индекс].Представление);
	КонецЦикла;

КонецПроцедуры  

&НаСервере
Функция СформироватьСписокСтатусов(Период);  
	Возврат Документы.ПлатежноеПоручение.СтатусыОтправителя(Период);	
КонецФункции   

&НаСервере
Функция СформироватьСписокОснований(Период);  
	Возврат Документы.ПлатежноеПоручение.ОснованияПлатежа(Период);	
КонецФункции  

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.СчетКонтрагента.ПараметрыВыбора, 
			"Отбор.Владелец", Объект.Организация);  
	Иначе 
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.СчетКонтрагента.ПараметрыВыбора, 
			"Отбор.Владелец", Объект.Контрагент);  
	КонецЕсли;
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия 
	ЭтоПеремещение = Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации;  
	Элементы.ПеречислениеНалога.Доступность = Не ЭтоПеремещение;
	Элементы.Контрагент.Видимость 			= Не ЭтоПеремещение;
	Элементы.ДоговорВзаиморасчетов.Видимость = Не ЭтоПеремещение;
	Элементы.ДекорацияОтступ.Видимость 		= НЕ ЭтоПеремещение; 
    Элементы.ДекорацияОтступПраво.Видимость = Не ЭтоПеремещение;
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	УстановитьВидимостьКодаВидаДохода(ЭтотОбъект);
	Элементы.СтраницаПеречислениеНалога.Видимость = Объект.ПеречислениеНалога;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УИНПлатежа",
		"Видимость",
		НЕ Объект.ПеречислениеНалога
	);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, 
																					ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, 
																					ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область КодВидаДохода

&НаСервере
Процедура НастроитьСписокВыбораКодВидаДохода()
	
	СписокВыбора = Элементы.КодВидаДохода.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("", НСтр("ru = 'разрешено, без ограничения по сумме'"));
	
	СписокВыбора.Добавить("1", НСтр("ru = '1 - разрешено с ограничением по сумме'"));
	Если ОбменСБанкамиКлиентСервер.ВступилиВСилуИзменения353ФЗ(Объект.Дата) Тогда
		СписокВыбора.Добавить("2", НСтр("ru = '2 - запрещено без оговорок для периодических выплат'"));
		СписокВыбора.Добавить("3", НСтр("ru = '3 - запрещено кроме алиментов для периодических выплат'"));
		СписокВыбора.Добавить("4", НСтр("ru = '4 - запрещено без оговорок для единовременных выплат'"));
		СписокВыбора.Добавить("5", НСтр("ru = '5 - запрещено кроме алиментов для единовременных выплат'"));
	Иначе
		СписокВыбора.Добавить("2", НСтр("ru = '2 - запрещено без оговорок'"));
		СписокВыбора.Добавить("3", НСтр("ru = '3 - запрещено кроме алиментов'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможноВзысканиеСПеречисленияФизлицу(Знач Дата, Контрагент)
	
	Дата = ?(Дата = '00010101', ТекущаяДатаСеанса(), Дата);
	
	Результат = Ложь;
	
	Результат =
		Не Контрагент.Пустая()
		И Контрагент.ФормаСобственности = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьВидимостьКодаВидаДохода(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ВозможноВзысканиеСПеречисленияФизлицу = ВозможноВзысканиеСПеречисленияФизлицу(
		Объект.Дата,
		Объект.Контрагент
	);
	
	Элементы.КодВидаДохода.Видимость = ВозможноВзысканиеСПеречисленияФизлицу;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти