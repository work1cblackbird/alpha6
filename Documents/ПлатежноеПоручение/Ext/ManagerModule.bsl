// Модуль менеджера документа "Платежное поручение"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента" , Объект.СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС"    , Объект.СуммаНДС);
	ИтогиОперации.Вставить("СуммаБезНДС" , ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Возвращает список статусов отправителя п/п.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы со статусами отправителя.
//
Функция СтатусыОтправителя(Период) Экспорт
		
	Список = Новый СписокЗначений;
	
	Если  Период >= '20230101' Тогда 
			
		Список.Добавить("01", НСтр("ru = '01 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами)'"));
		Список.Добавить("02", НСтр("ru = '02 - налогоплательщик – юр.лицо, ИП, представивший уведомление об исчисленных суммах налогов и взносов в виде распоряжения на перевод ден.средств в бюджет'"));  
	Иначе
		
		Список.Добавить("01", НСтр("ru = '01 - налогоплательщик (плательщик сборов) - юридическое лицо'"));
		Список.Добавить("02", НСтр("ru = '02 - налоговый агент'"));  

	КонецЕсли;
	
	Список.Добавить("03", НСтр("ru = '03 - организация федеральной почтовой связи, составившая распоряжение по каждому платежу физического лица'"));
	Список.Добавить("04", НСтр("ru = '04 - налоговый орган'"));
	Список.Добавить("05", НСтр("ru = '05 - территориальные органы Федеральной службы судебных приставов'"));
	Список.Добавить("06", НСтр("ru = '06 - участник внешнеэкономической деятельности'"));
	Список.Добавить("07", НСтр("ru = '07 - таможенный орган'"));
	Список.Добавить("08", НСтр("ru = '08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)'"));

	Если Не Период >= '20211001' Тогда   
		Список.Добавить("09", НСтр("ru = '09 - налогоплательщик (плательщик сборов) - индивидуальный предприниматель'"));
		Список.Добавить("10", НСтр("ru = '10 - налогоплательщик (плательщик сборов) - частный нотариус'"));
		Список.Добавить("11", НСтр("ru = '11 - налогоплательщик (плательщик сборов) - адвокат, учредивший адвокатский кабинет'"));
		Список.Добавить("12", НСтр("ru = '12 - налогоплательщик (плательщик сборов) - глава крестьянского (фермерского) хозяйства'"));
	КонецЕсли;
	
	Если  Период >= '20230101' Тогда	
		Список.Добавить("13", НСтр("ru = '13 - налогоплательщик (иностранное лицо), у которого отсутствует ИНН, для платежей, администрируемых налоговыми органами (кроме ЕНП)'"));	
	Иначе 
        Список.Добавить("13", НСтр("ru = '13 - налогоплательщик (плательщик сборов) – физическое лицо'"));
	КонецЕсли; 
	
	Если  Период >= '20170425' Тогда 
		 Список.Добавить("14", НСтр("ru = '14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)'"));		 
	КонецЕсли;
	
	Список.Добавить("15", НСтр("ru = '15 - кредитная организация (филиал кредитной организации), платежный агент, организация федеральной почтовой связи, составившие платежное поручение на общую сумму с реестром'"));
	Список.Добавить("16", НСтр("ru = '16 - участник внешнеэкономической деятельности - физическое лицо'"));  
	Список.Добавить("17", НСтр("ru = '17 - участник внешнеэкономической деятельности - индивидуальный предприниматель'")); 
	Список.Добавить("18", НСтр("ru = '18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей'"));
	Список.Добавить("19", НСтр("ru = '19 - организации, переводящие средства, удержанные из заработной платы на основании исполнительного документа'")); 
	Список.Добавить("20", НСтр("ru = '20 - кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение по каждому платежу физического лица'")); 
	Список.Добавить("21", НСтр("ru = '21 - ответственный участник консолидированной группы налогоплательщиков'"));  
	Список.Добавить("22", НСтр("ru = '22 - участник консолидированной группы налогоплательщиков'")); 
	Список.Добавить("23", НСтр("ru = '23 - Фонд социального страхования Российской Федерации'"));
	Список.Добавить("24", НСтр("ru = '24 - физическое лицо, осуществляющее перевод денежных средств в уплату сборов, страховых взносов, администрируемых ФСС, и иных платежей'"));
	Список.Добавить("25", НСтр("ru = '25 - банки – гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации за плательщика суммы налога на добавленную стоимость'"));
	Список.Добавить("26", НСтр("ru = '26 - учредители (участники) должника, собственники имущества должника – унитарного предприятия или третьи лица, составившие распоряжение на погашение задолженности по обязательным платежам, включенным в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве'"));	
	
	Если  Период >= '20171002' Тогда
		
		Список.Добавить("27",
			НСтр("ru = '27 - кредитные организации составившие распоряжение о переводе денежных средств, перечисленных из бюджетной системы РФ, не зачисленных получателю и подлежащих возврату в бюджетную систему РФ'"));
		Список.Добавить("28", НСтр("ru = '28 - участник внешнеэкономической деятельности - получатель международного почтового отправления'"));
	
	КонецЕсли; 
	
	Если  Период >= '20211001' Тогда	
		Список.Добавить("29", НСтр("ru = '29 - Политическая партия, избирательное объединение, зарегистрированный кандидат'"));
		Список.Добавить("30", НСтр("ru = '30 - Иностранное лицо, не состоящее на учете в налоговых органах РФ (при уплате платежей, администрируемых таможенными органами'"));		
	КонецЕсли;

    Если Период >= '20211231' Тогда
		Список.Добавить("31", НСтр("ru = '31 – физ.лицо, юр.лицо, ИП, осуществляющие перевод ден.средств в счет погашения задолженности по исп.производству'"));
	КонецЕсли;  
	
	Если Период >= '20231001' Тогда
		Список.Добавить("32", НСтр("ru = '32 - таможенный орган (в рамках бесспорного взыскания'"));
	КонецЕсли;

	Если  Период >= '20240101' Тогда
		Список.Добавить("33", НСтр("ru = '33 - плательщик - физ.лицо, юр.лицо, ИП, осуществляющие перевод ден.средств в счет оплаты гос.имущества, изъятых вещей, а также таможенного конфиската'"));
	КонецЕсли;

	Возврат Список;

КонецФункции // СтатусыОтправителя()

// Возвращает список основания платежа.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с основаниями платежа.
//
Функция ОснованияПлатежа(Период) Экспорт
		
	ОснованиеПлатежа = Новый СписокЗначений; 
	// основания налоговых платежей
	ОснованиеПлатежа.Добавить("ТП", НСтр("ru = 'ТП - платежи текущего года'"));
	ОснованиеПлатежа.Добавить("ЗД", НСтр("ru = 'ЗД - погашение задолженности по истекшим налоговым периодам'")); 
	
	Если Период < '20211001' Тогда 
		ОснованиеПлатежа.Добавить("ТР", НСтр("ru = 'ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа'"));
        ОснованиеПлатежа.Добавить("АП", НСтр("ru = 'АП - погашение задолженности по акту проверки'"));
        ОснованиеПлатежа.Добавить("АР", НСтр("ru = 'АР - погашение задолженности по исполнительному документу'"));
        ОснованиеПлатежа.Добавить("БФ", НСтр("ru = 'БФ - текущие платежи физических лиц - клиентов банка (владельцев счета), уплачиваемые со своего банковского счета'")); 
		ОснованиеПлатежа.Добавить("ПР", НСтр("ru = 'ПР - погашение задолженности, приостановленной к взысканию'"));
	КонецЕсли;

	ОснованиеПлатежа.Добавить("РС", НСтр("ru = 'РС - погашение рассроченной задолженности'"));
	ОснованиеПлатежа.Добавить("ОТ", НСтр("ru = 'ОТ - погашение отсроченной задолженности'"));
	ОснованиеПлатежа.Добавить("РТ", НСтр("ru = 'РТ - погашение реструктурируемой задолженности'")); 
	
	Если Период >= '20140204' Тогда
		ОснованиеПлатежа.Добавить("ИН", НСтр("ru = 'ИН – погашение инвестиционного налогового кредита'"));
		ОснованиеПлатежа.Добавить("ПБ", НСтр("ru = 'ПБ – погашение должником задолженности в ходе процедур, применяемых в деле о банкротстве'"));
		ОснованиеПлатежа.Добавить("ТЛ",
			НСтр("ru = 'ТЛ – погашение учредителем (участником) должника, собственником имущества должника – унитарного предприятия или третьим лицом задолженности в ходе процедур, применяемых в деле о банкротстве'"));
		ОснованиеПлатежа.Добавить("ЗТ", НСтр("ru = 'ЗТ – погашение текущей задолженности в ходе процедур, применяемых в деле о банкротстве'"));
	Иначе
		ОснованиеПлатежа.Добавить("ВУ", НСтр("ru = 'ВУ - погашение отсроченной задолженности в связи с введением внешнего управления'"));
	КонецЕсли;
	
	// оснвания таможенных платежей 
	
	ОснованиеПлатежа.Добавить("ПК", НСтр("ru = 'ПК - таможенный приходный ордер'"));	
	ОснованиеПлатежа.Добавить("КЭ" ,НСтр("ru = 'КЭ - квитанция физического лица - получателя товаров, перемещаемых в качестве экспресс-грузов'"));
	ОснованиеПлатежа.Добавить("УВ",
		НСтр("ru = 'УВ - уведомление о не уплаченных в установленный срок суммах таможенных платежей в соответствии со статьями 26-28 Федерального закона № 289-ФЗ'"));
	ОснованиеПлатежа.Добавить("ИЛ", НСтр("ru = 'ИЛ – исполнительный лист'"));
	ОснованиеПлатежа.Добавить("ПБ", НСтр("ru = 'ПБ - поручение таможенного органа на бесспорное взыскание'"));
	ОснованиеПлатежа.Добавить("ТГ", НСтр("ru = 'ТГ - требование об уплате денежных средств гарантирующим объединением (ассоциацией)'"));
	ОснованиеПлатежа.Добавить("ТБ",
		НСтр("ru = 'ТБ - требование об уплате суммы по банковской гарантии или договору поручительства, если уплата денежных средств производится по банковской гарантии'"));
	ОснованиеПлатежа.Добавить("ТД",
		НСтр("ru = 'ТД - требование об уплате суммы по банковской гарантии или договору поручительства, если уплата денежных средств производится по договору поручительства'"));
	ОснованиеПлатежа.Добавить("ПВ",
		НСтр("ru = 'ПВ - постановление о взыскании таможенных платежей, специальных, антидемпинговых, компенсационных пошлин, процентов и пени за счет имущества'"));
	
	ОснованиеПлатежа.Добавить("ИН", НСтр("ru = 'ИН - документ инкассации'"));
	
	ОснованиеПлатежа.Добавить("00", НСтр("ru = '00 - иные случаи'"));
	
	ОснованиеПлатежа.Добавить("0", НСтр("ru = '0 - Невозможно указать конкретное значение показателя'"));
	
	Возврат ОснованиеПлатежа;

КонецФункции // ОснованияПлатежа()

// Возвращает список статусов отправителя п/п.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы со статусами отправителя.
//
Функция ПоказателиТипа(Период) Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить("НС", НСтр("ru = 'НС - уплата налога или сбора'"));
	
	Если Период >= '20050101' Тогда
		Список.Добавить("ПЛ", НСтр("ru = 'ПЛ - уплата платежа'"));
		Список.Добавить("ГП", НСтр("ru = 'ГП - уплата пошлины'"));
		Список.Добавить("ВЗ", НСтр("ru = 'ВЗ - уплата взноса'"));
	КонецЕсли;
	
	Список.Добавить("АВ", НСтр("ru = 'АВ - уплата аванса или предоплата (в том числе декадные платежи)'"));
	Список.Добавить("ПЕ", НСтр("ru = 'ПЕ - уплата пени'"));
	Список.Добавить("ПЦ", НСтр("ru = 'ПЦ - уплата процентов'"));
	Список.Добавить("СА", НСтр("ru = 'СА - налоговые санкции, установленные Налоговым кодексом РФ'"));
	Список.Добавить("АШ", НСтр("ru = 'АШ - административные штрафы'"));
	Список.Добавить("ИШ", НСтр("ru = 'ИШ - иные штрафы, установленные соответствующими нормативными актами'"));
	Список.Добавить("0",  НСтр("ru = '0 - Конкретное значение указать невозможно'"));
	
	Возврат Список;

КонецФункции // ПоказателиТипа()

// Формирует назначение платежа
//
Процедура СформироватьНазначениеПлатежа(Объект) Экспорт

	Если Объект.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли; 
	
	ПозицияСуммы=СтрНайти(Объект.НазначениеПлатежа,"Сумма");
	
	Если ПозицияСуммы>0 Тогда
		ТекстНазначение=Лев(Объект.НазначениеПлатежа,ПозицияСуммы-2);
	Иначе
		ТекстНазначение=Объект.НазначениеПлатежа;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНазначение)
		ИЛИ ТекстНазначение = НСтр("ru = 'Оплата по:'") + Символы.НПП
		ИЛИ ТекстНазначение = НСтр("ru = 'Оплата по:'") + " " Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			ТекстНазначение = НСтр("ru = 'Оплата по договору'") + " " + Строка(Объект.ДоговорВзаиморасчетов);
		КонецЕсли;
	КонецЕсли; 
	
	ТекстСумма= НСтр("ru = 'Сумма'") + " " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
					+ Символы.ПС;
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) ИЛИ Объект.СтавкаНДС=Справочники.СтавкиНДС.БезНДС Тогда
		ТекстСумма = ТекстСумма + НСтр("ru = 'Без налога (НДС)'") + Символы.ПС;
	Иначе
		ТекстСумма = ТекстСумма + "НДС(" + Объект.СтавкаНДС + ") " + Формат(Объект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")+Символы.ПС;
	КонецЕсли; 
	
	Объект.НазначениеПлатежа=ТекстНазначение+Символы.ПС+ТекстСумма;
	
КонецПроцедуры // СформироватьНазначениеПлатежа()

// Установка банковского счета в соответствии с организацией
//
Процедура УстановитьБанковскийСчет(Объект, ПараметрыДействия)
	
	Результат = ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(Объект.СчетОрганизации,
												Объект.Организация, Объект.ПодразделениеКомпании);
	Если НЕ Результат Тогда
		Объект.СчетОрганизации = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
		СчетОрганизацииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // УстановитьБанковскийСчет()

// Проверяет операция документа - перемещение.
Функция ПроверитьВидОперацииПеремещение(Операция) Экспорт
	
	Если Операция = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации 	
	КонецЕсли;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("СчетКонтрагента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СчетОрганизации");
	
	ОперацияДокумента = Объект.СтатьяДДС.Операция;
	ЭтоПеремещение = ПроверитьВидОперацииПеремещение(ОперацияДокумента);
	
	Если НЕ ЭтоПеремещение Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	КонецЕсли;  
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СчетОрганизации");
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ИННПлательщика = Объект.Организация.ИНН;
		
		Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании) И ЗначениеЗаполнено(Объект.ПодразделениеКомпании.КПП) Тогда
			Объект.КПППлательщика = Объект.ПодразделениеКомпании.КПП;
		Иначе
			Объект.КПППлательщика = Объект.Организация.КПП;
		КонецЕсли;
		
		// Установим банковский счет
		УстановитьБанковскийСчет(Объект, ПараметрыДействия);
		
		Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ОсвобожденОтНДС Тогда
			Если Объект.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда
				Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
				СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
		Иначе
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
            Если ПараметрыНДС.ОсвобожденОтНДС Тогда
				Если Объект.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда
					Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
				КонецЕсли;
			Иначе
				Если Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					Объект.СтавкаНДС = ПараметрыНДС.ОсновнаяСтавка;
					СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Счет организации".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СчетОрганизацииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	НоваяВалюта       = Объект.СчетОрганизации.ВалютаДенежныхСредств;
	ВалютаИзменилась  = НоваяВалюта <> Объект.ВалютаДокумента;
	
	Если ВалютаИзменилась Тогда
		Объект.ВалютаДокумента = НоваяВалюта;
		ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
		
		Если НЕ ТипЗнч(Объект)=Тип("ДанныеФормыСтруктура") Тогда
			ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
		КонецЕсли;
		
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Обработка пересчета суммы документа.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПеречислениеНалогаПриИзменении(Объект, ПараметрыДействия) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	
КонецПроцедуры // ПеречислениеНалогаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
	СформироватьНазначениеПлатежа(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			Объект.ИННПолучателя = Объект.Контрагент.ГоловнойКонтрагент.ИНН;
		Иначе
			Объект.ИННПолучателя = Объект.Контрагент.ИНН;
		КонецЕсли;
		Объект.КПППолучателя = Объект.Контрагент.КПП;
		Если Объект.СчетКонтрагента.Владелец <> Объект.Контрагент Тогда
			Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Контрагент);
		КонецЕсли;
		Если Объект.Контрагент.ОсвобожденОтНДС Тогда
			Если Объект.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда
				Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
				СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	СформироватьНазначениеПлатежа(Объект);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
	СформироватьНазначениеПлатежа(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС".
//
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаНДСПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СформироватьНазначениеПлатежа(Объект);
	
КонецПроцедуры // СуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС".
//
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтатьяДДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Объект.ВидОперации = Объект.СтатьяДДС.Операция; 
	ВидОперацииПриИзменении(Объект, ПараметрыДействия);

КонецПроцедуры  

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС".
//
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидОперацииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПроверитьВидОперацииПеремещение(Объект.ВидОперации) Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		
		Объект.КПППолучателя = Объект.Организация.КПП;
		Объект.ИННПолучателя = Объект.Организация.ИНН;
		Объект.ТекстПолучателя = Объект.Организация.НаименованиеПолное;
		Объект.НазначениеПлатежа = "Перевод между счетами "
	Иначе 
		Объект.КПППолучателя = Объект.Контрагент.КПП;
		Объект.ИННПолучателя = Объект.Контрагент.ИНН;
		Объект.ТекстПолучателя = "";
	КонецЕсли;  
	
	СформироватьНазначениеПлатежа(Объект);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПлатежноеПоручение",
		"ПФ_MXL_ПлатежноеПоручение",
		НСтр("ru = 'Платежное поручение'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПлатежноеПоручение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПлатежноеПоручение",
															"ПлатежноеПоручение",
															ПечатьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "ПлатежноеПоручениеИсх"
//
Функция ПечатьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ЭтоПеремещение = ПроверитьВидОперацииПеремещение(Документ.ВидОперации);
		// проверка заполнения
		Если Документ.Организация.Пустая() Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана организация.'"));
			Возврат Неопределено;
		КонецЕсли;
	
		Если Документ.Контрагент.Пустая() И Не ЭтоПеремещение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан контрагент.'"));
			Возврат Неопределено;
		КонецЕсли;
	
		НомерПечать = ПолучитьНомерДляПечати(Документ);
	
		Если Прав(НомерПечать, 3)="000" Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Номер платежного поручения не может оканчиваться на ""000"".'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПлатежноеПоручение.ПФ_MXL_ПлатежноеПоручение");
		
		ОбластьЗаголовок       	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		
		МесяцПрописью	= Документ.СчетОрганизации.МесяцПрописью;
		СуммаБезКопеек	= Документ.СчетОрганизации.СуммаБезКопеек;
		ФорматДаты		= "ДФ=" + ?(МесяцПрописью = 1, НСтр("ru = ''дд ММММ гггг''"), "'дд.ММ.гггг'");
		БанкОрганизации	= ?(НЕ ЗначениеЗаполнено(Документ.СчетОрганизации.БанкДляРасчетов), Документ.СчетОрганизации.Банк, Документ.СчетОрганизации.БанкДляРасчетов);
		БанкКонтрагента	= ?(НЕ ЗначениеЗаполнено(Документ.СчетКонтрагента.БанкДляРасчетов), Документ.СчетКонтрагента.Банк, Документ.СчетКонтрагента.БанкДляРасчетов);
		
		ОбластьЗаголовок.Параметры.НаименованиеНомер	= "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
		ОбластьЗаголовок.Параметры.ДатаДокумента		= Формат(Документ.Дата,ФорматДаты);
		ОбластьЗаголовок.Параметры.ВидПлатежа			= ?(Документ.ВидПлатежа = "НеУказывать", НСтр("ru = 'Не указывать'"), Документ.ВидПлатежа);
		ОбластьЗаголовок.Параметры.СуммаЧислом			= ФорматироватьСумму(Документ.СуммаДокумента,СуммаБезКопеек);
		ОбластьЗаголовок.Параметры.СуммаПрописью		= РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаДокумента, Документ.ВалютаДокумента);
		
		ОбластьЗаголовок.Параметры.ПлательщикИНН		= "ИНН " 
			+ ?(ПустаяСтрока(Документ.ИННПлательщика), Документ.Организация.ИНН, СокрЛП(Документ.ИННПлательщика));
		ПеречислениеНалогатекст = ?(Документ.ПеречислениеНалога, "0", "");
		ОбластьЗаголовок.Параметры.ПлательщикКПП		= "КПП " 
			+ ?(ПустаяСтрока(Документ.КПППлательщика), ПеречислениеНалогатекст, СокрЛП(Документ.КПППлательщика));
		
		Если Документ.СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
			СтрКорреспондент = "";
		Иначе	
			СтрКорреспондент = " р/с " + Документ.СчетОрганизации.НомерСчета + " в " + Документ.СчетОрганизации.Банк 
				+ " " + Документ.СчетОрганизации.Банк.Город;	
		КонецЕсли;
		
		НаименованиеПолноеОрганизации = СокрЛП(
			РеквизитыСИсторией.ПолучитьНаименованияНаДату(Документ.Организация, Документ.Дата, "НаименованиеДляПечатныхФорм")
		);
		
		Если ЭтоПеремещение Тогда
			НаименованиеПолноеКонтрагента =	НаименованиеПолноеОрганизации;
		Иначе 
			НаименованиеПолноеКонтрагента = СокрЛП(
				РеквизитыСИсторией.ПолучитьНаименованияНаДату(Документ.Контрагент, Документ.Дата, "НаименованиеДляПечатныхФорм")
			);
		КонецЕсли;
		
		ТекстПлательщикПечать = ?(ПустаяСтрока(Документ.ТекстПлательщика),НаименованиеПолноеОрганизации,СокрЛП(Документ.ТекстПлательщика));
		
		ОбластьЗаголовок.Параметры.Плательщик			= ТекстПлательщикПечать;
		ОбластьЗаголовок.Параметры.БанкПлательщика		= "" + БанкОрганизации + " " + БанкОрганизации.Город;
		
		ОбластьЗаголовок.Параметры.НомерСчетаПлательщика	= ВернутьРасчетныйСчет(Документ.СчетОрганизации);
		
		ОбластьЗаголовок.Параметры.БикБанкаПлательщика	= БанкОрганизации.Код;
		ОбластьЗаголовок.Параметры.СчетБанкаПлательщика	= БанкОрганизации.КоррСчет;
		
		ОбластьЗаголовок.Параметры.ПолучательИНН			= "ИНН " 
			+ ?(ПустаяСтрока(Документ.ИННПолучателя), Документ.Контрагент.ИНН, СокрЛП(Документ.ИННПолучателя));
		ПеречислениеНалогаТекст = ?(Документ.ПеречислениеНалога, "0", "");	
		ОбластьЗаголовок.Параметры.ПолучательКПП			= "КПП " 
			+ ?(ПустаяСтрока(Документ.КПППолучателя), ПеречислениеНалогаТекст, СокрЛП(Документ.КПППолучателя));
		
		ОбластьЗаголовок.Параметры.Получатель			= 
			?(ПустаяСтрока(Документ.ТекстПолучателя), НаименованиеПолноеКонтрагента, СокрЛП(Документ.ТекстПолучателя));
		
		ОбластьЗаголовок.Параметры.БанкПолучателя		= "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
		ОбластьЗаголовок.Параметры.БикБанкаПолучателя	= БанкКонтрагента.Код;
		ОбластьЗаголовок.Параметры.СчетБанкаПолучателя	= БанкКонтрагента.КоррСчет;
		
		ОбластьЗаголовок.Параметры.НомерСчетаПолучателя	= ВернутьРасчетныйСчет(Документ.СчетКонтрагента);
		
		ОбластьЗаголовок.Параметры.НазначениеПлатежа		= СокрЛП(Документ.НазначениеПлатежа);
		ОбластьЗаголовок.Параметры.Очередность			= Документ.ОчередностьПлатежа;
		ОбластьЗаголовок.Параметры.СрокПлатежа			= "";
		
		ОбластьЗаголовок.Параметры.КодУИН				= ?(ПустаяСтрока(Документ.КодУИН), "0", Документ.КодУИН);
		
		Если Документ.ПеречислениеНалога Тогда
			Проверить(Документ);
			
			ОбластьЗаголовок.Параметры.СтатусСоставителя		= 
				?(ПустаяСтрока(Документ.СтатусСоставителя), "0", СокрЛП(Документ.СтатусСоставителя));
			ОбластьЗаголовок.Параметры.КодБК					= ?(ПустаяСтрока(Документ.КодБК), "", СокрЛП(Документ.КодБК));
			КодОКТМОДляПечати									= ?(ПустаяСтрока(Документ.КодОКТМО), "", СокрЛП(Документ.КодОКТМО));	
			Если НЕ ПустаяСтрока(КодОКТМОДляПечати) Тогда
				Пока СтрДлина(КодОКТМОДляПечати) < 11 Цикл
					КодОКТМОДляПечати = КодОКТМОДляПечати + "-";
				КонецЦикла; 
			КонецЕсли; 
			ОбластьЗаголовок.Параметры.КодОКТМО				= КодОКТМОДляПечати;

			ОбластьЗаголовок.Параметры.ПоказательОснования	= 
				?(ПустаяСтрока(Документ.ПоказательОснования), "0", СокрЛП(Документ.ПоказательОснования));
			ОбластьЗаголовок.Параметры.ПоказательНомера		= 
				?(ПустаяСтрока(Документ.ПоказательНомера), "0" , СокрЛП(Документ.ПоказательНомера));
			ОбластьЗаголовок.Параметры.ПоказательДаты		= 
				?(Документ.ПоказательДаты = '00010101000000', "0", Формат(Документ.ПоказательДаты, "ДЛФ=D"));
			ОбластьЗаголовок.Параметры.ПоказательТипа		= 
				?(ПустаяСтрока(Документ.ПоказательТипа), "0", СокрЛП(Документ.ПоказательТипа));
			Если (ПустаяСтрока(Документ.ПоказательПериода)) ИЛИ (Документ.ПоказательПериода = "  .  .    ") Тогда
				ОбластьЗаголовок.Параметры.ПоказательПериода = "0";
			Иначе
				ОбластьЗаголовок.Параметры.ПоказательПериода = СокрЛП(Документ.ПоказательПериода);
			КонецЕсли;
		Иначе
			ОбластьЗаголовок.Параметры.ПоказательТипа = СокрЛП(Документ.КодВыплат);
		КонецЕсли;
		
		// Код вида дохода
		Если ОбменСБанкамиКлиентСервер.ДействуетУказаниеБанкаРоссии5286У(Документ.Дата)
			И ЗначениеЗаполнено(Документ.КодВидаДохода) Тогда
			
			ОбластьЗаголовок.Параметры.КодВидаПлатежа = Документ.КодВидаДохода;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции //ПечатьПлатежноеПоручение()

Функция ПолучитьНомерДляПечати(Документ);
	
	СтрНомер = СокрЛП(Документ.Номер);
	Длина    = СтрДлина(СтрНомер);
	ЧисловойНомер = "";
	Для ин=1 По Длина Цикл
		Символ = Сред(СтрНомер,Длина-ин+1,1);
		Если СтрНайти("0123456789", Символ) Тогда
			ЧисловойНомер = Символ + ЧисловойНомер;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// удаление ведущих нулей
	Пока Лев(ЧисловойНомер, 1)="0" Цикл
		ЧисловойНомер = Сред(ЧисловойНомер, 2);
	КонецЦикла;
	
	Возврат ЧисловойНомер;
КонецФункции

// Проверяет правильность заполнения
//
// Возвращаемое значение:
//  Ошибка - строка - содержит описание ошибок заполнения.
//
Функция Проверить(Документ)

	Ошибка = Новый СписокЗначений();

	П101 = СокрЛП(Документ.СтатусСоставителя);
	П104 = СокрЛП(Документ.КодБК);
	П105 = СокрЛП(Документ.КодОКТМО);
	П106 = СокрЛП(Документ.ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(Документ.ПоказательПериода, ".", ""))) = 1, "", Документ.ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(Документ.ПоказательПериода, ".", "")) = "0", "", Документ.ПоказательПериода);
	П108 = СокрЛП(Документ.ПоказательНомера);
	П109 = Документ.ПоказательДаты;
	П110 = СокрЛП(Документ.ПоказательТипа);

	Если (СтрНайти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15", П101) = 0)
		ИЛИ (ПустаяСтрока(СокрЛП(П101))) Тогда

		Ошибка.Добавить("Неверное значение поля ""Статус составителя"".");
	КонецЕсли;

	Если (СтрЗаменить(П104, "0", "") = "") И (СтрНайти("06,07", П101) = 0) Тогда

		Ошибка.Добавить("Необходимо заполнить поле ""Код БК"".");
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		Ошибка.Добавить("Необходимо заполнить поле ""Код ОКТМО"".");
	КонецЕсли;

	// Проверяем в зависимости от статуса составителя
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Основание платежа"".");
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Период"".");
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Номер"".");
		КонецЕсли;
		Если ЗначениеЗаполнено(П109) Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Дата"".");
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Тип платежа"".");
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Ошибка.Добавить("Возможно, неверно заполнено поле ""Основание платежа"".");
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Ошибка.Добавить("При основании платежа ""АП"" или ""АР"" в поле ""Период"" необходимо указывать ""0"".");
			КонецЕсли;
		ИначеЕсли СтрНайти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ = "" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
							
				Если НЕ ГГ = "" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (СтрНайти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1) ИЛИ
						(ММ > 12) ИЛИ 
						(ГГ < 2000) ИЛИ
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
					КонецЕсли;
				ИначеЕсли (СтрНайти("КВ", ДД) > 0) Тогда
					Если (ММ < 1) ИЛИ
						(ММ > 4) ИЛИ 
						(ГГ < 2000) ИЛИ
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
							Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				ИначеЕсли (СтрНайти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1) ИЛИ
						(ММ > 2) ИЛИ 
						(ГГ < 2000) ИЛИ
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
							Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				ИначеЕсли (СтрНайти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0) ИЛИ
						(ГГ < 2000) ИЛИ
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
							Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				Ошибка.Добавить("При основании платежа ""ТП"" или ""ЗД"" в поле ""Номер"" необходимо указывать ""0"".");
			КонецЕсли;
			Если СтрНайти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "")<>"" Тогда
					Ошибка.Добавить("Не должна заполнятся дата");
				КонецЕсли;
			Иначе
				Если СтрЗаменить(П109, "0", "")<> "" Тогда
					Если НЕ ЗначениеЗаполнено(Дата(П109)) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ СтрНайти("БФ", П106) > 0 Тогда
			Ошибка.Добавить("Неверно указано значение в поле ""Основание платежа"".");
		КонецЕсли;
		Если (НЕ СтрЗаменить(П110, "0", "") = "") И (НЕ СтрНайти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0) Тогда
			Ошибка.Добавить("Некорректный тип платежа");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.КодУИН) И СтрДлина(Документ.КодУИН) <> 25 И Документ.КодУИН <> "0" Тогда
		Ошибка.Добавить("Неверно указано значение в поле ""Код УИН"".");
	КонецЕсли;
	
	// Выводим список найденных ошибок
	Для Ном = 0 По Ошибка.Количество() - 1 Цикл
		ОбщегоНазначения.СообщитьПользователю(Ошибка.Получить(Ном));
	КонецЦикла;

	Возврат Ошибка;

КонецФункции // Проверить()

// Определяет номер расчетного счета по
// переданному банковскому счету.
//
// Параметры:
//  СчетКонтрагента - справочник.БанковскиеСчета.
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)

	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;

КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок, СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПлатежноеПоручение);

КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняет заполнение реквизита "СчетКонтрагента".
Процедура ВыполнитьЗаполнениеСчетовКонтрагентов(Параметры) Экспорт

	ЗапросДокументов =
		Новый Запрос("ВЫБРАТЬ
		             |	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
		             |	ПлатежноеПоручение.Контрагент КАК Контрагент
		             |ПОМЕСТИТЬ ВТ_ПлатежныеПоручения
		             |ИЗ
		             |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		             |ГДЕ
		             |	ПлатежноеПоручение.СчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_ПлатежныеПоручения.ПлатежноеПоручение КАК ПлатежноеПоручение,
		             |	ВТ_ПлатежныеПоручения.Контрагент КАК Контрагент
		             |ИЗ
		             |	ВТ_ПлатежныеПоручения КАК ВТ_ПлатежныеПоручения
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ВТ_ПлатежныеПоручения.ПлатежноеПоручение.Дата
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	БанковскиеСчета.Владелец КАК Контрагент,
		             |	БанковскиеСчета.Ссылка КАК БанковскийСчет
		             |ИЗ
		             |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		             |ГДЕ
		             |	БанковскиеСчета.Владелец В
		             |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |				ВТ_ПлатежныеПоручения.Контрагент
		             |			ИЗ
		             |				ВТ_ПлатежныеПоручения)");

	ПакетДокументов = ЗапросДокументов.ВыполнитьПакет();

	МассивДокументов = ПакетДокументов[1].Выгрузить();
	МассивБанковскихСчетов = ПакетДокументов[2].Выгрузить();
	МассивБанковскихСчетов.Индексы.Добавить("Контрагент");
	
	Для Каждого ПлатежноеПоручение Из МассивДокументов Цикл 

		СтрокиБанковскихСчетов = МассивБанковскихСчетов.НайтиСтроки(Новый Структура("Контрагент", ПлатежноеПоручение.Контрагент));

		Если СтрокиБанковскихСчетов.Количество() = 1 Тогда 

			НачатьТранзакцию();
			Попытка

				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ПлатежноеПоручение");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ПлатежноеПоручение.ПлатежноеПоручение);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();

				ПлатежноеПоручениеОбъект = ПлатежноеПоручение.ПлатежноеПоручение.ПолучитьОбъект();
				
				ПлатежноеПоручениеОбъект.СчетКонтрагента = СтрокиБанковскихСчетов[0].БанковскийСчет;

				ПлатежноеПоручениеОбъект.Записать(РежимЗаписиДокумента.Запись);

				ТекстСообщения = СтрШаблон(НСтр("ru = 'Заполнен банковский счет контрагента в документе %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПлатежноеПоручение.ПлатежноеПоручение);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();
				ИмяСобытия = СтрШаблон(НСтр("ru = '%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Документ.ПлатежноеПоручение");
				ИнформацияОшибки = НСтр("ru = 'Не удалось изменить документ '") + ПлатежноеПоручение.ПлатежноеПоручение + НСтр("ru = ' по причине ""'") + ОписаниеОшибки() + """.";
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, "Документ.ПлатежноеПоручение",
				ПлатежноеПоручение.ПлатежноеПоручение, ИнформацияОшибки);
				ОбщегоНазначения.СообщитьПользователю(ИнформацияОшибки);

			КонецПопытки;
			
		Иначе

			ТекстСообщения = СтрШаблон(НСтр("ru = 'Заполните банковский счет контрагента в документе %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПлатежноеПоручение.ПлатежноеПоручение);
			ЗаписьЖурналаРегистрации(
				ТекстСообщения,
				УровеньЖурналаРегистрации.Информация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли