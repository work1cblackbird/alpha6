// Модуль документа "Платежное поручение"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Документы.ПлатежноеПоручение.ОрганизацияПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			ИННПолучателя = Контрагент.ГоловнойКонтрагент.ИНН;
		Иначе
			ИННПолучателя = Контрагент.ИНН;
		КонецЕсли;
		КПППолучателя	= Контрагент.КПП;
		СчетКонтрагента	= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Контрагент);
	КонецЕсли; 
	
	ЗаполненНаОснованииДокумента = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства,
		"ВыполненоЗаполнениеНаОсновании",
		""
	);
	
	// изменим ставку НДС, если нужно
	Если ОбработкаСобытийОбъектаСервер.ВозможенВводНаОсновании(ЭтотОбъект, ДанныеЗаполнения) Тогда
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(ДанныеЗаполнения, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И НЕ ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И НЕ (ЗаполненНаОснованииДокумента = "ЗаявкаНаРасходДС"
		ИЛИ ЗаполненНаОснованииДокумента = "ЗаказПоставщику"
		ИЛИ ЗаполненНаОснованииДокумента = "ЗаказПоставщикуНаАвтомобиль"
		ИЛИ ЗаполненНаОснованииДокумента = "СчетОтПоставщикаЗаАвтомобили"
		ИЛИ ЗаполненНаОснованииДокумента = "СчетОтПоставщика")
		И (ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Контрагенты")) Тогда 
		
		// Получим задолженность по сделке
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Контрагент",				ДанныеЗаполнения.ДоговорВзаиморасчетов.Владелец);
		СтруктураОтбора.Вставить("ДоговорВзаиморасчетов",	ДанныеЗаполнения.ДоговорВзаиморасчетов);
		СтруктураОтбора.Вставить("ДокументРасчетов",		ДанныеЗаполнения);
		
		тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(
			СтруктураОтбора,
			ТекущаяДатаСеанса()
		);
		
		Если ВалютаДокумента = ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
			ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				тзДолги.Итог("Сумма"),
				ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
				ДанныеЗаполнения.КурсДокумента,
				ВалютаДокумента,
				КурсДокумента
			);
		ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
		Иначе
			ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				тзДолги.Итог("СуммаУпр"),
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				ДанныеЗаполнения.КурсВалютыУпр,
				ВалютаДокумента,
				КурсДокумента
			);
		КонецЕсли;
		
		Если ОстатокПоСделке < 0 Тогда
			СуммаДокумента = -ОстатокПоСделке;
		Иначе
			СуммаДокумента = ОстатокПоСделке;
		КонецЕсли; 
		
		Документы.ПлатежноеПоручение.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ВидПлатежа) Тогда
		ВидПлатежа = "Электронно";
	КонецЕсли;
	Если ОчередностьПлатежа = 0 Тогда
		ОчередностьПлатежа = 5;
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетКонтрагента) И ВалютаДокумента <> СчетКонтрагента.ВалютаДенежныхСредств Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Валюта документа (<%1>) не соответствует валюте банковского счета (<%2>).'"),
				ВалютаДокумента,
				СчетКонтрагента.ВалютаДенежныхСредств
			),
			ЭтотОбъект,
			,,Отказ
		);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетОрганизации) И ВалютаДокумента <> СчетОрганизации.ВалютаДенежныхСредств Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Валюта документа (<%1>) не соответствует валюте банковского счета (<%2>).'"),
				ВалютаДокумента,
				СчетОрганизации.ВалютаДенежныхСредств
			),
			ЭтотОбъект,
			,, Отказ
		);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ВложеннаяТаблица.СуммаЗаказа) КАК СуммаЗаказа,
	|	СУММА(ВложеннаяТаблица.СуммаЗаказаУпр) КАК СуммаЗаказаУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.СуммаОстаток КАК СуммаЗаказа,
	|		ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаЗаказаУпр
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(&МоментВремени, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-РасчетыСКонтрагентамиОстатки.СуммаОстаток,
	|		-РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСКонтрагентами.Остатки(&МоментВремени, Заказ ССЫЛКА Документ.ЗаказПоставщикуНаАвтомобиль И Заказ = &Заказ) КАК РасчетыСКонтрагентамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ВзаиморасчетыКомпанииОстатки.СуммаОстаток,
	|		-ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&МоментВремени, Сделка ССЫЛКА Документ.ЗаказПоставщикуНаАвтомобиль И Сделка = &Заказ) КАК ВзаиморасчетыКомпанииОстатки) КАК ВложеннаяТаблица
	|");
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Заказ",         ДанныеЗаполнения);
	
	СуммаСделки    = 0;
	СуммаСделкиУпр = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СуммаСделки    = Выборка.СуммаЗаказа;
		СуммаСделкиУпр = Выборка.СуммаЗаказаУпр;
		
	КонецЕсли;
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделки,
			ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	Иначе
		СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделкиУпр,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Дата, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.СуммаДокументаПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль()

// Производит заполнение объекта на основании документа "Счет от поставщика за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Счет на оплату"
	Возврат ОбработкаЗаполнения_СчетОтПоставщика(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили()

// Производит заполнение объекта на основании документа "Заявка на расход ДС"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРасходДС(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ЗаявкаНаРасходСРС Тогда
		СчетОрганизации = ДанныеЗаполнения.СтруктурнаяЕдиница;
	КонецЕсли;
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	Документы.ПлатежноеПоручение.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРасходДС()

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВложеннаяТаблица.СуммаЗаказа) КАК СуммаЗаказа,
	|	СУММА(ВложеннаяТаблица.СуммаЗаказаУпр) КАК СуммаЗаказаУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.СуммаОстаток КАК СуммаЗаказа,
	|		ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаЗаказаУпр
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментВремени, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-РасчетыСКонтрагентамиОстатки.СуммаОстаток,
	|		-РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСКонтрагентами.Остатки(&МоментВремени, Заказ ССЫЛКА Документ.ЗаказПоставщику И Заказ = &Заказ) КАК РасчетыСКонтрагентамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ВзаиморасчетыКомпанииОстатки.СуммаОстаток,
	|		-ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&МоментВремени, Сделка ССЫЛКА Документ.ЗаказПоставщику И Сделка = &Заказ) КАК ВзаиморасчетыКомпанииОстатки) КАК ВложеннаяТаблица
	|");
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Заказ",         ДанныеЗаполнения);
	
	СуммаСделки    = 0;
	СуммаСделкиУпр = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СуммаСделки    = Выборка.СуммаЗаказа;
		СуммаСделкиУпр = Выборка.СуммаЗаказаУпр;
		
	КонецЕсли;
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделки,
			ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
	Иначе
		СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделкиУпр,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Дата, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

// Производит заполнение объекта на основании документа "Счет от поставщика"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщика(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим сумму предоплаты
	Запрос = Новый Запрос;
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДанныеЗаполнения.ДоговорВзаиморасчетов) Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаПриход КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрПриход КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(,,,
		|		Контрагент = &Контрагент
		|		И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|		И (ДокументРасчетов = &Сделка ИЛИ ДокументРасчетов.ДокументОснование = &Сделка ИЛИ ДокументРасчетов.ДокументОснование = &Заказ)
		|	) КАК ВзаиморасчетыКомпанииОстаткиИОбороты
		|";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаПриход КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрПриход КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(,,,
		|		Контрагент = &Контрагент
		|		И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|		И (Сделка = &Сделка ИЛИ Сделка.ДокументОснование = &Сделка)
		|	) КАК ВзаиморасчетыКомпанииОстаткиИОбороты
		|";
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент",            ДанныеЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеЗаполнения.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Сделка",                ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Заказ",                 ДанныеЗаполнения.ДокументОснование);
	тзОплаты = Запрос.Выполнить().Выгрузить();
	
	ДокументОснованиеСуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СуммаДокумента = ДокументОснованиеСуммаДокумента
			- РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзОплаты.Итог("Сумма"),
			ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Дата, ВалютаДокумента, Дата, РежимОкругления.Окр15как20);
	Иначе
		СуммаДокумента = ДокументОснованиеСуммаДокумента
			- РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзОплаты.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Дата, ВалютаДокумента,
			?(ЗначениеЗаполнено(КурсДокумента), КурсДокумента, Дата), РежимОкругления.Окр15как20);
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщика()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
